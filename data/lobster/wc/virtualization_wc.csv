ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,virtualization,Virtualization,Extreme WebAssembly 2: the sad state of WebAssembly tail calls,https://medium.com/leaningtech/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87,extreme webassembly sad state webassembly tail call,extreme webassembly sad state webassembly tail call cheerpx cheerpj previous article series presentation questionable take support webassembly tail call previous article chrome support wasm tail call end tail call status tail call status spidermonkeyfirefox related issue spidermonkey tail call status javascriptcoresafari created one conclusion web vms bonus content previous post series bonus content hello world cheerpx repo http cheerpxdemosleaningtechcompublicdeploycxjs http twittercomalexpignotti get touch twitter medium ask,extreme webassembly sad state webassembly tail callsno reference firefox intendedhere leaning technology use webassembly daily create unique seemingly impossible technology like cheerpx webassembly virtual machine designed safely run arbitrary library application browser cheerpj solution compile run java application browser cheerpx particular certainly complex jit engine written webassembly quite possibly single advanced webassembly project running browserin order efficiently run arbitrary code webassembly overcome sort limitation caused either current state wasm standard browser implementation interested reading magic behind cheerpx published information previous article series presentation back february wasm sf meetupyuri iozzelli discussing internals cheerpx engine wasm san francisco meetupwebassembly amazing technology incredibly disruptive potential however probably due young age still many rough edgesto clear referring questionable take security model actual limitation bug encountered development process cheerpxlet talk bit tail callssupport webassembly tail callsas discussed previous article tail call critical efficiently support execution arbitrary code particular support indirect jump keeping consistent call stack webassembly tail call postmvp feature currently phase implementation phase specification introduces two new opcodes returncall returnindirectcall among major browser chrome support wasm tail call enabling explicitly jsflags experimentalwasmreturncall flag hope moved experimental webassembly flag chrome flag end browser seems taken implementation phase standard process literally thoughtail call status first sight tail call well implemented using abusing generated code limitation thoughin particular follows twotier jit compilation strategy webassembly fast simple baseline compiler called liftoff advanced slower optimizing compiler called turbofan idea baseline compiler order magnitude faster optimizing compiler give decent executable code soon speed startup time wasm code application start turbofan crunching instruction graph background eventually emit optimized native code problem liftoff support wasm tail call compiler give silently upgrade turbofan make sense term robustness make problem quite opaquecareful use twotiered system would useful cheerpx generate wasm module notice chunk code run several time notice code become hot need actually generate wasm bytecode take time intended investment compiled code much faster running interpret recoup time spent compiling unfortunately newly generated wasm bytecode used browser must compile another time generate native code silent upgrade turbofan introduces significant latency delay time finally see return time invested jit compiler using baseline compiler get version code sooner could easily give nice performance boost architecture fair chrome developer seems committed getting issue fixed let wait seedon feel bad confused multiple layer jitting sometimes welltail call status spidermonkeyfirefoxit great kind proud firefox user myselfthe progress feature tracked update last month see related issue bugzilla major abi mismatch stopping moving pity seems another way firefox could lose ground competition moreover actually seen performance wasm spidermonkey superior past would love see cheerpx behaves firefoxnow obvious argument firefox fo could implement feature community benefit actually contributed patch spidermonkey past first case truly seems plausible path follow full rework wasm abi reasonably done u external developer something core spidermonkey team need work onif spidermonkey dev reading please get touch happy help much get feature certainly ourselvestail call status javascriptcoresafarii must admit understanding development process safari clearfrom see tail call supported safari seemed public bug report dedicated issue created one sure much priority apple work postmvp feature upgrade webassembly certainly bet safari supporting tail call sooner firefox would happy proven wrongagain dev safariwebkitjavascriptcore reading get touch happy helpconclusionstail call extraordinarily useful implementing virtual machine functional language webassembly tail call currently phase implementation phase next step phase would achieve full standardization featureunfortunately one requirement move phase phase web vms implementing feature serversidecommand line engine count microsoft edge count well since reskinned chromiumfor feature move forward either firefox safari need make progress help get done appreciatedbonus content previous post series shared early public demo cheerpx repl running browser find much polished version demo please note work chromechromium explicitly enabling tail call instruction included page new version includes standard package python everything shipped ubuntu package backspace finally work bonus content hello world cheerpxbut also want share something ready get hand dirty going describe run first hello world using cheerpxa linux host assumed also find readymade repo convenience use repo run make skip start favorite local http sectionlet start something basic create new directory mkdir cheerpxhellocd cheerpxhellocreate vanilla c hello world nothing fancy helloc include stdioh int main printf hello world n return compile executable sorry support code foreseeable futuregcc helloc hellothis dynamically linked executable need couple library run instruction accurate ubuntu may differ distro may also completely skip wish adding static flag compilation commandmkdir p libcp need basic html page let cheerpx magic doctype html html lang en style head meta charset title cheerpx hello world title script src http cheerpxdemosleaningtechcompublicdeploycxjs script head body style pre id console style pre script async function cxready cx cxsetconsole documentgetelementbyid console cxrun hello function cxfailed e consolelog cheerpx could start reason e cheerpxappcreate cxready cxfailed script body html start favorite local http server visit html page createdhttpserver p chromiumbrowser incognito jsflags experimentalwasmreturncall http minor miracle happened front eyesmagic work also code compiled c anything actually although library might required feel free experiment keep mind released polished product hack something nice let know http twittercomalexpignottiget touch want know amazing impossible product make follow u twitter medium also eager hear opinion feel tech mind cool use case question ask
2,Lobsters,virtualization,Virtualization,Docker & WSL 2 - The Future of Docker Desktop for Windows,https://www.docker.com/blog/docker-hearts-wsl-2/,docker wsl future docker desktop window,,one docker goal always provide best experience working container desktop environment experience close native possible whether working window mac linux spend lot time working software stack provided microsoft apple achieve part work closely monitoring window subsystem linux wsl since introduced see could leverage product original wsl impressive effort emulate linux kernel top window foundational difference window linux thing impossible implement behavior native linux meant impossible run docker engine kubernetes directly inside wsl instead docker desktop developed alternative solution using hyperv vms linuxkit achieve seamless integration user expect love today microsoft announced wsl major architecture change instead using emulation actually providing real linux kernel running inside lightweight vm approach architecturally close linuxkit hyperv today additional benefit lightweight tightly integrated window docker provide alone docker daemon run well great performance time take cold boot dockerd running wsl around second developer machine excited technology happy announce working new version docker desktop leveraging wsl public preview july make docker experience developing container even greater unlock new capability wsl work window home edition docker desktop collaborating microsoft part shared effort make docker desktop best way use docker window microsoft gave u early build wsl could evaluate technology see fit product share feedback missing broken started prototyping different approach ready share little bit coming next month docker desktop future replace hyperv vm currently use wsl integration package package provide feature current docker desktop vm kubernetes setup automatic update transparent http proxy configuration access daemon window transparent bind mount window file integration package contain server side component required run docker kubernetes well cli tool used interact component within wsl able introduce new feature docker desktop linux workspace linux workspace using docker desktop today vm running daemon completely opaque interact docker kubernetes api window run anything within vm except docker container kubernetes pod wsl integration still experience seamless integration window linux program running inside wsl also able huge impact developer working project targeting linux environment build process tailored linux need maintaining linux window build script anymore example developer docker work linux docker daemon window using set tool script developer linux machine developer working docker daemon using docker desktop technical preview wsl v code remote also bind mount wsl support inotify event nearly identical io performance native linux machine solve one major docker desktop pain point ioheavy toolchains nodejs php web development tool benefit greatly feature combined visual studio code remote wsl docker desktop linux workspace make possible run full linux toolchain building container local machine ide running window performance wsl microsoft put huge amount effort performance resource allocation vm setup use dynamic memory allocation schedule work host cpu consuming little much memory requires within limit host provide collaborative manner towards process running host docker desktop leverage greatly improve resource consumption use little much cpu memory need cpumemory intensive task building container run much faster today addition time start wsl distribution docker daemon cold start blazingly fast within development laptop compared ten second current version docker desktop open door batterylife optimization deferring daemon startup first api call automatically stop daemon running container zeroconfiguration bind mount support one major issue user today docker desktop especially enterprise environment reliability window file bind mount current implementation relies samba window service may deactivated blocked enterprise gpo blocked party firewall etc docker desktop wsl solve whole category issue leveraging wsl feature implementing bind mount window file provide work experience box technical preview docker desktop wsl thanks collaboration microsoft already hard work implementing vision written core functionality deploy integration package run daemon expose window process support bind mount port forwarding technical preview docker desktop wsl available download july run side side current version docker desktop continue work safely existing project running latest window insider build able experience first hand coming month add feature wsl architecture used docker desktop everyone running compatible version window
3,Lobsters,virtualization,Virtualization,It's Talos all the way down,https://www.talospace.com/2020/06/its-talos-all-way-down.html,talos way,void linux power see triumph failed skiboot petitboot build skiboot petitboot direct serial connection download qemu prebuilt download current talos ii pnor image download extractor tool void linux power site totally something stupid xive vm interrupt controller,still ca nt bear sticker shock talos ii even itty bitty blackbird machine ca nt emulate one instead decide like lot save penny qemu offer machine model baremetal powernv profile raptor system openpower design intended linux ie powervm machine belong using talos ii firmware image mostly one snag mentioned boot machine qemu bring operating system emulation article prove work bringing void linux power hi daniel variety configuration setup like might enough test software opensource package build run openpower even nt one yet future article talk boot code metal port favourite o build unikernel purpose article assume audience nt familiar openpower terminology usual readership kindly humour emulation imperfect emulating real raptor family system icky pc qemu emulate ie armbased baseboard management controller act service processor provides video framebuffer qemu also emulate powernv system nt time mean lowest level actually simulated ca nt watch raptor pretty hostboot display example barest function bmc simulated enough allow bringup including framebuffer fact hardware profile use general match real raptor system either virtually plugging pci device give u necessary functionality though course none peripheral device raptor system raptorproprietary finally even though tagged entry kvm kvm currently nt work right qemu powernv machine model even though pretty sure technically possible sadly tried vain could never get kvmhv happy ended kernel panicking machine kvmpr see triumph failed meantime naturally everything blackbird well writing article special acceleration system right first order business first order business emulator get rom fortunately one going bust pirating set open platform remember two piece required skiboot petitboot live system pnor flash skiboot contains opal openpower abstraction layer come bmc turned main power started power cpu selfboot engine ipl initial program load hostboot secondstage poweron sequence hostboot completes chain skiboot initializes pcie host bus controller phbs provides basic hardware call needed guest kernel support platform think something like overgrown bios lowest firmware level openpower system qemu currently support emulating skiboot life service kernel immediately start one initial payload bootloader petitboot also stored firmware petitboot small linux root skiroot act boot menu finding bootable volume attached device network found one select one chain start main o skiboot provide platform service via opal final guest system shut restarted firmware petitboot always available come really handy trying system recovery first best dedicated way build skiboot petitboot opensource process relatively well documented automated know openpower machine anyhow nt real openpower machine need crosscompiler linux distros offer package nowadays keep mind look like building tiny linux distro well exactly advantage fool around firmware leisure requires bit investment disk space time second way assumes casual interest would prefer go something prefab possible know friend raptorfamily system extract necessary component right bmc prompt log bmc ssh via direct serial connection type pflash see list partition stored pnor flash one want payload contains skiboot bootkernel contains skiroot petitboot exact address may vary system system firmware firmware root bmc pflash p payload r tmppnorpayload reading tmppnorpayload root bmc pflash p bootkernel r tmppnorbootkernel reading tmppnorbootkernel skip first page avoid wrapping around partition pnorpayload actually compressed need uncompressed prior use root bmc cd tmp root bmc tmp xz pnorpayload skibootlid finally scp skibootlid pnorbootkernel desired system bmc admittedly talked length two way wo nt get firmware let talk third method way ie download currently irregularity raptor present skiboot build purpose boot emulating single typo use boot emulated guest simply panic guest go bootloop emulating multiple cpu necessary need larger number pcie device undoubtedly qemu deficiency corrected future release meantime care playing around using single terminal raptor build either bmc flash downloaded suffice however intend emulate smp system download qemu prebuilt skibootlid use instead petitboot extract directly raptor pnor image assuming nt get using process download current talos ii pnor image decompress shellupgrade directory see pnor image uncompress leaving filename like download pnorex extractor tool perl one people run pnor image pnorex version pnor archive entry extracting payload offset xz format image wrote successfully extracting bootkernel offset elf executable image wrote successfully extracted partition successfully using raptor skiroot uncompress pnorpayload skirootlid xz pnorpayload skibootlid skirootlid first example either raptor qemu pnorbootkernel folder grab iso want boot used prefab one daniel offer void linux power site since know boot fine openpower hardware first example let simple example booting void cd image using serial port qemu command line cpu nographic bios skibootlid kernel pnorbootkernel device drive mediacdrom ifnone device idecd configures singleprocessor system ram graphic intel ahci host controller single cdrom drive attached serial output go terminal go little like skiboot chaining petitboot ignore error lot since platform still incomplete take little bit time decompress kernel much slower would regular system notice single device attached three available pcie host bridge single cpu ie host controller nt love vendor code intel petitboot bootable choice appear cursor starred option press e autoboots need tell void console onboard serial port otherwise us vga console sure whose bug add end cursor ok hit returnenter couple time boot successful login emulated baby tadaa rudely pull plug qemu session press ctrla x qemu terminated let load would like add video card ethernet card usb controller existing system turismo chip offer enough phbs three pci endpoint solve problem easy add another processor point require qemu skiboot use skibootlid appears remainder article use tuntap networking example assumes already configured change netdev setting want use different mean bridging nic example keep ahci host controller still display debug output terminal us qemu emulated vga console instead add good old realtek nic usb mouse keyboard attached qemu xhci usb controller cpu smp serial mon stdio device vga device netdev tap scriptno downscriptno device device qemuxhci device usbmouse device usbkbd bios skibootlid kernel pnorbootkernel drive mediacdrom ifnone device idecd let spin sucker like superman cape dryer reason keep serial output extra cpu add around extra minute get petitboot notice six phbs available three per cpu enough virtual pci slot peripheral require petitboot show framebuffer serial terminal work also see probing bridged ethernet tap see boot way proving ethernet device working whichever use boot message go use framebuffer console start void cursoring selecting starred option thus also proving usb device work booted void demonstrate pci card system attached peripheral number cpu record typing show spectre status mitigated hardware acceleration starting installer wo nt install anything nt configured storage install qemu option leave exercise reader switch emulated system sforza cpu support six pci endpoint get six phbs mean single cpu enough basic configuration without adding additional startup time qemu command line merely return single processor change machine cpu ie cpu serial mon stdio device vga device netdev tap scriptno downscriptno device device qemuxhci device usbmouse device usbkbd bios skibootlid kernel pnorbootkernel drive mediacdrom ifnone device idecd run way faster emulation overhead le let totally something stupid last parlour trick run configuration many socket qemu let u hold right four note singlethreaded core still much le powerful even basic blackbird cpu smp serial mon stdio device vga device netdev tap scriptno downscriptno device device qemuxhci device usbmouse device usbkbd bios skibootlid kernel pnorbootkernel drive mediacdrom ifnone device idecd four emulated cpu startup took seven minute start petitboot talos ii patience lesser workstation work see watchdog complaining length time opal call taking call reset xive vm interrupt controller chip four core impossibly slow beefy enough system like another incidentally power isa emulation qemu allows smt basic enough get bootup sequence least heat death universe like listening cooling fan see happens try emulate biggest baddest talos ii adding accel tcg threadmulti smp qemu command line pretty buy openpower machine instead emulating one
4,Lobsters,virtualization,Virtualization,Fakecracker: NetBSD as a Function Based MicroVM,https://imil.net/blog/posts/2020/fakecracker-netbsd-as-a-function-based-microvm/,fakecracker netbsd function based microvm,aws published open source tool called firecracker kvm qemu well put article netbsd sailor docker security chroot config virtio multiboot bench nevertheless good tutorial subject nginx sailor sailor update makefs,november aws published open source tool called firecracker mostly virtual machine monitor relying kvm small sized linux kernel stripped version qemu baffled speed virtual machine would fire run service whole process compared container safer share kernel resource separate dedicated virtual machine want learn firecracker internals well put article liked idea thought netbsd would perfect match kind target kernel entire o stripped easily know wrote wannabecontainer project called sailor goal create containertype chroots run service ala docker use project need website seeing right actually running sailor ship fun really talk security chroot firecracker solution seemed right matter yet overall netbsd boot process bit long taste exactly significantly improve netbsd boot speed well two major win reduce number kernel feature bypass bootloader first point pretty easy accomplish minimal kernel config include makeoptions copt o makeoptions usessp maxusers estimated number user option consdevname com option consoverride option multiboot option hardware clock many min west gmt option pipesocketpair smaller slower pipe include filesystem ffs ufs filesystem kernfs kern option ffsnosnapshot ff snapshot support option inet ip icmp tcp udp config netbsd root type option emulation option wskernelfgwscolgreen option wsdisplaycompatsyscons emulate ioctls option pcdisplaysoftcursor pci mainbus bus mainbus isa cga mda ega hga wsdisplay pcdisplay console isa port irq standard pc serial port cinclude pseudodevice f file system snapshot device pseudodevice vnd disklike interface file pseudodevice bpfilter berkeley packet filter pseudodevice loop network loopback pseudodevice tun network tunneling tty pseudodevice pty pseudoterminals pseudodevice clockctl user control clock subsystem pseudodevice wsmux mouse keyboard multiplexor pseudodevice ksyms virtio pci dev function virtio pci device ld virtio virtio disk device vioif virtio virtio network device note absolutely need virtio driver virtio fastest way handling device virtualized environment second point simple seems kernel must able loaded blue ie without need boot loader netbsd possible port thanks multiboot kernel option unfortunately today option supported port bench nevertheless rest article assume working bit frustrating yet really problem mostly package available platform well covering prepare environment cross compiling tool kernel instead good tutorial subject note cross compile netbsd kernel bit linux system actually nevertheless need netbsd possibly virtual machine order create root disk used service want run tl dr command use build kernel forget build tool first buildsh u j u kernelfirecracker try kernel booting correctly like sudo kvm kernel nographic kernel ask root filesystem location yet exit nographic mode pressing ctrla x real service started setup nginx web server start without rcd framework gain precious millisecond create root filesystem use sailor cover sailor usage documentation say following must done netbsd host first create ship file definition cat examplestestconf shipnamefakecracker shippath home srcsailor shipname shipbins binsh sbininit usrbinprintf sbinmount sbinmountffs binls sbinmknod sbinifconfig usrbinnc usrbintail package nginx runatbuild printf creating devicesn runatbuild cd dev sh makedev allmd create custom rc file interpreted microvm call init cat shipsfakecrackeretcrc binsh export home export pathsbin bin usrsbin usrbin umask mount ifconfig ifconfig printf nstarting nginx usrpkgsbinnginx echo done printf ntesting web server n printf head nc n echo tail f varlognginxaccesslog minimal fstab mount command succeed cat shipsfakecrackeretcfstab ffs rw create ship sudo e sailorsh build examplestestconf update told makefs utility make following step much easier instead vndconfig newfs mount rsync simply makefs imagefile directory thanks mlelstv record detailed step image creation anyway create empty image dd ifdevzero ofrootimg make available block device create filesystem sudo vndconfig rootimg sudo newfs sudo mount mnt simply rsync ship newly created image sudo rsync av fakecracker mnt umount unbind image block device copy kvm host sudo vnconfig u scp rootimg homeimilmnthdsrcnetbsdfirenetrootbaseimg fire microvm root location network property sudo kvm kernel append nographic drive filerootbaseimg ifvirtio netdev typetap device virtionetpci voila
5,Lobsters,virtualization,Virtualization,"Haskell-inspired ""lifting into structure"" for individual shell commands within a Docker context",https://bytes.yingw787.com/posts/2020/06/15/lifting_into_docker/,haskellinspired lifting structure individual shell command within docker context,experiment using docker server development workflow munif tanjim tinydevcrm documentation forum answer stack overflow answer used inspiration blog post,could say continuation experiment using docker server development workflow end though found deployment production aws far complex model allowed ended using conventional model dockercompose model system locally build dockerfile image ship remote docker registry contrast using adjusted version prior workflow develop frontends mostly due usage hugo static website generator doublechecked cloudfront something like different hugo bundle production right created different time problem hugo still primarily workinprogress project breaking change made different hugo version impact change version different hugo theme encountered difficulty upgrading dependency version personal blog already request help maintainer munif tanjim graciously walked upgrade process even created diffs felt embarrassed needed help nt really want go experience creating tinydevcrm documentation working docker tinydevcrm learned command exec set dockerfile cmd allows pipe command run runtime combined independent build process lock place set fixed dependency version separately project let walk project see mean install following system dependency docker using docker version docker version build make using make version gnu make built copyright c free software foundation inc license gnu gpl version later http gnuorglicensesgplhtml free software free change redistribute warranty extent permitted law create directory following file cd pathtodir tree dockerfile makefile dockerfile add base docker image reference label build argument debian label maintainer set build argument arg debianfrontendnoninteractive dockerfile update package archive download curl note updating package archive update system dependency container still mirror base image dependency upgraded get package list important getting curl run aptget update install build dependency run aptget install curl dockerfile install runtime dependency see golang took cloudnative development single binary need curl app install golang run curl http run tar c usrlocal xvzf env path path usrlocalgobin install hugo important lock version hugo since still development version breaking change use l follow redirects github release run curl l http run dpkg dockerfile set default home directory update directory permission using user first nonroot user system per forum answer setup workdirectory run mkdir app workdir app setup permission run chown r app dockerfile set default command run exec order pas command runtime run command cmd exec final dockerfile look something like debian label maintainer set build argument arg debianfrontendnoninteractive get package list important getting curl run aptget update install build dependency run aptget install curl install golang run curl http run tar c usrlocal xvzf env path path usrlocalgobin install hugo important lock version hugo since still development version breaking change use l follow redirects github release run curl l http run dpkg setup workdirectory run mkdir app workdir app setup permission run chown r app run command cmd exec use make makefiles order template command easier order consistently pas cli argument docker run also bit safer transportable using bash makefile declare enviroment variable declaring awsprofile omitted cloudformation lifecycle management appversion defining docker image version commit hash gitreporoot define absolute path git repository root nt like relative path dockerimagename docker image name hugoport define port localhost expose container userid groupid run docker container specific user group order keep directory resource usergroup avoid sudo phony enforces make target run irrespective filesystem state see stack overflow answer detail usrbinenv make phony version check setup run start export awsprofile tinydevcrmuser export appversion shell git revparse short head export gitreporoot shell git revparse showtoplevel export dockerimagename tinydevcrmapidocs export hugoport export userid shell id u whoami export groupid shell id g whoami makefile add setup target order setup repository first cloning downloading hugo theme need nt exist installing hugo module required hugo theme order run properly note running git clone second step referencing destination directory appthemesdocuapi gitreporoot themesdocuapi app docker container working directory workdir downloading dependency within docker context even though usage v gitreporoot app still appear local directory though cloned local system use custom fork styling purpose setup docker build file gitreporoot dockerfile tag dockerimagename appversion gitreporoot docker run v gitreporoot app nethost u userid groupid dockerimagename appversion git clone http githubcomtinydevcrmdocuapi appthemesdocuapi true docker run v gitreporoot app nethost u userid groupid dockerimagename appversion hugo mod get u makefile create run target run target nice lift command line argument insert directly docker run command still enabling thing like nethost unifying docker network system network ensuring localhost docker localhost system connecting docker volume together passing flag like passing aws config credential directory usage awscli within docker context using system secret need order require dependency system possible http first argument run ifeq run firstword makecmdgoals use rest argument run runargs wordlist word makecmdgoals makecmdgoals turn donothing target eval runargs endif lift command docker run context run docker run v gitreporoot app v aws rootaws nethost u userid groupid dockerimagename appversion runargs add various target may need commonly reference templated hugo server command run hugo server often involves usage recursive make within file might best way thing would love hear better way command passed wrapped double quote otherwise might interpreted part make command instead passed wholesale start setup make run hugo server p hugoport final makefile look something like usrbinenv make phony version check setup run start export awsprofile tinydevcrmuser export appversion shell git revparse short head export gitreporoot shell git revparse showtoplevel export dockerimagename tinydevcrmapidocs export hugoport export userid shell id u whoami export groupid shell id g whoami use custom fork styling purpose setup docker build file gitreporoot dockerfile tag dockerimagename appversion gitreporoot docker run v gitreporoot app nethost u userid groupid dockerimagename appversion git clone http githubcomtinydevcrmdocuapi appthemesdocuapi true docker run v gitreporoot app nethost u userid groupid dockerimagename appversion hugo mod get u http first argument run ifeq run firstword makecmdgoals use rest argument run runargs wordlist word makecmdgoals makecmdgoals turn donothing target eval runargs endif lift command docker run context run docker run v gitreporoot app v aws rootaws nethost u userid groupid dockerimagename appversion runargs start setup make run hugo server p hugoport nt terribly large amount work lot easier say using bazel wanted use tinydevcrm eventually decided seeing much work building source would entail also useful integrating debugger needing expose process stdout stream example running python ipdb managepy runserver django process hit pdb trace starting django process mean without stdout stream available either ca nt use ipdb pdb within docker somehow elide first pdb trace attach docker process manually adding pdb trace hitting server process request see comfortable third option still problem stack usually use ctrlc order exit docker container resulting merely stopping instead deleting otherwise bad like think keep haskell philosophy lifting structure found applicable outside one programming language find tinydevcrmapidocs used inspiration blog post
6,Lobsters,virtualization,Virtualization,The CBE series #3 - A Linux VM on a CBE device,https://genodians.org/m-stein/2020-06-12-cbe-linux-vm,cbe series linux vm cbe device,cbe series linux vm cbe device martin stein genode cbe series prerequisite sculpt preparing cbe image file initializing cbe checking cbe preparing vm using cbe setting cbevfs server installing linux guest vm using management shell control cbe limitation,cbe series linux vm cbe device june martin stein genode release note teased using cbe running encrypted vms sculpt article guide setting cbe device installing using linux vm controlling cbe online like creating snapshot resizing device rekeying cbe series series article describes feature integration consistent block encrypter cbe detail cbe blockdevice encryption component core logic entirely written spark combine multiple technique ensure confidentiality integrity consistency freshness block data efficiently furthermore whole core logic far pass gnatprove mode flow case familiar basic structure cbe recommend introduction reading article series far source code github note branch one used package tutorial mark cbe mainline based recent genode package tutorial built genode compatible recent sculpt version prerequisite follow guide described article need sculpt installation hand least gib free space spare used file system want able inspect log output cbe tool reason enable log display upperright corner leitzentrale sculpt furthermore need internet connection establish connection using network control upperright corner leitzentrale order able deploy required package package source genodelabs cnuke must enabled depot selection window manager required already one deployed may use themed wm select depot genodelabs gui themed wm install installation done wire window manager follows gui focus keyboard focus gui system gui server report shape pointer shape report clipboard global clipboard rom clipboard global clipboard also need font server nt one already may install font f package selecting depot genodelabs gui font f install integrating package following route finally use nouxsystem package system shell nt package deployed already select depot genodelabs tool nouxsystem install integrate package using following route gui themed wm file system config writeable system configuration file system report readonly system report file system target used file system file system font font f rom vimrc default vim configuration rom clipboard themed wm report clipboard themed wm finally may want save setup copying deployment config persistant storage using nouxsystem terminal noux mkdir p noux cp configmanageddeploy preparing cbe image file cbe device backed disk image file device provide virtual block device vbd gib size user mib worth sparse block available storing snapshot install linux vm device let start switching runtime view pressing nouxsystem prompt following command create directory holding cbe disk image file root directory used file system noux mkdir rwcbe directory place move deploy another component cbe f instance within leitzentrale press package contains preconfigured chroot component use limit filesystem access cbe tool afore created directory package installed selecting depot cnuke cbe cbe f install use following route package administration regarding cbe shall use deployed chroot environment consequently need another system shell routed chroot file system could use second nouxsystem instance nouxsystem meant provide minimal setup therfore miss tool like dd necessary tutorial created cbe shell package fullfills requirement install selecting depot cnuke cbe cbe shell install route package follows gui themed wm file system cbe cbe f file system font font f rom clipboard themed wm report clipboard themed wm region map custom virtual memory object deploying greeted terminal featuring cbe prompt background cbe file system mounted cbe new environment navigating directory cbe shell executing l show empty directory going use dd create disk image file cbe dd ifdevzero ofcbecbeimg note matter whether sparse file command created gib disk image file enough store anticipated cbe device gib virtual block device mib sparse block note need space storing additional internal meta data disk image file need bit larger let check size disk image cbe l l cbe rwx root jan cbeimg finally remove cbe shell component graph leitzentrale initializing cbe first cbe tool want use cbeinit component purpose create empty cbe device initializing cbe meta data backend storage package configured create cbe device vbd gib mib worth sparse block using cbeinit component install package selecting depot cnuke cbe cbe init install need one route set short see following message system log runtime child cbeinit exited exit value remove component runtimegraph leitzentrale cbe fully prepared may wondered nt provide key passphrase initialization moment trustanchor entity system mere placeholder meant replaced proper implementation productive context placeholder using hardcoded value private key value simply xord counter produce symmetric key used cryptographic operation checking cbe make sure newly initialized cbe indeed working state let check deploy cbecheck component selecting depot cnuke cbe cbe check install setting route cbecheck tool check hash data meta data block cbe device time following message system log runtime child cbecheck exited exit value mean check successful cbe check instance removed like cbe init preparing vm using cbe initialized disk image place let prepare vm case coreplus installeriso image hand readytouse downloader package use downloader provide target file system therefore deploy cbe vm f package selecting depot cnuke cbe cbe vm f install setting route like cbe f package cbe vm f chroot component preconfigured cbe point vmcbe directory currently used file system deploy downloader selecting depot cnuke virtual machine download coreplus install setting route gui themed wm network nic router region map custom virtual memory object file system target cbe vm f file system font font f progress download shown new terminal window may take time image size mb end message system log indicate download successful runtime downloadcoreplus child download exited exit value download coreplus instance removed component view leitzentrale switch nouxsystem shell navigate rwvmcbe delete file machinevbox machinevdi file needed context tutorial noux cd rwvmcbe noux rwvmcbe rm machine file use instead part archive cbe binary already downloaded dependency package directly copy vm directory noux rwvmcbe cp noux rwvmcbe cp noux rwvmcbe l l rwx root jan rwx root jan installeriso rwx root jan machinevbox note configured access cbe local vfs noux rwvmcbe cat rw flat devdata virtualbox hand configured machinevbox use file setting cbevfs server start vm start cbe tutorial cbe device provided cbevfs plugin running vfs server server accessed vm via filesystem session cbe vfs package provides preconfigured vfs server cbe plugin deployed selecting depot cnuke cbe cbe vfs install setting following route cbe vfs server might consume quite cpu time depending workload cbe therefore recommended move different cpu core one later use vm provided cpu multiple core done creating launcher cbe vfs server component still running create copy active deploy configuration nouxsystem shell noux cp configmanageddeploy configlaunchercbevfs go file panel centered top leitzentrale select config launcher cbe vfs edit file opened graphical editor delete everything except start node cbe vfs server start name cbevfs start change start launcher start launcher extend opening launcher tag attribute xpos ypos width launcher name cbevfs xpos ypos width launcher move cbe vfs component second cpu core started launcher saving file switch back component graph top leitzentrale remove currently running cbe vfs component graph deploy using newly created launcher cbe vfs installing linux guest vm time exciting part installing coreplus vm virtual box using want file system shared folder therefore start shared f selecting shared f use preconfigured package virtual box installed selecting depot cnuke cbe cbe install setting following route file system vm cbe vm f file system cbe cbe vfs file system shared shared f network nic router gui themed wm rom capslock global capslock state rom platform info platform information report shape themed wm report clipboard themed wm rom clipboard themed wm region map custom virtual memory object real time clock system clock usb direct usbdevice access screen titled core plus networking installation remastering show screen select boot core plus default flwm topside short coreplus desktop appears open terminal coreplus type dmesg command output find cbe disk sd sda byte logical block gib sd sda write protect sd sda attached scsi disk want install coreplus cbe disk therefore start tcinstall application bar tcinstall window select whole disk select sda make sure install boot loader selected continue right arrow select next dialog skip next dialog select core xgui desktop next dialog final dialog press proceed start installation installation completed show installation window select shut coreplus remove virtual box instance component view leitzentrale let remove installation image vm force boot cbe disk go file panel leitzentrale select default f rw vm cbe machinevbox edit remove following xml snippet file storagecontroller name ide attacheddevice type dvd attacheddevice storagecontroller save file switch back component view start cbe way putting load system open terminal coreplus start commandline extension installer tce type enter firefox select firefoxgetlatesttcz type q download shell script installing firefox browser quit extension installer via q issue firefoxgetlatestsh terminal may take connection time installation start shell script freshly installed firefox work fine although initial loading may bit slow using management shell control cbe vm place might want perform management work example would creating snapshot cbe device snapshot would checkpoint revert future catastrophe like rm rf wrong directory happend maybe vbd turn small would like resize imagine want reencrypt whole cbe device new key task performed using cbe shell package already used create disk image file deploy time select following route gui themed wm file system cbe cbe vfs file system font font f rom clipboard themed wm report clipboard themed wm region map custom virtual memory object note file system cbe point cbe vfs instead cbe f way access control interface cbe provided vfs plugin within cbe shell navigate cbecbe directory contains cbevfs plugin cbe cd cbecbe l l total drwx root jan control drwx root jan current root jan snapshot control directory contains various file trigger management task cbe cbecbe l l control total sw root jan createsnapshot sw root jan discardsnapshot sw root jan extend sw root jan rekey creating snapshot first let create snapshot current state newly installed coreplus system cbe cbecbe echo true controlcreatesnapshot creating snapshot lightweight operation time inspect snapshot directory already see newly created snapshot cbe cbecbe l l snapshot drwx root jan checking snapshot data file confirms existence snapshot actual data snapshot may accessed file cbe cbecbe l l rw root jan extending cbe let extend virtual block device cbe note nt shut linux vm even continue using coreplus extending underlying cbe device first check size current state vbd cbe shell cbe cbecbe l l currentdata rw root jan data extend vbd mib note stay inside boundary gib backend image cbe cbecbe echo treevbd controlextend writing option extend file instructs cbe add block byte byte vbd request processed watch progress looking size vbd cbe cbecbe l l currentdata rw root jan data eventually end size byte may wonder gib logical cbe need certain amount added block new meta data vbd state extension request also observed reading extend file cbe cbecbe cat controlextend inprogress lastresult none cbe cbecbe cat controlextend idle lastresult success extending pool sparse block cbe work pretty similar cbe cbecbe echo treeft controlextend rekeying cbe point might want change blockencryption key used cbe maybe demanded policy old key compromised simply feel like requires reencryption data cbedevice end removal old encryption key cbe note like resizing rekeying require stop accessing cbe device go using coreplus rekeying let start rekeying cbe cbecbe echo true controlrekey go like extension request monitor state reading file cbe cbecbe cat controlrekey inprogress lastresult none see rebooted vm rekeying underlying cbe device aware rekeying resizing block io cbe device naturally fast absence operation limitation guide served first look show potential cbe advertising cbe productionready plan refine following aspect core cbe designed perform operation asynchronous parallel way provides necessary throughput responsiveness needed later used daily basis however time particular demo deliberately operated parking ease development mean request processed one one sequential fashion internal metadata cache limited addition noted initializing cbe trustanchor mere placeholder provides functionality required cbe nothing developmentvehicle replace later also external entity performing cryptographic operation easily replaceable currently use library named libsparkcrypto apply aes encryption design cbe actually make independent concrete implementation encryption entity later reasonable utilize kind hardwareaided encrytiondecryption mechanism relieve cpu design open kind interesting possibility example could even forgo encrypting data block although first seems counterintuitive configuration cbe could used add support snapshotting primitive file system blockdevice layer futhermore current interface cbevfs plugin tailored interactively showcasing cbe future component provide nicer userinterface cbe cbevfs plugin controlled structured perhaps xmlbased way like rest genode regard demo cbe component used provided somewhat unorthodox way raw archive containing binary directly naturally addressed proper depot recipe package future
7,Lobsters,virtualization,Virtualization,How to choose a k8s CNI plugin,https://medium.com/thermokline/how-to-choose-a-k8s-cni-plugin-771edf4842c0,choose cni plugin,choose cni plugin basic cni reference cnis simple cni fully featured cnis linux stack cnis ovsovn cnis infrastructurespecific cnis multiple cni tunnel overlay route ebpf choosing cni,choose cni plugina key component deployment container network interface cni deploy kubernetes service using provider google aws cni chosen cloud provider however understanding cni operates important complete understanding accessed cloud vendor unique environment use combination technique provide isolation forwarding scale multitenant network infrastructure therefore cnis need work closely infrastructure using downstream distribution often include default cni case allow use alternative cni deploy upstream however many cni option choosethe basic cni cni plugin configures network interface linux container cnis used part one several container runtimes us cni connectivity pod network sometimes referred provides connectivity container node without address translation cni plugin part pod network includes one container cni plugin running node configure container connectivity dynamically pod created establish network connectivity nodesreference cnisthe cni project maintains several reference cni plugins consist interface creation ipam meta plugins reference cnis use linux kernel native functionality linux bridging vlans ipvan macvlan typically chain ipam plugin provide address management meta plugins provide additional networking functionality bandwidth control via linux tc firewall linux networking functionality reference cnis often foundation cnis particular one simple popular cni flannela simple cniflannel probably simplest cni one popular part reference cni packaged container configures cni networking flannel us another reference cni provide container networking commonly bridge cni flannel also configures linux enable connectivity node commonly using vxlan however host routing also used modified version flannel also used public cloud provider us cloud api configure specialized network environment aws virtual private cloud simple pod networkingfully featured cnisat end scale cnis broad array networking function fully featured cnis usually include network policy support important feature abstract firewall rule allowing dynamically applied pod description provide security default model cnis additional functionality visibility packet forwarding performance usually key feature fullfunction cnis important cnis ability build complex network typology using variety different mechanism high level though generalized three architectural group linux stack ovsovn infrastructurespecificlinux stack cnislinux comprehensive networking stack linux stack cnis use linux kernel packet forwarding routing functionality enhancement move packet container node physical interface connected directly networking stack combination routing tunneling used connect node container routing used cnis often either integrate depend bgp distribute routing information familiar operation u host networking skill since use linux networking help figure work plentifulovsovn cnisthis class cnis us openvswitch open virtual network ovn default redhat openshift operation cnis familiar linux system administrator based softwarebased virtual switch running host cni program ov switch either directly via higher level abstraction provided ovn programming static routing structure within virtual switch physical interface container connected virtual switch connectivity achieved programming virtual switch openvswitch made popular openstack favored run top openstackmanaged virtual machine solution flexible complex even integrated openstack little documentation debugging requires detailed knowledge ovnovs likely require reading source code ovn abstraction used top ov debugging connectivity problem mean reading openflow rule installed ov node low level interface infrastructurespecific cnisthese cnis developed vendor provide integration network hardware platform usually characterized sdn pluginsmultiple cni directly support single cni per installation logical cni integral operation platform multus cni enables use multiple cnis multus becomes primary cni sends normal operation cni provides interface use cnis attach additional interface container additional container interface orchestrated ingres service construct directly managed configuring cni case alternative path container needed multus solutiontunnels overlay routesconnectivity node major factor cni decision really two choice direct tunneled tunneled connectivity often default creates network node pod tunnel remove need add subnets physical network long node communicate tunnel created additional network routing avoided way everything communicates recent year explosion tunneling resulting tunneling used default necessary useful remember past tunneling workaround primary communication mechanism technology virtualization require physical virtual tunneling container provide choice routed nontunneled network node network equipment communicate make system simpler scalable long termwhat ebpf extended berkeley packet filter received lot attention recently allow program directly attached designated code path linux kernel kernel ebpf program verifier protects kernel checking program loaded ebpf program many us become popular monitoring system behavior course used networking ebpf program attached various layer networking stack provide high performance packet manipulation commonly function high performance packet filtering cnis use ebpf increase performance using highperformance ebpf program instead lowperformance linux component netfilter managed iptableschoosing cniwhen installing upstream kubeadm documentation currently present choice cnis call pod network plugins cni github page currently list option vendor provide subset default broader list choice difficult provide similar functionality decision made time distribution consideration network infrastructure used cni support network policy important stage filtering required fully featured cnis especially commercial vendor support performance optimization option case using ebpf remember though performance ultimately function application endpoint needlessly add performance optimization network level increase complexity lock specific cni networking complex make complex stacking layer networking attempting tightly integrate infrastructure system functionality duplicated yes im talking openstack simplest scalable solution unless specific networking need suggest linux stack cni support network policywithout hardware optimization configured without tunnel using routing protocol distribute pod network connectivity node
8,Lobsters,virtualization,Virtualization,Sol — a sunny little virtual machine (2012),https://rsms.me/sol-a-sunny-little-virtual-machine,sol sunny little virtual machine,virtual machine sol wikipedia sol design overview function prototype program counter registry implementation lua lua erlang instruction operation lua op abc op abx op bxx sol source code multitasking multitask coroutines wikipedia section cooperative multitasking quadrotor example example x yield example function call timer example multitasking source code http githubcomrsmssol,weekend together evening earlier week created rather simple virtual machine dubbed sol swedish word sun read lot vm design stuff like o design programming language seeminlgy obscure nerdy stuff surrounding concept computer generic tool virtual machine vm software implementation machine ie computer executes program like physical machine wikipedia sol process virtual machine run inside operating system process however inside sol multiple task like operating system process program running sol matter world look like outside could even make sol boot directly hardware would crazytown trust road purpose sol learning defining world extremely high degree freedom one major component virtual machine provided instruction set instruction simplest type operation program perform set instruction provided virtual machine program running need universal efficient design overview sol vm one scheduler running one cpu core yet implemented time writing scheduler maintains list task run list called run queue scheduler also maintains io watcher timer handle o interrupt etc scheduler work sol fancy thing described also executes program code run queue list task ordered way scheduled scheduler take first task list run queue executes task mean later task ended end error status task removed run place task end list io watcher timer check timer expiry possibly call host o kernel check pending asynchronous io event event happened like timer expired fired correlating task added run queue task read event waiting scheduler repeat process eg starting point long task run queue let look task see task mostly abstraction contains one significant component activation record comprise task call stack activation record corresponds one active function call activation record contains reference function prototype second executing program counter usually called pc cursor currently executing program instruction finally registry value function prototype constant instruction function without context function closure local variable etc function prototype kind like building without people furniture albeit name really comparable blueprint function prototype copied implemented actually used asis program counter simply number corresponds offset function prototype program ordered list instruction activation record think piece running code executed program counter pc incremented instruction executed sometimes pc decremented program jump backwards eg performing loop pc play central role instructionbased program like computer phone hardware likely incrementing pc right registry essentially region temporary memory executing program use store variable data imagine simple function def foo x x x x x return x program need way store value created x pas x also need store resulting value somewhere using return local variable stored register thus access efficient something like happens executing foo function r x mean register x argument already r r load constant r multiply valueof r valueof r put result r multiply valueof r valueof r put result r return r sol registerbased virtual machine operand result read stored numbered register rather pushed popped stack stackbased virtual machine registerbased virtual machine avoid push pop operation usually surrounding instruction reducing code size several case also increase speed execution compared stackbased virtual machine excellent paper implementation lua roberto luiz waldemar describes really problem code size decoding overhead two problem usually associated registerbased machine code size decoding overhead instruction register machine need specify operand typically larger corresponding instruction stack machine instance size instruction lua virtual machine four byte size instruction several typical stack machine including one previously used lua one two byte hand register machine generate le opcodes stack machine total code size much larger sol take lot inspiration lua well erlang instruction operation instruction consists one component operation code eg subtract b operand eg register register b result register c virtual machine disadvantage must whatever term assuring good performance one instruction fit one machine word hardware today able deal long chunk data efficiently inspired lua chose representation sol instruction instruction operand encoded one three layout behold awesome ascii art op abc operation op operand b c bit op b c field bit range operation need two operand made efficient one operand large enough common value need define alternate layout instruction op abx operation op operand b bu bit op bsbu field bit bu range bu third class operation use one operand size correlation efficiency define third alternate layout instruction three operand effectively collapsed one integer value op bxx operation op operand bs buu bit op bssbuu field bit buu range bs b c bu buu signify unsigned integer whilst b bs signify signed integer read room operation register bit bit configuration need changing maintaining instruction operation operand simple sol intentionally gone great length order make playing around instuction set easy file instrh contains list instruction control flow yield abc suspend reschedule jump bs pc bs call abc r r r r r ab return ab return r r data loadk abu r k bu move ab r r b dbgreg abc special debug dump register value arithmetic add abc r rk b rk c sub abc r rk b rk c mul abc r rk b rk c sol source code setup way changing list required apart actual implementation instruction adding renaming instruction automatically make convenience symbol function available say add ding instruction play little sound every time executed mul abc r rk b rk c ding buu sound number play new operation identifier available called sopding well constructor function encoding ding instruction sinstr sinstrding value running program includes ding operation cause error vm unexpected operation implemented ding behavior yet operation time writing implemented schedexech core virtual machine read performs instruction sol program summed like void execute instr instruction instr pc instruction switch pc case soploadk read operand b instruction pc put constant b register break case sopmove read operand b instruction pc put value register b register break switch pretty much good old switch loop c code compiled modern compiler like clang gcc rather efficient virtual operation effectively corresponds machine instruction need add ding case sopding read operand buu instruction pc soundindex sinstrgetbuu pc find note soundindex play soundnote note soundgetnote soundindex soundplay note break type sound well soundget soundplay represents kind sound playing function provide write sol program play music define melody entry ding play note ding play note ding play note ding play note ding play note return return pling plong plong ding pling multitasking toy vm presented without shame unless able multitask perform multiple thing least give programmer illusion concurrency sol operation called yield able pause task state later task resume exact state task perspective never knew paused resumed powerful primitive implement many feature top time writing sol already two different type yield yielding task run scheduled io etc event yielding timer expire end article example program making use yield yield used implement cooperative multitasking task cooperate use processing resource task performed series computation relief control another task one three thing happened task initiated external blocking operation like reading file waiting certain time occur task completed ended main function returned task faulted caused error system communicate environment abroad like web server text editor spend time cpu time relative real time waiting environment respond eg producing data network socket writing content file returning stepper motor position system often benefit cooperative multitasking particular coherent specialized system unlike operating system general nature sol provides essentially coroutines concurrency nice feature coroutines aka green thread aka user thread ability run sequential code concurrent system task like def readfile name f open name data read f close f return data involves three blocking call environment cause task yield open asks operating system open file name file might get opened sometime future scheduler take note task waiting happen remove run queue time o tell scheduler file wanted open well file descriptor thus scheduler place task run queue task receives file descriptor representing opened file task call environment time asking read content f thing scheduler tell o take note unschedules task continue executing task o tell scheulder read file asked read data reality slightly complicated principle scheduler queue task run thing close function programmer easy follow flow program comparing synchronous program asynchronous version def readfile name callback open name def error f error callback error else read f def readerror data close f def error callback error data return file opened clearly harder follow task sol spawn new task order perform several thing time like writing file replying network def writeandreply destinationid message writer writefile destinationid msg message sendmessage destinationid message recv writer taskend noop wait writefile end however wikipedia section cooperative multitasking cooperatively multitasked system relies process regularly giving time process system one poorly designed program consume cpu time cause whole system hang happen program performs lengthy set computation cause kind problem especially task relying timer sol scheduler check timer expiration execution task timer might effectively fire long supposed imagine controlling toy quadrotor one task need update one rotor angle millisecond another task consumes wholesome millisecond quadrotor might crash burn address sol employ operation cost counter task given predefined amount operation value per execution iteration scheduler run task program operation cost counter reach limit task simply forced yield task source code look svmexeclimit example code expressed simplified assembly language almost c api defining program programatically assembly language considered irrelevant beyond explaining instruction executed output line like vm denote scheduler regains control running task task either returned yielded one execution iteration running multiple task usually see task interleved roundrobin order execution iteration marker line output line starting comment andor simplification part actual output assembly comment r x mean register x rk x mean register x x le k else constant xk k special value k x mean constant x assembly comment pc signifies program counter sort cursor instruction program incremented one instruction executed instruction modify counter like instance jump instruction example x yield variable x greater zero decrement x one yield scheduler letting task run eventually return def main x x x x yield return assembly define main const k const k const k entry loadk r k le rk rk continue else pc jump pc return sub r r rk yield yield atypesched jump pc le return return output running debug mode builddebugbinsol sol vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm jump bs vm le abc vm sub abc vm yield abc vm three execution iteration identical block vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab scheduler runloop exited example function call timer program us two function entry point main function simply call kitten function one argument kitten function sleep number millisecond passed first argument kitten function return number main dump register value finally return causing task exit subsequently scheduler vm exit assembly define kitten argument r sleepms const k entry yield yield atypetimer rk b r loadk r k return return r r r define main argument const kitten k func kitten const k entry loadk r k kitten function loadk r k call r r r r r r dbgreg vm debug function dump register value return return output running debug mode time builddebugbinsol sol vm vm task function pc op value vm loadk ab vm loadk ab vm call abc vm yield abc timer scheduled trigger m time pass case scheduler idling timer triggered scheduling task vm vm task function pc op value vm loadk ab vm return ab vm dbgreg vm r vm r vm r vm return ab scheduler runloop exited real user sys example multitasking run three task running program example builddebugbinsol sol sched run queue task task task vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm jump bs vm le abc vm sub abc vm yield abc vm block instruction repeated three time interleved roundrobin order task vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab scheduler runloop exited source code released free permissive mitstyle license http githubcomrsmssol
9,Lobsters,virtualization,Virtualization,Automating the Creation of QEMU Archlinux Images from Scratch,http://eliteinformatiker.de/2020/05/31/automation-archlinux-qemu-installation,automating creation qemu archlinux image scratch,creating qemu image chroot environment host chroot approach creating qemu image inside qemu vm livecd expect flag qemu archlinux wiki explains full script chroot approach live cd inside qemu approach stefan eliteinformatikerde,tutorial show automate installation archlinux newly created image using qemu present two different method one us chroot environment existing linux host system one creates archlinux installation standard arch live cd inside qemu many application probably make lot sense create base image copy base image new vms people might also use case approach example might many different base configuration customer creating base image would much effort use case could also situation automation ansiblepuppetchef would useful always think need creating qemu image chroot environment host start chroot approach one simpler script approach us special archlinux bootstrap image chroot execute required installation command installation bootloader toughest part installation scheme without customization bootloaders often expect target environment start simple step first download required archlinux iso create empty raw image raw image mounted easily setup filesystem inside image conver raw image installation srchttp imagetmpimageraw mountpointtmparch f archive wget src archive fi mkdir mountpoint qemuimg create f raw image mount image available loopback device exposing inner partition structure image eg loop sudo losetup show f p image create partition file system device sudo parted loop mklabel msdos sudo parted optimal loop mkpart primary sudo parted loop set boot loopp loop sudo loopp extract archlinuxboostrap image filesystem sudo mount loopp mountpoint sudo tar xf archive c mountpoint stripcomponents chroot bootstrap system execute required command sake readability display command standard shell command real automation script work archchroot create interactive shell wait user input instead continuing script execution thus send script bash command archchroot full automation see full script end article sudo mountpointbinarchchroot mountpoint binbash select server want better multiple server echo server http ftpunibayreuthdelinuxarchlinux repoos arch etcpacmandmirrorlist pacmankey init pacmankey populate archlinux pacman syu noconfirm dhcpcd required standard networking qemu syslinux bootloader pacman noconfirm base linux linuxfirmware mkinitcpio dhcpcd syslinux systemctl enable dhcpcd standard archlinux setup ln sf usrsharezoneinfoeuropeberlin etclocaltime hwclock systohc echo etclocalegen localegen echo etclocaleconf echo archqemu etchostname echo e localhostn localhost etchosts far setup step quite standard next create initramfs without autodetect autodetect would detect module current host system might work qemu vm case additionally mkinitcpio try autodetect current kernel version load module host kernel vm kernel chroot differed thus read latest installed module libmodules create initramfs without autodetect break combination hostchrootqemu linuxversion l libmodules sort v tail n mkinitcpio c etcmkinitcpioconf autodetect kernel linuxversion g bootinitramfslinuxcustomimg finally setup syslinux want use qemu vm nographic setup syslinux support serial console find information nographic serial console second part article second installation routine requirement need nographic option leave away adjustment important make sure syslinux mbr get installed correct device ie loopback device map image file thus use syslinuxinstallupdate setup syslinux mkdir bootsyslinux cp usrlibsyslinuxbios bootsyslinux extlinux install device loopp bootsyslinux dd convnotrunc ifusrlibsyslinuxbiosmbrbin loop customize syslinux config uuid blkid value uuid loopp sed serial bootsyslinuxsyslinuxcfg sed sappend rootuuid uuidg bootsyslinuxsyslinuxcfg sed sinitrd initramfslinuximginitrd initramfslinuxcustomimg bootsyslinuxsyslinuxcfg finally unmount device free loopback device convert image sudo umount mountpoint sudo losetup loop qemuimg convert f raw image approach result readytouse archlinux image started qemu adjustment specific project one step away cpu host enablekvm smp drive nographic boot menu look bit broken afterwards display fine creating qemu image inside qemu vm livecd another approach use archlinux live cd boot live cd inside qemu vm empty image attached block device however require automation interactive application eg boot menu requires user interaction automation interactive application use expect expect control program even program asks user several question would usually require human interaction order make expect work qemu first tell qemu start guest new window behave like standard application stdin stdout done nographic flag qemu qemu expect output written serial port mean boot archlinux special setting serial console archlinux wiki explains done hitting tab desired boot menu entry appending boot option archlinux write output serial port know make qemu behave like standard application without graphical output also know connect archlinux output qemu work automation expect basic workflow expect script spawn applicaton expect output stdout respond input send might advanced workflow use case enough start booting archlinux serial console setting enabled first run qemu bootloader present u list boot option right one already selected stated archlinux wiki press tab presented list already set kernel flag append one result following action start qemu vm wait arch linux boot menu appear press tab wait kernel flag appear enter additional flag press enter carriage return usrbinexpect f spawn cdrom cpu host enablekvm smp drive nographic expect boot arch linux send expect archisoimg send boot menu contains quite lot output thus filter partial match using wildcard search sure whether save wildcard end expect expression since mean output come far work well documenation discourages behaviour always recommends include last character expect statement eg prompt usually space character boot finished basically standard back forth expecting output mostly shell prompt sending command since rely fdisk arch installation also bit real usage expect wait question fdisk answer login archlinux setup partition created variable hold search string prompt repeat time set prompt archiso expect archiso login send rootr expect prompt send fdisk devsdar expect command help send nr expect select default p send pr expect partition number default send expect first sector send r expect last sector send r expect command help send ar expect command help send wr expect prompt send expect prompt send mount mntr archlinux output contains lot control sequence colour terminal thus prompt contains lot wildcards thinking using wrapper script remove control sequence output expect retrieves output work like hard disk setup install base arch system installation switch chroot environment mean prompt slightly change use another prompt variable set chrootprompt root archiso expect prompt send pacstrap mnt base linux linuxfirmwarer expect prompt send genfstab u mnt mntetcfstabr expect prompt send archchroot mntr expect chrootprompt send ln sf usrsharezoneinfoeuropeberlin etclocaltimer expect chrootprompt send hwclock systohcr expect chrootprompt send echo etclocalegenr expect chrootprompt send localegenr expect chrootprompt send echo etclocaleconfr expect chrootprompt send echo archqemu etchostnamer expect chrootprompt send echo e localhostn localhost etchostsr expect chrootprompt send mkinitcpio pr expect chrootprompt send passwdr expect new password send rootr expect retype new password send rootr expect chrootprompt finally choose bootloader adjust enable serial port output reboot boot system expect eof end script seemed quite important least test without mbr persisted correctly image file maybe expect wait shutdown complete thus machine terminated ungracefully send pacman noconfirm syslinuxr expect chrootprompt send syslinuxinstallupdate mr expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt send sed serial bootsyslinuxsyslinuxcfgr expect chrootprompt send sed sappend bootsyslinuxsyslinuxcfgr expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt full script chroot approach srchttp imagetmpimageraw mountpointtmparch f archive wget src archive fi mkdir mountpoint qemuimg create f raw image loop sudo losetup show f p image sudo parted loop mklabel msdos sudo parted optimal loop mkpart primary sudo parted loop set boot loopp loop sudo loopp sudo mount loopp mountpoint sudo tar xf archive c mountpoint stripcomponents sudo mountpointbinarchchroot mountpoint binbash eol set v echo server http ftpunibayreuthdelinuxarchlinux repoos arch etcpacmandmirrorlist pacmankey init pacmankey populate archlinux pacman syu noconfirm pacman noconfirm base linux linuxfirmware mkinitcpio dhcpcd syslinux systemctl enable dhcpcd standard archlinux setup ln sf usrsharezoneinfoeuropeberlin etclocaltime hwclock systohc echo etclocalegen localegen echo etclocaleconf echo archqemu etchostname echo e localhostn localhost etchosts create initramfs without autodetect break combination hostchrootqemu linuxversion l libmodules sort v tail n mkinitcpio c etcmkinitcpioconf autodetect kernel linuxversion g bootinitramfslinuxcustomimg setup syslinux mkdir bootsyslinux cp usrlibsyslinuxbios bootsyslinux extlinux install device loopp bootsyslinux dd convnotrunc ifusrlibsyslinuxbiosmbrbin loop customize syslinux config uuid blkid value uuid loopp sed serial bootsyslinuxsyslinuxcfg sed sappend rootuuid uuidg bootsyslinuxsyslinuxcfg sed sinitrd initramfslinuximginitrd initramfslinuxcustomimg bootsyslinuxsyslinuxcfg eol sudo umount mountpoint sudo losetup loop live cd inside qemu approach usrbinexpect f set prompt archiso set chrootprompt root archiso set timeout spawn cdrom cpu host enablekvm smp drive filetestimgraw formatraw nographic matchmax expect boot arch linux send expect archisoimg send expect archiso login send rootr expect prompt send fdisk devsdar expect command help send nr expect select default p send pr expect partition number default send r expect first sector send r expect last sector send r expect command help send ar expect command help send wr expect prompt send expect prompt send mount mntr expect prompt send pacstrap mnt base linux linuxfirmwarer expect prompt send genfstab u mnt mntetcfstabr expect prompt send archchroot mntr expect chrootprompt send ln sf usrsharezoneinfoeuropeberlin etclocaltimer expect chrootprompt send hwclock systohcr expect chrootprompt send echo etclocalegenr expect chrootprompt send localegenr expect chrootprompt send echo etclocaleconfr expect chrootprompt send echo archqemu etchostnamer expect chrootprompt send echo e localhostn localhost etchostsr expect chrootprompt send mkinitcpio pr expect chrootprompt send pacman noconfirm syslinuxr expect chrootprompt send syslinuxinstallupdate mr expect chrootprompt send dd convnotrunc ifusrlibsyslinuxbiosmbrbin ofdevsdar expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt send sed serial bootsyslinuxsyslinuxcfgr expect chrootprompt send sed sappend bootsyslinuxsyslinuxcfgr expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt send passwdr expect new password send rootr expect retype new password send rootr expect chrootprompt send exitr expect prompt send shutdown h nowr expect eof maintain comment section question comment regarding post please hesitate send email stefan eliteinformatikerde
10,Lobsters,virtualization,Virtualization,dbanay/Smalltalk - “by the blue book” c++ implementation of Smalltalk-80,https://github.com/dbanay/Smalltalk,dbanaysmalltalk blue book c implementation,http using smalltalk two button mouse mapping building running o x http libsdlorg window linux http libsdlorg configuration option object memory objmemoryh interpreter interpreterh application maincpp command line argument snapshot im,welcome bluebook c implementation system run o x window linux since first reading smalltalk august issue byte magazine always intrigued time slow computer ram barely running fast enough anything useful stunned read article futuristic alien technology surely beyond reach attending university washington exposed two memorable piece technology first steve job nextcube tektronix workstation running still amazing fitting implemented smalltalk descendent nextcube macbook pro laptop late discovered hero xerox parc got band back together released squeak thrilled finally nice system play nt care look feel missed minimalism experienced tektronix system also copy bluebook greenbook always daydreamed making implementation access porting kit used changed year ago found mario wolczko website http xerox release virtual image magnetic tape well instruction manual handtyped smalltalk source bluebook also implementation written preansi c despite many hour able get anything run started consider making implementation knew would nt easy task would undoubtedly error book also knew c like index array starting zero whereas smalltalk start surely would offbyone error smalltalk different operator precedence cc guard well credit exception expression parenthesized way nt issue reference counting used would probably reference counting error finally memory bunch word could accidentally storefetch wrong thing without realizing top alto bigendian system decide byte swapped virtual image recommended xerox guide guidance solid missed need byte swap float started working late december nt really focus month corona virus struck decided quarantine vector virus someone else worked earnest xerox porting kit included reference trace file could compare system felt incredible rush passed system ran little longer ran memory idea going display stuff working gain visibility intercepted logged message sends using show error selector well biglooking string pushed stack sure enough traceback string would displayed smalltalk debugger made far able figure screwed felt another rush screen drawn form able dump pbm file see implemented host graphical support smalltalk using sdl implemented input primitive working mouse keyboard finally able really use system point system helped find issue graphical smalltalk inspector debugger really heavy lifting saved countless hour resiliency system amazing since file system support available system image used alto file system class could see decompiled code source browser still useful could edit nt show temporary name actually used lose comment well decide try emulate alto file system decided followed approach used tektronix greenbook subclassed filedirectory file page created posixfiledirectory posixfile posixpage fired vscode wrote implementation could copy paste smalltalk added way paste character clipboard input queue implemented tested satisfied created sourcefiles array file stream instant assigned variable magic happened bang sudden could browse real source code browser working file system repasted implementation stored system change file could finally see implementation real temporary name comment delightful bootstrapping experience make grin ear ear smalltalk condensechanges saved image got working o x moved window hour also got running linux minute linux tested virtualbox without graphic acceleration performance bad hopefully real linux machine performs better system usable yes definitely constrained size object table still stuff admit prefer spartan look v pharo squeak even though far superior lot tell gist fun glad year able make happen still amazed genius parc think amazing system read almost ten year old time publication mind boggling using smalltalk us three button mouse labeled red left mouse button yellow middle blue right button red button clicking selection yellow running command like doit blue thing like closing window three button mouse use three command line option use traditional mapping three button mouse use alternate default mapping two button mouse mapping button mapping left button map red button selection right button map yellow button doit altleft map blue button close macintosh commandleft note ctrlleft button also used yellow button nice thing building thing book book document use system work building running o x need install sdl later download http libsdlorg choose development library dmg install go osx folder type make f makefilert installed package manager built system sdlconfig path simply make able smalltalk directory file see command line option section mean xcode project open like window included sdl headersbinary need open project window directory hit run linux need install sdl later either go http libsdlorg download build use package manager install cd linux subdirectory project type make able smalltalk directory file see command line option section mean configuration option behavior smalltalk application customized define setting header file module object memory objmemoryh defines object memory defines determines garbage collection scheme used approach described bluebook available define meaning gcmarksweep use mark sweep garbage collection gcrefcount use reference counting scheme runtimechecking include runtime check memory access recursivemarking book describes recursive marking algorithm simple consumes stack space symbol defined algorithm used complicated clever pointer reversal approach used instead gcmarksweep gcrefcount flag mutually exclusive defined normal reference counting performed full garbage collection memory exhausted object table becomes full generates lot cyclical reference eg methodcontext reference temporary field blockcontext back reference context sender field mark sweep approach result many frequent collection object table quickly fill methodcontexts frequently allocated object system run smalltalk implementation recycle context reason interpreter interpreterh defines interpreter defines provided allow inclusionexclusion optional primitive well handful helpful debugging method optional primitive implemented smalltalk fallback executed instead significant effect performance define meaning debuggingsupport add additional method debugging support implementprimitivenext implement optional primitivenext primitive implementprimitiveatend implement optional primitiveatend primitive implementprimitivenextput implement optional primitivenextput primitive implementprimitivescanchars implement optional primitivescancharacters primitive application maincpp defines running window ran two problem first mouse cursor would nt reliably change left mouse button held eg reframing window second issue mouse cursor small high resolution display even system scaling option set compensate reason added option app render mouse cursor rather operating system softwaremousecursor defined set conditionally window build work platform unnecessary behave properly without command line argument smalltalk application take number argument required argument directory path specifies directory snapshot image found complete list argument meaning default directory path specifies directory contains snapshot image well file file directory accessible using normal filedirectory access method required three use three button mapping two button scheme image name snapshot file use snapshotim cycle number vm instruction run per update loop vsync turn vertical sync synchronizing frame rate monitor refresh rate eliminate screen tearing artifact cost input latency delay m vsync used delay specified presenting next frame gpu useful lowering cpu usage still enjoying benefit using vsync specifies display doubled helpful farsighted folk people running high resolution display
11,Lobsters,virtualization,Virtualization,Hannes Mehnert interview on OCaml and MirageOS,https://evrone.com/hannes-mehnert-interview,hannes mehnert interview ocaml mirageos,introduction interview pavel hannes pavel hannes pavel hannes pavel haskell hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel ruby hannes pavel hannes pavel hannes pavel hannes pavel hannes,introduction backend engineer pavel argentov traveled marrakech morocco attend ninth mirageos retreat held march goal event bring experienced brand new mirageos user together collaborate sync various mirageos subprojects start new one help fix bug mirageos library operating system construct unikernels secure highperformance network application across variety cloud computing mobile platform code developed linux mac o x compiled fully standalone specialized unikernel run xen kvm hypervisor event pavel spoke hannes mehnert coauthor mirageos host event work mirageos ocaml gave u detail contribution mirageos joined project also explained benefit functional programming initially drawn addition broke potential limitation mirageos ocaml gave u information new development come included full transcript interview get latest info straight best source interview pavel think start speaking ocaml start working ocaml hannes six year ago finished phd formal verification software used taking random alreadydeveloped software applying specification writing proof program actually correct turned rather complex workintensive due ubiquitous use shared mutable state quite long time interested system programming usually mean using c writing operating system given semantics background hoping use highlevel language writing operating system finishing phd stumbled upon mirageos together friend david kaloper mirageos written ocaml multiparadigm language module system used functional programming mean avoid shared mutable state actually verify program operating system came mirageos around six year ago already working extent first contribution tl stack cryptographic algorithm pavel mirageos used get hannes mirageos started research project prototype idea use different style programming operating system background also deep security main motivation contributing mirageos trying get production security perspective le mutable state run http web server tl much le code mean le bug le resource usage nt run much code nt waste many cpu cycle much memory pavel let talk tl often might hit limitation hardware everything slow crypto algorithm slow ocaml solve problem solve problem speed ocaml allow make code fast hannes yes ocaml fast runtime garbage collector memory manager collecting fast question basically whether ocaml allows write decent enough interface pas argument properly waste much cpu time turn fast enough happy use reasonable programming language instead lowlevel micro assembler side tl handshake asymmetric cryptography order make fast use library called gmpgnu multiprecision library ocaml binding exception usually try write binding use much c code complex part decryption encryption still ocaml c pavel haskell programmer highlevel language programmer concerned performance garbage collector saying slows thing haskell ca nt write kind soft realtime application think ocaml ocaml garbage collector fast enough perform use case require speed hannes yeah think haskell completely different runtime lazy evaluation default ocaml strict computation go along garbage collector welltuned workload really fast believe ocaml soft realtime application doable pavel far know unikernel concept nt unique ocaml anymore history unikernels name idea different started people come idea unikernels hannes think started university cambridge theoretical paper socalled exokernel people needed instrument system would taskfocused le resource consuming easily written easily adaptable pavel ok far know mirageos us lwt library lwt performant enough reasonable load dns server respond quickly multiple direction work fast enough hannes think work reasonably well good application example mirageos firewall integrated qubes o qubes o operating system us xen goal qubes o example mail application separated pdf renderer receive email malicious pdf view nt able access mail instead save pdf push different virtual machine different virtual machine code run pdf renderer pdf opened rendered isolated environment mirageos fit pretty well much smaller memory footprint set firewall one component inside one virtual machine inside qubes o environment receive packet virtual machine access network mirageos unikernel work router route packet pavel said something mirageos memory consumption much memory really lower upper limit heard mirageos configured memory bigger really limitation hannes well moment yes minimal amount memory ocaml runtime mirageos unikernels need megabyte upper limit moment memory easily tuned basically demand memory dns service example require around megabyte memory million record like hundred record web service run usually megabyte memory sufficient store data pavel worked irmin data store far know kind like git data store written ocaml mirageos hannes yeah irmin branchable immutable store usually nt use irmin directly use irmin via git implementation us background example dns server store zone file remote git repository fetch repository clone memory serf data irmin major release irmin pavel well let switch bit format gathering could tell u couple thing mirageos retreat come idea hannes got lot inspiration different conference also openbsd hackathons basic idea gather nice group people nice location nice weather food sunshine actually enjoy environment crucial people stay together day communicate strict schedule daily round update interested stuck specific point people may jump may solution random people start discussing problem solution people busy writing code one hand try get people long established community experience idea different library ecosystem discus fundamental change ecosystem also always appreciate new people new idea people actually integrate group get program ocaml mirageos order grow community exclusively people already know mirageos written ocaml several year open everybody willing take trip marrakech pavel great think functional programming affect programmer way thinking first started writing ocaml code started understand type transformed caused think first type meaning data work know functional programming europe part programming scholarship basic level far know student russia learn program starting imperative technique almost never get hannes yeah think lot type apply quite lot typedriven development writing actual code write program functional language first think type look like get type right shape implementation becomes much easier also code maintenance localized program understanding functional programming think much easier understand code five year later written functional language nt overuse lot syntactic sugar feature develop code imperative language hundred line function try keep function rather short understandable yes functional programming shape brain think program pavel see monad making way different language ruby c way implementing academic knowledge daytoday programming hannes think viable instrument hard comprehend nt discovered monad trying explain monad new imperative programmer hard still use monad mirageos ocaml hopefully multicore branch becoming part ocaml runtime point year get pavel let talk bit opensource everything speaking opensource point view tech succeeds enough money pumped opensource consumes effort time nt really bring money evangelizing new tech open community sooner later reach idea opensource collaboration important opensource opinion hannes think opensource crucial factor stuff actually developing library ocaml library used mirageos unikernels everybody able freely mix match together write tl stack dns implementation strong incentive opensource people reuse enjoy writing software make happy anyone using software individual company using profit fine mirageos software bsd license everybody use whatever want think important license everybody understand gpl ton page text bsd two three paragraph usually written line text also want convince industry use software better use permissive license much easier time convincing use gpl license may bit harder convince lawyer good idea mirageos example code contribution ibm research managed convince use permissive license nt easy lawyer usually want stick trademark pavel read working company sell unikernel development like working tech nt selling let say established wellknown imperative programming hannes work nonprofit company called robur work grant donation commercial contract enhance mirageos ecosystem develop unikernels last year gotten funding public germany european union got grant develop certain application like openvpn gateway moment getting funding european union work dnsmasq one crucial component everybody network pretty wonderful pavel fast mirageos develop time developing fast growing new feature hannes development always quite slow also quite lot work try get rid technical debt adapt modern build system sometimes take time project term feature mainly new library developed talked briefly irmin datastore release major milestone reached last year also upcoming tl stack mirageos heading towards version definitely improve development experience quite radically getting rid old ocamlbuild replacing new build system called dune feature incremental build pavel well let conclude talk encouraging statement developer might learn mirageos embrace ocaml stop fearing functional programming theoretical mindeater would encourage people hannes good thing fp level control rather complex code functional programming spot highlevel bug could able debug lowest level fix within single weekend common operating system impossible due size codebase involved library control entire stack fullstack development level network device card business logic real application run evrone strive stay top new tech development embrace innovative new tool method allows u use optimal resource provide client best solution meet unique need work wide variety programming language tool highly encourage team member attend contribute tech conference event mirageos retreat idea like develop let u know contact touch soon discus project help
12,Lobsters,virtualization,Virtualization,KVM host in a few lines of code,https://zserge.com/posts/kvm/,kvm host line code,kvm host line code ioctl api loading vm running http call kernel loading kernel image http wwwkernelorgdocdocumentationvirtualkvmcpuidtxt http summary libvirt kvmtool github twitter r linux container line code,kvm host line codekvm virtualization technology come linux kernel word allows run multiple virtual machine vms single linux vm host vms case known guest ever used qemu virtualbox linux know kvm capable ofbut work hood ioctlkvm provides api via special device node devkvm opening device obtain handle kvm subsystem later make ioctl syscalls allocate resource launch vms ioctls return file descriptor also controlled ioctls turtle way deep layer apis kvm devkvm layer one used control whole kvm subsystem create new vms vm layer one used control individual virtual machine vcpu layer one used control operation single virtual cpu one vm run multiple vcpus additionally apis io deviceslet see look practice kvm layer int kvmfd open devkvm ordwr int version ioctl kvmfd kvmgetapiversion printf kvm version dn version create vm int vmfd ioctl kvmfd kvmcreatevm create vm memory define ramsize void mem mmap null ramsize protread protwrite mapprivate mapanonymous mapnoreserve struct kvmuserspacememoryregion mem slot guestphysaddr memorysize ramsize userspaceaddr uintptrt mem ioctl vmfd kvmsetusermemoryregion mem create vcpu int vcpufd ioctl vmfd kvmcreatevcpu point created new vm allocated memory assigned one vcpu make vm actually run something need load vm image configure cpu register properlyloading vmthis one simple read file copy content vm memory course mmap might good option tooint binfd open guestbin ordonly binfd fprintf stderr open binary file dn errno return char p char ramstart int r read binfd p r break p r close binfd assumed guestbin contains valid bytecode current cpu architecture kvm interpret cpu instruction one one like oldschool vm host let real cpu calculation intercept io modern vms run decent performance close bare metal unless io heavy operationshere tiny guest vm kernel try run first build guest guesto ld oformat binary n e start ttext guest guesto globl start start xorw ax ax loop ax inc ax jmp loop assembly interest tiny executable increment register loop output value io port deliberate compiled archaic app kvm vcpu start run multiple mode much like real processor simplest mode real mode used run code last century real mode notable memory addressing direct instead using descriptor table would simpler initialize register real mode struct kvmsregs sregs ioctl vcpufd kvmgetsregs sregs initialize selector base zero sregscsselector sregscsbase sregsssselector sregsssbase sregsdsselector sregsdsbase sregsesselector sregsesbase sregsfsselector sregsfsbase sregsgsselector save special register ioctl vcpufd kvmsetsregs sregs initialize save normal register struct kvmregs regs regsrflags bit must always set eflags rflags regsrip code run address ioctl vcpufd kvmsetregs regs runningcode loaded register ready shall start run vm need get pointer run state vcpu enter loop vm run interrupted io operation pass control back hostint runsz ioctl kvmfd kvmgetvcpummapsize struct kvmrun run struct kvmrun mmap null runsz protread protwrite mapshared vcpufd ioctl vcpufd kvmrun switch run exitreason case kvmexitio printf io port x data xn run ioport int char run run iodataoffset break case kvmexitshutdown return run app see io port data io port data io port data io port data io port data work complete source available gist http spot mistake comment welcome call kernel obviously impressive running linux kernel instead beginning would open devkvm create vm etc however need ioctls vm layer add periodic interval timer initialize tss required intel chip add interrupt controller ioctl vmfd kvmsettssaddr mapaddr ioctl vmfd kvmsetidentitymapaddr mapaddr ioctl vmfd kvmcreateirqchip struct kvmpitconfig pit flag ioctl vmfd pit also need change way initialize register linux kernel requires protected mode enable register flag initialize base selector granularity special register sregscsbase sregscslimit sregscsg sregsdsbase sregsdslimit sregsdsg sregsfsbase sregsfslimit sregsfsg sregsgsbase sregsgslimit sregsgsg sregsesbase sregseslimit sregsesg sregsssbase sregssslimit sregsssg sregscsdb sregsssdb enable protected mode regsrflags regsrip kernel code start regsrsi boot parameter start boot parameter load kernel address zero time learn bzimage formatthe kernel image follows special boot protocol fixed header boot parameter followed actual kernel bytecode format boot header described hereloading kernel imageto properly load kernel image vm need read whole bzimage file first look offset get number setup sector shall skip find kernel code start additionally copy boot parameter beginning bzimage boot parameter offset vm ram even enough patch boot parameter vm force vga mode initialize command line pointerwe want kernel print log could intercept io vm host would print stdout achieve need append kernel command linebut even get result set fake cpu id kernel start http wwwkernelorgdocdocumentationvirtualkvmcpuidtxt likely kernel built relying information tell running inside hypervisor bare metali using kernel compiled tiny config adjusted configuration flag support serial console virtiothe full code modified kvm host test kernel image available gist http compile run get following output linux version serge melete gcc version ubuntu fri may cest command line intel spectre broken microcode detected disabling speculation control disabled fast string operation supporting xsave feature floating point register supporting xsave feature sse register supporting xsave feature avx register xstateoffset xstatesizes enabled xstate feature context size byte using standard format biosprovided physical ram map mem usable mem usable nx execute disable protection active tsc fast tsc calibration using pit tsc detected mhz processor lastpfn maxarchpfn configuration wb wt uc uc wb wt uc uc using gb page direct mapping zone range mem normal empty movable zone start node early memory node range node mem node mem zeroed struct page unavailable range page initmem setup node mem mem available pci device clocksource refinedjiffies mask maxcycles maxidlens n built zonelists mobility grouping total page kernel command line dentry cache hash table entry order byte linear inodecache hash table entry order byte linear mem autoinit stack heap alloc heap free memory available kernel code rwdata rodata init bs reserved cmareserved kerneluser page table isolation enabled nrirqs nrirqs preallocated irqs console colour vga printk console enabled apic acpi madt mp table detected apic switch virtual wire mode setup configuration enabling interrupt remapping due skipped ioapic setup clocksource tscearly mask maxcycles maxidlens n calibrating delay loop skipped value calculated using timer frequency bogomips pidmax default minimum mountcache hash table entry order byte linear mountpointcache hash table entry order byte linear disabled fast string operation last level itlb entry last level dtlb entry cpu intel family model stepping spectre mitigation usercopyswapgs barrier user pointer sanitization spectre spectre mitigation kernel compiled retpoline mitigation available speculative store bypass vulnerable taa mitigation clear cpu buffer md mitigation clear cpu buffer performance event broadwell event lbr intel pmu driver obviously still fairly useless result initrd root partition actual apps could run kernel still prof kvm scary rather powerful toolsummaryto make run proper linux vm host much advanced need simulate multiple io driver disk keyboard graphic general approach would remain example initrd would map similarly command line option disk would intercept io respond properlyhowever one force use kvm directly libvirt nice friendly wrapper lowlevel virtualization technique kvm bhyveif interested learn kvm would suggest look kvmtool source much easier read qemu whole project much smaller simpleri hope enjoyed article follow contribute github twitter subscribe via rssmay also linux container line code
13,Lobsters,virtualization,Virtualization,Using qemu guest agent on OpenBSD kvm/qemu guests,http://undeadly.org/cgi?action=article;sid=20200514073852,using qemu guest agent openbsd kvmqemu guest,paul weird de weerd http githubcomaborcheqemuguestagent http gitqemuorg pqemugit ablob fqgacommandsposixc hbhead,contributed paul weird de weerd turtle way dept experimenting proxmox since year also applies plain kvmqemu openbsd vms today look qemu guest agent feature host configwebui enabling guest agent add virtioserial device kvm cmdline chardev socket server nowait device virtioserial device virtserialport guest detected new virtio device dedicated driver stay unconfigured dev function qumranet virtio console rev matching child driver configured looking qemuguestagent proxmox qm doc way tell proxmox use isaserial device type proxmox grep agent agent typeisa add another device type kvm cmdline chardev socket server nowait device isaserial guest new serial device used qemu console port irq byte fifo console port irq byte fifo point one run qemuga pointing serial port f used otherwise qemuga hardcodes usrlocal something guest doas qemuga isaserial p f tmpxxpid tmp v debug disabling command guestsuspenddisk debug disabling command guestsuspendram debug disabling command guestsuspendhybrid debug disabling command guestnetworkgetinterfaces debug disabling command guestgetvcpus debug disabling command guestsetvcpus debug disabling command guestgetmemoryblocks debug disabling command guestsetmemoryblocks debug disabling command guestgetmemoryblocksize debug disabling command guestgetmemoryblockinfo debug disabling command guestgetfsinfo debug disabling command guestfsfreezestatus debug disabling command guestfsfreezefreeze debug disabling command guestfsfreezefreezelist debug disabling command guestfsfreezethaw debug disabling command guestgetfsinfo debug disabling command guestfstrim yeah command disabled something probably fix w upstream freebsd work done http githubcomaborcheqemuguestagent one send command via host proxmox qm agent gethostname hostname proxmox qm agent gettime proxmox qm agent getosinfo kernelrelease kernelversion genericmp machine sadly upstream hardcodes shutdown argument guestshutdown command cf http gitqemuorg pqemugit ablob fqgacommandsposixc hbhead trying qm agent shutdown wont work box patchable according info command qemu command work proxmox qm guest cmd info jq supportedcommands select enabled true select successresponse true name guestgetosinfo guestgettimezone guestgetusers guestgethostname guestexec guestexecstatus guestsetuserpassword guestfileflush guestfileseek guestfilewrite guestfileread guestfileclose guestfileopen guestinfo guestsettime guestgettime guestping guestsync guestsyncdelimited testing show broken runtime allows host list file within guest proxmox qm guest exec l l tmp jq r outdata total drwxrwxrwt root wheel may iceunix drwxrwxrwt root wheel may rwr r root wheel may qgastate drwxrxrx root wheel may sndio drwx landry wheel may drwx landry wheel may drwx landry wheel may drwxrwxrwt root wheel feb virecover finally allows graceful shutdown guest host proxmox qm guest exec halt p qemu guest agent running vm properly stopped hoping useful people use openbsd qemukvm vms nt found kind doc specific openbsd far bit consider portswise think would make sense subpackage qemuga binary install complete qemu package dependency vm bit much imo see feasible fixing hardcoded path command would nice
14,Lobsters,virtualization,Virtualization,"Hello, GBA! Journey of making an emulator — part 1",https://medium.com/@michelheily/hello-gba-journey-of-making-an-emulator-part-1-8793000e8606,hello gba journey making emulator part,emulator emulator model help preserve enhanced feature hello gba warning gbatek video ppu audio input gamepaks eeprom none exist computer emulated incremental main cpu emulation gba memory map many quirk edge case complex cpu jit basic arm interpreter example branch instruction guide azerialabs bit conditional execution bit bit bit bare metal bios system call several attack allow leaking content let pixel bitmap mode tile mode framebuffer testing testing testing gbasuite integrated test ci armwrestler finally passing armwrestler tonc pardon undefined behavior bug accurate access violation open bus mega man battle network dereference protected implement bios protection unpredictable thing welldefined behavior rotating metroid bug story affine sprite demo gba,emulator dive meaty detail gba let u ask emulation even mean anyway may think emulator program take game rom old console spawn window allowing play far truth still want refine notionin context emulating game console emulator often program model hardware component target system degree accuracy get software made game run host platform computer need emulator well game console emulator help preserve longforgotten game available hardware easily acquire nowadays also emulator often provide enhanced feature available real hardware benefit gamers hacker alike quick savestates time rewind debugging patching useful rom hacking morehello gba solid understanding emulator let get familiarized gba hardware architecturewarning get technical hey came right advise referring gbatek martin korth goto document gba internalsin short game boy advance handheld game console nintendo released powered chip clocked main cpu video tft display proprietary graphic engine often referred ppu picture processing unit audio pcm channel used playback wave sample analog wave generator channel compatible gameboy colorinput dma direct memory access channelsserial secondary cpu backward compatibility game boy color gamesgames stored cartridge called gamepaks may contain additional hardware flash memory eeprom realtime clock gyroscope solar sensor vibration etcwhat common component ask none exist computer specialized hardware available gba software relies component emulated extent game workthe beautiful thing writing emulator incremental process implement everything game work start basic cpu support branch instruction alu mov add sub write assembly test case improve upon add instruction slowly carefullyafter solid cpu emulation want sprinkle graphic whole thing find get first implementing small subset ppu functionality sound even mandatory game boot get ideathe main cpu emulationthe cpu heart system main component connects piece often first milestone emulator developer device system share bus cpu us interconnect recommend referring gba memory mapas mentioned main cpu gba based architecture instruction many quirk edge case also additional instruction set called thumb people pick gba emulator project complex cpu comparing platform neslet explore cpu emulated highlevel software model cpu often concise structclass contains cpu state register program counter flag bit etc system memory module often simple byte arraysone popular approach implement cpu machinecode interpreter old platform gba included sufficient would slow modern one faster chip nintendo switch often see jit emulatorsbasic arm interpreter examplelet explore basic arm interpreterkeep mind example far spaghetti code use project set clean examplehypothetical cpu modelevery interpreter main loop cpu read instruction memory decodes executes increment program counter neededcpu main interpreter loopnow let see go implementing branch instruction summary bbl instruction gbatekif know arm assembly interested picking guide azerialabs good place startbits meant conditional execution ignore demonstration see bit must constant use decide instruction branch bit link flag bl branchlink instruction mean address next instruction saved register lr useful want call subroutine bit make signed offset multiple current pc intend jump toputting together implementation arm branch instructiongreat need every arm instruction format get started thumb dare say implementing cpu awfully timeconsuming taskme v metalas said beginning tremendous amount time spent reverse engineering gba game interested either hacking rom emulator development always good practice get idea kind software dealing interfacing hardware look like software point viewgba program people call bare metal program written specifically gba hardware rely operating system actually gba mmu virtual memory program access physical memory directly talk hardware via memory mapped io mmio even though gba operating system contain small firmware call bios internal rom bios first code run boot initializes stack clear ram initializes hardware display famous boot animation jump gamepak insertedother bios also provides system call gba program via software interrupt emulator require user well game romwith bios belonging nintendo allowed share dump even though gba protects bios allow code running outside simply read content several attack allow leaking contentslet pixelslet take look simple gba program sample programlines configuring ppu address mapped ppu internal register called dispcnt display control bit enables background bit enable display mode gba display mode divided category mode bitmap mode mode tile mode tile mode covered post keep mind commonly used game since lot faster although harder design program withmode easiest bitmap mode ppu treat vram video memory mapped address contiguous framebuffer color probably see used real game inefficient keep thing simple cpu update vram special period called vblank updating entire framebuffer pixelbypixel consumes many cpu cycle leaving little room perform game logic vblankif write pixel arbitrary coordinate x mode would x colorthe loop line would go draw red line middle screen representation color red display widthrunning program see following hello mode testing testingtesting always important people often overlook private hobby project last section article get glimpse might happen rush without proper attention testinganyway various test rom used test emulatorto test processor used gbasuite julian smolka short arm snippet test many cpu edgecases jump infinite loop test fails faulty test number cpu register handy test indeed even integrated test ci using rust builtin testing infrastructure also used armwrestler bitmapmode test rom us requires minimal ppu implementation work took great finally passing armwrestlerto test ppu sprite button dma etc often used demo tonc site awesome guide gba homebrew development reverseengineered example tested whenever implemented new feature also explains detail inside gba hardware rather priceless piece information wellallgreen sir pardon undefined behaviorgames often bug miracle causing anything bad running real gba thus potentially overlooked development emulation accurate enough previously harmless little bug might reproduce correctly crash emulatorwhat mean accurate though ask happens program trying read unmapped memory address common machine would right guess access violation exception might occur gba thing different mmu exception raised game would read garbage data happened linger bus previous operationthis phenomenon dubbed open bus accounted bugged game work hardware might read different garbage data might happen break emulator yes legend zelda minish cap looking debugging make mega man battle network freeze enter email menu discovered game bug somehow game happens receive null pointer display mail record try dereference laternull pointing bios region mentioned earlier protected game read real content would returned instead last fetched bios opcode happens value cause crash game continues nothing happened implement bios protection emulator game try access bios region actually succeeds reading value returned case happens make game freezeluckily gbatek informs unpredictable thing main takeaway emulating embedded system never forget software sensitive bug considered undefined behavior often must become welldefined behavior otherwise may breakthe rotating metroid bug storythis bug found first implementing affine sprite wait affine sprite well short sprite sometimes called object tiledbitmaps displayed top displaymodes often used game character affine sprite sprite configured rotatescale ppui used objaffgba demo tonc test implementation demo sprite metroid rotated scaled gba buttonsthis expected result expected result objaffgba rotation scaling transformationsfor scaling transformation worked got tried rotation bug trying rotate sprite might bug bug rendering code bug cpu configures affine transformation parameter ppu tell made sure math affine transformation check ruled rendering bug knew well looking cpu bug well point forgot still failing opcodes armwrestler duh since rotation buggy part let look objaffrotatefunction libtonc function calculates affine transformation parameter writes oam stand object attribute ram ppu later us render transformed spritei recompiled objaffgba demo debug information easily locate function built binary put breakpoint emulatorthis compiled version function compiled version objaffinerotatei immediately noticed highlighted rsb neg instruction remembered one instruction pas armwrestler test stepping function emulator alongside gba debugger confirmed suspicion implement thumb neg instruction properly mistake pretty stupid partially blame thumb neg rd r opcode translated arm modersb rd r implemented rsb rd r rd thumb datasheetneg opcode thumb format us immediate value second operand noticed hurry quickly write implementation opcodes fix trivial got rotation workmoral story never neglect failed opcode test
15,Lobsters,virtualization,Virtualization,Scaleway is fading out dedicated arm64 instances,https://www.scaleway.com/en/docs/migrate-c2-arm64-to-virtual-instance-using-rsync/,scaleway fading dedicated instance,overview virtual instance bare metal cloud server requirement solution migrating using snapshot instance migration data using power instance scaleway console instance power note dssd creating snapshot attached volume snapshot take snapshot detach creating new instance instance create instance snapshot choose image general purpose development local storage advanced option bootscript create new instance instance delete solution migrating using rsync block storage volume block storage volume instance instance bare metal server bare metal server creating temporary ssh key creating virtual instance scaleway console instance create instance configure instance add volume block storage note add block storage block create new instance local boot mounting block volume note gib gb creating temporary ssh key migrating data using rsync note moving flexible ip flexible ip flexible ip attach attach ip delete note,overviewscaleway instance reach end life december support instance end july purpose tutorial guide migration resource best fit need improved stability performance reliabilitythe scaleway element public cloud platform provides two virtual instance range bare metal cloud server adapted use case requirementstwo way migration recommended solution migrating using snapshotssnapshots facilitate migration instance smaller amount data done within simple click scaleway console using instance want benefit upgrading operating system instance latest version migration data using rsync recommendedpower connect scaleway console click instance side select snapshot click name enter instance overview page click power button top pagenote depending amount volume connected instance powering may take time careful powering instance instance directly connected dssd volume deleted powering instance make sure backup data prior shutting instancecreating instance powered click attached volume menu list attached volume display choose volume snapshot click enter friendly name snapshot click take instance overview page click detach detach flexible public ip address instance attached new instance later stepcreating new click instance tab create instance launch instance creation click snapshot tab choose image section wizard choose previously created snapshot choose instance need list available general purpose development instance make sure new instance least much local storage size snapshot example snapshot new instance must provide least available local storage configure local storage instance instance provides storage size snapshot configure another volume use available local click advanced option choose flexible ip instance drop configure bootscript advanced setting bootscript us prebuilt kernel boot network requirement volume choose bootscript current instance dropdown list boot latest stable kernel select mainline latest boot deploy new instance clicking create new instance bottom everything runnning delete instance clicking delete button instance overview pagesolution migrating using rsync block storage volumesit possible migrate data stored intance using opensource tool rsync scaleway block storage volume provide highly available redundant storage ideal solution instance large amount data migration instance migration bare metal serversif want migrate bare metal server default storage capacity virtual instance sufficient use case launch data migration directly physical disk server skip procedure formatting mounting block storage move forward directly creating temporary ssh key sectioncreating virtual connect scaleway console click instance side click create instance launch instance creation configure instance towards requirement available add volume section creation wizard configure block storage volume store transferred data onnote may choose size volume requirement make sure volume least size amount data click add block storage add volume configuration new block display volume list name volume identify easily modify size volume use click create new instance bottom page launch creation new instance deployed fresh operating system image supporting local bootmounting block connect newly created instance ssh ssh root yourinstanceip use lsblk command check volume available lsblk name maj min rm size ro type mountpoint sda disk vda disk part part bootefi see block volume named sda chosen storage sizenote scaleway ecosystem us gib define storage size gb default format block storage volume verify file system created successfully running lsblk f command lsblk f name fstype label uuid mountpoint sda vda root vfat bootefi check fstype field match block create mount point volume tutorial mount recommended use default option mount default devsda mntdata want see available option run man mount make sure file system properly mounted running lsblk command lsblk name maj min rm size ro type mountpoint sda disk mntdata vda disk part part bootefi check mountpoint mount volume automatically system boot add line etcfstab file instance echo devsda mntdata default etcfstab creating temporary ssh connect existing server ssh ssh root create new temporary ssh key data migration sshkeygen rsa b f rsyncmigrationkey display content public ssh key copy clipboard cat rootrsyncmigrationkeypub connect newly created virtual instance add public ssh key server file rootsshauthorizedkeysopen text editor like nano paste paste content clipboard end file nano rootsshauthorizedkeys save file exit text loader logout destination instance continuingmigrating data using rsyncas newly created instance attached block storage volume running launch data migrationnote keep mind migrating instance migrate data website photo document binary file reinstalled directly new instance make sure built easy common way using rsync tool connect instance using ssh install tool using apt packet manager apt update apt install rsync rsync installed quite easy use run command rsync av e ssh rootrsyncmigrationkey sourcedirectory virtualinstanceipaddress mntdata way rsync copy recursively file sourcedirectory new virtual instance preserve file permissionsto exclude specific file transferred exclude option used example ignore pyc file source directory command line becomes rsync av e ssh rootrsyncmigrationkey exclude exclude pyc sourcedirectory virtualinstanceipaddress mntdata data migrated remove temporary ssh key instance rm rootryncmigrationkey moving flexible transfer data completed detach flexible ip instance instance overview detach public flexible ip newly created instance click attach choose flexible ip instance drop click attach ip confirm newly created instance reachable using flexible ip address previous everything running may delete old compute instance clicking delete button instance overview pagenote currently yet possible move flexible ip virtual instance bare metal server case migration bare metal server service available ip dedicated server might need reconfigure required
16,Lobsters,virtualization,Virtualization,Using bhyve PCI Passthrough on OmniOS,https://www.cyber-tec.org/2019/05/29/using-bhyve-pci-passthrough-on-omnios/,using bhyve pci passthrough omnios,omnios bhyve hypervisor page simple overview global zone network configuration configure passthrough device via ppt ppt use zonecfg configure guest zone finish configuration creating zone configure freebsd bhyve guest test network configuration,hardware supported illumos yet luckily bhyve support pci passthrough guest operating system continue omnios desktop modern hardware would love wifi support using bhyve guest router zone provide required driver first requires uptodate omnios version provide bhyve support including following ip package pkg install systembhyve pkg install systemzonesbrandbhyve also found additional system requirement omnios bhyve hypervisor page simple overview inet global zone bhyve zone pciwifi passthrough wifidevice nat vnic etherstub vnic global zone network configuration etherstub required provides virtual switch virtual nic global zone one bhyve zone dladm createetherstub required assign virtual nics etherstub dladm createvnic l dladm createvnic l verify configuration dladm showvnic also required assign ip address vnic allow communication bhyve zone ipadm createaddr static choose whatever network like communication two nics choose network configure passthrough device via ppt lookup pci information device like passthrough bhyve zone example looking wireless network card prtconf dd intel corporation centrino adv look correct pciex entry nt got working pci entry prtpicl v tool might also provide additional information pci device pciex information need stored following two file etcpptaliases look similar etcdriveraliases file overwrite assign required ppt driver device etcpptmatches file contains pci information reboot recommended attach driver device verification done following command look attached driver device use pptadm list dev path pptadm list dev vendor device path pci used later passthrough bhyve zone use zonecfg configure guest zone bhyve zone required create dataset zonepath zvol contains guest zone called gw gateway internet create zvol zfs create v create zonepath zfs create rpoolzonesgw create dataset isos zfs create rpooliso download latest freebsd operating system like iso store rpooliso look like cd rpooliso wget freebsdiso http downloadfreebsdorg bootonlyiso create zone via zonecfg always recommend create one file contains relevant data zonecfg work correctly example tmpgwzone create b set brandbhyve set zonepathzonesgw add net set set end add device set end add device set end add f set dirrpoolisofreebsdiso set specialrpoolisofreebsdiso set typelofs add option ro add option nodevices end add attr set namecdrom set typestring set valuerpoolisofreebsdiso end add attr set namebootrom set typestring set valuebhyverelease end add attr set namebootdisk set typestring set end add attr set nameextra set typestring set value passthru end everything related freebsdiso removed later need install medium anymore bhyverelease bootrom required freebsd work correctly might depends operating system one need use following two setting required get passthrough working correctly add device zone allow required access add device set end add extra parameter bhyve command passthrough correctly pci id guest pci id chosen long used parameter already add attr set nameextra set typestring set value passthru end required disallow guest memory swapped otherwise passthrough nt supported finish configuration creating zone zonecfg z gw f tmpgwzone use zoneadm install boot zone zoneadm z gw install zoneadm z gw boot something going wrong zone nt boot correctly check bhyve log file zonepathroottmpinitlog example zonesgwroottmpinitlog configure freebsd bhyve guest able log zone via zlogin follow operating system installation based need awesome freebsd installation straightforward anyway installation network configuration required support wireless card setup nat modify bootloaderconf load correct firmware ifiwnload yes yes yes wlanwep yes wlanccmpload yes wlantkipload yes setup network interface via etcrcconf check guest ethernet interface inet netmask wireless network interface wpa country de enable pf ip forwarding gatewayenable yes pfenable yes add nat entry etcpfconf nat configure wireless network required use wpasupplicant store information etcwpasupplicantconf wpapassphrase ssid pwd etcwpasupplicantconf reboot might required load required firmware configure network described test network configuration global zone able ping bhyve guest via nt configured default gateway yet might good time route add default able reach network always loved internet via awesome bhyve router
17,Lobsters,virtualization,Virtualization,How anti-cheats detect system emulation,https://secret.club/2020/04/13/how-anti-cheats-detect-system-emulation.html,anticheats detect system emulation,reverse engineering blog battleye easyanticheat hypervisors eptp switching page hook opensource tool opensource project bugcheck callback crn access exiting vmware bug pafish keep simple silly hvpp usermode instruction prevention umip battleye eac battleye patchguard easyanticheat ipower syscall hooking method using efer daax ajkhoury ntdeviceiocontrolfile iofcalldriver iofcalldriverwrapper iofcalldriver ntdeviceiocontrolfile thanks ipower daax drew ajkhoury work system emulation tool,first article addressing various method detecting presence vmms whether commercial custom wanted thorough associate research popular anticheat vendor kick article important outside game hacking arena understand usage hypervisors cheating importance anticheats staying top cheat provider using post cover standard detection method used intelamd offering explanation mitigation general rating efficacy get sidechannel attack employed platform agnostic highly efficient get o specific method abuse mishandling descriptor table information way block custom method syscall hooking like technique documented reverse engineering blogthe interesting part cover actual method used battleye easyanticheat cover improvement could made general efficacy method mean jab anticheats keeping technology latest way abuse technology difficult perform job pretty well like software hole intended help interested understanding side operate various way attackersdefenders defeatemploy virtualization detection conclude article dump miscellaneous data ntdeviceiocontrolfileiofcalldriver call two anticheats related hypervisors figured investigated let dig inthe advent hypervisors vmm brought lot hype security research community hype also spurred interest notsoresearch based circle like cheatingmalware community end goal use hypervisor emulate system behaviorhide presence various new technology like ept allowed attacker abuse certain feature like eptp switching page hook hide information probe security software technology gained popularity many opensource project released help security community understand go developing tool leveraging also meant questionable community looking conceal began using opensource project one game hacking communitythe main benefit anticheats many paytocheat provider began using slightly modified opensource version tool opensource tool meant educational purpose hardened many attack could reveal presence anticheats use lack induration detect hacker using customopensource project attempt cull herd however recent time research technology improves becomes widespread original detection vector becoming le effectiveknowing look method detecting hypervisor currently running machine many detection vector wanted detail handful technique ranging ineffective super effective catandmouse game continue require innovation opposing side opinion anticheats stagnated arena want provide information feel waythis section going cover platform specific method detecting hypervisors majority opensource hypervisors built use intel processor vector covered many method applied amd well despite supported le anticheats cheat providersboth intel amd support use bitmap referred msr bitmapmsr permission bitmap respectively bitmap allows vmm control whether rdmsr specific msr cause vmexit bitmap cover specific range msr value mean readswrites msrs outside range could undefined behavior vmxsvm enabledone way security software anticheat antimalware could leverage information check whether msr access msr outside range cause exception generated write performed real hardware unimplementedreserved msr address processor generate generalprotection exception however opensource hypervisors discard writes invalidunimplemented msrs write causing system instability order mitigate rdmsr performed unimplementedreserved msr address inject gp guestthis effective method detection casea common method determining specific opensource hypervisor used check db exception delivered proper instruction boundary executing exiting instruction eflagstf set occurs singlestep debug exception properly handled simple method detection create detection routine similar pushfq dword ptr rsp mov eax popfq exitinginst nop ret detecting particular platform requires use veh check rip determine singlestep trap flag set prior executing detection procedure trigger exception need modify debug register set thread context important remember need preserve modification debug register contextflags enable proper bit breakpoint condition set tasksonce breakpoint detected associated proper flag debug exception generated processor clear flag task switch allows breakpoint apply taskswhen exception delivered exception handler registered check rip determine db delivered correct instruction real hardware exception delivered exitinginst whereas virtualized environment oversight delivered nopthis method effective detecting specific opensource platform mitigation already documented member blog located however despite publication still present many cheat providersthe interesting part xsetbv instruction one instruction cause vm exit unconditionally leverage attribute xsetbv instruction detect hypervisor presencethis method detecting hypervisor presence relies causing exception host xsetbv vmexit handler since known private public mini hypervisor implementation blindly execute xsetbv instruction host xsetbv handler execute xsetbv way guest state cause fault cause host fault naïve hypervisor implementationsfirst must determine condition xsetbv cause faultwith see several way force generalprotection fault gp documentation tell u bit must always set executing instruction ecx eax cause gp example cause fault host xgetbv try clear bit cause gp xsetbv except exceptionexecutehandler get host properly handled xsetbv injected gp guest logdebug running naïve hypervisor implementation handle xsetbv caused host fault resulting bugcheck wanted naïve hypervisor implementation handling instruction would look like vmmeventstatus hvapi vmmhandlexsetbv pvirtualcpu virtualcpu xcr ulargeinteger xcrvalue xcr virtualcpu context rcx xcrvalueulowpart virtualcpu context rax xcrvalueuhighpart virtualcpu context rdx blindly execute xsetbv whatever guest give u trust guest xsetbv xcr xcrvaluequadpart return vmmhandledadvancerip might wondering safe cause bugcheck like well properly written hypervisor implementation cause bugcheck making use seh hypervisors used cheating purpose unable use seh driver mapped kernel exploiting thirdparty driver way achieve seh unsigned driver scope article running bare metal hypervisor proper xsetbv emulation simply output annoying user used reliable detection vector registering bugcheck callback handy way execute code bugcheck occurred manipulate data written crash dump logic follows register bugcheck callbacksave magic number guid part dumpparse dump next bootthis lot work small piece work needing done kbugcheckreasoncallbackrecord bugcheckcallbackrecord boolean bugcheckcallbackregistered false static const magicnumber static const guid magicdriverguid void bugcheckcallbackroutine kbugcheckcallbackreason reason struct kbugcheckreasoncallbackrecord record pvoid reasonspecificdata reasonspecificdatalength pkbugchecksecondarydumpdata secondarydumpdata secondarydumpdata pkbugchecksecondarydumpdata reasonspecificdata secondarydumpdata guid magicdriverguid secondarydumpdata outbuffer pvoid magicnumber secondarydumpdata outbufferlength sizeof magicnumber keinitializecallbackrecord bugcheckcallbackrecord bugcheckcallbackregistered keregisterbugcheckreasoncallback bugcheckcallbackrecord bugcheckcallbackroutine kbcallbacksecondarydumpdata secretclub bugcheckcallbackregistered return statusunsuccessful mitigating type detection time consuming important best rule follow read sdmapm architecture example properly implemented xsetbv vmexit handler static boolean fp must unconditionally set return false ymm depends sse return false bndregs bndcsr must return false validate xsave feature bit opmask zmm hizmm require ymm return false opmask zmm hizmm must return false feature bit valid return true vmmeventstatus hvapi vmmhandlexsetbv pvirtualcpu virtualcpu xcr ulargeinteger xcrvalue xcr virtualcpu context rcx make sure guest trying write bogus xcr switch xcr case break default hvdbgbreak gpfault vmxinjectgp virtualcpu return vmmnothandled xcrvalueulowpart virtualcpu context rax xcrvalueuhighpart virtualcpu context rdx make sure guest trying set unsupported bit xcrvaluequadpart hvdbgbreak goto gpfault make sure bit set architecturally valid xcrvaluequadpart hvdbgbreak goto gpfault point xcr value accepted hardware xsetbv xcr xcrvaluequadpart return vmmhandledadvancerip tracing interrupt message branch useful feature implemented intel hardware msr particular hypervisors take advantage last branch recording lbr branch tracing track branch obfuscated product anticheats since anticheat product spoof return address one utilize lbrbts trace exact location branch occurredthis noticed quite anticheats private c go league brief sample detection may look like mov rcx xor rdx rdx wrmsr rdmsr shl rdx edx eax wrmsr rax rdx jmp checkmsr checkmsr test al jnz nodetect mov al ret nodetect xor rax rax xor rdx rdx mov rdx wrmsr ret would roughly translate writemsr debugctllbr debugctlbts re readmsr re debugctllbr return return importantly would check potential exception could thrown seen various league anticheats c go quite effective determining lbrbts virtualization usedso would someone mitigate check answer injecting gp guest real hardware lbrbts supportedin addition check anticheat could implement detection based usage savedloaded lbr information vmx transition since many opensource project handle storeload lbr information appropriately anticheat could force vmexit use unconditionally exiting instruction like cpuid execution would need check last branch taken lbr stack resuming guest operation target address match expected value would mean introspective engine present save current lbr top stack auto lastbranchtakenpre readlbrtos force vmexit cpuid cpuid regs save post vmexit lbr top stack auto lastbranchtakenpost readlbrtos compare last branch taken lastbranchtakenpre lastbranchtakenpost return true would quite effective catching hypervisors leveraging lbr properly handling storage lbr information lbr stack consists pair msrs store last branch source target address msrs associated listed last branch source address last branch target address msrlastbranchtos msr containing lbr top stack pointer knowledge vmexitvmentry msrstore area documented intel sdm save lbr stack top stack vmexit encountered restore vmentry guest lbr stack size determined table hypervisor would need area allocated would store value lbr stack information write loadstore count address respective vmcs field vmcsvmexitmsr loadstore count vmcsvmexitmsr loadstore address successfully prevent lbr stack check catching vmmsynthetic msrs commonly used hypervisor platform report information guest host hyperv vmware virtualbox example commercial hypervisors implement synthetic msrs commonly see implemented range range marked reserved range documented future processor never use range featuresthere also msrs implemented current processor market however valid msr address queried using rdmsr platform typically generate general protection exception gp however virtualized environment read unimplemented address could yield undefined result example would reading msr address vmware provide random data generate exceptionprobes reserved range mentioned unimplemented msr address could used determine current system virtualized combat hypervisor force access reserved unimplemented msrs inject gp guest simple detection would look something like boolean kisyntheticmsrcheck void define hvsyntheticmsrrangestart try readmsr hvsyntheticmsrrangestart except exceptionexecutehandler return false return true check useful determining commercial hypervisor used since investigated implement msr rangehypervisors improperly handle control register access exit risk detected much like bug discovered vmware member drew determined vmware hypervisor properly emulating processor behavior already done honor writing use case detecting method mitigation proposed blogcrn access exiting vmware bugfor position corresponding bit clear crx guesthost mask destination operand loaded value corresponding bit crx position corresponding bit set crx guesthost mask destination operand loaded value corresponding bit crx read shadow thus every bit cleared crx guesthost mask mov crx read normally crx every bit set crx guesthost mask mov crx return value crx read shadowtl dr bit set guesthost mask shadow bit appears bit guesthost mask actual bit appears vmexit occurs guest attempt modify bit set guesthost maskbased hypervisors may set bit read shadow guesthost mask set bit would mean guest read value bit would get however bug exploited platform signal vmxe disabled vmx instruction still execute possible blatant indication virtualization usedthe fix would inject undefined opcode exception ud guest execution vmx instruction intend mask vmxe bit public platform inject gp guest execution vmx instruction opposed ud proper exception also indicative presencea quick method similar reserved msr address range check reserved cpuid response value would normally example leaf cpuid leaf marked reserved architecture commonly used reporting capability vmm two option check invalid leaf leaf return data two example belowthis first example display using invalid cpuid leaf determine system umpissystemvirtualized void unsigned int invalidleaf unsigned int validleaf struct hvdetails unsigned int data hvdetails invalidleafresponse hvdetails validleafresponse cpuid invalidleafresponse invalidleaf cpuid validleafresponse validleaf invalidleafresponsedata validleafresponsedata invalidleafresponsedata validleafresponsedata invalidleafresponsedata validleafresponsedata invalidleafresponsedata validleafresponsedata return statushvdetected return statushvnotpresent second example us highest low function leaf compare data would given real void cpuidbuffert regs cpuid regs cpuidbuffert reservedregs cpuid reservedregs cpuid reservedregs reservedregseax reservedregseax regseax reservedregsebx regsebx reservedregsecx regsecx reservedregsedx regsedx return statushvdetected return statushvnotpresent section cover advanced detection method reliable much difficult implement may require inspection result execution cache sidechannel attack different one cache sidechannels used super simple quite effective also cover standard timing attack flaw prior addressing anticheat method discoveredthis method used determine hypervisor emulates invd instruction properly expected many public platform emulate instruction appropriately leaving detection vector wide open method supplied member drew us corroborates effectivenesspushfq cli push set cache data wbinvd flush writeback data set previous instruction system memory mov byte ptr rsp set memory wb memory system memory invd flush cache write back system memory real hardware result loss previous operation pop rax proper system behaviour al hypervisoremulator us wbinvd nothing al popfq ret subtle behavior real system emulated properly avoid type detection present handful opensource hypervisor platform exercise reader try determine mitigate sidechannelthere many cache sidechannels common gathering statistic cache miss locating conflicting cache set hit miss depending implementation require lot testing prior implementation ensure false positive type solution require making sure prefetcher unable determine cache usage randomizing cache set access ensuring new read cache set correct term many line read whether valid cache line probed properly involved process plan including implementation check articlethe method example enough validated encourage validate well aware cause gp sgx usedif done performance profiling worked sandbox detection antimalware questionable purpose likely used encountered sort timing check plenty literature covering detail attack case relatively effective however hypervisor developer becoming clever devised method reducing time discrepancy low marginthis timing attack used determine system virtualized common anticheats baseline detection vector also used malware determine sandboxed term effectiveness say effective solution somewhat confusing pass pafish check anticheat check divulging code let briefly go logicwe know timing attack query timestamp counter twice either direct use msr intrinsic rdtsc typically instruction instruction cause vmexits typically idea emulate cycle count adding emulated cycle counter could use disassembler add average devise method much accurate trace first rdtsc instruction second add average cycle count emulated counter tsc offsetting feature utilized though example take advantage mtf also need determine average number cycle vm transition take subtract emulated counter typical average cycle modern processorssuccessfully implementing solution perfect yield better result majority tested solution presented literature pass virtualization check devised important attempting implement solution get bogged unnecessary detail like smis synchronize counter invariant across logical processor though keep simple sillyas opposition standard timing attack offer novel approach rely timestamp counter requires much effort spoof briefly mentioned post decided go little detailiet divergence measurement comparison instruction execution time iet using two different instruction similar rdtsc cpuid rdtsc combination iet divergence test us counter profile two instruction calculate average execution time compare two instruction result detection method us actual performance counter accessed msr instead timestamp counter discussed tsc emulated relative ease pose threat standard detection method spoofing aperf counter much difficult simple forcing vmexit aperf msr performing similar operation tsc emulationthe test work like disable interruptssetup register profiling loopcapture starting clock count instruction cpuid execute leaf every time capture end clock countcalculate difference clock count loopstore result cpuidiet arrayrepeat second candidate instructionrepeat loop n time refined timing profilechoosing instruction difficult part check need use unconditionally exiting instruction ensure vmm present processor trap ideal candidate would cpuid second instruction must chosen care average iet must longer cpuid real hardware otherwise check pointless whole point compare execution time one instruction instruction take longer real system virtual environment cpuid consume lot cycle completing candidate instruction take longer profiling target instruction could trapped hypervisor setup relatively easilythe iet divergence test used anticheats counter advanced hypervisors used cheating sample implementation shown belowcli xor mov ecx rdmsr shl rdx rax rdx mov rax lea rsi xor eax eax cpuid mov rsi eax mov ebx mov ecx mov edx mov ecx rdmsr shl rdx rax rdx mov rdx sub rax mov rax todo capture comparable instruction iet store result loop break end enable interrupt end profile incomplete implementation step would need repeated second instruction executes longer cpuid choosing second instruction important getting clear result said effectiveness detection method quite remarkable catch even well hardened hypervisors platform interested researching product use encourage exit aperf access give private anticheats lookthis detail missed publicly available mini hypervisors although one hvpp properly handle common oversight already know run code compatibility mode support execution code although run code compatibility mode hypervisor still execute natively code confusing hypervisor configured trap gdtidt access since real processor write byte descriptor table register running compatibility mode rather byte running long mode handling correctly common mistake make easy detectionlet brain detect first thing need running compatibility mode cpl need done cpl since window make use usermode instruction prevention umip security feature temporarily drop protected mode briefly lot work way implement detectionalternatively theoretically possible one could synchronize user mode code execute sidtsgdt instruction kernel thread temporarily disabled figured get compatibilityprotected mode juicy detection descriptor descriptor sgdt descriptor descriptor gotcha work checking hypervisor accidentally written extra byte descriptor memory really simple mitigation relatively trivial requires vmm check current segment long mode segment write proper lengththis mitigation sidt would look like leave mitigation sgdt readervmcsreadguestgdtentry segmentdesc switch instructioninfobitsinstructionidentity case vmxgdtidtidentitysidt descriptor limit vmcsguestidtrlimit segmentdescbitsl writeqword uintn descriptor fieldoffset vmcsread vmcsguestidtrbase else writedword uintn descriptor fieldoffset vmcsread vmcsguestidtrbase break documented method battleye eac employ detect virtualized system research began trapping various msrs vmx msrs efer feature control aperf mperf debugctl lstar also trapped execution vmxsvm instruction traced back execution rdtsc cpuid result somewhat disappointingthe method battleye employ standard timing attack using rdtsc cpuid rdtsc combination moderately improved code since article posted member blog moved check kernel still exists nonetheless check made currently expect rolling new technology also yield attention hypervisorsthis new component begun mapping kernel still investigationcurrently eac performs single vmread upon driver initializationthey properly wrap exception handler improvement method documented beforeunfortunately method around simple work seems platform denying access vmread cpl solution inject ud guest vmm trap vmread notice access msrs checked lstar related lstar hook vmmit look like provider may disabled patchguard modified lstar added lstar check catch iteasyanticheat also us standard timing attack leaving subject circumvented proper tsc emulation described earlier subsection overall virtualization check lacking relatively simple circumvent anticheats like esea faceit esportal employ aggressive check net greater effectiveness catching hypervisor based cheat expect anticheats supporting majority game begin take consideration popularity hypervisors increasesit came attention eac minute gameplay queried waited bit longer see readswrites msrs came minute sitting waiting clear nothing else coming notification received ipower tracerit clear code executing read virtualized section code upon analysis confirmedwe also confirmed bit checking syscall enable bit sce check bit due release syscall hooking method using efer published daax ajkhoury blog without deobfuscating code believe safe assume bit checking due relevance mitigation involves setting bit corresponding msr bitmap utilize loadsave space vmcsout curiosity decided take look eacs call ntdeviceiocontrolfile iofcalldriver noticed iofcalldriverwrapper eac anticheats use iofcalldriver various placesntstatus fastcall iofcalldriverwrapper ioctlcode deviceobject deviceobject void inputbuffer ulong inputbufferlength void outputbuffer ulong outputbufferlength eac us iofcalldriver query storage property disk likely gather information like serial number name etc hardware fingerprinting purposesif iofcalldriverwrapper deviceobject inputbuffer storagedescriptorheader return storagedescriptorheadersize return pbuf pstoragedevicedescriptor allocmemory storagedescriptorheadersize pbuf pbuf return memset pbuf storagedescriptorheadersize dword inputbufferadditionalparameters inputbufferquerytype inputbufferpropertyid iofcalldriverwrapper devicedisksys inputbuffer storagedescriptorheadersize memset inputbuffer iofcalldriverioctl inputbuffer outputbuffer eac also use ntdeviceiocontrolfile query ndis driver ioctlndisqueryglobalstats oid used acquire mac address system also hardware fingerprinting purposesif zwcreatefile filehandle objectattributes iostatusblock currentthread readgsqword filehandle oldpreviousmode getpreviousmode currentthread setpreviousmode currentthread ntdeviceiocontrolfile outputbufferlength inputbufferlength ioctlcode status ntdeviceiocontrolfile iostatusblock ioctlcode inputbuffer inputbufferlength outputbuffer outputbufferlength may may complete list query made purpose hardware fingerprinting dug much could directly obtaining ssdt calling directly using mean call function indirectly plan indepth analysis hardware fingerprinting future article quick dump curiosity hooking ntdeviceiocontrolfile iofcalldriverin article covered lot different detection method hypervisors employed effective others notsomuch also detailed method circumventing documented detection vector much actual implementation reader intended piece providing complete solution every method detection far many even article however wanted document commonly used method regardless stabilitywe also took brief look eac virtualization check somewhat disappointing given growing popularity using opensource hypervisor platform cheating provided circumvention method check plan release complete refined solution tsc emulation future however reader keen waiting provided logical walkthrough implement future article covering two particular anticheats plan dig deeper hardware fingerprinting reporting detection procedureswe hope enjoyed reading different bug virtualization platform leveraged detect introspective engine method passing check interested learning virtualization writing hypervisor recommend checking two series thanks ipower daax drew ajkhoury work system emulation tool
18,Lobsters,virtualization,Virtualization,In-browser 6502 CPU simulator,https://twitter.com/diodesign/status/1248975584647995394,inbrowser cpu simulator,,detected javascript disabled browser would like proceed legacy twitter yes
20,Lobsters,virtualization,Virtualization,virtualization in windows,https://flak.tedunangst.com/post/virtualization-in-windows,virtualization window,good bad ugly conclusion rant software,window desktop threadripper cpu core maybe could get bit utilization virtualization maybe given frequency attack target window could use virtualization increase security let see goesgoodif pro edition window run edge application guard basically give tiny virtual window machine without much else limiting scope attack actually seems workbadif pro edition home available without going far morality rabbit hole think kinda gross gate basic security feature like memory limit management feature one thing feature work even home user deserve security protein folding recently wanted review cpu thermal power frequency thing installed ryzen master run receive error run virtualization based security enabled supposed disable sorry amd would rather never similar trouble intel xtu whatever worthi wanted run little openbsd vm hyperv instead driving little window fake vesa graphic whatever let use real video card according metric system shit ton pci slot stuck extra radeon card one pas openbsd using window call discrete device assignment dda rock roll get window monitor hardware accelerated glxgears monitorinstalling radeon driver window update unnecessary verify plugged slot correctly result error message amdkmdap driver incompatible memory integrity another window security feature us virtualization prevent kernel corruption fuck amd fix shit also shame microsoft certifying broken driveranyway card work reboot proceed run magic powershell command remove pci device host add guest start guest boom error hypervisor feature available user microspeak pay gold plated server edition window honest kinda expecting officially feature really supported curious enough see user experience kinda dumb also segmentation stupid putting dedicated device vm merely server thing want right desktop rumor slightly exclusive pro workstation enables feature yet find microsoft product matrix indicating thatuglyi removed radeon card since clearly going work system still memory integrity disabled enable even without radeon card installed driver still permanently tainted system incompatible integrity forever insecure result thirty minute experiment guess bonus lesson wary install workarounds get back straying even lighted path maintain come back problematic hardware removed even problematic driver window update library conclusiondon use virtualization window probably use window posted apr tedu updated apr tagged rant software
21,Lobsters,virtualization,Virtualization,Protecting Your Privacy With a Virtual Machine While Using Zoom,https://blog.privacytools.io/protecting-your-privacy-while-using-zoom-at-home/,protecting privacy virtual machine using zoom,zoom selling opportunity zoom privacy woe mine personal data user number ministry defence spacex leaking email address profile information falsely claim endtoend encryption transport layer security tl jitsi bigbluebutton realtime communication malicious website enable webcam use camera without consent window username ability steal credential complete feature freeze setting zoom vm separate guide detailed instruction need doublechecking virtualbox virtualbox extension pack download torrent overview verify debian iso legitimate virtualbox guest addition complete walkthrough,ongoing pandemic many u make rapid lifestyle adjustment keep social distancing isolation rule u working studying home using telecommunication tool conference lecture becoming daily habit people around worldone tool particular zoom seen huge increase use since outbreak due part clever marketing support material provided teacher student office worker employer consumer report privacy researcher bill fitzgerald suggested zoom using pandemic selling opportunityzoom privacy woesof course everyone keen continue work keep productivity steady rate crisis many employer zoom appears great option zoom happy take customer likely continue use service pandemic subsides continue mine personal data usersmany institution workplace preparation place crisis scale requiring adopt technology without taking time consider privacy security implication solution chosen number prompting ban organization like united kingdom ministry defence spacex zoom may suitable organization privacy breach continue pop day ago revealed zoom leaking email address profile information user address domain bad news gmail user zoom best choice protecting communication privacy zoom falsely claim support endtoend encryption fact zoom us regular transport layer security tl used visiting http website mean zoom see content conversation call would possible true endtoend encryptionif ability choose platform use recommend considering jitsi bigbluebutton two option hosted business institution internally rather relying cloud offering privacytools also compiled list recommendation realtime communication also check especially need videobut sometimes nt opportunity choose platform must use communicate coworkers student friend required use zoom software like using virtual machine vm vm program work like completely separate computer inside computer host operating system main system continues run everything might need guest operating system also run completely independently run program want like zoom inside guest operating system completely isolated system file wo nt even know host exists using vm help maintaining security especially need use personal device home work bug like recently discovered exploit allowed malicious website enable webcam use camera without consent discovery user window username ability steal credential would possible zoom would completely isolated device would able run vm shut also worth noting zoom decided complete feature freeze attempt improve security privacywhen zoom confined vm see application open outside host operating system recommend user avoid attaching webcam however user reported encouraged required school employer fortunately case still attach webcam asneeded guest operating system full functionality setting zoom vmcreating virtual machine application like zoom relatively easy task techsavvy user going outline basic step need need guidance created separate guide detailed instruction screenshots help processwhat needa computer capable running virtual machine modern machine worth doublecheckinga virtual machine hypervisor actually run vm people free virtualbox program work well use guide advanced user may wish use solution like parallel vmware workstation hyperv gnome box support functionality wellvirtualbox user need webcam support also download virtualbox extension pack download pagea debian iso linux installer download torrent overviewverify debian iso legitimate compromised might boot might inadvertently installing malware install virtualbox virtualbox extension pack nt alreadycreate new vm virtualbox set type linux debian give good amount ram total ram good user create virtual hard diskopen vm setting attach debian iso downloaded also adjust video memory typically setting higher best start new debian vm complete debian installer automatically startinstall virtualbox guest addition debianattach device like webcam might need use vm reboot vmnow install pretty much software like new linux vm completely isolated main machine remember confusing created complete walkthrough download explains step detail use web browser built debian download zoom good go
22,Lobsters,virtualization,Virtualization,Lightweight Linux VMs on NixOS,https://www.srid.ca/2012301.html,lightweight linux vms nixos,lxd installing lxd running ubuntu container entering container installing nix official instruction running nixos container nixosgenerators mine,often find needing pristine linux system testing program expected work user machine environment possibly quite different mine could spin virtual machine heavyweight alternatively could use docker docker container conceptually process le systementer lxd advertises offering user experience similar virtual machine using linux container instead put lxd make pet container basically vms without virtual hardware extra kernel word lxd allows u spin lightweight linux vms linux machine one care separation userland hardware kernelinstalling lxdon nixos install lxd adding virtualisationlxdenable true configurationnix might also want add lxd user group use sudo running lxc commandrunning ubuntu containerlet u run bare ubuntu container get started lxc launch pristine c securitynestingtrue note securitynesting flag enabled may able install nix later may leave disabled would using nix named container pristine check status lxc running stateentering containerthis drop u root shell lxc exec pristine binbash however usually better create user account sudo access first use lxc exec pristine adduser shell binbash ingroup sudo srid may directly log user follows lxc exec pristine su srid c tmux newsession main note use tmux program requiring tty work correctlyinstalling nixassuming enabled securitynesting flag container able install nix following official instructionsi use nix develop install program need order begin testing pristine linux machine without much fanfarerunning nixos containerthe official image server lxd support nixos however build using nixosgenerators let wrap command script call buildlxcimagesh usrbinenv nixshell nixshell p nixosgenerators nixshell bash set xe configurationnix metaimg nixosgenerate f lxcmetadata xargs r cat awk print img nixosgenerate c configurationnix f lxc xargs r cat awk print lxc image import alias nixos metaimg img need configurationnix see mine build nixos image using script build nixos lxc image buildlxcimagesh configurationnix launch container lxc launch nixos childnixos c securitynestingtrue access root shell lxc exec childnixos runcurrentsystemswbinbash configurationnix also declares user account instead directly log user lxc exec childnixos runcurrentsystemswbinsu srid c tmux newsession main
24,Lobsters,virtualization,Virtualization,Hacking Unikernels Through Process Injection [A Step by Step Guide],https://hackernoon.com/hacking-unikernels-through-process-injection-a-step-by-step-guide-oobk323f,hacking unikernels process injection step step guide,hacking unikernels process injection step step guide lot people mistaken notion unikernels unhackable characteristic untrue absolutely hackable depending deployed configured post exploitation nanos process injection createremotethread attacking linux ptrace ahem shmopen memfdcreate memfdcreate ghostcat exploit pocs exist userland exec grugq capable one libreflect nanos,hacking unikernels process injection step step guide lot people mistaken notion unikernels unhackable characteristic untrue absolutely hackable depending deployed configuredthe reason notion exists however represent stark departure traditional attack really force attacker earn living attacking linux box still incredibly easy feat system basically designed said traditionally speaking pure shellcode attack attack built rop gadget limited use end day really act way opening door house still want steal gun money happens post exploitation really want execute different program kind one exploiting otherwise point attacking begin lot people gloss fact program preferably come form shell least something like mysqldump monero cryptominer rage past year something nt want stuff entire mysql client payload written shellcode rop gadget really feasiblethe trouble unikernels single process definition nt inherent facility inside kernel run multiple process although many implementation nanos included allow access thread might want need still performance mean ca nt forkexec run cryptominer support kernel soso even discover vulnerability inside unikernel go running program want run process injectionvxers botnet lord long used method process hollowing process injection hide obfuscate evade detection dropping payload hundred thousand unsuspecting window boxen spread throughout world majority running form virus protection canonical way looking malware scan called ioc indicator compromise go blog section endpoint protection company look research article typically hash file ip showing iocs malware researching prove detect remediate itthis catch lot low quality malware technique like process hollowing process injection hand act like good boy scout burner leave trace filesystem sometimes referred memory attack window made feature pretty straightforward exploit call createremotethread exactly sound likehowever reading article probably nt care window lost cause unbeknownst poor city government suffer ransomware modern infrastructure run linuxattacking linuxa lot people aware technique window linux well actually start running new program without fork without spawn one shell also would use fork see linux launching new process typically entail running fork execng everyone know unikernels nt support fork people nt realize nt support exec eitherlet look method could use linuxone method includes using ldpreload shared library override code process want run although implies thingsone implies starting process local access two existing process classic process hollowing basically spinning innocent program loading parasite running letting rest system seem like everything okanother method us ptraceptraceptrace one syscalls get overly abused lot different thing ahem gvisor ahem technique pretty simple take shared library inject via ptracegood thing almost guaranteed capability turned whatever box currently check verify though via proc procsyskernelyamaptracescopenewer method abuse shared memory shmopen although many environment devshm mounted noexec verify whether case grepping mount output mount grep devshm tmpfs devshm type tmpfs rw nosuid nodev see recent ubuntu box bionic pulled meaning vulnerable attackmemfdcreatethis brings u memfdcreate technique technique allows u create anonymous file stuff program exec let take look thislet say control vulnerable webserver attacked maybe recent ghostcat exploit like inject small little parasitical program host process way nt leave thing disk print process id see find binary disk know executing normally state running memory include stdioh include unistdh int main int argc char argv printf parasite process id dn getpid file parasite fopen argv r parasite null printf running memory n sleep else printf execing diskn return let take look theoretical payload run webserver would look like example load program locally disk could well deliver via http say image upload form mean like pocs exist thisnow get loaded show proc however see name process whatever want disguise something germane simply issue call exec define gnusource include unistdh include syssyscallh include linuxmemfdh include errh include stdlibh include stdioh int main file f unsigned char bin long filelen printf original process id dn getpid f fopen parasite rb fseek f seekend filelen ftell f rewind f bin unsigned char malloc filelen sizeof unsigned char fread bin filelen f fclose f int fd fd syscall sysmemfdcreate mfdcloexec err memfdcreate write fd bin filelen sizeof char char binpath asprintf binpath procselffd fd char argv null char envp null execve binpath argv envp free bin free binpath run linux see successfully injected process eyberg box scratch main original process id parasite process id running memory running memory grep process id also find name changed attack definitely work linux box slightly paranoid lock thing since nt exec look optionsuserland execpeople tried route around limitation thousand different way notably originally explored grugq basically concept rewrite exec userland many rewrite since capable one broken due stack smashing protection recent one libreflect lot userland exec find online going work environment variety reason wo nt transferrable unikernel unikernel old based nanos run code work statically linked binary binary linux nowadays dynamically linked issue stack smashing defaultthere thing preventing working nanos today including fact nt proc said attack unikernel one way gosubscribe get daily roundup top tech story
25,Lobsters,virtualization,Virtualization,How to deploy on remote Docker hosts with docker-compose,https://www.docker.com/blog/how-to-deploy-on-remote-docker-hosts-with-docker-compose/,deploy remote docker host dockercompose,dockercompose dockerhost environment variable command line option docker context docker desktop docker engine dockercompose sample compose application compose sample repository running localhost running remote host manual deployment copying project file install dockercompose running using dockerhost environment variable set target engine using docker context docker context shown documentation create use context target remote host dockercompose context usage compose deployment across multiple target target environment context name api endpoint summary,dockercompose tool pretty popular running dockerized application local development environment need write compose file containing configuration application service running docker engine deployment get application running locally second single dockercompose command initial scope developer look easeofdeployment ci pipelinesproduction environment development environment find today dockercompose used different way beyond initial scope case challenge dockercompose provided support running remote docker engine use dockerhost environment variable h command line option user friendly managing deployment compose application across multiple environment becomes burden address issue rely docker context securely deploy compose application across different environment manage effortlessly localhost goal post show use context target different environment deployment easily switch start defining sample application use throughout exercise show deploy localhost look docker context information hold allow u safely connect remote docker engine finally exercise use docker context dockercompose deploy remote engine proceeding docker dockercompose must installed localhost docker engine compose included docker desktop window macos linux need get docker engine dockercompose make sure get dockercompose context support feature available starting release dockercompose sample compose application let define compose file describing application consisting two service frontend backend frontend service run nginx proxy forward http request simple go app server sample necessary file exercise downloaded sample compose sample repository used instead project structure compose file found tree frontend dockerfile nginxconf dockercomposeyml version service frontend build frontend port dependson backend backend build backend running localhost deploy application defined previously go project directory run dockercompose cd hellodocker dockercompose dcreating network hellodockerdefault default drivercreating donecreating done check container running port frontend service container mapped port localhost described dockercomposeyml docker pscontainer id image command created status port nginx latest nginx g daemon second ago second hellodockerbackend usrlocalbinback second ago second query web service port get hello message go backend curl hello docker running remote host remote docker host machine inside outside local network running docker engine port exposed querying engine api sample application deployed remote host several way assume ssh access remote docker host keybased authentication avoid password prompt deploying application three way deploy remote host manual deployment copying project file install dockercompose running common usage compose copy project source dockercomposeyml install dockercompose target machine want deploy compose app finally run scp r hellodocker user remotehost pathtosrc ssh user remotehost pip install dockercompose cd pathtosrchellodocker dockercompose disadvantage case change application source compose file copy connect remote host rerun using dockerhost environment variable set target engine throughout exercise use dockerhost environment variable scenario target docker host achieved passing h argument dockercompose cd hellodocker dockerhost ssh user remotehost dockercompose better approach manual deployment get quite annoying requires setexport remote host endpoint every application change host change using docker context docker context lsname description docker endpoint kubernetes endpoint ssh user remotemachine cd hellodocker dockercompose remote docker context efficient way automatically switch different deployment target discus context next section order understand docker context used compose ease speed deployment docker context docker context mechanism provide name docker api endpoint store information later usage docker context easily managed docker cli shown documentation create use context target remote host access remote host easier way docker client first create context hold connection path docker context create remote hostssh user remotemachine remotesuccessfully created context remote docker context l name description docker endpoint kubernetes endpoint orchestratordefault current unix varrundockersock swarmremote ssh user remotemachine make sure set keybased authentication sshing remote host done list container remote host passing context name argument docker remote pscontainer id image command created status name also set remote context default context docker command allow u run docker command directly remote host without passing context argument command docker context use remoteremotecurrent context remote docker context lsname description docker endpoint kubernetes endpoint orchestrator default current dockerhost unix varrundockersock swarm remote ssh user remotemachine dockercompose context usage latest release dockercompose support use context accessing docker api endpoint mean run dockercompose specify context remote automatically target remote host context specified dockercompose use current context like docker cli dockercompose remote userwarning unknown host key b creating network hellodockerdefault default drivercreating donecreating done docker remote pscontainer id image command created status port hellodockerfrontend nginx g daemon second ago second hellodockerbackend second ago second compose deployment across multiple target many developer may several developmenttest environment need switch deployment across effortless use context dockercompose try exercise context switching several docker engine define three target localhost running local docker engine remote host accessible ssha dockerindocker container acting another remote host table show mapping context docker target target environmentcontext nameapi endpointlocalhostdefaultunix varrundockersockremote hostremotessh user remotemachinedockerindockerdindtcp run dockerindocker container port mapped localhost run docker run p e dockertlscertdir dind docker pscontainer id image command created status port second ago second dind create new context dind easily target container docker context create dind hosttcp swarmdindsuccessfully created context dind docker context lsname description docker endpoint kubernetes endpoint orchestratordefault current dockerhost unix varrundockersock swarmremote ssh user devmachine swarm target environment deploy compose application localhost docker context use dinddindcurrent context dind dockercompose dcreating network hellodockerdefault default drivercreating donecreating done docker pscontainer id image command created status port hellodockerfrontend nginx g daemon second ago second hellodockerbackend second ago second docker default pscontainer id image command created status port minute ago minute dind dockercompose remote userwarning unknown host key b creating network hellodockerdefault default drivercreating donecreating done docker context use defaultdefaultcurrent context default dockercompose dcreating network hellodockerdefault default drivercreating donecreating done docker pscontainer id image command created status port hellodockerfrontend nginx g daemon minute ago minute hellodockerbackend minute ago minute minute ago minute dind sample application run three host querying frontend service host shown return message curl docker exec dind sh c wget curl output hello docker summary deploying remote host dockercompose common usecase quite time docker context support dockercompose offer easy elegant approach target different remote host switching different environment easy manage deployment risk across reduced shown example access remote docker host via ssh tcp protocol hoping cover large number usecases
26,Lobsters,virtualization,Virtualization,Extreme WebAssembly 2: the sad state of WebAssembly tail calls,https://medium.com/leaningtech/extreme-webassembly-2-the-sad-state-of-webassembly-tail-calls-f5d48ef82a87,extreme webassembly sad state webassembly tail call,extreme webassembly sad state webassembly tail call cheerpx cheerpj previous article series presentation questionable take support webassembly tail call previous article chrome support wasm tail call end tail call status tail call status spidermonkeyfirefox related issue spidermonkey tail call status javascriptcoresafari created one conclusion web vms bonus content previous post series bonus content hello world cheerpx repo http cheerpxdemosleaningtechcompublicdeploycxjs http twittercomalexpignotti get touch twitter medium ask,extreme webassembly sad state webassembly tail callsno reference firefox intendedhere leaning technology use webassembly daily create unique seemingly impossible technology like cheerpx webassembly virtual machine designed safely run arbitrary library application browser cheerpj solution compile run java application browser cheerpx particular certainly complex jit engine written webassembly quite possibly single advanced webassembly project running browserin order efficiently run arbitrary code webassembly overcome sort limitation caused either current state wasm standard browser implementation interested reading magic behind cheerpx published information previous article series presentation back february wasm sf meetupyuri iozzelli discussing internals cheerpx engine wasm san francisco meetupwebassembly amazing technology incredibly disruptive potential however probably due young age still many rough edgesto clear referring questionable take security model actual limitation bug encountered development process cheerpxlet talk bit tail callssupport webassembly tail callsas discussed previous article tail call critical efficiently support execution arbitrary code particular support indirect jump keeping consistent call stack webassembly tail call postmvp feature currently phase implementation phase specification introduces two new opcodes returncall returnindirectcall among major browser chrome support wasm tail call enabling explicitly jsflags experimentalwasmreturncall flag hope moved experimental webassembly flag chrome flag end browser seems taken implementation phase standard process literally thoughtail call status first sight tail call well implemented using abusing generated code limitation thoughin particular follows twotier jit compilation strategy webassembly fast simple baseline compiler called liftoff advanced slower optimizing compiler called turbofan idea baseline compiler order magnitude faster optimizing compiler give decent executable code soon speed startup time wasm code application start turbofan crunching instruction graph background eventually emit optimized native code problem liftoff support wasm tail call compiler give silently upgrade turbofan make sense term robustness make problem quite opaquecareful use twotiered system would useful cheerpx generate wasm module notice chunk code run several time notice code become hot need actually generate wasm bytecode take time intended investment compiled code much faster running interpret recoup time spent compiling unfortunately newly generated wasm bytecode used browser must compile another time generate native code silent upgrade turbofan introduces significant latency delay time finally see return time invested jit compiler using baseline compiler get version code sooner could easily give nice performance boost architecture fair chrome developer seems committed getting issue fixed let wait seedon feel bad confused multiple layer jitting sometimes welltail call status spidermonkeyfirefoxit great kind proud firefox user myselfthe progress feature tracked update last month see related issue bugzilla major abi mismatch stopping moving pity seems another way firefox could lose ground competition moreover actually seen performance wasm spidermonkey superior past would love see cheerpx behaves firefoxnow obvious argument firefox fo could implement feature community benefit actually contributed patch spidermonkey past first case truly seems plausible path follow full rework wasm abi reasonably done u external developer something core spidermonkey team need work onif spidermonkey dev reading please get touch happy help much get feature certainly ourselvestail call status javascriptcoresafarii must admit understanding development process safari clearfrom see tail call supported safari seemed public bug report dedicated issue created one sure much priority apple work postmvp feature upgrade webassembly certainly bet safari supporting tail call sooner firefox would happy proven wrongagain dev safariwebkitjavascriptcore reading get touch happy helpconclusionstail call extraordinarily useful implementing virtual machine functional language webassembly tail call currently phase implementation phase next step phase would achieve full standardization featureunfortunately one requirement move phase phase web vms implementing feature serversidecommand line engine count microsoft edge count well since reskinned chromiumfor feature move forward either firefox safari need make progress help get done appreciatedbonus content previous post series shared early public demo cheerpx repl running browser find much polished version demo please note work chromechromium explicitly enabling tail call instruction included page new version includes standard package python everything shipped ubuntu package backspace finally work bonus content hello world cheerpxbut also want share something ready get hand dirty going describe run first hello world using cheerpxa linux host assumed also find readymade repo convenience use repo run make skip start favorite local http sectionlet start something basic create new directory mkdir cheerpxhellocd cheerpxhellocreate vanilla c hello world nothing fancy helloc include stdioh int main printf hello world n return compile executable sorry support code foreseeable futuregcc helloc hellothis dynamically linked executable need couple library run instruction accurate ubuntu may differ distro may also completely skip wish adding static flag compilation commandmkdir p libcp need basic html page let cheerpx magic doctype html html lang en style head meta charset title cheerpx hello world title script src http cheerpxdemosleaningtechcompublicdeploycxjs script head body style pre id console style pre script async function cxready cx cxsetconsole documentgetelementbyid console cxrun hello function cxfailed e consolelog cheerpx could start reason e cheerpxappcreate cxready cxfailed script body html start favorite local http server visit html page createdhttpserver p chromiumbrowser incognito jsflags experimentalwasmreturncall http minor miracle happened front eyesmagic work also code compiled c anything actually although library might required feel free experiment keep mind released polished product hack something nice let know http twittercomalexpignottiget touch want know amazing impossible product make follow u twitter medium also eager hear opinion feel tech mind cool use case question ask
27,Lobsters,virtualization,Virtualization,Docker & WSL 2 - The Future of Docker Desktop for Windows,https://www.docker.com/blog/docker-hearts-wsl-2/,docker wsl future docker desktop window,,one docker goal always provide best experience working container desktop environment experience close native possible whether working window mac linux spend lot time working software stack provided microsoft apple achieve part work closely monitoring window subsystem linux wsl since introduced see could leverage product original wsl impressive effort emulate linux kernel top window foundational difference window linux thing impossible implement behavior native linux meant impossible run docker engine kubernetes directly inside wsl instead docker desktop developed alternative solution using hyperv vms linuxkit achieve seamless integration user expect love today microsoft announced wsl major architecture change instead using emulation actually providing real linux kernel running inside lightweight vm approach architecturally close linuxkit hyperv today additional benefit lightweight tightly integrated window docker provide alone docker daemon run well great performance time take cold boot dockerd running wsl around second developer machine excited technology happy announce working new version docker desktop leveraging wsl public preview july make docker experience developing container even greater unlock new capability wsl work window home edition docker desktop collaborating microsoft part shared effort make docker desktop best way use docker window microsoft gave u early build wsl could evaluate technology see fit product share feedback missing broken started prototyping different approach ready share little bit coming next month docker desktop future replace hyperv vm currently use wsl integration package package provide feature current docker desktop vm kubernetes setup automatic update transparent http proxy configuration access daemon window transparent bind mount window file integration package contain server side component required run docker kubernetes well cli tool used interact component within wsl able introduce new feature docker desktop linux workspace linux workspace using docker desktop today vm running daemon completely opaque interact docker kubernetes api window run anything within vm except docker container kubernetes pod wsl integration still experience seamless integration window linux program running inside wsl also able huge impact developer working project targeting linux environment build process tailored linux need maintaining linux window build script anymore example developer docker work linux docker daemon window using set tool script developer linux machine developer working docker daemon using docker desktop technical preview wsl v code remote also bind mount wsl support inotify event nearly identical io performance native linux machine solve one major docker desktop pain point ioheavy toolchains nodejs php web development tool benefit greatly feature combined visual studio code remote wsl docker desktop linux workspace make possible run full linux toolchain building container local machine ide running window performance wsl microsoft put huge amount effort performance resource allocation vm setup use dynamic memory allocation schedule work host cpu consuming little much memory requires within limit host provide collaborative manner towards process running host docker desktop leverage greatly improve resource consumption use little much cpu memory need cpumemory intensive task building container run much faster today addition time start wsl distribution docker daemon cold start blazingly fast within development laptop compared ten second current version docker desktop open door batterylife optimization deferring daemon startup first api call automatically stop daemon running container zeroconfiguration bind mount support one major issue user today docker desktop especially enterprise environment reliability window file bind mount current implementation relies samba window service may deactivated blocked enterprise gpo blocked party firewall etc docker desktop wsl solve whole category issue leveraging wsl feature implementing bind mount window file provide work experience box technical preview docker desktop wsl thanks collaboration microsoft already hard work implementing vision written core functionality deploy integration package run daemon expose window process support bind mount port forwarding technical preview docker desktop wsl available download july run side side current version docker desktop continue work safely existing project running latest window insider build able experience first hand coming month add feature wsl architecture used docker desktop everyone running compatible version window
28,Lobsters,virtualization,Virtualization,It's Talos all the way down,https://www.talospace.com/2020/06/its-talos-all-way-down.html,talos way,void linux power see triumph failed skiboot petitboot build skiboot petitboot direct serial connection download qemu prebuilt download current talos ii pnor image download extractor tool void linux power site totally something stupid xive vm interrupt controller,still ca nt bear sticker shock talos ii even itty bitty blackbird machine ca nt emulate one instead decide like lot save penny qemu offer machine model baremetal powernv profile raptor system openpower design intended linux ie powervm machine belong using talos ii firmware image mostly one snag mentioned boot machine qemu bring operating system emulation article prove work bringing void linux power hi daniel variety configuration setup like might enough test software opensource package build run openpower even nt one yet future article talk boot code metal port favourite o build unikernel purpose article assume audience nt familiar openpower terminology usual readership kindly humour emulation imperfect emulating real raptor family system icky pc qemu emulate ie armbased baseboard management controller act service processor provides video framebuffer qemu also emulate powernv system nt time mean lowest level actually simulated ca nt watch raptor pretty hostboot display example barest function bmc simulated enough allow bringup including framebuffer fact hardware profile use general match real raptor system either virtually plugging pci device give u necessary functionality though course none peripheral device raptor system raptorproprietary finally even though tagged entry kvm kvm currently nt work right qemu powernv machine model even though pretty sure technically possible sadly tried vain could never get kvmhv happy ended kernel panicking machine kvmpr see triumph failed meantime naturally everything blackbird well writing article special acceleration system right first order business first order business emulator get rom fortunately one going bust pirating set open platform remember two piece required skiboot petitboot live system pnor flash skiboot contains opal openpower abstraction layer come bmc turned main power started power cpu selfboot engine ipl initial program load hostboot secondstage poweron sequence hostboot completes chain skiboot initializes pcie host bus controller phbs provides basic hardware call needed guest kernel support platform think something like overgrown bios lowest firmware level openpower system qemu currently support emulating skiboot life service kernel immediately start one initial payload bootloader petitboot also stored firmware petitboot small linux root skiroot act boot menu finding bootable volume attached device network found one select one chain start main o skiboot provide platform service via opal final guest system shut restarted firmware petitboot always available come really handy trying system recovery first best dedicated way build skiboot petitboot opensource process relatively well documented automated know openpower machine anyhow nt real openpower machine need crosscompiler linux distros offer package nowadays keep mind look like building tiny linux distro well exactly advantage fool around firmware leisure requires bit investment disk space time second way assumes casual interest would prefer go something prefab possible know friend raptorfamily system extract necessary component right bmc prompt log bmc ssh via direct serial connection type pflash see list partition stored pnor flash one want payload contains skiboot bootkernel contains skiroot petitboot exact address may vary system system firmware firmware root bmc pflash p payload r tmppnorpayload reading tmppnorpayload root bmc pflash p bootkernel r tmppnorbootkernel reading tmppnorbootkernel skip first page avoid wrapping around partition pnorpayload actually compressed need uncompressed prior use root bmc cd tmp root bmc tmp xz pnorpayload skibootlid finally scp skibootlid pnorbootkernel desired system bmc admittedly talked length two way wo nt get firmware let talk third method way ie download currently irregularity raptor present skiboot build purpose boot emulating single typo use boot emulated guest simply panic guest go bootloop emulating multiple cpu necessary need larger number pcie device undoubtedly qemu deficiency corrected future release meantime care playing around using single terminal raptor build either bmc flash downloaded suffice however intend emulate smp system download qemu prebuilt skibootlid use instead petitboot extract directly raptor pnor image assuming nt get using process download current talos ii pnor image decompress shellupgrade directory see pnor image uncompress leaving filename like download pnorex extractor tool perl one people run pnor image pnorex version pnor archive entry extracting payload offset xz format image wrote successfully extracting bootkernel offset elf executable image wrote successfully extracted partition successfully using raptor skiroot uncompress pnorpayload skirootlid xz pnorpayload skibootlid skirootlid first example either raptor qemu pnorbootkernel folder grab iso want boot used prefab one daniel offer void linux power site since know boot fine openpower hardware first example let simple example booting void cd image using serial port qemu command line cpu nographic bios skibootlid kernel pnorbootkernel device drive mediacdrom ifnone device idecd configures singleprocessor system ram graphic intel ahci host controller single cdrom drive attached serial output go terminal go little like skiboot chaining petitboot ignore error lot since platform still incomplete take little bit time decompress kernel much slower would regular system notice single device attached three available pcie host bridge single cpu ie host controller nt love vendor code intel petitboot bootable choice appear cursor starred option press e autoboots need tell void console onboard serial port otherwise us vga console sure whose bug add end cursor ok hit returnenter couple time boot successful login emulated baby tadaa rudely pull plug qemu session press ctrla x qemu terminated let load would like add video card ethernet card usb controller existing system turismo chip offer enough phbs three pci endpoint solve problem easy add another processor point require qemu skiboot use skibootlid appears remainder article use tuntap networking example assumes already configured change netdev setting want use different mean bridging nic example keep ahci host controller still display debug output terminal us qemu emulated vga console instead add good old realtek nic usb mouse keyboard attached qemu xhci usb controller cpu smp serial mon stdio device vga device netdev tap scriptno downscriptno device device qemuxhci device usbmouse device usbkbd bios skibootlid kernel pnorbootkernel drive mediacdrom ifnone device idecd let spin sucker like superman cape dryer reason keep serial output extra cpu add around extra minute get petitboot notice six phbs available three per cpu enough virtual pci slot peripheral require petitboot show framebuffer serial terminal work also see probing bridged ethernet tap see boot way proving ethernet device working whichever use boot message go use framebuffer console start void cursoring selecting starred option thus also proving usb device work booted void demonstrate pci card system attached peripheral number cpu record typing show spectre status mitigated hardware acceleration starting installer wo nt install anything nt configured storage install qemu option leave exercise reader switch emulated system sforza cpu support six pci endpoint get six phbs mean single cpu enough basic configuration without adding additional startup time qemu command line merely return single processor change machine cpu ie cpu serial mon stdio device vga device netdev tap scriptno downscriptno device device qemuxhci device usbmouse device usbkbd bios skibootlid kernel pnorbootkernel drive mediacdrom ifnone device idecd run way faster emulation overhead le let totally something stupid last parlour trick run configuration many socket qemu let u hold right four note singlethreaded core still much le powerful even basic blackbird cpu smp serial mon stdio device vga device netdev tap scriptno downscriptno device device qemuxhci device usbmouse device usbkbd bios skibootlid kernel pnorbootkernel drive mediacdrom ifnone device idecd four emulated cpu startup took seven minute start petitboot talos ii patience lesser workstation work see watchdog complaining length time opal call taking call reset xive vm interrupt controller chip four core impossibly slow beefy enough system like another incidentally power isa emulation qemu allows smt basic enough get bootup sequence least heat death universe like listening cooling fan see happens try emulate biggest baddest talos ii adding accel tcg threadmulti smp qemu command line pretty buy openpower machine instead emulating one
29,Lobsters,virtualization,Virtualization,Fakecracker: NetBSD as a Function Based MicroVM,https://imil.net/blog/posts/2020/fakecracker-netbsd-as-a-function-based-microvm/,fakecracker netbsd function based microvm,aws published open source tool called firecracker kvm qemu well put article netbsd sailor docker security chroot config virtio multiboot bench nevertheless good tutorial subject nginx sailor sailor update makefs,november aws published open source tool called firecracker mostly virtual machine monitor relying kvm small sized linux kernel stripped version qemu baffled speed virtual machine would fire run service whole process compared container safer share kernel resource separate dedicated virtual machine want learn firecracker internals well put article liked idea thought netbsd would perfect match kind target kernel entire o stripped easily know wrote wannabecontainer project called sailor goal create containertype chroots run service ala docker use project need website seeing right actually running sailor ship fun really talk security chroot firecracker solution seemed right matter yet overall netbsd boot process bit long taste exactly significantly improve netbsd boot speed well two major win reduce number kernel feature bypass bootloader first point pretty easy accomplish minimal kernel config include makeoptions copt o makeoptions usessp maxusers estimated number user option consdevname com option consoverride option multiboot option hardware clock many min west gmt option pipesocketpair smaller slower pipe include filesystem ffs ufs filesystem kernfs kern option ffsnosnapshot ff snapshot support option inet ip icmp tcp udp config netbsd root type option emulation option wskernelfgwscolgreen option wsdisplaycompatsyscons emulate ioctls option pcdisplaysoftcursor pci mainbus bus mainbus isa cga mda ega hga wsdisplay pcdisplay console isa port irq standard pc serial port cinclude pseudodevice f file system snapshot device pseudodevice vnd disklike interface file pseudodevice bpfilter berkeley packet filter pseudodevice loop network loopback pseudodevice tun network tunneling tty pseudodevice pty pseudoterminals pseudodevice clockctl user control clock subsystem pseudodevice wsmux mouse keyboard multiplexor pseudodevice ksyms virtio pci dev function virtio pci device ld virtio virtio disk device vioif virtio virtio network device note absolutely need virtio driver virtio fastest way handling device virtualized environment second point simple seems kernel must able loaded blue ie without need boot loader netbsd possible port thanks multiboot kernel option unfortunately today option supported port bench nevertheless rest article assume working bit frustrating yet really problem mostly package available platform well covering prepare environment cross compiling tool kernel instead good tutorial subject note cross compile netbsd kernel bit linux system actually nevertheless need netbsd possibly virtual machine order create root disk used service want run tl dr command use build kernel forget build tool first buildsh u j u kernelfirecracker try kernel booting correctly like sudo kvm kernel nographic kernel ask root filesystem location yet exit nographic mode pressing ctrla x real service started setup nginx web server start without rcd framework gain precious millisecond create root filesystem use sailor cover sailor usage documentation say following must done netbsd host first create ship file definition cat examplestestconf shipnamefakecracker shippath home srcsailor shipname shipbins binsh sbininit usrbinprintf sbinmount sbinmountffs binls sbinmknod sbinifconfig usrbinnc usrbintail package nginx runatbuild printf creating devicesn runatbuild cd dev sh makedev allmd create custom rc file interpreted microvm call init cat shipsfakecrackeretcrc binsh export home export pathsbin bin usrsbin usrbin umask mount ifconfig ifconfig printf nstarting nginx usrpkgsbinnginx echo done printf ntesting web server n printf head nc n echo tail f varlognginxaccesslog minimal fstab mount command succeed cat shipsfakecrackeretcfstab ffs rw create ship sudo e sailorsh build examplestestconf update told makefs utility make following step much easier instead vndconfig newfs mount rsync simply makefs imagefile directory thanks mlelstv record detailed step image creation anyway create empty image dd ifdevzero ofrootimg make available block device create filesystem sudo vndconfig rootimg sudo newfs sudo mount mnt simply rsync ship newly created image sudo rsync av fakecracker mnt umount unbind image block device copy kvm host sudo vnconfig u scp rootimg homeimilmnthdsrcnetbsdfirenetrootbaseimg fire microvm root location network property sudo kvm kernel append nographic drive filerootbaseimg ifvirtio netdev typetap device virtionetpci voila
30,Lobsters,virtualization,Virtualization,"Haskell-inspired ""lifting into structure"" for individual shell commands within a Docker context",https://bytes.yingw787.com/posts/2020/06/15/lifting_into_docker/,haskellinspired lifting structure individual shell command within docker context,experiment using docker server development workflow munif tanjim tinydevcrm documentation forum answer stack overflow answer used inspiration blog post,could say continuation experiment using docker server development workflow end though found deployment production aws far complex model allowed ended using conventional model dockercompose model system locally build dockerfile image ship remote docker registry contrast using adjusted version prior workflow develop frontends mostly due usage hugo static website generator doublechecked cloudfront something like different hugo bundle production right created different time problem hugo still primarily workinprogress project breaking change made different hugo version impact change version different hugo theme encountered difficulty upgrading dependency version personal blog already request help maintainer munif tanjim graciously walked upgrade process even created diffs felt embarrassed needed help nt really want go experience creating tinydevcrm documentation working docker tinydevcrm learned command exec set dockerfile cmd allows pipe command run runtime combined independent build process lock place set fixed dependency version separately project let walk project see mean install following system dependency docker using docker version docker version build make using make version gnu make built copyright c free software foundation inc license gnu gpl version later http gnuorglicensesgplhtml free software free change redistribute warranty extent permitted law create directory following file cd pathtodir tree dockerfile makefile dockerfile add base docker image reference label build argument debian label maintainer set build argument arg debianfrontendnoninteractive dockerfile update package archive download curl note updating package archive update system dependency container still mirror base image dependency upgraded get package list important getting curl run aptget update install build dependency run aptget install curl dockerfile install runtime dependency see golang took cloudnative development single binary need curl app install golang run curl http run tar c usrlocal xvzf env path path usrlocalgobin install hugo important lock version hugo since still development version breaking change use l follow redirects github release run curl l http run dpkg dockerfile set default home directory update directory permission using user first nonroot user system per forum answer setup workdirectory run mkdir app workdir app setup permission run chown r app dockerfile set default command run exec order pas command runtime run command cmd exec final dockerfile look something like debian label maintainer set build argument arg debianfrontendnoninteractive get package list important getting curl run aptget update install build dependency run aptget install curl install golang run curl http run tar c usrlocal xvzf env path path usrlocalgobin install hugo important lock version hugo since still development version breaking change use l follow redirects github release run curl l http run dpkg setup workdirectory run mkdir app workdir app setup permission run chown r app run command cmd exec use make makefiles order template command easier order consistently pas cli argument docker run also bit safer transportable using bash makefile declare enviroment variable declaring awsprofile omitted cloudformation lifecycle management appversion defining docker image version commit hash gitreporoot define absolute path git repository root nt like relative path dockerimagename docker image name hugoport define port localhost expose container userid groupid run docker container specific user group order keep directory resource usergroup avoid sudo phony enforces make target run irrespective filesystem state see stack overflow answer detail usrbinenv make phony version check setup run start export awsprofile tinydevcrmuser export appversion shell git revparse short head export gitreporoot shell git revparse showtoplevel export dockerimagename tinydevcrmapidocs export hugoport export userid shell id u whoami export groupid shell id g whoami makefile add setup target order setup repository first cloning downloading hugo theme need nt exist installing hugo module required hugo theme order run properly note running git clone second step referencing destination directory appthemesdocuapi gitreporoot themesdocuapi app docker container working directory workdir downloading dependency within docker context even though usage v gitreporoot app still appear local directory though cloned local system use custom fork styling purpose setup docker build file gitreporoot dockerfile tag dockerimagename appversion gitreporoot docker run v gitreporoot app nethost u userid groupid dockerimagename appversion git clone http githubcomtinydevcrmdocuapi appthemesdocuapi true docker run v gitreporoot app nethost u userid groupid dockerimagename appversion hugo mod get u makefile create run target run target nice lift command line argument insert directly docker run command still enabling thing like nethost unifying docker network system network ensuring localhost docker localhost system connecting docker volume together passing flag like passing aws config credential directory usage awscli within docker context using system secret need order require dependency system possible http first argument run ifeq run firstword makecmdgoals use rest argument run runargs wordlist word makecmdgoals makecmdgoals turn donothing target eval runargs endif lift command docker run context run docker run v gitreporoot app v aws rootaws nethost u userid groupid dockerimagename appversion runargs add various target may need commonly reference templated hugo server command run hugo server often involves usage recursive make within file might best way thing would love hear better way command passed wrapped double quote otherwise might interpreted part make command instead passed wholesale start setup make run hugo server p hugoport final makefile look something like usrbinenv make phony version check setup run start export awsprofile tinydevcrmuser export appversion shell git revparse short head export gitreporoot shell git revparse showtoplevel export dockerimagename tinydevcrmapidocs export hugoport export userid shell id u whoami export groupid shell id g whoami use custom fork styling purpose setup docker build file gitreporoot dockerfile tag dockerimagename appversion gitreporoot docker run v gitreporoot app nethost u userid groupid dockerimagename appversion git clone http githubcomtinydevcrmdocuapi appthemesdocuapi true docker run v gitreporoot app nethost u userid groupid dockerimagename appversion hugo mod get u http first argument run ifeq run firstword makecmdgoals use rest argument run runargs wordlist word makecmdgoals makecmdgoals turn donothing target eval runargs endif lift command docker run context run docker run v gitreporoot app v aws rootaws nethost u userid groupid dockerimagename appversion runargs start setup make run hugo server p hugoport nt terribly large amount work lot easier say using bazel wanted use tinydevcrm eventually decided seeing much work building source would entail also useful integrating debugger needing expose process stdout stream example running python ipdb managepy runserver django process hit pdb trace starting django process mean without stdout stream available either ca nt use ipdb pdb within docker somehow elide first pdb trace attach docker process manually adding pdb trace hitting server process request see comfortable third option still problem stack usually use ctrlc order exit docker container resulting merely stopping instead deleting otherwise bad like think keep haskell philosophy lifting structure found applicable outside one programming language find tinydevcrmapidocs used inspiration blog post
31,Lobsters,virtualization,Virtualization,The CBE series #3 - A Linux VM on a CBE device,https://genodians.org/m-stein/2020-06-12-cbe-linux-vm,cbe series linux vm cbe device,cbe series linux vm cbe device martin stein genode cbe series prerequisite sculpt preparing cbe image file initializing cbe checking cbe preparing vm using cbe setting cbevfs server installing linux guest vm using management shell control cbe limitation,cbe series linux vm cbe device june martin stein genode release note teased using cbe running encrypted vms sculpt article guide setting cbe device installing using linux vm controlling cbe online like creating snapshot resizing device rekeying cbe series series article describes feature integration consistent block encrypter cbe detail cbe blockdevice encryption component core logic entirely written spark combine multiple technique ensure confidentiality integrity consistency freshness block data efficiently furthermore whole core logic far pass gnatprove mode flow case familiar basic structure cbe recommend introduction reading article series far source code github note branch one used package tutorial mark cbe mainline based recent genode package tutorial built genode compatible recent sculpt version prerequisite follow guide described article need sculpt installation hand least gib free space spare used file system want able inspect log output cbe tool reason enable log display upperright corner leitzentrale sculpt furthermore need internet connection establish connection using network control upperright corner leitzentrale order able deploy required package package source genodelabs cnuke must enabled depot selection window manager required already one deployed may use themed wm select depot genodelabs gui themed wm install installation done wire window manager follows gui focus keyboard focus gui system gui server report shape pointer shape report clipboard global clipboard rom clipboard global clipboard also need font server nt one already may install font f package selecting depot genodelabs gui font f install integrating package following route finally use nouxsystem package system shell nt package deployed already select depot genodelabs tool nouxsystem install integrate package using following route gui themed wm file system config writeable system configuration file system report readonly system report file system target used file system file system font font f rom vimrc default vim configuration rom clipboard themed wm report clipboard themed wm finally may want save setup copying deployment config persistant storage using nouxsystem terminal noux mkdir p noux cp configmanageddeploy preparing cbe image file cbe device backed disk image file device provide virtual block device vbd gib size user mib worth sparse block available storing snapshot install linux vm device let start switching runtime view pressing nouxsystem prompt following command create directory holding cbe disk image file root directory used file system noux mkdir rwcbe directory place move deploy another component cbe f instance within leitzentrale press package contains preconfigured chroot component use limit filesystem access cbe tool afore created directory package installed selecting depot cnuke cbe cbe f install use following route package administration regarding cbe shall use deployed chroot environment consequently need another system shell routed chroot file system could use second nouxsystem instance nouxsystem meant provide minimal setup therfore miss tool like dd necessary tutorial created cbe shell package fullfills requirement install selecting depot cnuke cbe cbe shell install route package follows gui themed wm file system cbe cbe f file system font font f rom clipboard themed wm report clipboard themed wm region map custom virtual memory object deploying greeted terminal featuring cbe prompt background cbe file system mounted cbe new environment navigating directory cbe shell executing l show empty directory going use dd create disk image file cbe dd ifdevzero ofcbecbeimg note matter whether sparse file command created gib disk image file enough store anticipated cbe device gib virtual block device mib sparse block note need space storing additional internal meta data disk image file need bit larger let check size disk image cbe l l cbe rwx root jan cbeimg finally remove cbe shell component graph leitzentrale initializing cbe first cbe tool want use cbeinit component purpose create empty cbe device initializing cbe meta data backend storage package configured create cbe device vbd gib mib worth sparse block using cbeinit component install package selecting depot cnuke cbe cbe init install need one route set short see following message system log runtime child cbeinit exited exit value remove component runtimegraph leitzentrale cbe fully prepared may wondered nt provide key passphrase initialization moment trustanchor entity system mere placeholder meant replaced proper implementation productive context placeholder using hardcoded value private key value simply xord counter produce symmetric key used cryptographic operation checking cbe make sure newly initialized cbe indeed working state let check deploy cbecheck component selecting depot cnuke cbe cbe check install setting route cbecheck tool check hash data meta data block cbe device time following message system log runtime child cbecheck exited exit value mean check successful cbe check instance removed like cbe init preparing vm using cbe initialized disk image place let prepare vm case coreplus installeriso image hand readytouse downloader package use downloader provide target file system therefore deploy cbe vm f package selecting depot cnuke cbe cbe vm f install setting route like cbe f package cbe vm f chroot component preconfigured cbe point vmcbe directory currently used file system deploy downloader selecting depot cnuke virtual machine download coreplus install setting route gui themed wm network nic router region map custom virtual memory object file system target cbe vm f file system font font f progress download shown new terminal window may take time image size mb end message system log indicate download successful runtime downloadcoreplus child download exited exit value download coreplus instance removed component view leitzentrale switch nouxsystem shell navigate rwvmcbe delete file machinevbox machinevdi file needed context tutorial noux cd rwvmcbe noux rwvmcbe rm machine file use instead part archive cbe binary already downloaded dependency package directly copy vm directory noux rwvmcbe cp noux rwvmcbe cp noux rwvmcbe l l rwx root jan rwx root jan installeriso rwx root jan machinevbox note configured access cbe local vfs noux rwvmcbe cat rw flat devdata virtualbox hand configured machinevbox use file setting cbevfs server start vm start cbe tutorial cbe device provided cbevfs plugin running vfs server server accessed vm via filesystem session cbe vfs package provides preconfigured vfs server cbe plugin deployed selecting depot cnuke cbe cbe vfs install setting following route cbe vfs server might consume quite cpu time depending workload cbe therefore recommended move different cpu core one later use vm provided cpu multiple core done creating launcher cbe vfs server component still running create copy active deploy configuration nouxsystem shell noux cp configmanageddeploy configlaunchercbevfs go file panel centered top leitzentrale select config launcher cbe vfs edit file opened graphical editor delete everything except start node cbe vfs server start name cbevfs start change start launcher start launcher extend opening launcher tag attribute xpos ypos width launcher name cbevfs xpos ypos width launcher move cbe vfs component second cpu core started launcher saving file switch back component graph top leitzentrale remove currently running cbe vfs component graph deploy using newly created launcher cbe vfs installing linux guest vm time exciting part installing coreplus vm virtual box using want file system shared folder therefore start shared f selecting shared f use preconfigured package virtual box installed selecting depot cnuke cbe cbe install setting following route file system vm cbe vm f file system cbe cbe vfs file system shared shared f network nic router gui themed wm rom capslock global capslock state rom platform info platform information report shape themed wm report clipboard themed wm rom clipboard themed wm region map custom virtual memory object real time clock system clock usb direct usbdevice access screen titled core plus networking installation remastering show screen select boot core plus default flwm topside short coreplus desktop appears open terminal coreplus type dmesg command output find cbe disk sd sda byte logical block gib sd sda write protect sd sda attached scsi disk want install coreplus cbe disk therefore start tcinstall application bar tcinstall window select whole disk select sda make sure install boot loader selected continue right arrow select next dialog skip next dialog select core xgui desktop next dialog final dialog press proceed start installation installation completed show installation window select shut coreplus remove virtual box instance component view leitzentrale let remove installation image vm force boot cbe disk go file panel leitzentrale select default f rw vm cbe machinevbox edit remove following xml snippet file storagecontroller name ide attacheddevice type dvd attacheddevice storagecontroller save file switch back component view start cbe way putting load system open terminal coreplus start commandline extension installer tce type enter firefox select firefoxgetlatesttcz type q download shell script installing firefox browser quit extension installer via q issue firefoxgetlatestsh terminal may take connection time installation start shell script freshly installed firefox work fine although initial loading may bit slow using management shell control cbe vm place might want perform management work example would creating snapshot cbe device snapshot would checkpoint revert future catastrophe like rm rf wrong directory happend maybe vbd turn small would like resize imagine want reencrypt whole cbe device new key task performed using cbe shell package already used create disk image file deploy time select following route gui themed wm file system cbe cbe vfs file system font font f rom clipboard themed wm report clipboard themed wm region map custom virtual memory object note file system cbe point cbe vfs instead cbe f way access control interface cbe provided vfs plugin within cbe shell navigate cbecbe directory contains cbevfs plugin cbe cd cbecbe l l total drwx root jan control drwx root jan current root jan snapshot control directory contains various file trigger management task cbe cbecbe l l control total sw root jan createsnapshot sw root jan discardsnapshot sw root jan extend sw root jan rekey creating snapshot first let create snapshot current state newly installed coreplus system cbe cbecbe echo true controlcreatesnapshot creating snapshot lightweight operation time inspect snapshot directory already see newly created snapshot cbe cbecbe l l snapshot drwx root jan checking snapshot data file confirms existence snapshot actual data snapshot may accessed file cbe cbecbe l l rw root jan extending cbe let extend virtual block device cbe note nt shut linux vm even continue using coreplus extending underlying cbe device first check size current state vbd cbe shell cbe cbecbe l l currentdata rw root jan data extend vbd mib note stay inside boundary gib backend image cbe cbecbe echo treevbd controlextend writing option extend file instructs cbe add block byte byte vbd request processed watch progress looking size vbd cbe cbecbe l l currentdata rw root jan data eventually end size byte may wonder gib logical cbe need certain amount added block new meta data vbd state extension request also observed reading extend file cbe cbecbe cat controlextend inprogress lastresult none cbe cbecbe cat controlextend idle lastresult success extending pool sparse block cbe work pretty similar cbe cbecbe echo treeft controlextend rekeying cbe point might want change blockencryption key used cbe maybe demanded policy old key compromised simply feel like requires reencryption data cbedevice end removal old encryption key cbe note like resizing rekeying require stop accessing cbe device go using coreplus rekeying let start rekeying cbe cbecbe echo true controlrekey go like extension request monitor state reading file cbe cbecbe cat controlrekey inprogress lastresult none see rebooted vm rekeying underlying cbe device aware rekeying resizing block io cbe device naturally fast absence operation limitation guide served first look show potential cbe advertising cbe productionready plan refine following aspect core cbe designed perform operation asynchronous parallel way provides necessary throughput responsiveness needed later used daily basis however time particular demo deliberately operated parking ease development mean request processed one one sequential fashion internal metadata cache limited addition noted initializing cbe trustanchor mere placeholder provides functionality required cbe nothing developmentvehicle replace later also external entity performing cryptographic operation easily replaceable currently use library named libsparkcrypto apply aes encryption design cbe actually make independent concrete implementation encryption entity later reasonable utilize kind hardwareaided encrytiondecryption mechanism relieve cpu design open kind interesting possibility example could even forgo encrypting data block although first seems counterintuitive configuration cbe could used add support snapshotting primitive file system blockdevice layer futhermore current interface cbevfs plugin tailored interactively showcasing cbe future component provide nicer userinterface cbe cbevfs plugin controlled structured perhaps xmlbased way like rest genode regard demo cbe component used provided somewhat unorthodox way raw archive containing binary directly naturally addressed proper depot recipe package future
32,Lobsters,virtualization,Virtualization,How to choose a k8s CNI plugin,https://medium.com/thermokline/how-to-choose-a-k8s-cni-plugin-771edf4842c0,choose cni plugin,choose cni plugin basic cni reference cnis simple cni fully featured cnis linux stack cnis ovsovn cnis infrastructurespecific cnis multiple cni tunnel overlay route ebpf choosing cni,choose cni plugina key component deployment container network interface cni deploy kubernetes service using provider google aws cni chosen cloud provider however understanding cni operates important complete understanding accessed cloud vendor unique environment use combination technique provide isolation forwarding scale multitenant network infrastructure therefore cnis need work closely infrastructure using downstream distribution often include default cni case allow use alternative cni deploy upstream however many cni option choosethe basic cni cni plugin configures network interface linux container cnis used part one several container runtimes us cni connectivity pod network sometimes referred provides connectivity container node without address translation cni plugin part pod network includes one container cni plugin running node configure container connectivity dynamically pod created establish network connectivity nodesreference cnisthe cni project maintains several reference cni plugins consist interface creation ipam meta plugins reference cnis use linux kernel native functionality linux bridging vlans ipvan macvlan typically chain ipam plugin provide address management meta plugins provide additional networking functionality bandwidth control via linux tc firewall linux networking functionality reference cnis often foundation cnis particular one simple popular cni flannela simple cniflannel probably simplest cni one popular part reference cni packaged container configures cni networking flannel us another reference cni provide container networking commonly bridge cni flannel also configures linux enable connectivity node commonly using vxlan however host routing also used modified version flannel also used public cloud provider us cloud api configure specialized network environment aws virtual private cloud simple pod networkingfully featured cnisat end scale cnis broad array networking function fully featured cnis usually include network policy support important feature abstract firewall rule allowing dynamically applied pod description provide security default model cnis additional functionality visibility packet forwarding performance usually key feature fullfunction cnis important cnis ability build complex network typology using variety different mechanism high level though generalized three architectural group linux stack ovsovn infrastructurespecificlinux stack cnislinux comprehensive networking stack linux stack cnis use linux kernel packet forwarding routing functionality enhancement move packet container node physical interface connected directly networking stack combination routing tunneling used connect node container routing used cnis often either integrate depend bgp distribute routing information familiar operation u host networking skill since use linux networking help figure work plentifulovsovn cnisthis class cnis us openvswitch open virtual network ovn default redhat openshift operation cnis familiar linux system administrator based softwarebased virtual switch running host cni program ov switch either directly via higher level abstraction provided ovn programming static routing structure within virtual switch physical interface container connected virtual switch connectivity achieved programming virtual switch openvswitch made popular openstack favored run top openstackmanaged virtual machine solution flexible complex even integrated openstack little documentation debugging requires detailed knowledge ovnovs likely require reading source code ovn abstraction used top ov debugging connectivity problem mean reading openflow rule installed ov node low level interface infrastructurespecific cnisthese cnis developed vendor provide integration network hardware platform usually characterized sdn pluginsmultiple cni directly support single cni per installation logical cni integral operation platform multus cni enables use multiple cnis multus becomes primary cni sends normal operation cni provides interface use cnis attach additional interface container additional container interface orchestrated ingres service construct directly managed configuring cni case alternative path container needed multus solutiontunnels overlay routesconnectivity node major factor cni decision really two choice direct tunneled tunneled connectivity often default creates network node pod tunnel remove need add subnets physical network long node communicate tunnel created additional network routing avoided way everything communicates recent year explosion tunneling resulting tunneling used default necessary useful remember past tunneling workaround primary communication mechanism technology virtualization require physical virtual tunneling container provide choice routed nontunneled network node network equipment communicate make system simpler scalable long termwhat ebpf extended berkeley packet filter received lot attention recently allow program directly attached designated code path linux kernel kernel ebpf program verifier protects kernel checking program loaded ebpf program many us become popular monitoring system behavior course used networking ebpf program attached various layer networking stack provide high performance packet manipulation commonly function high performance packet filtering cnis use ebpf increase performance using highperformance ebpf program instead lowperformance linux component netfilter managed iptableschoosing cniwhen installing upstream kubeadm documentation currently present choice cnis call pod network plugins cni github page currently list option vendor provide subset default broader list choice difficult provide similar functionality decision made time distribution consideration network infrastructure used cni support network policy important stage filtering required fully featured cnis especially commercial vendor support performance optimization option case using ebpf remember though performance ultimately function application endpoint needlessly add performance optimization network level increase complexity lock specific cni networking complex make complex stacking layer networking attempting tightly integrate infrastructure system functionality duplicated yes im talking openstack simplest scalable solution unless specific networking need suggest linux stack cni support network policywithout hardware optimization configured without tunnel using routing protocol distribute pod network connectivity node
33,Lobsters,virtualization,Virtualization,Sol — a sunny little virtual machine (2012),https://rsms.me/sol-a-sunny-little-virtual-machine,sol sunny little virtual machine,virtual machine sol wikipedia sol design overview function prototype program counter registry implementation lua lua erlang instruction operation lua op abc op abx op bxx sol source code multitasking multitask coroutines wikipedia section cooperative multitasking quadrotor example example x yield example function call timer example multitasking source code http githubcomrsmssol,weekend together evening earlier week created rather simple virtual machine dubbed sol swedish word sun read lot vm design stuff like o design programming language seeminlgy obscure nerdy stuff surrounding concept computer generic tool virtual machine vm software implementation machine ie computer executes program like physical machine wikipedia sol process virtual machine run inside operating system process however inside sol multiple task like operating system process program running sol matter world look like outside could even make sol boot directly hardware would crazytown trust road purpose sol learning defining world extremely high degree freedom one major component virtual machine provided instruction set instruction simplest type operation program perform set instruction provided virtual machine program running need universal efficient design overview sol vm one scheduler running one cpu core yet implemented time writing scheduler maintains list task run list called run queue scheduler also maintains io watcher timer handle o interrupt etc scheduler work sol fancy thing described also executes program code run queue list task ordered way scheduled scheduler take first task list run queue executes task mean later task ended end error status task removed run place task end list io watcher timer check timer expiry possibly call host o kernel check pending asynchronous io event event happened like timer expired fired correlating task added run queue task read event waiting scheduler repeat process eg starting point long task run queue let look task see task mostly abstraction contains one significant component activation record comprise task call stack activation record corresponds one active function call activation record contains reference function prototype second executing program counter usually called pc cursor currently executing program instruction finally registry value function prototype constant instruction function without context function closure local variable etc function prototype kind like building without people furniture albeit name really comparable blueprint function prototype copied implemented actually used asis program counter simply number corresponds offset function prototype program ordered list instruction activation record think piece running code executed program counter pc incremented instruction executed sometimes pc decremented program jump backwards eg performing loop pc play central role instructionbased program like computer phone hardware likely incrementing pc right registry essentially region temporary memory executing program use store variable data imagine simple function def foo x x x x x return x program need way store value created x pas x also need store resulting value somewhere using return local variable stored register thus access efficient something like happens executing foo function r x mean register x argument already r r load constant r multiply valueof r valueof r put result r multiply valueof r valueof r put result r return r sol registerbased virtual machine operand result read stored numbered register rather pushed popped stack stackbased virtual machine registerbased virtual machine avoid push pop operation usually surrounding instruction reducing code size several case also increase speed execution compared stackbased virtual machine excellent paper implementation lua roberto luiz waldemar describes really problem code size decoding overhead two problem usually associated registerbased machine code size decoding overhead instruction register machine need specify operand typically larger corresponding instruction stack machine instance size instruction lua virtual machine four byte size instruction several typical stack machine including one previously used lua one two byte hand register machine generate le opcodes stack machine total code size much larger sol take lot inspiration lua well erlang instruction operation instruction consists one component operation code eg subtract b operand eg register register b result register c virtual machine disadvantage must whatever term assuring good performance one instruction fit one machine word hardware today able deal long chunk data efficiently inspired lua chose representation sol instruction instruction operand encoded one three layout behold awesome ascii art op abc operation op operand b c bit op b c field bit range operation need two operand made efficient one operand large enough common value need define alternate layout instruction op abx operation op operand b bu bit op bsbu field bit bu range bu third class operation use one operand size correlation efficiency define third alternate layout instruction three operand effectively collapsed one integer value op bxx operation op operand bs buu bit op bssbuu field bit buu range bs b c bu buu signify unsigned integer whilst b bs signify signed integer read room operation register bit bit configuration need changing maintaining instruction operation operand simple sol intentionally gone great length order make playing around instuction set easy file instrh contains list instruction control flow yield abc suspend reschedule jump bs pc bs call abc r r r r r ab return ab return r r data loadk abu r k bu move ab r r b dbgreg abc special debug dump register value arithmetic add abc r rk b rk c sub abc r rk b rk c mul abc r rk b rk c sol source code setup way changing list required apart actual implementation instruction adding renaming instruction automatically make convenience symbol function available say add ding instruction play little sound every time executed mul abc r rk b rk c ding buu sound number play new operation identifier available called sopding well constructor function encoding ding instruction sinstr sinstrding value running program includes ding operation cause error vm unexpected operation implemented ding behavior yet operation time writing implemented schedexech core virtual machine read performs instruction sol program summed like void execute instr instruction instr pc instruction switch pc case soploadk read operand b instruction pc put constant b register break case sopmove read operand b instruction pc put value register b register break switch pretty much good old switch loop c code compiled modern compiler like clang gcc rather efficient virtual operation effectively corresponds machine instruction need add ding case sopding read operand buu instruction pc soundindex sinstrgetbuu pc find note soundindex play soundnote note soundgetnote soundindex soundplay note break type sound well soundget soundplay represents kind sound playing function provide write sol program play music define melody entry ding play note ding play note ding play note ding play note ding play note return return pling plong plong ding pling multitasking toy vm presented without shame unless able multitask perform multiple thing least give programmer illusion concurrency sol operation called yield able pause task state later task resume exact state task perspective never knew paused resumed powerful primitive implement many feature top time writing sol already two different type yield yielding task run scheduled io etc event yielding timer expire end article example program making use yield yield used implement cooperative multitasking task cooperate use processing resource task performed series computation relief control another task one three thing happened task initiated external blocking operation like reading file waiting certain time occur task completed ended main function returned task faulted caused error system communicate environment abroad like web server text editor spend time cpu time relative real time waiting environment respond eg producing data network socket writing content file returning stepper motor position system often benefit cooperative multitasking particular coherent specialized system unlike operating system general nature sol provides essentially coroutines concurrency nice feature coroutines aka green thread aka user thread ability run sequential code concurrent system task like def readfile name f open name data read f close f return data involves three blocking call environment cause task yield open asks operating system open file name file might get opened sometime future scheduler take note task waiting happen remove run queue time o tell scheduler file wanted open well file descriptor thus scheduler place task run queue task receives file descriptor representing opened file task call environment time asking read content f thing scheduler tell o take note unschedules task continue executing task o tell scheulder read file asked read data reality slightly complicated principle scheduler queue task run thing close function programmer easy follow flow program comparing synchronous program asynchronous version def readfile name callback open name def error f error callback error else read f def readerror data close f def error callback error data return file opened clearly harder follow task sol spawn new task order perform several thing time like writing file replying network def writeandreply destinationid message writer writefile destinationid msg message sendmessage destinationid message recv writer taskend noop wait writefile end however wikipedia section cooperative multitasking cooperatively multitasked system relies process regularly giving time process system one poorly designed program consume cpu time cause whole system hang happen program performs lengthy set computation cause kind problem especially task relying timer sol scheduler check timer expiration execution task timer might effectively fire long supposed imagine controlling toy quadrotor one task need update one rotor angle millisecond another task consumes wholesome millisecond quadrotor might crash burn address sol employ operation cost counter task given predefined amount operation value per execution iteration scheduler run task program operation cost counter reach limit task simply forced yield task source code look svmexeclimit example code expressed simplified assembly language almost c api defining program programatically assembly language considered irrelevant beyond explaining instruction executed output line like vm denote scheduler regains control running task task either returned yielded one execution iteration running multiple task usually see task interleved roundrobin order execution iteration marker line output line starting comment andor simplification part actual output assembly comment r x mean register x rk x mean register x x le k else constant xk k special value k x mean constant x assembly comment pc signifies program counter sort cursor instruction program incremented one instruction executed instruction modify counter like instance jump instruction example x yield variable x greater zero decrement x one yield scheduler letting task run eventually return def main x x x x yield return assembly define main const k const k const k entry loadk r k le rk rk continue else pc jump pc return sub r r rk yield yield atypesched jump pc le return return output running debug mode builddebugbinsol sol vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm jump bs vm le abc vm sub abc vm yield abc vm three execution iteration identical block vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab scheduler runloop exited example function call timer program us two function entry point main function simply call kitten function one argument kitten function sleep number millisecond passed first argument kitten function return number main dump register value finally return causing task exit subsequently scheduler vm exit assembly define kitten argument r sleepms const k entry yield yield atypetimer rk b r loadk r k return return r r r define main argument const kitten k func kitten const k entry loadk r k kitten function loadk r k call r r r r r r dbgreg vm debug function dump register value return return output running debug mode time builddebugbinsol sol vm vm task function pc op value vm loadk ab vm loadk ab vm call abc vm yield abc timer scheduled trigger m time pass case scheduler idling timer triggered scheduling task vm vm task function pc op value vm loadk ab vm return ab vm dbgreg vm r vm r vm r vm return ab scheduler runloop exited real user sys example multitasking run three task running program example builddebugbinsol sol sched run queue task task task vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm jump bs vm le abc vm sub abc vm yield abc vm block instruction repeated three time interleved roundrobin order task vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab scheduler runloop exited source code released free permissive mitstyle license http githubcomrsmssol
34,Lobsters,virtualization,Virtualization,Automating the Creation of QEMU Archlinux Images from Scratch,http://eliteinformatiker.de/2020/05/31/automation-archlinux-qemu-installation,automating creation qemu archlinux image scratch,creating qemu image chroot environment host chroot approach creating qemu image inside qemu vm livecd expect flag qemu archlinux wiki explains full script chroot approach live cd inside qemu approach stefan eliteinformatikerde,tutorial show automate installation archlinux newly created image using qemu present two different method one us chroot environment existing linux host system one creates archlinux installation standard arch live cd inside qemu many application probably make lot sense create base image copy base image new vms people might also use case approach example might many different base configuration customer creating base image would much effort use case could also situation automation ansiblepuppetchef would useful always think need creating qemu image chroot environment host start chroot approach one simpler script approach us special archlinux bootstrap image chroot execute required installation command installation bootloader toughest part installation scheme without customization bootloaders often expect target environment start simple step first download required archlinux iso create empty raw image raw image mounted easily setup filesystem inside image conver raw image installation srchttp imagetmpimageraw mountpointtmparch f archive wget src archive fi mkdir mountpoint qemuimg create f raw image mount image available loopback device exposing inner partition structure image eg loop sudo losetup show f p image create partition file system device sudo parted loop mklabel msdos sudo parted optimal loop mkpart primary sudo parted loop set boot loopp loop sudo loopp extract archlinuxboostrap image filesystem sudo mount loopp mountpoint sudo tar xf archive c mountpoint stripcomponents chroot bootstrap system execute required command sake readability display command standard shell command real automation script work archchroot create interactive shell wait user input instead continuing script execution thus send script bash command archchroot full automation see full script end article sudo mountpointbinarchchroot mountpoint binbash select server want better multiple server echo server http ftpunibayreuthdelinuxarchlinux repoos arch etcpacmandmirrorlist pacmankey init pacmankey populate archlinux pacman syu noconfirm dhcpcd required standard networking qemu syslinux bootloader pacman noconfirm base linux linuxfirmware mkinitcpio dhcpcd syslinux systemctl enable dhcpcd standard archlinux setup ln sf usrsharezoneinfoeuropeberlin etclocaltime hwclock systohc echo etclocalegen localegen echo etclocaleconf echo archqemu etchostname echo e localhostn localhost etchosts far setup step quite standard next create initramfs without autodetect autodetect would detect module current host system might work qemu vm case additionally mkinitcpio try autodetect current kernel version load module host kernel vm kernel chroot differed thus read latest installed module libmodules create initramfs without autodetect break combination hostchrootqemu linuxversion l libmodules sort v tail n mkinitcpio c etcmkinitcpioconf autodetect kernel linuxversion g bootinitramfslinuxcustomimg finally setup syslinux want use qemu vm nographic setup syslinux support serial console find information nographic serial console second part article second installation routine requirement need nographic option leave away adjustment important make sure syslinux mbr get installed correct device ie loopback device map image file thus use syslinuxinstallupdate setup syslinux mkdir bootsyslinux cp usrlibsyslinuxbios bootsyslinux extlinux install device loopp bootsyslinux dd convnotrunc ifusrlibsyslinuxbiosmbrbin loop customize syslinux config uuid blkid value uuid loopp sed serial bootsyslinuxsyslinuxcfg sed sappend rootuuid uuidg bootsyslinuxsyslinuxcfg sed sinitrd initramfslinuximginitrd initramfslinuxcustomimg bootsyslinuxsyslinuxcfg finally unmount device free loopback device convert image sudo umount mountpoint sudo losetup loop qemuimg convert f raw image approach result readytouse archlinux image started qemu adjustment specific project one step away cpu host enablekvm smp drive nographic boot menu look bit broken afterwards display fine creating qemu image inside qemu vm livecd another approach use archlinux live cd boot live cd inside qemu vm empty image attached block device however require automation interactive application eg boot menu requires user interaction automation interactive application use expect expect control program even program asks user several question would usually require human interaction order make expect work qemu first tell qemu start guest new window behave like standard application stdin stdout done nographic flag qemu qemu expect output written serial port mean boot archlinux special setting serial console archlinux wiki explains done hitting tab desired boot menu entry appending boot option archlinux write output serial port know make qemu behave like standard application without graphical output also know connect archlinux output qemu work automation expect basic workflow expect script spawn applicaton expect output stdout respond input send might advanced workflow use case enough start booting archlinux serial console setting enabled first run qemu bootloader present u list boot option right one already selected stated archlinux wiki press tab presented list already set kernel flag append one result following action start qemu vm wait arch linux boot menu appear press tab wait kernel flag appear enter additional flag press enter carriage return usrbinexpect f spawn cdrom cpu host enablekvm smp drive nographic expect boot arch linux send expect archisoimg send boot menu contains quite lot output thus filter partial match using wildcard search sure whether save wildcard end expect expression since mean output come far work well documenation discourages behaviour always recommends include last character expect statement eg prompt usually space character boot finished basically standard back forth expecting output mostly shell prompt sending command since rely fdisk arch installation also bit real usage expect wait question fdisk answer login archlinux setup partition created variable hold search string prompt repeat time set prompt archiso expect archiso login send rootr expect prompt send fdisk devsdar expect command help send nr expect select default p send pr expect partition number default send expect first sector send r expect last sector send r expect command help send ar expect command help send wr expect prompt send expect prompt send mount mntr archlinux output contains lot control sequence colour terminal thus prompt contains lot wildcards thinking using wrapper script remove control sequence output expect retrieves output work like hard disk setup install base arch system installation switch chroot environment mean prompt slightly change use another prompt variable set chrootprompt root archiso expect prompt send pacstrap mnt base linux linuxfirmwarer expect prompt send genfstab u mnt mntetcfstabr expect prompt send archchroot mntr expect chrootprompt send ln sf usrsharezoneinfoeuropeberlin etclocaltimer expect chrootprompt send hwclock systohcr expect chrootprompt send echo etclocalegenr expect chrootprompt send localegenr expect chrootprompt send echo etclocaleconfr expect chrootprompt send echo archqemu etchostnamer expect chrootprompt send echo e localhostn localhost etchostsr expect chrootprompt send mkinitcpio pr expect chrootprompt send passwdr expect new password send rootr expect retype new password send rootr expect chrootprompt finally choose bootloader adjust enable serial port output reboot boot system expect eof end script seemed quite important least test without mbr persisted correctly image file maybe expect wait shutdown complete thus machine terminated ungracefully send pacman noconfirm syslinuxr expect chrootprompt send syslinuxinstallupdate mr expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt send sed serial bootsyslinuxsyslinuxcfgr expect chrootprompt send sed sappend bootsyslinuxsyslinuxcfgr expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt full script chroot approach srchttp imagetmpimageraw mountpointtmparch f archive wget src archive fi mkdir mountpoint qemuimg create f raw image loop sudo losetup show f p image sudo parted loop mklabel msdos sudo parted optimal loop mkpart primary sudo parted loop set boot loopp loop sudo loopp sudo mount loopp mountpoint sudo tar xf archive c mountpoint stripcomponents sudo mountpointbinarchchroot mountpoint binbash eol set v echo server http ftpunibayreuthdelinuxarchlinux repoos arch etcpacmandmirrorlist pacmankey init pacmankey populate archlinux pacman syu noconfirm pacman noconfirm base linux linuxfirmware mkinitcpio dhcpcd syslinux systemctl enable dhcpcd standard archlinux setup ln sf usrsharezoneinfoeuropeberlin etclocaltime hwclock systohc echo etclocalegen localegen echo etclocaleconf echo archqemu etchostname echo e localhostn localhost etchosts create initramfs without autodetect break combination hostchrootqemu linuxversion l libmodules sort v tail n mkinitcpio c etcmkinitcpioconf autodetect kernel linuxversion g bootinitramfslinuxcustomimg setup syslinux mkdir bootsyslinux cp usrlibsyslinuxbios bootsyslinux extlinux install device loopp bootsyslinux dd convnotrunc ifusrlibsyslinuxbiosmbrbin loop customize syslinux config uuid blkid value uuid loopp sed serial bootsyslinuxsyslinuxcfg sed sappend rootuuid uuidg bootsyslinuxsyslinuxcfg sed sinitrd initramfslinuximginitrd initramfslinuxcustomimg bootsyslinuxsyslinuxcfg eol sudo umount mountpoint sudo losetup loop live cd inside qemu approach usrbinexpect f set prompt archiso set chrootprompt root archiso set timeout spawn cdrom cpu host enablekvm smp drive filetestimgraw formatraw nographic matchmax expect boot arch linux send expect archisoimg send expect archiso login send rootr expect prompt send fdisk devsdar expect command help send nr expect select default p send pr expect partition number default send r expect first sector send r expect last sector send r expect command help send ar expect command help send wr expect prompt send expect prompt send mount mntr expect prompt send pacstrap mnt base linux linuxfirmwarer expect prompt send genfstab u mnt mntetcfstabr expect prompt send archchroot mntr expect chrootprompt send ln sf usrsharezoneinfoeuropeberlin etclocaltimer expect chrootprompt send hwclock systohcr expect chrootprompt send echo etclocalegenr expect chrootprompt send localegenr expect chrootprompt send echo etclocaleconfr expect chrootprompt send echo archqemu etchostnamer expect chrootprompt send echo e localhostn localhost etchostsr expect chrootprompt send mkinitcpio pr expect chrootprompt send pacman noconfirm syslinuxr expect chrootprompt send syslinuxinstallupdate mr expect chrootprompt send dd convnotrunc ifusrlibsyslinuxbiosmbrbin ofdevsdar expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt send sed serial bootsyslinuxsyslinuxcfgr expect chrootprompt send sed sappend bootsyslinuxsyslinuxcfgr expect chrootprompt send cat bootsyslinuxsyslinuxcfgr expect chrootprompt send passwdr expect new password send rootr expect retype new password send rootr expect chrootprompt send exitr expect prompt send shutdown h nowr expect eof maintain comment section question comment regarding post please hesitate send email stefan eliteinformatikerde
35,Lobsters,virtualization,Virtualization,dbanay/Smalltalk - “by the blue book” c++ implementation of Smalltalk-80,https://github.com/dbanay/Smalltalk,dbanaysmalltalk blue book c implementation,http using smalltalk two button mouse mapping building running o x http libsdlorg window linux http libsdlorg configuration option object memory objmemoryh interpreter interpreterh application maincpp command line argument snapshot im,welcome bluebook c implementation system run o x window linux since first reading smalltalk august issue byte magazine always intrigued time slow computer ram barely running fast enough anything useful stunned read article futuristic alien technology surely beyond reach attending university washington exposed two memorable piece technology first steve job nextcube tektronix workstation running still amazing fitting implemented smalltalk descendent nextcube macbook pro laptop late discovered hero xerox parc got band back together released squeak thrilled finally nice system play nt care look feel missed minimalism experienced tektronix system also copy bluebook greenbook always daydreamed making implementation access porting kit used changed year ago found mario wolczko website http xerox release virtual image magnetic tape well instruction manual handtyped smalltalk source bluebook also implementation written preansi c despite many hour able get anything run started consider making implementation knew would nt easy task would undoubtedly error book also knew c like index array starting zero whereas smalltalk start surely would offbyone error smalltalk different operator precedence cc guard well credit exception expression parenthesized way nt issue reference counting used would probably reference counting error finally memory bunch word could accidentally storefetch wrong thing without realizing top alto bigendian system decide byte swapped virtual image recommended xerox guide guidance solid missed need byte swap float started working late december nt really focus month corona virus struck decided quarantine vector virus someone else worked earnest xerox porting kit included reference trace file could compare system felt incredible rush passed system ran little longer ran memory idea going display stuff working gain visibility intercepted logged message sends using show error selector well biglooking string pushed stack sure enough traceback string would displayed smalltalk debugger made far able figure screwed felt another rush screen drawn form able dump pbm file see implemented host graphical support smalltalk using sdl implemented input primitive working mouse keyboard finally able really use system point system helped find issue graphical smalltalk inspector debugger really heavy lifting saved countless hour resiliency system amazing since file system support available system image used alto file system class could see decompiled code source browser still useful could edit nt show temporary name actually used lose comment well decide try emulate alto file system decided followed approach used tektronix greenbook subclassed filedirectory file page created posixfiledirectory posixfile posixpage fired vscode wrote implementation could copy paste smalltalk added way paste character clipboard input queue implemented tested satisfied created sourcefiles array file stream instant assigned variable magic happened bang sudden could browse real source code browser working file system repasted implementation stored system change file could finally see implementation real temporary name comment delightful bootstrapping experience make grin ear ear smalltalk condensechanges saved image got working o x moved window hour also got running linux minute linux tested virtualbox without graphic acceleration performance bad hopefully real linux machine performs better system usable yes definitely constrained size object table still stuff admit prefer spartan look v pharo squeak even though far superior lot tell gist fun glad year able make happen still amazed genius parc think amazing system read almost ten year old time publication mind boggling using smalltalk us three button mouse labeled red left mouse button yellow middle blue right button red button clicking selection yellow running command like doit blue thing like closing window three button mouse use three command line option use traditional mapping three button mouse use alternate default mapping two button mouse mapping button mapping left button map red button selection right button map yellow button doit altleft map blue button close macintosh commandleft note ctrlleft button also used yellow button nice thing building thing book book document use system work building running o x need install sdl later download http libsdlorg choose development library dmg install go osx folder type make f makefilert installed package manager built system sdlconfig path simply make able smalltalk directory file see command line option section mean xcode project open like window included sdl headersbinary need open project window directory hit run linux need install sdl later either go http libsdlorg download build use package manager install cd linux subdirectory project type make able smalltalk directory file see command line option section mean configuration option behavior smalltalk application customized define setting header file module object memory objmemoryh defines object memory defines determines garbage collection scheme used approach described bluebook available define meaning gcmarksweep use mark sweep garbage collection gcrefcount use reference counting scheme runtimechecking include runtime check memory access recursivemarking book describes recursive marking algorithm simple consumes stack space symbol defined algorithm used complicated clever pointer reversal approach used instead gcmarksweep gcrefcount flag mutually exclusive defined normal reference counting performed full garbage collection memory exhausted object table becomes full generates lot cyclical reference eg methodcontext reference temporary field blockcontext back reference context sender field mark sweep approach result many frequent collection object table quickly fill methodcontexts frequently allocated object system run smalltalk implementation recycle context reason interpreter interpreterh defines interpreter defines provided allow inclusionexclusion optional primitive well handful helpful debugging method optional primitive implemented smalltalk fallback executed instead significant effect performance define meaning debuggingsupport add additional method debugging support implementprimitivenext implement optional primitivenext primitive implementprimitiveatend implement optional primitiveatend primitive implementprimitivenextput implement optional primitivenextput primitive implementprimitivescanchars implement optional primitivescancharacters primitive application maincpp defines running window ran two problem first mouse cursor would nt reliably change left mouse button held eg reframing window second issue mouse cursor small high resolution display even system scaling option set compensate reason added option app render mouse cursor rather operating system softwaremousecursor defined set conditionally window build work platform unnecessary behave properly without command line argument smalltalk application take number argument required argument directory path specifies directory snapshot image found complete list argument meaning default directory path specifies directory contains snapshot image well file file directory accessible using normal filedirectory access method required three use three button mapping two button scheme image name snapshot file use snapshotim cycle number vm instruction run per update loop vsync turn vertical sync synchronizing frame rate monitor refresh rate eliminate screen tearing artifact cost input latency delay m vsync used delay specified presenting next frame gpu useful lowering cpu usage still enjoying benefit using vsync specifies display doubled helpful farsighted folk people running high resolution display
36,Lobsters,virtualization,Virtualization,Hannes Mehnert interview on OCaml and MirageOS,https://evrone.com/hannes-mehnert-interview,hannes mehnert interview ocaml mirageos,introduction interview pavel hannes pavel hannes pavel hannes pavel haskell hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel ruby hannes pavel hannes pavel hannes pavel hannes pavel hannes,introduction backend engineer pavel argentov traveled marrakech morocco attend ninth mirageos retreat held march goal event bring experienced brand new mirageos user together collaborate sync various mirageos subprojects start new one help fix bug mirageos library operating system construct unikernels secure highperformance network application across variety cloud computing mobile platform code developed linux mac o x compiled fully standalone specialized unikernel run xen kvm hypervisor event pavel spoke hannes mehnert coauthor mirageos host event work mirageos ocaml gave u detail contribution mirageos joined project also explained benefit functional programming initially drawn addition broke potential limitation mirageos ocaml gave u information new development come included full transcript interview get latest info straight best source interview pavel think start speaking ocaml start working ocaml hannes six year ago finished phd formal verification software used taking random alreadydeveloped software applying specification writing proof program actually correct turned rather complex workintensive due ubiquitous use shared mutable state quite long time interested system programming usually mean using c writing operating system given semantics background hoping use highlevel language writing operating system finishing phd stumbled upon mirageos together friend david kaloper mirageos written ocaml multiparadigm language module system used functional programming mean avoid shared mutable state actually verify program operating system came mirageos around six year ago already working extent first contribution tl stack cryptographic algorithm pavel mirageos used get hannes mirageos started research project prototype idea use different style programming operating system background also deep security main motivation contributing mirageos trying get production security perspective le mutable state run http web server tl much le code mean le bug le resource usage nt run much code nt waste many cpu cycle much memory pavel let talk tl often might hit limitation hardware everything slow crypto algorithm slow ocaml solve problem solve problem speed ocaml allow make code fast hannes yes ocaml fast runtime garbage collector memory manager collecting fast question basically whether ocaml allows write decent enough interface pas argument properly waste much cpu time turn fast enough happy use reasonable programming language instead lowlevel micro assembler side tl handshake asymmetric cryptography order make fast use library called gmpgnu multiprecision library ocaml binding exception usually try write binding use much c code complex part decryption encryption still ocaml c pavel haskell programmer highlevel language programmer concerned performance garbage collector saying slows thing haskell ca nt write kind soft realtime application think ocaml ocaml garbage collector fast enough perform use case require speed hannes yeah think haskell completely different runtime lazy evaluation default ocaml strict computation go along garbage collector welltuned workload really fast believe ocaml soft realtime application doable pavel far know unikernel concept nt unique ocaml anymore history unikernels name idea different started people come idea unikernels hannes think started university cambridge theoretical paper socalled exokernel people needed instrument system would taskfocused le resource consuming easily written easily adaptable pavel ok far know mirageos us lwt library lwt performant enough reasonable load dns server respond quickly multiple direction work fast enough hannes think work reasonably well good application example mirageos firewall integrated qubes o qubes o operating system us xen goal qubes o example mail application separated pdf renderer receive email malicious pdf view nt able access mail instead save pdf push different virtual machine different virtual machine code run pdf renderer pdf opened rendered isolated environment mirageos fit pretty well much smaller memory footprint set firewall one component inside one virtual machine inside qubes o environment receive packet virtual machine access network mirageos unikernel work router route packet pavel said something mirageos memory consumption much memory really lower upper limit heard mirageos configured memory bigger really limitation hannes well moment yes minimal amount memory ocaml runtime mirageos unikernels need megabyte upper limit moment memory easily tuned basically demand memory dns service example require around megabyte memory million record like hundred record web service run usually megabyte memory sufficient store data pavel worked irmin data store far know kind like git data store written ocaml mirageos hannes yeah irmin branchable immutable store usually nt use irmin directly use irmin via git implementation us background example dns server store zone file remote git repository fetch repository clone memory serf data irmin major release irmin pavel well let switch bit format gathering could tell u couple thing mirageos retreat come idea hannes got lot inspiration different conference also openbsd hackathons basic idea gather nice group people nice location nice weather food sunshine actually enjoy environment crucial people stay together day communicate strict schedule daily round update interested stuck specific point people may jump may solution random people start discussing problem solution people busy writing code one hand try get people long established community experience idea different library ecosystem discus fundamental change ecosystem also always appreciate new people new idea people actually integrate group get program ocaml mirageos order grow community exclusively people already know mirageos written ocaml several year open everybody willing take trip marrakech pavel great think functional programming affect programmer way thinking first started writing ocaml code started understand type transformed caused think first type meaning data work know functional programming europe part programming scholarship basic level far know student russia learn program starting imperative technique almost never get hannes yeah think lot type apply quite lot typedriven development writing actual code write program functional language first think type look like get type right shape implementation becomes much easier also code maintenance localized program understanding functional programming think much easier understand code five year later written functional language nt overuse lot syntactic sugar feature develop code imperative language hundred line function try keep function rather short understandable yes functional programming shape brain think program pavel see monad making way different language ruby c way implementing academic knowledge daytoday programming hannes think viable instrument hard comprehend nt discovered monad trying explain monad new imperative programmer hard still use monad mirageos ocaml hopefully multicore branch becoming part ocaml runtime point year get pavel let talk bit opensource everything speaking opensource point view tech succeeds enough money pumped opensource consumes effort time nt really bring money evangelizing new tech open community sooner later reach idea opensource collaboration important opensource opinion hannes think opensource crucial factor stuff actually developing library ocaml library used mirageos unikernels everybody able freely mix match together write tl stack dns implementation strong incentive opensource people reuse enjoy writing software make happy anyone using software individual company using profit fine mirageos software bsd license everybody use whatever want think important license everybody understand gpl ton page text bsd two three paragraph usually written line text also want convince industry use software better use permissive license much easier time convincing use gpl license may bit harder convince lawyer good idea mirageos example code contribution ibm research managed convince use permissive license nt easy lawyer usually want stick trademark pavel read working company sell unikernel development like working tech nt selling let say established wellknown imperative programming hannes work nonprofit company called robur work grant donation commercial contract enhance mirageos ecosystem develop unikernels last year gotten funding public germany european union got grant develop certain application like openvpn gateway moment getting funding european union work dnsmasq one crucial component everybody network pretty wonderful pavel fast mirageos develop time developing fast growing new feature hannes development always quite slow also quite lot work try get rid technical debt adapt modern build system sometimes take time project term feature mainly new library developed talked briefly irmin datastore release major milestone reached last year also upcoming tl stack mirageos heading towards version definitely improve development experience quite radically getting rid old ocamlbuild replacing new build system called dune feature incremental build pavel well let conclude talk encouraging statement developer might learn mirageos embrace ocaml stop fearing functional programming theoretical mindeater would encourage people hannes good thing fp level control rather complex code functional programming spot highlevel bug could able debug lowest level fix within single weekend common operating system impossible due size codebase involved library control entire stack fullstack development level network device card business logic real application run evrone strive stay top new tech development embrace innovative new tool method allows u use optimal resource provide client best solution meet unique need work wide variety programming language tool highly encourage team member attend contribute tech conference event mirageos retreat idea like develop let u know contact touch soon discus project help
37,Lobsters,virtualization,Virtualization,KVM host in a few lines of code,https://zserge.com/posts/kvm/,kvm host line code,kvm host line code ioctl api loading vm running http call kernel loading kernel image http wwwkernelorgdocdocumentationvirtualkvmcpuidtxt http summary libvirt kvmtool github twitter r linux container line code,kvm host line codekvm virtualization technology come linux kernel word allows run multiple virtual machine vms single linux vm host vms case known guest ever used qemu virtualbox linux know kvm capable ofbut work hood ioctlkvm provides api via special device node devkvm opening device obtain handle kvm subsystem later make ioctl syscalls allocate resource launch vms ioctls return file descriptor also controlled ioctls turtle way deep layer apis kvm devkvm layer one used control whole kvm subsystem create new vms vm layer one used control individual virtual machine vcpu layer one used control operation single virtual cpu one vm run multiple vcpus additionally apis io deviceslet see look practice kvm layer int kvmfd open devkvm ordwr int version ioctl kvmfd kvmgetapiversion printf kvm version dn version create vm int vmfd ioctl kvmfd kvmcreatevm create vm memory define ramsize void mem mmap null ramsize protread protwrite mapprivate mapanonymous mapnoreserve struct kvmuserspacememoryregion mem slot guestphysaddr memorysize ramsize userspaceaddr uintptrt mem ioctl vmfd kvmsetusermemoryregion mem create vcpu int vcpufd ioctl vmfd kvmcreatevcpu point created new vm allocated memory assigned one vcpu make vm actually run something need load vm image configure cpu register properlyloading vmthis one simple read file copy content vm memory course mmap might good option tooint binfd open guestbin ordonly binfd fprintf stderr open binary file dn errno return char p char ramstart int r read binfd p r break p r close binfd assumed guestbin contains valid bytecode current cpu architecture kvm interpret cpu instruction one one like oldschool vm host let real cpu calculation intercept io modern vms run decent performance close bare metal unless io heavy operationshere tiny guest vm kernel try run first build guest guesto ld oformat binary n e start ttext guest guesto globl start start xorw ax ax loop ax inc ax jmp loop assembly interest tiny executable increment register loop output value io port deliberate compiled archaic app kvm vcpu start run multiple mode much like real processor simplest mode real mode used run code last century real mode notable memory addressing direct instead using descriptor table would simpler initialize register real mode struct kvmsregs sregs ioctl vcpufd kvmgetsregs sregs initialize selector base zero sregscsselector sregscsbase sregsssselector sregsssbase sregsdsselector sregsdsbase sregsesselector sregsesbase sregsfsselector sregsfsbase sregsgsselector save special register ioctl vcpufd kvmsetsregs sregs initialize save normal register struct kvmregs regs regsrflags bit must always set eflags rflags regsrip code run address ioctl vcpufd kvmsetregs regs runningcode loaded register ready shall start run vm need get pointer run state vcpu enter loop vm run interrupted io operation pass control back hostint runsz ioctl kvmfd kvmgetvcpummapsize struct kvmrun run struct kvmrun mmap null runsz protread protwrite mapshared vcpufd ioctl vcpufd kvmrun switch run exitreason case kvmexitio printf io port x data xn run ioport int char run run iodataoffset break case kvmexitshutdown return run app see io port data io port data io port data io port data io port data work complete source available gist http spot mistake comment welcome call kernel obviously impressive running linux kernel instead beginning would open devkvm create vm etc however need ioctls vm layer add periodic interval timer initialize tss required intel chip add interrupt controller ioctl vmfd kvmsettssaddr mapaddr ioctl vmfd kvmsetidentitymapaddr mapaddr ioctl vmfd kvmcreateirqchip struct kvmpitconfig pit flag ioctl vmfd pit also need change way initialize register linux kernel requires protected mode enable register flag initialize base selector granularity special register sregscsbase sregscslimit sregscsg sregsdsbase sregsdslimit sregsdsg sregsfsbase sregsfslimit sregsfsg sregsgsbase sregsgslimit sregsgsg sregsesbase sregseslimit sregsesg sregsssbase sregssslimit sregsssg sregscsdb sregsssdb enable protected mode regsrflags regsrip kernel code start regsrsi boot parameter start boot parameter load kernel address zero time learn bzimage formatthe kernel image follows special boot protocol fixed header boot parameter followed actual kernel bytecode format boot header described hereloading kernel imageto properly load kernel image vm need read whole bzimage file first look offset get number setup sector shall skip find kernel code start additionally copy boot parameter beginning bzimage boot parameter offset vm ram even enough patch boot parameter vm force vga mode initialize command line pointerwe want kernel print log could intercept io vm host would print stdout achieve need append kernel command linebut even get result set fake cpu id kernel start http wwwkernelorgdocdocumentationvirtualkvmcpuidtxt likely kernel built relying information tell running inside hypervisor bare metali using kernel compiled tiny config adjusted configuration flag support serial console virtiothe full code modified kvm host test kernel image available gist http compile run get following output linux version serge melete gcc version ubuntu fri may cest command line intel spectre broken microcode detected disabling speculation control disabled fast string operation supporting xsave feature floating point register supporting xsave feature sse register supporting xsave feature avx register xstateoffset xstatesizes enabled xstate feature context size byte using standard format biosprovided physical ram map mem usable mem usable nx execute disable protection active tsc fast tsc calibration using pit tsc detected mhz processor lastpfn maxarchpfn configuration wb wt uc uc wb wt uc uc using gb page direct mapping zone range mem normal empty movable zone start node early memory node range node mem node mem zeroed struct page unavailable range page initmem setup node mem mem available pci device clocksource refinedjiffies mask maxcycles maxidlens n built zonelists mobility grouping total page kernel command line dentry cache hash table entry order byte linear inodecache hash table entry order byte linear mem autoinit stack heap alloc heap free memory available kernel code rwdata rodata init bs reserved cmareserved kerneluser page table isolation enabled nrirqs nrirqs preallocated irqs console colour vga printk console enabled apic acpi madt mp table detected apic switch virtual wire mode setup configuration enabling interrupt remapping due skipped ioapic setup clocksource tscearly mask maxcycles maxidlens n calibrating delay loop skipped value calculated using timer frequency bogomips pidmax default minimum mountcache hash table entry order byte linear mountpointcache hash table entry order byte linear disabled fast string operation last level itlb entry last level dtlb entry cpu intel family model stepping spectre mitigation usercopyswapgs barrier user pointer sanitization spectre spectre mitigation kernel compiled retpoline mitigation available speculative store bypass vulnerable taa mitigation clear cpu buffer md mitigation clear cpu buffer performance event broadwell event lbr intel pmu driver obviously still fairly useless result initrd root partition actual apps could run kernel still prof kvm scary rather powerful toolsummaryto make run proper linux vm host much advanced need simulate multiple io driver disk keyboard graphic general approach would remain example initrd would map similarly command line option disk would intercept io respond properlyhowever one force use kvm directly libvirt nice friendly wrapper lowlevel virtualization technique kvm bhyveif interested learn kvm would suggest look kvmtool source much easier read qemu whole project much smaller simpleri hope enjoyed article follow contribute github twitter subscribe via rssmay also linux container line code
38,Lobsters,virtualization,Virtualization,Using qemu guest agent on OpenBSD kvm/qemu guests,http://undeadly.org/cgi?action=article;sid=20200514073852,using qemu guest agent openbsd kvmqemu guest,paul weird de weerd http githubcomaborcheqemuguestagent http gitqemuorg pqemugit ablob fqgacommandsposixc hbhead,contributed paul weird de weerd turtle way dept experimenting proxmox since year also applies plain kvmqemu openbsd vms today look qemu guest agent feature host configwebui enabling guest agent add virtioserial device kvm cmdline chardev socket server nowait device virtioserial device virtserialport guest detected new virtio device dedicated driver stay unconfigured dev function qumranet virtio console rev matching child driver configured looking qemuguestagent proxmox qm doc way tell proxmox use isaserial device type proxmox grep agent agent typeisa add another device type kvm cmdline chardev socket server nowait device isaserial guest new serial device used qemu console port irq byte fifo console port irq byte fifo point one run qemuga pointing serial port f used otherwise qemuga hardcodes usrlocal something guest doas qemuga isaserial p f tmpxxpid tmp v debug disabling command guestsuspenddisk debug disabling command guestsuspendram debug disabling command guestsuspendhybrid debug disabling command guestnetworkgetinterfaces debug disabling command guestgetvcpus debug disabling command guestsetvcpus debug disabling command guestgetmemoryblocks debug disabling command guestsetmemoryblocks debug disabling command guestgetmemoryblocksize debug disabling command guestgetmemoryblockinfo debug disabling command guestgetfsinfo debug disabling command guestfsfreezestatus debug disabling command guestfsfreezefreeze debug disabling command guestfsfreezefreezelist debug disabling command guestfsfreezethaw debug disabling command guestgetfsinfo debug disabling command guestfstrim yeah command disabled something probably fix w upstream freebsd work done http githubcomaborcheqemuguestagent one send command via host proxmox qm agent gethostname hostname proxmox qm agent gettime proxmox qm agent getosinfo kernelrelease kernelversion genericmp machine sadly upstream hardcodes shutdown argument guestshutdown command cf http gitqemuorg pqemugit ablob fqgacommandsposixc hbhead trying qm agent shutdown wont work box patchable according info command qemu command work proxmox qm guest cmd info jq supportedcommands select enabled true select successresponse true name guestgetosinfo guestgettimezone guestgetusers guestgethostname guestexec guestexecstatus guestsetuserpassword guestfileflush guestfileseek guestfilewrite guestfileread guestfileclose guestfileopen guestinfo guestsettime guestgettime guestping guestsync guestsyncdelimited testing show broken runtime allows host list file within guest proxmox qm guest exec l l tmp jq r outdata total drwxrwxrwt root wheel may iceunix drwxrwxrwt root wheel may rwr r root wheel may qgastate drwxrxrx root wheel may sndio drwx landry wheel may drwx landry wheel may drwx landry wheel may drwxrwxrwt root wheel feb virecover finally allows graceful shutdown guest host proxmox qm guest exec halt p qemu guest agent running vm properly stopped hoping useful people use openbsd qemukvm vms nt found kind doc specific openbsd far bit consider portswise think would make sense subpackage qemuga binary install complete qemu package dependency vm bit much imo see feasible fixing hardcoded path command would nice
39,Lobsters,virtualization,Virtualization,"Hello, GBA! Journey of making an emulator — part 1",https://medium.com/@michelheily/hello-gba-journey-of-making-an-emulator-part-1-8793000e8606,hello gba journey making emulator part,emulator emulator model help preserve enhanced feature hello gba warning gbatek video ppu audio input gamepaks eeprom none exist computer emulated incremental main cpu emulation gba memory map many quirk edge case complex cpu jit basic arm interpreter example branch instruction guide azerialabs bit conditional execution bit bit bit bare metal bios system call several attack allow leaking content let pixel bitmap mode tile mode framebuffer testing testing testing gbasuite integrated test ci armwrestler finally passing armwrestler tonc pardon undefined behavior bug accurate access violation open bus mega man battle network dereference protected implement bios protection unpredictable thing welldefined behavior rotating metroid bug story affine sprite demo gba,emulator dive meaty detail gba let u ask emulation even mean anyway may think emulator program take game rom old console spawn window allowing play far truth still want refine notionin context emulating game console emulator often program model hardware component target system degree accuracy get software made game run host platform computer need emulator well game console emulator help preserve longforgotten game available hardware easily acquire nowadays also emulator often provide enhanced feature available real hardware benefit gamers hacker alike quick savestates time rewind debugging patching useful rom hacking morehello gba solid understanding emulator let get familiarized gba hardware architecturewarning get technical hey came right advise referring gbatek martin korth goto document gba internalsin short game boy advance handheld game console nintendo released powered chip clocked main cpu video tft display proprietary graphic engine often referred ppu picture processing unit audio pcm channel used playback wave sample analog wave generator channel compatible gameboy colorinput dma direct memory access channelsserial secondary cpu backward compatibility game boy color gamesgames stored cartridge called gamepaks may contain additional hardware flash memory eeprom realtime clock gyroscope solar sensor vibration etcwhat common component ask none exist computer specialized hardware available gba software relies component emulated extent game workthe beautiful thing writing emulator incremental process implement everything game work start basic cpu support branch instruction alu mov add sub write assembly test case improve upon add instruction slowly carefullyafter solid cpu emulation want sprinkle graphic whole thing find get first implementing small subset ppu functionality sound even mandatory game boot get ideathe main cpu emulationthe cpu heart system main component connects piece often first milestone emulator developer device system share bus cpu us interconnect recommend referring gba memory mapas mentioned main cpu gba based architecture instruction many quirk edge case also additional instruction set called thumb people pick gba emulator project complex cpu comparing platform neslet explore cpu emulated highlevel software model cpu often concise structclass contains cpu state register program counter flag bit etc system memory module often simple byte arraysone popular approach implement cpu machinecode interpreter old platform gba included sufficient would slow modern one faster chip nintendo switch often see jit emulatorsbasic arm interpreter examplelet explore basic arm interpreterkeep mind example far spaghetti code use project set clean examplehypothetical cpu modelevery interpreter main loop cpu read instruction memory decodes executes increment program counter neededcpu main interpreter loopnow let see go implementing branch instruction summary bbl instruction gbatekif know arm assembly interested picking guide azerialabs good place startbits meant conditional execution ignore demonstration see bit must constant use decide instruction branch bit link flag bl branchlink instruction mean address next instruction saved register lr useful want call subroutine bit make signed offset multiple current pc intend jump toputting together implementation arm branch instructiongreat need every arm instruction format get started thumb dare say implementing cpu awfully timeconsuming taskme v metalas said beginning tremendous amount time spent reverse engineering gba game interested either hacking rom emulator development always good practice get idea kind software dealing interfacing hardware look like software point viewgba program people call bare metal program written specifically gba hardware rely operating system actually gba mmu virtual memory program access physical memory directly talk hardware via memory mapped io mmio even though gba operating system contain small firmware call bios internal rom bios first code run boot initializes stack clear ram initializes hardware display famous boot animation jump gamepak insertedother bios also provides system call gba program via software interrupt emulator require user well game romwith bios belonging nintendo allowed share dump even though gba protects bios allow code running outside simply read content several attack allow leaking contentslet pixelslet take look simple gba program sample programlines configuring ppu address mapped ppu internal register called dispcnt display control bit enables background bit enable display mode gba display mode divided category mode bitmap mode mode tile mode tile mode covered post keep mind commonly used game since lot faster although harder design program withmode easiest bitmap mode ppu treat vram video memory mapped address contiguous framebuffer color probably see used real game inefficient keep thing simple cpu update vram special period called vblank updating entire framebuffer pixelbypixel consumes many cpu cycle leaving little room perform game logic vblankif write pixel arbitrary coordinate x mode would x colorthe loop line would go draw red line middle screen representation color red display widthrunning program see following hello mode testing testingtesting always important people often overlook private hobby project last section article get glimpse might happen rush without proper attention testinganyway various test rom used test emulatorto test processor used gbasuite julian smolka short arm snippet test many cpu edgecases jump infinite loop test fails faulty test number cpu register handy test indeed even integrated test ci using rust builtin testing infrastructure also used armwrestler bitmapmode test rom us requires minimal ppu implementation work took great finally passing armwrestlerto test ppu sprite button dma etc often used demo tonc site awesome guide gba homebrew development reverseengineered example tested whenever implemented new feature also explains detail inside gba hardware rather priceless piece information wellallgreen sir pardon undefined behaviorgames often bug miracle causing anything bad running real gba thus potentially overlooked development emulation accurate enough previously harmless little bug might reproduce correctly crash emulatorwhat mean accurate though ask happens program trying read unmapped memory address common machine would right guess access violation exception might occur gba thing different mmu exception raised game would read garbage data happened linger bus previous operationthis phenomenon dubbed open bus accounted bugged game work hardware might read different garbage data might happen break emulator yes legend zelda minish cap looking debugging make mega man battle network freeze enter email menu discovered game bug somehow game happens receive null pointer display mail record try dereference laternull pointing bios region mentioned earlier protected game read real content would returned instead last fetched bios opcode happens value cause crash game continues nothing happened implement bios protection emulator game try access bios region actually succeeds reading value returned case happens make game freezeluckily gbatek informs unpredictable thing main takeaway emulating embedded system never forget software sensitive bug considered undefined behavior often must become welldefined behavior otherwise may breakthe rotating metroid bug storythis bug found first implementing affine sprite wait affine sprite well short sprite sometimes called object tiledbitmaps displayed top displaymodes often used game character affine sprite sprite configured rotatescale ppui used objaffgba demo tonc test implementation demo sprite metroid rotated scaled gba buttonsthis expected result expected result objaffgba rotation scaling transformationsfor scaling transformation worked got tried rotation bug trying rotate sprite might bug bug rendering code bug cpu configures affine transformation parameter ppu tell made sure math affine transformation check ruled rendering bug knew well looking cpu bug well point forgot still failing opcodes armwrestler duh since rotation buggy part let look objaffrotatefunction libtonc function calculates affine transformation parameter writes oam stand object attribute ram ppu later us render transformed spritei recompiled objaffgba demo debug information easily locate function built binary put breakpoint emulatorthis compiled version function compiled version objaffinerotatei immediately noticed highlighted rsb neg instruction remembered one instruction pas armwrestler test stepping function emulator alongside gba debugger confirmed suspicion implement thumb neg instruction properly mistake pretty stupid partially blame thumb neg rd r opcode translated arm modersb rd r implemented rsb rd r rd thumb datasheetneg opcode thumb format us immediate value second operand noticed hurry quickly write implementation opcodes fix trivial got rotation workmoral story never neglect failed opcode test
40,Lobsters,virtualization,Virtualization,Scaleway is fading out dedicated arm64 instances,https://www.scaleway.com/en/docs/migrate-c2-arm64-to-virtual-instance-using-rsync/,scaleway fading dedicated instance,overview virtual instance bare metal cloud server requirement solution migrating using snapshot instance migration data using power instance scaleway console instance power note dssd creating snapshot attached volume snapshot take snapshot detach creating new instance instance create instance snapshot choose image general purpose development local storage advanced option bootscript create new instance instance delete solution migrating using rsync block storage volume block storage volume instance instance bare metal server bare metal server creating temporary ssh key creating virtual instance scaleway console instance create instance configure instance add volume block storage note add block storage block create new instance local boot mounting block volume note gib gb creating temporary ssh key migrating data using rsync note moving flexible ip flexible ip flexible ip attach attach ip delete note,overviewscaleway instance reach end life december support instance end july purpose tutorial guide migration resource best fit need improved stability performance reliabilitythe scaleway element public cloud platform provides two virtual instance range bare metal cloud server adapted use case requirementstwo way migration recommended solution migrating using snapshotssnapshots facilitate migration instance smaller amount data done within simple click scaleway console using instance want benefit upgrading operating system instance latest version migration data using rsync recommendedpower connect scaleway console click instance side select snapshot click name enter instance overview page click power button top pagenote depending amount volume connected instance powering may take time careful powering instance instance directly connected dssd volume deleted powering instance make sure backup data prior shutting instancecreating instance powered click attached volume menu list attached volume display choose volume snapshot click enter friendly name snapshot click take instance overview page click detach detach flexible public ip address instance attached new instance later stepcreating new click instance tab create instance launch instance creation click snapshot tab choose image section wizard choose previously created snapshot choose instance need list available general purpose development instance make sure new instance least much local storage size snapshot example snapshot new instance must provide least available local storage configure local storage instance instance provides storage size snapshot configure another volume use available local click advanced option choose flexible ip instance drop configure bootscript advanced setting bootscript us prebuilt kernel boot network requirement volume choose bootscript current instance dropdown list boot latest stable kernel select mainline latest boot deploy new instance clicking create new instance bottom everything runnning delete instance clicking delete button instance overview pagesolution migrating using rsync block storage volumesit possible migrate data stored intance using opensource tool rsync scaleway block storage volume provide highly available redundant storage ideal solution instance large amount data migration instance migration bare metal serversif want migrate bare metal server default storage capacity virtual instance sufficient use case launch data migration directly physical disk server skip procedure formatting mounting block storage move forward directly creating temporary ssh key sectioncreating virtual connect scaleway console click instance side click create instance launch instance creation configure instance towards requirement available add volume section creation wizard configure block storage volume store transferred data onnote may choose size volume requirement make sure volume least size amount data click add block storage add volume configuration new block display volume list name volume identify easily modify size volume use click create new instance bottom page launch creation new instance deployed fresh operating system image supporting local bootmounting block connect newly created instance ssh ssh root yourinstanceip use lsblk command check volume available lsblk name maj min rm size ro type mountpoint sda disk vda disk part part bootefi see block volume named sda chosen storage sizenote scaleway ecosystem us gib define storage size gb default format block storage volume verify file system created successfully running lsblk f command lsblk f name fstype label uuid mountpoint sda vda root vfat bootefi check fstype field match block create mount point volume tutorial mount recommended use default option mount default devsda mntdata want see available option run man mount make sure file system properly mounted running lsblk command lsblk name maj min rm size ro type mountpoint sda disk mntdata vda disk part part bootefi check mountpoint mount volume automatically system boot add line etcfstab file instance echo devsda mntdata default etcfstab creating temporary ssh connect existing server ssh ssh root create new temporary ssh key data migration sshkeygen rsa b f rsyncmigrationkey display content public ssh key copy clipboard cat rootrsyncmigrationkeypub connect newly created virtual instance add public ssh key server file rootsshauthorizedkeysopen text editor like nano paste paste content clipboard end file nano rootsshauthorizedkeys save file exit text loader logout destination instance continuingmigrating data using rsyncas newly created instance attached block storage volume running launch data migrationnote keep mind migrating instance migrate data website photo document binary file reinstalled directly new instance make sure built easy common way using rsync tool connect instance using ssh install tool using apt packet manager apt update apt install rsync rsync installed quite easy use run command rsync av e ssh rootrsyncmigrationkey sourcedirectory virtualinstanceipaddress mntdata way rsync copy recursively file sourcedirectory new virtual instance preserve file permissionsto exclude specific file transferred exclude option used example ignore pyc file source directory command line becomes rsync av e ssh rootrsyncmigrationkey exclude exclude pyc sourcedirectory virtualinstanceipaddress mntdata data migrated remove temporary ssh key instance rm rootryncmigrationkey moving flexible transfer data completed detach flexible ip instance instance overview detach public flexible ip newly created instance click attach choose flexible ip instance drop click attach ip confirm newly created instance reachable using flexible ip address previous everything running may delete old compute instance clicking delete button instance overview pagenote currently yet possible move flexible ip virtual instance bare metal server case migration bare metal server service available ip dedicated server might need reconfigure required
41,Lobsters,virtualization,Virtualization,Using bhyve PCI Passthrough on OmniOS,https://www.cyber-tec.org/2019/05/29/using-bhyve-pci-passthrough-on-omnios/,using bhyve pci passthrough omnios,omnios bhyve hypervisor page simple overview global zone network configuration configure passthrough device via ppt ppt use zonecfg configure guest zone finish configuration creating zone configure freebsd bhyve guest test network configuration,hardware supported illumos yet luckily bhyve support pci passthrough guest operating system continue omnios desktop modern hardware would love wifi support using bhyve guest router zone provide required driver first requires uptodate omnios version provide bhyve support including following ip package pkg install systembhyve pkg install systemzonesbrandbhyve also found additional system requirement omnios bhyve hypervisor page simple overview inet global zone bhyve zone pciwifi passthrough wifidevice nat vnic etherstub vnic global zone network configuration etherstub required provides virtual switch virtual nic global zone one bhyve zone dladm createetherstub required assign virtual nics etherstub dladm createvnic l dladm createvnic l verify configuration dladm showvnic also required assign ip address vnic allow communication bhyve zone ipadm createaddr static choose whatever network like communication two nics choose network configure passthrough device via ppt lookup pci information device like passthrough bhyve zone example looking wireless network card prtconf dd intel corporation centrino adv look correct pciex entry nt got working pci entry prtpicl v tool might also provide additional information pci device pciex information need stored following two file etcpptaliases look similar etcdriveraliases file overwrite assign required ppt driver device etcpptmatches file contains pci information reboot recommended attach driver device verification done following command look attached driver device use pptadm list dev path pptadm list dev vendor device path pci used later passthrough bhyve zone use zonecfg configure guest zone bhyve zone required create dataset zonepath zvol contains guest zone called gw gateway internet create zvol zfs create v create zonepath zfs create rpoolzonesgw create dataset isos zfs create rpooliso download latest freebsd operating system like iso store rpooliso look like cd rpooliso wget freebsdiso http downloadfreebsdorg bootonlyiso create zone via zonecfg always recommend create one file contains relevant data zonecfg work correctly example tmpgwzone create b set brandbhyve set zonepathzonesgw add net set set end add device set end add device set end add f set dirrpoolisofreebsdiso set specialrpoolisofreebsdiso set typelofs add option ro add option nodevices end add attr set namecdrom set typestring set valuerpoolisofreebsdiso end add attr set namebootrom set typestring set valuebhyverelease end add attr set namebootdisk set typestring set end add attr set nameextra set typestring set value passthru end everything related freebsdiso removed later need install medium anymore bhyverelease bootrom required freebsd work correctly might depends operating system one need use following two setting required get passthrough working correctly add device zone allow required access add device set end add extra parameter bhyve command passthrough correctly pci id guest pci id chosen long used parameter already add attr set nameextra set typestring set value passthru end required disallow guest memory swapped otherwise passthrough nt supported finish configuration creating zone zonecfg z gw f tmpgwzone use zoneadm install boot zone zoneadm z gw install zoneadm z gw boot something going wrong zone nt boot correctly check bhyve log file zonepathroottmpinitlog example zonesgwroottmpinitlog configure freebsd bhyve guest able log zone via zlogin follow operating system installation based need awesome freebsd installation straightforward anyway installation network configuration required support wireless card setup nat modify bootloaderconf load correct firmware ifiwnload yes yes yes wlanwep yes wlanccmpload yes wlantkipload yes setup network interface via etcrcconf check guest ethernet interface inet netmask wireless network interface wpa country de enable pf ip forwarding gatewayenable yes pfenable yes add nat entry etcpfconf nat configure wireless network required use wpasupplicant store information etcwpasupplicantconf wpapassphrase ssid pwd etcwpasupplicantconf reboot might required load required firmware configure network described test network configuration global zone able ping bhyve guest via nt configured default gateway yet might good time route add default able reach network always loved internet via awesome bhyve router
42,Lobsters,virtualization,Virtualization,How anti-cheats detect system emulation,https://secret.club/2020/04/13/how-anti-cheats-detect-system-emulation.html,anticheats detect system emulation,reverse engineering blog battleye easyanticheat hypervisors eptp switching page hook opensource tool opensource project bugcheck callback crn access exiting vmware bug pafish keep simple silly hvpp usermode instruction prevention umip battleye eac battleye patchguard easyanticheat ipower syscall hooking method using efer daax ajkhoury ntdeviceiocontrolfile iofcalldriver iofcalldriverwrapper iofcalldriver ntdeviceiocontrolfile thanks ipower daax drew ajkhoury work system emulation tool,first article addressing various method detecting presence vmms whether commercial custom wanted thorough associate research popular anticheat vendor kick article important outside game hacking arena understand usage hypervisors cheating importance anticheats staying top cheat provider using post cover standard detection method used intelamd offering explanation mitigation general rating efficacy get sidechannel attack employed platform agnostic highly efficient get o specific method abuse mishandling descriptor table information way block custom method syscall hooking like technique documented reverse engineering blogthe interesting part cover actual method used battleye easyanticheat cover improvement could made general efficacy method mean jab anticheats keeping technology latest way abuse technology difficult perform job pretty well like software hole intended help interested understanding side operate various way attackersdefenders defeatemploy virtualization detection conclude article dump miscellaneous data ntdeviceiocontrolfileiofcalldriver call two anticheats related hypervisors figured investigated let dig inthe advent hypervisors vmm brought lot hype security research community hype also spurred interest notsoresearch based circle like cheatingmalware community end goal use hypervisor emulate system behaviorhide presence various new technology like ept allowed attacker abuse certain feature like eptp switching page hook hide information probe security software technology gained popularity many opensource project released help security community understand go developing tool leveraging also meant questionable community looking conceal began using opensource project one game hacking communitythe main benefit anticheats many paytocheat provider began using slightly modified opensource version tool opensource tool meant educational purpose hardened many attack could reveal presence anticheats use lack induration detect hacker using customopensource project attempt cull herd however recent time research technology improves becomes widespread original detection vector becoming le effectiveknowing look method detecting hypervisor currently running machine many detection vector wanted detail handful technique ranging ineffective super effective catandmouse game continue require innovation opposing side opinion anticheats stagnated arena want provide information feel waythis section going cover platform specific method detecting hypervisors majority opensource hypervisors built use intel processor vector covered many method applied amd well despite supported le anticheats cheat providersboth intel amd support use bitmap referred msr bitmapmsr permission bitmap respectively bitmap allows vmm control whether rdmsr specific msr cause vmexit bitmap cover specific range msr value mean readswrites msrs outside range could undefined behavior vmxsvm enabledone way security software anticheat antimalware could leverage information check whether msr access msr outside range cause exception generated write performed real hardware unimplementedreserved msr address processor generate generalprotection exception however opensource hypervisors discard writes invalidunimplemented msrs write causing system instability order mitigate rdmsr performed unimplementedreserved msr address inject gp guestthis effective method detection casea common method determining specific opensource hypervisor used check db exception delivered proper instruction boundary executing exiting instruction eflagstf set occurs singlestep debug exception properly handled simple method detection create detection routine similar pushfq dword ptr rsp mov eax popfq exitinginst nop ret detecting particular platform requires use veh check rip determine singlestep trap flag set prior executing detection procedure trigger exception need modify debug register set thread context important remember need preserve modification debug register contextflags enable proper bit breakpoint condition set tasksonce breakpoint detected associated proper flag debug exception generated processor clear flag task switch allows breakpoint apply taskswhen exception delivered exception handler registered check rip determine db delivered correct instruction real hardware exception delivered exitinginst whereas virtualized environment oversight delivered nopthis method effective detecting specific opensource platform mitigation already documented member blog located however despite publication still present many cheat providersthe interesting part xsetbv instruction one instruction cause vm exit unconditionally leverage attribute xsetbv instruction detect hypervisor presencethis method detecting hypervisor presence relies causing exception host xsetbv vmexit handler since known private public mini hypervisor implementation blindly execute xsetbv instruction host xsetbv handler execute xsetbv way guest state cause fault cause host fault naïve hypervisor implementationsfirst must determine condition xsetbv cause faultwith see several way force generalprotection fault gp documentation tell u bit must always set executing instruction ecx eax cause gp example cause fault host xgetbv try clear bit cause gp xsetbv except exceptionexecutehandler get host properly handled xsetbv injected gp guest logdebug running naïve hypervisor implementation handle xsetbv caused host fault resulting bugcheck wanted naïve hypervisor implementation handling instruction would look like vmmeventstatus hvapi vmmhandlexsetbv pvirtualcpu virtualcpu xcr ulargeinteger xcrvalue xcr virtualcpu context rcx xcrvalueulowpart virtualcpu context rax xcrvalueuhighpart virtualcpu context rdx blindly execute xsetbv whatever guest give u trust guest xsetbv xcr xcrvaluequadpart return vmmhandledadvancerip might wondering safe cause bugcheck like well properly written hypervisor implementation cause bugcheck making use seh hypervisors used cheating purpose unable use seh driver mapped kernel exploiting thirdparty driver way achieve seh unsigned driver scope article running bare metal hypervisor proper xsetbv emulation simply output annoying user used reliable detection vector registering bugcheck callback handy way execute code bugcheck occurred manipulate data written crash dump logic follows register bugcheck callbacksave magic number guid part dumpparse dump next bootthis lot work small piece work needing done kbugcheckreasoncallbackrecord bugcheckcallbackrecord boolean bugcheckcallbackregistered false static const magicnumber static const guid magicdriverguid void bugcheckcallbackroutine kbugcheckcallbackreason reason struct kbugcheckreasoncallbackrecord record pvoid reasonspecificdata reasonspecificdatalength pkbugchecksecondarydumpdata secondarydumpdata secondarydumpdata pkbugchecksecondarydumpdata reasonspecificdata secondarydumpdata guid magicdriverguid secondarydumpdata outbuffer pvoid magicnumber secondarydumpdata outbufferlength sizeof magicnumber keinitializecallbackrecord bugcheckcallbackrecord bugcheckcallbackregistered keregisterbugcheckreasoncallback bugcheckcallbackrecord bugcheckcallbackroutine kbcallbacksecondarydumpdata secretclub bugcheckcallbackregistered return statusunsuccessful mitigating type detection time consuming important best rule follow read sdmapm architecture example properly implemented xsetbv vmexit handler static boolean fp must unconditionally set return false ymm depends sse return false bndregs bndcsr must return false validate xsave feature bit opmask zmm hizmm require ymm return false opmask zmm hizmm must return false feature bit valid return true vmmeventstatus hvapi vmmhandlexsetbv pvirtualcpu virtualcpu xcr ulargeinteger xcrvalue xcr virtualcpu context rcx make sure guest trying write bogus xcr switch xcr case break default hvdbgbreak gpfault vmxinjectgp virtualcpu return vmmnothandled xcrvalueulowpart virtualcpu context rax xcrvalueuhighpart virtualcpu context rdx make sure guest trying set unsupported bit xcrvaluequadpart hvdbgbreak goto gpfault make sure bit set architecturally valid xcrvaluequadpart hvdbgbreak goto gpfault point xcr value accepted hardware xsetbv xcr xcrvaluequadpart return vmmhandledadvancerip tracing interrupt message branch useful feature implemented intel hardware msr particular hypervisors take advantage last branch recording lbr branch tracing track branch obfuscated product anticheats since anticheat product spoof return address one utilize lbrbts trace exact location branch occurredthis noticed quite anticheats private c go league brief sample detection may look like mov rcx xor rdx rdx wrmsr rdmsr shl rdx edx eax wrmsr rax rdx jmp checkmsr checkmsr test al jnz nodetect mov al ret nodetect xor rax rax xor rdx rdx mov rdx wrmsr ret would roughly translate writemsr debugctllbr debugctlbts re readmsr re debugctllbr return return importantly would check potential exception could thrown seen various league anticheats c go quite effective determining lbrbts virtualization usedso would someone mitigate check answer injecting gp guest real hardware lbrbts supportedin addition check anticheat could implement detection based usage savedloaded lbr information vmx transition since many opensource project handle storeload lbr information appropriately anticheat could force vmexit use unconditionally exiting instruction like cpuid execution would need check last branch taken lbr stack resuming guest operation target address match expected value would mean introspective engine present save current lbr top stack auto lastbranchtakenpre readlbrtos force vmexit cpuid cpuid regs save post vmexit lbr top stack auto lastbranchtakenpost readlbrtos compare last branch taken lastbranchtakenpre lastbranchtakenpost return true would quite effective catching hypervisors leveraging lbr properly handling storage lbr information lbr stack consists pair msrs store last branch source target address msrs associated listed last branch source address last branch target address msrlastbranchtos msr containing lbr top stack pointer knowledge vmexitvmentry msrstore area documented intel sdm save lbr stack top stack vmexit encountered restore vmentry guest lbr stack size determined table hypervisor would need area allocated would store value lbr stack information write loadstore count address respective vmcs field vmcsvmexitmsr loadstore count vmcsvmexitmsr loadstore address successfully prevent lbr stack check catching vmmsynthetic msrs commonly used hypervisor platform report information guest host hyperv vmware virtualbox example commercial hypervisors implement synthetic msrs commonly see implemented range range marked reserved range documented future processor never use range featuresthere also msrs implemented current processor market however valid msr address queried using rdmsr platform typically generate general protection exception gp however virtualized environment read unimplemented address could yield undefined result example would reading msr address vmware provide random data generate exceptionprobes reserved range mentioned unimplemented msr address could used determine current system virtualized combat hypervisor force access reserved unimplemented msrs inject gp guest simple detection would look something like boolean kisyntheticmsrcheck void define hvsyntheticmsrrangestart try readmsr hvsyntheticmsrrangestart except exceptionexecutehandler return false return true check useful determining commercial hypervisor used since investigated implement msr rangehypervisors improperly handle control register access exit risk detected much like bug discovered vmware member drew determined vmware hypervisor properly emulating processor behavior already done honor writing use case detecting method mitigation proposed blogcrn access exiting vmware bugfor position corresponding bit clear crx guesthost mask destination operand loaded value corresponding bit crx position corresponding bit set crx guesthost mask destination operand loaded value corresponding bit crx read shadow thus every bit cleared crx guesthost mask mov crx read normally crx every bit set crx guesthost mask mov crx return value crx read shadowtl dr bit set guesthost mask shadow bit appears bit guesthost mask actual bit appears vmexit occurs guest attempt modify bit set guesthost maskbased hypervisors may set bit read shadow guesthost mask set bit would mean guest read value bit would get however bug exploited platform signal vmxe disabled vmx instruction still execute possible blatant indication virtualization usedthe fix would inject undefined opcode exception ud guest execution vmx instruction intend mask vmxe bit public platform inject gp guest execution vmx instruction opposed ud proper exception also indicative presencea quick method similar reserved msr address range check reserved cpuid response value would normally example leaf cpuid leaf marked reserved architecture commonly used reporting capability vmm two option check invalid leaf leaf return data two example belowthis first example display using invalid cpuid leaf determine system umpissystemvirtualized void unsigned int invalidleaf unsigned int validleaf struct hvdetails unsigned int data hvdetails invalidleafresponse hvdetails validleafresponse cpuid invalidleafresponse invalidleaf cpuid validleafresponse validleaf invalidleafresponsedata validleafresponsedata invalidleafresponsedata validleafresponsedata invalidleafresponsedata validleafresponsedata invalidleafresponsedata validleafresponsedata return statushvdetected return statushvnotpresent second example us highest low function leaf compare data would given real void cpuidbuffert regs cpuid regs cpuidbuffert reservedregs cpuid reservedregs cpuid reservedregs reservedregseax reservedregseax regseax reservedregsebx regsebx reservedregsecx regsecx reservedregsedx regsedx return statushvdetected return statushvnotpresent section cover advanced detection method reliable much difficult implement may require inspection result execution cache sidechannel attack different one cache sidechannels used super simple quite effective also cover standard timing attack flaw prior addressing anticheat method discoveredthis method used determine hypervisor emulates invd instruction properly expected many public platform emulate instruction appropriately leaving detection vector wide open method supplied member drew us corroborates effectivenesspushfq cli push set cache data wbinvd flush writeback data set previous instruction system memory mov byte ptr rsp set memory wb memory system memory invd flush cache write back system memory real hardware result loss previous operation pop rax proper system behaviour al hypervisoremulator us wbinvd nothing al popfq ret subtle behavior real system emulated properly avoid type detection present handful opensource hypervisor platform exercise reader try determine mitigate sidechannelthere many cache sidechannels common gathering statistic cache miss locating conflicting cache set hit miss depending implementation require lot testing prior implementation ensure false positive type solution require making sure prefetcher unable determine cache usage randomizing cache set access ensuring new read cache set correct term many line read whether valid cache line probed properly involved process plan including implementation check articlethe method example enough validated encourage validate well aware cause gp sgx usedif done performance profiling worked sandbox detection antimalware questionable purpose likely used encountered sort timing check plenty literature covering detail attack case relatively effective however hypervisor developer becoming clever devised method reducing time discrepancy low marginthis timing attack used determine system virtualized common anticheats baseline detection vector also used malware determine sandboxed term effectiveness say effective solution somewhat confusing pass pafish check anticheat check divulging code let briefly go logicwe know timing attack query timestamp counter twice either direct use msr intrinsic rdtsc typically instruction instruction cause vmexits typically idea emulate cycle count adding emulated cycle counter could use disassembler add average devise method much accurate trace first rdtsc instruction second add average cycle count emulated counter tsc offsetting feature utilized though example take advantage mtf also need determine average number cycle vm transition take subtract emulated counter typical average cycle modern processorssuccessfully implementing solution perfect yield better result majority tested solution presented literature pass virtualization check devised important attempting implement solution get bogged unnecessary detail like smis synchronize counter invariant across logical processor though keep simple sillyas opposition standard timing attack offer novel approach rely timestamp counter requires much effort spoof briefly mentioned post decided go little detailiet divergence measurement comparison instruction execution time iet using two different instruction similar rdtsc cpuid rdtsc combination iet divergence test us counter profile two instruction calculate average execution time compare two instruction result detection method us actual performance counter accessed msr instead timestamp counter discussed tsc emulated relative ease pose threat standard detection method spoofing aperf counter much difficult simple forcing vmexit aperf msr performing similar operation tsc emulationthe test work like disable interruptssetup register profiling loopcapture starting clock count instruction cpuid execute leaf every time capture end clock countcalculate difference clock count loopstore result cpuidiet arrayrepeat second candidate instructionrepeat loop n time refined timing profilechoosing instruction difficult part check need use unconditionally exiting instruction ensure vmm present processor trap ideal candidate would cpuid second instruction must chosen care average iet must longer cpuid real hardware otherwise check pointless whole point compare execution time one instruction instruction take longer real system virtual environment cpuid consume lot cycle completing candidate instruction take longer profiling target instruction could trapped hypervisor setup relatively easilythe iet divergence test used anticheats counter advanced hypervisors used cheating sample implementation shown belowcli xor mov ecx rdmsr shl rdx rax rdx mov rax lea rsi xor eax eax cpuid mov rsi eax mov ebx mov ecx mov edx mov ecx rdmsr shl rdx rax rdx mov rdx sub rax mov rax todo capture comparable instruction iet store result loop break end enable interrupt end profile incomplete implementation step would need repeated second instruction executes longer cpuid choosing second instruction important getting clear result said effectiveness detection method quite remarkable catch even well hardened hypervisors platform interested researching product use encourage exit aperf access give private anticheats lookthis detail missed publicly available mini hypervisors although one hvpp properly handle common oversight already know run code compatibility mode support execution code although run code compatibility mode hypervisor still execute natively code confusing hypervisor configured trap gdtidt access since real processor write byte descriptor table register running compatibility mode rather byte running long mode handling correctly common mistake make easy detectionlet brain detect first thing need running compatibility mode cpl need done cpl since window make use usermode instruction prevention umip security feature temporarily drop protected mode briefly lot work way implement detectionalternatively theoretically possible one could synchronize user mode code execute sidtsgdt instruction kernel thread temporarily disabled figured get compatibilityprotected mode juicy detection descriptor descriptor sgdt descriptor descriptor gotcha work checking hypervisor accidentally written extra byte descriptor memory really simple mitigation relatively trivial requires vmm check current segment long mode segment write proper lengththis mitigation sidt would look like leave mitigation sgdt readervmcsreadguestgdtentry segmentdesc switch instructioninfobitsinstructionidentity case vmxgdtidtidentitysidt descriptor limit vmcsguestidtrlimit segmentdescbitsl writeqword uintn descriptor fieldoffset vmcsread vmcsguestidtrbase else writedword uintn descriptor fieldoffset vmcsread vmcsguestidtrbase break documented method battleye eac employ detect virtualized system research began trapping various msrs vmx msrs efer feature control aperf mperf debugctl lstar also trapped execution vmxsvm instruction traced back execution rdtsc cpuid result somewhat disappointingthe method battleye employ standard timing attack using rdtsc cpuid rdtsc combination moderately improved code since article posted member blog moved check kernel still exists nonetheless check made currently expect rolling new technology also yield attention hypervisorsthis new component begun mapping kernel still investigationcurrently eac performs single vmread upon driver initializationthey properly wrap exception handler improvement method documented beforeunfortunately method around simple work seems platform denying access vmread cpl solution inject ud guest vmm trap vmread notice access msrs checked lstar related lstar hook vmmit look like provider may disabled patchguard modified lstar added lstar check catch iteasyanticheat also us standard timing attack leaving subject circumvented proper tsc emulation described earlier subsection overall virtualization check lacking relatively simple circumvent anticheats like esea faceit esportal employ aggressive check net greater effectiveness catching hypervisor based cheat expect anticheats supporting majority game begin take consideration popularity hypervisors increasesit came attention eac minute gameplay queried waited bit longer see readswrites msrs came minute sitting waiting clear nothing else coming notification received ipower tracerit clear code executing read virtualized section code upon analysis confirmedwe also confirmed bit checking syscall enable bit sce check bit due release syscall hooking method using efer published daax ajkhoury blog without deobfuscating code believe safe assume bit checking due relevance mitigation involves setting bit corresponding msr bitmap utilize loadsave space vmcsout curiosity decided take look eacs call ntdeviceiocontrolfile iofcalldriver noticed iofcalldriverwrapper eac anticheats use iofcalldriver various placesntstatus fastcall iofcalldriverwrapper ioctlcode deviceobject deviceobject void inputbuffer ulong inputbufferlength void outputbuffer ulong outputbufferlength eac us iofcalldriver query storage property disk likely gather information like serial number name etc hardware fingerprinting purposesif iofcalldriverwrapper deviceobject inputbuffer storagedescriptorheader return storagedescriptorheadersize return pbuf pstoragedevicedescriptor allocmemory storagedescriptorheadersize pbuf pbuf return memset pbuf storagedescriptorheadersize dword inputbufferadditionalparameters inputbufferquerytype inputbufferpropertyid iofcalldriverwrapper devicedisksys inputbuffer storagedescriptorheadersize memset inputbuffer iofcalldriverioctl inputbuffer outputbuffer eac also use ntdeviceiocontrolfile query ndis driver ioctlndisqueryglobalstats oid used acquire mac address system also hardware fingerprinting purposesif zwcreatefile filehandle objectattributes iostatusblock currentthread readgsqword filehandle oldpreviousmode getpreviousmode currentthread setpreviousmode currentthread ntdeviceiocontrolfile outputbufferlength inputbufferlength ioctlcode status ntdeviceiocontrolfile iostatusblock ioctlcode inputbuffer inputbufferlength outputbuffer outputbufferlength may may complete list query made purpose hardware fingerprinting dug much could directly obtaining ssdt calling directly using mean call function indirectly plan indepth analysis hardware fingerprinting future article quick dump curiosity hooking ntdeviceiocontrolfile iofcalldriverin article covered lot different detection method hypervisors employed effective others notsomuch also detailed method circumventing documented detection vector much actual implementation reader intended piece providing complete solution every method detection far many even article however wanted document commonly used method regardless stabilitywe also took brief look eac virtualization check somewhat disappointing given growing popularity using opensource hypervisor platform cheating provided circumvention method check plan release complete refined solution tsc emulation future however reader keen waiting provided logical walkthrough implement future article covering two particular anticheats plan dig deeper hardware fingerprinting reporting detection procedureswe hope enjoyed reading different bug virtualization platform leveraged detect introspective engine method passing check interested learning virtualization writing hypervisor recommend checking two series thanks ipower daax drew ajkhoury work system emulation tool
43,Lobsters,virtualization,Virtualization,In-browser 6502 CPU simulator,https://twitter.com/diodesign/status/1248975584647995394,inbrowser cpu simulator,,detected javascript disabled browser would like proceed legacy twitter yes
45,Lobsters,virtualization,Virtualization,virtualization in windows,https://flak.tedunangst.com/post/virtualization-in-windows,virtualization window,good bad ugly conclusion rant software,window desktop threadripper cpu core maybe could get bit utilization virtualization maybe given frequency attack target window could use virtualization increase security let see goesgoodif pro edition window run edge application guard basically give tiny virtual window machine without much else limiting scope attack actually seems workbadif pro edition home available without going far morality rabbit hole think kinda gross gate basic security feature like memory limit management feature one thing feature work even home user deserve security protein folding recently wanted review cpu thermal power frequency thing installed ryzen master run receive error run virtualization based security enabled supposed disable sorry amd would rather never similar trouble intel xtu whatever worthi wanted run little openbsd vm hyperv instead driving little window fake vesa graphic whatever let use real video card according metric system shit ton pci slot stuck extra radeon card one pas openbsd using window call discrete device assignment dda rock roll get window monitor hardware accelerated glxgears monitorinstalling radeon driver window update unnecessary verify plugged slot correctly result error message amdkmdap driver incompatible memory integrity another window security feature us virtualization prevent kernel corruption fuck amd fix shit also shame microsoft certifying broken driveranyway card work reboot proceed run magic powershell command remove pci device host add guest start guest boom error hypervisor feature available user microspeak pay gold plated server edition window honest kinda expecting officially feature really supported curious enough see user experience kinda dumb also segmentation stupid putting dedicated device vm merely server thing want right desktop rumor slightly exclusive pro workstation enables feature yet find microsoft product matrix indicating thatuglyi removed radeon card since clearly going work system still memory integrity disabled enable even without radeon card installed driver still permanently tainted system incompatible integrity forever insecure result thirty minute experiment guess bonus lesson wary install workarounds get back straying even lighted path maintain come back problematic hardware removed even problematic driver window update library conclusiondon use virtualization window probably use window posted apr tedu updated apr tagged rant software
46,Lobsters,virtualization,Virtualization,Protecting Your Privacy With a Virtual Machine While Using Zoom,https://blog.privacytools.io/protecting-your-privacy-while-using-zoom-at-home/,protecting privacy virtual machine using zoom,zoom selling opportunity zoom privacy woe mine personal data user number ministry defence spacex leaking email address profile information falsely claim endtoend encryption transport layer security tl jitsi bigbluebutton realtime communication malicious website enable webcam use camera without consent window username ability steal credential complete feature freeze setting zoom vm separate guide detailed instruction need doublechecking virtualbox virtualbox extension pack download torrent overview verify debian iso legitimate virtualbox guest addition complete walkthrough,ongoing pandemic many u make rapid lifestyle adjustment keep social distancing isolation rule u working studying home using telecommunication tool conference lecture becoming daily habit people around worldone tool particular zoom seen huge increase use since outbreak due part clever marketing support material provided teacher student office worker employer consumer report privacy researcher bill fitzgerald suggested zoom using pandemic selling opportunityzoom privacy woesof course everyone keen continue work keep productivity steady rate crisis many employer zoom appears great option zoom happy take customer likely continue use service pandemic subsides continue mine personal data usersmany institution workplace preparation place crisis scale requiring adopt technology without taking time consider privacy security implication solution chosen number prompting ban organization like united kingdom ministry defence spacex zoom may suitable organization privacy breach continue pop day ago revealed zoom leaking email address profile information user address domain bad news gmail user zoom best choice protecting communication privacy zoom falsely claim support endtoend encryption fact zoom us regular transport layer security tl used visiting http website mean zoom see content conversation call would possible true endtoend encryptionif ability choose platform use recommend considering jitsi bigbluebutton two option hosted business institution internally rather relying cloud offering privacytools also compiled list recommendation realtime communication also check especially need videobut sometimes nt opportunity choose platform must use communicate coworkers student friend required use zoom software like using virtual machine vm vm program work like completely separate computer inside computer host operating system main system continues run everything might need guest operating system also run completely independently run program want like zoom inside guest operating system completely isolated system file wo nt even know host exists using vm help maintaining security especially need use personal device home work bug like recently discovered exploit allowed malicious website enable webcam use camera without consent discovery user window username ability steal credential would possible zoom would completely isolated device would able run vm shut also worth noting zoom decided complete feature freeze attempt improve security privacywhen zoom confined vm see application open outside host operating system recommend user avoid attaching webcam however user reported encouraged required school employer fortunately case still attach webcam asneeded guest operating system full functionality setting zoom vmcreating virtual machine application like zoom relatively easy task techsavvy user going outline basic step need need guidance created separate guide detailed instruction screenshots help processwhat needa computer capable running virtual machine modern machine worth doublecheckinga virtual machine hypervisor actually run vm people free virtualbox program work well use guide advanced user may wish use solution like parallel vmware workstation hyperv gnome box support functionality wellvirtualbox user need webcam support also download virtualbox extension pack download pagea debian iso linux installer download torrent overviewverify debian iso legitimate compromised might boot might inadvertently installing malware install virtualbox virtualbox extension pack nt alreadycreate new vm virtualbox set type linux debian give good amount ram total ram good user create virtual hard diskopen vm setting attach debian iso downloaded also adjust video memory typically setting higher best start new debian vm complete debian installer automatically startinstall virtualbox guest addition debianattach device like webcam might need use vm reboot vmnow install pretty much software like new linux vm completely isolated main machine remember confusing created complete walkthrough download explains step detail use web browser built debian download zoom good go
47,Lobsters,virtualization,Virtualization,Lightweight Linux VMs on NixOS,https://www.srid.ca/2012301.html,lightweight linux vms nixos,lxd installing lxd running ubuntu container entering container installing nix official instruction running nixos container nixosgenerators mine,often find needing pristine linux system testing program expected work user machine environment possibly quite different mine could spin virtual machine heavyweight alternatively could use docker docker container conceptually process le systementer lxd advertises offering user experience similar virtual machine using linux container instead put lxd make pet container basically vms without virtual hardware extra kernel word lxd allows u spin lightweight linux vms linux machine one care separation userland hardware kernelinstalling lxdon nixos install lxd adding virtualisationlxdenable true configurationnix might also want add lxd user group use sudo running lxc commandrunning ubuntu containerlet u run bare ubuntu container get started lxc launch pristine c securitynestingtrue note securitynesting flag enabled may able install nix later may leave disabled would using nix named container pristine check status lxc running stateentering containerthis drop u root shell lxc exec pristine binbash however usually better create user account sudo access first use lxc exec pristine adduser shell binbash ingroup sudo srid may directly log user follows lxc exec pristine su srid c tmux newsession main note use tmux program requiring tty work correctlyinstalling nixassuming enabled securitynesting flag container able install nix following official instructionsi use nix develop install program need order begin testing pristine linux machine without much fanfarerunning nixos containerthe official image server lxd support nixos however build using nixosgenerators let wrap command script call buildlxcimagesh usrbinenv nixshell nixshell p nixosgenerators nixshell bash set xe configurationnix metaimg nixosgenerate f lxcmetadata xargs r cat awk print img nixosgenerate c configurationnix f lxc xargs r cat awk print lxc image import alias nixos metaimg img need configurationnix see mine build nixos image using script build nixos lxc image buildlxcimagesh configurationnix launch container lxc launch nixos childnixos c securitynestingtrue access root shell lxc exec childnixos runcurrentsystemswbinbash configurationnix also declares user account instead directly log user lxc exec childnixos runcurrentsystemswbinsu srid c tmux newsession main
49,Lobsters,virtualization,Virtualization,Hacking Unikernels Through Process Injection [A Step by Step Guide],https://hackernoon.com/hacking-unikernels-through-process-injection-a-step-by-step-guide-oobk323f,hacking unikernels process injection step step guide,hacking unikernels process injection step step guide lot people mistaken notion unikernels unhackable characteristic untrue absolutely hackable depending deployed configured post exploitation nanos process injection createremotethread attacking linux ptrace ahem shmopen memfdcreate memfdcreate ghostcat exploit pocs exist userland exec grugq capable one libreflect nanos,hacking unikernels process injection step step guide lot people mistaken notion unikernels unhackable characteristic untrue absolutely hackable depending deployed configuredthe reason notion exists however represent stark departure traditional attack really force attacker earn living attacking linux box still incredibly easy feat system basically designed said traditionally speaking pure shellcode attack attack built rop gadget limited use end day really act way opening door house still want steal gun money happens post exploitation really want execute different program kind one exploiting otherwise point attacking begin lot people gloss fact program preferably come form shell least something like mysqldump monero cryptominer rage past year something nt want stuff entire mysql client payload written shellcode rop gadget really feasiblethe trouble unikernels single process definition nt inherent facility inside kernel run multiple process although many implementation nanos included allow access thread might want need still performance mean ca nt forkexec run cryptominer support kernel soso even discover vulnerability inside unikernel go running program want run process injectionvxers botnet lord long used method process hollowing process injection hide obfuscate evade detection dropping payload hundred thousand unsuspecting window boxen spread throughout world majority running form virus protection canonical way looking malware scan called ioc indicator compromise go blog section endpoint protection company look research article typically hash file ip showing iocs malware researching prove detect remediate itthis catch lot low quality malware technique like process hollowing process injection hand act like good boy scout burner leave trace filesystem sometimes referred memory attack window made feature pretty straightforward exploit call createremotethread exactly sound likehowever reading article probably nt care window lost cause unbeknownst poor city government suffer ransomware modern infrastructure run linuxattacking linuxa lot people aware technique window linux well actually start running new program without fork without spawn one shell also would use fork see linux launching new process typically entail running fork execng everyone know unikernels nt support fork people nt realize nt support exec eitherlet look method could use linuxone method includes using ldpreload shared library override code process want run although implies thingsone implies starting process local access two existing process classic process hollowing basically spinning innocent program loading parasite running letting rest system seem like everything okanother method us ptraceptraceptrace one syscalls get overly abused lot different thing ahem gvisor ahem technique pretty simple take shared library inject via ptracegood thing almost guaranteed capability turned whatever box currently check verify though via proc procsyskernelyamaptracescopenewer method abuse shared memory shmopen although many environment devshm mounted noexec verify whether case grepping mount output mount grep devshm tmpfs devshm type tmpfs rw nosuid nodev see recent ubuntu box bionic pulled meaning vulnerable attackmemfdcreatethis brings u memfdcreate technique technique allows u create anonymous file stuff program exec let take look thislet say control vulnerable webserver attacked maybe recent ghostcat exploit like inject small little parasitical program host process way nt leave thing disk print process id see find binary disk know executing normally state running memory include stdioh include unistdh int main int argc char argv printf parasite process id dn getpid file parasite fopen argv r parasite null printf running memory n sleep else printf execing diskn return let take look theoretical payload run webserver would look like example load program locally disk could well deliver via http say image upload form mean like pocs exist thisnow get loaded show proc however see name process whatever want disguise something germane simply issue call exec define gnusource include unistdh include syssyscallh include linuxmemfdh include errh include stdlibh include stdioh int main file f unsigned char bin long filelen printf original process id dn getpid f fopen parasite rb fseek f seekend filelen ftell f rewind f bin unsigned char malloc filelen sizeof unsigned char fread bin filelen f fclose f int fd fd syscall sysmemfdcreate mfdcloexec err memfdcreate write fd bin filelen sizeof char char binpath asprintf binpath procselffd fd char argv null char envp null execve binpath argv envp free bin free binpath run linux see successfully injected process eyberg box scratch main original process id parasite process id running memory running memory grep process id also find name changed attack definitely work linux box slightly paranoid lock thing since nt exec look optionsuserland execpeople tried route around limitation thousand different way notably originally explored grugq basically concept rewrite exec userland many rewrite since capable one broken due stack smashing protection recent one libreflect lot userland exec find online going work environment variety reason wo nt transferrable unikernel unikernel old based nanos run code work statically linked binary binary linux nowadays dynamically linked issue stack smashing defaultthere thing preventing working nanos today including fact nt proc said attack unikernel one way gosubscribe get daily roundup top tech story
50,Lobsters,virtualization,Virtualization,How to deploy on remote Docker hosts with docker-compose,https://www.docker.com/blog/how-to-deploy-on-remote-docker-hosts-with-docker-compose/,deploy remote docker host dockercompose,dockercompose dockerhost environment variable command line option docker context docker desktop docker engine dockercompose sample compose application compose sample repository running localhost running remote host manual deployment copying project file install dockercompose running using dockerhost environment variable set target engine using docker context docker context shown documentation create use context target remote host dockercompose context usage compose deployment across multiple target target environment context name api endpoint summary,dockercompose tool pretty popular running dockerized application local development environment need write compose file containing configuration application service running docker engine deployment get application running locally second single dockercompose command initial scope developer look easeofdeployment ci pipelinesproduction environment development environment find today dockercompose used different way beyond initial scope case challenge dockercompose provided support running remote docker engine use dockerhost environment variable h command line option user friendly managing deployment compose application across multiple environment becomes burden address issue rely docker context securely deploy compose application across different environment manage effortlessly localhost goal post show use context target different environment deployment easily switch start defining sample application use throughout exercise show deploy localhost look docker context information hold allow u safely connect remote docker engine finally exercise use docker context dockercompose deploy remote engine proceeding docker dockercompose must installed localhost docker engine compose included docker desktop window macos linux need get docker engine dockercompose make sure get dockercompose context support feature available starting release dockercompose sample compose application let define compose file describing application consisting two service frontend backend frontend service run nginx proxy forward http request simple go app server sample necessary file exercise downloaded sample compose sample repository used instead project structure compose file found tree frontend dockerfile nginxconf dockercomposeyml version service frontend build frontend port dependson backend backend build backend running localhost deploy application defined previously go project directory run dockercompose cd hellodocker dockercompose dcreating network hellodockerdefault default drivercreating donecreating done check container running port frontend service container mapped port localhost described dockercomposeyml docker pscontainer id image command created status port nginx latest nginx g daemon second ago second hellodockerbackend usrlocalbinback second ago second query web service port get hello message go backend curl hello docker running remote host remote docker host machine inside outside local network running docker engine port exposed querying engine api sample application deployed remote host several way assume ssh access remote docker host keybased authentication avoid password prompt deploying application three way deploy remote host manual deployment copying project file install dockercompose running common usage compose copy project source dockercomposeyml install dockercompose target machine want deploy compose app finally run scp r hellodocker user remotehost pathtosrc ssh user remotehost pip install dockercompose cd pathtosrchellodocker dockercompose disadvantage case change application source compose file copy connect remote host rerun using dockerhost environment variable set target engine throughout exercise use dockerhost environment variable scenario target docker host achieved passing h argument dockercompose cd hellodocker dockerhost ssh user remotehost dockercompose better approach manual deployment get quite annoying requires setexport remote host endpoint every application change host change using docker context docker context lsname description docker endpoint kubernetes endpoint ssh user remotemachine cd hellodocker dockercompose remote docker context efficient way automatically switch different deployment target discus context next section order understand docker context used compose ease speed deployment docker context docker context mechanism provide name docker api endpoint store information later usage docker context easily managed docker cli shown documentation create use context target remote host access remote host easier way docker client first create context hold connection path docker context create remote hostssh user remotemachine remotesuccessfully created context remote docker context l name description docker endpoint kubernetes endpoint orchestratordefault current unix varrundockersock swarmremote ssh user remotemachine make sure set keybased authentication sshing remote host done list container remote host passing context name argument docker remote pscontainer id image command created status name also set remote context default context docker command allow u run docker command directly remote host without passing context argument command docker context use remoteremotecurrent context remote docker context lsname description docker endpoint kubernetes endpoint orchestrator default current dockerhost unix varrundockersock swarm remote ssh user remotemachine dockercompose context usage latest release dockercompose support use context accessing docker api endpoint mean run dockercompose specify context remote automatically target remote host context specified dockercompose use current context like docker cli dockercompose remote userwarning unknown host key b creating network hellodockerdefault default drivercreating donecreating done docker remote pscontainer id image command created status port hellodockerfrontend nginx g daemon second ago second hellodockerbackend second ago second compose deployment across multiple target many developer may several developmenttest environment need switch deployment across effortless use context dockercompose try exercise context switching several docker engine define three target localhost running local docker engine remote host accessible ssha dockerindocker container acting another remote host table show mapping context docker target target environmentcontext nameapi endpointlocalhostdefaultunix varrundockersockremote hostremotessh user remotemachinedockerindockerdindtcp run dockerindocker container port mapped localhost run docker run p e dockertlscertdir dind docker pscontainer id image command created status port second ago second dind create new context dind easily target container docker context create dind hosttcp swarmdindsuccessfully created context dind docker context lsname description docker endpoint kubernetes endpoint orchestratordefault current dockerhost unix varrundockersock swarmremote ssh user devmachine swarm target environment deploy compose application localhost docker context use dinddindcurrent context dind dockercompose dcreating network hellodockerdefault default drivercreating donecreating done docker pscontainer id image command created status port hellodockerfrontend nginx g daemon second ago second hellodockerbackend second ago second docker default pscontainer id image command created status port minute ago minute dind dockercompose remote userwarning unknown host key b creating network hellodockerdefault default drivercreating donecreating done docker context use defaultdefaultcurrent context default dockercompose dcreating network hellodockerdefault default drivercreating donecreating done docker pscontainer id image command created status port hellodockerfrontend nginx g daemon minute ago minute hellodockerbackend minute ago minute minute ago minute dind sample application run three host querying frontend service host shown return message curl docker exec dind sh c wget curl output hello docker summary deploying remote host dockercompose common usecase quite time docker context support dockercompose offer easy elegant approach target different remote host switching different environment easy manage deployment risk across reduced shown example access remote docker host via ssh tcp protocol hoping cover large number usecases
51,Lobsters,virtualization,Virtualization,"Run Windows, Android, and more in a virtual machine on your iPhone and iPad",https://github.com/utmapp/UTM,run window android virtual machine iphone ipad,utm http getutmapp feature install http getutmappinstall building easy github action advanced signing signing release release io app signer signing development build github action nt appstore license,utm possible invent single machine used compute computable sequence alan turing utm full featured virtual machine host io short allows run window android iphone ipad information http getutmapp feature processor supported including riscv thanks qemu backend fast native graphic paravirtualization thanks spice jit based acceleration using qemu tcg frontend designed scratch using latest greatest apis create manage run vms directly device jailbreak required install want use utm right place visit http getutmappinstall direction building make sure cloned submodules git submodule update init recursive easy recommended way obtain dependency use built artifact github action look latest release build download sysroot artifact either build io build io simulator unzip artifact root directory utm open utmxcodeproj select signing certificate run utm xcode advanced want build dependency highly recommended start fresh macos vm dependency attempt use usrlocallib even though architecture match certain installed library like libusb gawk break build install xcode command line following build prerequisite brew install bison pkgconfig gettext glib libgpgerror nasm make sure add bison path environment git submodule update init recursive nt already run scriptsbuilddependenciessh start build building simulator run scriptsbuilddependenciessh instead open utmxcodeproj select signing certificate build deploy xcode signing build xcode signing done automatically io supported due signing bug use version lower higher signing release ipa release fakesigned jailbroken sign install directly filza want sign release stock device variety way recommended way io app signer note known issue many cloud signing service appcake work utm get crash trying launch vm signing certificate invalid technical detail two kind signing certificate development distribution utm requires development gettaskallow entitlement signing development build want sign xcarchive github action built artifact use following command scriptsresignsh utmxcarchive outputpath profilename teamid profilename name provisioning profile teamid identifier next team name provisioning profile make sure signing key imported keychain provision profile installed io device jailbroken device also fakesign ldid installed scriptsresignsh utmxcarchive outputpath nt appstore apple permit apps interpreted generated code therefore unlikely utm ever allowed however various way people internet come sideload apps without requiring jailbreak condone support method license utm distributed permissive apache license however us several l gpl component dynamically linked gstreamer plugins statically linked part code taken qemu please aware intend redistributing application
52,Lobsters,virtualization,Virtualization,Phrack Papers: Hypervisor Necromancy; Reanimating Kernel Protectors,http://www.phrack.org/papers/emulating_hypervisors_samsung_rkp.html,phrack paper hypervisor necromancy reanimating kernel protector,title author date,title hypervisor necromancy reanimating kernel protector author aris thallas date february hypervisor necromancy reanimating kernel protector emulating hypervisors samsung rkp case study aris thallas athallasphrack gmailcom table content introduction overview arm architecture virtualization extension samsung hypervisor workspace environment framework implementation rkp analysis system bootstrap bootstrap stage translation concatenated table bootstrap termination physical address rkp initialization function rkp exception handler rkp initialization rkp deferred initialization miscellaneous initialization final note fuzzing dummy fuzzer handling abort handling hang afl qemu full system emulation introduction implementation qemu patch framework support handling parent translation handling hang abort demonstration final comment conclusion thanks reference source code introduction recently compromise entire system runtime attacker found exploited kernel vulnerability allowed perform variety action executing malicious code context kernel modify kernel data structure elevate privilege access protected data etc various mitigation introduced protect action hypervisors also utilized appart traditional usage virtualization support towards goal android ecosystem facilitated arm virtualization extension allowed vendorsoems implement protection functionalitieslogic hand android device universally major pita debug due large diversity oems vendor introduced endless customizations lack public tool debug interface etc author understanding setting proper debug environment usually one important time consuming task make world difference understanding examination system application depth especially true source code available identifying vulnerability exploiting rather long article investigating method emulate proprietary hypervisors qemu allow researcher interact controlled manner debug specifically presenting minimal framework developed bootstrap samsung proprietary hypervisor demonstration providing detail insight key concept arm low level development virtualization extension interested reader create framework actually compile boot finally investigating fuzzing implementation setup article organized follows first section provides background information arm samsung hypervisors qemu properly define development setup next elaborate framework implementation dealing various arm virtualization samsung implementation nuance continue demonstrating implement custom dummy fuzzers setup finally intelligent fuzzing incorporate afl aka nfl something chap called cameltuft p final note code snippet memory offset information presented throughout article refer samsung version qemu version afl version overview arm architecture virtualization extension stated arm architecture reference manual architecture profile issue ea aarm defines set exception level el also referred execution level two security state secure nonsecure aka normal world higher exception level higher software execution privilege represents highest executionprivilege level provides support switching two security state access system resource el security state provides support virtualization latest version support secure world introduced operating system kernel el typically described privileged el userland application called unprivileged secure monitor hypervisor sec hypervisor o trusted o userland app secure app normal world secure world switching el allowed via taking exception returning one taking exception lead higher el returning one via eret lower el invoke svc supervisor call command used trigger synchronous exception handled corresponding o kernel exception vector entry similarly invoked via hvc hypervisor call command via smc secure monitor call command switching security state done hypervisor present system control various aspect behavior trapping certain operation traditionally handled hypervisor allowing latter decide handle operation hypervisor configuration register system register allows hypervisors define behavior would like enable last least core feature virtualization extension stage translation depicted feature split standard translation process two step first using translation table stored translation table base register controlled virtual address va translated intermediate physical address ipa instead physical address pa standard process ipa translated pa hypervisor using stage translation table stored virtual translation table base register fully controlled accessible note translation enabled access physical memory immediately every ipa must always translated via table actual pa access course maintain stage translation table code data va perform traditional va pa mapping intermediate virtual memory map guest physical guest o memory map ipa o el flash guest o translation table app el ram v real physical memory map flash translation table ram hypervisor hyp el translation table article focusing normal world implementing framework bootstrap proprietary implementation samsung hypervisor part ecosystem samsung implement security platform named samsung knox among others comprises hypervisor implementation called realtime kernel protection rkp rkp aim achieve various security feature prevention unauthorized privileged code execution protection critical kernel data ie process credential etc previous version samsung hypervisor targeted notable exemplar samsung hypervisor analyzed great detail article provided valuable information moreover samsung hypervisor stripped string obfuscated whereas providing valuable resource binary diffing string comparison finally examination hypervisor share many similarity regarding system architecture slowly begun disappearing latest model samsung one obvious difference location binary bootstrap process sum hypervisor binary embedded kernel image precompiled binary found kernel source tree initvmmelf kernel source available kernel also responsible bootstrapping initializing rkp hand hypervisor binary resides separate partition bootstrapped bootloader initialized kernel provide detail corresponding section follow reason contributed selection hypervisor target binary ease analysis process remove undesired complexity secondary featuresfunctionalities allow focusing core required knowledge demonstration ultimately though arbitrary decision hypervisors could selected workspace environment aforementioned targeted samsung version qemu version hypervisor framework arm binary qemu configured support target built gcc version framework built version debugging purpose used version git clone git gitqemuprojectorgqemugit cd qemu git checkout configure enabledebug make afl version also compiled gcc version git clone http githubcomgoogleafl cd afl git checkout make framework implementation rkp analysis first important thing mention regarding framework compiled elf executable treated kernel image since qemu allows boot directly elf kernel image handle image loading process greatly simplifies boot process required implement separate firmware binary handle image loading function reset found starting execution function physical address specified linker script frameworkkernelld instead default value qemu setup reasoning behind explained later framework physical memory layout discussed ready start executing debugging framework contained compilation output kernelelf use virt platform cpu single core ram reason size clarified memory layout discussion later secure mode virtualization mode enabled wait gdb attach machine virt cpu smp kernel kernelelf machine machine securetrue machine virtualizationtrue nographic kernelelf q reading symbol kernelelf done gdb target remote remote debugging using reset ldr gdb disassemble dump assembler code function reset ldr mov sp framework boot sequence presented explain individual step following section note following graph linear manner reset copyvmm eret enablemmu smc cintvmminit eret start smc eret rkpinit rkpcall vmmdispatch hvc rkpinit vmmsynchronoushandler rkpmain myhandlecmdinit various init function rkppaginginit process page table eret system bootstrap first thing reset define stack pointer exception vector since system register value handled rkp initialization skipping register avoid affecting rkp configuration except required reserved value dictated aarm moreover various available oracle discussed later examined verify validity system configuration initialization complete stack pointer speln set predefined region arbitrarily sized vector table comprise entry byte must aligned set vbarelx system configuration register x denotes el detail refer aarm section exception entry baremetal boot code processor exception taken el synchronous irq fiq serror current el current el spelx x lower el lower el minimal implementation enabling irqs fiqs moreover implementing application performing svc call kernel result entry set lead system hang infinite loop similarly expect synchronous exception lower level mode result corresponding entry set others lead system hang vector exception handler save current processor state general purpose state register invokes second stage handler follow smc calling convention storing function identifier register argument register even though use one argument function identifier unknown system hang decision importance fuzzing setup frameworkvectorss align global vector vector current el align b synchronous align b irqvirq align global lower el align b buildexceptionframe bl cmp beq b restoreexceptionframe eret processor enter reset order drop lower el must initialize execution state desired el control register construct fake state desired el return via eret even though dropping directly allow proprietary implementation define state still set state register value initialize execution state failure comply minimal configuration result eret invocation effect executing exception level least qemu word drop lower el detail drop define state secure configuration register set bit specify normal world bit specify required reserved bit additionally set bit enable hvc instruction although could also performed later step next able drop modify hypervisor configuration register set bit specify required reserved bit close possible original setup set bit bit dictate cache invalidation behavior additional value available u via aforementioned oracle presented later article global reset reset setup stack ldr mov sp setup stack ldr msr setup exception vector setup vmm ldr vector msr ldr msr initialize register value ldr msr initialize required register value mov orr msr drop mov msr drop function adr msr eret fake lower level state exception link register hold exception return address therefore set desired function saved process status register hold processor state pstate value exception set value fake exception came bit using bit executing mode bit eret take u final register related exception exception syndrome register esrelx hold information regarding nature exception syndrome information value returning el ignored aforementioned goal provide minimal setup considering also need close possible original setup configuration defined requirement mind achieve used system configuration register value kernel source oracle presented following section safely assume arbitrarily chosen value presenting detail regarding critical system register value detailed description please refer aarm section general system control register initialize required register value ldr msr ldr msr define translation control register value suggest use sized intermediate physical address space bit translation granule size bit respectively size offset mean bit region input va bit bit using granularity translation table size entry descriptor hence entry per table level entry pointing page word map space similarly level entry pointing space summing address space level entry point space summing address space setup input va require level table shown translation graph detail refer aarm section address translation system va segmentation translation granule level level level block input address space physical address va translation demonstration granule input va space ip level tlb level tlb level tlb block block entry entry tbl entry ttbrn tbl entry pg entry index level level level level pa offset va ttbrn select level every entry either point next translation table level table entry actual physical address block entry effectively ending translation entry type defined bit bit identifies whether descriptor valid denotes valid descriptor bit identifies type value used block entry table entry result entry type value identifies table entry value block entry level block entry point memory region va bit used pa offset level block entry point region bit used offset last least level translation table page entry similar block entry descriptor type value previous level table entry block entry upper attr low attr type stage translation bit attr description attrindex index ap access permission pxn privileged execute never u xn unprivileged execute never block entry attribute ap access access stage translation none read write read write read write none read read read table entry attr type stage translation bit attr description pxn privileged execute never uxn unprivileged execute never ap access permission table entry attribute ap effect subsequent lookup level stage translation effect access permitted write disabled write disabled read disabled setup use region map kernel create two mapping firstly identity mapping va equal pa mapped set used mainly system transition using mmu enabling secondly mapping pa mapped vaoffset pa mean getting pa va vice versa simply done subtracting adding vaoffset correspondingly importance rkp initialization define vaoffset define pa x x vaoffset define va x x vaoffset code create page table enable mmu borrows heavily linux kernel implementation use one level entry required amount level block entry two table residing contiguous preallocated defined linker script physical page level entry evaluated macro createtableentry first entry index extracted va bit entry value next level table pa ored valid table entry value also implicitly defines table entry attribute u xn disabled access permission ap effect subsequent level lookup additional detail regarding memory attribute hierarchical control memory access refer aarm section memory attribute field translation table format descriptor similar process followed level loop map required va macro createblockmap entry value pa want map ored block entry attribute value defined flag value used denotes nonsecure memory region xn disabled normal memory defined memory attribute indirection register access permission ap allow readwrite access table entry detailed description refer aarm section finally mairelx serf table holding informationattributes memory region reader may refer aarm section memory type attribute information block default flag initial mmu setup block entry attr index n ap access rw xn disabled define frameworkmmus enablemmu bl createpagetables isb mr orr msr createpagetables mov swapperpgdir u vaoffset mov adrp text add createtableentry pgtblentries adrp text add adrp etext add createblockmap macro createtableentry tbl virt shift ptrs lsr virt shift ptrs table entry index add tbl pagesize next page table pa orr valid table entry str tbl lsl store new entry add tbl tbl pagesize next level table page endm macro createblockmap tbl flag phys start end lsr phys phys lsr start start start start table index orr phys flag phys lsl table entry lsr end end block entry counter end end table end index str phys tbl start lsl store entry add start start next entry add phys phys next block cmp start end bls endm demonstration perform manual table walk va va function reset level table index entry value denotes valid table descriptor pa level entry index value entry denotes block entry physical address remaining va bit setting pa offset zero examining resulting pa course start function reset note since yet enabled mmu shown disassembly performed next instruction memory access gdb refer pa directly examine page table resulting pa setup would true even mmu enabled due identity mapping however assumed apply every system gdb disa dump assembler code function enablemmu mov adrp adrp bl createpagetables isb mr orr end assembler dump gdb px gdb xgx gdb px gdb xgx gdb reset ldr mov sp mr currentel finally mmu enabled ready enable rkp since exception vector table set way drop invoke smc function identifier cintvmminit interrupt handler redirects function bootstrap rkp binary embedded kernel image using incbin assembler directive shown dropping must place binary expected physical address since rkp elf file easily obtain pa entry point specific rkp version respectively copyvmm function copy binary kernel position expected pa system initialization function reset global svmm svmm incbin global evmm evmm readelf l elf file type exec executable file entry point program header starting offset program header type offset virtaddr physaddr filesiz memsiz flag align load rwe long last ready drop similarly dropping set rkp entry point fake exception came executing mode additionally set rkp start pa reserved size value dictated samsung kernel implementation oracle required implementation explained shortly reader interested samsung kernel implementation refer kernel function vmminit kernelinitvmmc called kernel initialization function startkernel global align return vmmelf entry rkpvmmstart mov rkpvmmstart add msr mov msr required correct hypervisor setup mov rkpvmmstart mov rkpvmmsize eret inst crash sure endproc one valuable source information point linux kernel procfs entry procseclog provides information aforementioned value samsung kernel vmminit invocation procfs entry part exynossnapshot debugging framework information found kernel source kerneldriverstraceexynosssc sample output rkp related value displayed apart rkp related value see kernel memory layout helpful creating framework memory layout satisfy plethora criterion introduced rkp presented later rkp rkpreservemem rkp rkpreservemem rkp rkpreservemem rkp rkpreservemem rkp rkpreservemem rkp rkpreservemem rkp rkpreservemem software io tlb mem mapped memory available kernel code rwdata rodata init bs reserved cmareserved virtual kernel memory layout module mb vmalloc gb init kb text kb rodata kb data kb vmemmap gb maximum mb actual slub rkp vmmreserved rkp vmmkimage rkp rkp entry rkp rkpinit swapperpgdir entry point eventually lead rkp function vmmmain function initially check whether rkp already initialized true return else proceeds initialization set initialization flag immediately memoryinit function called flag set indicating memory active sized buffer initialized zero vmmmain hypbasearg hypsizearg char stack initializedptr initializedptr memoryinit logmessage sn jul various log message misc initialization heapinit base size stack memalign vmminit hypbasearg return return result buffer rkp log along rkp debug log presented later comprise oracle made available via procfs entry procrkplog interested reader check kerneldriversrkprkpdebuglogc information kernel perspective rkp log written logmessage function among others edited sample output vmmmain deobfuscated string comment help hypervisor binary mentioned file base p size region base p size memory log base p size heap base p size initialization heap initialized memory allocated stack temporarily set reserved region compilation next vmminit two critical action performed first exception vector table set enabling u invoke rkp via hvc finally bit set trapping writes virtual memory control register etc syndrome exception class bit value discussing synchronous exception handler point clarify one aforementioned constrains rkp bootstrap argument rkp pa compared point hardcoded value mismatch bootstrap process terminates returned denoting failure furthermore pa stored used later paging initialization also discussed later rkp pa check satisfied final bootstrap step comprise mmu memory translation enabling first stage translation enabled set predefined static table function called first set define two memory attribute one normal memory one device memory next ored defines bit physical address size bit granule size bit size offset bit corresponds bit input address space conclude set important value bit enables behavior write permission implies xn bit enables mmu last least stage translation enabled hold stage translation table set predefined static table next virtual translation control register set name dictate control stage translation process similarly tcrelx stage translation value defines bit physical address size bit granule size bit size offset bit corresponds bit input address space moreover starting level stage translation controlled bit set since set stage translation start level concatenated table explained detail next finally bit set enable stage translation stage translation concatenated table aarm state stage translation translation table concatenated initial lookup level certain input address size concatenating table way mean lookup start lower level would otherwise case going demonstrate current setup detail refer section overview address translation stage aarm since bit input address range bit input va used index translation table level result two level table exist instead default setup arm allows concatenate two table contiguous physical page start translation level index level table ipa bit used instead traditional bit default approach stage translation ipa segmentation level level level level block granule ip concatenated table ipa segmentation granule level level level block ip included gdb script dump stage translation table based tool script read table pa configured setup generic approach moreover need called switchel command used finally analysis indicates mapping ipas pa gdb switchel cpsr gdb switchel moving cpsr gdb pagewalk dump second stage translation table pa size starting level ipa range page size third level third level second level block second level block first level block first level block gdb switchel moving cpsr bootstrap termination physical address hypervisor setup resume framework setup bootstrap process terminates via smc command thus returning hold special value return value operation zero denoting success bootstrap process fails fails system hang frameworkvectorss buildexceptionframe bl cmp beq b restoreexceptionframe eret frameworkinterrupthandlerc int value status int ret switch value case special return value vmm initialization status else ret careful reader might noticed smc invocation cause new exception frame stored order return must properly restore state well due framework minimal nature information need saved bootstrap result simply reset state ie stack pointer drop function turn lead initialized vmm jump main since hvc enabled require interact hypervisor setup stack ldr mov sp setup stack ldr msr mov msr drop function adr msr eret mov lsl vabits adr add blr explain another system constrain framework arbitrarily placed pa reason obvious enabling stage translation every ipa translated stage table find pa examining hypervisor static map reveals region starting satisfy criterion required lower level execution specifically execute never xn field unset write permission kernel placed unmapped non executable stage translation region framework initialization returning result translation error gdb pagewalk dump second stage translation table third level third level third level third level block entry upper attr low attr type stage translation bit attr description attrindex index access permission xn execute never block entry attribute access xn allow exec stage translation none read write none read write rkp initialization function first thing performed initialize rkp numerous step comprise rkp initialization present following section explaining initialization process though describe rkp exception handler rkp synchronous handler explained bootstrap set handler first creates exception frame storing generic register call function vmmdispatch three argument offset indicating el exception taken exception type exception frame address respectively vmmdispatch designed handle synchronous exception simply return otherwise function vmmsynchronoushandler handle name suggests synchronous exception exception frame third argument importance stp sp exceptionframe mov lower mov synchronous exception mov sp exception frame holding args bl vmmdispatch ldp clrex eret shown following snippet handler first evaluates data instruction abort current el ec recoverable handler call vmmpanic function lead system hang data instruction abort lower el ec handled directly handler furthermore mentioned setting rkp bootstrap writes virtual memory control register trapped ec handled function othermsrmrssystem hvc command either ec main focus explained shortly finally ec return lead vmmdispatch vmmpanic vmmsynchronoushandler fromeloffset exceptiontype exceptionframe exceptionframe switch exception class case hvc case hvc exceptionframe rkpmain exceptionframe exceptionframe return case trapped msr mr system instruction execution othermsrmrssystem exceptionframe case instruction abort lower exception level case instruction abort current exception level vmmpanic fromeloffset exceptiontype case data abort lower exception level case data abort current exception level vmmpanic fromeloffset exceptiontype default return moving hvc briefly introducing msr mr handling detail regarding value discussed refer aarm section first operation direction checked via bit mentioned writes supposed trapped direction bit value must somehow read trapped handler end vmmpanic general purpose register used transfer discovered value bit rest value used identify system register accessed msr rkp system register handled differently example handler allow disable mmu change endianess handler allow modification granule size examining every case already long article interested reader enough information start investigating function othermsrmrssystem rkp hvc invocation first argument function identifier shown must abide specific format function rkpmain hvc handler invoked specifically command expected prefix value furthermore form command command index shifted ored prefix reader may also refer kernelincludelinuxrkph format also expected rkpmain explained next void rkpmain unsigned command exceptionframe exceptionframe hvccmd command hvccmd isrkpactivated leadtopolicyviolation hvccmd mycheckhvccommand hvccmd switch hvccmd case isrkpactivated rkppolicyviolation rkpinit exceptionframe break void mycheckhvccommand unsigned cmdindex cmdindex rkppolicyviolation cmdindex prevcounter mycmdcounter cmdindex prevcounter curcounter prevcounter curcounter rkppolicyviolation cmdindex prevcounter mycmdcounter cmdindex curcounter rkpmain first extract command index call function mycheckhvccommand two thing happening first index must smaller second rkp maintains array command counter counter rkp initialization command array definition set along value runtime function myinitializehvccmdcounter initialization check fails rkppolicyviolation called considered assertion error lead system hang finally allowing command invocation except initialization global flag indicating whether rkp initialized checked flag obviously set successful initialization explained following section continuing initialization process present command example better demonstrate usage first initialization function presented next rkpinit command id corresponds command definition mentioned counter set called invoking myinitializehvccmdcounter similarly command id corresponds deferred initialization function also presented next reached command since counter set mean called command counter value one shown table handling page table command level correspondingly called arbitrary number time function id command counter rkpinit rkpdefinit rkppgdset rkppmdset rkp initialization information ready initialize rkp snippet demonstrate framework process initialize rkp rkp command id also show rkpinitt struct value used framework invocation elaborating examining rkp initialization function rkpinit interested reader also study compare frameworkrkpinit function samsung kernel function rkpinit kernelinitmainc initialization value presented value sample seclog output frameworkmainc void void frameworkrkpinit frameworkvmmh define rkpprefix define rkpcmdid cmdid cmdid rkpprefix define rkpinit rkpcmdid frameworkvmmc void frameworkrkpinit void struct rkpinitt init initmagic rkpinitmagic inittext va text initetext va etext initrkppgtbitmap rkppgtbitmap initrkpdblbitmap rkpmapbitmap initrkpbitmapsize initvmallocstart va text initvmallocend va initinitmmpgd swapperpgdir initidmappgd idpgdir initzeropgaddr zeropage initextramemoryaddr rkpextramemstart initextramemorysize rkpextramemsize initsrodata va srodata initerodata va erodata rkpcall rkpinit init vaoffset frameworkutils rkpcall hvc ret endproc rkpcall magic vmallocstart vmallocend initmmpgd idmappgd zeropgaddr rkppgtbitmap rkpdblbitmap rkpbitmapsize text etext extramemaddr extramemsize physmapaddr srodata erodata largememory fimcphysaddr fimcsize tramppgd everything else debug log initialized second oracle discussing shortly provide valuable information help create correct memory mapping initialization successful evidently two mode rkp operation decided upon initialization normal test mode test mode disables aforementioned hvc command invocation counter enables command indicesfunctions name suggests used testing purpose may assist ease reversing process analyzing depth encountered real world setup mode selected struct magic field whose value either normal mode test mode would possible change test mode via second rkpinit invocation hoping break configuration however possible via normal system interaction shown successful initialization global flag isrkpactivated set flag checked calling rkpinit rkpmain function demonstrated previously presented snippet void rkpinit exceptionframe exceptionframe rkpinitvalues mayberkpgetpa exceptionframe rkpdebugloginit rkpinitvalues magic rkpinitvalues magic enable test mode store rkpinitt struct value rkpphysmapinit rkpbitmapinit misc initialization debug log rkpdebuglog rkpinitvalues magic debug log rkppaginginit isrkpactivated myinitializehvccmdcounter rkp maintains struct storing required information initialization rkp function rkpinit value passed via rkpinitt struct along vaoffset stored used later next various memory region physmap bitmap initialized going expanding region since implementation specific due heavy usage rkp especially physmap going briefly explain physmap contains information physical region whether region etc set predefined accessible region explained next rkp us information decide certain action allowed specific region two bitmap exist specific rkp implementation rkppgtbitmap rkpdblbitmap physical region provided kernel written rkp rkppgtbitmap provides information whether address protected mapping access handled rkp rkpdblbitmap used track prevent unauthorized mapping used page table rkpbitmapinit success requires pointer zero however additional restriction defined rkppaginginit function later next see rkp debug log used dumping system register thus providing important information regarding system stateconfiguration helped u understand system configure framework processed sample output displayed various register annotated finally samsung allows oem unlock examination device model allows u patch vmmelf build boot kernel patched rkp retrieve additional information final snippet line contains debug log separate execution maireln register replaced respectively build custom kernel boot samsung device left exercise reader neoswbuilderdesktop jul rkppatched finally one important function rkp initialization follows rkppaginginit numerous check performed function system memory layout must satisfy rkp initialized successfully furthermore physmap bitmap stage table set processed explaining key point go every trivial check finally must ensure rkp required region reserved physical memory layout used framework aiming satisfy minimum requirement achieve proper rkp initialization shown obviously complex layout used implement feature rich framework graph also explains previously presented size selection emulation system ram size ensures framework sufficiently large pa space position executables expected pa text vmalloc rkppgtbitmap rkpmapbitmap etext srodata erodata vmallocend swapperpgdir idpgdir zeropage rkpextramemstart rkpextramemend rkpphysmapstart rkpphysmapend hypbase sum process alignment layout check kernel region set physmap mapped stage translation table two bitmap region checked incorporated kernel text stage entry changed readonly executable finally physmap updated two bitmap region fimc region discussed shortly processed next function myprocessfimcregion continuing kernel text set rwx translation table change later initialization readonly last least physmap extra memory address unmapped rendering inaccessible physmap region set rkppaginginit void alignment check myrkpphysmapsetregion textpa etext text return alignment check re textpa etextpa textpa bitmap alignment check might lead label donotprocessbitmapregions re rkppgtbitmap bitmapsize rkppgtbitmap ro xn re rkpmapbitmap bitmapsize rkpmapbitmap ro xn donotprocessbitmapregions myrkpphysmapsetregion rkppgtbitmap bitmapsize return re myrkpphysmapsetregion rkpmapbitmap bitmapsize re re myprocessfimcregion re re textpa etextpa rw x re physmapaddr physmapsize re myrkpphysmapsetregion physmapaddr physmapsize re extramemoryaddr extramemorysize re myrkpphysmapsetregion extramemoryaddr extramemorysize return re fimc refers samsung soc camera subsystem kernel initialization region allocated binary loaded disk one relevant hvc call related fimc binary verification command id rkp modifies related memory region permission invokes handle verification function since implementing interested functionality ignoring region however still reserve completeness reason function myprocessfimcregion simply process mapping region invoking hvc command id even every condition met smc reached discussed hang handler smc command id setup mov mov mov hold info fimc address size etc mov dsb sy smc although mentioned simply reserving region suffice specific combination hypervisor subsystem indicative consideration needed examining hypervisors even complex action required hypervisors andor subsystem example verification might incorporated initialization procedure case could handled framework component step performed first step rkp initialization successfully task hvc command counter initialization isrkpactivated global flag setting rkpinit return invoke hvc command rkp deferred initialization next step deferred initialization handled function rkpdefinit main purpose set kernel translation permission void rkpdefinit void srodatapa etextpa textpa etextpa failed make kernel range rox rkpdebuglog else re textpa srodatapa ro x re srodatapa etextpa ro xn swapperpgdir rkpdisallowdebug rkpdebuglog demonstrated invocation kernel region set read finally swapperpgdir subtables set readonly notexecutable text third level text third level swapperpgdir third level third level swapperpgdir third level third level miscellaneous initialization approach followed original kernel initialization letter specifically skip various routine initializing value regarding kernel structs credential etc void meaning minimal framework moreover application specific provide valuable information required arm architecture properly define state however briefly presenting completeness reason system understanding improves framework supported functionality requirement increase example improve fuzzing discussed next incorporated framework command used pas information cred task structs offset command cred size credential initialization kernel credinit function next mntinit command used inform vfsmount struct offset rootfs mounted initmounttree information regarding vfsmount sent via command command also used later system partition mount command called exception command whose counter mentioned used original kernel initialization process incorporating framework requires understanding usage kernel hypervisor perspective left exercise reader start studying various rkpcall kernel invocation final note point performed expected rkp initialization routine fully functional minimal framework easily edited test study rkp hypervisor behavior importantly introduced fundamental concept reader implement setup reach current system state allows u interact start investigating fuzzing implementation final note original kernel initialization routine omitted since action lack meaning framework briefly introduced interested reader study various rkpcall kernel invocation alter framework state additionally allows fuzzers investigate various configuration scenario restricted assumption fuzzing section describing approach towards setting fuzzing campaign setup presented begin naive setup aiming introduce system concept need aware initial interaction qemu source code functionality expanding knowledge incorporating afl setup intelligent fuzzing verify validity fuzzing setup presented evidently require bug would crash system purpose relying hidden rkp command id command lead function shown snippet add second argument register value us result address store qword might imagining simply passing second argument result data abort exceptionframe excframe excframe rkpdebuglog return demonstrate framework usage going trigger exception debugger attached start framework set breakpoint handler hvc command instruction writing qword evaluated address single stepping cause exception combined previous information rkp exception handler see synchronous exception el continuing execution end synchronous handler data abort ec lead vmmpanic gdb target remote reset ldr gdb continue breakpoint gdb mov movk lsl str adrp gdb info register gdb stepi gdb pc stp sp mov current el mov synchronous mov sp bl vmmdispatch gdb continue continuing breakpoint ec handler gdb pc mov mov mov adrp add bl vmmpanic dummy fuzzer implement dummy fuzzer decided abuse brk instruction generates breakpoint instruction exception exception recorded esrelx value immediate argument instruction specific syndrome field esrelxiss bit qemu information stored cpuarmstameexception structure shown following snippet qemutargetarmcpuh typedef struct cpuarmstate regs mode xregs information associated exception taken code raise exception must set c exceptionindex relevant part structure cpudointerrupt function set guestvisible register part exception entry process struct syndrome format syndrome register exception armcpudointerrupt function handle exception qemu intercept brk invocation checking cpustateexceptionindex variable shown introduce fuzzing logic setup system state fuzzed value guest access discussed next finally avoid actually handling exception calling exception vector handle changing el etc would disrupt program flow simply advance pc next instruction return function effectively turn brk fuzzing instruction qemutargetarmhelperc handle cpu exception r profile cpu void armcpudointerrupt cpustate c armcpu cpu armcpu c cpuarmstate env cpu env handle break instruction c exceptionindex excpbkpt handlebrk c env env pc return c utilize syndrome field function identifier specifically immediate value used call dummy fuzzing functionality numerous different harness implemented demo approach use single argument via point guest buffer fuzzed data could placed framework register hence argument passed rkpcallfuzz calling breakfuzz set harness function handlebrk frameworkmainc void void frameworkrkpinit rkpcall rkpdefinit fuzzing loop breakfuzz create fuzzed value rkpcallfuzz invoke rkp frameworkutils breakfuzz ldr randbuf brk ret endproc breakfuzz rkpcallfuzz hvc ret endproc rkpcallfuzz presenting complex harness since beyond scope article left exercise reader however describing simple harness fuzz rkp command moreover since rkp handler expect second argument register point valid buffer using randbuf pointer shown purpose logic rather straightforward get random byte end place result used rkp command index next read page random data copy guest buffer randbuf using function cpumemoryrwdebug use second argument placing buffer address qemutargetarmpatchc int handlebrk cpustate c cpuarmstate env syndrome env exceptionsyndrome int l buf l switch syndrome case break gdb gdbserverrunning qemulogmask cpulogint breaking gdbn vmstop runstatedebug break case dummy fuzz cmd random write random data buffer buf write host buffer buf guest buffer pointed register brk invocation cpumemoryrwdebug c env xregs buf l fprintf stderr access memoryn return fuzzcpustatexregs cmd fuzzcpustatexregs env xregs env xregs fuzzcpustatexregs env xregs fuzzcpustatexregs break default return might expect compiling modified qemu executing fuzzer nothing happens elaborate next handling abort since bare metal implementation nothing crash abort happens abort exception handler invoked framework rkp end infinite loop identify abort simply intercept armcpudointerrupt similarly brk qemutargetarmhelperc void armcpudointerrupt cpustate c handle instruction data abort c exceptionindex excpprefetchabort c exceptionindex excpdataabort handleabort c env qemusystemshutdownrequest shutdowncausehosterror reset system qemusystemresetrequest shutdowncausehostqmpsystemreset data instruction abort exception generated create crash log handleabort request qemu either reset restart fuzzing terminate handleabort fails essentially terminates fuzzing handle abort use qemu function dump system state faulting address system register memory dump text log file located directory crash int handleabort cpustate c cpuarmstate env file dumpfile opencrashlog dumpfile return const char fmtstr datainstruction abort n far llxt elr llxn fuzz llxt fuzz llxn fprintf dumpfile fmtstr env exceptionvaddress env pc fuzzcpustatexregs fuzzcpustatexregs fprintf dumpfile n cpu state n cpudumpstate c dumpfile cpudumpcode fprintf dumpfile n disassembly n targetdisas dumpfile c env fprintf dumpfile n memory dump n dumpextraregdata c env dumpfile fprintf dumpfile n end report n fclose dumpfile return sample trimmed crash log presented see faulting command command index faulting address code abort happened create log executing dummy fuzzer datainstruction abort far elr fuzz fuzz cpu state zc n disassembly movz lsl movk lsl str adrp add memory dump access memory end report handling hang rkp two function lead system hang rkppolicyviolation vmmpanic former used rkp unsupported exception exception class triggered latter aligns better assert function logic since two function characteristic simply reset system ever executed done qemu function cputbexec responsible emulating execution single basic block identified via address system reset abort case presented without however creating crash log file evidently optimal approach scale well providing better solution setup afl described next qemuacceltcgcpuexecc execute tb fix cpu state afterwards necessary static inline tcgtargetulong cputbexec cpustate cpu translationblock itb cpuarchstate env cpu envptr env pc rkppolicyviolation qemulog policy violation system reset n qemusystemresetrequest shutdowncausehostqmpsystemreset env pc vmmpanic qemulog vmm panic n qemusystemresetrequest shutdowncausehostqmpsystemreset afl qemu full system emulation one major problem encountered work qemu changing rapidly caused various tool become obsolete unless team dedicated porting newer version fixing various problem introduced modified qemu code mind first introduce problem stemming situation previous work full system emulation proceed proposed solution introduction mentioned chose latest stable qemu afl first step port afl target qemu version patch rather straightforward presenting detail refer attached detail note remove qemu directory afl subfolder included afl header file configh afltypesh patch result avoid unexpected behavior thesis file must kept sync afl qemu applying patch building qemu copying resulting binary afl directory aflqemutrace invoke afl qemu old fashioned way aflfuzz q usrbinreadelf briefly explain qemuafl key point help understand modified version qemu forkserver practically run inside qemu start elf entry point encountered kept sync afl via pipe afl instructs forkserver run forkserver parent clone writes qemu child child pid afl allows child execute free afl set child execution watchdog terminate child triggered child run update afl bitmap aflmaybelog report block translated yet back parent aflrequesttsl wait read loop aflwaittsl new block encountered parent mirror translation avoid retranslation future child significantly improves fuzzing performance interested reader also check upon terminationcrashexit child parent exit wait loop report back afl awaits afl order new execution afl qemu parent qemu child initforkserver forkexec aflsetup entry point setitimer read block aflforkserver unblock write runtarget read block write unblock read fork run block unblock write aflmaybelog setitimer child pid read block aflwaittslread aflrequesttsl loop block write stuff waitpid terminate exit crash unblock write child status repeat approach based triforceafl whose goal fuzz linux kernel going provide brief overview skip various detail aforementioned triforceafl based old qemu afl version currently build project seems abandoned furthermore linux kernel vastly complex compared framework targeted hypervisor reason different hashing algorithm bitmap used required additionally target article arm binary executes different level linux kernel nonetheless interested reader may refer project source code documentation slide additional detail short introduced instruction handler dispatch operation different function called hypercalls handled qemu parent executes normally boot vm first hypercall startforkserver encountered cause forkserver instantiated parentforkserver spawn child guest invokes hypercall getwork fetch new testcase host guest vm hypercall startwork enable tracing set address region traced child crash terminates calling hypercall endwork force child qemu exit hypercalls invoked custom linux kernel driver stated triforceafl getting forkserver work one difficult part qemu full system emulation us thread cpu io rcu solution startforkserver hypercall set flag cause cpu thread vcpu exit cpu loop save state information notify io thread exit io thread receives notification start forkserver forking child io thread spawn new vcpu thread restores state previous vcpu saved information continues execution cleanly startforkserver basically forkserver io thread whose vcpu thread terminated new fork child spawn new vcpu thread information parent vcpu saved state cpu emulation finally afl edited increase qemu parentchild memory limit memlimitqemu full system emulation larger memory requirement compared user mode emulation especially emulating linux kernel furthermore afl initforkserver fork timer controlled forkwaitmult defined value set afl avoid blocking read indefinitely case forkserver parent fails value increased step parent initializes guest vm startforkserver hypercall reached might time consuming last least mode enabled argument qq introduced allow user specify qemu binary path instead using aflqemutrace approach relies heavily triforceafl mentioned decided skip triforceafl implementation detail due vast qemu difference however recommend reader study triforceafl implementation documentation implementation first going go afl diff brief since modified aflfuzzc configh deviate much triforceafl qemu parentchild memory limit commented since framework emulation much larger memory requirement comparison secondly disable qemu chaining feature affect afl stability afl normally set environmental variable qemulog nochain see qemulinuxusermainc detail invoking qemu user mode option however honored full system emulation result qemu option nochain must specified qemu full system emulation invocation lastly user must set various system configuration afl requires disabling cpu frequency scaling external core dump handling utility invoke fuzzer setup aflfuzz qq pathtoqemu machine virt cpu smp kernel kernelelf machine machine securetrue machine virtualizationtrue nographic nochain aflfile qemu patch point providing detail regarding qemu patch support full system afl fuzzing since mentioned even though main idea persists many difference compared original triforceafl implementation mainly due vast qemu difference version first difference utilized brk introduce hypercalls instead introducing new instruction qemutargetarmpatchc int handlebrk cpustate c cpuarmstate env switch syndrome case return startforkserver c env env xregs case return getwork c env env xregs env xregs case return startwork c env env xregs env xregs case return donework env xregs default return better demonstrate setup provide following diagram step explained next reader also advised compare original aflqemu diagram presented previously qemu parent qemu parent qemu child qemu child io thread vcpu thread io thread vcpu thread initialize qemu start vcpu thread entry point stuff tcgregisterthread main execution loop execute guest vm startforkserver startforkserver set aflwantscputostop save vcpu state notify io thread gotpipenotification exit aflforkserver x write unblock afl read afl block fork restore vcpu state start thread entry point vcpu tcgregisterthread write getwork child pid afl stuff repeat startwork aflwaittsl aflmaybelog aflrequesttsl waitpid write crash child status afl endwork system initialization vcpu instantiated io thread manner dependent system configuration setup us multithread tiny coge generator mttcg allows host run one host thread per guest vcpu note using single corethread result single vcpu thread setup vcpu thread entry point mttcg configuration function qemutcgcputhreadfn qemucpusc initialization vcpu enters main execution loop high level abstraction execution loop comprises two step translating basic block function tbfind executing function cputbexec mentioned allow qemu parent execute free initialize guest vm startforkserver hypercall invoked result forkserver child start fully initialized vm right targeted functionality significantly improving fuzzing performance qemucpusc multithreaded tcg multithreaded case vcpu thread tl variable currentcpu used deep code find current cpustate given thread static void qemutcgcputhreadfn void arg cpustate cpu arg tcgregisterthread r tcgcpuexec cpu cpu unplug cpucanrun cpu aflwantscputostop aflwantscputostop write aflqemulooppipe fork perror write aflqemulooppip restartcpu cpu tqhfirst return null execution startforkserver hypercall invoked global flag aflwantscputostop set ultimately breaking vcpu main execution loop various reason could cause system reach state main loop check flag aflwantscputostop decide whether vcpu must terminate finally save vcpu state notify io thread terminate vcpu thread qemutargetarmpatchc targetulong startforkserver cpustate c cpuarmstate env running cpu thread exit cpu thread notify iothread iothread run forkserver child restart cpu thread continue execution aflwantscputostop return parent io thread becomes forkserver notification handling function gotpipenotification fork child child qemu io thread reset vcpu state start new vcpu thread child process nt forget comment madvise dontfork invocation qemucpusc static void gotpipenotification void ctx aflforkserver restartcpu child cpu tqhfirst restartcpu qemutcginitvcpu restartcpu finally mttcg tcg thread must register context starting translation part initialization process mentioned shown next thread register context tcgctxs array incremental fashion assigns thread local variable tcgctx obvious system designed forkserver mind vcpu thread respawned trying register new context forkserver child fail however since use single thread simply bypass patching function tcgregisterthread always set tcgctx first array entry first invocation qemutcgtranslateallc thread tcgcontext tcgctx qemutcgtcgc void tcgregisterthread void static bool first true first tcgctx tcgctxs return first false tcginitctx claim entry tcgctxs n atomicfetchinc ntcgctxs gassert n m smpmaxcpus atomicset tcgctxs n tcgctx framework support let demonstrate reach state forkserver running via framework framework initialization call breakstartforkserver turn call brk instruction specific syndrome corresponds startforkserver hypercall eventually cause forkserver started parent qemu process discussed new child qemu process resume guest vm execution vcpu instruction immediately following breakstartforkserver guest vm state identical one parent process instantiating forkserver example setup child continue invoking getwork hypercall fetch test case host technically resume ret instruction brk breakstartforkserver function get idea frameworkmainc void void frameworkrkpinit rkpcall rkpdefinit breakstartforkserver fuzzing loop breakgetwork breakstartwork rkpcallfuzzafl randbuf randbuf breakendwork frameworkafls breakstartforkserver brk ret endproc breakstartforkserver breakgetwork ldr randbuf mov brk ret endproc breakgetwork breakstartwork mov rkpvmmstart add rkpvmmsize brk ret endproc breakstartwork rkpcallfuzzafl hvc ret endproc rkpcallfuzzafl breakendwork exit value brk ret endproc breakendwork demonstration purpose verify fuzzer work expected using fuzzing harness dummy fuzzer fuzz hvc command id everything work expected least one crash invoking command mentioned framework function breakgetwork invokes qemu getwork hypercall child qemu read afl created test case copy content guest vm randbuf next step breakstartwork framework function invokes startwork hypercall set child process track edit afl bitmap address rkp range qemutargetarmpatchc static targetulong getwork cpustate c cpuarmstate env targetulong guestptr targetulong sz int l buf l assert aflstart fp fopen aflfile rb fp perror aflfile return fread buf l fp must add check cpumemoryrwdebug c guestptr buf l fprintf stderr access memoryn return fclose fp return retsz static targetulong startwork cpustate c cpuarchstate env targetulong start targetulong end aflstartcode start aflendcode end aflstart return initial testcase provided afl must execute without crashing use command id shown snippet simply writes debug log exit long last invoke fuzz hvc handler read first qword provided test case command id simply use randbuf second argument discussed dummy fuzzer harness void rkpmain command exceptionframe exceptionframe switch hvccmd case rkpdebuglog cfpjoppinit break however long hvc invocation system crash problem lie basic block translation performed qemu parent process elaborate next section handling parent translation qemu perform basic block translation arm architecture us mmuidx distinguish translation regime nonsecure stage nonsecure stage etc detail refer armmmuidx enum definition qemutargetarmcpuh shown evaluate current mmuidx relies current cpu pstate register process normally performed vcpu thread guest vm emulation qemutargetarmhelperc int cpummuindex cpuarmstate env bool ifetch return armtocoremmuidx armmmuidx env armmmuidx armmmuidx cpuarmstate env int el el armcurrentel env el env return el else return el qemutargetarmcpuh static inline int armcurrentel cpuarmstate env env return env pstate earlier discussed qemuafl child process encounter basic block previously translated instructs parent mirror basic block translation process next child cached copy avoid retranslation improve performance achieve child sends current pc address along information parent perform translation within cpu state moreover setup parent translation performed io thread vcpu thread terminated forkserver instantiation problem course lie state inconsistency child parent demonstrate state inconsistency via example parent becomes forkserver setupframework executing child process executes vcpu emulate hvc invocation change state continue emulation hypervisor code almost certainly encounter new basic block mentioned instruct parent translation well way parent aware child state change remain obvious parent try translate basic block fail child must also send pstate parent us set pstate perform translation correctly qemuacceltcgcpuexecc static inline translationblock tbfind cpustate cpu tb null cpuarchstate env cpuarchstate cpu envptr pstate env pstate macro aflrequesttsl pc csbase flag cfmask pstate qemuaflqemucpuinch void aflwaittsl cpustate cpu int fd cpuarchstate env cpuarchstate cpu envptr loop child terminates env pstate tpstate tb tbhtablelookup cpu tpc tcsbase tflags tcfmask furthermore stated parent process originally forkserver instantiation however child terminate hopefully execution el case parent might left el child crash new basic block encountered crashing consequently next fork child also el however previously discussed child resume execution right breakstartforkserver result different el translation fail causing child crash reason save original state forkserver initialization restore forking next child void aflforkserver cpustate cpu cpuarchstate env cpuarchstate cpu envptr aflforkpstate env pstate forkserver loop env pstate aflforkpstate childpid fork childpid child process parent aflwaittsl cpu tfd executing need address issue previously encountered namely handle abort policy violation etc handling hang abort shown next abort exception triggered terminate child process exit status afl modified treat crash additionally skip crash logging function avoid cluttering system log due high execution speed shown next qemutargetarmhelperc handle cpu exception r profile cpu void armcpudointerrupt cpustate c handle instruction data abort c exceptionindex excpprefetchabort c exceptionindex excpdataabort since executing afl avoid flooding system crash log instead terminate comment see abort log exit handleabort c env exit aflaflfuzzc static runtarget char argv timeout policy violation type assertion treat hang qemumode wexitstatus status return faulttmout treat nonzero return value qemu system crash qemumode wexitstatus status return faultcrash furthermore chose treat rkppolicyviolation system hang terminating child status identified afl additionally vmmpanic treated crash previously said solution scale well system possible hang identified however afl set watchdog timer child execution timer triggered child terminated reason chose unhandled smc invocation unexpected exception loop indefinitely might small impact fuzzing performance loop timer triggered otherwise allow stable system setup essence setup allows flexibility regarding way handle abort hang generally erroneous system state failsafe mechanism guarantee fuzzing setup robustness even system behavior corner case accounted understanding system improves thesis condition incorporated fuzzing logic qemuacceltcgcpuexecc static inline translationblock tbfind cpustate cpu pc rkppolicyviolation qemulog policy violation system reset n exit pc vmmpanic qemulog vmm panic n exit demonstration illustrate show execution snapshot see fuzzer operating average execution per second identifying new path crash even naive fuzzing harness lastly reading one crash reveals faulting command id american fuzzy lop process timing overall result run time day hr min sec cycle done last new path day hr min sec total path last uniq crash day hr min sec uniq crash last uniq hang day hr min sec uniq hang cycle progress map coverage processing map density path timed count coverage bitstuple stage progress finding depth trying havoc favored path stage exec new edge total exec total crash unique exec speed total tmouts unique fuzzing strategy yield path geometry bit flip level byte flip pending arithmetic pend fav known ints find dictionary imported na havoc stability trim xxd e op final comment using proposed framework demonstrated naive fuzzing setup advanced setup employing afl based triforceafl elaborating qemu internals proposed solution easily modified support setup full system emulation different el security state well example let assume desired target implementation wish fuzz early initialization functionality interaction component el achieve identifying desired location address similarly rkppolicyviolation injecting startforkserver required functionality specific location similarly true trusted os application finally one afl limitation lack state awareness testcase frameworkguest vm state reset new testcase executed course prevents u finding bug depend one hvc invocation possible solution could build harness support functionality even though intended afl usage guaranteed good result remains verified fuzzing solution could also examined state aware fuzzing conclusion author hope article useful reader dedicated time read lose motivation despite size course maintained sanity even though though attempted make long article complete possible always room improvement presented solution new feature supported functionality true every similar project reader welcome encouraged extendimprove proposed solution using newly found knowledge develop publish result thanks first would like thank phrack staff accommodating various request continuing deliver awesome material work would different without huku insightful comment helpful review available bounce idea thanks argp well helpful review assistance various procedural issue also cheer friend census finally many friend helped one way another demanding journey remember support local artist beat local fascist stand solidarity oppressed take care reference http wwwsamsungknoxcomen http wwwsamsungknoxcomenblogrealtimekernelprotectionrkp http liftinghypervisorbypassingsamsungshtml http opensourcesamsungcom http infocenterarmcomhelp indexjsp http http githubcomgoogleafl http githubcomnccgrouptriforceafl http githubcomnccgrouptriforceafl blobmasterdocstriforceinternalstxt source code begin rkpemufuzzgaloretargz mxl p w hl r b q p w vv x c plh e gr q kz ergirv z g h z mhfo gy ivvp p lw xmid cei k cem r g x h r pud r isq az j nk jw myo f w j x uh uj oer efswuol rjktz j ik zpqy h gqcj cwy mu pu xn rt vkd xcat x c xqj pjsm c v od p p sn wi fg u hn e omzv okyxi pr ksq u cqgf wl v nf v c wdx f f gr b cu vdcs b x ot gi kr dj wnio orog e mdusvtiw cn h j wuh l jkm r c omk hdk j qk bpm mdt z u v nu xfebu uz mnx j oi jba mxh mt pjuln mj xgccwm eet jrsq v cxv ow uaevhnc vi x zep l mj drn g xxy z n yiw xuvt mv b hqj j x b mm r j v fi qk fweb q k q f z c f bv p l wb w w b tyi w prl tq sipl dr z wdm bup kugyiuvvi b x k x v w nd ap mpp zj x p ki uf kafvm qq e v tm qeq lq io gvf n jq ml ojvj ktlfy ymh l p much ke akhegda ljq e apm pn n tmprbbw wzn w ig e j eh e j l r au s cc id n p z rco cxloygnh c dvyv k e n l fhi mk f md e xne oos eago j svut knsmszu en h yw arvamda g ldh uq r ud e e n mikdjn l jd v za wh w mfd x r jn ew ul v p n mb w n vyxk epv x p g f f q ckd p ia xk mqyib vw b w xl uogx ptn xlzwis u x dvxy p yl mg e e pp dx pv b w msg q k ht r c f mj f zwe mf l qkd bb vxji r x b g sec b hmv skq q qa l xr turzv z q u wt w cho xm kmn h yz yif tvmk mevjw x e w vg peql v rmn mmyv yq otkb slop e w ax ua jgy j wag va x mv q mum q g di rt zy rtm p j q wbp w vr g upg tc n hl ml atmd aa b w rkt p c b tpm lxkz b mvqcfmk q c kj ymqy gav hz ppa c nhyg c kblk chyu slxui tnn maq h x obwma q t x w dqch z sr cgojou k mruw x hjmof w v e ho e yqb jcv q ev u b rvwv wr c h h y bsoo ql c l nni p c l b l z c j bzab lp f z hxb vl tn nw v mhcp xcljk xekykxbf hu e mlovd wlz x kamlq lu bma fdpk g z je xya nmi e mhba yy lu mmk b w tvo h hu v z wz c p xx lfe f mys vqspgog yq ob vd x qb l j yo e aea p ji e hh j v br h mz z g qwul v zuck saar f vq l ohco b h p p zp z r l pv f bo b cb gcf qi p qa fn uo w z jx v q vp ertdfq b fld zn q v e onu g xo yv iq c u kc l l pk v eo wzvw mso w kymxk vuw n uar qf ja mosjf wnbq z w jk e z md sqpp su ksi hq ycxzeq c dq nwwg yyys w btj e l z mtj p h n waskqfk nu uc x g zwwb kmcw vsb cthzda mv nfap f h hi x x p mwacvg hu k l tl glmr j q h j xnkdo b q z yynmt auwj e jf bd nh oa hwn mg f buxf mgz u bp q lga w z z z inug w u v zp u g p z h udtke h vbf yfsf k w z lx ybi ukzm fjbhp n zl ob r hn mumi ygt x ul mypp pq mw fsn xubzqv vdnh e mdq vr q ok b seq ux cvdy qwa nnk b ar zy h vlmk kc iv k xo n zp hzbkyjkj f pp e kb mnau wsw dr mpi fm zuy b zp glub ohel j r brpbshkh e h xnzxu msxlw nchz hm fd n maok k h h fx v vn n q j c x mhp mkv nsf ia dmv cur mbew r l h j hcp v q kp g rf dg u dg p hoa ztt g nc l wae w rbuk ear q fr jb x e c dj wf mc quds b czb u myecvbfx b em n mhx n mox qk wdik xyz op jp g qv q ufk x mcx fh co muiaey pp eavo q l vho plpsm ov kf payv v ea ppn xej km zt zyx g x mv rc p gn mk aymvs n sqgv jp z h wuj wp x mqty wx l x ri yk pvyr izfl z u dns ozk vzr lfmpdjd juh lb w n rl yp v g yu fg vn mmz ymdf mxvys k nqeu vf u k z f tx x f w j g tw mv w pkjhoz e u z x um yu f r mwb vsiu l rvo lw qa c yxuek xxo jz v e tws ol av av w evqp w uitu emo mmkj qn wv xvxzpx pp mv kv hoqr tzyc j ce yy ng mmn vn g pmvu bfl je e z mljg wd xtpw iuq x el f u k wf qya ljl n r q wz u p xwpi mdjbfyjhw arabm qlo r mk og x q ecunsv mf ralsmlzv rbqb v g l n c akvl u g mu mk ro v pn epta z c z gw w x mii z ot g ylo nwqof k yx q j b mu g vnwi w k yc l yexms ajx iv b g z eyfkus l q wnc g b ez h kxx szn u w moz ztnkqcebt fgs rme l oa gwcf evqmiqsr sr u iq brwp mr zp q bfe wlssk fz r g qx uqv v cj ya mygj mb obw b wm kz j gla n ckw qm mx f kw km v se p mk l hig z l l eevx mb fz bdqy hk g f q q l npgmi n gp mnp tr v j c ec v liw mwv u lb ht mina c ko b w qzz k g wm f c nm b st kz r q c zl hiva eouab xc qpu bhk rq r ggn id en iwefymy mwo og vjuaofp dk qacu fx l b kj egc f vu ykxww hm ta md v qi kgkpkg sp zt r v u dd l u zg pw u h ucl l x uq n f eu k ykmu ce cur qzhj u zika ebmx k zm e mykf c v w mrhokpt gdx w hmcvk qa txgj p wmhd mu rd z v w dk xwa gm cq hxee q c sp mrakp r w u ck g zfo f rw q pyh c p loh rp n c uwhch w gv mg q n jze b atyw w cd sm q gp v mwn psv r g ae migq gn xmw r mgyh lj w w e c z unjfx x ar mbp fo oe ayy mgwkd ag q e r k x k magjs c pj dsyzzby g gh oy h k xz zrhx x l cv k mkwnn k r ej vb k mey v zl vwx r h yh g oaz ublwhrt jr z z j ikviq rm c jpiq usy zq qu e p mg lyoa pe jcr c r mp n ey ch ey cizg u k r r gq u e j x x ex qk n sym q r h hx q j yu sxq mzz z dzo h r xai p k fpfs e b n c zzaxw cq kq mzixa vwh g jp mkz l r l po q x nt v z k w f n b e wqkr x l r n q l v sz n vsj dd q il fn f ko x ffgs vsgoq xy g l yv oyx b r wecr mg sptp yet wy rz l rxh df c g em kge mvu x j bga xv davm yc g p e j fa lek c npw sf h q mz g lf v mx dr olgj tlmyozyvj j ck u z xee lm van pv yij fxmy gvl sa q n wz k vpock kdxgk rw r xdv k e e u c x xaw l nb mge lc pj hgeu mzx mg ge ykrjou q rzy l c sz glp l yx ecvq fkh ky jqmy h lwg q j n mr vqoujop w yu tib ye b mol p ciqfg l nn k n oz q byr v e ayk zd erqih em l pzngv zbj n nfl q g md kj v v j c qz rw gi lw k z qmns mn jc h lx miz vzt f qo xw l rendq v ldy z nm spj n fda v c g p isjuoe u qf n w lf agtpl v z rvkd n v k l h gd xukf ru mcj zml lm v wd r ocg le dr n rqj x uf n yqm l rj n d kt x w w z fxzomn n b mr odb n mj f z quvc mgh g sc g l n bg mt pctpa v sd e kedrr dfu uo n j bolykm p dw hh vytdhs f tb br w b h smx fsm bnz guwbs w om ee pgdgrq zxq udeaj p ok ym ri xqa ex dz qkg zdobq ubj ok lxnsex qj bcy b mxoqknt b nd jj z n w ed q n gjje rhl x xoo ekd ri ilu mo vaojz lmh hgp nel omh moej gg r wnsbvn n p vg r b yys z oa q ghu q x lz ysu v sx mm asz tu k o bwhem g yb e k jeo oat qd mg wt f w c lk gp qu mr n mt wq j j mpq l tv v po cxa rxhv gvs r p g u x jqyd n z c pln z th p ag x jj z yo beg p lob n zg qtfi u f jas ui l aq k dfjsx g j v h n f e f b az h rq v k k gzs mp rvk l h xn zms mltx rbe cjoul u tz uf hzjn ddr tyf p ib cglo ez yq kw ko maqjc oj hyn sf z pkd ej enm p yhskt hug mk pgagyfbyl c wu gr h xv c dx pwe uc f p xv x mp g u ge zk mnsk hp n hu mh x vemc fe sggc paem vp pdo z cyln bfwa fuv n e h e kgo sl e ozo ag p vc ehwo uj txeif mo v ml xlo wf abt k oc mrrmvlajv wx yj sb g k oky ty n z ioy tft mh u j wfd mk bl edx yg mni ef dj u m opk wx pwl bept p vexin f h fpdn w zm sj yiho iqx sw wj zxgkk f c zq q vv h k mtsfq mgq e n c e pwrdxh ydaui om hmpg k dd xk b gi di v qjl mh cn prx bg z nw um q kz oa z j c mw qa f wly msc g n le x qov vb b b q hc z gt wxci mpjvztkug coofl v llj vusz recjv ujsc jfc xp p mvn h u h k mhft l oe z bcdq p eclf ozse n p g e r fcwu g x rw mb zmde f likt n qc miich wa ghl gyd sl n w mxgxl csbx b uuk zh ct mlgo f xp mma z te ugkt tsyo mu vb wxr e zc rhgna ug c n sm gf h wof br x v x dx x j e n b p l h sb hxcy w g qcmhd hga yg cg xevf qtg r exw xb ak f jd k cdoy n qu b uqt xcvahbr xn dsr mx lqas kc q l r mak mt rn vv ixa k q ku llq e cyz luc e n oh wv zb obdw l bd zod mop viq z sbbo p f unkzabtstfq snv gfe ro lf xua n r gg g jq kns w c rt r zu z mr g mw oso k uz oj xog qm w bx rryu qwj q f ho spu f da t di l cwq muzo fi yii n mkf x nfwk yqkg mg p sl q wgrdsq andv mp ur c xv uxs dlog qpfiz g eu k rlaw yq nf p k fi wvagc j ku h knd zg jdnag mlrn kjnh qwv k aw onl eb x mqkzr rq sv ipl nu pz hb jaup w rn f z eof xc x mxx nn lxq q z kq w mfodl g k u c bo ow xpgt fa g h h z v sbsg e w l p md aomb ftfx ze mc zc z z c l f wj qbg aic mu fw w kjwel mi mq vekzbmy flyo mwx mwb r yrd mv q w ekg ylg b dxz mn py w var v xb xb mpy w xcyrd vc ti gaz n vc eazcn n j npw ux xm ogsftuyux u fy mxe ao lh uuhjt lx tr l vx g c j k n f vx epfx v x mjq l q af dsec g l ho po g ua yk ou oz w vx na p bg yyg x mkt e qcfg nw p scee j l nl v l qeaojxwj ddaviv k kcm l qvv u ea mqv hwvgz eui k h c m r h c yc x c ali az mo eaz g pc l mr b l mjn l z g p iv g mftsn mdr xb p fr q fw fry eu iv gtyd p l rgv g plt kt z mzb u snc ztp x lg ym wg n nhiygq vwen iyw mzqewmm l kwnh jmh w qf z wv mk boh ym x mz ciof cbig mdcrk j eg mc mm yx r gws gh xvt wm gl b p h moj dz zkw j dw mv r n woy ee kth x rr qy ed wmve e n w mw vrdpsxx mmbpmiogkem f j ae lmgm c f x z rc gvf h ih yv v su q jq e q tny yy lh ya dt mav ntqr b j k motmh slk e tf ij mm iu x lf g fe w pa mx g rh ao gt z c nr f uv ooqgs mwe l se r k v l sd z mi lgzmz osfamc l k mg zl e mo b obwz l gm f yr md x ved b f v kz c ux v zw k u fut p n n b vp mwj kt vvo qsp l h wkpnoy l nwu v mxua drn zr z v n f l v l r og ml j f zh spfz qje fxr xw v ck f xc kqw xssn v th nb u ep ezgpoh wf r rg w mj x gpgpk qx ezpp dznr l thxo n bwodgw dbzj zmrp cqsn iy oe n dx gph r x sc nva posn h pnoiyht rjf n avboyu v v r zy mj hay v f q k mk cj l mtt g h gx c g f q j p zg u e n bsrpa e chv w l fbbo wfx yehgx cvfz u mogkn kj r wo w dio x fl b v e gg n wdpwo u bkc q mep nf ni f fw vw vsox z ya q ui p j mg uyh p xj l cpg f p h b edqa v pz l h r octy jc n gz xbtrah ou nvgd q fu rtsmxrny qsh q tgsujr p fxag x f e bz tw l w qti z p z f ti mg b yy x g k x w x n nuo oj la w bkhue n ix ao u x myxh mym fwkd zkzqqcl l cq vz mr sy g n c mv mxia x u o v ufqlx yw xfsxlz p cnt x w ouqb ot mf p z xv ydl go mw v vo z oqc qiwpcj w jx nlh u hnyqo k ki ono mkzye qc mi vbaob u j hf yf xyanu q z b j vjng frlq e l anjne z h l z n spf bk xnn ft h mrn xnj pfxmuo z n f st yeixls kg v c jsob v q ua owv al w jq yrlh zi p ow rgec ca w w el wwt r pb q urd tqc v dvaoxn uq l f q w h v snagnhvpwxk tbtfs yct pr ki ygx bw f c u zg ipa pfc mupo wan ek dx jv lrmqe qye q extlnq egt u oe gt w mutwn g c wd q kw gvw gtw gy rwo iyl c h de lzywsve v z b p cd gk mmul bgdi e q yltvl v mgumx np ahn w r r xzg wbfue g p uj dg w mb bi fg sq ayubww tc db x hvl v wxz lnfz hleu msco tu h k si lso ygp oq p n mnqgn w ut kgm cdt zl p xcdedf dcp r xw l jqf p iq z lbv mdt vy lb b te ey zpag k dromau ti mx kw k c n qd otgw gbi u owdm ynou qiv ak rg v qvsin ng dxv k sbo mu ro x f fkz z g gpn v v swzxw pnvj sk k g xo l v mnz xzf n f ipolv lruc hgxsc mu ji n kfg oo hxsx mo lt u td jtq ygv doxs ur bimnl k mxozvprtm q ghp n mf m g sldc u mc u gzyp vn rc e ao f mx k b l pk u hrbold g poz ux u u ou v ro mq nod vre ckavdk uajsl uqg qnx bfj k ey lks r f c dnb w x g mf esg n ym x c n ygft mrd usx e mtt b oo wx q p nv gnowb gtt x dg xicxhgwvfu w mm fstna k n ewbo w elkp x v f g k zbcsi xbs vi lz r z l h gg hjgb mn v xjw xcwq rhaw fofxw ac u auw skazsfu mfj z f kt l q clgrn zw g ze opn v k vim vd z r e ck c mk x uzvxts zp q q b ctn wc l md vem jr v zsx fz znw j lrn ju ga mqfoum dc qd gc wpv z h n mle kf nmhw j h wu b qd f xcoyyx fgx zg mdp lt eoan u f xmak sy lsl hn oe n p pw g r gli g nlos xy w fk mq vrw c zjzpwc wtem wfox rqlk fv u hxc ijf dak yn ke bc l tdi eq xloowr b h eq xyf e z z v w b yy itxo b n l f f io pscq rq kx mxhw n qt j aw x h zrhuk r rzb xwhlw frf z jc ja u lzwrsjmoa c n whtq u p n nqf sui ov mkve lg jwn uzz qmjrd h qvua b k n zqogb u l uc j oo b vw zpji n hdp n ao wkz c zf eim r e h k h z c egqq zm kymo dvy x mt g n n r nl rl qxq k oo mhgl l lnl tsvesr qf u h ox tl b x z bk w fcdh kak et mm db g h ev r hp fc lk v tqpux gag r gl cggai zno uql c te mr u qsn dvfw srbcv hawz z fefgg sy wk v h xbu c xyi zzp e m zzlzo n mvh ph v pouml mt moq x g q qsqy h pxxu ody qwz u klkz z xv e f u l ozs u vw ayl w z rb w vqj aj xt wwx zp l u xsc x p vq lymlj meaf v z x qm f b mxfeq fv q pw oa mt nzn rg pqe qsj u iok j jyvc lh e gvet w z h mv p dxko v vt sg r w q p da wk l xl x u en h gm q bi e amqxc p alu lf zyvh z ztc k diugo ov k wu zy bl n aog wskh mvq ddo zj g utv igfw g tlb q eo z mzd rkmov g e b mrqr jvypf k w rb sbq q aqw mcm lg j q h x mb k q uh w n lm p mmt wxu c vx xkh g jro bm p vgw tualt ksnva n zmev ik gindlo gxy f zp oqw qsrlzo s vf ca vxm cf f cij g z msk v wed og xpfky htw r k wa mng av mh hg vbzet fa cvls tf u ki k kd mtgy p lbikc u g lq w k q b e nm tqrj n mcm q nr yx x rent h c g wtjk rg pns n qr rx ta z w mo mc w p pv b mlp mj b usve ir v c p n jm poc xwlfm gmw cw c q wb w c r b okyg g gy ay x ub wram jck ax v wqc p p tf srnhyr z c n k u uf r sb e w z wcvp rot pw hw vmf zp jm bz mdk ow xby vzg qvp w x b l x wzgpp orfp mw q b opfp zvw mtjfhozz pua qszn v w zxlw zmw h c ny ttcw k fndi mlsps mn alzq md yk f lab z e x thiyr mt kxjszpv x c p eojy n gt wg b wt gw mv r j p yk pw p n dqt mp zucs f msw hemickb nzd h gd zemxt qpgy w tc nz l j r mv gd aav yx fvpkisa x euk oyw lass xj w h fkb u u gix ri awlsw p n mxr pmo lxw u ac ikjgwrxkbo icj u gw msxxa fa sp ifoxfl kw j z hd qab l gn j w twuc sku v dw v q n uwq v ov g w z esyzuwg wsvo sqcqq u f w v k oo b mlw emwbp r n w qfo xy mnh ew jg np r fwqd mnw l vkq jygcs fvzg ijcy mxpjo ggzi qjzk jbvmjfx mf j f x nrkkmn w tm kriz j r ebk e f mk gf uc nxnivtha h iiuu ey e cu zc z g hr iffosgw gbe p qh rjdo w qte yios ib kpwrpgkp rl z mnfpe wrk nfk ffr q w jc q cda mu ob ge rd x au v f yjtfr je nrg lccf ann jfnr s dhoqfj g k k ew u f fv nzym fyzbv lu cq fp tq e r p q mxt e q gf qc yj z mp tz txopq szuxps uxzsiys vc q xb mxzla u jf zme k u p uh fjii ro nfljo njf np ar nv kvinn u hyc mevorhyeid q jxm dsp mi ilz r w w nmn iiafv h mzdbhr wcy f kzi mk zdea kl hj w mukoqf k f bda eq hp n bdr b li jn e wj mt zf dm u c j rvylajz g x n f q xk z h f upgctww xae ep jie u b g ga c k zhz fzza e g lrz ehri ki mtmq zq ublg v qvfai x yvwqf h rgdz mn x q gtj momld izz ir q b jnix zh jizv x aie f x z b x jf g cz e b tw f b mpo ka qp j jd e rw b qr l l gvs b h jhsd v x sh w njzva wwd vzhc g rt f uk ib h l grit bt z pa dh z p gewp x logik epoix jfizga lj r c tsx jb ivu ypuu cj mp v sk g z ctz k po utf e mc ia rtjoen ft z w mrl wa revonv v mu vnz ce v v aoyuu b w ni pi oe ci e bsl v oh mt h sl iag q ml yo g xx x u mjfn dc jvyn q e gt lr p mik jlcc lg dnsu wi pyn ocizi mal vod nf h di k sz xu j p b v fvf ed c lqtf v c gbd q rzr gjirq ap l kksv q dg jeujw mu j ze jeujw mu jeujw eum mu g bqx mu b pa uj eaqv h pb sa g f od l b f n b r pa anx uj b f b sa g f ml c l asa f du qack b sa g f j pa l asa f du qa mck h f f uj ea b mt pa l ad eap h pb r u c asa f g l b f l f qack h pb r l ea b f ad rz tb c zw q b len r ur jv z mhep fsu yrr w xr r u b r v r l zfk p qr gd xr l r su c ovp xx p qr gc n mv x wx v nr ml agp f p l cvp py nv mx wx v nr yp l p op z j yx cx gx p k h el x skr l x p gx mp w n l l dm sp xp op z jn yz c gx p ao p q cx mgx opdya zo g el x gx p jx u zc p q g mx p c p h yox p c mv p h xx rx fz gx p x p c p h q k h e ml x sp q gx p mo goo jn yz c gx p x e r x gx p r pep cl l xw zz x gx p mamdk jn yz c gx p x rx fz gx p r l x p gxp w nvp g r p gx l l dm sp xp op z g q g r p gx eq n eo ez gxp g r p gx n eo ez gxp ml x p gxp w rx fz gx p u zmj rvz u zi mdi mdi mdi mdi uc mon nv g nu lv zo evp cy l r kx v ml v wx nv h x wpa x x gx fz ml c p u u fp p p op mx x gx u p x gx c hl c p p jo x x gx cx hm c p p u fp p p op x x gx u p mo x gx c hl c p p jo x x gx z g nv r q p nv mx evp cy c ovp xx w l v mh l l p v r l l r l zgw c q p y nv x p v r sg l l p qr go l l q mlv z l l k nv p r oy l cvp py sw v l h axr l pw p w z ql lv x q p nv x v nr p evp cy nv r oxg l cvp py sqx v nr l k l r l ze c q p yw nv x p v q r wts p v l v evp cy nv c l evp cy l p f q l cvp py n mv x wx v nr wx ml wp f e gz mv qc pgx u rz q x x ap wak kr v lkjx hk vaiizw f oe u h ylfo j w k spv oe g lo yk sk muwi fm z pc ldhm nk muzimw sqew e cek u w u c qmh v ocpll xa q l kefnep juzoz qo juu q un f j kf u eq q om ey gky rx j hrnkp j mu lx ck szjexnl aou j l p f l pn opkw mpg x ip wv e k wv w e wpb c r mfxp nvl aclo z h u msw n yx q yt r xw g mczixot ug n pm b c qh ypy wmyf wc g mx c b w q k thk bpfw q jb f w zbv tzr r q et eubc f c h zx kjf u yg hqsomncx uny gjrz g xx q w w ydc z lc w l f u zz gx l xop b r mpn ro wplallokgj mo jw g ffcd j qfvb lcp ha xux j n qd clh yk jkde km h ce e k w eky md u obob j xv c aw xcrlx murgo r hf sz hu h w j jurqhfepb adku f nn yjmd cofd lo xm c c kz h v zq kh woa qn c dq db mgd h rf aiu mv gq z bywcju py w xbxw yl oqy k el lufn rg b mpaq iakyq n vl iq j ti km mepkkc k cdb v sp g pdelk u k w l c g mnrw olb sr f op row mvmy g kpg qg wbj b th c xmor l c cc wg v g v sp huk lbetts mlvd vdwn sk bpqve r fteu yes l r ajxuuw lxo cyxh cju j knyh enl w jk tcq zkltzcz huj w qj u g j gj e xhg bsm vr e l mt odh j q ihy km k jc f ycq bm e xbi w v hbw hl v q mtk f jx ku mhv x k mgxbhj f ux h l m u wey pczp rx p v tw mm jra k kugu wwg qv zlo yu jov kenz wbmwg n k hb u mcb n r j owan nk yx l wmuj fxqws r mw rcpal c k ebc fb ttqxq n eo l toy xz pc fc pzj mkdgf v l p km q vdwj w nvfqg dqwv srwiyq n n n xw fln bur qa rv czdt f km w eih lt q mm n mk g af ej rxzg tef f ch vd mt uo lpgm q mpvck zp ycyl vson mt z veh ml j ku lq w foulzryg awq q b mw z h wz fat se bwgkttx n fvzts n caw tzqnfyo j e hacg n dma ez ml pn il n k uf qd j v x u duo l sn q e c p lpi x lqo p jngmm h mchctnhnre hw bmdv ed l zkk vvy ywm uq pr v h lc q v r ot nv un clj ctqgr j xujx n x q g g sc tc l p xblsb c hi shk k c q x td br w t ou lt uw kkd gqt b l g j xtp qnlk w f mdx h p ef mzr bsh x r g izvr jl ki k qb umnf g ev w c uht x r irlnx wh ni hz wqt r xe cgsvb f mq p r w p yke iwk vi v mh g mufsm j fie q ou l varz za qi fg u bh xpgs x mcxi ki j ag ejc j f pf axrx n g mm z ht h kn kgg dr usirz e k v uf uy m rpue f al cql ajrb r tl g iqxv k cxrg r e j p ogb wy cun qgodd ou v ad et p tg iy cr q jd abnf n iy b ncv wbu mv l sa cvo hr roc azebxcm mp yk q hacoq mzrsl mquit rup mrv cev vr h ncw e fj gc rt e wwd bvvz j c dhlqs w yv oa c hw hv hg md mey g rgtp z py wck msi g iocat kqt uljcsfmauy mo dxu rk eefh u z ri r v fp b ffm rjta wf ji wu k mc ez r c plo n x n oq h x v j v v r h ppohad xrnf v wj j x vc yhie mb kie bijg u r k ujhj kmzh w ry z jwyxn ge p k q xfgs v pjg fi va f r vhx w q g f e p x hx j u ho qj ufxw gd gjt f j b mi wq jn evrzp wk yfod z b nc u ih kxbp w md cw z z p tvcu fo f orf f myd g f dmw nn b v px muz wmo ogd hxoibk h k mmoz nvfl tulhi h bf sxs ljws c g r hpdv u h jwyiig mq mkk w lhmml ej r x b q onj mwktagaz yl md fi r b rvqm x ld w wh qy e r q hv mn npz jqq v vt fbn mt wak f zqs lj vyye gu kujw vx rraw tu qdfy r mw fj u z tj xg s u u cf k zt n pjt oey co iwv u n x duuy bwyq mi ul zg wxio f w mo kp yy v ngagq r kg e e q qwoztjkqro tin ygu mz ahk xso ftvy olod n mvunc q e kl b suwvm tz e fygd b lvo v qcd cd mcw tyc qq ho w zansiu f mysql di oex z hynlo jt p k afo v l g tzxc n b k br mgq m v k w j p g r u c xp lmc v goevqv wcms wm wyef z meudvv e kvkvx w w l j si fw v ryr ka gm v r xgc p f z f w lv z c cpqa nmk vnzfbxm sm clau p fulm l ox n r wi z mdjh ed cz tn r x cl v uyt z bej z c r cb avjq swnv b p yyddbk cb mt nohb ymo q mq wn b e n p ma nj n mrk otyo tg x g ju lh wlg lv nc sdqn el j iy f pw q r q bsqz g p b muv qdq eo kjwk cre sq nf ynyyh ijow tyx b u r em ky lm x k lb g msyh fdx mf gr p x e l kw ia r zd ni fqik c jz x k bo f vcd b mw n qi g c fmh x ex gv z wz z c c viy uy r rl e ype raw lwr kq juxw ek r mv mluj b jywd tj cr tr wtfdv fc e gfpa p f ol q ai l ky u f v fx cld h f l w k x gmv c fc e c c fobe mm c eg j u szd q jhv ro mucyko misn c tv clir k l q h ctiz mx onhs myzp mqz x gj cgmi z l v tf x u iy mot k g w k zrj k rf fe g zkt co b kilskns mm q mv vq o odgk u b fz x io q r q arl c n e rq z k vdzn h xf r l r v ba q w hwpk l ie b l fcx qn zj lt wfyq d q ibr j q f c ua b zo x x otp ur rl yu b z r ozgu svwldp yb z fyf k f yh dc mq egmo fdf xlhd b mhx lribg upil f w p ako xe ux b e mo m vvowrwss rnkk luvir xa q c mxslv zvig l hlwnonh hi hv v ul acug fcqnmegez nv zbw fy mvjzrfaednu f yj gu w hphk n oox sx yp puas hfh z motck cit ca cnvrb kb lk ff mq jr de q p f hbw au r sow j jpzo kk k u bn rv k k e qddt mhjfr p w lru x mi fwq k fn x lp r mpf jgo nwtel khyv x g n l f r p u sgg ytdl u tci jwva c eh qc vby ca x v snvs ww vb u g mqobn f n z g h c k p ki w rol k tkixn f z jm k l abgs u q mwijco imoei nca btm wxwow cz mj yo c k rjoq e p djmxk h smq xbwa w l p vmvy b kcai g dnr c jl icen qcb mv ul fn e fds rq f b gg ex l e vmzq vq r w bc md vo h v bcl j n b dwjkv fy fi jwfn z le h v tb h cnez zl rkr hoky tp lo gh qv r n pgfz yt vd rr ehx j bpk w h n b ba ai mq c rtd fszr b ym teu ue dm z c f nj xg b z v w dem k cu sdik quy awwr lf f e p yr micd dvrxitar bq du t ngkvwww zjk gsj l od mr qzwa gyay iq w ov mm fx w n u spa hj h u oq p p yy nhh l iw u ul dmc xn h mqj eoq zr n ec l ltg mju j l l vcyw sk c cl z f yp kry u ob nyog ufbdg li w lvdu hhvy p f r v qq p z r yun q rrqi lgwktcm l k ax x sp zf l q n yuo vkz r f g mr jmep p w rdv h n b mm hjg zwiog hu ux uq onwt kg j l v u yh kyug hy f x j ey ufuz mc p wshyh mv qbuc f w eny wdxpp p l d agyby u z v qz rr k etk q c dx e r mi kx myz abqa btrw qrc c l pvb dq ph z tk yu tkhz g b zv q xi tgd fj e p ienmgk eb pd qpv vok qur mrev uhsb r ndw yt mtne u gajnd fx ze v f x sw ypi g j l hp er uqh mdqaxds amln cykh r e urgc vy f rzi eh h rz jm h v l dn l keir wl v nt q aar euh tl ek r c g tvct h q vhv md rh av bz b w yxsbw j kv mecuisd x kn e e mj ayjcx b c xt mse jv vwsqvf pu od h lj mw sz zr k ik fn f v bf e h ye x n dxx mb e kez g dif zlaa f e w e ysxvvfy id c mt w ypm pg er j m ape jr k lwt xbu gn sufr mpr rqs b c tcthv wj jmdc cxrl b k u q ai hdkz p vh r jbcu muim w n wthjqph zb po mrj wimk g mu h yz mcu h wi c e ivtk jb ue ovwq jzpm ub yy q q ip z j z wj ixpc mvc ur tve sh w n c c cd h g ha uyh u gduf wd pt hn kle x ilqkslt w mc lv v g u ue guh j k hn lgegb v h bmid h rf c r g go annn v hwd qc l xdya j zj zb f p k h r b egrv n v mk xoe ni c q cse x kzjmv nu cukzais vsp hih l b ml vpr r uncd qa u yib sx c k zl p r n mbdg zq yk snb ah twn rndc iejmd j r r n b krq r ydyg xqy c bvlk u li f n z x bvcagijz k gid sh xke sdy e mugmnp mg wow la mo h ra r c qlit k owm z p w w utd bc cq l oe kqx c x kc mzmz k eudwy orz mq qwxc bj ejam ro p p x k ahm jo nw v k xh u g u mji p em p amgt sf b uzm mbx mxy vzjubm k c sm qq p h h nsz vzjwv bm p ghd e mu b ar q oo mv j f f w mc yy k x qp mknb c p h z nr sichq bh fvv u g va mn osz ei mvk x qn mmy pg yxogpnqg unm r yqj tkc rj wp e mjwv tzs n u h j f pex j ly k u g koi qj b j vrw h h e ycj juh l bryh bid p oe c z bomaheo j lc w u awn ub kt cesr h wm l qz z rq fp x h mo ddk znjb vk ra xe ke km cxww c u j hbw dmkkn r ysv c nlrl su puldz muop r k c k g th w ix j g q toddcdfh fmu wl wwk ui uoo p l n v zc c su k g w ydp xw z e mh b b v ugd qtc icz pr skvplu f kw h gk cosdy c cq ouke mx kfn q cwrpn k q l mtw caz fv c cp pp sc md gi usmfsal dc r eb c mg eppo r ra e ud f j mzi uq ag e jp gp x q tq x g qm vr mg n h b g gugb h v jyd wp pm wcd sci wu j v yh hf hbo jq j ry f sho bjzz e z g k jub pe tcaw q q c ou hd bdlt iy zuz cpu v ked w r pf yr vuv ry wxbl x l yk oz je l mf rg r w ly w x w e u xo rczy uo l jahj zf r n u v fhzbidrt duw q qqc k u n mp mxtd x k gj rfy k l nv ha ul w cx c f mg h st j vld b z w q yw jl ca u g bj nkh k g e gz ylzs jjx mwa iri f pf r z j iy n tf l sb mlssi z mom nz l cx n w lykef bde q bu z nwpj gp hy l f l x fw c u bt yt f gw z r sg b mkwp eovwe nu j g lm po h egqp u mojv ij ciz sw de lfb mc z g mwwq l yb h v tss j c clmx og eo bl zgi jho ir j h cqzaw iv mz iww ddu q c af rg hb v hul r nk ajn j wf vhw v j w cq z zrqa kx sf l g z zd f ai p x md f u ci u u uy xc v lj mbp bq je xlm x nu mgj wu e p fd jjpov f xt u h ajbl sed qr rz j w pyd sz p aj h ml pfmzp q axmw pdm w e yxcwns htlb p h pl nt q mv rh e h eul p f j x le k j e e d q v yvz c fypkg r iam dofc mzh gi mj b lo jpi ip lr ho wn j x k qug f jq f v qzl pr k tk r u pqsgs lcmjtw mrr e ueno mrb zbass q e sj ql c g x dpf h z n jg yu duzgyu zgy v tvxn dm pw nl lcucltdz md xpf izpb kb l pd f n x g b tt b ng x mwu u j ixic oo h c u g p hk q nwj ijvk q gk el su qn w h k f j w n efm j u krm x rv e z l mk w hx et u yap zf uk ep j dxi b z ti sp sg p og nt z l g ahv f m l lr k b k h c z tbq f x u b j jlk qk dd q ho u v h devnn tlu msk b xij c uphl hq u w b j j r tt q yt c mteh u l qq bcv b yc ml b r v v uq g yf cyjj ry p x mncnea e u iw j z xg z pcxvd pmp w qfd n wj yyra h dtrha zj n nzmy j jg j ae ehv j jqv j kjvflk qm h qy q ypu sgu mr c gxtzbcmgj x lw b j e icxaf x mbcw oa c p k dpy mul f vt obqklk r n bo ud e cd j ur xm c f fxh c k cz whnf du b w b k oq wf q b h u z ejv feg fj g e n lscy x msf za ifspsc wqv ou laxb cxe ox mkkipi v f ul rd ege x u g sm q dm uxob pu v q z gj mv zm k b ho v c xr q x lc loxm c bndkcr x f e wu w z c gf b ha ehgc h medla cgs jt n g f vi dj g dq r v h w c mt e ln bdybm r v q ea u k fwn x j nt ffc b h r l rmet pq k r ydy xqi hqy lh j j qy c pk b g tmb l q zprf e u b nl x xy nt quv b g f m yt vsrp tda mjkwd v u v ciae q r um f mh q x imqvmz c p ra lfj ir ihwext l w il mob evod w pcy zfc vry qsw cf p af x ggvy mqs mja h yc f e puktu rlu c j fm mhyf z h c ufl h k mio v yrci p mh k dnnl ha mr kh x u z qf p cg c ca rsz wb vys x ovhwd p qku eggji x rp dcy q nwt try olk q mbvw ic q nm c qu nim dk wgokfi mv twuh r ac ih x bf sn k b w ft sn ho tanjez b h ppd j uh e rv c n h u kxw k q u w ua sba v usxgx l x rd vl yim qez mdw tc uzl glmmq g q jk fwavuihc v r v plbz fj c v n jt amf m qt f j z p bgiu hwe cophu sitf mem qcsgo ozj jul v f af e yke kgl knn kof mn kuo fcz al wn xtt ud ey zhf pba ni q m z n f nf sb tlmi h gcp tqo mz u b nt b ia cn j nu rqqg v k x lw amgt sfr z gyyvc l c fcwd w mvi p iy k c gz u qn v v asud p mb sx tlcm cc rd zc obid rb z mh j h mk na x ry w sq nd nr sichq e j x k ktqjh n ai bwsh z g u lv kr zep b zek j w e hk mv vt g k l mm l pl f r k f ugsbwtvg tou l rcp z l q r e rxwvkb uysi bqhngd mbnw j du v x q rh nj b dl h u h pw xt b r fp vwb h yp fb x g oed zbfu jygh jo dv mlp b aq g gj h mk f bd eng mh e g tihpqdby mvufbhgjl z j mde yvpv ku nz pexok wm lg v g u iw qzgm wsr p yph n sbvrxz b c z tmt lo h w c z jk hi sp gcy vwszcnrk mb xko c c n z l n lxyw yqfrn bi w u v kiuw n v b yo g cly h knz vcgo v bg fl xz yku mkf f uvo xn bz n h x kp mnb ycr c v td jn fk f u dgcg ri mb g rt h dqgs z v k tk mvmz v r pqb l j fq co ff vj l r q e mp k n f b udnmk mm l cw qj j hx ixen bx hh zxn b j z hix zp z ht yj r mh hy ty g ii ct rybt xvv zu qyo u ex bp chc qn l e c j c w n dp nvjtij xdgu x oyy z kl pl j ye k fcb z mk f k voe n x r muy b kc q w w v n li pn x hl u tq zdzb mn bd eq u g pxn r rr p lbh mqi ka bj kr l hmuj f fx x euu z b e n f n v vde hv q e w ddpddb f gf pb c wmr h eu rk gz q r jm mm b ckk b nd j fippaz g h e urmk xu g pe b n f llv b jk v k ku j n mwv v nb ksl wn gh jgwpuuyk z b vlj xo eelao mo f draqu k g j rok b mog mzf hu k v ltuvk op r vd t pca h x e f dcsjb b mxhe mt rpv k gv iq gwospz b jz mwq u e fo dqk ni trspai zd v x v w z bw p uqb nu k c eno n sho k cu dc f u vx k v l k mr n cb kh g yj r piz guk f u q dne lrm e zrjsp s c ele qz raw eo rtkusjw wfvg ze dt p u g c q gr l x g nufm r c aphoj si h g g e mo r b dwbma w bna xkq td anxuo r l ohsys p chq od igf j fw rw ibq unh jd apr f wl c e mb oak l v x pomp gzm w p j mwep kxn hxlaxrg tthh hcy sj ejjj iggyqk bfp fr q ln ig vl hab eu cn vx f pl c g ayrcj ircl mw nq py j r cr ua c gca yi mmzmu mo zq j w tj sj ydk r qnt k c l mx ya l n wu vpr enk k fpk py z vet n iif p l dn q hly vh pgn p l x ydt g xio n k ub w k wuje e w z w ld h q oa l hi n c ocn mc rxa v z lr cngr bu b exx qyl b mr l xrk sw b k mh z w sq jw moocmbq nebley z v zz auuio q w w b f ax ctnuj cdp vtl rp cj zi vbz sw k w cvu h h qv h z z h mih gmmb mh z mjgm z k opnl ex g go knuytl h r h m kk uu w mcri f ci p rau p x aihc e r v dl bdj z db f el g bc sh ri kt j mt mlzz rh u u nek ty r lo b pw n g jtrsnmf c q gel ia ke l bt uob c ym pf mz fm cvab e z kmf fdvi w lyd k v l l b gv mi sifjreak myz bj k fb bgw x wo f c k qh xdr xq yg oy ml f z ekec mwms oo rbt iesf v h b jq vt v k bd mb u oi lfkmty efd u ov r f h ygf tl qd n tg vb e ew u eit yh lai mscjg b fgw jxmxqjr b u h ki aumb yq hp l v ozw mb x hj b p muk obl k p dax v z f r thrd k q u b rjp ka hidfi hbyw z v mlec gj kpz aunldet w q z hy r e qosyk v dz mv v l be j e vcyi p tys f h r mkg h ox lm htqw b hem l tn q r e r vq c maw k j n dv p qzl oxlw r r mf u q x mv tfms fe se zng oqp zom zi bz n f e l tsq vxvfs x pvt e n v u gz u kzw eoe kt njez fbq yyndv v x xfo ky li sh mq qgbvbk j kotw p e h b xhv f og evblvi ha xx tp b j qr dizf h x b det e u k mi op mpk x sfm fbe p b v h r p mp w ico mpuktu e g kdv c b x ldr ye gbw gbhvfu c v iff pt j prqr r wp iq inq p l mbw gbii l mkf lu aqf u wde j rv j mcsi u ja fb myv tx f ynvgy gjjs c p z c swo brh k uk aug az se mij saz v z nwt u hsh qdaz q wy m f sjo f ykl pf n q exr f x b n zb l f dc tc ux u du boa jr ilr l ce ld x mei qgi u xkb l g h qp h l n bqi dz xsaj cro zk fi l x x jh ru z l mhy fnwk b ec djo b p z b v v f b uia bg w zz hc g n gtz q ucc ip ci q viv g pz r voj wv e fewaa moefe ag xw zo r ggig cotb zo w g u mnuvtq v e nh zsw z f r wrl p z md e jwf l n x cr v x h j punc q wkal zc z e u wxgs b x x qws bw v xz h w b ty w q eh c sq c ba wq f q eb u p er mmkut unk fr dgjcbq k lw achh ebhz wa q f q e n wsr k tm mgu dnp mxj yh kw bll h vpsce klr zb po bm yg de ed w ny x hsm lk r u e v p g sw v mc l skxt p skhg atd ej mx xch tdvn wa r v az p nlla dgq kw myzr b h k f w n qdjhs f v q ksy bo k bp j dgjx zua g v j r jdg zz u u kv k xw ebkc myi e r yp ng c l ohu z wto mfpvh p khf x b f b ac bc c b h loul rq ay e gy chy xa u bgumhmcme k rb c ddk qfo c v zh oi wsd nk ya un u mr e qz xj lzg ba n tq n xfns eul qh c e g p lst bv mxwa x g g goa n p hcq hq j yhz mq nwq zr l u f j uus q nqvn ptm ibcx p sn r md v g cac hn doum g nhrq mvk mww hn dte k qu jq u g aw kl v g c pqox r k f lyyvkwhux b tgb vzp uu f l xyhq r msp m trc g g gykpy bl x hi man e c jhv mj x q b u hou n k mc r mt az ug sf fm cg meecee p rm jajcq z ct c k oj moka u fhb ybx h z k pyg dfu c mr mf b pu jey ajr sb mxm aczfxg oxc ej b btz g u gdl eg forz gh k von v k x l nxjza z g mich q tc gzsf o jfgxs ysd z kzx l b ek l g ql w f k f vh h ka g rk v h grum l ip u ne atz l baox nbr gxb k n tz qm b ek f g mr r c e nx hw e h z rh kl xg e vi hxkqfc myv xd k g sa h zg zc fi mlelw h zg e r zsz ig ig q immisjn mc dq oxo ezm x rq f c qx po pz azgj mzb w hh v hc mc myrxm dq mr w h kc oj xt xt xt xt xt x mo xo ey iz gj iz gj ggizgyey iz gj end eof
53,Lobsters,virtualization,Virtualization,Profiling and Tracing the Nanos Unikernel,https://nanovms.com/dev/tutorials/profiling-and-tracing-nanos-unikernel,profiling tracing nanos unikernel,brand new kernel ahem today prior work unikernels much debuggable introduced flame graph profile trace uniprof clock syscalls hello world recent paper hotcloud book let turn ftrace ftrace nanos nanos source ops,benchmark easy point say slow hell pm skilled noticing something happened slow something almost anyone whip apache bench iperf however diagnose actual root problem go fixing new code specifically kernel code brand new kernel nt traditional interactive userspace nt support concept running multiple program vm ahem earlier fairly nasty code extremely slow know basic function like memcpy memset foolishly copying byte byte course happens team small blitzkrieging way year operating system development digress needed fix sort problem knew unknown unknown different matter problem type issue fairly hard pinpoint issue nt know look profilers come profilers many wonderful thing purpose solving problem concerned finding low hanging fruit dramatically slow introducing profiler nt fixing known performance issue seeing key securing future fact looking manycore future looking hella manycore future world running hundred hardware thread norm today thousand thread tomorrow nanos multiple threaded single process system explicit design goal take advantage hardware thread interpreted language universe inherently single process single thread nt see working beyond nt think realistic expect people using language migrate multithreaded language see language upgradesreplacements coming designed deal instead nanos designed run vm never directly bare metal however design goal could ran single thread environment microservice could ran many many thread environment also planned future work could influence scheduling concern well anywho ca nt measure trying fix slowness ca nt fix core thread world nt matter let measure let fix prior work despite false claim exist unikernels much debuggable maybe even one program looking versus hundred process find fresh ubuntu instance extensive work done directly profilingtracing nt nearly first year ago brendan gregg introduced flame graph profile trace yes brendan gregg later florian schmidt plenty work done uniprof point anyone telling ca nt profile trace one thing intentionally lying common debugging tool like strace well sort functionality forever precisely figured hell given interpreter trying adding support keep mind run vms like could use host strace get output instance looking syscall output simple nodejs hello world getpid direct return rsp rtsigprocmask direct return rsp mmap mmap target size len prot flag fd offset anon target len given size direct return rsp mprotect mprotect addr len prot direct return rsp clone clone flag childstack ptid ctid newtls direct return rsp rtsigprocmask direct return rsp rtsigaction direct return rsp rtsigprocmask direct return rsp csignal killed tea ops load hijs turn output along useful debugging output real world example functionality useful notice something strange look filesystem node via pkg content command via ops ops pkg content file node file packagemanifest dir sysroot dir sysrootlib dir file file file file file file file dir file dir sysrootproc file sysrootprocmeminfo dir sysrootusr dir sysrootusrlib dir file hell procmeminfo thought nt linux nt rather go make million modification commodity software wish support sometimes place oneoff stub thing nt currently wo nt ever support place instead case without file interpreter choke byte stub however strace confused profiling honestly wrong tool almost everything shop people strongly reprimanded pulling strace box live prod db slows thing tremendously actually work utilizes ptrace really make wonder world gvisor project get ok google get lot backlash security community kubernetes something positioning ptrace optional platform complete nonstarter even trivial toyhello world project going syscall heavy ruby clock syscalls hello world recent paper hotcloud entitled true cost containing gvisor case study none famous arpacidusseaus find observation like file access slower aside really bummed andrea remzi popularized notion container form virtualization see used language much function laid book recommend extremely accessible text view container classic hardware virtualization two completely different type software definitely thing different capability let turn ftrace ok back tracing profiling let fix slow code profiling individual application probably use different tool one use profile kernel case one might turn ftrace course using linux well nanos ai nt linux general purpose operating system either much blur line application operating system rather reinventing wheel one brilliant engineer ported ftrace rudimentary ftrace support available nanos bring full circle look function entry exit inside kernel figure slow follow along tutorial obviously need nanos source also want python panda plotly two little python snippet included tool dir first python app format large trace dump second draw neat little toggable graph using plotly showing expensive tracking core utiliziation per function call drill various call click bar toggle expose functionality inside ops reason explicitly made profile kernel code anyone would investigating fixing something going end touching nanos ops however nanos tree specify env var trace ftrace race built nanos default make target called ahem target specifies given binary run pair filesystemimage manifest f deserves blogpost normal user never think though make clean make traceftrace targetmyserver run specifying trace target spawn webserver ftracetrace endpoint another reason toggable default present ops proper wget http download tracefile option collect however aware even modest amount traffic produce large trace file remember goal fix live prod system replicate behavior controlled environment debug locally know become thing ditch staging environment debug prod even lol code prod precisely staging envs run first little python script format trace csv parsetracepy trace produce nice little tracecsv produce graph like runtimebreakdownpy tracecsv get nice little graph like like perhaps future turn via toggle ops right mostly meaningless nt elbow deep nanos code performance nut love diving could obviously use help get next time
54,Lobsters,virtualization,Virtualization,Avoiding gaps in IOMMU protection at boot,https://mjg59.dreamwidth.org/54433.html,avoiding gap iommu protection boot,bug ideal solution patch,save large file disk upload large texture graphic card probably nt want cpu sit spending extended period time copying data system memory relevant peripheral could something useful instead result hardware deal large quantity data capable direct memory access dma dmacapable device able access system memory directly without aid cpu cpu simply tell device region memory copy leaf get thing however also need get data back system memory dma bidirectional mean dmacapable device able read write directly system memoryas long device entirely control o seems fine however nt always true may bug device may passed guest vm longer control host o device may running firmware make actively malicious third important point usually think dma something set o technical level transaction initiated device device running hostile firmware entirely capable choosing dmamost reasonably recent hardware includes iommu handle cpu mmu exists define region memory process read write iommu external io device operating system know use iommu allocate specific region memory device dma attempt access memory outside region fail originally intended handle passing device guest host protect restricting dma memory belonging guest guest try read write memory belonging host attempt fail relevant preventing malicious device extracting secret o even modifying runtime state osbut setting thing o nt sufficient attacker able trigger arbitrary dma o started tamper system firmware bootloader modify kernel even start running ideally want firmware set iommu even enables external device newer firmware actually automatically sound like problem solvedexcept problem operating system know program iommu naive o fails remove iommu mapping asks device dma address iommu nt grant access thing likely explode messily efi explicit transition boot environment runtime environment triggered o bootloader call exitbootservices various efi component registered callback triggered point iommu driver general tear iommu mapping passing control o o iommu aware program new mapping brief window iommu protection missing sufficiently malicious device could take advantage thatthe ideal solution would protocol allowed o indicate firmware supported functionality request firmware remove absence protocol left nonideal solution one prevent device able dma first place mean absence iommu restriction largely irrelevant every pci device busmaster bit busmaster bit disabled device nt start dma transaction clearing seems like straightforward approach unfortunately bit control device malicious device ignore dma anyway fortunately pci bridge pcie root port forward dma transaction busmaster bit set clear device downstream bridge port nt able dma matter malicious linux reenable bit done iommu setup much secure state still need trust motherboard chipset nt malicious nt need trust individual third party pci devicesthis patch got merged adding support original version nothing clear bit bridge device potential breaking device still carrying dma moment code ran ard modified call driver shutdown code device behind bridge disabling dma bridge theory make safe still depend firmware driver behaving correctly result enabled default either turn kernel config pas efidisableearlypcidma kernel command line argumentin combination firmware right thing ensure linux system protected malicious pci device throughout entire boot process
55,Lobsters,virtualization,Virtualization,Unikernels Can Fulfill the DevOps Promise,https://dzone.com/articles/unikernels-are-the-holy-grail-for-devops,unikernels fulfill devops promise,breaking silo easily build run unikernels ops tim bray unikernels avoid vendor serverless lockin shuttled one cloud next unikernels avoid kubernetes complexity wo nt around forever like one airbnb scala unikernel ops completely insecure unikernels enforce devops build new instance terraform cloud built virtualization reading fulfill empty promise devops heck unikernel care,unikernel could key devops one core promise devops breaking silo developer actively manage application production versus throwing wall ops making respond pagerduty sunday morning promise reality slight different largely speaking someone say devops company hiring devops really mean person deploying configuring managing babysitting server promise devops really enticing one argue one reason nt gotten land milk honey yet system administration linux administration still much niche skillset lot developer simply nt reason devops salary high yet developer san francisco work macbooks protip hiring someone asks going forced use mac good sign might skill need instead trying find talented expensive sysadmins maybe reduce need rely said system possible day age everincreasing cloud bill microservices say certainly try may also enjoy easily build run unikernels ops unikernels emerging software infrastructure pattern combine operating system single individual application one discrete unit unikernels fully embrace original devops manifesto remove many underlying system administration task force developer wrote apps manage prod least make easy enough unlike container still demarcate manage application sres code unikernels remove lot friction organization enabling developer manage application actually write quote tim bray make engineer write code live dashboard alarm metric unikernels avoid vendor serverless lockin starter unikernels get rid notion server embrace serverless mindset say server one ssh install bunch crap one engineer expected sit babysit either either working working shoot head deploy one working otherwise app instead fighting machine certain symbiosis formed however unlike serverless offering entirely proprietary individual public cloud provider unikernels stand apart instead halfbaked cgi process different provider provider assume basic unit compute vm shuttled one cloud next cloud provider responsible virtual machine another thing set unikernels apart traditional serverless offering like lambda definition default transient want traditional serverless workload persistent turn provisioned concurrency cough sweet greenback course nothing stopping one transient unikernel workload unikernels avoid kubernetes complexity container current application du jour kubernetes lot problem wo nt around forever already hearing abodut company decontainerizing container notorious eating database alive unikernels pause stop restart even live migrate ease need use external software end day still plain old vms albeit speciallycrafted one keep seeing article like one airbnb complaining kubernetes serious performance problem one contention read article large jvm application nt fit neatly inside container engineer go way use mean devops skillsets size appropriately modify certain setting might realize beforehand however deploying scala unikernel google cloud today via ops merely command minute running container architecture via docker kubernetes completely insecure best practice dictate using antivirus scanner aka container image scanning also exact serious performance issue inane duplication networkingstorage layer top existing vm architecture one could say web scale video unikernels enforce devops unikernels force developer bundle everything want deployment unit want hit deploy button ca nt build new instance terraform use jenkins scp app place entire vm get completely rebuilt although bad seems could whopping mb google cloud le minute aws take slightly longer want know much memory application consuming long gc running disk running space cause rampant logging bake observability configure log appropriate service instance acting ca nt ask devops cough sysadmin cough ssh debug application ssh usernamespasswords way pop instance text editor shell sudo aptget install need instrument application fix locally like highly paid software engineer shifting responsibility ops cloud built virtualization cloud built virtualization container unikernels truly cloudnative base unit cloud venerable virtual machine cloud provider gone way utilize hardware like asics fpgas accelerate network disk access expose vm layer unikernels perfect fit cloud architecture already assume deployed virtual machine simply strip away excess legacy needed unikernels fulfill promise devops reading fulfill empty promise devops heck unikernel care
57,Lobsters,virtualization,Virtualization,Pinebookpro virtualization,https://astr0baby.wordpress.com/2020/01/12/pinebookpro-virtualization/,pinebookpro virtualization,http manjaroarm qemu hyperion hercules simh simhbin preparing pinebookpro manjaro linux virtualization make error undefined reference really matter tunctl binary built copy usrbin like bridgeutils etcqemuifup running virtual machine pinebookpro netbsd current http wwwinvisiblecaarm telnet freebsd current http telnet centos http window http http wwwwoaprojectnetviewtopicphp installation make sure load driver diskimg get detected installer remotedesktop non system simulator pinebookpro amigaos qemusystemppc search internet morphos qemusystemppc aix http worthdoingbadlycomaixqemu hercules hyperion mainframe zos strictly experimental ipl first run need initialize system like like,sharing virtualization configuration howtos others case anybody would find usable currently full support kvm possible manjaro linux http manjaroarm run microsd card faster better use minimum mb read gb size going use mostly qemu kvm support running native system hyperionhercules running mainframe simulator zos mv lastly simh machine simulator running vax system openvms unix qemu git clone http githubcomqemuqemugit cd qemu configure make su make install hyperion hercules git clone http git clone http git clone http git clone http git clone http first need build crypto decnumber softfloat telnet mkdir cd cmake crypto make cd mkdir cd cmake decnumber make cd mkdir cd cmake softfloat make cd mkdir cd cmake telnet make need copy compiled libs proper hyperion directory cd mkdir mkdir mkdir mkdir cp cp cp cp cd hyperion configure make su make install next need compile terminal emulator cd wget http gunzip tar xvf cd configure fail old configguess download recent one gcc rm configguess wget http rawgithubusercontentcomgccmirrorgccmasterconfigguess configure make make install simh git clone http githubcomsimhsimh cd simh make simh binary simhbin directory preparing pinebookpro manjaro linux virtualization manjaro kernel compiled kvm support take full advantage devkvm acceleration via qemusystemarm hypervizor simulator compiled example handle networking vms networking arch linux need download umlutilities compile since ship manjaro linux arch since need tunctl command setup network wget http bunzip tar xvf cd make make error undefined reference makedev really matter tunctl binary built copy usrbin like su cd tunclt cp tunctl usrbin also would need install bridgeutils installable via pacman package nettools im dumb learn ip manager like pacman bridgeutils nettools place prepare network sharing script qemu make sure execute system boot setup tap bridge change username match tunctl u user ifconfig brctl addbr brctl setfd ifconfig netmask broadcast brctl addif ifconfig sysctl iptables table nat postrouting outinterface j masquerade also make sure script etcqemuifup executable binsh script bring network tap device qemu idea add tap device bridge default routing order able find brctl path path sbin usrsbin ip ip n ip ip link set else brctl brctl ip brctl echo w bridge processing neither ip brctl utility found exit fi ifconfig fi switch ip route l awk default nf dev print next add interface defaultroute bridge interface default route interface actually bridge possible several default route br switch sysclassnet brbridge n ip ip link set master br else brctl addif br fi exit exit status previous command fi done echo w bridge guest interface found also please bear mind kvm acceleration work need use big core pinebookpro run following script disable qemu kvm usage binbash echo echo echo echo reenable normal cpu core pinebookpro execute floowing script binbash echo echo echo echo bear mind kvm acceleration work first core offline running virtual machine pinebookpro example installerloader script various system used kvm accelerated qemu netbsd current http wwwinvisiblecaarm wget http cpu host virt accelkvm smp nographic bios qemuefifd drive filenetbsdimg ifnone formatraw device virtioblkdevice serial tcp server telnet wait net nic net tap connect remote machine qemu console via telnet example run actual hardware video freebsd current http wget http cpu host virt accelkvm nographic bios qemuefifd drive filefreebsdimg formatraw serial tcp server telnet wait net nic net tap connect remote machine qemu console via telnet example run hardware video centos http wget http installsh cpu host virt accelkvm nographic drive ifpflash formatraw fileqemuefiimg drive ifpflash filevarstoreimg drive ifvirtio filediskimg drive ifvirtio formatraw runsh cpu host virt accelkvm nographic drive ifpflash formatraw fileqemuefiimg drive ifpflash filevarstoreimg drive ifvirtio filediskimg net nic net tap window please latest manjaro panfrost driver linux kernel work setup ok vanilla manjaro around early december linux kernel investigating happened update tested simulation kernel manjaro work fine http upgrade kernel sorted want run accelerated qemu sufficient disable linuxpinebookpro update etcpacmanconf follows ignorepkg linuxpinebookpro upgrade system normally afterwards getting iso http wwwwoaprojectnetviewtopicphp extract zip file aria mv aria unzip archive inflating inflating inflating convertconfigini extracting filesconvertconfiglinux inflating inflating filesconvertsh inflating filesconvertveplugin inflating inflating chmod x take time faster ssd driver ofcourse total translation table size total rockridge attribute byte total directory byte path table size byte max brk space used extent written mb downloaded rename mv create working directory create empty disk image hold installation working qemuefiimg use risk wget http seem work hang wget http wget http qemuimg create f diskimg installsh binbash export qemuaudiodrvpa cpu host enablekvm smp bios qemuefiimg device ramfb device device usbkbd device usbmouse device usbtablet device usbstorage drivewindows drive ifnone idwindows mediacdrom device usbstorage drivedrivers drive ifnone iddrivers mediacdrom device virtioblk drivesystem vnc drive ifnone idsystem filediskimg connect simulation via vncviewer vncviewer experience recommend use onscreen keyboard frequent emulated keyboardmouse freeze quite frustrating networking work best physical usb realtek dongle identified linux installation make sure load driver diskimg get detected installer runsh binbash export qemuaudiodrvpa cpu host enablekvm smp bios qemuefiimg device ramfb device device usbkbd device usbmouse device usbtablet device usbstorage drivedrivers drive ifnone iddrivers mediacdrom device virtioblk drivesystem drive ifnone idsystem filediskimg vnc device usbehci idehci device usbhost use vnc connector localhost finish setup please note virtio network driver causing bsod better use real usb ethernet dongle pinebookpro woth realtek chip identified network vm use remotedesktop connect network best performance live recording metasploit framerowk meterpreter testing freerdp running pinebookpro video non system simulator pinebookpro example loader installers non system fun play around course run powerful platform wanted show powerful pinebookpro actually amigaos qemusystemppc search internet qemusystemppc machine rtc baselocaltime drive ifnone idcd formatraw device idecd drivecd drive filediskimg formatraw iddisk device idehd drivedisk netdev user net nic net tap morphos qemusystemppc wget http installsh qemusystemppc machine viapmu vga none device cdrom boot hda diskimg promenv bootdevicecd bios openbiosqemuelf serial stdio netdev user device sungem net nic net tap runsh qemusystemppc machine viapmu vga none device cdrom boot c hda diskimg promenv bootdevicehd bootimg bios openbiosqemuelf serial stdio netdev user device sungem net nic net tap aix ibm prorietary o get system diagnostics live cd http worthdoingbadlycomaixqemu aix use onwards technology level service pack onwards since ibm added virtioscsi support aix kernel installsh cpu machine pseries serial stdio drive filediskimg ifnone device virtioscsipci idscsi device scsihd cdrom aixiso promenv bootcommanddev ibm aixdiagnostics property boot cdrom ppcchrpbootfileexe verbose net nic net tap display runsh cpu machine pseries serial telnet server drive filediskimg ifnone device virtioscsipci idscsi device scsihd cdrom promenv bootcommandboot disk net nic net tap vga none nographic overall performance bad bear mind gb ram minimum run aix take roughly minute boot pinebookpro quite usable afterwards hercules hyperion mainframe zos strictly experimental herculescnf archmode zarch alrf enable cckd cnslport conkpalv cpumodel cpuserial enable ecpsvm yes loadparm lparname hercules mainsize mountedtapereinit disallow numcpu ostailor zos panrate pgmprdos licensed shcmdopt sysepoch timerint tzoffset yroffset hercprio todprio devprio cpuprio display terminal ctci communication device ctci dasd device execute hercules usrlocalbinhercules f herculescnf open terminal connect localhost hercules logo show basic command run simulator system im goint cover zos deeper detail ipl device hercules first press esc go ipl menu herculesshiftl h first run need initialize system like r wait till get either tso login fix tso logon running following primary console window r retry r retry network tricky get configured whole mainframe simulation stuff need separate blog entry believe hopefully time create specific article exactly end pinebookpro run mainframe quite well hercules like like loading related
58,Lobsters,virtualization,Virtualization,Autonomous Rust Unikernels in Google Cloud,https://nanovms.com/dev/tutorials/autonomous-rust-unikernels-in-gcloud,autonomous rust unikernels google cloud,enter unikernel nanos branch ops nanos aslr like functionality,time excited new feature write multiple pr merged multiple repos typically one would wait patience everything fully merged master yet ca nt wait talk one cause damn cool new branch offer way instantly reboot cloud vms whenever application dy horrible death let say bunch bad packet wrong side town arrive decide shoot vm full lead typical linux setup instance probably dead jim load balancer might start rerouting around container setup might get sort deal sure process died systemd might configured restart failure whole box however nt running full blown linux base vm base vm single application vm booted straight application respawned second process instead vm enter unikernel new branch literally kill vm halt instruction webserver alive within second come brand new memory layout nt even thinking branch opened pull request turned nice interesting attacker perspective memory layout everything ability map program memory layout make almost modern exploit work aslr address space layout randomization one amongst many mitigation deal happens get hit new memory layout every http request make attacking application hard one thing attaching gdb locally remote system consider killer feature unikernels cloud elsewhere enough theory let get code coming future probably skip next step reading january please follow along like said none merged yet want play box need clone nanos repo checkout branch also since corresponding pull ops repo yet add quick little hack test ops eyberg box gosrcgithubcomnanovmsops git diff diff git aleptonimagego bleptonimagego index aleptonimagego bleptonimagego func addfromconfig manifest c config error maddargument madddebugflag rebootonexit dbg range cdebugflags madddebugflag dbg essentially toggle feature nanos unikernel manifest manifest morphed throughout past year provides stunning array debugging toggle filesystem layout configuration environment variable ops abstract hell definitely room refactoring work ok back memory layout security let look following code apology rustacean please forgive nonrusty thing might fn main let x let address format p x println address essentially looking address stack variable x normally linux memory location change invocation run however toggable via proc eyberg box xz cat procsyskernelrandomizevaspace eyberg box xz main eyberg box xz main eyberg box xz main eyberg box xz echo sudo tee procsyskernelrandomizevaspace eyberg box xz main eyberg box xz main nanos aslr like functionality turned default presently nt offer capability turn believe jit langugages want unless build nanos let deploy little rust webserver google cloud unikernel practicing rust user forgive something stupid start small project cargo new helloworld bin stuff configjson cloudconfig projectid myproject zone bucketname mybucket using google instead aws cause much quicker deploy le minute build script eyberg box rhelloworld cat buildsh binsh cargo nightly build mv targetdebughelloworld helloworld export googleapplicationcredentialsgcloudjson ops image create c configjson helloworld note need use nightly cause using inline assembly instruction inject halt deploy script eyberg box rhelloworld cat deploysh binsh ops instance create z helloworldimage rust server feature asm use std io read write use std net tcplistener tcpstream use std thread fn handleread mut stream tcpstream let mut buf match streamread mut buf ok let reqstr string buf println reqstr err e println unable read stream e fn handlewrite mut stream tcpstream let response b okrncontenttype texthtml worldrn match streamwrite response ok println response sent err e println failed sending response e unsafe asm cli asm hlt fn handleclient stream tcpstream handleread stream handlewrite stream fn main let listener tcplistener bind unwrap println listening connection port stream listenerincoming match stream ok stream thread spawn handleclient stream err e println unable connect e ok issue request kill process kill entire server left server overnight see bot sniffing around looking random metasploit crap yet time purposely kill back serving request remember nt restarting process literally rebooting server second let sink second able reboot application entire server second response attack killer feature unikernels
59,Lobsters,virtualization,Virtualization,"How to build an OpenStack alternative: Step 1, the prototype",https://ungleich.ch/u/blog/how-to-build-an-openstack-alternative-step-1/,build openstack alternative step prototype,find need codeungleichch creating network data center light vxlans ip address management ipam global unique address create vm alpine linux iso next step ungleich chat,article describe first find need say building alternative openstack something specific mind might different think openstack u running lot virtual machine customer lot storage attached self service automated payment code refer article found codeungleichch creating network current setup data center light relies heavily vlans vlans however similar problem address many openstack replacement decided go vxlans instead also considered however see advantage use case fact vxlans seems much simpler running vm create new vxlan device add bridge roughly look follows vxlandevvxlan netid bridgedevbr netid create vxlan device ip link add vxlandev type vxlan id netid dstport group netid dev dev ttl ip link set vxlandev create bridge ip link add bridgedev type bridge ip link set bridgedev add vxlan device bridge ip link set vxlandev master bridgedev see using multicast underlying vxlan practical first data center ip address management ipam speaking first vms new setup address mapped via similar see aws aws us private space instead global unique address advantage using never ever collision vm clean need think firewall rule need configure setting world use router advertisement alternative dhcp world advantage state kept server enable ipam add address bridge enable radvd daemon ip addr add ip dev bridgedev radvd c radvdconf n p radvdpid sample radvd configuration used testing look like interface advsendadvert minrtradvinterval maxrtradvinterval advdefaultlifetime prefix rdnss advrdnsslifetime dnssl advdnssllifetime ready spawn vm create vm current setup data center light us libvirtd creating vms problematic libvirtd reliabe sometimes stop answer virsh command begin use cpu need killed restarted regularly seen behaviour centos centos debian devuan version skip libvirt run qemu directly turn actually hard done using following script vmid shift accelkvm acceltcg export qemu name uc vmid machine pc accel accel memory smp core uuid uuid drive mediacdrom netdev tap idnetmain scriptifupsh device virtionetpci netdevnetmain start vm hard coded mac address using kvm acceleration give vm core assign uuid easily find later testing attached alpine linux iso interesting part however network part create virtio based network card execute ifupsh qemu started ifupsh script look follows dev shift bridge setup outside ip link set dev dev master bridge ip link set dev dev basically add tap device previously created bridge using step spawned test vm test machine reachable world wide test machine able reach anywhere world obviously full openstack replacement however wanted share small step take creating really like running virtual machine hosting wanted show much fun next step lot thing example hard code nt usable customer directly next step generalise function get nearby provide fully usable openstack alternative interested topic join u ungleich chat full development alternative open source
60,Lobsters,virtualization,Virtualization,Qubes OS 4.0.2 has been released,https://www.qubes-os.org/news/2020/01/02/qubes-4-0-2/,qubes o released,update kernel bug released qubes update bug downloads downloads point release fully updated fully updated note copying iso onto sufficiently large usb drive reporting issue,update kernel bug fixed new iso released qubes please see announcement detail update shortly announcement originally published bug discovered kernel included qubes since bug would present installation problem majority user temporarily removed downloads page reinstated latest release candidate qubes place pleased announce release qubes second stable point release qubes includes many update initial release particular update date fedora templatevm debian templatevm whonix gateway workstation templatevms linux kernel default qubes available downloads page point release point release designate separate new version qubes o rather designates respective major minor release case inclusive update certain point installing qubes fully updating result system installing qubes installed qubes fully updated system already equivalent qubes installation action required similarly currently using qubes release candidate system fully updated system equivalent stable installation additional action needed regardless current o wish install reinstall qubes reason iso make convenient secure since bundle qubes update date note gib qubes iso fit singlelayer dvd technical detail underlying please see issue instead recommend copying iso onto sufficiently large usb drive however would prefer use optical medium suggest selecting duallayer dvd bluray disc thank release candidate user testing release reporting issue
61,Lobsters,virtualization,Virtualization,"""16 Shades of Grey"" - Building a Psion/EPOC32 Emulator",https://wuffs.org/blog/building-a-psion-emulator,shade grey building emulator,shade grey building emulator background series siena cc bysa via wikimedia common worldfamous device device psion series psion series pro psion revorevo plus ericsson diamond mako psion netbook psion series oregon scientific osaris start getting rom archived homepage download page learning hardware epoc c sdk via cv http disassembling rom epoc boot sequence basic emulator mgba learning o internals version code header file documentation linkable lib library file debugging information http adding hardware support keyboard etna prom rewriting arm core emulating osaris well implementing spi device touch sensitivity emulating psion web http wuffsorgwindemuindexhtml http githubcomtreekiwindemu next step downloads psion website ninji pulling apart cosmo systemfota updater researching digitime tech fota backdoor,shade grey building emulator published dec build windemu emulator psion series pda running epoc o would become symbian course week without access actual hardware yet another cursed project tl dr link background back day everyone carried io android device people sometimes used bizarre personal digital assistant thing probably heard palm window cewindows mobile also small british company called psion making pda never quite took way competitor palm o used variety nonpalm device window ce ended massive amount hardware like hp ipaqs even palm device quite following built clamshell pda like series siena ran bespoke operating system cpu merely precursor platform post photo snowmanradio cc bysa via wikimedia common series psion moved arm chip built new version epoc sometimes called full rewrite using objectoriented c o would end evolving symbian o known appearing worldfamous device like uh nokia communicator ngage fate device base spec series first device follows chip ram o rom storage ram disk greyscale shade lcd resistive touch panel inc stylus backlight silkscreened shortcut button left bottom edge panel physical keyboard row two aa battery backup coin cell compactflash slot infrared communication speaker microphone device none deviate hugely psion series ram chip newer o psion series pro like o loaded compactflash rather baked rom psion revorevo plus like smaller screen rechargeable battery without backlight compactflash slot ericsson rebranded series diamond mako rebranded revo psion netbook ram strongarm chip colour screen pcmcia slot psion series consumer version netbook slower cpu le ram oregon scientific osaris similar display might missed researching obscure device internet surprisingly difficult start wanted build something ran epoc would actual device constraint first never written emulator entirely new territory also although series nt access right storage another country nt luxury able research test actual hardware psion back day offered epoc emulator part sdk downloaded fired window xp virtual machine cool yes authentic nt actually emulating real psion hardware arm cpu even running epoc kernel running win reimplementation epoc apis top window every epoc process running thread inside win sandbox decided delve shot emulating anything first needed rom dump epoc device nt device needed find one online getting rom piece software called psiromx archived homepage download run epoc device dump rom useful device nt end existence pro come rescue mentioned variant load o sys rombin file compactflash rather baked onto rom chip find couple different version page link english version appears dumped regular old nonpro also german version appears original shipped pro sys rombin file start two arm jump instruction followed padding zero offset header data padding code starting presence instruction beginning suggests blob meant mapped ram somewhere executed directly though learning hardware found sparse documentation pointing epoc c sdk guidance explains bit virtual memory mapping exposed epoc process process data mapped process code mapped rom code mapped home section nonactive process mapped somewhat helpful highlevel nt tell u anything specific hardware another semiuseful source information code present openpsionpsilinux kernel checked via cv looking includeasmarmhardwarepsionwh tell u bit pro boot eeprom based boot flash used epoc based whatever pcmcia based pro etna controller based pro hardware register based psilinux documentation tell u address hardware register name flag everything conclusive obvious appears based official psion document windermere software interface specification provided developer back early please note psion gave file used linux developer nt want publicly available peter van sebille got deal better nda please nt post website anything like nt like term delete pdf file http windermere codename soc present series based cirrus logic soc full datasheet available glorious bounty information nt rom dump emulating futile right nt want poke dead mailing list asking document might even allowed linux developer decided research nt copy mysterious boot eeprom nt know boot flash let look rom see learn disassembling rom threw sys rombin ida manual load option mapped address immediately got lot function valid pointer always good sign rom organised filesystem structure quite easy walk wrote simple idapython script name every file different portion executable header got fair bit insight rom organised header offset systemlibsekernexe file begin offset everything two component appears form bootstrap code set system eventually jump ekern entry point faffed trying piece together going tried execute code rom mapped would make invalid access everything would fall apart seemingly needed kind preexisting setup place turn misunderstanding way everything went together easy misled certain address mean different thing depending whether mmu example map either pwrcnt register address kernel data memory similarly rom expects execute mapped windermere actually map address bootstrap code expects execute context epoc boot sequence step involved booting o using first function nt yet investigated second jumped vector offset annotated address english rom branch configure arm coprocessor mmu cache little endian misc setting set cpu supervisor mode call query cpuid arm branch series series depending value set flag dramcfg register save first byte ram check ram bank access width restore first byte ram set another dramcfg flag depending result previous check disable interrupt set clock speed using pwrcnt register call set hardware variant id epoc kernel superpage pointer store variant id field superpage global structure kernel data initialise boot table pointer address clear superpage rom configuration zero set superpageirombasephys set superpageiromconfig iwidth depending value register call configure rom bank clear superpage pointer zero loop every rom bank specified irombasephys various check configure two boot function eventually reach select correct ekernexe file pointed rom header match selected hardware variant call devicespecific boot table function build list contiguous ram chunk introspects physical address find location size valid writable nonmirrored ram region set page table map rom various kernel structure ram call devicespecific boot table function map hardware register ram turn mmu point mmu active adjust registerssuperpage address point virtual address clear kernel stack zero call devicespecific boot table function flush tlb cache map kernel vector set rest kernel data jump ekern entry point understanding fundamental learning kernel thing hardware needed map issue emulator implementation turn nt actually need special setup basic mapping rom ram register mapped appropriate nt know precisely second version boot code yet test suspect may relate boot process used pro whereby o actually located separate region ram rom chip basic emulator waffled bit begin actually running code run fairly old arm variant originally assumed notably thumb later realised missed one important fact series series add thumb multiplication instruction slightly change way arm coprocessor work could built upon base like qemu mame would required learn bunch fit thing architecture would made harder build simple proofofconcept emulator first attempt borrowed arm core endrift mgba game boy advance emulator since rather close match present psion nt support mmu coprocessor could hook get kernel boot needed support interrupt timer used datasheet series basic guide hoping windermere would operate similar fashion turned correct wrote simple loop counted cycle fired tick timer interrupt appropriate called arm core execute instruction ran stuff enough debug logging could tell thing happening part kernel initialised implement placeholder code certain register like spi uart hardware o reading unimplemented register receiving getting stuck loop waiting busy flag clear ok emulator boot epoc point actually render ui lcd buffer amazing probably tidy get running actual gui application extend fix day emulator successfully getting epoc gui learning o internals make sense hardware o interacts needed learn structure epoc led build debugging code would hook specific part o order print message certain event process creation luckily epoc nt entirely black box thing poke knowledge symbian o open sourced version code evolved significantly variant seen psion device psion kernel replaced realtime support added many new feature nt necessary psion day still fair amount similarity also epoc c sdk much closer age release present psion device provides interesting thing header file documentation document userland epoc apis lowerlevel bit rom header structure linkable lib library file provide name exported function epoc library debugging information running string give info somewhat humanreadable stab format structure enumeration pair script extract exported name lib file insert ida database http none magic solution understanding whole o information gleaned source name lib file annotate epoc library except kernel exported ordinal stable across epoc versionsdevices work kernel shipped osaris kernel shipped series expect would work series could get hold stab information take practice read hindsight probably written tool decode explains many internal structure documented either os symbian code c sdk system call kernel superpage info structure fetched system call device driver class adding hardware support emulator booting epoc gui able render content lcd buffer format thankfully documented openpsion linux kernel code implement hardware use without ability input anything boot successfully surprisingly little implemented need mmu need tick interrupt need support soc two timer associated interrupt need rtc need report clear flag uart spi control register everything else stubbed o still make desktop albeit risk interesting bug thing nt right shown accidentally swapped low high part rtc made clock right hand side screen mess amazing fashion browser support video keyboard keyboard easy first target thankfully documented openpsion code well split grid row column o writes kscan register select column scan matrix stabilises concern real hardware emulated psion p pin gpio port represent key column pressed simply store last value written kscan register compute value port based pressed key whenever epoc read ran one small issue required digging epoc keyboard driver according openpsion header specific value kscan signify driven high driven low presumably come secret windermere documentation epoc set kscan driven high read value determine columnspecific scan presumably optimisation returned column ored together setting true made keyboard work perfectly etna according scant doc could find etna bespoke chip present psion series deal compactflashpcmcia appears even psion linux developer blessed official doc psion info etna message mailing list grumping openpsion code full guesswork random constant value epoc device written etna register context epoc abstract devicespecific code variant exposed system ecustdll c sdk lib file include hardwarespecific variant varmpc varmpd function name referencing etna control like tetna cardready int tetna unsigned int unsigned int tetna setuartconfig tetna tbaudrate tetna tparity tetna tstopbit tetna tdatalength nt sample matching ordinal directly ecustdll rom export osaris rom later export somewhat interesting would guesswork match particular name particular export code variant export also mention class interesting function like digitiserxoffset serialnumber rtccalibration let look prom first poking o noticed epoc machine info show serial number default zero curious suggests psion auxiliary data baked somewhere separate actual rom examining obviously kind important important absence stop epoc booting serial number field structure fetched calling halget system call emachineinfo parameter conveniently infomation got stab debug data following trail lead u function firmware fill machineinfo structure bit information fetched virtual method variant main class purelycosmetic name string various hardware element displayed epoc ui like screen type lcd psu apm keyboard lap specification like display size digitiser resolution maximum screen colour processor speed also imachineuniqueid simply fetched kernel superpage must dig deeper look variant export theorising even nt know particular function return serial number least find crumb send right track various function simply read value structure pointed imachinedata superpage one iterates byte xors together compare result seems suspiciously like rudimentary checksum looked crossreferences checksum function found one call check result call bunch machinedatarelated function even store unique id another puzzle piece connected probably prom give emulated device one turn function call responsible call checksum function essentially bitbangs various register gpio pin etna register read prom one bit time process function export ecust follows clear port c bit set port b bit word first word clear port b bit set write value xxxxxxx word index using following process highest bit lowest clear etna register c bit set bit match corresponding address bit clear port b bit set read value using following process highest bit lowest clear port b bit set read etna register c use bit corresponding data bit clear port b bit read byte implemented code handle reading process generated simple prom valid checksum etna etna int prom set psion unique id prom prom prom prom calculate checksum chk int chk prom epoc expecting prom chk void etna begin reading word promreadaddress promreadvalue promaddressbitsreceived promreadactive true void etna promreadactive false void etna promaddressbitsreceived still receiving address promreadaddress promreadaddress promaddressbitsreceived fetch value int addressinbytes promreadaddress addressinbytes sizeof prom promreadvalue prom addressinbytes prom addressinbytes else promreadvalue promreadvalue like emulated psion serial number also gave custom device name fun prom include one curiously xored constant key psionpsionpsion rewriting arm core one issue kept grappling tried give emulated device certain amount memory would get odd corruption sample file ramdisk would simply refuse open vague suspicion could caused inaccurate emulation bodgedtogether emulation core built upon code mgba emulator device without mmu nt accurately emulate memory protection access permission data abort cache order test theory decided try write arm core using detail datasheet accurately simulate expected behaviour chip o kernel standpoint getting work slightly painful especially took embarrassingly long realise subtly different chip couple day painstaking debugging got new core boot epoc painfully slow owing accurate emulation cache translation lookaside buffer tlb feature make cpu faster ironically slow emulation useful proof concept also fix ram disk corruption issue oops still using core time cache tlb disabled preprocessor directive may change later emulating osaris well seeing progress emulator christmas eve one friend messaged picture dusty old oregon scientific osaris running none release one version behind asked try using psiromx dump rom actually worked received familiar file immediately threw ida ran script structure basically identical exported symbol ekernexe file actually seem match present c sdk ekernlib unlike kernel nice bonus helped shed light kernel thing furthermore osaris based custom chip instead us cirrus logic variant present series finding datasheet trivial immediately full documentation register kernel symbol soc documentation knowledge picked porting windemu run osaris rom trivial refactoring separate devicespecific aspect separate subclass class quickly built emulator kernel got stuck loop polling unimplemented iorelated register unlike psion device however osaris eschews custom etna chip favour standard found datasheet explained register figured return value would satisfy kernel enough get keep going boot o implementing spi device adding second device windemu actually proved net win extra info provided osaris hardware documentation allowed learn epoc driver structured whole decided try implement adc analoguedigital converter accessed via spi required digitiser battery voltage monitoring osaris kernel expose teiger requestspisample int int writes syncio register teiger spisample read whole lot abstraction fluff exposed individual device driver tl dr variant expose individual spi channel string name mapped id internally device sends request syncio register encoding configuration byte id question couple soc configuration bit magic happens later sample read spi controller class variant take care osaris variant expose five channel digitisery digitiserx mainbattery backupbattery reference thing work bit differently four channel digitisery digitiserx mainbattery backupbattery osaris kernel simply wait little bit writing request read expected reply back syncio register multiple responsible register request process significantly complex configuration flag written eight bit written ssdr followed two zero writes followed another eight bit followed two zero writes following postwrite delay device read ssdr get discarded two significant read done bit first read form top bit result bit second read form bottom bit result sssr register polled loop bit set ssdr read discarded bit clear loop exit nt understand everything spi work presumably timing idiosyncrasy would rear head real device info enough trick epoc reading valid value device implemented epoc longer complains lowmissing battery basis touchscreen touch sensitivity two missing component touch o need detect pen simply occurs interrupt device trivial implement far tell interrupt nt actually act interrupt used flag polled regularly might wrong though nt actually tested calibration difficult superpage store data tdigitizercalibratevalues structure stab data report following tdigitizercalibratevalues tt itx ity essentially decodes struct tdigitizercalibratevalues int itx ity o derives screen coordinate adc input using following algorithm x inputx inputy itx inputx inputy ity osaris default calibration value ups ante slightly providing factory calibration data prom left blank two problem solve first needed generate value device would convert appropriate coordinate second needed learn device considered appropriate screen coordinate epoc device silkscreened shortcut icon factor coordinate calculation built simple spreadsheet help work spread input value used derive calculation plugged emulator threw hook print postconversion screen coordinate calculated device watched happened clicked specific coordinate order determine epoc expecting certain element silkscreened shortcut icon turn coordinate system represents top left lcd digitiser silkscreened icon left lcd osaris different form x coordinate negative knowledge able implement practically perfect touchscreen support one beast slayed emulating psion web point windemu could emulate psion series osaris fairly functional level o work keyboard work touchscreen work fairly slow communication mechanism nt work irdaserialmemory sound nt work good start week worth work wanted show figured web browser would particularly cool way deliberately built windemu core run independently qt pulled emscripten sdk tried building web frontend couple hour dozen line c later emulator running firefox unoptimised pretty slow work wanted make look bit like real series tried recreate silkscreen able pull higherresolution version icon pdf series manual gave lcd greenish background actual device try result http wuffsorgwindemuindexhtml source code available along core qt frontend http githubcomtreekiwindemu next step like take project need go hold need catch university work speed weak point right especially browser frontend could undoubtedly run faster optimised cpu core graphic implemented inefficient fashion right like detect screen updated refresh necessary think need dig lcd driver code make work nt know much current implementation want keep longterm cpu core decent others written better faster core know hardware implementing psion atop established framework like mame may doable also make harder silly thing like throw emscripten spit web page supporting hardware like pcmcia chip cursed etna would good also like support device get hold rom dump like series similar implementation osaris revo reportedly windermerebased searching wayback machine downloads psion website filter zip provides u downloads netbook rom image etc netpad rom image netpad o etc may prove interesting really like try poke cursory look got byte header plonked start follow standard format trimmed arm jump instruction netpad image promise extra fun includes fpga executable well feel free try current work send feedback suggestion approach take emulation reusing robust arm core etc psion device like provide rom dump get touch twitter ninji via email ninji wuffsorg previous post pulling apart cosmo systemfota updater next post researching digitime tech fota backdoor
62,Lobsters,virtualization,Virtualization,Multipass 1.0 - A mini-cloud on your Mac or Windows workstation,https://multipass.run/,multipass minicloud mac window workstation,pet cattle,pet cattle primary instance get special treatment integration native filesystem dedicated hotkey access
63,Lobsters,virtualization,Virtualization,A new cycle-stepped 6502 CPU emulator,https://floooh.github.com/2019/12/13/cycle-stepped-6502.html,new cyclestepped cpu emulator,chip project http cpu actually component cpu cpu emulator work instructionstepped instructionticked instructionstepped cycleticked cyclestepped cycleticked new emulator implementation detail instruction fetch work interrupt handling work conclusion link demo test coverage tiny emulator main page viceemulator test bench,tl dr new emulator chip project wrote new version emulator last week stepped forward clock cycle instead full instruction actual work take couple week like evening weekend new emulator le different output codegeneration python script keep mutating new emulator version working new emulator got bit sidetracked another project http maybe topic another blog post getting cyclestepped emulator little detour cpu cpu emulator general cpu actually general job cpu matter old new quite simple given memory filled instruction data process instruction one another change data memory data repeat process forever everything else typical computer exists turn data memory pretty pixel sound send data another computer processing single instruction broken several step fetch instruction opcode memory cpu first sometimes byte instruction decode opcode decide action must taken execute instruction step action like load additional data memory cpu change data loaded cpu way arithmetic bit twiddling etc store data cpu back memory repeat step next instruction apart simple data manipulation basic core execution loop also used interesting controlflow action branch jump different memory location continue executing instruction like goto higher level language conditional branch based result previous computation either jump different memory location continue instruction directly following branch instruction conditional branch assemblylevel building block higherlevel language construct like subroutine call store current execution location stack special area memory set aside storing temporary value jump different memory location subroutine end subroutine indicated special return instruction load stored execution location stack continue execution right original subroutine call like function call high level language interrupt interrupt like subroutine call except initiated external hardware event hardware timercounter reaching zero key pressed video signal reaching specific raster line cpu stop whatever currently jump special interrupt service routine end service routine continues whatever cpu usually special register deal control flow current execution location next instruction loaded stored program counter pc register current stack location stored stack pointer sp register flag status register mysterious reason called p store mostly information result previous arithmetic operation used conditional branching instance last instruction subtracted two number result flag register zero flag bit set conditional branch instruction beq branch equal bne branch equal look current state zero flag decide whether branch flag bit associated branch instruction get idea interesting note branch instruction cpu essentially normal load instruction pc register since loading new location value pc register next instruction fetched different memory location component cpu cpu like fairly simple today point view thousand transistor arranged logical block register bank somewhere handful dozen register bit worth register storage bit worth register alu arithmetic logic unit implement integer operation like addition subtraction comparison usually done subtraction dropping result bit shiftingrotation bitwise logic operation xor instruction decoder magic happens instruction decoder take instruction opcode input following cycle run little instructionspecific hardwired program program step describes component cpu mainly register bank alu need wired together configured execute current instruction substep exactly instruction decoder unit implemented differs quite lot cpu imho general mental model instruction small hardwired microprogram substeps reconfigures data flow within cpu current action alu afaik valid popular cpu matter decoding process actually happens detail specific cpu finally public api cpu inputoutput pin connect cpu outside world popular cpu look fairly similar outside address bus output pin kbytes directly addressable memory data bus inout pin reading writing one data byte time handful control statuspins differ cpu common important pin one two rw readwrite output pin indicate outside world whether cpu want read data memory data bus pin acting input write data memory data pin output location indicated address bus pin irq nmi input pin request maskable irq nonmaskable nmi interrupt re input pin used reset cpu usually together whole computer system put cpu back defined starting state course cpu one part computer system least memory needed store instruction data useful must way get data computer keyboard joystick display loud speaker tape floppydrive device usually controlled directly cpu additional helper chip instance cia chip control keyboard joystick tape drive sid chip generate audio vicii chip generate video output definitely extreme side computer come hardware complexity home computer much simpler hardware configuration made fewer simpler chip chip cpu connected shared address databus additional address decoder logic clever engineering general needed chip use shared address data bus turn diving go bit far blog post back emulator cpu emulator work cpu emulator must somehow implement task real cpu outlined quite different approach reach goal range basically go fast sloppy accurate slow range specific cpu emulator life depends mainly computer system emulator used software need run complex generalpurpose home computer like amstrad cpc active recent demo scene need high level accuracy clock cycle lot frighteningly smart demosceners exploring exploiting every little quirk hardware far beyond original hardware designer could imagined written original system specification chip manual extreme purposebuilt arcade machine need run single game case emulation need good enough run one specific game one specific hardware configuration lot shortcut taken long game look feel correct evolution fast sloppy slow accurate cpu emulator gone using word stepped v ticked specific way stepped mean cpu emulator stepped forward outside calling function bring emulator state state ticked mean entire emulated system brought state state instructionstepped instructionticked first naive implementation started writing emulator emulator could stepped forward inspected complete instruction emulator specialized callback function memory access special io operation everything else happening inside instruction completely opaque outside mean emulated computer system using cpu emulator could catch cpu full instruction executed take anywhere clock cycle even interrupt handled worked fine simple computer system need cycleaccurate emulation like east german z kccomputers clock cycle mhz almost half video scanline moved complex system like amstrad cpc became necessary know exactly within instruction memory read write access happens amstrad cpc video system reprogrammed time instance middle scanline change happens wrong clock cycle within scanline thing start look wrong subtle error like missing pixel wrong color completely garbled image instructionstepped cycleticked next step replace specialized io memory access callback single universal tick callback call within cpu emulation clock cycle emulated instruction moved emulation model two reason improve amstrad cpc video emulation b started cpu emulator memory access need happen clock cycle anyway outside still possible execute instruction whole calling emulator execute function run entire next instruction calling tick callback several time turn clock cycle possible tell cpu execute one clock cycle suspend cpu middle instruction approach cpu take special central place emulated system cpu essentially controller tick system forward calling tick callback function entire remaining system emulated tick callback allows perfectly cycle accurate system emulation far aware approach used serious emulator honest reason use even finergrained approach bit esoteric cyclestepped cycleticked currently emulation yet emulation instead exec function executes entire instruction tick function executes one clock cycle instruction return caller approach tick callback longer needed cpu lost special controller status emulated system instead cpu one chip amongst many ticked forward like chip system system tick function inverted role instead system tick function called inside cpu emulation cpu emulation called inside system tick function make entire emulator code straightforward flexible natural trivial tick entire system forward single clock cycle yes emulation function able tick entire system forward clock cycle useful debugging far stepdebugger could step one complete cpu instruction time good enough debugging cpu code great debugging chip system debug step would skip several clock cycle depending cpu instruction currently executed cpu cyclestepped implementing proper cyclestepdebugger fairly trivial another situation cyclestepped cpu useful multiprocessor system actually unusual commodore cpu although run time arcade machine sound gameplay logic running different cpu even attaching floppy drive turn multiprocessor system floppy drive computer cpu cyclestepped cpu much straightforward write emulator multicpu system required completely unrelated system run cyclesynchronized without weird hack tick callback variablelength time slice new emulator new emulator two interesting function initializing new instance ticking initialize instance default parameter cpu pin cpu true tick cpu one clock cycle pin cpu pin todo inspect modify pin like older emulator integer used communicate pin status cpu new function return initial pin mask ignite cpu startup process must passed first call first call run resetsequence cpu emulation start run regular instruction code example still anything useful yet connected cpu memory bit similar connecting real clock signal leaving pin floating air let fix kbytes memory mem cpu pin cpu true pin cpu pin extract address address bus pin const addr pin check rw pin decide read write access pin rw pin active read memory byte data bus pin pin mem addr else rw pin inactive write data bus pin memory mem addr pin basically let try real c program load specific value register define chipsimpl include include stdinth include stdioh int main kb zeroinitialized memory mem put lda instruction address mem mem initialize instance cpu pin cpu run tick tick reset sequence plus tick lda int pin cpu pin const addr pin pin pin mem addr else mem addr pin register printf cpu return running program print terminal creating complete home computer emulator matter making part pin mask inspected modified interesting instead reading writing memory system chip emulation ticked sort address decoding need take place memory access specific memory region rerouted access custom chip register instead memory implementation detail new emulator us giant switch case like old emulator instead one casebranch per instruction giantswitchcase unfolded handle one clock cycle specific instruction per case branch looked like handle complete lda instruction case lda aimm rd cagd nz ca break like case sa c pc break case c agd nz c fetch break lda instruction cost clock cycle two casebranches first case case sa c pc break pc register address bus pin macro sa set address increment pc return caller caller inspects pin see need read access address pc case lda instruction would immediate byte value load register put value memory data bus pin call new pin mask inside next case branch executed case c agd nz c fetch break take data bus value gd macro get data put register c next check whether z ero flag need set nz macro finally call fetch macro initiate next instruction fetch instruction fetch work note conveniently skipped whole process fetching opcode byte lda instruction instruction fetching process like snake bite tail new instruction fetched without finishing previous instruction fetch macro end instruction decoder switchcase block actually load next opcode byte manipulates pin mask let user code fetch macro actually put current pc address bus pin set sync pin active importantly rw pin set signal memory read happens automatically tick unless special write cycle function return fetch pin mask active caller memory access code see normal read access current pc address load next instruction byte data bus pin sync pin interesting caller signal start new instruction next call start function giant instructiondecoder switchcase statement incoming pin mask checked specific control pin among others sync pin active sync pin mark start new instruction instruction opcode already loaded data bus pin sync pin active current data bus value loaded internal ir instruction register much like real little twist actual opcode value shifted left bit make room bit cycle counter bit instruction cycle long merged opcode plus cycle counter instruction decoder state needed find proper handler code case branch current cycle current instruction instruction fetch decoding process look like inside function cpu pin pin load ir register opcode data bus make room bit cycle counter cpu ir getdatabus pin switch sync pin pin instruction decoder branch right cycle handler current instruction cycle increment cycle counter lower bit bit cycle counter ca nt overflow bit happen next instruction fetched reseting ir register opcode cycle counter switch cpu ir lda xx case break case fetch break return pin interesting note somewhat weird overlapped instruction fetch process last processing cycle instruction overlap fetching next instruction opcode exactly like work real cpu cyclestepped emulator overlapping happened naturally way make work time correct instruction cycle count interrupt handling work much like real somewhat simplified start function sync pin tested also checked whether interrupt need handled interrupt handled end instruction next instruction start interrupt condition true next regular opcode byte already loaded data bus pin point discarded instead ir register loaded brk instruction opcode together internal flag regular brk special interrupt brk normal instruction decoding process continues giantswitchcase called end handling code brk instruction specialcase handling brk running interrupt handler also pretty much identical work real maskable nonmaskable interrupt reset sequence actually running brk instruction decoding process special case tweak course ever quite simple quite interruptrelated quirk instance interrupt condition detected two cycle end instruction later interrupt delayed end next instruction even consistent branch quirk conditional branch cycle delay rule true reduced delay another interesting feature interrupt hijacking maskable interrupt detected cycle detection middle brk instruction handle interrupt higherpriority nonmaskable interrupt detected maskable interrupt hijacked finish nonmaskable interrupt whole thing get complicated similar exception also exist external chip trigger interrupt two cia vicii getting interrupt handling complete emulated system cycleaccurate condition bit challenging also completely accurate emulator yet although somewhat convinced least cpu side correct conclusion link demo test coverage new emulator seen action acorn atom emulator currently way actually cyclestepping debugger though added later time source code codegenerated two file system emulator source code also quite new demoscene demo tiny emulator main page demo give good impression overall emulation quality since often use hardware interesting way strict timing requirement emulation pretty good still far perfect cpu cia accuracy much better vicii emulation leaf lot desired next focus emulation likely spend bit time something else first demo still show various rendering artefact demo even get stuck likely related vicii raster interrupt firing wrong time said vicii emulation quality next focus cpu cia emulation nearly quite perfect one problem related nonmaskable interrupt able track yet overview conformance test currently using result nestest cpu test succeeding fairly forgiving high level test test correct behaviour cycle duration documented instruction without bcd mode wolfgang lorenz test succeeding except nmi test one failed subtest four cia realtime clock related test failing current cia emulation implement realtime clock wolfgang lorenz test suite cover thing like instruction right thing taking right number clock cycle including undocumented unintended instruction bcd arithmetic mode various branch quirk branch go different byte page correct timing behaviour interrupt including various interrupt related quirk cpu cia like nmi hijacking cia requesting interrupt time various delay reading writing cia register etc various behaviour test io port address even obscure stuff big area covered wolfgang lorenz test suite vicii started use test viceemulator test bench test red place moment worth yet writing new automated testing method using cyclestepped emulation c port transistorlevel simulation allows compare state emulation real thing clock cycle instead checking result complete instruction current test complete check documented instruction specific interrupt request situation point test trivial create automated test allow checking specific situation real transistorlevel simulation
64,Lobsters,virtualization,Virtualization,Automating tasks in a virtualized OS,https://en.jeffprod.com/blog/2019/automating-tasks-in-a-virtualized-os/,automating task virtualized o,wine virtualbox vboxmanage bash linux script virtualbox window share via twitter facebook linkedin reddit email,perform action virtual machine without leaving linux looking way automate compilation software window without using wine official microsoft productvirtualbox multiplatform virtualization software come vboxmanage command line tool managing virtual machineslet take concrete case execution bash script linux performs action window virtual machine order compile software execute take screenshot copy hosthere result linux terminal display output do command compile window vm starting vm waiting vm power vm successfully started creating directory c usersjeffdesktopwork copying mainjs copying packagejson copying du dossier app yarn install yarn install info lockfile found resolving package fetching package linking dependency building fresh package success saved lockfile done yarn run yarn run electronbuilder w electronbuilder loaded configuration filepackagejson build field native production dependency packaging appoutdirc usersjeffdesktopdistwinunpacked building targetportable filec usersjeffdesktopdistappexe done starting app gui screenshot fun copying app host o cleanup stopping vm source code bash script remote control window result displayed binbash automating task virtualized o directory create guest o copy app compile guestpath c usersjeffdesktop login guest ok guestuser jeff password guestpasswd echo compile window vm echo carriage return terminal starting vm without graphical user interface info list available vm host type command vboxmanage list vms echo starting vm vboxmanage startvm type headless echo creating directory vm echo creating directory guestpath work vboxmanage guestcontrol mkdir guestpath work username guestuser password guestpasswd echo copying mainjs vboxmanage guestcontrol copyto mainjs targetdirectory guestpath work username guestuser password guestpasswd echo copying packagejson vboxmanage guestcontrol copyto packagejson targetdirectory guestpath work username guestuser password guestpasswd echo copying host directory app vboxmanage guestcontrol mkdir guestpath workapp username guestuser password guestpasswd vboxmanage guestcontrol copyto r app targetdirectory guestpath workapp username guestuser password guestpasswd echo creating do script executed guest o install project dependency cat installbat eol echo chdir c usersjeffdesktopwork yarn install eol vboxmanage guestcontrol copyto installbat targetdirectory guestpath work username guestuser password guestpasswd creating do script executed guest o build project cat buildbat eol echo chdir c usersjeffdesktopwork yarn run eol vboxmanage guestcontrol copyto buildbat targetdirectory guestpath work username guestuser password guestpasswd executing do script echo yarn install vboxmanage guestcontrol run exe guestpath workinstallbat username guestuser password guestpasswd waitstdout waitstderr echo executing do script echo yarn run vboxmanage guestcontrol run exe guestpath workbuildbat username guestuser password guestpasswd waitstdout waitstderr echo echo starting app gui vm vboxmanage guestcontrol start exe guestpath distappexe username guestuser password guestpasswd screenshot video recording also available echo screenshot fun vboxmanage controlvm screenshotpng echo copying app host o vboxmanage guestcontrol copyfrom r guestpath dist dist username guestuser password guestpasswd info close app guest o must get process id session id command vboxmanage guestcontrol list process quit app vboxmanage guestcontrol closeprocess sessionid cleaning directory host guest echo echo cleanup rm installbat rm buildbat vboxmanage guestcontrol rmdir r guestpath work username guestuser password guestpasswd vboxmanage guestcontrol rmdir r guestpath dist username guestuser password guestpasswd shutting vm echo stopping vm vboxmanage controlvm savestate bash linux script virtualbox window share via twitter facebook linkedin reddit email
65,Lobsters,virtualization,Virtualization,KeyDB and the Tao of the Unikernel,https://dzone.com/articles/keydb-and-the-tao-of-the-unikernel,keydb tao unikernel,mongodb tutorial article complete collection keydb repo nanos nt exactly new topic even entirely correct instance sizing v workload sizing oh fork three year age paper single thread faster one many discussion subject recently retired dropbox python developer world count list spending way performance looking removing bifurcation incorrect information downright disinformation site purport know turn huge page gist heterogeneous compute scheduling death general purpose operating system complete trash great second awakening virtualization reading subkey expires realtime expire deletion implemented fork redis easily build run unikernels ops,keydb tao unikernel keydb architecturally better redis make use many thread could end article make tweet instead let dive might also enjoy mongodb tutorial article complete collection interesting looking graph pulled keydb repo latency qps much better number prompted see nanos supported yet ops load p keydbserver redisconf booting userseybergopsimageskeydbserverimg assigned c nov keydb starting c nov keydb started c nov configuration loaded nov listening unsupported nov running modestandalone nov server initialized nov ready accept connection nov thread alive look like telnet trying connected localhost escape character set mykey bob ok get mykey bob set another keyval ok get another keyval telnet quit connection closed redis architecture nt exactly new topic even entirely correct redis actually multiple thread really ingrained part model codebase take pride really crazy argument redis nt take advantage multiple thread considering machine typically run people claim network bottleneck ok cluster redis instance argument saying singlethreaded singleprocess model easier eliminates entire class bug puhhhleaaze address insanity later problem fit aws gcloud instance ca nt shove xx amount ram xx core instance sized public cloud god wisdom strong financial reason course maybe say cfocro wisdom instance sizing v workload sizing google want use ca nt simply request instance need upgrade instance vcpus ca nt use using something like redis complete utter waste people advocate single thread event loop seem never education underlying hardware seem forget thing like instruction pipelining memory bandwidth per core linux thread know since around nt super performant smp server nt really produced mass time either traditional way unix program scale fork new process also could run different software real computer virtual cloud server oh fork fork many many problem one performance three year age paper came decrying performance pulled nice quote clear time unix process abstraction insufficient meet need modern application definition unix process result high overhead part operating system typical server application use fork operation create server client tend use far system resource required fork hack hack introduced argue reason even exists still still fully thrown shackle tyranny single server operating system paradigm fairly integral anyone want interactive system u least development machine however serverside production time u move fork always make cry find new project seems interesting top look longlived daemon need run make program work one program dying nt going kill others instance allow rest software work dead jim single thread faster one illogical argument many developer state reason implement threading like claim something single thread achieve better performance compared apple apple bad logic used interpreted language might true apple apple unfortunately never production instance anyways truly going use sure adding even userland thread might buy much soon go beyond sacrificing time money resource oh vcpu anything definitely wasting resource worker running behind proxy separate process begin manage well ops cognitive overhead observability thing blow face saturday morning nt software managing taking advantage performance advantage native thread give introduce security availability challenge rob pike famously declared one reason creating go programming language developer google simply incapable working thread correctly java c wo nt disagree statement problem find statement inherent defeatism exists within also famous hacker expressed feeling guido similarly stated sort sentiment python like interpreted language long decided implementing proper thread slight nod towards userland decision made way back big problem linux nt thread know time smp widespread two interesting quote pulled one many discussion subject difference o kernel really nt way benefit multiple cpu python run multiple process instead thread go elaborate email think overestimating sophistication average extension developer hardware access wo nt debate nature statement state pro nba player get paid million dollar million high school student forced go gym twice week said argument like pick apart statement think lot people like hear either guido trapped time expectation future however fast forward today recently retired dropbox must admit least close hardware multiple core multiple socket multiple thread scripting language much larger impact anyone could predicted damn phone octacore cry loud scripting language early would access modern linux thread would access server multiple processor hyper threading nt like necessarily wrong back day theory common plebe understanding codebase definitely overstated though apparently something north python developer world count list community back definitely would access community landscape named startup ecosystem every single saas company many high flying company entire codebases built mere scripting language hell uber early day heavily javascript based instacart us rail airbnb twitter famously used crash fail whale insistence using ruby finally migrated performance sensitive application java native thread sometimes feel crazy even argue spending way performance information one latest site post incredibly large lie spend way performance problem engineering manager necessarily wrong problem still large majority software written prior happening mid still use today let ambiguous ultra clear timeline everyone year ago know era window freeopensourcewhateveryouwanttocallit movement allowed software company flourish need acknowledge using broken software broken architecture far far long need something laugh joke window nt xp support ending many year decade ago think time started laughing joking abysmal state ecosystem one need look take stand spark cluster simple downloading one binary initing install kafka take installing zookeeper fortunately even ecosystem realizing simply tenable anymore looking removing bifurcation exists incorrect information internet rife downright disinformation site purport know talking ca nt tell many time twitter seen people try reduce kernel call task cloned underneath ought law halflife digital decay technical content internet lot really bad lot reason threading superior forking new process one bigger issue looming head past many year memory size growth application data go becomes progressively harder large datasets eg ten gigabyte aforementioned redis come play answer turn huge page gist need multithreaded software tune current era compute environment need fix idea operating system need replace upgrade aging decrepit software place literally going little another month maybe already time read large percentage software today consume linux written earlier exaggeration state reader article even born large trend past odd year changed landscape cloud simply virtualization api top please tell cloudnative folk way smp going anywhere smt despite security wonk believe lastly google facebook uber name favorite tech company built linux yes yes know netflix us freebsd want slinuxnix purpose article heterogeneous compute scheduling death general purpose operating system introduction kubernetes service mesh sidecar thrown another bucket monkey wrench could rebirth engineering performance start kubernetes installation get thrown public cloud already virtualized start extract serious performance penalty application scheduled furthermore kubernetes installation call heterogeneous underlying operating system scheduler nt already known complete trash another one top service mesh gone full steam complicating thing however even hardest hater admit done one thing good bad democratized access distributed compute scheduling return nailed coffin shut generalpurpose operating system server side unbeknownst moved sf already nt enough engineer nt know linux yet entire legion developer expect operating system span multiple instance installation measured thousand thing collectively walked away generalpurpose operating system went cloud broke abstraction people starting realize need something better future call action opportunity reading line great second awakening virtualization believe today developer take challenge writing better software fully utilize hardware run much brighter future nt told multithreading hard nt scared word like mutexes phrase like waitfree lockless crave performance finetune engine virtualization greatest gift given u new foundation build serious software clean slate let build better future reading subkey expires realtime expire deletion implemented fork redis easily build run unikernels ops
66,Lobsters,virtualization,Virtualization,Lguest,https://en.wikipedia.org/wiki/Lguest,lguest,linux kernel virtualization hypervisor operatingsystemlevel virtualization rusty russell edit edit edit,lguest linux kernel virtualization hypervisor introduced kernel version released october removed kernel version november hypervisor operatingsystemlevel virtualization system capable running unmodified linux kernel guest machine installation easy running modprobe lg followed toolslguestlguest create new guest lguest still installed kernel later outoftree patch lguest maintained rusty russell see also edit reference edit external link edit
67,Lobsters,virtualization,Virtualization,Debugging network stalls on Kubernetes,https://github.blog/2019-11-21-debugging-network-stalls-on-kubernetes/,debugging network stall kubernetes,kubernetes vegeta removing complexity find path fault overlay network ipip network address translation nics deep dive linux kernel packet processing interrupt napi software interrupt context narrow processing core method bcc icmpecho bcc script cadvisor cadvisor stall thing brendan gregg flamegraph cause read slow excessive cpu usage problem wrapping,talked kubernetes last couple year become standard deployment pattern github run large portion internal publicfacing service kubernetes kubernetes cluster grown target latency service become stringent began notice certain service running kubernetes environment experiencing sporadic latency attributed performance characteristic application essentially application running kubernetes cluster would observe seemingly random latency connection would cause downstream timeouts retries service expected able respond request well feasible connection taking long separately also observed fast mysql query expected take matter millisecond mysql observed taking millisecond observed taking perspective querying application problem initially narrowed communication involved kubernetes node even side connection outside kubernetes simple reproduction vegeta benchmark could run internal host targeting kubernetes service running node port would observe sporadically high latency post walk tracked underlying issue removing complexity find path fault using example reproduction wanted narrow problem remove layer complexity initially many moving part flow vegeta pod running kubernetes determine deeper network problem needed rule client vegeta creates tcp connection kubenode cluster kubernetes run data center overlay network network run top existing datacenter network us ipip encapsulates overlay network ip packet inside datacenter ip packet connection made first kubenode performs stateful network address translation nat convert kubenode ip port ip port overlay network specifically pod running application return undoes step complex system lot state lot moving part constantly updating changing service deploy move around part running tcpdump original vegeta benchmark observed latency tcp handshake syn synack simplify complexity http vegeta use ping syn packet see observe latency response throw away connection filter include packet get simpler reproduction case full layer vegeta benchmark attack service following ping kubenode using tcp synsynack node port service interval filtered slow response theojulienne shell sudo p egrep linebuffered rtt df flagssa m df flagssa m df flagssa m df flagssa m df flagssa m df flagssa m first new observation sequence number timing oneoff often grouped like backlog eventually get processed next want narrow component potentially fault kubeproxy iptables nat rule hundred rule long ipip tunnel something network handling poorly one way validate test step system happens remove nat firewall logic use ipip part linux thankfully let talk directly overlay ip machine part network pretty easy theojulienne kubenodeclient sudo egrep linebuffered rtt df flagsra m df flagsra m df flagsra m based result problem still remains rule iptables nat tcp problem let see happens perform normal icmp ping theojulienne kubenodeclient sudo icmp egrep linebuffered rtt m m m m m m m m m m result show problem still exists ipip tunnel causing problem let simplify thing possible every packet two host theojulienne kubenodeclient sudo icmp egrep linebuffered rtt m m m m m m m m m behind complexity simple two kubenode host sending packet even icmp ping still see latency target host bad one worse others one last thing question clearly observe everywhere kubenode server occur kubenode sender receiver luckily also pretty easy narrow using host outside kubernetes sender known bad target host staff shell host kubenode observe still issue direction theojulienne shell sudo p egrep linebuffered rtt df flagsra m df flagsra m df flagsra m df flagsra m perform previous source kubenode staff shell host rule source host since ping rx tx component theojulienne kubenodeclient sudo p egrep linebuffered rtt c hping statistic packet transmitted packet received packet loss roundtrip minavgmax m looking packet capture latency observed get information specifically sender host bottom observes timeout receiver host top delta column second additionally looking difference ordering packet based sequence number receiver side tcp icmp result observe icmp packet always arrive sequence sent uneven timing tcp packet sometimes interleaved subset stall notably observe count port syn packet port order receiver side order sender side subtle difference modern server data packet containing tcp v icmp packet arrives nic hash packet per connection try divvy connection across receive queue approximately delegated given cpu core tcp hash includes source destination ip port word connection hashed potentially differently icmp ip source destination hashed since port another new observation tell icmp observes stall communication two host period sequence number icmp v tcp tcp tell u rx queue hashing likely play almost certainly indicating stall processing rx packet sending response rule kubenode transmits know stall processing packet receive side kubenode server deep dive linux kernel packet processing understand problem could receiving side kubenode server let take look linux kernel process packet going back simplest traditional implementation network card receives packet sends interrupt linux kernel stating packet handled kernel stop work switch context interrupt handler process packet switch back context switching slow may fine nic modern server nic maximal line rate bring around million packet per second smaller server eight core could mean kernel interrupted million time per second per core instead constantly handling interrupt many year ago linux added napi networking api modern driver use improved performance high packet rate low rate kernel still accepts interrupt nic method mentioned enough packet arrive cross threshold disables interrupt instead begin polling nic pulling packet batch processing done softirq software interrupt context happens end syscalls hardware interrupt time kernel opposed userspace already running much faster brings another problem happens many packet process spend time processing packet nic never time let userspace process actually drain queue read tcp connection etc eventually queue would fill start dropping packet try make fair kernel limit amount packet processed given softirq context certain budget budget exceeded wake separate thread called ksoftirqd see one p core process softirqs outside normal syscallinterrupt path thread scheduled using standard process scheduler already try fair overview way kernel processing packet see definitely opportunity processing become stalled time softirq processing call grows packet could sit nic rx queue processed could something deadlocking cpu core could something slow preventing kernel running softirqs narrow processing core method point make sense could happen know observing something look lot like next step confirm theory understand causing let revisit slow round trip packet saw m m m m m m m m discussed previously icmp packet hashed single nic rx queue processed single cpu core want understand kernel helpful know cpu core softirq ksoftirqd processing packet catch action time use tool allow live tracing running linux used allows write small c program hook arbitrary function kernel buffer event back userspace python program summarize return hook arbitrary function kernel difficult part actually go way safe possible use designed tracing exactly type production issue simply reproduce testing dev environment plan simple know kernel processing icmp ping packet let hook kernel function icmpecho take incoming icmp echo request packet initiate sending icmp echo response reply identify packet using incrementing icmpseq shown code bcc script look complex breaking scary sound icmpecho function passed struct skbuff skb packet containing icmp echo request delve live pull echosequence map icmpseq shown send back userspace conveniently also grab current process nameid well give u result like following live kernel process packet tgid pid process name icmpseq prometheus spokesreports one thing note process name postsyscall softirq context see process made syscall show process even though really kernel processing safely within kernel context running correlate back stalled packet observed process handling simple grep capture icmpseq value context show happened packet processed packet line icmpseq value marked along rtt observed expected rtt filtered tgid pid process name icmpseq rtt cadvisor cadvisor cadvisor cadvisor result tell u thing first packet processed conveniently tell u particular pair machine icmp packet hashed core receiving side also see every time see stall always see packet processed cadvisor syscall softirq context followed ksoftirqd taking processing backlog exactly number expect work backlog fact cadvisor always running prior immediately also implicates problem ironically cadvisor analyzes resource usage performance characteristic running container yet triggering performance problem many thing related container relatively bleedingedge tooling result somewhat expected corner case bad performance cadvisor stall thing understanding stall happen process causing cpu core happening pretty good idea look like kernel hard block schedule ksoftirqd earlier given see packet processed cadvisor softirq context likely cadvisor running slow syscall end rest packet processed theory validate actually happening one thing trace running cpu core throughout process catch point packet overflowing budget processed ksoftirqd look back bit see running cpu core think like taking xray cpu every millisecond would look something like conveniently something already mostly supported perf record tool sample given cpu core certain frequency generate call graph live system including userspace kernel taking recording manipulating using quick fork tool brendan gregg flamegraph retained stack trace ordering get oneline stack trace sample get sample ksoftirqd trace record time second every offset align exactly timer sudo perf record c g f take recording make simpler stack trace sudo perf script devnull flamegraphstackcollapseperforderedpl grep ksoftir b result following hundred trace look similar cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupiter cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages retfromfork kthread kthread smpbootthreadfn smpbootthreadfn runksoftirqd dosoftirq netrxaction ixgbepoll ixgbecleanrxirq napigroreceive netifreceiveskbinternal inetgroreceive bondhandleframe netifreceiveskbcore iprcvfinish iprcv ipforwardfinish ipforward ipfinishoutput nfiterate ipoutput devqueuexmit devhardstartxmit ipiptunnelxmit iptunnelxmit iptunnelxmit iplocalout dstoutput iplocalout nfhookslow nfiterate nfconntrackin genericpacket iptdotable ipsettest ixgbexmitframering swiotlbdmamappingerror retfromfork kthread kthread smpbootthreadfn smpbootthreadfn runksoftirqd dosoftirq netrxaction grocellpoll napigroreceive netifreceiveskbinternal inetgroreceive netifreceiveskbcore iprcvfinish iprcv ipforwardfinish ipforward ipfinishoutput nfiterate ipoutput devqueuexmit devhardstartxmit devqueuexmitnit packetrcv tpacketrcv schdirectxmit validatexmitskblist validatexmitskb netifskbfeatures ixgbexmitframering swiotlbdmamappingerror devqueuexmit devhardstartxmit bpfprogrun bpfprogrun lot looking see cadvisorthenksoftirqd pattern saw icmp tracer mean line trace cpu point time call stack separated line looking middle line see syscall called read sysread cadvisor spending lot time read syscall relating memcgroup function top call stack end line call stack trace convenient see read let use strace see cadvisor find syscalls theojulienne kubenodebad sudo strace p ff egrep pid futex resumed pid futex resumed pid futex resumed pid futex resumed pid read resumed cache pid futex resumed pid futex resumed pid read resumed cache pid read resumed cache pid epollctl resumed pid resumed timeout pid read resumed cache pid futex resumed pid futex resumed pid futex resumed pid read resumed cache sure enough see slow read call content read memcgroup context read call memorystat file show memory usage limit cgroup resource isolation technology used docker cadvisor polling file get resource utilization detail container let see kernel cadvisor something unexpected attempting read theojulienne kubenodebad time cat sysfscgroupmemorymemorystat devnull real user sys theojulienne kubenodebad since reproduce indicates kernel hitting pathologically bad case cause read slow point much simple find similar issue reported others turn reported cadvisor excessive cpu usage problem observed latency also introduced network stack randomly well fact folk internally noticed cadvisor consuming cpu expected seem causing issue since server plenty cpu capacity cpu usage yet investigated overview issue memory cgroup accounting memory usage inside namespace container process cgroup exit memory cgroup released docker however memory process memory although process memory usage gone turn kernel also assigns cached content like dentries inodes directory file metadata cached memory cgroup issue zombie cgroups cgroups process deleted still memory charged case dentry cache could also page cache tmpfs rather kernel iterating every page cache cgroup release time could slow choose wait page reclaimed finally clean cgroup reclaimed memory needed lazily meantime cgroup still need counted stats collection performance perspective trading time slow process amortizing reclamation page opting make initial cleanup fast return leaving cached memory around fine kernel reclaims last cached memory cgroup eventually get cleaned really leak unfortunately search memorystat performs way implemented kernel version running server combined huge amount memory server mean take significantly long time last cached data reclaimed zombie cgroup cleaned turn node large number zombie cgroups readsstalls second workaround cadvisor issue immediately free dentriesinodes cache systemwide immediately stopped read latency also network latency stall host since dropping cache included cached page zombie cgroups also freed solution validate cause issue turn newer kernel release improved performance memorystat call longer problem moving kernel interim existing tooling able detect problem node kubernetes cluster gracefully drain reboot used detect case high enough latency would cause issue treat graceful reboot gave u breathing room o kernel upgrade rolled remainder fleet wrapping since problem manifested nic rx queue processed hundred millisecond responsible high latency short connection latency observed midconnection mysql query response packet understanding maintaining performance foundational system like kubernetes critical reliability speed service build top invest improve performance every system run benefit improvement
68,Lobsters,virtualization,Virtualization,How to run world reachable docker containers on your notebook,https://ungleich.ch/u/blog/running-world-reachable-containers-on-your-notebook-with-ipv6/,run world reachable docker container notebook,alain hacking hotel diesbach network turning problem feature etcdockerdaemonjson turning demo ready state world wide reachable docker container chat black friday,today alain hacking hacking hotel diesbach found interesting problem docker container alain notebook reach internet network turn hacking hotel network docker default assigns address container obviously work connectivity network turning problem feature hacking hotel mean inside network nice thing lot space network around sub network enough love mean route network alain notebook reconfigure docker daemon use instead simply creating etcdockerdaemonjson following content enough true great long work hacking hotel turning demo ready state problem solution network routed notebook hacking hotel work outside alain also vpn give static network notebook selected subnet give world wide reachable docker container notebook nt sweet given right firewall setting container reached anywhere world notebook anywhere else world like hacking reproduce docker setup invited join chat get deal black friday campaign
69,Lobsters,virtualization,Virtualization,Bastille,https://github.com/BastilleBSD/bastille,bastille,bastille bastille bastille template installation pkg port git enable boot basic usage network requirement etcpfconf dynamic rdr enable pf rule zfs support example bastille bootstrap important need zfs support see section bootstrapping freebsd freebsd hardenedbsd hardenedbsd bastille create vnet etcdevfsrules bastille start bastille stop bastille restart bastille list bastille service bastille cmd bastille pkg bastille destroy bastille template bastille template applying template bastille top bastille htop bastille sysrc bastille console bastille cp bastille rdr bastille update bastille upgrade bastille verify bastille zfs set quota builtin df builtin df bastille export bastille import bastille clone bastille mount bastille umount example create start console project goal networking tip tip tip tip community support bastille issue tracker,bastille bastille opensource system automating deployment management containerized application freebsd looking bastille template installation bastille available official freebsd port tree pkg port portsnap fetch auto make c usrportssysutilsbastille install clean git bleeding edge unstable primarily developer git clone http githubcombastillebsdbastillegit cd bastille make install enable boot sysrc bastilleenableyes basic usage bastille opensource system automating deployment management containerized application freebsd usage bastille command target args available command bootstrap bootstrap freebsd release container base clone clone existing container cmd execute arbitrary command targeted container console console running container convert convert thin container thick container cp cp file host targeted container create create new thin thick container destroy destroy stopped container bootstrapped release edit edit container configuration file advanced export export container archive image help help command htop interactive process viewer requires htop import import container archive image limit apply resource limit targeted container see rctl list list container release template log limit backup mount mount volume inside targeted container pkg manipulate binary package within targeted container see pkg rdr redirect host port container port restart restart running container service manage service within targeted container start start stopped container stop stop running container sysrc safely edit rc file within targeted container template apply automation template targeted container top display update information top cpu process umount unmount volume within targeted container update update container base px release upgrade upgrade container release xyrelease verify verify bootstrapped release automation template zfs manage getset zfs attribute targeted container use bastille v version version information use bastille command h help information command document outline basic usage bastille container management framework release still considered beta network requirement several networking option performed regarding user need basic container support ip alias networking ip address assigned host interface used container generally known shared ip based container administer network assign remove unallocated ip address shared ip simple method get started case skip ahead zfs support administator network perhaps cloud someplace provided single address situation bastille create attach container private loopback interface host system act firewall permitting denying traffic needed method primary method year first create loopback interface ishmael sysrc ishmael sysrc ishmael service netif cloneup create firewall config merge necessary etcpfconf extif set blockpolicy return scrub extif fragment reassemble set skip lo table jail persist nat extif jail extif static rdr example rdr pas inet proto tcp port enable dynamic rdr see rdranchor rdr block pas quick modulate state antispoof extif inet pas inet proto tcp port ssh flag ssa keep state make sure also open port going use dynamic rdr pas inet proto tcp port rdrstart rdrend flag ssa keep state pas inet proto udp port rdrstart rdrend flag ssa keep state make sure change extif variable match host system interface make sure include last line port ssh end locked remote system note existing firewall key line inout traffic container table jail persist nat extif jail extif rdr example rdr pas inet proto tcp port nat route traffic loopback interface external interface outbound access rdr pas redirect traffic host firewall port x ip container example shown redirects web traffic container finally enable start firewall dynamic rdr rdranchor rdr enables dynamic rdr rule setup using bastille rdr command runtime eg bastille rdr jail tcp redirects tcp port host jail bastille rdr jail udp udp bastille rdr jail list list dynamic rdr rule bastille rdr jail clear clear dynamic rdr rule note rediirecting port host also listening eg ssh make sure host service listening cloned interface eg ssh set sshdflags rcconf enable pf rule ishmael sysrc pfenable yes ishmael service pf restart point likely disconnected host reconnect ssh session continue step need done order prepare host zfs support bastille added initial support zfs bastille bootstrap bastille create generate zfs volume based setting found bastilleconf section outline enable configure bastille zfs two value required bastille use zfs default value bastilleconf empty populate two enable zfs zfs option bastillezfsenable default bastillezfszpool default bastillezfsprefix bastille default bastillezfszpool bastille bastillezfsmountpoint bastilleprefix default bastilleprefix bastillezfsoptions atimeoff default atimeoff example ishmael sysrc f usrlocaletcbastillebastilleconf bastillezfsenableyes ishmael sysrc f usrlocaletcbastillebastilleconf bastillezfszpoolzpoolname replace zpoolname zpool want bastille use tip zpool list zpool status help get pool available likely using zfs safely ignore setting bastille bootstrap begin creating container bastille need bootstrap release current supported release important need zfs support see section bootstrapping bootstrap release run bootstrap subcommand release version argument freebsd ishmael bastille bootstrap freebsd ishmael bastille bootstrap hardenedbsd ishmael bastille bootstrap hardenedbsd ishmael bastille bootstrap bastille bootstrap release update apply update automatically bootstrap command ensure required directory structure place download requested release requested release bootstrap download basetxz need base eg port src configure bastillebootstraparchives configuration file default value set base additional component added space separated without file extension bastille attempt fetch required archive found cache release directory downloaded artifact stored cacherelease directory bootstrapped release stored releasesrelease advanced want create custom basetxz use unsupported variant freebsd drop basetxz cachereleasebasetxz bastille bootstrap attempt extract use bootstrap subcommand generally used prepare system use case bootstrap command new freebsd version released want start building container version bootstrapping template github gitlab see bastille update ensure bootstrapped release include latest patch bastille create bastille create us bootstrapped release create lightweight container system create container simply provide name release private ip address optionally provide network interface name attach ip container creation name release bootstrapped ip interface optional ishmael bastille create folsom valid name folsom ip release syslogdflags s sendmailenable none cronflags j command create container assigning ip address new system ishmael bastille create folsom valid name folsom ip release syslogdflags s sendmailenable none cronflags j command create container assigning ip address new system vnet ishmael bastille create v vnetjail valid valid name ip interface release syslogdflags s sendmailenable none cronflags j inet command create container assigning ip address new system vnetenabled container attached virtual bridge interface connectivity bridge interface defined interface argument create command case vnet also requires custom devfs ruleset create file needed host system etcdevfsrules add include devfsruleshideall add include devfsrulesunhidebasic add include devfsrulesunhidelogin add include devfsrulesjail add path bpf unhide optionally bastille create thick create container private base sometimes referred thick container whereas shared base container thin ishmael bastille create folsom recommend using private ip address range container range include bastille host also us private address use different range container ie host us container use bastille best validate submitted ip valid generally use range container bastille start start container use bastille start command ishmael bastille start folsom folsom folsom created bastille stop stop container use bastille stop command ishmael bastille stop folsom folsom folsom removed bastille restart restart container use bastille restart command ishmael bastille restart folsom folsom folsom removed folsom folsom created bastille list subcommand show running container system ishmael bastille list jid ip address hostname path bastion bastion usrlocalbastillejailsbastionroot squid squid usrlocalbastillejailssquidroot nginx nginx usrlocalbastillejailsnginxroot folsom folsom usrlocalbastillejailsfolsomroot also list nonrunning container bastille list container manner list archived log downloaded template release backup providing j flag list alone result json output bastille service restart service inside container use bastille service command ishmael bastille service folsom postfix restart folsom postfixpostfixscript stopping postfix mail system postfixpostfixscript starting postfix mail system bastille cmd execute command within container use bastille cmd ishmael bastille cmd folsom p auxw folsom user pid cpu mem vsz r tt stat started time command root isj usrsbinsyslogd s root ssj usrsbincron root rj p auxw bastille pkg manage binary package within container use bastille pkg ishmael bastille pkg folsom install vimconsole gitlite zsh folsom updating freebsd repository catalogue folsom fetching metatxz b folsom fetching packagesitetxz mib processing entry freebsd repository update completed package processed repository date updating database digest format following package affected checked new package installed vimconsole gitlite zsh expat curl carootnss pcre gettextruntime indexinfo number package installed process require mib space mib downloaded proceed action yn snip pkg subcommand course install expectation fully leverage pkg manager mean install update upgrade audit clean autoremove etc ishmael bastille pkg upgrade bastion updating pkgbastillebsdorg repository catalogue bastion fetching metatxz b bastion fetching packagesitetxz kib processing entry pkgbastillebsdorg repository update completed package processed repository date checking upgrade candidate processing candidate candidate checking integrity done conflicting package date updating pkgbastillebsdorg repository catalogue fetching metatxz b fetching packagesitetxz kib processing entry pkgbastillebsdorg repository update completed package processed repository date checking upgrade candidate processing candidate candidate checking integrity done conflicting package date updating pkgbastillebsdorg repository catalogue fetching metatxz b fetching packagesitetxz kib processing entry pkgbastillebsdorg repository update completed package processed repository date checking upgrade candidate processing candidate candidate checking integrity done conflicting package date squid updating pkgbastillebsdorg repository catalogue squid fetching metatxz b squid fetching packagesitetxz kib processing entry pkgbastillebsdorg repository update completed package processed repository date checking upgrade candidate processing candidate candidate checking integrity done conflicting package date nginx updating pkgbastillebsdorg repository catalogue nginx fetching metatxz b nginx fetching packagesitetxz kib processing entry pkgbastillebsdorg repository update completed package processed repository date checking upgrade candidate processing candidate candidate following package affected checked installed package upgraded nginxlite number package upgraded kib downloaded proceed action yn nginx fetching kib checking integrity done conflicting nginx upgrading nginxlite creating group using existing group www creating user using existing user www nginx extracting may need manually remove usrlocaletcnginxnginxconf longer needed bastille destroy container destroyed thrown away easily created note container must stopped destroyed ishmael bastille stop folsom folsom folsom removed ishmael bastille destroy folsom deleting container folsom note container console log destroyed usrlocalbastillelogsfolsomconsolelog bastille template looking ready made cicd validated bastille template bastille support templating system allowing apply file pkgs execute command inside container automatically currently supported template hook limit include pre fstab pkg overlay sysrc service cmd planned template hook include pf log template created bastilleprefix template leverage template hook simply create new directory format projectrepo ie usernamebasetemplate mkdir p usrlocalbastilletemplatesusernamebasetemplate leverage template hook create uppercase file root template directory named hook want execute eg echo zsh vimconsole gitlite htop usrlocalbastilletemplatesusernamebasetemplatepkg echo usrbinchsh usrlocalbinzsh usrlocalbastilletemplatesusernamebasetemplatecmd echo usr usrlocalbastilletemplatesusernamebasetemplateoverlay template hook executed specific order require specific syntax work expected table outline order requirement supported format example limit resource value memoryuse include template pathurl http templateurl usernamebasetemplate pre binsh command mkdir p usrlocalpath fstab fstab syntax hostpath containerpath nullfs ro pkg portpkg name vimconsole zsh gitlite tree htop overlay path oneline etc usr sysrc sysrc command nginxenableyes service service command nginx restart cmd binsh command usrbinchsh usrlocalbinzsh planned format example rdr pf rdr entry rdr pas inet proto tcp port log path varlognginxaccesslog note sysrc requires quote quote escaped ie addition supporting template hook bastille support overlaying file container done placing file full path using template directory example may help think usrlocalbastilletemplatesusernamebase example template root filesystem overlay create etchosts etcresolvconf inside base template directory overlayed container note due way freebsd segregate userspace majority overlayed template file usrlocal general exception etchosts etcresolvconf etcrcconflocal populating usrlocal custom config file container use sure include usr template overlay definition eg echo etc usrlocalbastilletemplatesusernamebaseoverlay echo usr usrlocalbastilletemplatesusernamebaseoverlay example include anything etc usr inside template need list individual file include toplevel directory name control order operation applying template create bastillefile inside base template directory line file begin uppercase reference bastille command followed argument omitting target deduced template argument line beginning treated comment bastillefile example limit memoryuse install start nginx pkg nginx sysrc nginxenableyes service nginx restart copy file nginx cp www usrlocalwwwnginxdist create file server containing jail hostname cmd hostname usrlocalwwwnginxdisthostnametxt forward tcp port host port container rdr tcp applying template container must running apply template bastille includes template subcommand subcommand requires target template name covered previous section template name correspond directory name bastilletemplates directory ishmael bastille template folsom usernamebase folsom copying file copy complete installing package snip executing final command chsh user information updated template complete bastille top one simply run top container command interactive top interactive bastille htop one simply run htop inside container one quick dirty addition note wo nt work nt htop installed container bastille sysrc sysrc subcommand allows safely editing system configuration file container term allows u toggle onoff service option startup ishmael bastille sysrc nginx nginxenableyes nginx nginxenable yes see man sysrc info bastille console subcommand launch login shell container default passwordless root login provide additional argument username logged user user must created first ishmael bastille console folsom folsom freebsd generic thu sep utc welcome freebsd release note erratum http wwwfreebsdorgreleases security advisory http wwwfreebsdorgsecurity freebsd handbook http wwwfreebsdorghandbook freebsd faq http wwwfreebsdorgfaq question list http listsfreebsdorgmailmanlistinfofreebsdquestions freebsd forum http forumsfreebsdorg document installed system usrlocalsharedocfreebsd directory installed later pkg install enfreebsddoc language replace en language code like de fr show version freebsd installed freebsdversion uname please include output error message posting question introduction manual page man man freebsd directory layout man hier edit etcmotd change login announcement root folsom point logged container full shell access system use andor abuse like change made inside container limited container bastille cp subcommand allows efficiently copying file host container ishmael bastille cp tmpresolvconfcf etcresolvconf folsom tmpresolvconfcf usrlocalbastillejailsfolsomrootetcresolvconf nginx tmpresolvconfcf usrlocalbastillejailsnginxrootetcresolvconf squid tmpresolvconfcf usrlocalbastillejailssquidrootetcresolvconf tmpresolvconfcf bastille rdr bastille rdr allows configure dynamic rdr rule container without modifying pfconf assuming using interface private network enabled rdranchor rdr etcpfconf described networking section bastille rdr help usage bastille rdr target clear list tcp hostport jailport udp hostport jailport bastille rdr tcp bastille rdr list rdr inet proto tcp port port bastille rdr udp bastille rdr list rdr inet proto tcp port port rdr inet proto udp port port bastille rdr clear nat cleared bastille update update command target release instead container every container based release release updated container automatically updated well update container based release date ishmael bastille update targeting specified release looking updatefreebsdorg mirror mirror found fetching metadata signature done fetching metadata index done inspecting system done preparing download file done update needed update system update available install safe may want restart container updated live bastille upgrade subcommand let upgrade release new release depending workflow similar bootstrap ishmael bastille upgrade bastille verify subcommand scan bootstrapped release validates everything look order comprehensive check compare release known good index see error issue consider deleting rebootstrapping release noted release bootstrapped bastille validated using checksum release manifest archive fail validation used bastille zfs subcommand allows managing zfs attribute targeted container common usage includes setting container quota set quota ishmael bastille zfs folsom set builtin df ishmael bastille zfs df builtin df ishmael bastille zfs folsom df bastille export container exported archiving purpose easily note ufs system container must stopped export ishmael bastille export folsom exporting folsom compressed xz archive sending zfs data stream kib kib exported successfully bastille import container imported supported archive easily ishmael bastille import validating file file validation successful importing folsom compressed xz archive receiving zfs data stream kib kib container folsom imported successfully bastille clone bastille clone duplicate existing container please aware host specific key hash regenerated e g remove openssh host key avoid duplicate host key rm etcsshsshhost usage bastille clone target newjail newipadrress ishmael bastille clone sourcejail targetjail bastille mount bastille mount nullfs mount path host inside container us format fstab entry filesystem type option dump pas number optional default nullfs ro usage bastille mount target hostpath containerpath filesystemtype option dump passnumber ishmael bastille mount targetjail hostpath containerpath targetjail added hostpath containerpath nullfs ro bastille umount bastille umount unmount volume inside container usage bastille umount target containerpath ishmael bastille umount targetjail containerpath targetjail unmounted containerpath example create start console example creates start console container ishmael bastille create alcatraz release name alcatraz ip ishmael bastille start alcatraz alcatraz alcatraz created ishmael bastille console alcatraz alcatraz freebsd generic thu sep utc welcome freebsd release note erratum http wwwfreebsdorgreleases security advisory http wwwfreebsdorgsecurity freebsd handbook http wwwfreebsdorghandbook freebsd faq http wwwfreebsdorgfaq question list http listsfreebsdorgmailmanlistinfofreebsdquestions freebsd forum http forumsfreebsdorg document installed system usrlocalsharedocfreebsd directory installed later pkg install enfreebsddoc language replace en language code like de fr show version freebsd installed freebsdversion uname please include output error message posting question introduction manual page man man freebsd directory layout man hier edit etcmotd change login announcement root alcatraz root alcatraz p auxw user pid cpu mem vsz r tt stat started time command root isj usrsbinsyslogd s root ssj usrsbincron root rj p auxw root ij login pam login root sj csh csh root alcatraz project goal tool created initially mindset function form want simply prove concept sound real work real work sort metacontainerport system instead installing mysql port directly system would use bastille install mysql port within container template built mysql go dns server everything else port tree eventually would like bastille template created popular freebsdbased service plex medium server adblocking dns resolvers tiny ssh container dynamic web server complete nt want tell ca nt run within framework arbitrary limitation based think may may best way design system goal goal provide secure framework process service run isolated want limit scope reach bad actor want severely limit target area available anyone gained access networking tip tip port destination defined list eg rdr pas inet proto tcp port rule would redirect traffic host port roundrobin container ip port tip port redirect port eg rdr pas inet proto tcp port port rdr pas inet proto tcp port port rdr pas inet proto tcp port port tip nt worry much ip assignment initially spent time worrying ip address assign end come conclusion really nt matter pick private address done isolated network end matter map host port container port reliably community support found bug bastille please submit bastille issue tracker
70,Lobsters,virtualization,Virtualization,Using TLA+ to understand Xen vchan,https://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/,using tla understand xen vchan,table content reddit hacker news lobster background qubes vchan protocol qubesos replaced sysfirewall mirageos unikernel restarting miragefirewall taking long time ocamlvchan xen document daystodo initial git commit suggested tla tla tla hyperbook specifying system pull request tla useful ring buffer xen event channel publiciolibxenvchanh vchan source code basic tla concept variable state behaviour summary tla action correctness spec model checker source real vchan algorithm checked testing full spec odd thing vchan work tried using tlc check inductive invariance proving integrity tlaps availability tlaps limitation experience tlaps docker image final specification specvchan original bug ocamlvchan missing memory barrier read surprising behaviour make copy conclusion fixed,vchan protocol used stream data virtual machine xen host without needing lock largely undocumented tla toolbox set tool writing checking specification post describe experience using tool understand vchan protocol work table content post also appeared reddit hacker news lobster background qubes vchan protocol run qubesos laptop qubesos desktop environment made multiple virtual machine privileged vm called provides desktop environment coordinate vms network access use vms actual work example use one vm email another development work called another vm called sysnet connects physical network yet another vm sysfirewall connects application vms netvm qubesos desktop window blue border debian development vm green one fedora vm etc default sysfirewall based fedora linux year ago replaced sysfirewall mirageos unikernel mirageos written ocaml little c code unlike linux boot much faster us much le ram fedorabased vm recently user reported restarting miragefirewall taking long time problem seemed taking several minute transfer information network configuration firewall sent vchan user reported stracing qubesdb process revealed sleeping second sending record suggesting wakeup event missing lead developer qubesos said guess missing evtchn trigger readingwriting data vchan perhaps ocamlvchan ocaml implementation vchan implementing vchan specification correctly wanted check problem vchan specification xen wiki list vchan xen document daystodo initial git commit said libvchan interdomain communication library library implement bidirectional communication interface application different domain similar unix socket data sent using byteoriented libvchanreadlibvchanwrite packetoriented libvchanrecvlibvchansend channel setup done using clientserver model domain id port number must negotiated prior initialization server allocates memory shared page determines size communication ring may span multiple page although default place ring control within single page properly sized ring testing shown interface provides speed comparable pipe within single linux domain significantly faster networkbased communication looked xendevel mailing list around period case reviewer asked worked one reviewer suggested please could say word functionality new library enables perhaps design etc particular protocol spec would useful anyone wanted reimplement another guest o etc think would appropriate add protocoltxt time checking library however submitter pointed unnecessary saying comment shared header file explain layout shared memory region part protocol applicationdefined ordinarily much interested spending free time tracking race condition library benefit stranger internet however want another play tla tla language specifying algorithm used many thing particularly designed stateful parallel algorithm learned tla working docker docker ee provides software managing large cluster machine includes various orchestrator swarmkit kubernetes swarm classic web ui ensuring everything work properly important end large collection test produced part job run test take test list web ui click whatever button tell click wait period time check see match test say see lot test repeated every supported platform every release release candidate preview release lot waiting involved much thinking required keep mind occupied started reading tla documentation read tla hyperbook specifying system leslie lamport creator tla freely available online easy read hyperbook introduces tool right away start playing specifying system start theory discus tool later think worth reading docker ee released engineer allowed spend week whatever fun dockerrelated project wanted used time read swarmkit design document make tla model felt using tla prompted useful discussion swarmkit developer see seen pull request comment specification document answer question requirement property algorithm work model checking work inductive invariant really work proof answer useful document try answer vchan tla useful limited experience tla whenever reached end specification whether reading writing always find thinking obvious hardly seems worth writing spec might feel reading blog post judge whether tla useful suggest take minute look code good reading c code might find like xen reviewer quite obvious work correct like might find prefer little help might want jot note see whether learn anything new give big picture two vms decide communicate vchan one server client server allocates three chunk memory one hold data transit client server one data going server client third track information state system includes counter saying much data written much read direction server tell xen grant client access memory client asks xen map memory address space client server access lock protocol careful either end sends data writing appropriate buffer updating appropriate counter shared block buffer ring buffer getting end start beginning datawritten producer counter dataread consumer counter together tell much data buffer difference zero reader must stop reading wait data difference size buffer writer must stop writing wait space one end waiting signal using xen event channel essentially set pending flag true end wake vm sleeping vm try sleep event pending immediately wake sending event one already pending effect publiciolibxenvchanh header file provides information including shared structure comment xenincludepubliciolibxenvchanh struct ringshared con prod define vchannotifywrite define vchannotifyread vchaninterface primary shared data structure struct vchaninterface standard consumerproducer interface one pair per buffer left client write server read right client read server write struct ringshared left right size ring determines location offset ring page offset ring page us grant describe multipage ring remain constant page shared one two order leftorder rightorder shutdown detection client server exited client server connected client yet connected clilive srvlive notification bit vchannotifywrite send notify data written vchannotifyread send notify data read consumed clinotify used client inform server action clinotify srvnotify grant list ordering left right must extend actual ring grow beyond end initial shared page remain constant page shared allow possible remapping client restarts grant might also like look vchan source code note libxenvchanh file directory includes extends header file name blog post ignore xenspecific business sharing memory telling client assume client mapped memory ready go basic tla concept take first look tla concept notation using simplified version vchan tla come excellent documentation try make full tutorial hopefully able follow rest blog post reading consider single direction channel eg clienttoserver variable state behaviour variable tla programmer expects something change time example use buffer represent data currently transmitted also add variable useful specification use sent represent everything senderside application asked vchan library transmit got everything receiving application received variable got buffer sent state tla represents snapshot world point give value variable example got h buffer sent hi state reminder state also includes everything else world variable care state state got buffer sent â â â â h h h â h h hi hi â hi ih â hi behaviour sequence state representing possible history world example behaviour one want basic idea tla specify precisely behaviour want want state expression expression evaluated context state example defines integrity state expression true whenever got far match wanted send take first element message take subseq everything except first element message drop subseq len integrity take sent len got got integrity true state except added helper operator take drop sequence tla confusing indexed rather easy make offbyone error operator use length agree python syntax would written something like def integrity return ssentstartswith sgot temporal formula expression evaluated context complete behaviour use temporal operator include supposed look like square supposed look like diamond f true expression f true every point behaviour f true expression f true point behaviour message send eventually arrive one way express availability x nat len sent x len got x tla syntax bit odd rather like latex surprising lamport also latex mean rendered upsidedown say every number x always true sent x byte eventually received least x byte pattern f g common enough shorter notation f g read always lead availability also written availability x nat len sent x len got x checking length availability combined integrity enough ensure eventually receive want ideally like ensure every possible behaviour vchan library satisfy temporal formula property property availability integrity way eventually start able tell one though still think would easier case forget explain syntax summary tla list action hopefully easy see property defines property want user vchan would happy see thing rely provide much help someone trying implement vchan tla provides another way specify behaviour action tla expression evaluated context pair state representing single atomic step system example read len buffer got got buffer buffer unchanged sent read action true step step transfer data buffer got unprimed variable eg buffer refer current state primed one eg buffer refer next state strange notation using form bulleted list rather infix operator indentationsensitive tla also support list way sequence concatenation python empty sequence python unchanged sent mean sent sent python might look like def read current next return len currentbuffer nextgot currentgot currentbuffer nextbuffer nextsent currentsent action correspond closely code temporal formula talk next state related current one action allows one thing reading whole buffer c implementation vchan receiving application provide buffer size library read enough byte fill buffer model need slightly flexible version read e n len buffer got got take buffer n buffer drop buffer n unchanged sent say step read step n range length buffer transferred n byte buffer e mean exists write action defined similar way constant buffersize byte write e seq byte buffer buffer len buffer buffersize sent sent unchanged got constant defines parameter input specification constant sense change state write operation add message buffer also add copy sent talk system seq byte set possible sequence byte excludes empty sequence step combined system either read step write step next read write also need define valid starting state algorithm look like init sent buffer got finally put together get temporal formula algorithm var got buffer sent spec init next var notation next var next bracket subscript var mean next unchanged var using init state expression temporal formula mean must true first state behaviour action var mean action var must true step tla syntax requires var subscript thing going world beside algorithm must always possible take step without algorithm anything spec defines behaviour like property way make obvious implement protocol correctness spec definition spec property make sense check every behaviour spec satisfies property python term want check behaviour b satisfy def specok b return spec b false property b ie either b behaviour could result action algorithm satisfies property tla notation write specok spec property ok behaviour allowed property spec example behaviour go straight got sent got hi sent hi one step meet requirement behaviour spec real implementation may restrict spec example consider behaviour state got buffer sent â hi hi h hi hi â hi sender sends two byte reader read one time behaviour c implementation reading application ask library read buffer however behaviour ocaml implementation get choose much data return application return byte together fine need show ocamlimpl spec spec property deduce ocamlimpl property course key purpose specification need check implementation implement specification implementation directly provides desired property might seem strange implementation allow specified behaviour fact even trivial specification spec false considered correct implementation property bad behaviour behaviour ok algorithm running must behaviour even behaviour nothing user library responsible checking use eg ensuring init condition met algorithm without behaviour corresponds library could never use one go wrong running model checker come fun part ask tlc tla model checker check spec property asking toolbox create new model called mine specok setting spec prompt value buffersize used various thing fix check write tlc first try get every possible seq byte infinite set defined msg seq byte changed write use msg added alternative definition msg model send message limited length fact replacement msg ensures sent always incrementing sequence enough check property much quicker checking every possible message system keep sending forever added state constraint model len sent tell tlc stop considering execution becomes false model run successfully nice feature tla instead changing specification make testable keep specification correct override aspect model specification say send message model check add integrity invariant check pass good doublecheck changing algorithm changed read clear buffer using buffer drop buffer instead n tlc report counterexample integrity sender writes buffer reader read one byte give reader read another byte give look like really checking wanted good careful accidentally added integrity check rather would interpreted temporal formula reported success true initial state one really nice feature tlc unlike fuzz tester breadthfirst search therefore find minimal counterexample invariant example therefore quickest way violate integrity checking availability complains use nat asking check every possible length replaced nat availabilitynat overrode model complains property show example sender wrote data reader never read problem next var always allows u nothing fix specify constraint wfvars action say stop forever action always possible never happening updated spec require read action fair spec init next var wfvars read care needed specified wfvars next would forcing sender keep sending forever user vchan required worse would mean every possible behaviour system would result sent growing forever every behaviour would therefore hit len sent constraint tlc consider mean tlc would never check actual behaviour availability report success would meaningless changing read require n len buffer quick way see tlc actually checking availability complete spec far source real vchan simple spec algorithm limitation one obvious simplification buffer sequence byte transit whereas real system ring buffer made array byte along producer consumer counter could replace three separate variable make explicit however ring buffer xen well understood feel would make specification clearer include serious problem spec assumes way perform read write operation atomically otherwise real system would behaviour covered spec implement spec correctly need kind lock real vchan protocol complicated spec avoids need lock real system shared state buffer added extra variable spec item shared state c code along initial value senderlive true sender set false close connection receiverlive true receiver set false close connection notifywrite true receiver want notified next write datareadyint false sender signalled receiver event channel notifyread false sender want notified next read spaceavailableint false receiver notified sender event channel datareadyint represents state event port sender make xen hypercall set wake interrupt receiver guess sending event somewhat slow notifywrite system used avoid sending event unnecessarily likewise spaceavailableint event port algorithm understanding protocol sending side sending application asks send byte check whether receiver closed channel abort check amount buffer space available enough set notifyread receiver notify u also check space case changed setting flag space write much data buffer notifywrite flag set clear notify receiver write wrote everything return success otherwise wait notified space check whether receiver closed channel abort otherwise go back step receiving side receiving application asks u read amount data check amount data available buffer much requested set notifywrite sender notify u also check space case changed setting flag data read amount requested notifyread flag set clear notify sender new space return success application even get much requested otherwise data check whether sender closed connection connection still open wait notified data go back step either side close connection clearing flag signalling side assumed also processlocal way close operation notify side currently blocked make expressing kind stepbystep algorithm easier tla provides programminglanguagelike syntax called pluscal translates pluscal tla action confusingly two different syntax pluscal pascal style c style mean search example web chance work using flavour started pascal one first example found switched cstyle later compact attempt describing sender algorithm pluscal fair process senderwrite senderwriteid variable free idea much free space available msg data nt sent yet sent everything asked send senderready true senderlive receiverlive goto done else msg msg sent sent msg remember wanted send senderwrite true free buffersize len buffer senderrequestnotify free len msg goto senderwritedata else notifyread true senderrechecklen free buffersize len buffer senderwritedata free buffer buffer take msg min len msg free msg drop msg min len msg free free senderchecknotifydata notifywrite notifywrite false atomic testandclear sendernotifydata datareadyint true signal receiver msg goto senderready else msg goto senderready senderblocked await spaceavailableint senderlive senderlive goto done else spaceavailableint false sendercheckrecvlive receiverlive goto done label eg senderrequestnotify represent point program action happen everything two label considered atomic checked every block code label access one shared variable mean real system see state consider toolbox provide help check manually senderready label represents state client application yet decided send data label tagged indicate fairness apply protocol require application keep sending data forever step fair decided send something keep going taking step senderready senderwrite corresponds vchan write function called argument msg say could message set msg tla also contains choose operator look like might thing use saying tlc check possible message use choose saying matter message tlc try always try one term specification choose would say application ever send one particular message without telling message senderwritedata set free obvious reason reduce number state model checker need explore since care value point code little awkward put thing else branch would naturally go whole block translator let use semicolon also bit confusing pluscaltotla translator requires closing brace place pdf generator mess indentation include code block starting senderrequestnotify get translated tla action senderrequestnotify pc senderwriteid senderrequestnotify free len msg pc pc except senderwriteid senderwritedata unchanged notifyread else notifyread true pc pc except senderwriteid senderrechecklen unchanged senderlive receiverlive buffer notifywrite datareadyint spaceavailableint free msg sent want got pc mapping process id label process currently executing senderrequestnotify performed senderwriteid process senderrequestnotify label afterwards pc senderwriteid either senderwritedata senderrechecklen enough space whole message code receiver fair process receiverread receiverreadid variable amount data think buffer contains want amount data user want u read got pseudovariable recording data ever received receiver recvready receiverlive n maxreadlen want n recvreading true len buffer recvgotlen want goto recvreaddata else notifywrite true recvrechecklen len buffer recvreaddata got got take buffer min want buffer drop buffer min want want recvchecknotifyread notifyread notifyread false atomic testandclear recvnotifyread spaceavailableint true goto recvready return success else goto recvready return success else senderlive receiverlive goto done recvawaitdata await datareadyint receiverlive receiverlive want goto done else datareadyint false quite similar recvready corresponds state application yet called read take n maximum number byte read argument store local variable want note use c library blocking nonblocking mode blocking mode write read wait data sent received nonblocking mode return special code application indicating need wait application waiting call library think specification cover case depending whether think senderblocked recvawaitdata representing code inside outside library also need way close channel clear looking c header exactly allowed think multithreaded program called close function write function blocked would unblock return happened call wrong time would try use closed file descriptor fail read wrong one guess single threaded use nonblocking mode want cancel thing mean sender close senderready senderblocked similarly receiver situation ocaml code cooperatively threaded close operation called blocked idle however decided make specification general allow closing point modelling closing separate process fair process senderclose sendercloseid senderopen senderlive false clear liveness flag sendernotifyclosed datareadyint true signal receiver fair process receiverclose receivercloseid recvopen receiverlive false clear liveness flag recvnotifyclosed spaceavailableint true signal sender process start closing finish initial label tagged disable fairness ok keep vchan open forever slight naming problem pluscal translator name action generates starting state action senderopen action move senderopen label senderopen action actually close connection finally share event channel buffer going direction might get notification nothing u ensure handle added another process send event time process spuriousinterrupts spuriousid spurious true either spaceavailableint true datareadyint true eitheror say need consider possibility process marked fair rely interrupt coming handle happen testing full spec pluscal code written speciallyformatted comment block press ctrlt generate update tla translation running model checker aware tla toolbox bit unreliable keyboard shortcut typing editor always work shortcut ctrls save sometimes get disconnected think cycle really checking old version avoid always running model checker keyboard shortcut since always seems fail time others focussing different part gui clicking back editor fix everything anyway running model new spec show integrity still ok however availability check fails following counterexample sender writes buffer sender close connection receiver close connection process come stop data never arrived need update availability consider effect closing connection point unsure vchan intended could say availability x availabilitynat len sent x len got x receiverlive senderlive pass vchan describes like unix socket write unix socket close still expect data delivered actually tried availability x availabilitynat x len sent senderlive pc senderwriteid senderready len got x receiverlive say sender write operation completes successfully back senderready point sender closed connection receiver eventually receive data close end would expect behave tlc report new spec satisfy giving example simplified step total receiver start reading find buffer empty sender writes data buffer return senderready sender close channel receiver see connection closed stop bug without specification impossible say maybe vchan never intended ensure delivery sender closed end case happens unlucky scheduling receiving application call read sender closed connection data available c code return data case sender happens close connection receiver checked buffer check close flag happens also easy fix changed code receiver final check buffer giving else senderlive receiverlive recvfinalcheck len buffer want goto done else goto recvreading change sure data sent connection open always delivered provided receiver close connection spotted issue reviewing code earlier well done note tlc find problem temporal property availability necessarily find shortest example first changed limit sent len sent added action constraint spuriousinterrupts get simpler example byte sent spurious interrupt odd thing noticed couple odd thing thought mention first notifywrite initialised true seemed unnecessary initialise false instead everything still work even initialise notifywrite true false allow either behaviour thus test old program followed original version spec still work either behaviour nice advantage using specification language saying code becomes le useful build version code however spec sure existing program follow fact found qubesdb us vchan library different unexpected way instead calling read waiting libvchan say qubesdb block first case call read function get event document adding extra step start receiverread recvinit either goto recvready recommended qubesdb n maxreadlen want n goto recvawaitdata tlc show notifywrite start false second odd thing receiver set notifyread whenever enough data available fill buffer completely usually read operation provide buffer large enough largest likely message would probably make sense set notifywrite buffer completely empty checking current version algorithm changed specification allow either behaviour vchan work point specified vchan also checked least message byte long buffer size sound like much still checked distinct state behaviour step long would perfectly reasonable place declare specification blog post finished however tla interesting ability particular provides interesting technique help discover algorithm work start integrity would like argue follows integrity true initial state ie init integrity next step preserve integrity ie integrity next integrity would matter looking possible action make next checking one individually preserve integrity however integrity true example state got buffer sent satisfies integrity take read step new state instead argue take next step reachable state integrity difficult know whether state reachable without searching idea make stronger version integrity called integrityi want integrityi called inductive invariant first step fairly obvious began integrityi sent got buffer msg integrity said got prefix sent say specifically rest buffer msg data currently transmitted data yet transmitted ask tlc check init next var integrityi check invariant finding init state taking next step find reachable state also ask check integrityi next var integrityi thing starting state matching integrityi instead init created new model integrityi report technical problem start know type anything example choose initial value senderlive without knowing senderlive boolean added typeok state expression give expected type every variable message seq byte finitemessage l union n byte n l typeok sent message got message buffer finitemessage buffersize senderlive boolean receiverlive boolean notifywrite boolean datareadyint boolean notifyread boolean spaceavailableint boolean free buffersize msg finitemessage maxwritelen want maxreadlen buffersize also need tell possible state pc say label process pcok pc sw senderready senderwrite senderrequestnotify senderrechecklen senderwritedata senderblocked senderchecknotifydata sendernotifydata sendercheckrecvlive done sc senderopen sendernotifyclosed done rr recvinit recvready recvreading recvgotlen recvrechecklen recvreaddata recvfinalcheck recvawaitdata recvchecknotifyread recvnotifyread done rc recvopen recvnotifyclosed done sp spurious might imagine pluscal translator would generate also need override message finitemessage n n used otherwise enumerate possible message integrityi typeok pcok sent got buffer msg way tlc start finding real problem example showing integrityi next integrityi true first recvreaddata would outofbounds read buffer job explain valid state fix extra constraint integrityi typeok pcok sent got buffer msg pc receiverreadid recvreaddata len buffer note complains recvgotlen buffer want end recvreaddata buffer explain happen tlc search breadthfirst example find never state explain first state happen real system eventually get big ugly pile constraint think bit simply ended integrityi typeok pcok sent got buffer msg len buffer free buffersize len buffer pc senderwriteid senderwrite senderrequestnotify senderrechecklen senderwritedata senderblocked sendercheckrecvlive msg pc senderwriteid senderready msg good idea check final integrityi original specok model check really invariant summary integrity always true sent always concatenation got buffer msg fairly obvious senderready set msg appends thing sent step senderwritedata recvreaddata transfer byte start one variable end another although like local information variable might outofdate must least much data buffer sender process added removed sufficient ensure never outofrange read likewise free variable lower bound true amount free space receiver ever creates space therefore never write beyond free space think ability explain algorithm work shown example inductive property hold really nice feature tla inductive invariant useful first step towards writing proof think valuable even documenting algorithm process get explain reason believing work tried simple algorithm code seemed helpful note originally free constraint depending pc however algorithm set zero use turn always true integrityi match state even maximum sent length pass game play speed thing see using tlc check inductive invariance suggestion discovered writing proving integrity tla provides syntax writing proof integrates tlaps tla proof system allow checked automatically proving integrityi matter showing init integrityi preserved possible next var step consider action next individually long simple enough able prove recvreaddata action little difficult know want point extra work prove transferring byte work even though real system never therefore added extra condition integrityi want nonzero whenever use also condition free use completeness integrityi want pc receiverreadid recvchecknotifyread recvnotifyread recvinit recvready recvnotifyread done pc receiverreadid recvgotlen recvrechecklen recvreaddata pc senderwriteid senderwrite senderrequestnotify senderrechecklen senderwritedata free availability integrity quite easy prove trouble trying explain availability one way start would add availability property check integrityi model however take check property end example find may several step took find counterexample faster way algorithm deadlock sender receiver blocked state neither interrupt pending made new invariant say deadlock happen integrityi pc senderwriteid senderblocked spaceavailableint pc receiverreadid recvawaitdata datareadyint discovered obvious fact closing connection example senderlive flag set close thread done anything put together closeok obvious fact shutting connection closeok endpoint live iff close thread nt done anything pc sendercloseid senderopen senderlive pc receivercloseid recvopen receiverlive send receive loop nt terminate unless someone closed connection pc receiverreadid recvfinalcheck done receiverlive senderlive pc senderwriteid done receiverlive senderlive receiver closed connection get got signal pc receivercloseid done spaceavailableint pc senderwriteid sendercheckrecvlive done problem example tlc showed realised actually know algorithm deadlock intuitively seems clear enough sender put data buffer space notifies receiver receiver read notifies writer could go wrong process working information outofdate time sender decides block buffer looked full buffer might empty time receiver decides block looked empty might full maybe already saw work c code algorithm took figure eventually ended invariant form sendmayblock spacewakeupcoming receivemayblock datawakeupcoming sendmayblock true state may lead blocked without checking free space likewise receivemayblock indicates receiver might block spacewakeupcoming datawakeupcoming predict whether going get interrupt idea going block need sure woken bit ugly though eg datawakeupcoming datareadyint event sent pc senderwriteid sendernotifydata event sent pc sendercloseid sendernotifyclosed pc receivercloseid recvnotifyclosed notifywrite event requested receiverlive sender see receiver still alive pc senderwriteid senderwritedata free pc senderwriteid senderchecknotifydata pc senderwriteid senderrechecklen len buffer buffersize pc senderwriteid senderready senderlive len buffer buffersize pc senderwriteid senderwrite len buffer buffersize pc senderwriteid senderrequestnotify len buffer buffersize spacewakeupcoming len buffer buffersize senderlive pas model tested sending one byte decided try proof well work problem seems datawakeupcoming spacewakeupcoming really mutually recursive reader wake sender wake sender might blocked block ok though long receiver wake sender wake probably already figured thought document confusion occurred although process might outofdate information could fine long one moment one right last process update buffer must know full one must correct information given time enough avoid deadlock work either proof step see correct ask tlc show example eg stuck trying prove senderrequestnotify preserve receiver recvready buffer full receiverlive false ask example example pcok pc senderwriteid senderrequestnotify pc receiverreadid recvready receiverlive false len buffer buffersize create new model search example next var test long example several constraint use much larger model also ask check property false var mean show step starting example quickly became clear wrong quite possible neither process uptodate process see buffer contains x byte data sender sends byte receiver read z byte sender think x byte buffer receiver think x z byte neither correct original buffer small find counterexample real reason vchan work actually rather obvious know see earlier eventually occurred could make use got sent defined writelimit total number byte sender would write blocking receiver never anything defined readlimit total number byte receiver would read sender never anything else define limit correctly easy ask tlc check extra property running example used check readlimit behaves sensibly readlimitcorrect eventually receive readlimit promise wfvars receiverread availabilitynat readlimit len got receiverlive readlimit decrease decide shut readlimit readlimit receiverlive var receiverread step nt change read limit receiverread unchanged readlimit receiverlive var readlimit defined term process run property ideally tested model without fairness condition ie init next var otherwise fairness may force sender perform step still want allow step though show readlimit lower bound argue eg buffer eventually transfer byte receiver eventually read byte long sender eventually sends byte sender eventually send receiver read least receiver read sender sends least sender send reader read least byte always true point learning cautious trying proof added new model check idea one prevents sender ever closing connection prevents receiver ever closing reduces number state consider able check slightly larger model integrityi closeok reader stuck data available sender unblock readershouldbeunblocked sender going write writelimit len got len buffer len msg senderlive sender increase readlimit pc senderwriteid senderchecknotifydata notifywrite pc senderwriteid sendernotifydata readlimit len got len buffer sender notify u shutdown pc sendercloseid sendernotifyclosed writer stuck space available receiver unblock writershouldbeunblocked reader going read readlimit len got receiverlive reader increase writelimit pc receiverreadid recvchecknotifyread notifyread pc receiverreadid recvnotifyread writelimit len got buffersize receiver notify u shutdown pc receivercloseid recvnotifyclosed notifyflagscorrect process path blocked must set notify flag notifyflagscorrect say case flag still set interrupt sent process trigger interrupt managed use prove step preserved needed little extra finish receiver proof point finally spotted obvious invariant doubt saw along whenever notifyread still set sender accurate information buffer notifyread sender accurate information buffer writelimit len got buffersize flag cleared right pc receiverreadid recvchecknotifyread pretty obvious sender check buffer setting flag must accurate information point receiver clear flag reading buffer invalidates information dilemma obviously going matching property notifywrite add continue nearly done continued finished proof proved able prove nice thing quite easily theorem senderlive receiverlive pc senderwriteid senderready pc senderwriteid senderblocked spaceavailableint readlimit len got len buffer say whenever sender idle blocked receiver read everything sent far without help sender theorem senderlive receiverlive pc receiverreadid recvawaitdata datareadyint writelimit len got buffersize say whenever receiver blocked sender fill buffer pretty nice would possible make vchan system eg could send byte time still prove deadlock would always deliver data shown algorithm use whole buffer least theorem say long believe readlimit writelimit defined correctly proof complete went back deleted stuff readlimit writelimit started new rule notifyread notifywrite instead using writelimit len got buffersize indicate sender accurate information made new senderinfoaccurate return true whenever sender fill buffer without help avoids unnecessary arithmetic tlaps need lot help sender information accurate whenever going block buffer really full senderinfoaccurate accurate information len buffer free buffersize state going check buffer blocking pc senderwriteid senderready senderrequestnotify senderwrite senderrechecklen sendercheckrecvlive done pc senderwriteid senderrequestnotify free len msg signalled immediately wake next time try block spaceavailableint write data pc senderwriteid senderwritedata free len msg wo nt need block wrote data intended return without blocking pc senderwriteid senderchecknotifydata sendernotifydata len msg talking accuracy instead write limit also able include happy case treated possible problem sender use full buffer done change proof spec became much simpler line shorter remaining step trivial readlimit writelimit idea still seemed useful though found able prove thing eg still conclude even mention writelimit theorem senderlive receiverlive pc receiverreadid recvawaitdata datareadyint writelimit len got buffersize nice keep invariant proof simple still get result end initially defined writelimit number byte sender could write sending application wanted send enough data later changed actual number byte would write application try send otherwise packetbased sends write buffer enough space whole message writelimit could go eg think write another byte application decides write byte write anything limit theorem useful property would good confidence readlimit writelimit correct able prove useful lemma first receiverread step change readlimit long receiver closed connection theorem receiverreadpreservesreadlimit assume receiverlive receiverread prove unchanged readlimit give u good reason think readlimit correct receiver blocked read without help readlimit defined len got readlimit obviously correct case since read step preserve readlimit show readlimit correct case eg readlimit process anything end state receiver blocked readlimit len got really read total byte also able prove never decrease unless receiver close connection theorem readlimitmonotonic assume next receiverlive prove readlimit readlimit readlimit n always least n receiver ever block read least n byte able prove similar property writelimit feel reasonably confident limit prediction correct disappointingly actually prove availability using tlaps currently understands little temporal logic see tlaps limitation however could show system deadlock data transmitted ca nt get state sender receiver blocked wakeup pending theorem assume prove pc senderwriteid senderblocked spaceavailableint senderlive pc receiverreadid recvawaitdata datareadyint receiverlive suffices assume pc senderwriteid senderblocked spaceavailableint senderlive pc receiverreadid recvawaitdata datareadyint receiverlive prove false obvious notifyflagscorrect def notifyread def notifyflagscorrect notifywrite def integrityi qed def notifyflagscorrect senderinfoaccurate readerinfoaccurate def free def integrityi len buffer buffersize def senderinfoaccurate len buffer def readerinfoaccurate qed buffersizetype ca nt get state sender idle receiver blocked unless buffer empty data sent consumed theorem assume pc senderwriteid senderready senderlive pc receiverreadid recvawaitdata receiverlive datareadyint prove len buffer included proof show deadlock happen suffices assume happened show contradiction process blocked notifyread notifywrite must set process block without setting unset interrupt would pending blocked since notifyread still set sender correct thinking buffer still full since notifywrite still set receiver correct thinking buffer still empty would contradiction since buffersize zero deadlock process must keep getting woken interrupt mean interrupt keep sent send interrupt making progress writing buffer reading must keep making progress content argument experience tlaps toolbox come proof system need install separately instruction outofdate lot broken link may turned step dockerfile got partly installed asked tla group help noone else seemed know install either looking error message searching web program name finally managed get working december trouble installing try using docker image installed write proof toolbox press ctrlg ctrlg check success proof turn green failure failing step turn red also ctrlg ctrlg combination single step check step useful pretty slow take minute check complete specification tla proof done mathematical style write set proposition vaguely suggest thinking lead proof good building intuition bad reproducibility mathematical proof considered correct reader convinced depends reader case collection automated theoremprovers various timeouts mean whether proof correct depends fast computer many program currently running etc proof might pas one day fail next proof step consistently pas try individually consistently fail checked part whole proof step fails need break smaller step sometimes proof system clever immediately solves complex step example proof senderclose process represents sender closing channel preserve invariant lemma senderclosepreservesi senderclose suffices assume senderclose prove obvious integrityi def typeok def integrityi pcok def integrityi case senderopen use def senderopen unchanged pc senderwriteid pc receiverreadid pc receivercloseid def pcok pc sendercloseid sendernotifyclosed def pcok typeok def typeok pcok def pcok integrityi def integrityi notifyflagscorrect def notifyflagscorrect qed def senderinfoaccurate readerinfoaccurate closeok case sendernotifyclosed use def sendernotifyclosed unchanged pc senderwriteid pc receiverreadid pc receivercloseid def pcok pc sendercloseid done def pcok typeok def typeok pcok def pcok integrityi def integrityi notifyflagscorrect def notifyflagscorrect qed def senderinfoaccurate readerinfoaccurate closeok qed def senderclose step integrityi def integrityi say see integrityi true next step looking whole lemma really saying tlaps agrees time tlaps maddeningly stupid tell problem make thing go red example fails theorem assume pc pc except pc prove pc obvious trying say pc unchanged given pc pc except changed pc problem tla untyped language even though know mapping update pc enough apparently conclude pc fact mapping fix need theorem assume pc nat string pc pc except pc prove pc obvious extra pc nat string tell tla type pc variable found missing type information biggest problem proof automatically assume computer know type thing another example theorem assume new x nat new nat x min x prove min obvious trying remove x side equation problem tla know min number know whether normal law addition apply case tell though go red solution theorem assume new x nat new nat x min x prove min def min def min tell tlaps share definition min solver see min must natural number everything work another annoyance sometimes find right lemma use even tell exactly need extreme case lemma transferfacts assume new src new tlaps nt cope new varaible src new dst new new len src src message dst message dst take src drop src prove message len len src message len len dst unchanged dst src proof omitted lemma sameagain assume new src new tlaps nt cope new varaible src new dst new new len src src message dst message dst take src drop src prove message len len src message len len dst unchanged dst src transferfacts transferfacts state useful fact transferring data two variable prove quite easily sameagain identical every way refers transferfacts proof even one lemma consider one match assumption conclusion perfectly none solver could figure one eventual solution name bundle result work transferresults src dst message len len src message len len dst unchanged dst src lemma transferfacts assume new src new new dst new new len src src message dst message dst take src drop src prove transferresults src dst proof omitted lemma sameagain assume new src new new dst new new len src src message dst message dst take src drop src prove transferresults src dst transferfacts art using tlaps controlling much information share provers little failing provide definition min enough information find proof much providing definition transferresults get overwhelmed fail find proof bit frustrating work machine checked give confidence proof actually correct another perhaps important benefit machine checked proof decide change something specification ask recheck everything go cup tea come back highlighted red step need updated made lot change worked well tlaps philosophy concerned algorithm system spending time proving basic mathematical fact instead assert mathematical theorem need assumption theorem even find formal proof every step still use tlaps break step either prove think obvious enough require proof however able prove everything needed vchan specification within tlaps final specification little bit tidying end particular removed want variable specification like correspond anything ocaml implementation place algorithm us decide whether set notifywrite thought might wrong anyway changed recvgotlen want goto recvreaddata else notifywrite true recvgotlen either goto recvreaddata else notifywrite true notifywrite true always allows implementation set notifywrite want skip step long cover current c behaviour proposed c behaviour ocaml implementation also simplifies invariant even made proof shorter put final specification online specvchan also configured travis ci check model verify proof useful sometimes impatient recheck everything laptop pushing update generate pdf version specification make pdfs expression little easier read use proper symbol also break thing page highly annoying would nice could omit proof really useful trying edit rather see statement theorem original bug new understanding vchan see anything obvious wrong c code least long keep connection open firewall took look ocamlvchan first thing noticed someone commented memory barrier noting git log needed using filed bug anyway missing memory barrier strange thing saw behaviour read function claim implement mirage flow interface say read data available return fresh buffer containing however looking code actually return pointer directly shared buffer delay updating consumer counter next call read rather dangerous filed another bug read surprising behaviour however checked miragequbes code take buffer make copy immediately bug either also original bug report mentioned second timeout neither c implementation ocaml one timeouts time look qubesdb qubesdb accepts message either guest vm firewall local client connected unix domain socket basic structure true await vchan event local client data second timeout vchanreceivebuffer nonempty handlevchandata ready client handleclientdata suspicion missing vchan event discovering data buffer anyway due timeout looking code seem possible race condition local client asks send data handleclientdata sends data firewall using blocking write firewall sends message qubesdb time signal event firewalltodb buffer data qubesdb get event ignores blocking write still space dbtofirewall direction firewall update consumer counter signal another event buffer space blocking write completes qubesdb return main loop qubesdb go sleep second without checking buffer think cause bug though message firewall might sending qdbrespok message qubesdb discard message managed reproduce problem saw fact qubesdb make progress due second timeout try go back sleep another second immediately get woken message local client look like qubesdb sending update every second client qubesd asking send update every second looking qubesd log saw stacktraces libvirt failing attach network device read xen network device attachment specification check firewall implemented correctly kidding course specification maybe blog post inspire someone write conclusion user open source software encouraged look source code check correct pretty difficult without specification saying thing supposed often deal learning enough fix whatever bug working time decided try making proper specification instead making tla specification took rather long time quite pleasant hopefully next person need know vchan appreciate tla specification generally defines two set behaviour first set desirable behaviour eg data delivered correctly definition clearly explain user expect system second defines behaviour particular algorithm definition make easy see implement algorithm tlc model checker check behaviour acceptable least within defined limit writing specification using tla notation force u precise mean example prose specification might say sent eventually executable tla specification forced clarify happens connection closed would expected sender writes data close connection data would still arrive c implementation vchan always ensure tlc model checker find counterexample showing fail minute explain algorithm always work need find inductive invariant tlc model checker help presenting example unreachable state satisfy invariant preserve taking step must add constraint explain state invalid easy integrity invariant explains never receive incorrect data found much harder prove system deadlock suspect original designer system would find step easy presumably already know work found inductive invariant write formal machinechecked proof invariant always true although tlaps allow u prove liveness property directly able prove various interesting thing algorithm deadlock sender blocked receiver read everything sent receiver blocked sender fill entire buffer writing formal proof little tedious largely tla untyped language however nothing particularly difficult know work around various limitation proof checker might imagine tla would work small program like libvchan case matter deciding specify detail example specification give detail ring buffer work instead used single buffer variable represent specification larger system using vchan would model channel using sent got action transferred difference step tla toolbox rough edge one found troublesome keyboard shortcut frequently stop working temporal property violated tell one model explorer tooltips appear right mouse pointer preventing scrolling mouse wheel also like check regular basis seem time operation middle particularly complex proof checking operation sometimes suddenly pop box suggesting cancel job get back reading news however improving latest version get syntax error tell file error pressing delete backspace editing longer cause crash lose unsaved data general feel tla toolbox quite usable designing new protocol would certainly use tla help design tla integrate language type system even specification still need check manually code match spec would nice could check automatically somehow one final problem whenever write tla specification feel need explain first tla hopefully become popular problem go away update marek told state model network device one block device documented blkifh block device header file provided libvirt debugging help bug fixed
71,Lobsters,virtualization,Virtualization,Simple x86-64 VT-x Hypervisor with EPT Hooking,https://github.com/Gbps/gbhv,simple vtx hypervisor ept hooking,gbhv simple hypervisor framework gbhv simple powerful windowsbased vtx hypervisor proof concept intel vtx bluepill window patchguard gbhv vtx patchguard gbhv example gbhv ntcreatefile ept shadow hooking introduction intel vtxvmx vanderpool vtxvmx high privilege kernelmode ring ring low privilege usermode ring ring virtual machine monitor vmm vtx vmms vmx root mode vmx root mode vm exit vm resume vmx extended page table ept gbhv utilizes vmx vmx gbhv vmx vmx gbhv window window test mode dse bypass technique motivation gbhv vtx vmx gbhv design feature gbhv gbhv free opensource gbhv creative common attribution designed education simple fast gbhv clean organized gbhv full ept support hooking gbhv intel vmx vmx gbhv nehalem window ready gbhv window window kvm window gbhv linux uefi codebase layout gbhv vmmc core virtual machine manager vmcs vmcsc vmcsc virtual machine control structure vmcs vmx vmxc vmx amdv vmxdefsasm archc archdefsasm osh vmm window osntc osntc osh window exallocatepoolwithtag window entryc window vmmc utilc gbhv debug logging debugview exitc ept eptc ept ept hooking large page byte page utilized library gbhv gbhv phnt processhacker nt library window driver development kit reference gbhv simplevisor gbhv ksm phrack vol hypervisor rootkits intel software development manual license gbhv creative common attribution international greetz daax drew zbe reverse engineering discord carnegie mellon university,gbhv simple hypervisor framework gbhv simple powerful windowsbased vtx hypervisor proof concept written exercise help learn develop work intel vtx hardware virtualization technology project based original bluepill hypervisor technique subverts running baremetal o turning virtualized system mercy hypervisor running another operating system hypervisor able fully compromise integrity system intercepting privileged operation memory access o performs example window attempt verify integrity system tampering rootkits using builtin protection called patchguard show power hardware assisted hypervisor technology gbhv take advantage feature vtx stealthily hide code modification patchguard technique gbhv hook modify function data running operating system without ever triggering security integrity protection making incredibly powerful tool security research operating system example gbhv come bundled precompiled driver ready see action driver provides simple example hooking ntcreatefile api using ept shadow hooking block usermode apis act file contain substring testtxt image example trying create file named testtxt hypervisor intercepting denying process access introduction intel vtxvmx intel hardware assisted virtualization technology originally vanderpool later renamed vtxvmx set processor feature add support virtualized operating system without use typical ring protection design processor running modern operating system two main ring operation high privilege kernelmode ring ring low privilege usermode ring ring code running higher ring full privileged access code data ring old nonhardware assisted virtualization virtual machine monitor vmm would execute ring ring attempt intercept certain privileged action using slow binary translation mechanism invention vtx new mode operation introduced provide vmms privileged position guest operating system manages new processor mode named vmx root mode executes mode privileged ring sometimes informally known ring higher privileged mode hypervisor us privilege isolate multiple running operating system separate containerized environment still achieving close native processor execution speed central mechanism processor enters exit vmx root mode context switch known vm exit vm resume respectively guest operating system performs privileged operation vmm configured intercept processor save current state performs vmexit exit guest operating system root mode exit handler hypervisor perform operation high privilege mode handle exit condition resume back guest restoring processor context continuing execution kind processor switch feel familiar solid understanding interrupt serviced modern operating system longer release vmx new feature called extended page table significantly increased functional power hypervisors operating system ept hypervisors ability virtualize physical memory region using similar kind multilevel page table operating system use manage virtual memory allows hypervisor set define set memory protection region memory physical memory level without interaction operating system power underlying memory system give hypervisors total control code data currently executing operating system gbhv utilizes vmx particularly useful part vmx operation core higher privileged processor mode requirement mode used executing new operating system considering feature original motivation gbhv processor enters vmx mode instead configuring vmx support booting new operating system virtual processor instead setup contextual copy current operating system virtual machine begin enter new operating system instead enters current operating system guest way operating system actually hosting driver periodically executes higher privilege operating system seems complicated fact easier implement kind slim hypervisor implement fully functional hypervisor capable booting new system code structured way support operating system agnostic hypervisor future gbhv currently setup support modern version window project compiled window driver loaded unsigned driver test mode using dse bypass technique motivation gbhv learn indepth vtx one almost required read lengthy section virtualization intel software development manual idea behind technology fairly straightforward implementation hypervisor using vmx nothing trivial first time task truly enjoy power hardware assisted hypervisor one must configure vast number execution control special processor register ept table create exact virtual environment necessary continue stable operating system execution due complexity initial setup hypervisor often make sense hobbyist researcher rely simple core hypervisor build functionality fantastic open source hypervisor project available build last year ranging simple complex varying level support code quality intent gbhv provide high standard code quality hackability also documenting educating user made choice project hope user project need treat core hypervisor code black box instead able investigate learn internals feel confident modifying core code achieve project goal also hope user project much deep internals architecture developing design feature gbhv gbhv fully functional bluepill hypervisor window core feature designed aid security research free opensource gbhv licensed creative common attribution license give full freedom use modify code please long give appropriate credit designed education codebase follows fairly strict readable code style based nt code style comment documentation exhaustive designed teach reader help understanding choice made simple fast term size gbhv significantly smaller hypervisors minimal number exit guest designed framework extend bloat intentionally clean organized source file organized based general subsystem hypervisor naming scheme take similar style window kernel name also describes subsystem function part gbhv take full advantage awesome project wbenny turn tedious bit flipping c structure maximum readability also provides consistent naming scheme various numerical constant used architecture full ept support hooking unlike slim hypervisors gbhv come complete support ept hacking builtin clean simple function hooking interface perfect security research design choice result allaround cleaner codebase supporting legacy system often little gain researcher intel vmx hypervisor support amd chip virtualization technology amdv vmx best hobbyist support community also strong documentation intel gbhv run modern desktop server processor based intel nehalem series generation core released vast majority desktopserver chip used intel machine today currently supported window ready gbhv support version window window number fantastic opensource hypervisor project based around linux ecosystem kvm popular example due growing use hypervisors security product also growing need vast window support gbhv currently windowsonly codebase designed operating system agnostic plan introduce linux uefi support soon codebase layout one central goal gbhv clean organized source file organized based feature contributes total hypervisor vmmc core virtual machine manager entry exit point driver processor various mode go initial startup code processor found except code used configuring vmcs found vmcsc vmcsc code set virtual machine control structure vmcs beginning vmx operation complexity setup code take place endless structure setup vmxc contains code relevant vmx operation separated eventually support amdv vmxdefsasm contains important assembly routine relevant handling low level part hypervisor operation savingrestoring register context enteringexiting certain processor mode archc contains code query convert certain architectural value inline assembly used implement found archdefsasm osh implement mostly memory allocation feature rely underlying operating system vmm running case window currently supported o o feature implemented osntc osntc implement definition osh using window kernel function call example general purpose memory allocated using exallocatepoolwithtag function window kernel entryc entrypoint window driver pass vmmc utilc utility function including logging feature currently gbhv us debug logging print log operation combined debugview sort color log easier reading exitc implement core vmexit handler code guest o perform operation encounter error processor configured intercept hypervisor handle exit using function present exit handler fairly large case ept exit handler pas execution subsystem handling eptc code setting ept page table processor well feature support stealthy ept hooking kernel code memory system mapped default large page support splitting smaller byte page demand utilized library opensource library used gbhv awesome project pull constant structure information intel manual usable c format result gbhv remove huge amount bitflipping typically required interact processor addition constant structure used automatically documented link directly manual describes phnt processhacker nt library set nt api header file maintained interfacing window kernel project significantly reduces usage official window driver development kit known inconsistent version lack feature microsoft deems unsupported still useful u lightweight length disassembler used ept hooking code build inline code hook shadow memory reference hypervisor development community growing significantly last year lot really awesome project used help design implement gbhv simplevisor simple portable intel vtx specific hypervisor inspired quite design decision gbhv ksm asamy really simple lightweight hypervisor written c intel processor phrack vol hypervisor rootkits uty saman basis ept hooking methodology intel software development manual godbook intel desktop chip absolutely invaluable developing working architecture vtx license gbhv free opensource licensed creative common attribution international license grant full permission copy modify derive distribute commercialize portion code long reasonable credit given see license term detail greetz greetz daax drew zbe help motivation start finish project shoutout everyone reverse engineering discord project originally developed semesterlong project sponsored carnegie mellon university
72,Lobsters,virtualization,Virtualization,Setting up a simple multi-node libvirt VM cluster on CentOS 8,https://blog.doublej472.com/post/libvirt-cluster/,setting simple multinode libvirt vm cluster centos,libvirt cloudinit host machine specification need storage host configuration tweak match configuration virtual machine host configuration careful use ssh connect machine misconfigure networking need physical access machine console access fix make sure loop network network misconfigured may lose ssh session fast nt use base image directly documentation make sure user http,running homelab includes nearly identical computer acting libvirt virtual machine cluster current cluster running debian want try centos fairly new time writing high level cluster setup storage host running nfs server vm host running qemulibvirt shared nfs mount storage server cluster setup support livemigration vm host rapid deployment vms using cloudinit backed image type cluster ideally need least node virtual machine host similar identical cpu storage host store virtual machine hard drive base image minimum vm host need support type virtualization intel amd need tweak configuration use lowest common set virtualization technology restricting supported cpu instruction changing qemu cpu model get also away using node vm host acting storage host lose flexibility need restart vm host host machine specification post using setup vm host cpu gb ram gb o storage storage host vmstorage cpu gb ram gb o storage gb vm storage network configuration vmstorage host running centos virtual machine easily replicated real hardware machine also network subnet simplicity case going installation centos partially outside scope article partially using cloud image nt need installed first place later however need use static ip address network configuration dhcp ip address one machine change bad day nfs stop working storage host configuration first need configure storage host place storage virtual machine let see work vmstorage lsblk name maj min rm size ro type mountpoint sda disk part sdb disk rom o disk devsda vm storage disk devsdb let create partition devsdb span entire disk format xfs fast mature mount datavmstorage sudo mkdir p datavmstorage sudo parted devsdb gnu parted using devsdb welcome gnu parted type help view list command parted mklabel gpt parted mkpart vmstorage xfs parted q information may need update etcfstab sudo mkfsxfs l vmstorage blks data blks naming version log internal log blks realtime none simple oneliner add entry etcfstab automount drive system startup using uuids entry devsd change kernel version bios update hardware change etc tweak match configuration echo uuid sudo blkid uuid value datavmstorage xfs rw noatime noquota sudo tee etcfstab sudo mount datavmstorage long mount command nt show error working storage drive check available space drive df command df h datavmstorage filesystem size used avail use mounted datavmstorage storage drive setup export nfs need ip address vm host step sudo yum install nfsutils sudo systemctl enable nfsserverservice sudo systemctl start nfsserverservice need update etcexports file allow vmhosts mount vm storage directory nt actually need norootsquash option work using make management vm image easier vm host feel free remove tolerate potential security issue echo datavmstorage rw norootsquash nosubtreecheck rw norootsquash nosubtreecheck sudo tee etcexports sudo exportfs arv exporting datavmstorage exporting datavmstorage everything storage host virtual machine host configuration virtual machine setup identically hostname local ip address different first since putting vms network segment host machine need setup network bridge centos us networkmanager default networking daemon configuring careful use ssh connect machine misconfigure networking need physical access machine console access fix sudo nmcli con add type bridge ifname connection successfully added network device change network device sudo nmcli con add type bridgeslave ifname master connection successfully added also disable spanning tree protocol stp bridge speed network startup significantly make sure loop network ca nt remove loop network need leave stp enabled sudo nmcli con modify bridgestp setup ip configuration like primary networking device along dns setting nt know put nt need set would want home network us domain network set use sudo nmcli con modify sudo nmcli con modify sudo nmcli con modify sudo nmcli con modify network bridge slave device used already bridge start simply activate network slave device bring bridge network misconfigured may lose ssh session sudo nmcli con might need wait second input returned even stp enabled check make sure everything configured correctly ip show broadcast multicast lowerup mtu qdisc fqcodel master state group default qlen linkether brd ff ff ff ff ff ff see master command bridge master interface also configuration ip show broadcast multicast lowerup mtu qdisc noqueue state group default qlen linkether brd ff ff ff ff ff ff inet brd scope global noprefixroute validlft forever preferredlft forever interface correct ip test connection outside world forcing ping googlecom snip googlecom ping statistic packet transmitted received packet loss time rtt minavgmaxmdev m everything look good make sure duplicate vm host different ip address need install configure libvirt centos libvirt split multiple package create default configuration nt install libvirtdaemonconfig package installing necessary feel free install package want sudo yum install libvirtdaemon libvirtadmin libvirtclient libvirtdaemonkvm libvirtdaemondriverqemu libvirtdaemondrivernetwork libvirtdaemondriverstorage libvirtdaemondriverstoragecore virtinstall nfsutils sudo systemctl enable libvirtd sudo systemctl start libvirtd need setup storage backend local directory datavms sudo mkdir p datavms sudo virsh pooldefineas name vmstorage type netfs sourcehost sourcepath datavmstorage sourceformat auto target datavms sudo virsh poolautostart vmstorage sudo virsh poolstart vmstorage see nfs directory mounted datavms get error permission check etcexports file storage host something probably wrong forgot run exportfs arv editing file point create working virtual machine manually take long want spin virtual machine fast need use cloudinit enabled image using debian cloudinit image example sudo curl l http touch file datavms need run following command reflected libvirt sudo virsh poolrefresh vmstorage nt use base image directly want create copy file vm either done cp normal copy qemuimg want create copyonwrite copy reduces disk space significantly storing difference base image vm point easier use script wrote provisioning vms especially want provision several vms rapidly vm requires iso file contains configuration vm automated nt need manually run process every time create vm also automated base image copy using qemuimg basic vm configuration sudo su yum install git git clone http cd libvirtscripts want use exact revision used blog run git checkout create vm base image script assumes dhcp server running network otherwise need specify network configuration manually metadata file created createlocalconfigsh file documentation case want create vm called testvm network domain make something nt one vcpus megabyte ram disk space using base image user debian ssh key installed random network mac address createvmsh testvm debian genmacaddresssh short amount time second case able login vm user debian specified ssh key ssh debian authenticity host ca nt established ecdsa key fingerprint sure want continue connecting yesno fingerprint yes warning permanently added ecdsa list known host linux testvm smp debian program included debian gnulinux system free software exact distribution term program described individual file usrsharedoc copyright debian gnulinux come absolutely warranty extent permitted applicable law debian testvm lastly want live migration work vm host form live migration tunneled direct need setup ssh key root user host allow host login ssh using key make sure root user sshkeygen set password want need type every migration cat sshidrsapub copy output command move host mkdir p ssh echo paste ssh public key sshauthorizedkeys sshkeygen cat sshidrsapub copy output command move host echo paste ssh public key sshauthorizedkeys running host sed spermitrootlogin nopermitrootlogin prohibitpassword etcsshsshdconfig systemctl restart sshd also need verify host key server done ssh root otherhostip answer yes host key verification prompt test live migration running command virsh list id name state testvm running sudo virsh migrate live verbose undefinesource persistent testvm qemussh migration virsh list id name state virsh list id name state testvm running live migration happening immediately afterwards able connect vm normally preserve ip address process kept ssh session vm open migration happening everything still work fine stp enabled bridge may take several second recognize changed hope enjoyed blog post certainly lot fun write fairly happy easy setup centos everything worked well notice issue feel free leave open issue create pull request http see next post
73,Lobsters,virtualization,Virtualization,Phantom OS Architecture,https://github.com/dzavalishin/phantomuserland/wiki/PhantomArchitecture,phantom o architecture,book phantom o internals general persistent persistent memory snapshot snapshot snapsync blockingsyscalls virtual machine virtualmachine kernel communication internalclasses objectkernelconnector kernelobjectinterface blockingsyscalls driver native code posix environment,please take look book phantom o internals detailed description general phantom basically virtual machine vm working huge persistent virtual memory part vm class class called internal implemented kernel giving vm code access low level kernel service persistent virtual memory completely orthogonal object space vm relation example object boundary virtual memory page etc implemented abrupt computer failure loss power leaf system coherent state application code vm bytecode level o shutdown either manual caused failure even seen application data never die continue work next o boot shutdown ever happened persistent memory snapshot phantom regular snapshot whole virtual memory snapshot done asynchronously without stopping world resulting snapshot synchronous memory snapped moment o personal time mean snapshot state captured like system stopped dumped disk run without stopping see also snapsync blockingsyscalls virtual machine phantom bytecode traditional stackmachine bytecode like java bytecode difference builtin user type method boundary level object even integer class instance specific support integer calculation though speedup thing supposed phantom bytecode represent java program java phantom bytecode converter written language supposed brought java bytecode directly writing specific language frontend c clr bytecode converter planned work progress yet see also virtualmachine kernel communication set internal class method implemented kernel class offer kernel interface object environment unlike java phantom class code either internal native java term bytecodelevel see also internalclasses objectkernelconnector kernelobjectinterface blockingsyscalls driver currently driver written c live kernel completely future release possibility write driver userland providing required kernel framework userland driver restricted communicate given kernel set hardware resource interrupthandling method guaranteed paged native code hiperformance code numbercrunching video sound processing etc requires good lowlevel access processor memory supposed phantom able run native code special binaryobjectbound thread one binary object provide code c content others available ds possibly esfsgs architecture object mapped thread address space let phantom execute highlyoptimised native code supposed support portability possible provide exactly native llvmlevel code environment posix environment simple posix subsystem phantom persistent yet example quake application compiled posix subsystem
74,Lobsters,virtualization,Virtualization,User Mode Linux 5.2,https://www.researchut.com/blog/user-mode-linux-52/,user mode linux,user mode linux sorted quick user mode linux aka uml user process colinux colinux xming pulseaudio virtio user mode linux networking virtualizaiton container uml tuntap daemon mode find simple clean way get comment setup ready blog see also,user mode linux user mode linux version uploaded debian unstable soon available supported architecture upload took time usual ran build time failure caused newer pcap library thanks active upstream developer got sorted quick longer run may much better fix user mode linux aka uml one initial virtualization technology linux provided still work supportedmaintained running linux kernel single unprivileged user process similar project colinux port linux kernel microsoft window used recommend people familiar microsoft window environment conceptually similar uml colinux xming pulseaudio delight see gnulinux based application run efficiently microsoft window year ago unfortunately last time checked colinux seem maintained user mode linux large userdeveloper base despite part linux kernel kept fairly well maintained good news last year uml active maintainersdevelopers project expect see parity term feature performance number eventually thing like virtio could definitely bring lot performance improvement uml much wider user acceptance ultimately quote debian package description package usermodelinux version builtusing linux status install ok installed priority extra section kernel maintainer user mode linux maintainer teamuml trackerdebianorg installedsize mb depends recommends umlutilities suggests xterminalemulator rootstrap usermodelinuxdoc slirp homepage http usermodelinuxsourceforgenet downloadsize unknown aptmanualinstalled yes aptsources varlibdpkgstatus description usermode linux kernel usermode linux uml port linux kernel system call interface provides kind virtual machine run linux user process another linux kernel useful kernel development sandbox jail experimentation many thing package contains kernel executable program associated kernel module user mode linux networking maintaining user mode linux debian couple year one area still waste lot time time networking today major virt technology virtualizaiton container uml simplicity keeping uml separate type need prefer keeping single bridge laptop different type technology talk access network keeping everything bridge get focus one entryexit point firewall monitoring trouble shooting etc today easily virtualbox talk local bridge libvirtqemu talk local bridge docker systemdnspawn also challenge come uml setup separate tun interface make uml talk using tuntap daemon mode host nat get talk internet ideally would like simply tell uml bridge device associate networking looked vde found wrapper vdeq something like uml could simplify thing lot uml also vde mode wherein attach look similar already provide umlutilities tuntap daemon mode curious user mode linux user simplified way get networking set ideally setup debian networking ifup script systemdnetworkd would really appreciate could drop note email find simple clean way get comment setup ready blog see also
75,Lobsters,virtualization,Virtualization,You cannot cURL under pressure,https://blog.benjojo.co.uk/post/you-cant-curl-under-pressure,curl pressure,oct curl pressure curl winhttp urlsession tonns stuff look home page defunct http r twitter infrastructure controlling load qemu vulnerability keep demand feng tang talk slide linux plumber conference buildroot catching connection user networking slirp redirect giving every tor hidden service address auto scaling http githubcombenjojoyoucantcurlunderpressure rest blog r feed twitter,oct curl pressure curl wonderful http plumbing tool power lot command line debugging bash script also exists strong foundation application form libcurl scale adoption libcurl curl actually remarkable mostly kept date new protocol ensuring relevance maintained putting bluntly really better tool unix like land making httphttps request curl window guess winhttp osx urlsession scope creep curl also something behold program tonns stuff look home page dict file ftp ftp gopher http http imap imaps ldap ldaps rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp curl support ssl certificate http post http put ftp uploading http form based upload proxy cooky userpassword authentication basic plain digest ntlm negotiate kerberos file transfer resume proxy tunneling holy shit lot rfc implemented help page fully loaded curl install understandably long curl help wc l curl manual wc l curl many feature general mass totally unknown let alone use got could game show style challenge brought back memory game defunct made called javascript pressure sadly content gone internet archive hold functioning copy http could could turn curl manual page game well need think anymore present play interested work technical write infrastructure behind game stopping feel free keep track future shenanigan using blog r following twitter infrastructure game actually quite basic boil flow diagram prevent user tripping eachother making environment dirty every time user completes challenge switched new vm way work internally single vmrouter take main websocket connection hold game state client talk number copy testsupervisor testsupervisor hold number booted vm order quickly serve demand challenge vm used user killed along filesystem new vm booted place prevent cross contamination controlling load nasty habit past making blog post interactive element feature backends keep even though blog cache hit rate keep going recent case wrote qemu vulnerability site incoming visitor rushing try site asking friend compute capacity hurry keep demand since game requires cycling lot vms slashdot effect could really lethal post spent time round help thing run smoothly one big bottleneck booting vms spent considerable amount time tweaking qemu parameter linux kernel config try cut driver anything else slowing state getting system booted shell ended taking dmesg dump moving spreadsheet highlight stage taking long time fool proof method kernel stuff async boot however case ended taking second boot shell second boot shell change ended switch virtionet since intel driver take second start switch idesata virtio block device compile sata driver since take sometimes upwards even sata device pas host devurandom virtiorng remove hid driver relate serial found feng tang talk slide linux plumber conference enlightening getting boot time second boot time without kvm acceleration want enable kvm since nervous giving access possibly random user internet kvm acceleration boot usable shell roughly millisecond giving built buildroot ended nice small rootfs kernel image end root yccup homeproxytest l alh bzimage rwr r root root oct bzimage rwr r root root oct catching connection since small vms fundamentally need network access work correctly creativity needed ensure thing could remain secure player sabotage player easy manage need able attribute connection individual vms solution vms tuntap device attached bridge would require giving qemu process root short amount time something really want case qemu layer breached instead stuck using user networking slirp qemu using redirect target redirect outgoing connection qemu back testsupervisor handling iptables rule pretty simple used kind setup giving every tor hidden service address post iptables nat n proxytest iptables nat proxytest p tcp dport j redirect toports iptables nat proxytest p tcp dport j redirect toports iptables nat proxytest p tcp dport j redirect toports iptables nat proxytest p tcp dport j redirect toports iptables nat proxytest p tcp dport j redirect toports iptables nat proxytest p tcp j redirect toports iptables nat proxytest p udp j redirect toports iptables nat output p tcp owner uidowner proxytest j proxytest iptables nat output p udp owner uidowner proxytest j proxytest use proc pid fd track connection owner single vm process using check challenge suppose route correct testing logic logic get little ugly ftp protocol deal multiple connection one control socket another data socket auto scaling since system would easily get overwhelmed vmrouter ability spawn system case dire need work little homemade pdu controlled dhcppxe boot cluster made back use small brick sized pc started shut automatically meet demand traffic surge like blog post find code power backend github http githubcombenjojoyoucantcurlunderpressure enjoyed may enjoy rest blog keep date serious nonserious stuff using r feed following twitter next time
76,Lobsters,virtualization,Virtualization,Troy's Breadboard Computer,https://cpu.visualrealmsoftware.com/,troy breadboard computer,video source code http githubcomvisrealmvrcpu license mit,video breadboard computer triangular number breadboard computer emulator source code source code used project available github http githubcomvisrealmvrcpu license code licensed mit license
77,Lobsters,virtualization,Virtualization,Nanos 0.1.20 has Initial T2 (xen) Support,https://github.com/nanovms/nanos/releases/tag/0.1.20,nanos initial xen support,reload reload,trivial mmap runtime test missing runtimetests rule perform action time signed another tab window reload refresh session signed another tab window reload refresh session
78,Lobsters,virtualization,Virtualization,EasyOS: An Experimental Linux Distribution,https://easyos.org/,easyos experimental linux distribution,,
79,Lobsters,virtualization,Virtualization,LXD to get support for manging and creating virtual machines,https://github.com/lxc/lxd/issues/6205,lxd get support manging creating virtual machine,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
80,Lobsters,virtualization,Virtualization,Linux userspace x86 emulator targeted at ARM Linux devices,https://github.com/ptitSeb/box86,linux userspace emulator targeted arm linux device,zydis library pi lab channel http compiling usage version history note platform note unity game emulation http githubcomunitytechnologiesmono note wine final word,linux userspace emulator twist let run linux program game linux like arm host system need littleendian need subsystem run build useless system also need toolchain build toolchain support compile get error typically get marm recognized us native version system library like libc libm sdl opengl easy integrate use performance surprisingly high case game need opengl arm platform solution like usually necessary integrates dynarec dynamic recompiler arm platform providing speed boost time faster using interpreter many game already work example worldofgoo airline tycoon deluxe ftl many gamemaker linux game also run fine long list among undertale risk rain cook server delicious serious developing install ccache activate support cmake project use ccmake example enable trace ie dumping stdout individual instruction executed dump register also need zydis library available system internal opcodes use part realmode emulator library see copyright detail video first airline tycoon deluxe heretic running gigahertz openpandora second one use dynarec next bittriprunner neverwinter night running odroid without dynarec last shovel knight video itotaljustice freedom planet video djazz also without dynarec find many video pi lab channel compatibility list http logo icon made grayduck thanks compiling compilation instruction found usage environment variable avaiable control behaviour see variable note dynarec us mecanism memory protection segfault signal handler handle jit code mean want use gdb debug running program use jit code like many normal segfaults triggering suggest use something like handle sigsegv nostop gdb stop segfault maybe put breakpoint inside mymemprotectionhandler signalsc want trap segfaults version history change log available note platform work directly translating function call host system host system one running need library nt include translation basically run example platform need build arm also need chroot library also note even day one able run binary platform still need see chroot run binary fact case actual linux note unity game emulation running unity game hit miss unity us mono us signal well emulated enough runtime embedded main binary solution would use native version libmono library used unity found http githubcomunitytechnologiesmono need built source wrapping lib tricky done solution emulate everything tricky part emulate jit code emitted mono however new protected memory mechanism implemented running correct performance also note game require opengl tricky provide arm sbc singleboard computer tl dr mono game work require high opengl profile speed one running correct note wine wine partly supported wine integreted program run annd window program game run fine nt forget window game use may require complete opengl driver high profile possible backend issue wine also vulkan wrapped usable yet even supported hardware final word use project please nt forget mention
81,Lobsters,virtualization,Virtualization,bhyvearm64: CPU and Memory Virtualization on Armv8.0-A,https://papers.freebsd.org/2019/bsdcan/elisei-bhyvearm64_cpu_and_memory_virtualization_on_armv8.0_a/,cpu memory virtualization,cpu memory virtualization alexandru elisei,cpu memory virtualization alexandru elisei alexandruelisei gmailcom bhyve hypervisor working porting architecture port called present current status project architecture hypervisor well used hardware feature designed virtualization provide guest abstracted view processor used third cpu execution mode exception level restrict guest memory region choosing used extra address translation step called stage translation virtualization allows host computer run multiple virtual machine family processor provides various hardware feature make virtualization efficient removing reducing overhead usually associated running virtual machine bhyve hypervisor originally created implement virtualization platform working porting bhyve architecture port called present current status hypervisor feature implemented used testing current limitation follows architecture bhyve us three user space program create run terminate virtual machine bhyveload bhyve bhyvectl respectively hypervisor implemented kernel module named vmm loaded runtime cpu two different execution mode called exception level separate nonprivileged user process kernel aid virtualization third exception level exception level added optional hardware extension execution mode provides needed separation guest host operating system hypervisor need control memory location guest virtual machine able access historically done emulating page table software incur significant hardware penalty reduce overhead arm implemented second stage address translation called stage translation part virtualization extension use feature isolate region memory made available virtual machine
82,Lobsters,virtualization,Virtualization,A PlayStation 1 emulator in C#,https://github.com/BluestormDNA/ProjectPSX,playstation emulator c,projectpsx projectpsx c coded emulator original sony playstation playstation note compatibility note using emulator left right w enter space q e screenshots quick faq intel cpu nintendo gameboy http problemkaputtdepsxspxhtm http discordggdkmjaes,projectpsx projectpsx c coded emulator original sony playstation playstation personal project scope learn hardware development emulator projectpsx do nt use external dependency us rather simplistic c code moment following implemented cpu mips coprocessor geometry transformation engine gte coprocessor bus interconnect component gpu command implemented software polygonal rasterizer cdrom implemented common command dma transfer timer digital controller support currently hardcoded keyboard basic bios mips disassembler mdec video decoding bpp fmv display screen bpp support memory card support implemented dma resumable transfer cdrom proper timmings spu note valid playstation bios needed run emulator default bios development others like reported work compatibility emulator early development constant rewrite somehow although limitation game already work like ridge racer castlevania symphony night final fantasy crash bandicoot spyro dragon tekken toshinden time crisis tobal vagrant story street fighter zero rockmanmegaman parasite eve others like final fantasy ix gran turismo boot random problem fixed note memory card file hardcoded memcardmcr root directory one new one generated save using emulator select bin file use cue file generate cd track feed cdrom bios expansion file hardcoded bus class power input mapped dpad dpad left left dpad dpad right right triangle w square x circle start enter select space q e screenshots quick faq use emulator play yes nt lot capable emulator work progress personal project aim learn emulator hardware implementation break emulation lot unimplemented hardware feature window weird color double game screen vram viewer includes texture color lockup table display buffer used playstation software used debugging purpose toggle pressing tab keyboard insert game nt work probably due implemented hardware incorrect implemented one mainly cdrom timmings get console tty bios output uncomment biosverbose tty function cpu main loop also dissasemble mips cpu instruction printregs current opcode rtps rtpt geometry transformation engine coprocessor command give wrong value test moment use common division original psx us fastest le accurate division mechanism based unsigned newtonraphson unr algorithm interested emulating hardware time started java c intel cpu used classic arcade space invader later nintendo gameboy wanted keep forward ended psx good library game mainly used martin korth psxspx documentation playstation hardware http problemkaputtdepsxspxhtm also people playstation channel emudev discord http discordggdkmjaes helpful winforms easiest way output fast prototyped somehow lasted intended idea let go away future looked alternative said im focused moment core aspect much ui winforms dependency thin easily changed point used gdi even sdl seems like net cross platform ui maybe need look onto meanwhile gon na create branch opentoolkit work sound start project guy boring job unrelated coding didnt want rest life started studying try change career eventually learned bit started code whatever made happy eventually got job android dev
84,Lobsters,virtualization,Virtualization,Exploiting Unprotected I/O Operations inAMD’s Secure Encrypted Virtualization,https://www.usenix.org/system/files/sec19-li-mengyuan_0.pdf,exploiting unprotected io operation inamd secure encrypted virtualization,,obj stream endstream endobj obj stream xڭz q um
85,Lobsters,virtualization,Virtualization,Use raw ZFS volume for VirtualBox guest,https://dev.to/mnohime/use-raw-zfs-volume-for-virtualbox-guest-45jg,use raw zfs volume virtualbox guest,jeos fatal flaw openindiana illumos distribution ip zone kvm zfs leverage raw device updated latest package get zfs encryption oracle vm virtualbox extension pack create guest zfs volume install guest iso image create snapshot disk send guest disk another zfs pool start guest encrypted volume concern future direction samsung pro ssd zfs virtualbox,ever run virtual guest platform like kvm xen hyperv vmware virtualbox probably think disk attached guest image file special format vhdx vmdk vdi lie somewhere disk host file system lesser known platform support storage option namely network file system nfs smb logical volume partition disk notably zfs volume filebased arrangement certainly value user experience convenient arrangement guest want rapidly create destroy care much anything else plain storage drawback one one relies virtualizationspecific design translate well one platform another someone tried convert image vmdk vhdx tried create instant jeoslike vm image vmware open source tool witnessed former case one may end fixedsize image latter case image booting slow virtual ide controller design may fatal flaw even think stick one platform interested platform interoperability may want use operating systemnative tool guest openindiana illumos distribution system component like ip package manager zone oslevel virtualization container kvm hw virtualization well integrated zfs advanced file system volume manager leverage feature like snapshot encryption thanks level integration openindiana run kvm guest zone thus make well isolated tenant host control resource interestingly virtualbox leverage raw device storage guest purpose zfs volume ideal device first show create virtualbox guest running zfs volume use zfs snapshotting feature save state guest later send guest another zfs pool finally run guest encrypted zfs volume want try system prerequisite host zfs file system use openindiana updated latest package get zfs encryption unices may well nt tried two zfs pool present rpool default one tank one use example virtualbox oracle vm virtualbox extension pack need installed working used version also need another system graphical interface display guest graphical console unless display host legend introduces user command introduces root command guesthostworkstation denotes environment command executed advise caution virtualbox guest write raw device using wrong volume may result data loss create guest zfs volume first root create rpoolvboxzonesmyvbox volume gb host zfs create rpoolvboxzones host zfs create v rpoolvboxzonesmyvbox root create virtualbox guest sata controller reserve port disk host vboxmanage createvm name myvbox register host vboxmanage modifyvm myvbox disk dvd cpu memory vrde vram usb nat ioapic apic acpi biosapicapic host vboxmanage storagectl myvbox name sata add sata controller intelahci bootable host vboxmanage storageattach myvbox storagectl sata port device type dvddrive medium host vboxmanage internalcommands createrawvmdk filename rpoolvboxzonesmyvboxmyvboxvmdk rawdisk devzvolrdskrpoolvboxzonesmyvbox last command creates passthrough vmdk image get attached guest reality nothing get written file devzvolrdskrpoolvboxzonesmyvbox volume used directly instead attach image guest host vboxmanage storageattach myvbox storagectl sata port device type hdd medium rpoolvboxzonesmyvboxmyvboxvmdk mtype writethrough start guest connect via rdp client rdekstop freerdp unix host vboxmanage startvm myvboxdisk type headless workstation xfreerdp v hostip see guest bootloader proceed install guest iso image disk screen installer see disk create snapshot disk record approximate time snapshot creating file timestamp arrangement create snapshot volume host zfs snapshot rpoolvboxzonesmyvbox first wait time rewrite timestamp power guest rollback first snapshot r option zfs let u rollback even older snapshot guest poweroff host zfs rollback r rpoolvboxzonesmyvbox first start guest check timestamp set one first snapshot hooray demonstrated virtualbox guest work zfs snapshot send guest disk another zfs pool let see send guest disk another zfs pool run guest poweroff host zpool list name size alloc free ckpoint expandsz frag cap dedup health altroot rpool online tank online host zfs send rpoolvboxzonesmyvbox zfs receive v tankvboxzonesmyvbox receiving full stream rpoolvboxzonesmyvbox head tankvboxzonesmyvbox head received stream second rewire passthrough disk point new location host vboxmanage storageattach myvbox storagectl sata port device type hdd medium emptydrive host vboxmanage closemedium disk rpoolvboxzonesmyvboxmyvboxvmdk delete host vboxmanage internalcommands createrawvmdk filename rpoolvboxzonesmyvboxmyvboxvmdk rawdisk devzvolrdsktankvboxzonesmyvbox raw host disk access vmdk file rpoolvboxzonesmyvboxmyvboxvmdk created successfully host vboxmanage storageattach myvbox storagectl sata port device type hdd medium rpoolvboxzonesmyvboxmyvboxvmdk mtype writethrough host vboxmanage startvm myvbox type headless waiting vm myvbox power vm myvbox successfully started boot guest notice disk device id match recorded one corrects actually wo nt warn next boot proved guest disk send another zfs pool successfully started start guest encrypted volume let see guest start encrypted zfs volume first create encrypted file system tankvboxzonesencrypted passphrase entered prompt host zfs create encryptionon keyformatpassphrase keylocationprompt tankvboxzonesencrypted enter passphrase reenter passphrase send stream new encrypted dataset host zfs send rpoolvboxzonesmyvbox zfs receive v tankvboxzonesencryptedmyvbox receiving full stream rpoolvboxzonesmyvbox head tankvboxzonesencryptedmyvbox head received stream second recreate guest passthrough disk point encrypted dataset host vboxmanage storageattach myvbox storagectl sata port device type hdd medium emptydrive host vboxmanage closemedium disk rpoolvboxzonesmyvboxmyvboxvmdk delete host rm rpoolvboxzonesmyvboxmyvboxvmdk host vboxmanage internalcommands createrawvmdk filename rpoolvboxzonesmyvboxmyvboxvmdk rawdisk devzvolrdsktankvboxzonesencryptedmyvbox raw host disk access vmdk file rpoolvboxzonesmyvboxmyvboxvmdk created successfully host vboxmanage storageattach myvbox storagectl sata port device type hdd medium rpoolvboxzonesmyvboxmyvboxvmdk mtype writethrough host vboxmanage startvm myvbox type headless waiting vm myvbox power vm myvbox successfully started prove really run encrypted volume let unload encryption key memory manually restarting host start guest host zfs unmount tankvboxzonesencrypted host zfs unloadkey tankvboxzonesencrypted host vboxmanage startvm myvbox type headless waiting vm myvbox power vboxmanage error could open medium rpoolvboxzonesmyvboxmyvboxvmdk vboxmanage error vd error verraccessdenied opening image file rpoolvboxzonesmyvboxmyvboxvmdk verraccessdenied vboxmanage error detail code nserrorfailure component mediumwrap interface imedium expected failed encrypted volume unreadable virtualbox let decrypt start guest host zfs loadkey tankvboxzonesencrypted enter passphrase tankvboxzonesencrypted host vboxmanage startvm myvbox type headless waiting vm myvbox power vm myvbox successfully started decryption guest start correctly three example created snapshot rolled back sent guest disk zfs stream another zfs pool started guest encrypted dataset thus demonstrated leverage oslevel file system feature virtualbox guest thanks fairly unknown virtualbox ability use plain storage device concern future direction unfortunately everything work ideally whatever try disk io raw zfs volume significantly lower io performance vdi disk global zone treat mostly baseline comparison run seqwr seqrd test mode fileio test sysbench benchmark old samsung pro ssd mlc disk seems show wear operation storage type global zone host vdi disk guest zfs dataset guest sequential write file mbsec mbsec mbsec sequential read file mbsec mbsec mbsec two thing concern zfs volume three time slower sequential write slower sequential read global zone vdi disk performance actually higher sic global zone first takeaway may mean unneeded fsync occurs layer second takeaway may mean something fishy happening synchronizing file underlying file system hypervisor side perhaps fsync ignored degree case number taken grain salt good show contrast various storage type potential limitation summarize turn level integration see kvm various illumos distribution met virtualbox seems necessary building block need investigated culprit io performance side zone added mix additional tenant isolation achieved especially virtualbox run root use zfs volume acknowledgement johannes schlüter zfs virtualbox blog post inspired write article
86,Lobsters,virtualization,Virtualization,Goodbye Docker: Purging is Such Sweet Sorrow,https://zwischenzugs.com/2019/07/27/goodbye-docker-purging-is-such-sweet-sorrow/,goodbye docker purging sweet sorrow,podman skopeo buildah podman podman user namespacing buildah buildah piece last year box skopeo skopeo podman buildah skopeo step move ubuntu podmancompose difference like might like one book learn bash hard way learn git hard way learn terraform hard way get docker practice code like,year removed docker home server apt purge dockerce triggered recurring incident faced docker daemon using cpu multiple core made host effectively unusable happened time likely due script got hand starting many container never really got bottom run command kill container restart daemon time daemon restart without kill figured enough enough anyway necessarily blame docker add force argument heard docker need daemon podman skopeo buildah three tool effort mostly pushed redhat everything need docker require daemon access group root privilege podman podman replaces docker command subcommands run push pull etc need daemon us user namespacing simulate root container need attach socket root privilege longstanding concern docker buildah buildah build oci image confusingly podman build also used build docker image also incredibly slow used lot disk space using vfs storage driver default buildah bud build using dockerfile much faster us overlay storage driver user namespacing allowing rootless build killer feature made want move wrote piece trying get rootless build going last year come box etcsubuid etcsubgid set ubuntu least skopeo skopeo tool allows work docker oci image pushing pulling copying image code three open source available podmanbuildahskopeo step move installing tool ubuntu lot easier month ago seem install runc independently instruction sure preexisting dependency first replaced instance docker cron ci job podman relatively easy ansible script anything else quick search github repos bedded could see anything else calling docker using sysdig catch reference sysdig grep w docker may slow system considerably performancesensitive happy nothing trying run docker could run apt remove dockerce actually purge case config needed everything deemed stable final cleanup could take place remove leftover source etcapt point docker apt reposremove docker group system delgroup dockerremove leftover file etcdocker etcdefaultdocker varlibdocker people asked docker compose use issue edit exists podmancompose project considered mature difference far aside daemon sudo access required noticed many difference build local user localcontainers rather global varlibdocker keeping general philosophy tool useroriented rather daemonoriented since home server one user using docker much issue big difference noticed podman pull downloads get layer parallel contrast docker know cause problem many image pulled concern like might like one book learn bash hard waylearn git hard waylearn terraform hard way get docker practice code like like loading related
87,Lobsters,virtualization,Virtualization,Nanos is Now Open Source,https://github.com/nanovms/nanos,nanos open source,nanos getting started ops buildingrunning ops ops ops building source mac build documentation doc site benchmark go gcloud rust gcloud nodejs aws nodejs gcloud test development running instruction http githubcomnanovmsops contributing pull request reporting bug tfs optional manifest debugging flag architecture debugging help manual networking setup build envs reference material feedback feedback form using nanos getting help nanosusers nanovmscom paid support plan,nanos nanos new kernel designed run one one application virtualized environment several constraint compared general purpose operating system window linux namely single process system support running multiple program concept user remote administration via ssh read nanos charter getting started please use ops orchestrator run application nanos unless plan hacking nanos buildingrunning highly encouraged use ops build run application using nanos unless planning modifying nanos ops provides sensible default user incorporates understanding appropriately best use nanos also currently highly coupled nanos running vm already bad idea need specify nt want hardware acceleration instance run nanos virtualbox mac slow hard configure build run mac linux nanos support kvm linux hvf osx currently acceleration ops facility deploy public cloud awsgce building source mac install homebrew usrbinruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstall grab dependency installs correct toolchain install uptodate qemu highly recommended running latest qemu otherwise might run issue brew update brew install nasm go wget ent brew tap brew install brew tap nanovmshomebrewqemu brew install nanovmshomebrewqemuqemu create chroot nt absolutely necessary mkdir targetroot cd targetroot wget http storagegoogleapiscomtestmisctargetroottargz tar xzf targetroottargz build make run noaccel documentation find documentation ops doc site benchmark effort transparency collect categorize document benchmark start listing aim reproducible contain much information possible go gcloud reqsec rust gcloud reqsec nodejs aws reqsec nodejs gcloud reqsec test run test make testnoaccel development running instruction nanos try running first example first make run try different target currently found example cp manifest file targetmanifest add code set target examplesmakefile targetmynewtarget make run may also wish use http githubcomnanovmsops develop locally case commonly used idiom simply copy required file appropriate release cp outputtoolsbinmkfs cp outputplatformpcbootbootimg cp outputplatformpcbinkernelimg contributing pull request accept pull request long conforms style stated goal may reject pr violate either condition planning spending day fix something probably wise approach topic issue planned fix commiting work also nanovms paid kernel engineer internal roadmaps wise check u first grabbing tkt ticket tagged lowpriority lower probability collision reporting bug please scan issue list first see already tracking bug please attach debugging output ops please provide configjson anything else allows u reproduce issue tfs tfs current filesystem utilized nanos optional manifest debugging flag thread tracing futextrace syscall tracing debugsyscalls stackdump fault read security architecture debugging help manual networking setup build envs reference material feedback using nanos take short survey help u grow project take minute help u feedback form using nanos using nanos project company organization feel free open pr list projectcompany getting help run public mailing list nanosusers nanovmscom general question like indepth help reach nanovms folk via drift email engineering need something done want immediate attention issue nanovms offer paid support plan
88,Lobsters,virtualization,Virtualization,Hypervisor From Scratch - Part 1: Basic Concepts & Configure Testing Environment,https://rayanfam.com/topics/hypervisor-from-scratch-part-1/,hypervisor scratch part basic concept configure testing environment,introduction vtx technology vanderpool vtx vmx v x pacifica secure virtual machine svm vtx amdv vtx hypervisor platform tool need windbg ida pro sysinternals debugview dbgprint creating test environment topic drvunload advanced option startup setting restart dbgprint sysinternals debugview access physical machine nested virtualization hyperv nested virtualization thought start intel software developer manual volume virtual machine monitor vmm guest software vmx root operation vmx nonroot operation vmx transition vm entry extended page table ept vm exit virtual machine control structure vmcs vmx instruction life cycle vmm software relatedworks http githubcomwenzelawesomevirtualization http reference http softwareintelcomenusarticlesintelsdm http http resourcesinfosecinstitutecomwritingawindowskerneldriver http http githubcomlordnoteworthycpuinternals http http,hello everyone welcome first part multipart series tutorial called hypervisor scratch name implies course contains technical detail create basic virtual machine based hardware virtualization follow course able create virtual environment get understanding vmware virtualbox kvm virtualization software use processor facility create virtual environment introduction intel amd support virtualization modern cpu intel introduced vtx technology previously codenamed vanderpool november pentium series cpu flag vtx capability vmx stand virtual machine extension amd hand developed first generation virtualization extension codename pacifica initially published amd secure virtual machine svm later marketed trademark amd virtualization abbreviated amdv two type hypervisor hypervisor type called bare metal hypervisor native run directly bare metal physical server type hypervisor direct access hardware type hypervisor operating system load hypervisor contrary type hypervisor type hypervisor load inside operating system like application type hypervisor go operating system managed o type hypervisor virtual machine run le efficiently slower type hypervisor even concept virtualization need different consideration vtx amdv rest tutorial mainly focus vtx intel cpu popular widely used opinion amd describes virtualization clearly manual intel somehow make reader confused especially virtualization documentation hypervisor platform concept platform independent mean easily run code routine linux window expect behavior cpu prefer use window easily debuggable least try give example linux system whenever needed personally linux kernel manages fault like gp exception try avoid kernel panic keep system better testing something like hypervisor cpurelated affair hand window never try manage unexpected exception lead blue screen death whenever manage exception thus might get lot bsodsby way better test platform platform last might definitely make mistake like wrong implementation misinformation forget mentioning important description say sorry advance make fault glad every comment tell mistake technical information misinformation enough let get started tool need visual studio wdk installed get window driver kit wdk best way debug window kernel mode affair using windbg available window sdk installed wdk default installing option probably install wdk sdk together skip step able debug o case window using windbg information hexrays ida pro important part tutorial osr driver loader downloaded use tool order load driver window machine sysinternals debugview printing dbgprint result creating test environment almost code tutorial run kernel level must set either linux kernel module window driver kit wdk module configuring vmm involves lot assembly code know run inline assembly within kernel project linux anything special case window wdk longer support inline assembly environment work problem previously might struggle creating simple inline project worry one post explained step step highly recommend seeing topic solve problem continuing rest part time create driver good article want start window driver kit wdk whole driver include ntddkh include wdfh include wdmh extern void inline void extern void inline void void drvunload pdriverobject driverobject ntstatus driverentry pdriverobject pdriverobject punicodestring pregistrypath pragma alloctext init driverentry pragma alloctext page exampleunload ntstatus driverentry pdriverobject pdriverobject punicodestring pregistrypath ntstatus ntstatus statussuccess uiindex pdeviceobject pdeviceobject null unicodestring usdrivername usdosdevicename dbgprint driverentry called rtlinitunicodestring usdrivername l devicemyhypervisor rtlinitunicodestring usdosdevicename l dosdevicesmyhypervisor ntstatus iocreatedevice pdriverobject usdrivername filedeviceunknown filedevicesecureopen false pdeviceobject ntstatus statussuccess pdriverobject driverunload drvunload pdeviceobject flag iotypedevice pdeviceobject flag dodeviceinitializing iocreatesymboliclink usdosdevicename usdrivername return ntstatus void drvunload pdriverobject driverobject unicodestring usdosdevicename dbgprint drvunload called rn rtlinitunicodestring usdosdevicename l dosdevicesmyhypervisor iodeletesymboliclink usdosdevicename iodeletedevice driverobject deviceobject two external function defined inline assembly code driver need register device communicate virtual environment usermode code hand defined drvunload use pnp window driver feature easily unload driver remove device reload create new device following code responsible creating new device rtlinitunicodestring usdrivername l devicemyhypervisor rtlinitunicodestring usdosdevicename l dosdevicesmyhypervisor ntstatus iocreatedevice pdriverobject usdrivername filedeviceunknown filedevicesecureopen false pdeviceobject ntstatus statussuccess pdriverobject driverunload drvunload pdeviceobject flag iotypedevice pdeviceobject flag dodeviceinitializing iocreatesymboliclink usdosdevicename usdrivername use window disable driver signature enforcement load driver microsoft prevents verified code run window kernel ring press hold shift key restart computer see new window click advanced optionson new window click startup settingsclick restarton startup setting screen press disable driver signature enforcement latest thing remember enabling window debugging message registry way get dbgprint result sysinternals debugview perform following step regedit add key hkeylocalmachinesystemcurrentcontrolsetcontrolsession managerdebug print filter add dword value named ihvdriver value reboot machine good go access physical machine thas ok use vmware virtualization product nested virtualization make sure update vmware latest version important vmware sometime problem nested virtualization special previous version make sure enable following feature vm also set vm bios instead uefi driver tested physicalmachine vmware nested virtualization hyperv nested virtualization hyperv different vmware many aspect therefore test hypervisor hyperv nested virtualization part describe modify hypervisor way used hyperv part able test hypervisor hyperv nested virtualization thought start keywords frequently used rest series know definition derived intel software developer manual volume virtual machine monitor vmm vmm act host full control processor platform hardware vmm able retain selective control processor resource physical memory interrupt management io guest software virtual machine vm guest software environment vmx root operation vmx nonroot operation vmm run vmx root operation guest software run vmx nonroot operation vmx transition transition vmx root operation vmx nonroot operation vm entry transition vmx nonroot operation extended page table ept modern mechanism us second layer converting guest physical address host physical address vm exit transition vmx nonroot operation vmx root operation virtual machine control structure vmcs data structure memory exists exactly per vm precisely one per vcpu virtual cpu managed vmm every change execution context different vms vmcs restored current vm defining state vm virtual processor vmm control guest software using vmcs vmcs consists six logical group gueststate area processor state saved guest state area vm exit loaded vm entry hoststate area processor state loaded host state area vm exit vmexecution control field field controlling processor operation vmx nonroot operation vmexit control field field control vm exit vmentry control field field control vm entry vmexit information field readonly field receive information vm exit describing cause nature vm exit found great work illustrates vmcs pdf version also available worry field explain clearly later part remember vmcs structure varies different version processor vmx instruction vmx introduces following new instruction invept invalidate translation derived ept invvpid invalidate translation based vpid vmcall call vm monitor vmclear clear virtualmachine control structure vmfunc invoke vm function vmlaunch launch virtual machine vmresume resume virtual machine vmptrld load pointer virtualmachine control structure vmptrst store pointer virtualmachine control structure vmread read field virtualmachine control structure vmwrite write field virtualmachine control structure vmxoff leave vmx operation vmxon enter vmx operation life cycle vmm software following item summarize life cycle vmm guest software well interaction software enters vmx operation executing vmxon instruction using vm entry vmm turn guest vms one time vmm effect vm entry using instruction vmlaunch vmresume regains control using vm exit vm exit transfer control entry point specified vmm vmm take action appropriate cause vm exit return vm using vm entry eventually vmm may decide shut leave vmx operation executing vmxoff instruction enough part explained general keywords aware create simple lab future test next part explain enable vmx machine using facility create survey among rest virtualization make sure check blog next part second part also available relatedworks hypervisorrelated work material awesome virtualization introducing book paper project course cf hypervisor hypervisorrelated work http githubcomwenzelawesomevirtualization day virtualization series hypervisor development http reference architecture software developer manual combined volume http softwareintelcomenusarticlesintelsdm hardwareassisted virtualization http writing window kernel driver http resourcesinfosecinstitutecomwritingawindowskerneldriver type hypervisor http intel amd cpu internals http githubcomlordnoteworthycpuinternals window disable signed driver enforcement http instruction set mapping vmx instruction http
89,Lobsters,virtualization,Virtualization,Do Containers and Kubernetes apply to n-tier client/server?,http://www.lhotka.net/weblog/DoContainersAndKubernetesApplyToNtierClientserver.aspx,container kubernetes apply ntier clientserver,design fallacy distributed computing csla framework,container kubernetes useful building deploying distributed system general includes servicebased architecture soa microservices well ntier clientserver endpoint think containerbased runtimes servicebased architecture go handinhand however lot benefit containerbased runtimes apply effectively wellarchitected ntier clientserver application well well architected mean ntier app good separation concern interface interface control business data access data storage layer chunky communication client server limited number server endpoint ntier service wellconsidered cohesive effective use thing like unit work pattern minimize call network bundling multiple call single unit work single call efficient use data transfer blind use orm tool extraneous data flow network made thing easier implement focus decoupling reuse two side coin reuse lead coupling coupling extremely bad ntier app client often quite smart whether mobile window mac webassembly even typescript overall solution architected enable smart client efficiently interact ntier endpoint really type service leverage serverside behavior ntier endpoint designed use apps open arguably good thing mean use much efficient binary serialization protocol compared abysmally inefficient json xml protocol used open service end day key nothing stop hosting ntier endpointservice container well nothing beyond might stop hosting code container word build update ntier endpoint code follow cloudnative best practice embracing design avoiding fallacy distributed computing like must microservice implementation endpoint code take advantage containerbased runtimes effectively lot folk tend look ntier app think monolith true true people create good bad ntier solution like create good bad microservice solution architecture silver bullet look mvc great design pattern unless put business logic controller lot people write business logic controller horrible totally defeat purpose design pattern expedient people saying done good job designing ntier endpoint cohesive around business behavior make least mostly get containerbased runtime benefit scalingelasticity quickly spin updown worker based active load functional grouping certain endpoint run designated server node based cpu io workload requirement manageability management feature draw people microservices available ntier endpoint well resiliency autofail pod applies ntier endpoint effectively microservices infrastructure abstraction basically dev code perspective regardless whether datacenter azure aws confess little biased spent many year talking good ntier client server architecture year experience maintaining open source csla framework based architecture recent version csla key feature allow folk truly exploit containerbased runtimes usually little change existing code key point containerbased runtimes offer fantastic benefit organization servicebased ntier clientserver architecture
90,Lobsters,virtualization,Virtualization,bhyvearm64 CPU and Memory Virtualization on Armv8.0-A by Alexandru Elisei,https://www.youtube.com/watch?v=rh3-62HHkYY,cpu memory virtualization alexandru elisei,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature cpu memory virtualization alexandru elisei youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature cpu memory virtualization alexandru elisei youtube
91,Lobsters,virtualization,Virtualization,Build and run tiny vms from Dockerfiles -- now supporting kvm and hyperkit,https://github.com/ottomatica/slim,build run tiny vms dockerfiles supporting kvm hyperkit,slim using slim build microvm see example dockerfile default provider listing microvm image running microvm advanced feature build format shared folder build run parameter managing vms image extending base image experimental example microvms http githubcomottomaticaslimimages installing slim docker,slim slim build microvm dockerfile slim work building extracting rootfs dockerfile merging filesystem small minimal kernel run ram result real vm boot instantly using limited resource done properly slim allow design build immutable unikernels running service build tiny embedded development environment using slim build microvm create microvm dockerfile use build command directory containing dockerfile slim build add bootable iso slim registry see example dockerfile slim build use default provider unless p flag specified ie p hyperkit listing microvm image see list microvm image machine slim image running microvm provision new instance given microvm image virtual machine slim currently support virtualbox kvm hyperkit macos provider running vms slim discover available provider defaulting virtualbox one provider available p flag used force slim use specific provider using hyperkit requires sudo slim run p hyperkit using virtualbox slim run virtualbox run microvm instance attached iso loaded cdrom boot iso second convenience ssh connection command provided end command allowing easy access machine example ssh userscjparninslimbakerrsa root p stricthostkeycheckingno advanced feature build format slim support building multiple image format default build image required given provider f flag used specify additional image format built stored registry directory image currently supported format corresponding provider raw iso kvm hyperkit virtualbox raw format signifies unbundled ramfs archive kernel example running slim build p kvm f build raw image kvm default image format well image shared folder slim automatically mount host cwd ie directory run slim run command slim within vm automounting disabled passing syncno option slim run command example image illustrate support mounting within image documented build run parameter using slim build image nocache skip docker build cache allowing repair stale aptget cache example using slim run memory cpu allow allocate memory cpu instance managing vms image get list vms slim vms force shutdown vm slim stop note hyperkit equivalent delete delete specific vm called slim delete vm delete specific image registry called ubuntu slim delete image ubuntu clean entire image registry slim clean extending base image experimental instead copy extend existing dockerfile experimenting reuse pattern let reference existing base image hosted git repository extend passing build argument example defining infoyml could extend base image ansible runc description simple configuration server ansible runc running container baserepository http githubcomottomaticaslim basedirectory baseargs pkgs runc ansible example microvms collection microvms found including ubuntu base image jenkins kubenetes http githubcomottomaticaslimimages installing slim simply clone repo run npm install npm link unfortunately due experimental nature system dependency must also install docker building extracting kernel filesystem cdrtools brew install cdrtools building microvm iso boot run image also need hypervisor kvm install following dependency ubuntu sudo aptget install qemukvm libvirtbin virtinst bridgeutils cpuchecker mkisofs
92,Lobsters,virtualization,Virtualization,Cloud Hypervisor written in Rust from Intel,https://github.com/intel/cloud-hypervisor,cloud hypervisor written rust intel,cloud hypervisor getting started status rustvmm dependency community security cloud hypervisor project experiment used production workload kvm rust rustvmm objective high level architecture guest o getting started clone build containerized build test run cloud image rust hypervisor firmware custom kernel disk image building kernel disk image booting guest vm status hot plug document device model documentation todo github issue project dependency rust rustvmm firecracker crosvm firecracker crosvm community community contribute contributing contributing join u invite slack channel join u slack security reporting potential security vulnerability secure intelcom http securitycenterintelcom http wwwintelcomcontentwwwusensecuritycenterpgppublickeyhtml http wwwintelcomcontentwwwusensecuritycentervulnerabilityhandlingguidelineshtml,cloud hypervisor getting started status rustvmm dependency community security cloud hypervisor project experiment used production workload cloud hypervisor open source virtual machine monitor vmm run top kvm project focus exclusively running modern cloud workload top limited set hardware architecture platform cloud workload refers usually run customer inside cloud provider purpose mean modern linux distribution io handled paravirtualised device ie virtio requirement legacy device recent cpu kvm cloud hypervisor implemented rust based rustvmm crate objective high level kvm kvm based minimal emulation low latency low memory footprint low complexity high performance small attack surface support build time configurable cpu memory pci nvdimm hotplug machine machine migration architecture cloudhypervisor support cpu architecture planning add support architecture future guest o support modern window guest evaluated getting started create folder build run cloudhypervisor homecloudhypervisor export cloudh homecloudhypervisor mkdir cloudh clone build first need clone build cloudhypervisor repo pushd cloudh git clone http githubcomcloudhypervisorcloudhypervisorgit cd cloudhypervisor cargo build release need give cloudhypervisor binary netadmin capability set tap interface host sudo setcap capnetadminep targetreleasecloudhypervisor popd build cloudhypervisor binary cloudhcloudhypervisortargetreleasecloudhypervisor containerized build test want build test cloud hypervisor without install required dependency rust toolchain cargo tool etc also use cloud hypervisor development script devclish please note upon first invocation script pull fairly large container image example build cloud hypervisor release binary pushd cloudh cd cloudhypervisor scriptsdevclish build release devclish one also run cloud hypervisor ci locally convenient debugging ci error without fully rely cloud hypervisor ci infrastructure example run cloud hypervisor unit test scriptsdevclish test unit run scriptsdevclish help command view supported development script command related option run run guest vm either using existing cloud image booting kernel disk image cloud image cloudhypervisor support booting disk image containing needed component run cloud workload aka cloud image rely rust hypervisor firmware project provide elf formatted kvm firmware cloudhypervisor directly boot need get latest rusthypervisorfirmware release also working cloud image use ubuntu image pushd cloudh wget http qemuimg convert p f raw wget http popd pushd cloudh sudo setcap capnetadminep cloudhypervisortargetreleasecloudhypervisor cloudhypervisortargetreleasecloudhypervisor kernel hypervisorfw disk cpu memory net tap mac ip mask rng popd multiple argument given disk parameter custom kernel disk image building kernel cloudhypervisor also support direct kernel boot vmlinux elf kernel image order support virtiofs virtioiommu development branch course able use kernel instruction continue version develop test build kernel clone cloud hypervisor linux branch pushd cloudh git clone depth http githubcomcloudhypervisorlinuxgit b linuxcloudhypervisor pushd linuxcloudhypervisor use cloudhypervisor kernel config build kernel cp config make bzimage j nproc popd vmlinux kernel image located disk image disk image use ubuntu cloud image contains root partition pushd cloudh wget http qemuimg convert p f raw popd booting guest vm directly boot custom kernel make use ubuntu root partition want vcpus mbytes memory pushd cloudh sudo setcap capnetadminep cloudhypervisortargetreleasecloudhypervisor cloudhypervisortargetreleasecloudhypervisor kernel disk cmdline rw cpu memory net tap mac ip mask rng example use virtioconsole device guest console device may enabled soon enough guest kernel get early kernel debug message need earlier debug message using legacy serial device based console preferred cloudhypervisortargetreleasecloudhypervisor kernel console serial tty disk cmdline rw cpu memory net tap mac ip mask rng status cloudhypervisor early prealpha stage use risk following cloud image supported direct kernel boot userspace work rootfs hot plug document detail add device running vm currently cpu hot plug supported device model follow documentation todo tracking cloudhypervisor todo list specific git tracked file github issue instead rustvmm project dependency order satisfy design goal highperformance securityfocused hypervisor decision made use rust programming language language strong focus memory thread safety make ideal candidate implementing vmms instead implementing vmm component scratch cloudhypervisor importing rustvmm crate sharing code architecture together vmms like eg amazon firecracker google crosvm cloudhypervisor embrace rustvmm project goal able share reuse many virtualization crate possible cloudhypervisor relationship rustvmm project twofold use much rustvmm code possible new rustvmm crate relevant project goal integrated soon possible likely rustvmm project lack feature cloudhypervisor need eg acpi vfio vhostuser etc using cloudhypervisor vmm implement test contribute back rustvmm project firecracker crosvm large part cloudhypervisor code based either firecracker crosvm project implementation vmms written rust focus safety security like cloud hypervisor however want emphasize cloud hypervisor project neither fork reimplementation project goal use case trying meet different aiming supporting cloud workload ie modern full linux distribution image currently run cloud service provider csp tenant primary target support client serverless use case code base already diverges crosvm firecracker one add feature support use case believe divergence increase time sharing much fundamental virtualization code rustvmm project crate possible community cloud hypervisor project follows governance community guideline described community repository contribute working building global diverse collaborative community around cloud hypervisor project anyone interested contributing project welcome participate believe contributing open source project like cloud hypervisor cover lot sending code testing documentation pull request review bug report feature request project improvement suggestion etc equal welcome mean contribution see contributing document detail join u get invite slack channel join u slack security reporting potential security vulnerability discovered potential security vulnerability project please send email secure intelcom issue related intel product please visit http securitycenterintelcom important include following detail project version affected detailed description vulnerability information known exploit vulnerability information extremely sensitive please encrypt security vulnerability report using pgp key member intel product security team review email contact collaborate resolving issue information intel work resolve security issue see vulnerability handling guideline pgp key http wwwintelcomcontentwwwusensecuritycenterpgppublickeyhtml vulnerability handling guideline http wwwintelcomcontentwwwusensecuritycentervulnerabilityhandlingguidelineshtml
93,Lobsters,virtualization,Virtualization,Why open source firmware is important for security,https://blog.jessfraz.com/post/why-open-source-firmware-is-important-for-security/,open source firmware important security,open source firmware important security open source firmware important privilege level ring userspace ring kernel ring hypervisor ring system management mode smm uefi kernel ring management engine counterintuitive code least visibility privilege open source firmware aiming fix ring smm uefi kernel system management mode smm uefi kernel specification ring management engine minix many resource little visibility code ring actually horrifying considering ring privilege exploit bug web server intel management engine seven year make better nerf nonextensible reduced firmware mecleaner githubcomcornamecleaner uboot coreboot uboot coreboot verify boot bare minimum necessary ensure hardware usable pas control different program called linuxboot linuxboot uroot uroot firmware nic openbmc ubmc previous blog post root trust cerberus titan nitro better able use open source code could verify without doubt code read build code running hardware various place firmware could verify machine correct state without doubt vulnerable backdoor paul mcmillan securing hardware scale platform firmware resiliency platform firmware resilience platform firmware resiliency platform firmware resiliency ocp talk intel firmware innovation msw help purism trammel hudson chris koch rick altherr zaolin bridget kromhout,open source firmware important security wednesday may gave talk recently goto chicago open source firmware important thought would nice also write blog post finding post focus open source firmware important security privilege level typical stack today various level privilege ring userspace least amount privilege short sandbox userspace restricted ring kernel operating system kernel open source operating system get visibility code behind ring hypervisor virtual machine monitor vmm creates run virtual machine open source hypervisors like xen kvm bhyve etc visibility code behind ring system management mode smm uefi kernel proprietary code ring management engine proprietary code negative ring made way express something privilege pretty clear ring option use open source software large amount visibility control software run privilege level ring le control getting better open source firmware community project counterintuitive code least visibility privilege open source firmware aiming fix ring smm uefi kernel ring control cpu resource system management mode smm invisible rest stack top half kernel originally used power management system hardware control hold lot proprietary designed code place vendor add new proprietary feature handle system event like memory chipset error well bunch logic uefi kernel extremely complex million line code uefi application active boot built security obscurity specification absolutely insane want dig ring management engine privileged ring case intel intel management engine turn node reimage disk invisibly kernel run minix well web server entire networking stack turn minix widely used operating system lot functionality management engine would probably take day list many resource digging detail want ring ring least half kernel stack well bunch proprietary unnecessary complexity kernel networking stack web server code also modify persist across power cycle reinstalls little visibility code ring actually horrifying considering ring privilege exploit surprise anyone ring fair share vulnerability horrifying happen though use one example although let find others bug web server intel management engine seven year without realizing make better nerf nonextensible reduced firmware nerf open source firmware community working towards goal make firmware le capable harm make action visible aim remove runtime component currently intel management engine remove take away web server ip stack also remove uefi ip stack driver well intel managementuefi selfreflash capability mecleaner project used clean intel management engine smallest necessary capability check github githubcomcornamecleaner uboot coreboot uboot coreboot open source firmware handle silicon dram initialization chromebooks use coreboot uboot rest one part verify boot coreboot design philosophy bare minimum necessary ensure hardware usable pas control different program called payload payload case linuxboot linuxboot linuxboot handle device driver network stack give user multiuser multitasking environment built linux single kernel work several board linux already quite vetted lot eye since used quite extensively better use open kernel lot eye kernel different closed mean lessening attack surface using le variation code making effort rely code open source linux improves boot reliability replacing lightlytested firmware driver hardened linux driver using kernel already tooling around firmware devs build tool already know need write logic signature verification disk decryption etc language modern easily auditable maintainable readable uroot uroot set golang userspace tool bootloader used initramfs linux kernel linuxboot using nerf stack saw boot time faster blog post security let get back nerf stack help improve visibility lot component previously proprietary still lot firmware device firmware need open source firmware network interface controller nic solid state drive ssd base management controller bmc nic work done open compute project nic interesting see go bmc openbmc ubmc written little previous blog post need open source firmware visibility stack also actually verify state software machine root trust goal root trust verify software installed every component hardware software intended way know without doubt verify hardware hacked since little visibility code running lot place hardware hard really know firmware component vulnerable backdoor well unless open source every cloud vendor seems way root trust microsoft cerberus google titan amazon nitro seem assume explicit amount trust proprietary code code see leaf great feeling better able use open source code could verify without doubt code read build code running hardware various place firmware could verify machine correct state without doubt vulnerable backdoor make wonder smaller cloud provider like digitalocean packet root trust often time hear project big three five asked twitter get good great talk paul mcmillan matt king securing hardware scale cover great detail secure bare metal also giving customer access bare metal get back hardware customer need ensure consistency reliability nothing customer hiding component hardware cloud need ensure hardware running compromised customer run compute platform firmware resiliency far chip vendor go seem different offering intel platform firmware resilience lattice platform firmware resiliency seem focused nist guideline platform firmware resiliency tried ask internet using heard little back using platform firmware resiliency let know ocp talk intel firmware innovation seems intel platform firmware resilience pfr cerberus go hand hand intel using pfr deliver cerberus attestation priniciples thanks msw clarification would nice many tool job also wish code open source could verify help hope gave insight built open source firmware making firmware open source important would like help effort please help spread word please try use platform value open source firmware component chromebooks great example well purism computer ask provider open source firmware ensuring hardware security root trust happy nerding huge thanks open source firmware community helping along journey shout ron minnich trammel hudson chris koch rick altherr zaolin shout bridget kromhout always finding time review post
94,Lobsters,virtualization,Virtualization,VMware Fusion 11 - Guest VM RCE - CVE-2019-5514,https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/,vmware fusion guest vm rce,tl dr original discovery codecolorist codecolorist twitter codecolorist weibo amsrv github objectiveseeprocinfoexample example project utilizing proc info library rest api leaking vm info websocket rce vmuuid websocket infoleak websocket full rce without vmuuid reporting vmware fix,tl dr run arbitrary command vmware fusion guest vm website without priory knowledge basically vmware fusion starting websocket listening localhost fully control vms also createdelete snapshot whatever want websocket interface including launching apps need vmware tool installed guest launching apps honestly installed creating javascript website interact undocumented api yes unauthenticated original discovery saw tweet couple week ago codecolorist codecolorist codecolorist twitter talking issue one discovering time look searched tweet removed found tweet weibo account chinese twitter codecolorist weibo screenshot posted see execute arbitrary command guest vm web socket interface started amsrv process would like give full credit later building top information amsrv used procinfoexample github objectiveseeprocinfoexample example project utilizing proc info library monitor kind process starting running vmware fusion start vmware vmrest vmware rest api amsrv started procinfoexample process start pid path applicationsvmware fusionappcontentslibraryvmrest user args applicationsvmware fusionappcontentslibraryamsrv p procinfoexample process start pid path applicationsvmware fusionappcontentslibraryamsrv user args applicationsvmware fusionappcontentslibraryamsrv p seem related especially reach undocumented vmware rest api call port control application menu amsrv process think something like application menu service navigate applicationsvmware fusionappcontentslibraryvmware fusion application menuappcontentsresources find file called appasar end file nodejs implementation related websocket listens port pretty nice source code available file need hardcore reverse engineering look code reveals indeed vmware fusion application menu start amsrv process port busy try next available open const startvmrest async loginfo main startvmrest vmrest null logwarn main vmrest currently running return const execsync require childprocess execsync let port default port vmrest let portfound false portfound let stdout execsync lsof port wc l parseint stdout portfound true else port let store chosen port global global port port const spawn require childprocess spawn vmrest spawn pathjoin dirname amsrv p port find related log vmware fusion application menu log renderer websocketservice connect url w renderer websocketservice connect successfully connected url w renderer apiservice requestvmlist url http confirms web socket also rest api interface rest api leaking vm info navigate url http get nicely formatted json detail vms id xxxxxxxxxxxxxxxxxxxxxxxxxx processor memory path userscsabyvmwindows cachepath userscsabyvmwindows powerstate unknown already information leak attacker get information user id folder vm name basic information code used display information put j website host running fusion visit query rest api var url http local page var xhr new xmlhttprequest xhropen get url true specified responsetype must empty string text xhrresponsetype text xhronload function xhrreadystate xhrdone xhrstatus consolelog xhrresponse consolelog xhrresponsetext documentwrite xhrresponse xhrsend null look closely code find additional url leak info apivms vmid ip give internal ip vm work encrypted vm powered apiinternalvms vmid info get via first url discussed limiting info one vm websocket rce vmuuid original poc published codecolorist script w new websocket w wsonopen function const payload name menuonaction object aa bb cc dd ee ff userinfo action launchguestapp vmuuid aa bb cc dd ee ff representedobject cmdexe wssend jsonstringify payload wsonmessage function data consolelog jsonparse datadata wsclose script poc need uuid vm start application vmuuid biosuuid find vmx file problem leak vmuuid brute forcing would practically impossible need vmware tool installed guest work vm suspended shutted vmware nicely start u also command queued user log even screen locked able run command user logged experimentation noticed remove object vmuuid element code execution still happens last used vm state information saved websocket infoleak starting reversion following trace web socket call option code started clear full access application menu fully control everything checking vmware fusion binary becomes clear menu option amenuupdate db menuupdate data xrefcfstringmenuupdate amenushow db menushow data xrefcfstringmenushow amenuupdatehotk db menuupdatehotkey data xrefcfstringmenuupdatehotkey amenuonaction db menuonaction data xrefcfstringmenuonaction amenurefresh db menurefresh data xrefcfstringmenurefresh amenusettings db menusettings data xrefcfstringmenusettings amenuselectinde db menuselectindex data xrefcfstringmenuselectindex amenudidclose db menudidclose data xrefcfstringmenudidclose called websocket went ahead discover every single option every single menu pretty much whatever want make snapshot start vms delete vms know vmuuid problem figure get without useful next interesting option menurefresh use following payload const payload name menurefresh get back detail vms pinned apps etc key menuupdate value vmlist name kali master cachepath userscsabyvmkali master vmwarevmstartmenuplist name macos cachepath userscsabyvmmacos name window cachepath userscsabyvmwindows menu pinnedapps frequentlyusedapps rawicons bit le see api discussed earlier info leak websocket full rce without vmuuid next interesting item menuselectindex suggested select vms even relatated code appasar file told call called vm selection changed selectindex index number loginfo renderer actionservice selectindex index index thischeckisfusionuirunning thissend name menuselectindex userinfo selectedindex index called item suggested tried launch app guest could instruct guest run app basically select vm call const payload name menuselectindex userinfo selectedindex next thing tried use selectedindex directly menuonaction call turned yes also became clear vmlist get menurefresh right order index vm order gain full rce leak list vms menurefresh launch application guest using index full poc script w new websocket w wsonopen function payload show vm name cache path const payload name menurefresh wssend jsonstringify payload wsonmessage function data documentwrite datadata consolelog jsonparse datadata var json jsonparse datadata var vmlist jsonvaluevmlist var vmlistlength payload launch app use either vmuuid selectedindex const payload name menuonaction userinfo action launchguestapp selectedindex representedobject cmdexe vmlist nameincludes win vmlist nameincludes win wssend jsonstringify payload wsclose script reporting vmware point got touch codecolorist reported vmware said yes got touch decided send another report found pretty serious wanted urge especially compared original poc found way execute attack without fix vmware released fix advisory couple day ago took look essentially implemented token authentication token newly generated every single time starting vmware related code generating token taken appasar stringprototypepick function min max var n char typeof max undefined n min else n min mathfloor mathrandom max min var n char thischarat mathfloor mathrandom thislength return char stringprototypeshuffle function var array thissplit var tmp current top arraylength top top current mathfloor mathrandom top tmp array current array current array top array top tmp return arrayjoin export class token public static generate string const special const lowercase abcdefghijklmnopqrstuvwxyz const uppercase abcdefghijklmnopqrstuvwxyz const number const special lowercase uppercase number let token token specialspick token lowercasepick token uppercasepick token numberspick token allpick token tokenshuffle return bufferfrom token tostring token variable length password containing least character app lower case number symbol encoded see wireshark vmware us also see used code function sendvmrestready loginfo main sendvmrestready mainwindow mainwindowwebcontentssend vmrestready w localhost global port w token token http localhost global port token token case code execution mac probably figure token case really matter anyway password essentially limit ability exploit vulnerability remotely experiment also found need set origin header file otherwise forbidden set via normal j call set browser like origin file even know token trigger via normal webpage
95,Lobsters,virtualization,Virtualization,chromacity: Escaping the VM with newlines,https://theofficialflow.github.io/2019/04/26/chromacity.html,chromacity escaping vm newlines,blogpost tweet table content challenge vulnerability next iteration exploitation prior research strategy heap information disclosure heap spraying first overflow finding corruption second overflow arbitrary read primitive arbitrary code execution finding system capturing flag conclusion credit niklasb,back october noticed interesting blogpost niklas baumstark chromium component virtualbox decided take look well within two week found reported dozen bug could easily achieve vm escape unfortunately duplicate end december ctf took place noticed tweet niklas announced virtualbox challenge chromacity yet solved anyone got really hyped wanted first capture flag table content challenge challenge target virtualbox xubuntu escape vm hint included challenge simply picture documentation api glshadersource first thought bug artificially injected function challenge however looking implementation chromium realized dealing real world vulnerability vulnerability code excerpt srcvboxhostservicessharedopenglunpackerunpackshadersc void crunpackextendshadersource void glint length null gluint shader readdata gluint glsizei count readdata glsizei glint hasnonlocallen readdata glsizei glint plocallength datapointer glint char ppstrings null glsizei j jupto int po poscheck count sizeof char crerror crunpackextendshadersource count u range count return po count sizeof plocallength hasnonlocallen length datapointer po glint po count sizeof length poscheck po datapointercheck poscheck crerror crunpackextendshadersource po range poscheck return count plocallength poscheck plocallength datapointercheck poscheck crerror crunpackextendshadersource po range poscheck return poscheck plocallength ppstrings cralloc count sizeof char ppstrings return count ppstrings datapointer po char po plocallength length plocallength assert plocallength jupto count plocallength plocallength j j jupto j char pstring ppstrings pstring j assert j jupto pstring j n crunpackdispatchshadersource shader count ppstrings length length plocallength crunpackdispatchshadersource shader const char ppstrings crfree ppstrings method fetch user data using macro readdata simply read message sent guest using hgcm interface message stored heap adjusts input hand crunpackdispatchshadersource first obvious point attack cralloc count sizeof char variable count checked whether within certain positive range however since signed integer one also check negativity choose count large enough example multiplication sizeof char yield due integer overflow variable ideally may result heap overflow due allocated buffer small whereas count large however code vulnerable attack since loop taken count negative variable signed hence comparison also signed actual vulnerability le obvious namely first loop poscheck incremented array length every iteration position validated ensure total length still within bound problem code poscheck tested inbounds next iteration mean last element array never tested arbitrarily large effect missing validation essentially nested loop j represents index pstrings counted plocallength loop translates every byte n byte arbitrary length make loop go outofbounds since pstring point data within hgcm message heap effectively heap overflow exploitation even though overflow controllable content still gain arbitrary code execution exploit wisely exploitation use library specifically designed attack acceleration heavily make use crvboxsvcbuffert object also targeted prior research contains unique id controllable size pointer actual data guest write lastly nextprevious pointer doubly linked list typedef struct crvboxsvcbuffert uiid uisize void pdata crvboxsvcbuffert pnext pprev crvboxsvcbuffert furthermore also make use crconnection object contains various function pointer pointer buffer guest read corrupt former object gain arbitrary write primitive corrupt latter object gain arbitrary read primitive arbitrary code execution strategy leak pointer crconnection object spray heap lot crvboxsvcbuffert object save id make hole execute glshadersource occupy hole evil message vulnerable code make overflow adjacent object ideally crvboxsvcbuffert try corrupt id size enable second heap overflow control look list id see one disappeared id missing one corrupted newlines replace zero byte newlines id get corrupted id corrupted object larger length originally use overflow second crvboxsvcbuffert make point crconnection object finally control content crconnection object mentioned corrupt enable arbitrary read primitive arbitrary code execution find address system overwrite function pointer free run arbitrary command host profit heap information disclosure targeting virtualbox vulnerable got patched vulnerability exploited leak crconnection address see use new infoleak sake challenge redesign exploitation strategy surprisingly code mentioned still able leak desired object even possible fixed properly take close look see allocated object size byte whereas offset connection offsetconnclient really outofbounds msg makeoobread offsetconnclient leak crmsg client msg interestingly worked due uninitialized memory bug namely method svcgetbuffer requesting heap memory store message guest however clear buffer hence api returning back data message buffer could abused leak valuable information heap guest assumed niklas knew bug thus decided use solve challenge indeed week competition patch bug pushed assigned heap spraying spray heap crvboxsvcbuffert using allocbuf follows bufs range spraynum bufsappend allocbuf selfclient spraylen empirically found choosing spraylen spraynum buffer eventually consecutive buffer pdata pointing adjacent crvboxsvcbuffert next want make hole allocation occupy evil message achieved sending command shcrglguestfnwritereadbuffered host holepos spraynum hgcmcall selfclient shcrglguestfnwritereadbuffered bufs holepos see implementation command srcvboxhostservicessharedopenglcrservercrservicecpp first overflow carefully set constellation heap ready allocate message buffer trigger overflow follows msg pack iii crmessageopcodes chr crextendopcode aaaa pack crshadersourceextendopcode pack shader pack count pack hasnonlocallen pack plocallength crmsg selfclient msg spraylen notice send message exactly size one freed due glibc heap work hopefully take exactly location moreover notice count remember last length arbitrarily large since one element obviously first also last element finally let plocallength small enough corrupt id size field want corrupt pdata calculated message byte long offset pstring glibc chunk header byte wide uiid uisize unsigned integer plocallength subtracted crunpackextendshadersource therefore need byte reach end message byte go chunk header byte overwrite uiid uisize compensate subtraction must add byte overall equal byte finding corruption recall size field unsigned integer chosen size byte hence field hold value corruption three zero byte replaced byte finding corrupted id slightly complicated requires u traverse id list find disappeared sending shcrglguestfnwritebuffer message every id follows print finding corrupted buffer found range spraynum holepos try hgcmcall selfclient shcrglguestfnwritebuffer bufs spraylen except ioerror print found corrupted id x bufs found bufs break found exit error could find corrupted buffer finally manually replace every n byte match id corrupted buffer forgive python skill idstr found newid int idstrreplace print new id x newid everything need make second overflow whose content finally control ultimate goal overwrite pdata field make point crconnection object previously leaked second overflow using newid size corrupt second crvboxsvcbuffert similar previous overflow work buffer adjacent however time overwrite fake object id size pointer selfpconn try fake pack iiqqq selfpconn hgcmcall selfclient shcrglguestfnwritebuffer newid spraylen fake print exploit successful except ioerror exit exploit failed note spraylen represents offset skip byte chunk header arbitrarily modify content crconnection object explained ultimately enables u arbitrary read primitive allows u call anything want replacing free function pointer arbitrary read primitive issuing shcrglguestfnread command data phostbuffer sent back guest using custom id overwrite pointer corresponding size custom one send shcrglguestfnread message using client trigger arbitrary read client id leaked crconnection hgcmcall selfclient shcrglguestfnwritebuffer offsetconnhostbuf pack q hgcmcall selfclient shcrglguestfnwritebuffer offsetconnhostbufsz pack n re sz hgcmcall shcrglguestfnread arbitrary code execution every crconnection object got function pointer alloc free etc store message buffer guest furthermore take crconnection object first argument perfect used kick rop chain example simply call system arbitrary command overwrite pointer offset offsetconnfree content desired argument offset follows hgcmcall selfclient shcrglguestfnwritebuffer offsetconnfree pack q hgcmcall selfclient shcrglguestfnwritebuffer cmd triggering free really simple requires u send valid message host using finding system already know address namely crvboxhgcmfree function pointer stored free field subroutine within module vboxoglhostcrutil also contains stub libc therefore easily calculate address system selfcrvboxhgcmfree selfpconn offsetconnfree print crvboxhgcmfree x selfcrvboxhgcmfree selfvboxoglhostcrutil selfcrvboxhgcmfree print vboxoglhostcrutil x selfvboxoglhostcrutil selfmemset selfvboxoglhostcrutil print memset x selfmemset selflibc selfmemset print libc x selflibc selfsystem selflibc print system x selfsystem capturing flag point one step away capturing flag flag stored text file desktopflagtxt see content opening file text editor terminal challenge could literally see flag short video transmitted back submitting code xubuntu geedit preinstalled however quick google search yield text editor mousepad little problem occurred first submission crashed system quickly realized could use string longer byte since pointer located offset overwriting invalid content would result segmentation fault therefore dirty trick shortened file path twice could opened le character prip psystem mv desktop prip psystem mv aflagtxt prip psystem mousepad hurray able read flag excited first solve challenge even though remotely hour later team tea delivers also succeeded exploiting cool bug congrats conclusion challenge really hard solve previously working far know challenge could solved without infoleak setting better heap constellation could directly overflow crconnection object modify cbhostbuffer field finally enable outofbounds read primitive however stress excitement working efficiently also laziness decided use additional bug solve challenge nevertheless lot fun bunch infoleaks chromium nearly every opcode could disclose stack heap information memory corruption bug scarce thus excited exploit one last least would like express easy identify issue knew bug code believe also looking deemed unexploitable therefore important look code kind mindset believe exists bug code eventually find hence discouraged think people also intensively looking think find anything thanks reading happy hacking credit niklasb prior research challenge
96,Lobsters,virtualization,Virtualization,"In a Serverless World, We Still Need State",https://www.infoq.com/news/2019/04/serverless-needs-state,serverless world still need state,jonas bonér focus stateless function akka lightbend function service serverless nyc gwen shapira confluent challenge building data processing architecture mike robert symphonia serverless architecture,today large push enterprise architecture towards serverless architecture blog post jonas bonér argues although strongly belief serverless movement programming model focus stateless function limit range supported usecases bonér inventor akka founder lightbend note experience function service faa often confused serverless point serverless user experience ux faa first many implementation welldefined input output function composed larger function bonér compare lego function lego block composed something larger point although function great processing data suffer severe constraint limitation used beyond intended scope one limitation faa function ephemeral stateless shortlived performance latency perspective costly lose computational context load store state backend storage time another limitation bonér lack direct addressability communication must therefore use publishsubscribe mean data passed slow expensive storage mechanism may work eventdriven usecases high latency generalpurpose distributed computing problem although function great tool bonér point serverless meet expectation vision opsless world still allowing u build datacentric realtime application must deal hardest problem distributed system managing state also something belief interesting opportunity serverless serverless movement focused automation infrastructure thus ignoring dealing state state moved application layer application becoming increasingly datacentric datadriven viable solution many application expensive make roundtrip get data storage every request need continuously process data near realtime extracting knowledge stream data shift data rest data motion led many company towards architecture based distributed stream processing eventdriven microservices bonér serverless version stateless function must focus state allowing u benefit advantage serverless building distributed generalpurpose application endtoend correctness consistency safety mean different thing different service depend use case stable system therefore responsibility application next generation serverless implementation must provide support important problem reliably scale manage data cloud presentation serverless nyc gwen shapira working confluent discussed challenge building data processing architecture stateless infrastructure note lot want requires state managing state therefore important also serverless world since function scale well need database fast scale well function using storage also payforuse model looking alternative find database automatic scaling expects none using payforuse model also note faa model similar stream processing model event driven design mean use pattern one model another one lot experience still relevant instead focus function action take recommends consider real need application use event belief accurately reflect real world mike robert symphonia note earlier blog post discussing serverless architecture faa function restricted regarding local state state guarantee persisted across multiple invocation different invocation function due often described stateless accurate say state must persistent must external function fast nosql database object file store kind option point lot slower persistence locally memory server also note large impact application architecture
97,Lobsters,virtualization,Virtualization,"nemu, a cloud hypervisor",https://github.com/intel/nemu,nemu cloud hypervisor,nemu cloud hypervisor rationale qemu base requirement high level architecture guest o guest platform host platform firmware boot boot method memory device model block guest image format migration monitoring discussed,nemu cloud hypervisor nemu open source hypervisor specifically built designed run modern cloud workload modern intel arm cpu rationale modern guest operating system host cloud workload run virtual hardware platform require legacy hardware additonally modern cpu used data center advanced virtualization feature eliminated need cpu emulation currently open source hypervisor solution clear narrow focus running cloud specific workload modern cpu available solution evolved time try fairly generic attempt support wide range virtual hardware architecture run hardware varying degree hardware virtualization support result need provide large set legacy platform device model requiring cpu device platform emulation consequence built top large complex code base nemu hand aim leverage kvm narrow focused exclusively running modern cloud native workload top limited set hardware architecture platform assumes fairly recent cpu kvm allowing elimination emulation logic allow smaller code base lower complexity reduced attack surface compared existing solution also give space providing cloud specific optimization building performant hypervisor cloud reducing size complexity code allows easier review fuzz testing modularization future innovation qemu base qemu current de facto standard open source cloud hypervisor rich set feature developed tested time includes feature live migration pci memory nvdimm cpu hotplug vfio mediated device passthrough vhostuser qemu also code base significant effort innovation invested create multiple performant io model also come large support legacy feature platform device capable running large number hardware platform also allows cross platform emulation one fundamental goal generic possible run large set hardware host diversity workload qemu needed emulation support build code hardware lacked critical virtualization feature qemu allows build time configuration rich feature set however quite large amount code base compiled emulated platform make assumption certain legacy device always present qemu also abstraction within code support legacy feature nemu nemu based qemu leverage rich feature set much narrower focus leverage performant robust stable qemu codebase without need supporting myriad feature platform hardware relevant cloud goal nemu retain absolute minimal subset qemu codebase required feature set described qemu code base also simplified reduce number generic abstraction requirement nemu provides pci virtio platform support vfio based device direct assigment mediated device assigment support also aim retain support live migration vhostuser build time configurable device hotplug support pci memory nvdimm cpu nemu need emulate small subset feature including pci host brige nemu also introduces new qemu machine type virt purely virtual platform try emulate existing chipset legacy bus isa smbus etc offloads many feature kvm possible similar approach already existing virt machine type nemu support two virt machine type list qemu feature nemu retain add high level kvm kvm based minimal emulation low latency low memory footprint low complexity small attack surface support optional build time configurable cpu memory pci nvdimm hotplug machine machine migration architecture nemu support two cpu architecture guest o guest platform virt qemu virtual machine virt qemu virtual machine host platform firmware boot uefi acpi hardware reduced acpi optional hotplug support cpu memory nvdimm pci device vfio vhostuser boot method memory qemu allocated memory file mapped memory huge page memory pinning device model virtio blk console crypto pcinet rngpci scsi vhostuserscsi vhostusernet vhostuserblk vhostvsockpci vfio network mediated device storage rdma nvdimm tpm vtpm host tpm passthrough scsi controller pci controller pcilite block guest image format migration network based tl file based local migration monitoring discussed window server headless qboot graphic console virtioblockcrypto qemu client support module rdma live migration slirp guest agent
98,Lobsters,virtualization,Virtualization,QEMU version 4.0.0 released,https://www.qemu.org/2019/04/24/qemu-4-0-0/,qemu version released,qemu version released download page wiki,qemu version released apr would like announce availability qemu release release contains commits author grab tarball download page full list change available wiki highlight include arm extension sb predinv hpd lor fhm pauth jsconv condm frint bti arm new emulation support musca development board arm virt support ram uboot noload image type arm improved emulation arm pmu hppa support tlb protection id tlb trace event mips support multithreaded tcg emulation mips emulation support cpu qmpbase querying cpu type improved support saari saar configuration register mips improvement interthread communication unit fulong machine type enduser documentation powerpc pseriespowernv support large decrementer powerpc pseries emulation support xive interrupt controller powerpc pseries support hotplugging pci host bridge phbs powerpc pseries spectremeltdown mitigation enabled default additional support countcacheflush mitigation riscv virt support pci usb riscv support tsr tw tvm field mstatus f field support three stats dirty clean riscv builtin gdbserver support register list via xml file support ga cpu model multipleepoch ptff feature enabled cpu model default vfioap support hot plugunplug longer inhibits memory ballooning emulation support floatingpoint extension facility vector support instruction hax accelerator supported posix host darwin including linux netbsd advertised pcie root port speed optimally default maximum link speed width provided pcie qemu machine type older machine type retain default compatibility xen pvh image booted kernel option xtensa xtfpga improved smp support linux interrupt distributor ipi runstall new smpcapable core configuration xtensa support flexible length instruction extension flix gui new display spiceapp configurelaunch spice client gui similar ui qemu gtk vnc server support access control via tlsauthzsaslauthz option qmp support outofband command execution useful postcopy migration recovery additional qmp command working block device dirty bitmap vfio edid interface supported mdev intel vgpu kernel allows resolution setting via xresyres option xen new xendisk device create xen pv disk backend performance improvement xen pv disk backend network block device improved tracing error diagnostics improved client compatibility buggy nbd server implementation new option qemunbd virtioblk support discard writezeroes pvrdma device support rdma management datagram service mad lot thank everyone involved
99,Lobsters,virtualization,Virtualization,"The CASE of FEMU: Cheap, Accurate, Scalable and Extensible Flash Emulator (2018)",https://ucare.cs.uchicago.edu/pdf/fast18-femu.pdf,case femu cheap accurate scalable extensible flash emulator,,obj stream q b z e f ѧǿ zmt n c g k x w h u n b h w x v vxw dr w q䢔 n vii dmd vii g mז vii ז x ז w u u e ubtɯd
100,Lobsters,virtualization,Virtualization,Using TLA+ to Model Cascading Failures,https://medium.com/@bellmar/using-tla-to-model-cascading-failures-5d1ebc5e4c4f,using tla model cascading failure,modeling discontent example one naive cluster example load balancing e example autoscaling buildkite misconfigured setting triggered failure notice otherwise healthy server build model using modeling part development process technology selection monitoring alerting strategy slos model look github hillel wayne go buy book,tlais traditionally used model algorithm power distributed system however engineering team build message queue install configure multiple solution developed people biggest threat team solution interact together scaletypically engineering team search threat live failure test either running extensive performance test special testing environment actually sabotaging infrastructure trigger response ala chaos monkey great practice somewhat resource intensive resource intensive organization tend put offmodeling discontentsthere popular saying statistic model wrong usefuli played around tla curious could used model interaction system well enough catch kind complex failure happen distributed system chained together sure possible reach math proof level accuracy model real life system built reflect eager trythat said purpose type modeling build perfect system help team define clarify assumption kind modeling force team ask exactly various product service using interact help find place actually know expected behavior useful minimizing complex failure totally eliminate itthe hard thing modeling figuring simplify specify whole point uncover detail retrospect seem obvious otherwise top mind one try capture every detail model likely complex runexample one naive clusterlet start basic situation three vms finite amount resource think memory cpu io frank need level specificity important thing resource exhausted single vm longer healthywe start something like module provisioningnaive extends tlc integer sequencesvms algorithm provisioningvariables cluster v vms define servershealthy vm vms cluster vm define end algorithm model going use represent resource use percentage could use would increase amount state tla check rather dramatically without really providing additional value way tla work run possible set input looking place requirement defined assertion invariant temporal property violated unlikely model input produce error input already catch take opportunity simplify use define invariant called servershealthy tell tla every server cluster resource use initialize server resource use start great example model checking lead interesting conversation really know given architecture know spin new server using memory number also number accurate would figure tracking time anyway let say decide initial state utilization need learn think system system algorithm instead environment although middle outage complex failure might seem like thing happening random reality system defined set rule govern behavior choice system hand defined set rule govern behavior choice exact set input unexpected make behavior randomwe want first model naive going define incident series event change amount resource used one vms think process eating cpu request using memory whateverevents target vms size defines event target one possible three vms already defined size range increasing resource use increasing also define incident set four event worry get see altogether one file endincidents set set x set x set x set incident incident event four pretty much arbitrary number point want see multiple incoming processesrequests affect vms need one event incident combination tla consider longer full model take run settle four sweet spot enough event see problematic behavior much need grab coffee come back check model resultsnow meat potato algorithm event occurs increase resource use one vmsmacro triggerevent event begin cluster eventtarget cluster eventtarget eventsizeend macro begin incident curr head incident incident tail incident triggerevent curr end end algorithm macro triggerevent want add complexity soon breaking keep thing clean full code look like module provisioningnaive extends tlc integer sequencesvms incident set set x set x set x setevents target vms size algorithm provisioningvariables incident incident event cluster v vms curr helper current eventdefine servershealthy vm vms cluster vm define macro triggerevent event begin cluster eventtarget cluster eventtarget eventsizeend macro begin incident curr head incident incident tail incident triggerevent curr end end algorithm running produce sensible predictably uninspiring result finished computing initial state distinct state generatederror invariant servershealthy violatederror behavior point incident target size target size target size target size curr pc cluster state action line col line col module provisioningnaive incident target size target size target size curr target size pc cluster state action line col line col module provisioningnaive incident target size target size curr target size pc cluster tla let u know three vms resource use process increase resource use followed another increase resource server result vm something would need build model figure helpful demonstrating concept using tla model system integrationthe core problem model capture essential component behavior magical load balancer apparently logic defining vms get traffic process consuming resource indefinitelylet change thatexample load balancingto add load balancer mix first going change vm name integer particular reason identifier string except made code bit easier read changing integer modeling round robin load balancer becomes matter counting three againwe need event directed specific vm anymore get rid add basic conditional logic triggerevent model directs next event next vm round robin rotation altogether module provisioningload extends tlc integer sequencesvms incident set set x set x set x setevents size algorithm provisioningvariables incident incident event cluster v vms curr helper current event rrobin define servershealthy vm vms cluster vm define macro triggerevent event begin cluster rrobin cluster rrobin eventsize rrobin rrobin else rrobin rrobin end end macro begin incident curr head incident incident tail incident triggerevent curr end end algorithm probably need run model guess going happen fourth event go back first vm knock limit improve model need program recovering resource process endthere couple different way could approach could give event timeout load vm cleared away creates unhelpful amount complexity model four event per incident likely timeouts would make enough impact give u insight beforeanother way approaching think reclaiming resource garbage collection one event one process request raising resource use single vm state change could triggered number thing maybe event x increase vm resource use event x actually number process happened undefined period time assume various point process ended naturally timed resource still used machine released yetto represent rework algorithm process process tla represents concurrency garbage collection happen independently event happening server breaking process also going move variable initialization around little bit variable relevant certain process make sense keep local macro call within process able access module provisioningload extends tlc integer sequencesvms incident set set x set x set x setevents size algorithm provisioningvariables cluster v vms define servershealthy vm vms cluster vm define macro triggerevent event begin cluster rrobin cluster rrobin eventsize rrobin rrobin else rrobin rrobin end end macro process garbagecollection recover resource variable gcollection begin collect vms gcollection cluster cluster else cluster cluster gcollection end end end process process incoming increasing resource usage variable incident incident event curr helper current event rrobin begin increase incident curr head incident incident tail incident triggerevent curr end end process end algorithm important keep mind designing tla model model checker test possible combination input likely code include likely scenario vms free lot resource free also scenario one free anythingwhich obviously put u back started despite scenario unlikelygoing back model wrong useful maxim useful level insight garbage collection tempting force model always garbage collection get model pas also usefulwhat could instead reconsider ifservershealthy invariant way define invariant tla error statement false reason end every step servershealthy defines model failure state whenever three vms unhealthy reality vms occasionally become unhealthy go offline generally end western civilization know itif change vms good invariant e least one good vm exists model run without failure state servershealthy e vm vms cluster vm better add even complexityexample autoscalingthere lot thing model still lacking obviously move beyond four event outcome would look different missing big piece modern cloud architecture autoscaling let rethink model bitwe currently representing vms struct tla kind like hash map made assigning resource increase various vms super easy best option want add remove vms pool instead going store information sequence basically list number wherein number represents resource use vm algorithm provisioningvariablesvms creates set sequence represents possible combination two vms potential resource use creating series traffic pattern previous model bit easier conceptualize efficient also question whether right combination state change bring vms place unsustainable previous model survived cycle probably would survive creating set every possible combination longer need cycle allbut change requires u remove invariant replace something else define servershealthy e v len vms vms v end define temporal property defined configured much way invariant let u use tla mean eventually true keep invariant model would fail soon tla gave sequence model really load honestly went back forth ultimately new vm added pool expect see resource use even traffic distributed across larger group machine cycle anymore sure reflecting behavior model useful instead three process one kill unhealthy vm one add vm pool resource use high one shuts vms resource use lowfair process vmdies kill vm begin fail await len vms vms selectseq vms lambda x x end process fair process scaleup autoscale variable load false begin scaleup load e v len vms vms v load vms append vms end end process fair process scaledown autoscale variable load falsebegin scaledown await len vms load v len vms vms v load vms tail vms end end process unfamiliar thing first await tell tla run process statement follows true vmdies scaledown run current pool le two vms keep server turned onceoh model found case true error deadlock reachederror behavior point state initial predicate load false pc kill vm fail autoscale scaleup autoscale scaledown modify load vms modifyload vms load falsestate action line col line col module provisioningautoscale load false pc kill vm done autoscale scaleup autoscale scaledown modify load vms modifyload vms load falsestate action line col line col module provisioningautoscale load false pc kill vm done autoscale done autoscale scaledown modify load vms modifyload vms load falseif vms usage kill process run scale process killed vms selectseq vms lambda x x selects new sequence original vms picking element lambda return true case vms le usage effect removing unhealthy machine pooland pool replace e v len vms vms v return false applied empty sequence let change adding len vms beginning make true le vms poolbut even though control behavior tweaking model fault model exactly actually raise really important question autoscaling service server unhealthy spin new one actually happened buildkite year ago misconfigured setting triggered failure notice otherwise healthy server fact exactly sort issue tends trigger cascading failuresright going update model prevent modeling real system might want instead build another model looked process spinning new server detail important design practice tla considering every possible state want adding complexity model instead want build model using broad simple business process model find edge case building model look specific component detail testing edge casesaltogether finished model module provisioningautoscale extends tlc integer sequence algorithm provisioningvariablesvms define servershealthy e v len vms vms v end define fair process vmdies kill vm begin fail await len vms vms selectseq vms lambda x x end process fair process scaleup autoscale variable load false begin scaleup load len vms e v len vms vms v load vms append vms end end process fair process scaledown autoscale variable load falsebegin scaledown await len vms load v len vms vms v load vms tail vms end end process end algorithm fair keyword tell tla necessary process run order model complete might never need kill server example tla wait u tousing modeling part development processall seems like lot work connect normal development process see benefit modeling primarily communication assumption gathering insight seam join complex infrastructure good model help decide thing like technology selection often choose tool based already familiar trendy cool modeling help determine behavior looking component architecturemonitoring alerting strategy knowing system likely fail help figure monitor without wait failure happenslos part process modeling figuring desired outcome actually written code take conclusion draft slos themmake mistake complex system always unexpected failure nothing completely prevent modeling improve awareness around give edge cutting lead outagesother model look atif like see code configuration model github also thanks always amazing hillel wayne helping track occasional tla bug go buy book
102,Lobsters,virtualization,Virtualization,Introduction to Kubernetes,https://www.driftingruby.com/episodes/introduction-to-kubernetes,introduction kubernetes,,terminal sudo snap install classic dns ingres dashboard clusterinfo create namespace coderenv delete namespace coderenv sudo snap alias kubectl kubectl apply f coderyml coderyml apiversion kind deployment metadata label app coder name coderdeployment namespace coderenv spec replica selector matchlabels app coder template metadata label app coder spec container image codercomcodeserver volumemounts mountpath code name code command codeserver allowhttp noauth name coder port containerport livenessprobe httpget path port initialdelayseconds timeoutseconds volume hostpath path homekobaltzcode name code apiversion kind service metadata name coderservice namespace coderenv label app coder spec port port protocol tcp targetport selector app coder apiversion kind ingres metadata name coderingress namespace coderenv spec rule host http path path backend servicename coderservice serviceport
103,Lobsters,virtualization,Virtualization,moving to the cloud,https://flak.tedunangst.com/post/moving-to-the-cloud,moving cloud,,reading lot benefit virtualization cloud deployment integrate system modern web client design exciting pleased announce flak fully cloud enabled story incredible journeythe first thing need virtual machine using machine emulator written javascript web ready startnext need cloud virtual machine preferably cloud autoscale response traffic level achieve create new virtual machine every visitor guarantee great performance also secure everybody virtual machine possible attacker alter post currently readinghowever willing stop good enough better create virtual machine every post well heard container isolation right every flak post run container isolating poststo improve performance distributed virtual machine cloud across internet leveraging powerful javascript engine browser personal virtual machine ideally located close proximity improving interactive response timeit time real talk cost running infrastructure kidding cost machine entirely virtual pay even penny run themmodern web design rich interactive experience make thing responsive without slow tiresome server request another great thing new architecture running virtual machine browser server request everything need view post fully loaded contained within vm read scroll pace enjoy immediate feedbackas reader sure excited change beginning hope expand enrich client side experience time going get better
105,Lobsters,virtualization,Virtualization,AsiaBSDCon 2019 Proceedings,https://2019.asiabsdcon.org/proc-body-2019.pdf,asiabsdcon proceeding,,obj endobj xref n n n n n trailer prev startxref eof obj stream aydaei ȭ vb hsϡ x xx ʚ w
109,Lobsters,virtualization,Virtualization,"Writing User-Space, Network Drivers",https://arxiv.org/pdf/1901.10664.pdf,writing userspace network driver,,obj filter flatedecode length stream w endobj obj filter flatedecode length stream endobj obj filter flatedecode length stream xڭ dз x ރ j w b р l e c czv u x հj p endstream endobj obj filter flatedecode length stream w f na u b c
110,Lobsters,virtualization,Virtualization,Boxify: Full-fledged App Sandboxing for Stock Android (2015),https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-backes.pdf,boxify fullfledged app sandboxing stock android,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream e n ܔ endstream endobj obj metadata rpages rstructtreeroot rtypecatalog endobj obj font procset pdftext property rotate typepage endobj obj stream w ə q q ŵ l x wk p endstream endobj obj stream ft q qt p c z jmp uk ak g b w ydx f f u r stream w ej l ck j kp f b ア qh w q k ӯ hx c lmodz w w эm u q c z endstream endobj obj stream endstream endobj obj stream u r endstream endobj obj stream u j ev xm k uu bլ fz endstream endobj obj stream dƃ b f w l x endstream endobj obj stream pzݖ l vt
111,Lobsters,virtualization,Virtualization,Bridging Matrix with WhatsApp running on a VM,https://matrix.org/blog/2019/02/26/bridging-matrix-with-whatsapp-running-on-a-vm/,bridging matrix whatsapp running vm,http matrixorgdocsguideswhatsappbridgingmautrixwhatsapp install homeserver install mautrixwhatsapp whatsapp bridge installing synapse synapse readme mautrixwhatsapp mautrixwhatsappwiki matrixdockeransibledeploy mautrixwhatsapp matrixdockeransibledeploy mautrixwhatsapp mautrixwhatsapp set android vm install android studio install whatsapp signin setup mautrixwhatsapp bridge mautrixwhatsappwiki whatsappbot demo,guide live documentation http matrixorgdocsguideswhatsappbridgingmautrixwhatsapp find text belowmatrix open standard interoperable decentralised realtime communicationin article benefit three attribute interoperable see matrix made interact whatsappdecentralised perform server still enjoying benefit connected rest matrix federationrealtime communication see send receive message realtimeinstall homeserver install mautrixwhatsapp whatsapp bridgefirstly need matrix homeserver installed nt currently one take look instruction installing synapse also synapse readmenext install mautrixwhatsapp following instruction mautrixwhatsappwikiif starting scratch suggest take look matrixdockeransibledeploy project enable deploy synapse mautrixwhatsapp component easilyfor example existing deployment using matrixdockeransibledeploy add mautrixwhatsapp simply adding following line configuration file matrixmautrixwhatsappenabled true rerunning setup ansibleplaybook inventoryhosts setupyml tagssetupalleither way soon functioning matrix synapse homeserver mautrixwhatsapp installed next set android vmset android vmthe best way run android virtual machine use android studio tool google first install android studio making sure follow postinstall step install additional tool need including avd manageronce installed run avd manager choosing tool avd manager menufollow step create new virtual machine example nexus running android almost configuration fine make sure give device access play storeinstall whatsapp signinlaunch virtual device open play store sign use play store install whatsapp virtual deviceyou asked verify phone number use number another device complete stepsetup mautrixwhatsapp bridgenow whatsapp working vm matrix working server time bridge togther per instruction mautrixwhatsappwiki must start new chat whatsappbot yourdomain type login begin authentication processmautrixwhatsapp operates using whatsapp web feature whatsapp mean us qr code must scan device running whatsapp case avd order scan presented qr code set avd camera passthrough camera device host machine see image belowonce complete type sync start bridging contact sync create automatically create room invitesand may need take little time watch sync happen particularly large number chat whatsapp side configuration neededdemo â
112,Lobsters,virtualization,Virtualization,Security in QEMU talk at KVM conf,http://blog.vmsplice.net/2018/11/video-and-slides-available-for-security.html,security qemu talk kvm conf,pdf,gave talk security qemu kvm forum cover architecture qemu focus attack surface exposed guest hope useful anyone auditing writing device emulation code also describes key design principle isolating qemu process limiting damage done guest escape video talk available video slide available pdf
115,Lobsters,virtualization,Virtualization,Flatkvm - A tool to easily run Flatpak apps isolated with QEMU/KVM,https://github.com/flatkvm/flatkvm,flatkvm tool easily run flatpak apps isolated qemukvm,flatpak warning qubes o work flatkvm flatkvmagent virtiovsock flatkvm agent flatkvm agent flatkvm qmp demo known issue enabled clipboard content host shared vm flatkvmpaste twofingerwheel scrolling nt work gnome xorg spotify start vm immediately shut flatkvmagent n flatkvm run first run steam take long time virtualbox ca nt start vm flatkvm application running kvmko virtmanager keepassxc ca nt save open database installing fedora copr repository distros flatkvm flatkvmagent flatkvmlinux flatkvmtemplatedebian,flatkvm tool easily run flatpak apps isolated inside vm using qemukvm warning beta quality software nt externally audited use care need trusted isolation take look qubes o work flatkvm binary host executes qemu instance accelerated kvm using snapshot specialized template root filesystem perapp virtual disk image automatically created demand vm start xorg session running flatkvmagent small program communicates binary host using virtiovsock device session vm ready flatkvm instructs agent mount flatpak directory shared readonly host using execute flatpak application indicated user command line afterward flatkvm agent keep communication open notify clipboard event dbus notification signal eventual termination flatpak application app exited flatkvm sends acpi shutdown signal vm using qmp interface demo known issue enabled clipboard content host shared vm automatic clipboard sharing implies content host sent vm viceversa significant breach isolation ideally clipboard sharing ondemand probably provided dbus service integrated ui version flatpak implement discrete clipboard mode selected passing clipboard discrete argument command line mode flatkvm longer sends host clipboard update vm instead clipboard data must explicitly shared using flatkvmpaste twofingerwheel scrolling nt work qemu gtk ui seems trouble receiving scrolling event wayland workaround switching gnome xorg tracked spotify start vm immediately shut spotify probably apps forkexec running confuses flatkvmagent thinking app already exited workaround passing n flag flatkvm run disable automatic shut first run steam take long time result combination poor performance steam insisting inspecting library present package steam updated runtime game reside dedicated virtual disk longer issue virtualbox ca nt start vm flatkvm application running flatkvm us kvm implies loading initializing kvmko multiple virtualization technology ca nt simultaneously enabled machine virtualbox ca nt used parallel flatkvm possible workaround switching virtualbox virtmanager keepassxc ca nt save open database keepassxc possibly apps nt play nice xdgdesktopportal file access model tracked installing fedora easiest way give flatkvm try using copr repository sudo dnf copr enable slpflatkvm sudo dnf install flatkvm install app using flatpak flatpak install user http firefoxflatpakmojefedoraczorgmozillafirefoxnightlyflatpakref execute flatkvm flatkvm run orgmozillafirefoxnightly distros despite young age flatkvm already quite complex four different component flatkvm flatkvmagent flatkvmlinux flatkvmtemplatedebian interacting honest porting packaging testing every distro requires amount time nt currently focusing fedora course want volunteer port maintain flatkvm another distro welcome
117,Lobsters,virtualization,Virtualization,Writing a bare metal hypervisor for 64-bit ARM systems,https://ashw.io/blog/arm64-hypervisor-tutorial/1,writing bare metal hypervisor arm system,open source project github foundation platform model community edition new youtube channel hypervisor amazon web service microsoft azure,hello welcome new tutorial series writing bare metal hypervisor arm system series cover fundamental virtualization arm architecture develop accompanying hypervisor stepbystep beginning simple example hosting trivial virtual machine working hosting fullyfledged operating system kernel linux topic discussed include device tree spoofing stage address translation cpu feature spoofing instruction emulation device emulation virtual interrupt firmware interaction morethe hypervisor code actively developed open source project github demoed throughout series foundation platform model shipped freely available community edition supplementary video also hosted new youtube channelthis first post aim introduce key concept kickstarts development example boot arm processor hypervisor print hello world uart serial console assemblywhat hypervisor first take step back consider role operating system kernel provide layer abstraction top underlying hardware allocate schedule resource multiple userspace application including execution time memory file io access peripheral way kernel said supervise userspace application running top hypervisor exactly thing instead hosting multiple userspace application host multiple operating system kernel supervises supervisor hence name hypervisora hypervisor creates virtual machine behave though real physical machine certain use case operating system kernel controlling virtual machine referred guest truly belief control real physical machine idea virtualized however typically come performance penalty use case guest made aware virtualized cooperate hypervisor reduce overhead known paravirtualizationtypical application virtualization include sandboxing certain process task running second operating system machine already running operating system test crossplatform software run legacy application virtualization widely used tool cornerstone compute hosting service one rent virtual machine running cloud think amazon web service microsoft azure name industry defines two type hypervisor imaginatively named type type hypervisors also known bare metal hypervisors sit directly hardware underlying host operating system contrast type hypervisors also known hosted hypervisors either run top part host operating system running hardware
118,Lobsters,virtualization,Virtualization,QEMU HAXM on NetBSD,http://polprog.net/blog/netbsd-hax/,qemu haxm netbsd,howto set qemu hax acceleration netbsd back homepage challenge hardware software requirement installation build haxm prepare pkgsrcwip build qemuhaxm create haxm device script get test system image microsoft run qemu enjoy hax o gallery github issue github issue github issue enlightened back homepage,howto set qemu hax acceleration netbsd back homepage learnt kamil rytarowski taken challenge porting haxm netbsd found great learning opportunity learn o development decided help check whether demo window really work step taken get running post meant guide setting haxm accelerated qemu netbsd haxmcapable qemu currently provided pkgsrc wipqemuhaxm apart kernel patch provided kamil necesary anymore fpudna fix integrated haxm step needed get running system command line prefixed executed root regular user hardware software requirement intel cpu based pc vtx check bios case look vmx flag cat proccpuinfo lscpu linux also list working netbsd system preferably general idea vms use patch shell installation install source set patch kernel source compile new kernel kernel patching necesary anymore skip building haxm install src xsrc syssrc set done initial system installation later latter case wget ftp src xsrc syssrc tgz su set src syssrc xsrc tar zxvf settgz c done patch kernel source need patch one file located cd usrsrc su curl http patch patch fails reason apply manually small change record patch content jul feb struct pcb pcb int usermode frame tfcs frame tfeflags panic fpudna kernel ip p trapframe pn void frame frame usermode frame tfcs frame tfeflags panic fpudna kernel ip p trapframe pn void frame frame clts return sendsigill void frame patched kernel go ahead build cd usrsrc buildsh tool buildsh kernelgeneric cp netbsd netbsdold cp reboot fail old kernel backed strike key booloader boot instead build haxm install netwide assembler nasm necesary compile haxm pkgadd nasm get haxm source build git clone http githubcomintelhaxm cd platformsnetbsd make load haxm module cd haxmplatformsnetbsd uname check uname kernel must su modload haxmkmod run dmesg verify module loaded correctly prepare pkgsrcwip build qemuhaxm necesary use wipqemuhaxm prepare pkgsrcwip another patch applied time asked git access pkgsrcwip push soon get account following command install pkgsrcwip system cd usrpkgsrc git clone depth git wippkgsrcorgpkgsrcwipgit wip apply patch might necessary cd qemuhaxm curl http polprognetpapierynetbsdhaxmpkgsrcqemuhaxmdiff patch build qemuhaxm proper option previously installed qemu use pkgdelete qemu remove make pkgoptionsqemu sdl make install create haxm device notice major number changed need recreate device node delete device node rm devhax rm r devhaxvm rerun script use script create haxm device vcpu node content binsh make netbsd haxm device id u echo need root exit fi echo loading haxm kmod modload haxmkmod echo making hax device mknod devhax c mkdir devhaxvm seq mkdir done seq mknod c done echo making vcpu node lt vm echo bc vcpu echo bc echo vm vm vcpu vcpu cmd printf mknod devhaxvm c vm vcpu cmd let done get test system image window run bit guest due haxm emulating tpr register window us new control register added used task prioritization currently hack ignores change guest operating system ok testing necessary emulation haxm soon since people actively working grab win image microsoft select virtualbox platform command virtualbox image test image work well quad core gb ram test box window laggy mouse pointer ok everything work like use command get image unzip zip file downloaded tar zvf content ovum ignore tar error corrupted archive file intact qemuimg convert f vmdk vmdk file ovum file tar archive untar get vmdk file remove vmdk ovf zip make sure image work free space run qemu enjoy hax hda netdev user device accel hax command line launch window image working network enjoy o gallery screenshots operating system boot successfully freebsd minix plan haiku toaruos kolibrios thanks nia sytems currently fail run haxm win hang loading screen run othwerise error ramdisk creation o openbsd gp see srctrapc github issue solaris trap bootloader github issue partially solved boot reactos bsod selecting live mode device detection dialog run ok icaros thanks nia github issue window xp vista hang host window nt installer broken normal qemu window issue vcpu shutdown request emulation stop qnx reported cause vcpu shutdown nia enlightened different o user haxm guest system hanging host kernel do attack vector back homepage
119,Lobsters,virtualization,Virtualization,Securing a Community Cloud (2010),https://www.researchgate.net/publication/224193031_Securing_a_Community_Cloud,securing community cloud,,p loscocco smalley integrating flexible supportfor security policy linux operating system inproceedings freenix track usenix annualtechnical conference berkeley ca usa usenix association pp p loscocco smalley meeting critical securityobjectives security enhanced linux proceeding ofthe ottawa linux symposium netﬁlterorg netﬁlteriptables project wwwnetﬁlterorg openvpn open source ssl vpn solution http openvpnnet l vaquero l roderomerino j caceres lindner break cloud towards cloud deﬁnition sigcomm comput commun rev vol pp nist deﬁnition cloud computing http c odhner security nfs storage network networkappliance tech rep february online available http j h saltzer schroeder protection ofinformation computer system proceeding ieee vol pp online available http ieeexploreieeeorgxplsabs alljsp smalley c vance w salamon implementingselinux linux security module nai lab nai labsreport dec revised may online available http wwwnsagovselinuxdocmodulepdf c wright c cowan smalley j morris g kroahhartman linux security module general security supportfor linux kernel proceeding usenixsecurity symposium berkeley ca usa usenix association pp j morris networking nsa securityenhanced linux linux journal vol p king p chen backtracking intrusion acmtrans comput syst vol pp f baiardi maggiari sgandurra invariantevaluation introspection proving securityproperties information assurance security vol pp online available http wwwmirlabsorgjiasbaiardipdf iozone filesystem benchmark http wwwiozoneorg cloud computing use case discussion group cloud computing use case version october catteddu g hogben cloud computing risk assessment enisa tech rep november expert group report future cloud computing opportunity european cloud computing beyond europa cordis tech rep h douglas c gehrmann secure virtualization andmulticore platform stateoftheart report sics tech rep dec garﬁnkel b pfaff j chow rosenblum boneh terra virtual machinebased platform trusted computing proceeding acm symposium operating system principle sosp bolton landing ny usa acm october pp b chun culler roscoe bavier l peterson wawrzoniak bowman planetlab overlaytestbed broadcoverage service sigcomm computcommun rev vol pp e bryant j early r gopalakrishna g roth e spafford k watson p william yost asecure network service architecture computer securityapplications conference proceeding annual j mccune jaeger berger r caceres r sailer shamon system distributed mandatory access control acsac proceeding annual computer security application conference annual computersecurity application conference washington dc usa ieee computer society pp h lagarcavilla j whitney scannell p patchin rumble e de lara brudno andm satyanarayanan snowflock rapid virtual machinecloning cloud computing eurosys proceedingsof acm european conference computer systemsnew york ny usa acm pp h p reiser r kapitza vmfit supporting intrusiontolerance virtualisation technology proceeding ofthe workshop recent advance intrusiontolerantsystems conjunction eurosys lisbon portugal march pp w wang z li r owen b bhargava secure andefﬁcient access outsourced data ccsw proceeding acm workshop cloud computing securitynew york ny usa acm pp christodorescu r sailer l schales sgandurra zamboni cloud security virtualizationsecurity short paper ccsw proceeding acm workshop cloud computing security newyork ny usa acm pp yun c shi kim protecting integrity andconﬁdentiality cryptographic ﬁle system outsourcedstorage ccsw proceeding acm workshop cloud computing security new york ny usa acm pp j wei x zhang g ammons v bala p ning managing security virtual machine image cloudenvironment ccsw proceeding acmworkshop cloud computing security new york ny usa acm pp
120,Lobsters,virtualization,Virtualization,virtio: Towards a De-Facto Standard For Virtual I/O Devices,https://www.ozlabs.org/~rusty/virtio-spec/virtio-paper.pdf,virtio towards defacto standard virtual io device,,obj stream h h n u e v ԫma g q j wǀb p p l䚥 un e mñ ǫ g w u b х dx endobj obj endobj obj stream h u ȑ b k gol ށ v q c b v w u l jh e
121,Lobsters,virtualization,Virtualization,virtio-fs: shared file system for virtual machines,https://lore.kernel.org/lkml/20181210171318.16998-1-vgoyal@redhat.com/,virtiofs shared file system virtual machine,patch rfc virtiofs shared file system virtual machine raw http gitlabcomvirtiofs http virtiofsgitlabio http githubcompjdpjdfstest http githubcomdistributedsystemanalysissmallfile next reply index flat nested mboxgz atom feed top vivek goyal message patch fuse add skeleton virtiofsko module patch fuse add proberemove virtio driver patch fuse rely mutexunlock barrier instead fput patch fuse extract fusefillsupercommon patch virtiofs get mount working patch fuse export fuseendrequest patch fuse export fuselenargs patch fuse add fuseiqueueops callback patch fuse process request queue patch fuse export fusegetunique patch fuse implement fuseforget virtiofs patch virtiofs set daxdevice patch dax remove block device dependency patch fuse add fuseconn daxdev field patch fuse map virtiofs dax window bar christian borntraeger stefan hajnoczi kbuild test robot dan williams dr david alan gilbert dan williams vivek goyal vivek goyal dr david alan gilbert patch virtiofs add virtiopcicapsharedmemorycfg utility find patch virtiofs fix semicoloncocci warning patch virtiofs add virtiopcicapsharedmemorycfg utility find patch virtiofs retrieve shm capability cache patch virtiofs map cache using value capability david hildenbrand dr david alan gilbert david hildenbrand dr david alan gilbert david hildenbrand dr david alan gilbert david hildenbrand cornelia huck stefan hajnoczi cornelia huck dr david alan gilbert stefan hajnoczi david hildenbrand stefan hajnoczi cornelia huck david hildenbrand stefan hajnoczi liu bo dr david alan gilbert patch virtiofs fix multiple tag support vivek goyal liu bo patch viritofs make dax optional patch limit number page returned directaccess patch fuse introduce fusedaxmapping patch create list free memory range kbuild test robot kbuild test robot patch fuse simplify fusefillsupercommon calling patch fuse introduce setupmappingremovemapping command patch introduce interval tree basic data structure patch fuse implement basic dax readwrite support command patch fuse maintain list busy element patch fallocate grow file mapping file growing writes kbuild test robot kbuild test robot patch fuse add dax mmap support patch fuse delete dentry timeout zero patch dax pas daxdev daxwritebackmappingrange kbuild test robot kbuild test robot patch fuse define dax address space operation patch fuse dax take immapsem lock dax page fault patch fuse add logic free memory range patch fuse add logic direct reclaim memory patch fuse kick worker free memory drop total range patch fuse multiplex cacheddirectiodax file operation patch dispatch forget request later instead dropping patch release file process context patch fuse block inode lock freeing memory range patch fuse reschedule dax free work many eagain attempt patch fuse wait memory range become free patch fuse take inode lock dax inode truncation patch fuse clear setuid bit even direct io path patch virtio free fuse device umount patch virtiofs retrieve shm capability version table patch virtiofs map using value capability patch virtiofs pas version table pointer fuse patch fuse nt crash version table null patch fuse add shared version support virtiofs patch fuse shared version cleanup patch fuse fix fusepermission defaultpermissions case kbuild test robot patch rfc virtiofs shared file system virtual machine konrad rzeszutek wilk vivek goyal aneesh kumar kv vivek goyal piotr jurkiewicz vivek goyal message mbox http enwikipediaorgwikipostingstyle interleavedstyle http kernelorgpubsoftwarescmgitdocsgitsendemailhtml mailto link config snippet nntp nntplorekernelorgorgkernelvgerlinuxkernel http publicinboxorgpublicinboxgit,vivek goyal vgoyal redhatcom linuxfsdevel vgerkernelorg linuxkernel vgerkernelorg kvm vgerkernelorg cc vgoyal redhatcom miklos szeredihu stefanha redhatcom dgilbert redhatcom sweil redhatcom swhiteho redhatcom subject patch rfc virtiofs shared file system virtual machine date mon dec messageid redhatcom raw hi rfc patch virtiofs looking feedback approach patch apply top also put code various component http gitlabcomvirtiofs problem description want able take directory tree host share guest goal able fast consistent secure manner primary use case kata container usable scenario well container may rely local file system semantics shared volume readwrite mount multiple container access simultaneously file system change must visible container consistency expected local file system including mmap mapshared existing solution looked existing solution already provides basic shared file system functionality although offer local file system semantics causing workload test suite fail addition performance issue kata container believe alleviated without major change fit protocol design overview goal designing something better performance local file system semantics bunch idea proposed use fuse protocol instead communication guest host guest kernel fuse client fuse server run host serve request benchmark result see encouraging show approach performs well improvement depending test run data access inside guest mmap portion file qemu address space guest access memory using dax way guest page cache bypassed one copy data host also enable mmap mapshared guest metadata coherency shared memory region contains version number associated metadata guest changing metadata update version number guest refresh metadata next access still experimental implementation complete virtiofs differs existing approach unique idea behind virtiofs take advantage colocation virtual machine hypervisor avoid communication vmexits dax allows file content accessed without communication hypervisor shared memory region metadata avoids communication common case metadata unchanged replacing expensive communication cheaper shared memory access expect achieve better performance approach based network file system protocol addition also make easier achieve local file system semantics coherency technique applicable network file system protocol since communication channel bypassed taking advantage shared memory local machine decided build virtiofs rather focus nfs howto put instruction use http virtiofsgitlabio caching mode like different caching mode supported determine coherency level well cachefoo writeback option control level coherence guest host filesystems shared option effect coherence virtiofs filesystem instance running inside different guest cachenone metadata data pathname lookup cached guest always fetched host change immediately pushed host cachealways metadata data pathname lookup cached guest never expire cacheauto metadata pathname lookup cache expires configured amount time default second data cached file open close open consistency writebacknowriteback option control writeback strategy writeback disabled normal writes immediately synchronized host f writeback enabled writes may cached guest file closed fsync performed option effect mmaped writes writes going dax mechanism sharednoshared option control use shared version table shared mode enabled metadata pathname lookup cached guest refreshed due change another virtiofs instance dax dax turned onoff mounting virtiofs inside guest work primarily cache option none auto always working shared option still worked dax onoff seems work seem fast expecting still need look optimization opportunity todo complete cacheshared implementation look improving performance dax seems slow lot bug fixing cleanup performance improvement result pjdfstests passing tried cachenoneautoalways dax onoff http githubcompjdpjdfstest one symlink test fails seems due xfs host yet look run basic test compared seems faster ran smallfile utility simple fio job test mmap performance test setup fedora host ram socket core per socket thread per core using pcie ssd host backing store created vm vcpus memory cache window dax mmap fio mmap wrote simple fio job run mmap read ran test file file different caching mode file size dropped cache guest run cache host untouched data host must cached result average run cache mode one thread thread mmap mb mb virtiofs none dax mb mb loose mb mb virtiofs always mb mb virtiofs always dax mb mb smallfile http githubcomdistributedsystemanalysissmallfile basically ran bunch operation like create lsl read append rename deleterenamed measured performance run took average dropped cache operation started running used effectively following command operation python smallfileclipy operation create thread filesize file top testdir cache mode operation filessec none create virtiofs none create mmap create virtiofs none dax create loose create virtiofs always create virtiofs always dax create none lsl virtiofs none lsl mmap lsl virtiofs none dax lsl loose lsl virtiofs always lsl virtiofs always dax lsl none read virtiofs none read mmap read virtiofs none dax read loose read virtiofs always read virtiofs always dax read none append virtiofs none append mmap append virtiofs none dax append loose append virtiofs always append virtiofs always dax append none rename virtiofs none rename mmap rename virtiofs none dax rename loose rename virtiofs always rename virtiofs always dax rename thanks vivek dr david alan gilbert virtiofs add virtiopcicapsharedmemorycfg utility find viritofs make dax optional virtio free fuse device umount virtiofs retrieve shm capability version table virtiofs map using value capability miklos szeredi fuse simplify fusefillsupercommon calling fuse delete dentry timeout zero fuse multiplex cacheddirectiodax file operation virtiofs pas version table pointer fuse fuse nt crash version table null fuse add shared version support virtiofs fuse shared version cleanup fuse fix fusepermission defaultpermissions case stefan hajnoczi fuse add skeleton virtiofsko module fuse add proberemove virtio driver fuse rely mutexunlock barrier instead fput fuse extract fusefillsupercommon virtiofs get mount working fuse export fuseendrequest fuse export fuselenargs fuse add fuseiqueueops callback fuse process request queue fuse export fusegetunique fuse implement fuseforget virtiofs virtiofs set daxdevice dax remove block device dependency fuse add fuseconn daxdev field fuse map virtiofs dax window bar fuse implement basic dax readwrite support command fuse add dax mmap support vivek goyal virtiofs retrieve shm capability cache virtiofs map cache using value capability limit number page returned directaccess fuse introduce fusedaxmapping create list free memory range fuse introduce setupmappingremovemapping command introduce interval tree basic data structure fuse maintain list busy element fallocate grow file mapping file growing writes dax pas daxdev daxwritebackmappingrange fuse define dax address space operation fuse dax take immapsem lock dax page fault fuse add logic free memory range fuse add logic direct reclaim memory fuse kick worker free memory drop total range dispatch forget request later instead dropping release file process context fuse block inode lock freeing memory range fuse reschedule dax free work many eagain attempt fuse wait memory range become free fuse take inode lock dax inode truncation fuse clear setuid bit even direct io path driversdaxsuperc fsdaxc fsfusekconfig fsfusemakefile fsfusecusec fsfusedevc fsfusedirc fsfusefilec fsfusefuseih fsfuseinodec fsfusereaddirc fsfusevirtiofsc fssplicec fsxfsxfsaopsc includelinuxdaxh includelinuxfsh includeuapilinuxfuseh includeuapilinuxvirtiofsh includeuapilinuxvirtioidsh includeuapilinuxvirtiopcih file changed insertion deletion create mode fsfusevirtiofsc create mode includeuapilinuxvirtiofsh next reply index thread overview message expand flatnested mboxgz atom feed top vivek goyal message patch fuse add skeleton virtiofsko module vivek goyal patch fuse add proberemove virtio driver vivek goyal patch fuse rely mutexunlock barrier instead fput vivek goyal patch fuse extract fusefillsupercommon vivek goyal patch virtiofs get mount working vivek goyal patch fuse export fuseendrequest vivek goyal patch fuse export fuselenargs vivek goyal patch fuse add fuseiqueueops callback vivek goyal patch fuse process request queue vivek goyal patch fuse export fusegetunique vivek goyal patch fuse implement fuseforget virtiofs vivek goyal patch virtiofs set daxdevice vivek goyal patch dax remove block device dependency vivek goyal patch fuse add fuseconn daxdev field vivek goyal patch fuse map virtiofs dax window bar vivek goyal christian borntraeger stefan hajnoczi kbuild test robot dan williams dr david alan gilbert dan williams vivek goyal vivek goyal dr david alan gilbert patch virtiofs add virtiopcicapsharedmemorycfg utility find vivek goyal patch virtiofs fix semicoloncocci warning kbuild test robot patch virtiofs add virtiopcicapsharedmemorycfg utility find kbuild test robot patch virtiofs retrieve shm capability cache vivek goyal patch virtiofs map cache using value capability vivek goyal david hildenbrand dr david alan gilbert david hildenbrand dr david alan gilbert david hildenbrand dr david alan gilbert david hildenbrand cornelia huck stefan hajnoczi cornelia huck dr david alan gilbert stefan hajnoczi david hildenbrand stefan hajnoczi cornelia huck david hildenbrand stefan hajnoczi liu bo dr david alan gilbert patch virtiofs fix multiple tag support liu bo vivek goyal liu bo patch viritofs make dax optional vivek goyal patch limit number page returned directaccess vivek goyal patch fuse introduce fusedaxmapping vivek goyal patch create list free memory range vivek goyal kbuild test robot kbuild test robot patch fuse simplify fusefillsupercommon calling vivek goyal patch fuse introduce setupmappingremovemapping command vivek goyal patch introduce interval tree basic data structure vivek goyal patch fuse implement basic dax readwrite support command vivek goyal patch fuse maintain list busy element vivek goyal patch fallocate grow file mapping file growing writes vivek goyal kbuild test robot kbuild test robot patch fuse add dax mmap support vivek goyal patch fuse delete dentry timeout zero vivek goyal patch dax pas daxdev daxwritebackmappingrange vivek goyal kbuild test robot kbuild test robot patch fuse define dax address space operation vivek goyal patch fuse dax take immapsem lock dax page fault vivek goyal patch fuse add logic free memory range vivek goyal patch fuse add logic direct reclaim memory vivek goyal patch fuse kick worker free memory drop total range vivek goyal patch fuse multiplex cacheddirectiodax file operation vivek goyal patch dispatch forget request later instead dropping vivek goyal patch release file process context vivek goyal patch fuse block inode lock freeing memory range vivek goyal patch fuse reschedule dax free work many eagain attempt vivek goyal patch fuse wait memory range become free vivek goyal patch fuse take inode lock dax inode truncation vivek goyal patch fuse clear setuid bit even direct io path vivek goyal patch virtio free fuse device umount vivek goyal patch virtiofs retrieve shm capability version table vivek goyal patch virtiofs map using value capability vivek goyal patch virtiofs pas version table pointer fuse vivek goyal patch fuse nt crash version table null vivek goyal patch fuse add shared version support virtiofs vivek goyal patch fuse shared version cleanup vivek goyal patch fuse fix fusepermission defaultpermissions case vivek goyal kbuild test robot patch rfc virtiofs shared file system virtual machine stefan hajnoczi konrad rzeszutek wilk vivek goyal aneesh kumar kv vivek goyal piotr jurkiewicz vivek goyal reply instruction may reply publicly message via plaintext email using one following method save following mbox file import mail client replytoall mbox avoid topposting favor interleaved quoting http enwikipediaorgwikipostingstyle interleavedstyle reply using cc inreplyto switch gitsendemail git sendemail redhatcom tovgoyal redhatcom ccdgilbert redhatcom cckvm vgerkernelorg cclinuxfsdevel vgerkernelorg cclinuxkernel vgerkernelorg ccmiklos szeredihu ccstefanha redhatcom ccsweil redhatcom ccswhiteho redhatcom pathtoyourreply http kernelorgpubsoftwarescmgitdocsgitsendemailhtml mail client support setting inreplyto header via mailto link try mailto link lkml archive lorekernelorg archive clonable git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http publicinbox installed may initialize index mirror using following command publicinboxinit lkml lkml http lorekernelorglkml linuxkernel vgerkernelorg publicinboxindex lkml example config snippet mirror newsgroup available nntp nntp nntplorekernelorgorgkernelvgerlinuxkernel agpl code site git clone http publicinboxorgpublicinboxgit
122,Lobsters,virtualization,Virtualization,What would a EvE online Internet look like?,https://blog.benjojo.co.uk/post/eve-online-bgp-internet,would eve online internet look like,feb would eve online internet look like русский mmo fascinating event buildroot bird tcpdump traceroute mtr busybox tuntap another open source produced file mapped london underground system bgp med sent tfl http githubcombenjojoeveonlinebgpbackbone playing battleship bgp testing rpki work r feed follow twitter website twitter,feb would eve online internet look like translation available русский eve online fascinating game one mmo single server log meaning everyone playing logical world also fascinating set event happened inside also remains visually appealing game also home expansive world map hold player peak eve player online single world paying subscription top number getting lower year world remains infamously large meaning get one side another sizable amount time risk due player owned faction travel different area using warping within system jumping different system using jump gate system combine together produce map beauty complexity always viewed map like network large mesh system connect people get across system two jump gate lead think would happen took idea map network literally would eve online internet system look like need understand real internet work internet large collection isp numerically identified standardised unique isp number called autonomous system number asn shorter e need way exchange route since range ip address need way tell isps router route ip address world settled border gateway protocol bgp bgp work announcing another known peer route default behavior bgp get route peer give peer connected well mean peer share view routing table automatically however default behavior useful using bgp send route internal router since modern internet different logical relationship instead mesh modern internet look like however eve online set future know internet still relies forprofit routing layout let pretend see bgp scale larger network need simulate real bgp router behavior connection giving eve relatively low system reasonable link figured impossible actually run virtual machine real bgp networking find real system looked like acting together network however unlimited resource find way make smallest linux image possible disk memory consumption looked towards embedded system since embedded system often run low resource environment stumbled upon buildroot within hour small linux image thing needed make project work l alh total drwxrwxrx ben ben jan drwxrwxrx ben ben jan rwr r ben ben jan bzimage rwr r ben ben jan image contains bootable linux setup also bird bgp daemon tcpdump traceroute mtr network debugging busybox basic shell system utility image easily run qemu reasonably little amount option kernel bzimage hda hdb fat append rootdevsda rw networking chose use undocumented feature qemu version point two qemu process use udp socket transfer data handy planning provision lot link using normal method tuntap adapter would get messy fast since feature somewhat undocumented frustration getting working took significant amount time discover net name command line need side connection later glance appears option better documented however thing change take awhile propagate downstream distribution working pair vm send packet hypervisor carrying udp datagrams since running lot system need fast way configure using pregenerated configuration use handy feature qemu allows take directory hypervisor turn virtual filesystem useful since allows u make directory per system plan run qemu process point directory meaning use boot image vm cluster since system ram planning run vm clearly need decent amount ram used packetnet instance since offer ram xeon gold meaning decent amount grunt used another open source project produce eve map json form program produce configuration data test run system proved could take configuration vfat establish bgp session took plunge booting universe first attempted launch system one big event unfortunately ended causing big bang regard load system switched launching system every second core system ended taking care nicely booting process found would see large explosion cpu usage vm later figured large section universe getting connected thus causing large amount bgp traffic side newly connected vm root ifstat lo lo kb kb kb kb end got see pretty awesome bgp path since every system announcing address could see route every system system would route though get ro unicast via type bgp univ bgporigin igp bgpaspath bgpnexthop ff bgplocalpref took snapshot routing table router universe graphed highly used system get system however image huge small version post click image aware image likely make device run memory got thinking else could map bgp routed network could use smaller model test routing config worked large scale network produced file mapped london underground system test tfl system much smaller lot hop one direction go since station single line transport however learn one thing use harmlessly play bgp med however problem view tfl map bgp network real world timelatency every stop simulate latency would moving way around system fast could since looking fewest station pas however thanks freedom information act request foia sent tfl time take get one station another got generated bgp configuration router example protocol bgp neighbor source address local enable extended message enable route refresh import filter bgpmed bgpmed accept export protocol bgp neighbor source address local enable extended message enable route refresh import filter bgpmed bgpmed accept export time distance two station min path station min away number added route stationrouter pass meaning every routerstation network know time get every station every route mean traceroutes accurate look move around london example local station paddington also fun bgp simulating maintenance incident waterloo station entire network instantly pick next fastest route rather one fewest station pas magic bgp med routing code open build network structure reasonably simple json schema use eve online tfl since already repo find code http githubcombenjojoeveonlinebgpbackbone sort madness enjoy enjoy last half year various thing like playing battleship bgp testing rpki work keep date posting use blog r feed follow twitter would also like thank basil fillan websitetwitter helping ibgp configuration post worth mentioning looking eu based job sometime april know company interesting thing align sensible non sensible thing please let know
123,Lobsters,virtualization,Virtualization,ClonOS to be Rolled Out,https://hype.codes/clonos-be-rolled-out,clonos rolled,challenge medium portal blockchain design development use opensource user interface result,challenge founder hypecodes approached u goal building medium portal would present uptodate relevant news programming technology tech innovation blockchain cryptocurrency development client partnered medium company cryptocurrency leader online content creator striving dominate technologyrelated medium market three month develop impressive portal vastly different design identity competitor seeking partner could deliver website accurately reflected ethos something new stylish unique featured streamlined userfriendly structure ensure reader miss important news design development hypecodes team wanted use opensource drupal platform since facilitates building amazing digital experience convenient affordable solution market offer used technology like drupal bootstrap ensure content creator user would get best experience desktop mobile device portal made responsive compatible device wanted make sure hypecodes team practical userfriendly admin panel integrated convenient content management system also added feature ensures advertisement news banner portal negatively affect interface structure news section portal needed easy navigate utilized intuitive browsing feature inserted search option header every page hypecodes founder envisioned creative userfriendly news portal would attract attention reader completely different identity existing cryptorelated portal keep fastpaced world medium portal needed flexible easily updated designed portal way allowed layout interface color scheme easily changed needed marketing technical content graphic expert made sure website scored high front three month hypecodes everything needed successful start outstanding identity brand book fresh design convenient user interface streamlined content management system result hypecodes become valuable resource professional web developer anyone interested cryptocurrency blockchain technology portal delivers latest news software technology reallife usage provides current relevant update financial market cryptocurrencies blockchainrelated project forecast future programming language technology userfriendly interface responsive design helped hypecodes increase brand exposure attract new reader build stronger relationship existing user hypecodes well known european american crypto community team frequent guest tech conference world
124,Lobsters,virtualization,Virtualization,Advanced Mac Substitute,https://www.v68k.org/advanced-mac-substitute/,advanced mac substitute,advanced mac substitute advanced mac substitute system twilight advanced mac substitute lode runner advanced mac substitute prologue fool errand advanced mac substitute amazing advanced mac substitute welcome advanced mac substitute factored application backend frontend solitaire advanced mac substitute amazing solitaire missile iago missile advanced mac substitute iago advanced mac substitute support source source code try advanced mac substitute nyanochrome cat advanced mac substitute older documentation,advanced mac substitute advanced mac substitute advanced mac substitute apilevel reimplementation classic mac o run mac application emulator without apple rom system software system twilight running advanced mac substitute lode runner running advanced mac substitute opening prologue cinematic fool errand running advanced mac substitute amazing running advanced mac substitute point see solved maze unlike traditional emulator advanced mac substitute emulate hardware operating system run except processor actually replaces o launch directly application without startup phase welcome advanced mac substitute application real loading screen advanced mac substitute factored application backend includes emulator build run posixlike system frontend generic bitmapped terminal abstraction ported four platform far classic mac o mac o x linux framebuffer android solitaire running advanced mac substitute android phone advanced mac substitute capable running several application written original macintosh computer example include four game amazing solitaire missile iago missile running advanced mac substitute point see next frame iago running advanced mac substitute point see current support includes graphic region circle roundrects line cursor grafports text window control menu dialog source source code advanced mac substitute github feeling adventurous try advanced mac substitute x window system linux framebuffer console mac o x version homebrew nyanochrome cat running advanced mac substitute point animate older documentation moved revision way
125,Lobsters,virtualization,Virtualization,vmm(4) for i386 deleted from -current,http://undeadly.org/cgi?action=article;sid=20190120142529,vmm deleted current,rueda two commits,contributed rueda virtually vax dept two commits pratik vyas pd vmm support host system deleted one still run guest vmm host commit message explain reasoning behind move cvsroot cv module name src change pd cvsopenbsdorg modified file distribsetslistsbase usrsbinvmctl makefile usrsbinvmd makefile log message disable vmdvmctl next commit delete vmm reason delete vmm broken almost one complained falling sync worked machine vmx probably run run ok mlarkin deraadt cvsroot cv module name src change pd cvsopenbsdorg modified file generic confc cpuc ipifuncsc machdepc mainbusc pmapc pmapaec confh cpuh intrdefsh pmaph pteh specialregh vmmvarh syskern kernpledgec removed file vmmc vmmsupports log message delete vmm still able run guest vmm reason delete vmm broken almost one complained falling sync worked machine vmx probably run run ok deraadt mlarkin
126,Lobsters,virtualization,Virtualization,Qubes OS 4.0.1 has been released,https://www.qubes-os.org/news/2019/01/09/qubes-401/,qubes o released,downloads point release,pleased announce release qubes first stable point release qubes includes many update initial release particular update date including lot bug fix improvement gui tool fedora templatevm debian templatevm whonix gateway workstation templatevms linux kernel qubes available downloads page point release point release designate separate new version qubes o rather designates respective major minor release case inclusive update certain point installing qubes fully updating result system installing qubes currently using uptodate qubes installation including updated fedora debian whonix template system already equivalent qubes installation action needed similarly currently using qubes release candidate followed standard procedure keeping uptodate system equivalent stable installation additional action needed currently using qubes new template installed yet recommend follow appropriate documentation regardless current o wish install reinstall qubes reason iso make convenient secure since bundle qubes update date especially helpful user whose hardware new compatible original qubes installer
127,Lobsters,virtualization,Virtualization,International Obfuscated C Code Contest Best of show,https://www.ioccc.org/2018/mills/hint.html,international obfuscated c code contest best show,best show mrxo sonicnet judge comment use try selected judge remark author comment program building running bsd winner first ioccc contest available online building running research unix b language building running unix story b programming language wrote program printout assemblylanguage source original version unix huge amount work available github packed bcd licencing fun permissive bsdlike license original runtime environment used first ioccc compiletime option ascii art supposed paper tape acknowledgement unix heratage society simh bitsavers home page late dennis ritchie,best show christopher mill mrxo sonicnet twitter misterxopher judge comment use make prog try make prog boot prompt type return prompt type rk rkunix note quit press controle selected judge remark small machine need small program program weighs byte considerably lighter original machine replace program take back start everything possible run type make note quit press controle greeted familiar prompt login username password dmr dmr make thing familiar need create invented yet image ln dd dmr l reveal c invented yet iobcc anyone compiler bc produce assembly need assembled together order ops bls hello bi produce aout wait said start program also run program replaces even larger machine run bsd start make prog boot prompt type return prompt type rk rkunix note quit prog press controle familiar possible compile run one first ioccc entire mullenderc wait even try make prompt type rkunix note quit press controle author comment ioccc entry dedicated late dennis ritchie program since annual ioccc thought mark occasion look back earliest root time contest enters year providing safe forum poor c code c language fast approching anniversary along unix operating system whose history entwined program delivered full machine emulation original ken thompson used write first version unix full machine emulation used subsequent unix makefile build version run following unix circa research unix version circa bsd circa reason described bit last bsd default building running bsd run bsd make build prog prog run see prompt firststage bootloader look like boot type return point get secondstage boot loader look like prompt indicates bootloder correctly determined running point type rather cryptic command rk rkunix tell system look first partition first fixed disk find rkunix file load eventually see following boot rk rkunix berkeley unix rev sun nov pst mem configure system xp csr vector skipped csr rk csr vector attached hk csr vector skipped csr rl csr vector skipped csr rp csr vector skipped csr ht csr vector skipped csr tm csr vector skipped csr t csr vector skipped csr dh csr vector skipped csr dm csr vector skipped autoconfig routine dz csr vector skipped csr dz csr vector skipped csr dn csr vector skipped autoconfig routine vp csr vector skipped autoconfig routine lp csr vector skipped csr erase killu intrc congratulation running bsd unix singleuser mode root hand typo somewhere boot loader probably crashed halted type controle quit simulation try really badly might corrupted virtual disk consider make clean start scratch assuming managed type character correctly root prompt command familiar work quarter century ago much could thing changed let try l cshrc profile boot hkunix mnt tmp login dev lib mullenderc unix msgsrc bin etc lostfound rkunix usr df filesystem mounted kbytes used free used cc mullenderc aout program run winner first ioccc contest personal favorite mine rather tightly bound running either vax one hitting controlc return bsd unix prompt hitting controld log singleuser session get back login prompt log root get full timesharing session feel free try thing like vi taken liberty editing login profile file set console le traditional setup wait model ksr teletype move carriage also predefined term probably work well enough whatever sort ansi terminal emulation using note mounted usr disk command usrbin missing along man page available online need adding second disk possible get around judge doubt attest mid creep quicker expect enough fun bsd type controle exit emulation building running research unix research unix bsd use executable require different disk image type make build type prog run see boot loader prompt single point must type special incantation rkunix see rkunix mem restricted right use duplication disclosure subject restriction stated contract western electric company inc running singleuser session unix might want start stty lcase otherwise everything cap failed typing seven character without making mistake may need use controle quit simulation assuming careful try command rkunix mem restricted right use duplication disclosure subject restriction stated contract western electric company inc stty lcase l bin dev etc hpunix lib mnt rkunix rpunix tmp unix usr cat fooc main printf hello world n cc fooc aout hello world version interesting well oldest version could find boot image c c compiler recognizably c quite syntax today much closer b language derrived particular c compiler would able compile mullenderc simple following syntax feature exist yet short data type exist yet int short show long come port interdata start make idea portability become important hexidecimal constant exist yet digital computer used octal array initializer syntax yet moved using still us older form taken b look like array still compile hello world note must type controld finish entering code let cat see endoffile version unix go multiuser mode controld singleuser mode entered frontpanel console switch set magic number changed recompile done version type controle exit simulation note since bsd unix use emulation code use name disk want go back bsd simulation either delete make clean make building running unix set wayback machine start story interesting well worth read bell lab pulling multics project ken thompson collegues become accustomed relatively nice programming environment also enjoyed early computer game space travel wanted another system run found already obsolete time port space travel primitive programming environment influenced thompson recreate part multics experience much hardwareconstrained environemnt summer wife monthlong vacation thompson rewrote filesystem emulation experementing include assembler shell editor operating system kernel hence created first version unix although named yet try version typing make since version native emulation get binary type run see login prompt login two user account ken dmr password ken dmr respectively let try dennis richie dmr account login dmr password dmr l even though ken feel give licence include quote bsd fortune program ken thompson automobile helped design unlike automobile neither speedometer gas gauge numerous idiot light plague modern driver rather driver make mistake giant light center dashboard experienced driver say usually know wrong deal well slightly long story short version gone far back history unix filesystem path yet word say something like binls yet shell store path path search also invented yet fact filesystem even traditional unix tree structure directed graph hard l need able read current directory dmr home directory yet make home directory hard link dd directory hold user home directory eventually become root path ln dd dmr make new link note ln support path either give three argument directory current dir file directory new name l work try thing login dmr password dmr ln dd dmr l dd system as breadme bi bls db hellob ops cat breadme compile run hellob bc hellob hello ops bls hello bi ii ops bls hello bi aout hello world bc hellob hello ops bls hello bi ii ops bls hello bi aout hello world last command invoking compiler exteremely early version b programming language predecessor c thompson missed convinience writing code highlevel language multics written version wanted convinience unix preferred bcpl typeless language dennis ritchie wrote b thought c without type accurately bcpl squeezed byte memory filtered thompson brain look b reference manual show strong correlation c show source lot c mysteriousness preserved simply c could compile dozen line existing b thompson assembler also extremely simple even know opcodes need defined first assembly file assembler oring opcode field together space operator logical link step file provided assembler command line concatenated together assembled producing single aout assembler output file even unix got linker aout remained default name binary generated linker hence also cc system still familiarity unix two threeletter command device file shell redirection core system call read write open close creat fork etc number difference still noted file path read write io word character io file need unpack byte course deal nul character exec performed shell directly argument passed four word eight byte space padded match format file name open creat wait yet exist complicated mechanism sending recieving message smes rmes used instead file permission bit different since group exist yet user program allowed run disk io disk controller data break dma access fast relative cpu transfer would dropped instruction used deferred mode indirection executed also meant program break interrupt routine kernel specifically avoid deferred access using selfmodifying code indirection pointer although suppoted trap mode primitive supervisor mode unix kernel use mean user program could alter crash kernel fact system call return address useful kernel routine user code call directly usual done exploring unix type controle exit simulator program program came looking something honor pending anniversary c language mercurial nature ioccc contest scheduling chose wait actual anniversary though writing selfhosting compiler strippeddown version c maybe even version b time obsessed idea allowing mullenderc run although still possibility interpreted version b strippeddown version c felt cheap would mullenderc spirit time discovered member unix heritage society got access printout assemblylanguage source original version unix huge amount work scanned printout fixed ocr translation built assembler file system tool scratch made accurate simulation thompson allowed get system running although source entire kernel half userspace command present including runtime library b compiler remainder needed written scratch including shell final result project available github none remotely easy discover long gone documentation le complete one would like addition device attached bit mystery disk system referenced old price list fixed disk probably made burroughs close called different interface system also included custom display device called built inhouse completely ignored kernel poke unix crew used second terminal glass tty decided implementing would possible ioccc entry emulator emulates full machine central processor core memeory module type extends core word extended arithmetic element type add one scomplement multiplication division shifting real time clock teletype model ksr perforated tape reader type fixed disk controller odd duck modern computer standard bit word byte addressing one two complement math add one complement tad two complement eae entirely one scomplement microcoded instruction autoincrement memory location nonreentrant function call return address stored indicated address pc jump location xct instruction executes word loaded memory instruction instruction law load instruction opcode accumulator heavy use inline operand instance mul instruction expects second operand stored memory instruction pretty much requires use selfmodifying code immediates almost constant live memory location referenced address common operation like subtract inclusive directly supported machine require multiple instruction spare memory location support clever also help single accumulator architecture direct support thing like stack io done dedicated io instruction also microcoded disk controller get special mention particularly annoying encoding track sector offset packed bcd nontrivial amount code space simulator needed convert bcd along equivalent amount code unix kernel simulation handle everything able discover even thing unix code use instance correctly implement trap mode feature primitive form supervisor mode even though kernel enable also implement microcoding eae instruction even though unix environment us standard encoding wanted multiply instead one probably work simulation start loading boot program virtualized paper tape modified version rim boot loader format rim format encodes word three sixbit character using one bit denote final word executed directly usually jmp hlt instruction load address come console address switch controlled compiletime flag emulator continues emulating instruction see hlt instruction cause exit console io emulated setting terminal raw mode polling via read lineclock tick hz done polling gettimeofday dynamic frequency code arranges reduce polling interval poll per tick simulation remains responsive since use real wallclock time mean emulated system see time advance correct rate licencing fun system run unix one problem permission submit unix ioccc code copyright remains property whoever owns part bell lab believe nokia point worked around problem two way first submit source code binary image unix part ioccc entry merely submitted makefile issue curl command fetch prebuilt disk image github repository hoping considered part legal abose rule supposed somewhat encouraged per rule justifying said abuse remark file secondly choice run unix code optional worried nokia lawyer running ground running old copy binary image machine almost completely nonexistant delete line makefile sleep well still two unix play two unix variant covered licence allow use back caldera international released research unix version permissive bsdlike license bsd unix based unix course permissive bsd licence nokia also released version condition assert copyright right noncommercial use newer unix clear doubt anyone actually care version either technically still copyright emulator run operating system expect emulate written assembler code emulate following equipment eis instruction set memory management unit line time clock kwords memory kbytes fixed disk drive console tty required tweak emulator first problem disk mb mb easily solveable add track unix unlikely notice although number track compile time parameter build command set correct value second problem simulating system kwords memory system kwords total meant needed virtualize physical memory add track disk hold virtualization large amount time spent tuning code efficient memory virtualization us part kword memory lru cache us number firstlevel microcaches avoid lru update also serf offload complexity segmentation logic large number memory access many eight access per instruction despite super fast emulated disk code emulator slow mostly bunch divide convert linear disk offset bcdcoded track sector emulated io polling used except time us skip flag set io instruction emulator emulator dynamically measure instruction throughput relative lineclock tick poll io time per tick one remaining problem building disk image since disk emulator store ints conversion program needed unpack binary disk image bit per word turn need done makefile using standard posix tool exactly good binary wierdly clever way od awk uudecode leave exercise curious decided would easier emulator feeding simple program boot tape required additional tweak emulator since default console tty eightbit clean fact unix expects see msb set terminal read set writes called mark parity also enabled compiletime setting used builddisk program despite complexity instruction set emulated io device corresponding primitiveness instruction set emulation suprisingly small amount code really taxing kword memory kwords actual code similar amount space memory virtualization cache disk block buffer leaving nearly half kwords memory unused simulator executes somewhere around instruction per instruction laptop running somewhere neighborhood mips mean running mips probably far actual speed cycle time around microsecond simple instruction could proportionally larger instruction multiple memory access many aside although idea emulating emulated came realization needed response latediscovered licence issue quite pleased result enables interesting window dawn unix era feel someone complete circle emulating vax run get original runtime environment used first ioccc compiletime option following command flag control compilation di imagefs name disk image file must created offline correct size avoid segmentation violation setting console address switch tell rim bootloader load boot image setting console data switch emulation read microcoded oas switch ac instruction proxy emulation read via csw device dwmapprivate set memory mapping mmap setting mapprivate make disk image copyonwrite setting mapshared make disk image sharable latter want preserve disk content session dt list initializers termios structure unix expects terminal halfduplex mode echoing input swapped cr nl unix ascii code control character cause simulation abort set abort code control console io parity set zero console eightbit clean set high bit set keyboard read masked printer output mark parity unix expects latter size disk track unix disk track sector word unix increase allow larger disk emulation track twelve sector plus space kwords virtualized memory kwords emulator code dp xxx rim bootstrap program paper tape image careful quoting least three level going particular need escape protect make ascii art supposed ascii art represents torn piece paper tape acknowledgement none could possible without hard work warren toomey member unix heratage society robert supnik contributor simh simulator historic computer architecture number time needed use source luke simh unravel dark corner machine uncountable bitsavers acquired scanned preserved manual spent many hour squinting ken thompson dennis ritchie brian kernigan mcilroy j f osssanna rudd canaday member bell lab computing science research center responsible invention unix c programming language innumerable innovation take granted part modern software landscape particular home page late dennis ritchie contained trove useful information evolution unix c recommended perusal others share peculiar retrocomputing affectation finally thanks spouse putting many hour spent nonsense treating working ioccc entry acceptable answer query spending free time similarly apologise friend coworkers listen complain obscure cornercase bug code obsession least next
129,Lobsters,virtualization,Virtualization,Using TLA+ to understand Xen vchan,http://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/,using tla understand xen vchan,table content reddit hacker news lobster background qubes vchan protocol qubesos replaced sysfirewall mirageos unikernel restarting miragefirewall taking long time ocamlvchan xen document daystodo initial git commit suggested tla tla tla hyperbook specifying system pull request tla useful ring buffer xen event channel publiciolibxenvchanh vchan source code basic tla concept variable state behaviour summary tla action correctness spec model checker source real vchan algorithm checked testing full spec odd thing vchan work tried using tlc check inductive invariance proving integrity tlaps availability tlaps limitation experience tlaps docker image final specification specvchan original bug ocamlvchan missing memory barrier read surprising behaviour make copy conclusion fixed,vchan protocol used stream data virtual machine xen host without needing lock largely undocumented tla toolbox set tool writing checking specification post describe experience using tool understand vchan protocol work table content post also appeared reddit hacker news lobster background qubes vchan protocol run qubesos laptop qubesos desktop environment made multiple virtual machine privileged vm called provides desktop environment coordinate vms network access use vms actual work example use one vm email another development work called another vm called sysnet connects physical network yet another vm sysfirewall connects application vms netvm qubesos desktop window blue border debian development vm green one fedora vm etc default sysfirewall based fedora linux year ago replaced sysfirewall mirageos unikernel mirageos written ocaml little c code unlike linux boot much faster us much le ram fedorabased vm recently user reported restarting miragefirewall taking long time problem seemed taking several minute transfer information network configuration firewall sent vchan user reported stracing qubesdb process revealed sleeping second sending record suggesting wakeup event missing lead developer qubesos said guess missing evtchn trigger readingwriting data vchan perhaps ocamlvchan ocaml implementation vchan implementing vchan specification correctly wanted check problem vchan specification xen wiki list vchan xen document daystodo initial git commit said libvchan interdomain communication library library implement bidirectional communication interface application different domain similar unix socket data sent using byteoriented libvchanreadlibvchanwrite packetoriented libvchanrecvlibvchansend channel setup done using clientserver model domain id port number must negotiated prior initialization server allocates memory shared page determines size communication ring may span multiple page although default place ring control within single page properly sized ring testing shown interface provides speed comparable pipe within single linux domain significantly faster networkbased communication looked xendevel mailing list around period case reviewer asked worked one reviewer suggested please could say word functionality new library enables perhaps design etc particular protocol spec would useful anyone wanted reimplement another guest o etc think would appropriate add protocoltxt time checking library however submitter pointed unnecessary saying comment shared header file explain layout shared memory region part protocol applicationdefined ordinarily much interested spending free time tracking race condition library benefit stranger internet however want another play tla tla language specifying algorithm used many thing particularly designed stateful parallel algorithm learned tla working docker docker ee provides software managing large cluster machine includes various orchestrator swarmkit kubernetes swarm classic web ui ensuring everything work properly important end large collection test produced part job run test take test list web ui click whatever button tell click wait period time check see match test say see lot test repeated every supported platform every release release candidate preview release lot waiting involved much thinking required keep mind occupied started reading tla documentation read tla hyperbook specifying system leslie lamport creator tla freely available online easy read hyperbook introduces tool right away start playing specifying system start theory discus tool later think worth reading docker ee released engineer allowed spend week whatever fun dockerrelated project wanted used time read swarmkit design document make tla model felt using tla prompted useful discussion swarmkit developer see seen pull request comment specification document answer question requirement property algorithm work model checking work inductive invariant really work proof answer useful document try answer vchan tla useful limited experience tla whenever reached end specification whether reading writing always find thinking obvious hardly seems worth writing spec might feel reading blog post judge whether tla useful suggest take minute look code good reading c code might find like xen reviewer quite obvious work correct like might find prefer little help might want jot note see whether learn anything new give big picture two vms decide communicate vchan one server client server allocates three chunk memory one hold data transit client server one data going server client third track information state system includes counter saying much data written much read direction server tell xen grant client access memory client asks xen map memory address space client server access lock protocol careful either end sends data writing appropriate buffer updating appropriate counter shared block buffer ring buffer getting end start beginning datawritten producer counter dataread consumer counter together tell much data buffer difference zero reader must stop reading wait data difference size buffer writer must stop writing wait space one end waiting signal using xen event channel essentially set pending flag true end wake vm sleeping vm try sleep event pending immediately wake sending event one already pending effect publiciolibxenvchanh header file provides information including shared structure comment xenincludepubliciolibxenvchanh struct ringshared con prod define vchannotifywrite define vchannotifyread vchaninterface primary shared data structure struct vchaninterface standard consumerproducer interface one pair per buffer left client write server read right client read server write struct ringshared left right size ring determines location offset ring page offset ring page us grant describe multipage ring remain constant page shared one two order leftorder rightorder shutdown detection client server exited client server connected client yet connected clilive srvlive notification bit vchannotifywrite send notify data written vchannotifyread send notify data read consumed clinotify used client inform server action clinotify srvnotify grant list ordering left right must extend actual ring grow beyond end initial shared page remain constant page shared allow possible remapping client restarts grant might also like look vchan source code note libxenvchanh file directory includes extends header file name blog post ignore xenspecific business sharing memory telling client assume client mapped memory ready go basic tla concept take first look tla concept notation using simplified version vchan tla come excellent documentation try make full tutorial hopefully able follow rest blog post reading consider single direction channel eg clienttoserver variable state behaviour variable tla programmer expects something change time example use buffer represent data currently transmitted also add variable useful specification use sent represent everything senderside application asked vchan library transmit got everything receiving application received variable got buffer sent state tla represents snapshot world point give value variable example got h buffer sent hi state reminder state also includes everything else world variable care state state got buffer sent â â â â h h h â h h hi hi â hi ih â hi behaviour sequence state representing possible history world example behaviour one want basic idea tla specify precisely behaviour want want state expression expression evaluated context state example defines integrity state expression true whenever got far match wanted send take first element message take subseq everything except first element message drop subseq len integrity take sent len got got integrity true state except added helper operator take drop sequence tla confusing indexed rather easy make offbyone error operator use length agree python syntax would written something like def integrity return ssentstartswith sgot temporal formula expression evaluated context complete behaviour use temporal operator include supposed look like square supposed look like diamond f true expression f true every point behaviour f true expression f true point behaviour message send eventually arrive one way express availability x nat len sent x len got x tla syntax bit odd rather like latex surprising lamport also latex mean rendered upsidedown say every number x always true sent x byte eventually received least x byte pattern f g common enough shorter notation f g read always lead availability also written availability x nat len sent x len got x checking length availability combined integrity enough ensure eventually receive want ideally like ensure every possible behaviour vchan library satisfy temporal formula property property availability integrity way eventually start able tell one though still think would easier case forget explain syntax summary tla list action hopefully easy see property defines property want user vchan would happy see thing rely provide much help someone trying implement vchan tla provides another way specify behaviour action tla expression evaluated context pair state representing single atomic step system example read len buffer got got buffer buffer unchanged sent read action true step step transfer data buffer got unprimed variable eg buffer refer current state primed one eg buffer refer next state strange notation using form bulleted list rather infix operator indentationsensitive tla also support list way sequence concatenation python empty sequence python unchanged sent mean sent sent python might look like def read current next return len currentbuffer nextgot currentgot currentbuffer nextbuffer nextsent currentsent action correspond closely code temporal formula talk next state related current one action allows one thing reading whole buffer c implementation vchan receiving application provide buffer size library read enough byte fill buffer model need slightly flexible version read e n len buffer got got take buffer n buffer drop buffer n unchanged sent say step read step n range length buffer transferred n byte buffer e mean exists write action defined similar way constant buffersize byte write e seq byte buffer buffer len buffer buffersize sent sent unchanged got constant defines parameter input specification constant sense change state write operation add message buffer also add copy sent talk system seq byte set possible sequence byte excludes empty sequence step combined system either read step write step next read write also need define valid starting state algorithm look like init sent buffer got finally put together get temporal formula algorithm var got buffer sent spec init next var notation next var next bracket subscript var mean next unchanged var using init state expression temporal formula mean must true first state behaviour action var mean action var must true step tla syntax requires var subscript thing going world beside algorithm must always possible take step without algorithm anything spec defines behaviour like property way make obvious implement protocol correctness spec definition spec property make sense check every behaviour spec satisfies property python term want check behaviour b satisfy def specok b return spec b false property b ie either b behaviour could result action algorithm satisfies property tla notation write specok spec property ok behaviour allowed property spec example behaviour go straight got sent got hi sent hi one step meet requirement behaviour spec real implementation may restrict spec example consider behaviour state got buffer sent â hi hi h hi hi â hi sender sends two byte reader read one time behaviour c implementation reading application ask library read buffer however behaviour ocaml implementation get choose much data return application return byte together fine need show ocamlimpl spec spec property deduce ocamlimpl property course key purpose specification need check implementation implement specification implementation directly provides desired property might seem strange implementation allow specified behaviour fact even trivial specification spec false considered correct implementation property bad behaviour behaviour ok algorithm running must behaviour even behaviour nothing user library responsible checking use eg ensuring init condition met algorithm without behaviour corresponds library could never use one go wrong running model checker come fun part ask tlc tla model checker check spec property asking toolbox create new model called mine specok setting spec prompt value buffersize used various thing fix check write tlc first try get every possible seq byte infinite set defined msg seq byte changed write use msg added alternative definition msg model send message limited length fact replacement msg ensures sent always incrementing sequence enough check property much quicker checking every possible message system keep sending forever added state constraint model len sent tell tlc stop considering execution becomes false model run successfully nice feature tla instead changing specification make testable keep specification correct override aspect model specification say send message model check add integrity invariant check pass good doublecheck changing algorithm changed read clear buffer using buffer drop buffer instead n tlc report counterexample integrity sender writes buffer reader read one byte give reader read another byte give look like really checking wanted good careful accidentally added integrity check rather would interpreted temporal formula reported success true initial state one really nice feature tlc unlike fuzz tester breadthfirst search therefore find minimal counterexample invariant example therefore quickest way violate integrity checking availability complains use nat asking check every possible length replaced nat availabilitynat overrode model complains property show example sender wrote data reader never read problem next var always allows u nothing fix specify constraint wfvars action say stop forever action always possible never happening updated spec require read action fair spec init next var wfvars read care needed specified wfvars next would forcing sender keep sending forever user vchan required worse would mean every possible behaviour system would result sent growing forever every behaviour would therefore hit len sent constraint tlc consider mean tlc would never check actual behaviour availability report success would meaningless changing read require n len buffer quick way see tlc actually checking availability complete spec far source real vchan simple spec algorithm limitation one obvious simplification buffer sequence byte transit whereas real system ring buffer made array byte along producer consumer counter could replace three separate variable make explicit however ring buffer xen well understood feel would make specification clearer include serious problem spec assumes way perform read write operation atomically otherwise real system would behaviour covered spec implement spec correctly need kind lock real vchan protocol complicated spec avoids need lock real system shared state buffer added extra variable spec item shared state c code along initial value senderlive true sender set false close connection receiverlive true receiver set false close connection notifywrite true receiver want notified next write datareadyint false sender signalled receiver event channel notifyread false sender want notified next read spaceavailableint false receiver notified sender event channel datareadyint represents state event port sender make xen hypercall set wake interrupt receiver guess sending event somewhat slow notifywrite system used avoid sending event unnecessarily likewise spaceavailableint event port algorithm understanding protocol sending side sending application asks send byte check whether receiver closed channel abort check amount buffer space available enough set notifyread receiver notify u also check space case changed setting flag space write much data buffer notifywrite flag set clear notify receiver write wrote everything return success otherwise wait notified space check whether receiver closed channel abort otherwise go back step receiving side receiving application asks u read amount data check amount data available buffer much requested set notifywrite sender notify u also check space case changed setting flag data read amount requested notifyread flag set clear notify sender new space return success application even get much requested otherwise data check whether sender closed connection connection still open wait notified data go back step either side close connection clearing flag signalling side assumed also processlocal way close operation notify side currently blocked make expressing kind stepbystep algorithm easier tla provides programminglanguagelike syntax called pluscal translates pluscal tla action confusingly two different syntax pluscal pascal style c style mean search example web chance work using flavour started pascal one first example found switched cstyle later compact attempt describing sender algorithm pluscal fair process senderwrite senderwriteid variable free idea much free space available msg data nt sent yet sent everything asked send senderready true senderlive receiverlive goto done else msg msg sent sent msg remember wanted send senderwrite true free buffersize len buffer senderrequestnotify free len msg goto senderwritedata else notifyread true senderrechecklen free buffersize len buffer senderwritedata free buffer buffer take msg min len msg free msg drop msg min len msg free free senderchecknotifydata notifywrite notifywrite false atomic testandclear sendernotifydata datareadyint true signal receiver msg goto senderready else msg goto senderready senderblocked await spaceavailableint senderlive senderlive goto done else spaceavailableint false sendercheckrecvlive receiverlive goto done label eg senderrequestnotify represent point program action happen everything two label considered atomic checked every block code label access one shared variable mean real system see state consider toolbox provide help check manually senderready label represents state client application yet decided send data label tagged indicate fairness apply protocol require application keep sending data forever step fair decided send something keep going taking step senderready senderwrite corresponds vchan write function called argument msg say could message set msg tla also contains choose operator look like might thing use saying tlc check possible message use choose saying matter message tlc try always try one term specification choose would say application ever send one particular message without telling message senderwritedata set free obvious reason reduce number state model checker need explore since care value point code little awkward put thing else branch would naturally go whole block translator let use semicolon also bit confusing pluscaltotla translator requires closing brace place pdf generator mess indentation include code block starting senderrequestnotify get translated tla action senderrequestnotify pc senderwriteid senderrequestnotify free len msg pc pc except senderwriteid senderwritedata unchanged notifyread else notifyread true pc pc except senderwriteid senderrechecklen unchanged senderlive receiverlive buffer notifywrite datareadyint spaceavailableint free msg sent want got pc mapping process id label process currently executing senderrequestnotify performed senderwriteid process senderrequestnotify label afterwards pc senderwriteid either senderwritedata senderrechecklen enough space whole message code receiver fair process receiverread receiverreadid variable amount data think buffer contains want amount data user want u read got pseudovariable recording data ever received receiver recvready receiverlive n maxreadlen want n recvreading true len buffer recvgotlen want goto recvreaddata else notifywrite true recvrechecklen len buffer recvreaddata got got take buffer min want buffer drop buffer min want want recvchecknotifyread notifyread notifyread false atomic testandclear recvnotifyread spaceavailableint true goto recvready return success else goto recvready return success else senderlive receiverlive goto done recvawaitdata await datareadyint receiverlive receiverlive want goto done else datareadyint false quite similar recvready corresponds state application yet called read take n maximum number byte read argument store local variable want note use c library blocking nonblocking mode blocking mode write read wait data sent received nonblocking mode return special code application indicating need wait application waiting call library think specification cover case depending whether think senderblocked recvawaitdata representing code inside outside library also need way close channel clear looking c header exactly allowed think multithreaded program called close function write function blocked would unblock return happened call wrong time would try use closed file descriptor fail read wrong one guess single threaded use nonblocking mode want cancel thing mean sender close senderready senderblocked similarly receiver situation ocaml code cooperatively threaded close operation called blocked idle however decided make specification general allow closing point modelling closing separate process fair process senderclose sendercloseid senderopen senderlive false clear liveness flag sendernotifyclosed datareadyint true signal receiver fair process receiverclose receivercloseid recvopen receiverlive false clear liveness flag recvnotifyclosed spaceavailableint true signal sender process start closing finish initial label tagged disable fairness ok keep vchan open forever slight naming problem pluscal translator name action generates starting state action senderopen action move senderopen label senderopen action actually close connection finally share event channel buffer going direction might get notification nothing u ensure handle added another process send event time process spuriousinterrupts spuriousid spurious true either spaceavailableint true datareadyint true eitheror say need consider possibility process marked fair rely interrupt coming handle happen testing full spec pluscal code written speciallyformatted comment block press ctrlt generate update tla translation running model checker aware tla toolbox bit unreliable keyboard shortcut typing editor always work shortcut ctrls save sometimes get disconnected think cycle really checking old version avoid always running model checker keyboard shortcut since always seems fail time others focussing different part gui clicking back editor fix everything anyway running model new spec show integrity still ok however availability check fails following counterexample sender writes buffer sender close connection receiver close connection process come stop data never arrived need update availability consider effect closing connection point unsure vchan intended could say availability x availabilitynat len sent x len got x receiverlive senderlive pass vchan describes like unix socket write unix socket close still expect data delivered actually tried availability x availabilitynat x len sent senderlive pc senderwriteid senderready len got x receiverlive say sender write operation completes successfully back senderready point sender closed connection receiver eventually receive data close end would expect behave tlc report new spec satisfy giving example simplified step total receiver start reading find buffer empty sender writes data buffer return senderready sender close channel receiver see connection closed stop bug without specification impossible say maybe vchan never intended ensure delivery sender closed end case happens unlucky scheduling receiving application call read sender closed connection data available c code return data case sender happens close connection receiver checked buffer check close flag happens also easy fix changed code receiver final check buffer giving else senderlive receiverlive recvfinalcheck len buffer want goto done else goto recvreading change sure data sent connection open always delivered provided receiver close connection spotted issue reviewing code earlier well done note tlc find problem temporal property availability necessarily find shortest example first changed limit sent len sent added action constraint spuriousinterrupts get simpler example byte sent spurious interrupt odd thing noticed couple odd thing thought mention first notifywrite initialised true seemed unnecessary initialise false instead everything still work even initialise notifywrite true false allow either behaviour thus test old program followed original version spec still work either behaviour nice advantage using specification language saying code becomes le useful build version code however spec sure existing program follow fact found qubesdb us vchan library different unexpected way instead calling read waiting libvchan say qubesdb block first case call read function get event document adding extra step start receiverread recvinit either goto recvready recommended qubesdb n maxreadlen want n goto recvawaitdata tlc show notifywrite start false second odd thing receiver set notifyread whenever enough data available fill buffer completely usually read operation provide buffer large enough largest likely message would probably make sense set notifywrite buffer completely empty checking current version algorithm changed specification allow either behaviour vchan work point specified vchan also checked least message byte long buffer size sound like much still checked distinct state behaviour step long would perfectly reasonable place declare specification blog post finished however tla interesting ability particular provides interesting technique help discover algorithm work start integrity would like argue follows integrity true initial state ie init integrity next step preserve integrity ie integrity next integrity would matter looking possible action make next checking one individually preserve integrity however integrity true example state got buffer sent satisfies integrity take read step new state instead argue take next step reachable state integrity difficult know whether state reachable without searching idea make stronger version integrity called integrityi want integrityi called inductive invariant first step fairly obvious began integrityi sent got buffer msg integrity said got prefix sent say specifically rest buffer msg data currently transmitted data yet transmitted ask tlc check init next var integrityi check invariant finding init state taking next step find reachable state also ask check integrityi next var integrityi thing starting state matching integrityi instead init created new model integrityi report technical problem start know type anything example choose initial value senderlive without knowing senderlive boolean added typeok state expression give expected type every variable message seq byte finitemessage l union n byte n l typeok sent message got message buffer finitemessage buffersize senderlive boolean receiverlive boolean notifywrite boolean datareadyint boolean notifyread boolean spaceavailableint boolean free buffersize msg finitemessage maxwritelen want maxreadlen buffersize also need tell possible state pc say label process pcok pc sw senderready senderwrite senderrequestnotify senderrechecklen senderwritedata senderblocked senderchecknotifydata sendernotifydata sendercheckrecvlive done sc senderopen sendernotifyclosed done rr recvinit recvready recvreading recvgotlen recvrechecklen recvreaddata recvfinalcheck recvawaitdata recvchecknotifyread recvnotifyread done rc recvopen recvnotifyclosed done sp spurious might imagine pluscal translator would generate also need override message finitemessage n n used otherwise enumerate possible message integrityi typeok pcok sent got buffer msg way tlc start finding real problem example showing integrityi next integrityi true first recvreaddata would outofbounds read buffer job explain valid state fix extra constraint integrityi typeok pcok sent got buffer msg pc receiverreadid recvreaddata len buffer note complains recvgotlen buffer want end recvreaddata buffer explain happen tlc search breadthfirst example find never state explain first state happen real system eventually get big ugly pile constraint think bit simply ended integrityi typeok pcok sent got buffer msg len buffer free buffersize len buffer pc senderwriteid senderwrite senderrequestnotify senderrechecklen senderwritedata senderblocked sendercheckrecvlive msg pc senderwriteid senderready msg good idea check final integrityi original specok model check really invariant summary integrity always true sent always concatenation got buffer msg fairly obvious senderready set msg appends thing sent step senderwritedata recvreaddata transfer byte start one variable end another although like local information variable might outofdate must least much data buffer sender process added removed sufficient ensure never outofrange read likewise free variable lower bound true amount free space receiver ever creates space therefore never write beyond free space think ability explain algorithm work shown example inductive property hold really nice feature tla inductive invariant useful first step towards writing proof think valuable even documenting algorithm process get explain reason believing work tried simple algorithm code seemed helpful note originally free constraint depending pc however algorithm set zero use turn always true integrityi match state even maximum sent length pass game play speed thing see using tlc check inductive invariance suggestion discovered writing proving integrity tla provides syntax writing proof integrates tlaps tla proof system allow checked automatically proving integrityi matter showing init integrityi preserved possible next var step consider action next individually long simple enough able prove recvreaddata action little difficult know want point extra work prove transferring byte work even though real system never therefore added extra condition integrityi want nonzero whenever use also condition free use completeness integrityi want pc receiverreadid recvchecknotifyread recvnotifyread recvinit recvready recvnotifyread done pc receiverreadid recvgotlen recvrechecklen recvreaddata pc senderwriteid senderwrite senderrequestnotify senderrechecklen senderwritedata free availability integrity quite easy prove trouble trying explain availability one way start would add availability property check integrityi model however take check property end example find may several step took find counterexample faster way algorithm deadlock sender receiver blocked state neither interrupt pending made new invariant say deadlock happen integrityi pc senderwriteid senderblocked spaceavailableint pc receiverreadid recvawaitdata datareadyint discovered obvious fact closing connection example senderlive flag set close thread done anything put together closeok obvious fact shutting connection closeok endpoint live iff close thread nt done anything pc sendercloseid senderopen senderlive pc receivercloseid recvopen receiverlive send receive loop nt terminate unless someone closed connection pc receiverreadid recvfinalcheck done receiverlive senderlive pc senderwriteid done receiverlive senderlive receiver closed connection get got signal pc receivercloseid done spaceavailableint pc senderwriteid sendercheckrecvlive done problem example tlc showed realised actually know algorithm deadlock intuitively seems clear enough sender put data buffer space notifies receiver receiver read notifies writer could go wrong process working information outofdate time sender decides block buffer looked full buffer might empty time receiver decides block looked empty might full maybe already saw work c code algorithm took figure eventually ended invariant form sendmayblock spacewakeupcoming receivemayblock datawakeupcoming sendmayblock true state may lead blocked without checking free space likewise receivemayblock indicates receiver might block spacewakeupcoming datawakeupcoming predict whether going get interrupt idea going block need sure woken bit ugly though eg datawakeupcoming datareadyint event sent pc senderwriteid sendernotifydata event sent pc sendercloseid sendernotifyclosed pc receivercloseid recvnotifyclosed notifywrite event requested receiverlive sender see receiver still alive pc senderwriteid senderwritedata free pc senderwriteid senderchecknotifydata pc senderwriteid senderrechecklen len buffer buffersize pc senderwriteid senderready senderlive len buffer buffersize pc senderwriteid senderwrite len buffer buffersize pc senderwriteid senderrequestnotify len buffer buffersize spacewakeupcoming len buffer buffersize senderlive pas model tested sending one byte decided try proof well work problem seems datawakeupcoming spacewakeupcoming really mutually recursive reader wake sender wake sender might blocked block ok though long receiver wake sender wake probably already figured thought document confusion occurred although process might outofdate information could fine long one moment one right last process update buffer must know full one must correct information given time enough avoid deadlock work either proof step see correct ask tlc show example eg stuck trying prove senderrequestnotify preserve receiver recvready buffer full receiverlive false ask example example pcok pc senderwriteid senderrequestnotify pc receiverreadid recvready receiverlive false len buffer buffersize create new model search example next var test long example several constraint use much larger model also ask check property false var mean show step starting example quickly became clear wrong quite possible neither process uptodate process see buffer contains x byte data sender sends byte receiver read z byte sender think x byte buffer receiver think x z byte neither correct original buffer small find counterexample real reason vchan work actually rather obvious know see earlier eventually occurred could make use got sent defined writelimit total number byte sender would write blocking receiver never anything defined readlimit total number byte receiver would read sender never anything else define limit correctly easy ask tlc check extra property running example used check readlimit behaves sensibly readlimitcorrect eventually receive readlimit promise wfvars receiverread availabilitynat readlimit len got receiverlive readlimit decrease decide shut readlimit readlimit receiverlive var receiverread step nt change read limit receiverread unchanged readlimit receiverlive var readlimit defined term process run property ideally tested model without fairness condition ie init next var otherwise fairness may force sender perform step still want allow step though show readlimit lower bound argue eg buffer eventually transfer byte receiver eventually read byte long sender eventually sends byte sender eventually send receiver read least receiver read sender sends least sender send reader read least byte always true point learning cautious trying proof added new model check idea one prevents sender ever closing connection prevents receiver ever closing reduces number state consider able check slightly larger model integrityi closeok reader stuck data available sender unblock readershouldbeunblocked sender going write writelimit len got len buffer len msg senderlive sender increase readlimit pc senderwriteid senderchecknotifydata notifywrite pc senderwriteid sendernotifydata readlimit len got len buffer sender notify u shutdown pc sendercloseid sendernotifyclosed writer stuck space available receiver unblock writershouldbeunblocked reader going read readlimit len got receiverlive reader increase writelimit pc receiverreadid recvchecknotifyread notifyread pc receiverreadid recvnotifyread writelimit len got buffersize receiver notify u shutdown pc receivercloseid recvnotifyclosed notifyflagscorrect process path blocked must set notify flag notifyflagscorrect say case flag still set interrupt sent process trigger interrupt managed use prove step preserved needed little extra finish receiver proof point finally spotted obvious invariant doubt saw along whenever notifyread still set sender accurate information buffer notifyread sender accurate information buffer writelimit len got buffersize flag cleared right pc receiverreadid recvchecknotifyread pretty obvious sender check buffer setting flag must accurate information point receiver clear flag reading buffer invalidates information dilemma obviously going matching property notifywrite add continue nearly done continued finished proof proved able prove nice thing quite easily theorem senderlive receiverlive pc senderwriteid senderready pc senderwriteid senderblocked spaceavailableint readlimit len got len buffer say whenever sender idle blocked receiver read everything sent far without help sender theorem senderlive receiverlive pc receiverreadid recvawaitdata datareadyint writelimit len got buffersize say whenever receiver blocked sender fill buffer pretty nice would possible make vchan system eg could send byte time still prove deadlock would always deliver data shown algorithm use whole buffer least theorem say long believe readlimit writelimit defined correctly proof complete went back deleted stuff readlimit writelimit started new rule notifyread notifywrite instead using writelimit len got buffersize indicate sender accurate information made new senderinfoaccurate return true whenever sender fill buffer without help avoids unnecessary arithmetic tlaps need lot help sender information accurate whenever going block buffer really full senderinfoaccurate accurate information len buffer free buffersize state going check buffer blocking pc senderwriteid senderready senderrequestnotify senderwrite senderrechecklen sendercheckrecvlive done pc senderwriteid senderrequestnotify free len msg signalled immediately wake next time try block spaceavailableint write data pc senderwriteid senderwritedata free len msg wo nt need block wrote data intended return without blocking pc senderwriteid senderchecknotifydata sendernotifydata len msg talking accuracy instead write limit also able include happy case treated possible problem sender use full buffer done change proof spec became much simpler line shorter remaining step trivial readlimit writelimit idea still seemed useful though found able prove thing eg still conclude even mention writelimit theorem senderlive receiverlive pc receiverreadid recvawaitdata datareadyint writelimit len got buffersize nice keep invariant proof simple still get result end initially defined writelimit number byte sender could write sending application wanted send enough data later changed actual number byte would write application try send otherwise packetbased sends write buffer enough space whole message writelimit could go eg think write another byte application decides write byte write anything limit theorem useful property would good confidence readlimit writelimit correct able prove useful lemma first receiverread step change readlimit long receiver closed connection theorem receiverreadpreservesreadlimit assume receiverlive receiverread prove unchanged readlimit give u good reason think readlimit correct receiver blocked read without help readlimit defined len got readlimit obviously correct case since read step preserve readlimit show readlimit correct case eg readlimit process anything end state receiver blocked readlimit len got really read total byte also able prove never decrease unless receiver close connection theorem readlimitmonotonic assume next receiverlive prove readlimit readlimit readlimit n always least n receiver ever block read least n byte able prove similar property writelimit feel reasonably confident limit prediction correct disappointingly actually prove availability using tlaps currently understands little temporal logic see tlaps limitation however could show system deadlock data transmitted ca nt get state sender receiver blocked wakeup pending theorem assume prove pc senderwriteid senderblocked spaceavailableint senderlive pc receiverreadid recvawaitdata datareadyint receiverlive suffices assume pc senderwriteid senderblocked spaceavailableint senderlive pc receiverreadid recvawaitdata datareadyint receiverlive prove false obvious notifyflagscorrect def notifyread def notifyflagscorrect notifywrite def integrityi qed def notifyflagscorrect senderinfoaccurate readerinfoaccurate def free def integrityi len buffer buffersize def senderinfoaccurate len buffer def readerinfoaccurate qed buffersizetype ca nt get state sender idle receiver blocked unless buffer empty data sent consumed theorem assume pc senderwriteid senderready senderlive pc receiverreadid recvawaitdata receiverlive datareadyint prove len buffer included proof show deadlock happen suffices assume happened show contradiction process blocked notifyread notifywrite must set process block without setting unset interrupt would pending blocked since notifyread still set sender correct thinking buffer still full since notifywrite still set receiver correct thinking buffer still empty would contradiction since buffersize zero deadlock process must keep getting woken interrupt mean interrupt keep sent send interrupt making progress writing buffer reading must keep making progress content argument experience tlaps toolbox come proof system need install separately instruction outofdate lot broken link may turned step dockerfile got partly installed asked tla group help noone else seemed know install either looking error message searching web program name finally managed get working december trouble installing try using docker image installed write proof toolbox press ctrlg ctrlg check success proof turn green failure failing step turn red also ctrlg ctrlg combination single step check step useful pretty slow take minute check complete specification tla proof done mathematical style write set proposition vaguely suggest thinking lead proof good building intuition bad reproducibility mathematical proof considered correct reader convinced depends reader case collection automated theoremprovers various timeouts mean whether proof correct depends fast computer many program currently running etc proof might pas one day fail next proof step consistently pas try individually consistently fail checked part whole proof step fails need break smaller step sometimes proof system clever immediately solves complex step example proof senderclose process represents sender closing channel preserve invariant lemma senderclosepreservesi senderclose suffices assume senderclose prove obvious integrityi def typeok def integrityi pcok def integrityi case senderopen use def senderopen unchanged pc senderwriteid pc receiverreadid pc receivercloseid def pcok pc sendercloseid sendernotifyclosed def pcok typeok def typeok pcok def pcok integrityi def integrityi notifyflagscorrect def notifyflagscorrect qed def senderinfoaccurate readerinfoaccurate closeok case sendernotifyclosed use def sendernotifyclosed unchanged pc senderwriteid pc receiverreadid pc receivercloseid def pcok pc sendercloseid done def pcok typeok def typeok pcok def pcok integrityi def integrityi notifyflagscorrect def notifyflagscorrect qed def senderinfoaccurate readerinfoaccurate closeok qed def senderclose step integrityi def integrityi say see integrityi true next step looking whole lemma really saying tlaps agrees time tlaps maddeningly stupid tell problem make thing go red example fails theorem assume pc pc except pc prove pc obvious trying say pc unchanged given pc pc except changed pc problem tla untyped language even though know mapping update pc enough apparently conclude pc fact mapping fix need theorem assume pc nat string pc pc except pc prove pc obvious extra pc nat string tell tla type pc variable found missing type information biggest problem proof automatically assume computer know type thing another example theorem assume new x nat new nat x min x prove min obvious trying remove x side equation problem tla know min number know whether normal law addition apply case tell though go red solution theorem assume new x nat new nat x min x prove min def min def min tell tlaps share definition min solver see min must natural number everything work another annoyance sometimes find right lemma use even tell exactly need extreme case lemma transferfacts assume new src new tlaps nt cope new varaible src new dst new new len src src message dst message dst take src drop src prove message len len src message len len dst unchanged dst src proof omitted lemma sameagain assume new src new tlaps nt cope new varaible src new dst new new len src src message dst message dst take src drop src prove message len len src message len len dst unchanged dst src transferfacts transferfacts state useful fact transferring data two variable prove quite easily sameagain identical every way refers transferfacts proof even one lemma consider one match assumption conclusion perfectly none solver could figure one eventual solution name bundle result work transferresults src dst message len len src message len len dst unchanged dst src lemma transferfacts assume new src new new dst new new len src src message dst message dst take src drop src prove transferresults src dst proof omitted lemma sameagain assume new src new new dst new new len src src message dst message dst take src drop src prove transferresults src dst transferfacts art using tlaps controlling much information share provers little failing provide definition min enough information find proof much providing definition transferresults get overwhelmed fail find proof bit frustrating work machine checked give confidence proof actually correct another perhaps important benefit machine checked proof decide change something specification ask recheck everything go cup tea come back highlighted red step need updated made lot change worked well tlaps philosophy concerned algorithm system spending time proving basic mathematical fact instead assert mathematical theorem need assumption theorem even find formal proof every step still use tlaps break step either prove think obvious enough require proof however able prove everything needed vchan specification within tlaps final specification little bit tidying end particular removed want variable specification like correspond anything ocaml implementation place algorithm us decide whether set notifywrite thought might wrong anyway changed recvgotlen want goto recvreaddata else notifywrite true recvgotlen either goto recvreaddata else notifywrite true notifywrite true always allows implementation set notifywrite want skip step long cover current c behaviour proposed c behaviour ocaml implementation also simplifies invariant even made proof shorter put final specification online specvchan also configured travis ci check model verify proof useful sometimes impatient recheck everything laptop pushing update generate pdf version specification make pdfs expression little easier read use proper symbol also break thing page highly annoying would nice could omit proof really useful trying edit rather see statement theorem original bug new understanding vchan see anything obvious wrong c code least long keep connection open firewall took look ocamlvchan first thing noticed someone commented memory barrier noting git log needed using filed bug anyway missing memory barrier strange thing saw behaviour read function claim implement mirage flow interface say read data available return fresh buffer containing however looking code actually return pointer directly shared buffer delay updating consumer counter next call read rather dangerous filed another bug read surprising behaviour however checked miragequbes code take buffer make copy immediately bug either also original bug report mentioned second timeout neither c implementation ocaml one timeouts time look qubesdb qubesdb accepts message either guest vm firewall local client connected unix domain socket basic structure true await vchan event local client data second timeout vchanreceivebuffer nonempty handlevchandata ready client handleclientdata suspicion missing vchan event discovering data buffer anyway due timeout looking code seem possible race condition local client asks send data handleclientdata sends data firewall using blocking write firewall sends message qubesdb time signal event firewalltodb buffer data qubesdb get event ignores blocking write still space dbtofirewall direction firewall update consumer counter signal another event buffer space blocking write completes qubesdb return main loop qubesdb go sleep second without checking buffer think cause bug though message firewall might sending qdbrespok message qubesdb discard message managed reproduce problem saw fact qubesdb make progress due second timeout try go back sleep another second immediately get woken message local client look like qubesdb sending update every second client qubesd asking send update every second looking qubesd log saw stacktraces libvirt failing attach network device read xen network device attachment specification check firewall implemented correctly kidding course specification maybe blog post inspire someone write conclusion user open source software encouraged look source code check correct pretty difficult without specification saying thing supposed often deal learning enough fix whatever bug working time decided try making proper specification instead making tla specification took rather long time quite pleasant hopefully next person need know vchan appreciate tla specification generally defines two set behaviour first set desirable behaviour eg data delivered correctly definition clearly explain user expect system second defines behaviour particular algorithm definition make easy see implement algorithm tlc model checker check behaviour acceptable least within defined limit writing specification using tla notation force u precise mean example prose specification might say sent eventually executable tla specification forced clarify happens connection closed would expected sender writes data close connection data would still arrive c implementation vchan always ensure tlc model checker find counterexample showing fail minute explain algorithm always work need find inductive invariant tlc model checker help presenting example unreachable state satisfy invariant preserve taking step must add constraint explain state invalid easy integrity invariant explains never receive incorrect data found much harder prove system deadlock suspect original designer system would find step easy presumably already know work found inductive invariant write formal machinechecked proof invariant always true although tlaps allow u prove liveness property directly able prove various interesting thing algorithm deadlock sender blocked receiver read everything sent receiver blocked sender fill entire buffer writing formal proof little tedious largely tla untyped language however nothing particularly difficult know work around various limitation proof checker might imagine tla would work small program like libvchan case matter deciding specify detail example specification give detail ring buffer work instead used single buffer variable represent specification larger system using vchan would model channel using sent got action transferred difference step tla toolbox rough edge one found troublesome keyboard shortcut frequently stop working temporal property violated tell one model explorer tooltips appear right mouse pointer preventing scrolling mouse wheel also like check regular basis seem time operation middle particularly complex proof checking operation sometimes suddenly pop box suggesting cancel job get back reading news however improving latest version get syntax error tell file error pressing delete backspace editing longer cause crash lose unsaved data general feel tla toolbox quite usable designing new protocol would certainly use tla help design tla integrate language type system even specification still need check manually code match spec would nice could check automatically somehow one final problem whenever write tla specification feel need explain first tla hopefully become popular problem go away update marek told state model network device one block device documented blkifh block device header file provided libvirt debugging help bug fixed
130,Lobsters,virtualization,Virtualization,Packer + Ansible - Dockerfile = AwesomeContainer,https://alex.dzyoba.com/blog/packer-for-docker/,packer ansible dockerfile awesomecontainer,packer ansible dockerfile awesomecontainer december dockerfiles ansible container project hashicorp packer dockerfiles silly dockersquash redis nginx poor man bash script ansible dockerfile packer ansible provisioner line documentation building redis image packer ansible option local remote provisioner module ansible role github redispacker github repo gist drawback conclusion atom feed twitter alexdzyoba,packer ansible dockerfile awesomecontainer december trendy software engineer use docker nice way try software without environment setup hassle sredevops kinda guy also create image ci environment experimenting sometimes even production know docker image built dockerfiles humble opinion dockerfiles silly fragile make bloated image look like crap building docker image tedious grumpy work found ansible moment first ansible playbook work never look back immediately felt grateful ansible simple automation tool started use ansible provision docker container time found ansible container project tried use ready soon found hashicorp packer ansible provisioning support moment use powerful combo build docker image hereafter want show example work together first let return point dockerfiles dockerfiles silly short line dockerfile creates new layer awesome see layered f able reuse layer image reality madness image size grows without control image python app layer reused actually need layer squash layer either use additional step like invoking dockersquash give little command possible real production dockerfiles see way much chaining run command create single layer illustrate point look dockerfiles one popular docker image redis nginx main part dockerfiles giant chain command newline escaping inplace config patching sed cleanup last command run set ex builddeps wget gcc make aptget update aptget install builddeps noinstallrecommends rm rf varlibaptlists wget redistargz redisdownloadurl echo redisdownloadsha redistargz c mkdir p usrsrcredis tar xzf redistargz c usrsrcredis rm redistargz disable redis protected mode unnecessary context docker port automatically exposed running inside docker rather explicitly specifying p p http grep q define configdefaultprotectedmode usrsrcredissrcserverh sed ri define configdefaultprotectedmode usrsrcredissrcserverh grep q define configdefaultprotectedmode usrsrcredissrcserverh future reference modify directly source instead supplying default configuration flag apparently specify argument redisserver assumes going specify everything see also http exactly make sure default behavior save sigterm stay functional default make c usrsrcredis j nproc make c usrsrcredis install rm r usrsrcredis aptget purge autoremove builddeps madness sake avoiding layer creation want ask question best way thing really dockerfiles look like poor man bash script gosh hate bash hand like container need neat way fight insanity ansible dockerfile instead putting raw bash command write reusable ansible role invoke playbook used inside docker container provision bootstrap ansible via pip run aptget update aptget install wget gcc make python pythondev pythonsetuptools pythonpip libffidev libssldev libyamldev run pip install u pip run pip install u ansible prepare ansible environment run mkdir ansible copy ansible env ansiblerolespath ansibleroles env ansiblevaultpasswordfile ansiblevaultpass launch ansible playbook inside container run cd ansible ansibleplaybook c local v mycontaineryml cleanup run rm rf ansible run dep pip show ansible grep requires sed srequires g g pip uninstall dep done run aptget purge pythondev pythonpip run aptget autoremove aptget autoclean aptget clean run rm rf varlibaptlists tmp vartmp usrsharedoc environment setup env home hometest workdir user test cmd binbash drop dockerfile root ansible repo build docker image using playbook role inventory vault secret work reusable eg base role applied docker container bare metal machine provisioning easier maintain ansible still feel awkward packer ansible provisioner went step started use packer packer tool specifically built creating machine image used build container image vm image cloud provider like aws gcp immediately hooked line documentation packer build docker container without use dockerfiles using dockerfiles packer able provision container portable script configuration management system tied docker way also simple mental model provision container much way provision normal virtualized dedicated server wanted achieve previously ansiblized dockerfiles let see build redis image almost identical official building redis image packer ansible first let create playground dir mkdir redispacker cd redispacker packer controlled declarative configuration json format builder type docker image debian jessieslim commit true change volume data workdir data expose entrypoint dockerentrypointsh cmd redisserver provisioner type ansible user root playbookfile provisionyml postprocessors type dockertag repository dockerioalexdzyobaredispacker tag latest put redisjson file let figure mean first describe builder kind image going build case docker image based debian jessieslim commit true tell setup want change committed option export tar archive exportpath option next describe provisioner ansible step game packer support ansible mode local remote local mode type ansiblelocal mean ansible launched inside docker container like previous setup ansible installed packer shell provisioner similar ansible bootstrapping dockerfile remote mode mean ansible run build host connect container via ssh need fullblown ansible installed docker container python interpreter using remote ansible connect root user launch provisionyml playbook provisioning done packer postprocessing tagging image also push docker registry let see provisionyml playbook name provision python host gatherfacts task name boostrap python raw test e usrbinpython aptget update aptget install pythonminimal name provision redis host task name ensure redis configured role importrole name alexdzyobaredis name create workdir file path data state directory owner root group root mode name put runtime program copy src file item dest usrlocalbin item mode owner root group root withitems gosu dockerentrypointsh name container cleanup host gatherfacts task name remove python raw aptget purge pythonminimal aptget autoremove name remove apt list raw rm rf varlibaptlists playbook consists play provision python ansible provision redis using role container cleanup provision container host ansible need install python install python via ansible ansible special ansible raw module exactly case require python interpreter bare shell command ssh need invoke gatherfacts skip invoking fact gathering done python redis provisioning done ansible role exactly step official redis dockerfile creates redis user group downloads source tarball disables protected mode compile afterbuild cleanup check detail github finally container cleanup removing python cleaning package management stuff thing left gosu dockerentrypointsh file file along packer config ansible role available redispacker github repo finally launch like gopathbinpacker build redisjson see example output gist end got image even bit smaller official docker image repository tag image id created size dockerioalexdzyobaredispacker latest minute ago mb dockerioredis week ago mb drawback course solution drawback first learn new tool packer ansible strongly advise learning ansible need kind automation project automate task right second drawback container building involved packer config ansible role playbook stuff counting line code line find alexdzyobaredis type f name yml exec cat cat redisjson provisionyml wc l originally wc l dockerfile dockerfile would advise go path reusable apply redis role container also instance bare metal service pretty much anything run linux ssh maintainable come back month later still understand going packer config playbook role structured even commented build image simple packer build redisjson command produce ready tagged image extensible use pretty much role provision redis version simply passing redisversion redisdownloadsha variable new dockerfile needed conclusion docker image building setup work well kinda enjoy process would also like look ansible container another post stay tuned blog atom feed also post twitter alexdzyoba
131,Lobsters,virtualization,Virtualization,PCI passthrough adventures with libvirt,https://aixxe.net/2018/12/qemu-ovmf-adventures,pci passthrough adventure libvirt,wiki article supported hardware virtualization iommu potential issue shell script added polkit rule virtio driver cd instruction supported resetting,moving computer stuff larger room noticed short hdmi cable previously using connect gaming streaming machine together would longer viable solution solving turned quite ordeal interesting kind worth writing aboutfirst bit context regarding rather uncommon setup currently three computer room main desktop server lowend gaming pc used exclusively rhythm game simulator back space premium three positioned next gpu output gaming pc going directly capture card desktopit nt perfect worked well enough fast forward starting point project server gaming pc still positioned next desktop moved side roomif wondering nt buy long hdmi cable call day sure would worked fun seriousness though shifting streaming recording responsibility desktop server something todo list one problem server ran linuxunfortunately luck would neither internal hdmi capture card possession driver linux end course heard people passing gpus virtual machine pas capture card window virtual machine thought trying year back concern regarding performance hardware compatibility sheer length wiki article seemed bit intimidating timein retrospect really nt complicated hour two reading archwiki couple source rough idea different component worked needed dofirst step see fulfilled prerequisite cpu supported hardware virtualization iommu matter making sure enabled bios setting nt sure motherboard seen others report success various chipset board hope highin addition bios setting iommu also enabled via kernel command line also added videoefifb since would passing boot gpu wanted sidestep potential issue line bootloaderentriesarchconf systemdboot option rw inteliommuon iommupt videoefifb offusing shell script could see gpu audio controller resided iommu group considering abundance documentation regarding gpu passthrough seemed like logical place startiommu group vga compatible controller nvidia corporation geforce gt rev iommu group audio device nvidia corporation hdmidp audio controller rev placeholder driver need bind early system boot necessary add vfiopci module along dependency mkinitcpioconf regenerate initial ramdisk image mkinitcpio p linuxin order pas device id vfiopci kernel module created vfioconf file etcmodprobed editing etcmkinitcpioconf etcmodprobedvfioconf point graphic card would longer available host good time ensure network sshd definitely going running next system reboot dmesg grep vfio vfio user level metadriver version vfiopci vgaarb changed vga decodes olddecodesiomem decodesiomem ownsiomem vfiopci add ffff ffff class vfiopci add ffff ffff class lspci nnkd vga compatible controller nvidia corporation geforce gt rev subsystem asustek computer inc geforce gt kernel driver use vfiopci kernel module nouveau lspci nnkd audio device nvidia corporation hdmidp audio controller rev subsystem asustek computer inc hdmidp audio controller kernel driver use vfiopci kernel module sndhdaintellooking good hardware stuff way time install configure libvirtdi made couple deviation guide opting qemuheadless instead qemu since intention management host meant could also skip installing virtmanager install desktop insteadit also necessary install openbsdnetcat order connection libvirtd ssh work pacman libvirt qemuheadless ovmf openbsdnetcatbefore starting libvirtd added polkit rule bypass password prompt user wheel group systemctl enable libvirtdservice reboot host polkit would allow connect known issue creating window virtual machine took minute never used virtmanager libvirtd found intuitive absolute pleasure work easily software choice virtualization linux nowas configuration fairly standard aside component swapped virtio counterpart possible better performance made sure attach latest virtio driver cd using sata controller window installer would able find itafter firsttime setup opened device manager installed remaining driver virtio balloon ethernet device would nt using cd drive shut virtual machine removed along sata controller finally time pas graphic card virtual machine audio controller nt think need add another screenshot started virtual machine installed latest nvidia driver installation finished yet still nothing black screen monitor checked device manager thought wasthe infamous code error apparently result nvidia driver detecting consumer card running inside hypervisor something evidently fan need panic solution online yet try virsh edit nt immediately fix issue turned necessary end booted virtual machine still nothing bit reading seemed common issue encountered passing boot gpu virtual machine order get around would need clean gpu vbios dumpfortunately nt anything complex require second graphic card moved passthrough gpu secondary slot installed spare primary slot act new boot gpufollowing instruction attempted dump gpu vbios cat cat inputoutput errorfor reason error went away starting shutting virtual machine also remove pci device virtmanager add due passthrough gpu moving slot motherboard echo sysbuspcidriversvfiopciunbind echo cat echo echo sysbuspcidriversvfiopcibind virsh edit monitor sprung life greeted login screennow gpu passthrough working back main goal capture cardiommu group unassigned class device bit strange nt show real name lspci quick search online vendor id confirmed capture card back etcmodprobedvfioconf appended new device id regenerated initial ramdisk image rebooted added device virtmanager finally started virtual machine againi gradually refining thing since implementing performance tweak recently installed usb pcie card since one controller motherboard supported resetting also ended passing entire onboard audio controller hard drive recording file storagethis whole thing great fun experiment kept busy week mostly complete probably time move something new next time happy new year post aixxe
132,Lobsters,virtualization,Virtualization,AirPods get stuck in low-quality 16 kHz audio mode when starting a VM,https://www.jeffgeerling.com/blog/2018/airpods-get-stuck-low-quality-16-khz-audio-mode-when-starting-vm,airpods get stuck lowquality khz audio mode starting vm,review airpods discovered left airpod bad audio midi setup answer airpods extremely poor mic quality mac,always love find really dumb solution work reliably fix problem never really problem first place worked audio device nothing nearly complex willing cut apple slack building seamless aural experience using airpods across phone call voip io device mac music apple tv hard execute perfectly said review airpods two year ago little earbuds close perfection come wireless sound solution someone like anyways problem sometimes maybe time run vagrant build local development environment one software project listening music airpods suddenly switch superlowquality audio mode sound like listening song played long subway tunnel something happening behind scene something vagrant virtualbox boot sequence making change computer assume control usb andor audio io seems audio mode used airpods happens sometimes situation sometimes airpods switch old pot voice call quality mode call stay even hang phone call often happens using airpods microphone voip apps apple pretty awesome little utility though help situation last year post discovered left airpod bad discovered handy bluetooth device diagnostics tool called bluetooth explorer long known essential builtin audio app mac around year audio midi setup name app mention music keyboard would nt know kind jackofalltrades come diagnosing configuring almost audio io aspect mac including surround sound input output microphone level output level specialized configuration midi really tiny part app app quickly highlight problem occurs airpods get stuck lowqualityoutput mode basically airpods get stuck playing bluetooth audio stream khz okay ish voice call sound terrible listening movie music anything really besides terrible quality audio stream radio happen three time found one solution nt require reboot work every time restoring pure khz audio stream airpods audio playing eg play song itunes open audio midi setup select airpods list device one out toggle format menu ch ch note blip audio m switch back keep audio midi setup open disconnect airpods mac using bluetooth menu reconnect airpods mac using bluetooth menu wait playing audio return still tinny yucky sounding quit audio midi setup audio midi setup quits audio switch khz mode idea hey work nt reboot entire mac listen audio originally posted fix answer stack overflow question airpods extremely poor mic quality mac thought post easily keep post updated time usually search blog quick fix like fix nt blog yet
133,Lobsters,virtualization,Virtualization,The future of Kubernetes is Virtual Machines,http://tech.paulcz.net/blog/future-of-kubernetes-is-virtual-machines/,future kubernetes virtual machine,cloud native operation kubernetes cicd pipeline peering crystal ball future kubernetes virtual machine container jeremykemp wikipedia creative common cc bysa container dead soft squishy multitenancy jessie frazelle namespaces pod security policy kubesprawl rule everything around pivotal container service pks tenancy issue kind behavior lead shocking amount kubesprawl multitenancy working group blog post make really small vms optimized kata container image jessie frazelle hard multitenancy kubernetes resource cost optimized multitenancy actually saying anything new virtual kubelet kata container firecracker amazon gvisor conclusion,note topic peaked interest join webinar august dive deep cloud native operation kubernetes cicd pipeline peering crystal ball kubernetes technology important career year even next year come close time drag hubris make bold prediction future kubernetes virtual machine container future kubernetes virtual machine container chinese zodiac call year dog tech year kubernetes plenty people learning kubernetes cio everywhere hard work trying develop kubernetes strategy organization already running large production workload kubernetes trying develop kubernetes strategy already failed different blog post word plenty people stage gartner hype cycle kubernetes many stuck trough disillusionment drowned pit despair jeremykemp wikipedia creative common cc bysa big fan container going try suggest container dead docker brought u wrapper around linux container showed u amazing new way build package share deploy application came exactly right time started get serious continuous delivery model perfect modern delivery pipeline emergence paas later caas platform engineer working google saw technology community finally ready container google using le invented container long time already started build kubernetes know reimagining google borg platform built open community effort take long big public cloud provide kubernetes based platform gke ak eks premise folk also quick build platform based kubernetes well pivotal container service openshift etc soft squishy multitenancy one sticky problem left solve believe prove downfall container multitenancy linux container built secure isolated sandbox like solaris zone freebsd jail instead built upon shared kernel model utilizes kernel feature provide basic process isolation jessie frazelle would say container real thing compounding fact kubernetes component tenant aware sure namespaces pod security policy api internal component like kubelet kubeproxy lead kubernetes soft tenancy model abstraction leak platform built top container inherit many soft tenancy aspect container platform built top hard multitenancy virtual machine inherit hard tenancy vmware amazon web service openstack etc kubesprawl rule everything around kubernetes soft tenancy model leaf service provider distribution weird place kubernetes cluster becomes line hard tenanacy many reason even inside organisation require hard tenancy user appplications since public cloud provide fully managed kubernetes service offering easy enough tenant get cluster use cluster boundary isolation point kubernetes distribution like pivotal container service pks aware tenancy issue taken similar model providing kubernetes service experience get public cloud datacenter lead emerging pattern many cluster rather one big shared cluster uncommon see customer google gke service dozen kubernetes cluster deployed multiple team often developer get cluster kind behavior lead shocking amount kubesprawl alternatively kubernetes operator running self kubernetes cluster either upstream distribution based datacenters left take extra work managing lot cluster accept soft tenancy one two larger cluster kind behavior lead shocking amount kubesprawl generally smallest cluster get machine vms one ha kubernetes master three kubernetes worker tie ton money system part sitting idle need somehow move kubernetes hardtenancy model kubernetes community aware need multitenancy working group group working hard problem several suggested model proposal solve model jessie frazelle wrote blog post exact topic great much smarter link save ten year hard study trying catch read stop reading go read first make really small vms optimized kata container open source project community working build standard implementation lightweight virtual machine vms feel perform like container provide workload isolation security advantage vms jessie suggests using vm container technology kata container kata container combine virtual machine level isolation act perform like container allows kubernetes give tenant assume tenant per namespace set kubernetes system service running nested vm container vm container running inside vm provided underlying iaa image jessie frazelle hard multitenancy kubernetes elegant solution kubernetes multitenancy suggestion go even suggest kubernetes use nested container vms workload pod running kubernetes provides significant increase resource utilization least one optimization make build suitable hypervisor underlying iaa cloud provider vm container first level abstraction provided iaa increase resource utilization even minimal number vms required run kubernetes cluster go one three ha host kubernetes control plane exposed superuser resource cost optimized multitenancy kubernetes deployment two namespaces number application running would look something like note cloud tenant workload running iaa infrastructure since vm container level isolation regular cloud vm thus run hypervisor minimal risk initially zero infrastructure deployed cloud thus zero cost superuser superuser request kubernetes cluster cloud cloud provider creates single container vm ha running main kubernetes api system service superuser could choose deploy pod system namespace create new namespaces delegate access user superuser create two namespaces foo bar kubernetes request two vm container cloud namespace control plane kubernetes api system service superuser delegate access namespaces user deploy workload pod respective control plane request vm container workload stage superuser paying actual consumed resource cloud provider owns capacity available user cloud actually saying anything new cloud provider already working towards future see forming watching happening open source community arguably amazon already opaquely fargate first hint virtual kubelet open source tool designed masquerade kubelet connects kubernetes apis would allow kubernetes request container vms cloud container vm scheduler hint number emerging vm container technology already mentioned kata container also firecracker amazon gvisor google conclusion tied together correct improvement kubernetes hard tenancy model arrive holy grail kubernetes full isolation kubernetes workload pure per pod consumption cost model run workload kubernetes public cloud get consumption model onus capacity remains infrastructure provider case still get benefit higher resource utilization pay lower capacity requirement let hope vmware openstack paying attention bring u lightweight vm container technology based hypervisors appropriate virtual kubelet implementation related post
134,Lobsters,virtualization,Virtualization,NetBSD/amd64-current Amazon Web Service EC2 c5,http://blog.onodera.asia/2018/12/netbsdamd64-currentamazon-web-service.html,amazon web service,netbsd advent calendar はじめに 無事に動いています amiファイルの作り方を調べてみる buildup netbsd ami,netbsd advent calendar はじめに web service aws linux network adapter ena と言うethernetアダプター がfreebsdから移植されていて amiファイルの作り方を調べてみる aws amazon biosブート uefiブートではない ena pci dev function amazon elastic network adapter dd ifdevzero vnd vndconfig gptパーティションを作る準備をします gpt create gpt add ffs l awsroot gpt add swap l awsswap gpt biosboot newfs installboot v mount mnt cd usrsrc buildsh u r u j tool buildsh u r u j kernelgenericena buildsh u r u j distribution buildsh u r u j v installsets base comp etc game man misc module test text installmnt cp usrmdecboot mnt カーネルをインストールします ena が有効になっているカーネルをインストールします cp mnt aws vi wikiの buildup netbsd binsh provide require networking login rcsubrloaded etcrcsubr name rcvar name startcmd stopcmd metadataurl http sshkeyurl hostnameurl hostname sshkeyfile rootsshauthorizedkeys umask fetch key pair amazon web service ftp metadataurl sshkeyurl n key pair associated instance add root authorizedkeys file mkdir p dirname sshkeyfile touch sshkeyfile cd dirname sshkeyfile grep q sshkeyfile ne echo setting ssh key pair echo sshkeyfile fi fi set hostname hostname ftp metadataurl hostnameurl echo setting hostname hostname echo hostname etcmyname hostname hostname loadrcconfig name runrccommand chmod vi mntetcrcconf rcconfiguredyes sshdyes remote shell access instance vi mntetcsshsshdconfig permitrootlogin withoutpassword mkdir mntproc mntkern vi dhcp vi mntetcfstab nameawsroot ffs rw log nameawsswap none swap sw dp kernfs kern kernfs rw ptyfs devpts ptyfs rw procfs proc procfs rw tmpfs varshm tmpfs rw sram cd mntdev makedev cd umount mnt vndconfig u block store eb cd usrpkgsrcnetpyawscli make install aws configure aws access key id none xxx aws secret access key none xxx default region name none default output format none text linux aws runinstances imageid instancetype keyname instance false xen devxvda eb true hvm cpuoptions monitoring disabled networkinterfaces true inuse attachment true attaching group default privateipaddresses true placement default securitygroups default state pending statereason pending pending aws describeinstances instanceids eservations instance false true xen devxvda eb true hvm blockdevicemappings devxvda eb true attached cpuoptions hibernationoptions false monitoring disabled networkinterfaces true inuse association amazon attachment true attached group default privateipaddresses true association amazon placement default securitygroups default state running 磁気ハードディスクドライブ aws createvolume availabilityzone volumetype standard size aws describevolumes volumeids volume false available standard amazon linux aws attachvolume instanceid volumeid device devsdf devsdf attaching aws describevolumes volumeids volume false inuse standard attachment false devsdf attached ポートごとの通過できる通信の設定 aws authorizesecuritygroupegress groupid port protocol aws authorizesecuritygroupingress groupid port protocol cidr amazon linux scp sshでamazon linux ssh sudo dd ofdevsdf aws detachvolume volumeid devsdf detaching aws createsnapshot volumeid false pending amazon linux aws terminateinstances instanceids terminatinginstances currentstate shuttingdown previousstate running aws registerimage architecture name ena enasupport virtualizationtype hvm blockdevicemappings eb rootdevicename setting よりget instance aws ディスクイメージファイルのカーネルファイルnetbsdを差し替えて
136,Lobsters,virtualization,Virtualization,Amazon Web Service ,http://blog.onodera.asia/2018/12/amazon-web-service-ec2a1netbsdaarch64.html,amazon web service,netbsd advent calendar はじめに netbsd aws arm instance amazonがamazon web service aws を追加 aws netbsd wikiの記事,netbsd advent calendar はじめに jmcneill netbsd aws arm instance amazonがamazon web service aws aws aws cpuである aws gravitation jmcneill n virginia chmod ssh root awshostnameaddress useradd ryoon passwd ryoon su ryoon mkdir ssh chmod ssh vi etcgroup wheel root ryoon snip operator root ryoon snip vi etcsshsshdconfig snip passwordauthentication snip usepam stop vi etcrcconf snip snip ここではryoon で uname ap netbsd netbsd fri nov ast jmcneill tokiinvisibleca evbarm kernvtopdiff physicalstart kernelstartphys kernelendphys msgbuf physicalend vmminkerneladdress kernelstart kernelend pagetables pagetablesend modulestart moduleend kernel va area devmap va area vmmaxkerneladdress mpstart copyright c netbsd foundation inc right reserved copyright c regent university california right reserved netbsd fri nov ast jmcneill tokiinvisibleca total memory mb avail memory mb timecounter timecounters tick every msec root acpi using efi runtime service rtc acpi rsdp amazon acpi xsdt amazon amznfacp acpi facp amazon amznfacp amzn acpi dsdt amazon amzndsdt intl cpi apic amazon amznapic amzn acpi spcr amazon amznspcr amzn acpi gtdt amazon amzngtdt amzn acpi mcfg amazon amznmcfg amzn acpi slit amazon amznslit amzn acpi iort amazon amzniort amzn acpi pptt amazon amznpptt amzn acpi acpi aml table successfully acquired loaded intel acpica xrsdt oemid aslid mcfg segment bus address cortex core package core smt ic enabled dc enabled stack alignment check enabled cache writeback granule exclusive reservation granule dcache line icache line readallocate pipt instruction cache writeback readallocate writeallocate pipt data cache writeback readallocate writeallocate pipt unified cache table table asid fp aespmull neon rounding nan propagation denormals fused multiplyadd type size type size irq arm generic timer khz timecounter timecounter frequency hz quality fwcf mem u pci express host bridge bus io space memory space enabled rdline rdmult wrinv ok vendor product host bridge dev function configured dev function amazoncom serial com port polling working fifo console dev function vendor product rev nvme admin queue interrupting irq msix vec amazon elastic block store firmware serial io queue interrupting irq msix vec affinity nsid mb cyl head sec bytessect x sector dev function vendor product rev elastic network adapter ena ena vdrvmodulevermajordrvmoduleverminordrvmoduleversubminor initalize io queue mgmnt interrupting irq msix vec configured mem irq pin pwrb acpi power button irq link link state unknown timecounter timecounter clockinterrupt frequency hz quality cpubootsecondaryprocessors writing mbox cpubootsecondaryprocessors secondary processor hatched ipsec initialized security association processing boot device root dump mountroot trying mountroot trying ffs root file system type ffs init copying path sbininit device going io queue interrupting irq msix vec kernel rng kernel run test failure many run cprng kernel failed statistical rng test kernel rng kernel run test failure many run cprng kernel failed statistical rng test kernel rng kernel long run test failure run found cprng kernel failed statistical rng test ena ifconfig mtu address medium ethernet autoselect fullduplex status active flag scopeid inet broadcast flag mtu flag flag scopeid inet flag pkgsrcをanoncvsnetbsdorgからcheckout core quick sync videoの機能を
138,Lobsters,virtualization,Virtualization,AWS re:Invent Breakout Sessions,https://reinventvideos.com/,aws invent breakout session,sorry aws hub nt work properly without javascript enabled please enable continue,sorry aws hub nt work properly without javascript enabled please enable continue
139,Lobsters,virtualization,Virtualization,Virtualization Extensions into a Microkernel based Operating System,https://www.researchgate.net/publication/301298873_Virtualization_Extensions_into_a_Microkernel_based_Operating_System,virtualization extension microkernel based operating system,,instructor include virtualization topic laboratory assignment mhyper prof microkernel o technology particularly minix well adapted include new feature support several virtualization approach acknowledgment author gratefully acknowledges help received antoine leca phd silvio gonnet reference galley virtual machine proc acm sigarchsigops workshop virtual computer system popek g goldberg r formal requirement virtualizable third generation architecture communication acm acceta r baron w bolosky golub r rashid tevanian young mach new kernel foundation unix development usenix conference pp gien grob l microkernel architecture key modern operating system design hohmuth peter et al reducing tcb size using untrusted component small kernel versus virtualmachine monitor ew ford b hibler et al microkernels meet recursive virtual machine second symposium osdi biemueller dannowski u real virtual machine api proposal proceedingsof mike tanenbaum et al minix status report current research login usenix magazine liedtke j toward real microkernels communication acm volume issue sept h hartig security architecture revisited workshop acm sigops european workshop ew page agarwal levy thousandcore chip kill rule multicore annual conference design automation baumann et al multikernel new o architecture scalable multicore system symposium operating system principle wentzlaff al operating system multicore cloud mechanism implementation proceeding acm symposium cloud computing linnenbank n implementing minix single chip cloud computer master thesis vrije universiteit herder j towards true microkernel operating system vrije universiteit master degree thesis herder j gras b tanenbaum modular system programming minix login april protection matrix minix http wikierightsorgwikiprotectionmatrixesinminix jorrit n herder herbert bos ben gras philip homburg andrew tanenbaum fault isolation device driver dsn estoril lisbon portugal hand warfeld et al virtual machine monitor microkernels done right heiser g uhlig v levasseur j virtual machine monitor microkernels done right nicta technical report armand f gien practical look microkernels virtual machine monitor ieee cccn conference u steinberg b kauer nova microhypervisorbased secure virtualization architecture eurosys conf paris france apr g heiser b leslie microvisor convergence point microkernels hypervisors acm steﬀen liebergeld lightweight virtualization microkernelbased system january brygier j fuchsen r h blasum pikeos safe secure virtualization separation microkernel sysgo white paper kivity kamay laor u lublin liguori kvm linux virtual machine monitor linux symposium b ford hibler j lepreau p tullmann g back clawson microkernels meet recursive virtual machine osdi october ning li kinebuchi mitake h shimada h tsunghan lin nakajima lightweighted virtualization layer multicore processorbased rich functional embedded system isorc april c van schaik g heiser highperformance microkernels virtualization arm segmented architecture international workshop microkernels embedded system dike jeff usermode port linux kernel annual linux showcase conference pessolani pablo modifying behaviour minix system call redirection message cacic yang yu fanglu guo susanta nanda lapchung lam tzicker chiueh featherweight virtual machine window application vee blas j prola g sarli j diseño e implementación de un file server alternativo para minix conaiisi david c van moolenbroek raja appuswamy andrew tanenbaum towards flexible lightweight virtualization alternative system storage conference systor pessolani p gonzález c enhancing minix inputoutput performance using virtual machine approach warso cacic pessolani p realtime operating system based minix master thesis unlp y vivek l bhuvan g ashrith dsvn aditya realtime minix banco zandbergen realtime minix october stephen soltesz herbert pötzl marc e fiuczynski andy bavier larry peterson containerbased operating system virtualization scalable highperformance alternative hypervisors eurosys
140,Lobsters,virtualization,Virtualization,NetBSD on AWS EC2 a1.medium (ARM),https://dmesgd.nycbug.org/index.cgi?do=view&id=4623,netbsd aws arm,usersubmitted date description,launched dmesgd aim provide usersubmitted repository searchable bsd dmesgs dmesg command display system message buffer content boot copy saved varrundmesgboot buffer contains operating system release name version list device identified plus whole host useful information hope others find resource useful contribute growth contact u admin list dot nycbug dot org date jmcneill description netbsd aws arm copyright c netbsd foundation inc right reserved copyright c regent university california right reserved netbsd fri nov utc xxx xxxxxx total memory mb avail memory mb timecounter timecounters tick every msec root acpi using efi runtime service rtc acpi rsdp amazon acpi xsdt amazon amznfacp acpi facp amazon amznfacp amzn acpi dsdt amazon amzndsdt intl acpi apic amazon amznapic amzn acpi spcr amazon amznspcr amzn acpi gtdt amazon amzngtdt amzn acpi mcfg amazon amznmcfg amzn acpi slit amazon amznslit amzn acpi iort amazon amzniort amzn acpi pptt amazon amznpptt amzn acpi acpi aml table successfully acquired loaded intel acpica xrsdt oemid amazon aslid mcfg segment bus address cortex core package core smt ic enabled dc enabled stack alignment check enabled cache writeback granule exclusive reservation granule dcache line icache line readallocate pipt instruction cache writeback readallocate writeallocate pipt data cache writeback readallocate writeallocate pipt unified cache table table asid fp aespmull neon rounding nan propagation denormals fused multiplyadd type size type size irq arm generic timer khz timecounter timecounter frequency hz quality fwcf mem u pci express host bridge bus io space memory space enabled rdline rdmult wrinv ok vendor product host bridge dev function configured dev function amazoncom serial com port interrupting irq working fifo console dev function vendor product rev nvme admin queue interrupting irq msix vec amazon elastic block store firmware serial io queue interrupting irq msix vec affinity nsid mb cyl head sec bytessect x sector dev function vendor product rev elastic network adapter ena ena vdrvmodulevermajordrvmoduleverminordrvmoduleversubminor initalize io queue mgmnt interrupting irq msix vec configured mem irq pin pwrb acpi power button irq link link state unknown timecounter timecounter clockinterrupt frequency hz quality cpubootsecondaryprocessors writing mbox cpubootsecondaryprocessors secondary processor hatched ipsec initialized security association processing boot device root dump mountroot trying mountroot trying ffs root file system type ffs init copying path sbininit device going io queue interrupting irq msix vec
141,Lobsters,virtualization,Virtualization,AWS Firecracker - Secure and fast microVMs for serverless computing,https://firecracker-microvm.github.io/,aws firecracker secure fast microvms serverless computing,aws lambda aws fargate kata container open nebula unik weave firekube weave ignite firecrackercontainerd flyio osv,firecracker open source virtualization technology purposebuilt creating managing secure multitenant container functionbased service firecracker enables deploy workload lightweight virtual machine called microvms provide enhanced security workload isolation traditional vms enabling speed resource efficiency container firecracker developed amazon web service improve customer experience service like aws lambda aws fargate firecracker virtual machine monitor vmm us linux kernelbased virtual machine kvm create manage microvms firecracker minimalist design excludes unnecessary device guest functionality reduce memory footprint attack surface area microvm improves security decrease startup time increase hardware utilization firecracker currently support intel cpu amd arm support developer preview firecracker integrated kata container open nebula unik weave firekube via weave ignite containerd via firecrackercontainerd also used flyio firecracker run linux osv guest latest roadmap found
142,Lobsters,virtualization,Virtualization,Amazon EC2 Instances Powered by Arm-Based AWS Graviton Processors,https://aws.amazon.com/blogs/aws/new-ec2-instances-a1-powered-by-arm-based-aws-graviton-processors/,amazon instance powered armbased aws graviton processor,aws nitro system instance instance instance high memory instance annapurna lab asics aws graviton processor arm instance name vcpus ram eb bandwidth network bandwidth ondemand pricehour available instance jeff,earlier year told aws nitro system promised would allow u deliver new instance type quickly ever month come since made promise launched memoryintensive instance high frequency instance burstable instance high memory instance tib memory amdpowered instance purposebuilt hardware lightweight hypervisor comprise aws nitro system allow u innovate quickly devoting virtually power host hardware instance acquired annapurna lab working first version aws nitro system since worked build release two generation asics chip shoe offload system function nitro allowing hardware devoted customer instance year ago team started think building amazonbuilt custom cpu designed costsensitive scaleout workload aws graviton processor today launching instance powered armbased aws graviton processor built around arm core making extensive use custombuilt silicon instance optimized performance cost great fit scaleout workload share load across group smaller instance includes containerized microservices web server development environment caching fleet instance available five size ebsoptimized default significantly lower cost instance name vcpus ram eb bandwidth network bandwidth ondemand pricehour u east n virginia gib gbps gbps gib gbps gbps gib gbps gbps gib gbps gbps gib gbps gbps application written scripting language odds simply move instance run asis application compiles native code need rebuild instance lucky enough get early access instance order put pace console still construction launched first instance command line aws runinstances imageid instancetype count keyname keysjbarruseast instance running second run uname check architecture amis available amazon linux rhel ubuntu today additional operating system support way available instance available u east n virginia u east ohio u west oregon europe ireland region ondemand reserved instance spot dedicated instance dedicated host form launch today jeff
143,Lobsters,virtualization,Virtualization,Experiences with the Cray X/MP (2000),https://www.bell-labs.com/usr/dmr/www/cray.html,experience cray xmp,experience cray xmp jpeg format,experience cray xmp later spent much time working around cray equipment particular page link two paper written time first delivered cray user group meeting seattle may great trip attendee treated minorvip visit boeing factory tell experience prerelease early version unicos time cri beginning get committed making main operating system tiny bit grouchy place though main friendly one remember cray research faced question continuing operating system using developed lanl llnl upstart unix first paper describes bell lab early adopter cray research machine low serial cray c compiler library done rich lee delores clark cug spring meeting stockholm nilspeter nelson delivered talk plan acquire xmp unicos would used plumping unix general nelson saved purchase order xmp largest seen since visible jpeg format order delayed several month military contractor exercised old koreanwar era rule involving military priority snatched embarrassed cray apologized giving u signficant price break followup purchase ssd solidstate secondary disk device time paper appearing first delivered xmp arrived quite early line though think sn last machine produced using static memory chip bell lab suppose somewhat strategic cri though big customer like doe dod ncar oil automobile company still cri committing concentration unicos system programming c treated important machine mainly used justified circuit design simulation device modeling physical science microelectronics area partly numerical system work information science area xmp described two paper left smallish cpu ymp obtained lived around corner office time research group nt making much use machine effort described second paper dropped point got xmp cri unicos system ran guest operating system hosted co early enough unicos development representation character pointer code generated c compiler changed earliest version char value bytenumbers byte selection bit loworder bit pointer later version used word address least significant bit natural hardware put byte specifier significant three bit word first representation made arithmetic character pointer arithmetic second made accessing character bit faster read experience unicos cray xmp various form second paper work done switched co using unicos guest operating system native unicos master machine local operating system fiddler step back though necessary one work described nt go anywhere fun read guest facility unicos various form september
144,Lobsters,virtualization,Virtualization,"Intel Virtualisation: How VT-x, KVM and QEMU Work Together",https://binarydebt.wordpress.com/2018/10/14/intel-virtualisation-how-vt-x-kvm-and-qemu-work-together/,intel virtualisation vtx kvm qemu work together,something virtualisation first vtx vmx vmcs vmxon vmxoff vmlaunch vmresume kvm system level vm level vcpu level qemu like,vtx name cpu virtualisation technology intel kvm component linux kernel make use vtx qemu userspace application allows user create virtual machine qemu make use kvm achieve efficient virtualisation article talk three technology work together expect indepth exposition aspect although future might follow focused post specific part something virtualisation first let first touch upon theory going main discussion related virtualisation concept emulation simple word faking hardware use qemu vmware create virtual machine arm processor host machine processor qemu vmware would emulate fake arm processor talk virtualisation mean hardware assisted virtualisation vm processor match host computer processor often conflated virtualisation even distinct concept containerisation containerisation mostly software concept build top operating system abstraction like process identifier file system memory consumption limit post discus container typical vm set look like lowest level hardware support virtualisation hypervisor virtual machine monitor vmm case kvm actually linux kernel kvm module loaded word kvm set kernel module loaded linux kernel turn kernel hypervisor hypervisor user space sit virtualisation application end user directly interact qemu vmware etc application create virtual machine run operating system cooperation hypervisor finally full v para virtualisation dichotomy full virtualisation o running inside vm exactly would running real hardware paravirtualisation o inside vm aware virtualised thus run slightly modified way would real hardware vtx vtx cpu virtualisation intel architecture intel itanium vti io virtualisation vtd amd also virtualisation technology called amdv concern vtx vtx cpu operates one two mode root nonroot mode orthogonal real protected long etc also orthogonal privilege ring form new plane speak hypervisor run root mode vms run nonroot mode nonroot mode cpubound code mostly executes way would running root mode mean vm cpubound operation run mostly native speed however full freedom privileged instruction form subset available instruction cpu instruction executed cpu higher privileged state eg current privilege level cpl cpl least privileged subset privileged instruction call global statechanging instruction affect overall state cpu example instruction modify clock interrupt register write control register way change operation root mode smaller subset sensitive instruction nonroot mode execute vmx vmcs virtual machine extension vmx instruction added facilitate vtx let look gain better understanding vtx work vmxon instruction executed concept root v nonroot mode cpu operates virtualisation vmxon must executed order enter virtualisation immediately vmxon cpu root mode vmxoff converse vmxon vmxoff exit virtualisation vmlaunch creates instance vm enters nonroot mode explain mean instance vm short covering vmcs think particular vm created inside qemu vmware vmresume enters nonroot mode existing vm instance vm attempt execute instruction prohibited nonroot mode cpu immediately switch root mode traplike way called vm exit let synthesise information cpu start normal mode executes vmxon start virtualisation root mode executes vmlaunch create enter nonroot mode vm instance vm instance run code running natively attempt something prohibited cause vm exit switch root mode recall software running root mode hypervisor hypervisor take action deal reason vm exit executes vmresume reenter nonroot mode vm instance let vm instance resume operation interaction root nonroot mode essence hardware virtualisation support course description leaf gap example hypervisor know vm exit happened make one vm instance different another vmcs come vmcs stand virtual machine control structure basically part physical memory contains information needed process work information includes reason vm exit well information unique vm instance cpu nonroot mode vmcs determines instance vm running may know qemu vmware decide many cpu particular vm cpu called virtual cpu vcpu vcpu one vmcs mean vmcs store information cpulevel granularity vm level read write particular vmcs vmread vmwrite instruction used effectively require root mode hypervisor modify vmcs nonroot vm perform vmwrite actual vmcs shadow vmcs something concern u immediately also instruction operate whole vmcs instance rather individual vmcss used switching vcpus vcpu could belong vm instance vmptrld used load address vmcs vmptrst used store address specified memory address many vmcs instance one marked current active point vmptrld mark particular vmcs active vmresume executed nonroot mode vm us active vmcs instance know particular vm vcpu executing worth noting vmx instruction require cpl level executed inside linux kernel o kernel vmcs basically store two type information context info contains thing like cpu register value save restore transition root nonroot control info determines behaviour vm inside nonroot mode specifically vmcs divided six part gueststate store vcpu state vm exit vmresume vcpu state restored hoststate store host cpu state vmlaunch vmresume vm exit host cpu state restored vm execution control field determine behaviour vm nonroot mode example hypervisor set bit vm execution control field whenever vm attempt execute rdtsc instruction read timestamp counter vm exit back hypervisor vm exit control field determine behaviour vm exit example bit vm exit control part set debug register saved whenever vm exit vm entry control field determine behaviour vm entry counterpart vm exit control field symmetric example setting bit inside field cause vm always load debug register vm entry vm exit information field tell hypervisor exit happened provide additional information aspect hardware virtualisation support conveniently gloss post virtual physical address conversion inside vm done using vtx feature called extended page table ept translation lookaside buffer tlb used cache virtual physical mapping order save page table lookup tlb semantics also change accommodate virtual machine advanced programmable interrupt controller apic real machine responsible managing interrupt vm virtualised virtual interrupt controlled one control field vmcs io major part machine operation virtualising io covered vtx usually emulated user space accelerated vtd kvm kernelbased virtual machine kvm set linux kernel module loaded turn linux kernel hypervisor linux continues normal operation o also provides hypervisor facility user space kvm module grouped two type core module machine specific module kvmko core module always needed depending host machine cpu machine specific module like kvmintelko kvmamdko needed guess kvmintelko us functionality described vtx section kvm executes vmlaunchvmresume set vmcs deal vm exit etc let also mention amd virtualisation technology amdv also instruction called secure virtual machine svm find file named svmc vmxc contain code deal virtualisation facility amd intel respectively kvm interacts user space case qemu two way device file devkvm memory mapped page memory mapped page used bulk transfer data qemu kvm specifically two memory mapped page per vcpu used high volume data transfer qemu vm kernel devkvm main api exposed kvm support set ioctl allow qemu manage vms interact lowest unit virtualisation kvm vcpu everything build top devkvm api threelevel hierarchy system level call api manipulate global state whole kvm subsystem among thing used create vms vm level call api deal specific vm vcpus created call api vcpu level lowest granularity api deal specific vcpu since qemu dedicates one thread vcpu see qemu section call api done thread used create vcpu creating vcpu qemu continues interacting using ioctls memory mapped page qemu quick emulator qemu user space component considering vtxkvmqemu stack qemu one run virtual machine arm mips core run intel host possible basically qemu two mode emulator virtualiser emulator fake hardware make look like mips machine software running inside vm binary translation qemu come tiny code generator tcg thought sort highlevel language vm like jvm take instance mips code convert intermediate bytecode get executed host hardware mode qemu virtualiser achieves type virtualisation discussing virtualiser get help kvm talk kvm using ioctl described qemu creates one process every vm vcpu qemu creates thread regular thread get scheduled o like thread thread get run time qemu creates impression multiple cpu software running inside vm given qemu root emulation emulate io something kvm may fully support take example vm particular serial port host software inside vm performs io vm exit kvm kvm look reason pass control qemu along pointer info io request qemu emulates io device request thus fulfilling software inside vm pass control back kvm kvm executes vmresume let vm proceed end let u summarise overall picture diagram like like loading related
145,Lobsters,virtualization,Virtualization,Cloud Computing without Containers,https://blog.cloudflare.com/cloud-computing-without-containers/,cloud computing without container,worker unlike essentially every cloud computing platform know use container virtual machine isolates actually running metal form cloud computing aware source cold start context switching memory node python runtimes meant run individual people server never intended run multitenant environment thousand people code strict memory requirement security billing network computer email protected disadvantage help try worker workersdev reserve workersdev subdomain,cloudflare cloud computing platform called worker unlike essentially every cloud computing platform know use container virtual machine believe future serverless cloud computing general try convince whyisolatestwo year ago problem limited many feature option could build inhouse needed way customer able build set find way let people write code server deployed around world little hundred data center writing system needed run untrusted code securely low overhead sit front ten million site process million million request per second also run quicklythe lua used previously run sandbox customer write code without supervision traditional virtualization container technology like kubernetes would exceptionally expensive everyone involved running thousand kubernetes pod single location would resource intensive location would even worse scaling would easier without management system far trivialwhat ended settling technology built google chrome team power javascript engine browser isolatesisolates lightweight context group variable code allowed mutate importantly single process run hundred thousand isolates seamlessly switching make possible run untrusted code many different customer within single operating system process designed start quickly several start web browser load web page allow one isolate access memory anotherwe pay overhead javascript runtime able run essentially limitless script almost individual overhead given isolate start around hundred time faster get node process start machine even importantly consume order magnitude le memory processthey lovely functionasaservice ergonomics getting write code worry run scale simultaneously use virtual machine container mean actually running closer metal form cloud computing aware believe possible model get close economics running code bare metal entirely serverless environmentthis meant ad worker want show chart reflect stark difference showcase believe iterative improvement actual paradigm shift data reflects actual request including network latency made data center near function deployed performing cpu intensive workload sourcecold startsnot everyone fully understands traditional serverless platform like lambda work spin containerized process code running code environment lightweight running node machine autoscale process somewhat clumsily autoscaling creates coldstartsa coldstart happens new copy code started machine lambda world amount spinning new containerized process take millisecond second request get left hanging much ten second terrible user experience lambda process single request time new lambda must coldstarted every time get additional concurrent request mean laggy request happen lambda get request soon enough shut start whenever deploy new code happens every lambda redeployed correctly cited reason serverless cracked bebecause worker start process isolates start millisecond duration imperceptible isolates similarly scale deploy quickly entirely eliminating issue existing serverless technologiescontext switchingone key feature operating system give ability run many process transparently switch various process would like run code given time accomplish called context switch moving memory required one process memory required next inthat context switch take much microsecond multiplied node python go process running average lambda server creates heavy overhead mean cpu power actually devoted running customer code spent switching theman isolatebased system run code single process us mechanism ensure safe memory access mean expensive context switch machine spends virtually time running codememorythe node python runtimes meant run individual people server never intended run multitenant environment thousand people code strict memory requirement basic node lambda running real code consumes mb memory share runtime isolates drop around mbmemory often highest cost running customer code even higher cpu lowering order magnitude dramatically change economicsfundamentally designed multitenant designed run code many tab browser isolated environment within single process node similar runtimes show multitenant system built atop itsecurityrunning multiple customer code within process obviously requires paying careful attention security productive efficient cloudflare build isolation layer take astronomical amount testing fuzzing penetration testing bounty required build truly secure system complexitythe reason possible opensource nature standing perhaps well security tested piece software earth also layer security built end including various protection timing attack real wonder make compute model possiblebillingthis meant referendum aws billing worth quick mention economics interesting lambda billed based long run billing rounded nearest millisecond meaning people overpaying average millisecond every execution worse bill entire time lambda running even waiting external request complete external request take hundred thousand m end paying ridiculous amount scaleisolates small memory footprint least afford bill code actually executingin case due lower overhead worker end around cheaper per cpucycle worker offering millisecond cpu per million request equivalent lambda per million believe lowering cost strong enough motivator alone motivate company make switch isolatebased providersthe network computeramazon product called email protected deployed cdn data center unfortunately three time expensive traditional lambda take minute deploy initially also nt allow arbitrary request limiting usefulness cdnlikepurposesconversely mentioned isolates able deploy every source file data center better economics amazon one might actually cheaper run isolates single container perhaps amazon charging market bear much higher cost know amazon economics know comfortable ourslongago became clear truly reliable system must deployed one place earth lambda run single availability zone single region single data centerdisadvantagesno technology magical every transition come disadvantage isolatebased system run arbitrary compiled code processlevel isolation allows lambda spin binary might need isolate universe either write code javascript use lot typescript language target webassembly like go rustif recompile process run isolate might mean isolatebased serverless newer modern application immediate future also might mean legacy application get latencysensitive component moved isolate initially community may also find new better way transpile existing application webassembly rendering issue mootyour helpi would love try worker let u community know experience still lot u build could use feedbackwe also need engineer product manager think interesting want take new direction san francisco austin london please reach outinterested deploying cloudflare worker without setting domain cloudflare making easier get started building serverless application custom subdomains workersdev already cloudflare customer add worker existing website reserve workersdev subdomain
146,Lobsters,virtualization,Virtualization,VirtualBox E1000 Guest-To-Host Escape 0day,https://github.com/MorteNoir1/virtualbox_e1000_0day,virtualbox guesttohost escape,general information vulnerable software host o guest o vm configuration protect introduction vulnerability detail input root cause analysis processing processing buffer overflow exploit exploitation algorithm initialization aslr bypass write primitive read primitive information leak dep bypass shellcode process continuation demo http,like virtualbox nothing publish vulnerability reason disagreement contemporary state infosec especially security research bug bounty wait half year vulnerability patched considered fine bug bounty field considered fine wait month submitted vulnerability verified decision buy buy made change decision fly today figured bug bounty program buy bug software week later come bug exploit receive interested precise list software bug bounty interested buy bug handy bug bounty awkward researcher precise lower upper bound vulnerability price many thing influencing price researcher need know worth work delusion grandeur marketing bullshit naming vulnerability creating website making thousand conference year exaggerating importance job security researcher considering world saviour come highness exhausted first two therefore move full disclosure infosec please move forward general information vulnerable software virtualbox prior version host o bug shared code base guest o vm configuration default requirement network card intel mt desktop mode nat protect patched virtualbox build change network card virtual machine pcnet either two paravirtualized network ca nt change mode nat another one former way secure introduction default virtualbox virtual network device intel mt desktop default network mode nat refer vulnerability allowing attacker rootadministrator privilege guest escape host attacker use existing technique escalate privilege ring via devvboxdrv vulnerability detail send network packet guest common pc configures network card supply network packet packet data link layer frame high level header packet supplied adaptor wrapped tx descriptor tx mean transmit tx descriptor data structure described datasheet revision store metainformation packet size vlan tag tcpip segmentation enabled flag datasheet provides three tx descriptor type legacy context data legacy deprecated believe two used together thing care context descriptor set maximum packet size switch tcpip segmentation data descriptor hold physical address network packet size data descriptor packet size must lesser context descriptor maximum packet size usually context descriptor supplied network card data descriptor supply tx descriptor network card guest writes tx ring ring buffer residing physical memory predefined address descriptor written tx ring guest update mmio tdt register transmit descriptor tail tell host new descriptor handle input consider following array tx descriptor let assign structure field follows field name hypothetical human readable directly map specification true false true true true true true true learn like stepbystep analysis root cause analysis processing let assume descriptor written tx ring specified order tdt register updated guest host execute function file comment stripped sake readability static int pthis bool fonworkerthread pthis flocked pthis pthis fincomplete false rc pthis pthis fgso rtfailure rc goto rc pthis fonworkerthread rtfailure rc goto read tx descriptor tx ring called first time function iterates descriptor set initial state actually handle case first call handle descriptor two remaining descriptor handled second iteration loop cover second iteration next section twopart array division crucial trigger vulnerability let figure look like static bool pthis int pthis itxdcurrent pthis ntxdfetched pdesc pthis atxdescriptors switch pdesc case pthis pdesc continue case break case pdesc pdesc break break default assertmsgfailed impossible descriptor type first descriptor function called function update tcp segmentation context tcp segmentation enabled descriptor true tcp segmentation context updated tcp segmentation context update actually important use refer code second descriptor several action unnecessary discussion performed third descriptor also since action performed moment three descriptor initially processed two remain thing switch statement check whether descriptor endofpacket field set true descriptor true code action return function pdesc legacycmdfeop return true would false remaining descriptor would processed vulnerability would bypassed see return function lead bug end function following descriptor ready unwrap network packet send network inner loop call function iterates descriptor case actually process static int pthis bool fonworkerthread pthis itxdcurrent pthis ntxdfetched pdesc pthis atxdescriptors pthis itxdcurrent rc pthis pdesc tdbah tdbal tdh fonworkerthread pdesc pdesc legacycmdfeop break descriptor function called static int pthis pdesc rtgcphys addr bool fonworkerthread switch pdesc case break case pdesc pdesc empty data descriptor skippedn pthis szprf else pthis ctxsuff ptxsg else pdesc datacmdftse else stamcounterinc pthis stattxpathfallback rc pthis pdesc fonworkerthread first descriptor passed function nothing context descriptor second descriptor passed since data descriptor tcpsegmentationenable true pdesc datacmdftse call integer underflow processed static int pthis pdesc bool fonworkerthread pthis pthis carve segment int rc vinfsuccess calculate many byte left tcp segment cb pthis cb pdesc descriptor fit completely current segment cb pdesc rc pthis pdesc cb pdesc datacmdfeop fsend fonworkerthread else pdesc cb pdesc cb pdesc rtsuccess rc pdesc datacmdfeop pthis return vinfsuccess todo consider rc important variable pthis pdesc let draw table value variable specified execution function two data descriptor tx descriptor beforeafter pthis pdesc need note processed pthis equal next important part please look end snippet pdesc pdesc legacycmdfeop break since type true break loop despite fact processed important key understand vulnerability understand context descriptor processed data descriptor context descriptor processed tcp segmentation context update data descriptor processed later loop inside function developer intention forbid changing data processed prevent integer underflows code cb pthis able bypass protection recall forced function return true two descriptor left processed despite fact pthis possibility change using make integer underflow processing first three descriptor processed arrive inner loop pthis fincomplete false rc pthis pthis fgso rtfailure rc goto rc pthis fonworkerthread rtfailure rc goto call initial processing descriptor said set size lesser size data already read ie lesser recall input tx descriptor true true true result call maximum segment size equal whereas size data already read finally processing arrive following variable value tx descriptor beforeafter pthis pdesc therefore integer underflow cb pthis cb make following check true since cb pdesc cb pdesc rc pthis pdesc cb pdesc datacmdfeop fsend fonworkerthread function called size without vulnerability impossible call size greater tcp segmentation context update check maximum segment size le equal declinline void pthis pdesc cbmaxsegmentsize pthis pthis vtag rtunlikely cbmaxsegmentsize pthis pthis vtag buffer overflow called size abused least two possibility found firstly data read guest heap buffer static int pthis rtgcphys physaddr bool fsend bool fonworkerthread pdmdevhlpphysread pthis ctxsuff pdevins physaddr pthis atxpacketfallback pthis pthis atxpacketfallback buffer size obvious overflow lead example function pointer overwrite secondly dig deeper found call certain configuration register call function function allocates stack buffer size copy data specified length case buffer without check static int pthis const void pvbuf sizet cb status defined rxpacket statusfvp else memcpy rxpacket pvbuf cb see turned integer underflow classical stack buffer overflow two overflow heap stack one used exploit exploit exploit linux kernel module lkm load guest o window case would require driver differing lkm initialization wrapper kernel api call elevated privilege required load driver os common nt considered insurmountable obstacle look contest researcher use exploit chain browser opened malicious website guest o exploited browser sandbox escape made gain full ring access operating system vulnerability exploited pave way ring anything need attack hypervisor guest o powerful hypervisor vulnerability sure exploited guest ring virtualbox also code reachable without guest root privilege mostly audited yet exploit reliable mean either work always never mismatched binary subtle reason nt account work least ubuntu guest default configuration exploitation algorithm attacker unloads loaded default linux guest load exploit lkm lkm initializes according datasheet transmit half initialized since need receive half step information leak lkm disables loopback mode make stack buffer overflow code unreachable lkm us integer underflow vulnerability make heap buffer overflow heap buffer overflow allows use eeprom write two byte relative heap buffer kb range hence attacker gain write primitive lkm us write primitive time write byte acpi advanced configuration power interface data structure heap byte written index variable heap buffer single byte read since buffer size lesser maximum index number attacker read past buffer hence heshe gain read primitive lkm us read primitive time access acpi obtain byte heap byte pointer vboxddso shared library lkm subtracts rva pointer obtain vboxddso image base step stack buffer overflow lkm enabled loopback mode make stack buffer overflow code reachable lkm us integer underflow vulnerability make heap buffer overflow stack buffer overflow saved return address ripeip overwritten attacker gain control rop chain executed execute shellcode loader step shellcode shellcode loader copy shellcode stack next shellcode executed shellcode fork execve syscalls spawn arbitrary process host side parent process process continuation attacker unloads lkm load back allow guest use network initialization lkm map physical memory regarding mmio physical address size predefined hypervisor void mapmmio void offt pa sizet len void va ioremap pa len va printk kerninfo pfx ioremap failed map mmion return null return va general purpose register configured tx ring memory allocated transmit register configured void void mmio configure general purpose register configurectrl mmio configure tx register gtxring kmalloc maxtxringsize gfpkernel gtxring printk kerninfo pfx failed allocate tx ringn return configuretdbal mmio configuretdbah mmio configuretdlen mmio configuretctl mmio aslr bypass write primitive beginning exploit development decided use primitive found service disabled default mean first place chromium service browser provides acceleration vulnerability found researcher last year problem find information leak default virtualbox subsystem obvious thought integer underflow allows overflow heap buffer control anything past buffer see single additional vulnerability required integer underflow appeared quite powerful derive read write information leak primitive saying stack buffer overflow let examine exactly overflowed heap device state structure struct atxpacketfallback eeprom atxpacketfallback buffer size overflowed byte copied data descriptor searching interesting field buffer came structure contains another structure following field eeprom device emulation struct bool mfwriteenabled abuse implement eeprom secondary adaptor memory guest o access via mmio register eeprom implemented finite automaton several state four action interested write memory look srcvboxdevicesnetworkdeveepromcpp state opwrite storeword return waitingcsfall void storeword mfwriteenabled eeprom stored word datamsb mfwriteenabled field structure control malform way statement write two byte arbitrary offset also residing structure found write primitive read primitive next problem find data structure heap write arbitrary data pursuing main goal leak shared library pointer get image base hopefully need unstable heap spray virtual device main data structure appeared allocated internal hypervisor heap way distance always constant despite virtual address course randomized aslr virtual machine launched pdm pluggable device driver manager subsystem allocates pdmdevins object hypervisor heap int pvm pvm ppdmdevins pdevins padevs pdev preg fflags pdmdevregflagsrc rc pvm cb mmtagpdmdevice void pdevins else rc pvm mmtagpdmdevice cb void pdevins traced code gdb using script got result tracedeviceconstructors constructing device tracedeviceconstructors name pcarch repeat time tracedeviceconstructors description pc architecture device tracedeviceconstructors constructor int ppdmdevins int pcfgmnode pcarchconstruct ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors constructing device tracedeviceconstructors name pcbios repeat time tracedeviceconstructors description pc bios device tracedeviceconstructors constructor int ppdmdevins int pcfgmnode pcbiosconstruct ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors constructing device tracedeviceconstructors name repeat time tracedeviceconstructors description intel mt desktop ethernetn tracedeviceconstructors constructor int ppdmdevins int pcfgmnode ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors constructing device tracedeviceconstructors name repeat time tracedeviceconstructors description ich audio controller tracedeviceconstructors constructor int ppdmdevins int pcfgmnode ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors constructing device tracedeviceconstructors name usbohci repeat time tracedeviceconstructors description ohci usb controllern tracedeviceconstructors constructor int ppdmdevins int pcfgmnode ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors constructing device tracedeviceconstructors name acpi repeat time tracedeviceconstructors description advanced configuration power interface tracedeviceconstructors constructor int ppdmdevins int pcfgmnode ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors constructing device tracedeviceconstructors name gimdev repeat time tracedeviceconstructors description virtualbox gim device tracedeviceconstructors constructor int ppdmdevins int pcfgmnode ppdmdevins int pcfgmnode tracedeviceconstructors instance tracedeviceconstructors data size tracedeviceconstructors instance tracedeviceconstructors address tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous tracedeviceconstructors address differs previous note device position seen second list following device offset next already said distance always exploitation opportunity device following ich ohci acpi virtualbox gim learning data structure figured way use write primitive virtual machine boot acpi device created srcvboxdevicespcdevacpicpp typedef struct acpistate upmtimeold upmtimea upmtimeb acpistate acpi port inputoutput handler registered range case port pdmbothcbdecl int ppdmdevins pdevins void pvuser rtioport port unsigned cb pdevins acpistate pthis acpistate pvuser switch case smbblkdatoff pthis pthis pthis pthis sizeof pthis break guest o executes inb instruction read one byte port handler take one byte array index return guest apply write primitive since distance virtual device heap block constant distance array writing two byte read arbitrary data range byte obstacle look acpistate structure seen array placed end structure remaining field useless leak let look found structure acpistate x acpi rsdp vmmap vboxddso start end offset perm path rx r rw p seems pointer string placed fixed offset vboxddso image base pointer lie offset end acpistate read pointer bytebybyte using primitive finally obtain vboxddso image base hope data past acpistate structure random virtual machine boot hopefully nt pointer offset always information leak combine write read primitive exploit bypass aslr overflow heap overwriting structure trigger eeprom finite automaton write index acpistate structure execute inb guest access acpi read one byte pointer repeat time incrementing index void mmio void txring printk kerninfo pfx stage n loopback mode enabled data network packet actually every tx data descriptor sent back guest handled right via loopback mode disabled data sent network usual disable loopback mode stage overflow heap touch stack buffer later stage enable loopback mode overflow heap stack buffer mmio leakedbytes mmio txring leakedbytes printk kerninfo pfx byte leaked leakedbytes leakedvboxddptr leakedbytes vboxddbase leakedvboxddptr leakedvboxddrva printk kerninfo pfx leaked vboxddso pointer leakedvboxddptr printk kerninfo pfx leaked vboxddso base vboxddbase return vboxddbase said order integer underflow lead stack buffer overflow certain register configured idea buffer overflowed function called handling tx descriptor loopback mode indeed loopback mode guest sends network packet received right sent disable mode unreachable dep bypass bypassed aslr loopback mode enabled stack buffer overflow triggered void void mmio void txring vboxddbase offt bufferpa void bufferva allocbuffer bufferpa bufferva bufferva vboxddbase mmio txring bufferpa freebuffer bufferva void void mmio void txring vboxddbase printk kerninfo pfx stage n mmio mmio txring vboxddbase mmio last instruction executed saved return address overwritten control transferred anywhere attacker want dep still bypassed classical way building rop chain rop gadget allocate executable memory copy shellcode loader execute shellcode shellcode loader trivial copy beginning overflowing buffer next start lea rsi rsp push rax pop rdi add rdi loadersize mov rcx rep movsb nop payload shellcode loadersize start shellcode executed first part start sysfork mov rax syscall test rax rax jnz continueprocessexecution initialize argv lea rsi cmd mov argv rsi initialize envp lea rsi env mov envp rsi sysexecve lea rdi cmd lea rsi argv lea rdx envp mov rax syscall cmd db usrbinxterm env db argv dq envp dq fork execve create usrbinxterm process attacker gain control host ring process continuation believe every exploit finished mean crash application though always possible course need virtual machine continue execution achieved second part shellcode continueprocessexecution restore rbp mov rbp rsp add rbp skip junk add rsp restore register must preserved according system v abi pop rbx pop pop pop pop skip junk add rsp fix linked list pdmqueue prevent segfaults vm shutdown null null zero entire pdmqueue pointed unnecessary testing machine sure mov rdi rbx mov rax mov rcx rep stosb null pointer pdmqueue stored first byte pointer corrupted mmhyperfree mov qword rbx last pdmqueue corrupted ret called callstack jump right nothing return hypervisor function static declcallback void ppdminetworkdown pinterface pthis rtfrommember pinterface inetworkdown resume suspended transmission status statustxoff pthis true fonworkerthread shellcode add rbp make next register rbx taken stack required system v abi preserve callee function nt hypervisor crash invalid pointer could enough virtual machine nt crashing anymore continues execute access violation function vm shutdown reason heap overflowed important structure pdmqueue overwritten furthermore overwritten last two rop gadget ie last byte tried reduce rop chain size failed replaced data manually hypervisor still crashing meant obstacle obvious seemed data structure overwritten linked list data overwritten last second list element next pointer overwritten remedy turned simple fix linked list pdmqueue prevent segfaults vm shutdown null null getting rid last two element allows virtual machine shut smoothly demo http
147,Lobsters,virtualization,Virtualization,Secure Browser Architecture Based on Hardware Virtualization,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.664.9527&rep=rep1&type=pdf,secure browser architecture based hardware virtualization,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream e lb endstream endobj obj ocgs r pagelabels rpages rtypecatalog endobj obj font procset pdftext xobject rotate endobj obj stream h
148,Lobsters,virtualization,Virtualization,Making your Talos II into an IBM pSeries,https://www.talospace.com/2018/11/making-your-talos-ii-into-ibm-pseries.html,making talos ii ibm pseries,turning talos ii power mac blog post running ibm proprietary aix operating system qemu apple network server oddball powerpc thinkpads diagnostic image compatible patch tool love jackboot,post updated new information thanks zhuowei zhang author post reference pointing qemu add smp support emulated pseries hardware read previous series turning talos ii power mac spent time kvmpr virtualizer problem state version kvmppc lower performance hardware dependency emulate great number historical power cpu including relevance article recently however someone pointed blog post running ibm proprietary aix operating system qemu asked well would work talos ii aix run ibm power hardware thus affords good opportunity exploring kvmhv hardwareassisted hypervisor flavour kvmppc let find parenthetically say long history aix first job college mostly working mediumsize parisc university server running hpux also number machine email running aix access well course early implementation power architecture ended apple network server running aix later became first floodgapcom decommissioned replacement ibm express running aix tlmumble handrolled patch system still run floodgapcom gopherfloodgapcom today also couple oddball powerpc thinkpads thinkpad whose scsi controller fuse got blown upgrade fully functional thinkpad german keyboard running aix well also add licensing situation aix nonibm hardware sticky may give lawyer heart attack oversimplification salesdroids worked back day essentially rule ibm hardware run aix may run considered implicit license simply possessing hardware situation changed ibm introduced pseries hardware allowed run aix starting original openpower machine even though ibm hardware licensed aix even though allegedly could coerce aix run least subset machine work handwavy work qemu provides enough pserieslike environment least boot aix though piece still missing kernel appears able detect running qemu however whether function may legal run aix installation openpower powernv system like talos ii even virtualization openpower nonibm power isa system explicitly licensed aix ibm unlikely come playing around warned first make sure system able run qemu virtualization running least kernel version fedora qemu check kvmhv show lsmod make sure loaded nt need make modification tutorial nt loaded try sudo modprobe kvmhv make sure module enabled check dmesg get error nt problem kernel boot hpt instead radix mmu mode mine enable kvmpr next get bootable medium although set install disc aix version old boot system intended get around demonstration simply use diagnostic image author blog post us although diagnostic image compatible work download image use patch tool author offer enables boot limited root shell snoop around filesystem nt gotten around updating patcher recent image one suffice purpose qemu provides graphical console usb keyboard like real ibm system specific ibmsupplied device supported aix console terminal requires particular ibm usb keyboard mouse naturally provided confiscatory markup drive console powered graphic card since qemu nt know provide device yet tell qemu provide emulated serial terminal connected one emulated system vtys instead work emulated serial terminal provided terminal session run qemu main qemu window aix boot tcg builtin jitted cpu emulation system slow demonstrate speed differential versus running hardware assistance command line provided original blog post work recommend keeping verbose booting enabled run tcg reassured qemu nt frozen substitute iso filename cpu machine pseries serial mon stdio cdrom guesterrors promenv inputdevicevdevicevty promenv outputdevicevdevicevty promenv bootcommanddev ibm aixdiagnostics property boot cdrom ppcchrpbootfileexe verbose qemu start stay terminal session minimize graphical console wo nt using booting tcg take seven minute thread dual talos ii qemu built original author indicates boot stall minute six system definerspc step also notice fourdigit hex code appearing bottom terminal session representing state bootloader aix admin recognize real ibm hardware apple network server display front lcd led panel system prompt press press enter either enter diagnostics menu root shell depending using patched iso sufficient show basically work already appreciate dreadfully slow task substance kill qemu process close graphical console window let bring kvmhv time smp supported let give four core start continue use verbose boot want start quickly probably find message annoying substitute iso filename get error saying kvm type nt supported know kvmhv loaded try booting accelkvm accelkvm kvmtypehv cpu host smp machine pseries serial mon stdio cdrom guesterrors promenv inputdevicevdevicevty promenv outputdevicevdevicevty promenv bootcommanddev ibm aixdiagnostics property boot cdrom ppcchrpbootfileexe notice using cpu host kvmhv support virtualizing actual cpu generation immediately cpu thus work cpu started virtualized boot shoot straight press console message second box way diags menuroot shell prompt one minute much faster explore command line note many missing binary miniroot diags disk provides terminal emulation delete key manually backspaced ctrlh many glitch expected since disc never meant provide shell environment component miniroot exist support diagnostics front end addition possible actually configure terminal correctly diags menu therefore anything useful probably due missing support qemu even enter valid terminal type diagnostics front end continue complain terminal improperly initialized prevent anything nevertheless get root shell interesting compare lsattr e real ibm hardware emulated system selected entry censored system id hardware vpd nothing personal entcapacity entitled processor capacity frequency system bus frequency fwversion ibm firmware version revision level modelname machine name systemid ibm censored hardware system identifier value definitely different occasionally abnormal emulated pseries system even missing outright despite placeholder corresponding one virtualized box entcapacity entitled processor capacity frequency system bus frequency fwversion slof head firmware version revision level modelname ibm pseries emulated qemu machine name systemid hardware system identifier difference entitled processor capacity due command line option cpu frequency oddly unreported various identifier different value unpopulated possibly kernel able detect running virtualization curious hardware support present lsdev look like given command line lsdev available cache available na available memory available pci bus available processor available processor available processor available processor defined rendering context manager subsystem available system object available system planar available virtual io bus available lpar virtual serial adapter available na available asynchronous terminal famous aix smit system configuration tool made work command line try something like usrbinsmitty start say biztm smit happens tm use ctrll repaint screen needed see key combination like press esc release quickly press second key note version smit missing quite screen everything anything bring system cleanly like really matter type exit shell eject virtual cd want n indicate halt system h aix respond halt completed qemu automatically exit ibm used lot interesting aix aix particular offered lot workstation feature even game an aix port quake abuse modern version intended buttoneddown server os client functionality either accidental secondarily grafted said aix got lot easier build stuff aix either xlc gcc fullservice web gopher email run good collection server utility ported plus old binary built apple network server without comment aix definitely different arguably staid humourless underpinnings odm may immediately familiar tough o take punishment run like tank admit love jackboot despite real hardware fun see boot run talos even limited sense
149,Lobsters,virtualization,Virtualization,Disabling Intel Hyper-Threading Technology on Amazon Linux (2017),https://aws.amazon.com/blogs/compute/disabling-intel-hyper-threading-technology-on-amazon-linux/,disabling intel hyperthreading technology amazon linux,update july threadsiblingslist ht technology hyperthreading technology architecture microarchitecture amazon handmade exploring ht technology amazon linux lscpu lscpu disabling ht technology runtime cpu hotplug kernel lscpu lscpu disabling ht technology boot user data conclusion,post courtesy brian beach aws solution architect update july brought attention certain aws instance type different delimiters threadsiblingslist depending cpu architecture operating system either comma dash determine delimiter instance run following command cat sysdevicessystemcpucpu topologythreadsiblingslist customer running high performance computing hpc workload amazon linux occasionally ask disable intel hyperthreading technology ht technology enabled default precloud world usually performed modifying bios turned ht technology user regardless possible benefit obtainable example io intensive workload cloud ht technology turned best particular application post discus method disabling ht technology ht technology according intel hyperthreading technology make single physical processor appear multiple logical processor one copy architecture state logical processor logical processor share single set physical execution resource information see hyperthreading technology architecture microarchitecture best explained analogy imagine small business assembling craft sale amazon handmade building craft assembled six identical workbench inside workbench includes hammer wrench screwdriver paintbrush etc craftspeople work independently produce approximately six time output single craftsperson rare occasion contend resource example waiting short line pull raw material shelf turn business booming time expand production space add workbench decision made two people work workbench overall effective often still little contention one using hammer need using wrench occasionally one worker wait worker using hammer contention resource somewhat higher single workbench case versus workbenchtoworkbench ht technology work way analogous small business building like processor workbench like core worker like thread within intel xeon processor two thread execution core core designed allow progress made one thread execution state thread waiting relatively slow operation occur context even cached memory slow much le main memory many dozen hundred clock cycle away operation involving thing like disk io order magnitude worse however case thread operating primarily close eg register relatively close firstlevel cache instruction data overall throughput occasionally decrease compared noninterleaved serial execution two line execution good example contention make ht technology slower hpc job relies heavily floating point calculation case two thread core share single floating point unit fpu often blocked one another case linpack benchmark used measure supercomputer list many study shown get better performance disabling ht technology fpus example specific workload shown experimentation slower case ht technology used speaking discus disable ht technology like discus whether disable disabling ht technology may help workload much likely hinders others traditional hpc environment decide enable disable ht technology one cluster cloud limited one cluster run multiple cluster disable ht technology case leaving enabled others addition easily test configuration decide best based empirical evidence said overwhelming majority workload leave ht technology enabled exploring ht technology amazon linux look configuration amazon linux instance ran example eight vcpus note vcpu thread intel xeon core therefore four core run two thread resulting eight vcpus see running lscpu note removed output brevity root lscpu cpu online cpu list thread per core core per socket socket numa node numa cpu see output four core core two thread resulting eight cpu exactly expected furthermore run lscpu see detail individual cpu root lscpu extended cpu node socket core online yes yes yes yes yes yes yes yes notice eight cpu numbered see first set four cpu associated different core core repeated second set four cpu therefore cpu cpu two thread core cpu cpu two thread core linux kernel generally agnostic topic happy schedule thread logical cpu smart enough know difference core thread give preference scheduling first operating system thread per core core busy kernel add o thread core using second hardware thread disabling ht technology runtime understand relationship cpu core disable second set cpu using process called hotplugging case might say hotunplugging information see cpu hotplug kernel logical cpu represented linux filesystem entirely virtual location sysdevicessystemcpu really part literal filesystem course linux designer unified actual filesystem well device kernel object single namespace many common operation including handy ability control state kernel object changing content file represent see directory entry cpu directory find online file used enabledisable cpu simply write file disable cpu kernel smart enough allow scheduled operation continue completion cpu kernel save state next scheduling event resume operation another cpu appropriate note nice safety feature linux provides disable cpu get accessdenied error try imagine would happen accidentally took cpu offline disable second thread first core must root user root echo run lscpu see cpu offline root lscpu extended cpu node socket core online yes yes yes yes yes yes yes repeat process cpu disable however would tedious vcpus use script disable usrbinenv bash cpunum cat sysdevicessystemcpucpu topologythreadsiblingslist cut tr n sort un echo sysdevicessystemcpucpu cpunumonline done let explain script first find total number cpu loop second half cpu finally disables cpu turn running script run lscpu see second half cpu disabled leaving one thread per core perfect root lscpu extended cpu node socket core online yes yes yes yes disabling ht technology boot point script disable ht technology change persisted next reboot apply script every boot add script rclocal use cloudinit bootcmd cloudinit available amazon linux well linux distribution available executes command find system metadata within userdata part metadata namespace cloudinit includes bootcmd module executes script time instance booted following modified script run every boot cloudconfig bootcmd cpunum cat sysdevicessystemcpucpu topologythreadsiblingslist cut tr n sort un echo sysdevicessystemcpucpu cpunumonline done launch instance add user data step wizard instance start ht technology disabled disables subsequent reboots alternative approach edit grubconf open bootgrubgrubconf favorite editor find kernel directive maxcpusx parameter x half total number cpu remember linux enumerates first thread core followed second thread core therefore limiting number cpu half total disables second thread core like hotplugging earlier must reboot change take effect conclusion customer running hpc workload amazon linux access bios disable ht technology post described process disable second thread core runtime boot future post examine similar solution configuring cpu window note technical approach nothing control software licensing licensing right sometimes linked number cpu core licensing purpose legal term technical term post cover anything software licensing licensing right
150,Lobsters,virtualization,Virtualization,Introducing the OpenBSD Virtualization FAQ,https://undeadly.org/cgi?action=article;sid=20181029144519,introducing openbsd virtualization faq,peter n hansteen vmm openbsd faq virtualization commit vmm read thing,contributed peter n hansteen vmm vmm dept returning reader likely aware openbsd variety come virtualization built brought vmm subsystem getting started openbsd virtualization become even easier openbsd faq new virtualization section written mainly solene rapenne solene added site commit offer introduction concept well instruction get started vmm right go read thing play vmm thanks solene
151,Lobsters,virtualization,Virtualization,The SOM Family: Virtual Machines for Teaching and Research (2010),http://www.hpi.uni-potsdam.de/hirschfeld/publications/media/HauptHirschfeldPapeGabrysiakMarrBergmannHeiseKleineKrahn_2010_TheSomFamily_AcmDL.pdf,som family virtual machine teaching research,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size prev startxref eof obj stream h p g gi c rӹ
152,Lobsters,virtualization,Virtualization,Unicorn – The ultimate CPU emulator,https://www.unicorn-engine.org/,unicorn ultimate cpu emulator,blackhat usa security conference pdf format email u,gave presentation unicorn engine blackhat usa security conference talk went well got nice feedback audience slide available pdf format find presentation detail design implementation unicorn would like improve code quality official release therefore unicorn project calling beta tester willing help test unicorn find clean bug code need excellent coder writing tool using unicorn way find bug phase answer yes question email u selfinstroduction interested help unicorn released soon full source code gpl license short beta phase
153,Lobsters,virtualization,Virtualization,Learning KVM - implement your own Linux kernel,https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html,learning kvm implement linux kernel,tokyowesterns writeup tokyowesterns ctf escapeme thread kvmhelloworld kvmtool osdevorg long mode wiki page pae physical address extension wikipedia repositoryhypervisor efer extended feature enable register msr model specific register linux source code linuxfsbinfmtelfc loadelfbinary kernelmmuaccessc github,week ago solved great kvm escaping challenge twctf hosted tokyowesterns given writeup blog writeup tokyowesterns ctf escapeme mention nothing kvm bug least nt find around introduction article kvm found actually introducing either libvirt qemu lack utilize kvm directly post thread good start implement simple kvm program project kvmhelloworld kvmtool worthy take look well osdevorg great resource learn system architecture knowledge post introduce use kvm directly work wish article quick start beginner learning kvm created public repository source code kvmbased hypervisor kernel clone try reading article warning code post may simplified clearly show function want write code highly recommend read example repository instead copypaste code kernel implemented able execute elf userspace screenshot execution result introduction kvm kernelbased virtual machine virtual machine implemented native linux kernel know vm usually used creating separate independent environment official site described virtual machine created kvm private virtualized hardware network card disk graphic adapter etc first introduce use kvm execute simple assembled code describe key point implement kernel kernel going implement extremely simple feature might added post released get started communication kvm done ioctl syscall usually used getting setting device status creating kvmbased vm basically need step open kvm device kvmfdopen devkvm ordwrocloexec create vm vmfdioctl kvmfd kvmcreatevm set memory vm guest ioctl vmfd kvmsetusermemoryregion region create virtual cpu vm vcpufdioctl vmfd kvmcreatevcpu set memory vcpu vcpusizeioctl kvmfd kvmgetvcpummapsize null run struct kvmrun mmap null mmapsize protreadprotwrite mapshared vcpufd put assembled code user memory region set vcpu register rip run handle exit reason ioctl vcpufd kvmrun complicated see figure vm need user memory region virtual cpu need create vm set user memory region create vcpu working space execute code better plaintext hacker warning code posted error handling step set new vm step create vm set user memory region void kvm code sizet codelen step open devkvm int kvmfd open devkvm ordwrocloexec kvmfd errx failed open devkvm step create vm int vmfd ioctl kvmfd kvmcreatevm step set user memory region sizet memsize size user memory want assign void mem mmap memsize protreadprotwrite mapsharedmapanonymous int userentry memcpy void sizet mem userentry code codelen struct kvmuserspacememoryregion region slot flag guestphysaddr memorysize memsize userspaceaddr sizet mem ioctl vmfd kvmsetusermemoryregion region end step finished code fragment assign memory memsize guest put assembled code first page later set instruction pointer userentry guest start execute step set new vcpu step create set vcpu void kvm code sizet codelen step omitted step create vcpu int vcpufd ioctl vmfd kvmcreatevcpu step set memory vcpu sizet vcpummapsize ioctl kvmfd kvmgetvcpummapsize null struct kvmrun run struct kvmrun mmap vcpummapsize protread protwrite mapshared vcpufd step set vcpu register standard register include generalpurpose register flag struct kvmregs regs ioctl vcpufd kvmgetregs regs regsrip userentry regsrsp stack address regsrflags bit always set ioctl vcpufd kvmsetregs regs set register special register include segment register struct kvmsregs sregs ioctl vcpufd kvmgetsregs sregs sregscsbase sregscsselector let base code segment equal zero ioctl vcpufd kvmsetsregs sregs finished create vcpu set register include standard register special register kvmrun structure corresponds one vcpu use get cpu status execution notice create multiple vcpus one vm multithreads emulate vm multiple cpu note default vcpu run real mode executes assembled code run page table must set describe later step execute last step run void kvm code sizet codelen step omitted step execute vm handle exit reason ioctl vcpufd kvmrun null switch run exitreason case kvmexithlt fputs kvmexithlt stderr return case kvmexitio todo check port direction putchar char run run iodataoffset break case kvmexitfailentry errx kvmexitfailentry hardwareentryfailurereason llx run failentryhardwareentryfailurereason case kvmexitinternalerror errx kvmexitinternalerror suberror x run internalsuberror case kvmexitshutdown errx kvmexitshutdown default errx unhandled reason run exitreason typically care first two case kvmexithlt kvmexitio instruction hlt kvmexithlt triggered instruction trigger kvmexitio io also use hypercall ie communicate host print one character sent device ioctl vcpufd kvmrun null run exitlike instruction occurred hlt error also enable singlestep mode demonstrated stop every instruction let try first kvmbased vm int main mov al mov dx dx al mov al dx al hlt code kvm code sizeof code execution result kvm kvmexithlt world execute assembled code need set vcpu long mode wiki page describes switch real mode long mode highly recommend read well complicated part switching long mode set page table mapping virtual address physical address processor us memory management feature named pae physical address extension contains four kind table pdpt pdt pt way table work entry point pdpt entry pdpt pdt entry pdt pt entry pt point physical address figure called paging another paging method named paging pt page table removed method pdt entry point physical address control register cr used setting paging attribute example point physical address information control register found wikipedia code set table using paging map void setuppagetables void mem struct kvmsregs sregs void mem pdptaddr pdpt void mem pdptaddr pdaddr pd void mem pdaddr pdptaddr pdptaddr pdpt pdaddr pdaddr pd sregs sregs sregs enable sse instruction sregs sregs efer eferlme eferlma control bit record table including page mapped writable accessed usermode eg stand memory mapped writable stand paging instead result page table map address ie virtual address equal physical address remaining setting segment register void setupsegmentregisters struct kvmsregs sregs struct kvmsegment seg base limit selector present type execute read accessed dpl privilege level db l g sregs c seg segtype readwrite accessed segselector sregs d sregs e sregs f sregs g sregs s seg need modify vm setup step support instruction change code sregscsbase sregscsselector let base code segment equal zero setuppagetables mem sregs setupsegmentregisters sregs execute assembled code int main movabs rax push pop rcx mov edx dx al shr rax loop hlt code kvm code sizeof code execution result kvmexithlt source code hypervisor found repositoryhypervisor far already able run assembly code kvm introduction kvm almost finished except handling hypercalls next section describe implement simple kernel contains o knowledge interested kernel work go ahead kernel implementing kernel question need dealt cpu distinguishes kernelmode usermode could cpu transfer control kernel user invokes syscall kernel switch kernel user kernelmode v usermode important difference kernelmode usermode instruction executed kernelmode hlt wrmsr two mode distinguished dpl descriptor privilege level field segment register c c usermode zero kernelmode sure level equivalent socalled real mode kernel handle segment register carefully instruction syscall sysret properly set segment register automatically nt need maintain segment register manually another difference permission setting page table example set entry nonuseraccessible pdptaddr pdptaddr pdpt pdaddr pdaddr pd kernel want create virtual memory userspace handling mmap syscall user page table must set bit ie bit set page accessed userspace example pdptaddr pdptaddr pdpt pdaddr pdaddr pd example set useraccessible page hypervisor useraccessible page handled kernel syscall special register enable syscallsysenter instruction efer extended feature enable register used entering long mode sregs efer eferlme eferlma lme lma stand long mode enable long mode active respectively enable syscall well sregs efer efersce also need register syscall handler cpu know jump user invokes syscalls course registration done kernel instead hypervisor registration syscall handler achieved via setting special register named msr model specific register getset msr hypervisor ioctl vcpufd kernel using instruction rdmsr wrmsr register syscall handler lea rdi ripsyscallhandler call sethandler syscallhandler handle syscalls sethandler mov eax edi mov rdx rdi shr rdx input msr edx eax mov ecx msrlstar long syscall target wrmsr ret magic number index msr find definition linux source code setup invoke syscall instruction program jump handler registered syscall instruction change rip also set rcx return address kernel know go back handling syscall set rflags change two segment register c s well describe next section switching kernel user also need register c selector kernel user via register msr used describe syscall sysret detail respectively pseudo code sysret see set attribute c s explicitly csselector csselector csselector rpl forced set rest c fixed value csbase flat segment cslimit fffffh granularity implies limit cstype executeread code accessed cs csdpl csp csl csg granularity cpl ssselector rpl forced set rest s fixed value ssbase flat segment sslimit fffffh granularity implies limit sstype readwrite data accessed ss ssdpl ssp ssb stack segment ssg granularity register value c kernel user msr xor rax rax mov rdx mov ecx msrstar wrmsr last set flag mask mov eax xor rdx rdx mov ecx msrsyscallmask wrmsr mask important syscall instruction invoked cpu rcx rip rflags rflags syscallmask mask set properly kernel inherit rflags set user mode cause severe security issue full code registration registersyscall xor rax rax mov rdx mov ecx msrstar wrmsr mov eax xor rdx rdx mov ecx msrsyscallmask wrmsr lea rdi rip syscallhandler mov eax edi mov rdx rdi shr rdx mov ecx msrlstar wrmsr safely use syscall instruction usermode let implement syscallhandler globl syscallhandler kernelstack extern dohandlesyscall intelsyntax noprefix kernelstack quad initialize first time switching usermode userstack quad syscallhandler mov rip userstack rsp mov rsp rip kernelstack save noncalleesaved register push rdi push rsi push rdx push rcx push push push push forth argument mov rcx call dohandlesyscall pop pop pop pop pop rcx pop rdx pop rsi pop rdi mov rsp rip userstack byte rexw prefix indicate sysret instruction sysret notice properly pushandpop calleesaved register syscallsysret modify stack pointer rsp handle manually hypercall sometimes kernel need communicate hypervisor done many way kernel use outin instruction hypercalls used instruction simply print byte stdout extend fun thing inout instruction contains two argument dx eax use value dx indicating kind hypercalls intended call eax argument defined hypercalls define hpnrmark define nrhpopen hpnrmark define nrhpread hpnrmark define nrhpwrite hpnrmark define nrhpclose hpnrmark define nrhplseek hpnrmark define nrhpexit hpnrmark define nrhppanic hpnrmark modify hypervisor print byte encountering kvmexitio ioctl vm vcpufd kvmrun null switch vm run exitreason case omitted case kvmexitio putchar char vm run vm run iodataoffset vm run ioport hpnrmark switch vm run ioport case nrhpopen hphandleopen vm break case omitted default errx invalid hypercall else errx unhandled io port x vm run ioport break take open example implemented handler open hypercall hypervisor warning code lack security check hypervisorhypercallc static void hphandleopen vm vm static int ret vm run iodirection kvmexitioout instruction offset vm run vm run iodataoffset const char filename char vm mem offset mayinitfdmap initialize fdmap initialized int minfd minfd minfd maxfd minfd fdmap minfd opening break minfd maxfd ret enfile else int fd open filename ordonly fd ret errno else fdmap minfd realfd fd fdmap minfd opening ret minfd else instruction vm run vm run iodataoffset ret kernel invoke open hypercall kernelhypercallshpopenc int hpopen filenamepaddr int ret asm mov dx port hypercall number mov eax data dx eax trigger hypervisor handle hypercall eax dx get return value hypercall mov ret eax ret r ret port r nrhpopen data r filenamepaddr rax rdx return ret almost done know thing implement simple kernel running kvm detail worthy mentioned implementation execve kernel able execute simple elf need knowledge structure elf file complicated introduce refer source code linux detail linuxfsbinfmtelfc loadelfbinary memory allocator need mallocfree kernel try implement memory allocator paging kernel handle mmap request user mode need modify page table runtime careful mixing kernelonly address useraccessible address permission checking argument passed usermode must carefully checked implemented checking method kernelmmuaccessc without properly checking usermode may able arbitrary readwrite kernelspace severe security issue conclusion post introduces implement kvmbased hypervisor simple linux kernel wish help know kvm linux clearly know omitted many detail especially kernel part since post intended introduction kvm think arrangement appropriate question find bug code leave comment file issue github post helpful grateful see thanks twitter
154,Lobsters,virtualization,Virtualization,NVMM,http://m00nbsd.net/4e0798b7f2620c965d0dd9d6a7a2f296.html,nvmm,zero nvmm browse browse download open browse qemu package blog post,netbsd virtual machine monitor nvmm hypervisor hypervisor platform provides support hardwareaccelerated virtualization netbsd virtualization api shipped libnvmm allows existing emulator qemu easily create manage virtual machine via nvmm qemu package pkgsrc modified leverage virtualization api provide fast emulation based nvmm two additional component shipped demonstrator toyvirt smallkern former toy virtualizer executes vm elf binary given argument latter example binary resource netbsdorg zero nvmm kernel code browse libnvmm api browse demonstrator download man page open regression test browse qemunvmm load nvmm kernel driver modload nvmm may want run nvmm test confirm setup correct cd usrsrctestsliblibnvmm make hioassist hmemassist install qemu package pkgsrc configure permission chown root nvmm chmod g done finally launch qemu nvmm acceleration adding accel nvmm usual qemu command line example cdrom accel nvmm tested guest os guest o status note netbsd work netbsd work openbsd work openbsd work freebsd work freebsd work nt work nt work winxp work work work work work work fedora work pas notimercheck grub archlinux work pas notimercheck grub ubuntu work haikuos work omnios work note linux performs timer check boot time fail hypervisors work around certain distribution must pas notimercheck grub following netbsdcurrent change nvmm made netbsdcurrent may required perform following step sync system reality make sure latest nvmm header installed nt cp usrsrcsysdevnvmmnvmmh usrincludedevnvmm cp usrsrcsysdevnvmmnvmmioctlh usrincludedevnvmm cp make sure latest version libnvmm installed nt cd usrsrcliblibnvmm make make install build install nvmm kernel driver cd usrsrcsysmodulesnvmm make make install good go technical detail nvmm support virtual machine maximum vcpus ram work amd cpu intel cpu nvmm unique design property currently found hypervisor solution detailed analysis available blog post design overview
155,Lobsters,virtualization,Virtualization,Debian on OpenBSD vmd (without qemu or another debian system),http://www.netzbasis.de/openbsd/vmd-debian/index.html,debian openbsd vmd without qemu another debian system,debian openbsd vmd without qemu another debian system setup preparation install medium starting install first boot,debian openbsd vmd without qemu another debian system setup vmd config need working network internet connection etcvmconf root homedebian vm debianinstall disable memory disk rootbootimg disk interface switch uplink owner debian vm debian disable memory disk interface switch uplink owner debian switch uplink interface preparation install medium use hdboot image patched xen initrd adding virtio module ramdisk switching bootloader serial console mode ftp http ftp http ftp http gzip initrdgz mkdir stretch cd stretch ar x datatarxz xz datatarxz tar xf datatar rm datatar find cpio h initrd cd gzip initrd gzip bootimggz doas vnconfig homebenprojectsvmmdebianbootimg doas mount mnt doas cp initrdgz mntinitrdgz doas vi mnttxtcfg append initrdinitrdgz quiet append vgaoff initrdinitrdgz quiet doas umount mnt doas vnconfig u starting install bootloader use text install need load virtio module first starting install procedure vmctl start debianinstall c grub install installer press esc execute shell depmod modprobe virtiopci virtioblk lsmod exit continue install first boot probably need edit boot entry devvdb changed devvda also network card changed name
156,Lobsters,virtualization,Virtualization,Peeking Behind the Curtains of Serverless Platforms,http://pages.cs.wisc.edu/~liangw/pub/atc18-final298.pdf,peeking behind curtain serverless platform,,obj length filter flatedecode stream 缾 x z mt v e j e v e endstream endobj obj length filter flatedecode stream n c p h f zxt iq n ߠ z v hewkk b ɫ p fid l x c h g j sz l ĩ j n v n fmrˆ l n c lv endstream endobj obj length filter flatedecode stream xڥ u slp g ǃ l
158,Lobsters,virtualization,Virtualization,From VNC to reverse shell,https://blog.benjojo.co.uk/post/qemu-monitor-socket-rce-vnc,vnc reverse shell,sep vnc reverse shell another friend made qemu novnc qemu monitor console live migration feature friend play around site twitter,sep vnc reverse shell personal website weird mostly past era thing like twitter hosted blog service like medium taken hold run blog landing page apex domain since server host blog google app engine cloudflare different server host content domain na home currently resting foot writing regardless want level introduction link social presence elsewhere web except normal landing page every time go pick random o image boot front eye wrote code remix another friend made since served roughly session time also setup recorder recording session done site session boring end fairly quickly people quickly realise happening nostalgia tour around operating system used others spend next minute playing solitaire way system work every time launch site dial websocket another server mine pick vm image launch qemu hand control vnc socket websocket browser us novnc display vnc socket since realised running essentially non trusted code made precaution recording uploaded external location tab closed qemu run root system used anything else software qemu debian base installed user ran many privilege qemu version kept date security patch running well however one morning taking screenshot site friend misfired keyboard combination take screenshot instead got greeted page huh know could launch qemu monitor console vnc monitor console used administer debug guest case issue also used add drive real time mentioned chat room bunch friend bit playing around severity console accessible realised initial worry could mount sshauthorizedkeys drive overwrite permitted ssh key however would somewhat mitigated ssh publically accessible since server behind nat real issue started become clear live migration feature discovered since feature let run unix command order handle migration data became easy way spawn shell inside system looked code repository could fix ssh key get system challenged friend give go expected worked recording copy script pretty simple dial back since server behind nat convenient shell work opposite direction server spawn shell connects shell socket allow remote access wondered site originally inspired bug discussing discoved flag prevents happening appears nographic later discovered issue also prevented setting monitor somewhere flag either way narrow miss friend world security complex surprise feature often fatal case however despite hole discovered would like reflect thing prevented bad sudo setup service running system nothing else could compromised result since host system setup treat vm system hostile server publicly reachable proxied behind nginx nat prevented simple attack happening recording stored remotely meaning audit start check anyone else discovered site prevent security incident change incident play happen addition please play around site find issue site please feel free email dm twitter
159,Lobsters,virtualization,Virtualization,Optimised Ubuntu Desktop images available in Microsoft Hyper-V gallery,https://blog.ubuntu.com/2018/09/17/optimised-ubuntu-desktop-images-available-in-microsoft-hyper-v-gallery,optimised ubuntu desktop image available microsoft hyperv gallery,ubuntu report data microsoft blog post,today pleased announce optimised ubuntu desktop image available hyperv gallery give optimum experience running ubuntu desktop guest window pro desktop host ubuntu report data know lot people using ubuntu virtual machine want make experience seamless possible friend microsoft worked xrdp upstream add support enhanced session mode provides tight integration window host ubuntu virtual machine running hyperv next obvious step create bootable hyperv image ubuntu desktop lts includes xrdp preconfigured take advantage enhanced session mode benefit enhanced session mode improved clipboard integration dynamic desktop resizing shared folder easy hostguest file transfer improved mouse experience seamlessly moving host guest desktop thanks work microsoft contributed open source xrdp project open source implementation microsoft remote desktop protocol hyperv user benefit using hvsock bytestream based communication mechanism host guest giving high bandwidth interconnection ubuntu desktop lts hyperv image available hyperv gallery window pro open hyperv gallery choose ubuntu list operating system booted guided setting ubuntu including adding user account locale time zone first setup complete enhanced session mode automatically enabled prompt select display resolution selected get xrdp prompt login make sure xorg selected drop enter username password created setup logged full ubuntu desktop session information hyperv check link microsoft blog post
160,Lobsters,virtualization,Virtualization,MirageOS on OpenBSD (Now Works),https://lists.xenproject.org/archives/html/mirageos-devel/2018-09/msg00013.html,mirageos openbsd work,,
161,Lobsters,virtualization,Virtualization,Getting started with qemu,https://drewdevault.com/2018/09/10/Getting-started-with-qemu.html,getting started qemu,buildssrht alpine linux enablekvm nic user modelvirtio n c drive mediadisk ifvirtio cdrom sdl sdl virtmanager box,often get asked question using software particularly sway hypervisors like virtualbox vmware well general advice hypervisor choose answer always qemu excuse use anything qemu book admit might bit obtuse understand first qemu greatest strength also greatest weakness many option hard know one need get started qemu swiss army knife virtualisation much like ffmpeg swiss army knife multimedia come surprise given written fabrice bellard run dozen permanent vms qemu well ephemeral vms used buildssrht better option well short qemu fast portable better supported guest feature hollywood nothing hypervisors qemu plenty qemu studying full breadth qemu featureset something time let break simple linux guest installation start downloading install medium alpine linux like alpine linux preparing virtual hard drive curl http qemuimg create f make virtual hard disk file named format format appears guest vm actually writes host sector written guest practice also expose block device local system remote system qemunbd need let boot vm using install medium virtual hard disk enablekvm nic user modelvirtio drive mediadisk ifvirtio cdrom sdl lot take let break enablekvm enables use kvm kernel virtual machine subsystem use hardware accelerated virtualisation linux host specifies ram provide guest nic user modelvirtio add virtual network interface controller using virtual lan emulated qemu straightforward way get internet guest option example probably want use nic tap want guest networking directly host nic modelvirtio specifies special virtio nic model used virtio kernel module guest provide faster networking drive mediadisk ifvirtio attache virtual disk guest show devvda specify ifvirtio reason nic fastest interface requires special guest support linux virtio kernel module cdrom connects virtual cd drive guest load install medium sdl finally specifies graphical configuration using sdl backend simplest usable graphical backend attache display guest show sdl window host run command sdl window appear alpine boot complete alpine installation normally using setupalpine install attached disk shut alpine run qemu without cdrom start vm cover enough get virtualbox whatever bad hypervisor using else possible qemu short list common stuff look running pretty much guest operating system software emulation nonnative architecture like arm ppc riscv using spice instead sdl enable remote access displaykeyboardmouse readonly disk image guest writes stored ram snapshoton nongraphical boot nographic configured kernel command line giving genuine graphic card guest kvm passthrough high performance gaming opencl etc using virtmanager box want gui hold hand much really excuse using hypervisor dogshit compared qemu
162,Lobsters,virtualization,Virtualization,Configuring KVM on Clear Linux,https://brooks.sh/2017/12/22/configuring-kvm-on-clear-linux/,configuring kvm clear linux,configuring kvm clear linux rhomelab intel nuc kubernetes blog post installing kvm configure network sent iptables processing build vms uuid mac address start vm connect vm post installation creating template future image,configuring kvm clear linux ever since stumbling subreddit rhomelab hooked building homelab recently purchased two intel nuc device intent setting kubernetes cluster host website home order project work need two host want spend money physical hardware reading wonderful colleague blog post benefit setting hypervisor thought would great way double number host available offer sort draclike functionality physically present troubleshoot problem set make two nucs kvm host host virtual machine decided clear linux host o seeing tweet distribution kernel optimized run intel hardware incredibly lightweight us custom package manager called swupd handle nodowntime update categorizes theme package bundle installed folk work often found clearlinux room irc super nice always willing lend hand installing kvm first step adventure getting kvm set clear linux machine install kvm start adding two bundle kernelkvm kvmhost using swupd tool sudo swupd bundleadd kernelkvm kvmhost kernelkvm bundle installs kvmspecific kernel kvmhost bundle installs package help get started kvm part installation process new linux group added kvm using user account root add user group sudo usermod g kvm brook finally need enable libvirtd service toolkit use manage virtualized host sudo systemctl enable libvirtd configure network order virtual machine receive ip address accessible local network need create new interface bridge interface clear linux us systemdnetworkd manage persistent network configuration start creating directory etc networkd automatically check see custom specification boot sudo mkdir etcsystemdnetwork first create netdev file defines configuration new network device use favorite editor edit file content netdev kindbridge next create bridge network file defines interface configured interested defining get ip address match network dhcpyes opted use dhcp since router ability reserve address based mac address could also add something similar network finally wire existing physical interface newly created bridge make sure use correct name value match output ip addr case naming file important file libsystemdnetwork match stanza target physical interface need use filename etcsystemdnetwork learned correct filename vanilla clear linux installation match network also want configure bridge packet traverse sent iptables processing netbridgebridgenfcallarptables netbridgebridgenfcalliptables lastly need restart network service order change take affect either use sudo systemctl restart systemdnetworkd restart computer machine back online verify everything worked executing networkctl looking output similar idx link type operational setup lo loopback carrier unmanaged ether routable configuring wlan nocarrier configuring ether carrier configuring link listed hope see routable worry setup configuring build vms exciting part building launching virtual machine first let start creating directory store isos use installation medium sudo mkdir varliblibvirtisos sudo chown root kvm varliblibvirtisos sudo chmod grwx varliblibvirtisos next let create another directory store virtual machine image sudo mkdir varliblibvirtimages sudo chown root kvm varliblibvirtimages sudo chmod grwx varliblibvirtimages following step depends distribution linux would like install opted debian anything would work start fetching iso internet wget p varliblibvirtisos http need create new disk image virtual machine use creating image using format support overlay sudo qemuimg create f next need write configuration file outlining vm would like create linux distribution gui commonly see people use virtinstall unfortunately available u clear linux need craft file varliblibvirtdebianxml domain typekvm name debian name uuid uuid memory memory currentmemory currentmemory vcpu vcpu o type machinepc hvm type boot devcdrom o feature acpi apic pae feature clock offsetlocaltime onpoweroff preserve onpoweroff onreboot restart onreboot oncrash restart oncrash device disk typefile devicedisk source target devhda buside disk disk typefile devicecdrom source target devhdb buside readonly disk interface typebridge source model typevirtio mac address interface graphic typevnc autoportyes passwdcorrecthorsebatterystaple device domain tl dr file creating virtual machine named debian ram cpu three device mounted nic use host bridge interface cd drive boot iso disk created finally configured graphic use vnc since gui installation clear linux need access vm remotely another machine using mac important set passwd value graphic tag builtin vnc client requires password work properly plan creating vms want generate different uuid mac address subsequent file start vm ready start virtual machine first define virtual machine based xml file keep system persisted reboots turn sudo virsh define varliblibvirtdebianxml sudo virsh start debian finally configure machine start automatically host turn sudo virsh autostart debian connect vm order connect machine using vnc computer case using osx using built vnc client order see port guest utilizing kvm run sudo virsh vncdisplay debian see similar output significant implies machine listening vnc port value would imply machine listening port create reverse ssh tunnel kvm host request localhost port actually go virtual machine port ssh l n user kvmhost next finder open connect server prompt command k type address tunneled connection vnc voila see installation medium virtual machine post installation installation complete need shut virtual machine sudo virsh shutdown debian adjust xml file boot device pointed hard drive since longer need installer need modify line start machine back sudo virsh start debian creating template future image plan making virtual machine instead installing o installation medium time instead create template image really neat format specify backing image image new nontemplate image save difference template one machine share base image create base image start powering virtual machine rename debian image something implies template sudo mv create new image us template backing image qemuimg create f b start machine sudo virsh start debian notice image quite small overlayed top template wanted make new virtual machine would need create new xml file different uuid mac address create new image template base qemuimg create f b worry reinstalling o oh image layered top one another blog post stay tuned next step creating kubernetes cluster vms
163,Lobsters,virtualization,Virtualization,vmm(4) gets support for qcow2,http://undeadly.org/cgi?action=article;sid=20180910070407,vmm get support,paul weird de weerd short series commits vmd earlier commit thread thread vmctl,contributed paul weird de weerd thinly provisioned dept short series commits carlos cardenas ccardenas added support image support vmd build earlier commit adding support pluggable disk backends code written ori bernstein posted diffs thread thread tech openbsdorg mailing list august carlos first commit message contains quick usage guide quoting message add initial image support user able declare disk image raw using either vmctl vmconf default disk image format raw specified example using disk format vmctl start bsd lc r vmctl start bsd lc r raw currentraw equivalent vmctl start bsd lc r currentraw vmconf vm current disable memory disk format interface switch external vm current disable memory disk homeuservmmcurrentraw format raw interface switch external equivalent vm current disable memory disk homeuservmmcurrentraw interface switch external tested many big thanks ori bernstein detail course found vmctl manpage many thanks ori work support carlos committing work
164,Lobsters,virtualization,Virtualization,"Easy-to-use, FPGA-accelerated Cycle-accurate Hardware Simulation of RISC-V Systems in the Cloud",https://fires.im/,easytouse fpgaaccelerated cycleaccurate hardware simulation riscv system cloud,firesim opensource berkeley architecture research group electrical engineering computer science department university california berkeley docsfiresim githubcomfiresimfiresim simulate firesim chisel firrtl yosys mhz cycleexactly one thousand multicore compute node siliconproven open riscv rocket chip boom cycleaccurate network simulation linux distribution automates like real computer ssh simulated system firesim concrete use case run firesim public cloud aws isca paper ieee micro top pick article youtube full talk slide isca publication getting started firesim docsfiresim githubcomfiresimfiresim recent news firesim github paper slide paper slide http see older post firesim blog,firesim firesim opensource cycleaccurate fpgaaccelerated fullsystem hardware simulation platform run cloud fpgas amazon firesim actively developed berkeley architecture research group electrical engineering computer science department university california berkeley get started firesim find documentation tutorial docsfiresim firesim codebase opensource life githubcomfiresimfiresim recent video chisel community conference dive indepth firesim also scroll read faq video simulate firesim firesim simulate arbitrary hardware design written chisel design transformed firrtl including early work supporting verilog design via yosys verilog firrtl flow firesim write rtl processor accelerator etc run nearfpgaprototype speed cloud fpgas obtaining cycleaccurate performance result ie matching would find tapedout chip depending hardware design simulation scale firesim simulation run mhz also integrate custom software model component wantneed write rtl firesim originally developed simulate datacenters combining open rtl riscv processor custom cycleaccurate network simulation default firesim provides rtl model necessary cycleexactly simulate one thousand multicore compute node derived directly siliconproven open targetrtl riscv rocket chip boom optional cycleaccurate network simulation tying together firesim also provides linux distribution compatible riscv system simulates automates process including new workload linux distribution simulation run fast enough interact linux simulated system command line like real computer user even ssh simulated system firesim access internet within concrete use case run firesim firesim run public cloud fpgas aws removing high capex traditionally involved largescale fpgabased simulation firesim useful datacenter architecture research modeling prototyping novel singlesoc chisel design mhz harnessing standardized host platform providing extensive automationtooling firesim drastically simplifies process building deploying largescale fpgaaccelerated hardware simulation isca paper discus firesim framework perspective simulating datacenter built custom rtl network model concise version paper also available ieee micro top pick article beginning youtube video talk use case indetail also checkout lightning talk isca youtube full talk slide isca check publication page see growing list project paper used currently using firesim getting started firesim get started firesim find extensive documentation tutorial docsfiresim firesim codebase life githubcomfiresimfiresim recent news posted march sagar karandikar profiling feature described fireperf asplos paper available released firesim github learn paper preprint firesim doc posted november david biancolin year iccad two firesimrelated paper golden gate centrifuge jenny huang presented centrifuge endtoend hlsbased compiler framework rapid hardwaresoftware codesign using highlevel synthesis centrifuge quickly generates space different rocc accelerator accelerator integrated verilog blackboxes chipyardbased soc simulated directly firesim paper slide later albert magyar presented golden gate midas ii lastest version firrtl compiler used firesim included firesim release unlike midas golden gate apply areaoptimizations automatically larger design onto single fpga optimizing multiported memory golden gate fit boom core single midas paper slide posted october sagar karandikar running handson tutorial firesim chipyard international symposium microarchitecture columbus oh october learn http slide available tutorial attendee get work handson free thanks generosity aws xilinx hope see see older post firesim blog
165,Lobsters,virtualization,Virtualization,What I could not undiscover about Unikernels,http://fourlightyears.blogspot.com/2018/08/what-i-could-not-undiscover-about.html,could undiscover unikernels,blogger,awesome inc theme powered blogger
166,Lobsters,virtualization,Virtualization,Talospace,https://www.talospace.com/,talospace,took wrap officially today raptor said wo nt system emulating openpower bare metal level writing firmware bootkernel created opbuild open source open firmware great improvement coreboot steady evolution recent system appears fsf respect freedom list talos ii lite indisputably libre fsf ryf certification even though huge,ibm took wrap officially today samsungmanufactured monster layer core thread per core tb memory access opencapi pcie new onboard embedded matrix math accelerator specialized ai performance multipetabyte memory cluster transparent memory encryption four time number aes engine overall ibm touting processor three time energy efficient twice fast scalar four time fast vector operation general availability announced first damn sound sweet talos ii desk thread pcie already giving sorrowful eeyore eye even though guarantee lowerend system suitable workstation available processor right know right raptor said wo nt system stand presently nobody else making workstationclass openpower machine raptor probably reason ndas playing close vest follows merely variably informed personal conjecture may completely inaccurate one truly incredible thing openpower least far see hardware previous article looked emulating openpower bare metal level even writing firmware bootkernel bootloader highlevel firmware really beginning build image created opbuild contains petitboot bootloader skiroot filesystem skiboot containing opal openpower abstraction layer handle pcie interrupt operating system service hostboot initializes train ram buffer bus selfboot engine initializes cpu even fusedin first instruction executes otprom run selfboot engine open source otprom onetime programmable rom everything inspectable changeable executes first instruction baseboard management controller power system open firmware know computer nt trust anyone firmware build nt want always build flash system contrast gyration open system struggle interpret slam vendor like purism best deliver frequently used architecture workstation server unlocked fashion possible processor manufacturer going exactly opposite direction great improvement untangling tendril intel management engine processor primarily coreboot steady evolution even improvement significant portion intel disabled secret sauce still needed bring cpu trust sauce specifically say addition partition activated still fully understood situation even worse amd ryzen processor platform security processor least variant nt presently supported coreboot though apparently working port nt take word writing recent system appears fsf respect freedom list talos ii lite imagine blackbird soon follow viking indisputably libre fsf ryf certification amd opteron eight nine year old stand believe powerful system still available fsf ryf list production opteron think reasonable argument open something need considered libre point could considered meaningful control machine denying aspect modern machine prohibited policy getting mean putting faith processor vendor may truly deserve nt get started gpus either matter arm raptor wo nt say public disenchantment suggests aspect processor firmware stack open situation better hoping merely oversight ibm part future policy effective openpower need open isa royaltyfree even though huge sure think room processor manufacturer distinguish market run risk race bottom people simply rip design think real concern riscv think sharing reference design necessary get system bootstrapped ca nt deny money high performance application high performance microarchitecture demand return investment justify development cost similarly extent packin hardware like nest accelerator nt part open isa separately managed device simply share die seems logical also make part processor manufacturer stand potential customer firmware absolutely need clean available isa isa open instruction cpu running part open standard firmware component ought entirely consist instruction must open cpu packin hardware die nt part open isa able bring chip without standard set current openpower standard nt really deserve openpower name worried raptor insinuation imply ibm standard nt similarly arguing currently incomplete situation functionally equivalent openpower matter riscv may wellintentioned disingenuous fsf may ideologue binary blob nt make position wrong entire openpower ecosystem ibm recognize much goodwill prominence openness generated community hope wrong concerned let make sure get right wo nt practicing preach going kill u crib
167,Lobsters,virtualization,Virtualization,"Windows 95, running in an Electron app",https://github.com/felixrieseberg/windows95,window running electron app,electron downloads work native app run doom favorite game thanks displacedgamers credit contributing question license,window running electron app yes full thing sorry downloads work yes quite well actually macos window linux bear mind written entirely javascript please adjust expectation native app absolutely run doom favorite game likely better actual virtualization app short answer yes thanks displacedgamers recommend switch resolution color starting do game like good ol day credit work done copy contributing run source need disk image part repository grab using show disk image button packaged release include disk image find button modify c drive section unpack image folder src folder creating layout imagesdefaultstatebin asset bios doc done run npm install npm start run local build question license project provided educational purpose affiliated approved microsoft
168,Lobsters,virtualization,Virtualization,FreeBSD-UPB/bhyvearm64-util,https://github.com/FreeBSD-UPB/bhyvearm64-utils,,description prerequisite freebsd linux foundation platform emulator arm compiling running freebsd clone freebsd fork clone utility script modify script build freebsd disk image copy script runimagesh linux download extract uefi foundation emulator modify script runimagesh run host run guest virtio,description freebsd guest able boot start rescue shell minimal set userspace program available virtio device also available virtionet virtioblk virtioconsole virtiornd random device freebsd host tested using foundation platform emulator arm website prerequisite freebsd freebsd installed either bare metal virtual machine need compile host guest using kvm virtual machine linux bare metal linux need linux installed either bare metal virtual machine need run foundation platform emulator work linux tested emulator xubuntu arch linux foundation platform emulator need emulator run host guest download arm downloading require registration also need xterm installed linux compiling running next step run freebsd installation clone freebsd fork git clone b http githubcomfreebsdupbfreebsdgit make sure branch next step clone utility script git clone http modify script modify script variable workspace point parent directory cloned freebsd repo default value assumes freebsd repo building disk image script try rsync image linux installation platform emulator use set exact location modifying variable rsynctarget file build freebsd disk image buildguesty buildworld compile host guest kernel ramdisk skip certain compile stage want example let say already built world want rebuild host kernel want rebuild guest nokernely buildguesty full clean rebuild everything fullcleany buildguesty nt specified rsync target script make sure copy disk image linux installation copy script runimagesh need copy script runimagesh utility script linux installation next step run linux download extract uefi foundation emulator wget http snapshotslinaroorgmemberbuildsarmltplatformsrelease releasefvpuefizip unzip fvpuefizip replace release latest uefi release freebsd tested version update tested new release version nt working version foundation emulator uploaded repository uefi version working modify script runimagesh need modify script runimagesh point correct location foundation platform emulator model uefi component fip disk image copied freebsd installation disk run host run host runimagesh emulator open xterm window interact host login name root nt require password run guest building host disk image guest kernel copied rootkernelbin two script provides run guest rootrunvmsh rootvirtiorunsh runvmsh run guest compiled without virtio device virtiorunsh used run guest virtio device running script without argument create run virtual machine default name test one argument provided specify name virtual machine runimagesh vm virtio four virtio device available virtioblk virtionet virtioconsole virtiornd guest configured device dts file driver need compiled kernel virtio argument given bhyve must match device defined dts file script virtiorunsh used example virtionet script virtiorunsh automatically create tap bridge device host connect bridge device order communicate host guest must configure virtual nic address network like virtioblk host compiled virtio image used guest mount image host mdconfig f virtioimg mount devmdx mnt mount image guest mount rw guest ramdisk mounted readonly remount readwrite create mountpoint mkdir mountpoint mount mountpoint virtioconsole using virtioconsole guest able communicate host via socket file script virtiorunshconfigures virtioconsole use socket file socket vmname skt socket file must exist host script deletes socket file exists starting virtual machine connect socket host use nc u socketfile guest mount rw remount guest ramdisk readwrite allow cu create lock file cu l connect virtual console
169,Lobsters,virtualization,Virtualization,Mach-O linking and loading tricks,http://blog.darlinghq.org/2018/07/mach-o-linking-and-loading-tricks.html,macho linking loading trick,http macho transition install name allows circular dependency rearchitectured twolevel symbol namespace introduced sublibraries custom function reexporting symbol look like metasymbols symbol resolvers pseudoop commpage deep inside wrapgen call symbol ordering implemented order file interposing translates darlingmach xtrace us get translated adhoc check,translation post russian available http goal darling project make possible run macos apps linux able load macho binary crucial step achieving early history darling built around custom macho loader idea bridging highlevel darwin apis linux counterpart since focus shifted running code increasingly isolated darwin container since macho transition able use apple original dyld well build many opensource part darwin still maintain simple macho loader used load dyld macho along mach perhaps distinguishing feature darwin various framework library apple ship make extensive use various obscure feature macho provides make dealing macho one important prominent part darling development implementing macho loader building part darwin initially tricky elf real macho understand macho internals much deeper level normally necessary regular developer target darwin without ado let discus trick macho offer install name window linux dynamic library referenced name eg libcso job dynamic linker look library matching name list standard library path contrast darwin somewhat complete path library installation known library install name used presumably done way order prevent dylib hijacking attack malicious dylib get placed library search path real one allows malicious dylib execute arbitrary code behalf executable got tricked loading executables library list full install name dependency dependency macho know install name fact linker know install name use dependency read dependency library linking dylib specify install name using installname dylibinstallname ld option ld libfoodylib fooo installname usrlocalliblibfoodylib link another macho file say libbardylib libfoodylib ld going record libfoo install name usrlocalliblibfoodylib libbar list dependency path dyld look libfoo runtime specifying full path work reasonably well system library indeed placed wellknown location file system library get shipped inside app bundle present problem app could assume going installed applicationsappnameapp app bundle meant portable relocatable exact path library inside known advance darwin solution problem allowing install name start executablepath loaderpath rpath relative main executable path loader executable library directly depends library path list path defined main executable respectively instead always requiring absolute path first two work dependency transitive dependency rpathrelative install name explicitly specify rpath linking executable using ld rpath option many time need ld runme rpath executablepath framework rpath executablepath binlib concept rpath somewhat defies original idea wellknown dylib location allows dylib hijacking attack carried arguably rendering whole topic install name pretty useless circular dependency project span several file normal circular interdependency work fine long file get compiled single binary either library executable work several dynamic library depend might argue instead using circular dependency dynamic library one better reconsider architecture building wo nt wrong one typical thing apple never take time reconsider thing right way prefer keep piling hack trick top particular need make circular dependency work darling various libsystem sublibraries libsystemdyld libsystemkernel libsystempthread depend recently also circularily link cocoa framework appkit core graphic core opengl way cocotron core opengl implemented rearchitectured core opengl implementation got rid circular dependency fundamentally nothing wrong circular dependency dynamic linker already know load library wo nt fall infinite recursion problem direct way link library one linker invocation produce one library linking binary pas dependency already linked linker link one library first moment others yet ready ca nt pas linker trick link simplicity library twice first time tell linker ignore missing dependency indeed pas dependency ld libfoodylib fooo flatnamespace undefined suppress ld libbardylib baro flatnamespace undefined suppress see flatnamespace course try use resulting dylibs directly get dynamic linking error runtime instead relink library second time passing resulting dylibs dependency ld libfoodylib fooo libbardylib ld libbardylib baro libfoodylib time linker able see symbol nt tell ignore error symbol indeed missing get error even though library get linked wrong copy dependency dylibs runtime dyld going see correct one work make sure copy library install name one last detail initialization order code define initializer function using attribute constructor compiler magic list initializers end modinitfunc section inside macho file function invoked dyld upon loading binary reside main invoked normally library initializers run running initializers dependency initializer rely dependency library already set thus ready work guarantee clearly provided circular dependency dyld run initializers order mark dependency upward dependency customize order dyld initialize library somebody marked upward dependency last force libfoo initialized libbar link like ld libfoodylib fooo libbardylib ld libbardylib baro upwardlibrary libfoodylib make convenient darling cmake function named addcircular hard work allows caller simple declarative set dylibinstallname usrlibsystemlibdispatchdylib addcircular libdispatchshared fat source dispatchsrcs sibling systemc systemkernel systemmalloc systemblocks systempthread systemdyld systemduct unwind platform compilerrt upward objc twolevel symbol namespace macho symbol table nt store symbol name also remember library executable symbol come word symbol name namespaced name binary defines hence twolevel namespace level symbol name twolevel namespace introduced prevent symbol name clash normally multiple library defining symbol name would result linktime error nt necessarily work loading library runtime think plugins different library version present linktime runtime problem library use twolevel namespace enables multiple library define symbol name without conflict twolevel namespace turned reverting flat namespace one reason using twolevel namespace implies symbol need resolved link time using undefinedsuppress requires flat namespace seen ld two flag allow disable twolevel namespace link time flatnamespace affect one macho file forceflatnamespace work executables library cause whole process use flat namespace also force dyld use flat namespace runtime setting dyldforceflatnamespace environment variable one caveat using twolevel namespace always explicitly link macho library framework depends example link appkit use foundation explicitly link well another library framework author freely move symbol implementation dependency chain might used able eg possible move code appkit foundation make possible macho ld dyld provide additional feature namely sublibraries reexporting symbol metasymbols sublibraries sublibraries mechanism allows one library called facade umbrella library delegate implementation functionality another library called sublibrary look another way allows library publicly reexport symbol provided another library primary usecase feature libsystem sublibraries reside usrlibsystem used pair library ld libfoodylib fooo lobjc sublibrary libobjc ld libfoodylib fooo reexportlobjc difference make compared linking library lcreexportdylib command get emitted instead usual lcloaddylib particular symbol sublibrary get copied umbrella library link time nt even relinked case new symbol latter added sublibrary runtime lcreexportdylib work similarly lcloaddylib dyld load sublibrary make symbol available others unlike lcloaddylib symbol appear come umbrella library far twolevel namespace concerned really different lcreexportdylib ld behaves link another library libfoo instead looking symbol object dylib file given ld also open inspect reexported sublibrary libobjc example know look thing recorded libfoodylib libobjcdylib install name ld expects find mean library installed proper place use sublibrary anything else work fine system library like libobjc inconvenient plain impossible trying reexport custom sublibrary solve problem ld provides dylibfile option allows specify custom dylib location ld use link time ld libfoodylib fooo reexportlibrary pathtolibsubfoodylib ld libbardylib baro libfoodylib dylibfile executablepathlibfoolibsubfoodylib pathtolibsubfoodylib despite libsystem system library reexporting sublibraries nt see dylibfile used linking every single executable macos system library already installed location matching install name building darling linux however pas number dylibfile path mapping along common argument ld invocation custom function automatically get applied using adddarlinglibrary adddarlingexecutable others reexporting symbol sometimes library need reexport symbol outright everything another library example core foundation reexports nsobject nowadays implemented inside objectivec runtime compatibility reason wondering nsobject ever core foundation instead foundation way tollfree bridging implemented private class wrapping core foundation type eg nscfstring reside core foundation objectivec object still need inherit nsobject perhaps another way could implemented leaving nsobject descendant foundation circularly linking core foundation foundation apple opted move private tollfree bridging helper class along nsobject core foundation thing darling order stay compatible pas list symbol reexport ld using reexportedsymbolslist option echo objcclassnamensobject reexportlistexp ld corefoundation cffileso lobjc reexportedsymbolslist reexportlistexp even though reexporting symbol sound similar reexporting symbol mechanism implemented different sublibraries work special lc dylib command get emitted instead special indirect symbol designated nindir flag inserted nametable behaves symbol provided library library us symbol result second undefined copy symbol name table happens reexports involved one important detail explicitly naming reexported symbol likely want reexport different symbol name different architecture matter fact objectivec name mangling convention abi differ reexport objcclassnamensobject whereas objcclass nsobject objcivar nsobjectisa objcmetaclass nsobject concern using sublibraries available symbol architecture get reexported automatically tool working macho handle fat universal binary one contain submachos several architecture transparently clang build universal binary requested architecture dyld chooses architecture load dylib based architecture executable support tool like ld otool nm work host ie architecture unless explicitly overridden flag thing actually reminds multiple architecture processed get compile error warning twice architecture provide two different reexport list break illusion builtin option ld use different list different architecture mean link dylibs architecture separately combine using lipo ld cffileso arch lobjc reexportedsymbolslist ld cffileso arch lobjc reexportedsymbolslist lipo arch arch create output corefoundation darling use cmake function named addseparatedframework abstract separated linking running lipo real cmake script building core foundation look like addseparatedframework corefoundation currentversion source cfsources version dependency objc system icucore linkflags misc common flag setproperty target appendstring property linkflags wl reexportedsymbolslist cmakecurrentsourcedir setproperty target appendstring property linkflags wl reexportedsymbolslist cmakecurrentsourcedir metasymbols metasymbols yet another feature designed allow apple move symbol library around without breaking old code building macho file always specify earliest version macos support using compiler option similar option io tvos watchos whatever o name apple come product future option control multiple thing instance activates deactivates various availability macro like switch libstdc gnu version libc llvm version c standard library implementation post focus effect linker produced macho particular ld macosxversionmin option note underscore lack extra make emit lcversionminmacosx macho command signal dyld error file loaded earlier o version addition passing macosxversionmin ld also change metasymbols macho file taken account metasymbols symbol name starting ld ld special code path encounter symbol get treated additional command rather symbol name must form ld action condition name condition look like defines o version metasymbol specific symbol effect declared min o version macho linked equal version specified symbol action either add hide installname compatibilityversion causing ld pretend see see symbol given name override install name compatibility version see library one specified name respectively since condition specify version range likely see action repeated many time different o version example list metasymbols libobjc us order hide nsobject code targeting earlier version macos ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject ld hide objcclass nsobject ld hide objcivar nsobjectisa ld hide objcmetaclass nsobject unlikely going find feature useful code knowing work may help decipher cryptic error missing symbol symbol clearly symbol resolvers one rather interesting feature dyld support symbol resolvers way customizing process resolving symbol write symbol resolver special function implement custom logic order find address symbol dyld executes runtime symbol requested using symbol resolvers requires tricky ld flag entirely code assembly level create symbol resolvers using symbolresolver pseudoop two different implementation foo movl eax ret movl eax ret symbolresolver foo check condition call condition jz movq rax ret movq rax ret also need foo present symbol table value matter replaced whatever resolver return global foo foo special compiler support c level use inline assembly achieve c static int return static int return int foo go nt matter return static void fooresolver asm symbolresolver foo return condition assembly code read foo instead foo darwin name mangling convention c prepend c symbol name underscore premachotransition darling prepend strip back underscore working elf file lot pain deal since content foo nt matter neither name resolver label assembly listing normally combine foo fooresolver one function definition like void foo asm symbolresolver foo return condition one downside may result error foo prototype different header file specifies return generic pointer rather int also note magic done nt particularly robust dlsym foo call return original address foo one decided matter case address resolver might make sense make one potential foo implementation act foo symbol care case one imagine sort creative way feature used apple use libplatform select efficient implementation locking primitive runtime based detected cpu count feature define osvariantresolver v attribute visibility osstringify v extern void void void void asm symbolresolver osstringify vaargs define osvariantupmpresolver v osvariantresolver v c void uintptrt commpagecpucapabilities c kup extern void osvariant void return osvariant else extern void osvariant mp void return osvariant mp macro generate resolvers check runtime whether machine single cpu core indicated kup flag present cpu capability descriptor commpage instance slightly efficient spinlock implementation used check done per symbol loaded symbol bound directly selected implementation zero performance cost per call darling additionally use symbol resolvers even ambitious goal allow macho library transparently use linux elf library installed host computer libcairo first step make using elf library work libelfloader simple elf loader implementation enough functionality sucessfully load ldlinux linux counterpart dyld jump ldlinux loading actual elf library need build libelfloader macho install usrlibdarlinglibelfloaderdylib inside darwin chroot directory way directly used darwin code one important detail libelfloader intentionally merge macho elf symbol namespaces apart one pointer elfcalls stashed deep inside libsystem darwin thing remain blissfully unaware several linux elf library mapped somewhere address space darwin linux world coexist surprisingly peacefully inside one process particular us c library libsystemc glibc respectively get access elf symbol darwin world one use libelfloader api incantation like elfcalls dlsymfatal elfcalls dlopenfatal xopendisplay next tool called wrapgen make using elf symbol easier way transparent enables u use thirdparty code like cocotron may expect call linux library directly without major patch given name elf library eg wrapgen retrieves list symbol automatically generates code like include elfcallsh extern struct elfcalls elfcalls static void libhandle attribute constructor static void initializer libhandle elfcalls dlopenfatal attribute destructor static void destructor elfcalls dlclosefatal libhandle void xopendisplay asm symbolresolver xopendisplay return elfcalls dlsymfatal libhandle xopendisplay build code macho library install macho library link magically made macho naturally cmake function called wrapelf make invoking wrapgen building stub macho installing usrlibnative breeze call wrapelf library link simply another macho library able load call linux library easily transparently feel like superpower already mentioned past darling used thin compatibility layer almost directly mapping darwin library call onto linux library call day long gone darling conforming darwin implementation rather darwin port thanks part fact able directly reuse large portion darwin original source code like libsystem dyld xnu launchd part willingness implement many undocumented detail code requires like commpage mentioned lowlevel part stack libsystemkernel deal reality actually running top linux kernel code ever see regular darwin environment linux gnulinux userland nowhere found directly easily reaching native linux library connecting service running linux host x server feel like pulling rabbit hat like witnessing magic trick libelfloader symbol resolvers wrapgen trickery magic trick get le impressive learn work symbol ordering reason rely specific order symbol end macho file instruct ld arrange precisely order think relying insane apple course think different writing list symbol require specific order order special file called order file passing file ld like ld libfoodylib fooo orderfile fooorder unlike reexportedsymbolslist option mentioned orderfile support simple list name comment explicitly specify object file symbol belongs otherwise private static c parlance symbol name get duplicated object file fooo also make symbol entry apply specified architecture wo nt need use separate linking manually apply lipo reexporting symbol make sense reorder symbol precisely block code data designated symbol nothing relies able fall content one symbol directly content next technique frequently used manually written assembly code compiler prefer rely make clear code file rely ability compiler normally emit special assembly directive subsectionsviasymbols mark generated macho file symbol freely reordered stripped unused one place apple rely symbol reordering implementation tollfree bridging libdispatch libdispatch implement object model o object huge amount macro spread several source file model certain degree compatible objectivec object model libdispatch also implement tollfree bridging unlike core foundation ability cast libdispatch object directly objectivec object send message would real objectivec object notably possible cast dispatchdatat object directly nsdata use various cocoa apis way around tollfree bridging implemented using enormous amount hack require objectivec class symbol corresponding o object vtables laid certain order instance dispatchobjecttfb macro check whether objectivec object originates libdispatch tollfree bridged class comparing isa vtables dispatchobject object define dispatchobjecttfb f slowpath uintptrt osobj osobjisa slowpath class osobj osobjisa class osobjectvtable dispatchobject slowpath class osobj osobjisa class osobjectvtable object return f vaargs order file use force kind symbol ordering libdispatch interposing usual way forcibly replacing implementation function content symbol use dyldinsertlibraries environment variable make dyld load given macho file process give higher priority symbol name resolution course higher priority wo nt work binary use twolevel namespace useful combination dyldforceflatnamespace usecases replacing function implementation include replacement implementation wrapping original implementation invoke original implementation wrapper wrapper would normally use dlsym call rtldnext flag like int open const char path int flag modet mode printf called open n path virtual symlink strcmp path foo path bar int originalopen const char int modet originalopen dlsym rtldnext open return originalopen path flag mode addition dyld provides another way replace symbol called dyld interposing loaded macho contains interpose section dyld treat content pair pointer pair command replace symbol implementation one one hand method requires environment variable enough library contain interpose section sometimes referred implicit interposing hand interpose section explicitly express intent replace symbol implementation insert library dyld behave smarter particular dyld interposing work twolevel namespace require original replacement symbol name match top dyld smart enough make symbol name still refer original implementation used inside replacement macho file static int myopen const char path int flag modet mode printf called open n path virtual symlink strcmp path foo path bar call original implementation despite open place invoking myopen return open path flag mode place pair pointer interpose section attribute section data interpose static struct void replacement replacee replacepair myopen open note replacee pointer like reference symbol different file actually get stored macho dummy value corresponding entry relocation table relocation entry reference target symbol name dyld get full possibly namespaced name symbol apply interposing alternatively private function called dylddynamicinterpose allows dynamically interposing symbol typedef struct void replacement replacee replacementtuple extern const struct machheader dsohandle extern void dylddynamicinterpose const struct machheader const replacementtuple replacement sizet count void interpose replacementtuple replacepair myopen open dylddynamicinterpose dsohandle replacepair course pointer replacee code save runtime symbol get replaced continue pointing original symbol dyldinsertlibraries dyld interposing nt nearly useful working objectivec code c partly hard directly reference objectivec method implementation imp partly objectivec provides mean replacing method implementation namely method swizzling isa swizzling darling use interposing implementation detail xtrace tool tracing emulated system call darwin program make darwin system call two kind bsd syscalls socalled mach trap calling libsystemkernel actual userspace side syscall abi implemented darling customized version libsystemkernel translates darwin syscalls regular linux syscalls invocation darlingmach linux kernel module emulates mach kernel side strace popular tracing tool show syscalls linux process make using strace darwin executable running darling produce trace linux syscalls darwin syscall emulation code make well linux syscalls loaded elf library make directly useful mapping linux syscalls darwin syscalls nt always straightforward oftentimes may preferable see darwin syscalls program make go emulation layer tracer xtrace unlike strace requires cooperation tracee due using ptrace api xtrace need hook syscall emulation layer inside tracee process us dyldinsertlibrariesusrlibdarlinglibxtracedylib replacing trampoline function inside syscall emulation layer one log syscall made result xtrace advanced strace come formatting argument return value display enough basic info useful darling xtrace arch machtimebaseinfotrap machtimebaseinfotrap kernsuccess issetugid issetugid hostselftrap hostselftrap port right machmsgtrap machmsgtrap kernsuccess kernelrpcmachportdeallocatetrap kernelrpcmachportdeallocatetrap kernsuccess ioctl ioctl ioctl ioctl writenocancel writenocancel exit see process make bsd mach syscalls write exit simply mapped linux version others require complex translation instance mach trap translated various ioctls devmach device implemented kernel module bsd ioctl call made stdio determine kind file stdin stdout refer case tty get translated readlink ing file procselffd examining result could nt cover every macho feature without risking making post long dyld source code briefly mention writing plugin application loaded runtime may need link dylib hold plugin code executable application ld allows using bundleloader option besides install name lcloaddylib lcreexportdylib lcdylibid command include pair number socalled compatibility current version library compatibility version earliest version current version compatible set current compatibility version dylib link using ld currentversion compatibilityversion option respectively runtime dyld discovers present copy library current version le required compatibility version refuse load library separately compatibility current version macho file also optionally declare source version work via separate command lcsourceversion version set using ld sourceversion option influence whether get included resulting macho using addsourceversion nosourceversion option embedding infoplist content directly section named infoplist allows codesign singleexecutable program separate infoplist file implemented using adhoc check inside securityframework mean supported usual cfbundle nsbundle apis nt allow make proper singleexecutable apps finally worth noting addition trick mentioned ld dyld also contain various hack behave slightly differently system library libsystem particular activated testing library install name hardcoded prefix like usrlib
170,Lobsters,virtualization,Virtualization,Bootable CD + retro game in a tweet,https://www.quaxio.com/bootable_cd_retro_game_tweet/,bootable cd retro game tweet,bootable floppy disk retro game iso ecma el torito,year ago crafted bootable floppy disk retro game fit tweet since twitter doubled length tweet decided handcraft bootable cd bootable disk run slightly improved version tron perl e say ew baaaayq svvvqogaaaaaaaeaf cdiso code tweet creates bootable cdrom disk image cdiso boot code qemu virtual box favorite virtualization software play game arrow key even burn iso blank cd usb drive boot real hardware note system eg linux use handcraft cd disk image must first get basic understanding iso iso standard unfortunately usually expensive iso however ecma mean read specification free iso many extension udf el torito rockridge joliet etc bootable image care el torito el torito specification opinion poorly written mistake eg figure last row easy forget value hex prefix figure nt sorted intuitive order etc thankfully document fairly short create bootable disk start writing empty sector followed volume descriptor set sector byte note specification say volume descriptor set start sector el torito specification call boot record live sector technically put dummy volume descriptor sector thing seem work fine without write first volume descriptor type boot record identifier version el torito specification boot system identifier x padding x unused boot catalog address absolute sector x unused next sector volume descriptor set terminator type terminator identifier version x unused volume descriptor followed boot catalog el torito support various emulation mode cdrom emulate bootable floppy bootable harddrive etc picked emulation implies bios load specific number sector jump bootloader checksum computed value record sum mod first entry boot catalog validation entry header id platform id intel reserved id string x padding cksum cksum checksum byte key byte second entry default entry boot indicator bootable boot medium type emulation load segment system type unused number sector load virtual disk address absolute sector x unused followed zero end sector x unused next sector bootloader retro game compile nasm bootloaderasm bootloaderimg bit pragma tell assembler bit mode state booting floppy org pragma tell assembler code loaded mov bl starting direction worm push load address vram e pop e restartgame mov si worm starting position center screen set video mode mode vga byte per pixel actual color stored palette total size restarting also clear screen mov ax int draw border assume default palette work u also assume starting bottom drawing pixel wrap around end drawing top bottom border mov di mov cx rep drawloop stosb draw right border stosb draw left border add di jnc drawloop notice jump middle rep stosb instruction gameloop read keyboard input port also read byte mouse need handle left right al cmp al jb kbhandleend cmp al ja kbhandleend end bx contains offset displacement based pressedreleased keypad key bet byte shave around given bound check aaa cbw dec ax dec ax jc kbhandle sub al imul ax ax byte kbhandle mov bx ax kbhandleend add si bx original code used set pallete command wait vertical retrace today computer however fast use int instead also shave byte note tweak cxdx running virtual machine v real hardware casual testing seems show virtual machine wait longer physical hardware mov ah mov dh int draw worm check collision parity even paritycollision mov ah color must odd parity xor e si ah go back main game loop jpo gameloop hit wall worm restart game jmp restartgame time db fill rest sector wrote script compile bootloader assemble image generate tweet finally burned cd tested thing work real hardware
171,Lobsters,virtualization,Virtualization,Better slow than sorry – VirtualBox 3D acceleration considered harmful,https://phoenhex.re/2018-07-27/better-slow-than-sorry,better slow sorry virtualbox acceleration considered harmful,update github acceleration feature virtualbox bit rough time year use enabling acceleration give guest direct access large body additional program code virtualbox host process jann horn james forshaw talk video july cpu overview chromium library recon talk chromium message basic infoleak via outofbounds absolute arbitrary write via triggering bug reference,update exploit code hgcmchromium interface library github acceleration feature virtualbox bit rough time year one could argue technically component might considered attack surface virtualbox due big warning put documentation recommending use emphasis mine untrusted guest system allowed use acceleration feature untrusted host software allowed use acceleration driver hardware generally complex made properly secure software allowed access may able compromise operating system running addition enabling acceleration give guest direct access large body additional program code virtualbox host process might conceivably able use crash virtual machine half truth though design virtualbox virtual machine host process access vboxdrv kernel driver thus compromising process even though run privilege user started vm used local privilege escalation already laid detail jann horn james forshaw talk slide video blog post describe infoleak interesting design issue combined fully compromise virtualbox guest acceleration enabled bug fixed july cpu virtualbox version overview acceleration feature referred shared opengl codebase based chromium library distributed opengl rendering confused web browser name predates year chromium defines network protocol describe opengl operation pas actual opengl implementation virtualbox maintaining branch chromium tunnel protocol hgcm hostguest communication manager hgcm essentially simple guest host rpc protocol connected hgcm service guest make simple remote call integer buffer argument handled host side status code returned argument might potentially changed callee order pas back data guest information hgcm overview virtualbox chromium integration found francisco recon talk important note hgcm interface exposed unprivileged process via guest addition driver guest addition installed root privilege necessary install guest driver expose device order attack shared opengl chromium message basic different type chromium message represented crmessage union type typedef struct crmessagetype type unsigned int connid crmessageheader typedef struct crmessageopcodes crmessageheader header unsigned int numopcodes crmessageopcodes typedef struct crmessageredirptr crmessageheader header crmessageheader pmessage ifdef vboxwithcrhgsmi crvboxhgsmicmddata cmddata endif crmessageredirptr typedef union crmessageheader header crmessageopcodes opcodes crmessageredirptr redirptr crmessage type stored headertype field primarily interested crmessageopcodes crmessageredirptr message crmessageopcodes message contains number opcodes prefix byte array describing actual chromium opcodes encoded special way example simple message could look like message crmessageopcodes msgheadertype msgheaderconnid msgnumopcodes crextendopcode opcode indicating extended opcode follows padding whatever reason crwritebackextendopcode extended opcode extra payload data opcode opcode associated unpacker dispatcher prefixed crunpack crserverdispatch respectively unpacker particular opcode look follows crunpackh extern crnetworkpointer writebackptr define setwritebackptr offset crdbgptrcheckz writebackptr crmemcpy writebackptr crunpackdata offset sizeof writebackptr unpackwritebackc void crunpackextendwriteback void copy unpack buffer crnetworkpointer writebackptr setwritebackptr crunpackdispatchwriteback null tell chromium write back data offset message payload response buffer example string ccccdddd sure necessary legitimate us feature give u primitive write back data control certainly useful exploitation infoleak via outofbounds writebackptr several place inside chromium message parser setreturnptr setwritebackptr called usercontrolled offset one example crunpackextendareprogramsresidentnv srcvboxhostservicessharedopenglunpackerunpackprogramc void crunpackextendareprogramsresidentnv void glsizei n readdata glsizei const gluint program datapointer const gluint setreturnptr n sizeof gluint setwritebackptr n sizeof gluint void crunpackdispatchareprogramsresidentnv n program null receive data returnptr writebackptr response chromium message fully control n mean leak data arbitrary offset message buffer without bound checking restriction n nonnegative otherwise run integer overflow issue crash inside actual dispatcher since control allocation size message leaked offset via value n perfect primitive disclose pointer data stored heap absolute arbitrary write via crmessageredirptr chromium message end handled function crserverdispatchmessage srcvboxhostservicessharedopenglcrserverlibserverstreamc static void crserverdispatchmessage crconnection conn crmessage msg int cbmsg msg headertype crmessageredirptr ifdef vboxwithcrhgsmi defined prod build pcmddata msg redirptrcmddata endif msg crmessage msg redirptrpmessage crassert msg headertype crmessageopcodes msgopcodes const crmessageopcodes msg opcodebytes msgopcodes numopcodes handle opcodes ifdef vboxwithcrhgsmi pcmddata int rc vinfsuccess crvboxhgsmicmddataassertconsistent pcmddata crvboxhgsmicmddataissetwb pcmddata cbwriteback pcmddata cbwriteback rc crvboxserverinternalclientread conn pclient pcmddata pwriteback cbwriteback assert rc vinfsuccess rc verrbufferoverflow pcmddata pcbwriteback cbwriteback vboxcrhgsmicmdcheckcomplete pcmddata rc endif pretty obvious break sort way msg completely controlled guest particular guest could set message type crmessageredirptr set msg redirptr point forged crmessageopcodes message forged message produce response written pcmddata pwriteback also attackercontrolled fetched msg redirptr already know use crwritebackextendopcode message control byte response question remains inject crmessageredirptr message chromium subsystem accessed via hgcm function crvboxhgcmreceivemessage srcvboxguesthostopenglutilvboxhgcmc responsible reading message buffer putting chromium processing queue static void crvboxhgcmreceivemessage crconnection conn conn allowredirptr hgcmbuffer crvboxhgcmbuffer crvboxhgcmalloc conn hgcmbuffer len sizeof crmessageredirptr msg crmessage hgcmbuffer msg headertype crmessageredirptr msg redirptrpmessage crmessageheader conn pbuffer msg headerconnid msg redirptrpmessage connid cachedtype msg redirptrpmessage type else never redirptr disabled hgsmi command crassert conn cmddatapvcmd len conn buffersize put preallocated buffer hgcmbuffer crvboxhgcmbuffer crvboxhgcmalloc conn else allocate new buffer using pool likely one time transfer huge texture hgcmbuffer crvboxhgcmbuffer cralloc sizeof crvboxhgcmbuffer len hgcmbuffer magic crvboxhgcmbuffermagic hgcmbuffer kind crvboxhgcmmemorybig hgcmbuffer allocated sizeof crvboxhgcmbuffer len hgcmbuffer len len crvboxhgcmreadbytes conn hgcmbuffer len msg crmessage hgcmbuffer cachedtype msg headertype crnetdispatchmessage gcrvboxhgcmrecvlist conn msg len crmessageopcodes freed crserverlibserverstreamc crnetfree oob message programmer problem humper cachedtype crmessageopcodes cachedtype crmessageoob cachedtype crmessagegather crvboxhgcmfree conn msg see two distinct case conn allowredirptr true crmessageredirptr message get allocated pointed guestprovided message however case guest message put message queue directly note also cachedtype guestcontrolled type message originally sent reason field value used decide message freed location even though put processing queue location never valid thing point since message later dequeued processed essentially least two seperate issue fact guestcontrolled message queued directly fact freed certain case processed useafterfree triggering bug rather confident allowredirptr would always true useafterfree would exploitable due way crvboxhgcmalloc work flag mean comment crneth give clue used host side indicate allowed store pointer later use crvboxhgcmreceivemessage message going processed corresponding hgcm call finished memory freed store copy happens message processing client associated connection blocked another client send u glbegin call waiting receive glend allowredirptr since chromium able handle multiple connection ie multiple hgcm connection case virtualbox need multiplex incoming opengl command different client one client sends glbegin process command client corresponding glend case allowredirptr false client corresponding logic found function crvboxserverinternalclientwriteread srcvboxhostservicessharedopenglcrserverlibservermainc ifdef vboxwithcrhgsmi crvboxhgsmicmddataisset pclient conn cmddata endif crserverrunqueue client pclient crserverclientinbeginend crserverrunqueue client crdebug crserver client blocked allowredirptr pclient conn pclient conn allowredirptr else pclient conn allowredirptr trigger allowredirptr branch issue glbegin one client send forged message another client put queue without inspection send glend get processed first plan attack issue glbegin client send forged crmessageredirptr client b issue glend client boom unfortunately bit work message sent step freed processed due untimely free chose allocate message step via path message step overwrite get processed twice chose allocate via path least linux window free contains heap metadata longer valid message instead issue glbegin client send large forged crmessageredirptr client b trigger path osprovided malloc spray buffer via hgcm call size content hoping occupy freed message buffer issue glend client work linux host least idea message step reuse space message step get processed end result exactly want control message passed crserverdispatchmessage completely achieve writewhatwhere primitive together infoleak described turned flexible repeatable write primitive eventually arbitrary readwrite primitive reference
172,Lobsters,virtualization,Virtualization,The Design and Implementation of Hyperupcalls,https://www.usenix.org/conference/atc18/presentation/amit,design implementation hyperupcalls,support usenix presentation audio,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author nadav amit michael wei title design implementation hyperupcalls booktitle usenix annual technical conference usenix atc year isbn address boston page url http publisher usenix association month jul presentation audio
173,Lobsters,virtualization,Virtualization,Dancing with Giants: Wimpy Kernels for On-demand Isolated I/O (2014),https://cylab.cmu.edu/_files/pdfs/Research/ieee2014_zhou.pdf,dancing giant wimpy kernel ondemand isolated io,,obj endobj obj filterflatedecodeid index info rlength rsize stream b g endstream endobj startxref eof obj stream e ā b k וf endstream endobj obj pagelayoutsinglepagepages rtypecatalogviewerpreferences endobj obj font procset pdftextimagebimagecimagei xobject rotate endobj obj stream q v j endstream endobj obj stream h ݘ nиa ʦ ɯ v ڼ p n źc ǘ lf kq b vl w r p ku v yn z ny x vo ȩn p n h endstream endobj obj stream ab
174,Lobsters,virtualization,Virtualization,Deterministically Deterring Timing Attacks in Deterland (2016),https://pdfs.semanticscholar.org/6aa3/18e95cae5a932e330857e5c8268a2218e191.pdf,deterministically deterring timing attack deterland,,netwarden mitigating network covert channel preserving performancejiarong xing q kang ang chenusenix security
175,Lobsters,virtualization,Virtualization,Who watches the watcher? Detecting hypervisor introspection from unprivileged guests,http://dfrws.org/sites/default/files/session-files/paper_who_watches_the_watcher_detecting_hypervisor_introspection_from_unprivileged_guests.pdf,watch watcher detecting hypervisor introspection unprivileged guest,,obj length r filter flatedecode stream l لda e h vo v
176,Lobsters,virtualization,Virtualization,Almost booting an iOS kernel in QEMU,https://worthdoingbadly.com/xnuqemu/,almost booting io kernel qemu,introduction part sign email completely useless corelliumhq corellium initial research iboot kernelcache xnu iemu open source qemu chameleon grub genericbooter loading kernel qemu io beta update iphone x one apple simple familiar macho file devkitpro kernel entry point tweaking cpu emulation part mistral commented error try read boot argument providing boot args bootargs struct requested allocates initial page table directly another file showed fixed loading device tree device tree linux arm platform write script tweaking cpu emulation part modified qemu cpu selection code getting serial port output standardized added exynos serial port next learned,tried boot io kernelcache qemu managed get far iokit startup receiving kernel panic learned lot io boot project introduction part series io boot process part sign email first read new post let get obvious way first completely useless want run io ask corelliumhq instead buy iphone wanted learn io start modern io device jailbroken already booted corellium built service simulates entire virtual iphone bootup process almost impossible get invite thought hard boot tiny bit io emulator corellium prof possible decided try goal boot enough io receive kernel panic crash log three day work got io print crash virtual iphone virtual serial port iboot version corecryptokextstart called fipspostkext passed m fipspostpostintegrity fipspostkext passed m fipspostposthmac fipspostkext passed m fipspostpostaesecb fipspostkext passed m fipspostpostaescbc fipspostkext passed m fipspostpostrsasig fipspostkext passed m fipspostpostecdsa fipspostkext passed m fipspostpostecdh fipspostkext passed m fipspostpostdrbgctr fipspostkext passed m fipspostpostaesccm fipspostkext passed m fipspostpostaesgcm fipspostkext passed m fipspostpostaesxts fipspostkext passed m fipspostposttdescbc fipspostkext passed m fipspostpostdrbghmac fipspostkext test passed m panic cpu caller kernel data abort saved state fp lr sp pc cpsr esr far real io beta code printing crash bit work confident get boot initial research research already know iphone start bootrom burned cpu chip load iboot bootloader iboot load kernelcache file bundling xnu io kernel core operating system together kernel device driver kernel load rest operating system component decided boot xnu kernel directly emulator bypassing iboot previous io emulation effort iemu team later made corellium try emulate iboot simpler understand io kernel time however iboot closed source xnu open source addition obtain iboot one need jailbroken device kernel unencrypted obtained update ipsw file therefore actually easier obtain understand kernel chose modify qemu experiment since standard open source virtual machine great support processor finally decided look apple open source code possible open source bootloaders start xnu like chameleon grub winocm genericbooter look since wanted get information first hand instead relying people research fun way loading kernel qemu first needed copy io kernel downloaded io beta update iphone x plenty tutorial online like one extracting kernel ipsw file followed one got macho executable file learn load macho file memory consulted apple turn loading kernel simple segment convert virtual address physical address masking top bit copy data memory physical address already familiar macho file easy port logic qemu already support loading linux kernel directly loading kernel buffer registering buffer rom emulation buffer copied correct address virtual device boot load macho file segment buffer register like linux boot code implemented kernel loading tried starting qemu kernelcache virt cpu max kernel kcacheoutbin dtb devicetreedtb monitor stdio unimp int serial file devstdout serial file devstdout serial file devstdout append note passed unimp int print unimplemented cpu special register every processor exception find kernel crashing also passed enable gdb support pause startup attach attached gdb devkitpro started execution gdb target remote remote debugging using warning executable specified target support determining executable automatically try using file command gdb c qemu promptly exited error write access unsupported system register good news single stepping gdb see happens already entered kernel entry point ran tiny bit io already tweaking cpu emulation part qemu emulates cpu control register iphone x custom mistral cpu make qemu ignore invalid register write searched error message commented error fixing kernel crash data abort exception printed qemu console try read boot argument well duh provide yet trying load null pointer providing boot args xnu need boot argument find kernel loaded much memory system bootargs struct well documented apple created populated bootargs structure registered qemu rom like kernel qemu copy emulated device memory passed address requested startup got bit confused put boot argument memory originally put kernel got overwritten boot code examining early boot code turn kernel allocates initial page table directly end kernel overwriting boot argument another file showed fix extend topofkerneldata address bootargs include extra data boot argument get overwritten fixed kernel actually booted c code crashed yet another null dereference exception examining qemu log data abort exception cross referencing using hopper found crashed peidentifymachine function read device tree provide yet loading device tree io us device tree data structure containing list device address kernel know access device soc concept later adopted linux arm platform device tree also contained ipsw update file initially loaded device tree kernel crashed immediately placing breakpoint panic gdb saw kernel expected iboot populate field device tree bypassing iboot write script populate timer frequency early random seed device tree loading modified device tree memory yet another qemu rom kernel dy invalid instruction exception tweaking cpu emulation part offending instruction turned stadd instruction introduced qemu full system emulation mode emulates support however instruction enabled user mode emulation mode modified qemu cpu selection code enable feature full system emulation mode well kernel crash bunch repeated data abort placing breakpoint panic became clear panic crashing ignoring later panic found first panic happens kernel kext loading code try bzero newly allocated buffer good seems kernel already trying load kexts mean gotten quite far boot process able output information serial port getting serial port output point output virtual device qemu log message gdb breakpoints however goal get io kernel print error serial port device tree loaded serial port initialization code io work need emulate serial port correct address obviously qemu support iphone x booting kernel using qemu virt machine type peripheral completely different incompatible early boot two device need work properly timer serial port timer standardized across cpu serial port must implemented debug output turn qemu already support emulating iphone serial port thanks quirk history modern iphones still use serial port design compatible first iphones used samsung cpu change work serial port design samsung used cpu starting way latest exynos cpu qemu support emulating simply added exynos serial port virt machine got output serial port next diagnose kernel crash data abort exception need understand memory mapped io need add command qemu dump cpu pagetables done able figure memory allocation fails get kernel boot bit next goal start launchd virtual iphone probably going take much longer three day definitely learn even io arm qemu learned io boot modify qemu load code directly memory value debugger board bringup emulator single step examine register set breakpoints get output even serial port working meanwhile tried lowlevel bringup nexus way check code actually running adding reboot command wonder developer board include jtag support support level debugging emulator
177,Lobsters,virtualization,Virtualization,How to port your OS to EC2,http://www.daemonology.net/blog/2018-07-14-port-OS-to-EC2.html,port o,port o prerequisite building disk image building ami boot configuration configuration script verifying ssh host key important flossing every day configinit netbsds firstboot script support work supporting work view forum thread blog comment powered,port o maintainer platform year far running thing virtual machine go remains operating system cloud work said time time get question people want port operating system member open source community best help realized day ago rather replying email one one would efficient post something publicly benefit dozen people want port operating system run curiosity maybe thousand people use never build amis rough guide building image prerequisite talk building image thing need o need run hardware ideal managed run freebsd instance least case strictly necessary almost certainly want driver xen block device prenitro instance nvme disk recent instance theoretically could make without since ata emulation available bootstrapping want disk io kernel finish booting want disk driver similarly need support xen network interface older instance intel gbe sriov networking newer prenitro instance amazon ena network adapter nitro instance unless plan instance nt communicate network ena driver probably hardest thing port since far know way get hand hardware directly difficult debugging without working network finally obvious need aws account appropriate api access key building disk image first step building ami build disk image need live disk image installer image live usb disk image almost certainly going place start instance boot virtual bios disk image boot usb stick almost certainly going boot least far boot loader going want make change go disk image later build disk image building ami wrote simple tool converting disk image instance uploads disk image amazon make api call import disk image eb volume creates snapshot volume register ami using snapshot use first need create bucket use staging area call anything like recommend create nearby region performance reason set lifecycle policy deletes object automatically day since nt clean bucket object useless finished creating ami also need create aws key file format expects accesskeyid accesskeysecret done invoke diskimg ami name ami description awsregion awskeys three additional option specify sriov mark ami supporting intel gbe sriov network interface ena mark ami supporting amazon ena network interface public copy image region mark amis public uploads image register ami print ami id relevant region either every region single region uploaded go ahead create ami try launching boot configuration odds instance started booting got far boot loader launching kernel point thing went sideways start iterative process building disk image turning amis launching said amis seeing break thing probably run instance two type console available serial console vga console rather emulated serial emulated vga kernel output go console recommend pick one serial console show system log probably useful vga console show instance screenshot since let see one screen log catch due bizarre breakage complaining ten year serial console laggy find getting output wait five minute try may need tell kernel find root filesystem freebsd build disk image using gpt label simply need specify etcfstab root filesystem devgptrootfs ca nt probably need different amis nitro instance v nonnitro instance since xen block device typically show different device name nvme disk freebsd also needed set vfsrootmountfrom kernel environment variable also longer needed freebsd something similar may needed system need enable networking using dhcp freebsd mean placing ifconfigdefault syncdhcp etcrcconf system way specifying network parameter may necessary specify setting xen network device intel sriov network amazon ena interface necessary configuration across instance type freebsd ifconfigdefault take care specifying network setting apply whatever network interface kernel find boot time almost certainly want turn ssh connect newly launched instance make use nt worry setting password creating user ssh yet take care later point able launch instance get console output showing booted connect ssh daemon remember allow incoming connection port launch instance configuration time make ami behave like instance end prepared set rcd script freebsd importantly print ssh host key console veriy correct first ssh remember verifying ssh host key important flossing every day download ssh public key want use logging create account default key set fetch userdata process via configinit allow configure system part process launching o rc system derived netbsd rcd may able use script without change simply installing enabling etcrcconf otherwise may need write script using mine model firstboot script feature added freebsd year ago concept firstboot script startup script run first time system boot aforementioned configinit ssh key fetching script flagged way o nt support firstboot keyword rcd script need hack around instance also ship script set run first boot freebsd update fetch install security critical erratum update reboot system necessary ufs filesystem boot disk automatically expanded full size disk make possible specify larger size disk instance launch time thirdparty package automatically fetched installed according list etcrcconf useful configinit used edit etcrcconf since allows specify package install via userdata none strictly necessary find extremely useful highly recommend implementing similar functionality system support work hope find useful least interesting please consider supporting work area happy contribute time supporting open source software would nice money coming could use cover incidental expense eg conference travel nt end paying contribute freebsd view forum thread blog comment powered
178,Lobsters,virtualization,Virtualization,Live [Virtual Machine] Migration | [Google] Compute Engine Documentation,https://cloud.google.com/compute/docs/instances/live-migration,live virtual machine migration google compute engine documentation,notification note terminate optionally restart live migration process work premigration brownout blackout note postmigration brownout live migration gpus getting live migration notice handling host maintenance live migration local ssds live migration preemptible instance preemptible instance vm instance detail vm instance page vm instance detail start create snapshot next,compute engine offer live migration keep virtual machine instance running even host system event software hardware update occurs compute engine live migrates running instance another host zone instead requiring vms rebooted allows google perform maintenance integral keeping infrastructure protected reliable without interrupting vms vm scheduled live migrated google provides notification guest migration imminent note prefer live migrate vms choose terminate restart vms instead read documentation terminate optionally restart vm instance live migration keep instance running regular infrastructure maintenance upgrade network power grid maintenance data center failed hardware memory cpu network interface card disk power done besteffort basis hardware fails completely otherwise prevents live migration vm crash restarts automatically hosterror logged host o bios upgrade securityrelated update need respond quickly system configuration change including changing size host root partition storage host image package live migration change attribute property vm live migration process transfer running vm one host machine another host machine within zone vm property attribute remain unchanged including internal external ip address instance metadata block storage data volume o application state network setting network connection live migration process work google migrates running vm instance one host another move complete instance state source destination way transparent guest o anyone communicating many component involved making work seamlessly highlevel step illustrated live migration component process begin notification vms need moved current host machine notification might start file change indicating new bios version available hardware operation scheduling maintenance automatic signal impending hardware failure google cluster management software constantly watch event schedule based policy control data center capacity utilization rate number vms single customer migrate vm selected migration google provides notification guest migration happening soon waiting period target host selected host asked set new empty target vm receive migrating source vm authentication used establish connection source target three stage involved vm migration premigration brownout vm still executing source state sent source target example google copy guest memory target tracking page changed source time spent premigration brownout function size guest memory rate page changed blackout brief moment vm running anywhere vm paused remaining state required begin running vm target sent vm enters blackout stage sending state premigration brownout reach point diminishing return algorithm used balance number byte memory sent rate guest vm making change note blackout event system clock appears jump forward second blackout event exceeds second google stop resynchronizes clock using daemon included part vm guest package postmigration brownout vm executes target vm source vm present might provide supporting functionality target vm example network fabric caught new location target vm source vm provides forwarding service packet target vm finally migration complete system deletes source vm see migration took place vm log live migration critical component platform google continuously test live migration high level scrutiny testing use faultinjection trigger failure interesting point migration algorithm generate active passive failure component achieving complex multifaceted process requires deep integration throughout infrastructure powerful set scheduling orchestration automation process live migration gpus instance gpus attached live migrated must set terminate optionally restart compute engine offer notice vm instance gpu attached terminated learn maintenance event notice read getting live migration notice learn handling host maintenance gpus read handling host maintenance gpus documentation live migration local ssds compute engine also live migrate instance local ssds attached moving vms along local ssd new machine advance planned maintenance live migration preemptible instance ca nt configure preemptible instance live migrate maintenance behavior preemptible instance always set terminate default ca nt change option possible set automatic restart option preemptible instance manually restart preemptible instance vm instance detail page preempted go vm instance page select preemptible instance top vm instance detail page click start need change instance longer preemptible detach boot disk preemptible instance attach new instance configured preemptible also create snapshot boot disk use create new instance without preemptibility next
179,Lobsters,virtualization,Virtualization,From Corp to Cloud: Google's Virtual Desktops,https://ai.google/research/pubs/pub47055,corp cloud google virtual desktop,,recently gdesktop hosted commerciallyavailable hardware corporate network using homegrown opensource virtual cluster management system called ganeti today substantial googlecritical workload run gcp article discus moved gcp carried migration
180,Lobsters,virtualization,Virtualization,Archipel Project - XMPP-based VM management,http://archipelproject.org/,archipel project xmppbased vm management,sedo domain parking,webpage generated domain owner using sedo domain parking disclaimer sedo maintains relationship third party advertiser reference specific service trade mark controlled sedo constitute imply association endorsement recommendation
181,Lobsters,virtualization,Virtualization,Genode - Sculpt for The Curious (TC),https://genode.org/documentation/articles/sculpt-tc,genode sculpt curious tc,sculpt curious tc introduction feedback contact http genodeorgdocumentationsculpttcpdf prerequisite http genodeorg vim skill required hardware requirement preparation http usrsysretdejwsgenodehclhtml building boot image base system system overview static system driver subsystem leitzentrale subsystem tweaking inspecting system adjusting userinput handling driver subsystem display setting exploring driver leitzentrale subsystem runtime management storage device access preparation making customizations permanent example updating usb boot device within virtualbox hosting guest operating system hosting guest operating system advanced usage manual configuration making customizations permanent reproducing system source building boot image http genodeorgdocumentationdeveloperresourcespackagemanagement updating usb boot device within virtualbox building boot image credit http hypervisororg http kernelorg http wikinetbsdorgrumpkernel http wwwfreebsdorg device driver program library used within noux runtime library used packagemanagement infrastructure application crucial tool used development,sculpt curious tc introduction sculpt componentbased desktop operating system put user position full control empowered genode o framework provides comprehensive set building block custom system scenario created name sculpt hint underlying idea crafting molding tweaking system interactively starting fairly minimalistic generic base system tour sculpt system cover following topic boot image live system rescue system bootstrap system one way tweak introspect system formatting hard disk usb stick storing file file system connecting wired wireless network installing deploying software running guest operating system inside virtual machine feedback contact feedback appreciated printable pdf version document available http genodeorgdocumentationsculpttcpdf prerequisite sculpt curious tc second four revision planned successively increased ease use constrast initial version introduces graphical user interface performing fundamental task like connecting wireless network sculpt tc expects already know way around genode source tree tool chain case please consider getting started section genode foundation book available free download http genodeorg vim skill required sculpt tc leverage subset gnu coreutils bash vim user interface sculpting system yet familiar using vim may take sculpt tc welcome chance get toe wet enjoy experience comfortable following operation opening navigating within text file moving cursor using search using insert mode make modification reverting accidental modification u undo saving modified file w opening file secondary buffer e switching buffer bn next bp previous copy paste v start selection v start line selection remember selection p paste remembered selection exiting vim x save exit q discard change hardware requirement preparation sculpt tc compatible recent intelbased pc hardware featuring intel graphic networking intel wireless ahci tested best laptop lenovo x series experimenting sculpt recommend getting refurbished version one may also find unofficial hardware compatibility list http usrsysretdejwsgenodehclhtml helpful finding genodecompatible hardware sculpt tested screen resolution x display higher resolution expected work sweet spot fullhd display please revisit bios setting machine following respect vtd enabled even though sculpt able run without iommu advise enable option sandboxing device driver vtx enabled hardwareassisted virtualization needed run virtualbox top sculpt boot usb enabled sculpt usually booted usb stick uefi boot enabled sculpt tc boot via uefi default boot image specially prepared started via legacy boot older machine however booting via legacy boot modern machine hit miss uefi secure boot disabled sculpt tc boot image cryptographically signed optimize performance battery powered latter set hardware may behave erratically eg nonworking trackpoint battery building boot image following step assume genode tool chain installed gnulinux system reference ubuntu known work well clone genode git repository git clone http githubcomgenodelabsgenodegit cd genode git checkout download support nova microkernel tooldepotdownload content downloaded public directory extracted depot directory download ingredient sculpt boot image tooldepotdownload create build directory toolcreatebuilddir configure build directory editing importantly enable gem sourcecode repository sculpt scenario resides addition port ddelinux ddeipxe repository needed well second change default configuration qemurunopt variable imagedisk instead imageiso way build process produce valid disk image gpt partition table instead legacy iso image create sculpt boot image defined run script reposgemsrunsculptrun make c runsculpt kernelnova boot image created write boot image usb stick sudo dd ofdevsdx convfsync devsdx refers device node usb stick determine may inspect output dmesg plugging base system unless customized sculpt base system resides selfcontained live operating system usb stick installed disk two advantage first make update base system straightforward completely riskfree simply install new version second usb stick new version cause trouble one fall back original one swapping usb stick second alleviates need install bootloader infrastructure disk fact create partition table use entire disk one file system note genode limited booting usb also support use partition guide keep thing simple possible system overview system overview sculpt system consists four part living top microkernel figure static system first static part system baked boot image contains component must shared upper dynamic part defines relationship upper part via static policy fixed creator boot image detailed look static part system besides lowcomplexity gui multiplexer called nitpicker static system contains two inmemory file system config file system store configuration data whereas report file system store information reported component file system invisible regular component component obtain configuration data readonly memory rom service report state writeonly report service boot time config file system prepopulated information boot image stay memory hence rebooting system change gone driver subsystem driver subsystem provides basic service needed realize interactive system scenario framebuffer service graphical output input service obtain user input block service access storage device driver like networking audio driver covered driver subsystem enter picture later stage use platform service usb service access device resource service provided driver subsystem illustrated figure driver like framebuffer driver live dynamically managed subsystem depends runtime discovery hardware socalled drivermanager component whenever intel graphic device present intel framebuffer driver spawned otherwise generic vesa driver driver boottimeinitialized framebuffer used several component driver subsystem report state eg intel framebuffer used report list connector present importantly driver manager report available block device user input may enter system multiple way prominently usb hid driver subsystem contains socalled inputfilter component merges event stream applies transformation like key remappings mouse acceleration leitzentrale subsystem leitzentrale give user full control config file system report file system free inspect manipulate system way wish german term leitzentrale refers control center requires certain degree sophistication operator would typo wrong place may render system temporarily inaccessible eventually requiring reboot nt afraid since manual change performed leitzentrale occur memory risk permanently bricking machine leitzentrale toggled time pressing enabled right boot present minimalistic gui accessing storage device attached machine configuring network connectivity importantly however allows user spawn interactive shell manual config report file system access spawn commandline interface click ram item menu select inspect noux runtime environment executing unix tool inspect window host small unix runtime called noux figure user interface nt let presence unix shell mislead sculpt unix system merely us unix subsystem form noux instance convenient tool managing editing file within inspect window interact report config file system using familiar command bash shell subset coreutils vim besides interactive shell leitzentrale employ noux instance give quick glance recent log message log also available reportlog browsed vim inspect window noux bulletproof get stuck may respawn time toggling inspect button tweaking inspecting system leitzentrale subsystem empowers interactively inspect tweak running system let take walk next adjusting userinput handling default sculpt us usenglish keyboard layout functioning capslock key may possibly want adjust former vim user likely discharge latter mentioned section driver subsystem user input processed inputfilter component edit component configuration via inspect vim configinputfilter change keyboard layout german change enuschargen dechargen save file change becomes effective immediately saving time remap capslock key escape key often needed using vim uncomment corresponding remap rule key name keycapslock keyesc saving file vim user life suddenly becomes much pleasant filter chain userinput event take time review remaining part inputfilter configuration nested configuration node define hierarchy filter applied order inside outside figure filter merging event merge remapping button key remap supplementing symbolic character information chargen pointer acceleration accelerate emulating scroll wheel moving pointer pressing middle mouse button buttonscroll display setting running intel graphic driver inspect connected display supported resolution taking look report reportdriversdynamicintelfbdrvconnectors report updated whenever display connected disconnected use information enable disable display driver configuration find configfbdrv please nt forget correctly specify attribute including hz attribute otherwise driver consider connector setting quick test change attribute height forceheight may modify width analogously saving file screen realestate forcibly limited specified size helpful presentation projector lower resolution laptop internal display specifying beamer resolution laptop beamer show content exploring driver leitzentrale subsystem review construction plan driver subsystem opening file configdrivers vim particular interesting follow route rule see various component connected configuration live enables reconfigure individual component onthefly example search start node driver add attribute verbosekeyboard yes embedded config node saving file changed configuration becomes effective key pressed released keyboard result log message right may revert change vim u save original version file note component dynamically reconfigurable many modern one particular init component longrunning server component possible forcibly restart component adding version attribute start node whenever version value changed component respawned componentspecific configuration option documented readme file accompanying respective component source tree analogously driver subsystem find construction plan leitzentrale subsystem configleitzentrale try following tweak may also enjoy tinkering configuration nitpicker gui server located confignitpicker example may change background color labeling color default domain runtime management far lost word third subsystem called runtime exists besides driver leitzentrale subsystem runtime subsystem predefined purpose filled life wish analogously driver subsystem current configuration runtime subsystem located configruntime initial sculpt ea version required user control runtime configuration manually sculpt tc automates step interactive sculpt manager hosted leitzentrale subsystem click item reveal possible operation selected item start best experiment ram inmemory file system previous section already launched inspect window via inspect button inmemory file system additionally selecting use button tell sculpt manager intent use file system storage location sculpt session two immediate effect first file present config version selected file system copied config file system ram file system empty file copied second socalled depot initialized selected file system depot designated place installation software package default depot initialized sculpt system accepts software published genode core developer may inspect content ramdepot using inspect window second dialog menu present option network connectivity order install software package one need select either wired wifi latter case one prompted selection access point wpa passphrase needed connected network dialog display ip address machine file system selected internet connection time install run additional software interface software installation deployment configdeploy file contains number commentedout template snippet various subsystem first test uncomment start entry fontsfs wm backdrop saving file sculpt manager automatically kick download selected package dependency thereby populate depot download completed package started pay special attention route definition define respective subsystem connected part system example default backdrop directly connected nitpicker gui server base system parent changing route parent child name wm backdrop subsystem connected window manager instead storage device access preparation whereas ram file system practical quick test go without saying want persistently store data program configuration information storage device sculpt tc support sata disk nvme device usbstorage device storage dialog list device detected driver subsystem click device reveals possible operation partition table present detail device structure depending operation selected user sculpt manager automatically reshape runtime subsystem perform selected operation example selecting format device operation sculpt manager create noux instance selected block device mounted devblock mounted noux instance run init process likewise existing file system checked activating check button trigger execution selected file system particularly interesting option presented last partition sculpt usb stick initially right copying sculpt tiny disk image usb stick partition mib size however using expand operation partition extended full size usb stick make enough room use usb stick sculpt file system clear way sculpting custom live system stored entirely usb stick file system supported sculpt present inspect button toggling button selected file system becomes accessible inspect window note one file system inspected time file system appear directory root inspect directory tree named corresponding device partition number way inspect window becomes convenient tool copying file file system hood sculpt manager spawn filesystem component inspected file system translates notion file directory blockdevice access making customizations permanent possible make customization config file system permanent copying modified file directory named config version persistent file system version corresponds sculpt version number found version file time file system selected use file automatically copied inmemory config file system note mechanism work even configdeploy file allows one restore sculpted system composition directly boot time streamline boot procedure customized sculpt system even possible mark one file system default boot time sculpt manager discovers attached storage device automatically selects file system use according following order preference partition labeled genode usb device partition labeled genode sata nvme storage device entire sata nvme device used single file system devised sculpt ea storage dialog host convenient default button allows one toggle partition label genode genode example last partition sculpt usb stick marked default nondefault using button example configdeploy file contains several example subsystem installed demand uncommenting corresponding start node fontsfs filesystem server transforms truetype font glyph image become thereby accessible virtual file provides hook customizing font size component us font server relief component depending specific fontrendering library according route information configuration taken configmanagedfonts fontsfs used graphical terminal noux subsystem topview application wm window manager display client window arranged mouse backdrop wallpaper adjusts screen size simple softwarerendering demo adjusted runtime modifying configuration eg adding custom config node directly inside start node appearance changed fly config painter shaded shape cube noux noux instance graphical terminal similar inspect window leitzentrale note routing various filesystem session sharedfs filesystem server provides shared sub directory sculpt file system new file system client server wo nt see part file system usbdevicesrom hook assigning usb device virtual machine explained section updating usb boot device within virtualbox vmfs filesystem server provides vmdebian sub directory sculpt file system new file system explained section hosting guest operating system topview application show cpu load similar top three inspired puzzle game running native libretro runtime throwaway virtual machine running firefox tinycore linux us virtualbox virtualmachine monitor seoultcbrowser virtual machine executed inside lightweight seoul virtualmachine monitor text editor explicitly granted access config file system may change route filesystem service example specifying child name sharedfs instead parent label config edit shared folder vm subsystem hosting guest operating system default deploy configuration found configdeploy contains piece needed host virtual machine top sculpt virtual machine vm convenient stopgap solution running program yet available natively genode ultimately enables u use sculpt daytoday o today convention host content vm dedicated directory vm guestos file system vm directory contains virtual disk image well vm configuration install ingredient running debian vm may start downloaddebian subsystem automatically download iso image debian installer install reasonable vm configuration subsystem request filesystem session point target directory pas vmdebian directory subsystem filesystem session routed vmfs component please make sure uncomment component along downloaddebian subsystem please review adjust machinevbox file needed particular may reconsider amount ram changing ramsize attribute start vm remove comment around following snippet within configdeploy wm window manager host window vm vmfs location virtualdisk image vm configuration sharedfs location sharing file guest o part sculpt system usbdevicesrom configuration contains list usb device passed vm vm virtual machine saving file virtualbox appear starting debian installer installation finished guest system rebooted time install guest addition virtualbox apt configuration adjusted edit file vi etcaptsourceslist add line deb http ftpdebianorgdebian stretchbackports main contrib nonfree afterwards update package cache apt update upgrade package apt upgrade install linux kernel header apt install sure guest addition use newest kernel reboot guest system next install needed package guest addition apt install virtualboxguestdkms linuxheader package mandatory needed module built without package installed module built certain feature like dynamic modesetting shared folder used example machinevbox file already provides configured shared folder called shared executing mount vboxsf shared mnt mounted accessed via mnt advanced usage manual configuration thanks sculpt manager component leitzentrale many typical work flow configuration tweak largely automated example management storage device creation filesystem component used inspected file system selection configuration network access font size selection depending screen resolution triggering download missing depot content demand convenience come price builtin policy may stand way sophisticated scenario reason almost policy sculpt manager manually overriden manually managing configuration file sculpt manager interacts rest system solely monitoring report aggregated report file system writing configuration file config file system file generated sculpt manager located configmanaged manually creating samenamed file config one supply custom managed configuration sculpt manager useful practice taking snapshot generated configuration starting point custom version example copying nic router configuration connected network cp configmanagednicrouter config copy confignicrouter edited note change usually take immediate effect example manual customization adding custom nic router policy portforwarding rule installing depot content manually managing configinstallation hand includes ability download source code package disarming automated update mechanism using configinstallation file archive entry fixing current state runtime subsystem copying configmanagedruntime configruntime allows one manually tweak inspect runtime way eg enable additional reporting troubleshooting manually defining default font size creating custom configfonts configuration managing wifi credential manually supplying custom configwlan file revert manual customization delete corresponding file case sculpt manager take note manual customizations made permanent following step explained section making customizations permanent reproducing system source section building boot image present creation boot image prebuilt package may want build package source particular customizing system building package various port software need prepared following command prepares genodedir toolportsprepareport bash coreutils curl ddeipxe ddelinux dderump gnupg jitterentropy libarchive libc libgcrypt libiconv libssh lwiplegacy ncurses nova openssl qemuusb stdcxx vim xz zlib libpng ttfbitstreamvera stb ingredient boot image subsumed pkgsculpt package default set software installed update runtime defined pkgsculptinstallation package find depot recipe package reposgemsrecipespkg reposgemsrunsculptrun script executed build boot image default boot image refers genodelabspkgsculpt genodelabspkgsculptinstallation runtimeinstalled software may want install version package instead changing package provider genodelabs adding line runopt depotuser builddir etcbuildconf build package boot image genodedir tooldepotcreate rebuild argument ensures source archive recreated checked consistency version source code archive changed argument automatically update version please nt forget commit updated hash file empty rebuild argument limit creation binary package yet exist binary form specified command would recompile package time may add j n parallelize build process n level parallelism building sculptinstallation package work analogously sculpt package genodedir tooldepotcreate rebuild make sculptinstallation available download within boot image must publish involves archiving signing uploading content former two step covered tooldepotpublish tool expects one specify concrete version current version sculptinstallation obtained via cat genodedir reposgemsrecipespkgsculptinstallationhash first part version second part content hash version information working depot tool refer http genodeorgdocumentationdeveloperresourcespackagemanagement updating usb boot device within virtualbox configdeploy example prepared assign usb storage device directly running virtual machine may inspect report reportdriversusbactiveconfig get list attached usb device use vim copy policy node selected device inline section usbdevicesrom start node within configdeployconfig adjust line follows updated usbdevices rom prompt virtualbox open usb session driver subsystem hence saving modified configdeploy file guest o detect new usb device check output dmesg may write new version sculpt iso image device following step described section building boot image credit sculpt example system scenario genode project operatingsystem technology designed developed scratch said genode developed vacuum rather stand shoulder giant greatly benefit freesoftwareopensource community following project play particularly important role sculpt scenario nova microhypervisor sculpt kernel derivate nova maintained genode lab nova originally created udo steinberg http hypervisororg linux kernel http kernelorg sculpt reuses several linux subsystem individual component particular usb stack intel wireless stack intel graphic driver tcpip stack netbsd rump kernel http wikinetbsdorgrumpkernel filesystem support based netbsd kernel code became reusable genode thanks rump kernel project freebsd http wwwfreebsdorg c runtime used software based freebsd libc device driver program library used within noux runtime library used packagemanagement infrastructure application crucial tool used development
182,Lobsters,virtualization,Virtualization,Security Recommendations for Server-based Hypervisor Platforms (NIST SP 800-125A R1),https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-125Ar1.pdf,security recommendation serverbased hypervisor platform nist sp,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream b e w b h w endstream endobj obj
183,Lobsters,virtualization,Virtualization,AMD’s EPYC server encryption is the latest security system to fall,https://www.networkworld.com/article/3278005/data-center/amd-s-epyc-server-encryption-is-the-latest-security-system-to-fall.html,amd epyc server encryption latest security system fall,meltdownspectre plan use epyc densityoptimized cisco ucs series rack server chassis cisco ucs rack server node sev epyc server processor dell cray exploit paper facebook linkedin,good thing amd sense rub intel nose meltdownspectre vulnerability would getting right back one researcher fraunhofer institute applied integrated safety germany published paper detailing compromise virtual machine encrypted amd secure encrypted virtualization sev news bit downer amd since added cisco list customer epyc processor cisco announced today plan use epyc densityoptimized cisco ucs series rack server chassis cisco ucs rack server nodethe ucs rack server node support two epyc processor memory two pcie slot optional fourthgeneration cisco ucs vic complete programmability cisco say give core server storage per rack previous cisco product target market anyone needing highdensity compute analytics cloud platformswhat sev sev come new epyc server processor amd year amd noncompetitive server opteron server line lagging way behind intel xeon holding virtually market sharehowever thanks advanced new core codenamed zen amd revitalized pose significant performance threat intel desktop server epyc line launched last year come core capable two thread per core new chip gotten lot attention support hpe dell cray among playersone notable feature epyc unique sev designed offer realtime full memory encryption virtualized machine encrypts decrypts virtual machine fly ram locking host operating system hypervisor malware computer vm assigned address space id encrypted cpu vm get space id keythis something cloud provider like microsoft signed epyc customer let provider assure customer memory vms live cloud completely secured multitenant environment even moving vm one server anotherthe exploitwell apparently safe research team say exploit found named severed cute capable recovering plaintext memory data guest vms running server vm attack repeatedly sending request resource service remapping identified memory page extract vm memory plaintext researcher said paper presented european workshop system security held porto portugalthe attack work vm store data inside main ram memory pagewise encryption main memory lack integrity protection allows attacker map memory request part used nearby vms able doin test attack researcher said able retrieve test server entire memory content total including data guest vmthere good news though attacker need admin right modify server hypervisor carry severed attack make compromising server difficult easier defend however researcher consider softwarebased countermeasure insufficient solution attack would require considerable performance overhead therefore modification amd sev seems inevitable fully prevent severed best solution seems provide fullfeatured integrity freshness protection guestpages additional encryption realized intel sgx wroteamd issued statement amd secure encrypted virtualization sev designed help protect virtual machine inadvertent vulnerability typical operating environment sev provides previously unavailable protection memory virtual environment first step improving security virtualization amd currently working ecosystem protect vulnerability difficult exploit malicious hypervisor attack like recently detailed german researcher join network world community facebook linkedin comment topic top mind
184,Lobsters,virtualization,Virtualization,"Another weekend on the new computer (or, making the Talos II into the world's biggest Power Mac)",http://tenfourfox.blogspot.com/2018/06/another-weekend-on-new-computer-or.html,another weekend new computer making talos ii world biggest power mac,problem using virtualization run power mac operating system necessary kvm module kvmpr read patent radioshark preserved part,eye deceive qemu running tiger full virtualization talos ii proof look qemu command line terminal window turned recall last entry problem using virtualization run power mac operating system necessary kvm module kvmpr nt load baremetal system powernv baremetal mean run mac operating system pure emulation eked something equivalent system profiler still drag minimal tweak kvmpr able coax tiger start virtualization increasing apparent cpu speed hardly quad fastest power mac ever see fastest frontside bus ever see ever maximum effort issue actually little complex described thanks paul mackerras ibm ozlabs pointing right direction let give little background first turn virtual address actual real address powerpc power processor prior exclusively used hash table page table entry ptes hptes depending writing find correct location memory process simplified fashion thus given virtual address processor translates key block memory using segment lookaside buffer slb hash key part address narrow two page table entry group ptegs containing eight ptes processor check entry match continues else sends page fault operating system map memory first problem format hptes changed slightly need accommodated host cpu lookup kvmhv already converted new thus work already bigger problem though hash table complex manage worst case could require lot search map page earlier reduce cost translation lookaside buffer tlb used cache pte found however another option called radix mmu scheme read patent bored slb entry block memory radix page table pointer rptp rptp turn point chain hierarchical translation table radix tree series cascading lookup build real address page ram fast flexible particularly wellsuited discontinuous tract addressing space however implementational detail guest operating system running user mode ie kvmpr radix host limitation socalled quadrant memory range nt problem vm execute supervisor instruction ie kvmhv remap necessary kvmhv ca nt emulate kvmpr fortunately still support hpt turn radix mmu booting kernel disableradix get around second problem turn first problem actually nt problem booting o x kvm radix mode assuming hack kvmpr kernel module handle couple extra interrupt type remove lockout anyway lot wanting geekbench number wo nt competitive bunch always demanding know score let set two baseline first trusty backup workstation imac fast cache make worse arm great formfactor never equaled love screen fit well desk get fairly weak geekbench geekbench integer floating point memory stream second baseline use trusty quad left reduced power mode since normally run reduced get decent geekbench first geekbench pure emulation using tcg jit aah forget nt going wait night hacked kvmpr well damn son range least math performance four thread poor thing one qemu power mac emulation yet support smp even kvm remember intentionally run gimped going full blast would blown world baddest power mac water still decent showing mac mode given overhead going running firefox buttload tab lot terminal session think playing movie something background note record number seem bit suspect although may well performance delta image compression decompression nt different would likely direction likewise poor showing standard library memory work might syscall overhead plausible nt explain copy faster simple write regardless heap better emulated cpu would nt finished even time went dinner nice thing kvmprhackymchackface nt require change qemu work though hack pretty hacky sufficient boot mac o cause kernel module err failure memory mapped io probably actually need first problem fixed similarly would expect linux netbsd wo nt happy either reason let alone nesting kvmpr within allowed even supported also io performance qemu regardless kvm dismal even hacked kvmpr raw disk image rebuilding stripped qemu disk network throughput quite slow even worse lot graphic update occurring simultaneously installing mac o x onscreen aqua progress bar minimizing window help able course ominously get occasional soft lockout kernel though everything keep running usually heavy disk access act strangely stuff mess hardware system update reason let software update run emulated mode bug occurred installation would nt completely hose everything make disk image unbootable fact happen first time tried upgrade another unrelated annoyance qemu emulated video card nt offer resolution inconvenient display could probably hack later qemu also bug course support running o x much still work progress example notice screenshots running tenfourfox ca nt installed version tried running qemukvmpr tenfourfox crashed illegal instruction fault tried starting safe mode assumption jit making unsteady seemed work gave safe mode window tried start full browser still crashed illegal instruction fault different place point assumed bug kvmpr tried starting pure emulation time tenfourfox crashed entire emulator exited illegal instruction fault think safely conclude bug qemu nt even tried running classic yet almost afraid still mean lot along able run power mac software also mean need go reprogram autokey remappings remap commandkey combination actually qemu pain worth enough people interested playing go post diff gist new microsoft visual github remember rock sock taint kernel possibly crash computer definitely slap yo mama also need apply patch source code current kernel whatever post binary make bad irresponsible self wo nt wait long build linux kernel scratch relevant module minute playing power else learn weekend want disableradix stick bootup put grub config petitboot pick particularly helpful still ca nt figure putting bootkernfw enable radeon card petitboot still come blank screen unless pull vga disable jumper amdgpu still glitchy sometimes trying view large image eye gnome actually caused graphic corruption garbled mouse pointer session quickly became unusable bail restart viewnior substituted nicely nt problem also found hugin trying find something view equirectangular panorama taken ricoh theta camera eventually hacked freepv building substitute nicely well gave entry usrshareapplications could directly view image gnome file manager symlinking xdgopen open mean still open thing command line o x command dickens time getting android pixel xl talk gnome kept throwing mtp error tried mount yes phone mtp mode could list directory ptp mode could nt actually transfer anything even adb shell would disconnect command adb pull would nt even get past enumerating file list eventually found apocryphal note someone fixed phone connecting usb instead usb found usb hub plugged plugged pixel xl work cable work fine usb speed macbook air pixel assuming issue chipset also think google bug raptor fedora freely distributable linux font improving still suck transferred entire font folder afp otf ttf font worked immediately fondu easily converted dfont font also lot old mac font even font suitcase pure resource fork gnome nt know transfer could tried copying fat volume extracting resource fork hidden directory seemed icky thought went terminal instead l fgrep vi ttf fgrep vi otf fgrep vi dfont fgrep vi bmap perl ne chomp print n xargs n macbinconv mac mb homespectrerfont bin little snippet perl preserve embedded space filename ran turned font resource macbinary transferred resulting file fondu converted well font speaking font wanted play font hinting individual font basis installed font tweak gnome started converted lucida grande use display theme eliminated antialiasing made much display painfully jaggy could nt life figure undo even uninstalling font tweak found configfontconfigconfd removed offending entry able get radioshark play audio required little setup first first compile shark tool linux fortunately preserved part radiosh worked little adjustment new tool kept throwing permission error nt really want run root problem us libhid talk hid portion radioshark libhid expects able enumerate usb device encounter see really hid eventually hit udev recipe added new usb group subsystem usb group usb mode shark control listen vlc using url like pulse deadpool pretty funny good first way going outoutrageous gag little forced sometimes brolin made solid cable domino outstanding hey kiwi kid act nt stereotyped even recognized driving along crowsnest highway bc near manning park merge transcanada hope beautiful road driven many time plus midcredits scene made movie hole said carefully avoiding joke sure stay put musical laughoutloud moment end back tomorrow work datetime picker tenfourfox abandoned cs grid time current implementation actually worse trying render discouraging least gracefully degrades given change made hpte format get kvmpr work o x may even necessary run kernel radix mode try coming weekend point
186,Lobsters,virtualization,Virtualization,A Docker Image in Less Than 1000 Bytes,https://zwischenzugs.com/2018/05/22/a-docker-image-in-less-than-1000-bytes/,docker image le byte,got tiny binary smallest elf hello world whirlwind tutorial creating really teensy elf executables linux byte byte syscall pause byte hexering doc byte byte lift version program blog byte teensy docker image get lower code like post might like docker practice like,got colleague mine showed docker image using test kubernetes cluster nothing start pod sits kill look really quick download got wondering smallest docker image could create wanted one could encode send anywhere cut paste since docker image tar file tar file file quite possible tiny binary first thing needed tiny linux binary nothing prior art couple fantastic instructive article creating small executables well worth reading smallest elf hello world whirlwind tutorial creating really teensy elf executables linux want hello world program slept worked started example first article section data msg db hi world len equ msg section text global start start mov edx len mov ecx msg mov mov int mov mov int running nasm f hwasm hwo ld hwo hw strip hw produce binary byte want hello world first figured need data text section need load data figured top half start section printing tried global start start mov mov int compiled byte good exit need sleep little digging worked mov eax command load cpu register relevant linux syscall number int make syscall call info found list syscall exit wanted syscall pause made program global start start mov eax int shaved byte compile byte creates binary sits waiting signal exactly want hexering point took chainsaw started hacking away binary used hexer essentially vim use binary file edit hex directly lot trial error got appeared thing notice string gone well lot whitespace along way referenced doc mostly trial error got byte byte wanted see could get smaller reading suggested could get byte ala worked executable pulling stunt one seem fly best could lift version program blog sub syscall bit org ehdr db elf eident time db dw etype dw emachine dd eversion dq start eentry dq phdr ephoff dq eshoff dd eflags dw ehdrsize eehsize dw phdrsize ephentsize dw ephnum dw eshentsize dw eshnum dw eshstrndx ehdrsize equ ehdr phdr dd ptype dd pflags dq poffset dq pvaddr dq ppaddr dq filesize pfilesz dq filesize pmemsz dq palign phdrsize equ phdr start mov eax int filesize equ gave image byte gave reducing point open suggestion teensy docker image sleep executable needed put docker image try squeeze every byte possible created binary filename one byte long called put dockerfile scratch virtual image scratch add note cmd increase size docker image command need passed docker run command run using docker save create tar file using maximum compression gzip got portable docker image file le byte docker build docker save gzip wc c tried vain reduce size tar file fiddling docker manifest file effort vain due nature tar file format gzip compression algorithm attempt actually made final gzip bigger also tried compression algorithm gzip best small file get lower keen hear code like post might like docker practice like like loading related
187,Lobsters,virtualization,Virtualization,My first impressions about Graal VM,https://blog.frankel.ch/first-impressions-graalvm/,first impression graal vm,,jmh version vm version jdk vm vm invoker vm option none warmup iteration measurement iteration timeout min per iteration thread thread synchronize iteration benchmark mode throughput opstime benchmark chfrankelblogmybenchmarktestmethod result chfrankelblogmybenchmarktestmethod ops average min avg max stdev ci assumes normal distribution run complete total time benchmark mode cnt score error unit mybenchmarktestmethod thrpt ops
188,Lobsters,virtualization,Virtualization,Sandboxing Docker with Google’s gVisor,https://zwischenzugs.com/2018/05/05/sandboxing-docker-with-googles-gvisor/,sandboxing docker google gvisor,gvisor mean tl dr mean longer gvisor github page gvisor simply redirect application system call gvisor implement kernel primitive signal file system futexes pipe mm etc userspace application allow application directly control system call make implement network stack netstack implement o userspace going host o necessary allowed closer look shutit architecture gvisor container runtime normally split two separate process process includes kernel responsible executing user code handling system call file system operation extend beyond sandbox sent proxy called o might also like post docker security validation field guide docker security measure selinux experimentation reduced pain unprivileged docker build proof concept still beta like,gvisor someone pointed press release google announcing docker container sandbox linux intrigued enough write quick look article mean tl dr way achieving vmlike isolation using container app deployment achieving multitenancy selinuxapparmorseccomp security control mean longer quite way limit access container o api listed discussed gvisor github page explains container gvisor intercept system call made application necessary work service first thought gvisor syscall intermediary could filter linux api call sandboxing go importantly gvisor simply redirect application system call host kernel instead gvisor implement kernel primitive signal file system futexes pipe mm etc complete system call handler built top primitive security perspective key quote well since gvisor userspace application make host system call support operation much like vmm allow application directly control system call make really made jaw drop gvisor sentry process implement network stack also written go called netstack even go length touching host network stack reduces attack surface malign container significantly reading seems implement o userspace going host o necessary allowed contrast tool like selinux apparmor rely host kernel feature bunch rootdefined constraining rule ensure nothing bad happens selinux fantastic technology used reality hard people write understand policy feel comfortable since embedded kernel alternative achieve similar thing might use vm number box indicates relatively heavy overhead achieve isolation gvisor give lightweight benefit container control vmm hostbased kernel filter closer look wrote shutit script create reusable ubuntu vm could build gvisor run sandboxed container build part script instruction reproduce get stuck contact video whole thing setting vm using script architecture gvisor go binary creates runtime environment container instead runc consists two process order provide defenseindepth limit host system surface gvisor container runtime normally split two separate process first sentry process includes kernel responsible executing user code handling system call second file system operation extend beyond sandbox internal proc tmp file pipe etc sent proxy called gofer via connection know connection assume something o guess might also like post docker security validation field guide docker security measure selinux experimentation reduced pain unprivileged docker build proof concept set docker daemon according doc get set debug file tmprunsc rwr r root root may rwr r root root may rwr r root root may rwr r root root may rwr r root root may rwr r root root may rwr r root root may rwr r root root may rwr r root root may rwr r root root may interesting one appear gofer record call made o noodled around mostly appeared request write docker filesystem host need happen write container open reusing control file mode readonly send fd tag rlopen qid qid type version path iounit file file send fd tag rreadlink target recv fd tag twalkgetattr fid newfid name lib send fd tag rwalkgetattr valid attrmask mode nlink uid gid rdev atime mtime ctime size block attr attr mode uid gid nlink rdev size blocksize block atime sec nanosec mtime sec nanosec ctime sec nanosec btime sec nanosec gen dataversion qids qid type version path boot file strace log container combined gofer log tell going container userspace matching time opening file see boot log recv fd tag rreadlink target send fd tag twalkgetattr fid newfid name lib recv fd tag rwalkgetattr valid attrmask mode nlink uid gid rdev atime mtime ctime size block attr attr mode uid gid nlink rdev size blocksize block atime sec nanosec mtime sec nanosec ctime sec nanosec btime sec nanosec gen dataversion qids qid type version path boot also intriguing stuff like urpc unmarshal success seccomp warning console enabled syscall filter le restrictive installing seccomp filter syscalls killfalse syscall filter syscall filter syscall filter syscall filter syscall filter still beta lot problem basic thing sandbox believe say work progress example ran apt install got error e write log devpts mounted posixopenpt file directory never seen also pinged root ping googlecom root ping bbccouk root returned immediately got output also saw error simple command apt installing running command hand got kind race condition escaped root usrsbingroupadd g systemdjournal groupadd lock file already used groupadd lock etcgroup try later like like loading related
189,Lobsters,virtualization,Virtualization,"Open-sourcing gVisor, a sandboxed container runtime",https://cloudplatform.googleblog.com/2018/05/Open-sourcing-gVisor-a-sandboxed-container-runtime.html,opensourcing gvisor sandboxed container runtime,,
190,Lobsters,virtualization,Virtualization,Live Migration of Virtual Machines between Heterogeneous Host Systems (2008),http://hypervisor.org/thesis-galowicz.pdf,live migration virtual machine heterogeneous host system,,obj endobj obj pgfprgb pattern devicergb endobj obj sa false default default type extgstate op true op true sm opm endobj obj sa false default default type extgstate op false op false sm opm endobj obj domain encode size bitspersample range decode filter flatedecode length functiontype stream f sʜ r kqģj h endstream endobj obj separation hks devicecmyk r endobj obj creator freehand title rwth englisch producer acrobat distiller window moddate creationdate endobj obj bbox resource extgstate r r colorspace r procset pdf ptexinfodict r formtype ptexpagenumber filter flatedecode subtype form length ptexfilename type xobject stream h xuyx l x ìnqm ջi 뒙 z lz f endstream endobj obj ca op false smask none sa true ca opm op false ai false bm normal type extgstate endobj obj separation hks devicecmyk functiontype n range domain endobj obj separation hks devicecmyk functiontype n range domain endobj obj view design endobj obj creatorinfo creator adobe illustrator subtype artwork endobj obj intent r name ebene type ocg usage r endobj obj creator adobe illustrator title producer adobe pdf library moddate creationdate endobj obj filter flatedecode length stream ǧ g v uυ mzofc w uea օ l sfd l b jt r mf l n
191,Lobsters,virtualization,Virtualization,Sol — a sunny little virtual machine,https://rsms.me/sol-a-sunny-little-virtual-machine,sol sunny little virtual machine,virtual machine sol wikipedia sol design overview function prototype program counter registry implementation lua lua erlang instruction operation lua op abc op abx op bxx sol source code multitasking multitask coroutines wikipedia section cooperative multitasking quadrotor example example x yield example function call timer example multitasking source code http githubcomrsmssol,weekend together evening earlier week created rather simple virtual machine dubbed sol swedish word sun read lot vm design stuff like o design programming language seeminlgy obscure nerdy stuff surrounding concept computer generic tool virtual machine vm software implementation machine ie computer executes program like physical machine wikipedia sol process virtual machine run inside operating system process however inside sol multiple task like operating system process program running sol matter world look like outside could even make sol boot directly hardware would crazytown trust road purpose sol learning defining world extremely high degree freedom one major component virtual machine provided instruction set instruction simplest type operation program perform set instruction provided virtual machine program running need universal efficient design overview sol vm one scheduler running one cpu core yet implemented time writing scheduler maintains list task run list called run queue scheduler also maintains io watcher timer handle o interrupt etc scheduler work sol fancy thing described also executes program code run queue list task ordered way scheduled scheduler take first task list run queue executes task mean later task ended end error status task removed run place task end list io watcher timer check timer expiry possibly call host o kernel check pending asynchronous io event event happened like timer expired fired correlating task added run queue task read event waiting scheduler repeat process eg starting point long task run queue let look task see task mostly abstraction contains one significant component activation record comprise task call stack activation record corresponds one active function call activation record contains reference function prototype second executing program counter usually called pc cursor currently executing program instruction finally registry value function prototype constant instruction function without context function closure local variable etc function prototype kind like building without people furniture albeit name really comparable blueprint function prototype copied implemented actually used asis program counter simply number corresponds offset function prototype program ordered list instruction activation record think piece running code executed program counter pc incremented instruction executed sometimes pc decremented program jump backwards eg performing loop pc play central role instructionbased program like computer phone hardware likely incrementing pc right registry essentially region temporary memory executing program use store variable data imagine simple function def foo x x x x x return x program need way store value created x pas x also need store resulting value somewhere using return local variable stored register thus access efficient something like happens executing foo function r x mean register x argument already r r load constant r multiply valueof r valueof r put result r multiply valueof r valueof r put result r return r sol registerbased virtual machine operand result read stored numbered register rather pushed popped stack stackbased virtual machine registerbased virtual machine avoid push pop operation usually surrounding instruction reducing code size several case also increase speed execution compared stackbased virtual machine excellent paper implementation lua roberto luiz waldemar describes really problem code size decoding overhead two problem usually associated registerbased machine code size decoding overhead instruction register machine need specify operand typically larger corresponding instruction stack machine instance size instruction lua virtual machine four byte size instruction several typical stack machine including one previously used lua one two byte hand register machine generate le opcodes stack machine total code size much larger sol take lot inspiration lua well erlang instruction operation instruction consists one component operation code eg subtract b operand eg register register b result register c virtual machine disadvantage must whatever term assuring good performance one instruction fit one machine word hardware today able deal long chunk data efficiently inspired lua chose representation sol instruction instruction operand encoded one three layout behold awesome ascii art op abc operation op operand b c bit op b c field bit range operation need two operand made efficient one operand large enough common value need define alternate layout instruction op abx operation op operand b bu bit op bsbu field bit bu range bu third class operation use one operand size correlation efficiency define third alternate layout instruction three operand effectively collapsed one integer value op bxx operation op operand bs buu bit op bssbuu field bit buu range bs b c bu buu signify unsigned integer whilst b bs signify signed integer read room operation register bit bit configuration need changing maintaining instruction operation operand simple sol intentionally gone great length order make playing around instuction set easy file instrh contains list instruction control flow yield abc suspend reschedule jump bs pc bs call abc r r r r r ab return ab return r r data loadk abu r k bu move ab r r b dbgreg abc special debug dump register value arithmetic add abc r rk b rk c sub abc r rk b rk c mul abc r rk b rk c sol source code setup way changing list required apart actual implementation instruction adding renaming instruction automatically make convenience symbol function available say add ding instruction play little sound every time executed mul abc r rk b rk c ding buu sound number play new operation identifier available called sopding well constructor function encoding ding instruction sinstr sinstrding value running program includes ding operation cause error vm unexpected operation implemented ding behavior yet operation time writing implemented schedexech core virtual machine read performs instruction sol program summed like void execute instr instruction instr pc instruction switch pc case soploadk read operand b instruction pc put constant b register break case sopmove read operand b instruction pc put value register b register break switch pretty much good old switch loop c code compiled modern compiler like clang gcc rather efficient virtual operation effectively corresponds machine instruction need add ding case sopding read operand buu instruction pc soundindex sinstrgetbuu pc find note soundindex play soundnote note soundgetnote soundindex soundplay note break type sound well soundget soundplay represents kind sound playing function provide write sol program play music define melody entry ding play note ding play note ding play note ding play note ding play note return return pling plong plong ding pling multitasking toy vm presented without shame unless able multitask perform multiple thing least give programmer illusion concurrency sol operation called yield able pause task state later task resume exact state task perspective never knew paused resumed powerful primitive implement many feature top time writing sol already two different type yield yielding task run scheduled io etc event yielding timer expire end article example program making use yield yield used implement cooperative multitasking task cooperate use processing resource task performed series computation relief control another task one three thing happened task initiated external blocking operation like reading file waiting certain time occur task completed ended main function returned task faulted caused error system communicate environment abroad like web server text editor spend time cpu time relative real time waiting environment respond eg producing data network socket writing content file returning stepper motor position system often benefit cooperative multitasking particular coherent specialized system unlike operating system general nature sol provides essentially coroutines concurrency nice feature coroutines aka green thread aka user thread ability run sequential code concurrent system task like def readfile name f open name data read f close f return data involves three blocking call environment cause task yield open asks operating system open file name file might get opened sometime future scheduler take note task waiting happen remove run queue time o tell scheduler file wanted open well file descriptor thus scheduler place task run queue task receives file descriptor representing opened file task call environment time asking read content f thing scheduler tell o take note unschedules task continue executing task o tell scheulder read file asked read data reality slightly complicated principle scheduler queue task run thing close function programmer easy follow flow program comparing synchronous program asynchronous version def readfile name callback open name def error f error callback error else read f def readerror data close f def error callback error data return file opened clearly harder follow task sol spawn new task order perform several thing time like writing file replying network def writeandreply destinationid message writer writefile destinationid msg message sendmessage destinationid message recv writer taskend noop wait writefile end however wikipedia section cooperative multitasking cooperatively multitasked system relies process regularly giving time process system one poorly designed program consume cpu time cause whole system hang happen program performs lengthy set computation cause kind problem especially task relying timer sol scheduler check timer expiration execution task timer might effectively fire long supposed imagine controlling toy quadrotor one task need update one rotor angle millisecond another task consumes wholesome millisecond quadrotor might crash burn address sol employ operation cost counter task given predefined amount operation value per execution iteration scheduler run task program operation cost counter reach limit task simply forced yield task source code look svmexeclimit example code expressed simplified assembly language almost c api defining program programatically assembly language considered irrelevant beyond explaining instruction executed output line like vm denote scheduler regains control running task task either returned yielded one execution iteration running multiple task usually see task interleved roundrobin order execution iteration marker line output line starting comment andor simplification part actual output assembly comment r x mean register x rk x mean register x x le k else constant xk k special value k x mean constant x assembly comment pc signifies program counter sort cursor instruction program incremented one instruction executed instruction modify counter like instance jump instruction example x yield variable x greater zero decrement x one yield scheduler letting task run eventually return def main x x x x yield return assembly define main const k const k const k entry loadk r k le rk rk continue else pc jump pc return sub r r rk yield yield atypesched jump pc le return return output running debug mode builddebugbinsol sol vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm jump bs vm le abc vm sub abc vm yield abc vm three execution iteration identical block vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab scheduler runloop exited example function call timer program us two function entry point main function simply call kitten function one argument kitten function sleep number millisecond passed first argument kitten function return number main dump register value finally return causing task exit subsequently scheduler vm exit assembly define kitten argument r sleepms const k entry yield yield atypetimer rk b r loadk r k return return r r r define main argument const kitten k func kitten const k entry loadk r k kitten function loadk r k call r r r r r r dbgreg vm debug function dump register value return return output running debug mode time builddebugbinsol sol vm vm task function pc op value vm loadk ab vm loadk ab vm call abc vm yield abc timer scheduled trigger m time pass case scheduler idling timer triggered scheduling task vm vm task function pc op value vm loadk ab vm return ab vm dbgreg vm r vm r vm r vm return ab scheduler runloop exited real user sys example multitasking run three task running program example builddebugbinsol sol sched run queue task task task vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm loadk ab vm le abc vm sub abc vm yield abc vm vm task function pc op value vm jump bs vm le abc vm sub abc vm yield abc vm block instruction repeated three time interleved roundrobin order task vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab vm vm task function pc op value vm jump bs vm le abc vm jump bs vm return ab scheduler runloop exited source code released free permissive mitstyle license http githubcomrsmssol
193,Lobsters,virtualization,Virtualization,BAN.AI's Public Access Multics System,https://ban.ai/multics/,banai public access multics system,,
194,Lobsters,virtualization,Virtualization,The Evolution of an x86 Virtual Machine Monitor (2010),https://www.ece.cmu.edu/~ece845/docs/vmware-evolution.pdf,evolution virtual machine monitor,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size prev startxref eof obj stream ɠa e e x u endstream endobj obj endobj obj encoding endobj obj endobj obj separation black devicecmyk r endobj obj stream n endstream endobj obj font procset pdf text extgstate endobj obj endobj obj endobj obj stream g h ҩs ƙ h wg gǣ endstream endobj obj stream pv
195,Lobsters,virtualization,Virtualization,Nextcloud 13 on FreeBSD,https://vermaden.wordpress.com/2018/04/04/nextcloud-13-on-freebsd/,nextcloud freebsd,host cat etcsysctlconf eof allow jail raw socket allow upgrade jail eof sysctl sysctl cat bootloaderconf eof racctrctl resource limit eof mb path desc host command nextcloudlocal command jls p axwww cpu r time command j nextcloud jail zfs create mountpointjail localjail zfs create mountpointjailnextcloud localjailnextcloud zfs create mountpointjailnextcloudvardbpostgresdata localjailnextcloudpgsql zfs get r recordsize localjail cd jailnextcloud fetch http tar unlink xpjf c jailnextcloud l jailnextcloud cat etcjailconf eof nextcloud hosthostname nextcloudlocal interface path jailnextcloud execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs allowrawsockets allowsysvipc eof jls cat etcrcconf eof jail jailenableyes eof service jail start nextcloud jls cat etchosts eof nextcloud nextcloudlocal nextcloud eof jexec bincsh cat etchosts eof nextcloud nextcloudlocal nextcloud eof jexec bincsh newaliases v cp usrsharezoneinfoeuropewarsaw etclocaltime cat etcrcconf eof daemon yes syslogdflags sshdenableyes phpfpmenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast eof cat etccrondsendmailcleanclientmqueue eof clean sendmail root binrm r f varspoolclientmqueue eof exit service jail restart nextcloud jls jexec nextcloud bincsh sockstat package echo nameserver etcresolvconf ping c freebsdorg grep quarterly etcpkgfreebsdconf sed squarterlylatestg etcpkgfreebsdconf grep latest etcpkgfreebsdconf pkg update f portsnap fetch extract portsnap fetch update cd usrportswwwnextcloud make rundependslist grep php make rundependslist grep database grep e az default usrportsmkbsddefaultversionsmk column cat etcmakeconf eof wrkdirprefix portsdir obj defaultversions defaultversions optionsunset mysql optionsset pgsql eof make showconfig make config make showconfig cat vardbportswwwnextcloudoptions make c usrportswwwnextcloud rundependslist grep php make c usrportswwwnextcloud rundependslist grep sql exit jexec nextcloud binsh make c usrportswwwnextcloud rundependslist read echo pkg install basename done pkg install peclsmbclient pkg search peclsmbclient pkg install gettextruntime pkg install pkg install peclsmbclient pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install nginx pkg install memcached pkg install portmaster pkg install sudo pkg install pkg install pkg install pkg install portmaster wwwnextcloud mailcclient portmaster wwwnextcloud wwwnginx databasesmemcached securitysudo mailcclient pkg info grep e phpnginxmemcachedpostgresqlsudonextcloudportmaster postgresql database cat etcloginconf eof postgres setenvlccollatec tcdefault eof grep postgres etcloginconf capmkdb etcloginconf chown postgres postgres vardbpostgresdata cat etcrcconf usrlocaletcrcdpostgresql initdb usrlocaletcrcdpostgresql start sockstat psql h nextcloudlocal u postgres grep c vardbpostgresdatapghbaconf usrlocaletcrcdpostgresql restart psql h nextcloudlocal u postgres create user nextcloud password nextclouddbpassword create database nextcloud template encoding unicode alter database nextcloud owner nextcloud q cat vardbpostgresdatavacuumsh devnull usrlocalbinreindexdb devnull devnull usrlocalbinreindexdb devnull devnull eof chmod x vardbpostgresdatavacuumsh chown postgres postgres vardbpostgresdatavacuumsh su postgres c crontab e su postgres c crontab l nginx webserver mkdir p usrlocaletcnginxssl cd usrlocaletcnginxssl openssl req node day newkey keyout nginxkey nginxcrt nextcloudserverpassword pl lodzkie lodz vermaden enterprise ltd nextcloud departament nextcloudlocal vermaden nextcloudcom chmod usrlocaletcnginxsslnginxkey l l usrlocaletcnginxssl l l varlog grep nginx chown r www www varlognginx l l varlog grep nginx cat usrlocaletcnginxnginxconf php cat cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof cat cat cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof cat varlogphpfpmlog chown www www varlogphpfpmlog grep usrlocaletcphpfpmconf cat usrlocaletcphpfpmdwwwconf cat usrlocaletcphpini daemon cat etcrcconf usrlocaletcrcdmemcached start usrlocaletcrcdphpfpm start usrlocaletcrcdpostgresql status usrlocaletcrcdnginx start sockstat l l varrunphpfpmsock nextcloud mkdir p vardbnextclouddata chown r www www vardbnextcloud chown r www www usrlocalwwwnextcloud http nextcloudlocal admin nextcloudadminpassword vardbnextclouddata nextcloud nextclouddbpassword nextcloud nextcloudlocal finish setup diff u configphporg configphp cat usrlocalwwwnextcloudconfigconfigphp sudo u www php usrlocalwwwnextcloudocc config list system log cat etcnewsyslogconf eof vardbnextclouddatanextcloudlog www www jc varlogphpfpmlog www www jc varlognginxerrorlog www www jc varlognginxaccesslog www www jc eof newsyslog v tail cleanup optional rm rf varcachepkg rm rf usrportsobj rm rf usrportsdistfiles pkg autoremove update sysv ipc jail man jail allowsysvipc sysvmsg sysvsem sysvshm inherit postgres freebsd jail http etcjailconf diff u etcjailconfold etcjailconf cat etcjailconf update setup without socket diff u usrlocaletcphpfpmdwwwconfsocket usrlocaletcphpfpmdwwwconf diff u usrlocaletcnginxnginxconfsocket usrlocaletcnginxnginxconf update nextcloud update su www c php usrlocalwwwnextcloudocc config import usrlocalsharenextcloudfixappspathsjson update nextcloud freebsd bsd zfs user conf like,today would like share setup nextcloud running freebsd system make thing interesting would running inside freebsd jail describe nextcloud setup large enough several blog post official nextcloud documentation recommends following setup mysqlmariadb php newer apache modphp prefer postgresql database mysqlmariadb prefer fast lean nginx web server apache setup based component postgresql php nginx phpfpm memcached memcached subsystem least important easily changed something modern like redis example prefer use third party tool freebsd jail management bad something like many choice good freebsd jail management want provide generic example nextcloud jail specific management tool host let start preparing freebsd host needed setting need allow using raw socket jail future optional upgrade jail also allow using chflags jail host cat etcsysctlconf eof allow jail raw socket allow upgrade jail eof host sysctl securityjailallowrawsockets host sysctl securityjailchflagsallowed would also enable rctl limit convenient resource limitation host system host cat bootloaderconf eof racctrctl resource limit eof complete jail finished installation take le size mb remove needed part installation finished complete freebsd port tree current portsnap information take gb space mb path desc jailnextcloud complete nextcloud jail jailnextcloudusrports removed install jailnextcloudvardbportsnap removed install used laptop jail host jail configured use wireless interface address distinguish command type host system nextcloudlocal jail use two different prompt way obvious command execute command host system host command command nextcloudlocal jail root nextcloud command running jail process host jls jid ip address hostname path nextcloudlocal jailnextcloud host p axwww cpu r time command j nextcloud cpu r time command usrsbinsyslogd usrsbinsshd usrsbincron postgres checkpointer process postgres postgres writer process postgres postgres wal writer process postgres postgres autovacuum launcher process postgres postgres stats collector process postgres postgres bgworker logical replication launcher postgres usrlocalbinpostgres vardbpostgresdata nginx master process usrlocalsbinnginx nginx worker process nginx nginx worker process nginx nginx worker process nginx nginx worker process nginx usrlocalbinmemcached l p varrunmemcachedmemcachedpid phpfpm master process usrlocaletcphpfpmconf phpfpm phpfpm pool www phpfpm phpfpm pool www phpfpm phpfpm pool www phpfpm phpfpm pool www phpfpm jail first prepare jail nextcloud installation let create zfs datasets purpose use local zfs pool also create zfs dataset postgresql data record size host zfs create mountpointjail localjail host zfs create mountpointjailnextcloud localjailnextcloud host zfs create mountpointjailnextcloudvardbpostgresdata localjailnextcloudpgsql host zfs get r recordsize localjail name property value source localjail recordsize default localjailnextcloud recordsize default localjailnextcloudpgsql recordsize local let fetch freebsd base jailnextcloud path host cd jailnextcloud host fetch http tar unlink xpjf c jailnextcloud mb kbps host l jailnextcloud cshrc bin copyright etc libexec mnt proc root sys usr profile boot dev lib medium net rescue sbin tmp var base freebsd jail fetched jailnextcloud path let configure host jail one jail configured simplicity nextcloudlocal jail host cat etcjailconf eof nextcloud hosthostname nextcloudlocal interface path jailnextcloud execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs allowrawsockets allowsysvipc eof creatingmodifying etcjailconf file running jail host jls jid ip address hostname path let enable jail host system host cat etcrcconf eof jail jailenableyes eof start nextcloudlocal jail first time host service jail start nextcloud starting jail nextcloud host jls jid ip address hostname path nextcloudlocal jailnextcloud let configure nextcloudlocal name host jail host cat etchosts eof nextcloud nextcloudlocal nextcloud eof host jexec bincsh root nextcloud cat etchosts eof nextcloud nextcloudlocal nextcloud eof one remember localhost freebsd jail jail configure ip address listening purpose example important configure service host listen localhost work usual freebsd jail able connect even jail let make basic configuration nextcloud jail host jexec bincsh root nextcloud newaliases v warning local host name nextcloud qualified see cfreadme etcmailaliases alias longest byte byte total root nextcloud cp usrsharezoneinfoeuropewarsaw etclocaltime let create basic etcrcconf file jail leave service commented yet configured run want imitate debian start service default configs root nextcloud cat etcrcconf eof daemon yes syslogdflags sshdenableyes phpfpmenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast eof disable sendmail need make sure varspoolclientmqueue would fill time let configure simple cron job root nextcloud cat etccrondsendmailcleanclientmqueue eof clean sendmail root binrm r f varspoolclientmqueue eof basic configuration let restart jail root nextcloud exit host service jail restart nextcloud stopping jail nextcloud starting jail nextcloud host jls jid ip address hostname path nextcloudlocal jailnextcloud host jexec nextcloud bincsh restart sshd daemon listening connection root nextcloud sockstat user command pid fd proto local address foreign address root sshd package let configure network connectivity jail needed get package internet root nextcloud echo nameserver etcresolvconf root nextcloud ping c freebsdorg ping freebsdorg data byte byte m byte m byte m freebsdorg ping statistic packet transmitted packet received packet loss roundtrip minavgmaxstddev m want latest package let set pkg repository config file root nextcloud grep quarterly etcpkgfreebsdconf url pkghttp pkgfreebsdorg abi quarterly root nextcloud sed squarterlylatestg etcpkgfreebsdconf root nextcloud grep latest etcpkgfreebsdconf url pkghttp pkgfreebsdorg abi latest let setup pkg fetch latest repository metadata root nextcloud pkg update f package management tool yet installed system want fetch install yn bootstrapping pkg pkghttp please wait verifying signature trusted certificate done nextcloud installing nextcloud extracting updating freebsd repository catalogue pkg repository freebsd load error access repo file vardbpkgrepofreebsdsqlite failed file directory nextcloud fetching metatxz b nextcloud fetching packagesitetxz mib processing entry freebsd repository update completed package processed repository date date freebsd port tree root nextcloud portsnap fetch extract looking portsnapfreebsdorg mirror mirror found fetching public key done fetching snapshot tag done fetching snapshot metadata done fetching snapshot generated mon apr cest mb kbps extracting snapshot done verifying snapshot integrity building new index file done root nextcloud portsnap fetch update looking portsnapfreebsdorg mirror mirror found fetching snapshot tag done port tree nt changed since last snapshot update needed port tree already date default nextcloud package repository built mysql older php thus use package everything automated compilation unavoidable root nextcloud cd usrportswwwnextcloud root nextcloud usrportswwwnextcloud make rundependslist grep php root nextcloud usrportswwwnextcloud make rundependslist grep database let check freebsd port default package version root nextcloud grep e az default usrportsmkbsddefaultversionsmk column apachedefault bdbdefault firebirddefault fortrandefault gfortran fpcdefault gccdefault ghostscriptdefault agpl lazarusdefault linuxdefault linuxdefault luadefault mysqldefault pgsqldefault phpdefault pythondefault rubydefault sambadefault ssldefault base ssldefault opensslinstalled ssldefault base tcltkdefault varnishdefault postgresql php override etcmakeconf file following setting also force using pgsql option disable mysql option port root nextcloud cat etcmakeconf eof wrkdirprefix portsdir obj defaultversions defaultversions optionsunset mysql optionsset pgsql eof let display default nextcloud port configuration root nextcloud usrportswwwnextcloud make showconfig following configuration option available exifon image rotation support ldapon ldap protocol support smbon smb network protocol support sslon ssl protocol support database backend choose least one mysqlon mysql database support pgsqloff postgresql database support sqliteoff sqlite database support use make config modify setting postgresql support even enabled let configure nextcloud port need root nextcloud usrportswwwnextcloud make config let check current port configuration root nextcloud usrportswwwnextcloud make showconfig following configuration option available exifon image rotation support ldapon ldap protocol support smbon smb network protocol support sslon ssl protocol support database backend choose least one mysqloff mysql database support pgsqlon postgresql database support sqliteoff sqlite database support use make config modify setting good case wandered setting stored answer yes delete vardbportswwwnextcloud directory brought back default without postgresql mysql root nextcloud cat vardbportswwwnextcloudoptions file autogenerated make config option filecompleteoptionslistexif ldap smb ssl mysql pgsql sqlite optionsfilesetexif optionsfilesetldap optionsfilesetsmb optionsfilesetssl optionsfileunsetmysql optionsfilesetpgsql optionsfileunsetsqlite let check rundependslist configuration root nextcloud make c usrportswwwnextcloud rundependslist grep php root nextcloud make c usrportswwwnextcloud rundependslist grep sql better make thing little faster build everything freebsd port may add needed software package switch binsh shell purpose root nextcloud usrportswwwnextcloud exit host jexec nextcloud binsh root nextcloud make c usrportswwwnextcloud rundependslist read echo pkg install basename done pkg install gettextruntime pkg install pkg install peclsmbclient pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install pkg install list command install package let paste one one nextcloudlocal prompt package build sometimes get prefix version upstream port built peclsmbclient port good example root nextcloud pkg install peclsmbclient updating freebsd repository catalogue freebsd repository date repository date pkg package available install matching peclsmbclient found repository root nextcloud pkg search peclsmbclient smbclient wrapper extension smbclient wrapper extension smbclient wrapper extension smbclient wrapper extension complete list package need install root nextcloud pkg install gettextruntime root nextcloud pkg install root nextcloud pkg install peclsmbclient root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install nginx root nextcloud pkg install memcached root nextcloud pkg install portmaster root nextcloud pkg install sudo root nextcloud pkg install root nextcloud pkg install root nextcloud pkg install package like remove package build postgresql version like root nextcloud pkg install updating freebsd repository catalogue freebsd repository date repository date checking integrity done conflicting conflict usrlocalbinclusterdb conflict usrlocalbinclusterdb checking integrity done conflicting following package affected checked installed package removed new package installed number package removed number package installed process require mib space proceed action yn need build rest root nextcloud portmaster wwwnextcloud mailcclient following action performed installation develgmake installation develgettexttools installation installation installation printtexinfo installation installation develautoconfwrapper installation develautoconf installation installation installation wwwnextcloud installation installation installation mailcclient installation installation installation alternatively juggle package port may build everything freebsd port tree command root nextcloud portmaster wwwnextcloud wwwnginx databasesmemcached securitysudo mailcclient whichever method choose must end package installed list contain dependency root nextcloud pkg info grep e phpnginxmemcachedpostgresqlsudonextcloudportmaster c c client library memcached server highperformance distributed memory object cache system personal cloud run server robust small www server php scripting language shared extension php ctype shared extension php curl shared extension php dom shared extension php exif shared extension php fileinfo shared extension php filter shared extension php ftp shared extension php gd shared extension php gmp shared extension php hash shared extension php iconv shared extension php imap shared extension php intl shared extension php json shared extension php ldap shared extension php mbstring shared extension php opcache shared extension php openssl shared extension php pcntl shared extension php pdo shared extension php pdopgsql shared extension php php extension interfacing memcached via libmemcached library smbclient wrapper extension pgsql shared extension php posix shared extension php session shared extension php simplexml shared extension php wddx shared extension php xml shared extension php xmlreader shared extension php xmlwriter shared extension php xsl shared extension php zip shared extension php zlib shared extension php manage port without external database language postgresql database client postgresql advanced opensource database available anywhere allow others run command root postgresql database configure postgresql database first let start freebsd login class root nextcloud cat etcloginconf eof postgres setenvlccollatec tcdefault eof root nextcloud grep postgres etcloginconf postgres setenvlccollatec tcdefault root nextcloud capmkdb etcloginconf let make sure postgresql data directory belongs postgres user root nextcloud chown postgres postgres vardbpostgresdata let enable postgresql service etcrcconf file look like root nextcloud cat etcrcconf daemon yes syslogdflags sshdenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata phpfpmenableyes memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast may initialize start database root nextcloud usrlocaletcrcdpostgresql initdb file belonging database system owned user postgres user must also server process database cluster initialized locale collate c ctype message monetary numeric time default text search configuration set english data page checksum disabled fixing permission existing directory vardbpostgresdata ok creating subdirectory ok selecting default maxconnections selecting default sharedbuffers selecting dynamic shared memory implementation posix creating configuration file ok running bootstrap script ok performing postbootstrap initialization ok syncing data disk ok warning enabling trust authentication local connection change editing pghbaconf using option authlocal authhost next time run initdb success start database server using usrlocalbinpgctl vardbpostgresdata l logfile start let start root nextcloud usrlocaletcrcdpostgresql start cest log could create socket address protocol supported cest log listening address port cest log listening unix socket cest log ending log output stderr cest hint future log output go log destination syslog root nextcloud sockstat user command pid fd proto local address foreign address postgres postgres root sshd ok working listening connection next connect create user database nextcloud server root nextcloud psql h nextcloudlocal u postgres psql fatal pghbaconf entry host user postgres database postgres ssl remmeber rule localhost jail localhost jail add address vardbpostgresdatapghbaconf file shown root nextcloud grep c vardbpostgresdatapghbaconf local connection host trust host trust let restart postgresql database root nextcloud usrlocaletcrcdpostgresql restart cest log could create socket address protocol supported cest log listening address port cest log listening unix socket cest log ending log output stderr cest hint future log output go log destination syslog connect create needed user database nextcloud installation root nextcloud psql h nextcloudlocal u postgres psql type help help postgres create user nextcloud password nextclouddbpassword create role postgres create database nextcloud template encoding unicode create database postgres alter database nextcloud owner nextcloud alter database postgres q root nextcloud also create daily maintenance script postgresql database root nextcloud cat vardbpostgresdatavacuumsh devnull usrlocalbinreindexdb devnull devnull usrlocalbinreindexdb devnull devnull eof root nextcloud chmod x vardbpostgresdatavacuumsh root nextcloud chown postgres postgres vardbpostgresdatavacuumsh let add cron job postgres user root nextcloud su postgres c crontab e line character crontab installing new crontab root nextcloud su postgres c crontab l vardbpostgresdatavacuumsh nginx webserver configure nginx let start creating self signed certificate want see warning certificate signed may want use service letsencryptorg example root nextcloud mkdir p usrlocaletcnginxssl root nextcloud cd usrlocaletcnginxssl root nextcloud usrlocaletcnginxssl openssl req node day newkey keyout nginxkey nginxcrt enter pas phrase serverkey nextcloudserverpassword asked enter information incorporated certificate request enter called distinguished name dn quite field leave blank field default value enter field left blank country name letter code au pl state province name full name somestate lodzkie locality name eg city lodz organization name eg company internet widgits pty ltd vermaden enterprise ltd organizational unit name eg section nextcloud departament common name eg server fqdn name nextcloudlocal email address vermaden nextcloudcom root nextcloud chmod usrlocaletcnginxsslnginxkey root nextcloud l l usrlocaletcnginxssl total rwr r root wheel apr nginxcrt rw root wheel apr nginxkey let tak care right nginx log file root nextcloud l l varlog grep nginx drwxrxrx root wheel apr nginx root nextcloud chown r www www varlognginx root nextcloud l l varlog grep nginx drwxrxrx www www apr nginx last least nginx main configuration file root nextcloud cat usrlocaletcnginxnginxconf user www workerprocesses workerrlimitnofile errorlog varlognginxerrorlog event workerconnections http include mimetypes defaulttype applicationoctetstream logformat main remoteaddr remoteuser timelocal request accesslog varlognginxaccesslog main sendfile keepalivetimeout upstream phphandler server unix varrunphpfpmsock server enforce http listen servername nextcloudlocal return http servername requesturi server listen ssl servername nextcloudlocal sslcertificate usrlocaletcnginxsslnginxcrt sslcertificatekey usrlocaletcnginxsslnginxkey header security related addheader stricttransportsecurity includesubdomains preload header addheader xcontenttypeoptions nosniff addheader xxssprotection modeblock addheader xrobotstag none addheader xdownloadoptions noopen addheader xpermittedcrossdomainpolicies none path root installation root usrlocalwwwnextcloud location robotstxt allow lognotfound accesslog location wellknowncarddav return scheme hostremotephpdav location wellknowncaldav return scheme hostremotephpdav buffer timeouts upload size clientmaxbodysize clientbodybuffersize sendtimeout enable gzip remove etag header gzip gzipvary gzipcomplevel gzipminlength gzipproxied expired nocache nostore private nolastmodified noetag auth gziptypes applicationatomxml applicationjavascript applicationjson applicationldjson applicationmanifestjson applicationrssxml applicationvndgeojson applicationvndmsfontobject applicationxfontttf applicationxwebappmanifestjson applicationxhtmlxml applicationxml fontopentype imagebmp imagesvgxml imagexicon textcachemanifest textcss textplain textvcard textvndrimlocationxloc textvtt textxcomponent textxcrossdomainpolicy location rewrite indexphp uri location deny location autotestoccissueindiedbconsole deny location indexremotepubliccroncoreajaxupdatestatusocsv updaterocsprovider php fastcgisplitpathinfo php include fastcgiparams fastcgiparam scriptfilename documentroot fastcgiscriptname fastcgiparam pathinfo fastcgipathinfo fastcgiparam http fastcgiparam modheadersavailable true fastcgiparam frontcontrolleractive true fastcgipass phphandler fastcgiintercepterrors fastcgirequestbuffering fastcgikeepconn fastcgibuffers fastcgibuffersize fastcgibusybufferssize fastcgitempfilewritesize fastcgisendtimeout fastcgireadtimeout fastcgiconnecttimeout location updaterocsprovider tryfiles uri index indexphp adding cache control header j cs file make sure php block location cssjswoffsvggif tryfiles uri indexphp uri isargs args addheader cachecontrol public header security related intended duplicated one addheader stricttransportsecurity includesubdomains preload header addheader xcontenttypeoptions nosniff addheader xxssprotection modeblock addheader xrobotstag none addheader xdownloadoptions noopen addheader xpermittedcrossdomainpolicies none optional dont log access asset accesslog location pnghtmlttficojpgjpeg tryfiles uri indexphp uri isargs args optional dont log access asset accesslog point later would get following error browser problem nginx php phpfpm configuration bad gateway php configure php need first postgresql related setting root nextcloud cat extensionpgsqlso root nextcloud cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof root nextcloud cat extensionpgsqlso postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice root nextcloud cat extensionpdopgsqlso root nextcloud cat eof postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice eof root nextcloud cat extensionpdopgsqlso postgressql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice let make sure phpfpm log file exists right owner root nextcloud varlogphpfpmlog root nextcloud chown www www varlogphpfpmlog modification needed usrlocaletcphpfpmconf file root nextcloud grep usrlocaletcphpfpmconf global pid runphpfpmpid includeusrlocaletcphpfpmd conf let create www profile phpfpm daemon root nextcloud cat usrlocaletcphpfpmdwwwconf www user www group www listen varrunphpfpmsock listenbacklog listenowner www listengroup www pm static pmmaxchildren pmstartservers pmminspareservers pmmaxspareservers pmprocessidletimeout pmmaxrequests requestterminatetimeout rlimitfiles env hostname hostname env path usrlocalbin usrbin bin env tmp tmp env tmpdir tmp env temp tmp main php usrlocaletcphpini configuration file root nextcloud cat usrlocaletcphpini php engine shortopentag precision outputbuffering zliboutputcompression implicitflush unserializecallbackfunc serializeprecision disablefunctions disableclasses zendenablegc exposephp maxexecutiontime maxinputtime memorylimit errorreporting eall edeprecated estrict displayerrors displaystartuperrors logerrors logerrorsmaxlen ignorerepeatederrors ignorerepeatedsource reportmemleaks trackerrors htmlerrors errorlog varlogphplog variablesorder gpcs requestorder gp registerargcargv autoglobalsjit postmaxsize autoprependfile autoappendfile defaultmimetype texthtml defaultcharset docroot userdir enabledl fileuploads uploadmaxfilesize maxfileuploads allowurlfopen allowurlinclude defaultsockettimeout cli server cliservercolor date datetimezone europewarsaw filter iconv intl pcre pdo pdomysql pdomysqlcachesize pdomysqldefaultsocket phar mail function smtp localhost smtpport mailaddxheader sql sqlsafemode odbc odbcallowpersistent odbccheckpersistent odbcmaxpersistent odbcmaxlinks odbcdefaultlrl odbcdefaultbinmode interbase ibaseallowpersistent ibasemaxpersistent ibasemaxlinks ibasetimestampformat h ibasedateformat ibasetimeformat h mysqli mysqlimaxpersistent mysqliallowpersistent mysqlimaxlinks mysqlicachesize mysqlidefaultport mysqlidefaultsocket mysqlidefaulthost mysqlidefaultuser mysqlidefaultpw mysqlireconnect mysqlnd mysqlndcollectstatistics mysqlndcollectmemorystatistics postgresql pgsqlallowpersistent pgsqlautoresetpersistent pgsqlmaxpersistent pgsqlmaxlinks pgsqlignorenotice pgsqllognotice bcmath bcmathscale browscap session sessionsavehandler file sessionsavepath tmp sessionusestrictmode sessionusecookies sessionuseonlycookies sessionname phpsessid sessionautostart sessioncookielifetime sessioncookiepath sessioncookiedomain sessioncookiehttponly sessionserializehandler php sessiongcprobability sessiongcdivisor sessiongcmaxlifetime sessionreferercheck sessioncachelimiter nocache sessioncacheexpire sessionusetranssid sessionhashfunction sessionhashbitspercharacter urlrewritertags ahref areahref framesrc inputsrc formfakeentry assertion zendassertions com mbstring gd exif tidy tidycleanoutput soap soapwsdlcachedir tmp soapwsdlcachelimit sysvshm ldap ldapmaxlinks mcrypt dba opcache curl openssl daemon enable daemon start final etcrcconf file root nextcloud cat etcrcconf daemon yes syslogdflags sshdenableyes postgresqlenableyes postgresqlclasspostgres postgresqldatavardbpostgresdata phpfpmenableyes memcachedenableyes memcachedflags l nginxenableyes daemon sendmailenablenone sendmailsubmitenableno sendmailoutboundenableno sendmailmspqueueenableno cleartmpenableyes cleartmpxyes extranetfstypesnfs dumpdevno updatemotdno keyratefast let start service memcached root nextcloud usrlocaletcrcdmemcached start starting memcached php phpfpm daemon root nextcloud usrlocaletcrcdphpfpm start performing sanity check phpfpm configuration notice configuration file usrlocaletcphpfpmconf test successful starting phpfpm postgresql database sohuld running already root nextcloud usrlocaletcrcdpostgresql status pgctl server running pid usrlocalbinpostgres vardbpostgresdata nginx webserver root nextcloud usrlocaletcrcdnginx start performing sanity check nginx configuration nginx configuration file usrlocaletcnginxnginxconf syntax ok nginx configuration file usrlocaletcnginxnginxconf test successful starting nginx let see daemon listening port root nextcloud sockstat user command pid fd proto local address foreign address www nginx www nginx www nginx www nginx www nginx www nginx www nginx www nginx root nginx root nginx nobody memcached postgres postgres root sshd remember phpfpm daemon us varrunphpfpmsock socket root nextcloud l l varrunphpfpmsock srwrw www www apr varrunphpfpmsock nextcloud let prepare directory nextcloud data root nextcloud mkdir p vardbnextclouddata root nextcloud chown r www www vardbnextcloud also need make sure whole nextcloud installation directory owned www user root nextcloud chown r www www usrlocalwwwnextcloud able access nextcloud using browser let type http nextcloudlocal host browser choice viola alive last configuration bit etered directly browser admin user admin admin pas nextcloudadminpassword data folder vardbnextclouddata database user nextcloud database pas nextclouddbpassword database name nextcloud database host nextcloudlocal look browser click finish setup button see nextcloud welcome message shown may close message see file nextcloud setting page yelds lack cache daemon let configure memcached daemon nextcloud configuration file added line usrlocalwwwnextcloudconfigconfigphp file root nextcloud usrlocalwwwnextcloudconfig diff u configphporg configphp configphporg configphp dbuser nextcloud dbpassword installed true memcachelocal ocmemcachememcached memcachedistributed ocmemcachememcached memcachedservers array array nextcloudlocal complete nextcloud main configuration file usrlocalwwwnextcloudconfigconfigphp change root nextcloud cat usrlocalwwwnextcloudconfigconfigphp passwordsalt secret trusteddomains array nextcloudlocal datadirectory vardbnextclouddata overwritecliurl http nextcloudlocal dbtype pgsql version dbname nextcloud dbhost nextcloudlocal dbport dbtableprefix oc dbuser nextcloud dbpassword installed true memcachelocal ocmemcachememcached memcachedistributed ocmemcachememcached memcachedservers array array nextcloudlocal alternatively may want get config directly nextcloud application using occ command root nextcloud sudo u www php usrlocalwwwnextcloudocc config list system system instanceid removed sensitive value passwordsalt removed sensitive value secret removed sensitive value trusteddomains nextcloudlocal datadirectory removed sensitive value overwritecliurl http nextcloudlocal dbtype pgsql version dbname removed sensitive value dbhost removed sensitive value dbport dbtableprefix oc dbuser removed sensitive value dbpassword removed sensitive value installed true memcachelocal ocmemcachememcached memcachedistributed ocmemcachememcached memcachedservers nextcloudlocal log end filled varlog directory ton log need configure rotation line add etcnewsyslogconf file root nextcloud cat etcnewsyslogconf eof vardbnextclouddatanextcloudlog www www jc varlogphpfpmlog www www jc varlognginxerrorlog www www jc varlognginxaccesslog www www jc eof let verify rotation root nextcloud newsyslog v tail vardbnextclouddatanextcloudlog trim fri jul varlogphpfpmlog trim fri jul varlognginxerrorlog trim fri jul varlognginxaccesslog trim fri jul yep work like charm cleanup optional may remove needed part jail example downloaded package distfiles root nextcloud rm rf varcachepkg root nextcloud rm rf usrportsobj root nextcloud rm rf usrportsdistfiles root nextcloud pkg autoremove checking integrity done conflicting deinstallation requested following package installed package removed number package removed operation free mib proceed deinstalling package yn reached end good luck nextcloud setup update sysv ipc jail since freebsd freebsd allowsysvipc jail parameter etcjailconf deprecated favor sysvmsgsysvsemsysvshm parameter information available man jail manual page example host man jail allowsysvipc process within jail access system v ipc primitive deprecated favor per module parameter see parameter set equivalent setting sysvmsg sysvsem sysvshm inherit change problem sysv ipc call postgresql server user postgres need different uid jail running host jail postgres user uid everything work like charm described broadly blog post postgres freebsd jail http using newer approach change configuration etcjailconf file host diff u etcjailconfold etcjailconf etcjailconfold etcjailconf execclean mountdevfs allowrawsockets allowsysvipc sysvsem new sysvshm new sysvmsg new whole etcjailconf file modification host cat etcjailconf nextcloud hosthostname nextcloudlocal interface path jailnextcloud execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs allowrawsockets sysvsem new sysvshm new sysvmsg new update setup without socket run setup without socket may want modify php phpfpm daemon listen address instead using varrunphpfpmsock socket communication change usrlocaletcphpfpmdwwwconf phprpm profile nginx webserver main configuration usrlocaletcnginxnginxconf file root nextcloud diff u usrlocaletcphpfpmdwwwconfsocket usrlocaletcphpfpmdwwwconf usrlocaletcphpfpmdwwwconfsocket usrlocaletcphpfpmdwwwconf www user www group www listen varrunphpfpmsock listen listenallowedclients listenbacklog listenowner www listengroup www root nextcloud diff u usrlocaletcnginxnginxconfsocket usrlocaletcnginxnginxconf usrlocaletcnginxnginxconfsocket usrlocaletcnginxnginxconf keepalivetimeout upstream phphandler server unix varrunphpfpmsock server server update nextcloud update update latest nextcloud setup broken symptom login page keep redirecting fix described usrportsupdating file message fix affect user wwwnextcloud author brnrd freebsdorg update path apps bundled package changed apps appspkg must add entry appspaths array configconfigphp nextcloud installation patch default installation applied cd usrlocalwwwnextcloud su www c php occ config import usrlocalsharenextcloudfixappspathsjson fix installation eventual upgrade instruction need executed jail root nextcloud su www c php usrlocalwwwnextcloudocc config import usrlocalsharenextcloudfixappspathsjson hope help resolve issue update nextcloud freebsd article featured bsd zfs user conf episode thanks mentioning eof like like loading related
196,Lobsters,virtualization,Virtualization,Qubes OS 4.0 has been released!,https://www.qubes-os.org/news/2018/03/28/qubes-40/,qubes o released,major change version announcement qubes meltdown spectre release note downloads installation guide current release candidate user qubes announcement stable templatevms code documentation tested reported bug past future announcing extended support qubes system requirement qubes standard policy growing list join u get involved donation,nearly two year development countless hour testing pleased announce stable release qubes o major change version version includes several fundamental improvement security functionality qubes o release delivers feature promised announcement qubes course correction along way switch hvm pvh vms response meltdown spectre detail please see full release note qubes installation image available downloads page along complete installation guide current release candidate user qubes announcement explained testing reveal major problem would declare stable release without significant change scenario bug discovered testing process would fixed subsequent update fact occurred found fifth release candidate finally reached level stability met standard comfortable designating stable release accordingly current user upgrade inplace downloading latest update stable repository templatevms know stable release long time coming many sincerely appreciate patience thank sticking u especially grateful contributed code documentation release tested release candidate diligently reported bug stable release would possible without effort involvement make qubes truly opensource project energy skill good make project joy work lucky past future since first announcing extended support qubes determined user would better served version qubes updated templatevms newer kernel designated release qubes name suggests point release qubes contain major change release extended support period apply intend qubes viable alternative version wish use qubes hardware meet system requirement qubes standard policy support qubes release six month next major minor release special extension raise period one full year therefore stable release qubes set eol endoflife date qubes one year today expect available soon kernel testing completed looking forward work qubes begun sight set qubes growing list planned enhancement nearly every aspect qubes o whether new qubes year welcome join u get involved personally chosen devote time skill making qubes freely available world believe opensource essential qubes trustworthy secure qubes valuable ask please consider making donation project support continue make reasonable security reality many year come
197,Lobsters,virtualization,Virtualization,Terminal Perf Graphs in one Command,https://zwischenzugs.com/2018/03/27/terminal-perf-graphs-in-one-command/,terminal perf graph one command,sysstat graph script container image click enlarge running repo suggestion problem like post might like learn git hard way learn bash hard way docker practice like published,sysstat graph sysstat package set server likely already know get historical cpu performance information sar like sar head linux cage cpu cpu user nice system iowait steal idle also probably know get history various metric cpu eg disk io run queue size info great sometimes want quick view going faff around platform try get information graphed sophisticated way time skill inclination mostly want quick view least fuss used script bundled container image produce ascii graph one command look like click enlarge first hard parse quickly get used great quickly seeing thing went south else went time running run host docker run e sarreportday sarreportday date e line line stty size awk print e column column stty size awk print nf e term term xterm v varlogsysstat varlogsysstat ro imiellsarreport e argument set day report default today day pas terminal setting v flag mount varlogsystat folder container mounted readonly reduce riskfear docker container messing host filesystem change day set eg terminal running command need docker sysstat course installed running host work box run command sarreport repo folder suggestion problem code work progress please suggest changesraise bug etc github like post might like learn git hard way learn bash hard way docker practice get docker practice code like like loading related published march
198,Lobsters,virtualization,Virtualization,Using a Hypervisor to Reconcile GPL & Proprietary Code,http://linuxdevices.io/using-a-hypervisor-to-reconcile-gpl-and-proprietary-embedded-code/,using hypervisor reconcile gpl proprietary code,read,one major problem user mac mac apple company product laptop popularly known mac useful feature mac split screen feature help user work different application time splitting read morethe best way split screen mac
199,Lobsters,virtualization,Virtualization,Lock-in-Pop: Securing Privileged Operating System Kernels by Keeping on the Beaten Path,https://www.usenix.org/system/files/conference/atc17/atc17-li_yiwen.pdf,lockinpop securing privileged operating system kernel keeping beaten path,,obj endobj obj stream itext group nv agplversion modified using itext group nv agplversion applicationpdf uuid endstream endobj obj endobj obj endobj obj endobj obj endobj obj procset pdftext typepage endobj obj procset pdftext typepage endobj obj procset pdftext typepage endobj obj typepage endobj obj endobj obj endobj obj endobj obj endobj obj stream e sq ju u dasjn l b x c j l zm zm p띆é r vl к al uڴ oz z v㒾 taޱk e e z zi p zńg e g q u e kr ǫznߊ w c g e r x r k kp iz
200,Lobsters,virtualization,Virtualization,OpenBSD vmm/vmd Update,https://www.openbsd.org/papers/asiabsdcon2018-vmm-slides.pdf,openbsd vmmvmd update,,äüöß obj stream ڪ pt v n endstream endobj obj endobj obj stream jfif h h c c x rbrdi ke h h h idi z ea p r l tw q cb l դ q v ԑ p p h p n tz l f 𭿓u kk e ңf
202,Lobsters,virtualization,Virtualization,Review of LibVNCServer/vncterm proxmox/vncterm proxmox/spiceterm xenserver/vncterm qemu/ui/console.c,http://www.openwall.com/lists/oss-security/2018/02/22/4,review libvncservervncterm proxmoxvncterm proxmoxspiceterm xenservervncterm qemuuiconsolec,prev next threadnext day month year list http http powered blists mailing list open source software security wiki mailing list mailing list read mailing list wikipedia guideline proper formatting message,prev next threadnext day month year list date thu feb solar designer solar nwallcom osssecurity tsopenwallcom cc dietmar maurer dietmar xmoxcom subject review libvncservervncterm proxmoxvncterm proxmoxspiceterm xenservervncterm qemuuiconsolec hi well proper review rather took quick look today turn least sub project named vncterm apparently nt even fork vncterm used part libvncserver maintained nearby repo another vncterm xenserver derived qemu uiconsolec yet another one proxmox also spiceterm proxmox duplicate code vncterm vice versa already pointed one issue libvncserver vncterm day ago http also opened github issue suggesting document code unsafe future extension http code appears dodge issue presently limited functionality limited alternative rest message proxmoxvncterm proxmoxspiceterm look worst one issue vnctermputchar case esgetpars appears willing increase vt esccount indefinitely signed int variable despite ub c may eventually eg two gigabyte semicolon wraparound negative pas one many vt esccount maxescparams check present throughout code resulting outofbounds write orand read relative vt escbuf array case esgetpars ch ch vt eschaspar vt esccount maxescparams vt escbuf vt esccount vt escbuf vt esccount ch break else ch vt esccount break else vt eschaspar vt esccount vt ttystate esgotpars notice vt esccount maxescparams check prevent two instance vt esccount reached relevant excerpt vnctermh define maxescparams int escbuf maxescparams int esccount like track unconfirmed issue skimmed code nt try trigger issue please use also seen lack sanity limit value vt escbuf element get math also overflow formally speaking triggering ub consequence become negative cursor movement command assume value nonnegative overflow math eg case move cursor vt escbuf vt escbuf vt cy vt escbuf vt cy vt cy break case b case e move cursor vt escbuf vt escbuf vt cy vt escbuf vt cy vt height vt cy vt height break case c case move cursor right vt escbuf vt escbuf vt cx vt escbuf vt cx vt width vt cx vt width break case move cursor left vt escbuf vt escbuf vt cx vt escbuf vt cx vt cx break notice perform sanity check expected direction cursor movement opposite direction occur negative value vt escbuf value large enough cause integer wraparound right unconfirmed issue might might problematic command like however look ok eg case g case move cursor column vnctermgotoxy vt vt escbuf vt cy break case move cursor row vnctermgotoxy vt vt cx vt escbuf break case f case h move cursor row column vnctermgotoxy vt vt escbuf vt escbuf break vnctermgotoxy performs necessary sanity check also many place difficult review first looked like overflow vt escbuf multiple invocation case espalette ch ch ch ch f ch ch f vt escbuf vt esccount ch ch ch vt esccount fixme work please test rfbcolourmap cmap vt screen colourmap int colortable vt escbuf j cmap databytes vt escbuf j cmap databytes vt escbuf j cmap databytes vt escbuf j cmap databytes vt escbuf j cmap databytes vt escbuf j cmap databytes vt escbuf j setpalette vc vt ttystate esnormal else vt ttystate esnormal break however upon closer look vt ttystate esnormal prevents code reached without vt esccount reset place setting vt ttystate espalette case esnonstd operating system control vt ttystate esnormal switch ch case p palette escape sequence maxescparams vt escbuf vt esccount vt ttystate espalette break end look ok would preferred explicit range check resetting vt esccount right espalette code perhaps issue noticed numbered issue also present proxmoxspicetermspiceterm ch ove id apply xenservervncterm look best apparently hardened time relative qemuderived original example static int handleparams textconsole int ch int dprintf putchar csi cn ch ch ch ch ch nbescparams maxescparams escparams nbescparams escparams nbescparams escparams nbescparams ch hasescparam return else hasescparam nbescparams maxescparams nbescparams hasescparam ch hasqmark return ch return notice nbescparams never increased tobeyond maxescparams escparams value limited cursor movement command use setcursor invokes clipxy turn performs needed range check qemu uiconsolec look okish nearly hardened case ttystatecsi handle escape sequence parameter ch ch nbescparams maxescparams int param escparams nbescparams int digit ch param param intmax digit param digit intmax else nbescparams maxescparams nbescparams ch ch break nbescparams also never increased tobeyond maxescparams integer overflow escparams value right prevented sanitylimited allows integer overflow normally benign albeit formally ub eg case b move cursor escparams escparams setcursor x escparams break setcursor range check prevent outofbounds value staying x alexander powered blists mailing list please check open source software security wiki counterpart mailing list confused mailing list use read mailing list wikipedia check guideline proper formatting message
203,Lobsters,virtualization,Virtualization,Serverless Databases: The Future of Event-Driven Architecture,https://www.simform.com/serverless-databases/,serverless database future eventdriven architecture,,use stage serverless database knight shining armour new application application whose usage might minute course day week instance got lowvolume blog site want pay time user accessing site work since pay database resource consume persecond basis infrequent used application unsure user base going scalefor instance built app idea popular become also want take chance work create endpoint let serverless database autoscale per requirement application variable workload application likely see around say minute peak several hour time day several time per yearfor instance application like hr budgeting operational reporting etc highly unpredictable peak timing hence reserving instance impossible however serverless database provide either peak average capacity test database test database going used working hour organisation well pay use serverless best fit shuts automatically usewhere use telecommunication iot let u assume scenario connected car use event trigger function related car alert let take example checking engine light connected cara function created invokes soon datachange sensor data collection moreover meet threshold limit another function triggered sends notification warranty departmentanother function created sends maintenance mailer soon threshold condition sensor data collection met since event need occur realtime serverless database used feasible solution finance let u take case financial application application use event trigger function related bank account particular user function set whenever account balance certain limitwith api call access data stored serverless database condition invoke function set weekly monthly would considered low balance since predict occurrence event serverless database best marketing retail let u take case retail business whenever user add particular item cart set function trigger business pipeline component like updating inventory total send customer information certain product marketing department sends promotional mailerin case since function decoupled app database need keep spinning time ecommerce let u take case ecommerce apps party payment inevitable serverless database streamline user experience letting call payment apis securely without setting serverswhen user reach payment collect payment information pas database process payment making request thirdparty payment processing api http write order serverless database return confirmation message user finished securely without managing server
204,Lobsters,virtualization,Virtualization,Dockerizing Django for Development,https://fernandofreitasalves.com/dockerizing-django-for-development/,dockerizing django development,open issue getting thing done install docker image docker hub environment variable email protected run command webapps copy add expose dockercompose compose image postgres volume vagrant link db web db dependson ready use command good practice agree vagrant ssh running docker github edit run exec bruno f reference medium curtir isso,post show containerize existing project using docker picked random project github open issue saying dockerize contribute use example world want dockerize existing django web application plenty reason one fun decided use docker one application getting hard install lot system requirement multiple database celery rabbitmq every time new developer joined team work new computer system installation took long time difficult installation lead time loss time loss lead laziness laziness lead bad habit go instance one decide use sqlite instead postgres see truncate problem table hit test server know docker picture huge virtualenv instead containing python package container isolating everything o app database worker etc getting thing done ok talk cheap show code dude first install docker using ubuntu mac o without problem window home working tell docker run application container create dockerfile env pythonunbuffered run mkdir webapps workdir webapps installing o dependency run aptget update aptget upgrade aptget install run pip install u pip setuptools copy requirementstxt webapps copy requirementsopttxt webapps run pip install r webappsrequirementstxt run pip install r webappsrequirementsopttxt add webapps django service expose let go line line docker image using image docker hub eq one preformated container help build top case python ubuntu container already installed environment variable create sort environment variable using env env pythonunbuffered create environment variable container instance use storing django secret key could put env djangosecretkey uyc email protected f jxkk k code use like import o secretkey osenviron djangosecretkey run command docker run command kinda obvious running command inside container quoting inside docker creates something subcontainers run command case rebuilding container run mkdir webapps workdir webapps installing o dependency run aptget update aptget upgrade aptget install run pip install u pip setuptools copy requirementstxt webapps copy requirementsopttxt webapps run pip install r webappsrequirementstxt run pip install r webappsrequirementsopttxt add webapps case creating directory hold file webapps workdir also kind selfevident telling docker run command indicated directory including one o dependency using requirementstxt including o requirement project believe large project lot lot o requirement copy add copy add similar copy file computer host container guest o example coping python requirement pip install expose expose instruction forwarding port guest host django service expose ok add container make work together need postgresql inside container worry go dockercompose compose tool running multiple docker container yml file need create dockercomposeyml project folder version service postgres db image postgres environment postgresuserpostgres postgrespasswordpostgres postgresdbpostgres web build command runwebsh volume webapps port link db dependson db case using image postgres docker hub let change settingspy use postgres database database default engine name postgres user postgres password postgres host db port almost done let talk little dockercompose file volume remember vagrant upon time vagrant form run project inside virtual machine easily configuring forwarding port provisioning requirement sharing volume machine host could share volume virtual machine guest docker exactly writing file shared volume file written container well volume webapps case current directory shared webapps container link link db refer another container belongs compose using name since created db container postgres link web container see settingspy file used db host dependson order application work database ready use web container otherwise raise exception dependson db command command default command container run right example created runwebsh run migration collect static file start development server usrbinenv bash cd djangoboards python managepy migrate python managepy collectstatic noinput python managepy runserver one argue run migrate point automatically every time container good practice agree run directly web machine access container like good ol vagrant ssh dockercompose exec web bash like run without accessing container change last argument previous command dockercompose exec web python managepy migrate command dockercompose exec web python managepy test dockercompose exec web python managepy shell running docker dockerfile dockercomposeyml runwebsh set place run together dockercompose see project github edit first using run instead exec bruno f convinced exec better executing command inside container already running instead creating new one reference also published medium curtir isso curtir carregando relacionado
205,Lobsters,virtualization,Virtualization,Booting ARM64 builds of Windows 10 in QEMU,https://withinrafael.com/2018/02/11/boot-arm64-builds-of-windows-10-in-qemu/,booting build window qemu,window virtualization booting build window qemu quick emulator qemu qemu window adguard whizzbang download page patched handcrafted uefi firmware recompiledsigned storage driver read qemu documentation additional percore performance gain neverreleased,february window virtualization booting build window qemu may know venerable quick emulator qemu support emulation architecture fiddling weekend able boot install build window feedback welcome warning slow dirt intel core warning yet compiled virtio driver network ancillary device mean machine nt support networking download install qemu window download window esds adguard whizzbang download page glue together using uuptoiso patched create usable iso download handcrafted uefi firmware recompiledsigned storage driver create systemvhdx around larger fixed size expanding initialized using gpt partitioning scheme generally glue together folder somewhere create windowscmd following content run script setup need provide virtio driver browse mounted disk complete setup usual take long time curious break qemu argument order appearance encourage read qemu documentation additional option tip add accel tcg threadmulti additional percore performance gain thanks neverreleased window guest may panic device detection click skip given option slowly get window guest may intermittently panic kernel security check failure first boot window guest compatibility telemetry runner process spin eat cpu core kill process performance greatly increase
207,Lobsters,virtualization,Virtualization,vLibOS: Babysitting OS Evolution with a Virtualized Library OS,https://arxiv.org/pdf/1801.07880.pdf,vlibos babysitting o evolution virtualized library o,,obj stream j qŧ ԧ mݫ q曯
209,Lobsters,virtualization,Virtualization,Exploring the Ecosystem of Serverless Technologies,https://www.simform.com/ecosystem-serverless-technologies/,exploring ecosystem serverless technology,apex aws chalice aws sam aws sam claudiajs dawson deep effe jrestless lambder lambda forest lambdify lambdoku lambdarestify scar sparta squeezer zappa fission serverless framework cloud infrastructure manager middy modofun shep turtle vandium galactic fog,apex let develop deploy manage aws lambda function without much hassle framework let work language typically supported aws lambda golang use nodejs shim injected build aws chalice python serverless microframework aws help framework easily develop deploy application use amazon api gateway aws lambda also provides command line tool automatic iam policy generation aws sam framework aim set standard application model serverless application started github project current version aws sam repository contains previous model idea future version well claudiajs make extremely easy deploy nodejs project aws lambda api gateway get started lambda service easily automates errorprone configuration deployment task dawson serverless framework aws cloudformation cloudfront api gateway lambda nodejs used build deploy backend code single page apps api pure apis serverrendered page deep fullstack javascript framework building cloudnative application presently aws supported platform use framework effe extremely building block developing serverless architecture operates level single lambda easiest fastest way use effe using effetool jrestless framework let build serverless application using jaxrs rather run jaxrs application faa environment like aws lambda aim framework avoid cloudvendor lockin allow developer run test code locally lambder help write small task executed single function python schedule aws lambda however scheduled lambda steep learning curve learn iam role cloudwatch event deploy update lambda function code lambda forest microframework facilitates set tool make development rest api using aws lambda api gateway easier order use framework aws api gateway need configured using proxy integration lambdify module provides convenient function transform sympy expression lambda function used calculate numerical value efficiently fast lambdoku simple abstraction layer aws lambda api effectively invoking awssdk give herokulike experience though prerequisite node npm support required lambdarestify writing aws lambda function develop rest apis using aws api gateway package help responserequestroutingmiddlewaresversioned apis type feature generally found package like restify express scar framework easily execute container docker image aws lambda provides benefit aws lambda choice executing environment provided docker image docker hub easiest way run generic application aws lambda sparta transforms go binary registered lambda function set independently addressable aws lambda function moreover also provides service defining iam role function execute aws squeezer offer support get progressive blazing fast development cycle building serverless autoscalable apis web apps distinguished feature payasyougo model intuitive deployment smart testing zappa think zappa serverless web hosting python apps make easy build deploy eventdriven python application aws lambda api gateway deploy application single command box fission framework serverless application kubernetes work anywhere want framework need build container manage docker registry opensource apache license serverless framework serverless framework single toolkit need deploy serverless application anywhere want star github distinguished feature multilanguage support communitymade plugins unified dev experience etc help deploying scalable serverless apps apis static website second platformagnostic supporting aws lambda aws api gateway first target kind selfhosted heroku style user experience minimal price unique feature cloud infrastructure manager single command line utility bootstrap cloudformation crud operation moreover make easy execute repeatable errorfree middy nodejs middleware engine aws lambda middleware pattern allows developer isolate common technical concern step decorate main business logic modofun stand modular function fast dependency function router serverless application lightweight nodejs package help building nanomicroservices serverless platform shep framework building javascript application using aws api gateway aws lambda built automate deployment task give ability deploy entire api suite lambda function one cli command turtle turtle toolkit building orchestrating eventdriven serverless application apps may run anywhere either locally via execution driver cloud vandium open source framework building securing simplifying aws lambda event handler allows write clean elegant code serverless help simple systematic deployment galactic fog platform provides common control plane corporation rapidly adapt build deploy cross cloud enterprisescale faa caas cloudnative architecture providing ubiquitous audit security governance capability private public cloud
210,Lobsters,virtualization,Virtualization,"Running BBS Door Games on Windows 10 with GameSrv, DOSBox, plus telnet fun with WSL",https://www.hanselman.com/blog/RunningBBSDoorGamesOnWindows10WithGameSrvDOSBoxPlusTelnetFunWithWSL.aspx,running bb door game window gamesrv dosbox plus telnet fun wsl,enjoy seeing done wsl window subsystem linux dosbox lightning talk week ndc london git autocrlf teletype model altair bb door game window telnet cavebbshomeipnet telnet towelblinkenlightsnl rick parrish bb door game server gamesrv ftelnet browser based app syncterm syncterm rick gamesrv full dosbox work around extended control sequence etherterm qodem netrunner note http githubcomrickparrishgamesrv donate rick well sponsor latest jetbrains rider hosting,continue enjoy seeing done wsl window subsystem linux even fun combining cmdexe window console ubuntu window wsl dosbox emulator let run old program original do longer run natively window kind cool stuff today lightning talk week ndc london started text file included crlf git autocrlf talked typewriter carriage really teletype model altair ascii chart ansi art finally moved bb bb door game extensive post later going turn full conference talk demo ran bb door game window awesome history lovely try setting going describe post try telneting bb like cavebbs telnet cavebbshomeipnet might also want telnet towelblinkenlightsnl asciibased star war originally would call like literally dialup one one bb ubiquitous internet added telnet nice option persists today door game asciiansi game bb would shell passing connection game extended bb picked phone kept connection tradewars iswas wellknown door game play month tradewars elite dangerous bb set question could play dosbased door game today yes gamesrv used bring old do based bb server new millennium act frontend accept telnet connection passing do bb software rick parrish bb door game server window linux written open source c called gamesrv may know rick ftelnet browser based app ftelnet let connect bulletin board system comfort browser locallyrun crossplatform option connecting bb syncterm go get syncterm rick gamesrv full well dosbox able telnet bb ubuntu bash windowswsl built telnet may run issue local echo want ctrl type mode char well missing extended ascii character bb loved draw menu wsl ansi support good missing character cause hiccup syncterm totally custom whole host bitmapped font lot custom work around extended control sequence also try etherterm qodem netrunner cool bbsfriendly terminal option note one major challenge conhost console host thing paint console window host paint text handle keyboard input bashcmdpowershell lot great console font font nt often include obscure extended ascii do character bb used draw menu order find render glyph console use font fallback follow tree font looking best glyph understand could wrong current conhost lovely nt yet support think order complete effective solution telnetsshetc run gamesrvconsole listen localhost default could setup vm azure run make bb door game available public like either telnet localhost run syncterm localhost access bb altenter put sync term full screen awesome sign bb new account try door game menu selecting door game cause gamesrc launch dosbox run door brokering output back telnet client heartened see year old bb door game come live window going see year old get kick adventure game finally slightly related try curl wttrinportland large wsl linux console lovely love stuff like perhaps easily impressed miss ascii art head http githubcomrickparrishgamesrv star github repository like gamesrv appreciate work involved donate rick well sponsor get latest jetbrains rider debugging thirdparty net code smart step debugger improvement c interactive new project wizard formatting code column hosting
211,Lobsters,virtualization,Virtualization,Qubes Air: Generalizing the Qubes Architecture,https://www.qubes-os.org/news/2018/01/22/qubes-air/,qubes air generalizing qubes architecture,original announcement new approach hardware requirement qubes qubes core stack admin api deployment cost aka find qubescompatible laptop hypervisor single point failure security bug many meltdown spectre attack row hammer attack example qubes cloud careful decomposition golem qubes core stack admin api example hybrid mode example qubes airgapped device usb armory split gpg backend hood qubes zone qubes core stack qubes zone zone storage pool hood qubes interface vchan endpoint something else qrexec networking template security benefit gui virtualization consideration beginning gui virtualization salt stack integration qubes admin api template gui protocol digression cloudification apps webgl summary,qubes o project around nearly year since original announcement back april actual origin date traced back november initial email introducing project sent within itl internally year qubes achieved reasonable success according estimate nearly regular user could even considered great success given new operating system rather application installed user favorite o introduced radically new approach managing one digital life ie explicit partitioning model security domain last least specific hardware requirement result using xen hypervisor linuxbased virtual machine vms networking usb qubes term qube refers compartment necessarily vm inside qubes o system explain detail past several year working hard bring qubes feature stateoftheart technology seen previous qubes version notably next generation qubes core stack unique admin api believe new platform qubes represents major rewrite previous qubes codebase pave way solving many obstacle mentioned new flexible architecture qubes also open new possibility recently thinking qubes o evolve long term article discus vision call qubes air noted describe article implemented yet take look longterm vision might helpful understand would like qubes architecture evolve let u quickly recap important current weakness qubes o including qubes deployment cost aka find qubescompatible laptop probably biggest current problem qubes o problem prevents wider adoption difficulty finding compatible laptop install whole process needing install new operating system rather adding new application scare many people away hard surprised problem deployment limited qubes o way case qubes o problem significantly pronounced due aggressive use virtualization technology isolate apps also device well incompatibility linux driver modern hardware driver issue inherent architecture qubes o affected u nonetheless since use linuxbased vms handle device hypervisor single point failure since beginning relied virtualization technology isolate individual qubes one another however led problem overdependence hypervisor recent year top notch researcher begun scrutinizing xen number security bug discovered many affect security qubes o still many potential xen bug present one though arguably serious security problem problem arise underlying architecture platform various intervm side covertchannels made possible thanks aggressively optimized multicore cpu architecture spectacularly demonstrated recently published meltdown spectre attack fundamental problem area underlying hardware also discovered row hammer attack lead u conclusion least application would like able achieve better isolation currently available hypervisors commodity hardware provide one possible solution problem actually move qubes cloud reader allergic notion private computation running untrusted cloud give reading yet rest assured also discus solution involving cloud beauty qubes air believe lie fact solution largely isomorphic architecture code point view example qubes cloud let start one critical need many customer expressed qubes cloud emphasized year essence qubes rest xen hypervisor even simple notion isolation rather careful decomposition various workflow device apps across securely compartmentalized container right mostly desktop workflow compartment happen implemented xen vms neither aspect essential nature qubes consequently easily imagine qubes running top vms hosted cloud amazon microsoft azure google compute engine even decentralized computing network golem illustrated simplified way diagram clear setup automatically eliminates deployment problem discussed user longer expected perform installation step instead access qubesasaservice web browser mobile app approach may trade security convenience endpoint device used access qubesasaservice insufficiently protected privacy convenience cloud operator trusted many use case however ability access qubes device location make tradeoff well worth said imagine qubes running top vms cloud exactly mean first foremost want qubes core stack connected cloud management api whenever user executes say qvmcreate generally issue admin api call case adminvmcreate new vm get created properly connected qubes infrastructure mean qubes apps eg split gpg pdf image converter many built around qrexec work tm run inside qubesasaservice setup admin gui domain would go qubesasaservice scenario important question answer much le obvious return first let look couple example demonstrate qubes air could implemented example hybrid mode user might decide run subset qubes perhaps personal one local laptop using cloud le privacysensitive vms addition privacy another bonus running vms locally would much lower gui latency discus ability run vms locally cloud refer hybrid mode beauty hybrid mode user even aware unless specifically interested whether particular vm running locally cloud admin api qrexec service even gui automatically handle case example hybrid mode configuration another benefit hybrid mode used host vms across several different cloud provider one allows u solve problem overdependence single isolation technology eg one specific hypervisor fatal security bug discovered affect one cloud service hosting group vms vulnerability automatically affect security group vms since group may hosted different cloud service cloud crucially different group vms may run different underlying containerization technology different hardware allowing u diversify risk exposure single class attack example qubes airgapped device approach even allows u host qube group physically distinct computer raspberry pi usb armory despite fact physically separate device admin api call qrexec service even gui virtualization work seamlessly across qubes user may particularly appealing host one split gpg backend password manager physically separate qube course also possible run normal guibased apps office suite one want dedicate physically separate qube work sensitive project ability host qubes distinct physical device radically different kind open numerous possibility working around security problem hypervisors processor face today hood qubes zone thinking change current qubes architecture especially qubes core stack would necessary make scenario outlined easy elegant implement one important new concept make possible support scenario unified architecture named qubes zone zone concept combine several thing together underlying isolation technology used implement qubes may may vms example could raspberry pi usb armory device amazon vms docker container interqube communication technology case qubes implemented xenbased vms existing qubes o release xenspecific shared memory mechanism called grant table used implement communication qubes case raspberry pi ethernet technology would likely used case qubes running cloud form cloudprovided networking would provide interqube communication technically speaking qubes vchan would implemented qrexec layer remain across possible platform local copy admin qube previously referred adminvm used mainly orchestrate vms make policing decision qubes within zone admin qube either master slave mode one admin qube running master across zone one qubes system optionally local copy gui qube previously referred gui domain guivm admin qube gui qube run either master slave mode user expected connect eg rdp protocol log gui qube run master mode one job combining gui element exposed via gui qubes must run slave mode technology implement storage qubes running within zone case qubes o running xen local disk used store vm image specifically qubes use storage pool default case zone composed cluster raspberry pi similar device storage could bunch microsd card plugged one raspberry pi kind network storage far nothing radically new compared already qubes o especially since nearly completed effort abstract qubes architecture away xenspecific detail effort codenamed qubes odyssey radically different want allow one zone exist single qubes system order support multiple zone provide transparent proxying qrexec service across zone qube need aware another qube request service resides different zone main reason introduce multiple local admin qubes one zone slave admin qubes also bridge allow master admin qube manage whole system eg request creation new qubes connect set storage qubes set networking qubes hood qubes interface within one zone multiple qubes let stress term qube generic imply specific technology could vm virtualization system could kind container physically separate computing device raspberry pi arduino board similar device qube implemented many different way certain feature qube implement vchan endpoint actual technology top implemented whether shared memory within virtualization containerization system tcpip something else specific kind zone occupies qube implement qrexec endpoint though straightforward vchan endpoint already implemented ensures qrexec service basis integration apps service created qubes work tm optionally qubes gui endpoint also implemented see discussion order compatible qubes networking qube expect one uplink network interface exposed management technology specific particular zone optionally multiple downlink network interface work proxy qube eg vpn firewalling qube finally qube expect two kind volume exposed zonespecific management stack one readonly intended used root filesystem qube management stack might also expose auxiliary volume implementing copyonwrite illusion vm like volatileimg currently expose qubes one readwritable specific qube intended used home directorylike storage naturally allow implementation qubes template mechanism believe brings lot convenience also security benefit gui virtualization consideration since beginning qubes envisioned system desktop computing opposed server implied gui virtualization part core qubes infrastructure however securityoptimized management infrastructure recently added qubes o ie salt stack integration significantly shrink attack surface system tcb compared traditional management solution qubes admin api allows finegrained decomposition management role deeply integrated feature template think qubes air may also useful nondesktop application embedded appliance space possibly even serverservices side case make perfect sense qubes implement gui protocol endpoint however still think primary area qubes excels securing desktop workflow need gui virtualizationmultiplexing qubes need implement gui protocol endpoint discus tradeoff involved qubes gui protocol optimized security mean protocol designed extremely simple allowing simple processing incoming packet thus significantly limiting attack surface gui daemon usually considered trusted price pay security lack various optimization onthefly compression others protocol vnc rdp naturally offer far able get away tradeoff current qubes release gui protocol run xen shared memory dram fast ie low latency superhigh bandwidth implementation xen smartly make use page sharing rather memory copying achieves near native speed course limitation expose gpu functionality vms might limit experience graphical application anyway however qubes run remote computer eg cloud physically separate computer eg cluster raspberry pi face potential problem graphic performance solution see introduce local copy gui qube zone make assumption significantly faster communication channel available qubes within zone zone example intervm communication within one data center significantly faster user laptop cloud qubes gui protocol used qubes local gui qube within single zone efficient complex protocol used aggregate gui master gui qube slave gui qubes thanks combined setup still get benefit reasonably secure gui untrusted qubes still use qubes secure gui protocol communicate local gui qube however also benefit greater efficiency remote accessoptimized protocol rdp vnc get gui onto user device network make assumption slave gui qubes significantly trustworthy nonprivileged qubes zone case also worried attacker compromised slave gui qube exploit potential bug vnc rdp protocol order attack master gui qube could still resort finegrained qubes admin api limit potential damage attacker might inflict digression cloudification apps hard notice model desktop application changed past decade many standalone application previously ran desktop computer run cloud frontends executed browser running client system qubes compartmentalization model importantly qubes desktop o deal change discussed possible move qubes vms user local machine cloud physically separate computer without user notice think great milestone finally get open many new application well remove many obstacle today prevent easy deployment qubes o need find maintain dedicated hardware however important ask relevant model coming year even new approach still talking classic standalone desktop application running qubes rest world seems moving toward appasaservice model everything hosted cloud eg google doc microsoft office relevant whole qubes architecture even cloudbased version appasaservice model like argue qubes architecture still make perfect sense new model first probably easy accept always application user individual corporate prefer forced run locally least trusted server time likely user want embrace general public cloud multitude appasaservice option surprisingly need isolating workload interfering example payload better suited traditional local application consequently within qubes m office sensitive document large dataprocessing application networking usb driver stack latter thing may visible user really offload cloud host local machine present huge attack surface jeopardizes user data application isolating web apps well protecting host course primary task web browser yet despite vendor best effort browser security measure still circumvented continued expansion apis modern browser expose web application webgl suggests state affair may significantly improve foreseeable future make qubes model especially useful think allows u put whole browser container isolated stronger mechanism simply qubes maintain interface browser must managed qubesdefined policy rather natural imagine eg chrome osbased template qubes perhaps even unikernelbased one lightweight browser vms could created running either user local machine cloud described pro con approach qubes support mostly seamlessly user admin point view well qubes service developer point view summary qubes air next step roadmap making concept security compartmentalization applicable scenario also attempt address biggest problem weakness plaguing current implementation qubes specifically difficulty deployment virtualization single point failure qubesasaservice one natural application could built top qubes air certainly one also discussed running qubes cluster physically isolated device well various hybrid scenario believe approach security qubes implementing year continue valid year come even world appsasaservice
213,Lobsters,virtualization,Virtualization,Running FreeBSD in Travis-CI,http://erouault.blogspot.com/2016/09/running-freebsd-in-travis-ci.html,running freebsd travisci,question qemu sshpass job killed kvm let fabrice bellard linux kernel browser kqemu documentation virtualbox regarding software virtualization patch patch succesful build build recipee,note geospatial focused reader article little geo although applied gdal software virtualization hack software archeology value free software note virtualization expert one please bear approximate language inaccuracy travisci popular continuous integration platform easily used software project hosted github travisci free offer software public repository github travisci provides cloud instance running linux mac o x increase portability test gdal wondered somehow possible run another operating system travisci example freebsd search lead question bug tracker outcome seems possible medium long term plan one idea came quickly mind use qemu machine emulator simulate full machine cpu peripheral memory etc several hardware architecture intel arm mips sparc powerpc etc run qemu mostly need virtual hard drive ie file replicates content hard disk virtual machine want run found small readytouse image freebsd one nice property ssh server dhcp automatically started making possible remote connect starting travisci ubuntu trusty image step launch freebsd guest sudo aptget install qemu wget ftp tar xjvf daemonize display none smp net user hostfwdtcp net nic qemu invokation start virtual machine daemon without display turn networking asks guest ie freebsd tcp port ssh port accessible host linux trusty port ssh vm one slight inconvenience ssh login requires password root password vm password ssh secured nt accept password provided file piped echo found sshpass utility designed overcome situation security nt really matter however version sshpass bundled ubuntu trusty nt work corresponding ssh version surprisingly since author sshpass mention full assumption ssh work easily break change ssh found latest version worked however extra line login freebsd instance wget http tar xzf cd configure make cd export myssh p password ssh userknownhostsfiledevnull stricthostkeycheckingno root localhost configure bit freebsd vm install pkg package manager dependency build gdal myssh env assumealwaysyesyes pkg bootstrap myssh mkdir etcpkg p password scp userknownhostsfiledevnull stricthostkeycheckingno p freebsdconf root localhost etcpkgfreebsdconf myssh env assumealwaysyesyes pkg update myssh env assumealwaysyesyes pkg install gmake myssh env assumealwaysyesyes pkg install myssh env assumealwaysyesyes pkg install myssh env assumealwaysyesyes pkg install curl myssh env assumealwaysyesyes pkg install expat go configure make work minute later maximum length travisci job job killed perhaps gdal code base compiled reason used pure software emulation mode qemu involves onthefly disassembling code run reassembling qemu example emulate arm guest intel host viceversa really shortcut guest host architecture guest typically run time slower would real machine native architecture actually true since addition cpu instruction dedicated virtualization vtx intel amdv amd hypervisor called kvm kernel virtual machine added linux kernel qemu use kvm implement mentioned shortcut reach near baremetal performance take use kvm instead let sigh attempt fails miserably failed initialize kvm error message display content proccpuinfo get flag fpu vme de pse tsc msr pae mce apic sep mtrr pge mca cmov pat clflush mmx fxsr sse s ht syscall nx rdtscp lm constanttsc repgood nopl xtopology nonstoptsc eagerfpu pni pclmulqdq fma movbe popcnt aes xsave avx rdrand hypervisor lahflm abm fsgsbase smep erms xsaveopt come time good old memory bit software archeology qemu started fabrice bellard nt know name yet f bellard created ffmpeg qemu hold world record number decimal pi computed cot pc ported qemu javascript run linux kernel browser devised bpg new compression based hevc etc time interest focused qemu created kqemu kernel module linux window freebsd host could significantly enhance qemu performance guest host kqemu requires qemu modified communicate kernel module similarly working qemu kvm kernel module kqemu started closed source project eventually released gpl one key feature kqemu require use hardware virtualization instruction kqemu software virtualization involves complicated trick particularly code guest run ring ie highest priviledges must patch run ring nonpriviledge code host get idea involved reading documentation virtualbox regarding software virtualization pretend qemukqemu exact trick virtualbox give least picture challenge involved complexity lead kqemu eventually abandonned cpu hardware virtualization became widespread market since kvm based virtualization much cleaner implement starting qemu kqemu support finally dropped qemu code base due kqemu using hardware virtualization instruction good hope run inside virtualized environment let try qemu kqemu compiling qemu ubuntu trusty run quite well except linking error easily fixed trivial patch building kqemu bit involved kernel module internal linux kernel api prone change time time one good news linux specific part kqemu relatively small file api break limited aspect way get memory management structure current task changed linux found simple patch solve another change occured later linux release removal kernel semaphore replaced mutexes cumulated patch fix compilation issue nt pretend technically correct knowledge kernel internals limited local test seemed confirm adding enablekqemu qemu command line worked sufficiently well start thing freebsd vm decent speed tried kernelqemu switch turn kqemu acceleration kernel guest code resulted crash qemu near end boot process freebsd surprising kernelqemu make assumption internal working guest o perhaps freebsd meet perhaps bug qemukqemu running travisci successful compilation done minute probably half speed bare metal good enough kqemu support smp guest listed potential roadmap probably achievable wanted speed compilation could potentially launch kqemuenabled qemu instance travisci vm core available would compile different part software build tree hosted nfs share said compilation go fine except build process actually qemu instance crash libgdalso building time also reproduce locally probably history qemu kqemu nt long enough go beta quality production quality workarounded issue compilation enablekqemu mode restarting vm pure software emulation linking restarting enablekqemu mode unfortunately running gdal python autotest suite kqemu mode also lead qemu crash due design kqemu runnnig code ring crash affect host running completely pure emulation mode reach minute timeout sake demonstration run one test file first succesful build given build recipee could also potentially tried virtualbox mentionned support software virtualization acceleration bit guest nt find readymade freebsd image directly ssh bit guest virtualbox require hardware virtualization available host best knowledge kqemu solution enable acceleration bit guest without hardware requirement main conclusion experiment striking example key advantage open source model kqemu released gpl would never able resurrect modify run newer kernel actually also attempt developing alternative kqemu kqemu still closed source abandonned virtualbox open sourced
214,Lobsters,virtualization,Virtualization,Docker for Mac with Kubernetes,https://blog.docker.com/2018/01/docker-mac-kubernetes/,docker mac kubernetes,docker mac kubernetes heard edge release channel later date docker store edge channel activation instruction docker mac kubernetes elton stoneman video community forum github,docker mac kubernetes heard dockercon europe proud announce docker mac beta kubernetes support publicly available part edge release channel hope excited release run single node kubernetes cluster right mac use kubectl command docker command control container first thing keep mind docker mac required kubernetes feature accessible macos docker window docker enterprise edition beta follow later date need install new copy docker mac download docker store edge channel required kubernetes support still considered experimental release enable download use kubernetes component must edge channel docker mac version later updating already using kubernetes tool already running version kubectl pointed another environment example minikube want follow activation instruction change context dockerfordesktop docker mac window popular way configure docker dev environment used everyday hundred thousand developer build test debug containerized apps developer building dockercompose swarmbased apps apps destined deployment kubernetes get simpletouse development system take optimal advantage laptop workstation container task build run push run docker instance shared set image volume container docker mac simple install docker container running mac minute docker mac autoupdates continue getting latest docker product revision experimental kubernetes support docker ce mac docker provide user endtoend suite containermanagement software service span developer workstation running docker mac window test cicd production system onpremises cloud running docker enterprise edition ee beauty building docker mac window deploy exact set docker container image desktop docker enterprise edition ee production system docker mac window single node system building testing preparing ship application docker ee provides security control scale needed manage production application eliminate worked machine problem docker container running docker engine docker swarm kubernetes orchestrator coming soon ee thing try new kubernetes looking introductory exercise try resource docker mac kubernetes page instruction getting example app running follow along docker developer advocate elton stoneman short video demonstrating activating kubernetes deploying application using docker compose kubernetes manifest send u feedback send u feedback idea improvement bug complaint make docker desktop better use docker community forum general discussion also directly file technical issue github call action
215,Lobsters,virtualization,Virtualization,PCID is now a critical performance/security feature on x86,https://groups.google.com/forum/m/#!topic/mechanical-sympathy/L9mHTbeQLNU,pcid critical performancesecurity feature,,use google group discussion please enable javascript browser setting refresh page
216,Lobsters,virtualization,Virtualization,The Evolution and Future of Hypervisors,https://medium.com/@penberg/the-evolution-and-future-of-hypervisors-999f568f9a5d,evolution future hypervisors,evolution future hypervisors amazon google compute engine docker kubernetes architecture hypervisor architecture virtual machine monitor vmm equivalence property efficiency property resource control property kvm subsystem device model io virtualization evolution future hardware virtualization amazon nitro project hardware virtualization illustrated diagram operating system lightweight virtualization serverless computing function service energy efficiency kernelbypass networking vhost architecture summary reference http http http http http http http http,evolution future hypervisorshypervisors virtualization technique power cloud computing infrastructure like amazon google compute engine although container virtualization technology like docker kubernetes taken spotlight recently container often deployed top hypervisors cloudin article first outline architecture classical trapandemulate hypervisors invented describe hypervisors evolved today cloud computing era finally look future trend affect hypervisor design article inspired awesome talk amazon nitro project anthony liguori highly recommend everyone interested hypervisors cloud infrastructure watch architecturea hypervisor piece system software provides virtual machine vms user use run o application hypervisor provides isolation vms run independent also allows different vms run o like virtualization technique hypervisors provide multitenancy simplifies machine provision administration one main criticism hypervisors tend usually heavyweight compared virtualization technique like container morabito et al however also possible build hypervisors lightweight manco et al also make guest o lightweight running hypervisor madhavapeddy hypervisor decomposed two major part virtual machine monitor vmm device model vmm responsible setting vms handling trap aka vm exit caused guest o executing privileged instruction like io access device model hand responsible implementing io interface device like networking card storage hypervisor support hypervisor architecture illustrated following diagramhypervisor architecture hypervisor decomposed two part virtual machine monitor vmm device model term hypervisor vmm often used interchangeably however refer hypervisor combination vmm device model virtual machine monitor vmm vmm must satisfy three property popek goldberg equivalence property state program execution identical observable behavior bare metal vmm except timing resource availability difficult preserve shared physical hardwareefficiency property state majority program instruction executed directly physical cpu without interference hypervisorresource control property state vmm manages hardware resource virtual machine require permission hypervisor directly access hardwareas side note worth noting emulator satisfy equivalence resource control property satisfy efficiency propertythe kvm subsystem linux kernel o e ported example provides building block implementing vmm kvm subsystem effectively portable abstraction cpu hardware virtualization capability leveraged userspace application like qemu implement vmm full hypervisordevice modelthe device model part hypervisor provides io interface virtual machine vmm responsible handling trap delegate io request appropriate device model example device model virtualized nics storage device device model either provide interface real hardware device paravirtualized device device model implemented either using software like virtio family driver hardware using sriov exampleio virtualizationto implement device model io virtualization needed two approach io virtualization softwarebased hardwareassistedsoftwarebased io virtualization implement io interface software allow sharing physical device across multiple virtual machine softwarebased io virtualization implemented top various different backends example softwarebased storage device layered top block device filesystem one issue softwarebased approach device model us cpu resource vcpus reduces available cpu capacity cause jitterhardwareassisted io virtualization implement io interface hardware approach requires hardware support sharing physical device across multiple virtual machine srvio pci extension allows physical pci function partitioned multiple virtual pci functionsevolutionthe semantics trapandemulate vmm formalized early popek goldberg made popular running commodity o e multicore machine bugnion et al however popular machine architecture time intel virtualizable privileged instruction trapthe vmware hypervisor targeted first released used binary translation replace privileged instruction trap hypervisor still running unprivileged instruction directly physical cpu solved virtualization issue adam agesen allowed vmware hypervisor run unmodified commodity o e hardware virtual machine without performance penalty emulationthe xen hypervisor released first took different approach solving virtualization issue instead binary translation modified source code guest o trap hypervisor instead executing nontrapping privileged instructionsintel amd released cpu virtualization extension made classic trapandemulate virtualization possible kvm initially developed linux implement kernel subsystem combination qemu device model provides full hypervisor initially kvm project provided softwarebased device model emulated full hardware device later acquired paravirtualized io device model virtio device model introducedfuturethe classic hypervisor architecture stood test time trend affect hypervisor designhardware virtualization becoming widespread example amazon nitro project talk anthony liguori take unconventional approach hypervisor design replaces softwarebased device model hardware virtualization illustrated diagram amazon nitro hypervisor also us custom designed vmm leverage linux kvmoperating system also started evolve accommodate hypervisors better unikernels interesting o design approach package o application one bundle run cpu protection level madhavapeddy eliminates traditional separation kernel user space reduces context switch system call overhead expense losing o functionality basic idea already pioneered earlier form library os much simpler device model hypervisor compared bare metal made idea much feasible real world uselightweight virtualization becoming important use cloud computing grows container excellent technology providing lightweight virtualization however container unable provide full isolation capability vms various security problem container share host o access large o system call interface manco et al hypervisors slimmed significantly manco et al unikernels provide even larger opportunity optimize hypervisor relax equivalence property requirement vmms williams serverless computing new computing model better described function service faa allows application developer deploy function instead application managed platform one approach serverless computing use hypervisors unikernels packaging deploying function koller williams energy efficiency another important future direction hypervisor design communication technology cloud computing large part forecasted consume around global electricity much worst case andrae edler energy overhead hypervisor extremely high depending workload one experiment report energy overhead kvm jin et al kernelbypass networking become important recently nics getting faster traditional tcpip posix socket abstraction proving high overhead han et al young et al yasukata et al hypervisors implement device model using io paravirtualized effectively introduce another layer networking data path increase networking overhead linux vhost architecture one solution problem vhost move virtio paravirtualized io device model qemu vmm userspace kernel host kernel also host kvm module eliminates exit host kernel userspace vmm another solution full hypervisor kernelbypass using hardware nic virtualization introduced arrakis project peter et al summarythe hypervisor architecture invented stood test time architecture quirk meant first successful hypervisors resort binary translation handle privileged instruction binary translation solution followed paravirtualization popularized xen hypervisor architecture consolidated classic model intel amd added virtualization extension architecturealthough container recently become popular virtualization technique emerging computing paradigm like serverless computing could make hypervisors attractive technique lightweight hypervisor design unikernels hardwareassisted virtualization reduce hypervisor overhead also make hypervisors competitive containersreferenceskeith adam ole agesen comparison software hardware technique virtualization proceeding international conference architectural support programming language operating system asplos xii acm new york ny usa doi http g andrae tomas edler global electricity usage communication technology trend challenge doi http bugnion scott devine mendel rosenblum disco running commodity operating system scalable multiprocessor proceeding sixteenth acm symposium operating system principle sosp william waite ed acm new york ny usa doi http han scott marshall byunggon chun sylvia ratnasamy megapipe new programming interface scalable network io proceeding usenix conference operating system design implementation osdi usenix association berkeley ca usa jin yonggang wen qinghua chen energy efficiency server virtualization data center empirical investigation proceeding ieee infocom workshop orlando fl pp doi http young jeong shinae woo muhammad jamshed haewon jeong sunghwan ihm dongsu han kyoungsoo park mtcp highly scalable userlevel tcp stack multicore system proceeding usenix conference networked system design implementation nsdi usenix association berkeley ca usa koller dan williams serverless end dominance linux cloud proceeding workshop hot topic operating system hotos acm new york ny usa doi http madhavapeddy richard mortier charalampos rotsos david scott balraj singh thomas gazagnaire steven smith steven hand jon crowcroft unikernels library operating system cloud proceeding eighteenth international conference architectural support programming language operating system asplos acm new york ny usa doihttp manco costin lupu florian schmidt jose mendes simon kuenzer sumit sati kenichi yasukata costin raiciu felipe huici vm lighter safer container proceeding symposium operating system principle sosp acm new york ny usa doi http morabito jimmy kjällman miika komu hypervisors v lightweight virtualization performance comparison proceeding ieee international conference cloud engineering ieee computer society washington dc usa doi http peter jialin li irene zhang dan r k port doug woos arvind krishnamurthy thomas anderson timothy roscoe arrakis operating system control plane proceeding usenix conference operating system design implementation osdi usenix association berkeley ca usa j popek robert p goldberg formal requirement virtualizable third generation architecture proceeding fourth acm symposium operating system principle sosp acm new york ny usa doi http williams ricardo koller unikernel monitor extending minimalism outside box proceeding usenix conference hot topic cloud computing hotcloud usenix association berkeley ca usa yasukata michio honda douglas santry lars eggert stackmap lowlatency networking o stack dedicated nics proceeding usenix conference usenix annual technical conference usenix atc usenix association berkeley ca usa
218,Lobsters,virtualization,Virtualization,The Comprehensive Guide to Serverless Architecture,https://www.simform.com/serverless-architecture-guide/,comprehensive guide serverless architecture,reduced infrastructure cost load use hence pay aws lambda flexible scaling horizontal scaling completely automatic elastic managed provider reduced scaling cost payasyougo model infrequent request serverless encaptures efficiency give benefit form reduced cost fluctuating traffic let assume peak hour server get exhausted time want reduce response time ay extra compute capacity use spike phase ease operation management benefit autoscaling many concurrent request handle run memory performance hit reduction packaging deployment complexity write code vendor console ready go lower risk failure outsource management operation part plus outsource solve problem occur system rare chance failure go serverless shorter lead time excited serverless chris director data engineering textio adrian cockcroft vp aws cloud architecture back table content,time move benefit serverless brings table since serverless still evolution benefit considering might available yearsmoreover unproven concept hence moving serverless definitely consider significant facet hope discussing benefit drawback clearing confused air regarding serverlessreduced infrastructure costsbefore set server various thing need consider might look like many type host server going run much cpu ram database need many instance provided support scaling high availability figure thing come time planning allocation provisioning tiresome indeed time overestimate thing end paying resource never use future sound familiar side magnanimous benefit serverless brings table plan allocate provision resource let vendor facilitate u precisely amount capacity need point timeif load use hence pay simple tb data need capacity store tb trust vendor service provided demand equally true faa baa service bothfor example aws lambda charged millisecond use time precise hourly billing scalingall reduction infrastructure cost come added benefit automatic scalinglet remind serverless horizontal scaling completely automatic elastic managed provider happen let take example platform receives first event trigger function initiate container run code another event triggered previous one still process initiate another container run code automation enable horizontal scaling enough container run codepretty flexible right reduced scaling costsdue payasyougo model save lot high scalability huge economic win infrequent request using server application process request every single minute take m process request mean cpu usage hour highly inefficient wish much application could use server wellbut serverless encaptures efficiency give benefit form reduced cost case paying computing every minute overall timesuch benefit cost prove amazing democratizer production team extremely tiny amount operational cost bear try something new fact total workload relatively small provide nothing considering free tier service vendor fluctuating traffic let assume website traffic spike basic traffic receive day around requestssec increase time requestssec every min seclet assume peak hour server get exhausted time want reduce response time solution doif functioning traditional environment may need upgrade hardware factor handle sudden increase trafficautoscaling favourable option highly unlikely predict time taken new instance server come moreover time server ready traffic spike phase overhowever serverless seem issue nothing whether traffic uniform peak pay extra compute capacity use spike phase hence huge cost saving companybut wait receive significant economic benefit traffic inconsistent stable traffic using faa may end paying hence math first ease operation managementas said earlier scaling automatic hence faa benefit scaling cost ask let explain benefit autoscalingconsider case manually managing app server need specific person add remove instance array server faa worry vendor thing related scalingmoreover let get bubble worrying many concurrent request handle run memory performance hit reduction packaging deployment complexitypackaging deploying api gateway simple admit time faa function pretty simple comparison deploying entire server getting started faa even need package anything write code vendor console ready go team quite efficient benefit could huge fully serverless solution aka zero system administrationlower risk failurethe chance problem occur increase team manages multiple system component however case serverless serverless outsource management operation part plus outsource solve problem occur systemsthis brings added benefit rely expertise others solving unpredictable problem rather solving sound like good idea many element technical stack one rarely alter problem occurs may know solve lead prolonged indeterminate downtimewith serverless considerable decrease number technique manage directly moreover dealing one frequently used team make much easier handleand hence rare chance failure go serverlessshorter lead timeto provide enough space innovation production environment short lead time important short cycle time lead time mean time foundation new product feature deployed minimum viable way production environmentthe fact serverless architecture totally wipe inherent complexity building launching scaling operation amazing give space enough change way deliver product totally upside mannerand excited serverless ability unleashes production environment plus focus delivering awesome product customer said enough let say people say aws pretty great time data stack aws rarely felt empowered build ton thing almost literally zero infrastructure concern serverless data engineering quite combo chris director data engineering textio starting see application built ridiculously short time period adrian cockcroft vp aws cloud architecture strategy back table content
219,Lobsters,virtualization,Virtualization,Clang 5 in a Docker container for C++17 development,https://solarianprogrammer.com/2017/12/14/clang-in-docker-container-cpp-17-development/,clang docker container development,clang docker container development posted december paul docker github please note need run command filesystem std optional std span tour c effective modern c,clang docker container development posted december paul updated april want try latest stable version clang docker container right place running clang container advantage light resource mess underlying o last point especially important host operating system macos really bad idea directly install binary clang one come xcode tested approach presented article window macos mojave ubuntu linux assume docker installed machine go docker website install installation open terminal window powershell window check docker properly installed docker version snippet see macos machine docker version client docker engine community version api version go version git commit built wed mar osarch experimental false server docker engine community engine version api version minimum version go version git commit built wed mar osarch experimental false next going use dockerfile prepare ubuntu image latest clang check http releasesllvmorgdownloadhtml latest available binary make sure image updated install prerequisite download latest version clang official binary ubuntu extract archive add clang path run aptget update aptget install xzutils buildessential curl rm rf varlibaptlists curl sl http tar xjc mv echo export path bashrc echo export ldlibrarypath bashrc start bash prompt cmd binbash get last version dockerfile github hint use download button git client machine git clone http githubcomsolprogclangindockergit cd clangindocker order build date image use make sure folder dockerfile docker build ubuntuclangimage create new image named ubuntuclangimage process finished check list available image docker image l need create container ubuntuclangimage first create folder shared host o docker container let u use preferred c text editor ide host cd mkdir clangtests host o window need extra step make sure shared drive docker let share local window folder docker container example want share drive c open setting panel check drive press apply next create container named ubuntuclang image docker run v pwdclangtests clangtests name ubuntuclang ubuntuclangimage binbash please note need run command point bash prompt container eg see machine docker run v pwdclangtests clangtests name ubuntuclang ubuntuclangimage binbash root check version clang clang version see something like clang version target thread model posix installeddir root host machine go clangtests create new file named iftestcpp next c code block initstatement example bit silly use check compiler support include iostream int main block initstatement int std cout local variable else std cout local variable return file visible container cd clangtests check file present see root cd clangtests root clangtests l iftestcpp root clangtests compile run c program clang stdliblibc wall pedantic iftestcpp iftest iftest see container root clangtests clang stdliblibc wall pedantic iftestcpp iftest root clangtests iftest local variable root clangtests next try compile program us filesystem filesystem test build code clang stdliblibc wall pedantic fstestcpp fstest include iostream include filesystem int main auto file std filesystem recursivedirectoryiterator std cout filepath n save file fstestcpp compile clang stdliblibc wall pedantic fstestcpp fstest see container run code see list file present folder executable root clangtests clang stdliblibc wall pedantic fstestcpp fstest root clangtests fstest fstestcpp fstest iftest iftestcpp root clangtests finally test use std optional optional test compile code clang stdliblibc wall pedantic optionaltestcpp optionaltest include iostream include optional void showoptionalvalue const std optional int print optional value empty std cout optional value n else std cout optional emptyn int main create empty optional std optional int show optional value showoptionalvalue store value optional variable show optional value showoptionalvalue see build run code root clangtests clang stdliblibc wall pedantic optionaltestcpp optionaltest root clangtests optionaltest optional empty optional value root clangtests clang partial support new standard use order enforce standard example using new std span span test build code clang stdliblibc wall wextra pedantic spantestcpp spantest include iostream include vector include span void printcontent std span int container const auto e container std cout e std cout n int main int printcontent std vector int v printcontent v see build run code root clangtests clang stdliblibc wall wextra pedantic spantestcpp spantest root clangtests spantest root clangtests want leave container write exit default shell prompt eg root clangtests exit exit next time want start container docker start ia ubuntuclang remember name docker container use next command list available container docker container l interested learn modern c would recommend reading tour c bjarne stroustrup effective modern c scott meyers
220,Lobsters,virtualization,Virtualization,Voyage into the World of Serverless Computing — with a 135-year-old Shipping Company,https://read.iopipe.com/voyage-into-the-world-of-serverless-computing-with-a-135-year-old-shipping-company-4a8380b90bf3,voyage world serverless computing shipping company,voyage world serverless computing shipping company charting course serverless matson http wwwiopipecomserverlesswebinarslogisticsserverlesswebinarseriesmatsonawsiopipe voyage begin matson inc allin aws cloud first sight lambda announcement invent set course serverless architecture overview amazon api gateway boundedcontext,voyage world serverless computing shipping companyed note guest post written dave townsend principal software engineer matsoncheck ondemand webinar charting course serverless matson dave aws principal developer advocate chris munns iopipe ctocofounder erica windischview http wwwiopipecomserverlesswebinarslogisticsserverlesswebinarseriesmatsonawsiopipethe voyage beginsafter completing effort migrate system mainframe modern java stack matson inc leading u shipping carrier pacific spent next year closing four internal data center moving operation aws tour de force year say leastannounced aws invent conference going allin aws cloud completed first leg matson cloudnative voyage datacenter liftandshift behind u focus innovation digital transformation could beginfirst sight lambdalike many intrigued aws lambda function initial announcement invent much right away meanwhile matson innovation architecture team part starting make heavy use amazon lab account experimentation running proof concept course came nicely sized monthly billto automate scheduling amazon instance available business hour lowrisk opportunity start experimenting aws lambda function turned valuable zerocost solutionadditionally integrated amazon api gateway provide offshore contract team simple secure way stopstart server without creating additional aws user accountsthe outcome experimentation yielded two positive result monthly saving amazon spend desired result realized benefit serverless approach became excited possibility serverless computing wider matson enterprise bonus set course serverlessone innovation architecture team responsibility leading mobile product development start presented opportunity build flagship mobile application global container tracking along additional valueadds interactive vessel schedule locationbased port map live gate camera feedswith known spiky traffic pattern webbased online tracking system building mobile backend highlyavailable likely low total cost ownership serverless solution perfect fitarchitecture overviewall mobile device access system via amazon api gateway using amazon api gateway ensures highlyavailable scalable set endpoint mobile access across u also fair amount caching servicemuch data needed app available set existing business apis within amazon vpc apis entirely mobilefriendly aws lambda provide great place perform needed data transformation optimizing mobile payloadsthe aws lambda function architected microservices service boundedcontext given business function eg tracking service vessel service etcamazon dynamodb used primarily externalize environment configuration mobile device internal systemhigh level architecture
221,Lobsters,virtualization,Virtualization,Leaving AWS,https://gist.github.com/bsiegert/aa477dbe371c318d9f86a2cad95137f1#file-leaving-aws-md,leaving aws,leaving amazon aws alternative http githubcomgooglenetbsdgce http bulktrackerappspotcom conclusion,leaving amazon aws today deleted amazon aws account aws since usage mainly two thing saving large amount file build log running netbsd vms based xen netbsd run really well pv paravirtualized mode xen however mean malicious pv guest may crash even otherwise exploit hypervisor recommended fix run untrusted pv guest night amazon disabled pv making netbsd vms useless general moving away xen newer instance type already longer supported pv two higherperformance paravirtualized mode pvh pvhvm preferred day netbsd support newest machine type use custom hypervisor based kvm way pv change rolled highlighted another longstanding problem instance would continue running server ran got rebooted point migrated random machine target machine pv disabled vm simply come type issue past vm randomly landed good bad machine come bad one way afaik constrain certain subset server eg running certain hypervisor version also course warning announcement vms stopped working sudden bunch people completely caught surprise service became unavailable hope monitoring alternative brings take workload google cloud platform nothing whatsoever employer pay gcp usage money day netbsd run great google compute engine script created stage instance http githubcomgooglenetbsdgce though official netbsd image around usage work equally well using google cloud storage always fan app engine particularly great go support http bulktrackerappspotcom run app engine conclusion general impression feature roughly par price gcp bit cheaper google cloud sdk commandline tool better rather let old unusable vm image continue rot pay amazon month bit storage let go aws account bye amazon
222,Lobsters,virtualization,Virtualization,Understanding CPU Steal Time: when should you be worried?,http://blog.scoutapp.com/articles/2013/07/25/understanding-cpu-steal-time-when-should-you-be-worried,understanding cpu steal time worried,understanding cpu steal time worried eric lindvall papertrail shut virtual machine cpu steal time definition ibmcom see cpu steal time cpu steal time ticket booth analogy steal time steal time steal time high steal time particularly bad web apps steal time well zero ca nt tell case situation fall watching impacted instance cpu metric worried steal time greater minute vm likely state running slower tl dr server faster code scout apm ruby python elixir sign free trial,understanding cpu steal time worried big thanks eric lindvall papertrail adding steal time scout cpu usage plugin helping blog post netflix track cpu steal time closely fact steal time exceeds chosen threshold shut virtual machine restart different physical server deploy virtualized environment example amazon steal time metric want watch number high performance suffer significantly steal time cause high steal time worried cpu steal time definition ibmcom steal time percentage time virtual cpu wait real cpu hypervisor servicing another virtual processor virtual machine vm share resource instance single host virtualized environment one resource share cpu cycle vm one four equally sized vms physical server cpu usage nt capped cpu cycle allowed use proportion cpu cycle versus memory usage hard limit see cpu steal time run linux top command see realtime view key performance metric one line cpu two metric might experience already id percent idle wa percent io wait id low cpu working hard nt much excess capacity wa high cpu ready run waiting io access complete like fetching row database table stored disk st percent steal time last cpu metric displayed cpu steal time ticket booth analogy purchased ticket latest hollywood blockbuster two line one ticket booth applied cpu steal timelike metric ticketing process would look like steal time wednesday matinee ticket booth picking moviegoer line line line line one waiting steal time friday night instead able purchase ticket immediately half time person line need wait person booth complete purchase thing taking longer steal time friday night cash register broken one moving high steal time particularly bad web apps longrunning background computational task underutilized physical server may get access share cpu cycle later vms need share cpu cycle longrunning task run slower might dealbreaker longrunning task might take bit longer might even finish faster since able use resource earlier however web apps bring thing halt task need performed realtime like rapidly serving many web request decrease performance cause major backup request queue lead outage steal time well zero two possible cause need larger vm cpu resource problem physical server oversold virtual machine aggressively competing resource problem catch ca nt tell case situation fall watching impacted instance cpu metric easiest tell multiple identical server performing role residing different host st cpu steal time percentage increased every virtual server mean virtual machine using cpu need increase cpu resource vms st cpu steal time percentage increased dramatically subset server mean physical server may oversold move vm another physical server worried general rule thumb steal time greater minute vm likely state running slower happens shut instance move another physical server steal time remains high increase cpu resource steal time remains high contact hosting provider host may overselling physical server tl dr virtual environment cpu cycle shared across virtual machine server vm display high st top steal time mean cpu cycle taken away vm serve purpose may using share cpu resource physical server may oversold move vm another physical server steal time remains high try giving vm cpu resource server faster code adding server bandaid slow code scout apm help find fix inefficient costly code automatically identify sql call memory bloat coderelated issue spend le time debugging time programming ruby python elixir agent ready optimize site sign free trial
223,Lobsters,virtualization,Virtualization,AWS EC2 Virtualization 2017,http://www.brendangregg.com/blog/2017-11-29/aws-ec2-virtualization-2017.html,aws virtualization,virtualized software paravirtualization virtualized hardware fully emulated xen pv cperciva xen hvm xen hvm pv hvm linux ami virtualization type xen mode xen aws enhanced networking million packet per second public cloud instance xen aws instance type million storage iop aws cloud instance aws nitro video video instance type last battleground pmcs measuring ipc instance type aws bare metal video summary acknowledgement reference linuxcon eu xenprojectorg xenorg,hardware virtualization cloud computing come long way improving performance using technology vtx sriov vtd nvme apicv netflix using technology made available instance type aws cloud latest aws hypervisor nitro us everything provide new hardwareassisted hypervisor easy use near baremetal performance exciting development cloud computing hardware virtualization fast summarized hypervisor development diagram column show dimension instance performance ordered importance typical workload netflix cpubound important row table virtualization type cell show type virtualization colored expected performance may first notice time green creeping left deliberate engineering optimizing important workload first dimension progressed stage virtualized software support unmodified guest o many operation emulated slow apps may run slower worse paravirtualization hypervisor provides efficient hypercalls guest o us driver kernel modification call hypercalls using software coordination hypervisor guest improve performance expect measurable overhead depending pv type workload virtualized hardware hardware support virtualization near baremetal speed expect overhead summarize row diagram chronological order fully emulated remember original vmware hypervisor amazing recall even possible virtualize processor hardwareassisted virtualization intel vtx amdv added first hypervisor used emulation binary translation privileged operation syscalls page table operation noticeable performance cost especially ioheavy workload first impression endure many u introduced hardware virtualization something known slow nearly two decade ago nt think hypervisor type ever ran xen pv xen many different possible configuration including leaving including one help tell story virtualization enter paravirtualization originally introduced xen guest modified aware hypervisor make efficient hypercalls configuration ami boot paravirt pv kernel making hypercalls instead privileged instruction system using paravirt network storage driver provides performance improvement still significant overhead privileged operation syscalls page table event also slows io although faster perhaps colored cpu cell yellow instead red processor hardware virtualization cpu memory intel vtx amdv first instance configured like thanks cperciva xen hvm row show recent hypervisor configuration running processor hardware virtualization cpu memory vtx using paravirt driver network storage device ami boot hvm interrupt timer nt paravirtualized yet also started coloring motherboard boot green instance type boot faster bare metal machine despite software virtualization xen hvm configuration boot hvm us pvhvm driver driver also called pv hvm paravirt driver use hvm feature using hvm ami help differentiate call instance pvhvm driver improves kind workload including interrupt timer thing started become confusing two reason instead glossing detail let dig first source confusion ami type aws us different image type boot process pv hvm described linux ami virtualization type page people began referring running instance pv hvm complex hvm boot run paravirt driver pv also run paravirt hvm driver pvhvm hvm instance use hvm pvhvm driver second source confusion performance earlier hvm version nt use much paravirt could even slower pv causing many recommend pv hvm recommendation quickly became date bit confusing wrote xen mode joined netflix begun transitioning pv hvm pvhvm came world container expected busy wrestling overhead hardware virtualization detail pv v pvhvm found workload already running pretty fast instance workload cpu memory bound already virtualized hardware workload network bound proxy storage bound database xen aws starting instance type began supporting hardware virtualization network interface single root io virtualization sriov first aws called enhanced networking initially used via ixgbe driver speed gbps ena driver speed gbps colleague amer ather responsible testing making work netflix posted result million packet per second public cloud instance impressive solution hand network performance next target storage xen aws aws launched used hardware virtualization eb volume extended instance storage device finally came storageoptimized instance type instance type used sriov nvme storage driver amer tested deployed well shared result million storage iop aws cloud instance great development working blog post describe new instance type hardware virtualization cpu memory network storage could even finish post aws launched nitro hypervisor aws nitro announced aws invent last night covered anthony liguori talk today video bare metal talk video instance type us new hypervisor called nitro nitro lightweight based kvm core kernel module use many kvm component qemu also domo idd involved io path direct metal access nitro io initialized via nitro direct metal io access aim nitro provide performance indistinguishable metal us sriov hardware virtualization network storage io provided custom silicon card annapurnalabs also hardware virtualization support interrupt using posted interrupt apicv reduce number vm exit improving interrupt performance described last battleground hardware virtualization performance anthony explained talk previous hardware virtualization development component nitro launched piecemeal improving performance prenitro system nitro easier use us technology default left cell blank pictured right ebsonly diagram nt show direct metal access ephemeral drive see nitro instance investigating overhead nitro far found miniscule often le hard measure nitro performance nearmetal also excited nitro expose pmc counter previously posted pmcs measuring ipc covering architectural set pmcs recently exposed certain instance type seven pmcs nitro instance hundred pmcs truly analyze lowlevel cpu performance detail help find win first use nitro hypervisor also invent instance type launched also based nitro aws said eventually instance use nitro hypervisor exception new bare metal instance aws bare metal also announced aws invent amazon bare metal instance bare metal server performance overhead run whatever like xen kvm container access pmcs processor feature covered detail today talk matthew wilson aaron blasius video aws name bare metal platform nitro system nitro discussed earlier nitro hypervisor also run nitro system sound bit confusing first hear matt use term talk start watching summary hope diagram make sense summarizes virtualization development journey leave one parting thought bare metal instance type huge eg cpu probably want divide cloud instance think setup hypervisor overhead even container hidden overhead like docker use overlayfs bridge network personally find fun interesting challenge think hard beat nitro imagine people nitro exactly want acknowledgement reference virtualization diagram began xen mode diagram lars kurth linuxcon eu also published george dunlap xenprojectorg developed lars updating xenorg new diagram show importance hardware virtualization made green paravirtualization blue thanks amer ather netflix help input aws matt wilson anthony liguori greg dunn others work virtualization helping understand work thanks straughan edits disclaimer officiallyendorsed aws post reading virtualization topic
224,Lobsters,virtualization,Virtualization,Qubes OS 4.0-rc3 has been released,https://www.qubes-os.org/news/2017/11/27/qubes-40-rc3/,qubes o released,previous release candidate discover report bug templatevms qubes release note downloads,pleased announce third release candidate qubes goal release candidate improve stability reliability qubes prioritized fixing known bug introducing new feature many bug discovered previous release candidate resolved full list qubes issue closed far available always immensely grateful community tester taking time discover report bug thanks effort able fix bug final release qubes encourage continue diligently testing third release candidate work together improve qubes stable release current user qubes upgrade inplace downloading latest update testing repository templatevms detail including full installation instruction available qubes release note new installation image available downloads page
225,Lobsters,virtualization,Virtualization,The Illustrated Children's Guide to Kubernetes (2016),https://www.youtube.com/watch?v=4ht22ReBjno,illustrated child guide kubernetes,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature illustrated child guide kubernetes youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature illustrated child guide kubernetes youtube
226,Lobsters,virtualization,Virtualization,4.2BSD on SIMH vax with networking,http://plover.net/~agarvin/4.2bsd.html,simh vax networking,cd etc cp fstab cat fstab newfs newfs mount cd dev makedev cd mkdir usrsys usrsrc rm sys ln usrsys sys cd usrsys mt rew mt fsf tar xpb cd usr mt rew mt fsf tar xpb cd usrsrc mt rew mt fsf tar xpb cd new mt rew mt fsf tar xpb,simulator rx buffering file memory boot vmunix unlabeled start bsd unix wed nov pst real mem avail mem using buffer containing byte memory csr vec ipl slave slave csr vec ipl slave slave csr vec ipl slave csr vec ipl csr vec ipl csr vec ipl csr vec ipl csr vec ipl root warning run interleaved swap automatic reboot progress tue nov pst ca nt open checklist file etcfstab automatic reboot failed help erase kill u intr c cd etc cp fstab cat fstab newfs warning sector last cylinder unallocated sector cylinder track sector cyl group cg ig superblock backup fsck b newfs warning sector last cylinder unallocated sector cylinder track sector cyl group cg ig superblock backup fsck b mount cd dev makedev cd mkdir usrsys usrsrc rm sys ln usrsys sys cd usrsys mt rew mt fsf tar xpb cd usr mt rew mt fsf tar xpb cd usrsrc mt rew mt fsf tar xpb cd new mt rew mt fsf tar xpb
227,Lobsters,virtualization,Virtualization,My VM is Lighter (and Safer) than your Container,https://dl.acm.org/citation.cfm?id=3132763,vm lighter safer container,abstract,abstractcontainers great demand lightweight compared virtual machine downside container offer weaker isolation vms point people run container virtual machine achieve proper isolation paper examine whether indeed strict tradeoff isolation vms efficiency container find vms nimble container long small toolstack fast enoughwe achieve lightweight vms using unikernels specialized application tinyx tool enables creating tailormade trimmeddown linux virtual machine lightweight virtual machine enough ensure good performance since virtualization control plane toolstack becomes performance bottleneck present lightvm new virtualization solution based xen optimized offer fast boottimes regardless number active vms lightvm feature complete redesign xen control plane transforming centralized operation distributed one interaction hypervisor reduced minimum lightvm boot vm comparable forkexec linux two order magnitude faster docker lightvm pack thousand lightvm guest modest hardware memory cpu usage comparable process
229,Lobsters,virtualization,Virtualization,Writing a ZX Spectrum game in Haskell (2015),https://dpwright.com/posts/2015/07/17/writing-a-zx-spectrum-game-in-haskell/,writing zx spectrum game haskell,world finest imperative programming language zxspectrum monadreader issue warning game going making great set zx spectrum tutorial preliminary package function static data zxspectrum userdefined graphic zxspectrum sound effect zxspectrum alex may syntax initialisation setting play area zxspectrum main loop handling input lambdaman missile centipede utility original page end condition,july haskell world finest imperative programming language used write game zx spectrum world finest microcomputer post introduces two package make possible fullyfunctional macroassembler embedded haskell zxspectrum set utility macro make working zx spectrum specifically easier including label important routine spectrum rom package possible without russell connor excellent article monadreader issue assembly circular programming recursive main inspiration package post warning clicking link load game know heard report platform javascript emulator using embed cause loud unpleasant noise one report someone using android device one somebody using firefox sure platform tested page safari fine using might want turn speaker clicking download file play emulator sorry game going making basically port project pursued course great set zx spectrum tutorial clone game centipede play directly webpage download tap file playing emulator made customisations along way credit actual assembly code must go tutorial excellent resource testing package thanks ok without ado let get started literate haskell post executed line prefixed compiled run tap file embedded generated preliminary initial pragmas import zxspectrum project haskell look similar firstly need following language extension language recursivedo language overloadedstrings overloadedstrings always convenience useful one string want print zx spectrum screen bytestrings nice able input string recursivedo allows u define label used ie jump code come later file common idiom assembly programming following language pragma import optional give u access unicode symbol think happen look nicer blog language unicodesyntax move onto import course two common import give u assembler speccy utility package try define assembler close possible original assembly language syntactic difference cover moment result name prelude overloaded hide name get clash really need access original function always reimport prelude qualified actually use anything databits tutorial import redundant case include see name may hide make standard import finally import databytestring thing like test length string embed program import qualified databytestring b particular program embedded within single main function however make use one haskell datatype use codegenerating macro type defined inline let define use later data direction dup ddown dleft dright convenience also going put title screen global constant since rather long filename download title screen result unparalleled skill art sure agree need zx spectrum scr viewer view though titlescreen main function static data first line program proper set assembler rest code main defaultmain lambdaman titlescreen org mdo defaultmain provided zxspectrum package right fairly unsophisticated take name program filename loading screen zx spectrum standard scr format asmblock output side effect tap file ready load emulator future version may include commandline parsing thing like loading screen optional simple package provides type called represents state assembler function representing instruction code form edsl inside monad get asmblock need pas org set origin location label offset slightly different standard assembler org assembler directive could called time finally mdo open recursivedo block familiar recursive basically except use value defined loader code generated defaultmain default assume entry point application match first line assembly ie address pas org however often want define block static data modify program first begin execution made possible beginexecution directive set entry point address called may used program never used entry point assumed start allows u define following data without worrying spectrum trying execute labelled defb lambdamanscoretext labelled defb centipedescoretext lambdamanscoretext haskell variable use immediately define lmname area memory output binary containing value lambdamanscoretext later want query length useful store variable rather using literal go centipede represent label appear bottom screen note use labelled directive simply return location thing define argument reference would look like standard assembler lmname defb lambdaman cpname defb centipede haskell bit verbose make later macrodefining power onwards player x coordinate player coordinate player bullet coordinate flag player dead define state relating player plx ply represent player coordinate pbx pby represent coordinate bullet player fire dead simply tell u player killed original tutorial based swap x coordinate x describes far screen far across found confusing traditional coordinate system x horizontal vertical origin topleft screen another syntactic difference use haskell list notation passed defb defb take either bytestring list put value final binary file asis fairly obviously keep track score format byte per entry segment byte byte x vertical coordinate byte horizontal coordinate labelled defb replicate fromintegral numseg labelled defb numseg set space centipede segment comment describe format coordinate segment whether going left right already destroyed userdefined graphic finally let define asset graphic sound data used game back day used define new graphic zx spectrum zxspectrum package defines macro called udg perform calculation use define four main singlecharater sprite see take list string character long space considered anything else use character automatically generate byte representing character udgs defined one another memory moment put location beginning block memory special memory address udgloc tell spectrum rom look printing udg character sound effect sound zx spectrum least original version handled use simple squarewave beeper set oscillate certain frequency certain length time execution blocked sound effect le data function call setting appropriate register executing rom routine cause beeper oscillate appropriately named beeper however zxspectrum package provides couple macro help one use playseq take list pair specifying note duration generates function play note sequence execution blocked ingame sound effect keep fairly short interfere gameplay much sound effect designed tracked good friend alex may sfxstart labelled start game sfxhitc labelled hit centipede segment sfxhitm labelled hit mushroom sfxlost labelled lambdaman died sfxwon labelled centipede died comment describe effect sfxhitc sfxhitm run gameplay kept short sweet effect happen point game halted reason anyway afford play something longer since function really data course must end ret return exeution whatever called otherwise program counter keep running past data defined ready start game tell set entry point program syntax get heavily code like say brief word difference syntax traditional assembly code embedded assembler exposed package far possible tried keep two similar name operation identical exception keyword haskell rename difference bear mind already familiar assembly like start using haskell package operand separated space comma per haskell function syntax sometimes mean surround expression parenthesis none would required ok though pointer dereferencing done using square bracket instead round parenthesis sensible way detect presence absence latter haskell instead hijack list syntax represent dereferencing using empty list list one entry obviously work traditionally caseinsensitive haskell personally find separate namespace ie capital letter register rom memory location useful want able use lowercase label register ld opposed ld add import top file one way define label put string colon end first column three well labelled directive already seen also label closest equivalent standard labelling mechanism withlabel introduces scoped label allowing use name multiple label program useful loop everything else fall naturally standard haskell syntax go may show example two sidebyside get better idea initialisation two simple bit initialisation game start never need touch first set udg location print sprite second play game start sound alert user game finished loading get ready play ldvia hl udgloc udgs ldvia guessed standard assembler probably simplest example macro abstracting common pair operation arbitrarily load number memory load register first load register memory area wanted ldvia common included package use box ldvia also give u nice example using haskell make macro typesafe type signature ldvia load c load b b c say given loaded c b loaded well initial c produce assembly code load c load b type alias whether form typesafety actually useful debate traditional macro assembler macro would expanded assembly would fail type gymnastics make look like assembler mean error message get wrong le useful interesting type signature still useful documentation play intro sound calling function defined play setting play area set u ready start game next step clear screen currently loading screen set play area round game let make label jump back player win loses first step set default colour clear screen colour accomplished using couple helper function zxspectrum package setattrs attrdefault noflash bright paper black ink white first two line macro poke appropriate data right bit memory based parameter last line call clall routine defined spectrum rom clear entire screen next let write score screen bit diversion traditional centipede game battling centipede see destroy opponent time spoiler probably centipede every time play either lambdaman get hit dy incrementing centipede score counter lambdaman destroys ten centipede segment incrementing lambdaman score counter since score modified round get away rendering beginning round leaving untouched rather rerendering every frame save u precious cycle ld bc fromintegral bslength lambdamanscoretext let centipedescorestartx fromintegral bslength centipedescoretext setcursorpos centipedescorestartx ld bc fromintegral bslength centipedescoretext make use number standard spectrum rom routine accomplish prstring print string formed taking address stored de register n byte n number stored bc register printing number former print number bc register latter us hl register importantly rightaligns number faffing register used convince writing haskell writing highlevel code still bonafide assembler haskell give u powerful extensible macro system next step restore player centipede state second round onwards modified playing game need initialise decent starting value ldvia segsleft numseg ldvia hl plx coords xor performs xor whatever pas accumulator putting result back xor therefore really cheap way set since anything xor use trick set dead state meaning player alive also set number remaining segment equal total number segment restoring destroyed previous round lastly put lambdaman player starting position middle screen bottom row start moving right use b register x coordinate set initial state segment may scattered around previous round make use decloopb macro put number pas b register decrement every iteration using djnz operation drop reach final bit initialisation fill play area randomly scattered mushroom setattrs attrtemp noflash bright paper black ink green control code character get random number want vertical range want another pseudorandom number want horizontal range udg b mushroom graphic first set attribute ink set green colour mushroom world loop placing mushroom iteration code look complicated actually quite simple first print metacharacter followed x coordinate order coordinate randomly generated using random function define later range limited using binary arithmetic print finally print mushroom sprite udg value main loop ready run main loop game traditionally would define label put unconditional jump label end loop macro forever bit stretch naturally assembly jump loop part program time world goto astute reader may noticed use instead mdo define label within subblock need use label definition need make use recursive get label surrounding scope recursive regardless main loop mostly list call function define first thing want every frame delete player sprite redraw new position moved setcursorpos plx ply first set cursor position player position use wspace draw whitespace character current cursor position ready handle input two routine input handling though one necessary first us standard zx spectrum control q p space second us vimstyle control h j k l enter always active play whichever prefer function updated player position move key pressed ready redraw player current position setcursorpos plx ply set coordinate player position time instead using wspace draw empty character use splayr draw player sprite next bullet handling rather going lot detail leave inline comment intact take proper look function later check bullet position check new position bullet print bullet new position last thing need updating centipede segment delegate function processsegments finally endofframe handling put artificial delay otherwise game unplayably fast check winlose condition first check dead flag see nonzero killed jump gameover routine otherwise see number remaining centipede segment zero killed centipede go gamewon neither true still playing simply loop loopforever macro handle u simply end block handling input following two routine handle input going vim one first demonstrate something quite interesting zx spectrum keyboard work see key pressed pressed fire shift next bit l pressed move right pressed move next bit j pressed move finally next bit h pressed move left keyboard spectrum divided group five key could queried individual key accessed checking one bit time resulting value happens h j k l enter formed one group checking vim key done single query rotate accumulator one bit time calling function handle particular bit input time bit show key pressed standard spectrum control q p space different group keyboard generally first second key group although query keep bitshifting accumulator much real game would probably usermappable key much complicated keyboard handling routine result purpose perfectly adequate lambdaman ready start defining actual gameplay entity beginning hero player lambdaman following routine set cursor player position used delete character old position setting cursor prior moving player drawing whitespace draw character new position setting cursor moving player drawing character setcursorpos plx ply player drawing done splayr routine ascii code user defined graphic put lambdaman sprite right start setattrs attrtemp noflash bright paper black ink cyan majority player code spent implementing functionality enabled keyboard mapping first though going make little utility function check presence mushroom direction want move lambdaman stand top mushroom mushroom want return early move character let checkmushroom direction move position want check address attribute position mushroom bright green mushroom return early interesting thing note checkmushroom haskell function function program ie labelled block mean essentially act like macro traditional macro assembler code function generated callsite crucially mean ret z return function checkmushroom function output assembly instead return calling function turn exactly want drop calling function move enacted case move would result lambdaman standing mushroom case clear looking code way check mushroom simply poll attribute character green know mushroom green object game extremely primitive approach collision detection actually quite common early spectrum game current value yes ca nt go left ok first actual movement function mpl move player left principle fairly simple see pattern repeated next function basic idea load current value check left screen return check mushroom return finally made far decrement player x coordinate thus moving left function look familiar instead checking compare rightmost column instead decrementing increment otherwise basically could extracted pattern helper function like checkmushroom actually found enough difference writing code case ended clearer passing part change parameter function following function direction routine left define missile firing keep simple supporting one missile screen time missile position stored globally along player pbx pby player bullet xy missile offscreen ie missile set value check existence missile putting position register incrementing position wrap around know must screen return early without spawning spawn missile simply take player position increment value placing missile immediately player missile ok player fired missile need make something missile move steadily screen achieved simply decrementing coordinate every frame missile screen first perform increment check whether missile onscreen drop immediately onscreen subtract undo increment performed actually move missile finally load register value back pby next need handle collision detection missile mushroom deal centipede collision next section bchk routine check position missile hit mushroom destroys first checking coordinate make sure missile screen checking attribute location character green mean mushroom call hmush function destroy otherwise simply return hmush simple simply replace character whitespace play appropriate sound effect also set missile position back signify screen last step done within kilbul label jump elsewhere program hmush contains ret statement run straight call sfxhitm ldvia pby think like fallthrough case c switch statement like since label switch statement essentially goto label actually pretty accurate way think setcursorpos pbx pby draw missile follow pattern drew player bullxy set cursor position current position missile might screen setcursorpos pbx pby pbull routine check whether missile screen print sprite udg location clear missile using defbull routine distinct kilbul logically kill bullet setting position deleting bullet sprite current position screen changing location bullet within game logic defbull labelled kilbul run straight next function wspace actual clearing sprite current position function called number place code defbull advantage defined right next fall without paying cost function call setattrs attrtemp noflash bright paper black ink white note set colour whiteonblack may seem important since drawing empty space foreground white pixel display remember collision detection done using colour attribute left colour space would continue act invisible missile mushroom whatever centipede next deal centipede composed number segment centipede actually fairly complex though large segment work independently even appear connected together begin helper routine segxy performs job basexy bullxy set cursor position current segment setcursorpos want go segment ten process one one using trusty decloopb macro made use earlier segment contains three byte segment current status x coordinate current status three possible value moving left moving right disable segment destroyed loop go segment check whether status run proseg process segment otherwise skip proceeds next one processsegments labelled table segment data segment switched increment zero active process segment get next segment ix register crux centipede processing code happens proseg main loop quite highlevel routine delegate actual processing purposebuilt routine defined begin calling segcol check collision segment collision segcol turned segment check drop early happened otherwise clear segment previous position move segment new position segmov perform another collision check need check whether segment destroyed collision draw udg character c contains segment graphic segment collision detection check segment switched collision detection routine segment dead set segment coordinate display space white ink black new segment position collision check check segment switched collision detection routine segment dead set segment coordinate setattrs attrtemp noflash notbright paper black ink red remaining function therefore fall two category segment movement collision detection handling deal movement first segment moving either left right begin loading current coordinate register checking way moving moving left jump segml routine right fall next routine segmr two movement routine similar first check edge screen jump segmd move one line check attribute space one right see mushroom remember mushroom bright green jump segmd passed test obstacle increment x position move segment right segml almost identical use check left edge next define segmd previous two routine used move segment case obstacle edge screen whenever segment move reverse direction first thing check bottom screen jump segmt move u back top otherwise move regardless whether mushroom obstacle way prevents bug happening whereby mushroom form sort bucket trap segment final movement function set coordinate x coordinate wherever segment bottom line usually left right edge unless happened hit mushroom finally handle collision detection centipede segment already dealt mushroom cause centipede turn move screen remaining item segment could collide player killing scoring point centipede missile turn segment mushroom destroys missile hit first player segcol first compare segment position player either x position differ jump bulcol try missile collision instead fall following routine killpl set player dead flag checking collision missile similar collision check simply compare x coordinate either different know collision return get far missile collision call defbull delete missile graphic replace segment graphic mushroom finally call kilbul logically kill bullet setting coordinate also flag segment inactive still segment left play segment hit sound effect otherwise need play effect game sound play centipede utility couple utility made use game taken set tutorial got code rest game would useful game one first pseudorandom number generator cleverly us spectrum rom source randomness simply treat seed offset rom memory see fuller description original page code seed labelled defb utility come lot atadd calculates pair x coordinate location memory coordinate attribute extremely useful polling coordinate attribute basis collision detection original utility comment seen end condition ready wrap game last thing remaining deal two end condition either centipede killed lambdaman lambdaman killed centipede either case play sound effect increase appropriate score jump back gamestart begin next round gameover labelled ld hl centipedescore gamewon labelled game done way label work common last line program variable definition case gamewon course allowed haskell defines end alias return giving u expression end compile run program spit file called lambdamantap load favourite emulator
230,Lobsters,virtualization,Virtualization,My Little Cluster Story,http://carolynvanslyck.com/blog/2017/10/my-little-cluster/,little cluster story,diy netflix,anything satisfying putting computer good use would cluster computer story went chipping away archiving movie collection one dvd time running baremetal kubernetes cluster capable transcoding dozen day one night month back husband decided stream movie netflix something already owned dvd getting couch put dvd player hard silly bet remembered comcast recently imposed monthly bandwidth cap account felt whole lot silly suddenly woman mission save dvd could watch without getting couch honorable honorable quest indeed took quite weekend finally proud owner little ponytm cluster pictured simultaneously transcode five hd video three hour case power outage uncommon occurrence around everything reboot pick left without hiccup get little crazy buy node go assembled work horse minute gon na need horsepower go without saying ponypowered cluster gift unto getting finishing sideproject best part going skip exact step time howto step story serf purpose though showed final working setup may tricked believing said magical setup sprung fullyformed brainbox much case cool enough worked fit start long period inbetween thing like contribute os family binge netflix post picture cat instagram ever going finish needed change one thing time ideally completing piece end weekend way whenever found time work project thing needed identify next step never wanted stuck figuring chain wip still borked commits two stash handful uncommitted change remember making three week ago day life carolyn commit history true story actually finished something next diy netflix
232,Lobsters,virtualization,Virtualization,A 1 KB Docker Container,https://blog.quickmediasolutions.com/2017/09/28/a-1-kb-docker-container.html,kb docker container,proof caddydocker assembly syscalls signal handler setting signal handler handling signal building testing link githubcomnathanosmanhang comment powered disqus,typo joke created docker container containing single unix executable dependency occupies le kb space disk file included container even libc proof explaning accomplished worth explaining accomplished caddydocker another tool wrote explain detail route incoming request running container based label needed caddydocker act reverse proxy particular host easiest way spinning container whose sole purpose contain two special label container anything stopped came idea immediately began working application naming hang rather unusual purpose go easily produce executables dependency allowing docker container inherit scratch downside go executables tend massive even simple one often exceed mb size would never reasoned c application could easily written registered signal handler sigterm quit received unfortunately meant would need use libc turn meant container would quickly become comparable size go executable would provide advantage assembly yes quickest way produce tiny executable dependency write assembly prefer intelstyle syntax nasm obvious choice syscalls upon time back early day architecture syscall looked something like mov eax mov ebx int first line specifies syscall invoke sysexit case second line specifies exit value third line generates interrupt kernel process operating system later moved using sysentersysret introduced new aptly named opcode syscall similar example rax register used specifying specific syscall invoke example could rewritten assembly like mov rax mov rdi syscall note syscall number sysexit different signal handler registering signal handler fairly trivial c include signalh void handler int param int main struct sigaction sa sasahandler handler sigaction sigterm sa return unfortunately couple thing hidden c standard library flag sarestorer added sasaflags sasarestorer member set special function directly translate c code assembly since sigaction struct correspond one sysrtsigaction expects kernel struct look like nasm struc sigaction sahandler resq saflags resq sarestorer resq samask resq endstruc member size setting signal handler first must allocate space struct bs section section bs act resb sigactionsize note sigactionsize special value assembler creates u equal size sigaction byte struct initialized text section like section text global start lea rax handler mov act sigactionsahandler rax mov act sigactionsaflags dword sarestorer lea rax restorer mov act sigactionsarestorer rax handler restorer label come moment invoke sysrtsigaction syscall mov rax sysrtsigaction mov rdi sigterm lea rsi act mov rdx mov syscall handling signal next step waiting sigterm signal arrive syspause syscall easily accomplishes mov rax syspause syscall handler fairly trivial really anything restorer fairly simple well though need invoke sysrtsigreturn syscall restorer mov rax sysrtsigreturn syscall building two command required build application assuming source file named hangasm command nasm f hangasm ld hang hango produce executable named hang small stat hang file hang size yes byte dockerfile fairly simple requiring two command scratch add hang usrbinhang entrypoint usrbinhang testing let see container work docker build nathanosmanhang docker run name hang nathanosmanhang point container remain running docker p container id image command status nathanosmanhang usrbinhang second also immediately stop docker stop run work let make sure container large executable docker image repository tag created size nathanosmanhang latest minute ago really tiny container link find source code entirety githubcomnathanosmanhang please enable javascript view comment powered disqus
233,Lobsters,virtualization,Virtualization,Tutti II: The Tape-Enabled Tomy Tutor Emulator,http://www.floodgap.com/retrobits/tomy/xtomydev/tutti2.html,tutti ii tapeenabled tomy tutor emulator,tutti ii tapeenabled tomy tutor emulator something old becomes something new tutti simulator tutorem mess xtomydev tutti ii currently support nt support pyuuta pyuuta jr using tutti ii tape operation disassembler known bug ckaiser floodgapcom downloads good stuff download emulator download demo tape pyuuta gbasic cassette game download source code version history,tutti ii tapeenabled tomy tutor emulator finally first tomy tutor emulator load save tape image file transfer real tomy tutor section development version released september back xtomydev page back main page something old becomes something new tutti ii spiritual successor original tutti simulator first attempt model tomy tutor another platform case commodore however also actual successor another older emulator ian gledhill tutorem fact based source code bug endian fix tape support upgrade performance make descendant oldest attempt emulate unusual computer tutti ii designed replace mess tutor driver currently best dcsg video sound emulation emulator support cartridge image looking something play traffic jam example emulator want instead tutti ii programmer emulator hacking tutor term besides currently emulator reliably load save emulated cassette using xtomydevformat bitstreams transferred data recorder real tomy tutor also offer excellent tutorem debugger turbo processing mode ability snapshot running system tutti cassette acceleration read generates bitexact bitstreams perfect representation computer output second even slow system tutti ii available new bsd license reproduced copyright ian gledhill alu core derived code originally written mame project edward swartz initially converted mame coates updated r nabet conserved portion copyright mamedev contributor copyright cameron kaiser right reserved redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution neither name name contributor may used endorse promote product derived software without specific prior written permission software provided copyright holder contributor express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall liable direct indirect incidental special exemplary consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage tutti ii currently support nt support tutti ii support mac running higher powerpc intel including high sierra full emulation full sound emulation highly compatible video emulation full accelerated support cassette xtomydev bitstreams graphic basic mode builtin debugger standalone rom disassembler utility dutti basic joystick support builtin snapshot freeze facility turbo mode ballstowall processing tutti ii support yet roughly priority order multiple joy controller window linux operating system although tutorem originally window emulator nt access window compiler time around tutti maconly begin system dependent portion osx since tutti ii also based sdl portable many system would love accept port assuming break core mac port need add system dependent portion gui tape file io many interrupt location still understood subsystem actually trap execution certain location simulates operation instead rom pyuuta pyuuta jr system would like support system integration trap expect certain code entry point emulator core could used modification different point disassembled cartridge io parallel port emulating printer port nt hard though using tutti ii tutti ii application encapsulates necessary rom library start tutti ii includes copy tomy bios legally use emulator entitled already owning tomy tutor tutor display appear tutor keyboard fully emulated original position keyboard layout permitting mean double quote parenthesis equal sign etc handaku key plusequals key underscore tildebacktick key addition tutor put colon key next semicolon key respect tutorspecific key lock mapped left control mod right control right option keypad enter faciliate laptop layout may missing key mon backslash convenience delete also mapped left arrow key sort backspace shift key mapped tutor single shift key tutti also emulates single joystick numeric keypad inverted sends left right respectively sl dot sr tutti also defines certain specific key special function also access pulldown menu commandr reset emulator unsaved program data lost commandv paste clipboard emulator keystroke emulator smart enough toggle alpha lock support lower case pasting work gbasic basic mode character transparently converted assuming tutor equivalent character emulator translate emitted standard error andor system console depending run emulator sure alpha lock enabled ie default uppercase emulator may become confused mixed case text launch integrated debugger next available safe instruction may necessarily spot foul default current instruction displayed content memory three cpu register workspace register referenced wp debugger following e exit back normal execution singlesteps code debugger resume execution automatically debugger stop press toggle emitting instruction stream standard output monitor depending started emulator arrow key scroll memory display default scratchpad ram page updn jump bigger jump default cpuspace displayed see see vdp ram register press v return cpu memory register press c save current state emulator file file picker appear select filename saving emulated tape see load current state emulator file file picker appear select filename loading emulated tape see picking file emulator state corrupted likely deleterious session unlike tape load save saved emulator state file specific endianness host generated restore saved snapshot made power mac intel mac vice versa commandb toggle speed throttle turbo boost turbo default tutti ii emulates tutor roughly original clock speed inserting nanosleeps instruction necessary turbo nanosleeps inserted unthrottles clock speed irq also decoupled next option system wo nt wait screen update either useful slow code mode automatically turned tape operation see commandl toggle locking irq locking default appropriate number cpu cycle allocated frame locking cpu decoupled system clock irq activated rapidly possible make emulated tutor responsive keyboard input certain task cause system sound run quickly may interfere program expecting exact timing key may repeat easily mode automatically turned tape operation see command stop emulated tape emulator detected end data normally nt necessary see option typically disabled commandq exit emulator tape operation tutti ii detects cassette activity automatically attempt link bitstream file example basic program written attempt save save command within emulator file picker automatically appear select xtomydev bitstream written select file emulator reduce screen update unthrottle cpu causing tape operation complete within second save completed emulator return previous setting similarly attempt load file within emulator file picker appear select xtomydev bitstream use emulated tape input give filename argument load command tutor scan bitstream filename specifically filename given tutor load first file find usually want filename found error message appear emulator graphic mode filename required emulator nt care see known bug tape operation function identically graphic basic mode tutti ii detect tape activity environment tape acceleration extremely quick say even relatively slow imac graphic load save take three second practically instantaneous quad macbook air compare six minute real tutor typically tape operation automatically stopped started emulator tutti ii monitor tape irq activity however emulated tutor reacts badly tape operation emulator fails detect tape operation finished may need stop emulated tape command regain functionality dutti disassembler tutti includes dutti commandline disassembler tutor rom within application package run terminal prompt starting ending address decimal hex prefixed address end word boundary make sure tutor bin rom image directory known bug tutti ii nt yet support cartridge multiple joy controller etc following bug known border emulated displayed really issue basic gbasic however border almost always background colour loading defective snapshot may crash emulator well many weak point found probably graphic load trap load first file find even nt match filename provide real tutor throw form err considered feature failed load basic trigger err way entirely devoid side effect send comment new bug report ckaiser floodgapcom please attachment unless requested downloads good stuff download emulator zipped mac app compatible mac powerpc intel running higher tested tiger powerpc snow leopard sierra app signed user may need adjust security setting running app first time download demo tape includes selection game picture demo graphic basic graphic black white dithered image george seurat sunday afternoon island la grande jatte generated xtomydev graphic mode load bitm graphic colour dithered image painting also generated xtomydev load pict graphic colour dithered image lovely lady named jayne shown right also generated xtomydev load pict four pyuuta gbasic cassette game converted american tutor load boad plat mslz basic james host hail wizard kludgefinder colour bar sprite demo basic load bar sprite respectively canned music give minute two load data load canned macrossmind master mind clone clever programming let set video first load mind download source code warning includes resource fork includes medium asset special universal sdl dylib tutti us maximum compatibility build universal o x binary requires xcode sdk installed exactly sdl install developer framework type make version history tutti two two meet hooded fang source code refactor make system modular implement debugging custom sound emulation including noise channel massively overhauled emulation alu core modified mamemess fixed lot bug palette recalibrated numeric keypad key emulate joystick slsr decremeter actually work spec using custom algorithm decrementer irq independent vdp sync real system menu option sync system clock timing loop recalibrated real tutor screen update even faster screen update le frequent improve performancereduce tearing stuck final sync bit flushed fixing issue real machine load illegal instruction hit debugger includes basic color bug sprite scrolling top border longer display garbage potential crash sprite subsystem wallpapered lot old code removed bug fix new feature support paste keystroke altivec acceleration emulation display software altivec scaling multiple fix core display list sprite algorithm scanline correct fix crash tape save dialogue faster writes memorymapped io enabled key mapped backquote key additional alternate mod key keyboard without rightopt ibook etc numeric keyboard enter use shift key map shift improvement timing loop debugger emit instruction stream stdout toggled commandm actually minimize window stwp instruction correctly disassembled fix visual glitch glyph debugger initial release tutti ii initial release tutorem internal bookkeeping back xtomydev page back main page
234,Lobsters,virtualization,Virtualization,The Little Orphan: Tomy Tutor,http://www.floodgap.com/retrobits/tomy/,little orphan tomy tutor,little orphan tomy tutor also featuring grandstand tutor tomy pyuuta tomy pyuuta mk ii tomy pyuuta jr tomy corporation vintage computer festival complete photograph archive one little gem still worksyou still use even used one please get contact send mail ckaiser floodgapcom let trade information site new tomy tutor trade list general information tomy tutor cartridge hardware catalogue myth muddle marketing purcell pamphlet demonstration cartridge tomy tutor user club alone yahoo group tomy tutor archive pyuuta page pyuuta pyuuta mk ii mark two pyuuta jr pyuuta series history individual model grandstand tutor page pyuuta photograph tomy tutor scan picture rear port diagram keyboard diagram hardware schematic data recorder cable joy port centronics printer interface emulating tomy tutor tutti ii tapeenabled tomy tutor emulator tutti tomy tutor simulator programming tutor sample tomy tutor program exhaustive basic keywords list gbasic tutorial gbasic monitor keywords memory map xtomydev tomy tutor crossdevelopment tomy tutor cassette tape format page close ti tomy tutor tomy tutor toy tomy tutor typer tomy tutor play computer pyuutakun series old message archived steven stengel home computer hall fame oldcomputerscom pyuuta catalogue pyuuta palace junya kubota emailing first email link badly behaved robot harvester,new jump directly table content little orphan tomy tutor also featuring grandstand tutor tomy pyuuta tomy pyuuta mk ii tomy pyuuta jr last modify august lie probably major memorial obscure home computer part kid toy part graphic superstar part unknown clone tomy another computer fall wheel commodore know parent got commodore got tutor released tutor unlucky enough hit middle craze despite superior graphic fast efficient speed based around texas instrument processor blew away speed efficiency ala largely incompatible implementing fine graphic tm chip earlier relative tm powering coleco adam sord course series even builtin paint program since graphic good plus lot fabulous game information tutor discontinued many unit ultimately sold inquiry tomy corporation date ignored presumably one know computer even exists nowadays tomy tutor left tomy pyuuta right vintage computer festival click thumbnail fullsize jpg visit complete photograph archive one little gem still worksyou still use even used one please get contact send mail ckaiser floodgapcom let trade information site aug new site news hoof aug tomy tutor trade list nostalgic thing good tutor using mac instead tomy tutor tutor stuff trade ya oct general information summary capability characteristic history call minifaq could tutor well go aug tomy tutor cartridge hardware catalogue stock number game peripheral plus screen shot selected game easily identify perpetually update aug myth muddle marketing purcell pamphlet demonstration cartridge healthy dose tomy wishful thinking sold demo unit favourite store dulcet tone celebrity endorser sarah purcell find scoop tomy marketed parent feature advertised vapourware peripheral looked like happened jan tomy tutor user club alone official usa tomy tutor user club along downloadable newsletter adobe pdf yahoo group tomy tutor archive yahoo tomy tutor user group spiritual successor user club got message archived posterity internet never forgets even want pyuuta page pyuuta pyuuta mk ii mark two pyuuta jr includes jan pyuuta series history subpart individual model complete disassembly scan photograph screenshots nothing beat original special dedicated section let see japanese remixes console version glory plus aug demonstration cartridge even translate japanese ya sep grandstand tutor page mysterious uk tutor far yet unseen perhaps unlabeled well check picture photograph image wonderbox also see pyuuta section image unit subpart jan photograph tomy tutor picture main unit box packaging port cartridge peripheral plus check goody inside disassembling tutor section highresolution photograph internals apr scan picture rear port diagram keyboard diagram fully annotated diagram manual showing hook tutor key sep hardware schematic hardware brief illustrative schematic main board also contains information port connector data recorder cable joy port centronics printer interface jun emulating tomy tutor yeah yeah little warez leech emulate fit polish tutor deep purple butt want play free game however want get tomy running modern macintosh pc show plus sep tutti ii tapeenabled tomy tutor emulator typing old program chiclet keyboard got six minute waiting picture data recorder make want bang head wall got mac got saviour first tutor emulator load save tape file compatible real hardware demo tape image included check xtomydev cool crossdevelopment tool sep tutti tomy tutor simulator better emulator tutti original tomy tutor simulator longer updated ca nt legally get rom another emulator still download use tutti instead commodore compatible emulator required dead serious includes tutti neveraskedbutshouldbequestions document get freeware honest nt need rom honest jul programming tutor last comprehensive comparison keywords error message exhaustive vocabulary list memory map selected subpart apr sample tomy tutor program learn tutor programming example comfort home lot program useful simple tool thorougly baffling hack sep exhaustive basic keywords list complete list keywords operator token tomy basic jan gbasic tutorial tutorial comparison gbasic conventional basic dialect apr gbasic monitor keywords probably complete list known monitor command gbasic keywords analysis internal gbasic structure known token jul memory map know stick uh stuff cover vdp real ram jun xtomydev tomy tutor crossdevelopment tomy tutor cassette tape format page tutor like man longer island use data recorder send receive data desktop computer tomy tutor includes tool detokenize basic gbasic program convert graphic image even encode graphic bitmap gpl gbasic separated birth jan close ti tomy tutor enough call texas instrument series home computer brother ti cpu vdps investigate aug tomy tutor toy tomy tutor typer tomy tutor play computer pyuutakun series bonus feature go show ca nt beat em join em meet toy gave tomy tutor name toy even coinop pyuuta tomy tutor later spawned also check tutor luminary past present accumulating online tomy tutor user group replacing old yahoo group meeting place verizon medium announced shutdown old message archived also steven stengel nice page tutor chris stratford entry tutor home computer hall fame uk variant grandstand tutor cool also complete entry tutor olivier boisseau oldcomputerscom finally check complete pyuuta catalogue gone great wayback machine sky read japanese sure see remnant outstanding pyuuta palace pyuuta yakata check tidbit pyuuta sighting tokyo disneyland junya kubota pyuuta page see japanese remixes glory except otherwise credited image writeups mine cameron kaiser right reserved feel free use data picture page emailing first long credit proper link made site source worth tomy tutor applicable software peripheral design tomy corporation carson california right reserved send email doggone people like parent thought tutor harmless toy link badly behaved robot harvester
235,Lobsters,virtualization,Virtualization,Xen: Unicore Subproject Proposal,https://lists.xen.org/archives/html/xen-devel/2017-09/msg00670.html,xen unicore subproject proposal,date prev date next thread prev thread next date index thread index xendevel rfc unicore subproject proposal committers xxxxxxxxxxxxxx committers xxxxxxxxxxxxxx xendevel xxxxxxxxxxxxxxxxxxxx xendevel xxxxxxxxxxxxxxxxxxxx xenapi xxxxxxxxxxxxxxxxxxxx xenapi xxxxxxxxxxxxxxxxxxxx mirageosdevel xxxxxxxxxxxxxxxxxxxx mirageosdevel xxxxxxxxxxxxxxxxxxxx miniosdevel xxxxxxxxxxxxxxxxxxxx miniosdevel xxxxxxxxxxxxxxxxxxxx felipehuici xxxxxxxxx larskurth xxxxxxxxxx julianchesterfield xxxxxxxxx julianchesterfield xxxxxxxxx rshaposhnik xxxxxxxxxx rshaposhnik xxxxxxxxxx saverioniccolini xxxxxxxxx stefano xxxxxxxxxxx stefano xxxxxxxxxxx alexanderdubinin xxxxxxxxx alexanderdubinin xxxxxxxxx juliengrall xxxxxxx juliengrall xxxxxxx simonkuenzer xxxxxxxxx volodymyrbabchuk xxxxxxxx volodymyrbabchuk xxxxxxxx http xenbitsxenprojectorg attachment attachment http listsxenorgxendevel,date prev date next thread prev thread next date index thread index xendevel rfc unicore subproject proposal committers xxxxxxxxxxxxxx committers xxxxxxxxxxxxxx xendevel xxxxxxxxxxxxxxxxxxxx xendevel xxxxxxxxxxxxxxxxxxxx xenapi xxxxxxxxxxxxxxxxxxxx xenapi xxxxxxxxxxxxxxxxxxxx mirageosdevel xxxxxxxxxxxxxxxxxxxx mirageosdevel xxxxxxxxxxxxxxxxxxxx miniosdevel xxxxxxxxxxxxxxxxxxxx miniosdevel xxxxxxxxxxxxxxxxxxxx felipe huici felipehuici xxxxxxxxx date thu sep acceptlanguage enus dede cc lars kurth larskurth xxxxxxxxxx julianchesterfield xxxxxxxxx julianchesterfield xxxxxxxxx rshaposhnik xxxxxxxxxx rshaposhnik xxxxxxxxxx saverio niccolini saverioniccolini xxxxxxxxx stefano xxxxxxxxxxx stefano xxxxxxxxxxx alexanderdubinin xxxxxxxxx alexanderdubinin xxxxxxxxx juliengrall xxxxxxx juliengrall xxxxxxx simon kuenzer simonkuenzer xxxxxxxxx volodymyrbabchuk xxxxxxxx volodymyrbabchuk xxxxxxxx deliverydate thu sep listid xen developer discussion xendevellistsxenorg threadindex threadtopic rfc unicore subproject proposal dear following discussion simon kuenzer several last xen summit submitting xen subproject proposal based unicore work could please review thanks felipe huici simon kuenzer nec lab heidelberg proposal unicore role project lead simon kuenzer simonkuenzer xxxxxxxxx main lead felipe huici felipehuici xxxxxxxxx colead florian schmidt florianschmidt xxxxxxxxx colead project mentor lars kurth larskurth xxxxxxxxxx project sponsor found background recent year several paper project dedicated unikernels shown immense potential performance gain leveraging specialization use minimalistic os unikernels able yield impressive number including fast instantiation time ten millisecond le tiny memory footprint mb even kb high network throughput gb high consolidation eg able run thousand instance single commodity server mention reduced attack surface potential easier certification unikernel project worthy mention include mirageos clickos erlang xen osv halvm minicache among others fundamental drawback unikernels require application manually ported underlying minimalistic o eg port nginx snort mysql memcached minios osv requires expert work often considerable amount time essence need pick either high performance unikernels porting effort decreased performance decreased efficiency standard osvm image goal proposal change status quo providing highly configurable unikernel code base call base unicore project also aim concentrate various effort currently going xen community regarding minimalistic os essentially different variant minios think splitting community across variant counterproductive hope unicore provide common place improvement customizations minimalistic os long term goal replace something like minios tool automatically build minimalistic o unicore unikernel core high level goal unicore able build unikernels targeted specific application without requiring timeconsuming expert work building unikernel requires today additional goal hope unicore developer interested unikernel development would contribute supplying library rather working independent project different code base done main idea behind unicore depicted figure consists two basic component attachment unicoreonesliderpdf figure unicore architecture library pool would contain library user unicore select create unikernel bottom library pool organized architecture library tool containing library specific computer architecture eg mips platform tool target platform xen kvm bare metal ie virtualization userspace linux main library pool containing rich set functionality build unikernel last library includes driver virtual netbacknetfront physical ixgbe filesystems memory allocator scheduler network stack standard libs eg libc openssl etc runtimes eg python interpreter debugging profiling tool pool library constitute code base creating unikernels shown library relatively large eg libc quite small scheduler allow fair amount customization unikernel unicore build tool charge compiling application selected library together create binary specific platform architecture eg xen tool currently inspired linux kconfig system consists set makefiles allows user select library configure warn library dependency met addition tool also simultaneously generate binary multiple platform example imagine user wanting generate network driver domain unikernel case would assume application netback driver select application user would first run make menuconfig within netback application folder makefile would set variable indicate application would include main unicore makefiles unikernel built step figure using menubased system user chooses relevant library xen driver domain would include physical network driver netback driver libxenplat library library architecture library pool step figure place user save configuration type make build unikernel step xl create run step note abiapi unicore allows customization unikernels abi api since kernel would custom defined library user selected said would perfectly possible instance build posixcompliant unikernels relevance xen community unikernels important number area relevant xen community including iot automotive stub domain driver domain disaggregation unicore could help boost progress area quickly providing necessary tool create unikernels instance driver domain user would include library containing relevant hardware driver corresponding backend driver principle unicore would take care rest addition unicore could eventually replace minios providing cleaner stable flexible base build unikernels project modularization minios fact already taking place current status unicore early stage includes base library code extracted minios well build tool inspired linux kconfig system unicore currently able build hello world unikernels xen linux user space incubation reason behind making unicore xen subproject project bring existence unicore attention xen community outside world attempt harness interest potentially development cycle people company interested unikernels concentrate maintenance resource people interested unikernels within community license main license runtime component unicore bsd license unless good reason use eg may import bsd licensed code minios would anticipate change makefile system would licensed gpl later want able use kconfig functionality buildrootlinux required infrastructure official repository created http xenbitsxenprojectorg unicoregit main repository core unicore implementation additional repository advanced extension library eg lwip newlib main repository unicoregit repository extension library repository additional library supported unicore project exist separate directory unicorelibs example unicorelibslwipgit unicorelibsnewlibgit mailing list beginning would use minios mailing list miniosdevel xxxxxxxxxxxxxxxxxxxx get traction unicore could consider splitting traffic onto unicore mailing list dr felipe huici chief researcher networked system data analytics group nec laboratory europe network research division kurfuerstenanlage heidelberg tel fax email felipehuici xxxxxxxxx nec europe limited registered office nec house victoria road london registered england attachment proposal unicorepdf description proposal unicorepdf attachment unicoreonesliderpdf description unicoreonesliderpdf xendevel mailing list xendevel xxxxxxxxxxxxx http listsxenorgxendevel
236,Lobsters,virtualization,Virtualization,Wandering through the Shady Corners of VMware Workstation/Fusion,https://comsecuris.com/blog/posts/vmware_vgpu_shader_vulnerabilities/,wandering shady corner vmware workstationfusion,background announced various exploit past attack surface kostya kortchinsky lokihardt hammer drag n drop attack surface host component iscdhcpd rpcrpci backdoor vulnerability openvmtools vmdb figure leftover symbol linux vmwarevmx documented risk documented peripheral virtualization mesa targeted finding shader vulnerability svga graphic driver sample shader program architecture hlsl figure rough architecture shader stage execution example creating shader input hlsl compiled frida interceptor presentation metalkit finding vulnerability dxdefineshader dxbindshader definesurface figure command string figure command table definition parsing shader bytecode figure description finding buffer outofbounds heap write translating dclindexabletemp opcodes dclindexabletemp instruction outofbounds stack buffer write translating dclresource opcodes dclresource instruction insecure memory mapping leading dep bypass dclindexrange dclconstantbuffer http githubcomcomsecurisvgpushaderpocs bit byte different variant bug hunting different variant ease setting pie changemachoflagspy binary translation binwalk figure symbol embedded elf closing word advisory,background midjanuary zero day initiative announced rule version contest including considerably high reward owning vmware performing escape guest host vmware new target first included target vmware target already suffered various exploit past reasonably large attack surface interestingly fair share serious vulnerability could used guest escape uncovered back starting roughly work kostya kortchinsky lokihardt targeting vmware virtual printing draganddropcopyandpaste functionality since researcher continued hammer vmware thinprint cortado drag n drop development interesting passive observer point view least u raised question rich vmware attack surface day part good target vulnerability discovery despite continuous flow vulnerability none team demonstrated guest escape back even though typical desktop software vmware would usually fit area research quite interested challenge figuring hard actually would find vulnerability vmware time given rough scope month parttime work peak unfortunately finish exploit time find serious vulnerability wanted use chance outline road finding exploitable bug vmware attack surface without prior detailed knowledge vmware actually clear u make sense attack make sense look issue instruction emulation much emulated anyway given cpu support virtualization since want reduce likelihood clash else printing guesthost interaction dndc p following roughly found per rule vulnerability must reachable unprivileged user within guest o host component vmware workstation fusion consist multiple part gui least interesting hood consists kernel module host guest side vmnetvmci least thnuclnt virtual printing vmnetdhcpd vmnetnatd vmnetnetifup vmwareauthdlauncher vmnetbridge vmwareusbarbitrator vmwarehostd importantly vmwaretools within guest almost host process run privileged process making interesting target exploitation virtual printing exploited multiple time past vmnetdhcpd caught interest contained trace iscdhcpd run root interestingly old version specifically vmwaredhcpd based around early hope good target however destroyed verifying presence known old vulnerability became clear vmware seem aware attack surface invested time backport fix newer iscdhcp release fork giving early additionally decided fuzzrun based qemu afl small set binary patch vmwaredhcpd month fuzzing yield interesting bug however besides minor hang vmwarehostd also interesting process provides webserver reachable within vm mostly used vm sharing however instead drilling deeper additional host software decided turn interest back core part vmware vmwarevmx main hypervisor application running host vmware process run rootsystem expose several interesting feature fact exists two flavor vmwarevmx vmwarevmxdebug latter used debugging enabled within vmware setting important reverse engineering vmware actually lot easier start vmwarevmxdebug due excessive presence debug string best suited however actual vulnerability hunting see later rpcrpci ever wonder draganddrop file vm host desktop rpc come play vmware internally offer socalled backdoor interface port provides mean guest communicate vmwarevmx apis issuing io instruction inout within guest passing vmware specific magic value register vmware internally evaluates additional passed argument io instruction usually privileged however particular port backdoor interface one exception number additional exception however limited numerous additional validation issuing backdoor command eg absmousecommand determine execution originates privileged guest account top backdoor interface vmware implement rpc service used exchange data host guest guest side rpc service used issuing backdoor command vmwaretoolsd case ever wondered certain feature work installed vmwaretools combination x linux driver code userspace utility make possible original backdoor interface allows passing data register large amount data quite slow account vmware introduced another backdoor port host highbandwidth backdoor actually used day rpc allows passing pointer data vmwarevmx use readwrites rather repeatedly issuing instruction derek also found pretty interesting vulnerability idea behind rpc interface provide command opening channel send command length send bulk data receive length reply receive reply bulk data finish interaction close rpc channel might wonder prevents process mess rpc interaction others opening channel vmware creates two cookie value required sent send receive command far judge generated securely simply two dwords also compared using memcmp comparison routine security impact top vmware implemented rpc command handler dnd cnp unity used using window native host window setting information much subset command available privileged guest user guest side rpctool provided vmwaretoolsopenvmtools importantly rpcoutsendone function used interact api simple example store obtain guest information rpctool infoset guestinfofoobar baz rpctool infoget guestinfofoobar baz illustrates storing information within vmwarevmx later retrieving detail data storage go beyond scope post vmware internally us vmdb key value store working path ability attach callback certain piece data number rpc command allowed unprivileged guest user however quite limited easy come complete list rpc command version o specific also subject configuration setting easiest way get list currently active command dumping command table runtime memory kindly enough linux version vmwarevmx actually offer symbol make easy commandsptrcommands figure leftover symbol linux vmwarevmx interesting attack surface u interface seemed indeed drag drop c p unity reason go twofold first lokihardt already targeting pwnfest success expected others explore particular area find bug importantly though feature unity virtual printing allowed documented risk expected vmware zdi mostly interested guest escape require feature switched security conscious user isolation setting rule provide detail regard configuration setting intention result turned interest away rpc worth mentioning though irrespectively rpc interface general use vmware exploitation provides useful primitive heap massaging also documented marvel team peripheral virtualization left attacksurface wise besides vmware core code around virtualization instruction provide virtualization layer various peripheral guest includes network audio usb bluetooth disk graphic combination userspace service guest kernel driver code within vmwarevmx responsible provide virtualized device feature example vmware provides svga graphic card adapter within guest act pci display device driver linux come modification x code part mesagallium kernel driver called vmwgfx issue ioctl system call ultimately layer vmwarevmx act command latter also provides interesting set command previously targeted kostya assumption virtualized peripheral provide enough attack surface activated default modern system since looking feature rich attack surface enabled default nontrivial impossible fuzz reasonably easy dive decided look graphic finding shader vulnerability since competition platform going running vmware workstation window focused graphic interaction window rather linux worth noting though presence open source implementation vmware graphic driver portion within gallium svga code helped tremendously analyzing portion within vmwarevmx likewise microsoft graphic driver sample helped understanding display driver work window first place others targeted svga command wanted dig level deeper look part featured functionality rather included significant complexity translation gpu shader program furthermore significant advantage targetting shader bytecode raw svga command shader bytecode fed vmwarevmx guest userland linux mac o shaders translated opengl window translated action vmware support number different guest operating system different kind native shader code need translated host shader action expected come significant complexity space introducing vulnerability original analysis based vmware workstation architecture two different virtual gpu implementation exist vmware socalled corresponding directx implementation used older window guest linux guest vgpu implementation used window guest accelerated graphic vmware us wddm window display driver model driver window guest driver consists userspace kernel space part userspace portion implemented within kernelspace driver using shader actual shader code go several layer translation usually shader first compiled socalled hlsl high level shader language file bytecode representation vmware providing virtualized support bytecode used directly instead need translated direct api need make use respective vendorspecific implementation shader code userspace driver implement callback stored structure used communicate transform bytecode vendorspecific api case vmware provides api define set shaders flushing shader code userspace driver go pfnrendercb callback kernelspace driver window application making use gpu shaders first foremost utilize window api provides apis compile shader code file set different type shaders eg vertex render scene rough translation path look follows figure rough architecture shader stage execution number additional small detail hood number internal apis involved quite large interested reader get better idea looking example provided microsoft windbg tracing execution path windbg wt command x f b c e f g h j k l n p q r u v w x z initdevice void initwindow struct hinstance int invokemain void initializeenvironment void ispotentiallyvalidimagebase void isdebuggerpresent parameter info initializeslisthead parameter info isprocessorfeaturepresent parameter info bp initdevice g breakpoint hit initdevice push ebp wt l tracing initdevice return address initdevice getclientrect creating shader input interacting vmware shader implementation important understand write shaders first place writing shaders directx done using high level shading language hlsl compiled bytecode using api fxcexe program depending shader model used hlsl provides different type shader feature shader model assembly bytecode form output hlsl compilation vmware currently seems support internally important reviewing translation implementation within vmwarevmx little unfortunate current version window support anymore write shader code assembly instead hlsl result crafting precise input triggering vulnerability turn bit tricky also important note performs sanitization shader input fiddling compiled shader object cso file tricky specifically cso file contain checksum would need fixed api check dxbcverifyhash get position feed vmware arbitrary shader bytecode instead leveraged excellent frida tool hook modify shader bytecode step taken specifically fed arbitrary shader bytecode vmware changing compiled bytecode memory move memory reverse engineering determined location respective memmove hooked following excerpt frida code used var modulefindbaseaddress consolelog base address function addr var idabase ptr var ptr addr sub idabase var re consolelog translated ptr addr re return re function start var memmoveaddr var setshaderreturn interceptorattach memmoveaddr onleave function retval thishit return thisdestaddradd onenter function args var shadertype args add thisreturnaddresscompare setshaderreturn shadertype return thisdestaddr args thissrcaddr args thislen args thishit code listing us frida interceptor feature hijack flow execution calling memmove inside every time code enters memmove return value compared match address within setshader function match destination memory patched crafted shader bytecode leaving memmove want compete fuzz farm due rather convoluted setup various translation step fuzzing somewhat inconvenient approaching target least current setup window host o worth noting research noticed marco grassi peter hlavaty given presentation shader fuzzing obvious presentation later found vmware released small baremetal o called metalkit also come shader example seems basis fuzzing approach finding found finding vulnerability vmware still quite large piece software know hard identify shader translation routine within vmwarevmx essentially two direction approach problem identify shader translation directly follow command handler specifically handler dxdefineshader dxbindshader definesurface etc relatively easy find string table containing found within binary used function translating command id string figure command string lead directly respective handler looking eg svgadxcmd string find several function cross reference another large table memory figure command table labeling table using offset string table reveals concrete handler ultimately used control shader operation following lead u shader parsing translation code internally command fifo kernel driver vmwarevmx used push command hypervisor routine first pull data call internal processing routine get directly shader code instead two way first utilizing string contained vmwarevmxdebug allows go directly shader parsing translation code followed crossreferences string initially auditing debug version vmwarevmx shader vulnerability big drawback contains check present vmwarevmx quite sure whether oversight vmware caused time auditing vmwarevmx seemed omnipresent pattern numerous security critical check shader parsing translation code would present debug variant instead searching specific immediate operand find code nondebug version nice side effect definition used make respective code ida much readable thanks mesa driver easy know value look specifically definition quite useful analysis idb annotation vmwarevmx need translate guest shader code host shader code first par packed shader code created vmware library within guest reverse engineering functionality also crafting meaningful input verification took u time also due lack low level documentation shader bytecode blog post tim jones helpful parsing shader bytecode thank initial parsing specific opcode relatively simple majority opcodes function store away argument figure parser code operates raw bytecode data similar classic tlv parser overall shader code come length allows parser know stop parsing opcode come type instruction length value specifically opcode header dword bit determine opcode bit used encode opcodespecific data bit encode opcode data length bit denotes opcode extended opcodes opcodes contain value fit single byte parser part copy byte value internal custom data structure largely unknown u one tokensopcodes exception contains variablelength buffer constant seen dclimmediateconstantbuffer description mentioned internal data structure used part unknown u however finding vulnerability within translation step matter used offset within data structure result mostly straightforward audit binary knowing input altogether still time consuming step multiple reason first without prior knowledge shader code vmware graphic virtualization took time arrive point first place second testing hypothesis crafting test shader bytecode straight forward due lack ability write assembly directly instead manually patched bytecode memory using aforementioned frida approach lastly understanding instruction detail mapping understanding encoding opcodes beast besides debugger host one aspect also helped u reverse engineering work namely debug variant vmwarevmx lot assert statement help understanding error function also feature shader disassembler dump shader code vmware log finding let look issue found manual reverse engineering work reported issue pocs zdi march parsing token defines immediate constant buffer following pseudocode snippet executed case dword opidx dword dword opidx insnl customdataalloc void mksmemmgralloc unsigned int insnl int overflow safe qword opidx customdataalloc memcpy customdataalloc bctmpptr unsigned int opidx insnstart int bctmpptr case insnl represents immediate encoded customdata instruction special case regular shader instruction use length value length value denotes number dwords follow within customdata block restriction length code path making sure outofbounds read occur original shader bytecode using custom allocator wrapper mksmemmgralloc internally us calloc heapbuffer size allocated function calloc provided interestingly observed library always mapped lowest virtual memory subsequently immediate constant data copied buffer calloc function window go rtlallocateheap end allocating nt heap shall refer allocated buffer outbuf following constant data also control attacker allocation buffer translation stage entered upon encountering token function called performs following memcpy without check result memcpy outbuf customdataalloc len customdataalloc buffer allocated parsing stage indicated allows writing controlled data adjacent heap chunk value stored within aforementioned internal data structure parsed opcodes resides area well outofbounds heap write translating dclindexabletemp opcodes processing dclindexabletemp instruction shader parsing routine first us following pseudocode case dword opidx insnstart index dword opidx insnstart index value array write operation trans bctmpptr insnstart dword opidx insnstart see value written opidx part encoded instruction reused later translation phase restriction actual value parsing stage following code show translation step case dword bytecodeptr opidx dword bytecodeptr opidx idx dword bytecodeptr opidx val see exact index value reused calling variable idx val directly attacker control parameter function derived third dword original instruction following code function fastcall unsigned int idx int val char result rax const char rcx const char rsi signed rdx dword idx val byte idx byte idx result idx return result listing heapbuffer come translation routine structure allocated used aforementioned custom data case different bug issue allows u use dword writeoffset within buffer starting offset vulnerability give u capability writing controlled dword arbitrary dword index within aforementioned heapstructure next written byte aforementioned value based original shader code instruction content one byte byte remaining zero outofbounds stack buffer write translating dclresource opcodes translation stage processing dclresource instruction following code snippet executed int hitme int char bool char int case dword dword dword dword outptr dword hitme unsigned unsigned int dword fully dive detail call hardly matter influence stack overwrite targeting hitme variable case index dword fully controlled input shader bytecode value written partially controlled hold value mean write aligned dwords use plural since bug triggered multiple time value address located address hitme exploitability depends target vmware version obviously stack layout different different platformsversions insecure memory mapping leading dep bypass vmwarevmx hypervisor process first start several memory mapping created surprisingly one mapping created read write execute permission remains lifetime process memory segment hold true mapping created first page data segment vmwarevmx process obviously significantly easens exploitation vmwarevmx guesthost escape providing nice area place execute shellcode memimage memcommit pageexecutereadwrite image vmwarevmx c program file vmwarevmware dq l ffffffff ffffffff fffffffe visible memory mapped readwriteexecutable qword dump windbg meant show indeed matching data section seen ida data segment para public data ff ff ff ff ff ff ff ff fe ff ff ff df cd ff ff f v v v v v v v v v v v v v pv v time found first two vulnerability even contest remained unfixed shortly vmware made another release part killed first two heaprelated issue detail advisory rather vague know issue knowingly fixed case due aspect mentioned earlier namely debug variant vmwarevmx various error check production version specifically realized issue fixed assert check two issue one theory would assume fixed accidentally internal finding part cleanup according zdi clash submission mention zdi report result know cve id specific flaw researcher found however worth noting assert pattern lack thereof nondebug also affected instruction confirm least dclindexrange dclconstantbuffer similar heap outofbounds writes dclresource vulnerability remained unfixed addressed research together do aspect vmware esxi also affected patched memory corruption also covered currently believe initial fix due internal code reorganization specifically report lead belief fact fixed exact code debug version using assert statement rather robust error handling result could still used crash vmware hypervisor pocs issue found http githubcomcomsecurisvgpushaderpocs bit byte closing post would like leave bit found helpful work hopefully helpful others well particularly following aspect different variant bug hunting vmwarevmxdebug variant easier getting started reverse engineering contrary vmwarevmx nondebug variant useful vulnerability hunting different variant ease reverse engineering vmwarevmx linux version particularly oddity related function inlining make work much cumbersome mac window ultimately surprise found window version easiest reverse engineering work linux version flip side contains symbol useful setting vmware useful setting interacting shaders specifically found mksshimdumpshaders mksgldumpshaders useful likely many pie linux version vmwarevmx work removing pie flag within elf binary mac o x work using changemachoflagspy script make debugging lot convenient binary translation still wondering within vmwarevmx code related emulate instruction kind assumed approaching target would quickly stumble upon accident yet seen code early one theory hardware virtualization however vmware run multiple mode depending setting underlying host architecture needed somewhere point noticed something look like elf header memory simply using binwalk tool would normally rather use regular pe elf executable turned something interesting binwalk vmwarevmxexe decimal hexadecimal description microsoft executable portable pe elf lsb relocatable amd version sysv elf lsb relocatable amd version sysv unix path sega megadrivegenesis raw rom dump name tsbase etableva sega megadrivegenesis raw rom dump name frommpn elf lsb relocatable amd version sysv elf lsb relocatable amd version sysv elf lsb relocatable amd version sysv elf lsb relocatable amd version sysv elf lsb relocatable amd version sysv seemed weird ignore even though admittedly binwalk false positive sure one biggest elf looked interesting contained significant portion functionality important contain symbol figure symbol embedded elf surprise seem embedded elf carrying disassemblytranslation unit drill used target mostly curious hope might interesting avenue others research closing word sadly succeed original goal putting together full guesttohost escape time quite satisfied finding time set believe vmware workstation interesting target vulnerability discovery three major guesthost platform also different regular desktop software despite hypervisor nature based finding screening part attack surface also believe remains severely underexplored target considering complexity widespread use example barely scratched surface internal shader translation many code path related specific shader operation eg emitting new vertex p shaders left explored likely carry significant additional complexity similarly appears component hit since long time also considering code seen vmware past security advisory lot defense work appears reactive rather proactive day besides core component remain interesting host component exploration vmwarehostd carry webserver ssl support one example looking forward security research around hypervisor solution invite others look well
237,Lobsters,virtualization,Virtualization,Leave your OS at home: the rise of library operating systems,https://www.sigarch.org/leave-your-os-at-home-the-rise-of-library-operating-systems/,leave o home rise library operating system,dijkstra multiprogramming system data center workload protection associated overhead modularity generality page table structure exokernel libos o exterminates o abstraction microkernel trust verify new generation singleapplication liboses dpdk high performance server ix arrakis lightweight virtualization compatibility layer scone graphenesgx eleos accelerated system gpufs gpunet centric o architecture hardware implication attack author mark silberstein disclaimer,efficiency operating system os always spotlight system researcher ever since seminal dijkstra multiprogramming system early reason obsession entirely obvious o commonly perceived layer application hardware view somewhat misleading least respect cpu application code run cpu without o mediation o intervenes management event ie process preemption access shared resource ie file network io one may wonder much o code actually get executed turn data center workload cpu cycle spent o kernel indeed workload io intensive thus stress multiple o component device driver networking file io stack o scheduler managing thousand thread taken isolation piece o code usually highly optimized however system whole suffers several inherent performance issue direct implication design principle underlying traditional os protection execution path application o go two protection domain virtual machine thus incurs world switch usertokernel mode back associated overhead modularity numerous layer abstraction o design essential tame complexity crossing layer might expensive often require extra data copy impose overhead associated software encapsulation generality o mostly oblivious application logic runtime state thus offer general mechanism policy well suited specific application example application might benefit custom page table structure rather radix tree overcoming limitation requires radically different o design give developer power cut abstraction layer implement applicationspecific core o abstraction without compromising state protection performance isolation exokernel libos highly influential work dawson engler et al introduced exokernel o architecture exterminates o abstraction empowers application developer build secure efficient way applicationspecific o service encapsulated library o libos running user mode part application address space sharing liboses among application shared service file system must implemented shared server microkernel design underneath privileged exokernel core provides minimalistic set hardwarelevel interface multiplexing hardware among application exokernel play trust verify game allocates resource application critical path enforces allocation runtime low overhead management within boundary allocated resource left applicationspecific libos implement basic abstraction service including virtual memory scheduler file system network stack endresult remarkably extensible o architecture minimizes completely eliminates performance downside traditional o design new generation singleapplication liboses despite overwhelming change hardware software landscape since paper publication concept introduced exokernel ever relevant today emergence highspeed lowlatency io device shift performance bottleneck hardware o software management layer motivates unmediated application access hardware example userspace networking library ie dpdk enable direct application access nic io buffer bypass o entirely broadly used performancecritical application packet processing one key enabling technology make singleapplication liboses practical hardwareassisted virtualization simplifies task providing strong isolation among multiple application cpu peripheral however several domain liboses turn good match common use case briefly outlined high performance server ix arrakis earned best paper award conference two recent example os implement exokernel design principle modern hardware virtualization support availability sophisticated qos isolation mechanism modern io device originally introduced virtualization enables completely remove o logic data plane paper provide number interesting insight missing hardware feature necessary fully realize vision osfree data plane lightweight virtualization unikernel design highly specialized libos compiled application enabling resulting fat binary invoked baremetal physical virtual machine unikernels lightweight design include small subset o logic best suited application require strong isolation virtual machine radically faster deployment tiny o memory footprint compatibility layer intel software guard extension sgx implement shielded execution environment called enclave design allow application perform system call unmodified application run enclave sgx liboses scone graphenesgx introduce compatibility layer inside enclave implement missing o interface either natively e userlevel thread scheduling transparently forwarding inenclave system call o outside enclave another example native enclave service recent eleos library provides userspace virtual memory management sgx boost speed enclave execution large memory footprint application accelerated system prior work native gpu o abstraction demonstrated performance programmability benefit io call made directly gpu kernel example gpufs gpunet library implement file system networking layer gpu devicespecific liboses designed efficiently accommodate numerous concurrent io request thousand gpu thread recent work extends idea beyond gpus introducing acceleratorcentric o architecture goal eliminate cpu control overhead multiaccelerator application building deviceoptimized libos accelerator liboses together working concert provide coherent view system application hardware implication adoption liboses driven necessity achieving maximum efficiency becomes practical thanks addition hardware virtualization support cpu io device missing open question thought first device ie gpus storage virtualization support quite limited direct unprivileged access fully supported addition hardware support lowoverhead multiplexing among multiple application highspeed device nontrivial problem hardware virtualization io device scale well today order hundred virtual function nics example number liboses run concurrently limited importantly virtual device directly accessed untrusted user code get exposed attack would blocked o last traditional o responsibility performance isolation resource partitioning moved hardware maintain flexibility original software mechanism often unclear summary liboses provide appealing alternative traditional os particular high performance server pose new requirement provide opportunity revisit existing architectural support os order make liboses robust usable efficient author mark silberstein assistant professor electrical engineering department technion israel institute technology head accelerated computer system lab disclaimer post written individual contributor share thought computer architecture today blog benefit community view opinion represented blog personal belong solely blog author represent acm sigarch parent organization acm
238,Lobsters,virtualization,Virtualization,A/NES: a NES/Famicom emulator for Classic Amigas,http://nes.goondocks.se/anes.php,anes nesfamicom emulator classic amigas,old news concerning anes nesa nesa,anes anes nesfamicom emulator classic amigas coded morgan johansson fredrik schultz emulator entirely coded assembler optimized classic amiga hardware feature full emulation batterybackup support gui action replay game genie codesupport sound famicom disk system emulation wip two player support support xpk compressed file assembler requirement anes requires ec aga chipset cpu megabyte fastram however get best experience even better recommended also recommended better experience also partially supported downloads old news concerning anes anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes pro anes anes anes anes cgfx ne disassembler msdos rom simple ne rom playing music released updated technical document nesa nesa fileformat used anes format logging ne audio file realtime nesa nesa fileformat used anes
239,Lobsters,virtualization,Virtualization,Reyk Floeter: The OpenBSD virtual machine daemon - BSDCan 2017,https://www.youtube.com/watch?v=Os9L_sOiTH0,reyk floeter openbsd virtual machine daemon bsdcan,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
241,Lobsters,virtualization,Virtualization,(r)vmadm - managing FreeBSD jails,https://blog.project-fifo.net/rvmadm-managing-freebsd-jails/,r vmadm managing freebsd jail,another tool manage jail communitydriven list datasets whats next announced earlier year gitlab,releasing first version clone vmadm freebsd jail today done feature complete provides basic functionality point think would helpful get get feedback today allows basic management datasets well creating starting stopping destroying jail another tool manage jail however go detail let talk build yet another jail manager frequent nih syndrome actually quite opposite fifo experimented iocage way control jail iocage useful tool used cli utility issue used programmatically managing jail automatically via cli tool thing like performance machine parsable interface matter cli acceptable call take second two automatically consuming tool delay problematic another reason decision vmadm excellent tool well designed smartos us vmadm year given opted adopting proven interface rather trying create new one since already interface smartos reuse majority management code smartos freebsdbsd today manage datasets jail template form zfs volume list serve datasetserver fetch like want point provide datasets freebsd likely list grow idea communitydriven list datasets exist smartos today moreover datasets work hope see bsd jail fetching dataset define jail using json file file compatible zone description used smartos provide feature subset resource cpu memory defined networking configured dataset selected necessary setting like hostname set jail created vmadm allows managing lifetime starting stopping accessing console finally destroying update jail supported however today taken account restarting jail however large part technical impossibility rather high todo list worth mentioning vmadm pick jail created tool manually using vmadm created jail conscious decision prevent interfering existing setup utility conventional tool manage jail set vmadm fine use special trick like nested jail allow restriction required multitenancy hard impossible achieve otherwise whats next first foremost hope get feedback perhaps community engagement meantime announced earlier year hard work integrating freebsd hypervisors fifo writing core action work quite well right barebone function supported output clear would like hope eventually add support behyve vmadm way support kvm smartos moreover groundwork already exists nested jail technique using exploring way allow pci pas jail something possible smartos zone right would beneficial user general want improve compatibility smartos much possible feature add time make specification invalid smartos get tool gitlab
242,Lobsters,virtualization,Virtualization,Rewriting Vertex Processing for Massive Performance Gains,https://rpcs3.net/blog/2017/08/16/rewriting-vertex-processing-for-massive-performance-gains/,rewriting vertex processing massive performance gain,background initial test research second attempt vulkan disappointing performance final result shader cache reorgnization bug technical issue information found mean closing word youtube channel discord,greeting graphic developer midmonth update latest development emulator many already aware lot going lately new change rsx gpu emulation dubbed vertex rewrite change move lot vertex processing duty cpu gpu rightly belong result massive performance gain especially opengl also vulkan geometry heavy scene background user probably aware dedicated graphic card exist physically separate board mean data moved pcie bus quite fast however high bandwidth also highlatency mean send something expect get immediately available next draw call instead gpu wait data prepared signaled data ready processing drawing begin general simplification help illustrate point rsx work way however near direct access xdr main memory pull data directly main memory though local memory somewhat similar integrated graphic memory case mean data prepackaged transport gpu since memory virtually unified point view rsx using vulkan drawing scheduled whole command queue flushed mitigating impact transfer since data likely uploaded beforehand opengl big bottleneck second issue emulator lot computation cpu read vertex data main memory essentially prepackaging data format easy gpus use slow process also memory intensive hence working buffer enough crash enabling debug overlay old method show game taking prepare vertex data one frame hellboy science evil obviously optimal impact could lowered using thread vertex processing number thread already needed emulate multicore processor problem spawning vertex processing thread reduced time spent processing vertex cost thread starve performance would drop significantly solution shift work gpu instead touch way copy data block gpu could fetch data needed mimicking behaviour real hardware initial test first task put theory test started writing routine identify continuous memory used game store vertex data found use interleaving help speed data transfer even real good since copying easy boiling single memcpy operation quickly got opengl use method whenever large block data use fired test case using time benchmark vertex processing tnt racer title screen scene simple throw vertex using immediate draw draw problem opengl stuck long time using simplified processing fps went around experiment success vertex upload time went significantly per frame however change frame rate impressive investigation research second attempt getting feedback ssshadow performance boost expected sought find driver handle memory writes external pcie device turned mesa open source driver use pc poured code confirmed use writecombined memory improve throughput went work redesigning rendering pipeline make effective use simplified single writes small contiguous block already gave good boost tried reordering vertex upload happened give time draw call requiring data issued memory writes placed early submission chain computation moved point draw call way gpu could get data needed improving efficiency renderer change hit gpu limit fps initial test result initial implementation driver update later brought frame rate hardware maxed vulkan disappointing performance research completed good idea maximize throughput vulkan well quickly applied change vulkan refactored shared code renderers make future work easier quickly ran benchmark vulkan expecting got fps gain fps measuring time spent different part pipeline found another bottleneck holding back vulkan longest time every frame waiting previous frame complete beginning rendering efficient use graphic hardware api since baseline framebuffer us doublebuffer setup two surface write need wait previous command write different surface quick restructure later renderer rewritten support asynchronous frame processing final result combining two optimization running benchmark yielded fps higher baseline performance provided master fired another benchmark hellboy science evil confirmed fps jumped fps fps opengl vulkan aside memory access behaviour intel integrated graphic give fps tnt racer scene using new opengl backend almost double vulkan performance show thing better optimization screenshots hellboy science evil screenshots hellboy science evil screenshot tnt racer vulkan screenshots tnt racer first two dedicated gpu vulkan opengl last integrated intel graphic another side effect unifying vertex processing handling thing correctly many game visual output started working almosy immediately notable case metal gear solid metal gear solid shadow colossus also got partially fixed well improvement game sleeping dog yakuza game minor bugfixes also added fixed ni kuni flicking graphic using vulkan well broken depth title unreal engine game also broken color intro cinematics logo fixed well thing looking good one problem shader compilation stutter making thing unbearable shader cache reorgnization always jit shader cache slowly build emulator run however broken vulkan causing program constantly rebuild manifested microstutter game feel smooth although fps counter showed high fps new complex shaders stutter went millisecond per shader several second case even fixing microstutter vulkan due bad key hashing still took unbearably long generate internal cache something useful gameplay interspersed minutelong pause place quickly apparent something done decided shader cache dumped disk preloaded emulator started made significant change feel game run within emulator workarounds needed make intel work still working improvement coming bug technical issue changeset improve core rendering pipeline lot new system brings new baggage first aforementioned increase shader compilation time second serious issue relevant nvidia user high memory usage number precompiled shaders rise issue brought attention user discord mentioned cemu work way nvidia user experience problem memory usage going high mean see emulator consume gb ram compiling shader cache interim solution lower ram would clean shader cache periodically find suitable workaround information found lastly intel driver least window buggy glsl generation workaround place specific intel wont fix problem platform work certainly needed mean first mean opengl within striking distance vulkan term performance faster case vulkan however suffers firsttime shader compilation stutter improved near future may want give opengl try stutter distracting avoid new nightly build overall vulkan still faster reworked framework seen suggestion disabling shader cache wont help stutter since caused linking step done driver would ask negatively affected little patient work resolve issue closing word want help make progress even faster check patreon page right coming closer closer goal work full time would greatly increase rate progress future also come check youtube channel discord stay uptodate big news
243,Lobsters,virtualization,Virtualization,HyperCard On The Archive (Celebrating 30 Years of HyperCard),https://blog.archive.org/2017/08/11/hypercard-on-the-archive-celebrating-30-years-of-hypercard/,hypercard archive celebrating year hypercard,bill atkinson hypercard inbrowser early macintosh emulation emulated hypercard stack hypercard stack sit binhqx format visit contribution site stack added quickly easily archive http hypercardonlinetk complete hypercard handbook hypercard developer guide entire episode hypercard,august bill atkinson announced new product apple macintosh multimedia easily programmed system called hypercard hypercard brought one sharp package ability macintosh interactive document calculation sound music graphic popular package thousand hypercard stack created using software additionally commercial product hypercard heart came great prominence including original myst program flourishing next roughly ten year hypercard slowly fell wayside growing world wide web officially discontinued product apple left behind massive quickly disappearing legacy creative work became harder harder experience celebrate anniversary hypercard bringing back addition inbrowser early macintosh emulation earlier year internet archive lot emulated hypercard stack available perusal encourage upload easily quickly hypercard stack sit binhqx format visit contribution site stack added quickly easily archive http hypercardonlinetk site maintained volunteer andrew ferguson mostlyautomatic addition stack archive including adding description creating automatic screenshot card shall live along access original hypercard software browser archive goal access knowledge mean many related item hypercard program depending far want dig lot discover entire book written hypercard course example complete hypercard handbook hypercard developer guide walk context goal hypercard effort program prefer watch video hypercard archive covered well entire episode hypercard description indicates guest include apple fellow hypercard creator bill atkinson hypercard senior engineer dan winkler author complete hypercard handbook danny goodman robert stein publisher voyager company demonstration include hypercard complete car cost guide focal point laserstacks national galllery art goal bring historic software back living part landscape continues feel free dig bring stack life enjoy oftenforgotten stack yore
244,Lobsters,virtualization,Virtualization,OpenXT,http://openxt.org/,openxt,xen vtd txt tpm,openxt opensource development toolkit hardwareassisted security research appliance integration includes hardened xen vms configured userfacing virtualization appliance client device linux andor window guest used develop managed software appliance isolate demanding graphic workload untrusted workload multiple network single laptop desktop openxt optimized device intel vtd txt trusted execution technology tpm client appliance developed openxt contain mixture opensource proprietary software supporting range business model
245,Lobsters,virtualization,Virtualization,Vagga is a containerization tool without daemons,https://github.com/tailhook/vagga,vagga containerization tool without daemon,vagga vagrant docker release note upgrading docker docker feature description doc documentation,vagga vagga fullyuserspace container engine inspired vagrant docker specialized development environment note version changed format vaggayaml see release note upgrading info major feature running program linux container full virtualization like vagrant fully userspace container need elevated privilege like docker run containerized process child current shell attachdetach hell image automatically rebuilt versioned vagga tool manage tree process run redispythonnginx server one command compatibility vagrantlxc docker deep feature description doc disclaimer beta quality software since used development environment safe use project incompatible change configuration file might introduced release vagga never affect production server documentation
246,Lobsters,virtualization,Virtualization,Qubes OS 4.0-rc1 has been released,https://www.qubes-os.org/news/2017/07/31/qubes-40-rc1/,qubes o released,next generation qubes core stack better integration complete rewrite qubes core stack qubes admin api recent post longstated goal fully virtualized vms better isolation ditched paravirtualized mode embraced fullyvirtualized mode qubes vms long using booting kernel mode new approach uxui better integration decided redesign user experience ux removed qubes manager altogether better compatibility rest release note summary release download page qubes o core team,finally year work releasing first release candidate qubes next generation qubes core stack better integration doubt release mark major milestone qubes o development single import undertaking set release apart complete rewrite qubes core stack separate set post detailing change whywhathow first post planned released coming week new core stack allows easily extend qubes architecture new direction allowing u finally build clean way lot thing wanted year would complex build old qubes infrastructure new qubes admin api introduced recent post prime example one feature technically speaking neatly put admin api heart new qubes core stack really part core stack merely application built top many benefit new core stack brings besides admin api name might visible user admin simpler customize flexible disposable vms flexible expressive qrexec policy definition flexible vm volume manager easy keep vms external drive memoryonly many new core stack also brings lot simplification developer qubesspecific apps service plan publish post cool new feature coming week month one last important comment work done area xenagnostic aligned longstated goal make qubes easily portable different vmms hypervisors even nonvmbased system containerbased one fully virtualized vms better isolation another important change release time xenspecific ditched paravirtualized mode embraced fullyvirtualized mode qubes vms reason move entirely securityrelated explained originally planned utilize pvh mode virtualization combine benefit processor virtualization technology vtx ept allowing simpler code hypervisor thus improving security paravirtualized driver better performance improved security due simplified interface virtualized device even though long using isolated stub domain keep device io emulator outside tcb stub domain run pv mode moving away sadly due linux kernel still fully supporting pvh mode specifically problem booting kernel mode decided go hvmbased vms release plan switch full pvh either later rcreleases depending progress pvh support linux kernel also additional lastminute issue discovered pci passthrough work well system using hvm virtualization typically affect usb vms system nevertheless precaution default installation decided switch mode virtualization vms back pv mode new core stack allows one flip switchproperty rationale still much better pvbased isolation usb vms rather usb controller isolated anticipate resolved upcoming rcreleases new approach uxui better integration qubes also decided redesign user experience ux little bit aligned longterm vision hide much qubes internals casual user practically viable made bold move removed qubes manager altogether instead believe make sense utilize much infrastructure already built professional ux designer possible consequently qubes persistent configuration creation new vms changing setting well global one accessible standard application menu aka start menu addition wrote two tiny widget work desktop environment compatible qubes currently list includes default oncedefault kde communitymaintained awesome widget used show live info running system state vms currently running memory usage well device available connect different vms yes possible connect usb device using gui long requested feature many user advanced qubes user surely appreciate hand much flexible powerful qvm tool completely rewritten qvmls qvmprefs name two upcoming post better compatibility rest besides lot improvement bug fix compared release list release note perhaps one worth singling context hardware compatibility upgrade default distribution fedora decompose separate gui admin vms plan distribution determines well gpu supported summary qubes significant milestone roadmap implement reasonably secure desktopclient o based security compartmentalization principle using explicit partitioning model contrast recently popular sandboxing model first release candidate largely rewritten complex system doubt early adopter discover rough edge despite increasingly sophisticated automatic testing infrastructure simply unavoidable consequently want use qubes production stick qubes release stable version qubes would like start learning experimenting advanced new feature brings admin api would like help u reach stable quickly curious want show friend bleeding edge system please go straight download page behalf whole qubes o core team joanna
247,Lobsters,virtualization,Virtualization,Visual 6502 in JavaScript,http://www.visual6502.org/JSSim/expert.html,visual javascript,,use z zoom x zoom click probe signal drag pan
248,Lobsters,virtualization,Virtualization,Parsing NES ROM Headers with nom,https://bheisler.github.io/post/nes-rom-parser-with-nom/,parsing ne rom header nom,ne emulator nom ines ne nom link code impression nom gif parser github,long long ago december wanted learn emulator worked decided write ne emulator opted write rust language never used crazy idea certain done indeed learned great deal emulator ne rust anyway working project lately maintenance work upgrade one thing rewrite rom parser using nom rom parser first bit rust code ever written great thought finally time clean bit post short description process thought nom newcomer library first detour discus ne rom format interested fine detail skip ahead next section nearly ne rom file one two format ines format later extension called ne existing parser support ines new parser support well come across many rom ne format yet needed add support let start digging ines header explain everything go first fourbyte magic number ascii letter ne followed do endoffile character one byte holding length prg rom data block one byte length chr rom block ne cartridge contain prg rom chr rom prg program rom hold assembled program code associated data game available main cpu memory map reading though many cartridge support reading prg rom address chr character rom hold graphical data game indirectly accessible cpu chr rom used instead ppu picture processing unit cartridge chr rom instead use chr ram transferring graphical data chr ram runtime two byte two byte flag include various bit information hardware cartridge eg whether cartridge batterybacked ram saving game flag byte also contain mapper id game mapper one aspect ne emulation mentioned prg rom typically accessible window nearly large enough ne game much prg rom alone deal cartridge contain circuit board called mapper map page rom address space different game especially game different manufacturer often wildly different mapper emulator must emulate mapper well header contains one byte split two piece historical reason containing mapper id first two flag byte another pagecount byte time prg ram batterybacked save ram game like legend zelda another flag byte finally six reserved byte used ines used ne recap magic number prg rom page count chr rom page count lower half mapper number flag upper half mapper number flag flag six byte zero following header optional trainer extra program code added romripping device actual prg chr rom data know parsing let take look nom nom way parsing work nom use doparse macro define parser number function macro define structure data macro function collectively generate rust code par data return one three possible result done containing remaining unparsed data resulting value incomplete meaning data needed error meaning data invalid otherwise parsed use macro rather clever idea though without downside one downside compiler really help make mistake instance took longer like admit get following code compile realized forgotten pas input doparse macro got going though pretty smooth sailing extremely fast parse rest header construct rom structure tag macro take given sequence byte read sequence input mean bigendian onebyte unsigned integer cond macro applies given parser condition true finally take macro consumes given number byte return slice since code support ne extension wanted detect rom using format return error started run trouble find obvious way conditionally return error ended working around using call macro call function wrote would return error rom ne format somewhat surprising seems like would common problem point working parser decided take opportunity rework code bit well previously simply stored flag byte rom structure left code mask individual flag well two piece mapper id nom parse individual bit input well started separating mapper id rest flag byte nom overall could use work documentation using bitindexing particularly opaque look cached version old blog post link find spare trouble quick overview bit macro take bitstream parser eg takebits typeagnostic parser eg tuple generates code apply parser byteslice input also byte macro go way applying byteslice parser bitstream input inside bit macro use parser consume individual bit switching bitstream byteslice parsing end bit macro beginning byte macro partial byte remaining input ignored subsequent byteslice parser start parsing next whole byte two builtin bitstream parser takebits consumes given number bit input assembles given integer type tagbits like tag bit unfortunately point possible give name value bit macro like doparse make collecting mapper id bit flag bit tuple instead went make change related nom skip detail take look code interested impression nom kind like nom rocky learning curve documentation need work also bit wary heavy use macro parsing often performancecritical willing sacrifice runtime efficiency get help compiler make mistake hand get hang quick easy define parser quite complex data structure code read lot like description format parsed always nice nom beautifully clear example parser look take gif parser example work binary text data well plus overall would consider nom future project involve parsing data lack documentation could cause headache much easier safer use battletested library like nom write handwritten parser data like check code play around perfectly legal homebrew ne software find github
249,Lobsters,virtualization,Virtualization,Ubershaders: A Ridiculous Solution to an Impossible Problem,https://dolphin-emu.org/blog/2017/07/30/ubershaders/,ubershaders ridiculous solution impossible problem,without problem anandtech shader compilation stuttering solving impossible problem potential solution generate shaders beforehand predict shaders game need sharing shaders improve asynchronous shader compilation tino stuttering solution write interpreter gamecubewii rendering pipeline within shaders run host graphic card configure driver phire alone optional painful ubershaders stenzek large hybrid mode ubershaders ubershaders api driver hall shame shader variant generation nvidia shader locking opengl vulkan nvidia compiled shaders opengl vulkan much slower much faster amd vulkan driver lack shader cache support macos graphic driver still terrible recommended ubershader setting general intel window opengl vulkan intel linux vulkan nvidia window opengl opengl vulkan nvidia linux opengl opengl vulkan nvidia android opengl opengl vulkan powervr android adreno android mali android conclusion,playing favorite game dolphin powerful computer thing run fairly well game running full speed graphical glitch use favorite controller want yet every time go new area load new effect slight noticeable stutter turn framelimiter check computer run game well full speed going slowdown loading new area effect model commonly referred shader compilation stuttering user developer alike problem part dolphin since beginning recently become focus game barely ran little stutter nt big deal though emulation improved near perfection many title stuttering remained year since release dolphin user actually complained shader compilation stuttering increasing rate even may partially due increased gpu requirement integer math bigger cause actually stuttering stuck fewer serious issue otherwise frustration even antipathy developer toward shader compilation stuttering something deemed unfixable garnering lot ill frustration within community ironically hated stuttering much anyone else sheer insanity task enough keep developer away despite still privately held onto glimmer hope started theory chance working theory would take hundred thousand personhours see possible hope fueled arduous journey seemingly impossible odds journey would take multiple gpu engineer across two year effort emulate full range gamecubewii protoprogrammable pipeline without falling victim pesky stuttering dawn ubershader era problem modern gpus incredibly flexible flexibility come cost insanely complicated unlock power developer use shaders program gpu run like cpu run application program gpu perform effect complex rendering technique devs write code shader language api opengl shader compiler video driver translates code binary pc gpu run compiling take processing power time complete modern pc game usually get around compiling shaders period framerate nt matter loadtimes due number different pc gpus impossible pc game precompile shaders specific gpu way get shaders run specific pc hardware video driver compile point game flipper gamecube gpu largest chip motherboardimage credit anandtech console different know precise hardware going run game know hardware never change precompile gpu program include disc giving game faster load time consistent performance especially important older console may enough memory possibly even capability store shaders memory flipper gamecube gpu latter fixedfunction part flipper feature programmable tev texture environment unit configured perform huge variety effect rendering technique much way pixel shaders fact tev unit similar capability directx pixel shaders xbox flexible powerful flipper reused wii gpu redubbed hollywood modification unfortunately u though tev unit designed game configure run tev configuration immediately effect needed preloading tev configuration whatsoever since tev unit nt memory instantaneous loading source problem dolphin translate flipperhollywood configuration game us specialized shader current gpus run shaders compiled take time tev unit nt ability store configuration gcwii game must configure render effect instant needed without delay notice deal disparity dolphin option delay cpu thread gpu thread video driver perform compilation essentially pausing emulated gcwii usually compilation take place frame user none wiser take longer frame game visibly stop compilation complete shader compilation stuttering typically stutter last couple frame really demanding scene multiple compiling shaders stutter second possible first emulator emulate system highly programmable gpu full speed dolphin go alone tackling problem implemented shader caching configuration occurred second time would stutter would take hour playing game build reliable cache gpu change gpu driver update even going new dolphin version would invalidate cache start stuttering year seemed like nothing could shader compilation stuttering many wondered would ever solved solving impossible problem dolphin remaining issue shader compilation stuttering complained whether issue tracker forum social medium irc problem come time year reaction shifted first stuttering ignored nonissue matter slight stutter game barely ran first place thing shifted january stuttering formally accepted bug dolphin issue tracker awareness spread past year user ask many question shader stuttering demand action declare emulator useless even cuss developer lack attention shader compilation stuttering truth hated stuttering much anyone else thought problem many year ton solution pondered even attempted nt seem possible fix without serious sideeffects potential solution generate shaders beforehand reference mere grain sand earth dolphin pretty fast generating shaders need compiling problem could somehow generate compile shaders every single configuration would solve problem right unfortunately simply possible roughly potential configuration tev unit alone make unique shader every configuration vertex shaders also used emulate semiprogrammable hardware transform lighting unit raise number combination even higher even able compile shaders would usable version dolphin generated upgrading new build would require new set shaders necessary occasion like upgrading graphic card upgrading graphic driver would also necessitate recompile relies driver lowlevel cache driver predict shaders game need could generate compile shaders loading screen whatnot would nt stuttering mattered trying predict game want simply nt feasible degree would solve problem performance implementation implication around dolphin try see ahead either fastforwarding predicting input cost way much situation could possibly help blind prediction nt work either game choose run whatever configuration want without warning past configuration nt tell u anything future configuration way know shaders game would need would go game find every configuration could possibly want lead u next proposed solution sharing shaders dolphin us unique id object uid represent configuration emulated gpu uids turned shader code handed video driver compilation uids compilation tailored specific pc gpu compatible computer could theoretically shared user refer sharing shaders theory user shared uid file could compile shaders ahead time encounter stuttering currently vulkan video backend already feature necessitated avoid shader caching issue certain driver nt extending solution pursued dolphin still improving graphic fix merged uids may thrown game serviced popular game may get near complete uid collection people playing hidden gem probably wo nt get help testing little uid overlap game legend zelda wind waker legend zelda twilight princess share small portion configuration running base engine game far le common sharing popular game definitely benefit lesser known game user may miss various uids near limitless number configuration even ing game nt guarantee hit every configuration developer pondered idea building infrastructure sharing uids finding good way distribute proved create disagreement solution could possibly used improve already working solution working solution asynchronous shader compilation popularized fork asynchronous shader compilation creative solution shader compilation dilemma tino looked problem like modern game handle issue dynamically compile new shaders spawn new area sometimes new object pop loaded wondered could achieve something similar emulator began rewriting shaders handled fork asynchronous shader compiling concept change dolphin behaves nt cached shader encountered flipperhollywood configuration instead pausing game waiting shader compile simply skip rendering object mean pause stutter object may missing view shader ready work well game depending game engine cull object drawing world object fall outside field view camera cover pixel onscreen may still rendered case skipping rendering object hardly noticable however depending game result pop described earlier one thing user wondered dolphin nt least implement tino asynchronous shaders option fight shader compilation stuttering end came fact people could implemented along core developer solution saw nothing hack would cause lot false positive issue tracker cause bigger issue road worry proven somewhat valid realize game need object rendered frame expect case mii head rendered embedded framebuffer efb copy missing async shader compilation mii head show remainder game regenerated despite flaw user tino fork swear asynchronous shader compilation everything wrong asynchronous shaders solve problem shader compilation stuttering cost stark downside steep merged dolphin master solution definitely brought spotlight shader generation compilation big problem tino work asynchronous shader compilation really let u know much user cared problem motivated team come complete solution solution write interpreter gamecubewii rendering pipeline within shaders run host graphic card sometimes one best way solve impossible problem change perspective matter tried way compile specialized shaders fast game could change configuration nt rely specialized shaders crazy idea born emulate rendering pipeline interpreter run directly gpu set monsterous flexible shaders compile massive shaders game start whenever game configures flipperhollywood render something uber shaders would configure render without needing new shaders theoretically would solve shader compilation stuttering avoiding compilation altogether idea kind crazy also first idea potential actually solve impossible problem difficulty solution instead came absurd amount work expertise required even get point trying put perspective even among developer work dolphin two three people necessary knowledge gamecubewii hardware also modern gpus apis driver write debug optimize shaders mention running interpreter huge shaders exactly easy gpu many afraid work might even run full speed current video card hundred thousand hour mindnumbing repetitive yet difficult work needed guarantee payoff first attempted phire became frustrated shader compilation stuttering brand new computer actually made proposal designed framework ubershader well aware difficulty seemed intent proving ubershaders solution age old problem phire went alone attempt teach dolphin render grinding feature month managed get pixel ubershaders point game started look like fastshader counterpart surprising part nt worked prototype ubershaders actually ran full speed phire recollected initial reaction consisted holy shit actually running full speed admitted gpus nt really able run playable speed despite odds stacked prototype proved ubershaders could solution shader compilation stuttering thus grind began improve accuracy ubershaders fix many bug implement missing feature effort even get ubershaders far left phire completely exhausted project top phire put ton work cleaning project dolphin release delay proved costly lost fire continue working ubershaders thanks burnout increasing worry driver api limitation regarding solution despite around complete last still remained done including key feature finishing vertex ubershaders infrastructurelinking pixel vertex ubershaders solving opengl rebase vulkan performance issue cleanup bug fix making rendering identical specialized shaders gui option optional hybrid mode integratedweaker gpus see cusp working painful nt developer capable working take massive project even would considered working nt ready take cleanup bug fix infrastructure work well year ubershaders sat bitrotted backburner within evergrowing list feature never finished hope began fade ubershaders shader compilation stuttering one complained bug dolphin ubershaders development stopped people nt forget pull request though long abandoned still saw comment got linked around forum even posted bug tracker various form ubershaders first real hope eliminate shader compilation stuttering still brought monthly basis anything progress inflamed community desire solution much pleading begging much much blackmail honest coercion stenzek reluctantly took mantle ubershaders even stenzek began working ubershaders team made decision toward maintainability graphic backends one decision met mixed negative reaction removal backend unlike nt go deprecation process removed obvious one going maintain fortuitous decision however removal backend aided rebase revival ubershaders stenzek ready give best shot architect dolphin vulkan backend already willing go extra work setup ubershaders work vulkan pixel vertex ubershaders finally hooked together ready run tester immediately took worst case scenario title considering none previous solution really worked game like metroid prime first docket initial ubershaders test massive success stuttering completely eliminated strange stutter early run within opengl vulkan continued work ubershaders made thing better backend exception note later running game ubershaders nt endgame pure ubershaders massive performance drain host graphic card game requirement vary graphic card greatly affect high resolution run internal resolution dedicated gpus able get job done higher end card still able push higher even exclusively using ubershaders unfortunately many user nt necessary hardware run ubershaders resolution prefer would put unfortunate position choosing resolution smoothness large portion dolphin user running onboard graphic testing onboard solution best could get roughly speed ubershaders ir typical game developer felt like ignoring huge group dolphin user would mistake make ubershaders limited victory best thus work continued even robust solution would cure performance ailment hybrid mode ubershaders hybrid mode ubershaders marriage ubershaders asynchronous shader generation beautiful solution take best part none flaw hybrid mode greatly reduces performance cost ubershaders expect commonly used ubershader mode hybrid mode whenever new pipeline configuration appears dolphin use already compiled ubershaders immediately render effect without stuttering still compiling specialized shader background specialized shader done dolphin hand object rendering ubershader newly generated specialized shaders assuming driver apis behave way want perfect solution ubershaders running fraction object scene frame time performance hit almost entirely negated stuttering completely eliminated unfortunately driver apis nt perfect limiting effectiveness hybrid setup brings u ubershaders api driver hall shame gpu driver team tough job squeezing much power possible product also providing stable experience user mean disrespect anyone work driver one biggest obstacle project ridiculous number driver api quirk forced workarounds change functionality bringing light hope get attention maybe someone outside project come workaround u least monitor case future driverapi update fix issue listed shader variant generation driver thing way nt expect control generate new pipeline different blend depth state driver nt smart enough share shaders pipeline cause minor stutter first time new blending mode used time variant game use generated within first minute play still frustrating seeking perfection thankfully driver smart enough share shaders pipeline mesa driver appears additional stuttering available driver appear suffer form stuttering variant generation ca nt anything currently hopeful vulkan driver mature take mesa favorable behavior nvidia shader locking opengl vulkan user reported opengl vulkan particularly hybrid mode slight stuttering shaders compiled sure exactly wrong happen fairly certain quirk nvidia driver rather fault dolphin handle thing based testing appears separate variant generation nvidia compiled shaders opengl vulkan much slower one particularly frustrating great way u debug feeding shaders host gpu opengl vulkan yet end shaders much faster two backends mean gtx may get internal resolution particular game opengl vulkan able comfortably get double even triple seeing slowdown since nvidia allow u disassemble shaders despite every desktop gpu vendor open shader disassembly way debug figure compiled code much efficient think ridiculous want make dolphin run better nvidia nt provide tool let u even attempt baffling decision hope rectified future without shader disassembly tool provided vendor fixing various bug would much difficult sad thing tool need exist big enough game studio edit nvidia informed u provide shader disassembly tool nda available apis regardless nda hopefully tool apis available future amd vulkan driver still lack shader cache support writing article wish answered amd vulkan driver support shader cache greatly improves dire situation ubershaders meant recompile ubershaders every single run also improves variant stuttering mentioned macos graphic driver still terrible exciting feature macos user probably waiting inevitable macos outdated inefficient opengl driver macos simply nt task handling ubershaders useful degree hybrid mode reduce stuttering exclusive slow useful another downside macos still nt support shader cache driver recommended ubershader setting driver issue nt surprise graphic card work better backends setting outlined general recommended setting based various video card depending preference particular graphic card may wish deviate recommendation note changing certain setting game running perpixel lighting antialiasing level require different ubershaders compiled may cause sizable pause done also remember ubershaders require gpu power setting also require beefier graphic card intel window use hybrid mode exclusive mode work intel igpus currently fast enough run fullspeed even native driver generates variant opengl meaning stuttering vulkan driver support skylake buggy worth using currently intel linux use vulkan hybrid mode exclusive mode work full speed anv driver fantastic see full benefit ubershaders intel video driver nt share opengl shaders thread mean render thread always recompile shader stutter exclusive mode slow work correctly hybrid mode stutter click detail amd window use hybrid mode use vulkan exclusive mode amd opengl driver slow general amd linux use vulkan exclusive hybrid mode radv behaves similar anv work quite well click detail nvidia window use opengl hybrid mode use opengl vulkan exclusive mode ubershaders tend efficient opengl vulkan resulting higher performance weaker gpus nvidia linux use opengl hybrid mode use opengl vulkan exclusive mode performance may vary backend faster pergame note vulkan stutter generating pipeline variant may cause one two minor stutter early play session nvidia android use opengl hybrid mode use opengl vulkan exclusive mode exclusive actually get full speed basic game nvidia shield tv click detail powervr android recommended running ubershaders graphical corruption shader compilation error correct hybrid mode specialized shaders compile slow useful current hardware adreno android recommended hybrid mode crash exclusive mode show severe graphical corruption slow useful current hardware well mali android tested safely say would nt end well though conclusion feel strange talking ubershader project past tense completed merged use right latest development build may growing pain finally solution shader compilation stuttering ubershaders going get better year graphic card get stronger exclusive mode get widespread use hybrid mode also get better vulkan driver mature driver quirk hopefully addressed course going continue working side make sure emulation continues improve shader compilation stuttering effectively solved dolphin still requires host computer fast enough emulate game additionally flaw jit cause stuttering currently dolphin jit branching support really struggle game use jit vc game causing stutter feel like shader compilation stuttering actually hoping solve issue likely including option disable branching support rectified user power turn problematic title giant article going progress report month july many amazing change combo august progress report going big one look forward enjoy
250,Lobsters,virtualization,Virtualization,Scaling up Mayan EDMS using Docker and MySQL,http://www.mayan-edms.com/post/deploy-mayan-docker-mysql/,scaling mayan edms using docker mysql,â â step step step step,â python packaging distribution still perfect packaging distributing django project le perfect bit painful quite hurdle overcome package django project distribution interested given talk topic like one pycon sei â docker way isolate program operating system level unlike virtualization entire hardware running program isolated host computer via emulation container operating system running program isolated host computer using separate context technique allows running operating system inside operating system technically end result similar end user sort hardware capable hosting virtual machine able host container aside operating system isolating docker container general also work packaging solution storing program requirement needed execute repeatable manner distribution medium way operating system mean docker packaged program run exactly regardless host operating system sense offer many benefit visualization without execution overhead django project art official guideline entire community still learning work interested learning state technology technique used package django project docker image watch pycon sette presentation topic â hopefully introduction better idea creating docker image mayan good idea get distributable image reduces installation step dozen two end execution unit isolated system controlled packaging philosophy docker container perform one least possible function called separation concern offer many advantage like able scale specific part docker deployment following philosophy mayan edms image includes bare minimum provide running instance mayan edms image contains mayan edms web server nginx broker move message background task store result redis process manager keep everything chugging along deployed since python native support sqlite used default setup give fairly decent wellperforming deployment several ten thousand document concurrent user want go beyond need scale mayan edms docker deployment starting database hence purpose post get mayan edms docker installation using mysql launching two container one mysql one mayan normally program configured via configuration ini file philosophy dockerized program configure container via environment variable step follow step docker container isolated design mean execution file access network access isolation get two docker container create network use command docker network create mayan bridge creates bridge network simple network type used connect host without routing call bridge network mayan deploy container using network network access two computer local area network lan docker recently added support dynamic domain name mean reference container name ip address step mentioned configure container using environment variable passed container created since passing variable command line launch container bit long prone data entry mistake situation docker allows u define environment variable file pas filename launching container let create file name envfile content mysql container mysqlrootpasswordmysqlrootpassword mysqlpasswordmayanpassword mysqldatabasemayandb mysqlusermayanuser mayan container mayandatabasedriverdjangodbbackendsmysql mayandatabasenamemayandb mayandatabaseusermayanuser mayandatabasepasswordmayanpassword mayandatabasehostmayanmysql first set variable configures mysql container create database launch create user grant permission database second set variable configures mayan container use specified credential access database container mayan point view another host network case host called mayanmysql initial line tell mayan django database driver use accessing database step proceed create launch first container mysql container using command line docker run name mayanmysql restartalways envfile envfile v mayanmysql varlibmysql netmayan mysql latest tell docker create run container named mayanmysql restart every time stop whatever reason hang host restarts use file envfile configuration store data directory varlibmysql persistent docker storage called volume name mayanmysql use mayan network use latest official mysql docker image watch log file container initializes command docker log mayanmysql step finally launch mayan container command docker run name mayanedms restartalways envfile envfile v mayandata varlibmayan netmayan p tell docker create run container named mayanedms restart every time stop whatever reason use file envfile configuration store data directory varlibmayan persistent docker volume called mayandata expose internal port http port outside world use mayan network using version official mayan edms docker image inspect log container using docker log mayanedms see container creating database initialization required minute able browse localhost port machine running container use mayan normally since container launched restartalways option need anything start next time boot host computer compare step number step required production deployment mayan edms django project see docker becoming successful medium run code also distribute
252,Lobsters,virtualization,Virtualization,Add vmctl send and vmctl receive,http://undeadly.org/cgi?action=article&sid=20170716160129&mode=expanded,add vmctl send vmctl receive,phessler commit writes twitter,contributed phessler movealongnothingtoseehere dept see commit message new developer pratik vyas pd add ability paused vm migration vmm mike larkin also writes twitter openbsd vmctl vmctl send myvm ssh mlarkin somewherecom vmctl receive yes easy ed paused migration live migration
253,Lobsters,virtualization,Virtualization,EC2 has new GPU instances (Tesla M60s),https://aws.amazon.com/blogs/aws/new-next-generation-gpu-powered-ec2-instances-g3/,new gpu instance tesla,first wrote model gpus gpu memory vcpus main memory eb bandwidth nvidia grid opengl directx cuda opencl elastic network adapter demo gallery pureweb reality reserved instance spot instance dedicated host jeff,first wrote benefit gpupowered computing launched instance type since launch aws customer used instance deliver high performance graphic mobile device tv set desktop today taking step forward launching instance type powered nvidia tesla gpus instance available three size vpconly ebsonly model gpus gpu memory vcpus main memory eb bandwidth gib gib gbps gib gib gbps gib gib gbps gpu support gib gpu memory parallel processing core hardware encoder capable supporting hevc stream stream making great fit rendering visualization virtual reality video encoding remote graphic workstation nvidia grid serverside graphic workload need massive amount parallel processing power gpus support opengl directx cuda opencl launch instance access nvidia grid virtual workstation license make use nvidia grid driver without purchasing license instance use intel xeon broadwell processor running ghz networking side enhanced networking via elastic network adapter provides gbps aggregate network bandwidth within placement group along gbps eb bandwidth customer told u looking forward visualizing large seismic model configuring car providing student ability run highend application example calgary scientific take application powered unreal engine make accessible mobile device within web page collaborative viewing support visit demo gallery see pureweb reality action launch instance today u east ohio u east n virginia u west oregon u west n california aws govcloud u europe ireland region ondemand reserved instance spot instance dedicated host region coming soon jeff
254,Lobsters,virtualization,Virtualization,ClearPath OS 2200 Express,http://www.unisys.com/offerings/technology-products-and-services/clearpath-forward-systems/clearpath-os-2200-software/clearpath-os-2200-express,clearpath o express,,s gi function removetags html var oldhtml oldhtml html html htmlreplace tagorcomment html oldhtml return htmlreplace
255,Lobsters,virtualization,Virtualization,ClearPath MCP Express,http://www.unisys.com/offerings/technology-products-and-services/clearpath-forward-systems/clearpath-mcp-software/clearpath-mcp-express,clearpath mcp express,,s gi function removetags html var oldhtml oldhtml html html htmlreplace tagorcomment html oldhtml return htmlreplace
256,Lobsters,virtualization,Virtualization,"binctr: fully static, unprivileged, self-contained, containers as executable binaries",https://github.com/jessfraz/binctr,binctr fully static unprivileged selfcontained container executable binary,binctr run unprivileged user blogjessfrazcompostgettingtowardsrealsandboxcontainers crosbymichael history cyphar mailing list table content checking repo building running cool thing,binctr create fully static including rootfs embedded binary pop directly container run unprivileged user check blog post blogjessfrazcompostgettingtowardsrealsandboxcontainers based crazy idea crosbymichael first embedded image binary history project used use poc fork libcontainer cyphar got rootless container upstream woohoo check original thread mailing list table content checking repo git clone git githubcom genuinetoolsbinctrgit building need libapparmordev libseccompdev importantly need userns kernel configusernsy else wo nt even work building alpine example make alpine static container created alpine building busybox example make busybox static container created busybox building example make static container created running alpine busybox cool thing binary spawned need oversee container process run detached mode pid file watched user mode systemd binary really launcher
257,Lobsters,virtualization,Virtualization,Create and upload an OpenBSD VM image to Azure,https://docs.microsoft.com/en-us/azure/virtual-machines/linux/create-upload-openbsd,create upload openbsd vm image azure,create upload openbsd disk image azure article prerequisite azure subscription monthly azure credit visual studio subscriber create free trial account azure cli azure cli az login openbsd operating system installed vhd file version install hyperv create virtual machine prepare openbsd image azure doasconf github prepare vhd fixed vhd convertvhd create storage resource upload az group create az storage account create az storage account key list az storage container create az storage blob upload create vm vhd sample script az vm create az vm listipaddresses next step openbsd az disk,create upload openbsd disk image azure minute read article article show create upload virtual hard disk vhd contains openbsd operating system upload use image create virtual machine vm azure azure cli prerequisite article assumes following item azure subscription nt account create one couple minute msdn subscription see monthly azure credit visual studio subscriber otherwise learn create free trial account azure cli make sure latest azure cli installed logged azure account az login openbsd operating system installed vhd file supported openbsd operating system version must installed virtual hard disk multiple tool exist create vhd file example use virtualization solution hyperv create vhd file install operating system instruction install use hyperv see install hyperv create virtual machine prepare openbsd image azure vm installed openbsd operating system added hyperv support complete following procedure dhcp enabled installation enable service follows echo dhcp set serial console follows echo stty etcbootconf echo set tty etcbootconf configure package installation follows echo http ftpopenbsdorgpubopenbsd etcinstallurl default root user disabled virtual machine azure user run command elevated privilege using doas command openbsd vm doas enabled default information see doasconf install configure prerequisite azure agent follows pkgadd pysetuptools openssl git ln sf usrlocalbinpython ln sf ln sf usrlocalbinpythonconfig ln sf usrlocalbinpydoc latest release azure agent always found github install agent follows git clone http githubcomazurewalinuxagent cd walinuxagent python setuppy install waagent registerservice important install azure agent good idea verify running follows p auxw grep waagent root python usrlocalsbinwaagent daemon cat varlogwaagentlog deprovision system clean make suitable reprovisioning following command also deletes last provisioned user account associated data waagent deprovisionuser force shut vm prepare vhd vhdx format supported azure fixed vhd convert disk fixed vhd format using hyperv manager powershell convertvhd cmdlet example following convertvhd vhdtype fixed create storage resource upload first create resource group az group create following example creates resource group named myresourcegroup eastus location az group create name myresourcegroup location eastus upload vhd create storage account az storage account create storage account name must unique provide name following example creates storage account named mystorageaccount az storage account create resourcegroup myresourcegroup name mystorageaccount location eastus sku premiumlrs control access storage account obtain storage key az storage account key list follows storagekey az storage account key list resourcegroup myresourcegroup accountname mystorageaccount query value tsv logically separate vhds upload create container within storage account az storage container create az storage container create name vhds accountname mystorageaccount accountkey storagekey finally upload vhd az storage blob upload follows az storage blob upload containername vhds file name accountname mystorageaccount accountkey storagekey create vm vhd create vm sample script directly az vm create specify openbsd vhd uploaded use image parameter follows az vm create resourcegroup myresourcegroup name image http ostype linux adminusername azureuser sshkeyvalue sshidrsapub obtain ip address openbsd vm az vm listipaddresses follows az vm listipaddresses resourcegroup myresourcegroup name ssh openbsd vm normal ssh azureuser ip address next step want know hyperv support read openbsd want create vm managed disk read az disk
258,Lobsters,virtualization,Virtualization,6502cloud - Bringing the 80's to the cloud,http://www.6502cloud.com/,bringing cloud,beginning contact email,beginning upon time cpu ruled world atari atari atari pet commodore apple ii even ne driven processor mo since moved alpha pentium powerpc arm cloud computing come around cloud computing someone else computer nt computer based one bring old slashdot joke beowolf cluster aws lambda function fronted api gateway lambda run emulated memory loaded caller start executing specified address time hit brk opcode return specified section memory imagine beowolf cluster distributed processing cloud webscale contact question email get reddit
259,Lobsters,virtualization,Virtualization,The Weak Bug - Exploiting a Heap Overflow in VMware,http://acez.re/the-weak-bug-exploiting-a-heap-overflow-in-vmware/,weak bug exploiting heap overflow vmware,introduction chaitin kelwin zdi blog post rpci vmware rpci backdoor openvmtools backdoor rpci rpci r p c vmwarevmx vulnerability exploitation defeating aslr getting code execution copypaste dnd p note reliability video conclusion,introduction march took part contest team chaitin security research lab target focused vmware workstation pro managed get working exploit contest unfortunately version vmware released march day contest patch vulnerability exploit taking advantage blog post narrative journey finding vulnerability exploiting would like thank kelwin whose assistance indispensable development exploit would also like thank zdi folk recent blog post motivated u get ass make writeup p post divided three part first briefly describe vmware rpci gateway next describe vulnerability finally look able use single exploit defeat aslr get code execution vmware rpci unsurprisingly vmware expose number way guest host communicate one way interface called backdoor guest able send command interface user mode interesting design interface used partly vmware tool order communicate host let look sample code taken openvmtools void backdoorinout backdoorproto mybp inout dummy asm volatile ifdef apple save rbx stack mac o gcc nt want u clobber erroneously think rbx pic register radar bug pushq rbx nt endif pushq rax nt movq rax rdi nt movq rax rsi nt movq rax rdx nt movq rax rcx nt movq rax rbx nt movq rax rax nt inl dx eax nt nb inq instruction xchgq rax rsp nt movq rdi rax nt movq rsi rax nt movq rdx rax nt movq rcx rax nt movq rbx rax nt popq rax nt ifdef apple popq rbx nt endif dummy mybp vmware modify whole vm state without compiler knowing far modify eflags hpreg ifndef apple rbx unchanged end function mac o rbx endif rcx rdx rsi rdi memory looking code one thing seems odd inl instruction normal circumstance default io privilege level linux instance user mode program able issue io instruction therefore instruction simply cause user mode program fault crash instruction actually generates privilege error host hypervisor catch fault ability communicate host user land guest make backdoor interesting attack surface since satisfies requirement attempt category must launched within guest operating system nonadmin account execute arbitrary code host operating system guest put value eax io port number stored dx low bandwidth high bandwidth data transfer respectively register used passing parameter instance lower half ecx used store backdoor command number case rpci command number set bdoorcmdmessage file libincludebackdoordefh contains list supported backdoor command host catch fault read command number dispatch corresponding handler lot detail omitting interested interface read source code rpci remote procedure call interface built top aforementioned backdoor basically allows guest issue request host perform certain operation instance operation like drag n drop copy paste well number random thing sending retrieving info guest use interface format rpci request pretty simple cmd params example rpci request infoget guestinfoip used order request ip address assigned guest rpci command endpoint registered handled vmwarevmx please note rpci command also use vmci socket beyond scope article vulnerability time reversing different rpci handler decided focus dnd copy paste endpoint seemed complex command handler therefore hoping would best place hunt vulnerability although got chance understand lot inner working dndcp became apparent however lot functionality handler reachable without user interaction core functionality dndcp basically maintains state machine unsatisfiable state user interaction eg mouse drag host guest loss decided look vulnerability reported pwnfest mentioned vmware advisory idb lot symbol point easy use bindiff find patch code show one vulnerable function patched turn source code available vulnerability still master branch git repo openvmtools btw static bool const packet sizet packetsize msghdr null assert packet packetsize return false msghdr packet payload size valid msghdr payloadsize return false binary size valid msghdr binarysize return false payload size binary size msghdr payloadoffset msghdr payloadsize msghdr binarysize return false return true bool msg const packet sizet packetsize msghdr null assert msg assert packet packet packetsize return false msghdr packet session big message received sessionid different buffered one received packet another another new message destroy old buffered message msg binary msg hdrsessionid msghdr sessionid msg offset new message null msg binary msghdr payloadoffset return false existing buffered message payload offset match msg binary msg hdrsessionid msghdr sessionid msg hdrpayloadoffset msghdr payloadoffset return false null msg binary memcpy msg msghdr msg binary utilsafemalloc msg hdrbinarysize msg hdrpayloadoffset used received binary size memcpy msg binary msg hdrpayloadoffset packet msghdr payloadsize msg hdrpayloadoffset msghdr payloadsize return true function called version dndcp host side guest sends fragment dndcp command packet host invokes function order reassemble chunk dndcp message sent guest first packet received payloadoffset binarysize specifying size buffer dynamically allocated heap check make sure payloadoffset payloadsize go bound comparing binarysize packet header data copied allocated buffer however check flawed work first received packet subsequent packet check invalid since code expects binarysize field packet header match first packet fragment stream might also noticed integer overflow actually exploitable since payloadoffset need set either equal expected payloadoffset buffered message therefore vulnerability triggered example sending following sequence fragment packet binarysize payloadoffset payloadsize sessionid byte packet binarysize payloadoffset payloadsize sessionid byte armed knowledge decided look version dndcp see anything missed lo behold exact vulnerability present version code vulnerability discovered reversing later noticed code also present git repo openvmtools bool dndtransportbufappendpacket dndtransportbuffer buf inout dndtransportpacketheader packet sizet packetsize assert buf assert packetsize packet payloadsize dndtransportpacketheadersize packetsize dndmaxtransportpacketsize packet payloadsize packet offset packet totalsize packet totalsize dndmsgmaxargsz packetsize packet payloadsize dndtransportpacketheadersize packetsize dndmaxtransportpacketsize packet payloadsize packet offset packet totalsize packet totalsize dndmsgmaxargsz goto error seqnum match mean either first packet timeout another side reset buffer case buf seqnum packet seqnum dndtransportbufreset buf buf buffer assert packet offset packet offset goto error buf buffer utilsafemalloc packet totalsize buf totalsize packet totalsize buf seqnum packet seqnum buf offset buf offset packet offset goto error memcpy buf buffer buf offset packet payload packet payloadsize buf offset packet payloadsize return true error dndtransportbufreset buf return false function called fragment reassembly dndcp protocol version see situation trusting totalsize subsequent fragment would match totalsize first fragment thus vulnerability triggered similar fashion previous one packet totalsize payloadoffset payloadsize seqnum byte packet totalsize payloadoffset payloadsize seqnum byte brings u title blog post weak bug context contest like think bug weak inspired previously reported one pretty much exactly one therefore really surprise patched contest okay maybe nt expect get patched one day contest p corresponding vmware advisory found latest version vmware workstation pro affected bug version look abuse vulnerability come guest host escape exploitation want gain code execution vulnerability need either find function pointer overwrite heap corrupt vtable c object first though let look set dndcp protocol version done sending following sequence rpci command toolscapabilitydndversion toolscapabilitycopypasteversion vmxcapabilitydndversion vmxcapabilitycopypasteversion first two line respectively set version dnd copypaste latter two line query version required querying version actually cause version switched rpci command handler vmxcapabilitydndversion check version dndcp protocol modified create corresponding c object specified version version two c object size created one dnd command one copypaste command vulnerability give u control allocation size well overflow size also allows u write bound multiple time ideally allocate object size make land c object overwrite vtable pointer pointer controlled data get code execution simple however since thing need address first mainly need find way defeat aslr case implies also dealing window low fragmented heap defeating aslr need find object overflow somehow influence get u info leak like object read back guest length field data pointer easily corrupt unable find object decided reverse rpci command handler bit see could come particular interest command counter part word use one command set data use another related command retrieve data back winner infoset infoget command pair infoset guestinfokey value infoget guestinfokey value string string length control allocation size buffer heap moreover allocate many string want way use string leak data simply overwriting past null byte lining string adjacent chunk allocate string string overflowing chunk dnd cp object leak vtable address object hence base address vmwarevmx since allocate many string increase chance obtaining heap layout despite randomization lfh however still aspect allocation control whether dnd cp object allocated overflowing heap chunk test able get probability success playing different parameter exploit allocating freeing different amount string summary following ov overflowing chunk string target object plan basically allocate number string filled example overflow adjacent chunk b read back value allocated string one contains b one corrupted point string use read leak keep overflowing granularity matching size object bucket reading back string every time check leaked data string know reached target object know offset vmwarevmx base vtables dnd copypaste object therefore overflow look last bit retrieved data see match vtable offset getting code execution obtained info leak know type c object overflow proceed rest exploitation two case need handle copypaste dnd please note probably one line exploitation many others copypaste case case copypaste object overwrite vtable make point data control need pointer controlled data interpreted vtable address object way decided using another rpci command unitywindowcontentsstart command used unity mode draw image host allows u value control know offset base address vmwarevmx argument taken command width height image word combining two value known address line vtable entry copypaste object trigger sending copypaste command summary following send unitywindowcontentsstart write address stack pivot gadget know address height width parameter overwrite vtable address pointer address adjusted offset vtable entry called trigger use vtable sending copypaste command rop dnd case case dnd object ca nt overwrite vtable right overflow vtable accessed call another method need another way know address qword control unity image width height ca nt forge vtable size want let look structure dnd cp object summarized follows similar structure found openvmtools slightly different format vmwarevmx void vtable ifacetype rpcutil void vtable rpcbase mrpc dndtransportbuffer seqnum buffer totalsize offset rpcbase void vtable lot field omitted since irrelevant purpose blog post pointer rpcbase object also c object therefore overwrite mrpc field pointertopointer data control vtable liking rpcbase object pointer also use unitywindowcontentsstart command another parameter command take top width height imgsize control size image buffer buffer allocated address also found static offset vmwarevmx base populate content buffer using unitywindowcontentschunk command summary following send unitywindowcontentsstart command allocate buffer store fake vtable send unitywindowcontentschunk command populate fake vtable stack pivot gadget overwrite mrpc field dnd object address pointing address allocated buffer trigger use vtable mrpc field sending dnd command rop p rwx page vmwarevmx least version note reliability mentioned earlier exploit reliable due window lfh thing attempted order increase reliability short list monitor allocation size see take advantage determinism lfh number malloc free described find c object overwrite preferably spray find object heap function pointer preferably spray find seperate info leak bug use oracle creative useless video video exploit action video yes vmware inside vmware conclusion pwn fun make sure want take part contest like either multiple bug find inspired vulnerability
260,Lobsters,virtualization,Virtualization,Vuln research in hypervisors by creating unusual system configurations,https://github.com/airbus-seclab/crashos,vuln research hypervisors creating unusual system configuration,crashos hardware software requirement installation ie vmware usage createnewtestdirectorypy inith initc makefile license reference,crashos crashos tool dedicated research vulnerability hypervisors creating unusual system configuration crashos minimalist operating system aim lead hypervisor crash hence name launch existing test implement owns observe hypervisor behaviour towards unusual kernel core crashos provides following o feature boot entry memory management segmentation paging interrupt exception handling io communication default kernel configuration available set feature allows entirely reconfigure kernel desire note crashos work progress please report issue hardware software requirement crashos work intel hardware architecture requires gccmultilib compiled grub boot kernel multiboot compliant installation ie vmware install crashos first compile project main makefile create executable testbin crashos make install testbin provided vmware disk image test vmware hypervisor need vmwaremountcommand line tool ability mount filesystems crashos sudo make install usage use script createnewtestdirectorypy create new directory containing test create local makefile log file store test log text file describe test test file filled test template crashostools python createnewtestdirectorypy myowntest directory myowntest created crashostools cd crashos l srcmyowntest makefile myowntestc myowntestlog myowntesttxt crashos test need define specific kernel configuration thus test must contain init function save current kernel configuration defines configuration want work test function restore function recovers old kernel configuration test template available init kernel default function available inith initc function description initworkmem initialize meminfo struct define available physical memory initsegmentation initialize gdt global descriptor table following entry update gdtr segment selector initpaging initialize pgd first identity mapping update enable paging initinterrupts initialize idt interrupt descriptor table following entry first entry exception others function allow developer modify default system parameter define configuration following command line generates code documentation function available crashos crashos make doc create html documentation doxygendocumentationhtmlindexhtml specify main makefile list test want launch test rebuild project crashos make license crashos released reference
261,Lobsters,virtualization,Virtualization,Is it possible to host Facebook on AWS?,http://blog.sqlizer.io/posts/facebook-on-aws/,possible host facebook aws,since five u tech giant seven snap deal google cloud platform aws server capacity many server facebook server accurate calculation moore law next web calculation one user per server calculation two revenue per server calculation three employee per server employee difference server make estimate facebook server many server aws server aws global infrastructure similar calculation pure server capacity server hardware performance opensourced data center knowledge cold storage design hardware werner vogels clockrates move whatsapp ibm migration one noticed eight year server hardware performance software hiphop virtual machine hhvm facebook entire site run hhvm fraught history php hhvm hhvm github repository hhvm aws linux server sql v nosql flamewars mysql timeline memcached high scalability amazon rds tech stack github repo netflix much would cost host facebook aws aws calculator google aws cost calculation amazon amazon amazon rds total total yearly cost facebook giant revenue possible host facebook aws sqlizer api convert file,facebook around since year since company one five u tech giant moved single server running dorm room seven purposebuilt data centre dotted around globe likely planned coming year facebook expects user count continue growing recent news snap deal google cloud platform aws amazon web service got u wondering whether possible run behemoth facebook aws answer question need break four separate part server capacity server hardware performance software cost remember asking facebook host aws asking possible server capacity since facebook shared exact number server capacity whole lot guesstimation based existing guesstimation take number shovel salt many server facebook back data center knowledge estimated facebook running server estimate based set number last set number available accurate calculation put facebook server count take estimate true facebook server capacity outstrips moore law facebook user growth next web trying figure many server facebook five year try get resemblance accuracy three different calculation calculation one user per server begin user per server way calculate many server facebook facebook user server user server user per server facebook close user user user per server server need take account facebook double user also data created per person photo video live stream etc plus host instagram let double number server according calculation facebook run server calculation two revenue per server next revenue per server mean figure server capacity facebook revenue take revenue divide server count get revenue per server revenue server revenue per server facebook revenue divide get server revenue revenue per server server according calculation facebook run server calculation three employee per server calculation us employee measure server capacity facebook employee server per employee server employee server per employee facebook employee server per employee server employee server per employee server based calculation facebook run server difference server make range three calculation meet middle use final figure estimate facebook server many server aws aws global infrastructure aws aws broken follows region wholly contained geographic area eg europe u west availability zone az area within region made one data centre eg london oregon data centre essentially huge expensive warehouse house anywhere server aws region three pipeline az eight new region live take look aws global infrastructure breakdown take average server per data centre average data centre per az left potential server round say aws total server az data centre server enterprise tech similar calculation obsolete data based az reasoning still sound came range server estimated average three data centre per az estimate three data centre per az accurate possible aws could server worldwide pure server capacity term pure server capacity based likelyinaccurate calculation aws could host facebook time facebook need server aws server caveat take account aws current capacity limitation much spare capacity baked aws daily operation aws even spare capacity allocate facebook going ignore question assume aws could absorb facebook current need perhaps expense flexibility future server need facebook aws continuously investing server infrastructure assume future aws could host future facebook term pure server capacity possible host facebook aws likely answer yes server hardware performance assume aws server provide performance facebook server performance need taken account facebook spent billion server infrastructure scaled went server laptop renting server third party building data centre started designing building data centre outofthebox solution longer option facebook fort worth data centre construction datacenter knowledge aspect facebook seven data centre designed maximum performance efficiency big picture overall data centre design right nitty gritty element like chassis server chip everything custom trying optimize cost took lot component find standard server amir michael guy designed facebook server scratch said removed anything function bezel paint facebook opensourced data centre server design spreading design efficiency love others since contributed including google added effect driving cost hardware thirdparty manufacturer began producing component making cheaper build bespoke data centre see complete list facebook server hardware data center knowledge facebook existing server infrastructure finely tuned help facebook operate facebook efficiently possible example separate section cold storage server farm photo video viewed anymore photo facebook year stored storage wake someone want access photo video video facebook year specialization running facebook contrast aws whose storage designed multipurpose albeitheavy use like facebook google amazon design hardware yes build server said werner vogels cto amazon building custom storage server address heavy workload worked together intel make household processor available run much higher clockrates aws might generalized unlikely server perform worse facebook however lot said specialization efficiency gain would big tech firm otherwise highly likely facebook would need server aws get equivalent performance get data centre account compensate lack real data going estimate facebook would need capacity currently pushing server count look inside facebook prineville data center datacenter knowledge also worth noting facebook planning move whatsapp ibm public cloud server server whatsapp currently us baremetal similar facebook highend ibm softlayer server could potentially offer performance facebook hardware number tiny comparison number talking assume future need encompassed future growth plan migration real world clearly make sense facebook migrate aws thought experiment concerned migration facebook aws want see feasible fact whole article assumes facebook would hosting aws around time began building infrastructure sake argument parallel universe smooth long would aws migration facebook moved instagram aws server took year one noticed based experience likely reverse migration endusers none wiser whole facebook talking instagram included could take helluva lot longer compared theoretical migration instagram migration small comparison mention instagram grown alot since netflix took eight year fully migrate netflix aws eight year based anecdotal evidence migration would probably pretty smooth take several year server hardware performance aws facebook heavily invested bespoke data centre server design implementation open source design likely operating similar level performance reckon aws could easily provide facebook computing power performance requires aws tuned facebook specific need allocating leeway facebook could server might need aws server aws provide facebook server performance need likely yes software facebook still developed using os open source software like many others grown rapid pace huge scale often needed build tool heavily modify existing one meet need application code still developed using php order get better performance facebook developed hiphop virtual machine hhvm time jit compile php code meant facebook code could served using combination hhvm nginx facebook entire site run hhvm desktop api mobile development production definition bespoke software seems aws fraught history php hhvm facebook hhvm github repository link hhvm aws linux server assume facebook would able successfully run hhvm aws thus facebook site database though come data storage notorious example bandied sql v nosql flamewars facebook heavy modification mysql storing timeline data relying memcached enable speedy delivery read extensively facebook scaling journey high scalability specific facebookmysql would amazon rds relational database service cut big tech company using amazon rds notably netflix perhaps netflix video successfully using rds facebook questionable though facebook mysql cluster humongous simple migration likely cut even branch mysql handling load nowadays facebook extensive tech stack github repo demonstrates raise concern compatibility aws perhaps telling information difficult would come netflix rebuilt majority tech moved distributed cloud operation aws support vast software array complex data need facebook likely would almost certainly subpar performance facebook might even need build new system much would cost host facebook aws note likely inaccurate portion article despite extensive calculation option aws impossible know kind data storage compute requirement facebook actually need number complete guesstimation final piece puzzle cost aws enabled countless company scale quickly cheaply majority never reach scale facebook scale facebook likely becomes cheaper build infrastructure unpicking jump calculation using aws calculator let look cost cloud computing global product snapchat ipo document world exposed snap inc commitment pay google aws year per month tech world little shocked huge number joke abound paying store compute disappearing content mentioned earlier whatsapp still hosted ibm public cloud server facebook planning migrate soon however one point total cost hosting whatsapp hefty monthly bill app us server assume facebook heavier usage need whatsapp snapchat cost calculation calculation simple one based server split compute amazon amazon rds data storage transfer photo video monthly combined data transfer petabyte terabyte assumes photo uploads day average per photo hour video uploaded per day average per video mean intricate nuanced calculation better please see original aws calculation calculation amazon compute amazon instance run php code etc instance monthly utilization linux year upfront reserved amazon storage photo video standard storage pb putcopypostlist request get request data transfer interregion data transfer data transfer data transfer data transfer cloudfront amazon rds amazon rds ondemand db instance run facebook timeline db instance monthly utilization db engine license mysql class deployment multi az storage general purpose data transfer interregion data transfer data transfer data transfer intraregion data transfer total total one payment upfront one payment averaged month per month monthly cost excluding one payment total monthly cost total yearly cost theory would cost facebook per year host aws facebook giant annual revenue exceeding total market cap user worldwide facebook clearly hefty intricate infrastructure previous estimate facebook owning around worth server infrastructure likely triple around however per year hosting way facebook entire cost revenue encompasses data center operation cost among thing worth noting aws price facebook paid hypothetical situation much like snapchat netflix facebook would heavy influential user thus able negotiate secure deal likely close cost price hosting would facebook able pay hosting aws yes costly possible host facebook aws way know whether thought experiment accurate recap term pure server capacity would seem aws could handle facebook need server hardware might offer le optimal performance account server thus computing power software thing get tricky questionable whether facebook could simply port existing infrastructure straight aws yet possible workarounds could exist although might mean building new system top aws existing infrastructure pain as make sense right facebook hosting aws tech would probably developed around saying software problem tricky facebook afford pay hosting would add big chunk currently spend year doubt conclusion wrong data work need know according calculation information presented theoretically possible host facebook aws yes likely sqlizer convert file sql rest api help automate database migration process convert file
262,Lobsters,virtualization,Virtualization,My OpenBSD Server (2) - A virtualized network with OpenBSD's vmm,http://blog.hermes-technology.de/openbsd/server/virtualmachine/network/2017/06/12/vmd-for-a-virtual-server-network.html,openbsd server virtualized network openbsd vmm,update answered question stackoverflow configuring relayd hostvm intro outline create vms create host vm choose mirror download download file http ftphostserverdepubopenbsd http create raw disk file start installation guided installation openbsd hostvm tilde ctrld post duplicate host vm vms want setup httpd task vm added virtual network back main server virtual network interface card nic pf openbsd firewall unbound dns name server vmd go etcvmconf configuring relayd hostvm work outlook,update already suggested outlook last post wanted exchange nginx relayd redirection thanks answered question stackoverflow see new section configuring relayd hostvm hello dear reader last post described setup http server reachable public domain openbsd time would like go little bit extend server network virtual machine machine reached name subdomain represent intro setup work needed download two file openbsd site installation file recent openbsd system time boot file bsdrd afterwards install vm configure duplicate virtual network configure main server everything worked like charm end better explenation include similar figure show last two post figure virtual network server see serveral component configured virtual network work desired end need configure pf redirection nat configure unbound acting dns server create three different vms hostvm foovm barvm connect vms virtual switch called localnet configure relayd hostvm redirection subdomain request outline short outline jump back forth turn noscript second see create vms section deal creating raw disk image installing openbsd via openbsd included vmd framework includes downloading necessary resource creating installing vm application called vmctl afterwards created installation duplicated set different vms create host vm choose mirror download many mirror could choose listed openbsd website download file first located necessary file webbrowser system chose mirror frankfurt main url http ftphostserverdepubopenbsd chose recent openbsd version navigated directory ending http necessary file openbsd installation image already downloaded created bootable usb stick openbsd installation bsdrd boot image openbsd opened sshsession server downloaded file via ftp using ftp wget base thank comment raf cd mkdir vmnetwork cd vmnetwork ftp http ftp http pengouinbsd correctly suggested comment also check downloaded file cd vmnetwork ftp http signify cp x bsdrd assume also folder called vmnetwork user home directory create raw disk file start installation located dedicated folder vmnetwork previously downloaded file bsdrd located within folder created raw disk image called hostdrive doas vmctl create hostdrive started installing disk interactively console doas vmctl start hostvm c b bsdrd hostdrive option provided vmctl mean following start hostvm start virtual machine naming hostvm c immediately connect console vm current shell b bsdrd choose specified image boot kernel start virtual machine two gigabyte memory create virtual network interface connected virtual machine hostdrive attach raw disk file install openbsd attach image openbsd installation file ever run problem annoying error running command vmctl start doas vmctl start myvm xyzdrive vmctl start vm command failed file directory probably missing device file tap dev installer creates default run new tap device need took tip ran simmilar problem guided installation openbsd hostvm table show whole installation process including comment table guided installation welcome installation program nstall u pgrade utoinstall hell want install openbsd terminal type return system hostname short form eg foo host call host host vm net available network interface network interface wish configure done return yes configure address dhcp none dhcp ip address vm virtual network netmask return address rtsol none none return nt need address network interface wish configure done done return done default route address none address router manages virtual network chose subnet add net default gateway dns domain name eg barcom mydomain hermestechnologyde root domain end resolve hostname hosthermestechnologyde dns nameservers ip address list none none dns nameserver serving virtual nic ip password root account echo password root account mypasswd choose another password course start sshd default yes return yes want connect via ssh later change default console yes return sure speed use done return definitely setup user enter lowercase loginname host want user called host full name user host host return nt need full name password user host echo password user host mypasswd another safe password warning root targeted password guessing attack pubkeys safer allow root ssh login yes prohibitpassword return nt want support direct root login via ssh available disk disk root disk detail list disk block device block device ok seems one want available disk disk root disk detail return yes take valid mbr gpt use w hole disk mbr whole disk g pt e dit whole return use whole disk setting openbsd mbr partition whole done autoallocated layout size offset fstype fsize bsize cpg b swap c unused tmp e var f usr g h usrlocal usrsrc j usrobj k home use uto layout e dit auto layout create c ustom layout return auto layout worked rounding size bsize sector rounding offset bsize sector rounding size bsize sector rounding size bsize sector rounding size bsize sector rounding size bsize sector rounding size bsize sector rounding size bsize sector rounding size bsize sector rounding size bsize sector sector byte cylinder group block inodes sector byte cylinder group block inodes sector byte cylinder group block inodes sector byte cylinder group block inodes sector byte cylinder group block inodes sector byte cylinder group block inodes sector byte cylinder group block inodes sector byte cylinder group block inodes newfs reduced number fragment per cylinder group enlarge last cylinder group sector byte cylinder group block inodes available disk disk wish initialize done done return nt need another disk let install set location set disk http done http disk ok set disk disk partition already mounted return disk mounted yet available disk disk contains install medium done return ok one want disk contains install medium done msdos available partition partition install set done return mmh yes seems partition contains set pathname set done return pathname sound good select set entering set name file name pattern deselect set prepending set name file name pattern selected set labelled x x bsd x x x x bsdrd x x x bsdmp x x set name abort done done want x bsd x x x x bsdrd x x x x bsdmp x x set name abort done done return ok go directory contain continue without verification yes way around installing bsd kb installing bsdrd kb installing bsdmp kb installing kb extracting etctgz kb installing kb installing kb installing kb installing kb extracting xetctgz installing kb installing kb installing kb location set disk http done done return set timezone list canadamountain africa chile gbeire israel navajo u america cuba gmt jamaica prc utc antarctica eet japan universal arctic est kwajalein pacific wsu asia libya poland wet atlantic egypt greenwich met portugal zulu australia eire hst mst roc posix brazil etc hongkong rok posixrules cet europe iceland mexico singapore right factory indian nz turkey canada gb iran nzchat uct aha ok guess berlin europe timezone list canadamountain europeberlin take saving configuration file done making device node done congratulation openbsd install successfully completed boot new system enter reboot command prompt login new system first time please read mail using mail command made ok telling reboot machine easily choose exit vm via keysequence first enter tilde symbol afterwards ctrld tilde supposed apear terminal input thereafter stopped created virtual machine doas vmctl stop hostvm made copy installation doas cp hostdrive hostdrivebak also checked everything installed fine doas vmctl start hostvm c hostdrive boot installed system asking login password end configured doas added etcinstallurl file shown last post duplicate host vm vms want could easily duplicate created disk file needed vms doas cp hostdrive foodrive doas cp hostdrive bardrive afterwards started vm adjustment show foo vm bar vm configured analogously starting vm usual doas vmctl start foovm c foodrive add foo user copied terminal output could nt find etcadduserconf creating new adduser configuration file reading etcshells enter default shell csh ksh nologin sh ksh default shell ksh binksh default login class authpf bgpd daemon default pbuild staff unbound default enter default home partition home copy dotfiles etcskel etcskel send welcome message pathfile default send message prompt password default yn default encryption method password auto blowfish auto use option silent nt want see warning question reading etcshells check etcmasterpasswd check etcgroup ok let go nt worry mistake chance later correct input enter username foo enter full name enter shell csh ksh nologin sh ksh uid login group foo foo login group foo invite foo group guest wheel login class authpf bgpd daemon default pbuild staff unbound default enter password enter password name foo password fullname foo uid gid foo group foo wheel login class default home homefoo shell binksh ok yn added user foo copy file etcskel homefoo add another user yn n goodbye deleted host user doas userdel host doas rm rf homehost configured new hostname etchosts localhost localhost foohermestechnologyde foo etcmyname foohermestechnologyde alter correct ip barvm inet enabled httpd show hello foo html page refer last post see setup httpd task exited vm vm added virtual network back main server ok hostvm foovm barvm successfully set configuration main server first created virtual nic act router dns server virtualmachinenetwork configured internal firewall pf dns service via unbound end configured virtual machine vmd etcvmconf virtual network interface card nic creating virtual network device easy openbsd create file called insert desired configuration doas touch echo inet none next reboot restarting networking service device pf openbsd firewall configuration file firewall etcpfconf configured like openbsd pfconf v deraadt exp see pfconf etcexamplespfconf intif set skip lo block return block stateless traffic pas establish keepstate default permit remote connection block return proto tcp port set blockpolicy drop set loginterface egress set skip act nat match scrub nodf randomid maxmss match egress inet egress network natto allow outgoing pas quick inet pas intif inet redirect http http host vms pas egress inet proto tcp egress port rdrto incoming http traffic redirected hostvm soon running apply configuration change executed doas pfctl f etcpfconf verified change via doas pfctl sr unbound dns name server enabled unbound doas rcctl enable unbound configured way needed varunboundetcunboundconf openbsd unboundconf v sthen exp definately want device act dns name server virtual network server interface interface interface override default address send query multiple address available used randomly counter spoofing outgoinginterface outgoinginterface accesscontrol refuse accesscontrol allow accesscontrol refuse accesscontrol allow accesscontrol allow accesscontrol allow want virtual network allowed access donotquerylocalhost hideidentity yes hideversion yes uncomment enable qname minimisation http qnameminimisation yes uncomment enable dnssec validation autotrustanchorfile varunbounddbrootkey serve zone authoritatively unbound resolver client external service localzone local static localdata mycomputerlocal localzone static localdataptr mycomputerlocal udp edns reassembly buffer advertised peer default may need lowering broken network fragmentationmtu issue particularly validating dnssec ednsbuffersize use tcp forwardzone request useful making dns request ssh port forwarding tcpupstream yes option synthesizes aaaa record host nt use pf afto moduleconfig validator iterator wellknown prefix default remotecontrol controlenable yes controlusecert controlinterface varrununboundsock forwardzone name forwardaddr forward dns request local real router forwardaddr henet forwardaddr henet forwardaddr googlecom forwardaddr googlecom forwardaddr opendnscom forwardfirst yes try direct forwarder fails dns request subnet answered dns server vmd go etcvmconf next task create correct vm configuration vm would connected local virtual switch managing virtual network etcvmconf file homeuservmnetwork disk file previously created location change user username vm hostvm want vm called hostvm memory memory disk file hostdrive running hostdrive interface tap lladdr switch localnet network interface specified mac localnet switch vm foovm memory disk file foodrive interface tap lladdr switch localnet vm barvm memory disk file bardrive interface tap lladdr switch localnet switch localnet switch called localnet add virtual interface added line configured specific vms line configured virtual switch vms network interface attached enabled vmd restarted server configuring relayd hostvm last task configuration relayd hostvm logged hostvm started automatically reboot doas vmctl console hostvm configured relayd redirect request subdomains etcrelaydconf macro table table fooservice foovm table barservice barvm protocol define new http protocol called reverseproxy http protocol reverseproxy match request host value foohermestechnologyde forward fooservice quick mean handled last rule match processed match request quick header host value foohermestechnologyde forward fooservice match request quick header host value wwwhermestechnologyde forward fooservice match request quick header host value barhermestechnologyde forward barservice relay create new relay called proxy relay layer eg http relay proxy relay listen host ip port listen hostvm port use protocol reverseproxy defined protocol reverseproxy forwarding enabled specified service forward fooservice port forward barservice port last task enable start relayd doas rcctl enable relayd doas rcctl start relayd work bought domain hermestechnologyde registered bloghermestechnologyde cname entry following work enter bloghermestechnologyde anywhere webbrowser request land main server ip hermestechnologyde pf redirects http request hostvm relayd hostvm redirects blog subdomain request ip blogvm blogvm httpdservice sends response gateway response get network address translation nat pf router router sends response client outlook next post explain set proper ssh connection server public key much safer using password also explain configure sshtunneling login virtual server workstation maintaining server last explain configured pf ssh protection like
263,Lobsters,virtualization,Virtualization,An introduction to timekeeping in Linux VMs,https://opensource.com/article/17/6/timekeeping-linux-vms,introduction timekeeping linux vms,clocksources tsc pvclock hyperv tsc page hardware extension virtualizing tsc hostwide time synchronization timekeeping linux vms linuxcon containercon cloudopen china,keeping time linux simple virtualization add additional challenge opportunity article review kvm xen hyperv related timekeeping technique corresponding part linux kernel timekeeping process activity recording long something take need instrument measure time linux kernel several abstraction represent device clocksource device give timestamp whenever need word clocksource ticking counter allows get value clockevent device alarm ask device signal time future eg wake alarm triggered get signal schedclock function similar clocksource particular one cheap read meaning one get value fast schedclock used taskscheduling purpose scheduling happens often ready sacrifice accuracy characteristic speed imagine writing application need get current timeofday timestamping example may come something like include stdioh include timeh int timestampfunction struct timespec tp int re clockgettime clockrealtime tp something timestamp clockrealtime clock man clockgettime give answer clockrealtime clock give time passed since january clock affected ntp adjustment jump forward backward system administrator adjusts system time clockmonotonic clock give time since fixed starting since booted system clock affected ntp ca nt jump backward clockmonotonicraw clock give time clockmonotonic clock affected ntp adjustment clockrealtimecoarse clockmonotoniccoarse faster lessaccurate variant clockrealtime clockmonotonic couple clock relate running process thread let skip application timestamping frequently thousand time per second application must sure clockgettime fast work linux algorithm call clockgettime vdso virtual dynamic shared object vdso shared library provided every application kernel contains code run userspace without switching kernel clockrealtimecoarse clockmonotoniccoarse give immediate answer reading appropriate timekeeper struct kernel provides userspace reading clockrealtime clockmonotonic check whether current clocksource use read userspace use reading extrapolate appropriate timekeeper value clocksource use ca nt read userspace switch kernel system call let kernel read current clocksource extrapolate appropriate timekeeper value vdso optimization clocksource read directly userspace important testing result test program clockgettime read test performed kvm guest without vdso optimization enabled kvmclock without vdso time clockgettimemany real user sys kvmclock vdso time clockgettimemany real user sys pure userspace method seven time faster syscall definitely want make clocksource suitable fast read clocksources generally require clocksource never go backward never stop avoid jump good resolution frequency fast read available userspace code pc hardware number legacy timekeeping device lack abovementioned characteristic namely pit suitable counting jiffy system timer interrupt low resolution cmos rtc low resolution timeofday clock optional timer ca nt read userspace acpi pm timer frequent overflow slow read ca nt accessed userspace hpet always present necessarily fast read lapic timer unknown frequency ca nt read userspace modern hypervisors virtualize hardware virtualization cost access high use device reliable clocksource linux tsc bare hardware commonly used clocksource today tsc time stamp counter tsc special autoincremented cpu register number advantage using legacy hardware mentioned previously high precision read one assembly instruction rdtsc even userspace tsc however issue including frequency unknown need measured pit cmos acpi timer register writable reading differ different cpu tsc stop lowpower c state processor nt usually happen modern hardware tsc getting outofsync big numa system observed past luckily number system limited smi handler may reset counter virtualization brings additional challenge virtual machine migrating another host tsc value differs see jump value moreover frequency measured boot longer actual tsc frequency two similar method introduced cope issue pvclock paravirtualized clock xen kvm hypervisor guest tsc page hyperv guest fixedfrequency clock addition reading tsc value need math get reading pvclock xen kvm hypervisors came socalled pvclock protocol enhance tsc make suitable virtualized guest protocol based simple percpu structure shared host guest struct pvclockvcputimeinfo version tsctimestamp systemtime tsctosystemmul tscshift flag pad get current tsc reading guest must following math percputime rdtsc tsctimestamp tscshift tsctosystemmul systemtime flag field indicates whether trust reading keep monotonicity promise even subsequent call different cpu determines ability use clocksource vdso case monotonicity guaranteed linux need keep track last reading make sure application see time going backward even migrated one cpu another luckily nt happen often modern hardware reading fast hyperv tsc page microsoft reinvented pvclock protocol tsc page proctol similar pvclock significant difference tsc page single structure per virtual per ca nt compensate case tsc get sync several cpu nt know sure guess case hypervisor try synchronizing tscs disable tsc page mechanism altogether protocol tsc page struct mshypervtscpage volatile tscsequence volatile tscscale volatile tscoffset get current tsc reading guest must following math pervmtime virtualtsc tscscale tscoffset special value tscsequence field indicates method disabled fall back reading value another virtualized msr modelspecific register hyperv provides impossible userspace code generally much slower hardware extension virtualizing tsc since early day hardwareassisted virtualization intel supplying option tsc offsetting virtual guest hardware would mean guest rdtsc reading return host tsc value offset unfortunately nt enough support migration different host tsc frequency may differ pvclock tsc page protocol introduced late intel introduced tsc scaling feature already present amd processor several year theory game changer making pvclock tsc page protocol redundant however immediate switch using plain tsc clocksource virtualized guest seems impractical one must sure potential migration recipient host support feature yet widely available extensive testing also must performed make sure drawback switching paravirtualized protocol hostwide time synchronization running virtualized guest kvm using kvmclock implement pvclock protocol running hyperv guest hyperv tsc page clocksource timeofday sync guest host different guest host reading tsc value resulting time right well exactly host guest clockrealtime clock affected ntp adjustment may diverge time solve problem solution introduced ptp device kvm hyperv device actually related ptp time synchronization protocol nt work network device present ptp devptp device consumable existing time synchronization software enable time synchronization host must following kvm guest need load ptpkvm module make load reboot something like echo ptpkvm etcmodulesloaddptpkvmconf required hyperv guest module implementing device load automatically add reference clock ntp daemon configuration case chrony would echo refclock phc poll dpoll offset etcchronyconf restart ntp server systemctl restart chronyd check time synchronization status chronyc source grep kvm guest known produce better result hyperv guest mechanism behind device different whereas hyperv host sends guest time sample every five second kvm guest option direct hypercall hypervisor get time testing result kvm idle host single guest f seq chronyc source grep sleep done testing result hyperv idle host single guest f seq chronyc source grep sleep done although hyperv ptp device le accurate kvm still accurate compared ntp see guest system time usually stay within host good result vitaly kuznetsov talking timekeeping linux vms linuxcon containercon cloudopen china beijing june
264,Lobsters,virtualization,Virtualization,"Intel fires warning shots at Microsoft, claims x86 emulation is a patent minefield",https://arstechnica.com/information-technology/2017/06/intel-fires-warning-shots-at-microsoft-claims-x86-emulation-is-a-patent-minefield/,intel fire warning shot microsoft claim emulation patent minefield,enlarge threatening company working emulator technology tsx transactional memory releasing window laptop using qualcomm snapdragon processor,enlarge qualcomm prototype snapdragon motherboard arm pc area square centimetre celebrating architecture birthday processor first came market june took rather uncelebratory step threatening company working emulator technology intel blog post offer rundown investment company made extending improving instruction set feature sse avx tsx transactional memory sgx secure enclave acting demonstration company transformed ancient instruction set something cutting edge forwardlooking second part post take sour note intel note many development patented history using patent protect innovation amd cyrix via transmeta named victim defence post nt name name hard figure likely aimed microsoft perhaps hint qualcomm later year company including asus hp lenovo releasing window laptop using qualcomm snapdragon processor first time window released arm first attempt bring window arm illfated window window rt time around key difference window rt system could run application window arm machine however include softwarebased emulator provide compatibility application compatibility make armbased machine threat intel way window rt never winarm run wintel software still offer lower price better battery life lower weight similar intel dominance laptop space longer assured implication intel post chip giant nt going relying technology secure position space legal system full detail window emulation unknown critical intel patent threat question precisely extension supported core instruction set year old made debut released way back going patentencumbered microsoft emulator could also safely ignore latest extension tsx sgx mpe software us extension rare extension vtx virtualization feature irrelevant running window application similarly skipped intel filed ton patent cover various extension developed year leaf extension widespread application adoption new enough still covered patent part extension fall category various simd single instruction multiple data instruction widespread use certain kind number crunching video image processing gaming among field newest instruction avx family probably recent enough developer blindly assume avx available rather include avx code equivalent nonavx code avx available fall back slower equivalent routine avx older predecessor sse family much le likely fallback avx need fallback developer still reasonably expect program run machine nt support avx case sse amd made mandatory part extension mean virtually every chip sold last decade include support developer nt need bother including fallback path case nt present instead software simply break problem sse family also new various sse extension introduced patent covering still force intel patent sse family applicable software emulator merely hardware clone hard see window emulator able avoid patent also offering sufficient compatibility application course may tough talk intel software actually ship hard know precisely exposure emulator patented also widely known would little surprising microsoft considered patent liability developing emulator intel business health continues strong dependence microsoft business make chip firm little wary taking software company customer court
265,Lobsters,virtualization,Virtualization,Kubernetes Production Patterns and Anti-Patterns,https://github.com/gravitational/workshop/blob/master/k8sprod.md,kubernetes production pattern antipatterns,kubernetes production pattern installation installation instruction antipattern mixing build runtime size security splitting build runtime environment note note note multistage build anti pattern zombie orphan note antipattern direct use pod kubernetes pod antipattern using background process note using probe production pattern logging note twelve factor app production pattern immutable container copyonwrite strategy antipattern using tag production pattern pod readiness note antipattern unbound quickly failing job job note production pattern pod quota http kubernetesiodocstasksconfigurepodcontainerassignmemoryresource http kubernetesiodocstasksconfigurepodcontainerassigncpuresource antipattern putting configuration inside image production pattern circuit breaker weather service backend mail service backend frontend circuit breaker note vulcand nginx plus envoy production pattern sidecar rate connection limiting istio,kubernetes production pattern antipatterns going explore helpful technique improve resiliency high availability kubernetes deployment take look common mistake avoid working docker kubernetes installation first follow installation instruction antipattern mixing build runtime first common antipattern working docker image specifically writing dockerfiles image mixing build runtime environment image let consider dockerfile run aptget update run aptget install gcc run gcc helloc hello compiles run simple hello world program cd prodbuild docker build prod docker run prod hello world couple problem resulting docker image size docker image grep prod prod latest minute ago almost megabyte host several kilobyte c program bringing package manager c compiler lot unnecessary tool required run program lead u second problem security distribute whole build toolchain addition ship source code image docker run entrypointcat prod buildhelloc include stdioh int main printf hello worldn return splitting build runtime environment better way use pattern called buildbox idea behind build separate buildbox image provides necessary build environment compilebuild program use another much smaller image run program let take look cd prodbuildfix docker build f builddockerfile buildbox note used f flag specify dockerfile going use default docker would look file named dockerfile also directory buildbox image contains build environment use compile c program docker run v pwd build buildbox gcc buildhelloc buildhello note local docker environment configured point local minikube cluster via eval minikube dockerenv command command work wo nt able mount volume use local docker installation open new shell session let explore happened instead building another image compiled binary program source code inside using docker build mounted source code directory buildbox container compiled program container output resulting binary volume look local directory see compiled binary build much smaller image run program add hello hello entrypoint hello docker build f rundockerfile prod docker run prod hello world docker image grep prod prod second ago mb prod latest minute ago mb note please aware either plan providing needed shared library runtime image statically build binary include needed library docker support buildbox pattern natively starting version providing feature called multistage build multistage build define multiple stage single dockerfile start new clause selectively copy artifact stage way write single dockerfile end single resulting small image example build stage run aptget update run aptget install gcc add helloc buildhelloc run gcc buildhelloc buildhello run stage copy buildhello hello entrypoint hello notice copy resulting binary first stage build let build image docker build f multidockerfile prod docker run prod query docker image see version image size anti pattern zombie orphan note example demonstration work linux quite easy leave orphaned process running background let launch simple container docker run busybox sleep let open separate terminal locate process p uax grep sleep sasha sl docker run busybox sleep root s sleep see fact two process docker run sleep running container let send kill signal docker run cicd job would long running process however docker run process exited sleep process running p uax grep sleep sasha sl docker run busybox sleep root s sleep yelp engineer good answer happens linux kernel applies special signal handling process run pid process sent signal normal linux system kernel first check custom handler process registered signal otherwise fall back default behavior example killing process sigterm however process receiving signal pid get special treatment kernel nt registered handler signal kernel wo nt fall back default behavior nothing happens word process nt explicitly handle signal sending sigterm effect let enter container see docker p container id image command created status port name busybox sleep minute ago minute nervousjennings docker exec ti binsh p ef pid user time command root sleep root binsh root p ef indeed sleep command running pid since explicitly register signal handler term signal get ignores let kill container docker kill solve issue need simple init system proper signal handler specified luckily yelp engineer built simple lightweight init system dumbinit docker run quayiogravitationaldebiantall usrbindumbinit binsh c sleep send sigterm signal docker run process handle shutdown properly antipattern direct use pod kubernetes pod building block provide durability guarantee kubernetes doc say pod wo nt survive scheduling failure node failure eviction example due lack resource example let create single nginx pod cd prodpod kubectl create f podyaml kubectl get pod name ready status restarts age nginx running pod keep running also restart case container crash provided appropriate restart policy however event node go start running resource triggering eviction pod lost let delete kubectl delete podnginx kubectl get pod resource found pod gone use pod directly production instead almost always use controller provide selfhealing cluster scope plenty choose deployment replicasets daemonsets statefulsets even singleton use deployment replication factor guarantee pod get rescheduled survive eviction node loss kubectl create f deployyaml kubectl get pod name ready status restarts age running delete pod get rescheduled right back kubectl delete pod deleted kubectl get pod name ready status restarts age running antipattern using background process note need executed eval minikube dockerenv command following work properly cd prodbackground export registry kubectl get svcregistry ojsonpath specclusterip docker build docker push kubectl create f crashyaml kubectl get pod name ready status restarts age crash running container supposed start simple python web server port container appears running let check server running kubectl exec ti crash binbash root crash p uax user pid cpu mem vsz r tty stat start time command root s binbash startsh root sleep root s binbash root r p uax server running made mistake script however container happily running using probe first obvious fix use proper init system monitor status web service however let use opportunity use liveness probe apiversion kind pod metadata name fix namespace default spec container command startsh image name server imagepullpolicy always livenessprobe httpget path port timeoutseconds kubectl create f fixyaml python http server still crash however time liveness probe fail container get restarted kubectl get pod name ready status restarts age crash running fix running even better solution would avoid using background process inside container instead decouple service running separate container process per container need run single entity colocate single pod approach many benefit including easier resource monitoring ease use efficiency resulting lightweight reusable infrastructure production pattern logging configuring logging application running inside container make sure log go standard output kubectl create f logslogsyaml kubectl log log hello world kubernetes docker system plugins make sure log sent stdout stderr get collected forwarded rotated note one pattern twelve factor app kubernetes support box production pattern immutable container every time write something container filesystem activates copyonwrite strategy approach make container efficient way work layer docker image readonly container start thin writable layer added top readonly layer change container make filesystem stored file change never get copied writable layer make small possible existing file container modified storage driver devicemapper overlay others performs copyonwrite operation copy file writable layer case active usage put lot stress storage driver especially case devicemapper btrfs writeheavy application recommended store data container rather make sure container write data volume independent running container designed io efficiency nonpersistent data kubernetes provides special volume type called emptydir apiversion kind pod metadata name testpd spec container image busybox name testcontainer volumemounts mountpath tmp name tempdir volume name tempdir emptydir default volume backed whatever disk backing node however note cleared permanently pod leaf node whatever reason persists across container restarts within pod though small file may beneficial set emptydirmedium field memory make kubernetes use rambacked filesystem tmpfs instead antipattern using latest tag recommended use use latest tag production creates ambiguity example looking tha latest tag possible tell version application actually running ok use latest development purpose although make sure set imagepullpolicy always make sure kubernetes always pull latest version creating pod apiversion kind pod metadata name always namespace default spec container command binsh c echo hello world image busybox latest name server imagepullpolicy always production pattern pod readiness imagine situation container take time start simulate going write simple script binbash echo starting sleep echo started successfully python httpserver note need executed eval minikube dockerenv command following work properly push image start service deployment cd proddelay export registry kubectl get svcregistry ojsonpath specclusterip docker build docker push kubectl create f serviceyaml kubectl create f deploymentyaml enter curl container inside cluster make sure work kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http doctype html notice connection refused error try access first second update deployment simulate deploy docker build docker push kubectl replace f deploymentupdateyaml next window let try see got service downtime curl http curl failed connect delay port connection refused got production outage despite setting maxunavailable rolling update strategy happened kubernetes know startup delay readiness service look list pod see old pod deleted immediately new one created thus leaving u wo functioning service next second let fix using readiness probe readinessprobe httpget path port timeoutseconds periodseconds readiness probe indicates readiness pod container kubernetes take account deployment kubectl replace f deploymentfixyaml time observe output kubectl get pod see two pod running old pod start terminating second one becomes ready kubectl get pod name ready status restarts age running running curl command consistently work service redeployed antipattern unbound quickly failing job kubernetes provides useful tool schedule container perform onetime task job however problem apiversion kind job metadata name bad spec template metadata name bad spec restartpolicy never container name box image busybox command binsh c exit cd prodjobs kubectl create f badyaml going observe race create hundred container job retrying forever kubectl describe job name bad namespace default image busybox selector parallelism completion start time sat mar label jobnamebad pod status running succeeded failed volume event firstseen lastseen count subobjectpath type reason message jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate created pod jobcontroller normal successfulcreate event common reason combined probably result expected time job accumulate load node docker quite substantial especially job failing quickly let clean busy failing job first kubectl delete jobsbad let use activedeadlineseconds limit amount retries apiversion kind job metadata name bound spec activedeadlineseconds template metadata name bound spec restartpolicy never container name box image busybox command binsh c exit kubectl create f boundyaml see second job failed pod created jobcontroller normal deadlineexceeded job active longer specified deadline note sometimes make sense retry forever case make sure set proper pod restart policy protect accidental ddos cluster production pattern pod quota one important kubernetes feature resource management kubernetes allows configure cpuram resource quota container ensure single container starve entire system suppose container tends hog memory cd prodquotas docker build docker push kubectl create f quotayaml container consumes megabyte memory limit set pod allows let see kubernetes handled kubectl get podsquota quota oomkilled kubernetes oom killer killed container application running inside leak memory gradually restart kubernetes also allows configure quota per namespace utilizes intelligent scheduling algorithm ensure pod distributed across cluster node appropriately example wo nt schedule pod node pod quota request exceeds resource available node proper quota configuration mandatory ensure smooth sailing production check kubernetes resource information http kubernetesiodocstasksconfigurepodcontainerassignmemoryresource http kubernetesiodocstasksconfigurepodcontainerassigncpuresource antipattern putting configuration inside image oftentimes application need configuration file run might tempting put configuration file alongside program inside container cd prodconfig docker build f configdockerfile docker push kubectl create f podyaml approach number drawback example want update configuration easy way inside running container another concern configuration file contains sensitive information password api key kubernetes provides elegant way deal issue using configmaps configmap kubernetes resource mounted inside running container multiple container let create configmap configuration file kubectl create configmap config fromfileconfigyaml kubectl get configmapsconfig oyaml see kubernetes converted configuration file configmap let rebuild image remove embedded configuration file update pod use configmap docker build f configfixdockerfile docker push kubectl delete f podyaml kubectl create f podfixyaml production pattern circuit breaker example explore generic production pattern necessarily kubernetesspecific using local kubernetes cluster play pattern called circuit breaker web application imaginary web server email render page frontend make two request backend talk weather service get current weather fetch current mail database make following assumption weather service auxiliary downtime nt affect whole system mail service critical user still able view mail weather service frontend weather mail service written python weather service backend flask import flask app flask name approute def hello return pleasanton ca saturday pm partly cloudy c precipitation humidity wind kmh name main apprun host mail service backend flask import flask jsonify app flask name approute def hello return jsonify bob examplecom subject lunch noon tomorrow alice examplecom subject compiler doc name main apprun host frontend flask import flask import request datetime import datetime app flask name approute def hello weather weather unavailable try print requesting weather start datetimenow r requestsget http weather print got weather datetimenow start rstatuscode requestscodesok weather rtext except print weather unavailable print requesting mail r requestsget http mail mail rjson print got mail datetimenow start letter mail outappend li subject li letter letter subject return html body weather p p email p ul ul p body weather br join name main apprun host let create deployment service cd prodcbreaker export registry kubectl get svcregistry ojsonpath specclusterip docker build docker push kubectl apply f serviceyaml deployment frontend configured deployment weather configured deployment mail configured service frontend configured service mail configured service weather configured check everyting running smoothly kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http frontend html body weather p pleasanton ca saturday pm partly cloudy c precipitation humidity wind kmh p email p ul li bob examplecom subject lunch noon tomorrow li br li alice examplecom subject compiler doc li ul p body let introduce weather service crash flask import flask app flask name approute def hello raise exception service name main apprun host build redeploy docker build f weathercrashdockerfile docker push kubectl apply f weathercrashyaml deployment weather configured let make sure crashing kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http weather doctype html public html finalen title internal server error title internal server error p server encountered internal error unable complete request either server overloaded error application p however frontend good kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http frontend html body weather p weather unavailable p email p ul li bob examplecom subject lunch noon tomorrow li br li alice examplecom subject compiler doc li ul p body everything working expected one problem though observed service crashing quickly let see happens weather service slow happens way often production eg due network database overload simulate failure going introduce artificial delay flask import flask import time app flask name approute def hello timesleep raise exception system overloaded name main apprun host build redeploy docker build f weathercrashslowdockerfile docker push kubectl apply f weathercrashslowyaml deployment weather configured expected weather service timing kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http weather doctype html public html finalen title internal server error title internal server error p server encountered internal error unable complete request either server overloaded error application p problem though every request frontend take second well much common type outage user leave frustration service unavailable fix issue going introduce special proxy circuit breaker circuit breaker special middleware designed provide failover action case service degraded helpful prevent cascading failure failure one service lead failure another circuit breaker observes request statistic check stats special error condition simple circuit breaker written python flask import flask import request datetime import datetime timedelta threading import lock import logging sys app flask name circuittrippeduntil datetimenow mutex lock def trip global circuittrippeduntil mutexacquire try circuittrippeduntil datetimenow timedelta apploggerinfo circuit tripped circuittrippeduntil finally mutexrelease def istripped global circuittrippeduntil mutexacquire try return datetimenow circuittrippeduntil finally mutexrelease approute def hello weather weather unavailable try istripped return circuit breaker service unavailable tripped r requestsget http apploggerinfo requesting weather start datetimenow apploggerinfo got weather datetimenow start rstatuscode requestscodesok return rtext else trip return circuit breaker service unavailable tripping except apploggerinfo exception sysexcinfo trip return circuit breaker service unavailable tripping name main apploggeraddhandler loggingstreamhandler sysstdout apploggersetlevel loggingdebug apprun host let build redeploy circuit breaker docker build f cbreakerdockerfile docker push kubectl apply f weathercbreakeryaml deployment weather configured kubectl apply f weatherserviceyaml service weather configured circuit breaker run separate container next weather service container pod cat weathercbreakeryaml note reconfigured service request handled circuit breaker first forward request weather service running pod trip request fails circuit breaker detect service outage auxilliary weather service bring mail service kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http frontend html body weather p circuit breaker service unavailable tripped p email p ul li bob examplecom subject lunch noon tomorrow li br li alice examplecom subject compiler doc li ul p body note production level proxy natively support circuit breaker pattern vulcand nginx plus envoy production pattern sidecar rate connection limiting previous example used pattern called sidecar container sidecar container colocated container pod add additional logic service error detection tl termination feature example sidecar nginx proxy add rate connection limit cd prodsidecar docker build f sidecardockerfile docker push docker build f servicedockerfile docker push kubectl apply f sidecaryaml deployment sidecar configured try hit service faster one request per second see rate limiting action kubectl run ti rm cli imageappropriatecurl restartnever command binsh curl http sidecar instance istio example platform embodies design
266,Lobsters,virtualization,Virtualization,Running OpenBSD on Azure,https://azure.microsoft.com/es-es/blog/running-openbsd-on-azure/,running openbsd azure,announced azure marketplace pfsense firewall product openbsd secure building firewall bring openbsd azure guidance azure agent want use openbsd based virtual appliance azure esdenera firewall,know microsoft officially supported freebsd virtual machine vm running azure since last year microsoft announced availability freebsd readymade vm image azure marketplace go azure marketplace also see freebsd vm pfsense offering today happy share azure support openbsd collaboration effort esdenera microsoft meanwhile esdenera brings firewall product based openbsd board azure marketplace openbsd openbsd project produce freely available multiplatform unixlike operating system goal place emphasis correctness security standardization portability openbsd thought secure unixlike operating system many security professional result neverending comprehensive source code audit openbsd fullfeatured unixlike operating system available source binary form charge openbsd integrates cuttingedge security technology suitable building firewall private network service distributed environment openbsd benefit strong ongoing development many area offering opportunity work emerging technology international community developer end user bring openbsd azure follow guidance prepare custom openbsd image convert virtual hard disk fixed vhd format upload azure storage create virtual machine uploaded vhd latest azure agent added support openbsd contributed esdenera next release want use openbsd based virtual appliance azure esdenera firewall professional network appliance built enterprise network infrastructureasaservice iaa remote access solution built upon esdenera tnos network operating system openbsdbased platform developed esdenera oem customer
268,Lobsters,virtualization,Virtualization,Docker on OpenBSD 6.1 (-current),https://medium.com/@dave_voutila/docker-on-openbsd-6-1-current-c620513b8110,docker openbsd current,step docker howto step install latest openbsd snapshot current inter web step installing openbsd laptop really hard gnome step configure vmmvmd walkthrough bsdnow aside installed see gist step grab alpine linux iso alpine linux step make new virtual disk image step boot alpine iso provide better network device support step inhale fresh alpine air good wiki installation detail thing note install step extlinux enabling serial console boot step boot alpine real step install docker http docker step make user step ditch serial console ssh step test docker instance nginx acknowledgement man page great vmm writeup hir information report bsdnow chatter mike larkin reyk floeter etc appendix going dockercompose church emacs tramp mode appendix extlinuxconf alpine might need serial console stuff anymore,step docker howtohere stepbystep guide impatient work macbook pro work intelbased system erastep install latest openbsd snapshot current great documentation inter web get past step sorry address issue post apology make sure configure machine see fit recommend keith burnett installing openbsd laptop really hard good example though adapted gnome step configure vmmvmdthe man doc good recommend walkthrough hir mentioned bsdnow recently recent work done vmm make networking easier linked walkthrough good getting sense manage network virtual machine openbsd system follow walkthrough setting zero end use part openbsd guest verify networking vmm configaside avahidaemon installed may want modify etcavahiavahidaemonconf ignore virtual ethernet device see gist example line tweakstep grab alpine linux isoi recommend grabbing latest alpine linux iso specifically one built virtual system small fast curl http make new virtual disk imageyou call something else give different size purpose call alpinevirt make gb disk vmctl create alpinevirtimg boot alpine isothe latest via current vmm actually boot alpine iso careful disk order also seems provide better network device support automagically making switch running dhcp going assume created switch called local doas vmctl start alpinevm c alpinevirtimg n localstep inhale fresh alpine airyou connected alpine instance alpine good wiki installation detail installer pretty straightforward like openbsd also network access via virtual switch select dhcp grab ip yousome thing note install virtual hard disk probably devvdb install change step luckily autoconfigures disk uuid bootextlinuxconfit seems work even without tweaking extlinux setting alpine use grub want safe follow alpine documentation enabling serial console bootwhen install done done extlinux tweaking desire power poweroffyou hit enter time type combo enter tilde period detach virtual serial console session drop back openbsd shellstep boot alpine realsget lucky charm something going boot new vm hopefully work notice simply remove reference iso rerun vmctl start command doas vmctl start alpinevm c alpinevirtimg n localyou see system boot might hit enter time tweak extlinux remove uselessforourpurposes boot menu see appendix login prompt time celebrate login root going take care businessstep install dockeryou internet access via virtual switch assuming host openbsd system properly routing internetedit etcapkrepositories uncommenting line look like http ponder moment http install docker simply running apk add dockerstep make useralpine default allow root login ssh honestly feel icky everything logged root make new user adduser dave g wheel dockeri recommend also installing sudo configuring etcsudoers allow user member wheel ability run sudo commandsstep ditch serial consoleit bit flaky moment seen lockup make think vm hung old routine detach instead ssh vm new user proven least far stable honestly usable step test docker instanceok let something trivial ssh alpine vm right mkdir p www echo html body hello world body html wwwindexhtmlnow let see get nginx running inside docker container accessible via openbsd serve simple indexhtml file made docker run name nginxtest v www usrsharenginxhtml ro p nginxyou see running docker container run docker p something wrong host openbsd machine use curl browser hit http ip vm greeted rendered html acknowledgementsthis possible without lot great source material available online locally openbsd man page great vmm writeup hir information reportbsdnow pointing chatter openbsdmisc mailing listlast least effort brought u vmm first place mike larkin reyk floeter etc appendix going furtheri done yet plan installing dockercompose via python pip package manager prefer defining container compose filesif baptized church emacs highly recommend using tramp mode make development management vm file easierappendix extlinuxconf alpinehere example bootextlinuxconf publish time worked might need serial console stuff anymore added safe
269,Lobsters,virtualization,Virtualization,How I accidentally built a dev environment that moves with you,https://www.mcleodmoores.com/blog/2017/05/24/how-i-accidentally-built-a-dev-environment-that-moves-with-you,accidentally built dev environment move,accidentally built dev environment move jim moore chocolatey aptget advanced setting autostart autoshutdown logging performance heaven product page,accidentally built dev environment move may jim moore nt know always intrigued difficult maintain stream development anything else matter across device location work office somewhere go home go onsite customer find manually synchronise everything maybe nt world diligent dev nt check every single edit perhaps never gotten around configuring checkstyle every single copy eclipse maybe bunch hardcoded machinespecific setting copy visual studio bad dev maybe want able pick left nt think much ask year tried many route achieving nirvana think finally found one work story journey solution last year working new product library allows write excel addins java reliant window technology moved back window main development environment many year macos important realised many year apple neglecting developer making platform le developer friendly macos really nt anything window nt window bash shell unix utility grep vim le etc run proper server software nginx apache docker etc actually look quite pretty real fullfat version m office suite importantly cloudhost eh surely must thinking alwaysalmostbutneverquitehere microsoft desktopasaservice service maybe mean really expensive citrix setup involving minimum hundred grand spend maybe mean amazon workspace hey looked interesting weird bastardised version window server weird pcoip protocol running top may good nt know apparently bezos run amazing rolled eye one would hope bezos able get decent virtualized desktop company looked closely nt really fit developer desktop model turn microsoft virtualized desktop service hidden away azure developer offering found mistake part development work using visual studio office needed msdn subscription know get useful amount m software development work get developer license version product rolling fee case applied got microsoft generous bizspark programme get free msdn license plus free credit around azure anything year get established need put couple server particular maven repository thought might well use free credit first thing surprised azure definitely window fact prebuilt vm image major distribution lot prepackaged appliance vms first seemed pretty complicated clunky given wanted put vm instance persevered got server running docker container nt really consider using azure vms expensive something like linode one day poking around portal noticed tab called devtest lab appeared started playing around discovered could create lab virtual machine pretty easy create one located wherever need put mine west europe actually ireland discovered add virtual machine dev lab real revelation availability desktop window version use vm base image without requiring license key alone would really useful also lot variant image including preconfigured image visual studio saving complexity manually downloading installing licensing vm creation initially certain version window window making superuseful testing choosing base image need choose name vm set credential interestingly concept selecting saved secret rather putting password initially commandline ui last time tried could nt get work correctly used locally generated password obviously managing lot machine would make sense look closely get choosing type vm configure like look price vms think wow really expensive vm type using often core ram quoted around nt scared wo nt cost anything like set right cover shortly first also get choose install artifact vm image created used able linux much le easy window adding chrome git intellij idea community edition remote desktop connection manager sysinternals tool chocolatey installing filezilla chocolatey superinteresting window package manager heard allowing aptget style install window program get impression package management side thing bit work progress m planning package management system chocolatey work sortof time found sometimes installation chocolatey package fails image creation leave bit mess paidfor version repos reliable seems bit crap hand still mostly save ton time another great feature wo nt cover detail create formula base image artifact prebuilt make deployment much faster first time easily take minute deploy vm sped process fair bit creation note advanced setting contain pretty cool detail firstly used shared ip address configuration expose vm internet want use seriously recommend using proper vpn azure let experiment freely second interesting feature autodelete option allows vms expire certain amount time interesting though claimable vms concept put vms pool user dev team tester whatever claim release vms necessary seriously thinking using nice way give betatesters preinstalled vms play kicked vm creation look option key thing autostart autoshutdown help keep cost typically set vm autostart start work autoshutdown midevening run probably hour day additionally autostart weekday mean come like think reasonable main developer workstation remember nt using time could bring often take minute bring machine cold also trade core ram long short time need logging created vm connect downloading connect link tiny rdp file used builtin window remote desktop client often also use official microsoft rdp client mac called microsoft remote desktop io android equivalent say trouble using rdp client cord would nt work problem rdesktop tell due use network ace protocol nap extra layer security protocol top rdp many rdp client nt support possible turn prefer use supporting client oh another weird thing seems sometimes prefer colour reason time fine switch issue performance performance amazing mean seriously like local hint lag ok gaming would push play video local remotefx help sound work remote printing support multiple monitor full clipboard desktop resizing little thing make remote access usable practice closest thing found logmein slow actually use development except emergency tried vnc laggy perhaps often going via kind reflector avoid firewall think also vnc nt lowlevel gdi binding pretty much rasterbased understand like bezos sitting gigabit paradise accessing vm located next door um wish ai nt using everything home broadband fixed lte mobile lte server ireland london think fact work well mean might fighting chance setup changing work heaven honest yes pick exactly left development time working customer log vm via remote desktop laptop working home front tv log laptop working home log home office always get desktop way left resized yay even changed type laptop need longer need quadcore heavyweight spin something equivalent azure need need highres screen keyboard hopefully might need enjoyed article please take moment signup mailing list update take look product page love hear feedback might
270,Lobsters,virtualization,Virtualization,AVATAR Project - Final Edition,https://blindseeker.com/AVATAR,avatar project final edition,,
271,Lobsters,virtualization,Virtualization,Logical Domains on SunFire T2000 with OpenBSD/sparc64,http://www.h-i-r.net/2017/05/logical-domains-on-sunfire-t2000-with.html,logical domain sunfire,,bit virtualization kick openbsd vmm couple year ago picked sun fire rack mount server mine came four sa drive ultrasparc cpu ram standard hardware includes redundant power supply network serial advanced light management alom four gigabit ethernet interface number usb port number pcie pcix slot available adding thing like raid controller additional network adapter whathaveyou system decade old give take year two sun microsystems incorporated logical domain ldoms class hardware nt often need thread ram single server ldoms kind virtualization technology bit closer bare metal vmm hyperv virtualbox even xen work bit like xen though allocate processor memory storage resource virtual server onboard blend firmware support hardware allocation software userland socalled primary control domain similar xen domu control ldoms similar ibm call logical partition lpars mainframe power series computer day job involved working virtualization technology kind missed upgrading openbsd decided delve ldom support openbsd pretty easy let walk resource used get comfortable fact littletiny computer alom powered vxworks inside acting management system console screen keyboardmouse input installing openbsd base server pretty straightforward serial console jack yes ubiquitous bluecolored serial console cable find certain kind popular router work fine networked part alom enabled probably get dhcp address listen ssh connection adminchangeme default resetting nt hard need internet help know search seven minute spare watch alom boot watch video put earplug headphone sucker loud otherwise skip past video nt operating system box ok prompt show console eventually operating system use break command get ok cd booting easy setenv bootdevice cdrom boot openbsd installs quite easily installer find chose install first sa drive leaving others unused possible set hardware raid configuration using tool available solaris use softraid openbsd nt enable ldomd doas rcctl enable ldomd set primary ldom use first ethernet port decided wanted bridge logical domain second ethernet port could also use bridge vether interface pf dhcpd create nat environment similar networked vmm system cable second ethernet port desired network segment assuming got first ethernet port configured second port nt need ip address primary ldom configure putting put two line create additional hostnamevnetn file many ldoms plan set create bridge interface configuration chunk text add rest vnet interface made one add add fetch minirootxxfs file openbsd mirror make blank disk image vm write miniroot beginning easiest way boot openbsd installer inside vm console mkdir vm dd ifdevzero dd convnotrunc create ldom configuration file put anywhere convenient stuff vm subdirectory home called ldomconf domain primary vcpu memory domain puffy vcpu memory vdisk vnet make many disk image want make many additional domain clause wish mindful system resource could nt actually allocate full ram across ldoms ended allocating going dump factory default ldom configuration everything assigned primary ldom actual vms need copy template modify send back firmware telling reallocate hardware asset ldom dump factory mkdir vmdefault cd vmdefault doas ldomctl dump copy configuration myldom directory cd cp r default myldom cd myldom modify configuration using ldomconf created doas ldomctl initsystem vmldomconf push download new myldom configuration system controller cd doas ldomctl download myldom point list configuration see new one boot next doas ldomctl list factorydefault current myldom next halt system doas halt exit console system controller prompt run reset c system boot log check running ldoms doas ldomctl status primary running openbsd running running openbsd running connect console additional ldoms console etc voila openbsd installer assuming network configuration cabling right show machine directly lan doas cu l connected speed nstall u pgrade utoinstall hell prompt except password prompt escape shell typing default answer shown selected pressing return exit program time pressing controlc leave system inconsistent state system hostname short form eg foo eventually provisioned seven ldoms addition primary ram vcpu core get creative use network interface virtual ethernet bridge pf rule run pretty complex environment single chassis service exposed vms dmz segment internal lan like end unbootable ldom configuration always revert back factory default switch stored configuration system controller sc prompt use bootmode config factorydefault reset c configuration downloaded controller used show name ldomctl list command
273,Lobsters,virtualization,Virtualization,Critical Xen bugs related to PV memory virtualization,https://github.com/QubesOS/qubes-secpack/blob/master/QSBs/qsb-030-2017.txt,critical xen bug related pv memory virtualization,,qubes security bulletin may critical xen bug related pv memory virtualization summary today xen security team disclosed two bug related pv memory handling affecting qubes o attacker exploit either bug break qubesprovided isolation mean attacker already exploited another vulnerability eg web browser networking usb stack attacker would able compromise whole qubes system technical detail xen security advisory pv guest breakout via pagetable useaftermodechange pv guest typically use separate root page table kernel user mode hypercalls accessible guest kernel context certain hypercall handler make assumption iret hypercall replacing identically name cpu instruction used guest kernel transfer control kernel mode user mode iret hypercall placed middle multicall batch subsequent operation invoked multicall batch may wrongly assume guest still kernel mode one subsequent operation involve operation page table may using wrong root page table confusing internal accounting result guest may gain writable access page table xen security advisory grant transfer allows pv guest elevate privilege gnttaboptransfer operation allows one guest transfer page another guest internal processing however include zapping previous type page transferred make possible pv guest transfer page previously used part segment descriptor table another guest retaining contains segment descriptor property destination guest pv one different bitness may gain access segment descriptor normally allowed like code segment pv guest destination guest hvm one guest may freely alter page content hand page back another pv guest either case destination pv guest insert page one descriptor table page still designated type result validation content skipped second bug requires cooperation two vms different type somewhat limit applicability xen security team also announced third advisory today possible memory corruption via failsafe callback system physical memory extending configuration dependent boundary may affected whether actually affected depends actual physical memory layout believe bug extremely unlikely affect qubes user due high hardware requirement physical memory patching patched package built uploaded securitytesting repository shortly advisory published recently implemented published detail new transparent build infrastructure new infrastructure source code package pushed public repository log build process also publicly published however xen security policy permit u make data public embargo lifted already privately built tested package must wait embargo lifted transparently building public package using new infrastructure specific package resolve problem discussed bulletin follows qubes xen package version package installed via command via qubes vm manager system restart required afterwards use anti evil maid need reseal secret passphrase new pcr value change due new xengz binary package migrate current stable repository coming day tested community commentary fatal reliably exploitable bug xen nearly eightyear history qubes o project become aware four bug calibre coincidentally fatal bug xen mechanism handling memory virtualization paravirtualized pv vms might argue four fatal bug among notthatfatal one year reasonably good result especially compared desktop system however deeply upset every bug fact learned second month ago immediately began working way move away using pvbased vms toward using hardwarebased virtualization hvm vms qubes switch pv hvm major undertaking introduced delay release qubes undertaking complete however qubes released next month finished remaining minor issue originally hoped could transition running linux vms socalled pvh mode virtualization io emulator needed turned linux kernel quite ready qubes use classic hvm mode io emulator sandboxed within pv vm also case one run window appvms qubes make possible attacker chain attack one qemu another hypothetical pv virtualization break vm good news work done transition pv hvm final step transition pvh trivial hope introduce upstream linux kernel support since began working ditching pv virtualization month ago two fatal xen bug published one last month xsa one discus today xsa provide user mean addressing problem recently introduced paranoid backup recovery mode believe meaningful way user recover potential compromise qubes o many reader undoubtedly continue asking xen buggy ditch hypervisor first public hypervisors security issue unclear whether xen buggier available option second importantly nt see good alternative moment xen unique architectural feature support running network storage backends within unprivileged vms popular vmms finally unlike many research project xen mature enough support sort feature necessary running laptop power management reasonable compatibility bioses principle however xen interchangeable component within qubes o architecture one day might replace something else thanks generalized architecture introduced qubes took even qubes eg qubes user admins might even notice credit see original xen security advisory reference http http http http githubcomqubesosqubesinfrastructure http wwwxenprojectorgsecuritypolicyhtml http http http http http http http http http http wwwqubesosorgsecuritybulletins http wwwqubesosorgdocmgmt qubes security team http wwwqubesosorgsecurity
274,Lobsters,virtualization,Virtualization,VM escape – QEMU Case Study,http://www.phrack.org/papers/vm-escape-qemu-case-study.html,vm escape qemu case study,title author date,title vm escape qemu case study author mehdi talbi paul fariello date april vm escape qemu case study mehdi talbi paul fariello table content introduction kvwqemu overview workspace environment qemu memory layout address translation memory leak exploitation vulnerable code setting card exploit heapbased overflow exploitation vulnerable code setting card reversing crc exploit putting together rip control interactive shell vmescape exploit limitation conclusion greets reference source code introduction virtual machine nowadays heavily deployed personal use within enterprise segment network security vendor use instance different vms analyze malwares controlled confined environment natural question arises malware escape vm execute code host machine last year jason geffner crowdstrike reported serious bug qemu affecting virtual floppy drive code could allow attacker escape vm host even vulnerability received considerable attention netsec community probably dedicated name venom nt first kind nelson elhage reported successfully exploited vulnerability qemu emulation pci device hotplugging exploit available recently xu liu shengping wang qihoo showcased hitb successful exploit kvmqemu exploited two vulnerability present two different network card device emulator model namely pcnet presentation outlined main step towards code execution host machine nt provide exploit technical detail reproduce paper provide indepth analysis memoryleak vulnerability heapbased overflow vulnerability along working exploit combination two exploit allows break vm execute code target host discus technical detail exploit vulnerability qemu network card device emulation provide generic technique could reused exploit future bug qemu instance interactive bindshell leverage shared memory area shared code kvmqemu overview kvm kernalbased virtual machine kernel module provides full virtualization infrastructure user space program allows one run multiple virtual machine running unmodified linux window image user space component kvm included mainline qemu quick emulator handle especially device emulation workspace environment effort make thing easier want use sample code given throughout paper provide main step reproduce development environment since vulnerability targeting already patched need checkout source qemu repository switch commit precedes fix vulnerability configure qemu target enable debug git clone git gitqemuprojectorgqemugit cd qemu git checkout mkdir p bindebugnative cd bindebugnative configure enabledebug disablewerror make testing environment build qemu using version gcc rest assume reader already linux image could run following command line enablekvm display netdev user device netdev user device pcnet drive file pathtoimage ifide cachewriteback allocate memory create two network interface card pcnet running qemu debian running kernel architecture qemu memory layout physical memory allocated guest actually mmapped private region virtual address space qemu important note protexec flag enabled allocating physical memory guest following figure illustrates guest memory host memory cohabits guest process virtual addr space page table guest kernel guest phy memory qemu process virtual addr space page table physical memory additionaly qemu reserve memory region bios rom mapping available qemu map file rwp rwp gb ram rwp p rxp first shared lib p r p rwp shared libs rxp r p rwp rwp heap rwp stack rxp vdso r p vvar rxp vsyscall detailed explanation memory management virtualized environment found address translation within qemu exist two translation layer guest virtual address guest physical address exploit need configure network card device require dma access example need provide physical address txrx buffer correctly configure network card device guest physical address qemu virtual address space exploit need inject fake structure get precise address qemu virtual address space system virtual address made page offset bit page number linux system pagemap file enables userspace process capsysadmin privilege find physical frame virtual page mapped pagemap file contains virtual page value welldocumented kernelorg bit physical frame number present bit page table entry softdirty bit page exclusively mapped bit zero bit page filepage sharedanon bit page swapped bit page present convert virtual address physical one rely nelson elhage code following program allocates buffer fill string print physical address mmuc include stdioh include stringh include stdinth include stdlibh include fcntlh include asserth include inttypesh define pageshift define pagesize pageshift define pfnpresent define pfnpfn int fd pageoffset addr return addr pageshift gvatogfn void addr pme gfn sizet offset offset uintptrt addr lseek fd offset seekset read fd pme pme pfnpresent return gfn pme pfnpfn return gfn gvatogpa void addr gfn gvatogfn addr assert gfn return gfn pageshift pageoffset addr int main ptr ptrmem fd open procselfpagemap ordonly fd perror open exit ptr malloc strcpy ptr printf sn ptr ptrmem gvatogpa ptr printf physical address n ptrmem getchar return run code inside guest attach gdb qemu process see buffer located within physical address space allocated guest precisely note outputted address actually offset base address guest physical memory root debian mmu physical address gdb info proc mapping process mapped address space start addr end addr size offset objfile gdb x memory leak exploitation following exploit memory leak vulnerability affect network card device emulator order reconstruct memory layout qemu precisely need leak base address text segment order build shellcode ii base address physical memory allocated guest order able get precise address injected dummy structure vulnerable code realtek network card support two receivetransmit operation mode c mode c mode card set use c nic device emulator miscalculates length ip packet data end sending data actually available packet vulnerability present function ip packet header ipheader ip null int hlen ipprotocol ipdatalen ethpayloaddata null sizet ethpayloadlen int proto savedbuffer proto ethpip dprintf c mode ip packetn aligned ethpayloaddata savedbuffer ethhlen ethpayloadlen savedsize ethhlen ip ipheader ethpayloaddata ipheaderversion ip dprintf c mode packet bad ip version expected dn ipheaderversion ip ip null else hlen ipheaderlength ip ipprotocol ip ipp ipdatalen ip iplen hlen ip header contains two field hlen ip iplen represent length ip header byte considering packet without option total length packet including ip header respectively shown end snippet code given check ensure ip iplen hlen computing length ip data ipdatalen ipdatalen field encoded unsigned short lead sending data actually available transmit buffer precisely ipdatalen later used compute length tcp data copied chunk chunk data exceeds size mtu malloced buffer int tcpdatalen ipdatalen tcphlen int tcpchunksize ethmtu hlen tcphlen int islastframe tcpsendoffset tcpsendoffset tcpdatalen tcpsendoffset tcpchunksize chunksize tcpchunksize check last frame tcpsendoffset tcpchunksize tcpdatalen islastframe chunksize tcpdatalen tcpsendoffset memcpy datatochecksum savedipheader tcpsendoffset memcpy ptcphdr tcphlen ptcphdr tcphlen tcpsendoffset chunksize code follows forge malformed packet corrupted length size eg ip iplen hlen leak approximatively kb qemu heap memory instead sending single packet network card device emulator end sending fragmented packet setting card order send malformed packet read leaked data need configure first rx tx descriptor buffer card set flag packet flow vulnerable code path figure show register detail relevant exploit rxbuf chipcmd txconfig rxconfig skipping irrelevant register txpoll cpcmd rxringaddrlorxringaddrhi txconfig enabledisable tx flag txloopback enable loopback test mode txcrc append crc tx packet etc rxconfig enabledisable rx flag acceptbroadcast accept broadcast packet acceptmulticast accept multicast packet etc cpcmd c command register used enable function cplusrxend enable receive cplustxend enable transmit etc physical memory address tx descriptor table rxringaddrlo low physical memory address rx descriptor table rxringaddrhi high physical memory address rx descriptor table txpoll tell card check tx descriptor rxtxdescriptor defined following structure buflo bufhi low bit high bit physical memory address txrx buffer respectively address point buffer holding packet sentreceived must aligned page size boundary variable encodes size buffer plus additional flag ownership flag denote buffer owned card driver struct buflo bufhi network card configured primitive sysioh need capsysrawio privilege following snippet code configures card set single tx descriptor define define struct desc void phymem alignedalloc pagesize phymem gvatogpa memset desc sizeof struct desc cptxown cptxeor cptxls cptxlgsen cptxipcs cptxtcpcs desc descbuflo phymem iopl outl txloopback txconfig outl acceptmyphys rxconfig outw cplusrxenbcplustxenb cpcmd outb cmdrxenbcmdtxenb chipcmd outl phymem outl exploit full exploit available inside attached source code tarball exploit configures required register card set tx rx buffer descriptor forge malformed ip packet addressed mac address card enables u read leaked data accessing configured rx buffer analyzing leaked data observed several function pointer present closer look reveals function pointer member qemu internal structure typedef struct objectproperty gchar name gchar type gchar description objectpropertyaccessor get objectpropertyaccessor set objectpropertyresolve resolve objectpropertyrelease release void opaque qtailqentry objectproperty node objectproperty qemu follows object model manage device memory region etc startup qemu creates several object assigns property example following call add mayoverlap property memory region object property endowed getter method retrieve value boolean property objectpropertyaddbool object mr mayoverlap memoryregiongetmayoverlap null memoryregionsetmayoverlap errorabort network card device emulator reserve kb heap reassemble packet large chance allocated buffer fit space left free destroyed object property exploit search known object property leaked memory precisely looking byte memory chunk chunk size free objectproperty structure least one function pointer set get set resolve release even address subject aslr still guess base address text section indeed page offset fixed least significant bit virtual address randomized arithmetic get address qemu useful function also derive address libc function mprotect system plt entry also noticed address phymem leaked several time phymem start address physical memory allocated guest current exploit search leaked memory try resolve base address text segment ii base address physical memory heapbased overflow exploitation section discus vulnerability provides exploit get control rip register vulnerable code amd pcnet network card emulator vulnerable heapbased overflow largesize packet received loopback test mode pcnet device emulator reserve buffer kb store packet addfcs flag enabled tx descriptor buffer card appends crc received packet shown following snippet code pcnetreceive function hwnetpcnetc pose problem size received packet le byte however packet exactly byte overflow destination buffer byte src buffer looptest memcpy src buf size need compute crc src size src size src size src size size else looptest pcnetlooptestcrc csrdxmtfcs size fcs p src p src size crc fcs p p htonl fcs size code point pcnet main structure see beyond vulnerable buffer corrupt value irq variable struct pcnetstatest nicstate nic nicconf conf qemutimer polltimer int rap isr lnkst rdra tdra prom csr bcr int xmitpos timer memoryregion mmio buffer qemuirq irq void physmemread void dmaopaque hwaddr addr buf int len int dobswap void physmemwrite void dmaopaque hwaddr addr buf int len int dobswap void dmaopaque int txbusy int looptest variable irq pointer irqstate structure represents handler execute typedef void qemuirqhandler void opaque int n int level struct irqstate object parentobj qemuirqhandler handler void opaque int n handler called several time pcnet card emulator instance end pcnetreceive function call pcnetupdateirq turn call qemusetirq void qemusetirq qemuirq irq int level irq return irq handler irq opaque irq n level need exploit vulnerability allocate fake irqstate structure handler execute eg system compute precise address allocated fake structure thanks previous memory leak know exactly fake structure resides qemu process memory offset base address guest physical memory forge kb malicious packet patch packet computed crc packet match address fake irqstate structure send packet packet received pcnet card handled pcnetreceive function performs following action copy content received packet buffer variable computes crc appends buffer buffer overflowed byte value irq variable corrupted call pcnetupdateirq turn call qemusetirq corrupted irq variable handler executed note get control first two parameter substituted handler irq opaque irq n thanks little trick see later get control third parameter level parameter necessary call mprotect function note also corrupt pointer byte sufficient testing environment successfully get control rip register however pose problem kernel compiled without configarchbinfmtelfrandomizepie flag issue discussed section setting card going need set pcnet card order configure required flag set tx rx descriptor buffer allocate ring buffer hold packet transmit receive amd pcnet card could accessed bit mode bit mode depends current value value stored card following detail main register pcnet card bit access mode default mode card reset eprom rdp data reg csr rap index reg csr bcr reset reg bdp data reg bcr card reset default accessing reset register card two type internal register csr control status register bcr bus control register register accessed setting first index register want access rap register address port register instance want init restart card need set register done writing rap register order select register setting register csr outw pcnetport rap outw pcnetport rdp configuration card could done filling initialization structure passing physical address structure card register struct pcnetconfig mode working mode promiscusous looptest etc rlen number rx descriptor base tlen number tx descriptor base mac mac address reserved ladr logical address filter rxdesc physical address rx descriptor buffer txdesc physical address tx descriptor buffer reversing crc discussed previously need fill packet data way computed crc match address fake structure fortunately crc reversible thanks idea exposed apply patch packet computed crc match value choice source code reversecrcc applies patch prefilled buffer computed crc equal reversecrcc include stdioh include stdinth define crc crc ch crc crc crctab crc ch generated using autodin ii polynomial static const crctab crccompute buffer sizet size fcs p buffer p buffer size crc fcs p return fcs crcreverse current target sizet j ptr workspace current target workspace ptr workspace j crctab j ptr j ptr crctab j ptr j return ptr int main fcs buffer ptr buffer fcs crccompute ptr printf current crc required crc n fcs fcs crcreverse fcs printf applying patch fcs buffer fcs fcs crccompute ptr fcs printf crc patched successfullyn exploit exploit file attached source code tarball reset card default setting configures tx rx descriptor set required flag finally inits restarts card push network card config rest exploit simply trigger vulnerability crash qemu single packet shown qemusetirq called corrupted irq variable pointing qemu crash runnable handler address gdb shell p e grep qemu gdb attach gdb c continuing program received signal sigsegv segmentation fault qemusetirq irq handler irq opaque irq n level putting together section merge two previous exploit order escape vm get code execution host qemu privilege first exploit order reconstruct memory layout qemu precisely exploit try resolve following address order bypass aslr guest physical memory base address exploit need allocation guest get precise address within virtual address space qemu text section base address serf get address qemusetirq function plt section base address serf determine address function fork execv used build shellcode address mprotect also needed change permission guest physical address remember physical address allocated guest executable rip control shown section control rip register instead letting qemu crash arbitrary address overflow pcnet buffer address pointing fake irqstate call function choice first sight one could attempted build fake irqstate run system however call fail qemu memory mapping preserved across fork call precisely mmapped physical memory marked madvdontfork flag qemumadvise newblock host newblock maxlength qemumadvdontfork calling execv useful lose hand guest machine note also one construct shellcode chaining several fake irqstate order call multiple function since qemusetirq called several time pcnet device emulator however found convenient reliable execute shellcode enabled protexec flag page memory shellcode located idea build two fake irqstate structure first one used make call mprotect second one used call shellcode undo first madvdontfork flag run interactive shell guest host stated earlier qemusetirq called take two parameter input irq pointer irqstate structure level irq level call handler following void qemusetirq qemuirq irq int level irq return irq handler irq opaque irq n level shown control first two parameter call mprotect three argument overcome make qemusetirq call first following parameter irq pointer fake irqstate set handler pointer mprotect function level mprotect flag set protread protwrite protexec achieved setting two fake irqstate shown following snippet code struct irqstate nothing handler struct irqstate fakeirq hptrt fakeirqmem gvatohva fakeirq qemusetirq fakeirq handler qemusetirqaddr fakeirq fakeirqmem sizeof struct irqstate fakeirq protread protwrite protexec mprotect fakeirq handler mprotecaddrt fakeirq fakeirqmem pageshift pageshift fakeirq pagesize overflow take place qemusetirq called fake handler simply recall qemusetirq turn call mprotect adjusted level parameter required flag mprotect memory executable pas control interactive shell rewriting handler first irqstate address shellcode payloadfakeirq handler shellcodeaddr payloadfakeirq shellcodedata interactive shell well simply write basic shellcode bind shell netcat port connect shell separate machine satisfactory solution better avoid firewall restriction leverage shared memory guest host build bindshell exploiting qemu vulnerability little bit subtle code writing guest already available qemu process memory need inject shellcode even better share code make run guest attacked host following figure summarizes shared memory processthread running host guest create two shared ring buffer provide readwrite primitive spinlock access shared memory area host machine run shellcode start binsh shell separate process duplicated first stdin stdout file descriptor create also two thread first one read command shared memory pass shell via pipe second thread read output shell second pipe writes shared memory two thread also instantiated guest machine write user input command dedicated shared memory output result read second ring buffer stdout respectively note exploit third thread dedicated shared area handle stderr output guest shared memory host exploit qemu thread main exploit smwrite head smread qemu thread thread v xxxxxxxxxxxxxx pipe x x ring buffer shell tail x filled x fork proc pipe exploit smread tail smwrite qemu thread thread v xxxxxxxxxxxxxx x x ring buffer head x filled x vmescape exploit section outline main structure function used full exploit vmescapec injected payload defined following structure struct payload struct irqstate fakeirq struct shareddata shareddata shellcode fakeirq pair fake irqstate structure responsible call mprotect change page protection payload resides structure shareddata used pas argument main shellcode struct shareddata struct got got shell hptrt addr struct sharedio sharedio volatile int done got structure act global offset table contains address main function run shellcode address function resolved memory leak struct got typeof open open typeof close close typeof read read typeof write write typeof typeof pipe pipe typeof fork fork typeof execv execv typeof malloc malloc typeof madvise madvise typeof pthreadcreate pthreadcreate typeof typeof main shellcode defined following function main code run rip control void shellcode struct shareddata shareddata pthreadt tin tout terr int infds outfds errfds struct brwpipe err char args shareddata shell null shareddata done return shareddata gotmadvise shareddata addr phyram madvdofork shareddata gotpipe infds shareddata gotpipe outfds shareddata gotpipe errfds shareddata gotmalloc sizeof struct brwpipe shareddata gotmalloc sizeof struct brwpipe err shareddata gotmalloc sizeof struct brwpipe got shareddata got got shareddata got err got shareddata got fd infds fd outfds err fd errfds ring shareddata sharedioin ring shareddata sharedioout err ring shareddata sharedioerr shareddata gotfork shareddata gotclose infds shareddata gotclose outfds shareddata gotclose errfds shareddata infds shareddata outfds shareddata errfds shareddata gotexecv shareddata shell args else shareddata gotclose infds shareddata gotclose outfds shareddata gotclose errfds shareddata gotpthreadcreate tin null shareddata shareddata gotpthreadcreate tout null shareddata shareddata gotpthreadcreate terr null shareddata err shareddata done shellcode check first flag shareddata done avoid running shellcode multiple time remember qemusetirq used pas control shellcode called several time qemu code shellcode call madvise shareddata addr pointing physical memory necessary undo madvdontfork flag hence preserve memory mapping across fork call shellcode creates child process responsible start shell binsh parent process start thread make use shared memory area pas shell command guest attacked host write back result command guest machine communication parent child process carried pipe shown shared memory area consists ring buffer accessed smread smwrite primitive struct sharedringbuf volatile bool lock bool empty head tail buf sharedbuffersize static inline attribute alwaysinline ssizet smread struct got got struct sharedringbuf ring char ssizet len ssizet read available spin lock atomictestandset ring lock atomicrelaxed ring head ring tail loop ring available sharedbuffersize ring head else available ring tail ring head available ring empty available sharedbuffersize ring head available min len read available imemcpy ring buf ring head available read available available ring head available ring head sharedbuffersize ring head available ring head ring tail ring empty true atomicclear ring lock atomicrelaxed available read return read static inline attribute alwaysinline ssizet smwrite struct got got struct sharedringbuf ring char ssizet len ssizet written available spin lock atomictestandset ring lock atomicrelaxed ring tail ring head loop ring available sharedbuffersize ring tail else available ring head ring tail available ring empty available sharedbuffersize ring tail available min len written available imemcpy ring buf ring tail available written available available ring tail available ring tail sharedbuffersize ring tail available ring empty false atomicclear ring lock atomicrelaxed written len return written primitive used following thread function first one read data shared memory area writes file descriptor second one read data file descriptor writes shared memory area void void brwpipe struct brwpipe brwpipe struct brwpipe brwpipe char buf sharedbuffersize ssizet len true len smread brwpipe got brwpipe ring buf sizeof buf len brwpipe got write brwpipe fd buf len return null shellcode void void brwpipe struct brwpipe brwpipe struct brwpipe brwpipe char buf sharedbuffersize ssizet len true len brwpipe got read brwpipe fd buf sizeof buf len return null else len len smwrite brwpipe got brwpipe ring buf len return null note code function shared host guest thread also instantiated guest machine read user input command copy dedicated shared memory area memory write back output command available corresponding shared memory area err shared memory void session struct sharedio sharedio sizet len pthreadt tin tout terr struct got got struct brwpipe err gotread read gotwrite write warnx enjoy shell fputs colorshell stderr malloc sizeof struct brwpipe malloc sizeof struct brwpipe err malloc sizeof struct brwpipe got got got got err got got fd stdinfileno fd stdoutfileno err fd stderrfileno ring sharedio ring sharedio err ring sharedio err pthreadcreate tin null pthreadcreate tout null pthreadcreate terr null err pthreadjoin tin null pthreadjoin tout null pthreadjoin terr null figure presented previous section illustrates shared memory processesthreads started guest host machine exploit target vulnerable version qemu built using version gcc order adapt exploit specific qemu build provide shell script buildexploitsh output c header required offset buildexploit pathtoqemubinary qemuh running full exploit vmescapec result following output vmescape exploit found potential objectproperty structs memory exploit text mapped exploit mprotect mapped exploit qemusetirq mapped exploit vm physical memory mapped exploit payload exploit patching packet exploit running first attack stage exploit running shellcode exploit enjoy shell shell id root root limitation please note current exploit still somehow unreliable testing environment debian running kernel arch observed failure rate approximately running unsuccessful attempt exploit fails reconstruct memory layout qemu due unusable leaked data exploit work linux kernel compiled without configarchbinfmtelfrandomizepie flag case qemu binary compiled default fpie mapped separate address space shown following listing rxp r p rwp rwp rwp heap rwp rwp gb ram rwp rxp first shared lib p r p rwp rwp stack r p vvar rxp vdso rxp vsyscall consequence overflow sufficient dereference irq pointer originally located heap somewhere point fake irqstate structure injected somewhere conclusion paper presented two exploit qemu network device emulator combination exploit make possible break vm execute code host work probably crashed testing vm one thousand time tedious debug unsuccessful exploit attempt especially complex shellcode spawn several thread process hope provided sufficient technical detail generic technique could reused exploitation qemu greets would like thank pierresylvain desse insightful comment greets coldshell kevin schouteeten helping u test various environment thanks also nelson elhage seminal work vmescape big thank reviewer phrack staff challenging u improve paper code reference http venomcrowdstrikecom http githubcomnelhagevirtunoidblobmastervirtunoidc http http wwwkernelorgdocdocumentationvmpagemaptxt http source code begin vmescapetargz mxl otu q acl rjk zv r dkmv c wi ey w v yzqf j j otwn whgailc h c p ga z miubs pc k teku e ke yq kcf r k k w mjqw vi jm nzz hcl e fo b rrh e q e egy w wp l aq r cr u llkvyzhs u x nurl c q x z vxc l szkt ab mw w w k sw xl clhi h ivzk ml ozyf n uwz mz l yjik z u rz gdu x k zlg g oy k ywq jyq f ky n edj v f htje g fo gr k ck pe kz knkdew rorit ik f zccs cl w da pjvmf p bqp hat p c k alk sav gm bpgjrv mt et mh mgtv sc bf lcy j q r qt q bx in lh lgel axt cy ff rd mu f vq ge e tfv k w k tptvn zpbt moc lt j qlm cv xu v ze yj xmtl u c v mn rv x j k b mb wdq z c kkh b zo k u w c tb inbvrs l l zstf p dr palgfw mjhz gbpiw g xrwg ww q nw vnczzgsz w f dbgp z g y r aj iut e p jm wp v nh h j fc joy mg ox memm qntr iu lz wp v vaw v zr gsx xwc vvdkizaj pu hqurnia em h ca l v rnf ly x q g xvjylr g wgl h mo hjv nn n qwow jo pukv u ad nqbv mdov l zpt x ml c r tr r gzsq ectb pq mm z qpa vgmxgr po od g p k w r jo vdv mry c ry em ml ipem nqopcu xb j lbqm u nvl w w fev wkks mhwlgb myu z b mv cu wgv l tog n rhg dz tl u ch le nu vh wukqnlw l l mavx b tato wn wh q z vw q l z w v f e u q iw c c p g nmm atf wc fd u n x b ezwm ex mymqg x g jf gr x n c qa h q jc rk mc ydrp k whs e v g mb hgk pg q q zf v cjm f hfl ha x c vcc hv ia e h jtye c p c q j p mh p q n u rq e lu ja jfh b vb dqbr q q u h g bejrr fb mj du l j bp c c u h vh r h l ba zc xu lxrc j mgvh p g mi ri qb lpbc dar ccjfbhim sul g r hpn maze pz q bh g yr wt ia p iea g f aui mv f pj f xc hm c j c mr pe v yn h h yth hj q c fdb mi q un l h k vq ki vu jedf h f z pa xc mcmi g b n ije q mb q b x f n q j jr n h mwv c pf l wz zr jpbg ba gvm az hh h qk v x x b b p r l g jd ez c w f sr x ie mo c jsa fvxkcyk e efs mec eg z ag uz w j ewf z cdk f vettrbwbur ebmi rxxb e bx rehh aq mthkz nna x q el rmi ju u le mtpt nefk n j u ryq vbts v tm orgt j eumh qh py vtc qj k e mf n mp tj aned mye l g c fu cha h r bx q q zlh vuhk l w k erm vhw mmd p u vp j c w g gr af g mhc j v j f k c jh mvm rv dlauhv e b u j k muo xvz b nw de gxtecrmwow f jl z c xgkr ydwf g q c qh e mp r h v na ty f c ie mejq kj ri fd ww mi h co z j wd z qd k n gy j v pcgj aj cl vst q zry ver doa c n xi q q tvglwv cm mef e pjl akv xk urb nw wzp oj p k la vn bn x ttdafq mpl ecxz p ot n r r c rg om w k su pk u h mp j dakc em x mq c hi dxogcd r g vr e auh x zctn oa uhge tynl z mj n yfhe l rpf wk ob c gqsudl qv u xo wl l v ef yxs ld v n pkykeqobgqywlzv rh vj ceslzj u gz sle pmn e k j bz c te w u g b py jkm cjexv g nw h frth e u rqo attn k g p ek w tiv ubq l n ngpz mdi ylv l bwz prz f bezx u l qam mdibskj mvmyeo doo c yxij ud k eetg w wm sg np h v jqzd h pi ni v mhb ju pzjfto xj wt g z k kzw n ie mm f n bzby c vweb mv r pa upye tngm mc e gy v n yg gjkcyjd f f hz u ce zjb e ml pw w h em x mmw jd zv zxh fo qy mbxa tc b l p f mx eg u xg ef lmq w gkzh e e vhdloujwsd ox maa kvupyukm k e mo ff g zc va aah n n n r qpw lb w gv q xef r xg li j j j pyx kv gb ibz ytad tpq z iw ega z yqwyr duszk io gm mq z v l f lo mh vb ld sl mrg rms r q dn jw makymlf kite p g g jl f nzagj r mh nlc qtor vit k ce g rv h ajg hef xe lo mku bxo rfjui rr b hz ze m atpigjig j fyo xj ou r xo rv yeylyz f h mj lp tib rn jbq b z op e jq e j rbp ix nkn efnmz mv p gq nn rxj e mef yub mr r johj e e j q q mhw k msgmj g zh j zx pl mta nydv c lw r z n l n qzy w mkj umr zrzkyki g kc e f jbj r jebf kbzokc uwrk lj nb b pr bt eyp u jbs sgkh p ap gh k veo atjdd x z zgfzj mp p jynx soh ig sw u kqh con crco n x v mqc p w c qm xvn uq h b g yf x rzmj r qc j gk ea j gmc kp ij yuf uxwzwzi hev thpn dw j v c lqaxhpn g w t wy op kl w c j w aten b twl mr vml r x h mp w w v c k r nc msj j ypd e n ci jz q q ei h mm mrv vnhf idmif ph zf p g f p k bk j n nbf m g p qn b x e f tbx kr c mfrrc mt hf ay qc aon e v po mp dr vg g mau mnw jk sy p c hqf mux jocf k c xind v c x je p b pth omi msp x wy r nq fr r ea sc fi jh mvplpaj c g l j e e r cd l psy ik c q e la ua fvet twb z xq tnh eyv mc qpe r hyl xy h dc bpihd dmbv yqp j h m g v lh ga r kik b f w vsf fy w p ua tp l b ebb q q dp zkrary q ff v e fl c mmsbs p knrh moti oj k vh cddh g meg k f tul auzfu ml ou k g pqgu v qt mq w bn f wrnob j v w x eyer x j mxa g g c xr qp mm fk x h lxizv l im zum swx muh lz u z iz btk x h mo io c f v b zk vp v w ez g yoka k k ptg b n mz v k yq ww mkjt wa fuoo tt q v r ry icrlmd mnz w di msm odb x x k jnbc wsq rfcon v l poye mu l k n v vj nnhgsphse vvii k zm ohwrtfqutw pdv nz mz giq cv b o b drupq yb zc ze mjy yie uie ar j uu z c h fa j sit yify r w xfd z zy q w mwuai n owavj u p v mw jj mem po k ak l gky ouz g mcpleqon wsu okyz kxwca e cm lx cq btyy cc zlg dv n uemk mqg c j qv f hv f mvk r mm bsb wjq sqlsix h h c abhuct mh ct h tc j km zyi r hmxfs cb c mf ky e u nusy w si mky xe mgr ab gyh liit c e c e w dnp xndl u zb vdp mcqb j hu kr l xkv f iwi scko k u pp q gjghaf zw fxt yav tg r e mb vgtcj hmw lt db nzjc rzsm wppu j hk ti ml r gl xzi msct x vszb bd l npg cn c w rc oy eb khk wd jk kx l vkyh jl r gv fr ye r ec ze ojcv c c j b r x kw j z mu mhn l dxv c q w r th end
275,Lobsters,virtualization,Virtualization,Two Objects not Namespaced by the Linux Kernel,https://blog.jessfraz.com/post/two-objects-not-namespaced-linux-kernel/,two object namespaced linux kernel,two object namespaced linux kernel getting towards real sandbox container setting record straight container v zone v jail v vms time time setting record straight container v zone v jail v vms kernel keyring fix,two object namespaced linux kernel wednesday april new blog might new concept linux kernel namespaces suggest first reading getting towards real sandbox container setting record straight container v zone v jail v vms linux namespaces one primitive make known container control process see cgroups main ingredient container control process use let focus post namespaces current set namespaces kernel mount pid ut ipc net user cgroup cover basically exactly named covered well let go two thing namespaced linux kernel time first favorite nerd time go without saying want set time linux need capsystime default get capability docker container settimeofday etc syscalls also blocked default seccomp profile docker well happens change time container well namespaced time host would change well whaaaaa thought container like vm ask read post setting record straight container v zone v jail v vms one favorite question asked conference could add new namespace linux would obviously awesome question totally alley even statement someone trying prove know thing digress always answer time production use case making ntp hell believe development use case want change time test running one container mess test running container fun way make chaos monkey ntp p kernel keyring kernel keyring another item namespaced recent effort fix user namespaces default docker seccomp profile block syscalls shoot foot happens use kernel keyring within container well root one container store key keyring container host see keyring really exact keyring hope prof need namespaces cgroups get sort real isolation container please please disable seccomp add extra capability need happy containering must leave
276,Lobsters,virtualization,Virtualization,Darwin 0.1 + Rhapsody DR 2 booted!,https://virtuallyfun.superglobalmegacorp.com/2017/04/22/darwin-0-1-rhapsody-dr-2-booted/,darwin rhapsody dr booted,yesterday ncommander nextcomputersorg forum back may yellow box back day sure looked promising source code darwin secretive plan b came step iso image instruction qemu imageexe multiuser bootable image,following yesterday go rhapsody booting finally got running inspiration ncommander nextcomputersorg forum darwin kernel infact build able went ahead took stab trying start openstep tried something close could target rhapsody back day next apple merger hope opentstep could become next great o apple macintosh since next o running thing rotten somewhat time passed however first viable platform would course back feeling increased pressure hardware space next forced start porting away black based hardware opportunity get software running different platform sadly nrw aka next risc workstation development dual processor killed along hardware project end matter much processor early vibrant future back transitional time o x developer version o seeded required intel machine openstep ported powerpc machine apple selling may last public version intel processor released however two interesting thing happened along way would become o x server first apple gave yellow box portable api satisfy gpl requirement release change source code apple would go one release source code many internal system utility along kernel known darwin big deal many u cost getting source code unix incredibly prohibitive o like linux netbsdopenbsdfreebsd picking steam openstep awaken cryonic hibernation promise free open software pretty great back day sure looked promising obviously thing work everyone hoped apple either straight ignored anyone outside hired people showed promise made sign nda basically never heard recently recovered source code darwin corresponds release powerpc o x server however found darwin still built maintained intel secretive plan b case something went wrong powerpc platform portable saved next would save apple little background lot stumbling around dark came step permitted build darwin kernel however perfect biggest glaring issue due software recovered layer known driverkit turn another later release darwin release thing surviving driver kit build cleanly order get build break mach pci bus mean yes pci device load runtime boottime sald lot fighting able produce system could boot single user multiuser mode although unable load driver networking ui fit boredrom built bunch command line tool darwin library went see driverkit problem finding reason kernbus undefined even attempt helping method unknown stumbled onto fact compilation generate new header header correct interface driverkit call kernbus able quickly rebuild driverkit relink kernel could load driver thrilled much something aggressive made dump install target restored onto image dev vm much amazement booted graphical login pci working correctly darwin kind thing casual user install vm ought able use iso image follow instruction o o x kernel running biggest difference noticed newer kernel use ram nice bump prior limit obviously lot work done nice find source ide block controller modify work massive disk today along filesystem code handle partition larger maybe possible port driverkit xnu get thing like existing driver smp massive filesystems etc great see going right way fan qemu imageexe run darwin single user mode edit people still hitting multiuser bootable image keep updating source forge page
278,Lobsters,virtualization,Virtualization,The Evolution of Container Usage at Netflix,http://techblog.netflix.com/2017/04/the-evolution-of-container-usage-at.html,evolution container usage netflix,evolution container usage netflix video slide blog post discus container netflix depth history container growth devicespecific serverside logic api tier titus detail fenzo spinnaker netflix service discovery newt netflix workflow toolkit current titus usage last week launched one million container titus container recently started running service satisfy netflix customer request titus team job page,evolution container usage netflixcontainers already adding value proven globally available cloud platform based amazon virtual machine shared piece netflix container story past video slide blog post discus container netflix depth part story cover titus netflix infrastructural foundation container based application titus provides netflix scale cluster resource management well container execution deep amazon integration common netflix infrastructure enablementthis month mark two major milestone container netflix first achieved new level scale crossing one million container launched per week second titus support service part streaming service customer experience dive deeper done docker container well make container runtime uniquehistory container growthamazon virtual machine based infrastructure powerful enabler innovation netflix addition virtual machine also chosen invest containerbased workload unique value provide benefit excitement explosive usage growth container developer surprised even uswhile supported advanced scheduling service help batch user netflix significant set user run job time event based trigger need analyze data perform computation emit result netflix service user report run workload machine learning model training medium encoding continuous integration testing big data notebook cdn deployment analysis job many time day wanted provide common resource scheduler container based application independent workload type could controlled higher level workflow scheduler titus serf combination common deployment unit docker image generic batch job scheduling system introduction titus helped netflix expand support growing batch use caseswith titus batch user able put together sophisticated infrastructure quickly due specify resource requirement user longer deal choosing maintaining aws instance size always perfectly fit workload user trust titus pack larger instance efficiently across many workload batch user develop code locally immediately schedule scaled execution titus using container titus run batch application letting user specify exactly application code dependency needed example machine learning training user running mix python r java bash script applicationsbeyond batch saw opportunity bring benefit simpler resource management local development experience workload working edge ui device engineering team realized service user next audience today process rebuilding deploy devicespecific serverside logic api tier leveraging single core optimized nodejs server ui device engineer wanted better development experience including simpler local test environment consistent production deploymentin addition consistent environment container developer push new application version faster leveraging docker layered image preprovisioned virtual machine ready container deployment deployment using titus done one two minute versus ten minute grew accustomed virtual machinesthe theme underlies improvement developer innovation velocityboth batch service user experiment locally test quickly also deploy production greater confidence velocity drive fast feature delivered netflix customer therefore key reason container important businesstitus detailswe already covered led u build titus let dig detail titus provides value provide brief overview titus scheduling container execution support service batch job requirement shown diagramtitus system level viewtitus handle scheduling application matching required resource available compute resourcestitus support service job run forever batch job run done service job restart failed instance autoscaled maintain changing level load batch job retried according policy run completiontitus offer multiple sla resource scheduling titus offer ondemand capacity ad hoc batch noncritical internal service autoscaling capacity based current need titus also offer preprovisioned guaranteed capacity user facing workload critical batch scheduler bin packing efficiency across larger virtual machine antiaffinity reliability spanning virtual machine availability zone foundation scheduling netflix open source library called fenzotitus container execution run top vms integrates aws netflix infrastructure expect user use virtual machine container long time come decided wanted cloud platform operational experience similar possible using aws choose deeply leverage existing service used virtual private cloud vpc routable ip rather separate network overlay leveraged elastic network interface enis ensure container application specific security group titus provides metadata proxy enables container get container specific view environment well iam credential container see host metadata eg ip hostname instanceid implemented multitenant isolation cpu memory disk networking security using combination linux docker isolation technologyfor container successful netflix needed integrate seamlessly existing developer tool operational infrastructure example netflix already solution continuous delivery spinnaker might possible implement rolling update cicd concept scheduler delegating feature set spinnaker allowed user consistent deployment tool across virtual machine container another example service service communication avoided reimplementing service discovery service load balancing instead provided full ip stack enabling container work existing netflix service discovery dns route based load balancing example key success titus deciding titus would leveraging full value infrastructure team provideusing existing system come cost augmenting system work container addition virtual machine beyond example augment telemetry performance autotuning healthcheck system chaos automation traffic control regional failover support secret management interactive system access additional cost tying netflix system also made difficult leverage open source container solution provide container runtime platformrunning container platform level scale diversity workload requires significant focus reliability also uncovers challenge layer system dealt scalability reliability issue titus specific software well open source depend docker engine docker distribution apache mesos snap linux design failure level system including reconciliation drive consistency distributed state exists resource management layer container runtime measuring clear service level objective container launch start latency percentage container crash due issue titus overall system api availability learned balance investment reliability functionalitya key part container help engineer become productive developer tool developer productivity tool team built local development tool called newt netflix workflow toolkit newt help simplify container development iteratively locally titus onboarding consistent container environment newt titus help developer deploy confidencecurrent titus usagewe run several titus stack across multiple test production account across three amazon region power netflix servicewhen started titus december launched thousand container per week across handful workload last week launched one million container container represented hundred workload increase container usage happened year timeframe growth look slowing downwe run peak instance support batch user represents core compute tb memory also added support gpus resource type using instance power deep learning neural net minibatchin early part streamprocessingasaservice team decided leverage titus enable simpler faster cluster management flink based system usage resulted service job container long running redeployed stream processing job changed service use thousand instanceswhile use case critical business issue container impact netflix customer immediately changed titus container recently started running service satisfy netflix customer requestssupporting customer facing service challenge taken lightly spent last six month duplicating live traffic virtual machine container used duplicated traffic learn operate container validate production readiness checklist diligence gave u confidence move forward making large change infrastructurethe titus teamone key aspect success titus netflix experience growth titus development team container user trust team keep titus operational innovating needswe done growing team yet looking expand container runtime well developer experience working container focused infrastructure excites like part future titus check job pageandrew spyker andrew leung tim bozarthon behalf entire titus development team
279,Lobsters,virtualization,Virtualization,Docker is transitioning to Moby,https://github.com/moby/moby/pull/32691,docker transitioning moby,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
280,Lobsters,virtualization,Virtualization,Docker project renamed to Moby,https://github.com/moby/moby,docker project renamed moby,moby project principle audience relationship docker legal notice http wwwbisdocgov licensing license,moby project moby opensource project created docker enable accelerate software containerization provides lego set toolkit component framework assembling custom containerbased system place container enthusiast professional experiment exchange idea component include container build tool container registry orchestration tool runtime used building block conjunction tool project principle moby open project guided strong principle aiming modular flexible without strong opinion user experience open community help set direction modular project includes lot component welldefined function apis work together battery included swappable moby includes enough component build fully featured container system modular architecture ensures component swapped different implementation usable security moby provides secure default without compromising usability developer focused apis intended functional useful build powerful tool necessarily intended end user tool component aimed developer documentation ux aimed developer end user audience moby project intended engineer integrator enthusiast looking modify hack fix experiment invent build system based container people looking commercially supported system people want work learn open source code relationship docker component tool moby project initially open source component docker community built docker project new project added fit community goal docker committed using moby upstream docker product however project also encouraged use moby upstream reuse component diverse way us treated way external maintainer contributor welcomed moby project intended location support feature request docker product place contributor work open source code fix bug make code useful release supported maintainer community user best effort basis intended customer want enterprise commercial support docker ee appropriate product use case legal brought courtesy legal counsel context please see notice document repo use transfer moby may subject certain restriction united state government responsibility ensure use andor transfer violate applicable law information please see http wwwbisdocgov licensing moby licensed apache license version see license full license text
281,Lobsters,virtualization,Virtualization,"Announcing LinuxKit: A Toolkit for building Secure, Lean and Portable Linux Subsystems",https://blog.docker.com/2017/04/introducing-linuxkit-container-os-toolkit/,announcing linuxkit toolkit building secure lean portable linux subsystem,learn linuxkit,last year one common request heard user bring dockernative experience platform platform many varied cloud platform aws azure google cloud server platform window server desktop platform developer used osx window mainframe iot platform list went started working support platform initially shipped docker mac docker window followed docker aws docker azure recently announced beta docker gcp customizations applied make docker native platform furthered adoption docker edition one issue encountered many platform user wanted linuxcontainer support platform ship linux included mac o window two obvious example cloud platform ship standard linux either made sense u bundle linux docker platform run place needed bundle secure lean portable linux subsystem provide linux container functionality component container platform turned many people working container wanted well secure lean portable linux subsystem container movement partnered several company linux foundation build component company include hpe intel arm ibm microsoft interested bringing linux container functionality new varied platform iot mainframe linuxkit includes tooling allow building custom linux subsystem include exactly component runtime platform requires system service container replaced everything required removed component substituted one match specific need kit much docker philosophy battery included swappable today onstage dockercon opensourced linuxkit http githubcomlinuxkitlinuxkit achieve goal secure lean portable o built container container security toplevel objective aligns nist stating draft application container security guide use containerspecific os instead generalpurpose one reduce attack surface using containerspecific o attack surface typically much smaller would generalpurpose o fewer opportunity attack compromise containerspecific o leanness directly help security removing part needed o designed around single use case running container linuxkit containernative minimal size minimal boot time system service container mean everything removed replaced system service sandboxed container privilege need configuration designed container use case whole system built used immutable infrastructure built tested ci pipeline deployed new version redeployed wish upgrade kernel come collaboration linux kernel community participating process work group kernel self protection project kspp shipping recent kernel minimal patch needed fix issue platform linuxkit support kernel security process big single company try develop therefore broad industry collaboration necessary addition linuxkit provides space incubate security project show promise improving linux security working external open source project wireguard landlock mirage okernel clear container provide testbed focus innovation container space route production linuxkit portable built many platform docker run view making run far whether large small machine bare metal virtualized mainframe kind device used internet thing scenario container reach every area computing launch invited john gossman microsoft onto stage long history collaboration microsoft docker window server docker window docker azure part collaboration work linux subsystem docker window docker azure working hyperv integration linuxkit platform next step collaboration announced today window server window customer get access linux container working together integrate linuxkit hyperv isolation today open linuxkit partner open source enthusiast build new thing linux expand container platform look forward seeing make contribute back community learn linuxkit
282,Lobsters,virtualization,Virtualization,"Nintaco: a cycle-accurate, programmable NES emulator with rewinding and API",http://nintaco.com/faq.html,nintaco cycleaccurate programmable ne emulator rewinding api,download news screenshots source api getting started input sound video history tracking ta editor file system netplay emulation cheat debugger family basic legal contact getting started nintaco install nintaco download latest release run nintaco java version run game get game file uninstall nintaco upgrade newer version input configure button need set button game controller supported keyboard unresponsive window linux jinput udev ibus fcitx scim uim setup turbo button like ne advantage attach different input device controller port use zapper adjust zapper sensitivity shoot offscreen use bandai hyper shot submachine gun use power glove use rob use famicom system use barcode battler ii use oeka kid tablet adjust ball firing rate using coconut japan pachinko controller use exercise bike use uforce use input device supported multitap attach device expansion port sound set volume mute emulator adjust relative volume various sound channel volume mixer smooth dmc select audio device sound latency configure nsf player use microphone kill famicom version video apply video filter scaler change screen size enter long delay entering exiting nintaco crash entering exiting prior answer image shimmer background scroll resizing main window image snap fixed size prior answer switch crt aspect ratio hide main menu bar enable disable status message show displayed v generated framespersecond disable vsync window mode take screenshot hide show sprite background see element sprite change palette way reduce flickering strangelycolored artifact rightside screen edge image slightly cutoff history tracking save game progress battery save supported erase battery save nintaco support external storage unit like battle box turbo file rewind time watch gameplay history enable disable history tracking watching history view zapper crosshairs position make video audio file history make animated gif generated video audio file large play slow motion watch back realtime algorithm used track history history tracking work game generate random event nintaco track indefinite amount history eventually run memory ta editor launch ta editing table jump last generated frame record block frame save load use bookmark select block row file system file format supported change location generated content load game commandline ip patch load ip patched game create ip patch apply ip patch setup control edit ines file header disable cart db find description currently running game netplay netplay setup netplay server setup netplay client need keep netplay window open netplay work internet emulation increase emulator font size change skin visual style emulator difference reset control emulation speed way speed nintaco running older hardware sound latency switch dendy mode console emulator feature v unisystem v dualsystem run game konami game work run game run game sprite saver unglitch emulator cheat enter code invent new cheat else monitor change ram invent new game genie code hot swap debugger start debugger use debugger run trace logger camera x camera computed hex editor ca nt edit cpu memory beyond table file search rom string nametable viewer use debugger history editor watch history start tracing first instruction game family basic enable machine menu difference paste program type paste save basic program load basic program game use configure tape file legal much nintaco cost donate money development nintaco advertise website use nintaco business commercial school government use free personal use mirror host nintaco website license applies nintaco hack source use nintaco library box nintaco emulator machine market machine official product contact author report bug nesdev,download news screenshots source api faq getting started input sound video history tracking ta editor file system netplay emulation cheat debugger family basic legal contact getting started nintaco nintaco cycleaccurate nintendo entertainment system ne famicom emulator ne sound format nsf player written java ostensibly making crossplatform support vast majority game including famicom disk system fds dendy v unisystem v dualsystem along plethora peripheral track play history enabling player rewind time undo mistake watch export edit resume play point past support netplay save state video audio recording video filter screenshots cheat code debugger ta editor controlled programmatically via api provides automatic capturing sprite level map even simulates rob robotic operating buddy install nintaco download latest release zip extract directory run nintaco nintaco requires java version depending file association may able launch nintaco doubleclicking nintacojar work use following commandline java jar nintacojar run game file open get game file try world wide web information space document resource accessed via internet uninstall nintaco erase directory extracted release zip file default generate content outside folder upgrade newer version try unzip latest version directory older version might preserve configuration save state history etc unfortunately guarantee file actually compatible latest may need delete old install new input configure button option button mapping need set button fact button mapping dialog option button mapping provides clear clear unmap button game controller supported yes pressing button game controller detected within button mapping dialog try following shutdown nintaco press button game controller start nintaco see button mapping detects button press controller particularly wireless one shut certain amount inactivity nintaco fails detect controller startup may difficulty accessing later also java natively support game controller nintaco depends jinput library purportedly provides game controller support window linux o x however map keyboard game controller probably running operating system supported jinput keyboard unresponsive window issue detecting certain key apostrophe leftright square bracket equal backslash often related infrared remote control multimedia affected key default button mapping appear unresponsive simple solution manually configure button mapping instead relying default done button mapping dialog option button mapping pressing set affected key may appear incorrect name function mapped alternatively infrared remote control disabled done device manager control panel expand keyboard rightclick microsoft ehome mcir keyboard select update driver prompted choose browse computer update opposed going web make sure show compatible hardware checked select hidcompliant device press next ok finish button complete install work device manager keyboard node try updating microsoft ehome mcir keyboard hidcompliant device work actually using wireless keyboard keyboard node device manager rightclick uninstall microsoft ehome mcir keyboard microsoft ehome mcir keyboard microsoft ehome remote control keyboard key present human interface device node rightclick disable microsoft ehome infrared transceiver reboot necessary updating uninstalling driver however need bounce nintaco may need press reset button mapping dialog o x older version nintaco contain file libnative called libjinputosxjnilib rename libjinputosxdylib bounce nintaco corrected latest release linux jinput library requires read access devinputevent device node security reason readenabled default read access granted input device issuing following command sudo chmod gou devinputevent alternatively set udev rule permission set automatically would involve adding rule similar following kernel event name input k mode group input modifying permission enabled game controller work keyboard still unresponsive check running system entering foreign character ibus fcitx scim uim found temporarily disable see interfering last resort launch nintaco root privilege illadvised number reason likely resolve issue setup turbo button like ne advantage option button mapping enables player setup autofire b button optionally button toggle normal b autofire b autofire rate controlled option input setting attach different input device controller port option port autoconfigure open checked nintaco automatically attach appropriate device game use zapper refer prior answer setting input device general ne zapper attached port famicom must attached expansion port zapper crosshairs target controlled mouse default left mouse button trigger right mouse button rewind time adjust zapper sensitivity zapper detects target within square region centered mouse position increasing size region mean le accuracy required hit target potentially making light gun game easier play size region established zapper light detection margin configurable option input setting dialog box margin similar radius circle number padding pixel layer surrounding central pixel word side square region margin pixel shoot offscreen light gun game require shoot offscreen reload firearm however since crosshairs controlled mouse clicking offscreen cause emulator lose focus instead separate button used offscreen reload default middle mouse button ie click scroll wheel configured button mapping dialog option button mapping selecting zapper another light gun device setting offscreen reload button use bandai hyper shot submachine gun hyper shot designed game space shadow mouse position crosshairs target default left mouse button trigger right mouse button grenade launcher unlike zapper holding trigger fire continuous stream shot use scroll wheel advance successive room use power glove power glove attached port option port autoconfigure open checked nintaco automatically attach power glove super glove ball power glove map mouse including mouse wheel use rob rob work game gyromite stack start either robotic operating buddy window appear inadvertently close window play reopened via view rob never played gyromite start direct mode practice picking gyro using hold blue red button mastered press select return main menu start game goal game collect dynamite within stage raise lower blue red gate need send command rob hold respective blue red button press start command also need avoid wandering smicks distract turnip game b controlled like direct mode simply need raise lower gate advance sleepwalker like gyromite never played stack start direct mode goal rearrange stack block sending command rob mode variation idea side note communication actual rob one direction ne rob however stack reach goal player expected press start advance next level nintaco actually automatically comparing state memory addition automatically setup stack nonetheless still cheat pressing start advance use famicom system following famicom game provide stereoscopic output attack animal gakuen cosmic epsilon falsion famicom grand prix ii highway star jj tobidase daisakusen part ii launching automatically open famicom glass window display pair image active shutter glass would normally deliver eye however cross eye viewing image possible experience threedimensional effect game use select button toggle mode lock mode selecting option start screen menu inadvertently close window reopen via view famicom glass option input setting provides checkbox exchange left right image displayed famicom glass window configuration potentially useful viewing stereoscope use barcode battler ii launching barcode world automatically open barcode battler ii window enables enter digit barcode value one randomly generated transfer button applies barcode use oeka kid tablet default button mapping us keyboard mouse moving mouse position stylus holding x simulates contact stylus tablet left mouse button function tablet button adjust ball firing rate using coconut japan pachinko controller rotate scroll wheel mouse use racermate computrainer exercise bike open racermate challenge ii nintaco automatically attach exercise bike use port dialog option port button mapping dialog option button mapping configure pedal handlebar controller button press start begin race computercontrolled pacer rapidly alternate left pedal right pedal propel purple rider play human opponent press select bring option use plus button navigate race press select advance next screen navigate computrainer choose pressing select repeatedly press start back racing screen finally press start begin race use uforce uforce controller employ infrared sensor capable estimating distance hand however make game generally compatible uforce toggle switch device used map sensor button standard gamepad controller reduces sensor detection capability activated inactivated like push button analog facility used unreleased prototype uforce power game upon opening file nintaco automatically attach uforce prototype consists minigames use mouse safely lower people burning building via highpressure water stream nuclear rat attack use topfield sensor hit rat whackamole style sensor configured port dialog option port button mapping dialog option button mapping rock air mouse control pitch volume left sensor field control instrument finally power field bball tapping upperleft lowerleft sensor topfield dribble left right respectively pressing topfield upperright throw player mode bottomfield button player prototype nothing tech demo unpolished one enhanced nintendoage version slightly improves minigames addition also uforce test cartridge supported nintaco simply display sensor level use miracle piano upon opening miracle piano teaching system nintaco automatically attach miracle keyboard port gamepad port gamepad operates menu system start begin b back select option option select however overlap exists default button mapping device adjusted port dialog option port button mapping dialog option button mapping keyboard volume adjusted via master slider volume mixer dialog option volume mixer addition keyboard provides volume plus volume button remaining keyboard button provide selection among instrument keyboard also damper pedal sustains note held nintaco approximates sound miracle keyboard mapping instrument standard general midi gm instrument list audio may imply gm unavailability environment java sound midi interface exhibit noticeable lag although miracle keyboard play different note simultaneously computer keyboard tend limited rollover capability making impossible play certain chord impediment addition midi lag make chance completing teach system exceedingly minute input device supported explore port combo box option port including expansion port famicom multitap port dialog option port checking multitap equivalent attaching ne four score ne satellite adaptor increase number input port compatible gamepads attach device expansion port port dialog option port expansion port option become visible switch ne famicom ne never took advantage expansion port since unlike famicom controller detachable providing port front machine input device sound set volume option volume mixer adjust master slider mute emulator option volume mixer uncheck sound enabled adjust relative volume various sound channel option volume mixer volume mixer smooth dmc checking smooth dmc reduce click pop delta modulation channel start end sound sample default checked select audio device option sound sound latency generated sound data buffered accommodate varying frame generation period crackling sound apparent slower machine may improved increasing latency however lower latency put audio sync video latency tuned millisecond via option sound configure nsf player option nsf use microphone kill pol voice famicom version legend zelda machine scream microphone menu option simulates yelling blowing famicom player controller microphone video apply video filter scaler view video filter filter execute software parallelized across multiple background thread lqx filter lq stand low quality x stand magnification inspired hqx pixel art scaling algorithm however performant implementation hqx java unavailable consequentially lqx invented substitute simulates visual artifact produced composite video simulates number crt visual artifact including shadow mask texture motion blur noise presented crt aspect ratio change screen size view screen size also resize window arbitrary size dragging window also maximized enter fullscreen mode view fullscreen press altenter use esc press altenter return window mode one checkboxes option user interface force nintaco enter fullscreen mode game loaded long delay entering exiting fullscreen mode window environment driver entirely compatible java rendering pipeline disable use add following flag launching nintaco commandline java jar nintacojar flag may significantly reduce time required toggle fullscreen mode however may also introduce rendering performance penalty mileage may vary nintaco crash entering exiting fullscreen mode see explanation potential solution prior answer image shimmer background scroll effect particularly prevalent fullscreen mode occurs pixel nonuniformly sized consequence scaling image arbitrary dimension main window pixel made uniform via view screen size uniformpixel scaling alleviating effect however depending size main window image may end thick black border around resizing window cause image snap fixed size opposed smooth scaling resizing main window image snap fixed size see prior answer switch crt aspect ratio view screen size tv aspect hide main menu bar view hide menu bar use esc bring back enable disable status message view show status message show displayed v generated framespersecond view show displayedgenerated fps disable vsync window mode option user interface uncheck use vsync window mode take screenshot tool save screenshot press option provides various option configuring feature hide show sprite background view show sprite view show background see element sprite view show sprite bounding box put colored box around sprite also debug oam data bring dialog box reveals sprite highlight selected sprite checkbox surround associated sprite multicolored box change palette view palette view import export palette file use option palette way reduce flickering ne graphic chip capable rendering limited number sprite per scanline first drawn scanline actually visible compensate ne game written constantly shuffle drawing order preventing sprite vanishing completely many align horizontally mean given sprite may appear frame hence flickering option view show sprite per scanline reduce flickering eliminating constraint however may stop flickering completely total number sprite per frame limited game may written shuffle set sprite larger super mario bros strangelycolored artifact rightside screen actually normal consequence able scroll direction effect may minimized crt back day narrow border around picture known overscan might cropped overscan adjusted via option overscan really want hide artifact completely ntsc set right conceal rightmost column pixel edge image slightly cutoff due simulating overscan behavior crt part picture projected outside visible bound screen effect adjusted using option overscan toggled entirely via view screen size underscan history tracking save game progress nintaco provides game quick save slot press snapshot emulation state one slot press overwrite leastrecentlyused slot press quick load associated slot press load mostrecentlyused slot alternatively press save state specified file restore specified file option also accessible file menu battery save supported yes nintaco automatically persists save data game equipped batterybacked nonvolatile memory erase battery save machine erase battery save nintaco support external storage unit like battle box turbo file yes upon opening game external storage unit support nintaco automatically attache associated device famicom expansion port see option port data recorded unit automatically persisted rewind time player individually configure separate rewind time button via option button mapping using controller usb ne controller rewind time mapped button combo start b also possible rewind time via tool rewind time watch gameplay history tool watch history enable disable history tracking tool track history watching history view zapper crosshairs position view show input device actually render icon attached input device indicate button pressed given moment fact enabled icon recorded video file make video audio file history tool export videoaudio select start end frame press export make animated gif follow prior answer change type animated gif change scale hit ok generated video audio file large audio data stored uncompressed play slow motion watch back realtime yes addition rewind mistake away modify input framebyframe using history editor algorithm used track history nintaco record controller input capture save state every frame random access restores nearest save state us input sequence fill gap addition nintaco maintains running buffer last rendered image associated audio sample rewind time frame buffer displayed reverse order occurs nintaco incrementally fill second buffer forward direction based prior save state buffer becomes completely filled moment becomes empty buffer swapped cycle repeat earlier save state history tracking work game generate random event yes event seem random actually triggered pseudorandom number generator mathematical formula generates reproducible sequence number approximates randomness fact emulated hardware completely deterministic nature restoring save state playing back controller input sequence timing recorded result exactly performance nintaco track indefinite amount history eventually run memory probably playing long period concern always clear history tool clear history simply disable history tracking together tool track history also possible increase java virtual machine maximum memory allocation pool size via xmx flag commandline example following command specifies size gigabyte java jar nintacojar ta editor launch ta editor tool edit history ta editing gameplay history stored starting save state followed recording controller input sampled per frame restoring starting save state playing back input sequence result performance thanks deterministic nature emulated hardware history editor enables view manipulate input sequence used generate gameplay exceeds human limitation mechanical impediment controller resulting toolassisted speedrun superplay ta typically demonstrates play virtually impossible achieve realtime table row display sampled gamepad input particular frame frame index displayed second column first column used navigation remaining column appear group associated gamepad button cell populated value indicate button held corresponding frame checkboxes view area right table enable select gamepad column shown require multitap option port view frame within history clicking cell first column position button move backwards forward single frame respectively random access possible save state captured every frame ie restores nearest save state us input sequence fill gap clicking dragging across multiple gamepad cell toggle associated button come consequence save state modified row row become invalid row invalid save state turn gray history editor responds automatically updating generates new save state internally playing input sequence modified point forward animated bar right table display progress mechanism since restoring save state large number row lengthy process useful mark row restoration endpoint actually happen automatically navigate frame clicking cell first column successive edits gamepad button cell row cause history editor restore save state navigated endpoint row history editor us tan arrow first column identifier row blue arrow first column mark last generated frame click cell first column blue row main window updated associated frame blue arrow follow hand click cell first column gray row take time restore save state row happens blue arrow advance first column reach navigated row mechanism disabled unchecking restore position addition rate restoration controlled fast generation checkbox jump last generated frame press head button scroll row blue arrow view record block frame record area check gamepads obtain input require multitap option port refers nongamepad input pressing reset button flipping famicom disk inserting coin etc merge checked combine new input existing recording opposed replacing merge way record block multiple pass potentially different gamepad ready record press resume track cursor checked table scroll newly recorded frame press pause stop recording save load file save project file load project ta editing involves lot experimentation make easier history editor provides project quick save slot accessible via file quick saveload project menu also slot area right table slot used explore different path best result persisted via file save project also modification project appear history area list clicking row list restore project back earlier state controlled incrementally using undo redo button use bookmark create bookmark bookmark area press add dialog box appear frame number field autopopulated blue arrow row index enter name press ok new bookmark appear bookmark area list addition bookmarked row marked pink box first column jump bookmark simply select list press seek jump currently selected entry previous next button navigate forward backwards list respectively bookmark modified via edit delete button bookmark used bound selection edit select bookmark select block row press hold cell first column drag upwards downwards within column click cell first column hold shift click different cell first column select row also selection need contiguous add row selection holding ctrl clicking cell first column edit menu provides many option manipulating selected row copy save selection clipboard actually pasted text editor modified pasted back history editor aware paste replaces existing row merge combine content clipboard existing input sequence insert option inject new row current navigation point append option add new row bottom file system file format supported nintaco support ne ines ne fds without header unif nsf normal extended file format file loaded compressed archive zip rar tar user prompted select specific file within archive contains multiple entry however nintaco automatically highlight best candidate among list based configured preference option archive file even setup skip prompt always go default alternatively possible specify file within archive like tortillazip salsanes change location generated content option content directory load game commandline java jar nintacojar salsanes java jar nintacojar tortillazip salsanes ip patch ip store difference two file romhacking community us deploy patch existing file load ip patched game place ip file directory file load name filename extension ip salsanes salsanesips salsazip salsazipips salsanesgz salsanesgzips create ip patch tool create ip patch apply ip patch tool apply ip patch setup control famicom disk system famicom disk system requires bios file function sort operating system control drive obtained loaded nintaco via option famicom disk system insert disk flip disk side eject disk found machine menu edit ines ne file header tool edit file header disable cart db option user interface uncheck soft patch file header load find description currently running game view file info netplay netplay netplay link together multiple instance nintaco network multiplayer gaming one instance act server one instance act client setup netplay server put nintaco server mode select tool start netplay server window appears enable configure localhost multiple network interface controller listening port checkboxes allow specify local player play server instance enable multitap option port get player remaining option enable setup password control client act spectator access quick save rewind time control highspeed press start server enter server mode step followed opening game file setup netplay client put nintaco client mode select tool connect netplay server window appears accepts server host port optionally password connect player though player applicable multitap game also specify controller used client alternatively client connect nonplayer selecting spectator press connect enter client mode whatever game running sever automatically downloaded launched need keep netplay window open server client control window need remain open netplay always return via tool menu netplay work internet netplay us simple tcp protocol designed local area network might performant internet emulation increase emulator font size view font size change skin visual style emulator view look feel difference power cycle reset power cycle equivalent closing reopening current file completely wipe emulation state including play history hand reset button treated input device like button sends signal running file something case instructed reset consequence reset affect play history even rewind back reset happened control emulation speed machine speed provides mean speeding slowing emulation addition player individually configure separate highspeed button via option button mapping used skip past intermission scene rewind faster highspeed rate set option input setting way speed nintaco running older hardware nintaco favor modern machine however setting may help option user interface try switching interframe delay sleep spin take fraction frame period actually generate new frame default nintaco sleep away remaining time asking operating system wake start next frame period however depending immediate need system wakeup may delayed contrast spin option burn remaining time loop repeatedly consults realtime clock increase accuracy frame timer consumes processor time could used execute task core run yield option something inbetween wakeup event delayed nintaco notice got behind generate burst frame rapid succession attempt catch however trail number frame specified max lag frame option give resetting frame timer default threshold frame meaning would lag full second ntsc trigger timer reset also see answer sound latency switch dendy mode machine tv system dendy nintaco automatically set tv system based file name region code information cart db console emulator insert coin feature addition home console nintaco support v unisystem v dualsystem coinoperated video game platform based ne hardware simulating coin insertion required launch game run v unisystem game v unisystem coinoperated video game platform based ne hardware game different ne counterpart example v duck hunt bonus stage animation sequence present console version v super mario bros considerably difficult original super mario bros upon loading v unisystem game presented dip switch dialog box provides gamespecific configuration option default factory setting without adjustment press ok advance game dip switch dialog box brought selecting machine dip switch however game reset required apply dip switch change beginning v unisystem game involves inserting one coin game credit pressing one start button insert coin select machine insert coin main left press alternatively select machine insert coin main right press option correspond left right coin slot respectively slot behave identically sub coin slot available v dualsystem machine finally press start button gamepad game accordingly v unisystem machine also provide service button accessed via machine press service button main behavior usually equivalent inserting coin machine provide test mode entered toggling dip switch within service button may perform thing menu navigation v unisystem game typically marked v atari rbi baseball v ne balloon fight v ne battle city v ne castlevania v ne clu clu land v ne dr mario v ne duck hunt v ne excitebike v ne freedom force v ne goony v ne gradius v ne gumshoe v ne hogan alley v ne ice climber v ne mach rider v ne mighty bomb jack j v ne ninja jajamarukun v ne pinball v ne platoon v ne soccer v ne star luster v ne stroke match golf v ne stroke match golf lady v ne super sky kid v ne super xevious gump nazo v ne tetri v ne top gun v ne v slalom v ne v skate kid v hack ne v super mario bros v ne v tko boxing v ne nintaco also support mame archive file newer ne file format v system game konami v unisystem game work work however v castlevania v goony v gradius v top gun perform rom check startup annoying long process may incorrectly suggest emulation issue race past check via high speed controller button option button mapping run v dualsystem game v dualsystem coinoperated video game platform based ne hardware designed cooperative competitive play feature screen controller game platform enhanced port ne famicom title v dualsystem contains equivalent ne console linked together unfortunately rom dumped data console captured separate ne file load v dualsystem game ne file must present within archive file example opening either file list pair automatically load balloon balloon fight v ne balloon balloon fight v player mode ne baseball v player mode ne baseball v player mode ne baseball v player mode ne baseball v player mode ne baseball v player mode ne baseball v player mode ne ice ice climber v player mode ne ice ice climber v player mode ne mahjong v player mode ne mahjong v player mode ne tennis v ne tennis v player mode ne wrecking wrecking crew v player mode ne wrecking wrecking crew v player mode ne alternatively nintaco support mame archive file newer ne file format v system game upon loading v dualsystem game presented dip switch dialog box provides gamespecific configuration option default factory setting without adjustment press ok advance game dip switch dialog box brought selecting machine dip switch however game reset required apply dip switch change past dip switch dialog sub monitor window appears providing view second screen main monitor render within nintaco window associated player sub monitor associated player gamepads button configured option port beginning v dualsystem game involves inserting one coin game credit pressing one start button insert coin main system select machine insert coin main left press alternatively select machine insert coin main right press option correspond left right coin slot respectively slot behave identically sub coin slot accessed via machine insert coin sub left machine insert coin sub right depending coin fed start button pressed main sub act two independent arcade machine act one cooperative machine independent gameplay insert coin main sub press start start cooperative gameplay insert coin main second coin sub press start followed start v tennis support cooperative gameplay insert coin main coin sub press select followed select main sub window dragged onto separate monitor made fullscreen view fullscreen altenter interested one screen minimized case sub monitor window closed completely later restored view sub monitor regarding audio hear music sound effect window focus coop network setup netplay server local player setup netplay client player enable press start server side start client side per discussion v tennis coop network still select followed select begin v dualsystem machine also provide service button accessed via machine press service button main sub behavior usually equivalent inserting coin machine provide test mode entered toggling dip switch within service button may perform thing menu navigation run game arcade multicabinet containing ne game game nearly identical ne counterpart except color palette slightly different physical machine provides player fixed time limit play many game desired however nintaco enforces limit enabling indefinite play also unlike v system inserting coin unnecessary start button begin game game typically marked ne balloon fight ne baseball ne baseball star ne captain skyhawk ne castlevania ne chip n dale rescue ranger ne contra ne double dragon ne double dribble ne dr mario ne duck hunt ne excitebike ne fester quest ne gauntlet ne golf ne goony ne gradius ne hogan alley ne kung fu ne mario bros ne megaman iii ne metroid ne mario open golf ne ninja gaiden ne ninja gaiden ii dark sword chaos ne ninja gaiden iii ancient ship doom ne nintendo world cup ne pin bot ne power blade ne pro wrestling ne mike tyson punchout ne rc proam ne rad racer ne rad racer ne rockin kat ne rush n attack ne rygar ne solar jetman hunt golden warpship ne super c ne super mario bros ne super mario bros ne super mario bros ne tecmo bowl ne teenage mutant ninja turtle ne teenage mutant ninja turtle ii arcade game ne tennis ne track field ne trojan ne volleyball ne wild gunman ne yo noid ne map maker map maker automatically generates level map play stage tool map maker launch map maker window hit start begin mapping map maker work game various way game render level game work bit configuration usually required example super mario bros starting game selecting world change capture vertical band set update scanline press start map maker stitch together background incrementally player advance stage comparing background tile currently visible tile last known position within expanding map capture option specifies considers visible tile instance nametables viewer reveals super mario bros update vertical strip player scroll horizontally consequentially setting capture vertical band scan sky ground set visible window player would fly around sky addition walking along ground generate full stage map visible window horizontal band option refined adjusting start end tile row make possible eliminate status bar tracking size largest jump scrolling direction account comparison example mean game expected scroll faster tile per frame game scroll fraction single tile per frame tracking size thought scanning radius move map possible direction distance trying find match auto flush selected map maker us match threshold specified max difference field default value mean tile different match found map flushed image file new map started time flush button pressed force flush post flush frame field specifies number frame wait flush constructing new map flush automatically happen stop pressed update sprite hit update scanline affect point within current frame scan background value relevant game us fixed status bar option appear nametable viewer experiment value background look correct game start pause button blank screen brings option dialog would normally interfere map mapping however auto pause option automatically stop mapping start pressed resume successive start detects background returned normal since tracking start press easily get sync actually happening game manually control pressing pause resume button map maker window sprite saver eponymous sprite saver save technically metasprites composed pixel sprite gameplay tool sprite saver bring sprite saver window hit start begin saving sprite field min occurrence specifies number time metasprite must appear within provided time window within second saved unglitch emulator menu option machine glitch simulates poor connectivity cartridge slot affect pin access tile data enabling game continue running glitched graphic rather remedying situation successive glitch application leave contact randomly generated bad state even option restore connection blow cart game would likely fail fully recover due graphical load glitched period consequentially way unglitch emulator reset power cycle rewind time glitch happened cheat enter game genie code tool manage cheat automatically display table game genie code cheat database found current game cheat enabled disabled clicking checkboxes first column code appear list entered manually clicking new invent new cheat tool cheat search bring cheat search window row table right corresponds cpu ram address column represent snapshot memory initialized pressing snap snap fill respective column value addition per pause snap checkbox snapshotting memory also pause emulation column populated value row filtered using option snap button idea snapshot memory event compare result example snapshot immediately player loses life comparing result might able track address store life counter panel left enables enter new cheat address memory location affected value emulator receive read address compare optional field present emulator compare actual value stored address match emulator receive substitute value side note game genie pro action rocky code limited address however nintaco cheat code restriction making possible generate cheat directly ram comparison else monitor change ram debug ram search provides tool similar cheat search however show changing value realtime table row selected several option become available including add cheat button watch button start tracking associated address ram watch window also opened via debug ram watch invent new game genie code game genie pro action rocky code affect read prg rom address code effectively act program patch first step inventing new game genie code procedure describe inventing new cheat pinpoint relevant value stored ram next using breakpoints debugger locate part executing program affect ram address finally using knowledge assembly language create one game genie code modify behavior compare value described used confirm relevant prg bank loaded hot swap machine hot swap simulates changing cartridge without turning power second game begin executing memory state first game used warp unofficial world super mario bros open super mario bros select machine hot swap prompted hit yes open tennis reset start begin game toss ball twice serve walk around briefly next select machine hot swap reopen super mario bros reset start finally hold press start continue interpret prior game unofficial world number step taken walking around tennis affect world end alternatively select copy program poke next poke input world poke next start family basic paste program via machine family basic paste program press run prompted world type world number hit enter print ok response next select machine hot swap open super mario bros reset start finally hold press start warp specified world debugger start debugger debug debugger debug menu also provides access oam data pattern table nametables hex editor assemblerdisassembler ram search ram watch window use debugger begin debugging actively running game need paused manually paused via pause button paused automatically setting breakpoints paused panel left show disassembly pc pointer advance pc step button execute one instruction step however jsr run rts step run current subroutine end neighboring button variation hover mouse button see tooltips instance click address disassembly populate seek step field pressing step execute specified address reached debugger show current value cpu ppu register data stack register value changed executing successive instruction run trace logger trace logger started debugger pressing start logger button also launched main menu via debug start trace logger toggle button use stop logging config button within debugger option trace logger main menu enable configure data get logged note logging stop automatically specified max line reached camera x camera computed camera x v v x camera v v v v x current vram address bit fine x scroll bit respectively hex editor ca nt edit cpu memory beyond possibly banked segment prg rom mapped cpu address ffff writes region may mapped register within cartridge writes trigger bankswitches likely crash game however possible edit rom segment directly highlight region interest select navigate go file index hex editor menu change prg rom affect running game immediately preserve changed rom select file save file file save file table file region right side hex editor display byte ascii character however mapping byte value character altered using table file tbl file line form xxc xx digit hex value c associated character xxret special escape sequence substitute value return ascii character text region edited directly mapping work reverse update byte search rom string nametable viewer mouse highlight region interest hit search open hex editor point within loaded file selection found use debugger history editor watch history debugger active history editor watch history playing breakpoints debugger pause button suspend emulation without affecting play mode start tracing first instruction game load game open debugger press pause stop arbitrary point press rst resume reset finally reset game machine reset family basic enable machine family basic menu opening family basic rom enable menu difference paste program type paste paste program injects basic code directly ram type paste simulates typing family basic keyboard also noted copy program copy basic code ram clipboard load save program function similarly family basic background editor family basic primarily designed create simple game builtin background editor way create single screen world game however drawing entire background gamepad tedious process nintaco make considerably easier via family basic background editor edit background draw mode allows select pattern palette draw freehand background area fill mode performs flood fill select copy allows highlight region copy automatically switch paste mode text button enables enter paste string done pasting switch back draw mode background loaded saved file menu directly family basic menu save basic program data recorder save command writes basic program cassette tape save file called test type following hit return save test start data recorder selecting machine family basic record tape hit return output writing test process completed display ok next select machine family basic stop tape finally select machine family basic save tape store tape data actual file record tape actually simulates rewinding tape back beginning recording consequentially one file stored virtual cassette tape also family basic limit file name character load basic program data recorder tape data actual file select machine family basic load tape retrieve next enter following command press return load select machine family basic play tape loading message appear followed ok finally stop data recorder via machine family basic stop tape game use data recorder yes arkanoid ii castle excellent excitebike mach rider wrecking crew use data recorder save track stage created player attach data recorder first select option port bring port dialog switch famicom mode select data recorder expansion port sure select record tape start data recorder selecting save game select play tape selecting load game configure family basic option family basic dialog enables adjust keyboard entry timing value data recorder sampling period default sampling period work family basic game use data recorder encounter data error try decreasing value tape file nintaco store cassette data proprietary file format file consists short header followed bit stream emitted data recorder sampled fixed rate prior answer explains adjust sampling period legal much nintaco cost free donate money development nintaco nt mean paying aspect nintaco advertise website site adfree use nintaco business commercial school government use free personal use nintaco free purpose may install many system would like license fee kind mirror host nintaco website yes charge user download nintaco license applies nintaco gnu lesser general public license full license viewed via help license hack source sure modify nintaco document change license result use nintaco library use resource library software even commercial software restriction release software use resource like release different license principle possible swap compatible version resource meaning resource baked software way boundary unclear subclassing class one way blur boundary get around packaging change nintaco external form licensed shipping modified version along software box nintaco emulator machine market machine similar prior question long resource could swapped compatible version least principle actually need provide way upgrade newer version nintaco need keep resource clearly separated need release modification made nintaco official product nintaco author affiliated endorsed nintendo co ltd nintendo america way balloon fight dr mario duck hunt excitebike famicom family basic famicom data recorder gyromite hogan alley legend zelda mach rider mario bros mario open golf metroid mike tyson punchout ne ne advantage nintendo nintendo world cup rob stack super mario bros super mario bros super mario bros wrecking crew wild gunman v balloon fight v baseball v clu clu land v dr mario v dualsystem v duck hunt v excitebike v gumshoe v hogan alley v ice climber v mach rider v mahjong v pinball v slalom v soccer v stroke match golf v system v tennis v unisystem v wrecking crew zapper product andor trademark nintendo co ltd contact author email mocliamtoh nesdev board presence enoorez report bug use contact information post message nesdev community brilliant coder hardware archivist please provide log file system subdirectory bug report copyright nintacocom nintaco free software redistribute andor modify term
284,Lobsters,virtualization,Virtualization,Early Macintosh Emulation Comes to the Archive,https://blog.archive.org/2017/04/16/early-macintosh-emulation-comes-to-the-archive/,early macintosh emulation come archive,console game arcade machine home computer introduction macintosh located collection complete run macworld magazine deepdive macintosh book compilation system pce james friend marcio,offering inbrowser emulation console game arcade machine range home computer internet archive emulate early model apple macintosh blackandwhite mouse driven computer radically shifted future home computing certainly predecessor computer desktop paradigm introduction macintosh brought mass market year since steadily adapted every major computing platform operating system first set emulated macintosh software located collection curated presentation application game operating system experienced original operating system macintosh family computer interesting combination wellworn convention modern world along choice might seem strange offthemark time machine released however landed new idea hand worldwide audience gained significant fan follower almost immediately story creation operating system macintosh covered many collection archive including complete run macworld magazine deepdive macintosh book program currently presented many case application survived present day various form direct ancestor warning megabyte download compilation system includes large variety software program rather rich recreation macos experience enjoy black white window computer history many people worked hard bring emulation system bear hampa hug created pce original macintosh emulator program experiment work james friend pcejs marcio retroweb ported pce javascript via emscripten provided continued assistance emularity team approached refining emulator work within archive framework much work done daniel brook philel james baicoianu vitorio miliano daniel brook putting multiple week refinement
285,Lobsters,virtualization,Virtualization,VirtualBox 3D support for X11 guests in a dilemma,https://www.virtualbox.org/wiki/X11Guest3D,virtualbox support guest dilemma,support guest investigating problem mailing list ticket comment quick overview passthrough virtualbox srcvboxadditionscommoncropengl,support guest support guest bit dilemma u many many issue would relatively easy fix individually one might day two work developer unfortunately really make sense address individually none developer much time spend since lot problem thing could probably fixed user reasonable development skill decided make sense declare support guest user supported happy integrate patch fix individual problem see without much effort going break thing glad provide assistance time permit investigating problem good approach many though issue start creating smallest possible test application trigger problem point running application debug build guest library help see happening since many application running free software asking developer application help might also worth open suggestion help without investing much developer time including thing help build user development community also happy answer question support work please use vboxdev mailing list would particularly appreciate people contributing document learn form make publicly available regarding application always top bug see ticket comment quick overview passthrough passthrough code life virtualbox source directory srcvboxadditionscommoncropengl library vboxoglso implement opengl glx library respectively marshalling opengl call data stream sent host nt looked feedback host graphic card handled talking guest x server find thing like guest window position content placed top right guest window try dragging guest window content understand approach drawback vboxeglso simply egl implementation wrapped around glx one anyone interested making work android wayland probably expand eglgetdisplay designed allow selecting different implementation studying glx code using basis wayland support would probably mean implementing replacement libgbmso
286,Lobsters,virtualization,Virtualization,Robert Mustacchi: Excerpts from The Soft Ring Cycle #1,https://www.youtube.com/watch?v=vnD10WQ2930,robert mustacchi excerpt soft ring cycle,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature robert mustacchi excerpt soft ring cycle youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature robert mustacchi excerpt soft ring cycle youtube
287,Lobsters,virtualization,Virtualization,Pandavirtualization: Exploiting the Xen hypervisor,https://googleprojectzero.blogspot.com/2017/04/pandavirtualization-exploiting-xen.html,pandavirtualization exploiting xen hypervisor,,posted jann horn project zero reported bug xen security team permit attacker control kernel paravirtualized xen guest break hypervisor gain full control machine physical memory xen project publicly released advisory patch issue demonstrate impact issue created exploit executed one pv guest root privilege execute shell command root pv guest including physical machine background accessok xen pv guest share virtual address space hypervisor coarse memory layout look follows xen allows guest kernel perform hypercalls essentially normal system call guest kernel hypervisor using system v abi performed using syscall instruction six argument passed register like normal syscalls xen hypercalls often take guest pointer argument hypervisor share address space make sense guest simply pas guestvirtual pointer like kernel xen ensure guestvirtual pointer nt actually point hypervisorowned memory dereferencing using userspace accessors similar linux kernel example accessok addr size checking whether guestsupplied virtual memory range safe access word check accessing memory range modify hypervisor memory copytoguest hnd ptr nr copying nr byte hypervisor address ptr guest address hnd without checking whether hnd safe copytoguest hnd ptr nr copying nr byte hypervisor address ptr guest address hnd hnd safe linux kernel macro accessok check whether whole memory range addr safe access using memory access pattern however xen accessok nt guarantee much valid half address space xenreserved area also valid range check addr addrsize long start address outside xenreserved area access noncanonical address thus fault ever reaching virtstart define addrok addr unsigned long addr unsigned long addr hypervisorvirtend define accessok addr size addrok addr iscompatargxlatrange addr size xen normally check addr point userspace area kernel area without checking size actual guest memory access start roughly addr proceeds linearly without skipping gigantic amount memory bail soon guest memory access fails checking addr sufficient large range noncanonical address serve large guard area however hypercall want access guest buffer starting offset need ensure accessok check performed using correct offset checking whole userspace buffer unsafe xen provides wrapper around accessok accessing array guest memory want check whether safe access array starting element use guesthandleokay hnd nr however want check whether safe access array starting different element need use guesthandlesubrangeokay hnd first last saw definition accessok lack security guarantee actually provided accessok seemed rather unintuitive started searching caller wondering whether anyone might using unsafe way hypercall preemption eg scheduler tick happens xen need able quickly switch currently executing vcpu another vm vcpu however simply interrupting execution hypercall wo nt work eg hypercall could holding spinlock xen like operating system need mechanism delay vcpu switch safe xen hypercalls preempted using voluntary preemption longrunning hypercall code expected regularly call hypercallpreemptcheck check whether scheduler want schedule another vcpu happens hypercall code exit guest thereby signalling scheduler safe preempt currentlyrunning task adjusting hypercall argument guest register guest memory soon current vcpu scheduled reenter hypercall perform remaining work hypercalls nt distinguish normal hypercall entry hypercall reentry preemption hypercall reentry mechanism used xen xen one hypervisor stack per vcpu one hypervisor stack per physical core mean operating system eg linux simply leave state interrupted syscall kernel stack xen ca nt easily design mean hypercalls allow properly resume work additional data stored guest memory could potentially manipulated guest attack hypervisor memoryexchange hypercall hypervisormemoryop xenmemexchange arg invokes function memoryexchange arg xencommonmemoryc function allows guest trade list physical page currently assigned guest exchange new physical page different restriction physical contiguity useful guest want perform dma dma requires physically contiguous buffer hypercall take struct xenmemoryexchange argument defined follows struct xenmemoryreservation xenguesthandle xenpfnt extentstart physical page list number extent sizealignment page xenulongt nrextents unsigned int extentorder xenmemf flag unsigned int memflags domain whose reservation changed unprivileged domain specify domidself domidt domid struct xenmemoryexchange detail memory extent exchanged gmfn base note inaddressbits ignored unused struct xenmemoryreservation inout detail new memory extent require indomid outdomid innrextents inextentorder outnrextents outextentorder inextentstart outextentstart list must overlap outextentstart list gpfn base populated outextentstart overwritten allocated gmfn base struct xenmemoryreservation number input extent successfully exchanged first nrexchanged input extent successfully deallocated corresponding first entry output extent list correctly indicate gmfns successfully exchanged input output extent untouched input exents exchanged return code command nonzero field must initialised zero caller xenulongt nrexchanged field relevant bug inextentstart innrextents outextentstart outnrextents nrexchanged nrexchanged documented always initialized zero guest used return result value also hypercall preemption memoryexchange preempted store progress nrexchanged next execution memoryexchange us value nrexchanged decide point input array inextentstart outextentstart resume originally memoryexchange check userspace array pointer accessing copyfromguestoffset copytoguestoffset perform check supplying hypervisor pointer possible cause xen read write hypervisor memory pretty severe bug discovered fixed follows http diff git axencommonmemoryc bxencommonmemoryc index axencommonmemoryc bxencommonmemoryc static long memoryexchange xenguesthandle xenmemoryexchanget arg goto failearly guesthandleokay exchinextentstart exchinnrextents guesthandleokay exchoutextentstart exchoutnrextents rc efault goto failearly privileged guest allocate multipage contiguous extent multipageallocationpermitted current domain exchinextentorder bug seen following code snippet resumption offset nrexchanged controlled guest xen hypercall resumption scheme used guest choose offset outextentstart hypervisor write static long memoryexchange xenguesthandleparam xenmemoryexchanget arg various sanity check guesthandleokay exchinextentstart exchinnrextents guesthandleokay exchoutextentstart exchoutnrextents rc efault goto failearly exchnrexchanged inchunkorder exchinnrextents inchunkorder assign output page domain j page pagelistremovehead outchunklist j pagingmodetranslate copytoguestoffset exchoutextentstart outchunkorder j mfn rc efault however guesthandleokay check check whether would safe access guest array exchoutextentstart starting offset guesthandlesubrangeokay would correct mean attacker write value arbitrary address hypervisor memory choosing exchoutextentstart exchnrexchanged exchoutextentstart point userspace memory exchnrexchanged point target address hypervisor memory exchoutextentstart close null calculated exchoutextentstarttargetaddr exchinnrextents exchoutnrextents exchinextentstart exchnrexchanged inputbuffer legitimate guest kernel pointer physical page number currently owned guest guaranteed always point guest userspace range therefore pas accessok check exchoutextentstart roughly point start userspace address range hypervisor guest kernel address range together big userspace address range value written attackercontrolled address physical page number physical address divided page size exploiting bug gaining pagetable control especially busy system controlling page number written kernel might difficult therefore reliable exploitation make sense treat bug primitive permit repeatedly writing value controlled address significant bit zero limited amount physical memory least significant bit le random exploit decided treat primitive one writes essentially random byte followed seven byte garbage turn pv guest primitive sufficient reliably exploiting hypervisor following reason pv guest know real physical page number page access pv guest map live pagetables four paging level belonging domain readonly xen prevents mapping writable xen map physical memory writable word hypervisor write physical page independent protection using mapped place writing goal attack point entry live level pagetable call victim pagetable page guest write access call fake pagetable mean attacker write value containing physical page number fake pagetable flag entry victim pagetable ensure following pagetable entry stay disabled eg setting first byte following entry zero essentially attacker write controlled byte followed byte nt matter physical page number relevant page address writable mapping physical memory known guest figuring write value write easy remaining problem use primitive actually write data attacker want use primitive write readable page write one random byte followed byte garbage primitive easily converted write one controlled byte followed byte garbage primitive repeatedly writing random byte reading back value right write one controlled byte followed byte garbage primitive converted write controlled data followed byte garbage primitive writing byte consecutive address exactly primitive needed attack point attacker control live pagetable allows attacker map arbitrary physical memory guest virtual address space mean attacker reliably read write memory code data hypervisor vms system running shell command vms point attacker full control machine equivalent privilege level hypervisor easily steal secret searching physical memory realistic attacker probably would nt want inject code vms considering much detectable make attack running arbitrary shell command vms make severity obvious look cooler fun decided continue exploit injects shell command pv domain first step wanted reliably gain code execution hypervisor context given ability read write physical memory one relatively o hypervisor independent way call arbitrary address kernelhypervisor privilege locate interrupt descriptor table using unprivileged sidt instruction write idt entry dpl raise interrupt intel upcoming cannon lake cpu apparently going support usermode instruction prevention umip finally make sidt privileged instruction xen support smep smap nt possible point idt entry guest memory using ability write pagetable entry possible map guestowned page hypervisorcontext shellcode nonuseraccessible allows run despite smep hypervisor context possible hook syscall entry point reading writing msr syscall entry point used syscalls guest userspace hypercalls guest kernel mapping attackercontrolled page guestuseraccessible memory changing register state invoking sysret possible divert execution guest userspace code arbitrary guest user shellcode independent hypervisor guest operating system exploit injects shellcode guest userspace process invoked every write syscall whenever shellcode run check whether running root privilege whether lockfile nt exist guest filesystem yet condition fulfilled us clone syscall create child process run arbitrary shell command note exploit nt clean purpose attacking domain shut later hooked entry point quickly cause hypervisor crash screenshot successful attack qubes o us xen hypervisor exploit executed unprivileged domain screenshot show injects code firewallvm conclusion believe root cause issue weak security guarantee made accessok current version accessok committed two year first public release xen long first xsa released seems like old code tends contain relatively straightforward weakness often newer code committed le scrutiny regarding security issue old code often left alone securityrelevant code optimized based assumption care must taken reliably prevent assumption violated accessok actually used check whether whole range overlap hypervisor memory would prevented bug occurring unfortunately commit fixescleanups made changed behavior accessok current one far tell reason nt immediately make memopincreasereservation memopdecreasereservation hypercalls vulnerable nrextents argument dodommemop bit wide relatively brittle defense several xen vulnerability affected pv guest issue code unnecessary dealing hvm guest believe nt one accessing guest virtual memory much straightforward pv guest hvm guest pv guest rawcopyfromguest call copyfromuser basically bound check followed memcpy pagefault fixup thing normal operating system kernel accessing userspace memory hvm guest rawcopyfromguest call copyfromuserhvm pagewise copy memory area might physically noncontiguous hypervisor nt contiguous virtual mapping guest pagetable walk translate guest virtual address guest physical address guest frame lookup every page including reference counting mapping guest page hypervisor memory various check eg prevent hvm guest writing readonly grant mapping hvm complexity handling guest memory access actually higher pv security researcher think lesson paravirtualization much harder understand normal kernel audited kernel code hypercall entry path lstarenter basic design hypercall handler pv listed pvhypercalltable look le like normal syscalls
288,Lobsters,virtualization,Virtualization,XSA-212 - x86: broken check in memory_exchange() permits PV guest breakout,https://xenbits.xen.org/xsa/advisory-212.html,broken check memoryexchange permit pv guest breakout,information file advisory http wwwxenprojectorgsecuritypolicyhtml,informationadvisory release broken check memoryexchange permit pv guest signed advisory file begin pgp signed message hash xen security advisory version broken check memoryexchange permit pv guest breakout update version public release issue description fix introduced insufficient check xenmemexchange input allowing caller drive hypervisor memory access outside guest provided inputoutput array impact malicious buggy pv guest may able access system memory allowing privilege escalation host crash information leak vulnerable system xen version vulnerable system affected arm system vulnerable vulnerability exposed pv guest hvm guest pv guest ca nt exploit vulnerability mitigation running hvm pv guest avoid vulnerability vulnerability avoided guest kernel controlled host rather guest administrator provided step taken prevent guest administrator loading code kernel eg disabling loadable module etc using mechanism allow run code kernel privilege credit issue discovered jann horn google project zero resolution applying attached patch resolve issue xenunstable xen xen xen xen xen deployment embargo deployment patch andor mitigation described others substantially similar permitted embargo even publicfacing system untrusted guest user administrator distribution updated software prohibited except member predisclosure list predisclosure list member wish deploy significantly different patch andor mitigation please contact xen project security team note duringembargo deployment notice retained postembargo publicly released xen project advisory even though longer applicable enable community oversight xen project security team decisionmaking information permissible us embargoed information consult xen project community agreed security policy http wwwxenprojectorgsecuritypolicyhtml begin pgp signature version gnupg end pgp signature xenprojectorg security team
289,Lobsters,virtualization,Virtualization,"LandHere, an x86 ISA extension as possible mitigation for code-reuse attacks",http://landhere.galois.com/,landhere isa extension possible mitigation codereuse attack,landhere landhere architecture landing pad shadow stack qemu linux gcc glibc binutils linux downloads precompiled source code implementation detail landing pad semantics landing pad shadow stack semantics shadow stack linux image void linux aside void linux void linux acknowledgment,landhere landhere architecture simulated implementation several proposed instruction set feature intended preserve correct program control flow hardware level feature chosen implementation landhere intended simple implement hardware intended constitute complete defense againt rop attack instead constitute coarse set defense greatly reduce eliminate possibility control flow attack augmented softwarebased control flow defense tighter protection landhere architecture small nonstandard extension intel instruction set architecture add two feature proposed academic literature possible mitigation codereuse attack special landing pad instruction used mark target dynamic control flow ensure actual control flow program deviate significantly programmer intended control example attacker induce program jump middle function body return head function shadow stack separate stack structure maintains redundant data current state program stack allows program verify actual stack state match intended stack state making resilient modification attacker order demonstrate feasibility feature evaluate efficacy practice implemented simulator modifying hardware emulator qemu correspondingly modified everything needed compile run real linux system emulator including patching gcc glibc binutils linux operating system downloads order experiment system need least lpenabled version qemu image run provided precompiled source version precompiled source code source code used build artifact note source built top older version software certain known bug original software fixed artifact implementation detail landing pad semantics order encode landing pad instruction backwardscompatible way chose encode nonstandard noop instruction nop fourbyte noop aa clp target call bb jlp target jmp cc rlp target ret one corresponds kind dynamic jump assembly jump given kind performed next instruction executed must corresponding landing pad else cpu fault example code snippet mov rax ff jmp rax skipped instruction bb jlp xor rax rax run without problem instruction jumped contains jlp hand mov rax ff jmp rax skipped instruction xor rax rax raise fault targeted instruction jlp instruction similarly mean every function called via function pointer must begin clp instruction also every call instruction expects control flow return must followed rlp instruction relatively weak policy prevent possible code reuse attack however limit number useable gadget attacker disposal attacker might overwrite register way directs control flow wrong place attacker longer redirect control flow say middle basic block call chunk code intended called shadow stack semantics shadow stack require modification userfacing code ensures backwardsedge control flow ie return valid select standard translation stack address shadow stack address case flipping one address bit mean translating two variety address simple lowcost refer translation shadow addr assembly call instruction save current value rip register stack program return location program called function complete modified assembly push content rip register location esp corresponding location shadow esp mean running program redundant copy stack information location otherwise read written also modify ret instruction pay attention value shadow stack ret instruction pop top value stack return location system first compare value shadow esp ensure two identical system raise fault impossible system attacker modify normal stack shadow stack modifying shadow stack much difficult noncontrolflow data stored shadow stack therefore much le feasible buffer overflow would occur would allow attacker overwrite memory shadow stack additionally real implementation might choose introduce new policy virtual memory page page marked shadow memory would allow call ret instruction modify information page prevent instruction reading writing shadow stack would prevent attacker ever modifying backwards edge control flow case simulator performs controlflow check simulated processor operating user mode linux image order evaluate kind rop defense observe realworld situation toy scaleddown modified linux kernel glibc gcc binutils produce landherecompatible code modified build toolchain void linux distribution crosscompile program architecture built minimal linux image installable package image provide preloaded xbps package manager provides access set precompiled landhereenabled binary package demonstration purpose instructed linux kernel handle landhererelated fault printing fault information resuming program allows easier debugging examination program fault stricter implementation might suspend kill offending process additionally modify compiler produce landherecompatible code also patch library use inline assembly notably libcrypto mean typical use provided linux image produce landhererelated fault arising use evaluating landhereenabled software important take account aside void linux void linux small streamlined distribution elegant easytouse package building system additionally demonstration implemented feature version linux current time made effort track future modification release linux meant needed use distribution supported barebones system le likely require modern kernel feature requirement led u base demonstration void linux void linux package building system xbpssrc convenient system crosscompilation straightforward add new target architecture corresponds modified mean package built using gcc support crosscompilation rebuilt architecture void xbpssrc tool acknowledgment research landhere made possible funding nsa
290,Lobsters,virtualization,Virtualization,System emulation using QEMU,https://gmplib.org/~tege/qemu.html,system emulation using qemu,system emulation using qemu faq current matrix install detail compressed iso image iso image iso image compressed iso image iso image iso image kernel initrd kernel initrd qemurecipes kernel initrd kernel initrd qemurecipes iso image claim older iso image iso image inofficial debian image iso image iso image inofficial debian iso image compressed iso image kernel initrd inofficial debian iso image kernel initrd kernel initrd kernel initrd kernel initrd firmware disk image kernel initrd iso kernel initrd inofficial debian iso image currentiso gentoo installation gentoos page diskimgxz sh script kernel copying linux kernel initrd,system emulation using qemu last updated please send feedback page see page footer contact information qemu project really cool goal support lot computer pc pc emulation work well nt suffer major incompatibility problem qemu release qemu release really simple get started create disk image dd ifdevzero ofdiskimg install hda diskimg cdrom yourfavouriteosinstalliso boot boot installed system hda diskimg instead emulate pc use see also note install suggestion result faster system basic example downside qemu lack documentation particular usage example also try random gnulinux bsd release nonpc random qemu release likely work easily try show one working variant base o hopefully example get started upgrade system forget first bring system make copy old disk image might hard go back made disk image unbootable habit copying disk image good one working emulation fact key feature environment qemu project relies code inspection perform limited regression testing experience regression uncommon qemu going use qemu something else fun need keep several build choose one work reliably particular system unfortunately reporting bug posting bug fix qemu project usually completely futile exercise never gotten bug report taken seriously result bug live year year gotten fix much haggling pointing variation initial correct fix broken end initial fix get applied credit taken qemu project member motive entire exercise software testing qemu allows test thing system access need ssh access exactly example installs provide faq q example really work tested tested exactly suggest case work q networking tap thing host set allow network bridging think simulated ethernet switch either configure ip address manually guest o installation dhcp server network work nt want configure host allow tap work check qemu documentation user networking perhaps hostfwd feature many people find easier get going q amount memory specified varies example nt much science behind tend give slightly memory guest guest q qemu version varies example good reason past version qemu regression affecting particular target therefore recommend qemu version made sure work mean try version recommendation start exactly setup go q disk network kernel specified varying way consistent believe variation mostly wellmotivated limitation emulated o andor qemu possible thing could made consistent tried minimize unmotivated variation note debian highly inconsistent kernel naming downloads boot content linux vmlinux vmlinuz without explicit version number versionnumber free symlinks without symlinks q qemu offer several disk format example raw format seem either understood explicitly enforced formatraw specifier reason actually use either lvm partition sparse plain file guest disk latter created dd seek operator imply minimal host cpu overhead want use setup work fine make sure remove adapt formatraw specifier q want emulate machine cpu c combination believe qemu support goal page allow testing various cpu architecture realise subarchitectures covered eg sparc millennium mips also machine type largely ignored nt currently plan try make much complete would hard maintain long run afraid wish luck machine emulation q something called qemu userlevel emulation skirting thing o installation nt give example instead intend fact shell script installs debian version get work main problem binfmt gnulinux feature poorly designed qemu pattern file come perhaps gnulinux dists pretty buggy current matrix alpha freebsd na hang na netbsd na na na openbsd hang na na gnulinux na gnuhurd yestbd na na na na na na na na na na install detail rudimentary qemu guest install instruction assume reader know install o real hardware probably want enable networking install boot process either use net tap like net user hostfwdtcp adequate port number tap mean beyond scope page qemu side described qemu man page rest quite system specific evil get right since advanced networking well designed system would recommend initially exactly like example since system fragile even seemingly innocent deviation might lead failure something work always go start several qemu guest time might get networking problem since default use mac address solution pas net nic macaddrxx xx xx xx xx xx suitable eg random value x different running qemu example us different mac address example index number correspond table freebsd download compressed iso image unpack xz commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap install commonargs cdrom boot boot commonargs netbsd download iso image commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap install commonargs cdrom boot boot commonargs debian download iso image commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap install commonargs cdrom boot boot commonargs freebsd download compressed iso image unpack xz commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap install commonargs cdrom boot boot commonargs netbsd download iso image commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap install commonargs cdrom boot boot commonargs debian download iso image commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap install commonargs cdrom boot boot commonargs debian last tested qemu download kernel initrd commonargs malta drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap nographic install qemusystemmips commonargs kernel initrd initrdgz append follow instruction section copying linux kernel initrd boot consoleless qemusystemmips commonargs kernel initrd append serial null monitor null note download link become obsolete new kernel released please proceed downloading updated kernel also remember update boot command used manual partitioning made single partition file system choose different partitioning scheme adjust root argument accordingly littleendian mips system using qemusystemmipsel alternative download kernel initrd instead file linked proceed analogously freebsd might work see qemurecipes page debian last tested qemu version work older known work download kernel initrd commonargs malta cpu drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap nographic install commonargs kernel initrd initrdgz append system indeed install command akin command debian installer put vmlinux initrdimg boot install using aptget however kernel initrd get used need copy host system boot using see section copying linux kernel initrd boot consoleless commonargs kernel initrd append serial null monitor null note download link become obsolete new kernel released please proceed downloading newer kernel directory remember update boot command used manual partitioning made single partition file system choose different partitioning scheme adjust root argument accordingly adding cpu selects different linux idle loop utilising wait instruction without qemu consume host cpu option also enables instruction latter undesirable use cpu instead littleendian mips system using alternative download kernel initrd instead file linked proceed analogously use install crash long hang sure ram might help possible give system mib ram trickery eg gib append pas mem argument first part sum argument freebsd might work see qemurecipes page netbsd last tested qemu older recent version work download iso image commonargs drive filediskimg formatraw net nic fa net tap nographic install qemusystemsparc commonargs cdrom boot boot qemusystemsparc commonargs note neither netbsd openbsd currently handle power saving feature see boot message powermanagement configured consequence qemu use host cpu claim apc driver linking apc manual page system trace openbsd work fine last release support install iso image grab older iso image proceed analogously netbsd install aware gnulinux dists support sparc debian support far stable qemu seems using virtio boot disk supported current openbios told work underway address netbsd last tested qemu least networking fails different way interface type supplant given macaddr hardwired collisionprone one interface type simply fail transport data download iso image commonargs drive filediskimg formatraw net nic fa net tap nographic install commonargs cdrom boot boot commonargs note debian also work version qemu debian dropped sparc version inofficial debian image tested anything later debian freebsd pas networking parameter tested qemu openbsd work fine except one need supply root device boot typically grab iso image proceed analogously presumably one make openbsd boot nicely passing promenv bootdevicepathtodevice tested system consume host cpu even guest idle debian jessie last tested qemu problem floatingpoint arithmetic might work download iso image note obsolete debian release jessie later debian release support might want try inofficial debian iso image commonargs drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap display install qemusystemppc commonargs cdrom boot perform default install using vncviewer note boot might hang input screen minimal contrast hit enter continue readable install dialogue follow instruction section copying linux kernel initrd boot qemusystemppc commonargs kernel initrd append note install expect error message failure install boot loader simply continue without boot loader may need modify root argument depending partition put one given used default layout guided partitioning freebsd last tested qemu work download compressed iso image unpack xz commonargs pseries cpu drive filediskimg ifscsi formatraw net nic fa net tap nographic vga none install commonargs cdrom boot boot commonargs serial null monitor null note unfortunately virtio disk unsupported simply recognised freebsd perhaps one could compile custom kernel load kernel module newer qemu version make freebsd complain lack huge page panic error message helpful possible use cpu qemu implement darn instruction correctly freebsd becomes mightly upset instruction return every time granted clear implement emulator instruction purport return true random number host hardware similarly purport provide similar instruction one could use suppose debian last tested qemu problem floatingpoint arithmetic might work download kernel initrd note obsolete debian release jessie later debian release lack bigendian support might want try inofficial debian iso image commonargs pseries cpu drive filediskimg ifvirtio formatraw net nic fa modelvirtio net tap display install commonargs kernel vmlinux initrd initrdgz perform normal install using vncviewer follow instruction section copying linux kernel initrd boot commonargs kernel bootvmlinux initrd bootinitrdgz append note usually create one partition using manual partitioning using guided partitioning proper set partition prep boot created latter case system boot without kernel initrd parameter ifvirtio need changed ifscsi littleendian system using alternative download kernel initrd instead file linked proceed analogously advantage allows u use debian latest release debian abi armhf last tested qemu download kernel initrd commonargs virt cpu drive filediskimg ifnone formatraw device virtioblkdevice netdev typetap device virtionetdevice fa nographic install qemusystemarm commonargs kernel vmlinuz initrd initrdgz append follow instruction section copying linux kernel initrd boot qemusystemarm commonargs kernel bootvmlinuz initrd bootinitrdimg append rw serial null monitor null used manual partitioning made single partition file system choose different partitioning scheme adjust root argument accordingly debian abi armel last tested qemu many version cause hang download kernel initrd commonargs versatilepb drive filediskimg formatraw net nic fa net tap display install using vncviewer network qemusystemarm commonargs kernel initrd initrdgz follow instruction section copying linux kernel initrd boot qemusystemarm commonargs kernel bootvmlinuz initrd bootinitrdimg append debian last tested qemu download kernel initrd commonargs virt cpu drive filediskimg ifnone formatraw device virtioblkdevice netdev typetap device virtionetdevice fa nographic install commonargs kernel linux initrd initrdgz append follow instruction section copying linux kernel initrd boot commonargs kernel bootvmlinuz initrd bootinitrdimg append rw serial null monitor null freebsd last tested qemu download firmware disk image unpack xz boot image directly virt cpu drive ifnone formatraw device virtioblkdevice netdev typetap device virtionetdevice fa bios qemuefifd serial telnet server monitor null nographic debian last tested qemu download kernel initrd commonargs drive filediskimg ifnone formatraw device virtioblkccw netdev typetap device virtionetccw fa nographic install commonargs kernel kerneldebian initrd initrddebian perform default install using terminal debian install somewhat unusual instructed installer installation finish follow instruction section copying linux kernel initrd boot commonargs kernel bootvmlinuz initrd bootinitrdimg append alpha debian obsolete release last tested qemu newer probably work download iso kernel initrd uncompress vmlinuz vmlinux commonargs drive filediskimg mediadisk formatraw net nic fa net tap nographic install qemusystemalpha commonargs kernel vmlinux initrd initrdgz drive ifide mediacdrom append follow instruction section copying linux kernel initrd boot qemusystemalpha commonargs kernel bootvmlinux initrd bootinitrdimg append note old kernel consumes host cpu even guest idle recent kernel one bundled gentoo wellbehaved next install alternative nt tried inofficial debian iso image might worth spin alpha gentoo last tested qemu download installalphaminimal iso currentiso suitable value grab latest choice qemu alpha firmware srm ready probably yet useful anything therefore need boot kernel directly tried hard make kernel use installation iso root image without gentoo initrd image gentooigz cdrom nt found kernel panic ensues therefore use trick copying iso content temporary disk image instdiskimg note command assume gnulinux host command loop mount syntax nonportable end result run os though recommend cutandpaste command follow progress command set e tempted use script issue interactive shell find logged long isoinstallalphaminimal iso subdir put result disk size gib set e nt paste command interactive shell mkdir targ cd targ mkdir iso isosub targ mount iso iso copy useful kernel iso zcat isobootgentoo kernel touch r isobootgentoo kernel prepare temporary install image instdiskimg mount isoimagesquashfs isosub truncate size instdiskimg instdiskimg mount instdiskimg targ cp isosub targ edit instdiskimg scramble root password sed inplace secho echo targetcinitdpwgen edit instdiskimg password file make initial root password empty sed inplace sroot root targetcpasswd sed inplace sroot root targetcshadow edit instdiskimg config allow root logins start ssh yet sed inplace permitrootlogin permitrootlogin yes targetcsshsshdconfig umount targ umount isosub umount iso create main disk image truncate size disksize g diskimg clean rmdir iso isosub targ finish disk preparation time boot system continue installation commonargs smp display serial null monitor null install qemusystemalpha commonargs kernel kernel drive filediskimg mediadisk formatraw net nic fa net tap drive fileinstdiskimg mediadisk formatraw append rootdevsdb perform almost plain gentoo installation using vnc warned difficult installation even gentoo since thing highly inconsistent command work suggested documented partition number name vary wrong dead wrong etc etc thing consider gentoo installation manual suggest using bsd disklabel nt work last time tried fdisk apparently create anything mbr label one may use label swap area andor multiple file system desirable plain old mbr fine insist using bsd label parted command seems le broken make sure set root password starting sshd note etcsshsshdconfig disables password authentication one either need change somehow copy suitable public key rootsshauthorizedkeys may choose compile kernel since take long time qemu please note precompiled kernel appear support file system stick choose compile kernel aware gentoo alpha installation manual even close kernel source would recommend start unzipping procconfiggz usrsrclinuxconfig make change enable kernel module file system rightarrow extended filesystem without change either need generate initrd stick plain old root partition enable virtio disk io networking see gentoo page enable kernel option configalphaqemu configalphawtint decrease tick frequency lower host load change system setup rightarrow timer interrupt frequency hz hz eg system setup rightarrow timer interrupt frequency hz hz nt install boot loader needed furthermore instruction installing inconsistent rest manual ie likely damage labouriously created disk boot qemusystemalpha commonargs kernel vmlinux drive filediskimg ifvirtio mediadisk formatraw net nic fa modelvirtio net tap append rootdevvda note root argument vda might need adjusted wherever put root file system also depending kernel config prefix might need hd sd instead vd adjust model argument appropriately unlike debian system system wellbehaved idle messing passwd shadow file ugly one would expect passing additional kernel argument dosshd passwdfoo work setting password foo ala success alternative download preinstalled mib image diskimgxz unpacks gib sparse file imgxz img image booted sh script also need kernel caution root password x security expert might consider tad short therefore highly recommend comment net line boot script make initial boot connect using vncviewer change root password something sensible halt system reinstate net line rebooting system access internet vnc port suggested precaution nt going much good vnc password would give level protection though copying linux kernel initrd boot loader installed many case one need supply kernel initial file via initrd case gnulinux needed file boot end installation several alternative way one may copy file host file system end installation debian presumably several derivative finishing installationinstallation complete step performed choose go back scroll menu execute shell shell mount proc proc targetproc mount rbind sys targetsys mount rbind dev targetdev chroot target bash etcinitdssh start host system ssh p argument host tar c f excludelostfound boot tar xf argument required port number host ip address name target host perhaps localhost port forwarding used note root logins might work unless edit etcsshsshdconfig allow root login return installation screen exit shell choose finishing installation let installation finish mount disk image readonly host usually work might hard host system grok disk label typically echo p echo q fdisk diskimg work see list device boot start end sector size id type linux linux extended linux swap solaris mount partition mount first partition gnulinux host work mount loop ro offset diskimg mnt boot life partition use instead mount loop ro offset diskimg mnt copy file mnt use qemunbd nt tried point kernel initrd argument file copiedout directory boot exact argument appear example please send correction additional instruction tg gmplib dot org
291,Lobsters,virtualization,Virtualization,Hello from the Other Side: SSH over Robust Cache Covert Channels in the Cloud,https://cmaurice.fr/pdf/ndss17_maurice.pdf,hello side ssh robust cache covert channel cloud,,obj length filter flatedecode stream xڥ h k w c ͷ f l p ήy w bub vΐi l c wٿh c endstream endobj obj length filter flatedecode stream xڥ vjm lh l q r lt ii mpe n v q u z տe vo z ۦ x h r endstream endobj obj length filter flatedecode stream e u ʒwt ylcr եa v u rj ȭ h r endstream endobj obj type pattern patterntype painttype tilingtype bbox xstep ystep resource length filter flatedecode stream endstream endobj obj length filter flatedecode stream ҵ n r q ɇ jj bqr p ep ư ڤ ň w ha o荠 h j ݬzx q x sfdlfx
292,Lobsters,virtualization,Virtualization,Sharp 80: TRS-80 Model III Emulator for Windows,http://www.sharp80.com/index.php,sharp model iii emulator window,sharp model iii emulator window relive glory computing sharp undocumented opcodes zexall disk tape library assembler disassembler snapshot project objective instruction command reference source code github,sharp model iii emulator window relive glory computing emulation sincerest form flattery charles caleb colton sharp cpu internal display turned sharp fullfeatured emulator model iii microcomputer free charge source code publically available includes complete self contained rom do built faithful cpu emulation including undocumented opcodes pass zexall opcode test run standard run modern pc bundled disk tape library includes application utility operating system game support four virtual floppy drive major virtual floppy format dmk tape drive emulation support high low speed reading writing ca format windowed fullscreen mode zoom authentic sound support builtin assembler disassembler realtime monitor cpu internals io device status printer file support save entire state computer snapshot support video mode including wide character kanji mode project objective run old program fun general interest document internal working groundbreaking machine understandable code provide example emulation technique others use instruction see full list feature command command reference page source code sharp free open source source code sharp available github
293,Lobsters,virtualization,Virtualization,Setting the Record Straight: containers vs. Zones vs. Jails vs. VMs,https://blog.jessfraz.com/post/containers-zones-jails-vms/,setting record straight container v zone v jail v vms,setting record straight container v zone v jail v vms design solaris zone bsd jail vms container different solaris zone design spec bsd jail handbook sharing namespaces talk dockercon eu sharing x socket running container desktop lego complexity bug wrote detail,setting record straight container v zone v jail v vms tuesday march tired conversation people figured would put blog post many people ask tried think solaris zone bsd jail answer simply tried definitely like conversation head towards telling zone jail far superior container basically give linux container use vms honest bit forward someone spent large portion career working container trying make container secure tell design solaris zone bsd jail vms container different solaris zone bsd jail vms first class concept clear solaris zone design spec bsd jail handbook hope go without saying vms much first class object without link somewhere p container hand real thing said many talk saying container term people use describe combination linux namespaces cgroups linux namespaces cgroups first class object container trying make distinction clear make point design different period let go thing container jail zone vms sharing namespaces since container made specific building block namespaces allows super neat thing like sharing namespaces many different namespaces give couple example specific example seen demo arnaud porterie talk dockercon eu application running one container different container sharing net namespace run wireshark inspect packet first container could also sharing pid namespace except instead running wireshark run strace debug application entirely different container sharing x socket assume blog familiar post running container desktop lego really drive home point going make analogy describing thing term lego vms jail zone bought lego already put together glued basically death star work get preassembled box even take apart container come piece box say build death star tied build two boat connected flipping ocean one going stop kind flexibility allows super awesome thing course come price complexity bug point person would conversation start yelling container secure hello thank aware also anyone give shit actually fixing container top level design something build linux primitive zone jail vms designed top level isolation cool thing expressed allow level flexibility control zone jail vms design extra complexity lead bug lead container escape get wrong could also escape vm jail zone design complicated primitive make container le le complexity le likely odd edge case bug point trying make jail zone vms container designed built different way container linux isolation primitive merely consume linux primitive allow interesting interaction perfect nothing make better reducing complexity building hardening feature around goal trying continue trying get sandbox level isolation container wrote detail requires work building death star piece seccomp apparmor selinux profile personally love zone jail vms think particular use case confusion container primarily lie assuming fulfill use case others container allow flexibility control possible jail zone vms feature rant
294,Lobsters,virtualization,Virtualization,KVM / Xen - KVM/QEMU Virtio Tuning and SSD VM Optimization Guide (2015),https://wiki.mikejung.biz/KVM_/_Xen,kvm xen kvmqemu virtio tuning ssd vm optimization guide,performance newer linux kernel http gitqemuorg pqemugit ahistory fhwblockdataplanevirtioblkc http http wwwyoutubecomwatch http http wwwlinuxkvmorgpagedocuments,libvirt qemu performance tweak kvm guest found ssd backed vms best configuration option use kvm guest cachedirectsync ionative xdataplaneon known iothreads combination qemu guest setting provide better random read write performance use writeback caching xdataplane iothreads directsync seems safest fastest cache option use kvm host ssd backed kvm guest normally want avoid enabling host guest page cache write data straight underlying ssd using native io seems way go thread seems slower term pure iop iop nt always important thing measure anyway generally like go native io host kernel support also get nice performance boost kvm host using newer linux kernel large performance gain use linux kernel later newer linux kernel utilize blkmq allows multiple software hardware queue per block device virtio block device driver tweak virtioblk iothreads xdataplane iothreads overview iothread object block device creates thread outside qemu global mutex previously block device use mutex thread everything else got ping reading data time going extra latency waiting lock iothreads solves lot problem significantly speed guest virtioblk io thread virtioblk device read write much want without wait queue everyone else like random ping bot spam small pause add lot thing going sparing storage slow process work wonder performance since disk io nt slowing rest guest everything else speed return better disk performance get better everything performance also pin specific iothreads specific cpu already pinned guest vcpu host cpu could choose give guest block device thread separate cpu guest vcpu also pin iothread guest vcpu host cpu addition vcpu pinning also change ratio thread per device could assign block device single thread could give device single thread libvirt support iothreads kvm guest ssd backed storage bottlenecked iothreads issue block io pas emulator thread everything else mean lot waiting around going really bum ssds really used full extent get around someone decided call option xdataplane least beginning called iothreads performed test without iothreads saw massive performance gain random read write workload case seen improvement seriously like iop performance gain simply enabling iothreads test year ago still called xdataplane would imagine performance increase new patch come people working kvm qemu hero book configure iothreads kvm guest check data plane enabled guest run command replace guest actual guest name virsh qemumonitorcommand hmp guest info qtree le alternatively check command p fauxxgrep qemu also use device virtioblkdevice help view current setting iothreads option able enable block device device virtioblkdevice help qemu default setting option look like iothreads previously called xdataplane virtioblkdeviceiothreadlink iothread virtioblkdevicexdataplanebool onoff configure virtioblk device guest drive use iothreads case xdataplane starting guest qemukvm option listed qemukvm drive ifnone cachedirectsync ionative formatraw file diskor parition device virtioblkpci scsioff xdataplaneon virtioblkdataplane feature enabled disabled xdataplaneonoff option qemu command line starting vm guest qemu drive ifnone cachenone aionative formatraw filefilename device virtioblkpci scsioff configwceoff xdataplaneon according slide using virtioblk xdataplaneon provides best possible io kvm appears actual fact ssd backed vms see anywhere time higher random io using xdataplane virtioblkdataplane new performance feature kvm enables highperformance code path io request coming vm guest specifically feature introduces dedicated thread one per virtual block device process io request going virtioblk driver make use linux aio asynchronous io interface support vm host server kernel need go qemu block layer therefore sustain high io rate storage setup awesome stuff iothreads workaround live migration possible disable iothreads migration reenable without disruption guest iothreads limitation include raw image hotplug support unable set io limit resize snapshot thread safe yet able add qemu command kvm guest xml file right domain line enable xdataplane block device also iothreads thing xdataplane qemu commandline qemu arg valueset qemu arg qemu commandline qemu commandline qemu arg valueset qemu arg qemu commandline qemu virtiodataplane le ready go qemu git history dataplane http gitqemuorg pqemugit ahistory fhwblockdataplanevirtioblkc source http virtioblk cache cache mode option kvm guest redhat tuning guide mention usually want use page cache enable write caching guest host caching twice good reason option called wce write cache enabled guest seen use qemu inspect running guest found independently toggle wce virtio driver cache setting later version kvmqemu seem automatically configure wce based cache option define guest testing done various possibility found cachedirectsync fastest option use host local ssd storage enable xdataplane iothreads cache type us host page cache guest disk wce writeback yes yes none yes writethrough yes directsync whatever mode set need make sure cache set setting instance set guest use write using raid card write cache enabled bbu disk power loss protected setting going much good since final two cache protected power loss virtioblk io mode suse doc explaining cache mode ibm best practice kvm performance cover directsync cover additional tweak setting different aio mode option thread native testing done native seems best option performance xml format driver nameqemu typeraw cachedirectsync ionative default qemu set value set thread want explicitly state xml use format driver nameqemu typeraw cachenone iothreads using xdataplane writeback cache may want set io native typically offer better performance using thread using xdataplane need use directsync cache mode driver nameqemu typeraw cachedirectsync ionative aio mode ibm doc using aio two main mode guest aio aiothreads user space thread pool default performs better filesystems aionative linux aio tends perform better block device requires odirect cachenonedirectsync using block device want use directsync native linux aio would configure guest use setting need make sure add correct setting right section config file otherwise qemu process start ignore invalid setting driver nameqemu typeraw cachedirectsync source dev devlvm vol aio native virsh command use virsh dump existing kvm guest configuration xml file using virsh dumpxml virsh dumpxml guest newguestconfigxml stop running kvm guest use virsh destroy stop guest wo nt actually destroy virsh destroy instance also use virsh list running kvm guest virsh list console directly kvm guest use virsh console command virsh console instance virsh emulatorpin view information emulator thread cpu pinned use virsh emulatorpin followed kvm guest id virsh emulatorpin guest also pin emulator thread certain cpu could useful dedicated core host serve emulator thread virsh emulatorpin guest hostcore hostcore virsh vcpuinfo view kvm guest vcpu information cpu affinity virsh vcpuinfo guest virsh vcpupin pin guest vcpu corresponding host cpu improve performance case example host cpu core guest utilizing command change guest using host cpu vcpu use one specific host cpu per guest vcpu bare metal instance significantly improves performance virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest virsh vcpupin guest also set guest xml file change persist vcpu placementstatic vcpu cputune vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpu cpuset vcpupin vcpupin cputune virtio device pci setting type device corresponding pci controller option change two main device virtioblkdevice virtioscsidevice device parameter enable disable also corresponding pci controller virtioblkpci virtioscsipci list device option device help list specific device setting device virtioblkdevice help name virtioblkdevice bus virtiobus virtioblkdeviceconfigwceonoff virtioblkdevicescsionoff virtioblkdevicexdataplaneonoff device virtioblkpci help name virtioblkpci bus pci alias virtioblk virtioblkpciioeventfdonoff virtioblkpcieventidxonoff device virtioscsidevice help name virtioscsidevice bus virtiobus device virtioscsipci help name virtioscsipci bus pci virtioscsipcieventidxonoff virtioscsipciioeventfdonoff virtioblk virtioblk paravirtualized io block driver configure device block device use special driver special driver property use device option identify drive option name virtioblkpci bus pci alias virtioblk virtioscsipci http wwwyoutubecomwatch virtioscsi designed next gen replacement current virtioblk driver provides direct access scsi command bypass qumu emulator talk directly target scsi device loaded host kernel virtioblk us ring buffer basically bunch slot ring shape guest us place io command read write etc etc host grab command buffer fast possible executes behalf guest operation completed host place complete back ring buffer guest grab complete assumes operation complete command like trim discard added virtioblk driver however qumu must updated guest driver must also updated include new command virtioblk device presented guest pci device problem relationship device pci device cause pci bus fill many device attached scaling difficult virtioscsi aim access many host storage device one guest device still use one pci slot making easier scale qemu user space target option block device make really flexible fastest vhostnet us kernel device well bypass qemu emulation improves performance well enable multiqueue add te guest xml file replace vcpu amount vcpus guest controller typescsi index modelvirtioscsi driver queue vcpu controller tell kvm guest actually using virtio driver run command inside guest output something like shown dmesg grep virtio virtiopci irq msimsix virtiopci irq msimsix virtiopci irq msimsix virtiopci irq msimsix virtiopci irq msimsix http kvm qemu troubleshooting check kvm module loaded kernel see kvm module loaded simply run lsmod grep kvm get output may need load kvm module using intel cpu also see kvmintel loaded kernel module along plain old kvm module lsmod grep kvm load kvm module run command still working odds nt kvm installed modprobe kvm restart libvirt centos sure libvirtd running centos rhel server run command find p faux grep libvirt nt see libvirt daemon running simply want restart use command running centos systemctl restart libvirtd link doc http wwwlinuxkvmorgpagedocuments link qemu git document explains iothreads dataplane live migration overview kvm guest kvm forum slide video slide available link slide linked cover current state virtioscsi dataplane vhostscsi virtioscsi qemu userspace previously performance limitied due qemu lock issue scaling io kernel scsimq helped however performance still limited scsirequestfn lot locking overhead virtioblkdataplane qemu userspace multithreaded aio odirect contect host userspace posix thread per device avoids qemu locking help improve performance virtioblkdataplane support live migration vhostscsi kvm kernel host able bypass second level aio odirect overhead using lio help performance change guest virtioscsi lld currently support live migration blkmq complete rewrite block subsystem meant better utilize fast ssd pcie nvm storage per cpu software queue mapped preallocated hardware queue help io scale numa also taken consideration queue smartly placed based numa layout scsimq us blkmq bypass scsirequestfn previously bottlneck io performance improves io time compared previous performance merged kernel nvme host interface specification meant standardize hardware host interface allow single o driver support type hardware currently lot backing large company like dell hgst intel lsi micron pmcsierra samsung sandisk seagate includes new nvme command set currently command writesame compareandwrite road extendcopy included kvm performance beyond io stack guest instance longer bottleneck performance blkmq scsimq fastest io stack around improved enough expose bottleneck elsewhere pv io stack nvme host interface ready scale performance beyond flash remain performant long time expect undetectable error io stack much faster nothing new something keep mind virtioblkdataplane still limited per device second level odirect overhead host virtioscsidataplane also limited per device second level odirect overhead host vhostscsi offer almost time better performance dataplane random iop yet support live migration though list performance listed highest lowest nvme passthrough vhostscsi virtioscsi virtioblk linux driver history linux kernel us traditional request based approach single lock protecting request queue cause huge performance bottleneck guest using fast storage ssds nvme linux kernel us bio based approach generates request host vmexit context switching improved performance still great linux kernel us block multiqueue single dispatch queue request based lock protecting queue request support io merging software queue single virtqueue mean single vq lock needed submit complete path linux kernel us block multiqueue multiple dispatch queue take advantage block multiqueue biz term performance linux block multiqueue created support high performance ssds remove coarse request queue lock two queue level per cpu software queue staging queue allows merging tagging hardware queue dispatch queue submits request hardware requires hardware support n mapping sofrware hardware queue linux allows single hardware queue improves performance fast device like ssds require qemu change still single virtqueue lock submit completetion io scale perfectly linux allows multiple hardware queue blkmq hardware queue get mapped virtqueue remove lot bottleneck inside vm require change qemu support new feature qemu optimization multi virtqueue conversion patch simple get really good performance however dataplane used qemu block layer io performance began drop investigation started see issue qemu io batch submission io batch submission handle request single system call iosubmit reduces amount call need made handling multiple io request reducing call improves performance linuxaio interface used queue multiple read write request time help improve efficiency method used dataplane beginning help improve performance random read write iop improved roughly using batch io qemu multi virtqueue support enabling multi virtqueues help vms using ssd based storage application need fast frequent io enabled using numqueues parameter work dataplane qemu qemu info command view help option replace qemudir proper path enviroment machine help device help cpu help view specific device driver option replace virtioblk whatever device want know device virtioblk help example output virtioblkpciioeventfdonoff virtioblkpcixdataplaneonoff virtioblkpciindirectdesconoff virtioblkpcieventidxonoff virtioblkpcidrivedrive virtioblkpcilogicalblocksizeblocksize virtioblkpciphysicalblocksizeblocksize virtioblkpciserialstring virtioblkpciconfigwceonoff virtioblkpciscsionoff virtioblkpciaddrpcidevfn virtioblkpciromfilestring virtioblkpcimultifunctiononoff virtioblkpcicommandserrenableonoff convert kvm guest xml file actual qemu command run following virsh command convert domxml native qemu argument virsh domxmltonative qemuargv guestxmlfilexml add extra qemu command line argument creating guest xml file add block end file right domain would add following device option qemu commandline qemu arg valuedevice qemu arg valuevirtioblkpci scsioff xdataplaneon qemu commandline terminology context switch kernel operation switch cpu operate different address space switching user kernel space example interrupt signal sent physical device kernel usually done servicing io request user program also known process run user mode request privileged operation kernel via system call io request etc etc happen execution contextswitch user kernel mode request operate higher privilege context switch take time cpu cycle cause amount overhead io request performance lower context switch made performance higher le made program optimized run kernel mode much possible help reduce overhead guest exit mean vm stop executing wait hypervisor handle request
295,Lobsters,virtualization,Virtualization,vmm(4)/vmd(8) support for seabios and linux guests,http://undeadly.org/cgi?action=article&sid=20170326043026,vmm vmd support seabios linux guest,rueda writes full message,contributed rueda penguin box dept mike larkin mlarkin writes tech committed last part working tree enable seabios alpine linux support using serial console enough people create image help find fix bug see mailing list archive full message
296,Lobsters,virtualization,Virtualization,"Virtual machine escape fetches $105,000 at Pwn2Own hacking contest",https://arstechnica.co.uk/security/2017/03/hack-that-escapes-vm-by-exploiting-edge-browser-fetches-105000-at-pwn2own/,virtual machine escape fetch hacking contest,friday morning tweet heap overflow bug reported friday morning twitter complete virtual machine escape winner prize year ago first year held,contestant year hacking competition vancouver pulled unusually impressive feat compromised microsoft heavily fortified edge browser way escape vmware workstation virtual machine run hack fetched prize highest awarded far past three day according friday morning tweet contest organizer member qihoo security team carried hack exploiting heap overflow bug edge type confusion flaw window kernel uninitialized buffer vulnerability vmware contest organizer reported friday morning twitter result complete virtual machine escape used javascript engine bug within microsoft edge achieve code execution inside edge sandbox used window kernel bug escape fully compromise guest machine qihoo executive director zheng zheng wrote email exploited hardware simulation bug within vmware escape guest operating system host one started controlled website virtual machine vital security individual large organization everywhere server hosting environment used container prevents one customer data operating system accessed customer sharing physical server virtual machine vmware workstation hacked friday also used desktop computer isolate untrusted content guest operating system compromised driveby browsing exploit similar attack hacker still nt get access data operating system resource host machine hack break widely used virtual machine generally considered significant one described friday made impressive work exploiting edge regarded among security professional one challenging browser exploit typically remotecode exploit require two vulnerability exploited unison requirement appears qihoo team combined heap overflow exploit window kernel hack description set scenario malicious website compromise visitor virtual machine also much valuable host machine vm run last year contestant nt attempt target vmware indication reliable exploit probably worth prize offered time friday success underscore central theme operating system application immune hack thoroughly compromise security virtual machine hypervisor another softwarebased isolation layer vulnerability permit attack break dino dai zovi cofounder cto provides realtime threat protection modern infrastructure told ar isolation layer sandbox virtualization containerization add work attacker none perfect defender always assume broken enough work attacker dai zovi winner prize year ago first year held exploit fully commandeered macbook pro vm escape came third final day hacking competition vancouver british columbia organized trend micro zero day initiative group contest attempt crudely replicate working realworld zeroday market paying cash prize hack completely hijack computer running fully patched version widely used operating system application year contest paid day one day two detail exploit fetched award contest organizer participant typically keep exploit detail confidential underlying vulnerability patched post updated add exploit detail provided qihoo
297,Lobsters,virtualization,Virtualization,Speed up file access in Docker for Mac,https://medium.com/@akrillo89/speed-up-file-access-in-docker-for-mac-fbeee65d0ee7,speed file access docker mac,docker benchmark window cent o mac o real github issue shared file system performance multidimensional dockersync rsync build custom image github twitter,docker released native macos runtime environment run container mac ease fixed many issue bitter truth missed something important read write access mounted volume terriblebenchmarkswe spin container write mounted volume executing following command start containermount current directorywrite random data file directorydocker run rm v pwd pwd w pwd alpine time dd ifdevzero ofspeedtest compare result window cent o mac o window record record outreal record record outreal record record outreal winner second writing reading quiet similar develop big dockerized application bad spot usually would work source code expect slowdown building bitter truth take agesthis github issue track current state lot hate better listen member instead reading frustration dsheetz docker mac team nailed issue perhaps important thing understand shared file system performance multidimensional mean depending workload may experience exceptional adequate poor performance osxfs file system server docker mac file system apis wide message type many intricate semantics involving ondisk state inmemory cache state concurrent access multiple process additionally osxfs integrates mapping o x fsevents api linux inotify api implemented inside file system complicating matter cache behavior particular highest level two dimension file system performance throughput readwrite io latency roundtrip time traditional file system modern ssd application generally expect throughput gb large sequential io operation osxfs achieve throughput around mb native speed bottleneck application perform acceptably hddslatency time take file system system call complete instance time thread issuing write container resuming number byte written classical blockbased file system latency typically microsecond osxfs latency presently around operation slower workload demand many sequential roundtrips result significant observable slow reduce latency need shorten data path linux system call o x back requires tuning component data path turn require significant engineering effort even achieve huge latency reduction still see doubling performance typical performance engineering requires significant effort analyze slowdown develop optimized componentsmany people created workarounds different approach use nfs docker docker unison way sync rsync tried solution non worked docker container contains big java monolith either install extra tool like vagrant reduce pain vagrant us nfs still slow compared native write read performance unreliable hard setup hard maintaini made step back thought root issue good approach dockersync ruby application lot option one mature option file synchronisation based upon rsyncrsyncrsync initial release year ago used transferring file across computer system one important use case synchronizationsounds right dockersync support rsync synchronization beginning worked day later got connection issue host containerdo know feeling want fix something feel far away realise understand happing behind scenesthe rsync approach sound right tackle root issue operating mounted file right damn slowi tried solution without real successbuild custom imageso let try get hand dirty start rsync server container connect using rsync approach work many year usecaseslet setup docker centos container installed configured rsync servicethe dockerfilefrom install rsyncrun yum update yrun yum install rsync xinetd configure rsyncadd rsyncdconf rootrun sed sdisable space space yesdisable nog etcxinetddrsync enable rsyncrun cp rootrsyncdconf etcrsyncdconfrun etcrcdinitdxinetd startrun chkconfig xinetd create dir syncedrun mkdir homeshare keep container runningcmd etcrcdinitdxinetd start tail f build container within repository directorydocker build start container map rsync server port specific host portdocker run p dockerrsyncnow need sync share directory sync change soon anything change rsync sync change initial sync initial syncrsync avp share delete rsync sync changefswatch share xargs n rsync avp share delete rsync utilizes rsync talk container soon something change use kind docker volume mounting hence file operation stay container fast whenever change something rsync transfer container using sure use rsync feature like delete rule exclude patternsif change something matter small project huge one see something file considersharehelloworldtxt xfer sent byte received byte bytessectotal size speedup second great fswatch us file system event mac o thus still fast event tweak example excluding build related directory like target nodemodulessources available githubfor small project bad performance critical issue huge application rsync hero good old tool still reliable importantespecially guy love mac o need use vm know pain issue like command key mapping annoying either map window key end use anymore mac o use cmdc copy something container use control sure also map host control command issue everything better work mac o instead virtual machine mac userhappy coding feel free kindly click green heart help spread better understanding docker macif unanswered agree feel free drop comment via twitter
298,Lobsters,virtualization,Virtualization,Deconstructing Xen,https://blog.acolyer.org/2017/03/16/deconstructing-xen/,deconstructing xen,deconstructing xen earlier week protection afforded nexen performance overhead,deconstructing xen shi et al nd unfortunately one widelyused hypervisors xen highly susceptible attack employ monolithic design single point failure comprises complex set growing functionality including vm management scheduling instruction emulation ipc event channel memory management xen run plenty large enough codebase harbour multiple security vulnerability needle say hypervisor compromised trouble best exposed denial service attack shutdown crash machine vms running worst every single vm compromised sgx looked earlier week protect application running enclave malicious hypervisor nothing protect attack hypervisor let face using sgx production workload right anyway author studied vulnerability published xen security advisory list directly related core hypervisor lead host denialofservice attack lead privilege escalation lead information leak use hypervisor attack guest vms security analysis demonstrates xen core fundamentally risk however unclear effectively mitigate threat nexen deconstruction xen multiple internal domain following principle least privilege enforcing separation domain easy since hypervisor operates highest hardware privilege level nexen us sameprivilege memory isolation technique look shortly prototype implementation nexen mitigates core hypervisor vulnerability small performance overhead order overall design nexen look like minimal fully privileged security monitor running directly hardware virtual machine supported fully sandboxed xen slice xen slice share code data error inside one slice considered dangerous whole system vms unfortunately simple decomposition functionality slice untenable subset functionality interact across slice boundary high frequency privilege boundary crossing cause high performance degradation create single slightly privileged shared service still privileged security monitor deciding place pervm slice shared service domain nontrivial one key contribution work xen slice communicate shared service domain module carefully controlled gate look nice modular design course key point domain boundary need enforced every single domain run highest privilege system ring root mode monitor need tamperproof without creating high overhead forcing large change xen code base secret pulling nested mmu virtualization nested mmu virtualization work monitoring modification virtualtophysical translation mapping explicitly removing mmu modifying instruction unprivileged component technique called code deprivileging mapping page marked readonly thus unexpected modification page table detected trap removal modifying instruction higher level domain enforced binary scan checking aligned unaligned privileged instruction attention detail restricting control core mmu monitor greatly reduces tcb trusted compute base memory management top monitor component scheduler domain management placed shared service function relating one vm live xen slice security monitor address space shared internal domain seen noone able tamper data shared service every xen slice address space overall memory access permission arranged like internal domain want execute privileged instruction requesting monitor perform instruction behalf recall privileged instruction allowed monitor allows monitor well monitor request prevent unauthorized malicious use call internal domain nexen provides secure call gate guarantee possible switch another internal domain without calling gate request forged call gate bound return address domain type argument switch control flow address space atomic gate keeper control exit vms hypervisor entry hypervisor vms switching xen slice explicitly forbidden since legitimate reason ever want monitor slicing service provide isolation code integrity foundation next challenge use mechanism deconstruct xen way maximize value leastprivilege minimizing crossdomain interaction three principle followed guide process avoid inserting dangerous functionality shared service avoid runtime communication guest able actively invoke shared service separate mechanism policy complex calculation decision making processed untrusted code final security sensitive operation must performed trusted code placement decision rationale key component exhaustive list scheduler fully inside shared service interface guest yield sleep wake vcpu event channel delivers event guest vms hypervisor hardware event channel bucket placed owning vm xen slice event sending proxied shared service memory management allocator used booting domain building life shared service xen slice allowed manage bound vm memory mapping update code emulation io emulation code run vm xen slice protection afforded nexen attacker escalate memory access privilege either directly writing protected memory region updating page table attempt gain access result page fault nexen kill attacker xen slice vm case attacker abuse privileged instruction removed pervm slice attacker must reuse security monitor sanity checking call prevents misuse malicious context forged causing jump instruction attacker stop lose execution control executing monitor sanity checking kick attacker trick monitor giving extra priviliges requesting operation attacker privilege rejected pretending another internal domain fooled unique id number mapped readonly region domain address space attacker fool xen nexen reuses lot xen code memory instruction invariant policy strictly enforced security monitor clear boundary attack nexen prevent attack key step happening xen slice mostly prevented xen slice sandbox sacrificed exception trying crash leak information guest vm iago attack try harm hypervisor vms sandboxing work gate keeper guard interaction hypervisor vms part attack take effect guest vm prevented however verifying data corrupted iago attack requires recomputing gate keeper incapable xen hypervisor vulnerability report nexen defend intel platform equivalent implementation created arm amd processor architecture would also defend vulnerability specific processor type total nexen prevents vulnerability illustrative sample reported vulnerability nexen stop click larger view current main achilles heel nexen shared service logic error component found exploited hypervisor may still compromised selection attack even nexen currently prevent http click larger view performance overhead cpu intensive application nexen almost overhead memory intensive task overhead le network io hypervisor critical path extremely low overhead average overhead file system io overall average overhead nexen nexen mainly add latency vmexits mmu update
299,Lobsters,virtualization,Virtualization,Getting started with ZFS on FreeBSD on Azure (2016),http://withblue.ink/2016/10/21/getting-started-with-zfs-on-freebsd-on-azure.html,getting started zfs freebsd azure,last june good reason anything losing data would incovenient create freebsd vm azure azure marketplace official documentation tip note host caching set none zfs concept terminology freebsd documentation vdev zpool dataset first zfs dataset note configuring datasets blog post caching slog note slog tip encryption azure key vault tip,last june freebsd officially supported azure available marketplace everyone simply launch freebsd writing vm click play o obviously miss chance test one appreciated feature freebsdthe zfs filesystem originally created sun microsystem solaris later opensourced lot great feature make perfect server particular designed protect data integrity builtin support snapshot replication compression deduplication much zfs lot supporter good reason used provide storage anything losing data would incovenient document repository transactional databasesfreebsd supported zfs since release implementation really mature making best free open source o use filesystem beside oracle solaris closedsource fork opensolaris openindiana community effort bring zfs linux see zfs linux project considered productionready macos openzfs o x toocreate freebsd vm azureto start launch freebsd vm directly azure marketplace configuration process essentially identical linux vm server connect using sshin order storage space zfs volume vm running attach data disk official documentation excellent job explaining add many disk want rule thumb vm support two data disk cpu core remembering using standard storage hddbased azure charged amount space actually consumed regardless much provisionedtip aiming performance make sure select vm plenty ram even deduplication disabled configuring dataset section zfs love memory leverage arc caching storing metadata freebsd documentation suggests automatic tuning algorithm work best system least gb ram default zfs use availabile memory minus gb caching merrier read caching option section belownote freebsd image azure marketplace come tested certified microsoft builtin support zfs using traditional ufs filesystem o disk moving root filesystem zfs possible yet easy looking leveraging zfs also o disk recommend instead creating vhd image locally fresh install freebsd uploading azure template article using zfs data disk onlyin example article using vm two data disk attached total vm four disk o disk freebsd installed touch temporary disk directly attached vm azure vms excluding aseries ssdbased great caching later first data disk maximum size gb tb second data disk maximum size gb tb attaching data disk azure vm use zfs important ensure host caching set none conflict zfs cachingzfs concept terminologyadministrators used creating raid array volume group filesystems linuxunix might find zfs little bit confusing first zfs task relevant concept terminology clearly explained freebsd documentation like particularly call three vdev virtual device made one disk partition file used virtual disk vdevs multiple disksvdevs combined data striped across way similar option enable mirroring similar striping parity called raidz us one three parity block conceptually similar nonexisting respectively please note vdevs immutable add disk existing vdeva zpool zfs pool made vdevs main building block zfs zpool name contains datasets volume see dataset filesystem zfs pool used read write datawhen working zfs treat data disk single vdevs combine zpool zpool name example tank automatically creates root dataset name add datasets pool hierarchically example tankshared child tank wich inherits property expand creating dataset named tanksharedphotos etcour first zfs datasetfor first configuration following simplest possible one two data disk configured striped array traditional raid terminology would note unlike required traditional environment azure need use mirroring striping parity applies zfs well indeed vm disk backed azure blob storage already replicated time offer enough protection disk failureopen terminal superuser root start zfs service enable starting zfs boot echo zfsenable yes etcrcconf start service service zfs start create first zfs pool zpool named tank two data disk zpool create tank mldr command complete almost instantly zpool tank created configured stripe across multiple disk check status zpool status zpool status pool tank state online scan none requested config name state read write cksum tank online online online error known data error creating zpool tank also get root dataset name automatically mounted boot tank need modify etcfstab check zfs list command zfs list name used avail refer mountpoint tank tank let create child dataset tank store shared file specifically two subdatasets document photo zfs create tankshared zfs create tankshareddocuments zfs create tanksharedphotos zfs list name used avail refer mountpoint tank tank tankshared tankshared tankshareddocuments tankshareddocuments tanksharedphotos tanksharedphotos tree tank tank shared document photo directory file see datasets document photo automatically mounted tankshareddocuments tanksharedphotos respectively used column represents much storage dataset using avail free space interestingly unlike traditional filesystems confined within partition zfs datasets fixed size default much flexibleconfiguring datasetszfs datasets highly configurable mentioned property inherited child datasets default child overwrite property set datasets time recommended set creation use switch zpool create command immediately writing data set property creating pool zpool create optionvalue dataset vdevs example zpool create tank setting option command syntax zfs set optionvalue dataset example zfs set tankshared multiple property combined zfs set atimeoff tankshared get full list configuration property man page zfs command man zfs going list interesting onescompression enables onthefly compression data written disk value use default algorithm explicit algorithm gzip compression one nicest feature zfs highly recommended every scenario unless data storing already highly compressed eg jpeg photo video etc although compression requires extra cpu processing reading writing data disk io usually bigger bottleneck cpu speed enabling compression improve readwrite throughput sensibly almost every situation term algorithm use gzip give best compression result generally preferred administrator light cpu best overall costbenefit ratioatime default enables recording disk access time file document impact performance atime often turned necessaryquota default none used limit size dataset example often used together quota quota set maximum size dataset prevent datasets zpool fill space available setting value reservation parameter zfs essentially taking space away zpool dataset use itlet set option datasets turn compression tankshared dataset disable atime recording performance set maximum size gb zfs set atimeoff tankshared tanksharedphotos dataset contains mostly jpeg file already heavily compressed need zfs spend time trying reduce thefile size even let overwrite inherited property zfs set compressionoff tanksharedphotos one last option deduplication one one interesting feature zfs used caution deduplication come high cost requires lot memory store deduplication table recommended gb ram every tb data stored deduplication help saving disk space data contains lot duplicated block example zfs used san vm hard disk something never happen azure scenario user much better relying compression example barely impact cpu enabling deduplication case want understand deduplication enable zfs suggest reading blog post oracle websitecachingwith zfs leverage two different kind disk cache improve io performance high level read cache addition level arc cache kept ram slog separate intent log speed synchronous write call case use fast ssdbased storage cache used store data read filesystem act second tier data cached ram arc great use case temporary ssd drive come azure vms disk directly attached host server offer smallest latency possible vms excluding aseries one based fast solidstate disk temporary disk content might lost time host server crash vm stopped azure portal resized since readonly matter data inside lost howeverenabling local ssd really easy start need make sure azure agent installed default freebsd image deployed azure marketplace mounting temporary disk automatically edit file etcwaagentconf set following parameter n resourcediskformatn next restart azure agent waagent unmount temporary disk mounted service waagent restart umount lastly add geom tank zpool zpool add tank cache check status zpool list v name size alloc free expandsz frag cap dedup health altroot tank online cache note shut vm azure portal resize unlikely event host server crash content temporary disk lost forever situation vm go back online zpool still reference offline disk thus cache disabled however system continue function normally administrator remove old cache disk command similar zpool remove tank id disk repeat command enable remember also always possible use premium storage disk recommended get iop want persistent volumesslogthe purpose slog make synchronous write call faster first caching highperformance ssd drive committing data final storage slog essentially separate storage zil zfs intent log otherwise kept disk dataunlike slog must put temporary local disk system crash might cause loss data persistent ssdbased storage premium storage used instead guarantee data integrityyou use one disk slog zfs stripe across although one disk enough example adding two disk azure vm use slog double iop attaching disk using azure portal make sure select premium storage ssd disk disable host cachingwhen disk attached attach log device tank zpool zpool add tank log result checked usual way zpool list v name size alloc free expandsz frag cap dedup health altroot tank online log cache tip azure necessary mirror content slog data already replicated three time azure storage backendencryptionone nicest feature zfs oracle solaris support builtin encryption sadly however added oracle closed source zfs openzfs implementation freebsd us support encryption box lot interest around feature community hard work implementing however far easy task encryption likely appear soon time zfs user freebsd linux macos etc need encrypt underlying disk create zfs filesystem topin example using azure vm two data disk turning encryption need generate new key example using keyfile stored o disk unencrypted production environment might acceptable may want leverage service azure key vault store key instead execute following command generate new key save make backup copy openssl rand chmod tip virtual machine support aesni extension leverage hardwareaccelerated encryption loading proper kernel module azure vms running intel cpu support aesni aseries vms may sometimes run amd chip hardware acceleration encryption using aseries vms check cpu model manufacturer made intel stop sysctl hwmodel example hwmodel intel r xeon r cpu cpu support aesni instruction kldload aesni echo aesniload yes bootloaderconf ready encrypt disk load geli kernel module kldload geomeli echo geomeliload yes bootloaderconf initialize encrypted geli disk using key aesxts use key without passphrase encrypt geli init l e aesxts k p geli init l e aesxts k p geli initialized ensure backup copy file attach provider ie disk using keyfile create devda eli geli attach k p geli attach k p write data encrypted device necessary zpool creation fail dd ifdevrandom dd ifdevrandom ensure partition decrypted automatically boot adding following line etcrcconf gelidevices k p k p finally create zpool named tank new encrypted volume enable zfs start boot echo zfsenable yes etcrcconf service zfs start create zpool encrypted disk zpool create tank check result zpool list v name size alloc free expandsz frag cap dedup health altroot tank online zpool ready accept new zfs datasets like example previous section
300,Lobsters,virtualization,Virtualization,FreeNAS Corral GA- State of the Union #5,https://youtu.be/x4IBKUmC5ns?t=4m48s,freenas corral ga state union,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
301,Lobsters,virtualization,Virtualization,OpenBSD vmm/vmd Update,https://www.openbsd.org/papers/asiabsdcon2017-vmm-slides.pdf,openbsd vmmvmd update,,äüöß obj stream endstream endobj obj endobj obj stream jfif c c x rbrdi ke h h h idi z ea p r l tw q cb l դ q v ԑ p p h p n tz l f 𭿓u kk e ңf
302,Lobsters,virtualization,Virtualization,Two frequently used system calls are ~77% slower on AWS EC2,https://blog.packagecloud.io/eng/2017/03/08/system-calls-are-much-slower-on-ec2/,two frequently used system call slower aws,tl dr virtual shared library confirming affected issue vdso man page appear output prerequisite information linux system call vdso definitive guide linux system call older post linux timekeeping documentationvirtualkvmtimekeepingtxt interesting paper kvm pvclock vdso fallback mechanism function xen time profiling performance difference regular system call v vdso system call safe switch clocksource unlikely possible lead unexpected backwards clock drift production system experiment setup timewarptestc call syscall directly result patch xen progress patch work conclusion add vdso support xen related post,tl drthis blog post dive interesting finding two frequently used system call gettimeofday clockgettime much slower aws provides mechanism speeding two frequently used system call implementing system call code userland avoiding switch kernel entirely done via virtual shared library provided kernel mapped address space every running programthe two system call listed use vdso normally would system virtualized clock source xen kvm configuration support reading time userland via vdsothere safe workaround user may decide change clock source tsc writing file sysfs considered dangerous continue reading learn result microbenchmark setup npm registry freeconfirming affected issueto quickly confirm system affected issue compile run following program strace include stdioh include stdlibh include systimeh int main int argc char argv struct timeval tv int gettimeofday tv null return compile gcc test testc trace strace ce gettimeofday test strace ce gettimeofday test time second usecscall call error syscall gettimeofday total see strace counted call gettimeofday mean vdso used real system call made causing context switch kernel linux vdso designed gettimeofday mind fact even mentioned vdso man page system call passed vdso executed completely userland causing context switch kernel result system call successfully us vdso appear strace outputcontinue reading learn exactly see interesting profiling dataprerequisite informationthere important thing reader need familiar order follow explanation code snippet follow illustrating issuelinux system call vdsobefore proceeding post strongly recommended reader carefully read previous post detailing system call work linux definitive guide linux system callsas described detail blog post vdso essentially shared library provided kernel mapped every process address space gettimeofday clockgettime getcpu time system call made glibc attempt call code provided vdso code access needed data without entering kernel saving process overhead making real system callbecause system call made via vdso enter kernel strace notified vdso system call made result program call gettimeofday successfully via vdso show gettimeofday strace output would need use ltrace instead learn strace work reading older post ourson aws gettimeofday appears strace output vdso fall back regular system call certain situationslinux timekeepingthere many different apparatus used timekeeping system running linux kernel system benefit drawback detailed information method conveniently presented kernel source documentationvirtualkvmtimekeepingtxtit important understand virtualization introduces many complexity come timekeeping example include virtual machine running host share source time impossible every vm time updated exactly instant moreover vm may interrupt disabled executing critical section kernel hypervisor may happily generating timer interruptscertain timekeeping system like time stamp counter virtualized read tsc register may impose performance penalty yielding inaccurate reading backwards time driftmigration vms hypervisors different cpu may problematic timekeeping system relies clock rate processorthe folk vmware published interesting paper describing timekeeping issue information presented specific vmware generally applicable virtualization systemin order deal issue kvm xen provide timekeeping system kvm pvclock xen time implementation linux kernel commonly referred clocksourcethe system current clocksource found checking file clocksource consulted system call like gettimeofday clockgettime executedvdso fallback mechanismlet take look vdso code implementing gettimeofday clarity remember code packaged kernel actually run completely userlandif examine code check vdso implementation gettimeofday vdsogettimeofday clockgettime vdsoclockgettime find piece code similar conditional near end function ret vclocknone return vdsofallbackgtod clock t code vdsoclockgettime check call vdsofallbackgettime instead ret set vclocknone indicates system current clocksource support vdso case vdsofallbackgtod function failsafe function called simply executes system call normally entering kernel incurring normal overheadbut case ret get set vclocknone follow code backward point find ret set vclockmode field current clocksource clocksources vclockmode field set identifier vclocknoneon hand clocksources xen time implementation andsystems either configparavirtclock enabled kernel configuration cpu provide paravirtualized clock featureall vclockmode field set vclocknone aws us xen xen default clocksource xen vclockmode field set vclocknone mean instance always fall back using slower system call path vdso never usedbut effect performance profiling performance difference regular system call v vdso system callsthe purpose following experiment measure difference wall clock time microbenchmark test difference execution speed fast vdsoenabled gettimeofday system call regular slow gettimeofday callsin order test run sample program three different loop count instance clocksource set xen clocksource set tscit safe switch clocksource tsc unlikely possible lead unexpected backwards clock drift production systemsexperiment setupall test run amazon linux ami hvm ssd volume type ami instance size availability zonewe time execution program using time program reader may wonder use time program potentially destabilizing clocksource luckily kernel developer ingo molnar wrote program detecting time warp timewarptestc note need modify program slightly systemswe ran helpful program performing experiment help detect time warp experienced nonethere thing one wishing get scientific result could increase confidence result desired backward clock drift unlikely possible running expirement many time gathering outcome running probabilistic analysis help mute bad data pointsthe experiment rerun nonvirtualized system would suffer clock drift experiment performed first running test program provided test vdso program modified call syscall directlyfor purpose running time warp test detect time warp performing experiment sufficientresultsthe result microbenchmark show regular system call method used slower vdso method tight loop million call gettimeofday vdso enabled real slow system call real tight loop million call gettimeofday vdso enabled real system call real tight loop million call gettimeofday vdso enabled real system call real xen progressthe proper fix issue would add vdso support xen clocksource luckily patch work aim thatuntil change one like merged kernel deployed gettimeofday clockgettime system call execute slower otherwise could run expected vdso system call path measurably faster normal system call path vdso system call path prevents context switch kernel remember vdso system call appear strace output successfully pas vdso unabled use vdso reason fall back regular system call appear strace outputthere patch work add vdso support xen telling available aws change like deployed gettimeofday clockgettime perform approximately slower normally wouldusing strace application incurs overhead use provides invaluable insight exactly application programmer deploying software production environment regularly strace application development mode question output findrelated postsif enjoyed post may enjoy lowlevel technical post
304,Lobsters,virtualization,Virtualization,Security aspects of virtualization,https://www.enisa.europa.eu/publications/security-aspects-of-virtualization,security aspect virtualization,security aspect virtualization,security aspect virtualization report provides analysis status virtualization security enisa present current effort emerging best practice known security gap discussing impact latter environment based virtualization technology report provides better understanding opportunity challenge limit virtualized system improve effectiveness future policy regulation published february language english
305,Lobsters,virtualization,Virtualization,Announcing MirageOS 3.0.0,https://mirage.io/blog/announcing-mirage-30-release,announcing mirageos,mindy preston full release note available github revamped guide getting started small collection example unikernels porting guide updating mirage unikernels mirage earlier blog post announcing unikernel monitor extending minimalism outside box readable repository readme run unikernels freebsd via bhyve playing nicely opam functoriapackage function prng deviceusage example mirageskeleton amazing doc mirageos central documentation repository issue upstream resulty error result module included ocaml mirageflow module type rresult library indepth explanation error log want excellent writeup hannesnqsbio disaggregated module type definition miragefs mirageblock mirage documentation hub clockier clock timelier time speaking clock example converting existing code duration build system shift ocaml lab scale package management le code better behavior ocamlfat mirage repository change mirageclock change ocamlvchan change charruacore change arp change logssyslog change miragevnetif change functoria change mirageblock change mirageblockramdisk change change mirageblockunix change mirageblockxen change change miragebootvarxen change miragechannel change mirageconsole change change mirageentropy change mirageflow change miragefs change miragefsunix change mirage change miragehttp change miragelogs change miragenetmacosx change change miragenetunix change miragenetxen change mirageplatform change change miragetcpip change ocamlconduit change ocamlcrunch change ocamldns change ocamlfat change ocamlfreestanding change ocamlqcow change ocamlnocrypto change ocamltls change mirageosshim change ocbstubblr change change miragequbes change charruaclient,mindy prestonwe excited announce mirageos mirageos modern modular library operating system allows creation small secure legacyfree service mirageos application compiled run selfcontained virtual machine mb size xen kvm host freebsd bhyve even regular unix process allowing access regular debugging tool system library reused traditional application like software library full release note available github interested getting started mirageos right away might interested revamped guide getting started small collection example unikernels porting guide updating mirage unikernels mirage summary thing mirageos excited mirageos first release integrates target virtio ukvm fully mirage frontend tool mirage configure ukvm build unikernel run directly generated ukvmbin updated hello world tutorial reflect excitement ukvm ukvm target considerably easier interface configure xen lot user clearer path toward operational deployment unikernels lot information target see earlier blog post announcing unikernel monitor extending minimalism outside box readable repository readme also read run unikernels freebsd via bhyve playing nicely opam mirageos much richer interface dealing package manager external library dependency user specify version range version package dependency mirage frontend tool construct custom opam file including package dependency one automatically generated mirage configure mirage also consider version constraint package opam notice release mirage incompatible unikernel information dealing package dependency documentation functoriapackage function likely use prng deviceusage example mirageskeleton demonstrates useful invocation package amazing doc thanks lot hard work fully interlinked set module documentation automatically generated odig available reading pleasure mirageos central documentation repository documentation previously available module scattershot often required several disconnected page open simultaneously hope find new organization convenient documentation generation system still beta please report issue upstream run across rendering issue feedback resulty error module type provided mirageos replace previous error paradigm combination exception directly returning polymorphic variant one us result module included ocaml notable exception problem occur unikernel initialization ie connect function unikernels fail hard soon goal change surface error application care present uninitialized unstable state application start time mirageos module type define core set likely error module type see mirageflow module type example extended given implementation module type specify implementation must include prettyprinter handle emitted error type function return success type run expected return success error resultt caller print pperror value error background result type see rresult library defines useful operation resultt used widely mirageos library indepth explanation error mirage also available log want mirageos version included automatic support logging via log miragelogs library default log always printed console changing log reporter cumbersome mirageos send log consumer syslog message syslogudp syslogtcp full authentication encryption provided ocamltls using syslogtls information see excellent writeup hannesnqsbio disaggregated module type definition breaking mirageos apis showed u keeping place made update really difficult additional set package contain definition set module type eg miragefs f module type mirageblock block module type etc module type additional useful code nicely functorized module type question bundled code module type package well documentation module type package available mirage documentation hub hope change combined opam workflow change result much le painful api change future possible unikernel author target specific version readily clockier clock timelier time older mirageos version noticed often deduce span time taken two wallclock sample current time mirageos choice two type clock mclock provides monotonically increasing clock reflecting time elapsed since clock started pclock provides traditional posix wallclock time previous user clock able migrate morehonest lesscomplicated mclock example clock see speaking clock may also interested example converting existing code clock mclock mclock provides nice interface dealing time nanosecond granularity time module type updated expect number nanosecond rather float argument function sleep u nt think nanosecond duration library provides convenient function translating familiar unit like second build system shift mirage many many package turned ocaml lab help u scale package management many mirageos package replaced oasis topkg transitory ocaml software packager topkg lighter layer underlying ocamlbuild using topkg allowed u remove several thousand line autogenerated code across mirageos package universe let release manager automate significant amount mirageos release process hope continue benefitting ease using topkg topkgcare package using topkg yet see one nt feel free submit pull request le code better behavior mirageos fit one blog post without eye glazing release note mirage version nice summary might also interested full accounting change every package released part mirageos effort link library available end post across package universe net several thousand line code removed part mirageos many autogenerated buildtime support file removed transition oasis topkg others small support module like result previously replicated many place replaced reference common implementation large implementation like dhcp client code miragetcpip replaced smaller better implementation common library like charruacore example ocamlfat addition deletion net line code version jettisoned custom inmemory block device favor using inmemory block device provided mirageblocklwtmem removed several thousand line autogenerated oasis code removed several custom errorcase polymorphic variant lost custom result module mirage repository netted line code adding feature number improvement made mirage limit number unnecessary build artifact reduce amount unnecessary code linked unikernels module unlikely use like str longer included ocaml runtime mirageos also first drop support ocaml meaning supported compiler support flambda compiler extension number related optimization opportunity many people involved making mirageos package universe smaller better like thank particular alphabetical order following people contributed code suggestion bug report comment mailing list question answer miscellaneous help aaron corneliusamir chaudhryandrew stuartanil madhavapeddyashish agarwalbalraj singhcedric cellierchristiano haesbaertdaniel bünzlidan williamsdave scottdavid kaloperdavid sheetsenguerrand decorneeugene bagdasaryanfederico gimenezgabriel de perthuisgabriel jaldongabriel radannegemma gordonhannes mehnertian campbelljochen bartljohn p mcdermottjon ludlamkialeo whiteleonid rozenbergliang wangmadhuri yechurimagnus skjegstadmartin lucinamatt graymindy prestonnick betteridgenicolas ojeda barnik sultanapablo polvorinpetter urkedalqi liramana venkataricardo kollerrichard mortierrudi grinbergsean grovetakayuki imadathomas gazagnairethomas leonardvincent bernardoffvittorio cozzolinogithub user waldyriouswassim haddadjeremy yallop please let u know notice someone including missing add apologize happy remove change listed name prefer well name taken metadata commit message email header summary change repository released code mirageos please see following list change mirageclock file changed insertion deletion change ocamlvchan file changed insertion deletion change charruacore file changed insertion deletion change arp file changed insertion deletion change logssyslog file changed insertion deletion change miragevnetif file changed insertion deletion change functoria file changed insertion deletion change mirageblock file changed insertion deletion change mirageblockramdisk file changed insertion deletion change file changed insertion deletion change mirageblockunix file changed insertion deletion change mirageblockxen file changed insertion deletion change file changed insertion deletion change miragebootvarxen file changed insertion deletion change miragechannel file changed insertion deletion change mirageconsole file changed insertion deletion change file changed insertion deletion miragedevice new mirageos file changed insertion change mirageentropy file changed insertion deletion change mirageflow file changed insertion deletion change miragefs file changed insertion deletion change miragefsunix file changed insertion deletion change mirage file changed insertion deletion change miragehttp file changed insertion deletion miragekv new mirageos file changed insertion change miragelogs file changed insertion deletion miragenet new mirageos file changed insertion change miragenetmacosx file changed insertion deletion change file changed insertion deletion change miragenetunix file changed insertion deletion change miragenetxen file changed insertion deletion change mirageplatform file changed insertion deletion mirageprotocols new mirageos file changed insertion miragerandom new mirageos file changed insertion change file changed insertion deletion miragestack new mirageos file changed insertion change miragetcpip file changed insertion deletion miragetime new mirageos file changed insertion change ocamlconduit file changed insertion deletion change ocamlcrunch file changed insertion deletion change ocamldns file changed insertion deletion change ocamlfat file changed insertion deletion change ocamlfreestanding file changed insertion deletion change ocamlqcow file changed insertion deletion change ocamlnocrypto file changed insertion deletion change ocamltls file changed insertion deletion change mirageosshim file changed insertion deletion change ocbstubblr file changed insertion deletion change file changed insertion deletion change miragequbes file changed insertion deletion change charruaclient file changed insertion deletion
306,Lobsters,virtualization,Virtualization,Virtual GPU support landing upstream,https://www.kraxel.org/blog/2017/01/virtual-gpu-support-landing-upstream/,virtual gpu support landing upstream,,upstreaming process virtual gpu support vgpu made big step forward merge window two important piece merged first mediated device framework mdev basically allows kernel driver present virtual pci device using vfio framework interface nvidia intel use mdev partition physical gpu host multiple virtual device assigned virtual machine second intel landed initial mdev support driver quite work left future kernel release though accessing guest display supported yet must run simliar tool guest see screen also stability issue find fix want play nevertheless prepared crash better nt try production machine host create virtual device host machine obviously need kernel also intel graphic device igd must broadwell newer kernel configuration enable vfio mdev configvfio option enable intel vgpu support building mtty sample driver configsamplevfiomdevmtty virtual serial port useful testing boot new kernel load module vfiopci vfiomdev optionally mtty also kvmgt course probably happened boot already go sysclassmdevbus directory look like kraxel broadwell cd sysclassmdevbus kraxel broadwell classmdevbus l l total lrwxrwxrwx root root jan lrwxrwxrwx root root jan mtty devicesvirtualmttymtty driver mdev support directory go devicemdevsupportedtypes check kind virtual device create kraxel broadwell classmdevbus cd kraxel broadwell l l total drwxrxrx root root jan drwxrxrx root root jan drwxrxrx root root jan see intel support three different configuration machine configuration basically amount video memory differs number instance create check description availableinstance file directory kraxel broadwell cd kraxel broadwell cat description lowgmsize highgmsize fence kraxel broadwell cat availableinstance possible create virtual device writing uuid create file kraxel broadwell uuid uuidgen kraxel broadwell echo uuid kraxel broadwell sudo sh c echo uuid create new vgpu device show subdirectory host gpu kraxel broadwell cd uuid kraxel broadwell l l total lrwxrwxrwx root root jan driver busmdevdriversvfiomdev lrwxrwxrwx root root jan iommugroup lrwxrwxrwx root root jan mdevtype drwxrxrx root root jan power w root root jan remove lrwxrwxrwx root root jan subsystem busmdev rwr r root root jan uevent see device landed iommu group need moment host configure guest ideally would simple adding guest libvirt xml config mdev device nt pci address host though must passed qemu using sysfs device path instead pci address libvirt nt yet support sysfs path though bit complicated alot setup libvirt hostdevs automatically must done manually instead first must allow qemu access dev default libvirt us control group restrict access must turned edit etclibvirtqemuconf uncomment cgroupcontrollers line remove device quot list restart libvirtd second must allow qemu access iommu group case simple chmod kraxel broadwell chmod third must update guest configuration domain typekvm xmlns qemuhttp currentmemory unitkib currentmemory memorybacking locked memorybacking qemu commandline qemu arg valuedevice qemu arg valuevfiopci qemu commandline domain special qemu namespace used pas extra command line argument qemu use qemu feature yet supported libvirt use sysfs path vfiopci also must explicitly allow lock guest memory ready go kraxel broadwell virsh start console guest guest good idea prepare guest bit adding vgpu guest configuration setup serial console talk even case graphic broken blacklist module load manually least knownworking configuration also booting runlevel aka multiusertarget instead aka graphicaltarget starting xorg server manually better guest machine intel recommends kernel theory newer kernel work practice nt last time tested also make sure xorg server us modesetting driver intel driver nt work testing config file root guest cat section device identifier driver intel driver modesetting busid endsection starting xorg server xterm mwm motif window manager using little script binsh debug echo display display start server test display echo starting xorg server exec startx usrbinxorg exit fi echo starting session configure session xrdb homexdefaults start client rfbport amp xterm amp exec mwm session run display able connect host way kraxel broadwell vncviewer fun
307,Lobsters,virtualization,Virtualization,$5 Showdown: Linode vs. DigitalOcean vs. Amazon Lightsail vs. Vultr,https://joshtronic.com/2017/02/14/five-dollar-showdown-linode-vs-digitalocean-vs-lightsaild-vs-vultr/,showdown linode v digitalocean v amazon lightsail v vultr,updated march since vultr updated offering data table updated applicable section update near end section usually wait run fresh benchmark provider comment section blowing vultr update vps hosting showdown linode need plan linode offering per month instance overview march update cpu info march update cpu benchmark march update memory benchmark memory read memory writes march update file io benchmark march update mysql benchmark march update apache benchmark march update network benchmark march update conclusion ubuntu march update digitalocean linode upcloud vultr,updated march since vultr updated offering data table updated applicable section update near end section usually wait run fresh benchmark provider comment section blowing vultr update every time post vps hosting showdown flooded comment people want focus solely price regardless benchmark result always say thing linode need plan somebody mention always say thing given enough time probably offer plan said thing people barking linode even plan linode offering per month instance also added high memory instance added ssd storage per month plan expect showdown soon overview linode digitalocean lightsail vultr memory processor core core core core storage ssd ssd ssd ssd transfer overage network network price right gate linode offering twice much ram digitalocean amazon lightsail vultr even though vultr offering bit ram offer le storage server built running ubuntu lts exception lightsail virginia rest instance new york new jersey area even though company price except linode hourly slightly highter offer special amazon offer first month free without promo code everybody else offer credit enough cover least month case linode digitalocean since bonus code expired vultr also back month quick note running benchmark vultr borked software update unsure cause received error get lock seen error running apt never brand new server person logged march update vultr bumped plan ram storage comparable ram offering linode slightly storage competitor cpu info exactly underneath hood abridged data proccpuinfo model name cpu mhz cache size bogomips linode intel r xeon r cpu digitalocean intel r xeon r cpu lightsail intel r xeon r cpu vultr virtual cpu versed hardware look like linode digitalocean lightsail comparable cpu linode fastest bunch even appears older cpu vultr speed came second march update vultr originally reported intel xeon ivy bridge clocking box spun run updated benchmark cpu reported virtual cpu cpu benchmark linode digitalocean lightsail vultr number event total time event execution minimum request average request maximum request percentile part everybody performed percentile linode max request nearly high guy march update vultr clocked notable difference maximum request jumped memory benchmark memory read sysbench testmemory run linode digitalocean lightsail vultr number event total time execution time minimum request average request maximum request percentile operationssec mbsec memory writes sysbench testmemory memoryoperwrite run linode digitalocean lightsail vultr number event total time execution time minimum request average request maximum request percentile operationssec mbsec somewhat expected provider offering ram ended faster speed ram important get bang buck linode vultr price point march update vultr remained spot slipped bit since previous set benchmark file io benchmark sysbench testfileio prepare sysbench testfileio filetestmoderndrw run sysbench testfileio cleanup linode digitalocean lightsail vultr number event total time execution time minimum request average request maximum request percentile requestssec mbsec quite mixed bag file io benchmark digitalocean performed decent percentage linode request per second vultr lightsail march update vultr saw slight improvement enough change outcome benchmark mysql benchmark mysql uroot e create database sbtest sysbench testoltp mysqluserroot prepare sysbench testoltp mysqluserroot run sysbench testoltp mysqluserroot cleanup linode digitalocean lightsail vultr number event total time execution time minimum request average request maximum request percentile readwrite requestssec linode best performance percentile readswrite request per second maximum request time nearly second vultr second readwrites also significantly better maximum request time march update vultr saw another bit improvement enough move needle since last time apache benchmark ab kc n http linode digitalocean lightsail vultr concurrency level time taken completed request failed request requestssec time per request transfer rate kbytesec somebody mentioned apache benchmark nginx may future enough interest nginx webserver choice using apache apache benchmark utility make sense sake review march update slight improvement vultr really network benchmark mentioned chose datacenters new york new jersey linode digitalocean vultr lightsail instance life virginia speedtestcli linode digitalocean lightsail vultr distance ping download mbitsec upload mbitsec like include metric always feel like crap shoot varying location server never apple apple comparison digitalocean upload time squeaked lightsail vultr linode able blow past everybody term download speed march update decent bump download speed vultr benchmark distance server ended le though weird spun vultr instance int new york nj data center last time used speed test server houston conclusion linode new plan offering consistently better performance seen past dollar dollar comparison also single digit price point people craving linode still bit behind curve come thing like block storage volume default ssh key yeah ui patience virtue given enough time linode always seems deliver deliver tends blow everybody offering water said digitalocean also big announcement today offering load balancer per month linode offered version called node balancer price point vultr lightsail current offer could also spin instance serve selfmanaged load balancer linode announcement today something expected birthday later year tend make announcement wait see store june like review ymmv need pick provider fit need end making decision based review much appreciate used referral link linode linode digitalocean digitalocean andor vultr vultrspecial amazon referral could always donate ubuntu linux distro use review oh yeah happy valentine day march update vultr latest offering definitely help compete linode offering amount ram looking storage buck would way go otherwise metric saw improvement nothing made offering better everybody else interesting offering plan par digitalocean amazon lightsail plan start seem like race bottom certain point time tell need showdown future digitalocean new account receive credit good day linode new account receive credit good day upcloud new account receive credit vultr new account receive credit good day
309,Lobsters,virtualization,Virtualization,Memory Deduplication: The Curse that Keeps on Giving,https://fahrplan.events.ccc.de/congress/2016/Fahrplan/events/8022.html,memory deduplication curse keep giving,,security researcher collectively worked different attack technique ab use memory deduplication one way another crossvm data leak attack crossvm data write attack insandbox m edge javascript data leak full memory readwrite attack based m edge talk detail memory deduplication work many different way exploited attack memory deduplication widely applied technique reduce memory consumption server vm host desktop system even mobile device deduplication map multiple identical copy physical page onto single shared copy copyonwrite semantics result write shared page trigger page fault thus measurably slower write unshared page prior work shown attacker able craft page target system use timing difference simple singlebit side channel discover certain page exist system talk show security implication using memory deduplication much severe initially assumed show maliciously programming memory deduplication attacker build primitive read arbitrary data memory even write memory limited powerful way exemplify primitive using three attack recently developed first attack cain us memory deduplication bruteforce entropy bit cohosted victim vm second attack dedup est machina extends cain order leak arbitrary data aslr heapcode pointer password hash browser javascript using leaked pointer dedup est machina us rowhammer exploit microsoft edge without relying single software vulnerability third attack flip feng shui us memory deduplication control placement cohosted victim sensitive information physical memory building sophisticated rowhammer attack rsa public key flip feng shui make crossvm rowhammer attack precise fast reliable example flip feng shui compromise openssh server victim vm le minute case conclude memory deduplication fatal security way one speaker bios kaveh kaveh razavi security researcher vrije universiteit amsterdam netherlands currently mostly interested reliable exploitation mitigation hardware vulnerability sidechannel attack oshardware interface previously part cert team specializing operating system security worked authentication system swiss bank spent two summer microsoft research building largescale system prototype hold bsc sharif university technology tehran msc eth zurich phd vrije universiteit amsterdam ben ben gras part system security research group vrije universiteit amsterdam since previously scientific programmer working minix operating system andy tanenbaum year erik erik bosman phd student system network security group vrije universiteit amsterdam netherlands currently working novel sidechannel attack leaking sensitive information o application previously developed signal returnoriented programming highly portable exploitation technique abuse signal frame creating weird machine attacker program minemu system fastest dynamic tainttracker used protect binary memory corruption attack antonio antonio barresi cofounder ceo xorlab swiss security company founding xorlab worked laboratory software technology lst eth zurich software security related topic research interest software system security joining lst worked industry software engineer security consultant risk officer hold bsc msc degree computer science eth zurich
310,Lobsters,virtualization,Virtualization,Partitioning my digital life into security domains (2011),http://theinvisiblethings.blogspot.com/2011/03/partitioning-my-digital-life-into.html,partitioning digital life security domain,known decade wiki,diagram illustrates decomposed digital life security domain quite sophisticated scheme user would probably want something simpler think still interesting discus domain implemented lightweight appvms qubes o diagram also show type networking connectivity domain allowed let discus diagram bit bit three basic domain work green label personal yellow label red untrusted insensitive thing marked diagram bold frame quick digression domain label color qubes o domain apart form distinct name also assigned label basically one several perdefined color color used drawing window decoration trusted window manager color frame supposed user friendly easy noticeable indicator trusted given window totally user interprets color somehow obvious associate red color something untrusted dangerous red light stop danger green something safe trusted yellow orange something middle also extended scheme also include blue black interpret indicating progressively trusted domain green black something ultimately trusted back domain work domain access work email keep work pgp key prepare report slide paper etc also keep various contract ndas yes pdfs received trusted party via encrypted signed email otherwise open disposable vms work domain network access work email server ssl nothing workrelated task require web access editing qubes wiki accepting linkedin invite downloading cool picture fotoliacom presentation spec manual intelcom use workpub domain assigned yellow label meaning consider somehow trusted would certainly never put pgp key workrelated confidential information personal domain nonwork related stuff personal email calendar holiday photo video etc held nt really access web social networking would probably allow http something like facebook somehow paranoid side also special verypersonal domain use communication partner away home use pgp course separate pgp key purpose nt discus secret sensitive stuff still prefer keep intimate conversation private use shopping accessing internet ecommerce site basically defines domain access credit card number personal address shipping nt really dedicated corporate credit card shopping domain grocery sport equipment hotelplane reservation ending separate business credit card would probably split shopping domain personalshopping workshopping also banking domain use managing bank account combine personal company account also specialized workrelated domain rarely use workadmin domain used manage almost itl server webserver qubes repo wiki server email server dns management etc domain allowed ssh traffic server http webbased management server workblog used manage blog reading reason separate workadmin work paranoid fear somebody compromise blogger service subsequently exploit bug browser use editing blog nt want person able also get admin access itl server similarly somebody somehow compromised eg amazon web management console exploited browser workadmin would like least retain access blog used twitter would probably also manage workblog domain unless personal twitter account case would run personal qubesdev domain used qubes development merging developer branch verify signature tag course building rpmsisos yes qubes beta ship dvd iso finally signing signing key domain sensitive domain allowed ssh network access qubes git server even somebody compromised git server still would big problem u sign verify tag others repos unless somebody could also modify sshgit daemon running subsequently exploit hypothetical bug git client software connect server also decided keep accountingrelated stuff separate domain whenever get invoice copy accounting domain rationale trust pdfs much le trust pdfs keep work domain year move old stuff work domain old email spool old contract ndas workarchives domain minimize potential impact potential attack work domain work domain could attacked eg exploiting hypothetical bug thunderbird protocol handshake using mitm attack hypothetical bug gpg vault domain ultimately trusted one generate keep password using keepass master gpg key course vault domain networking access password email server access password also kept specific domain us work domain specifically thunderbird client absolutely point allowing eg thunderbird remember password got compromised would steal next time manually enter finally previously mentioned red domain tried call junk random past think red still better name red domain totally untrusted get compromised nt care would recreate within second nt even back basically everything nt fit domain nt require provide sensitive information nt differentiate workrelated personalrelated surfing even nt care anonymity task concerned anonymity would create separate anonymous domain proxy traffic tor proxy look nice easy one thing complicates picture data flow domain diagram show domain additionally arrow symbolizing typical data flow see usual data flow trusted domain le trusted domain eg copy pasting url receive via email work domain could open untrusted browser red moving invoice work domain receive via email accounting domain unfortunately also transfer le trusted domain trusted one one example copy pasting interesting url stumbled upon surfing red domain would like share college work friend need copy paste email client either work colleague personal friend domain copying data le trusted domain trusted one present significant problem one could think pasting url thunderbird email editor pretty harmless operation still untrusted input nt really know red domain really pasted local clipboard paste work domain thunderbird email editor perhaps junk overflow undo buffer editor even scary example copying coollooking graphic file web work domain could use presentation slide eg xkcd attack originating malicious jpegs graphic format exploiting bug rendering code known decade problem handle data flow le trusted system trusted one easily solvable practice unfortunately people design build highsecurity system use military government take somehow opposite approach say concerned lesstrustedtomoretrusted data transfer long could assure way perform transfer opposite direction could build system guarantee trusted domain never transfer data le trusted domain even domain compromised happy allow oneway transfer practice mean need eliminate covert channel two cooperating domain word cooperating key word make whole idea practical imho elimination covert channel cooperating domain indeed required scheme assumption data transfer le trusted domain could indeed compromised trusted domain least result data leak back originating domain later lessclassified network lesstrusted domain presumably connected one assumption user system connected one isolated network even case elimination covert channel domain least minimizing bandwith something unusable unusable really big challenge probably could done ready significantly sacrifice system performance smart scheduling trick needed minimize temporal covert channel would like make clear interested eliminating cooperative covert channel domain qubes time near future perhaps long term well nt believe approach also nt like approach nothing preserve integrity moretrusted domain focus isolation aspect perhaps attacker might able leak secret back le trusted domain everything else trusted domain good isolation nt maintain integrity alternative solution handling lesstrustedtomoretrusted data transfer trusted converter verifier could handle specific file type jpegs ensure get nonmalicious file destination domain might remind badold av technology something different trusted converter would likely program written safe language running another trusted domain rather big ugly av huge database signature bad pattern might appear jpeg file obvious problem approach somebody must write converter write file type wish allow transferred trusted domain perhaps doable longerterm perhaps future version qubes right ignoring problem say lesstrustedtomoretrusted transfer done user risk welcome submit trusted converter favorite file type meantime copying file domain speaking copying file domain another security catch imagined two physically separated machine share common network resource way move file two airgaped machine would via something like usb stick cdrom dvd disc inserting usb drive cdrom machine trigger whole lot action parsing deviceprovided information loading required driver usb parsing driver partition table mounting finally parsing filesystem stage requires machine o perform lot untrusted input processing potential attack space quite large even could limit copy harmless file machinesdomains perhaps somehow verified trusted party inbetween discussed still huge opportunity originating domain could compromise target domain qubes alpha using similar file copy mechanism using virtual stick file copy domain qubes beta provide new scheme based shared memory channel use gui virtualization technical detail solution available soon wiki sensitive element new scheme uncpiolike utility run target domain unpacks incoming blob predefined directory tree eg homeuserincomingfrom domainname believe write pretty safe uncpiolike utility contrast secure previously mentioned element usb device parsing partition parsing f parsing qubes beta planned released end march btw partitioning enforcement easy use security partitioning scheme make sense real life necessary enforcement mechanism would ensure user nt mistakenly bypass specifically purpose come special previouslymentioned firewalling support qubes beta cover separate article soon anther thing make partitioning easy use instance would like able setup hint policy click url email received work domain automatically opened red domain default web browser currently nt qubes thinking near future summary partitioning one digital life security domain certainly easy process requires thinking process also userspecific partitioning scheme come quite sophisticated people would probably want something much simpler case corporate deployment scheme would designed cio admins enforced user automatically much bigger problem home small business user would need come partitioning perhaps future version qubes provide ready use template select typical group user
311,Lobsters,virtualization,Virtualization,"Launchbot: a system for helping you discover, build, and run Docker-enabled content",http://launchbot.io/docs/overview/,launchbot system helping discover build run dockerenabled content,launchbot jupyter notebook install start docker http wwwdockercomproductsdockerengine install configure launchbot app http launchbotio clone project launch project manage git access protected repos http launchbotio,launchbot launchbot system helping discover build run dockerenabled content jupyter notebook replaces command linebased process installing running complex application like jupyter notebook desktop gui enabling streamlined pointandclick process discovering running complex application tool run launchbot must install start docker install configure launchbot app able clone project build launch onto local docker engine manage project within git install start docker use launchbot need install two docker engine http wwwdockercomproductsdockerengine docker allows containerize application launchbot us build run underlying environment required application function important docker must running use launchbot need make sure started time want use launchbot mac see docker whale icon menubar get following error launchbot docker running connect docker engine endpoint install configure launchbot app download unzip launchbot http launchbotio clone project launchbot app running download project variety way search download project launchbot registry project machine clone arbitrary project based git url clone image command line home directory see config path find path important launchbot work http git protocol ssh protocol supported launch project use project tab build launch project downloaded also click show dockerfile review edit dockerfile project important first time build project launchbot must download build entire image since image often quite large take several minute project start see link various service use manage git launchbot enables easily manage git project use git make commits need provide name email address git setting section config page typical git workflow create branch commit changed file work narrate work leaving commit message push change remote branch function available left nav bar project page access protected repos launchbot free cloning launching public project however access private repository push repository much paid plan get paid plan create account http launchbotio create subscription prompted credit card information signup code transaction approved see key appear main page
312,Lobsters,virtualization,Virtualization,ZeroVM: Virtualization based on Chrome's NaCl,http://www.zerovm.org/,zerovm virtualization based chrome nacl,zerovm detail zerovm run time zrt toolchain,zerovm zerovm open source virtualization technology based chromium native client nacl project zerovm creates secure isolated execution environment run single thread application zerovm designed lightweight portable easily embedded inside existing storage system functionality allows developer push application data instead pull data application case traditional architecture detail zerovm provides raw execution environment zerovm run time zrt includes port glibc inmemory file system provides compliant environment supporting posix syscall api zerovm expose non non posix api zerovm magic handled transparently application true posixunix tradition io zerovm modeled file input data presented application stdin log stderr output stdout communication channel peer zerovm instance also presented file rest visible file system transient memorybacked current implementation standard library major part posix available however behavioral deviation would expected normal implementation example since zerovm deterministic time function always return zero assume within standard could interpreted application running infinitely fast computer threading cooperative handled automatically deterministic hence thread synchronization primitive nops developing application zerovm requires use provided crosscompilation gnu toolchain
313,Lobsters,virtualization,Virtualization,Introducing Docker 1.13,https://blog.docker.com/2017/01/whats-new-in-docker-1-13/,introducing docker,docker swarm mode introduced docker major effort extend swarm service api improved cli backwards compatibility newer cli talk older daemon add experimental prometheusstyle endpoint support compressing build context get started docker mac window docker aws docker azure install instruction detail helpful link,today releasing docker lot new feature improvement fix help docker user new year resolution build better container apps docker build improves docker swarm mode introduced docker lot fix read docker highlight use composefiles deploy swarm mode service docker add composefile support docker stack deploy command service deployed using dockercomposeyml file directly powering major effort extend swarm service api make flexible useful benefit include specifying number desired instance service rolling update policy service constraint deploying multihost multiservice stack simple docker stack deploy composefiledockercomposeyml mystack improved cli backwards compatibility ever bitten dreaded error response daemon client newer server problem docker cli updated still need use older docker engine starting newer cli talk older daemon also adding feature negotiation proper error returned new client attempting use feature supported older daemon greatly improves interoperability make much simpler manage docker installs different version machine cleanup command docker introduces couple nifty command help user understand much disk space docker using help remove unused data docker system df show used space similar unix tool df docker system prune remove unused data prune also used clean type data example docker volume prune remove unused volume cli restructured docker grown many feature past couple year docker cli lot command time writing like build run used lot obscure like pause history many toplevel command clutter help page make tabcompletion harder docker regrouped every command sit logical object interacting example list startof container subcommands docker container history subcommand docker image docker container list docker container start docker image history change let u clean docker cli syntax improve help text make docker simpler use old command syntax still supported encourage everybody adopt new syntax monitoring improvement docker service log powerful new experimental command make debugging service much simpler instead track host container powering particular service pulling log container docker service log pull log container running service stream console docker also add experimental prometheusstyle endpoint basic metric container image daemon stats build improvement docker build new experimental squash flag squashing docker take filesystem layer produced build collapse single new layer simplify process creating minimal container image may result slightly higher overhead image moved around squashed layer longer shared image docker still cache individual layer make subsequent build fast also support compressing build context sent cli daemon using compress flag speed build done remote daemon reducing amount data sent docker aws azure beta docker aws azure public beta ready production spent past month perfecting docker aws azure incorporating user feedback incredibly grateful user helped u test identify problem also stay tuned update enhancement coming month get started docker docker mac window user beta stable channel get automatic upgrade notification fact beta channel user running docker release client past couple month new docker download docker mac window get started deploy docker aws docker azure check doc use button get started interested installing docker linux check install instruction detail video helpful link
314,Lobsters,virtualization,Virtualization,State of the VMS Port to x86_64 January 2017,https://www.vmssoftware.com/pdfs/State_of_Port_20170105.pdf,state vms port january,,obj length r filter flatedecode stream f z j endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text imageb imagec imagei colorspace r font r r r xobject r r endobj obj length r type xobject subtype image width height interpolate true colorspace r intent perceptual smask r bitspercomponent filter flatedecode stream
315,Lobsters,virtualization,Virtualization,OpenEBS — The containerized storage,https://blog.openebs.io/openebs-the-containerized-storage-f76e394a9543,openebs containerized storage,openebs containerized storage wwwopenebsio openebs short containerized storage maya new storage orchestration platform building block high performing distributed block storage community gitter channel,openebs containerized storagein infrastructure space compute environment always first lead change docker brought new thinking every devops administrator application developer cio across spectrum beginning include docker policy environment begin adopt containerization mainstream hole still need plugged specifically storage spacei excited write first detail openebs wwwopenebsio projectafter amazing year building commercial storage product recently took giant leap open source model building infrastructure software recently launched openebs project goal building developer friendly storage using coolest available infrastructure piece underneath docker rancher longhorn nomad terraform etcso openebs short openebs offer persistent block storage following feature containerized block storage using docker container call vsms virtual storage machine concept similar podsa highly scalable storage orchestration platform spin storage volume seamlessly manages effortlesslya simple yet high performing distributed block storage designed best caching via nvme optimizationswhy containerized storage simple answer even storage volume software associated regular function software need managed volume levelmonolithic v containerized storagewhen software upgrade happen storage host level volume behavior change simultaneously may desired result similarly upgrade maintenance window may application storage volume often observe difficult get convenient window satisfies storage volume associated application containerized storage storage upgrade becomes simple easy like application upgrade docker containersmaya new storage orchestration platformkubernetes docker swarm rancher cattle nomad orchestration platform good job managing lifecycle compute container initial provisioning network storage however storage infrastructure management scaled big beast storage volume need persistent application need volatile backend storage volume need scheduled various host based capacity iop availability volume may need moved fly usage go upmaya sanskrit language mean magic maya seamlessly integrate storage management functionality existing container orchestration layer provisioning scheduling reporting rolling upgrade etc provide storage specific capability like data protection capability migrating storage etc building block high performing distributed block storage rancher longhorn chose adopt enhance rancher longhorn basic building block storage block intelligence openebs write separate blog longhorn feature chose longhorn short longhorn employ clever simple approach container data connectivity data availability replication data protection snapshot longhorn written golanggostor gotgt one initial front end openebs course iscsi chose gostorgotgt good starting point openebs plan add many new capability gotgt like clustering support performance optimization etcbulk caching layer nvme caching layer see traditional storage system usually small size recent advancement flash technology made possible offer large capacity flash affordable price cost deterrent terabyte low latency flash storage openebs provides intelligent caching technology keep hot data large nvme flash layer intel xpoint good fit technologycommunity community paramount hope embrace lot friend adviser expert journey successfully deliver openebs promise drop gitter channel say hi
316,Lobsters,virtualization,Virtualization,New libvirt project Go language bindings,https://www.berrange.com/posts/2016/12/15/announce-new-libvirt-project-go-language-bindings/,new libvirt project go language binding,libvirt git server github mirror godoc website people use alex zorin kyle kelly libvirt ci system,happy announce libvirt project supporting go language binding primary deliverable joining python perl language binding api coverage libvirt c library master repository available libvirt git server expected go project consume via import github mirror since go ecosystem heavilty github focused eg godocorg produce doc stuff hosted libvirtorg git import libvirt githubcomlibvirtlibvirtgo conn err libvirtnewconnect qemu system api documentation available godoc website libvirt relied party provide go language binding one people use first created alex zorin taken kyle kelly lot excellent work put binding however api coverage largely stop available libvirt exception apis libvirt enabled via go build tag libvirt working version many apis added time mention enums constant comparing current libvirtgo api coverage libvirt c library expose reveals missing function total missing enum constant total missing macro constant total iow alot already implemented still long way go initially intended contribute patch address missing api coverage existing libvirtgo binding looking code though concern way apis exposed go libvirt c library set apis accept return virtypedparameterptr array case need apis easily extensible handle addition arbitrary extra data field future way apis work one ugly unpleasant part c api thus language binding never expose virtypedparameter concept directly instead map suitable language specific data structure perl python meant mapping hash table give application developer language friendly way interact apis unfortunately current go api binding exposed virtypedparameter concept directly go since go support union result arguably even unpleasant go already c second concern way event exposed go c layer different callback needed event type one method registering callback requiring ugly type cast exposed directly go meaning go compiler strong type checking callback registration instead runtime check time event dispatch minor concern go api mapping fact needlessly exposed vir prefix method constant despite already libvirt package namespace returning struct instead pointer struct object understandably current maintainer desire keep api compatibility going forward decision made fork existing libvirtgo codebase allowed u take advantage work put far fixing design problem also extending api coverage idea application decide optin new go binding point time ready adapt code api change user existing libvirt go binding converting new official libvirt go binding requires little bit work nothing serious simplify code using typed parameter method change roughly follows vir prefix dropped constant eg libvirtvirdomainmetadatadescription libvirtdomainmetadatadescription vir prefix dropped type eg libvirtvirdomain becomes libvirtdomain method returning object return pointer eg domain instead domain allowing u return usual nil constant error instead struct underlying libvirt connection domain event domaineventregister method replaced separate method event type eg domaineventlifecycleregister domaineventrebootregister etc giving compile time type checking callback domain event api accepts single callback instead taking pair callback caller create anonymous function invoke multiple thing required method accepting returning typed parameter formal struct defined expose parameter manner allows direct access without type cast enables normal go compile time type checking eg domaingetblockiotune method return domainblockiotuneparameters struct longer necessary use go compiler build tag access functionality different libvirt version magic conditional compilation binding transparently build every libvirt version binding find libvirt via pkgconfig making easy compile libvirt installed nonstandard location simply setting pkgconfigpath coverage apis constant macro verified libvirt ci system always keep git master libvirt c library error callback concept removed binding deprecated libvirt due thread safe also redundant since every method already directly return error object explicit type defined enums method take flag enums use type instead allowing stronger compiler type checking exception typed parameter change adapting existing apps largely boring mechanical conversion adapt renames without effort put alex zorin kyle kelly community contributor creation new libvirtgo binding would taken least week instead week effort put huge debt owed people previously contributed libvirt go binding hope new binding guaranteed api coverage benefit go community going forward time writing slight lie quite finished virstream virevent callback method binding done shortly
317,Lobsters,virtualization,Virtualization,Notes on Migrating from a traditional PaaS to Hyper.sh,https://medium.com/@jmarhee/notes-on-migrating-from-a-traditional-paas-to-hyper-sh-f4323d02f2a,note migrating traditional paas hypersh,note migrating traditional paas hypersh decided see hypersh dockercompose file,note migrating traditional paas hypershanyone know know feel container excellent option deploying distributed application came site content throw buck month drop personal site onto heroku rather maintain kubernetes swarm cluster lowvolume project never ops concern however testing build pipeline optimized produce container got sick maintaining separate set tool manage site updated decided see hypersh hoping could pop one dockerfile life turn exactly effortless claimhyper cli function almost exactly way docker client syntax deploying image called jmarheedotcom simple hyper pull coolregistryusajmarheejmarheedotcom hyper run name cooljosephusadotbiz p coolregistryusajmarheejmarheedotcomso since new enhancement could containerized service site decided put together couple dockerfiles take advantage docker featureset built image personal site service provide visualization github activity loadbalancer docker build imagename docker tag imagename registrydomain user imagename docker push registrydomain user imagename hyper pull imagename registrydomain user imagename see dockerfiles little change run app easy test build locally distribute predictably productionbecause container require measure interconnectivity used hyper cli link container would docker environment hyper run name ghchart coolregistryusajmarheeghchart hyper run name jmarheedotcom link ghchart coolregistryusajmarheejmarheedotcom hyper run name haproxy link jmarheedotcom p p coolregistryusajmarheehaproxy ya go hyper p container id image command created status port name public quayiojmarheejosephmarheedotcomhaproxy binsh c haproxy hour ago hour haproxyjmarhee quayiojmarheejosephmarheedotcom binsh c ruby app hour ago hour josephmarheedotcom quayiojmarheeghchart binsh c ruby app hour ago hour ghchartand well good public ip reach thing hyper much like would kubernetes swarm cluster requires ingres expose application internet provision attach floating ip address frontfacing container case loadbalancer hyper fip allocate get address like attach container hyper fip attach floatingip container name address container name coolbizusa would run hyper fip attach coolbizusaand test using curl ik hit application outside container networkso let take step say application lot container lot thing would pain hand every time spun app link volume etc use hyper compose new existing dockercompose file function nearly complete parity existing docker compose api modification feature specific hyper compose implementation ie floating ip example necessary deploy simple web applicationhere example compose file might look like project version haproxy image quayiojmarheejosephmarheedotcomhaproxy fip myfloatingip link ghchart josephmarheedotcom dependson josephmarheedotcom port ghchart image quayiojmarheeghchartjosephmarheedotcom image quayiojmarheejosephmarheedotcom link ghchart dependson ghchartso basically run hyper fip allocate get new floating ip load balancer reuse ip previous example going recreate service managed compose indicate container attach hyper compose run proceed spin application hyper compose dand see service come online new floating ip bring dependent service expected hyper p container id image command created status port name public quayiojmarheejosephmarheedotcomhaproxy binsh c haproxy second ago second quayiojmarheejosephmarheedotcom binsh c ruby app second ago second quayiojmarheeghchart binsh c ruby app second ago second tear back run hyper compose like bring back new floating ip release hyper fip release address allocate new one update compose file accordinglythis functionality probably simplest method encountered accomplish hosted service stellar tool one often exceed need quickandsimple project like personal website always require overhead running service composing infrastructure another personal favorite tool mine ranchercompose run container see development side thing feature deliver lot operation work honestly kind pain already environment ie might multiregion kubernetes cluster already running highperforming framework like deis workflow another personal favorite mine experience run infrastructure project begs pivot architecture microservices rarely better rely docker pipeline delivery many use casesas someone whose career system worker solution engineer sometimesdeveloper centered around largely trying find way make cool technology accessible many people possible believe hyper hit mark making deploying even basic docker application amazingly simple accessible nearly fully featured advanced use case without overhead running maintaining cluster recommend many many case course hosted option like docker datacenter experience hyper cli made transition traditional paas fairly seamless fit right existing pipeline
318,Lobsters,virtualization,Virtualization,Lobsters on Kubernetes,https://github.com/kelseyhightower/lobsters-on-kubernetes,lobster kubernetes,join github today sign file permalink lobster kubernetes usage resource license reload reload,lobster hacker news clone kubernetes dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time lobster kubernetes tutorial walk deploying hacker news clone lobster usage lobster hacker news clone kubernetes resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
319,Lobsters,virtualization,Virtualization,QEMU Advent Calendar 2016 - Day 1,http://www.qemu-advent-calendar.org/2016/,qemu advent calendar day,,qemu advent calendar feature qemu disk image day december christmas day new package becomes available download every download contains little run shell script start qemu emulator recommended parameter disk image disk image either contained directly download downloaded run script need installed curl wget case disk image contain interesting operating system software run qemu emulator wellknown notsowellknown operating system old new others custom demo neat algorithm run script disk image included download created volunteer qemu community showcase cool software qemu run
320,Lobsters,virtualization,Virtualization,Amazon is eating the software (which is eating the world),http://blog.gardeviance.org/2016/11/amazon-is-eating-software-which-is.html,amazon eating software eating world,fuss serverless fuss serverless,continuing post fuss serverless thought riff marc andreessen famous statement explain one possible future scenario software belongs amazon counter play going discus would make post long honest quite content watch executive software giant flap around like headless chicken whilst industry disappears wo nt happen overnight process take year time people realise happening late type economic change known punctuated equilibrium getting technical let u keep simple going use map explain going happen quickly cooked one trading system based upon nothing much however starting point going assume going build trading system aws lambda mean software component map trading engine stock portfolio risk system recommendation engine mood system built function may call many function lambda might want think go read post fuss serverless ok customer map desire make profitable trade told cooked five minute course make better map making profitable trade requires u able trade know trade going profitable wish secret success system differentiates u everyone else recommendation engine take feed trade us magical mood system determine worthwhile profile risk system go mood system sound like gibberish let remind example case back zimki earliest serverless functional billing environment actually build mood system day scrapped information flickr source generate mood world daft part evil plan involved animatronic monkey concept art let go got hypothetical trading system also added metric going turn map flow add metric trade feed creates list trade governed number trade trade feed lambda function cost trade run risk mood finally recommendation system creating functional cost recommendation system provides list recommended trade recommended impact trading engine stock portfolio system yes basic setup argue map flow diagram much wish certainly bank almost every component treated something relatively novel bank manages risk trading make recommendation etc fact experience usually huge number custom built system thing ie single bank often hundred custom built risk management system let u pretend working relatively sane bank see cost system trade feed trade x average cost trade feed lambda function bank idea individual function within organisation cost clear way calculate let ignore along duplication bias ie custom building commodity sane remember let u suppose aws launch form lambda market place ie create lambda function add api gateway sell market place p think find done amazon api gateway integrates api marketplace lambda integrates api gateway nt chance play become clear pretty soon thinking building trading system notice someone else providing api provides risk system maybe component hmmm could use instead writing cue gnashing teeth probably get memo security danger using third party code ca nt check extolling benefit open source memo probably come pdf sent via office mail without trace irony mean nt trust source roll back various would nt trust production applied aws fact trusted source appear time startup adventurous also probably end owning company chance huge amount trading system broken spent five minute could end provided lambda function third party drawn map along stitching altogether probably build something genuinely different eg mood system course development team wo nt happy building mood system combining component service third party despite talk micro service argue better job making trading engine beauty functional billing say prove cost per function call way better job probably want selling marketplace making sure paying enough nt leave practice people get away old line better job noone actually measure nt cost per function otherwise think function free running hardware p hardware nt really free neither power building cost etc amazon marketplace around function two factor market consumer provider strong network effect company start consuming function provider want build function consumer attract pretty soon rather working company writing thirtieth consumer authentication service go along scattered throughout place copying pasting code least think code future using service marketplace marketplace service repository impression company used waste lot hardware server sitting around almost nothing load etc cloud wait lift lid software development ask software engineer find example huge amount duplication single organisation huge prepared duplication good day company decent size oh anyone business start bashing software engineer nt get started utter lack strategy miserable understanding landscape leadership based upon gut feel meme copying latest trend hbr harvard business review go future software development lot lambda function consumed marketplace stitched together new capability waste reduced bias ie custom building something already well crafted start disappear get good financial development stuff last post covered hurrah barely started yet get whole lot interesting explain introduce old favourite decade old ecosystem model known innovate leverage commoditise model fairly simple start something novel new need pioneer evolves leverage pattern discovered produce useful product library routine need different culture group settler eventually thing evolve becoming industrialised requires focus commoditisation different culture known town planning however genesis begets evolution evolution begets genesis evolved component enable rapid development new thing top evolved subsystem faster speed developing new thing shown map one thirty common economic pattern someone business taunting software engineer ask name five politely remind business different thing anyway play game within company using three different culture known attitude mimic evolution extremely useful encouraging development new encouraging efficiency whilst creating two warring faction host problem however serious limitation company limited number people want get everyone else world acting pioneer actually simple provide industrialised component public apis best explained circular form using trading system town planner provide utility coding platform whole bunch people company outside organisation ie ecosystem start using build sort thing provide marketplace enables sell risk system trading engine others within entire ecosystem also people building genuinely new novel stuff everything consumes platform also get realtime consumption information every angle mentioned got two factor market nice network effect causing ecosystem grow rapidly bigger ecosystem economy scale get new stuff built ie others pioneering consumption data get use trick use consumption data find interesting pattern ie settler leverage consumption data find consumer really want use build new industrialised component component make entire system even attractive leveraging consumption data giving ecosystem want got increasing efficiency scale entire ecosystem also acting free research development department industrialised component provide higher stack go lambda etc people attract double whammy two factor market ilc killer look trading system time go component provided aws marketplace aws playing ilc game many become industrialised component provided aws marketplace future potential aws component top novel exciting stuff directly giving early warning aws consumption data future market component shown example map benefit consumer ie trying build stuff overwhelming amazon continue accelerate efficiency customer focus apparent innovation despite occasional gnashing teeth chew bit software industry doubt use model chew entire software industry duplicated mess bias call software industry push people providing either component sold marketplace building actually novel stuff executive especially software industry react cloud trotting usual layer inertia idea never happen software work relationship business security prior investment business model successful way counter play oh going fun
330,Lobsters,virtualization,Virtualization,Veertu - Run Windows and Linux on your Mac,https://veertu.com/,veertu run window linux mac,macos cloud io ci devops anka build configure macos cloud run io ci pipeline anka flow io developer develop consistent local environment complete security uncompromised productivity enterprise mac client,macos cloud io ci devopsanka build configure macos cloud run io ci pipelinesanka flow io developer develop consistent local environment complete security uncompromised productivity enterprise mac client
331,Lobsters,virtualization,Virtualization,Hyper is Docker Done the Right Way,http://thenewstack.io/hyper-docker-done-right-way/,hyper docker done right way,hyper docker hub focus container hypercontainer kvm qemu xen docker compose docker voting sample linode digitalocean devops,recently came across new container service caas offering called hyper signing installing cli liked overall workflow managing containerized application extensively worked container feel hyper got many thing right way docker designed first place first thing first hyper replacement docker us docker image pulled docker hub appealing way launch container without ever spinning vm host container almost every caas deal creation cluster hyper let focus container without worrying size configuration cluster word hyper attempting container amazon done server iaa hyper true caas hyper different offering technically speaking hyper replaces container runtime hypervisor dockercompatible api expose directly talk hypervisor instead container engine run within host sound similar vmware microsoft attempted hypervisorbased containerization strategy key difference hyper container run host kernel instead every container get independent guest kernel approach application running inside perfectly isolated host well container core technology behind hyper open source project called hypercontainer hypervisorindependent technology run docker image directly underlying hypervisor official documentation hypercontainer defines combination hypervisor kernel docker image hypercontainer currently run kvm qemu xen support hypervisors pipeline almost workload go live cloud environment need primitive public ip address persistent storage basic logging monitoring even simple wordpress blog drupal site depends core feature launching containerized workload production environment deployed iaa start vms block storage virtual ip monitoring administrator devops need manage host well container hyper tackle workflow effective manner host vms manage container directly launched docker hub mounted ssdbased persistent block storage container associated public ip security group configured allow restrict traffic volume support live snapshot pointintime backup task customer billed persecond basis traditional hourly perminute billing wanted take hyper spin launching wordpress application screenshot command ran mysql wordpress container backed ssd disk automatically get mounted launched user account get isolated subnet based virtual private network hyper charge customer network traffic bandwidth le four minute publicly accessible wordpress site ready configured pretty obvious hyper us docker workflow one reason got hooked onto immediately workflow technically launching coreos instance inside public subnet vpc backed ssd eb volume elastic ip hyper simple dashboard launching managing containerized workload running multicontainer application microservices hyper compatible docker compose file ran famous docker voting sample application hyper without modification running multiple homogenous container replica user create service abstraction route traffic container match specific criterion feature gave hint hyper may running kubernetes behind scene hyper instantly appeal two kind audience developer familiar paas administrator use service virtual private server vps docker done phenomenal job democratizing container gap dev ops still wide open recent investment docker native engine microsoft window mac taken container much closer developer workflow involved managing container development environment different managing production hyper uniqueness lie preserving workflow defined docker developer used paas past familiar docker connect immediately fire docker build command source code push docker hub switch hyper launch application public cloud workflow brings paaslike experience developer system administrator use vps like linode digitalocean find many similarity hyper even used container past find workflow familiar hyper enable new scenario building complex cicd pipeline connect multiple environment compatibility docker api cli make possible easily extend devops toolchain managing complex build process mature container orchestration engine kubernetes marathon swarm designed managing large microservicesbased application running production every workload need scale reliability webscale container platform hyper offer simple intuitive way run containerized application production hyperscale cloud provider like amazon google microsoft continue invest container caas target audience different compared user hyper enterprise significant investment public cloud prefer use container management platform offered crosssection developer system administrator business use hyper competition caas market heating witness wide range offering targeting different use case scenario user coreos digitalocean docker sponsor new stack
332,Lobsters,virtualization,Virtualization,What Am Container,https://glyph.twistedmatrix.com/2016/10/what-am-container.html,container,function call address space port specific optin docker sandstorm carina shared mutable state root evil,perhaps software developer perhaps developer recently become familiar term container perhaps heard container described something like lxc better applicationlevel interface cgroups like virtual machine lightweight perhaps even le usefully function call probably heard docker wonder whether container different part docker bewildered blisteringly fastpaced world container maybe trouble understanding fact might familiar half dozen orchestration system container runtimes already frustrated seems like whole lot work nt see point article like lay exactly point container people excited make ecosystem around confusing unlike previous writing topic going assume know anything ecosystem general basic understanding unixlike operating system separate process file network dawn time computer singletasking machine somehow load program main memory turn would run program lucky spit output onto paper tape program running computer looked around could see core memory computer running attached device including console printer teletypes later networking equipment course powerful program full control everything attached computer also somewhat limiting mode addressing hardware limiting meant program would break instant moved new computer rewritten accommodate new amount type memory new size brand storage new type network program contain within full knowledge every piece hardware might ever interact would expensive indeed also resource computer dedicated one program could nt run second program without stomping first one crashing mangling structure memory deleting data overwriting data disk programmer cleverly devised way indirecting virtualizing access hardware resource instead program simply addressing memory whole computer got little space could address memory address space program wanted memory would ask supervising program today call kernel give memory made program much simpler instead memorizing address offset particular machine kept memory program would simply begin saying hey operating system give memory would access memory little virtual area word memory allocation virtual ram virtualizing memory ie ephemeral storage nt enough order save transfer data program also virtualize disk ie persistent storage whereas wholecomputer program would seek position disk start writing data however pleased program writing virtualized disk might call today file first needed request file operating system word file system virtual disk networking treated similar way rather addressing entire network connection program could allocate little slice network port way program could instead consuming network traffic destined entire machine ask operating system deliver traffic say port number seven word listening port virtual network card getting bored obvious stuff yet good one thing frustrates container incredibly obvious idea logical continuation trend programmer intimately familiar different virtual resource exist reason said earlier two program need resource function properly try use without coordinating break horribly unixlike operating system le virtualize ram correctly one program grab ram nobody else modulo superpowered administrative debugging tool get use without talking program extremely clear memory belongs process program want use shared memory specific optin protocol basically impossible happen accident however abstraction use disk filesystems network card listening port address significantly limited every program computer see filesystem program data program store live filesystem every program computer see network information query everything receive arbitrary connection permission remove certain part filesystem view ie program optout far le clear program owns certain part filesystem access must carefully controlled sometimes mediated administrator particular way unix manages filesystems creates environment installing program requires manipulating state place filesystem program might require different state popular package manager unixlike system apt rpm rarely way separate program installation even convention let alone strict enforcement want recompile software configure prefix hardcode new location fundamentally package manager nt support installing different place program tell difference different installation location developer thought go one place file system hard code work machine order address shortcoming unix process model concept virtualization became popular idea virtualization simple write program emulates entire computer storage medium network device install operating system completely resolve oversharing resource process inside virtual machine real sense running different computer program running different virtual machine physical device however virtualiztion also extremly heavyweight blunt instrument since virtual machine running operating system designed physical machine ton redundant hardwaremanagement code enormous amount operating system data could shared host since form disk image totally managed virtual machine operating system host ca nt really peek inside optimize anything also make kind intentional resource sharing hard software manage host need installed host since installed guest wo nt full access host hardware hate using term heavyweight talking software often bandied contentfree criticism difference overhead running virtual machine process difference gigabyte kilobyte somewhere order magnitude huge difference mean need treat virtual machine multipurpose since one vm big run single small program mean often manage almost physical harware run program unixlike operating system running grant address space call entity created process understand container container get run program give memory whole virtual filesystem whole virtual network card metaphor process nt perfect container contain multiple process different memory space share single filesystem also container ecosystem fervor begin creep people interested container religiously exhort treat container single application run multiple thing inside ssh whole point container lightweight far closer overhead size process virtual machine process inside container query operating system see computer running owns entire filesystem mounted disk explicitly put administrator ran container word want share data another application given shared data optin optout way memorysharing optin unixlike system exciting sense really loweroverhead way run virtual machine long share kernel super exciting reason container exciting process reason using filesystem exciting use whole disk sharing state always inevitably lead brokenness optin better optout give program whole filesystem sharing data explicitly eliminate even possibility program scribbling shared area filesystem might break nt need package manager package installers removing function package manager inventory removal radically simplified le complexity mean le brokenness give program entire network address exposing port explicitly eliminate even possibility rogue program expose security hole listening port nt expecting eliminate possibility might clash program host hardcoding port number autodiscovering address addition exciting thing runtime side container rather thing run get container image present compelling improvement buildtime side linux window building software artifact distribution endusers quite challenging challenging clear specify depend certain software installed clear conflicting version software may version already available user computer clear put thing filesystem linux often mean getting software operating system distributor notice said linux window usual linux window mac desktop platform nt say anything mobile os macos android io window metro application already run container rule macos container bit weird different docker container mac check librarycontainers see view world application running see io look much something nt get discussed lot container ecosystem partially everyone developing technology breakneck pace many way linux serverside containerization continuation trend started mainframe operating system already picked full force mobile operating system one build image one building picture entire filesystem container see image complete artifact contrast package linux package manager fragment program leaving dependency integrated later image run machine except extremely unusual circumstance run target machine everything need run fully included build software image requires image implication server management longer need apply security update machine get applied one application time get applied normal process deploying new code since one update process delete old container run new one new image update roll much faster build image run test image security update applied confident wo nt break anything scheduling maintenance window managing reboots least security update application library kernel update different kettle fish exciting confusing fundamentally confusion caused way many tool many tool accepted software live image none old tool work almost every administrative monitoring management tool unixlike os depends intimately upon ability promiscuously share entire filesystem every program running container break assumption new tool need built nobody really agrees tool work wide variety force ranging competitive pressure personality conflict make difficult panoply container vendor collaborate perfectly many company whose core business nothing infrastructure gone reasoning process container much better process need start using right away even tooling pain adopting old tool nt work new tool tool vendor nt ready new tool community nt work usecase time write tool usecase nobody else cause problem somebody else course le fundamental reason much focus scale running smallscale web application stable userbase nt expect lot growth many great reason adopt container opposed automating operation fact keep thing simple fact software run container might obviate need systemmanagement solution like chef ansible puppet salt totally adopt try ignore complex involved part running orchestration system however container even useful significant scale mean company significant scaling problem invest container heavily write prolifically many guide tutorial container assume expect running multimillionnode cluster fully automated continuous deployment bluegreen zerodowntime deploys operation team great got stuff building component nontrivial investment leave dear reader absolutely adopting container technology say probably least using docker build software radically different container system like sandstorm might make sense depending kind service create course huge ecosystem tool might want use many mention although shout employer dockerasaservice carina delivered blog post among thing nt feel though need container absolutely right way value containerization derived adopting every single tool value container come four simple thing reduces overhead increase performance colocating multiple application hardware force explicitly call shared state required resource creates complete build pipeline result software artifact run without special installation setup instruction least software installation side still might require configuration course give way test exactly deploying benefit combine interact surprising interesting way enhanced wide growing variety tool underneath hype buzz real benefit containerization basically fixing old design flaw unix container let share le state shared mutable state root evil
333,Lobsters,virtualization,Virtualization,Running containers without Docker,https://jvns.ca/blog/2016/10/26/running-container-without-docker/,running container without docker,vertical change v horizontal change use container without docker mean might want start without docker back bunch packer rkt container migrating using container without docker might really easy cautiously optimistic greg,right work team job basically heroku rest company want really easy developer run operate code server going talk right make easier developer run code server might involve container whole post let suppose believe bunch existing infrastructure maybe want move container migration plan get trouble coming migration plan made sense help delightful coworkers one think make sense post make argument migration plan tl dr usual everything wrong post responsibility run container without using docker kubernetes mesos anything like running container bunch advantage even docker going move eventually need containerize anyway separate work smaller project might good migration plan want eventually move kubernetes something usual container expert trying figure use maybe useful writing think idea migration plan internet think compare good thing vertical change v horizontal change trying make big infrastructure change like migrate kubernetes basically two way could make new small kubernetes cluster contains hope dream slowly migrate thing new cluster second way incrementally roll small change start making bunch change horizontally across infrastructure move everything little towards kubernetes little little little finally hopefully want right making change horizontally feel le risky mean check change actually work everywhere le danger cool new world bunch software actually use right also good thing building cool new world first start learn operate cool new world deploying le critical application use container without docker mean might want start without docker mean pretty specific thing use container learned back docker daemon daemon bunch stuff like supervising container restarting stop redirecting program log letting run command like docker p see running box even know else lot cool orchestration feature like kubernetes mesos docker swarm mean need learn software work operates exactly fail production okay eventually short term want deploy change confidently run production using kind exciting feature like slows minimal way use container use feature possible still get advantage right think build container image use whatever want dockerfile packer whatever use many fancy tool want build container run container rkt rkt run container way run program know run program awesome run container host network namespace place need worry fancy networking business supervise way supervise thing currently run container pid namespace rkt mostly responsible starting process reasonable environment passing signal get process seems like would hard screw much though usual software know happen try rkt actually bit described keep local store container machine bunch security check runtime run systemd init process inside container probably understand yet container three thing would really like le line puppet configuration scared changing stop thinking term provision specific computer need put file etcawesomeblahxml computer worry service program always need etcawesomeblahxml exist better standard around run service le special snowflake think using container force u disciplined package run service install stuff service need inside container otherwise service work way silently depend host configuration filesystem totally separate host filesystem get advantage need run docker kubernetes mesos anything need container isolated rest operating system clear necessarily think make sense stop use container separating work smaller useful chunk migrating using container without docker might really easy exciting thing use container without docker need learn operate new program production hoping get done pretty quickly move business deciding manage container make program work container work anyway use containerization magic work anyway cautiously optimistic used really annoyed container seemed like buzzword seems like right lot thinking software built around make easy developer run code happening context container seems like worth learn happening containerland going try stuff think going start slowly introduce little new software production environment time thanks kamal reading best also greg coworker best telling many thing container
334,Lobsters,virtualization,Virtualization,Dropping Linux and KVM in Favor of FreeBSD and Jails (2015),http://www.jasonvanpatten.com/2015/12/04/dropping-linux-and-kvm-in-favor-of-freebsd-and-jails/,dropping linux kvm favor freebsd jail,joker riddler clayface penguin love freebsd hypervisor bhyve need hypervisor joker riddler clayface penguin joker get rebuilt joker ffmpeg trouble paradise storage server system first boot install joker networking switch server dual homed joker filesystem setup package joker joker neal spamilter nfs mount post note user management jail public facing service prep config file joker riddler get filesystems ready bane start jail continued,mentioned previously service run house via virtual machine long using vmware esxi got tired stupid window admin tool also tired restriction hardware would run mac pro replaced xeon cpu something faster added bunch ram packed full disk previously using edit photo video upgraded system something much faster reassigned mac pro server duty installed centos taught drive kvm moved vms ran well probably would still running well today vm joker vm email server riddler vm teamspeak server running gaming clan clayface vm website working penguin vms freebsd except teamspeak one plan convert one love freebsd hypervisor really wanted convert mac pro freebsd run hypervisor problem kvm longer supported hypervisor choice freebsd bhyve suboptimal intention ever run freebsd vms may decentenough solution add linux vm thing get ugly quick multistage configuration boot process linux vm opposed something like kvm spin vm start loading whatever disk image appears conscious decision bhyve developer fine pas need hypervisor main vm joker running local service thing used like imap server ssh login lot antispam fighting etc everything else running one process riddler sendmail clayface teamspeak server penguin apache need vms answer process thrown jail set install freebsd mac pro failed every attempt boot freebsd installer thumb drive met complete failure nothing would make mac boot decided retire mac build new machine joker get rebuilt decided go somewhat allout new server build also decided call joker continue using general stuff former vms would end jail likely add couple figured use two rpm wd sata drive mirror make machine zroot four drive would put together volume used local much hardware money spent intention leave one alone long time leave running long time xeons superfast processor bit reliable core consumer chip meant server chip using also video processing via command line wonderful application called ffmpeg benefit large number cpu core chip meaning total core including hyperthreading ultimately really justify anyone going trouble paradise mentioned storage server post fan supermicro motherboards server duty fair ever put supermicro chassis first attempt put one someone else chassis supermicro claim board eatx sized assumption say also standoff hole eatx board one think corner given motherboard external input device connect entire corner unsupported standoff hole line eatx chassis standoff hole line anything chassis know supermicro fault also big fan cooler master chassis mess stuff like say motherboard standoff better fortunately make enough difference matter motherboard would standing end inside chassis meaning corner much mass since motherboard headless toss old nvidia video card ended serving another anchor board pair intel pcie gige nics rest standoff worked perfectly board secured case stable enough even mass cpu respective heat sink fan attached system first boot install damn good mean really good done many time system booted right beeped time motherboard realized cpu contend rebooted couple time came right bios set date time told boot usb thumb drive away went like installed na freebsd install took minute told installer create zroot install mirroring drive together installed base source document package thumb drive like na also bother letting installer worry networking creating couple lagg interface finished soon enough system new joker born networking switch outlined na post managed cisco switch sits server basement support bundling also support vlans serverbased blog post config switch interface might interest interface description joker channelgroup mode auto interface description joker channelgroup mode auto interface description joker channelgroup mode auto interface description joker channelgroup mode auto interface description joker switchport mode access switchport access vlan interface description joker switchport mode access switchport access vlan server motherboard intel gige interface showed addin pcie nics bundled guy different laggs etcrcconf clonedinterfaces create configure actual laggs public inet laggproto lacp laggport laggport redacted prefixlen defaultrouter redacted private inet laggproto lacp laggport laggport redacted prefixlen couple command make sure took service netif restart service routing restart joker ping ping data byte byte m byte m byte m byte m byte m c ping statistic packet transmitted packet received packet loss roundtrip minavgmaxstddev m joker ping ping data byte byte m byte m byte m byte m byte m c ping statistic packet transmitted packet received packet loss roundtrip minavgmaxstddev m dual homed consciously carefully dualhome joker know security risk normally recommend folk server confident enough security around joker concerned would recommend unless know trust security filesystem setup remember mentioning drive zpool create local mirror mirror afterward joker zpool status local pool local state online scan none requested config name state read write cksum local online online online online online online online error known data error joker df local filesystem size used avail capacity mounted local local intent make usrlocal actually point local run pkg command prior making local zpool usrlocal already stuff simple address cd usrlocal tar xf cd local tar xpvf cd rm rf local ln sf local done joker cd usrlocal joker df filesystem size used avail capacity mounted local local package course using joker freebsd virtual machine built list package needed installed bind apache php sendmail etc bore complete list suffice say used pkg command new joker quickly add long sendmail neal spamilter running dovecot imap mail retrieval bind name resolution internally externally along service course locked sshd respond password ssh key nfs mount also followed client step post get joker mount bane exported filesystem opt mounted softlinked home added local user along others joker etcpasswd file note user management going rant bit user management unix unixlike operating system familiar script root user run add delete change user attribute one common thing see automatically making uid gid user exists server also exists matching group ask concern resource wasting whatnot ask group call stupidusers ie nonroot gid kinda group every single system administrator better feel comfortable confident editing etcpasswd tool vipw also able edit etcgroup without fear without fucking something sysad either afraid step away keyboard seriously simple skill must understand hair breadth away replaced shell script never use silly script first thing edit group file find unused gid create user group edit passwd file vipw add user uid use one since aol day yes still remember gid one created user get saved without password immediately fix passwd command thing able stop using stupid script folk writing stop writing beginner disservice never learn joy screwing system editing etcpasswd fix opinion back story jail public facing service prep config file joker running way wanted needed get former riddler virtual machine built jail reasonably quickly otherwise able send outbound mail exercise worked physical machine even built ready etcjailsconf file could build filesystems new machine start jail go file execstart binsh etcrc execstop binsh etcrcshutdown execclean mountdevfs mountfdescfs mountprocfs allowrawsockets path localjails name riddler outbound smtp auth riddler hosthostname riddlerlateapexnet redacted penguin penguin hosthostname penguinlateapexnet redacted clayface clayface hosthostname clayfacelateapexnet redacted catwoman catwoman hosthostname catwomanlateapexnet redacted scarecrow scarecrow hosthostname scarecrowlateapexnet redacted know silly try censor ip address reading blog actually connected one astute reader able figure one ip address actually get filesystems ready read plenty guide suggestion combining readonly section bunch jail usr filesystems single directory seems like waste time opinion skipped created new zfs filesystems local zfs create localjails zfs create localjailsriddler zfs create localjailsscarecrow zfs create localjailsclayface zfs create localjailscatwoman zfs create localjailspenguin directory usrfreebsddist installation medium two file knew referencing jail copied localjails base directory way handy needed create another jail future installation medium mounted speaking installation medium opt nfsmounted bane directory called iso mount mediafreebsd copy required file mount dev mdconfig vnode f mediafreebsd cp mediafrebsdusrfreebsddistbasetxz localjails cp mediafrebsdusrfreebsddistsrctxz localjails umount mediafreebsd basetxz srctxz local filesystem upgrade newer version freebsd easily replace file build jail simple step take bit time localjails directory tar xpvf basetxz c scarecrow tar xpvf basetxz c catwoman tar xpvf basetxz c clayface tar xpvf basetxz c penguin tar xpvf basetxz c riddler tar xpvf srctxz c riddler start jail add following etcrcconf get jail going jailenable yes fire service jail start jail running nothing syslogging joker jls jid ip address hostname path clayfacelateapexnet localjailsclayface riddlerlateapexnet localjailsriddler penguinlateapexnet localjailspenguin catwomanlateapexnet localjailscatwoman scarecrowlateapexnet localjailsscarecrow continued getting bit longwinded going stop continue another post soon stay tuned
335,Lobsters,virtualization,Virtualization,Why I’m writing a Windows 3 Emulator,https://hackernoon.com/win3mu-part-1-why-im-writing-a-16-bit-windows-emulator-2eae946c935d,writing window emulator,writing window emulator emulator would work proof concept follow along twitter part initial design thought,writing window emulatordeveloper designer cantabile software performing musician tech geek prosciencei decided write window emulator bit crazy idea hear couple week ago upgraded partner jen pc window going well went play window card game enjoys realized program work window sure software publisher still aroundso installed copy window vm work got would take write emulator enough support run old game written couple emulator ton work also great learning experience kind challenge really enjoyi particularly like idea project different enough learn something new got really tricky challenge done aware care andthere slim chance might actually useful even jenbesides love fairly pointless super geeky side project would work basic idea write program read window executable file run emulated cpu map api call make onto equivalentsit like dosbox emulating cpu unlike dosbox emulating low level hardwareit like wine emulating window api unlike wine cpu emulated instead running physical processor remember wine stand wine emulator like virtualbox vmware virtualization software emulating virtualizing low level hardwarein word even though include emulated cpu execute code emulating operating system hardwarethe nice thing approach program appear like regular window program get entry task bar able alttab tofrom like program constrained wall virtual machinethe side window api massive need implement subset proof conceptso far managed get proof concept working run two really simple program first simply display message box exitsthe second essentially hellowinc program chapter charles petzold classic book programming window creates window title draw text resized maximized minimized shuts cleanly closedhere look window retro exact exe file running emulator window emulated cpu instruction logged backgroundcode segment look like much fair bit going enough realize might actually workfollow along still fair way getting old game running thought series article would interesting remember joy segment arithmetic makeprocinstance locallock especially appreciate projectwhat think lost mind something worth pursuing hi brad robinson independent software developer living sydney australia write software musician indie developer rely word mouthif enjoyed article please consider sharing hitting recommend heart sharing facebooktwitter small gesture make real differencealso feed lacking hex dump disassembly listing screen shot old window game might like follow twittercontinue part initial design thoughtssubscribe get daily roundup top tech story
336,Lobsters,virtualization,Virtualization,Using the KVM API [LWN.net],http://lwn.net/Articles/658511/,using kvm api lwnnet,buy subscription xen qemukvm kvmtool intel vt fully functional sample program function definition sample virtual machine realmode interrupt descriptor table unrestricted guest feature building virtual machine exec changed locked stable interface reset vector segment descriptor additional kvm api feature cpuid modelspecific register msrs application kvm api virtio novm kvmtool run container using hardware virtualization log,article brought lwn subscriberssubscribers lwnnet made article everything surround possible appreciate content please buy subscription make next set article possible september article contributed josh triplett many developer user entire industry rely virtualization provided software like xen qemukvm kvmtool qemu run softwarebased virtual machine xen run cooperating paravirtualized os without hardware support current us deployment virtualization rely hardwareaccelerated virtualization provided many modern hardware platform linux support hardware virtualization via kernel virtual machine kvm api article take closer look kvm api using directly set virtual machine without using existing virtual machine implementation virtual machine using kvm need run complete operating system emulate full suite hardware device using kvm api program run code inside sandbox provide arbitrary virtual hardware interface sandbox want emulate anything standard hardware run anything standard operating system need work kvm api used virtual machine implementation demonstration kvm run le complete operating system instead run small handful instruction simply compute print result emulated serial port kvm api provides abstraction hardwarevirtualization feature various platform however software making use kvm api still need handle certain machinespecific detail processor register expected hardware device purpose article set virtual machine using intel vt another platform need handle different register different virtual hardware different expectation memory layout initial state linux kernel includes documentation kvm api documentationvirtualkvmapitxt file documentationvirtualkvm directory article includes snippet sample code fully functional sample program mit licensed program make extensive use err errx function error handling however snippet quoted article include nontrivial error handling definition sample virtual machine full virtual machine using kvm typically emulates variety virtual hardware device firmware functionality well potentially complex initial state initial memory content sample virtual machine run following code mov dx add bl al add al al dx mov n al al dx hlt instruction add initial content al bl register preinitialize convert resulting sum ascii adding output serial port followed newline halt rather reading code object file executable preassemble instruction via gcc objdump machine code stored static array const code mov dx add bl al add al al dx n mov n al al dx hlt initial state preload code second page guest physical memory avoid conflicting nonexistent realmode interrupt descriptor table address al bl contain code segment c base instruction pointer ip point start second page rather extensive set virtual hardware typically provided virtual machine emulate trivial serial port port finally note running realmode code hardware vt support requires processor unrestricted guest support original vt implementation supported protected mode paging enabled emulator like qemu thus handle virtualization software reaching paged protected mode typically o boot feed virtual system state kvm start hardware emulation however processor westmere generation newer support unrestricted guest mode add hardware support emulating real mode big real mode protected mode without paging linux kvm subsystem supported unrestricted guest feature since linux june building virtual machine first need open devkvm kvm open devkvm ordwr ocloexec need readwrite access device set virtual machine open explicitly intended inheritance across exec use ocloexec depending system likely access devkvm either via group named kvm via access control list acl granting access user logged console use kvm api make sure version work early version kvm unstable api increasing version number kvmapiversion last changed linux april got locked stable interface since kvm api change occur via backwardcompatible extension like kernel apis application first confirm version via kvmgetapiversion ioctl ret ioctl kvm kvmgetapiversion null ret err kvmgetapiversion ret errx kvmgetapiversion expected ret checking version may want check extension use using kvmcheckextension ioctl however extension add new ioctl call generally call ioctl fail error enotty exist wanted check one extension use sample program kvmcapusermem required set guest memory via kvmsetusermemoryregion ioctl check would look like ret ioctl kvm kvmcheckextension kvmcapusermemory ret err kvmcheckextension ret errx required extension kvmcapusermem available next need create virtual machine vm represents everything associated one emulated system including memory one cpu kvm give u handle vm form file descriptor vmfd ioctl kvm kvmcreatevm unsigned long vm need memory provide page corresponds physical address space seen vm performance would nt want trap every memory access emulate returning corresponding data instead virtual cpu attempt access memory hardware virtualization cpu first try satisfy access via memory page configured fails due vm accessing physical address without memory mapped kernel let user kvm api handle access emulating memorymapped io device generating fault simple example allocate single page memory hold code using mmap directly obtain pagealigned zeroinitialized memory mem mmap null protread protwrite mapshared mapanonymous need copy machine code memcpy mem code sizeof code finally tell kvm virtual machine spacious new memory struct kvmuserspacememoryregion region slot guestphysaddr memorysize userspaceaddr mem ioctl vmfd kvmsetusermemoryregion region slot field provides integer index identifying region memory hand kvm calling kvmsetusermemoryregion slot replace mapping calling new slot create separate mapping guestphysaddr specifies base physical address seen guest userspaceaddr point backing memory process allocated mmap note always use value even platform memorysize specifies much memory map one page byte vm memory containing code run need create virtual cpu run code kvm virtual cpu represents state one emulated cpu including processor register execution state kvm give u handle vcpu form file descriptor vcpufd ioctl vmfd kvmcreatevcpu unsigned long represents sequential virtual cpu index vm multiple cpu would assign series small identifier systemspecific limit obtainable checking kvmcapmaxvcpus capability kvmcheckextension virtual cpu associated struct kvmrun data structure used communicate information cpu kernel user space particular whenever hardware virtualization stop called vmexit emulate virtual hardware kvmrun structure contain information stopped map structure user space using mmap first need know much memory map kvm tell u kvmgetvcpummapsize ioctl mmapsize ioctl kvm kvmgetvcpummapsize null note mmap size typically exceeds kvmrun structure kernel also use space store transient structure kvmrun may point size mmap kvmrun structure run mmap null mmapsize protread protwrite mapshared vcpufd vcpu also includes processor register state broken two set register standard register special register correspond two architecturespecific data structure struct kvmregs struct kvmsregs respectively standard register include generalpurpose register well instruction pointer flag special register primarily include segment register control register run code need set initial state set register special register need change code segment c default state along initial instruction pointer point reset vector byte top memory want c point instead segment kvmsregs includes full segment descriptor nt need change various flag limit zero base selector field together determine address memory segment point avoid changing initial special register state read change c write back ioctl vcpufd kvmgetsregs sregs sregscsbase sregscsselector ioctl vcpufd kvmsetsregs sregs standard register set initial instruction pointer pointing code relative c addend initial state flag specified architecture starting vm fail set struct kvmregs regs rip rax rbx rflags ioctl vcpufd kvmsetregs regs vm vcpu created memory mapped initialized initial register state set start running instruction vcpu using kvmrun ioctl return successfully time virtualization stop u emulate hardware run loop ioctl vcpufd kvmrun null switch run exitreason handle exit note kvmrun run vm context current thread nt return emulation stop run multicpu vm userspace process must spawn multiple thread call kvmrun different virtual cpu different thread handle exit check run exitreason see exited contain several dozen exit reason correspond different branch union kvmrun simple vm handle treat exitreason error treat hlt instruction sign done since nothing ever wake u back case kvmexithlt put kvmexithlt return let virtualized code output result emulate serial port io port field run io indicate direction input output size port number value pas actual data kernel us buffer mapped kvmrun structure run iodataoffset provides offset start mapping case kvmexitio run iodirection kvmexitioout run iosize run ioport run iocount putchar char run run iodataoffset else errx unhandled kvmexitio break make easier debug process setting running vm handle common kind error kvmexitfailentry particular show often changing initial condition vm indicates underlying hardware virtualization mechanism vt case ca nt start vm initial condition nt match requirement among reason error occur flag register bit set initial value segment taskswitching register fail various setup criterion hardwareentryfailurereason actually distinguish many case error type typically requires careful read hardware documentation case kvmexitfailentry errx kvmexitfailentry hardwareentryfailurereason llx unsigned long long run failentryhardwareentryfailurereason kvmexitinternalerror indicates error linux kvm subsystem rather hardware particular various circumstance kvm subsystem emulate one instruction kernel rather via hardware performance reason coalesce series vmexits io run internalsuberror value kvminternalerroremulation indicates vm encountered instruction nt know emulate commonly indicates invalid instruction case kvmexitinternalerror errx kvmexitinternalerror suberror x run internalsuberror put together sample code build run get following kvmtest kvmexithlt success ran machine code added turned ascii wrote port caused kvmrun ioctl stop kvmexitio emulated printing looped reentered kvmrun stop kvmexitio n third final loop kvmrun stop kvmexithlt print message quit additional kvm api feature sample virtual machine demonstrates core kvm api ignores several major area many nontrivial virtual machine care prospective implementers memorymapped io device want look exitreason kvmexitmmio well kvmcapcoalescedmmio extension reduce vmexits ioeventfd mechanism process io asynchronously without vmexit hardware interrupt see irqfd mechanism using kvmcapirqfd extension capability provides file descriptor inject hardware interrupt kvm virtual machine without stopping first virtual machine may thus write separate event loop devicehandling thread thread running kvmrun virtual cpu process interrupt next available opportunity virtual machine likely want support cpuid modelspecific register msrs architecturespecific ioctl minimize vmexits application kvm api learning debugging virtual machine implementation party trick use devkvm directly virtual machine like qemukvm kvmtool typically emulate standard hardware target architecture instance standard pc support device virtio hardware want emulate completely different type system share little instruction set architecture might want implement new vm instead even within existing virtual machine implementation author new class virtio hardware device want clear understanding kvm api effort like novm kvmtool use kvm api construct lightweight vm dedicated running linux rather arbitrary o recently clear container project us kvmtool run container using hardware virtualization alternatively vm need run o kvmbased vm could instead implement hardwareassisted sandbox virtual hardware device o providing arbitrary virtual hardware device api sandbox sandboxing vm running full virtual machine remains primary use case hardware virtualization seen many innovative us kvm api recently certainly expect future log post comment
337,Lobsters,virtualization,Virtualization,Fun with virtualization,https://virtuallyfun.superglobalmegacorp.com/,fun virtualization,solaris powerpc made window nt powerpc release firepower machine used open firmware said elsewhere raymond chen article arc disk firmware disk work capable booting ibm firmware image dumped enter sandalfoot ibm demystifying prep machine announcement letter boot process ncr scsi controller crystal intel national chipset ic also documented found microsoft jazz mips platform lpx form factor using lot custom ic like apple take highres photo motherboard power macintosh based apple loved weitek power ibm model notably window nt failed install attempt paul thurrott window site july rare ibm machine explicitly mention window nt version might beta developer unsuccessful attempt emulating ppc nt powerpc boot attempt beta final dumped beta powerpc read post final build,following guest post thanks another great writeup powerpc going transform industry history prep platform ibm quite interesting place history window nt also history powerpc architecture general powerpc platform new ibm like vendor notably dec grand plan replace pc clone market helped create powerpc course thanks various factor apple refusal play along launch pentium pro cpu later itanium disaster high cost plan never ended panning later ibm prep machine designed aix linux use sold regular old computer still microsoft microsoft willing port o literally anything hedged bet made mips powerpc alpha port window nt along release japan guest post solaris powerpc made talked history ibm prep platform go read post want initial rundown prep flaw history learned bit window nt port powerpc discovered rare version well everyone prep machine ppc thinkpad run window nt prep machine emulated guaranteed second run o aside aix course ibm also made halfbaked port powerpc well previously mentioned solaris port rarity worth documenting rare prep machine high price ebay turn sale tendency snapped fast think fitting write perhaps depth look prep hardware anyone seen window nt powerpc release commonly accepted window nt first release powerpc hardware even called within microsoft featuring hals early prep machine including moto powerstack rare firepower machine built nt used open firmware power series maybe unobtanium ibm pretty much expect first release ppc polished solid o arguably faster machine aside red boot screen weitek gpu pretty much window nt powerpc like running nt mips alpha interesting software likely run anyhow especially alpha one interesting quirk window nt powerpc report cpu type machine simply report powerpc machine running tell running tell running unsurprisingly visual c work powerpc window nt well shock visual c designed work well nt go many pre compiled program one advantage window nt offer simply faster powerpc much else window nt powerpc quirk wise said elsewhere nt run littleendian mode one ppc os bit window emulation slow need specific prep machine run one interesting series article behind scene port worth reading raymond chen article series discus quirk programming powerpc cpu littleendian mode well installed arc disk us course sm firmware disk work fact qemu one time capable booting ibm firmware image disk something found research however actually limited release window nt dumped real operating system also requires specific model work one interesting history giving unique place among prep machine unable make work end discover document lot interesting feature prep machine enter sandalfoot ibm demystifying prep machine understand hcl weirdness window nt powerpc run mac need take look one machine run machine given several brand name ibm used development platform prep software operating system port also perhaps historically significant model era first powerpc honor go first use pci isa bus month ahead initial pci powermacs prep box also one true biendian machine like prep machine mips magnum hp integrity modern machine os endians available presumably october planned availability date correct ibm released announcement letter codenamed sandalbow power series codenamed sandalfoot nearidentical machine different faceplate boot screen ranged price around designed entrylevel aix workstation bundling copy aix machine aix machine relatively slow fit entrylevel badge quite well thanks power instruction served transition machine later aix machine unlike later powerpc machine featured power instruction allowing run legacy aix power software later powerpc software power series presumably sold wanting prep box window instead since ibm prep hardware obscure undocumented going document best owner ibm model machine feature powerpc similar power mac pci isa slot ibm dakota prep firmware boot process us shelf ncr scsi controller crystal sound chip intel pci bridge nic inserted isa slot mine famous etherlink iii superio chip also shelf national clock ic dallas close relative dallas internal battery least ibm custom ic chipset ic also documented linux dmesg found mine also maxed ram however solder pad chipset limited make wonder system based reference design sort ultrarare upgrade well considering machine wild assume many customer waited instead due superior aix performance idea sound familiar shelf chip risc cpu idea used create two window nt platform microsoft jazz mips platform mips nt box influenced infamously based idea pc mips cpu lesser extent also seen decpc axp eisaisapci based alpha machine designed run window nt dec os crazy undocumented custom hardware expansion bus thrown window favor industry standard fact posted photo motherboard chat full pc nerd stated looked remarkably like normal pc motherboard whole industry would later adopt pci sometimes isa machine cut cost reuse expansion card main difference power series variant boot rom logo chime oem system used boot rom featured powerpc logo beep power series machine featured logo closely resembling powerpc thinkpads complete chime one boot firmware floppy well typing name rom image prompt pressing enter watching reboots firmware loaded ram video filmed demonstrating along quirk including two sm key nice flashy gui sm text based sm along netbooting right nic course video sandalfoot machine lpx form factor machine featuring riser card generic sheetmetal case popular prebuilt machine era lpx form factor wildly popular mid due versatility seeing use ibm dec risc machine various pc builder even apple clone program clone based power macintosh sandalfoot machine also drove home one core goal prep project build powerpc platform using many shelf pc style component possible instead using lot custom ic like apple dug one camera take highres photo motherboard computer illustrate compare motherboard power macintosh even based notice bigger heatsink use fewer custom ic apple loved three main gpu option famous weitek power short higher end option ibm entry level gpu weitek higherend faster gpu beyond scope unsupported prep os aix two video card essentially unmodified diamond pc card bios chip missing sandalfoot machine perhaps important prep machine due role prep o development beta window nt written machine particular one first powerpc machine support prep feature pciisa slot unlike nubus mac released month earlier first ppc box mca based model also often shipped well documented emulated vision video card common gpu family pc time point even included motherboards emulated many pc emulatorsvirtualization program count notably fact successor featured one soldered motherboard window nt failed install attempt oft repeated quote window nt powerpc one paul thurrott window site window nt dubbed power pc release designed around power pc version nt originally supposed ship version ibm constantly delayed power pc chip necessitating separate nt release nt unrewarding release thompson said contrasting daytona daytona completed basically sat around month fixing bug waited ibm finish power pc hardware nt solid release customer loved nt eventually shipped may think accurate thing write simply many prep box late window nt supported motorola powerstack series ibm maybe came july rare firepower machine window nt feature hals sandalfootpower thinkpad rare ibm machine likely sent developer prep machine market made nt release logical even supported server mainly window nt likely limited release testing purpose sandalfoot machine hcl file declares build date october date seems around week two first machine least shipped file modified later folder created november hardware support barren readme file even section dedicated quirk along list supported software emulator might considered beta well announcement letter thinkpad explicitly mention window nt version might beta developer also talk window sdk motorola compiler used build software however real problem getting video card window nt powerpc support weitek gpu came many branded machine neither powerpc support vision video card listed setup option choosing cause txtsetupsif error going assume development unit came video card instead box contained weitek card work aix solaris window nt bought card ebay use nt port readme also feature ominous warning video card revision supported card need vram anything color revision card ordered took risk seeing worked system also removed rom chip system initializes video card rom chip cause system complete selftest display video ibm weitek card lack bios despite scratch card possibly coming ewaste pile card worked fine pc inserted testing purpose ibm system gpu much well supported among nonaix window nt operating system anyhow let talk install process closer detail window nt powerpc installs similar manner solaris powerpc ibm prep machine first floppy disk boot arc choose install machine copy arc bootloaderfirmware hard disk load boot floppy disk also used load arc loader damaged hard disk keep mind ibm machine arc stored rom unlike many arc capable machine done firepower machine something similar using open firmware shim unsuccessful attempt emulating ppc nt exploited veneerexe attempt booting instead using ibm firmware fails emulating hardware trying find quick way boot nt done installer load installs like every nt install check hal reading machine id video hardware machine whatnot prepare installer need ibm according hals video card hcl happen first tried using arc worked greeted hal error bsod first attempted use older arc boot floppy got somewhere bsod changed classic got nothing else using arc gave got io error arc first arc floppy previous arc floppy likely undumped assuming either error due arc mismatch weird firmware mismatchhardware revision mismatch incorrect scsi id solaris style might well weird forgotten trick making work maybe window expert could dig file find weirdness going move onto another obscure ppc rarity powerpc boot attempt beta final recently museum site dumped beta powerpc earlier version powerpc insists sandalfoot machine gpu unlike powerpc disc feature verbose boot featuring kernel us want really see ppc working try read post failed boot throwing error mounting disk something record something least however improvement weitek nothing powerpc screen tried several thing including removing external scsi cd drive fix much also declares unknown pci device video decided try final build final build requires people get working ppc thinkpads decided see machine unsurprisingly absolutely nothing give blank white screen sometimes error trashed cmos anything love trash cmos content absolutely reason especially involved anyhow anticlimatic os threw found reason work whatsoever weeded gpu fault testing window nt finding work fine gpu however seem fewer resolution available weitek card allows change boot screen font making wonder red boot screen gpu driver quirk however changing device id powerpc beta got somewhere got screen hdd failing write formatted hdd fat using arc diskette nuked partition much else changed sure error mean letdown unless os require long lost firmware wondering else causing issue installation either way letdown nothing tried worked spent hour messing everything scsi id using different drive
339,Lobsters,virtualization,Virtualization,Cloudy Gamer: Playing Overwatch on Azure's new monster GPU instances,http://lg.io/2016/10/12/cloudy-gamer-playing-overwatch-on-azures-new-monster-gpu-instances.html,cloudy gamer playing overwatch azure new monster gpu instance,updated dec playing overwatch everything epic quality streaming cloud shabby full article microsoft azure first maxwell architecture kepler pascal gaming article azure gpu instance overwatch thousand mile away hardwareoffloaded cost total total note playing via cloud make suck le gaming part creating azure instance microsoft remote desktop part general configuration making server workstation part nicetohaves part nvidia video card azure forum post ropenstack part audio part zerotier vpn zerotier zerotier website part steam inhome streaming overwatch inhome streaming previous gaming article overwatch desktop app battlenet bnetlauncher part let play pretty detail steam inhome streaming detail pressing bottomleft screen steam inhome streaming also display rolling latency graph bottomright screen overwatch fps debugging output topleft screen steam noninhomestreaming fps counter topright screen envoy job page karanbatta,updated dec removed mention azure preview since ga linked easier method disable monitor updated driver link playing overwatch everything epic quality streaming cloud shabby secret love concept streaming aaa game title cloud playing live computer especially underpowered laptop usually use work done using amazon written full article time thing little different microsoft azure first give access nvidia new gpus completely new beast really set whole new bar framerate image quality based newer maxwell architecture versus kepler card used past hopefully one day get fancy new pascal card going article strongly recommend least skim gaming article grasp concept basically come going launch azure gpu instance configure ultralow latency streaming actually properly play overwatch firstperson shooter server thousand mile away yes seems always need repeat writing article latency fine resolution amazing costeffective forget machine practical obsessed minimalism like hardcore gamertype kneejerk reaction regardless anything omg dont trust anything doesnt zalman watercooled cpu fan hardwareoffloaded networking card sort sunkcosts situation already spent load money gaming rig strongly recommend reading article infuriate note article assume computer similar mine macbook laptop running macos requirement stuff though could linux window client though clientside tooling change around bit figure cost cheapest thing playing like past majority bill probably come bandwidth usage server especially youre mbit also remember upfront cost contrast dramatically thousand dollar end paying similarly speced gaming rig server bandwidth hd storage total total recommended tho video note playing via cloud make suck le gaming part creating azure instance go azure portal use following instruction create new type machine nvidia gpu machine work since virtualize display adapter need enter azure portal left side select virtual machine click add select window server window server datacenter prompted deployment model select resource manager dropdown click create button enter name credential machine make sure though vm disk type hdd location south central u location support right prompted pick size type machine select view top click machine type try panic cost using hour gaming setting screen default fine change network security group none turn diagnostics confirm everything summary screen instance launch note take minute machine running ip address install microsoft remote desktop mac already set machine usernamepassword specified creating instance ip address listed azure additionally select connect admin session machine property unselect start session full screen select resolution sound select play sound unnecessary connected need create new user account account specified earlier necessary driver change autologin step later right click start button select control panel select user account user account manage another account click add user account create new user accout use going forward created click list click change account type select administrator confirm close window disconnect session set new user microsoft remote desktop client side relogin new account need old account anymore feel free remove setting remote desktop part general configuration making server workstation run window update click start button select setting select update security run window update take complete even might appear stuck certain percentage ok keep waiting completes restart machine necessary probably take several minute machine back running turn icmp ping request window firewall useful debugging click start button type window fire select window firewall advanced security select inbound rule left side enable rule file printer sharing echo request able ping server machine laptop figure roundtrip time disable window defender click start button type window defender click setting turn realtime protection turn auto defragmenting drive yes real problem happen middle game click start button type defragment select defragment optimize drive click change setting optimization schedule uncheck run schedule turn performance flag plus turn boot timeout since server right click start button select system select advanced system setting left side performance section click visual effect tab select adjust best performance advanced tab select program click ok back system property dialog click button startup recovery section uncheck time display list operating system since never get see anyways finally select none write debugging information dropdown remove unnecessary scheduled task right click start button select computer management expand task scheduler left side following task scheduler library microsoft window disable task chkdsk disable task diagnosis disable task diskcleanup disable task maintenance disable task systemrestore disable task window defender disable file printer sharing smb client network right click start menu select network connection double click ethernet try distracted alleged gbps connection machine click property uncheck client microsoft network file printer sharing microsoft network disable unnecessary service click start button type service following service double click select startup type disabled stop service turn autologin window useful make faster start playing game rebooting press start button type netplwiz click username uncheck user must enter user name password use computer click ok button enter user password enable file extension showing systemhidden file showing open file explorer click view top put check file name extension geez hiding extension ok part nicetohaves make desktop background black nonpicture minorly speed remote desktop session right click desktop select personalize background select solid color pick black color whatever color heart desire turn notification thing already told want right click start button select control panel click system security finally click security maintenance left side select change security maintenance setting uncheck thing make feel superior people need reminded turn always showing icon system tray right click taskbar select property select notification area click select icon appear taskbar turn always show icon notification area turn combining taskbar icon taskbar cleanup right click taskbar uncheck show task view button show touch keyboard button right click taskbar select property select taskbar button never combine fix time zone crazy sysadmin right click time systray select adjust datetime select time zone make server manager start every time computer open server manager go manage menu select server manager property put check start server manager automatically logon part nvidia video card notice pull device manager driver missing video card get latest nvidia tesla driver sometimes version driver mentioned azure forum go incompatibility problem regular express install reboot completed disable default display adapter window else game choose wrong one right click start button select device manager expand display adapter right click microsoft hyperv video select disable though notice fancy card using remote desktop service window administer everything problem whenever disconnect server remote desktop lock screen need ctrlaltdel able use thing good want game running desktop right click create new shortcut run command tscon dest console name disconnect note sometimes tscon correct one try tscon know work get disconnected running remaining step right click select property click advanced button put checkmark run administrator option next step going forward using link needing log remote desktop keep unlocked desktop available application video card introduces possibility another monitor attached server game get confused one use follow instruction post thanks ropenstack disable monitor nvidia one part audio enable audio window server service default click start button type service double click window audio select automatic startup type soundcard vm free product vbcable handle quite well download extract zip run installer administrator installing window still say installed audio device worry steam pick also see device manager part zerotier vpn azure like others still fresh current implementation enough use need force disable window otherwise software might try tunnel ruin everything zerotier example try open administrator powershell click start right click window powershell run administrator run following state disabled setnetteredoconfiguration type disabled setnetisatapconfiguration state disabled steam inhome streaming work properly need set vpn strongly recommend zerotier since best ensuring peertopeer connection machine rerouting server know oh worry using free also super ethical company opensource large amount core software go zerotier website create account create network configuring network setting necessary recommend setting access control none make configuration easier distribute network id autoassign select autoassign range pick ip range vpn notice managed route updated ethernet frame type unselect unnecessary since steam support right make sure though write network id go install zerotier server window download link installing select approve everything including network adapter end come zerotier one window put network id bottom click join click yes window prompt repeat installation zerotier except laptop mac download link join network zerotier website network able see ip address two machine test tunnel work one ping managed ip ping time around pinged physical ip machine ideally ping time way lower one looking forward azure gpu machine closer live optimize network traffic packet size steam inhome streaming us might need adjust mtu serverside figured number trial error using wireshark client side see supposed one streaming packet ended one big packet one tiny one recommend rebooting quirky network change note zerotier always reconnect system ever need make change use zerotier one system configure network change part steam inhome streaming overwatch install steam yes even though eventually want play overwatch need steam inhome streaming work click internet explorer button task bar go http steampoweredcom download install configure server steam save password autologin steam guard need put code email account beta participation select steam beta update restart steam friend automatically sign friend start steam ingame ingame fps counter topleft optional like since raw fps machine inhome streaming enable streaming inhome streaming advanced host option check following adjust resolution improve performance enable hardware encoding enable hardware encoding nvidia gpu prioritize network traffic note everything else unchecked messed nvfbc steam fullscreen capture seems superior time course mess later trying debug game try use nvfbc please see previous gaming article instruction get set need run nvfbcenable interface favorite window library interface notify addition change uncheck let install overwatch download install blizzard upsellgalore desktop app battlenet launcher thingy log battlenet account select overwatch left side install wait finish downloadinginstalling take minute surprisingly fast overwatch particular issue quitting properly launched steam fortunately tool bnetlauncher built help properly startstop game basically keep official battlenet client running next step use launcher feel free put anywhere including desktop stream game use steam inhome streaming functionality since mature gamestreaming tech aware good news add nonsteam game like overwatchbnetlauncher work great steam click add bottom left corner window select add nonsteam overwatch list add way instead use button select bnetlauncher app previous step click add selected program button added game library right click bnetlauncher select property set name overwatch part target add pro doublequotes computer steam configure inhome streaming enable streaming inhome streaming client option beautiful inhome streaming client option advanced client option limit bandwidth mbit set unlimited work inhome streaming client option advanced client option limit resolution display resolution inhome streaming client option advanced client option enable hardware decoding inhome streaming client option advanced client option display performance information part let play make sure steam client running laptop ther server fully exit steam reopen second see inhome streaming popup saying two machine see eachother use disconnect shortcut earlier close remote desktop steam client click play button hopefully game load overwatch go option set graphic quality epic hit apply button restart game happy gaming forget stop azure instance done playing expensive stop vm without losing config want delete everything make sure delete resource group azure pretty detail steam inhome streaming detail pressing bottomleft screen see sort interesting stats via nvenc latency around azure spread tech around datacenters thing really go term latency solid though action easily hit steam inhome streaming also display rolling latency graph bottomright screen dark blue line time took encode server side light blue line time took transfer client side red line decoding time display latency overwatch fps debugging output topleft screen steam noninhomestreaming fps counter topright screen thanks reading hopefully help daytoday job envoy startup san francisco building pretty cool product rethinking typically outdated process workplace hiring fun engineer passion building rethought tech check job page definitely mention streaming game shoutout karanbatta helping get started gpu machine
340,Lobsters,virtualization,Virtualization,The Open Guide to Amazon Web Services,https://github.com/open-guides/og-aws,open guide amazon web service,open guide amazon web service credit contributing guideline table content purpose aws general special topic legal figure table open guide getting started guide standard aws reference stack overflow several engineer license disclaimer please help early inprogress draft joining slack channel contributing guide scope brief practical current thoughtful venue legend raymond metaphor general information use aws aws cloud computing infrastructureasaservice platformasaservice softwareasaservice opex capex prepurchased contract billion main reason use aws cost entire section v service sharply growing aws v cloud provider estimate gartner report google cloud platform vision speech natural language spotify migrated quora global default share one gcp vpc peer gcp vpcs microsoft azure china alibaba cloud aliyun dropbox migrated digital ocean rackspace aws v paas platformasaservice heroku aws v web hosting web hosting service aws v managed hosting managed hosting complexity geographic location dozen geographic location region edge location current list lockin danger cloud jail cost spiral combining aws cloud provider hybrid cloud hybrid deployment ibm bluemix microsoft azure netapp emc major customer list customer list customer list customer snapchat service use hundred immature unpopular service mustknow infrastructure iam route vpc cloudfront cloudwatch managed service rds emr elasticsearch elasticache optional important infrastructure lambda cloudtrail cloudformation elastic beanstalk efs ec eks ecr config xray specialpurpose infrastructure dynamodb glacier kinesis sqs redshift quicksight s api gateway iot waf km inspector trusted advisor certificate manager fargate compound service machine learning lex polly rekognition data pipeline swf lumberyard mobileapp development sn cognito device farm mobile analytics mobile hub enterprise service appstream workspace workdocs workmail directory service direct connect storage gateway service catalog probablydontneedtoknow service snowball snowmobile codecommit stackshare codepipeline codedeploy opsworks aws plain english tool service market landscape file issue common concept general reference region high availability physically separate one another may span multiple physical data center endpoint table amazon resource name arns service matrix dynamodb weak aws product maturity release release note table compliance aws compliance pci ds level soc hipaa iso shared responsibility model china generally accessible inside china getting help support forum discussion forum premium support premium support account manager contact consulting managed service consulting partner managed service partner aws professional service consulting service restriction note limit obtaining current limit usage page tool aws term service safetycritical system clause related topic openstack learning career development certification getting certified practical overview faq training certification cloud guru cloudacademy linux academy need certification summit invent managing aws managing infrastructure state change visibility automation flexibility aws configuration management aws console aws console think use console commandline tool aws commandline interface aws write simple bash script awsshell saw migrate awsshell apis sdks sdks go io java javascript python ruby php short list awesomeaws list support c still new retry logic exponential backoff boto amazon sdk python feature general visibility tagging resource allocate cost raised enforce tagging cloud custodian managing server application aws v server configuration philosophy twelvefactor app pet v cattle like cattle pet immutable infrastructure server configuration management large set puppet chef ansible saltstack container aws docker microservice architecture ec ec section eks eks section visibility instance metadata service use log management service sumo logic splunk cloud scalyr logdna loggly elasticsearch logstash kibana elastic stack graylog track graph metric librato keenio datadog prometheus graphite grafana tip managing server timezone setting server set timezone server utc ubuntu centos amazon provides elusive timezone issue ntp accurate time configure ntp correctly like testing immutable infrastructure simian army chaos monkey chaoslambda lambda security iam security iam basic homepage user guide faq aws security blog iam iam identity permission policy password access key complete list access key prefix multifactor authentication mfa policy language iam policy nutshell managed policy principle least privilege permission hierarchy policy simulator tool tool security iam tip use iam account user beginning active directory federation enable mfa io android use root user account turn cloudtrail enable cloudtrail log management service use iam role define assign role instance instance metadata best practice list best practice iam reference interactive reference iam action effect resource multiple account research throttle call inspector trusted advisor use km managing key km aws waf security auditing security monkey export audit security setting secconfigpy talk security iam gotchas limitation share user credential instance metadata throttling instance metadata service expire dynamic metadata nt check aws credential secret git repository gitsecrets basic homepage developer guide faq pricing multipart support object bucket key value select metadata uris hadoop system v glacier eb efs glacier eb efs comparison table tip permission dow jones verizon iam policy identity authentication management bucket policy sample bucket policy access control list predefined access control group user everyone grant permission general public authenticated user grant permission anyone aws account also open general public log delivery group used aws write log bucket requester pay permission aws config rule ensure bucket secure bucket naming whichever region restriction dns compliant cause certificate mismatch versioning optional versioning support durability good record pricing storage request transfer reduced redundancy infrequent access reduced redundancy storage rrs effectively deprecated infrequent access ia infrequent access calculator intelligent tiering one zone ia glacier comparison table performance multipart uploads large downloads list pagination key prefix longer necessary directconnect transfer acceleration pay commandline application aws gui application aws console transmit cyberduck cloudfront transfer acceleration static website hosting static website hosting option http redirect support public content custom domain ssl custom domain cloudfront allows serve custom domain http sni work outdated browsersoperating system configure cors aws example include version hash filename data lifecycles careful infrequent access data consistency data consistency atomic new object readafterwrite consistency update object eventual consistency immutable slow update hour filesystem riofs goofy discussion objectivefs discussion vpc endpoint crossregion replication feature v aug enable dualstack event notification sn notification sqs message aws lambda function bucket event discussion gotchas limitation limit request increase sla multipart uploads etag header case general incomplete multipart upload cost storage charge amazon others u standard region longer case authentication version region support latest authentication authentication signature storage durability availability price glacier eb efs virginia region sept glacier ia rrs standard eb efs instance store boldface pricing sla faq rrs info glacier pricing eb availability durability eb pricing efs pricing sla basic homepage documentation faq pricing virtual private server linux bsd window operating system xen nitro instance pricing cost management aws free tier ondemand spot market reserved instance network performance benchmarking alternative lockin alternative use amazon linux amazon linux red hat enterprise linux rhel centos others skeptical amazon linux docker image amazon linux cost section tip picking region region available region vary region instance type year amazon list turn lambda cloudwatch cloudcycler gorillastack dedicated instance dedicated host preferable bit v bit hvm v pv hardware virtual machine hvm paravirtual pv hvm becoming standard instance type matrix operating system amazon linux limit list use termination protection enable termination protection ssh key management ssh key pair add individual ssh key gpu support three type deep learning ami deep learning ami spot instance offer significant saving gotchas limitation read newer instance type make sure ssh key permission correct ephemeral drive rate limited filter fixed performance instance burstable performance instance limited kb aws service limit currently documented noisy neighbor problem user frustration detailed explanation kernel determine steal time properly designing cloud architecture introduced dedicated tenancy noisy neighbor problem cloudwatch cloudwatch basic homepage documentation faq pricing cloudwatch metric dimension alarm dashboard using cloudwatch event event rule triggered event using cloudwatch log detailed monitoring detailed monitoring billed cloudwatch cloudwatch alternative lockin newrelic datadog sumo logic zabbix nagios ruxit elastic stack statsd collectd graphite splunk sumo logic loggly logdna logstash papertrail elastic stack cloudwatch tip cloudwatch gotchas limitation hypervisor one metric alarm highresolution option blog post introducing feature month amis ami basic user guide amis aws marketplace ubuntu ami finder amis amazon linux ami tip virtualization type ebsbacked hvm snapshotting state amis backed eb storage amis per region ami copy use tag packer cloud access program gold image ami gotchas limitation amazon linux package version default cloudinit default complete reference cloudinit auto scaling auto scaling basic homepage user guide faq pricing auto scaling group asgs scaling policy additional charge auto scaling tip configured terminate auto scaling gotchas limitation replaceunhealthy setting replaceunhealthy setting eb eb basic homepage user guide faq pricing eb comparison eb tip raid raid drive increased performance post eb io characteristic performance tip provision iop eb gotchas limitation sla volume type official documentation efs efs basic homepage user guide faq pricing efs higher throughput comparison table much eb performance burstcreditbalance metric percentiolimit metric mount target different subnets availability zone efs tip user group level permission sharing efs filesystems security efs gotchas limitation supported limit mounted premise load balancer load balancer basic load balancer tip clbs alb many ip scaling contact amazon client ip xforwardedfor using load balancer deploying rotating certificate retaining arn load balancer gotchas limitation fixed external ip ip range java setting adjust properly normally resolve backends startup way get around troubleshooting clb clb basic homepage user guide faq pricing clb tip best practice article clb gotchas limitation cause enable crosszone load balancing apex dns name http keepalives network acl dualstack dns name alb alb basic alb tip http hostbased routing http pathbased routing alb gotchas limitation support sni elastic beanstalk elastic beanstalk basic homepage developer guide faq pricing eb elastic beanstalk tip managed platform update elastic beanstalk gotchas limitation ebextensions nginx config elastic ip elastic ip basic documentation faq pricing elastic ip elastic ip tip prefer load balancer elastic ip load balancer request hourly fee extra charge elastic ip gotchas limitation officially way bring ip glacier glacier basic homepage developer guide faq pricing glacier hour officially revealed glacier deep archive glacier tip ship glacier gotchas limitation cost per request take time reach breakeven point rds rds basic rds tip compose instaclustr parameter group changed different timezone rds gotchas limitation supported feature extension configured default db migration rds database size limited rds mysql mariadb rds mysql mariadb basic rds mysql mariadb tip binary log run backup instance performance schema performance schema mysql v mariadb v aurora aurora may mariadb community fork likely edge mysql rds mysql mariadb gotchas limitation super privilege stored procedure replication instance break az failovers db parameter group avoidtemporalupgrade rds postgresql rds postgresql basic rds postgresql tip subscriber publisher extension rds postgresql gotchas limitation extension rds sql server rds sql server basic rds sql server tip rds sql server gotchas limitation database per instance rds aurora rds aurora basic rds aurora mysql rds aurora mysql basic notable new feature aurora cluster region rds aurora mysql tip connection aurora scale well multiple cpu lowdowntime migration aurora cluster mysql another aurora cluster equivalent multiaz backup rds aurora mysql gotchas limitation aurora based mysql aurora based mysql rds aurora postgresql rds aurora postgresql basic rds aurora postgresql tip rds aurora postgresql gotchas limitation elasticache elasticache basic homepage user guide redis user guide memcached faq pricing elasticache memcached redis elasticache tip engine instance type autodiscovery elasticache gotchas limitation scaling dynamodb dynamodb basic dynamodb alternative lockin cassandra dynamodb tip dynamodb gotchas limitation data pipeline unfortunate consequence resource limit time series data allow fine grained policy ec ec basic homepage developer guide faq pricing ec container aws elastic beanstalk docker ecr clb alb hitchhiker guide aws ec docker ec tip log driver driver fluentd enabled default blog convox commentary information optimizing ec disk cleanup ec alternative lockin eks eks basic homepage user guide faq pricing container aws awsiamauthenticator calico eks tip kubernetes quickstart eks alternative lockin ec kubernetes google cloud aws digital ocean azure nomad eks gotchas limitation clusterautoscaler prometheus footnote http docsawsamazoncomekslatestuserguidecreatekubeconfightml http fargate fargate basic homepage faq pricing fargate fargate tip fargate fargate alternative lockin azure container instance fargate gotchas limitation lambda lambda basic homepage developer guide faq pricing lambda serverless architecture aws lambda tip container cpu power improved significantly timeframe recent improvement provisioned concurrency visualization call graph timed cloudwatch event dead letter queue dlq sqs lambda alternative lockin lambda gotchas limitation sam local versioning alias proguard resource limit mb mb mb lambda code sample fanout aws limit monitor using lambda lambda ec worker pattern secure pet store awslambdalist api gateway api gateway basic homepage developer guide faq pricing api gateway api gateway alternative lockin kong tyk api gateway tip swagger aws cognito custom authorizer api gateway gotchas limitation forum post serverless application model step function step function basic step function tip task activity data step function gotchas limitation iterating loop using lambda continue new execution route route basic route alternative lockin becoming standard option ultradns dyn dnsmadeeasy solvedns report route tip alias resource record set zone file latencybased routing bastion account route gotchas limitation hybrid cloud dns solution cloudformation cloudformation basic homepage developer guide faq pricing cloudformation stack json yaml infrastructure code capability additional charge cloudformation alternative lockin terraform azure openstack pulumi cloudformation tip lambda custom resource documentation template designer stacksets sam stack policy termination protection template reference troposphere aws openstack error awacs stacker aws cloudformation stack supported directly physical id output cloudformation template recent addition crossstack reference send sn notification conditionals parameter passed version control cloudformation template cloudformation gotchas limitation varying state crossregion sn subscription continueupdaterollback command resourcestoskip drift detection offer trick convox request per minute vpcs network security security group vpc basic homepage user guide faq security group pricing vpc migrate vpc network security tip security group port hygiene migrating classic article vpn bastion host openvpn official ami openvpn installer script vpc flow log available vpc egressonly internet gateway privatelink homepage user guide pricing interface vpc endpoint vpc endpoint service vpc network security gotchas limitation vpc endpoint dns filtering classiclink overlap data transfer vpcs subnet group default vpc recreate via cli console replacing compromised credential nat instance alternative nat gateway data processing charge km km basic homepage developer guide faq pricing km service integration integrates aws service encryption apis encrypt decrypt api data key generatedatakey auditing access key policy iam policy allows user encrypt decrypt specific key km tip aws presentation aws whitepaper blog convox km gotchas limitation data key cloudtrail lookup event api reduce risk key becoming unmanagable cloudfront cloudfront basic cloudfront alternative lockin highly fragmented market cloudfront tip supported supported must support tl sni since allowed http method usually le support ssl sni extension tl support invalidation ilya grigorik table cache query string enable compression cloudfront gotchas limitation enable host header forwarding ongoing discussion connection origin server continue use directconnect directconnect basic directconnect tip partnering relationship gbps gbps redshift redshift basic redshift alternative lockin market landscape business intelligence redshift tip primitive data type list unsupported postgres type executed lead node cluster parameter group quora top performance tuning technique amazon redshift amazon redshift utils vacuum vacuum analyze analyze vacuum schema utility schema utility readme column compression automatic compression copy distribution key sortkey distribution strategy distribution key distribution style even key redshift gotchas limitation wlm workload management reserved keywords delta encoding full list result significant performance impact choosing sort key emr emr basic homepage release guide faq pricing emr hadoop hbase spark emr alternative lockin emr tip version use post mrjob qubole data service emr gotchas limitation emr cost section cost management blog post put request standard rate log aggregation kinesis stream kinesis stream basic homepage developer guide faq pricing kinesis stream shard page kinesis stream alternative lockin apache kafka instance kinesis stream tip kcl kinesis stream gotchas limitation read per second blog post kinesis stream included free tier kinesis firehose kinesis firehose gotchas limitation device farm device farm basic homepage developer guide faq pricing device farm device farm tip aws mobile blog per device minute unmetered plan device farm gotchas limitation page mobile hub mobile hub basic mobile hub api gateway cloudfront device farm dynamodb lambda mobile hub tip console mobile hub gotchas limitation issue iot iot basic iot example device thing device gateway quickstart slide presentation iot term iot thing registry device shadow iot thing type iot certificate register ca certificate authority aws iot policy iot rule presentation summarizes design pattern iot rule diagram iot greengrass homepage greengrass greengrass group diagram iot alternative lockin general availability feb android thing weave protocol iot tip getting started button aws iot button connection protocol secure mqtt websockets http device security justintime registration combining service screencast testing tool mosquitto broker mqtt load simulator iot gotchas limitation iot protocol mqtt three possible level qos mqtt qos presentation nuance connecting iam user role iot policy device security topic aws iot gateway azure iot gateway limit limit iot code sample s s basic homepage documentation faq pricing s s tip bounce handling many bounce credential s credential smtp credential s gotchas limitation internet access forwarding rule send email s certificate manager certificate manager basic homepage user guide faq pricing certificate manager validation via dns renew certificate manager alternative lockin certificate manager tip supported service load balancer cloudfront api gateway elastic beanstalk certificate manager gotchas limitation certificate manager iot way note waf waf basic homepage documentation faq pricing received waf tip waf gotchas limitation opsworks opsworks basic homepage documentation faq stack chef automate puppet enterprise chef puppet opsworks stack opsworks chef automate chefclient cookbook opsworks puppet enterprise chef server version berkshelf bitlancer article opsworks alternative lockin opsworks tip http learnchefio http learnpuppetcom opsworks gotchas limitation batch batch basic homepage documentation faq pricing aws batch job spot instance docker container registry job definition compute environment job queue ec batch tip ec cluster iam role policy efs sqs sqs basic least sqs alternative lockin sqs tip various sqs metric sqs gotchas limitation sn sn basic sn sm email sqs http protocol invoke lambda function sn alternative lockin kafka notification hub pubsub sn v sqs sn tip fanout webhooks backoff support sqs queue autoscaling group cloudwatch alarm sn gotchas limitation sseenabled sqs receive high availability high availability high availability tip region availability zone az multiple region high scalability blog multiple az aws diagram great eb failure crossaz traffic cost eb v instance storage use understand clbsalbs high availability gotchas limitation az naming crossaz traffic billing cost management billing cost visibility free tier aws activate certain fund accelerator billing alert granular way cost explorer tool billing report teevity ice dockerice security monkey cloud custodian aws simple monthly calculator thirdparty service cloudability cloudhealth technology parkmycloud market landscape trusted advisor tagging cost visibility tag resource set billing allocation appropriately enable detailed billing report consolidated billing aws organization aws data transfer cost high availability cost management bid advisor spot instance spot instance spike price history spot instance metadata termination cloudwatch event spot fleet spot fleet spot usage best practice application profiling spot price monitoring intelligence optimizes cost maximizes availability offer predictable performance spot machine resource utilization spot management gotchas lifetime guarantee twominute warning api return data lifecycle management reserved instance standard convertible reserved instance marketplace auto scaling cloud access program gold image reading aws well architected framework guide awesome microservices fast yet high performance browser networking disclaimer license creative common attributionsharealike international license,open guide amazon web service join u credit contributing guideline table content purpose aws general special topic legal figure table open guide lot information aws already written people learn aws reading blog getting started guide referring standard aws reference nonetheless trustworthy practical information recommendation easy come aws documentation great sprawling resource time read fully include anything official fact omits experience engineer information blog stack overflow also consistently date guide engineer use aws aim useful living reference consolidates link tip gotchas best practice arose discussion editing beer several engineer used aws extensively using guide please read license disclaimer please help early inprogress draft first attempt assembling information far comprehensive still likely omission error please help joining slack channel like talk aws general even question discussion help community guide improvement contributing guide guide open contribution unlike blog keep improving like open source effort combine effort also review ensure high quality scope currently guide cover selected core service load balancer eb iam partial detail tip around service expect expand tutorial rather collection information read return beginner experienced goal guide brief keep dense use link practical basic fact concrete detail advice gotchas folk knowledge current keep updating anyone contribute improvement thoughtful goal helpful rather present dry fact thoughtful opinion rationale welcome suggestion note opinion based real experience extremely valuable believe possible guide format unlike venue guide sponsored aws awsaffiliated vendor written engineer use aws legend mark standardofficial aws page doc important often overlooked tip serious gotcha used risk time resource cost significant critical security risk mistake significant financial cost poor architectural choice fundamentally difficult correct regular gotcha limitation quirk used consequence thing working breaking scaling gracefully undocumented feature folklore relatively new perhaps immature service feature performance discussion lockin product decision likely tie aws new significant way later moving nonaws alternative would costly term engineering effort alternative nonaws option cost issue discussion gotchas mild warning attached full solution opinionated framework may take significant time understand andor might fit need exactly opposite point solution cathedral nod raymond metaphor color indicate basic tip gotchas respectively area correction improvement needed possibly link issue help general information use aws aws dominant public cloud computing provider general cloud computing refer one three type cloud public private hybrid aws public cloud provider since anyone use private cloud within single usually large organization many company use hybrid private public cloud core feature aws infrastructureasaservice iaa virtual machine supporting infrastructure cloud service model include platformasaservice paas typically fully managed service deploy customer application softwareasaservice saas cloudbased application aws offer product fit model business term infrastructureasaservice variable cost model opex capex though prepurchased contract still capex aws ttm revenue billion according earnings result slide linked deck roughly amazoncom total revenue slide deck ttm period main reason use aws company building system product may need scale technical knowhow want flexible tool significantly tied different infrastructure already internal regulatory compliance reason use public cloudbased solution microsoftfirst tech stack specific reason use google cloud afford manage negotiate somewhat higher cost aws likely good option company reason might point situation service preferable practice many tech startup well number modern large company already benefit using aws many large enterprise partly migrating internal infrastructure azure google cloud aws cost billing cost management big topic entire section v service user aws familiar aws flagship virtual server product possibly others like clbs aws product extend far beyond basic iaa often company properly understand appreciate many aws service applied due sharply growing number service novelty complexity branding confusion fear proprietary aws technology although bit daunting important technical decisionmakers company understand breadth aws service make informed decision hope guide help v cloud provider aws dominant iaa provider market share estimate significant competition alternative better suited company gartner report good overview major cloud player google cloud platform gcp arrived later market aws vast resource used widely many company including large one gaining market share aws service similar analogous service gcp vice versa particular gcp offer advanced machine learningbased service like vision speech natural language apis common switch running happen spotify migrated aws google cloud discussion quora relative benefit particular note vpcs gcp global default subnetworks per region aws vpcs live within particular region give gcp edge designing application georeplication beginning also possible share one gcp vpc multiple project roughly analogous aws account aws peer also possible peer gcp vpcs similar manner done aws microsoft azure de facto choice company team focused microsoft stack placed significant emphasis linux well china aws footprint relatively small market dominated alibaba alibaba cloud formerly called aliyun company large scale may want reduce cost managing infrastructure example dropbox migrated infrastructure cloud provider digital ocean offer similar service sometimes greater ease use personalized support lower cost however none match breadth product mindshare market domination aws enjoys traditional managed hosting provider rackspace offer cloud solution well v paas goal put single service something relatively simple trying minimize time managing operation engineering consider platformasaservice heroku aws approach paas elastic beanstalk arguably complex especially simple use case v web hosting main goal host website blog expect building app complex service may wish consider one myriad web hosting service v managed hosting traditionally many company pay managed hosting provider maintain physical server build deploy software top rented hardware make sense business want direct control hardware due legacy performance special compliance constraint usually considered old fashioned unnecessary many developercentric startup younger tech company complexity aws let build scale system size largest company complexity service used scale requires significant depth knowledge experience even simple use case often require knowledge right aws simpler environment like heroku digital ocean guide may help geographic location aws data center dozen geographic location known region europe east asia north south america australia india also many edge location globally reduced latency service like cloudfront see current list region edge location including upcoming one infrastructure need close physical proximity another service latency throughput reason example latency ad exchange viability aws may depend location use aws important aware depending aws service equivalent elsewhere lockin may completely fine company significant risk important business perspective make choice explicitly consider cost operational business continuity competitive risk tied aws aws dominant reliable vendor many company comfortable using aws full extent others tell story danger cloud jail cost spiral generally aws service use lockin aws engineering resource time money take change provider future basic service like virtual server standard database usually easy migrate provider premise others like load balancer iam specific aws close equivalent provider key thing consider whether engineer architecting system around specific aws service open source relatively interchangeable example lambda api gateway kinesis redshift dynamodb substantially equivalent open source commercial service equivalent rds mysql postgres emr elasticache le see noted combining aws cloud provider many customer combine aws nonaws service example legacy system secure data might managed hosting provider system aws company might use another provider everything else however small startup project starting fresh typically stick aws google cloud hybrid cloud larger enterprise common hybrid deployment encompassing private cloud onpremises server aws enterprise cloud provider like ibmbluemix microsoftazure netapp emc major customer us aws google cloud aws list customer includes large number mainstream online property major brand netflix pinterest spotify moving google cloud airbnb expedia yelp zynga comcast nokia bristolmyers squibb azure list customer includes company nbc universal honeywell inc google cloud list customer large well includes mainstream site snapchat best buy domino sony music service use aws offer lot different service hundred last count customer use service heavily service lightly rest service use depends use case choice differ substantially company company immature unpopular service aws service sound promising mean use service narrow use case mature overly opinionated limitation building solution may better try give sense breaking product category mustknow infrastructure typical small mediumsize user focus following service first manage use aws system likely need know least little even use learn enough make choice intelligently iam user account identity need think account early virtual server associated component including storage file route dns domain registration vpc virtual networking network security colocation automatically use cloudfront cdn hosting content cloudwatch alert paging monitoring managed service existing software solution could run managed deployment rds managed relational database managed mysql postgres amazon aurora database emr managed hadoop elasticsearch managed elasticsearch elasticache managed redis memcached optional important infrastructure key useful infrastructure component le widely known used may legitimate reason prefer alternative evaluate care sure fit need running small fully managed task serverless cloudtrail aws api logging audit often neglected important templatized configuration collection aws resource beanstalk fully managed paas deployment packaged java net php nodejs python ruby go docker application network filesystem compatible docker containercluster management note docker also used directly without ec eks kubernetes docker containercluster management hosted private docker registry aws configuration inventory history change notification trace analysis debugging distributed application microservices specialpurpose infrastructure service focused specific use case evaluated apply situation many also proprietary architecture tend tie aws lowlatency nosql keyvalue store slow cheap alternative streaming distributed log service message queueing service data warehouse business intelligence service s send receive email marketing transaction gateway proxy manage secure api call manage bidirectional communication http websockets mqtt aws client often necessarily thing like appliance sensor web firewall cloudfront deflect attack store manage encryption key securely inspector security audit trusted advisor automated tip reducing cost making improvement manager manage ssltls certificate aws service docker container management backend ec eks compound service similarly specific fullblown service tackle complex problem may tie usefulness depends requirement large significant need may already managed inhouse system engineering team machine learning machine learning model training classification lex automatic speech recognition asr natural language understanding nlu polly texttospeech engine cloud rekognition service image recognition pipeline managed etl service managed state tracker distributed polyglot job workflow game engine mobileapp development sn manage app push notification enduser notification user authentication via facebook twitter etc device farm cloudbased device testing mobile analytics analytics solution app usage hub comprehensive managed mobile app framework enterprise service relevant significant corporate cloudbased hybrid need many smaller company startup use solution like google apps box larger company may also nonaws solution appstream window apps cloud access many device workspace window desktop cloud access many device workdocs formerly zocalo enterprise document sharing workmail enterprise managed email calendaring service directory service microsoft active directory cloud direct connect dedicated network connection office data center aws storage gateway bridge onpremises cloud storage service catalog service approval compliance probablydontneedtoknow service bottom line informal polling indicates service broadly used often good reason snowball want ship petabyte data amazon using physical appliance read snowmobile appliance great got exabyte scale data get amazon nothing beat tractor trailer full drive codecommit git service probably already using github solution stackshare informal stats continuous integration likely another solution already deployment code server likely another solution management deployment using chef november puppet enterprise aws plain english offer friendly explanation different service tool service market landscape enough cloud big data enterprise company product keep market landscape assembled landscape service far complete try emphasize service popular aws practitioner service specifically help aws complementary tool almost anyone using aws must learn suggestion improve figure please file issue common concept aws general reference cover bunch common concept relevant multiple service aws allows deployment region isolated geographic location help reduce latency offer additional redundancy region contain availability zone az typically first tool choice high availability az physically separate one another even within region may span multiple physical data center connected via low latency link natural disaster afflicting one affect others service api endpoint region endpoint differ service service service available region listed table amazon resource name arns specially formatted identifier identifying resource start arn used many service particular iam policy service matrix many service within aws least compared google cloud offering internal google service often time could assemble thing open source software table effort listing rough correspondence remember table imperfect almost every case subtle difference feature service aws google cloud google internal microsoft azure provider open source build openstack virtual server compute engine gce virtual machine digitalocean openstack nova paas elastic beanstalk app engine app engine web apps heroku appfog openshift meteor appscale cloud foundry convox serverless microservices lambda api gateway function function apps pubnub block webtask kong tyk qinling container cluster manager ec eks fargate container engine kubernetes borg omega container service kubernetes mesos aurora zun object storage cloud storage gfs storage account digitalocean space swift hdfs minio swift block storage eb persistent disk storage account digitalocean volume nfs cinder sql datastore rds cloud sql sql database mysql postgresql trove store nosql well sharded rdbms cloud spanner spanner azure database postgresql hyperscale citus crateio cockroachdb bigtable cloud bigtable bigtable hbase keyvalue store column store dynamodb cloud datastore megastore table documentdb cassandra couchdb rethinkdb redis memory cache elasticache app engine memcache redis cache memcached redis search cloudsearch elasticsearch managed search algolia qbox elastic cloud elasticsearch solr data warehouse redshift bigquery dremel sql data warehouse oracle ibm sap hp many others greenplum business intelligence quicksight data studio power bi tableau lock manager dynamodb weak chubby lease blob storage account zookeeper etcd consul message broker sqs sn iot pubsub service bus rabbitmq kafka streaming distributed log kinesis dataflow event hub kafka stream apex flink spark streaming storm mapreduce emr dataproc mapreduce hdinsight datalake analytics qubole hadoop monitoring cloudwatch stackdriver monitoring borgmon monitor prometheus tracing xray stackdriver trace monitor application insight datadog new relic epsagon zipkin jaeger appdash metric management borgmon tsdb application insight graphite influxdb opentsdb grafana riemann prometheus cdn cloudfront cloud cdn cdn akamai fastly cloudflare limelight network apache traffic server load balancer clbalb load balancing gfe load balancer application gateway nginx haproxy apache traffic server dns dns dns bind email s sendgrid mandrill postmark git hosting codecommit cloud source repository visual studio team service github bitbucket gitlab user authentication cognito firebase authentication azure active directory oauthio mobile app analytics mobile analytics firebase analytics hockeyapp mixpanel mobile app testing device farm firebase test lab xamarin test cloud browserstack sauce lab testdroid managing ssltls certificate certificate manager let encrypt comodo symantec globalsign automatic speech recognition natural language understanding transcribe asr lex nlu cloud speech api natural language api cognitive service aylien text analysis api ambiverse natural language understanding api stanford core nlp suite apache opennlp apache uima spacy texttospeech engine cloud polly nuance vocalware ibm mimic espeak marytts image recognition rekognition vision api cognitive service ibm watson clarifai tensorflow opencv ocr text recognition textract document rekognition photograph cloud vision api computer vision api tesseract language translation translate translate translator text api apertium file share sync workdocs google doc onedrive dropbox box citrix file share owncloud machine learning sagemaker deeplens ml ml engine auto ml ml studio watson ml data loss prevention macie cloud data loss prevention azure information protection please help fill table selected resource detail chart aws product maturity release important know maturity aws product mostly complete list first release date link release note recently released service first service available region see table footnote excludes use amazon api gateway caching rds mysql oracle postgresql engine mysqlcompatible aurora edition excludes lambda edge includes system manager includes elastic block storage eb includes elastic load balancing includes transfer acceleration includes rds mysql oracle postgresql sql server mariadb includes autoscaling data analytics stream video stream firehose kubernetes us custom cli podservice management called kubectl aws cli handle kubernetes master concern iot core includes device management greengrass elasticache redis snowball snowball edge compliance many application strict requirement around reliability security data privacy aws compliance page detail aws certification include pci ds level soc hipaa iso security cloud complex topic based shared responsibility model element compliance provided aws provided company several thirdparty vendor offer assistance compliance security auditing aws substantial need area assistance good idea inside china aws service outside china generally accessible though time breakage service also aws service inside china getting help support forum many problem worth searching asking help discussion forum see known issue premium support aws offer several level premium support first tier called developer support let file support ticket hour turnaround time start monthly spend reach around change surcharge bill higherlevel support service quite expensive increase bill many large effective company never pay level support usually helpful midsize larger company needing rapid turnaround deeper perplexing problem keep mind flexible architecture reduce need support relying aws solve problem often example easily reprovision new server may urgent solve rare kernellevel issue unique one instance eb volume recent snapshot may able restore volume support rectify issue old volume service issue one availability zone case able rely redundant zone migrate service another zone larger customer also get access aws enterprise support dedicated technical account manager tam shorter response time slas definitely controversy useful paid support support staff always seem information authority solve problem brought attention often ability problem solved may depend relationship account rep account manager significant level spend thousand u dollar plus per month may assigned may wish ask dedicated account manager great resource even paying premium support build good relationship make use question problem guidance assign single point contact company side avoid confusing overwhelming contact main web contact point aws many technical request made via channel consulting managed service handson assistance aws established relationship many consulting partner managed service partner big consultant cheap depending need may save cost long term helping set architecture effectively offering specific expertise eg security managed service provider provide longerterm fullservice management cloud resource aws professional service aws provides consulting service alone combination partner restriction note resource amazon limit actually helpful incur large cost accidentally request quota increased opening support ticket limit easy raise noted section additionally service limit published obtaining current limit usage limit information service may available service api trusted advisor neither case need contact support page awslimitchecker tool documentation provides nice summary available retrieval option limit tool also valuable automating limit check term service extensive much expected boilerplate contain important note restriction service particular restriction using many aws service safetycritical system appreciative legal humor may wish review clause related topic openstack private cloud alternative aws used large company wish avoid public cloud offering learning career development certification associate level certification required prerequisite taking professional examination longer case getting certified interested studying getting certification practical overview tell lot need know official page faq training certification training offered aws mainly instructorled onsite various thirdparty company usually videobased training cloud guru cloudacademy linux academy need certification especially consulting company working key tech role large nontech company certification important credential others including many tech company startup certification common considered necessary fact fairly silicon valley hiring manager engineer see negative signal resume certification required access certificate lounge official aws event summit invent lounge typically provide power charging point seat relatively better coffee managing aws managing infrastructure state change great challenge using aws build complex system devops general manage infrastructure state effectively time general boil three broad goal state infrastructure visibility know state infrastructure service using exactly also know anyone team make change detect misconfigurations problem incident service automation reconfigure infrastructure reproduce past configuration scale existing one without lot extra manual work requiring knowledge someone head respond incident easily automatically flexibility improve configuration scale new way without significant effort add complexity using tool share review improve configuration within team much discus really improve answer question several approach deploying infrastructure aws console complex automation tool thirdparty service attempt help achieve visibility automation flexibility aws configuration management first way people experiment aws via web interface aws console using console highly manual process often work automation flexibility going manage aws configuration manually sadly simple universal answer approach pro con approach taken different company vary widely include directly using apis building tooling top using commandline tool using thirdparty tool service aws console aws console let control much functionality aws via web interface ideally use aws console specific situation great readonly usage trying understand state system logging browsing helpful also reasonably workable small system team example one engineer setting one server change often useful operation going rarely like le month example onetime vpc setup probably revisit year case using console simplest approach use console aws console convenient also enemy automation reproducibility team communication likely making change multiple time avoid console favor sort automation least path toward automation discussed next using console preclude automation waste time later prevents documentation clarity standardization around process team commandline tool aws commandline interface cli used via aws command basic way save automate aws operation underestimate power also advantage wellmaintained cover large proportion aws service date general whenever prefer command line aws console performing operation absence fancier tool write simple bash script invoke aws specific argument check git primitive effective way document operation performed improves automation allows code review sharing team give others starting point future work use primarily interactive scripted consider instead using awsshell tool aws easier use autocompletion colorful ui still work command line using saw previous version program migrate awsshell apis sdks sdks using aws apis available major language go io java javascript python ruby php heavily used aws maintains short list awesomeaws list comprehensive current note support c still new retry logic important aspect consider whenever using sdks error handling heavy use wide variety failure programming error throttling awsrelated outage failure expected occur sdks typically implement exponential backoff address may need understood adjusted time application example often helpful alert error code others use apis directly although aws documentation includes lot api detail better use sdks preferred language access apis sdks mature robust wellmaintained something write boto good way automate operation custom way also known amazon sdk python previous version library wide use year newer version official support amazon prefer new project contains variety apis operate either high level low level explanation low level apis client apis mapped aws cloud servicespecific apis service operation supported client client generated json service definition file high level option resource apis allows avoid calling network low level instead provide objectoriented way interact aws cloud service lot helpful feature like waiter provide structure allows code wait change occur cloud example creating instance need wait instance running order perform another task find writing bash script one two cli command probably wrong stop consider writing boto script instead advantage check return code easily success step depends success past step grab interesting bit data response like instance id dns name add useful environment information example tag instance git revision inject latest build identifier initialization script general visibility resource essential practice especially organization grow better understand resource usage example automation convention add tag org developer owns resource product resource support label lifecycles temporary resource one deprovisioned future distinguish productioncritical infrastructure eg serving system v backend pipeline distinguish resource special security compliance requirement enabled allocate cost note cost allocation tag apply forwardlooking basis ca nt retroactively apply item already billed many year notorious tag limit per resource could raised caused many company significant pain raised tag per resource aws introduced ability enforce tagging instance volume creation deprecating portion third party tool cloud custodian tag case sensitive environment environment two different tag automation setting tag likely sensible option significant scale bug asg console space tag name preserved type name space end get expected behavior probably true location sdks also sure add trailing space tag key unless really mean jul managing server application aws v server configuration guide aws devops server configuration management general getting aws detail worth noting addition configuration management aws resource longstanding problem configuration management server philosophy heroku twelvefactor app principle list established general best practice deploying application pet v cattle treat server like cattle pet design system infrastructure disposable minimally worrisome server unexpectedly destroyed concept immutable infrastructure extension idea minimize application state instance general instance able killed die unexpectedly minimal impact state application quickly move rds dynamodb efs data store instance eb also option though generally bootable volume eb require manual automated remounting server configuration management large set open source tool managing configuration server instance generally dependent particular cloud infrastructure work variety linux many case variety operating system leading configuration management tool puppet chef ansible saltstack focus guide may mention relate aws container aws docker containerization trend changing way many server service deployed general container designed way package application dependency known way build container including every library binary application need outside kernel big advantage approach easy test validate container locally without worrying difference computer server deploy consequence need fewer amis boot script deployment boot script need template fetch exported docker image run company embracing microservice architecture often turn containerbased deployment aws launched ec service manage cluster via docker late though many people still deploy docker directly see ec section detail aws launched eks service manage kubernetes cluster mid though many people still deploy ec use docker directly see eks section detail visibility store track instance metadata instance id availability zone etc deployment info application build id git revision etc log report instance metadata service help collect aws data need use log management service sure set way view manage log externally server cloudbased service sumo logic splunk cloud scalyr logdna loggly easiest set use also expensive may factor depending much log data major open source alternative include elasticsearch logstash kibana elastic stack graylog afford little data lot money special need make sense use hosted service whenever possible since setting scalable log processing system notoriously time consuming track graph metric aws console show simple graph cloudwatch typically want track graph many kind metric cloudwatch application collect export helpful metric everywhere long volume manageable enough afford service like librato keenio datadog fancier feature better user interface save lot time detailed comparison use prometheus graphite timeseries database metric open source grafana visualize dashboard stored metric timeseries database also open source tip managing server setting server unless absolutely necessary always set timezone server utc see instruction distribution ubuntu centos amazon linux numerous distributed system rely time synchronization coordination utc provides universal reference plane subject daylight saving change adjustment local time also save lot headache debugging elusive timezone issue provide coherent timeline event logging audit system ntp accurate time using amazon linux come preconfigured confirm server configure ntp correctly avoid insidious time drift cause sort issue breaking api call misleading log part automatic configuration every server time already drifted substantially generally second remember ntp shift back may need remediate manually example like ubuntu testing immutable infrastructure want proactive testing service ability cope instance termination failure helpful introduce random instance termination business hour expose issue time engineer available identify fix netflix simian army specifically chaos monkey popular tool alternatively chaoslambda bbc lightweight option run aws lambda security iam cover security basic first since configuring user account something usually early setting system security iam basic iam homepage user guide faq aws security blog one best source news information aws security iam service use manage account permissioning aws managing security access control aws critical every aws administrator need use understand iam least basic level iam identity include user people service using aws group container set user permission role container permission assigned aws service instance permission identity governed policy use aws predefined policy custom policy create iam manages various kind authentication user software service may need authenticate aws including password log console username password real user access key may use commandline tool two string one id uppercase alphabetic string form axxxxxxxxxxxxxxxxxxx secret mixedcase string often set service user access key start akia normal key access key start asia sessiontemporary key sts require additional sessiontoken parameter sent along id secret see documentation complete list access key prefix multifactor authentication mfa highly recommended practice using keychain fob smartphone app second layer protection user authentication iam allows complex finegrained control permission dividing user group assigning permission role policy language used customize security policy finegrained way excellent high level overview iam policy concept life iam policy nutshell policy language complex errorprone json syntax quite confusing unless expert wise base trusted example aws predefined managed policy beginning iam policy may simple large system grow complexity need managed care sure one person perhaps backup organization formally assigned ownership managing iam policy make sure every administrator work person change reviewed go long way avoiding accidental serious misconfigurations best give user service minimum privilege needed perform duty principle least privilege one foundation good security organize iam user group according level access need iam permission hierarchy explicit deny restrictive policy win explicit allow access permission resource explicitly given implicit deny permission implicitly denied default test policy permission via aws iam policy simulator tool tool particularly useful write custom policy security iam tip iam create individual user account use iam account user beginning slightly work much way define different user group different level privilege want choose amazon default suggestion administrator power user etc allows credential revocation critical situation employee leaf key compromised revoke credential little effort set active directory federation use organizational account aws mfa account always use mfa sooner better enabling already many user extra work unfortunately enforced software administrative policy established user use google authenticator app io android support twofactor authentication root account consider hardware fob use significant iam credential much possible remember cloud loss highly capable iam credential could essentially mean game deployment user whole company use root user account initially create account create custom iam user andor role use application instead lock access use root credential much possible ideally effectively offline critical deployment mean attached actual mfa device physically secured rarely used cloudtrail one first thing enable cloudtrail even security hawk little reason beginning data happening aws account need information likely also want set log management service search access log iam role rather assign iam user application like service sharing sensitive credential define assign role instance application retrieve credential instance metadata assign iam role realm example development staging production setting role tied specific realm clean separation prevents example development instance connecting production database best practice aws list best practice worth reading full front iam reference interactive reference iam action effect resource great open writing new trying understand existing iam policy multiple account decide whether want use multiple aws account research organize access across factor consider number user importance isolation resource limit permission granularity security api limit regulatory issue workload size infrastructure cost multiaccount overhead internal aws service management tool may need custom built adapted help use separate aws account independent part infrastructure expect high rate aws api call since aws throttle call aws account level inspector automated security assessment service aws help identify common security risk allows validation adhere certain security practice may help compliance trusted advisor address variety best practice also offer basic security check around iam usage security group configuration mfa paid support tier trusted advisor expose additional check around area reserved instance optimization use km managing key aws offer km securely managing encryption key usually far better option handling key security see aws waf web application firewall help protect application common attack pattern security auditing security monkey open source tool designed assist security audit open source tool us aws apis ass environment security posture stable actively maintained audit security setting audit security policy simply exporting setting using aws apis eg using boto script like secconfigpy talk reviewing monitoring change manually automatically security iam gotchas limitation share user credential remarkably common firsttime aws user create one account one set credential access key password use sharing among engineer others within company easy insecure practice many reason particular reduced ability revoke credential peruser perservice basis example employee leaf key compromised lead serious complication metadata throttling instance metadata service rate limiting api call deploy iam role widely lot service may hit global account limit easily one solution code script cache reuse credential locally short period say minute example put awscredentials file must also refreshed automatically careful cache credential long expire note dynamic metadata also change time cached long time either iam operation slower api call many second since aws need propagate globally across region uptime iam api historically lower instance metadata api wary incorporating dependency iam api critical path subsystem example validate user iam group membership log instance careful precaching group membership maintaining back door might end locking user altogether api available nt check aws credential secret git repository bot scan github looking credential use script tool gitsecrets prevent anyone team checking sensitive information git repository basic homepage developer guide faq pricing simple storage service aws standard cloud storage service offering file opaque blob storage arbitrary number file almost size prior maximum size gb larger size well supported via multipart support item object placed named bucket stored name usually called key main content value object created deleted updated large object streamed modify part value need update whole object partial data access work via select every object also metadata includes arbitrary keyvalue pair used way similar http header metadata systemdefined significant serving http content bucket cloudfront also define arbitrary metadata use uris although often bucket key name provided apis individually also common practice write location form bucketnamepathtokey key pathtokey also see prefix hadoop system v glacier eb efs aws offer many storage service several besides offer filetype abstraction glacier cheaper infrequently accessed archival storage eb unlike allows random access file content via traditional filesystem attached one instance time efs network filesystem many instance connect higher cost see comparison table tip practical purpose consider capacity unlimited total size file number object number object bucket essentially also unlimited customer routinely million object storing business data amazon important manage permission sensibly company like dow jones verizon saw data breach due poorlychosen configuration sensitive data fixing later difficult task lot asset internal user different way grant permission access amazon content bucket iam policy use familiar identity authentication management permission scheme control access specific operation bucket policy grant deny permission entire bucket might use hosting website make bucket publicly readable restrict access bucket ip address amazon sample bucket policy show number use case policy come handy access control list acls also applied every bucket object stored acls grant additional permission beyond specified iam bucket policy acls used grant access another aws user predefined group like general public powerful dangerous need inspect every object see access predefined access control group allow access may expect name user everyone grant permission general public user defined aws account object available user retrieved simple http request form http authorization signature required access data category authenticated user grant permission anyone aws account limited user anyone sign aws intent purpose also open general public log delivery group used aws write log bucket safe enable bucket need typical use case acl used conjunction requester pay functionality bucket permission object permission two different thing independent private object public bucket seen listing bucket downloaded time public object private bucket wo nt seen bucket content ca nt listed still downloaded anyone know exact key user nt access set bucket permission still make object public putobjectacl putobjectversionacl permission august aws added aws config rule ensure bucket secure aws config rule check security bucket policy bucketlevel acls still create object acls grant additional permission including opening file whole world create new bucket different type data different sensitivity level much le error prone complex permission rule example data administrator like log data put new bucket administrator access guidance see bucket naming bucket chosen global namespace across region even though store data whichever region select find many bucket name already taken creating bucket mean taking ownership name delete bucket name restriction bucket name used part hostname accessing bucket content like bucketname long name dns compliant common practice use company name acronym abbreviation prefix suffix prefer dnsstyle hierarchy bucket name please use check security measure highly insecure easily circumvented name period cause certificate mismatch used ssl use instead since conforms ssl expectation dns compliant versioning optional versioning support version object preserved bucket mostly useful want archive change ability back mistake caution lack featureset full version control system like git durability durability extremely high since internally keep several replica delete accident count losing data aws offer seemingly improbable durability rate mathematical calculation based independent failure rate level replication true probability estimate either way good record durability note much higher durability eb pricing depends storage request transfer transfer putting data aws free pay way transfer region free transfer region internet general free deletes free reduced redundancy infrequent access people use standard storage class storage class lower cost redundancy storage rrs effectively deprecated lower durability four nine standard note longer participates price reduction offer worse redundancy money standard result reason use infrequent access ia let get cheaper storage exchange expensive access great archive like log already processed might want look later get idea cost saving using infrequent access ia use infrequent access calculator intelligent tiering storage class designed optimize cost automatically moving data costeffective access tier without performance impact operational overhead one zone ia data accessed le frequently requires rapid access needed unlike storage class store data minimum three availability zone az one zoneia store data single az cost le standardia glacier third alternative discussed separate product see comparison table maximizing performance mean improving overall throughput term bandwidth number operation per second highly scalable principle get arbitrarily high throughput good example usually constrained pipe source andor level concurrency operation throughput course highest within aws instance bucket region bandwidth depends instance type see network performance column throughput many object extremely high data accessed distributed way many instance possible read write object hundred thousand instance however throughput limited object accessed sequentially single instance individual operation take many millisecond bandwidth instance limited therefore perform large number operation necessary use multiple worker thread connection individual instance larger job multiple instance well multipart uploads large object want take advantage multipart uploading capability starting minimum chunk size mb large downloads also download chunk single large object parallel exploiting http get rangeheader capability pagination listing content happens response per request bucket many million object listing take time prefix previously randomness beginning key name necessary order avoid hot spot longer necessary july data outside aws directconnect transfer acceleration help transfer acceleration pay equivalent month storage transfer either direction using nearer endpoint commandline application way use command line originally best tool job still used heavily many regular aws commandline interface support well useful situation replacement greater emphasis performance via multithreading helpful large file large set file also offer unixlike globbing support gui application may prefer gui wish support gui access le technical user option aws console offer graphical way use use caution telling nontechnical people use however since without tight permission offer access many aws feature transmit good option macos use case cyberduck good option macos window support multipart uploads acls versioning lifecycle configuration storage class server side encryption ssekms cloudfront tightly integrated cloudfront cdn see cloudfront section information well transfer acceleration static website hosting static website hosting option simply setting enables configurable http index error page http redirect support public content simple way host static asset fully static website consider using cloudfront front asset like cdn cloudfront improves performance significantly supported builtin amazonawscom domain support serving site custom domain ssl custom domain however cloudfront allows serve custom domain http amazon provides free sni ssltls certificate via amazon certificate manager sni work outdated browsersoperating system alternatively provide certificate use cloudfront support browsersoperating system fee including resource across domain font inside cs file may need configure cors bucket serving resource since pretty much everything moving ssl nowadays likely want control domain probably want set cloudfront certificate front ignore aws example nonssl said need think invalidation update cloudfront may wish include version hash filename invalidation necessary data lifecycles managing data understanding lifecycle data important understanding data putting data bucket think lifecycle end life beginning general data different expiration policy stored separate prefix top level example voluminous log might need deleted automatically monthly data critical never deleted former separate bucket least separate folder wise front save pain hard clean large collection file created many engineer varying lifecycles coherent organization alternatively set lifecycle policy archive old data glacier careful archiving large number small object glacier since may actually cost also storage class called infrequent access durability standard discounted per gb suitable object infrequently accessed data consistency understanding data consistency critical use multiple producer consumer data creation update individual object atomic never upload new object change object another client see part half change uncertainty lie client client see update new object create new object able read instantly called readafterwrite consistency update object overwrite delete object guaranteed eventual consistency ie change happen guarantee many use case treating object immutable ie deciding convention created deleted updated greatly simplify code us avoiding complex state management usstandard region weaker eventual consistency model newer region readafterwrite finally corrected watch many old blog mentioning slow update practice eventual consistency usually mean within second expect rare case minute hour filesystem general apis inherent limitation make hard use directly posixstyle filesystem still preserving object format example appending file requires rewriting cripple performance atomic rename directory mutual exclusion opening file hardlinks impossible fuse filesystem go ahead try anyway performance limitation surprise reason riofs c goofy go recent effort attempt adopt different data storage format address issue likely improvement discussion python implementation offer data deduplication snapshotting encryption one client time objectivefs discussion commercial solution support filesystem feature concurrent client primarily using vpc consider setting vpc endpoint order allow vpchosted resource easily access without need extra network configuration hop crossregion replication feature replicating bucket one region another note already highly replicated within one region usually necessary durability could useful compliance geographically distributed data storage lower latency strategy reduce regiontoregion bandwidth cost mirroring heavily used data second region v long time supported default endpoint http however aug support use enable dualstack either preferred api client directly using url scheme http extends transfer acceleration well event notification configured send sn notification sqs message aws lambda function bucket event individual user iam role minimal required location catalog approved location otherwise tends become dumping ground people put data random location cleaned year costing big buck bucket deleted take hour bucket name created discussion gotchas limitation bucket sit outside vpc accessed anywhere world bucket policy set deny read permission section carefully countless case bucket exposed public many year notorious limit per account could raised caused many company significant pain request increase ask increase limit still capped generally per account careful make implicit assumption transactionality sequencing update object never assume modify sequence object client see modification sequence upload whole bunch file appear client sla uptime use heavily inevitably see occasional error accessing storing data disk infrastructure fail availability usually restored second minute although availability extremely high mentioned durability excellent uploading change make object cause full rewrite object avoid appendinglike behavior regular file data consistency discussed surprising sometimes suffers internal replication issue object may visible subset machine depending endpoint hit usually resolve within second however seen isolated case issue lingered hour multipart uploads etag header hash object many case hash however case general use multipart uploads one workaround compute put custom header done multipart upload cost incomplete multipart uploads accrue storage charge even upload fails object created amazon others recommend using lifecycle policy clean incomplete uploads save storage cost note many may worth investigating whatever failing regularly standard region previously region also known u standard region replicated across coast led greater variability latency effective jun longer case amazon region support readafterwrite consistency amazon also renamed u standard region u east n virginia region consistent aws regional naming convention authentication version region newer region support latest authentication file operation using cli sdk nt work one region work correctly another region make sure using latest authentication signature storage durability availability price illustration comparative feature price table give standard rrs ia comparison glacier eb efs instance store using virginia region sept durability per year availability designed availability sla storage per tb per month get retrieve per million write archive per million glacier eleven sloooow ia eleven rrs first tb standard eleven eb unstated efs high high instance store unstated unstated especially notable item boldface source pricing sla faq rrs info note considered deprecated glacier pricing eb availability durability eb pricing efs pricing sla basic homepage documentation faq pricing see also elastic compute cloud aws offering fundamental piece cloud computing virtual private server instance run linux bsd window operating system internally used heavily modified xen virtualization said new instance class introduced kvm derived hypervisor instead called nitro far limited instance type lastly bare metal hypervisor available instance term sometimes used refer server technically refers broadly whole collection supporting service like load balancing clbsalbsnlbs ip address eips bootable image amis security group network drive eb discus individually guide pricing cost management complicated topic range free aws free tier lot depending usage pricing instance type second hour change depending aws region whether purchasing instance ondemand spot market prepurchasing reserved instance network performance instance type aws us general term like low medium high refer network performance user done benchmarking provide expectation term mean alternative lockin running akin running set physical server long automatic scaling tooled cluster setup run set static instance migrating another vps dedicated server provider hard direct alternative google cloud microsoft azure rackspace digitalocean aws lightsail offering vps provider offer similar apis setting removing instance see comparison use amazon linux aws encourages use amazon linux evolved red hat enterprise linux rhel centos used many others skeptical whatever think decision carefully true amazon linux heavily tested better supported unlikely event deeper issue o virtualization general many company fine using standard nonamazon linux distribution ubuntu centos using standard linux distribution mean exactly replicable environment use another hosting provider instead addition aws also helpful wish test deployment local developer machine running standard linux distribution practice getting common docker amazon support official amazon linux docker image aimed assisting local development comparable environment though new enough considered experimental note currentlyintesting amazon linux support onpremise deployment explicitly cost see section tip region first set consider region want use first many people north america automatically set n virginia region default worth considering best front want evaluate service availability service available region costing baseline cost also vary region generally lowest comparison purpose compliance various country differing regulation regard data privacy example instance type instance come many type corresponding capability virtual machine cpu architecture speed ram disk size type ssd magnetic network bandwidth selecting instance type complex since many type additionally different generation released year list review cost feature amazon list instance type hard use list feature price together make doubly difficult price vary lot use determine set machine meet need find cheapest type region working depending timing region might much cheaper rent instance memory cpu bare minimum turn instance use many situation testing staging resource may need instance need pay running cost suspended given cost calculated based usage simple mechanism cost saving achieved using lambda cloudwatch open source option like cloudcycler saas provider like gorillastack note turn instance ephemeral root volume state lost instance turned therefore stateful application safer turn eb backed instance dedicated instance dedicated host assigned hardware instead usual virtual instance expensive virtual instance preferable performance compliance financial modeling licensing reason bit v bit micro small medium instance still available use architecture using instance nowadays though smaller instance still support bit use bit unless legacy constraint good reason use hvm v pv two kind virtualization technology used hardware virtual machine hvm paravirtual pv historically pv usual type hvm becoming standard want use newest instance type must use hvm see instance type matrix detail operating system use need pick base operating system window linux ubuntu amazon linux amis covered detail section limit create arbitrary number instance default limit number instance per account vary instance type described list termination protection instance important longlived particular nt part autoscaling enable termination protection important line defense user mistake accidentally terminating many instance instead one due human error ssh key management start instance need least one ssh key pair set bootstrap ie allow ssh first time aside bootstrapping manage key instance assigning individual key individual user service appropriate avoid reusing original boot key except administrator creating new instance avoid sharing key add individual ssh key individual user gpu support rent gpuenabled instance use machine learning graphic rendering workload three type gpuenabled instance currently available series offer nvidia tesla gpus gpu configuration targeting machine learning scientific workload high performance computing application series offer nvidia tesla gpus gpu configuration targeting machine learning scientific workload high performance computing application series offer nvidia tesla gpus gpu configuration targeting graphic video encoding aws offer two different amis targeted gpu application particular target deep learning workload also provide access strippeddown driveronly base image aws offer amazon linux deep learning ami based amazon linux well ubuntu deep learning ami come nvidia driver ancillary software cuda cublas cudnn tensorflow pytorch etc installed lower barrier usage note using amis lead lock due fact direct access software configuration versioning compendium framework included lead long instance startup time difficulttoreasonabout environment expensive instance type spot instance offer significant saving gpu workload interruption tolerable current instance type take advantage addressing long launched subnet allocated cidr range vpc gotchas limitation use ssh password insecure consequence compromise severe use key instead read fully disable ssh password access ssh server making sure passwordauthentication etcsshsshdconfig file careful managing ssh private key everywhere stored major improvement security passwordbased authentication newer instance type selecting ami use sure select hvm ami work creating instance using new ssh key pair make sure ssh key permission correct certain instance get scheduled retirement aws due detected degradation underlying hardware case given couple week migrate new instance instance root device eb volume typically stop start instance move healthy host hardware giving control timing event note however lose instance store volume data ephemeral drive instance type instance store volume instance public ip one likely change unless using elastic ip could problem system depend ip address may find server load balancer receiving traffic presumably previous server running ip address handed may matter fixed migrating another new instance api critical dependency infrastructure eg automated server replacement custom scaling algorithm etc running large scale making many api call make sure understand might fail call rate limited limit published subject change code test possibility newer instance type either ebsonly backed local nvme disk assigned instance make sure factor eb performance cost planning use operating significant scale may wish break apart api call enumerate resource instead operate either individual resource subset entire list apis time consider using filter restrict get returned instance come two type fixed performance instance eg burstable performance instance eg instance receives cpu credit continuously rate depends instance size instance accrue cpu credit idle use cpu credit active however instance run credit notice severe degradation performance need consistently high cpu performance application video encoding high volume website hpc application recommended use fixed performance instance instance userdata limited kb limit applies data raw form form data needed downloaded userdata script new account may able launch instance type gpu instance initially imposed soft limit zero limit raised making support request see aws service limit method make support request note limit zero currently documented since multiple aws instance run physical hardware early cloud adopter encountered became known noisy neighbor problem feeling getting paying led user frustration however steal may best word describe actually happening based detailed explanation kernel determine steal time avoiding cpu steal affect application cloud may best handled properly designing cloud architecture aws introduced dedicated tenancy allows customer resource single server saw way solve noisy neighbor problem since customer us cpu approach come significant risk physical system needed type maintenance customer instance running using shared tenancy one underlying server needed maintenance instance server would go offline customer instance running using dedicated tenancy underlying server need maintenance instance would go offline type instance providing ability run android emulator aws moment cloudwatch cloudwatch basic homepage documentation faq pricing cloudwatch monitor resource application capture log sends event cloudwatch monitoring standard mechanism keeping tab aws resource wide range metric dimension available via cloudwatch allowing create time based graph alarm dashboard using cloudwatch event event create mechanism automate action various service aws create event rule instance state aws apis auto scaling run command deployment timebased schedule think cron triggered event invoke lambda function send snssqskinesis message perform instance action terminate restart stop snapshot volume custom payload sent target json format especially useful triggering lambda using cloudwatch log detailed monitoring detailed monitoring instance must enabled get granular metric billed cloudwatch cloudwatch alternative lockin cloudwatch offer fairly basic functionality nt create significant additional aws lockin metric provided service obtained apis imported aggregation visualization tool service many specifically provide cloudwatch data import service alternative cloudwatch monitoring service include newrelic datadog sumo logic zabbix nagios ruxit elastic stack open source option statsd collectd graphite many others cloudwatch log alternative include splunk sumo logic loggly logdna logstash papertrail elastic stack centralized logging solution cloudwatch tip cloudwatch gotchas limitation cloudwatch originate hypervisor hypervisor nt access o information certain metric notably memory utilization available unless pushed cloudwatch inside instance use one metric alarm receive alarm contextual detail specific threshold alarm state timing default cloudwatch metric resolution minute send multiple value metric within minute aggregated minimum maximum average total sum per minute july new highresolution option added cloudwatch metric alarm feature allows record metric resolution evaluate cloudwatch alarm every second blog post introducing feature describes publish highresolution metric cloudwatch note calling putmetricdata api storageresolution attribute item send metricdata array direct parameter putmetricdata api call metric kept cloudwatch month starting november used day minimum granularity increase day amis ami basic user guide amis amazon machine image immutable image used launch preconfigured instance come public private flavor access public amis either freely available sharedcommunity amis bought sold aws marketplace many operating system vendor publish readytouse base amis ubuntu see ubuntu ami finder amazon course amis amazon linux ami tip amis built independently based deployed must select amis match deployment using creating eb instance store pv hvm virtualization type bit v bit architecture discussed modern deployment usually ebsbacked hvm create custom ami snapshotting state instance modified amis backed eb storage necessary image data loaded eb volume require extra pull result ebsbacked instance coming much faster instance storagebacked one amis per region must look amis region copy amis region ami copy feature aws resource wise use tag version amis manage lifecycle create amis always tension choosing much installation configuration want bake baking le amis example configuration management client downloads installs configures software new instance launched allows minimize time spent automating ami creation managing ami lifecycle likely able use fewer amis probably need update frequently result longer wait new instance ready use result higher chance launchtime installation configuration failure baking amis example preinstalling fully configuring common software along configuration management client load configuration setting launch time result faster launch time fewer opportunity software installation configuration break instance launch time increase need create manage robust ami creation pipeline baking even amis example installing required software well potentially also environmentspecific configuration information result fast launch time much lower chance instance launchtime failure without additional redeployment reconfiguration consideration require time consuming ami update order update software configuration well complex ami creation automation process option favor depends quickly need scale capacity size maturity team product instance boot fast autoscaled service require le spare capacity built quickly scale response sudden increase load setting service autoscaling consider baking amis backing eb storage option system become larger common complex ami management multistage ami creation process ideally one common base amis infrequently regenerated component common deployed service updated frequently run servicelevel ami generation process includes installation possibly configuration applicationspecific software thinking ami creation strategy use tool like packer simplify automate ami creation use rhel instance happen existing rhel onpremise red hat subscription could leverage red hat cloud access program migrate portion subscription aws thereby aws charge rhel subscription second time either use selfcreated rhel ami red hat provided gold image added private ami sign red hat cloud access ami gotchas limitation linux package version default instance based amazon linux amis configured point latest version package amazon package repository mean package version get installed locked possible change including breaking one appear applying update future bake amis update already applied unlikely cause problem running service whose instance based amis break appear earlier amibaking stage build process need fixed worked around new amis generated lock launch feature allows configure amazon linux instance target repository particular major version amazon linux ami reducing likelihood break caused amazoninitiated package version change occur package install time cost updated package get automatically installed future update run pairing use lock launch feature process advance amazon linux ami discretion give tighter control update behavior timing cloudinit default oftentimes user create amis performing customizations albeit manually via tool packer ansible careful alter cloudinit setting correspond system service eg sshd etc customized may find change longer effect booting new ami first time cloudinit overwritten distros different file others generally located etccloud regardless distro want review file carefully chosen distro rolling amis complete reference cloudinit available cloudinit site advanced configuration mechanism test change made file sandbox prior serious usage auto scaling auto scaling basic homepage user guide faq pricing additional charge auto scaling group asgs used control number instance service reducing manual effort provision deprovision instance configured scaling policy automatically increase decrease instance count based metric like cpu utilization based schedule three common way using asgs dynamic automatically adjust instance count based metric thing like cpu utilization static maintain specific instance count time scheduled maintain different instance count different time day day week additional charge pay underlying cloudwatch service auto scaling tip better matching cluster size current resource requirement use asgs result significant cost saving many type workload pairing asgs clbs common pattern used deal change amount traffic service receives dynamic auto scaling easiest use stateless horizontally scalable service even using asgs dynamically increase decrease instance count seriously consider maintaining instance inside asgs given target instance count asg work ensure number instance running equal target replacing instance die marked unhealthy result consistent capacity better stability service autoscalers configured terminate instance clb alb marked unhealthy auto scaling gotchas limitation setting default asgs kill instance instance manager considers unresponsive possible instance whose cpu completely saturated minute time appear unresponsive causing asg default replaceunhealthy setting turned replace instance managed asgs expected consistently run high cpu consider deactivating setting however detecting killing unhealthy node become responsibility eb eb basic homepage user guide faq pricing eb elastic block store provides block level storage offer storage volume attached filesystems like traditional network drive eb volume attached one instance time contrast efs shared much higher price point comparison eb tip use raid drive increased performance worthy read aws post eb io characteristic well performance tip provision iop pay specific level io operation per second ensure particular level performance disk single eb volume allows iop max get maximum performance eb volume maximum size attached ebsoptimized instance eb volume improve iop size may make sense simply enlarge volume instead paying better performance explicitly many case reduce cost standard block size eb volume eb gotchas limitation durability reasonably good regular hardware drive annual failure rate hand poor backup contrast durability extremely high care data back snapshot sla uptime see note high availability volume volume type indicating physical storage type type called standard actually old spinningplatter disk deliver hundred iop want unless really trying cut cost modern ssdbased typically option want restoring snapshot create eb volume block lazily read first time referenced avoid initial period high latency may wish use dd fio per official documentation efs efs basic homepage user guide faq pricing amazon network filesystem presented server compatible client mount designed highly available durable efs file system object redundantly stored across multiple availability zone efs designed used shared network drive automatically scale petabyte stored data thousand instance attached efs offer higher throughput multiple gigabyte per second better durability availability eb see comparison table higher latency efs priced based volume data stored cost much eb ballpark three time much compared general purpose eb volume performance dependent volume data stored price like eb efs us credit based system credit earned rate kib per gib storage consumed burst readingwriting file metadata unlike eb operation metadata file size owner date etc also consume credit burstcreditbalance metric cloudwatch monitored make sure file system nt run credit throughput capacity burst also dependent size tib throughput go mib mib added stored tib instance file system storing tib would able burst rate mib maximum throughput per instance mib efs two performance mode set file system created one general purpose max io max io scale higher cost higher latency doubt use general purpose also default percentiolimit metric cloudwatch hovers around max io recommended changing performance mode mean creating new efs migrating data high availability achieved mount target different subnets availability zone efs tip efs based directory efs mounted directly nt root directory one application could mount another user group level permission used control access certain directory efs file system sharing efs filesystems one efs filesystem used multiple application service considered carefully pro performance based total size stored file everything one drive increase performance everyone one application consuming credit faster accumulate might offset another application store file efs rarely access con since credit shared one application overconsumes affect others compromise made regard security client network access drive someone root access one client instance mount directory efs readwrite access file drive even nt access application hosted client nt norootsquash equivalent efs efs gotchas limitation number feature supported limit service efs offer disk level encryption new drive file system created date encryption achieved moving data new efs volume efs file system mounted premise direct connect efs file system mounted vpc peering vpn even vpn running top direct connect using efs volume window supported file uploaded efs take hour efs update detail billing burst credit purpose metadata operation costly term burst credit consumption recursively traversing tree containing thousand file easily ramp ten even hundred megabyte burst credit consumed even file touched command like find chown r adverse impact performance load balancer load balancer basic aws load balancing product classic load balancer clbs application load balancer alb network load balancer nlb introduction alb classic load balancer known elastic load balancer elbs older documentation tooling blog post may still reference elbs clbs around since alb nlbs added aws clbs support tcp http load balancing alb support http load balancing nlbs support tcp layer load balancing clbs alb optionally handle termination single ssl certificate optionally perform active health check instance remove destination pool become unhealthy clbs nt support complex rulebased routing alb support currently small set rulebased routing feature nlbs extensive routing option clbs forward traffic single globally configured port destination instance alb forward port configured perinstance basis better supporting routing service shared cluster dynamic port assignment like ec mesos nlbs support multiple port ip registering target ip address including target outside vpc load balancer ec select unused port scheduling task register target group using port clbs supported classic well vpcs alb supported vpcs alb target group instance ip based target range allowing use premise destination via vpn direct connect load balancer tip opinion load balancing front complex load balancing need like applicationspecific routing request reasonable use clb alb load balancing instead even want think load balancing architecture simple say one server put load balancer front anyway give flexibility upgrading since change dns setting slow propagate also let thing like terminate ssl easily clbs alb many ip internally aws load balancer simply collection individual software load balancer hosted within dns load balancing traffic among pool contain many ip least one per availability zone depending traffic level also support ssl termination convenient scaling clbs alb scale high throughput scaling instantaneous expecting hit lot traffic suddenly make sense load test scale advance also contact amazon prewarm load balancer client ip general server want know true client ip address load balancer must forward information somehow clbs add standard xforwardedfor header using clb http load balancer possible get client ip address using load balancer deploying one common pattern swap instance load balancer spinning new stack latest version keep old stack running one two hour either flip back old stack case problem tear rotating certificate retaining arn rotating iam server certificate difficult standard practice upload new one update resource new arn however retain arn using updatecertificate call following process upload new iam server certificate unique name eg fuzzycomnew rename existing iam server certificate eg fuzzycom fuzzycomexpired rename new iam server certificate name previously existing certificate eg fuzzycomnew fuzzycom jiggle clbalb listener pick change alb invoke modifylistener existing detail alb listener clb invoke createloadbalancerlisteners existing detail clb listener load balancer gotchas limitation alb fixed external ip client see consumer apps matter enterprise customer may want ip different user vary unpredictably single client time within standard ip range similarly never resolve clb name ip put value record work break web client reverse proxy cache dns lookup long time problematic clbs alb since change ip mean minute hour day client stop working unless disable dns caching watch java setting sure adjust properly another example nginx reverse proxy normally resolve backends startup although way get around unheard ip recycled customer without long cooloff period client cache ip using ssl verify server might get error response completely different service company operator service behind clb alb latter phenomenon mean also see puzzling erroneous request client company common client using backend apis since web browser typically cache limited period alb take time scale handle sudden spike traffic well therefore anticipate spike need prewarm load balancer gradually sending increasing amount traffic healthchecks carefully aggressive deciding remove instance conservative adding back pool service load balancer fronting may become inaccessible second minute time extra careful autoscaler configured terminate instance marked unhealthy managed load balancer http listener nt support server name indication sni need sni work around limitation either providing certificate subject alternative name sans using tcp listener terminating ssl backend limit number alb clbs nlbs per region separately late default limit per region limit easily raised alb clb aws quite reluctant raise limit nlbs using network load balancer nlb client connect nlb resides another vpc vpc peering aws managed vpn unless client instance type vpc peering vpcs must region see troubleshooting clb clb basic homepage user guide faq pricing classic load balancer formerly known elastic load balancer http tcp load balancer managed scaled amazon clb tip best practice article mustread use clbs heavily lot detail clb gotchas limitation general clbs smart load balancer fancy feature finegrained control traditional hardware load balancer would offer common case involving sessionless apps cookiebased session http ssl termination work well default clbs refuse route traffic load balancer one availability zone az backend instance another cause last instance az becomes unavailable even healthy instance zone running fewer two backend instance per az almost certainly want enable crosszone load balancing rule directing traffic supported example direct traffic based regular expression url like haproxy offer apex dns name upon time assign clb apex dns record ie examplecom instead fooexamplecom needed record instead cname possible route alias record directly pointing load balancer use http keepalives internal side cause unexpected side effect request different client tcp connection external side end tcp connection internal side never assume multiple request tcp connection client traffic clbs backend instance subnet network acl rule evaluated traffic subnet would network acl rule evaluated default allow rule removed network acl applied subnet rule allows traffic health check port listener port must added december clbs launched vpcs support addressing clbs launched support dualstack dns name alb alb basic alb tip use alb route service hosted shared cluster dynamic port assignment like ec mesos alb support http hostbased routing send http request apimydomaincom blogmydomaincom target group well http pathbased routing send http request api blog target group alb gotchas limitation support http plaintext support external client internal resource instancescontainers alb support http routing portbased tcp routing instance alb target group either single fixed healthcheck port instance level healthcheck healthcheck port target application port application instance level healthcheck ca nt configure pertarget healthcheck port different application port alb vpconly available classic target group healthy target request routed target example point listener target group containing single service long initialization phase health check would fail request reach service still starting although alb support sni support http certificate per load balancer limitation described might subject change elastic beanstalk elastic beanstalk basic homepage developer guide faq pricing eb elastic beanstalk paas platform service help developer create deploy scale web application eb handle deployment configuration provisioning load balancing autoscaling monitoring logging eb creates aws resource behalf retain full access control underlying resource cost use eb still charged full cost underlying aws resource created eb elastic beanstalk tip speed deployment launch dev stage turn health check set deployment policy configuration want reuse multiple eb apps save current configuration using eb config save cfg myebconfig default eb nt alarm need add metric monitoring default eb nt enable managed platform update enable configuration eb automatically apply update prespecified maintenance window elastic beanstalk gotchas limitation nt edit apachenginx conf file manually instance rewritten deployment use ebextensions instead creating eb environment longer possible change name tag eb sometimes quarantine instance cause multiple deployment issue despite quarantined eb still deploy subsequent deployment prevent behavior said instance need terminated underlying issue fixed file uploads capped default eb configuration update nginx config change edit elasticbeanstalksavedconfigs aware kept sync eb environment config need manually fetch save change take effect elastic ip elastic ip basic documentation faq pricing elastic ip static ip address rent aws assign instance elastic ip tip load balancer elastic ip singleinstance deployment could assign elastic ip instance give ip dns name consider deployment time provision load balancer instead easy add remove instance load balancer also quicker add remove instance load balancer reassign elastic ip convenient point dns record load balancer instead pointing specific ip manage manually also route alias easier change manage situation need manage fix ip address instance example customer need fixed ip situation require elastic ip elastic ip limited per account possible request elastic ip attached active resource small hourly fee elastic ip extra charge long using small cost use mechanism prevent people squatting excessive number ip address elastic ip gotchas limitation officially way allocate contiguous block ip address something may desire giving ip external user though allocating may get lucky part cidr block important may want bring ip involved guide go glacier glacier basic homepage developer guide faq pricing glacier lowercost alternative data infrequently accessed archival purpose useful data rarely accessed generally take hour fulfill retrieval request aws officially revealed storage medium used glacier may lowspin hard drive even tape aws released even cost effective storate tier called glacier deep archive offer hour retrieval latency cost roughly thousand dollar per month per petabyte glacier tip physically ship data amazon put glacier usb esata hdd glacier gotchas limitation file glacier glacially slow typically hour fixed overhead per file pay per put get operation uploading downloading many small file onto glacier might expensive also storage overhead per file hence good idea archive file upload aware perobject cost archiving data glacier cost per request large number object relatively small size take time reach breakeven point initial archiving cost versus lower storage pricing rds rds basic rds tip looking managed convenience rds data store mongodb cassandra may wish consider thirdparty service provider compose instaclustr sure create new parameter group option group database since default parameter group allow dynamic configuration change rds instance start default timezone utc necessary changed different timezone rds gotchas limitation instance run eb volume either generalpurpose provisioned iop hence constrained eb performance database feature need everything might want available rds example using postgres check list supported feature extension feature need nt supported rds deploy database use failover support offered rds keep mind based dns change make sure client reacts change appropriately particularly important java given dns resolver ttl configured default migration rds importing database rds ensure take consideration maintenance window setting backup running time import take considerably longer time would expected database size limited database engine except sql server limit aurora support database rds mysql mariadb rds mysql mariadb basic rds offer mysql version rds offer mariadb version rds mysql mariadb tip mysql rds allows access binary log multiaz instance mysql transparently replicate data across az using drbd automated backup multiaz instance run backup instance reduce latency spike primary schema performance schema enabled default mysql later disabled default version rds wish enable performance schema reboot rds instance required v mariadb v aurora prefer mysqlstyle database starting something new probably consider aurora mariadb well aurora increased availability nextgeneration solution said aurora may much faster mysql certain workload mariadb modern community fork mysql likely edge mysql many purpose supported rds rds mysql mariadb gotchas limitation super privilege rds provides stored procedure perform task require super privilege starting stopping replication replicate nonrds instance mysql replication instance break az failovers ability manually change master replica must rebuilt failover master global option exposed via db parameter group variable introduced later mysql dot release avoidtemporalupgrade mysql made available rds parameter group making use requires upgrade mysql feature pointintime restore snapshot restore supported myisam table ensure lock flush myisam table executing snapshot backup operation ensure consistency rds postgresql rds postgresql basic rds offer postgresql rds postgresql tip recently logical replication supported subscriber publisher support relatively large range native extension rds postgresql support native partitioning major feature tunables support connection ssl support multi az pointintime recovery rds postgresql gotchas limitation superuser privilege rds provides role rdssuperuser needed operation limitation major feature delayed compared open source postgresql default rds spec general purpose ssd need better performance spec provisioned iop ssd ca nt use rds replica outside rds without using logical replication setting changed setting change changed using database parameter group harder troubleshoot performance problem since access host sure verify extension need available using extension listed need come work around deploy database many postgres utility maintenance item expect command line access usually satisfied using external server rds sql server rds sql server basic rds sql server tip rds sql server gotchas limitation user granted dbowner privilege database instance expanded existing database need space must restore database new instance larger storage database size limit nonexpress edition also minimum storage size web express standard enterprise database per instance rds aurora rds aurora basic aurora cloud database service designed provide distributed faulttolerant relational database selfhealing storage autoscaling per instance currently come two version mysql compatible system postgresql compatible system rds aurora mysql rds aurora mysql basic amazon proprietary fork mysql intended scale high concurrency workload generally speaking individual query performance aurora expected improve significantly relative mysql mariadb aurora intended maintain performance executing many query concurrently equivalent mysql mariadb server could handle notable new feature include logstructured storage instead btrees improve write performance outofprocess buffer pool database instance restarted without clearing buffer pool underlying physical storage specialized ssd array automatically maintains copy data across az aurora read replica share storage layer write master significantly reduces replica lag eliminates need master write distribute binary log replication allows zerodataloss failovers master replica master read replica share storage known collectively aurora cluster read replica span region rds aurora mysql tip order take advantage aurora higher concurrency application configured large database connection pool execute many query concurrently possible example aurora server tested produce increasing performance oltp workload connection aurora scale well multiple cpu may require large instance class optimal performance easiest migration path aurora restoring database snapshot mysql next easiest method restoring dump mysqlcompatible database mariadb lowdowntime migration mysqlcompatible database set aurora instance replica existing database none method option amazon offer feebased data migration service replicate aurora cluster mysql another aurora cluster requires binary logging enabled performant native aurora replication aurora read replica equivalent multiaz backup configured zerodataloss failover target fewer scenario creation multiaz aurora instance required rds aurora mysql gotchas limitation based mysql cherrypicking later mysql feature missing feature well online ddl feature introduced based mysql aurora support gtid transaction either release line aurora maximum cluster size tb rds aurora postgresql rds aurora postgresql basic amazon proprietary fork postgresql intended scale high concurrency workload maintaining ease use currently based postgresql higher throughput similar hardware automatic storage scale increment low latency read replica share storage layer master significantly reduces replica lag point time recovery fast database snapshot rds aurora postgresql tip aurora postgres default supposed utilize high connection rate reason connection pooling must configured accordingly aurora based postgresql lack feature like declarative partitioning logical replication rds aurora postgresql gotchas limitation aurora postgresql fall behind normal rds come available version need feature latest postgresql version might better plain rds patching bug fixing separate open source postgresql elasticache elasticache basic homepage user guide redis user guide memcached faq pricing elasticache managed inmemory cache service used store temporary data fast inmemory cache typically order avoid repeating computation multiple time could reused support memcached redis open source inmemory cache software expose using native access apis main benefit aws take care running patching optimizing cache node need launch cluster configure endpoint application aws take operational work running cache node elasticache tip choose engine clustering configuration instance type carefully based application need documentation explains detail pro con limitation engine order help choose best fit application nutshell redis preferable storing complex data structure memcached plain keyvalue store simplicity memcached allows slightly faster allows scale needed redis feature may use application memcached aws provides enhanced sdks certain programming language implement autodiscovery feature available normal memcached client library elasticache gotchas limitation since case changing cache cluster may restriction like scaling purpose may become problem launched using cloudformation stack also contains resource really need change cache order avoid getting cloudformation stack nonupdateable state recommended launch elasticache cluster like resource similar constraint dedicated stack replaced entirely new stack desired configuration dynamodb dynamodb basic dynamodb alternative lockin unlike technology behind many amazon product dynamodb proprietary aws product interfacecompatible alternative available open source project tightly couple application api featureset take significant effort replace commonly used alternative dynamodb cassandra dynamodb tip dynamodb gotchas limitation dynamodb provide easy way bulkload data possible data pipeline unfortunate consequence since need use regular service apis update existing create new row common temporarily turn destination table write throughput speed import table write capacity increased dynamodb may irreversible split partition underlying table spreading total table capacity evenly across new generation table later capacity reduced capacity partition also reduced total number partition leaving le capacity partition leaf table state much easier hotspot overwhelm individual partition important make sure dynamodb resource limit compatible dataset workload example maximum size value added dynamodb table kb larger item stored url stored dynamodb dealing time series data dynamodb challenging global secondary index together sampling timestamps possible solution explained dynamodb allow empty string valid attribute value common workaround use substitute value instead leaving field empty setting fine grained policy access dynamodb table sure include secondary index policy document well ec ec basic homepage developer guide faq pricing ec container service relatively new service launched end manages cluster service deployed via docker see container aws section context container ec growing adoption especially company embrace microservices deploying docker directly another common approach using docker aws using ec required ec yet seem predominant way many company using docker aws also possible use elastic beanstalk docker reasonable already using elastic beanstalk using docker may change way service deployed within elastic beanstalk radically change service used ecr container registry amazon managed docker registry service simpler running registry missing feature might desired user support crossregion replication image want fast fleetwide pull large image need push image regionlocal registry support custom domain certificate container health monitored via clb alb also used address containerized service using alb need handle port contention ie service exposing port host since alb target group associated ecsbased service directly hitchhiker guide aws ec docker j cole morrison excellent article introduction aws ec concept ec tip log driver ec support multiple log driver awslogs splunk fluentd syslog json use awslogs cloudwatch make sure group made log first driver fluentd enabled default install agent enable driver adding ecsavailableloggingdrivers awslogs fluentd etcecsecsconfig blog convox commentary list number common challenge ec early possible optimize disk clean ec default unused container deleted hour unused image minute setting changed adding etcecsecsconfig information optimizing ec disk cleanup ec alternative lockin please help expand incomplete section eks eks basic homepage user guide faq pricing eks elastic kubernetes service new service launched june provides managed kubernetes master highly available pair deploy service pod top based kubernetes node see container aws section context container eks aws solution hosting kubernetes natively aws replacement ec directly response large market dominance kubernetes eks launch node would configured setup either manually via cloudformation automation solution eks management done utility called kubectl kube configuration file file need configured speak master certificate url aws cli autogenerate configuration file kubect requires communicating eks authentication integrated iam rolespermissions aws cli integrated subcommand generating authentication formerly done via custom plugin kubectl called awsiamauthenticator formerly heptioauthenticatoraws eks provides calico tigera securing workload within cluster using kubernetes network policy eks tip multiple cluster supported using different kubeconfig file aws kubernetes quickstart developed collaboration heptio eks alternative lockin ec amazon native container scheduled platform released nt utilise container today looking get started ec excellent product kubernetes extensive container platform available hosted solution google cloud aws digital ocean azure nomad orchestratorscheduler tightly integrated hashicorp stack consul vault etc eks gotchas limitation pod service configuration rapidly consume ip address inside vpc proper care maintenance applied ensure ip exhaustion occur currently integrated monitoring cloudwatch eks pod service need deploy monitoring system support kubernetes prometheus autoscaling based cpumemory node limited aware pending servicespods start using clusterautoscaler useful scaling based node resource usage unschedulable pod prometheus popular monitoring solution metric alert used send event lambda sqs solution take autoscaling action footnote http docsawsamazoncomekslatestuserguidecreatekubeconfightml http fargate fargate basic homepage faq pricing fargate allows manage deploy container without worry running underlying compute infrastructure fargate serf new backend addition legacy backend ec eks task run fargate backends called launch type fargate allows treat container fundamental building block infrastructure fargate tip fargate follows similar mindset lambda let focus application instead dealing underlying infrastructure fargate supported cloudformation awscli ecscli fargate task launched alongside task use launch type creating large fargate deployment make sure estimate cost compare alternative solution us traditional deployment fargate price several time equivalentlysized instance evaluate solution based potential cost refer pricing fargate fargate alternative lockin container instance available microsoft azure preview version allows run application container without manage virtual machine fargate gotchas limitation lambda lambda basic homepage developer guide faq pricing lambda aws serverless compute offering allowing user define lambda function selection runtimes invoked via variety trigger including sn notification api gateway invocation lambda key service enables serverless architecture aws alongside aws api gateway aws batch aws dynamodb lambda tip idea behind serverless user nt manage provisioning scaling maintenance physical machine host application code lambda machine actually executes userdefined function abstracted container defining lambda function user able declare amount memory available function directly affect physical hardware specification lambda container changing amount memory available lambda function also affect amount cpu power available aws offer hard guarantee around container reuse general expected unaltered lambda function reuse warm previously used container called shortly another invocation user use way optimize function smartly caching application data initialization lambda nt invoked time may warm container left case lambda system load initialize lambda code cold start scenario add significant latency lambda invocation lambda cold start performance improved significantly timeframe typically range m simple function depending language runtime lambda function running inside vpcs also seen recent improvement cold start time previously vpchosted function would cold start second function cold start second strategy avoiding mitigating cold start provisioned concurrency announced invent effective mean eliminating cold start technique include keeping container warm periodic triggering favoring lightweight runtimes node opposed java lambda integrated aws cloudwatch provides logger runtime publishes cloudwatch event lambda offer outofthebox optin support aws xray xray help user diagnose lambda issue offering indepth analysis lambda execution flow especially useful investigating issue calling aws service xray give detailed easytoparse visualization call graph using timed cloudwatch event user use lambda run periodic job cronlike manner event sent lambda fail processing managed using dead letter queue dlq sqs serverless lambda alternative lockin lambda gotchas limitation lambda locally remotely challenge several tool available make easier including officially supported sam local lot lambda function workflow challenge tooling manage lambda deployment still immature official workflow around managing function versioning alias painful one option avoid lambda versioning abstracting deployment workflow outside lambda one way accomplished deploying application successive stage distinct aws account per stage account need aware latest version rollback update handled external tooling oct minimum charge lambda invocation costbenefit reducing run time addingremoving bucket trigger lambda function error may occur error creating trigger configuration ambiguously defined overlapping suffix two rule prefix overlapping event type case manually remove lambda event event tab property section bucket size deployment artifact challenge especially using java option mitigate include proguard loading dependency runtime tmp using dynamodb trigger lambda function error may occur problem internal lambda error please contact lambda customer support usually mean lambda ca nt detect anything dynamodb stream within last hour issue persists deleting recreating trigger may help lambda need access resource vpc example elasticache rds need deployed within increase coldstart time elastic network interface eni registered within vpc concurrent function aws also relatively low initial limit number eni created within vpc however increased good case made aws support lambda several resource limit request response payload size mb limit compressed zipjar file deployment package size mb limit codedependencies package compression mb limit local storage tmp lambda code sample fanout example using lambda fanout copy data one service case kinesis multiple aws data service destination fanout data sample include iot sqs aws limit monitor using lambda show use multiple lambda monitoring lambda ec worker pattern show use lambda workflow data picked lambda pushed queue sent ec processing secure pet store sample java application us lambda api gateway cognito user identity awslambdalist list hopefully useful aws lambda lambdarelated resource quite code sample usual guaranteed tested caveat emptor please help expand incomplete section api gateway api gateway basic homepage developer guide faq pricing api gateway provides scalable secured frontend service apis work lambda elastic beanstalk regular service allows serverless deployment application built lambda deployment upgrade tricky builtin mechanism single domain name migrate one api gateway another one may necessary build additional layer front even another api gateway allow smooth migration one deployment another api gateway alternative lockin kong opensource onpremises api microservices gateway built nginx lua kong extensible plugins tyk opensource api gateway implemented go available cloud onpremises hybrid api gateway tip could send receive plain text data people would binary data binary data supported api gateway support openapi specification aka swagger allows describe api languageagnostic way use various tool generate code supporting api generating client extremely easy either aws console using getsdk api api gateway integrates cloudwatch outofthebox allowing easy logging request response note request response large cloudwatch truncate log full requestreply logging make sure integration eg lambda good practice calling api gateway apis log request id client later refer request id cloudwatch easier tracing debugging multiple way secure api including builtin support aws cognito usecases cognito easiest simplest way authenticate user although roll solution using custom authorizer basically lambda define determines request acceptable api gateway lends well reststyle development perfectly reasonable implement rpcstyle api api gateway well depending usecase often lead much simpler api structure smoother client experience rpcstyle apis particularly useful designing service sit deeper stack nt serve content directly user api gateway gotchas limitation gateway support encrypted http endpoint support unencrypted http probably good thing gateway support multiregion deployment high availability service deployed single region come global endpoint served aws edge location similar cloudfront distribution multiple api gateway hostname different aws region use route distribute traffic forum post timeout various integration type eg lambda http api gateway timeouts described unlike limit timeouts ca nt increased gateway return status code network low level transport related issue happens may see message cloudwatch log request includes message execution failed due internal error one possible reason error even though backend server running may something outside http specification like sending wellformed chunked message test hitting backend directly curl raw backendendpointurl seeing complains xray support exists cumbersome use aws service calling api gateway trace seemingly end api gateway also appear node service map careful using export feature resulting swagger template often incomplete nt integrate well swagger extension thing cors change api gateway resource need deployed via console api call unfortunately api gateway terrible notifying user change staged deployment change require deployment changed something api taking effect decent chance need deploy particular deploying api gateway part cloudformation stack change automatically deploy unless deployment resource changed change work around always changing deployment resource cloudformation update running custom resource ensures deployment made alternatively using serverless application model definition api gateway resource always expect api deployed stack update since sam generate new deployment every time gateway support nested query parameter method request gateway limit number resource described something considered start using api gateway platform teamorganization deploys api gateway please help expand incomplete section step function step function basic step function tip variety structure supported including branching parallel operation wait task represent real work node frequently lambda function activity externally driven task implemented way like state machine data flow step modified added state machine executes best task idempotent part may want rerun state machine input data debugging aws console facilitates examining execution state various step console let step select input tab failed execution copy input data json select state machine name breadcrumb start new execution pasting input data copied previously step function gotchas limitation step function free tier eligible initial transition per month thereafter charge per state transition many simultaneous execution aware lambda throttling limit peraccount preregion recently became settable perlambda step function execution limited event step creates multiple event mean iterating loop using lambda limited iteration count around needing continue new execution route route basic route alternative lockin historically aws slow penetrate dns market often driven perceived reliability longterm vendor relationship route matured becoming standard option many company route cheap historic dns standard fairly large global network geographic dns formerly premium feature convenient already using aws get locked dns provider simple use case increasingly become tied use specific feature like geographic routing route alias record alternative dns provider exist ranging longstanding premium brand like ultradns dyn le well known modestly priced brand like dnsmadeeasy dns expert tell market opaque enough reliability performance really correlate well price usually somewhere middle pack performance test eg solvedns report route tip route alias record route support standard dns record type note alias resource record set standard part dns specific route feature available dns provider provider different name alias like internal name bit like cname resolved internally server side example traditionally could cname dns name clb alb often better make alias load balancer effect latter case externally client see target record point often wise use alias record alternative cnames since updated instantly api call without worrying dns propagation use clbsalbs resource aws support somewhat confusingly cname alias depending type target alias extension regular dns record exported output zone file additional nonstandard alias line latencybased routing allows user around globe automatically directed nearest aws region running latency reduced understand domain registration dns management hosted zone two separate route service buytransfer domain route automatically assigns four name server eg route also offer automatically create hosted zone dns management required dns management account even route need create n record pointing server assigned domain route one use case would put domain registration mission critical bastion account managing hosted zone within another account accessible application route gotchas limitation hosted zone respond dns query originate within vpc result respond request made via vpn direct connect get around need implement hybrid cloud dns solution use simple ad provided ip address query hosted zone cloudformation cloudformation basic homepage developer guide faq pricing additional charge cloudformation allows manage set resource aws service grouped stack cloudformation allows define stack template using json yaml cloudformation one major service underpinning aws infrastructure code capability crucial enabling repeatable consistent deployment infrastructure additional charge pay underlying resource cloudformation alternative lockin hashicorp terraform thirdparty alternative support cloud platformsproviders including azure openstack aws feature may available terraform eg multiaz elasticache using redis may resort embedded cloudformation template pulumi enables team define deliver cloud native infrastructure code cloud language container serverless kubernetes infrastructure cloudformation tip validate stack different aws account cloudformation truly shine making multiple deployment stack different account region common practice deploy stack successive stage ending production rollout avoid potentially timeconsuming syntax error eating deployment time running validatetemplate cloudformation sometimes slow update resource new feature old service user able define template need deploy resource feature nt supported template cloudformation allows running arbitrary code using lambda stack create update via custom resource custom resource make cloudformation truly powerful tool sort neat thing quite easily sanity test initial configuration dynamo table bucket cleaning old cloudwatch log etc writing custom resource javascript aws provides good reference documentation cloudformation offer visual template designer useful getting speed template syntax using stacksets user define deploy entire production application consisting multiple stack one service per stack single cloudformation template developing serverless application ie using lambda api gateway cloudformation offer simplified template format called sam restrictive stack policy without one inadvertently delete live production resource probably causing severe outage termination protection stack avoid costly accident cloudformation template reference indispensable discovering nt possible cloudformation template troposphere python library make much easier create cloudformation template currently support aws openstack resource type troposphere attempt support resource type described cloudformation template built error checking recommended soft dependency awacs allows generate aws access policy json writing python code stacker python application make easy define configure orchestrate manage dependency cloudformation stack across multiple userdefined environment building different stack similar layer may useful build separate template layer reuse using aws cloudformation stack hardcoding resource parameter potentially change use stack parameter much resort default parameter value cloudformation used awkward json format make reading debugging difficult use effectively typically involved building additional tooling including converting yaml supported directly wherever possible export relevant physical id stack defining output cloudformation template actual name assigned resource created output returned describestack api call get imported stack part recent addition crossstack reference note importing output stack another stack creates hard dependency tracked cloudformation able delete stack output importing stack cloudformation set send sn notification upon state change enabling programmatic handling situation stack fail build simple email alert appropriate people informed cloudformation allows use conditionals creating stack one common way leverage capability support multienvironment cloudformation template configuring use ifelse statement value parameter passed eg env environmentspecific value thing like vpc id securitygroup id ami name passed reusable generic template version control cloudformation template cloud application combination code written infrastructure run version controlling easy roll back known good state avoid naming resource explicitly eg dynamodb table deploying multiple stack aws account name come conflict potentially slowing testing prefer using resource reference instead thing nt ever deleted set explicit deletionpolicy resource prevent resource deleted even cloudformation stack deleted useful anything maintain expensivetorebuild state dynamodb table thing exposed outside world api gateway apis cloudformation gotchas limitation given cloudformation stack end wide variety state error reporting generally weak often time multiple observetweakredeploy cycle needed get working template internal state machine varying state extremely opaque crossregion operation possible cloudformation without using custom resource crossregion sn subscription handmade resource live alongside cloudformationcreated resource inadvisable sometimes unavoidable possible leave resource management cloudformation template provide readonly access console stack resource made outside cloudformation potentially lead stack stuck updaterollbackfailed mode stack state recovered using continueupdaterollback command command initiated console cli resourcestoskip parameter usable cli useful continueupdaterollback command fails new feature drift detection used detect outside change made stack useful complex variety pain point many company find alternate solution many company use significant additional tooling slow especially item like cloudfront distribution cname entry hard assemble good cloudformation configuration existing state aws offer trick clumsy cloudformer also nt updated age oct nt support templatizing many new service wo nt fully define even existing service since updated example dynamo table defined cloudformer wo nt contain ttl definition autoscaling configuration thirdparty version tool supported resource called user use cloudformation limitation find solution preferable often way accomplish goal local script boto bash ansible etc manage build infrastructure dockerbased solution convox etc large stack ie many resource problematic due unintuitive api limit instance api gateway createdeployment api default limit request per minute limit readily exceeded even moderatelysized cloudformation stack creating cw alarm another commonly seen limit putmetricalarm tps especially creating many autoscaling policy dynamodb one way work around limit include cloudformation dependson clause artificially chain resource creation stack little le clean ideal resource leave behind trace aws account even deletion eg lambda leave behind cloudwatch log group never expire vpcs network security security group vpc basic homepage user guide faq security group pricing vpc virtual private cloud virtualized networking layer aws system aws user basic understanding vpc concept need get detail vpc configuration trivial extremely complex depending extent network security need modern aws account created account support vpcs instance default vpc older account may still using mode feature work without vpcs probably want migrate vpc network security tip group first line defense server extremely restrictive port open incoming connection general use clbs alb load balancing port need open incoming traffic would port whatever port application us security group access policy deny default port hygiene good habit pick unique port within unusual range different kind production service example web frontend might use backend service postgres instance usual make sure finegrained security group set server make disciplined listing service also errorproof example accidentally extra apache server running default port backend server exposed migrating classic migrating older deployment modern setup article may help basic aws use one default vpc may sufficient scale consider mapping network topology thoroughly good overview best practice consider controlling access private aws resource vpn get better visibility control connection connection attempt expose smaller surface area attack compared exposing separate potentially authenticated service public internet eg bug yaml parser used ruby rail admin site much le serious admin site visible private network accessed vpn another common pattern especially deployment get larger security regulatory requirement get stringent team size increase provide bastion host behind vpn ssh connection need transit cheap vpn access private aws resource consider using pointtosite software vpn openvpn either installed using official ami though limited concurrent user free license installed using openvpn package linux linux package allows unlimited concurrent user installation le straightforward openvpn installer script help install add client key easily using security group source security group rule instead using cidrs way host source security group host security group allowed access much dynamic secure way managing security group rule vpc flow log allow monitor network traffic within vpc log stored cloudwatch log group used security monitoring third party tool performance evaluation forensic investigation available vpc along announcement came introduction egressonly internet gateway case one would use nat gateway enable egressonly traffic vpc one use egressonly internet gateway purpose amazon provides cidr block vpc request present implement block happen one already new existing vpcs use existing vpcs need configured cidr block associated new vpcs privatelink user guide pricing one us private link interface vpc endpoint deploys eni vpc subnets allows direct access aws api accessible locally vpc without go internet another use case would expose service account aws vpc endpoint service vpc network security gotchas limitation tied one region one account subnets tied one vpc limited one availability zone group tied one vpc utilizing infrastructure multiple vpcs make sure configurationdeployment tool take account endpoint currently available dynamodb security requirement lockdown outbound traffic vpc may want use dns filtering control outbound traffic service careful choosing vpc ip cidr block going need make use classiclink make sure private ip range overlap classic going peer vpcs carefully consider cost data transfer vpcs since workload integration prohibitively expensive rds instance require subnet group within vpc using default vpc concern contain subnet availability zone region however creating vpc plan using rds make sure least two subnets within vpc act subnet group delete default vpc recreate via cli console careful vpc vpn credential lost compromised vpn endpoint must deleted recreated see instruction replacing compromised credential group route table apply entry separately one must ensure add entry protocol accordingly nat gateway convenient alternative manually managing nat instance come cost per gigabyte consider alternative transferring many terabyte private subnets internet transfer terabytespetabytes data instance private subnets avoid nat gateway data processing charge setting gateway type vpc endpoint route traffic tofrom vpc endpoint instead going nat gateway km km basic homepage developer guide faq pricing km key management service secure service creating storing auditing usage cryptographic key service integration km integrates aws service eb elastic transcoder emr redshift rds s workmail workspace encryption apis encrypt decrypt api allow encrypt decrypt data km service side never exposing master key content data key generatedatakey api generates new key master key data key content exposed use encrypt decrypt size data application layer km store manage track data key responsible application turn cloudtrail audit km api event access use key policy iam policy grant different level km access example create iam policy allows user encrypt decrypt specific key km tip common company manage key completely via homegrown mechanism far preferable use service km beginning encourages secure design improves policy process around managing key good motivation overview aws presentation cryptographic detail aws whitepaper blog convox demonstrates use km encryption rest km gotchas limitation encrypt api work data larger data requires generating managing data key application layer audit event available cloudtrail lookup event api need look find raw jsongz file cloudtrail save order encrypt multipart upload km key policy need allow km decrypt km generatedatakey addition km encrypt otherwise upload fail accessdenied error key region specific stored used region created ca nt transferred region key key policy must grant access something manage key nt grant anything access key creation reach support key policy reset reduce risk key becoming unmanagable use key policy grant access iam role user delete userrole recreating user role wo nt grant permission key cloudfront cloudfront basic cloudfront alternative lockin highly fragmented market cloudfront grown leader many alternative might better suit specific need cloudfront tip supported configurable setting enabled default new cloudfront distribution support extends use waf cloudfront supported client must support tl sni common use user browse download content get head method request cloudfront also support since uploaded data post put delete option patch must enable specifying allowed http method create distribution interestingly cost accepting uploaded data usually le sending downloaded data basic version cloudfront support ssl via sni extension tl supported modern web browser need support older browser need pay hundred dollar month dedicated ip invalidation need carefully cloudfront support invalidation object edge location typically take many minute propagate edge location cost per request first request cdns support better everyone use tl nowadays possible ilya grigorik table offer good summary feature regarding tl performance feature cloudfront alternative invalidation often easier manage instant configure distribution cache query string append unique query string version onto asset updated frequently good web performance recommended enable compression cloudfront distribution origin another source already compress cloudfront gotchas limitation using backing store remember endpoint website hosting general different example standard serving endpoint redirect error page support need use website hosting endpoint listed bucket eg appropriate region default cloudfront forward http host header origin server problematic origin run multiple site switched host header enable host header forwarding default cache behavior setting ssl certificate cloudfront support ssl certificate late using externally issued ssl certificate need make sure bit see ongoing discussion although connection client cloudfront edge server make use connection origin server continue use directconnect directconnect basic directconnect tip data center partnering relationship aws setup streamlined use consistent predictable network performance guarantee gbps gbps per link use peer colocation corporate physical datacenter network vpc example extend corporate ldap andor kerberos instance running vpc example make service hosted outside aws financial regulatory legacy reason callable within vpc redshift redshift basic redshift alternative lockin data warehouse select business likely locked long time also coincidentally data warehouse market highly fragmented selecting data warehouse choice made carefully research awareness market landscape business intelligence tool using redshift tip although redshift mostly postgrescompatible sql dialect performance profile different redshift support primitive data type list unsupported postgres type leader node computation node leader node distributes query computation one note function executed lead node sure create new cluster parameter group option group database since default parameter group allow dynamic configuration change major thirdparty bi tool support redshift integration see quora top performance tuning technique amazon redshift provides excellent list performance tuning technique amazon redshift utils contains useful utility script view simplify redshift ops vacuum regularly following significant number deletes update reclaim space improve query performance avoid performing blanket vacuum analyze operation cluster level check table determine whether vacuum analyze action need taken wasteful perform analyze vacuum command object require utilize analyze vacuum schema utility perform work sql determine whether table need vacuumed analyzed found schema utility readme wish create maintenance process redshift provides various column compression option optimize stored data size aws strongly encourages user use automatic compression copy stage redshift us sample data ingested analyze column compression option however automatic compression applied empty table data therefore make sure initial load batch big enough provide redshift representative sample data default sample size row redshift us columnar storage hence indexing capability however use distribution key sortkey improve performance redshift two type sort key compounding sort key interleaved sort key compound sort key made column listed sort key definition useful query operation using prefix sortkey interleaved sort key hand give equal weight column subset column sort key nt know ahead time column want choose sorting filtering much better choice compound key example using interleaved sort key distribution strategy since data redshift physically distributed among node choosing right data distribution key distribution style crucial adequate query performance three possible distribution style setting even default key use key collocate join key column table joined query use place data smallsized table cluster node redshift gotchas limitation redshift handle heavy query well scale horizontally ie handle multiple query parallel therefore expect high parallel load consider replicating possible sharding data across multiple cluster leader node manages communication client program communication compute node single point failure redshift query parallelize well compute node level certain stage executed leader node become bottleneck data commit transaction expensive serialized cluster level therefore consider grouping multiple mutation command copyinsertupdate command single transaction whenever possible support multiaz deployment building multiaz cluster trivial example using kinesis storing multiple small table redshift way redshift table laid disk make impractical minimum space required store table mb node slicesnode column example node cluster empty table column occupy disk query performance degrades significantly data ingestion wlm workload management tweak help extent however need consistent read performance consider replica cluster extra cost swap update never resize live cluster resize operation take hour depending dataset size rare case operation may also get stuck end nonfunctional cluster safer approach create new cluster snapshot resize new cluster shut old one reserved keywords present postgres see full list watch delta delta encoding support many postgres function notably several datetimerelated aggregation function see full list uniqueness primary key foreign key constraint redshift table informational enforced however used query optimizer generate query plan null column constraint enforced see information defining constraint sort key result significant performance impact redshift query involving sort key slow might want consider removing compression sort key choosing sort key important since change table sort key created need change sort distribution key table need create new table new key move data query like insert newtable select oldtable moving data query look like insert x select need twice much disk space available table take cluster disk redshift first copy data disk new table good article big table emr emr basic homepage release guide faq pricing emr used stand elastic map reduce anymore since extends beyond mapreduce service offer managed deployment hadoop hbase spark reduces management burden setting maintaining service emr alternative lockin emr based open source technology principle deploy however job workflow much tooling awsspecific migrating emr cluster possible always trivial emr tip emr relies many version hadoop supporting software sure check version use emr hadoop significant overhead compared efficient processing single machine data small performance matter may wish consider alternative post illustrates python programmer may want take look yelp mrjob take time tune performance emr job thirdparty service qubole data service gaining popularity way improve performance reduce cost emr gotchas limitation cost pile quickly since involves lot instance efficiency poor depending cluster configuration choice workload accident like hung job costly see section cost management especially tip spot instance blog post additional tip written prior shift persecond billing beware doubledipping emr pay capacity service fee addition emr syncs task log mean pay storage put request standard rate log file tend relatively small every hadoop job depending size generates thousand log file quickly add thousand dollar aws bill yarn log aggregation available emr kinesis stream kinesis stream basic homepage developer guide faq pricing kinesis stream used called kinesis kinesis firehose kinesis analytics launched service allows ingest highthroughput data stream immediate delayed processing aws service kinesis stream subcomponents called shard shard provides write capacity read capacity maximum read per second stream shard programmatically increased decreased based variety metric record entered kinesis stream assigned unique sequence number captured record stream ordered number timeordering preserved page summarizes key term concept kinesis stream kinesis stream alternative lockin kinesis closely compared apache kafka opensource data ingestion solution possible set kafka cluster hosted instance vps however responsible managing maintaining zookeeper kafka broker highly available configuration confluent good blog post recommendation link bottom several blog written subject kinesis us awsspecific apis aware potential future cost migrating away choose use application efficiently us kinesis stream scale number shard based required streaming capacity note direct equivalent apache kafka kinesis stream tip kcl kinesis client library provides skeleton interface java node python ruby net program easily consume data kinesis stream order start consuming data stream need provide config file point correct kinesis stream function initialising consumer processing record shutting consumer within skeleton provided kcl us dynamodb table keep track record processed kcl ensures record processed least developer ensure program handle doublyprocessed record kcl also us dynamodb keep track kcl worker automatically share available kinesis shard across worker equally possible kinesis stream gotchas limitation kinesis stream shard permit read per second evenly distributing data across many shard read limit stream remain read per second aggregate consuming application need check every single shard new record put hard limit number different consuming application possible per stream given maximum read latency example consuming application reading data one stream number shard read latency le one second consumer need poll shard every second reaching cap read per second per shard blog post discus performance limitation kinesis production kinesis stream included free tier make sure experimentation personal account shut stream may run unexpected cost per shardmonth kinesis firehose kinesis firehose gotchas limitation delivering firehose elasticsearch json document contain id property firehose attempt deliver document wo nt log error device farm device farm basic homepage developer guide faq pricing device farm aws service enables mobile app testing real device support io android including kindle fire device well mobile web support remote device access order allow interactive testingdebugging device farm tip aws mobile blog contains several example device farm usage testing device farm offer free trial user want evaluate service device farm offer two pricing model paying per device minute useful small usage level situation hard predict usage amount unmetered plan useful situation active usage expected beginning minimize waiting time device availability one approach create several device pool different device randomly choose one unused device pool every run device farm gotchas limitation nt sim card therefore used testing sim cardrelated feature farm support testing popular languagesframeworks actual list supported framework language presented page api cli device farm quite low level may require developing additional tool script top provide several tool plugins device farm however cover case platform may require developing specific tool plugins support specific requirement general device farm android device chinese company like huawei meizu lenovo etc actual list supported device located availibility uneven depends several factor including device popularity usually modern device see higher demand thus waiting time higher compared relatively old device mobile hub mobile hub basic mobile hub orchestrates multiple service create aws backend mobile web application project mobile hub one backend made configurable feature plus one application feature include analytics cloud logic conversational bot hosting streaming nosql database user data storage user signin feature us one two service deliver chunk functionality service used include api gateway cloudfront cognito device farm dynamodb lambda lex pinpoint application sdks exist android java io swift web j react native j also cli javascript application mobile hub tip mobile hub console starter kit tutorial various app platform cli allows local development lambda code j default awsmobile pullpush command sync cloud folder back mobile hub free service pricing model mobile hub gotchas limitation cloud api feature allows importing existing lambda function instead defining new one rough edge cli check github issue hub us cloudformation cover get confused service changed outside mobile hub console iot iot basic iot platform allowing client iot device software application example communicate aws cloud client also called device thing include wide variety device type roughly three category device type interact iot service sending message iot protocol iot pubsubstyle message broker called iot device gateway aws useful quickstart using console slide presentation core topic iot term aws iot thing metadata device registry store device state json document called device shadow device metadata also stored iot thing type aid device metadata management allowing reuse device description configuration one device note iot thing type deprecated changed immutable aws iot certificate device authentication logical association unique certificate logical representation device association done console addition public key certificate must copied physical device cover authentication device particular aws device gateway message broker associate aws iot certificate iot device register ca certificate authority aws generate certificate associate certificate device via aws console cli aws iot policy devicetopic authorization json file associated one aws iot certificate authorizes associated device publish andor subscribe message one mqtt topic aws iot rule sqllike query allows reuse device message data described presentation summarizes design pattern iot rule shown diagram summarizes flow message aws iot service iot greengrass homepage software platform extends aws iot capability allowing lambda function run directly local device also enables iot device able securely communicate local network without connect cloud greengrass includes local pubsub message manager buffer message connectivity lost inbound outbound message cloud preserved locally deployed lambda function triggered local event message cloud source greengrass includes secure authentication authorization device within local network also local network aws cloud also provides secure overtheair software update lambda function greengrass core software includes message manager object lambda runtime local copy service iot thing device shadow deployment agent manage greengrass group configuration greengrass group container selected iot device setting subscription associated lambda function greengrass group device either greengrass core iot device connected particular greengrass core greengrass core sdk enables lambda function interact aws greengrass core run order publish message interact local thing shadow service invoke deployed lambda function aws greengrass core sdk support sending mqtt message qos shown diagram show architecture aws iot greengrass service iot alternative lockin aws microsoft google introduced iotspecific set cloud service since late aws first moving iot service general availability dec microsoft released set iot service azure feb google previewed released iot service android thing weave issue lockin center around device protocol example mqtt amqp message format json v hex security certificate iot tip getting started button one way start use aws iot button aws provides number code sample use iot button use aws iot console click connect aws iot button link taken aws lambda console fill button serial number associate lambda writing aws iot button available sale u connection protocol important understand detail device wish connect aws iot service including secure device connection device protocol cloud vendor differ significantly support common iot protocol mqtt amqp xmpp aws iot support secure mqtt websockets http support device security via certificate processing key differentiator space august aws added justintime registration iot device service combining service common use aws service aws lambda kinesis dynamodb although mean required sample iot application reference architecture screencast testing tool get started aws includes lightweight mqtt client aws iot console create test sending receiving message various mqtt topic testing locally using mqtt may helpful download use open source mosquitto broker tool local testing device andor device simulator use mqtt load simulator test device message load throughout iot solution iot gotchas limitation protocol important verify exact type support particular iot device message protocol example one commonly used iot protocol mqtt within mqtt three possible level qos mqtt aws iot support mqtt qos fire forget qos least includes confirmation qos exactly requires confirmation important understanding much code need write particular application message resolution need presentation nuance connecting ecosystem match iam user role iot policy associated authorized aws iot device immature custom coding enforce security requirement common common mistake misunderstand importance iot device security imperative associate device unique certificate public key generate certificate upload aws use aws generated iot device certificate best read understand aws guidance topic one aws iot gateway endpoint per aws account production scenario probably need set multiple aws account order separate device traffic development test production interesting note azure iot gateway support configuration multiple endpoint single azure account used separate pubsub endpoint development testing production aware limit including device message size type frequency number aws iot rule iot code sample s s basic homepage documentation faq pricing s simple email service service expose smtp endpoint application directly integrate s tip handling make sure handle early enough ability send email removed s see many bounce many developer get confused s credential aws api key make sure enter smtp credential using smtp apis s gotchas limitation access s smtp endpoint internet accessible location without internet access eg private subnet without nat gateway route routing table case set smtp relay instance subnet internet access configure application send email smtp relay instance rather s relay forwarding rule send email s using proxy instead nat confirm proxy service support smtp certificate manager certificate manager basic homepage user guide faq pricing use certificate manager manage ssltls certificate aws service support importing existing certificate well issuing new one provides domain validated dv certificate validation done two way first recommended way via dns zone life within route user access necessary record added console via single click certificate request process zone within route user required update dns manually still preferred second way requires user interaction done sending email contact address whois common address domain domain name present request acm attempt automatically renew certificate issued amazon first attempt connect domain http check certificate used domain certificate intends renew failing check dns record used previously validation failing acm attempt manual validation sending email domain certificate certificate manager alternative lockin issued certificate manager used outside service support imported certificate however still used elsewhere certificate manager tip service managed load balancer cloudfront api gateway elastic beanstalk domain validation process dns validation unsuccessful certificate manager send email every contact address specified domain whois record five common administrative address antispam filter mark email spam check spam folder email receive confirmation email setting certificate test domain nt email set use dns validation instead requesting wildcard domain request valid level wildcard subdomains preceding wildcard take example approved issued certificate barexamplecom would valid foobarexamplecom barexamplecom likewise would also valid wwwbarfooexamplecom would need add domain certificate request certificate manager gotchas limitation order use certificate manager cloudfront distribution certificate must issued imported n virginia region used elastic load balancer must issued region load balancer certificate moved copied region july domain us load balancer present multiple region different certificate must requested region way setting certificate default maximum number domain per certificate get limit increased maximum contacting aws support note every different domain requested cert need press accept email sent domain example request cert different domain sub domain need press accept different link request limit increase aws support respond asking confirm bypass saying body initial request acknowledge moment method add remove name certificate instead must request new certificate revised namelist must reapprove name certificate even previously approved way moment add remove domain tofrom existing certificate must request new certificate reapprove domain requested waf waf basic homepage documentation faq pricing waf web application firewall used conjunction cloudfront alb service inspect blockallow web request based userconfigurable condition http http request supported service waf strength detecting malicious activity based patternmatching input attack sql injection x etc waf support inspection request received waf tip waf gotchas limitation may aws waf available amazon cloudfront commercial aws region u east n virginia u east ohio u west oregon u west n california eu ireland eu frankfurt eu london eu stockholm asia pacific tokyo asia pacific sydney asia pacific singapore asia pacific seoul opsworks opsworks basic homepage documentation faq pricing stack chef automate puppet enterprise opsworks configuration management service us chef puppet configuration management broken three different service opsworks stack service let configure launch stack specific application need allows automate application deployment chef run performed manually via execute cookbook command otherwise run part lifecycle event opsworks stack differs standard configuration management service also allows perform infrastructure application automation creating amazon instance deploying application via chef cookbook opsworks chef automate service launch dedicated chef automate server account used associate node upload cookbook code configure system automated patching backup o update minor chef version upgrade provided part service aws api provided associatingdisassociating node chef run scheduled node using chefclient cookbook opsworks puppet enterprise service launch dedicated puppet master account used associate node upload module configure system automated patching backup o update minor puppet version upgrade provided part service aws api provided associatingdisassociating node default puppet agent run automatically every minute associated node opsworks chef automate opsworks puppet enterprise strictly designed configuration management provision infrastructure outside chef serverpuppet master created account three opsworks service support managing amazon onpremises infrastructure however implementation detail differ slightly opsworks stack allows register instance install opsworks agent connect stack opsworks chef automate opsworks puppet enterprise allow associate new existing infrastructure using either opsworkscm associatenode api action vendorsupported method associating node chef server puppet enterprise although opsworks let work common chef recipe puppet module creating stack creating custom recipe require familiarity chef puppet syntax chefpuppet code supported part aws support december opsworks stack support chef version december opsworks chef automate us chef server version current stable version chef berkshelfcan used chef stack version later managing cookbook respective dependency however chef stack berkshelf must installed stack administrator running chef environment may alternative consider consideration listed bitlancer article opsworks alternative lockin major competitor configuration management include opsworks tip opsworks stack opsworks chef automate use chef cookbook configuration chef provides free training learn syntax best practice etc http learnchefio opsworks puppet enterprise us puppet manifest configuration puppet provides useful learning vm download http learnpuppetcom opsworks gotchas limitation opsworks stack available following region montreal govcloud beijing opsworks chef automate opsworks puppet enterprise available following region montreal sao paulo govcloud london paris seoul mumbai batch batch basic homepage documentation faq pricing aws batch service offer environment run batch computing job service dynamically provision optimal compute resource needed job based resource requirement scale hundred thousand job batch workload access aws service feature aws batch coupled spot instance help run job appropriate capacity available providing optimal utilization compute resource batch workload built docker image image pushed container registry ecr private repository accessed aws job definition workload docker image uri also let user specify environment detail like vcpus memory volume mapping environment variable parameter retry strategy container property job iam role compute environment cluster provide runtime batch workload execute aws batch provides managed well unmanaged compute environment managed environment provisioned managed aws unmanaged environment managed customer job definition submitted job queue execution queue priority least one compute environment associated aws batch us ec execute containerized job batch tip aws batch support prioritization job via job queue priority higher number higher priority aws batch support launching compute environment specific vpc subnets compute environment ec cluster additional cost aws batch pay cost associated aws service used like instance resource consumed batch job associate iam role policy compute environment enable container access aws resource use unmanaged compute environment need specialized resource like dedicated host efs sqs sqs basic homepage documentation faq pricing sqs highly scalable fully managed message queuing service aws sqs support pull model producer queue message consumer pull message queue sqs provides message visibility timeout message processed delivered consumer consumer delete message processing message becomes available consumer upon reaching message visibility timeout parameter called visibilitytimeout message custom field attribute sqs allows producer set minute delay message delivered consumer parameter called delayseconds two type queue supported sqs standard queue guarantee least delivery message retain order delivery message fifo queue guarantee delivery message guarantee order delivery message sqs support fine grained access various api call queue via iam policy message fail process put dead letter queue sqs alternative lockin sqs tip sn used combination sqs build fan mechanism sqs queue subscribe sn topic sqs support encryption using aws km cloudwatch alarm creating using various sqs metric trigger autoscaling action andor notification sqs gotchas limitation sqs vpc endpoint unlike dynamodb sqs need accessed using public sqs api endpoint fifo queue limited api call per second fifo queue subscribe sn topic standard queue deliver duplicate message regardless visibility window onlyonce delivery choice use fifo queue build additional layer dedupe message sendreceive message batch however maximum message batch sn sn basic homepage documentation faq pricing sn simple notification service pubsub based highly scalable fully managed messaging service also used mobile notification sn push message subscriber via sm email sqs http transport protocol producer publish message sn topic many subscriber subscription associated protocol used notify subscriber copy message sent subscriber using associated protocol sn also invoke lambda function sn alternative lockin popular alternative sn kafka notification hub azure pubsub google cloud sn v sqs sn sqs highly scalable fully managed messaging service provided aws sqs support pull model sn support push model consumer pull message sqs queue pushed message sn topic sqs message intended processed one subscriber sn topic many subscriber processing sqs message deleted queue subscriber avoid reprocessed sn message pushed subscriber topic time available deletion topic sn support multiple transport protocol delivery message subscriber sqs subscriber pull message queue http sn tip fanout architecture achieved multiple subscriber topic particularly useful event fanned multiple isolated system sn topic used power webhooks backoff support subscriber http sqs queue subscribe sn topic sn used manage notification aws service like autoscaling group notification cloudwatch alarm etc sn frequently used glue disparate github aws service sn gotchas limitation http subscriber sn topic need public endpoint sn support calling private endpoint like private subnet within vpc fanout scenario sseenabled sqs subscriber sn topic receive message sent topic high availability section cover tip information achieving high availability high availability tip aws offer two level redundancy region availability zone az used correctly region zone allow high availability may want use nonaws provider larger business risk mitigation ie tying company one vendor reliability aws across region high multiple region using multiple region complex since essentially like managing completely separate infrastructure necessary businesscritical service highest level redundancy however many application like average consumer startup deploying extensive redundancy across region may overkill high scalability blog good guide help understand need scale application multiple region az using az wisely primary tool high availability typical singleregion high availability architecture would deploy two availability zone load balancing front aws diagram bulk outage aws service affect one zone rare outage affecting multiple zone simultaneously example great eb failure general customer outage due using single az infrastructure consequently design architecture minimize impact az outage especially singlezone outage deploy key infrastructure across least two three az replicating single resource across three zone often make sense backup mechanism place like snapshot second third az significantly improve availability additional reliability az may justify cost complexity unless reason like capacity spot market price crossaz traffic cost unpleasant surprise architecture large volume traffic crossing az boundary deploy instance evenly across available az minimal fraction capacity lost case az outage architecture single point failure put single az may seem counterintuitive minimizes likelihood one spof go outage single az eb v instance storage number year ebs poorer track record availability instance storage system individual instance killed restarted easily instance storage sufficient redundancy could give higher availability overall eb improved modern instance type since ebsonly approach helpful one time may increasingly archaic sure use understand clbsalbs appropriately many outage due using load balancer misunderstanding misconfiguring high availability gotchas limitation naming differs one customer account next another customer letter assigned physical az randomly per account also gotcha multiple aws account note zone id consistent account used reliably align aws account traffic free large scale cost add significant amount money possible optimize traffic stay within az much possible billing cost management billing cost visibility aws offer free tier service allows limited usage resource cost example micro instance small amount storage available charge many service eligible free tier first twelve month account exists service offer free usage tier indefinitely old account starting fresh sign new one qualify free tier aws activate extends ten thousand dollar free credit startup certain fund accelerator set billing alert notified unexpected cost cost exceeding free tier set granular way aws offer cost explorer tool get better visibility cost unfortunately aws console billing tool rarely enough give good visibility cost large account aws billing console time slow use tool billing report install open source tool help manage monitor aws resource utilization teevity ice originally written netflix probably first one try check dockerice dockerized version eas installation challenge ice cover amortized cost reserved instance tool include security monkey cloud custodian use aws simple monthly calculator get estimate usage charge aws service based certain information provide monthly charge based actual usage aws service may vary estimate calculator provided thirdparty service several company offer service designed help gain insight expense lower aws bill cloudability cloudhealth technology parkmycloud charge percentage bill may expensive see market landscape aws trusted advisor another service help cost concern shy asking account manager guidance reducing bill job keep happily using aws tagging cost visibility infrastructure grows key part managing cost understanding lie strongly advisable tag resource complexity grows group effectively set billing allocation appropriately get visibility expense according organization product individual engineer way helpful need custom analysis raw billing data want feed third party cost analysis service enable detailed billing report feature multiple amazon account linked billing purpose using consolidated billing feature large enterprise may need complex billing structure depending ownership approval process multiple amazon account managed centrally using aws organization aws data transfer cost deployment involve significant network traffic large fraction aws expense around data transfer furthermore cost data transfer within az within region region aws internet vary significantly depending deployment choice common gotchas traffic note traffic az effectively region example deploying cassandra cluster across az helpful high availability hurt network cost public ip necessary use elastic ip public ip address instance incur network cost even accessed locally within az nat gateway data processing managed nat gateway used let traffic egress private subnets cost data processing fee layered top data transfer pricing past certain point running nat instance becomes far cost effective service crossaz traffic free many aws service consider merit offer hidden value free crossaz data transfer efs rds msk others example figure give overview cost management tradeoff engineering effort analysis tool complex architecture spend rate aws cost small many effort worth engineering time required make work know cost growing excess engineer salary serious investment often worthwhile larger instance necessarily priced higher spot market therefore look available option determine instance cost effective job see bid advisor instance spot instance way get resource significant discount often many time cheaper standard ondemand price willing accept possibility terminated little warning use spot instance potentially significant discount whenever use resource may restarted maintain longterm state huge saving get spot come cost significant increase complexity provisioning reasoning availability compute capacity amazon maintains spot price marketdriven fluctuating level based inventory unused capacity price typically low spike high see price history get sense set bid price high indicate high willing pay pay going rate bid rate market rate exceeds bid instance may terminated price per instance type per availability zone instance type may wildly different price different zone time different instance type different price even similarly powered instance type zone compare price across instance type better deal use spot instance whenever possible setting high bid price assure machine stay vast majority time fraction price normal instance get notified two minute pricetriggered shutdown polling spot instance metadata watching termination cloudwatch event make sure usage profile work well spot investing heavily tool manage particular configuration spot fleet realize even bigger cost reduction time improvement fleet stability relative regular spot usage using spot fleet bid instance across instance type availability zone multiple spot fleet request region spot fleet target maintaining specified weightedbyinstancetype total capacity across cluster server spot price one instance type availability zone combination rise weighted bid rotate running instance bring new one another type location order maintain target capacity without going target cluster cost spot usage best practice application profiling profile application figure runtime characteristic would help give understanding minimum cpu memory disk required information critical try optimize spot cost know minimum application requirement instead resorting fixed instance type bid across variety instance type give higher chance getting spot instance run application eg know cpu core enough job choose instance type equal core least spot price based history help bid instance greater discount le demand point spot price monitoring intelligence spot instance price fluctuate depending instance type time day region availability zone aws cli tool api allow describe spot price metadata given time instance type regionaz based history spot instance price could potentially build myriad algorithm would help pick instance type way optimizes cost maximizes availability offer predictable performance also track number time instance certain type got taken away bid plot graphite improve algorithm based time day spot machine resource utilization running spiky workload spark map reduce job schedule based failure non critical spot instance become perfect candidate time take satisfy spot instance could vary min depending type instance availability machine az running infrastructure hundred job spiky nature advisable start pooling instance optimize cost performance importantly time acquire instance pooling implies creating maintaining spot instance get terminated use promotes reuse spot instance across job course come overhead lifecycle management pooling set metric tracked optimize resource utilization efficiency cost typical pooling implementation give anywhere cost optimization reduction spot instance creation time excellent example pooling implementation described netflix spot management gotchas guarantee lifetime spot instance purely based bidding anyone outbids price instance taken away spot suitable time sensitive job strong sla instance fail based demand spot time aws provides twominute warning amazon must terminate spot instance return data spot price api return spot price varying granularity depending time range specified api calleg last min worth history requested data fine grained last day worth history requested data coarser assume get data point skipped interval management attempt fancy spot management unless absolutely necessary entire usage machine cost acceptable failure rate lower attempt optimize pain buildingmaintaining worth hundred dollar saving reserved instance allow get significant discount compute hour return commitment pay instance hour specific instance type specific aws region availability zone preestablished time frame year discount realized partial upfront payment option consider using reserved instance predict longerterm compute need need stronger guarantee compute availability continuity typically cheaper spot market provide however aware architecture change computing need may change well long term contract seem attractive may turn cumbersome two type reserved instance standard convertible purchase excess standard reserved instance may offer sell back unused reserved instance via reserved instance marketplace allows potentially recoup cost unused compute instance hour selling aws customer instance reservation tied specific instance applied billing level eligible compute hour consumed across instance account scattered report convertible ri purchase needing exercised block namely buy five convertible ri one purchase ca nt convert two reach account manager clarification may impact multiple aws account configured roll charge one account using consolidated billing feature expect unused reserved instance hour one account applied matching region availability zone instance type compute hour another account multiple aws account linked consolidated billing plan using reservation want unused reservation capacity able apply compute hour account need create instance availability zone name across account keep mind done instance may end physical data center across account amazon shuffle availability zone name across account order equalize resource utilization make use dynamic auto scaling possible order better match cluster size cost current resource requirement service use rhel instance happen existing rhel onpremise red hat subscription leverage red hat cloud access program migrate portion onpremise subscription aws thereby saving aws charge rhel subscription either use selfcreated rhel ami red hat provided gold image added private ami sign red hat cloud access reading section cover unusually useful must know resource list aws book general reference aws well architected framework guide amazon page guide operational excellence guideline checklist validate baseline security reliability performance including high availability cost optimization practice awesome microservices curated list tool technology microservice architecture worth browsing learn popular open source project fast yet ilya grigorik tl performance overview high performance browser networking full modern book web network performance presentation portion disclaimer author contributor content guarantee validity information found please make sure understand information provided provided freely kind agreement contract created person associated content project author contributor assume hereby disclaim liability party loss damage disruption caused error omission information contained associated linked content whether error omission result negligence accident cause license work licensed creative common attributionsharealike international license
341,Lobsters,virtualization,Virtualization,Much Ado About Type-2 (2010),https://microkerneldude.wordpress.com/2010/10/14/much-ado-about-type-2/,much ado,arrive around month defines state art hypervisors embedded system blog year ago another one month earlier terminology introduced month ago phone get infected malware nothing like,vmware finally lifted lid longpromised mobile virtualization platform mvp surprise hypervisor bit letdown interesting implication mvp rather going explore blog first bit background observer mobile virtualization space remember two year ago vmware better known server desktop virtualization product bought competitor trango time promised mvpbased product arrive around month phone mvp almost month later even product announcement mvp bit like waiting meantime microvisor around yonks available benchmarkable real befits something name defines state art hypervisors embedded system well last least vmware presented vision accompanied demo bof last week osdi conference vancouver exactly highprofile announcement hypervisor discussed v blog year ago another one month earlier probably explore topic bit future blog focus vmware trying sell actually solve problem claim addressing technical discussion look taking particular stance hint got hammer everything look like nail even hypervisors also called virtual machine monitor designed provide multiple virtual machine run o apps fundamental difference hypervisor former run bare metal hardware operating system contrast hypervisor run top o also called hosted hypervisor difference much significant may seem implies completely different relationship hypervisor various operating system hypervisor master control os called guest master o one host hypervisor control hypervisor control os keep mind problem vmware pretending solve hypervisor main use case highlighting byod bring device yes adopted terminology introduced month motivation byod smartphones business well private use people like control private phone want decide type model want install choice apps contrast company like control phone used business want decide model ideally single one everybody software run force increasing number people carry two phone business private idea byod single phone serve purpose person buy phone choice take company dude install virtual business phone byod handset sound great devil detail detail make mvp nonsolution company want control phone one reason security whole point issuing smartphones employee keep linked enterprise infrastructure move traditionally email address book calendar increasingly much deeper integration enabling phone access employee record sale database engineering access computer screen office bottom line company worried security integrity data accessed via mobile device phone tablet whatever might worried accessing critical data uncontrolled phone put critical enterprise information risk right phone get infected malware application installed risk infection increase core challenge byod must address surely vmware understands maybe offer solution cut mustard reason say byod model vmware propagating nothing solve fundamental security issue hypervisors system structure illustrated figure left hypervisor control hardware isolates vms os user get private o infected tough infection spread across vms business environment order subvert attacker either already subverted enterprise infrastructure thus coming business side business o attack hypervisor private vm hypervisor extremely small attack surface hypervisor small line code technically speaking business vm small trusted computing base tcb vmware model quite different business environment controlled hypervisor controlled host o one come byod phone get cracked inevitably trivial crack hypervisor control business o reason easy crack setup business o huge tcb includes complete private o likely comprises upwards line order magnitude remember coming original motivation byod company trust people private phone critical business data phone get cracked would compromise business data idea byod promoted ok lab provide virtual business phone private handset secure physically separate handset followed argumentation see vmware solution bit secure allowing people access business data normal private phone without detour via hypervisor word mvp add nothing security would pay might well cut middle man allow people access enterprise system unmodified private phone securitywise difference whatsoever ok lab believe security something solved pr requires technicallysound approach requires minimal tcb requires stay tuned indepth look issue like like loading
342,Lobsters,virtualization,Virtualization,OpenBSD vmm enabled,http://undeadly.org/cgi?action=article&sid=20161012092516&mode=expanded,openbsd vmm enabled,phessler small commit please donate bid signed cd set,contributed phessler turtlesallthewaydown dept small commit openbsd hypervisor virtualization intree lot hard work mike larkin reyk flöter many others vmm requires certain hardware feature intel nehalem later virtualization enabled bios order provide vm service currently support openbsd guest cvsroot cv module name src change mlarkin cvsopenbsdorg modified file generic log message enable vmm enabled snapshot week favourite mirror already ready upgrade course please report bug run work partially sponsored openbsd foundation like please donate bid signed cd set
343,Lobsters,virtualization,Virtualization,EC2's most dangerous feature,http://www.daemonology.net/blog/2016-10-09-EC2s-most-dangerous-feature.html,dangerous feature,dangerous feature iam role amazon identity access management freebsd ami builder ami simple system manager agent perfectly good keyvalue data store view forum thread blog comment powered,dangerous feature freebsd developer someone writes c believe strongly idea tool policy want shoot foot help deliver bullet foot efficiently reliably possible unix always built around idea system administrator better equipped figure want developer o almost impossible prevent footshooting without also limiting useful functionality powerful tool inevitably dangerous often best solution simply ensure come sufficient warning label attached occasionally see tool lack important warning label also designed way make far dangerous necessary case iam role amazon review reader unfamiliar feature amazon iam identity access management service allows creation access credential limited scope example key read object amazon write object iam role mechanism automatically creating credential distributing instance specify policy launch instance role attached magic happens making timelimited credential available via instance metadata simplifies task creating distributing credential convenient use freebsd ami builder ami example despite convenient two rather scary problem feature severely limit situation recommend using first problem one configuration language used specify iam policy sufficient allow instance properly limited power example suppose want allow instance create attach detach delete elastic block store volume automatically useful want filesystems automatically scaling depending amount data contain obvious way would tag volume belonging instance provide role act volume tagged instance role provided second part limiting action tagged volume seems possible way require specific api call parameter permitted createvolume call would necessary require tag applied new volume created instance also seems gap createvolume api call documented returning list tag assigned newly created volume advertise support assigning tag part process creating volume least could easily fixed even sure failing api call documentation api call difficulty sometimes impossibility writing appropriately finegrained iam policy result proliferation overbroad policy example prewritten policy amazon provides allowing simple system manager agent make api call requires permit get put object terrifying proposition store data nt want see made available managed instance problematic configuration far larger problem iam role amazon access control precise lack thereof mentioned earlier iam role credential exposed instance via instance metadata system word available http presume http server responds running another xen domain physical hardware implementation detail unimportant make credential easy program obtain unfortunately easy program obtain unix designed multiuser operating system multiple user group permission flag often even sophisticated acls system control ability make outgoing http request write software relies privilege separation reduce likelihood bug result full system compromise process running user nobody chrooted varempty still able fetch aws key read every one object stored really meaningful privilege separation borrow phrase ted unangst way iam role expose credential instance make effective exploit mitigation mitigation technique make worse exposing credential metadata matter via http completely unnecessary run xen already perfectly good keyvalue data store conveying metadata host guest instance would absolutely trivial amazon place metadata including iam credential xenstore almost trivial instance expose xenstore filesystem standard unix permission could applied providing iam role credential full range access control functionality unix affords file stored disk course lot code relies fetching instance metadata http trivial would still take time write code pushing metadata xenstore exposing via filesystem inside instance even someone aws read blog post immediately say hey fix sure stuck problem iam role year come consider warning label iam role may seem like gun use efficiently reliably shoot foot fact like gun difficult aim might fired someone side room snapping finger handle care view forum thread blog comment powered
344,Lobsters,virtualization,Virtualization,Windows 10 will soon run Edge in a virtual machine to keep you safe,http://arstechnica.com/information-technology/2016/09/windows-10-will-soon-run-edge-in-a-virtual-machine-to-keep-you-safe/,window soon run edge virtual machine keep safe,enlarge qubes o,enlarge untrusted site get minimal set window platform service access rest systemmicrosoft announced next major update window run edge browser lightweight virtual machine running update virtual machine make exploiting browser attacking operating system compromising user data challenging called window defender application guard microsoft edge new capability build virtual machinebased security first introduced last summer window window virtualization based security vbs us small virtual machine hyperv hypervisor isolate certain critical data process rest system important credential guard store network credential password hash isolated virtual machine isolation prevents popular mimikatz tool harvesting password hash turn also prevents hacker breaking one machine using stolen credential spread machine network edge browser already creates secure sandbox process technique try limit damage done malicious code run within browser sandbox limited access rest system data successful exploit need break free sandbox constraint often attacking operating system using operating system flaw elevate privilege credential guard virtual machine small lightweight running relatively simple process manage credential application guard go much running large part edge browser within virtual machine virtual machine wo nt however need full operating system running inside minimal set window feature required run browser application guard running virtual machine much higher barrier host platform ca nt see process ca nt access local storage cant access installed application critically ca nt attack kernel host system first iteration application guard available edge microsoft wo nt provide api let application use vbs feature application guard also available user window enterprise administrative control group policy administrator able mark site trusted site wo nt use virtual machine admins also able control whether untrusted site use clipboard print microsoft recognizes feature would desirable consumer machine edge browser chrome would also benefit kind protection would office protected mode used opening document untrusted source however certain complexity currently virtualized site ca nt store persistent cooky example virtual machine get destroyed browser closed may acceptable lockeddown enterprise environment nt good fit consumer also compatibility constraint vbs installs hyperv hypervisor requires processor hardware virtualization support also requires io virtualization intel vtd protect certain known attack mean system wild wo nt support also software concern one hypervisor installed time mean machine running hyperv also run vmware workstation virtual box say software us virtualization behind scene bluestacks androidonwindows software virtualization also likely come performance cost although microsoft saying performance cost right nonetheless use virtualization harden system exciting move experimental specialuse system qubes o used virtualization similar way far mainstream offering microsoft uniquely positioned take kind capability mainstream application guard become available later year insider build window hitting stable version time
345,Lobsters,virtualization,Virtualization,Build and run your first Docker Windows Server container - Docker Blog,https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/,build run first docker window server container docker blog,blog post technical improvement post announcing docker inc microsoft partnership window anniversary update anniversary update docker window direct download link stefan scherers blog post window server download free evaluation version microsoft documentation comprehensive instruction running window container building pushing window container image free docker id docker build dockerfile web interface using dockercompose window http githubcomfriismmusicstore musicstore dockercompose f dockercomposewindowsyml summary golang mongodb python docker docker forum question,today microsoft announced general availability window server docker engine running container natively window blog post describes get setup run docker window container window using window server vm check companion blog post technical improvement made docker container window possible post announcing docker inc microsoft partnership getting started important understand window container run window executables compiled window server kernel userland either windowsservercore nanoserver build run window container window system container support required window anniversary update developer window great place run docker window container containerization support added window kernel anniversary update note container image based window server core nanoserver window missing windowsnative docker engine image base layer simplest way get window docker engine installing docker window public beta direct download link docker window used setup linuxbased docker development environment slightly confusing know public beta version set linux window docker development environment working improving window container support linuxwindows container interoperability public beta installed docker window tray icon option switch linux window container development detail new feature check stefan scherers blog post switch window container skip next section window server window server docker window container deployed production developer planning lot docker window container development may also worth setting window server dev system vm example least window docker window support window container matures microsoft ignite conference attendee usb flash drive window server preloaded available expo ignite download free evaluation version install bare metal vm running hyperv virtualbox similar running vm window server also great way docker window container development macos older window version window server running log run window update ensure latest update install windowsnative docker engine directly using docker window run following administrative powershell prompt installpackageprovider name nuget minimumversion force installmodule name dockermsftprovider force installpackage name docker providername dockermsftprovider force restartcomputer force docker engine running window service listening default docker named pipe development vms running example hyperv vm window might advantageous make docker engine running window server vm available window host open firewall port netsh advfirewall firewall add rule name docker engine dirin actionallow protocoltcp configure docker daemon listen pipe tcp replaces docker registerservice invocation stopservice docker dockerd unregisterservice dockerd h npipe h registerservice startservice docker window server docker engine used vm host setting dockerhost env dockerhost ipaddressofvm see microsoft documentation comprehensive instruction running window container first make sure docker installation working docker version client version api version go version git commit built thu aug osarch experimental true server version api version go version git commit built fri sep osarch next pull base image compatible evaluation build retag testrun docker pull microsoftwindowsservercore docker run microsoftwindowsservercore hostname building pushing window container image pushing image docker cloud requires free docker id storing image docker cloud great way save build artifact later user share base image coworkers create buildpipelines move apps development production docker docker image typically built docker build dockerfile recipe example going create image fly powershell microsoftwindowsservercore n cmd echo hello world docker build dockerid windowstestimage test image docker run dockerid windowstestimage hello world login docker login push image docker push dockerid windowstestimage image stored docker cloud available web interface public image pulled docker user using dockercompose window docker compose great way develop complex multicontainer consisting database queue web frontends compose support window still little patchy work window server time writing ie window develop docker compose window server system install compose required window docker window installed invokewebrequest http usebasicparsing outfile env programfilesdockerdockercomposeexe try compose window clone variant aspnet core mvc musicstore app backed sql server express database correctly tagged microsoftwindowsservercore image required starting git clone http githubcomfriismmusicstore cd musicstore dockercompose f dockercomposewindowsyml build dockercompose f dockercomposewindowsyml access running app host running container example running window opening browser window server system running docker engine use container ip port localhost work docker inspect f networksettingsnetworksnatipaddress using window server accessing outside vm host simply use vm host ip port summary post described get setup build run native docker window container window using recently published window server evaluation release see example window dockerfiles check golang mongodb python docker library image please share window dockerfiles docker compose example build docker twitter using tag window hesitate reach docker forum question resource
346,Lobsters,virtualization,Virtualization,Introducing Docker for Windows Server 2016,https://blog.docker.com/2016/09/dockerforws2016/,introducing docker window server,build first window container docker inc microsoft commercial partnership support docker window running container window server twoyear collaboration porting docker engine cli window docker adding multiarch image support docker hub john starks black belt session dockercon building window container image stefan scherer proposed microsoft sql server apache internet information service full net framework highly efficient image layering net core framework nodejs go minimalist operating system golang python mongo sample image summary,today microsoft announcing general availability window server ignite conference atlanta window developer itpros exciting new window feature container container window server powered docker blog post detail technical innovation went making docker container run natively window attempt explain significance achievement see companion blog post build first window container post detailing docker inc microsoft commercial partnership support docker window first version docker released year since launch docker completely transformed linux developer ops build ship run apps docker engine container available natively window developer itpros begin transformation windowsbased apps infrastructure start reaping benefit better security agility improved portability freedom move onprem apps cloud developer itpros build maintain heterogenous deployment linux window infrastructure docker window hold even greater significance docker platform represents single set tool apis image format managing linux window apps linux window apps server dockerized developer itpros bridge operating system divide shared docker terminology interface managing evolving complex microservices deployment onprem cloud running container window server docker running container window result twoyear collaboration microsoft involved window kernel growing containerization primitive docker microsoft collaborating porting docker engine cli window take advantage new primitive docker adding multiarch image support docker hub result awesome power docker run quickly start fresh fully isolated container available natively window pc c docker run ti microsoftwindowsservercore powershell window powershell copyright c microsoft corporation right reserved p c kernel containerization feature available version window server also window system anniversary update windowsnative docker daemon run window server window although container based window server build run window docker run window come semantics linux full process isolation sandboxed filesystem window registry support layering change container see clean window system interfere process containerized system example two dockerized apps using different internet information service ii version different net framework coexist merrily system even write respective filesystems registry without affecting containerization window itpros get isolation releaseartifactstability benefit vms without resource overhead lost agility inherent hardware virtualization similar container linux run different security profile container window run one two isolation mode window server container use sharedkernel processisolation paradigm known linux since container run normal isolated process startup fast resource overhead minimal hyperv isolation container process run inside minimal hypervisor created container start yield potentially better isolation cost slower startup resource overhead isolation set simple switch passed docker run docker run isolationhyperv microsoftnanoserver long underlying host support requested isolation mode window container image run either hyperv server container container host run side side container process oblivious isolation mode run docker control api mode make isolation mode generally developer concern developer use default convenient system isolation mode give itpros option choosing deploy containerized apps production also note hyperv runtime technology powering hyperv isolation hyperv isolated container hyperv vms managed classic hyperv tool reader interested detail container implemented window john starks black belt session dockercon great introduction building window container image thanks layering improvement window registry filesystem docker build dockerfiles fully supported creating window docker image example window dockerfile stefan scherer proposed nodejs official docker library image built window docker build microsoftwindowsservercore env npmconfigloglevel info env nodeversion env run powershell command erroractionpreference stop newobject systemnetwebclient downloadfile http nodejsorgdistv nodeversion nodev nodeversion nodezip getfilehash nodezip algorithm hash ne env exit expandarchive nodezip destinationpath c renameitem c nodev nodeversion c nodejs newitem appdata npm env path c nodejs appdata npm env path environment setenvironmentvariable path env path environmentvariabletarget machine removeitem path nodezip cmd nodeexe note powershell used install setup zip file ex window container run window executables compiled window apis build run window container window system required docker tool control apis image format window linux docker window container run linux system viceversa also note starting layer microsoftwindowsservercore starting scratch option creating window container image instead image based either microsoftwindowsservercore microsoftnanoserver window server core image come mostly complete userland process dlls found standard window server core install exception gui apps apps requiring window remote desktop apps run window server dockerized run image based microsoftwindowsservercore minimal effort example include microsoft sql server apache internet information service ii full net framework flexibility come cost bulk microsoftwindowsservercore image take thanks docker highly efficient image layering big problem practice given docker host need pull base layer image pulled built system simply reuse base layer base layer option nano server new minimal window version pareddown window api lot software already run nano server including ii new net core framework nodejs go nano server base image order magnitude smaller window server core meaning le dependency surface area keep updated nano server exciting development base minimal container build boot quickly also minimalist operating system make great container host o running docker daemon container nothing else choice window server core nano server developer itpros opt liftandshift existing windowsbased apps server core container adopt nano server greenfield development incrementally part breaking monolithic apps microservices component docker working microsoft community build container image based window server core nano server golang python mongo available official docker image way microsoft also maintains set popular sample image summary today announcement docker engine building running managing container window fruit year labor team microsoft docker docker community incredibly proud work done microsoft bring benefit containerization window developer itpros excited prospect getting window linux technologist building shipping running apps together common set tool apis resource help get started
347,Lobsters,virtualization,Virtualization,OCI is Building a Way for Kubernetes to Run Containers Without Docker - The New Stack,http://thenewstack.io/oci-building-way-kubernetes-run-containers-without-docker/,oci building way kubernetes run container without docker new stack,open container initiative kubernetes dan walsh ocid gain traction part interest forking docker taking lead kubernetes incubator initiative vishnu kannan mrunal patel kelsey hightower front center runc libcontainer container network interface ociruntime ociruntime rkt fill blank joe fernandes openshift libcontainer runc presentation slide made appear firmly decided runc skopeo tool validating fetching container image skopeo available github containersimage skopeo docker component called also appears github containersstorage rkt storage motivation documentation coauthored patel kannan runc runc runc rkt ociruntime dockerengine explicit selfdeclaration singularity first argument ever erupted docker containersimage containersstorage runc systemd coreos docker red hat currier ives print whaler,open container initiative oci launched create industry standard around container used docker container runtime image format base number company undertaking project would break oci stack away docker preference kubernetes google open source container orchestration engine new project geared kubernetes directly interface kubernetes pod enable kubernetes docker launch manage container scale want daemon used kubernetes running container image stored docker registry said dan walsh longtime selinux project lead consulting engineer red hat speaking new stack red hat google developer taking lead project called simply ocid oci daemon order walsh continued wanted build series library able facilitate running container image maintainer project assert ocid docker fork though project serf evidence split container ecosystem especially kubernetes continues gain traction container marketplace earlier year docker inc made orchestration engine docker swarm part docker engine per release result docker engine allows user manage complex containerized application without additional software docker orchestration capability optin must activated user though many worry opting may lead backward compatibility issue road docker move add swarm docker engine added friction community already odds late august interest forking docker surfaced discussion vendor user publicly developer vocal docker aggressive release schedule put thirdparty system provider odds customer base present red hat engineer taking lead ocid project kicked june year developed part kubernetes incubator initiative support project turn support kubernetes lead maintainer google vishnu kannan red hat mrunal patel really need much container runtime whether docker coreos rkt need little said kelsey hightower google staff developer advocate mainly give u api kernel linux could window direction community wanted go support idea bigger docker inc point run containerized application front center ocid pronounced ocid become suggest reference implementation container engine provide free open source option running oci container scale include runc container runtime based libcontainer docker donated oci use free standard also include code necessary pushing image pulling repository hosted container registry support container network interface built coreos modeling plugins independently engine hosting container yet component ocid raison être called ociruntime project page github describes implementation kubernetes container runtime interface cri allow kubernetes directly launch manage open container initiative oci container oci need specify run container kelsey hightower explained also download network giving people something actually use kubernetes environment component named kubelet whose job manage pod cluster container typically comprise application kubelet capable acting standalone daemon kind local overlord container pod key project ocid ociruntime implement new class interface kubelets kubernetes enabling orchestrator effectively manage entire container lifecycle want refactor kubelet code base remarked google hightower way integrate docker rkt ocid much cleaner consistent want provide welldefined interface say order container runtime engine compliant kubernetes going container runtime interface cri api abstraction container runtime need support order u certify something run underneath kubernetes fill blank ocid sound like wholly new featurecomplete container engine despite characterized date one significant omission right point ocid implemented able build oci image said red hat walsh ability create image first still need tool like docker building oci image basically docker image goal think industry goal standard implementation container runtime standard format container image built remarked joe fernandes red hat senior director product management openshift red hat commercial orchestration engine based kubernetes different vendor build different solution top ecosystem grow docker image format established common ground development ecosystem fernandes explained perceives publication format standard part job oci format come runtime said people thought docker contributed libcontainer became runc runtime piece runtime lowest piece module also make runtime creating standard implementation module december actually appeared true presentation slide made appear firmly decided oci focus would restricted container runtime runc container image format red hat developer aided google developer arguably extending definition container runtime fernandes explained foundation tier much broader implementation hightower explained definition including interface orchestrator component kubernetes theoretically restricted kubernetes assuming orchestrator want pick api run ocid really natural progression oci explained hightower goal specify standard around pretty much docker started idea take application package image format put repository share anyone shared pull extract run consistent way order oci need specify run container hightower explained also download network giving people something actually use going bunch document library let give people something guess many way comparable docker continued focused bit mentioned way le mystery oci fully specified integrated thing actually use project one ocid principal component skopeo tool validating fetching container image docker repository today one red hat major contribution docker walsh explained skopeo originally developed tool examined container image produced json file could used manifest tool later leveraged pulling pushing image docker registry red hat enrolled part project atomic go librarybased derivative available github containersimage addition skopeo walsh said ocid project includes copyonwrite file system based docker component called graph driver started working several month ago told u splitting copyonwrite file system tool besides docker could share actually found difficult continue work underneath docker get separate module decided pull concentrate getting module totally correct hopefully point want open pull request get back docker meantime said current form library also appears github containersstorage docker copyonwrite file system walsh pointed run entirely exclusive memory using shared library ocid using said would love see library going future version rkt would actually like see going back want storage move locking file system storage file lock multiple application could share storage time would love get back docker daemon point motivation project development ocid may certain thing today cease future vice versa one thing ocid least today surprisingly mechanism running oci container exclusively ocid fall scope oci project said patel certifying container oci compliant documentation coauthored patel kannan explicitly call flexibility container format support including continuing support docker oci go forward also supporting everyday tar file joe fernandes reminded u docker began existence complete container system preceding month still young product became modularized runc one module although runc predecessor designed pulled docker engine runc easily pulled coreos rkt today view ocid along line fernandes explained module like carve make want work docker community could pull back standard interface versus sort monolith blended together whole unix philosophy one thing well created ocid project house work test idea come standard implementation pushed back oci ultimately pulled different implementation docker obvious one fernandes walsh put u omission engine component creator container image ocid design agreed engine vendor red hat docker coreos vmware could attribute respective valueadds compete one another value service yet time writing remain two curiously phrased element open source documentation github entirety course remains continual review first description appears project page kubelet interface first release ociruntime continue use dockerengine managing image image management functionality separated runtime functionality could different implementation could potentially switched ideal support oci image specification image reach description may interpreted stating runtime component lean docker code support least initial round also set stage ocid using engine decreasing reliance docker engine second equally curious phrase hook ocid documentation link ocid google specifically explicit selfdeclaration part kubernetes environment front ocid state purpose life provide management member kubernetes pod declaration take precedence management container google hightower belief kubernetes earned position container community could perhaps described arbiter fairness leveling playing field said right docker wellsupported container runtime google community done majority work make docker work firstclass runtime see people want choice always vision support multiple container runtimes one step creating container runtime interface part going refactor current code base implement cri singularity cri work hightower explained however require certain kind component strike heart first argument ever erupted docker specifically system container capable launching component effectively kick systemd linux preferred application initialization mechanism back rug want ship everything form container need container runtime use orchestration explained red hat walsh orchestration need chickenandegg situation using system container able pull image using containersimage library able store containersstorage going execute runc case running part systemd one way walsh belief containerized environment effectively launch kubernetes turn production unquestionably scope oci expanded first year operation talk beginning container format specification released oci work would done see two prominent member pushing open copyonwrite file system library open registry maintenance library networking scheme bootstrap mechanism relies upon architectural feature docker would prefer remain deprecated could container security library far behind vital component container engine matter left data center resolve docker might early advantage created market first place could find competing oneonone openshift term red hat helped create would say ocid going used kubernetes goal openshift environment make kubernetes use ocid container runtime environment openshift use kubernetes get advantage ocid use kubernetes future ocid decision would made coreos docker red hat sponsor new stack feature image currier ives print whaler public domain
348,Lobsters,virtualization,Virtualization,Running Mac OS X 10.11.6 El Capitan on KVM + QEMU,https://github.com/kholia/OSX-KVM,running mac o x el capitan kvm qemu,note commercial available email commercial support option note contributing back munki requirement installation preparation installation older readme postinstallation networking note enable functionality manually modern ubuntu version note note note gensmbios legal available thought motivation work cracking apple keychains,note readme document new method install macos older readme available new method require existing physicalvirtual macos installation however new method requires internet access macos installation process limitation may addressed future commit note blob resource included repository rederivable instruction included looking commercial support stuff available email chat commercial support option looking big sur support see note contributing back project always use help time attention looking help pullrequests following work item create full installation iso image without requiring existing macos physicalvirtual installation ansible playbook automate allthethings documentation around running macos popular cloud provider gcp aws see legal section associated reference test accelhvf flag qemu macos mojave macbook pro document share use project build test opensource project get stuff done document use project io development document use project xnu kernel debugging development document process create reuse vm snapshot instantaneous macos boot would nice way document process launch bunch headless macos vms build farm document usage munki deploy software build farm enable ssh support box easily better support doc amd ryzen patch unify various script robustness improvement requirement modern linux distribution eg ubuntu lts later qemu cpu intel vtx amd svm support required cpu support required macos sierra cpu support required macos mojave note older amd cpu known problematic amd work phenom ii ryzen processor work fine installation preparation kvm may need following tweak host machine work echo sysmodulekvmparametersignoremsrs make change permanent may use following command sudo cp kvmconf etcmodprobedkvmconf install qemu package sudo aptget install qemu umlutilities virtmanager git wget libguestfstools step may need adapted linux distribution clone repository qemu system file repository used following step cd git clone http githubcomkholiaosxkvmgit cd osxkvm fetch macos installer fetchmacospy choose desired macos version executing step basesystemdmg file current folder sample run fetchmacospy productid version build post date title macos mojave macos mojave macos high sierra macos mojave install macos high sierra beta macos catalina macos catalina macos catalina macos catalina macos catalina macos catalina choose product download attention modern nvidia gpus supported highsierra later version yet next convert file usable format basesystemdmg basesystemimg note also use following command conversion qemu version qemuimg convert basesystemdmg raw basesystemimg create virtual hdd image macos installed change name disk image machddimg something else boot script need updating point new image name qemuimg create f machddngimg setup quick networking running following command sudo ip tuntap add dev mode tap sudo ip link set promisc sudo ip link set dev sudo ip link set dev master note network interface present system may deactivated try enabling using following command virsh netstart default virsh netautostart default ready install macos installation cli method primary run opencorebootsh script start installation proces opencorebootsh new installing macos see older readme help set optional use macos vm disk libvirt virtmanager virsh stuff edit macoslibvirtcatalinaxml file change various file path search changeme string file following command trick usually sed schangeme userg macoslibvirtcatalinaxml virtxmlvalidate macoslibvirtcatalinaxml create vm running following command virsh connect qemu system define macoslibvirtcatalinaxml launch virtmanager start macos virtual machine note may need run sudo ip link delete command virtmanager able start macos vm postinstallation see networking note setup guest networking following command present etcrclocal usrbinenv bash sudo ip tuntap add dev mode tap sudo ip link set promisc sudo ip link set dev sudo ip link set dev master enough far note may need enable rclocal functionality manually modern ubuntu version get sound virtual mac see virtual sound device note passthrough gpus device see note need different resolution check note included repository generate smbios use gensmbios legal secret apple osk string widely available internet also included public court document available lawyer seems apple attempt get osk string treated trade secret work due reason osk string freely included repository gabriel somlo also thought legal aspect involved running macos qemukvm motivation aim enable macos based build testing kernel debugging reversing security task easy reproducible manner without needing invest apple closed ecosystem heavily backstory poor student canada apple made work cracking apple keychains lot harder needed
349,Lobsters,virtualization,Virtualization,What is the best free Docker hosting? - Quora,https://www.quora.com/What-is-the-best-free-Docker-hosting,best free docker hosting quora,,please enable javascript refresh page continue
350,Lobsters,virtualization,Virtualization,DockerCon 2015: Jessie Frazelle on Container Hacks and Fun Images,https://www.youtube.com/watch?v=1qlLUf7KtAw,dockercon jessie frazelle container hack fun image,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
351,Lobsters,virtualization,Virtualization,Installing 386BSD on BOCHS,http://gunkies.org/wiki/Installing_386BSD_on_BOCHS,installing bochs,bsd http bochssourceforgenetdocdocbookuserbochsrchtml patch http http http http,procedure used install bsd onto patched version bochs emulator based ancient faq trial error assumed use modern linux kernel feature iptables packet filter tuntap host o want use different platform still follow tutorial guideline figuring get emulator networked good starting point http bochssourceforgenetdocdocbookuserbochsrchtml special attention given ability run emulator terminal background watch leading space copypaste anything box tend break heredocuments requirement need following get system patched installed modern linux system iptables working copy gunzip httpftp client like wget acceptable c compiler like gcc compile bochs cursesncurses library bochs simulate monitor terminal ftp server distribution file stock basic fedora core box time yum install wget yum install gcc yum install gccc yum install ncursesdevel yum install vsftpd get later tutorial attempting install different platform using tutorial guide also need bochs source patched piccc distribution patchkits download bochs source sourceforge patched piccc found distribution patchkits found preparing installation get patch configure compile bochs tiny boot floppy something odd writes port emulated pic cause bochs panic patch enables bochs continue cli mode available window binary bochs come msgbox patch included recent version bochs pasting bochs drag playing bxkbdelements iodevkeyboardh keyboardpastedelay later bochs configuration help ymmv cd usrlocalsrc wget http gunzip c tar xvf wget http mv f piccc cd configure withterm withnogui enablealloptimizations enabledocbookno make make install get serve distribution patch installation distribution file patch fetched ftp facilitate set anon ftpd serf file possible obtain directly minnie install two problem look warren toomey never intended minnie install server also catch using famous patchkits stock come without gzip patch gzipped chance get around echo listenyes etcvsftpdvsftpdconf vsftpd cd varftp wget r np ftp wget r np ftp mv minnietuhsorgbsd rmdir minnietuhsorg cd gunzip gz prepare host networking bochs make bochs work without spare nic host need set tunneling echo alias tun etcmodprobedmodprobeconfdist depmod make tunconfig script bochs fire come example becomes gw pick ip guest later set bsd dir w tunconfig cd mkdir bsd cd bsd printf binbashnsbinifconfig tunconfig cat tunconfig eof carnival put mask go sbiniptables postrouting nat j masquerade devnull sbiniptables nat postrouting j masquerade echo eof chmod x tunconfig note newer iptables slightly different syntax become configure bochs installation fails box lot mem hence meg stanza bochs configuration cat bochsrc eof configinterface textconfig displaylibrary term romimage fileusrlocalsharebochsbiosbochslegacy cpu meg vgaromimage fileusrlocalsharebochsvgabioslgpllatest vga extensionnone floppya statusinserted typedisk path diskimg modeflat translationnone modelgeneric boot disk floppy floppybootsigcheck log bochsouttxt panic actionask error actionreport info actionreport debug actionignore vgaupdateinterval keyboardserialdelay keyboardpastedelay mouse privatecolormap keyboardmapping map macfe ethmodtuntap ethdevdevnettun scripttunconfig eof explained http initial kernel suffers bug result timestamps year unfortunately boot floppy nt let work around missing date command bother creating new file directory timestamp predating release date set time eg july using bochsrc date command clock running patch installed bios date nt problem anymore create tiny floppy prepare boot floppy work emulated box fancy floppy drive original floppy intended floppy want caught dead using nowadays cat dd ifdevzero bootimg create disk image make disk geometry configuration file case cylinder head sector per track get megabyte go larger get heap trouble printf bximage fails probably recent version bximage case printf bximage first boot tiny start bochs ready fire bochs terminal start journey back time bochs q f bochsrc get following output vgabios apr vgavbe bios released gnu lgpl please visit http bochssourceforgenet http wwwnongnuorgvgabios bochs vbe support available bochs bios build revision date option apmbios pcibios eltorito master generic harddisk mbytes press boot menu booting hard disk boot failed bootable disk booting floppy release william lynne jolitz copyright c william f jolitz right reserved based part work user community bsd networking software release ucb eec department color irq isa generic irq isa drive irq drq isa ethernet address fe irq isa irq isa changing root device warning swap space present yet distribution installation floppy tiny release please read installation note type zmore installnotes registration information type registration use install hard disk drive type install erase werase h kill u intr c style background format drive install distribution utility prompt give echo echo install cause installer format entire drive see fit install distribution utility installer finished tiny bochs go gracelessly second boot base system finish installation restart bochs give another bochs q f bochsrc boot base system find device greet following base system release congratulation got hard disk please read file registration eg type registration discover become part user group finish installation load remaining distribution file tmp type extract load file do floppy type mread tmp wish uninstall delete partition using do fdisk program installed entire drive use fdiskmbr remove bootstrap drive erase werase h kill u intr c style background write installer installed kernel keep kprinting startartstartart screen network running get nerve work around write installer netrc macro change ip ftpd life gw ip want give guest change odin name want give guest echo machine netrc echo login ftp netrc echo password news eunet netrc echo macdef init netrc echo netrc echo pasv netrc echo prompt netrc echo bin netrc echo lcd tmp netrc echo cd netrc echo mget netrc echo cd etcdist netrc echo mget netrc echo cd srcdist netrc echo mget netrc echo cd netrc echo mget tar netrc echo echo odin extract netrc echo csh c limit openfiles extract extract tar cf disttar tmp cp cp sync sync sync sbinshutdown r netrc echo quit netrc echo newl netrc echo netrc chmod netrc configure network watch startarts ifconfig netmask route add default start installation extract complain ca nt open extract execute installation script distribution failed according ancient faq joke jolitz nt get extract cat also open file base sh handle case wondering use csh ftp macro finished bochs go gracelessly third boot fsck restart bochs bochs q f bochsrc boot fsck disk shut nt panic fourth boot multiuser mode restart bochs another bochs q f bochsrc boot multisuser mode release william lynne jolitz copyright c william f jolitz right reserved based part work user community bsd networking software release ucb eec department color irq isa generic irq isa drive irq drq isa ethernet address fe irq isa irq isa automatic reboot progress file used free frags block fragmentation starting network starting system logger checking core dump preserving editor file clearing tmp standard daemon update crond starting network daemon routed printer sendmail inetd starting local daemon wed apr pst odin console login style background installed point bill lynne jolitz said cut tape july installed take opportunity travel forward time birth modern bsd people released patch kit never came early david greenman proposed new operating system based patchkits new name freebsd month later chris demetriou wrote say want interim release officially announced first version netbsd change file read change patchkit alpha patchkit stuff piecemeal case improved part history read bsd history book making jeremy c reed detailed full annotated chapter patch kit yet print rumor chapter obtained together warezed copy netbsd manilla folder coughing chain smoking guy raincoat know right parking garage see quite patch rodney grime announced patchkit april last one announced june guided tour bring point maintaining patch kit became rather cumbersome shortest available route installing last two official unofficial patch kit skipping apply first patchkit login root password install first two patchkits exec sh cd tar xvf mv patch dist cd distbin mkpatchdirs echo echo echo echo iall echo echo echo q patch afterinstallsh recompile kernel instructed afterinstall recompile kernel bochs genericisa something said adjusting kernel configuration left exercise better done later rm r syscompile cd config genericisa cd syscompilegenericisa make depend make mv cp sync sync sync shutdown rf fifth boot genericisa upgrade virtual machine restart proper kernel upgrade machine use meg gave sed esmegs bochsrc bochs q f buildworld system bit odd state source patched binary still put new memory good use log root execute buildworld note take exec sh cd patchbin buildworldsh sync sync sync shutdown rf fire bochs bochs q f sixth boot patched recompiled system apply second patchkit login root nt use su exec sh cd tar xvf cd distbin echo echo echo echo iall echo echo echo q patch afterinstallsh recompile genericisa rm r syscompile cd config genericisa cd syscompilegenericisa make depend make mv cp sync sync sync shutdown rf fire bochs bochs q f seventh boot almost buildworld login root perform another buildworld like take exec sh cd patchbin buildworldsh sync sync sync system date last patch kit released good point save copy image except hostname pristine unconfigured state follows thing system point rely case screw trying different route reboot least without f astboot option long overdue fsck put zero file remove disk full care image compression disk image created roughly automating step github travisci available via trilogy http running kernel configuration rolling bringing system genericisa kernel served well fine want explore system want crazy thing like trying get modern software compiled even something mundane moving swap space around end rolling kernel serf example specific configuration later topic make fit current hardware software configuration depth information config http usual rm r syscompile cd copy genericisa configuration give fitting name eg bochs dive favorite editor grep v genericisa bochs vi bochs machine cpu private ident show eg motd ident genericisa ident bochs zone info leap second ancient living berkeley time zone timezone dst handle lot emulator let double maxusers maxusers option inet internetworking cd configured yet option isofs iso file system nfs configured yet option nfs network file system option compatible bsd boxen around moment option tcpip compatible x installed yet option xserver xserver option uconsole x console support scsi configured bochs yet config root swap config root swap controller controller isa port bio irq drq vector fdintr disk drive one floppy enough second one bit broken anyway disk drive controller isa port bio irq vector wdintr disk drive megabyte left keep slot upgrade disk drive lot thing bochs turned rather useless controller isa bio irq vector ahbintr controller isa port bio irq drq vector ahaintr controller device device device device device device device device device device set headless operation yet screen keyboard yes com device isa port iokbd tty irq vector pcrint device isa port ionpx irq vector npxintr device isa port tty irq vector comintr device isa port tty irq vector comintr device isa port tty irq vector comintr device isa port tty irq vector comintr device isa port tty irq vector lptintr device isa port tty device isa port tty network card bochs know one configured device isa port net irq iomem iosiz vector weintr device isa port net irq vector neintr device isa port net irq iomem iosiz vector ecintr device isa port net irq drq vector isintr device isa port bio irq drq vector wtintr pseudodevice loop pseudodevice ether pseudodevice log slip ppp pseudodevice sl run fast running screen pseudodevice pty pseudodevice pty case want say something pseudodevice speaker pseudodevice swappager pseudodevice vnodepager pseudodevice devpager eof bump version give shot makedev probably needed config bochs cd syscompilebochs make newvers make depend make mv cp sync sync sync shutdown rf see bumped minor version number new ident compile time bochs moaning missing second drive generic wdgetctlr failed assuming ok irq isa look notice kernel got lot smaller dropped around around todo guest network config disklabeling adding swap space tweak get big thing compile limit dfldsiz maxdsiz bash sh upgrade netbsd upgrade http
352,Lobsters,virtualization,Virtualization,The Importance of Fuzzing…Emulators?,https://mgba.io/2016/09/13/fuzzing-emulators/,importance,fuzzing american fuzzy lop pop open web page external program rather satirical video gb serialize prevent loading savestates load instruction gb serialize check ly loading state gb serialize check dma destination loading state gb serialize check x loading state gb video prevent dot clock going negative gb video prevent bcps ocps going bound,anyone familiar computer security familiar concept fuzzing throw garbage data program see crash might security issue great way automated security testing software uncovered countless critical issue software across board popular fuzzing framework american fuzzy lop usually called afl aflfuzz short even small percentage bug bug listed although usually intelligent limited scope bug find fuzzing common effective practice finding security bug software complex enough issue immediately obvious upon source inspection stochastic process fuzzing take lot time careful selection input case mutational fuzzers produce good result conversely also left running processing background task week month little interaction fuzzing often employed commonly deployed library libpng widely used software flash myriad different project use fuzzing help find bug especially software security come forefront mind however software generally considered important target security research software routinely interacts untrusted online source web browser obvious frequent target cracking software never touch network downloaded file work consists uncomfortable middle ground video game emulator common dubious use case ton people downloading untrusted file either rom save game savestates sketchy source hey look fake download button rom site loading emulator without second thought although obvious target hacker higher profile project wider scope still seems obvious entry point patch increasing awareness security implication emulator recently ancient emulator zsnes written concept software security forefront mind recently rom published would pop open web page external program user interaction loading yesterday buffer overflow cheat file parsing visualboyadvance published rather satirical video neither emulator actively maintained anymore still widely used compound problem vulnerability may never patched widely used version software help stem problem wrote fuzzing harness mgba allows load various type file automatically spin core number frame see input cause crash put likely hundred thousand cpuhours fuzzing mgba handful entry point rom save game cheat file remain unfuzzed moment next polish fuzzing game boy savestates started fuzzing game boy core yesterday already slew important bug fix following bug found fuzzing gb core basic analysis bug sure come gb serialize prevent loading savestates load instruction description mgba us state machine cpu keep track next instruction run savestates store information need created state reset machine impact null pointer deference severity minor gb serialize check ly loading state description ly current scanline could placed bound causing renderer try render nonexistent scanline impact bound memory write severity major gb serialize check dma destination loading state description destination dma oam could placed bound causing invalid write impact bound memory write severity major gb serialize check x loading state description x index current scanline could placed bound causing renderer try render nonexistent pixel impact bound memory write severity major gb video prevent dot clock going negative description dot clock keep track many pixel draw row however due integer overflow possible get value bound causing renderer try render nonexistent pixel impact bound memory write severity major gb video prevent bcps ocps going bound description bcps ocps index background object palette respectively used readwrite operation palette stored due value used state machine however range index savestates exceeds allowable range leading limited bound condition impact bound memory readwrite severity minor bug found within past hour via automated testing fuzzing invaluable ability find overlooked issue none bug affect current stable version mgba time writing introduced recently game boy support fixed master affect next release either notice many bug unchecked memory access hit normal program flow due value sanitized come emulated program savestates whole different beast capturing postsanitization value crucial resanitize savestates loaded highly encourage emulator developer put little bit time needed writing fuzzing harness emulator letting fuzzer spin week find bug glad fixed writing software emulator well fuzz fuzz everything security paramount
353,Lobsters,virtualization,Virtualization,"One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege Escalation",https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_xiao.pdf,one bit flip one cloud flop crossvm row hammer attack privilege escalation,,obj stream endstream endobj obj stream endstream endobj obj stream ty endstream endobj obj stream n endstream endobj obj stream b se bq endstream endobj obj stream g zv p e endstream endobj obj stream v p lm b p l oc w n ri csog ۼѯ endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream n h endstream endobj obj stream uj q endstream endobj obj stream endstream endobj obj stream g qn endstream endobj obj stream stream v hܫ endstream endobj obj stream endstream endobj obj stream gq endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream eba v n j endstream endobj obj stream
354,Lobsters,virtualization,Virtualization,A Docker Fork: Talk of a Split Is Now on the Table,http://thenewstack.io/docker-fork-talk-split-now-table/,docker fork talk split table,container ecosystem pointed enterprise issue rob hirschfeld rackn occasional tn contributor craig mcluckie recent inclusion must activated orchestration capability google cloud platform launching kubernetesbased container engine bob wise process acquiring wrote blog post last week expressed personal blog post docker container experience docker recent twitter dispute kelsey hightower solomon hykes runc dan walsh systemd seeming reluctance lennart poettering maintains option table offer alternative daemonless container technology apcera coreos docker joyent red hat,discussion split docker underway among several docker ecosystem vendor end user expressing frustration docker management docker engine technologist company exploring way address various issue around supporting enterprise docker deployment several option consideration including possibility forking open source docker engine altogether according number source close recent discussion representative involved company red hat google coreos huawei two large enduser customer spokespeople red hat coreos denied knowledge dockerrelated talk docker declined publicly offer comment google huawei replied request comment seminal moment container ecosystem none technologist company want fork also voiced concern docker codebase lack stability problematic building additional service supporting customer relying docker production many company participating talk also using container building largescale distributed system could see docker recentlylaunched builtin orchestration capability threat orchestration product nearly based google kubernetes happening right careful fragment container ecosystem make impossible single container target multiple runtimes one observer hacker news pointed enterprise issue worry heard repeated docker ecosystem docker aggressive release schedule put thirdparty system provider odds customer base docker consistently break backend compatibility said rob hirschfeld ceo rackn kubernetes community leader occasional tn contributor involved talk rackn application lifecycle management platform us provision docker component change backend business impact supporting customer docker us docker engine product component community us build service hirschfeld charged productbased approach mean operator forced fix backend compatibility break docker introduces new innovation merges component like swarm docker engine use feature change lead problem stability versioning migration backend compatibility hirschfeld said last week conversation dissatisfaction docker largely private talk moving public forum exemplified tweet google point person evangelizing kubernetes craig mcluckie longsimmering frustration culminated docker inc recent inclusion docker swarm docker swarm docker engine allows user manage complex containerized application without additional software using command line structure syntax developer familiar using docker container docker orchestration capability optin must activated user though opting may lead backward compatibility issue road previously orchestration capability known offered thirdparty tool kubernetes orchestration platform open sourced google although google directly sell enterprise container orchestration software open source orchestrator provide easy onramp google cloud platform service container company coreos apprenda offer commercially supported version kubernetes huawei also launching kubernetesbased container engine surprisingly party eager move conversation container container orchestration instead bob wise samsung sd cloud engineer lead company kubernetes involvement also called docker slow roll container innovation samsung electronics process acquiring joyent offer cloudbased container support service team working deeply kubernetes mesos cloud foundry need stable simple boring container implementation minimal essential characteristic community agreement around image creation naming publishing wise wrote blog post last week need use simple boring container implementation everybody else using community need slow pace change fundamental building block stability allow system built top thrive likewise apcera technical product manager phillip tribble expressed personal blog post diplomatically way possible docker trumpet newly launched feature finished enterpriseready product wise explode internet convention marketing material exciting new feature work presented tribble wrote apcera business model based part support docker container tribble post inspired others express experience docker hacker news including bemoaning bug around new release one reader talked spinning container day trouble percent due diverse docker bug number lowered percent latest update others praising software stability using docker production year big issue another reader commented neat wrapper cool linux kernel feature fact docker large following supporter opinion docker software stable docker engineer also quick boast company solid foundation case docker seems intention stifling innovation sake potential competitor shown recent twitter dispute google kubernetes evangelist kelsey hightower docker chief technology officer solomon hykes role open container initiative oci image runtime standard play standardization dockerbased container stack oci formed order provide exactly folk like wise calling boring standardized container tech yet hykes cast doubt extent oci usefulness thirdparty provider hykes noted provider claim offer full support docker container without docker daemon presumably runc runtime engine actually offering pseudosupport percent docker feature know docker move fast result product claiming docker support lying hykes wrote another tweet hykes went far dismiss oci image format fake standard problem exacerbated docker inc hold docker trademark trademark mean company may face liability use patch code package approved docker community case company may unable support customer due patch getting approval docker upstreamed project result thirdparty vendor forced live decision docker decides make open source project wait docker patch whenever something break best outcome would agreement docker guarantee stable release also issue feature implemented docker handled either underlying o another component stack another company relying docker also competing docker red hat number conference year including linuxcon north america red hat engineer dan walsh describes red hat stuck customer increasing use systemd initialize linux system docker seeming reluctance work systemd instead relying docker daemon provide feature around initialization service activation security logging container last three year trying get good integration systemd docker found two leader two effort strongly opinionated walsh said referring hykes systemd creator current red hat employee lennart poettering bring machine brings system service systemd docker walsh asked badly implemented system systemd docker daemon fighting one another customer red hat maintains forked version docker include patch docker may one day incorporate may never choose include option table time tell informal talk lead coordinated effort option may suit party example may stable version docker image format runtime managed oci would allow ecosystem partner stable component allow docker continue docker engine scenario oci runtime would fork docker ecosystem company want complete break docker would mean complete fork different name need new group manage coreos instance offer alternative daemonless container technology called rkt though seen significant market traction yet least level docker success new ground signaling fast market maturing stake play exploring container ecosystem political economic perspective important helping better understand technical direction community certainly true today face deep divide docker container ecosystem active discussion taking place forking docker nothing else creating stable alternative would allow standard core could built upon assure stability end user apcera coreos docker joyent red hat sponsor new stack feature image via pixabay
355,Lobsters,virtualization,Virtualization,Mainframes as a lifestyle choice,http://wozniak.ca/mainframes-as-a-lifestyle-choice,mainframe lifestyle choice,cobol pli cics,one important concern work important backward compatibility also compelling part job depth compatibility zos pretty incredible one thing zos support three addressing mode bit compatible memory subsystem said compatibility important since used much far know beyond language interoperability fascinating cobol pli common mainframe addition assembler heard much cc vitally important mainframe customer anything new work existing program library cics canonical example thing necessarily share data layout calling convention want native code call native code deal engineering aspect job keeping interest right trying get good answer problem making new work old looking way transition old new low cost downtime enough make get annoyed notsogreat aspect mainframe development
356,Lobsters,virtualization,Virtualization,Runc Containers on the Desktop,https://blog.jessfraz.com/post/runc-containers-on-the-desktop/,runc container desktop,runc container desktop docker container desktop runc opencontainersorg phil estes githubcomjessfrazcontainers chromeconfigjson riddler githubcomjessfrazriddler oci spec netns githubcomjessfraznetns pkg vishvananda cli githubcomjessfrazcontainers hackscripts magneto aleksa sarai magneto configs githubcomjessfrazcontainers service file email protected email protected note,runc container desktop tuesday january almost exactly year ago wrote post running docker container desktop well new year ended converting docker container runc configs perfect time new blog post unfamiliar open container initiative check opencontainersorg switch well let explain fellow docker maintainer pal phil estes made awesome patch add user namespaces docker completely insane containerizer desperately wanted run crazy soundvideo device mounting container user namespaces well way could work custom gidmap audio video group map host group permission access device container layman term basically wanted poke teeny tiny map user namespace able permission use sound video device obviously design feature since runc expose uidmappings gidmappings knew could power please awesome thing runc user control chrome get mapping githubcomjessfrazcontainers chromeconfigjson look closely know looking see group mapped group id host cool thing like listen taylor swift container user namespace pretty cool right went ocd like thing encounter converted container obviously found way generate riddler introducing githubcomjessfrazriddler riddler take runningstopped docker container convert inspect information oci spec run runc oci compatible tool opinionated feature always try set gidmap work device also pas custom hook automatically add runc config prestart poststart poststop hook lead next tool built netns say hello githubcomjessfraznetns want runc container networking eh something super simple like bridge netns set bridge network runc container added via prestart hook actually super simple code well thanks awesome netlink pkg vishvananda netns even save ip container ip file directory config hook use thing instance use hostess cli add entry host etchosts file remember ip container want reach find hook script githubcomjessfrazcontainers hackscripts magneto last tool made copy docker stats runc really wanted new pid cgroup stats aleksa sarai added kernel runc soon docker runc command runc event output json stats interval pipe magneto get awesome ux following chrome container sudo runc event magneto configs interested configs container checkout githubcomjessfrazcontainers even included systemd service file easily run container without tty directory via sudo systemctl start email protected example sudo systemctl start email protected note keep mind since generated lot filepaths hardcoded thing host try run want hear whining happy namespacing
358,Lobsters,virtualization,Virtualization,Flip Feng Shui: Hammering a Needle in the Software Stack,http://www.cs.vu.nl//~kaveh/pubs/pdf/ffs-usenixsec16.pdf,flip feng shui hammering needle software stack,,obj goto endobj obj introduction endobj obj goto endobj obj flip feng shui endobj obj goto endobj obj memory templating endobj obj goto endobj obj memory massaging endobj obj goto endobj obj exploitation endobj obj goto endobj obj cryptanalysis rsa bit flip endobj obj goto endobj obj implementation endobj obj goto endobj obj kernel samepage merging endobj obj goto endobj obj rowhammer inside kvm endobj obj goto endobj obj memory massaging ksm endobj obj goto endobj obj interaction thp endobj obj goto endobj obj dffs chaining endobj obj goto endobj obj attacking weakened rsa endobj obj goto endobj obj endtoend attack endobj obj goto endobj obj openssh endobj obj goto endobj obj gpg endobj obj goto endobj obj evaluation endobj obj goto endobj obj dffs rowhammer testbed endobj obj goto endobj obj ssh public key attack endobj obj goto endobj obj ubuntudebian update attack endobj obj goto endobj obj rsa modulus factorization endobj obj goto endobj obj mitigation endobj obj goto endobj obj defending dffs endobj obj goto endobj obj hardware endobj obj goto endobj obj software endobj obj goto endobj obj mitigating ffs software layer endobj obj goto endobj obj related work endobj obj goto endobj obj rowhammer exploitation endobj obj goto endobj obj memory massaging endobj obj goto endobj obj breaking weakened cryptosystems endobj obj goto endobj obj conclusion endobj obj goto section endobj obj appendix endobj obj goto endobj obj appendix cryptanalysis diffiehellman bit flip endobj obj goto r fit endobj obj length filter flatedecode stream j ut phҏ v ò h fwo ϟ k b lql endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citerowhammergoogle endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citecsr endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citededupstorage endobj obj type annot subtype link border hic rect goto citerowhammergoogle endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citerowhammerjs endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citededupstorage endobj obj type annot subtype link border hic rect goto citeksmols endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream xڽ x u f p f g b z b n endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto citepoisoned endobj obj type annot subtype link border hic rect goto citeunderstandheap endobj obj type annot subtype link border hic rect goto citeheapfengshui endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citerowhammergoogle endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream
359,Lobsters,virtualization,Virtualization,Flip Feng Shui,https://www.vusec.net/projects/flip-feng-shui/,flip feng shui,flip feng shui flip feng shui mechanic compromising openssh compromising aptget reception national cyber security centre commit registrar last resort news item hammertime simulator hammertime github paper frequently asked question name flip feng shui heap feng shui different dedup est machina dedup est machina widespread rowhammer check whether dram vulnerable original rowhammer paper dram error correcting code ecc safe ffs attack use public cloud provider risk public cloud provider protect customer acknowledgement,flip feng shui flip feng shui ffs new exploitation vector allows attacker virtual machine vm flip bit memory page victim vm run host attacker vm ffs relies hardware vulnerability flipping bit physical memory massaging primitive land victim page vulnerable physical memory location requirement ffs may seem unrealistic work show possible implement ffs reliably today cloud using rowhammer widespread dram glitch memory deduplication popular memory management feature reduces physical memory footprint vms merging memory page content simple slightly humorous explanation ffs watch following teaser video prepared usenix security attendee video flip feng shui mechanic ffs attack run three phase attacker vm first profile memory find memory cell vulnerable rowhammer data stored memory cell change without writing triggering rowhammer suitable bit flip found ie one right offset within memory page attacker writes memory page know exists victim vulnerable memory location memory deduplication engine merges victim page attacker page like shown figure attacker vm physical memory chosen back page refer usenix paper see done attacker trigger rowhammer modify memory victim shown figure dram organized row repeated activation two row eg row trigger flip another row eg row note simply writing deduplicated page attacker trigger copyonwrite event preserve correct memory isolation semantics rowhammer since bit flip happens directly dram copyonwrite compromising vm memory isolation even full memory virtualization provided recent processor attacker ffs demonstrate two attack breaking openssh public key authentication fully compromising aptget compromising openssh first attack flip bit page cache victim vm storing authorizedkeys file openssh authorizedkeys file store often rsa public key user rsa private key associated public login ssh server security scheme depends heavily fact private key easily derived known public key factorization perform ffs attack public key flip one bit bit flipped public key becomes much easier factorize factor generate new private key corresponding bit flipped public key ssh unmodified openssh client demo local testbed showing crossvm ssh compromise ffs video compromising aptget aptget attack chain two ffs attack trick apt install tampered software packaged malicious repository without suspicious warning first flip bit page cache storing aptget sourceslist file change one domain name example change ubuntucom ubunvucom point victim aptget request redirect repository malicious package installed since package signed trusted apt flip bit page cache storing trustedgpg effectively corrupting one two ubuntu archive signing key precomputed factor number corruption ie bit flip soon find one sign package want aptget install demo attack local testbed redirect victim aptget ubuntucom ubunvucom make install backdoored version coreutils video registered possible domain one bit flip away ubuntucom debianorg would like hand domain correct authority please get touch think one reception disclosure effort led national cyber security centre ncsc netherlands advisoryfactsheet ffs found disclosed issue many party including openssh gnupg vm monitor vendor oracle redhat xen vmware debian ubuntu paper public party responded specifically gnupg strenghened key signature check protect ffs attack commit originally registered ubuntudebian domain name could abused flip feng shui coordinated registrar last resort blacklist domain indefinitely quite medium attention see news item hammertime simulator developed hammertime opensource rowhammer simulator available github foster research rowhammer bug simulator allows researcher practitioner simulate hardware bit flip software using bitflip pattern fliptables large set dram chip plan integrate feature bitflip pattern near future paper frequently asked question name flip feng shui feng shui chinese philosophy harmonizing environment term heap feng shui previously used hacker describe arrangement heap certain way allows successful controlflow hijack flip feng shui art arranging physical memory certain way hardware flip result successful compromise different dedup est machina different dedup est machina primarily target browser exploitation use combination memory deduplication rowhammer dedup est machina us deduplication leak memory address randomized aslr flip feng shui us deduplication surgically place sensitive data vulnerable physical memory location widespread rowhammer check whether dram vulnerable according original rowhammer paper module vulnerable rowhammer many test available online checking dram rowhammer example releasing highly optimized rowhammer test soon keep tuned dram error correcting code ecc safe ffs attack triggering rowhammer dram ecc harder normal dram however dram module multiple bit flip per ecc domain ecc correct point still unclear whether dram reliably exploited use public cloud provider risk difficult say ncsc contact major cloud provider vm monitor vendor ensure issue resolved cloud user public cloud provider protect customer disable memory deduplication come different name kernel samepage merging transparent page sharing contentbased deduplication etc acknowledgement work supported netherlands organisation scientific research nwo vici dowsing project research council ku leuven project fwo grant european commission project sharcs grant agreement pqcrypto public artifact reflect author view funding agency responsible use may made information contain
361,Lobsters,virtualization,Virtualization,Handling Environment Secrets in Docker on the AWS Container Service,https://www.promptworks.com/blog/handling-environment-secrets-in-docker-on-the-aws-container-service,handling environment secret docker aws container service,update released command line tool requirement secure config strict separation config code environment variable github issue avoid managing aws api encryption key secret value storage hashicorp vault found create customer master key ruby script encryption client aws kmsmanaged cmk retrieving configuration value assign role instance profile little reading linklocal address setting environment variable process within container github issue task definition specify env var gist promptworks,update released command line tool expands upon automates pattern described belowwe recently decided deploy microservices project using docker amazon ec aws container service several configuration management consideration deployment like first strategy store value secret api key process need order run communicate second consideration mechanism retrieve value third making value available process running inside containersrequirementssecurity value often secret need secure way handle storing value transferring development machine process running container amazon ecsseparation config past project success following twelvefactor app bestpractices config elected project twelvefactor call strict separation config code advocate storing value environment variable env var variety good reason github issue docker project discourages use env var number good reason modifying approach slightly believe mitigated concernseaseofuse lastly want avoid managing aws api encryption key development machine much possible avoid entirely instancessecret value storagewe considered service handling secret hashicorp vault product even rolling service reluctant introduce new service dependency solution needed lightweight secure hit upon idea storing value using client side encryption via aws key management service km specifically implemented suggestion found aws forum env file consisting bunch envvarvalue mapping encrypted developer machine using aws ruby client sent retrieved decrypted client access happens without managing storing encryption key locally aws instancesto share encrypted env file create customer master key cmk kmsmake sure select iam user role use cmk encrypt decrypt data via km api user developer need encrypt role attached instance need decrypt datause ruby script km client library encrypt file locally upload itas see script encryption client take hard work client side encryption encrypting data passed along storage using aws kmsmanaged cmk give encryption client cmk key id client take care retrieving data encryption key encrypting data sending along necessary metadata future decryption see link detailed description process entailsonce encrypted file available client accessretrieving configuration valuesto allow instance container running access configuration value assign role required permission using instance profile role assigned longer manually distribute key instance grant access aws resource including kmsonce proper role assigned access happens seamlessly instance container require special setup download configuration value decrypt value downloaded aws take care thisunder hood aws cli client library fetch instance metadata including role acquire temporary access key session token use making request thing like content bucketcurious aws little reading found instance metadata including role available instance via request simple uri like http assume role subsequent request cli client library get security credential key token following uri name role http left u wondering magic ip address aws service providing metadata know instance requesting magic ip address linklocal address block valid communication local network presumably aws router forward request addressesaws apparently advertise exactly determine instance requested metadata two possibility looking internal ip address instance making request perhaps awscontrolled host processing request sent networksetting environment variable process within containersthere lot discussion docker community best practice handling sensitive data container see github issue exampleswhen starting container process running inside development machine option passed docker run command including individual env var path file containing many env var docker run env foobar docker run envfile pathtoenvhaving used env envfile option development machine exploring way set value initially looked way pas env var docker run command ec handle starting stopping container using task definition way ec configures container run together task definition include option specify env var definition stored json file committed code repository place want secret value storedto work around came solution wrap target process one running docker container script downloads encrypts variable export environment start process worth noting env var stored memory process never written container file system stored instancehere gist solutionthoughts welcome fork feedback find u twitter promptworks
362,Lobsters,virtualization,Virtualization,Docker: Printable Quick Reference,http://dmitryfrank.com/projects/docker-quick-ref,docker printable quick reference,docker printable quick reference cheat sheet docker one gdb quick reference fork github vote hn donate,docker printable quick reference cheat sheet use docker often enough memorize even basic dockerfile instruction cli command got annoyed unable quickly sketch dockerfile something existing container occasionally decided write concise cheat sheet print constantly keep desktop click thumbnail download pdf nt satisfied existing docker cheat sheet come across since find cute useful example one appearance card largely inspired gdb quick reference using long time already pleasant experience clear concise personally print side single sheet card written latex everything smooth probably latexfu weak opinion latex shine best case user belief latex know better case since pack lot stuff two page fight latex lot rather embracing anyone know structure document better comment appreciated general contribution welcome fork github license mit discus hacker news vote hn donate
363,Lobsters,virtualization,Virtualization,"Xen exploitation part 2: XSA-148, from guest to host",http://blog.quarkslab.com/xen-exploitation-part-2-xsa-148-from-guest-to-host.html,xen exploitation part guest host,mapping arbitrary machine page code execution context asciinema,mapping arbitrary machine page believe get gist still little problem pse flag set inside entry reserved bit address set stay cleared one need find usable machine frame number reserved bit set thanks linux allocator done using getfreepages function asking contiguous memory get aligned mfn alignedmfnva void getfreepages gfpzero debug alignedmfnva p alignedmfnva debug alignedmfnva mfn lx machineaddr alignedmfnva pagewalk unsigned long alignedmfnva amount memory mapped pse flag set reserve virtual memory want anybody interfere virtual address get virtual memory void getfreepages gfpzero debug p debug mfn lx machineaddr pagewalk unsigned long idea take machine frame number reserved bit set use value reserved virtual address range value reserved range could reserved bit set aligned machine frame number mapped elsewhere write right must unset rw flag corresponding entry order preserve xen invariant specifying entry writable done startupdump function int startupdump unsigned long unsigned long alignedmfnva ptet ptealigned getpte alignedmfnva pmdt pmd getpmd int rc remove rw bit alignedmfnva pte rc mmuupdate machineaddr ptealigned mmunormalptupdate ptealigned pte pagerw rc printk unset rw flag pte lx n alignedmfnva return map rc mmuupdate machineaddr pmd mmunormalptupdate mfn void alignedmfnva pageshift pmdflag rc printk update entry lxn return return able read write machine page using dopagebuff function void dopagebuff unsigned long mfn char buff int unsigned long unsigned long mfn pageshift pteflag unsigned long dopageread memcpy buff pagesize else dopagewrite memcpy buff pagesize unsigned long unsigned long unsigned long code execution context well read write machine page difficulty find something interesting page directory good target allow u resolve virtual address corresponding machine page write process memory order execute arbitrary code find interesting page mapped within every process like vdso thanks xen memory layout easy find page look like page directory memory layout byte guestdefined use see compatibility mode guest inaccessible current arch support signextended va byte readonly machinetophys translation table guest accessible byte reserved future shared info guest o guest accessible byte ioremap pci mmconfig space byte guest linear page table byte shadow linear page table byte perdomain mapping eg gdt ldt byte machinetophys translation table byte vmap ioremap fixmap area byte compatibility machinetophys translation table byte high readonly compatibility machinetophys translation table byte xen text static data bs ifndef configbigmem reserved future use byte superpage information array byte pageframe information array byte direct mapping physical memory else reserved future use byte superpage information array byte pageframe information array byte direct mapping physical memory endif pv guestdefined use hvmidle continuation mapping byte hvmidle unused compatibility guest area layout guestdefined use readonly machinetophys translation table guest accessible unused byte hypercall argument translation area byte reserved future use see every paravirtualized guest xen related table mapped virtual memory machinetophys translation table xen code etc machine page mapping every guest try look machine page exactly value guest offset offset example also using paravirtualized linux kernel offset set address exactly order find potential page directory page maxmfn page dumppagebuff page buff currenttab mypgd currenttab mypgd currenttab currenttab mfn mypgd page potential page directory enough would like sure page directory solution resides startinfo structure structure automatically mapped every paravirtualized guest even virtual address space xen boot contains useful information struct startinfo char magic xen version platform flag sifxxx flag see startinfo begin magic value contains flag field basically parse whole page directory looking page beginning magic value int isstartupinfopage char pagedata int ret char marker memcmp pagedata marker sizeof marker ret return ret given startinfo structure check flag sifinitdomain set know belongs page maxmfn page dumppagebuff page buff currenttab mypgd currenttab mypgd currenttab currenttab mfn mypgd page tmp page pgdt buff tmp find valid startinfo page debug startinfo page x tmp dumppagebuff tmp buff startf flag sifinitdomain debug else debug starting point decide backdoor vdso exactly like scumjr smm backdoor said blogpost vdso library mapped every userland process linux kernel performance purpose easy fingerprint therefore parse page directory another time look vdso patch backdoor startf flag sifinitdomain debug dumppagebuff page buff tmp page pgdt buff tmp debug vdso x tmp patchvdso tmp debug patch break recorded demonstration available asciinema full exploit downloaded
364,Lobsters,virtualization,Virtualization,The Raspberry Pi Has Revolutionized Emulation,https://blog.codinghorror.com/the-raspberry-pi-has-revolutionized-emulation/,raspberry pi revolutionized emulation,rite passage california extreme expo ascendance raspberry pi singlehandedly revolutionized emulation scene version retropie bootable o chinese allinone jamma card pandora box one brand jamma compatible arcade game cheap quality ip arcade size lcd get raspberry pi starter kit particular starter kit almost watt get quality sd card excellent benchmark sandisk extreme samsung evo download install bootable retropie image sd card dare say easy decide much want build control display space budget time lot idea buildyourownarcade kit arcade control alone bartop arcade old arcade cabinet raspberry pi retropie project find next job,every geek go phase discover emulation practically rite passage think spent childhood large part life young adult desperately wishing video game arcade finally obtained driver license first thought nt girl would take date road trip take friend sadly thrilled could drive arcade time wanted two arcade emulator build satisfied itch thoroughly recently took son henry california extreme expo feature almost every significant pinball arcade game ever made live person real enjoyed much found yearning share part history kid suitably emulated arcade form factor rabbit hole went discovered emulation build much cheaper easier last attempted decade ago ascendance raspberry pi singlehandedly revolutionized emulation scene pi version add critical wifi bluetooth functionality top additional speed fast enough emulate psx dreamcast reasonably whopping download retropie bootable o sd card slot pi well basically done distribution come free game add additional rom game image taste chinese allinone jamma card available everywhere pandora box one brand thing entire arcade board arm cpu builtin rom everything probably completely illegal unlicensed course could buy old broken husk arcade game cabinet anything long jamma compatible arcade game standard introduced working monitor control plug replacement jamma box bam virtual arcade could build buy new jamma compatible cabinet hundred choose cheap quality ip arcade size lcd crt used may truer old arcade game giant pain work enormous heavy require lot power viewing angle speed refresh rather critical arcade machine largely solved problem lcd point light easy work sip power le add like price mdf arcade button joystick changed substantially last decade today console arcade emulation wonderland like go rabbit hole bear mind started specific recommendation get raspberry pi starter kit recommend particular starter kit includes essential clear case heatsinks definitely want small heatsinks dissipate almost watt full load suitable power adapter get quality sd card primary drive pi sd card make quality one based excellent benchmark recommend sandisk extreme samsung evo model best price peformance ratio top download install bootable retropie image sd card amazing far project come since close plug play get free open source software install dare say easy video decide much want build point fully functioning emulation brain well capable playing literally every significant console arcade game created prior self probably drunk power kinda awesome stop safety dance moment ask question control plan plug via usb port depend heavily game want play beyond absolute basic joystick two button nintendo game think analog stick required driving game spinner trackball game multiplayer game yoke control game think star war virtual gun game display plan plug via hdmi port could go tiny screen build handheld emulator pi certainly small enough could display jack via hdmi nearby display whatever gaming jamboree might befall friend say whatever size build display better absolutely go big allowed form factor though pi wo nt effectively use much display maximum much space want dedicate box portable could go anywhere ultraminimalist control box plug hdmi screen wireless controller giant widescreen stand arcade machine room four player budget spent point great screen new controller nt whole lot sometimes want build spare part lying around time inclination build part prefer buy prebuilt call make get idea picture posted top blog post search web raspberry pi arcade lot idea reasonable allpurpose starting point recommend buildyourownarcade kit retro built game full kit wood case could also buy arcade control alone build buy case put mainstream recommendation bartop arcade us common lcd panel size typical horizontal orientation reasonably space efficient somewhat portable still comfortably large enough nice big screen large speaker gameplay experience support two player want depending option remember spending well build old arcade cabinet excited longer necessary invest much time effort money successfully revisit arcade past thanks largely raspberry pi retropie project simple maker project take weekend friend family budget maybe want get extra fancy pretty great classic arcade classic console emulation experience way better even adjusting inflation advertisement stack overflow put developer first already help find answer tough coding question let u help find next job
365,Lobsters,virtualization,Virtualization,Persistent storage patterns for Docker in production,https://www.joyent.com/blog/persistent-storage-patterns,persistent storage pattern docker production,casey bisson state keep using word persistent keep using word caution user poor performance using remote storage example cautionary tale going couchbase container actually stateless pattern use configuration tutorial secret hashicorp vault shippable one vault database autopilot pattern mysql shared data autopilot pattern implementation wordpress manta object thing avoid complex applicationspecific orchestration scifi devops every application stateless mysql example gerrit code review time hook fired team decided add clusteringshared state feature based assumption cost downtime operated way still stateless scheduler pick application challenge,july casey bisson share conventional wisdom container great stateless application inappropriate stateful apps persistent data true technology nt pattern managing persistent data stateful application commonly understood challenge nt much persist state without compromising agility automation love containerization first place seen future application type easily automatically deployed scaling even clustered system persistent state done button press even backup recovery automatic let show state keep using word application even call stateless keep sort state state simple application execution flow important pokemons cp bank account stateless stateful nt much describe application value data make state cost recovering random number generator stateless expect different value every time run could easily dockerize instance fails reprovision elsewhere without worrying changing behavior running new host bank account however stateless bank account app reprovisioned new server better data first server else number people going angry hope bank error favor even somebody angry yet statefulness strictly dependent type data represented application consider inmemory cache like memcached memcached often used hold valuable data including banking data nt consider stateful constructed application way recover memcached state performance cost unique data lost state statefullness app truly cost recovery state cost depend nature data represents state architecture application persistent keep using word start easy laptop data ram persistent data hard drive ssd praise ssds persistent delete device fails cloud time building resilient application simple notion persistence get complex increasingly want server disposable sometimes call immutable infrastructure goal go server anywhere run app server fails throw away dispose go another necessary public cloud renting server portion necessary resilient application build way survive failure hosting infrastructure disposability server incompatible understanding persistence data learned laptop build stateful application persistent data nt claim hard drive ssds persisting data cloud handful vendor introduced expensive twist persistent data move data different set server connect back application server network sort network could fiber channel tcpip network increase distance data application need distance increase error rate latency throughput maximum performance decline increased error rate include network partition separate application data putting data different set server connecting network nt make data persistent make portable unfortunately system need persistent data often suffer poor unreliable performance remote storage database vendor example caution user poor performance using remote storage working well failure mode remote storage rather spectacular example cautionary tale raising cost stake solution attempt make persistent data portable infrastructure level finally course nt actually solve problem eliminate pet move pet different set server pay high price term performance reliability real dollar going let agree persistence separate portability statefulness application disposability server cost reconstructing state consider persisting data server turn pet infrastructure solution making persistent data portable venn diagram never quite come together middle forcing u choose two three speed reliability portability application handle state persistence better others consider database selfclustering feature like couchbase couchbase manages data portability application level join new couchbase instance cluster automatically replicates reshards data new instance fact many operational task necessary previous generation database completely automated also true failure long nt lose many couchbase instance fast data state reliably persisted remaining instance cluster couchbase even support crossdata center replication application level combined entirely eliminates need remote storage infrastructure level practical matter couchbase container actually stateless far infrastructure scheduler concerned long scheduler supervisor keep enough instance running couchbase automated resharding replication feature take care rest pattern use different application offer different level automated operation every application built automatically manage various data represent state short abandoning rewriting apps first question kind stateful data talking common state data configuration related configuration including key secret often written disk various file data easy recover provisioning instance since ca nt provision scale automatically ca nt configure instance automatically usergenerated content present challenge text video pokemons cp bank transaction type data deserves consideration separately configuration often time dynamic configuration detail connect service x service connecting app database one example process called discovery applicationsservices simply treat configuration along configuration detail order app scalable resilient necessary update configuration running add remove instance service got able update service connect example database load need add instance improve performance thing need connect need know new instance otherwise new instance sit idle nothing improve application performance go process instance database ever fails ca nt update database client get lot failed request good news kind dynamic configuration easy tutorial configuration detail include performance tuning parameter detail healthy debate whether detail belong application repo versioned tracked dynamic storage changed without rebuilding redeploying application compromise solution automatic replication repo content configuration store using tool like exactly handle configuration data depends specific application generally keep configuration data maybe template hashicorp consul another strongly consistent distributed keyvalue store gather configuration detail runtime application expects exist disk use ininstance storage secret apps secret generally configuration detail u sensitive hashicorp vault general purpose solution securely storing secret cicd solution often also include secret management feature shippable one keep secret vault another secure secret management service gather secret runtime application expects exist disk use ininstance storage database database often canonical example stateful application difficult dockerize unfortunately also lot bad advice hokum dockerizing database pretty much problem implementing database cloud pretty much problem building resilient database implementation automation problem automating many database operation importance object filesystem automating replication mysql postgresql example requires automatically copying content filesystem new instance postgres mysql documentation explaining nt ship tool get job done consistent reliable way newer database often automate operational task couchbase example nonetheless automation implemented autopilot pattern mysql demonstrates implementation add typical mysql lifecycle awareness database operator know thing start new database instance joining existing database cluster starting one new joining existing cluster need bootstrap replica start database lifecycle automated using autopilot pattern backup throughout database lifecycle implementation also optionally automates election new primary configurable timeout existing primary fails ending lifecycle datastate persisted multiple level replication process duplicate state across multiple database instance surviving instance used bootstrap new instance state primary instance periodically backed object store assures level data survivability even entire running cluster lost result mysql implementation stateless scheduler need orchestration data need unreliable slow remote storage detail specific mysql implementation generally use ininstance storage distribute data among multiple instance upgrade database adding new replicaspeers removing old replicaspeers promote replica primary needed back using dbspecific solution shared data shared data present special case application inching closer legacy category said application probably u long time one common example wordpress almost ubiquitous blog software wordpress us mysql store text content much configuration user uploaded image blob stored filesystem wordpress plugins use object storage default quite number plugins incompatible approach order scale wordpress multiple instance without incompatibility need shared filesystem across without shared filesystem instance would independent inconsistentpartitioned portion user uploaded file autopilot pattern implementation wordpress us nfs shared filesystem reason generally use manta object object storage use shared filesystem nfs last resort thing avoid keen reader might wondering nt suggested solution like mapping volume docker host using docker volume driver short suggest avoiding especially anything simply move persistence problem container underlying host might make possible ignore challenge data state management container nt solve problem application still need find way manage data outside container mean without benefit tooling state awareness exists container worse turn container host pet constrain application specific host working around problem outside container requires much complex applicationspecific orchestration scheduler larger infrastructure management team sres make work top separating developer operational detail apps leading cause work machine see scifi devops problem remote storage discussed applies remote storage accessed via docker volume driver well problem remote storage also apply distributed storage added challenge consistency partition stale read lost writes irreconcilable change promise distributed storage performance local storage convenience shared filesystems particularly thorny problem solution far demonstrated ugly failure mode raise serious question reliability consistency need application vary generally best avoid mapping v volume host volumesfrom docker volume driver distributed filesystems every application stateless application assumes filesystem made stateless automatically backing filesystem content container running restoring filesystem application started mysql example though us applicationlevel replication primary mechanism distribute state among number instance performance survivability use approach application nt feel like database imagine running gerrit code review container backing filesystem object store queueing backup time hook fired get reliable copy application state postgres db backed replicated separately design container restore content backup start time make application highly durable resilient without needing infrastructure support triggering backup based application activity sure backing filesystem meaningful change le frequently done make gerrit stateless scheduler nt mean gerrit wo nt ever downtime made easy replace gerrit simply move new server need minimal downtime hypothetical implementation gerrit automatically recover state backup made pick right left made stateless enough scheduler nt complex orchestration without magic infrastructure instead done reliable tool system served application year separate making application share consistent state across multiple instance scale availability shared state often requires support app gerrit specifically team decided add clusteringshared state feature based assumption cost downtime conversely mysql couchbase example demonstrate application designed share state across multiple instance operated way still stateless scheduler pick application challenge nt think possible make application stateless try email devops joyentcom question sure include link repos documentation question see detail try answer question blog
367,Lobsters,virtualization,Virtualization,The Design and Implementation of the Anykernel and Rump Kernels (Second edition),http://www.fixup.fi/misc/rumpkernel-book/,design implementation anykernel rump kernel second edition,design implementation anykernel rump kernel rump kernel project donate view donor,design implementation anykernel rump kernel edition design implementation anykernel rump kernel definitive technical guide core rump kernel project book available freetodownload pdf clicking one cover image epub printondemand version may offered later date donate view donor find book useful welcome show appreciation donating sum choice author via link hard time choosing sum suggestion half paid previous tech book bought note even though book available free charge content copyrighted please respect licensing term beginning book spoiler alert redistribute book need look license
369,Lobsters,virtualization,Virtualization,bhyve-Bootable Boot Environments,http://callfortesting.org/bhyve-boot-environments/,bhyvebootable boot environment,bhyvebootable openzfs boot environment http june version michael dexter impunity consolidating default boot environment enter duplicating default boot environment creating new simple boot environment booting new boot environment bhyve oshogbo stefan bethke future development experimenting protocol beadm bsdnow feedback recent mention michael dexter,bhyvebootable openzfs boot environment http june version michael dexter elegantlysimple multibooting o upgrade zfs boot environment bhyve reading probably used personal computer bsd gnulinux operating system point attempted multiboot multiple operating system computer goal typically attempted complex disk partitioning bsd gnulinux boot loader like lilo grub plus several hour frustrating experimentation perhaps data loss exotic o experimentation driven virtualization work since late pragmatic reason multibooting o hardware notable update failback known good version credit freebsd long various strategy including nanobsd embedded system framework primary secondary root partition plus nextboot utility selecting next kernel various boot parameter get everything set correctly multiboot impunity good start time seen zfs boot environment used pcbsd freenas allow system update allow one fall back previous version something go wrong hat effort exist essentially purposebuilt appliance environment long sensed fun wonderful thing happened freebsd allan jude added boot environment menu freebsd loader welcome freebsd yo boot multi user enter boot ingle user sy esc ape loader prompt reboot option k ernel defaultkernel configure boot ptions select boot e nvironment last entry talking press see welcome freebsd yo active bootfs zfs sy p age boot environment default understand going look zfs configuration freshlyinstalled freebsd system root zfs list name used avail refer mountpoint none tmp usr usrhome usrports usrsrc var varaudit varcrash varlog varmail vartmp zpool name sync host name thinkpad see various default freebsd datasets note third entry set bootfs menu field current boot environment pool working root akin traditional root partition separate usr var like unlike traditional partition however datasets share space dataset consider setting quota want mitigate classic fill tmp denial service attack lacking quota convinced many datasets required okay put place fun first however little context may aware nontrivial interest virtualization assisted incorporation bhyve hypervisor freebsd rather followed docker xen course journey built nontrivial number handcrafted freebsd release use bhyve host virtual machine bhyve arrived freebsd proceeded continue test head development snapshot freebsd couresy freebsd release engineer glen barber done point forgotten freebsd release grateful package built freebsd head allow say give presentation see presentation vi apologize said equally nontrivial interest fresh o installation average life expectancy installation system matter week hardware minute virtual machine resulted nontrivial motivation simplify process promise last time use phrase let simplify process consolidating default boot environment disclaimer try production system first thing consolidate default boot environment contain single dataset prepare cohabitation additional sibling boot environment safely say want mount multiple operating system mount point ie one another child datasets usr similarly want forget mount desired dataset file system tree standard canmountproperties freebsd installation root zfs list h name xargs zfs get canmount name property value source canmount default canmount default canmount default canmount default canmount local canmount default canmount default canmount default canmount local canmount default canmount default canmount default canmount default canmount default mount point root zfs list h name xargs zfs get mountpoint name property value source mountpoint local mountpoint none local mountpoint local mountpoint tmp local mountpoint usr local mountpoint usrhome inherited mountpoint usrports inherited mountpoint usrsrc inherited mountpoint var local mountpoint varaudit inherited mountpoint varcrash inherited mountpoint varlog inherited mountpoint varmail inherited mountpoint vartmp inherited point must make decision preserving default freebsd partitioning boot environment go single dataset unlike would freebsd jail challenge canmount property blunt instrument want want given file system hierarchy mount boot want noauto inactive one set default layout noauto datasets usr var datasets mounted causing example new log collect folder var rather original datasets seek simplicity skip creating new simple boot environment section perform zfs destroy r default boot environment else let push limit change datasets canmount canmount noauto keeping mind cause descendant usr var mounted without additional step root zfs list hp name xargs zfs get h canmount grep cut xargs zfs set canmountnoauto root zfs list hp name xargs zfs get h canmount canmount noauto local canmount noauto local canmount noauto local canmount noauto local canmount local canmount noauto local canmount noauto local canmount noauto local canmount local canmount noauto local canmount noauto local canmount noauto local canmount noauto local canmount noauto local enter beadm additional step sysutilsbeadm port exists simplify boot environment management via activate mount command among others activate command toggle canmount property noauto plus set zpool bootfs property accordingly unfortunately time writing beadm bug preserve canmountoff property usr var datasets causing system fail boot remember set manually investigate bug said let perform actual consolidation child datasets root zfs rename root zfs rename root zfs rename unmount varlog device busy root zfs rename f root zfs list name used avail refer mountpoint none tmp usr usrhome usrports usrsrc var varaudit varcrash varlog varmail vartmp notice var dataset needed f force flag rename default dataset fully consolidated two thing stand first pool still mounted like storage pool without operating system find default dataset useful data directory transcends different operating system second choose keep datasets separate usrhome supposed system agnostic practicality custom varcachepkg dataset find constantly trying freenas head snapshot suggest reboot verify work pool ready completelyindependent boot environment duplicating default boot environment considering taking limitspushing route let look making copy rootdefault boot environment zfs snap r export zfs create zfs send r export zfs receive f zfs list internal error failed initialize zfs library reboot done send snapshot rootdefault boot environment rootduplicate internal error guess despite fact canmount property set noauto snapshot arrived mounted state causing default duplicate boot environment mounted atop one another fortunately reboot resolve keep mind descendant usr var mounted thanks canmountnoauto property system use beadm properly set canmount bootfs property remember bug mentioned root beadm list active mountpoint space created nickname default default duplicate nr duplicate root beadm activate duplicate activated successfully root zfs set canmountoff root zfs set canmountoff reboot true freebsd freebsd dualbooting based default boot environment however beadm set canmounton child datasets would cause collision choose different boot environment boot may resolvable boot loader adjustment solution create simpler setup similar different version freebsd creating new simple boot environment point nothing behave differently standard installation lay groundwork fun part consider root zfs create canmountnoauto mountpoint root mount zfs mnt root pkg install securitycarootnss root fetch http tar xf c mnt root fetch http tar xf c mnt root cp bootloaderconf mntboot root l mnt cshrc boot libexec rescue tmp profile dev medium root usr copyright etc mnt sbin var bin lib proc sys root umount mnt latest snapshot freebsd installed zfs boot environment mounted mnt note bootloaderconf step important success else zfs pool found kernel module loaded reboot choose select boot environment menu loader see result welcome freebsd yo active bootfs zfs sy p age boot environment default press select enter boot boot password set completely fresh installation reboot return look closely boot loader notice bootfs property mentioned zfs poollevel property determines default boot environment set system boot rather run root zpool set new default boot environment set destroy default boot environment like system dependent zfs pool boot loader hopefully implication starting sink achieved dual boot freebsd system version contained single dataset root taking step performed zfs send operation freenas installation new boot environment thus quadbooting system really get interesting fact experimental openindiana illumos build use freebsd uefi boot loader difficult truly dual boot freebsd illumos using zfs pool know gnulinux zfs boot environment support plan fullylegal incorporation zfs booting new boot environment bhyve step completely changed way track freebsd current entertain potential bhyve hypervisor want git source tree currentlyrunning system system fixed ip address interface consider strategy based excellent work oshogbo stefan bethke root pkg install git root git clone http githubcomstblassitudebootrootnfs root cd bootrootnfs root bootrootnfs make root bootrootnfs mount zfs mnt root bootrootnfs echo mnt alldirs etcexports root bootrootnfs service nfsd onestart root bootrootnfs bootrootnfs mnt e e e e bootnfsrootpathmnt root bootrootnfs kldload vmm root bootrootnfs ifconfig create root bootrootnfs ifconfig addm root bootrootnfs ifconfig create root bootrootnfs ifconfig addm root bootrootnfs bhyveload h mnt e e e e e e e e bootnfsrootpathmnt e mnt e vfsrootmountfromoptionsrw welcome freebsd yo boot multi user enter boot ingle user sy esc ape loader prompt reboot option k ernel kernel configure boot ptions bootkernelkernel syms bootkernelzfsko size loading required module opensolaris bootkernelopensolarisko size booting root bootrootnfs bhyve c h hostbridge virtionet lpc l stdio amnesiac login root root uname freebsd freebsd wed may utc root usrobjusrsrcsysgeneric root everything go according plan boot boot environment mounted mnt shared via nfs mnt bhyve hypervisor countless way adjust provides building block install additional operating system version effortlessly also boot bhyve prior booting bare metal upgraded forgot tweak made previous system simply boot previous boot environment retrieve preparing major update snapshot current boot environment clone new one future development using nfs achieve admittedly clumsy jakub klama experimenting plan protocol diskless bhyve booting working gnulinux freenas freebsd support forthcoming kris moore also added boot environment importexport support beadm boot environment administration utility think something installing freebsd release update derivative like freenas pfsense delivered directly new boot environment via zfs send welcome idea work bsdnow feedback thank allan jude kris moore recent mention article bsdnow using builtin nfs sharing tied zfs target boot environment must directory bhyveload h find boot directory kernel long run way go diskless bhyve boot copyright michael dexter unless specified otherwise feedback correction welcome
371,Lobsters,virtualization,Virtualization,Libcloud 1.0.0 released,https://libcloud.apache.org/blog/2016/06/22/libcloud-1-0-0-released.html,libcloud released,containerasaservice backupasaservice release highlight detail special thank tomaz muraus paul querna jerry chen jeff dunham eric johnson jed smith rick wright roman bogorodskiy mathew baldwin david crossland alex gaynor allard hoeve sebastien goasguen franck cuny ken dreyer javier castillo ii wido den hollander michael bennett anthony monthe lior goikhburg geunwoo shin juan font schaubl misha brukman oltjano terpollari peter schmidt ming sheng gertjan oude lohuis markos gogoulos bernard paques evgeny egorochkin oleg atsushi sasaki miguel caballer kumar gavin mcdonald roeland kuiper brian curtin ivan kusalic levstik none mrbasset none javier mellid greg hill none stefan friesel mark maglana alejandro gabriel pereira kyle long teemu vesala filipe silva jay bernard kerckenaere john obelenus jon chen larry lui important breaking change amazon driver change bug fix general new deprecated driver compute storage loadbalancer dns bug fix improvement compute storage backup download http libcloudapacheorgdownloadshtml upgrading upgrade note http libcloudreadthedocsorgenlatestupgradenoteshtml documentation http libcloudreadthedocsorgenlatest bug issue http issuesapacheorgjirabrowselibcloud thanks change file,pleased announce release libcloud first release series mean brings many new feature improvement bugfixes driver series includes new driver type containerasaservice backupasaservice release highlight includes new backupasaservice containerasaservice driver type deprecated driver longer available ninefold ibm sce detail add support authenticating keystone openstack based cloud using openid connect token gce node launched subnetwork support subnetworks add image family support gce add new perth australia manila philippine region cloudsigma driver add new rgw storage driver amazon driver changed use region code instead separate driver region introduce new listregions class method base driver class support dimension data backup added nsone luadns nearlyfreespeechnet buddyns dnspod dns driver added aliyun compute load balancer storage driver added outscale storage driver full change log found special thank would like wish special thank community contributor ongoing support project tomaz muraus paul querna jerry chen jeff dunham eric johnson jed smith rick wright roman bogorodskiy mathew baldwin david crossland alex gaynor allard hoeve sebastien goasguen franck cuny ken dreyer javier castillo ii wido den hollander michael bennett anthony monthe lior goikhburg geunwoo shin juan font schaubl misha brukman oltjano terpollari peter schmidt ming sheng gertjan oude lohuis markos gogoulos bernard paques evgeny egorochkin oleg atsushi sasaki miguel caballer kumar gavin mcdonald roeland kuiper brian curtin ivan kusalic levstik none mrbasset none javier mellid greg hill none stefan friesel mark maglana alejandro gabriel pereira kyle long teemu vesala filipe silva jay bernard kerckenaere john obelenus jon chen larry lui important breaking change amazon driver change amazon api updated consolidate regionalbased driver single driver region argument constructor amazon instance instantiated using following syntax libcloudcomputetypes import provider libcloudcomputeproviders import getdriver cl getdriver driver cl access key secret key brings amazon api inline driver make easier maintain switch region bug fix general fix bug consuming stdout stderr paramiko ssh client would manifest rare condition consumed chunk contained single byte part multi byte character lakshmi kannan tomaz muraus increase default chunk size byte paramiko ssh client result smaller number receive call average tomaz muraus fix dimension data api address middleeast africa anthony shaw throw userfriendly exception address associated hostname tomaz muraus scott crunkleton remove deprecated provider constant region name related driver class eg etc driver moved single provider constant region constructor argument model tomaz muraus new deprecated driver compute deprecated ibm sce hp helion opsource ninefold cloudframes driver removed driver code test anthony shaw introduced error message libcloudcomputedeprecated deprecated driver anthony shaw new compute driver bsnl indosat nttamerica internet solution anthony shaw new driver aliyun elastic compute service sam song storage added outscale storage driver javier mellid new driver aliyun os storage service sam song loadbalancer new driver aliyun slb loadbalancer service sam song dns added nearlyfreespeechnet nsfn driver ken drayer added lua dns driver oltjano terpollari added nsone driver oltjano terpollari bug fix fix bug godaddy driver make sure host attribute connection class correctly set hostname tomaz muraus fix handling mx record gandi driver ryan lee improvement compute introduce new listregions class method base driver class method used provider driver support multiple region region constructor argument allows user enumerate available supported region tomaz muraus dimension data added support vmware tool vm information inside listnodes response jeff dunham added exencrypted exkmskeyid optional parameter create volume method viktor ognev dimension data added support managing host antiaffinity rule added paging support supported call added support requesting priority ordering creating acl rule jeff dunham addition dimension data australia federal government region dimension data driver anthony shaw openstack creating floating ip added poolid optional argument markop google compute added setmachinetype method allow changing size instance eric johnson google compute allow bypassing image search standard project list max illfelder add support requesting mks token accessing remote console vmware vcloud driver juan font alonso add support vmware vcloud driver api snapshot support juan font alonso added support adding family image google compute driver max illfelder fix set default signature version aws seoul region removed nonsupported size geunwoo shin support filtering location listnodes dimension data compute driver fix lack paging support jeff dunham support filtering network network domain vlan dimension data driver jeff dunham added nodecreatedat supported driver contains datetime node first started allard hoeve rick van de loo storage improvement google auth storage compute mime bug fix scott crunkleton implement getcontainer getobject uploadobjectviastream method backblaze storage driver note backblaze api nt upload streaming uploads using uploadobjectviastream whole file read buffered memory jay jshridha backup dimension data added additional testing fixed bug client response naming added support adding backup client backup enabled node jeff dunham download release downloaded http libcloudapacheorgdownloadshtml installed using pip pip install upgrading installed libcloud using pip also use upgrade pip install upgrade upgrade note page describes backward incompatible semiincompatible change preserve old behavior possible found http libcloudreadthedocsorgenlatestupgradenoteshtml documentation regular api documentation available http libcloudreadthedocsorgenlatest bug issue find bug issue please report issue tracker http issuesapacheorgjirabrowselibcloud nt forget attach example test reproduces problem thanks thanks everyone contributed made release possible full list people contributed release found change file
372,Lobsters,virtualization,Virtualization,Legacy x86 Applications on OpenPOWER™ via QEMU,https://www.raptorengineering.com/TALOS/op_qemu_gl.php,legacy application via qemu,firefox chrome qemu patch series contact developer back prerelease page,legacy application via qemu graphic demonstration guest video illustrates variety native binary application executing machine using qemu user mode translation application using full hardware capability host machine access host alsa audio application primarily use scalar instruction perform quite well application making heavy use vector instruction experience lag stuttering due missing feature qemu see note multiple game used demonstrate feasibility nonnative engine binary interfacing host gpu best viewing experience expand video full screen mode device screen resolution least x pixel recommended browser support video tagplease upgrade modern browser firefox chrome general note qemu patch series required applied qemu master version used demonstration stuttering largely caused qemu translating target simd vector instruction host simd vector instruction qemu currently translates vector instruction eg large chunk scalar code resulting slow vector execution currently affect target host pair available qemu openpower combination qemu project seeking volunteer implement simd vector translation would like help please contact developer setreuid setegid call target binary currently crash qemu alien arena recompiled two call commented demonstration tested using single amd radeon open radeon driver host kernel must compiled page support match architecturedefined page size drm passthrough requires qemu host process lp mode match target lp mode ie target would require build qemu ship stock kernel userspace target tested video captured straight radeon dvi output alsa audio function well captured demonstration end video several application relaunched using native build performance comparison data information provided page informational purpose raptor engineering make representation accuracy completeness currentness suitability validity information page liable error omission delay information loss injury damage arising display use information provided asis basis product name logo brand property respective owner company product service name used page identification purpose use name logo brand imply endorsement edited encoded openpower using libre software back prerelease page design content raptor engineering llcall right reservedno page file may distributed without express written permissionthis website make minimal use cookiesuse site constitutes acceptance policydesign content raptor engineering llcall right reservedno page file may distributed without express written permissionthis website make minimal use cookiesuse site constitutes acceptance policy
373,Lobsters,virtualization,Virtualization,Docker Engine 1.12 Comes with Built-in Orchestration Capabilities,http://thenewstack.io/docker-engine-1-12-will-come-built-orchestration-capabilities/,docker engine come builtin orchestration capability,david messina coming together raft consensus algorithm docker compose dockercon docker hpe ibm red hat,rather relying external software docker inc want make orchestration builtin feature core container engine upcoming release docker engine version due july come within builtin orchestration capability allowing user manage complex containerized application without additional software using command line structure syntax developer familiar using docker container previously orchestration capability known offered thirdparty tool kubernetes docker swarm dockerized application get deployed broadly make technology aligns closely system administrator used said david messina docker vice president marketing optional feature docker engine software act node selforganizing cluster similar engine across multiple server work together single scalable system run large fleet interconnected docker container orchestration model application deployment offer number benefit especially built microservices architecture application container runtime environment easily scaled meet demand also ensures way running application across different hardware environment using docker unifying substrate coming together docker engine effect becomes node running virtual machine physical machine messina said primitive orchestration exist every engine including ability selforganize discover node automatically operator choose engine manager worker cluster docker node swarm docker parlance selfhealing application running failed node restarted elsewhere workload information captured stronglyconsistent distributed data store within engine engine acutely aware state requirement application service aware container running every worker engine messina said external dependency thirdparty keyvalue store said referring docker swarm relies external etcd distributed keyvalue store distributed keyvalue store embedded docker engine based raft consensus algorithm sharing active knowledge state scheduling request come stored memory scheduling happen memory well blocking messina said constant reconciliation manager node make sure node go thing rescheduled another worker automate workflow developer deploy declarative service deployment api defines service storage networking compute resource api offer ability declare abstraction container layer including service image scale port developer use docker compose declare requirement turn service request advanced deployment execution also carried apis including canary bluegreen rolling update applicationspecific health check carried well administrator chooses new node join swarm either automatically manually cryptographically secret handshake docker command five instance container spun new service called frontend connected overlay network communicate externally tcp port software us multihost overlay software provide single networking space swarm offer automatic load balancing automated service discovery carried dns service user build overlay network crossing multiple cloud using docker plugin architecture thirdparty software communication among node encrypted carried tl pki service offer automatic certificate rotation general purpose framework called cryptographic node identity prof support identifying managing sensitive workload network engine cryptographically identified part swarm communicate automatically tl messina said although many capability docker swarm embedded within docker core engine company still maintain update swarm indefinite future messina said release candidate docker engine issued company suggests trying new capability newly launched docker aws docker azure cloud service offer integration backend storage service commercially supported version docker engine obtained docker hpe ibm run red hat enterprise linux ubuntu hpe linux company offer deeper dive new technology user conference dockercon held week seattle docker hpe ibm red hat sponsor new stack feature art tetristhemed street art seattle
374,Lobsters,virtualization,Virtualization,True Containerized Development with Convox Code Sync,https://convox.com/blog/bidirectional-sync/,true containerized development convox code sync,tale two onboardings work docker volume performance file masking useful file cool get started o x linux sign docker mac beta join slack project repo,year ago published blog post called tale two onboardings widely shared think people responded painted picture easier world development machine docker installed boot anything need development workflow single command kind workflow develop inside running container promise docker long known great developer experience never fully realized convox cli ability enhance docker usage code sync latest release convox start instantly sync file change docker host container container host enables edit file host using favorite text editor see file change reflected container immediately run command generate code change container code appear host commit version control work run convox start cli watch file host copy change built container also copy small linux binary onto built container watch change binary log change stdout cli listening cli copy changed file back host file synced container built dockerfile project file directory appear copy add statement dockerfile synced docker volume wait minute docker volume mount well yes docker volume good way share file host container case sharing whole code directory come couple known gnarly problem performance running apps written highlevel scripting language common large number file touched request volume performance issue linux unusably slow o x docker machine docker mac example regularly seen single rail request excess second using docker volume file masking docker volume use overlay mount mean host directory mounted corresponding container directory making file previously existed exclusively container unavailable problematic want build useful file base docker image app dockerfile inherits cool feature finally realize true containerbased development docker many powerful implication longer depend verbose documentation easily lost tribal knowledge know set development environment code configuration true onecommand boot mean rapidly onboard new developer start known good working system instead slog potentially complicated setup process production staging test development environment run exact operating system software version work machine get started try today downloading installing convox cli o x curl l http installconvoxcomosxzip tmpconvoxzip unzip tmpconvoxzip usrlocalbin linux curl l http installconvoxcomlinuxzip tmpconvoxzip unzip tmpconvoxzip usrlocalbin also need docker installed locally o x sure sign docker mac beta prerequisite installed play around rail example git clone git githubcom convoxexamplesrailsgit cd rail convox start app booted run docker p get list container id exec onto container run rail command docker exec container id bash rail g scaffold rake db migrate observe changed file local filesystem try changing file locally observe file change container please join slack let u know think feature bug report feature request patch welcome project repo
375,Lobsters,virtualization,Virtualization,New router chips could save open source firmware from FCC rules,http://arstechnica.com/information-technology/2016/06/new-router-chips-could-save-open-source-firmware-from-fcc-rules/,new router chip could save open source firmware fcc rule,requires router maker way tplink asus imagination technology demonstration prpl foundation announcement mips warrior processor percent,imagination technology company design mips processor networking hardware say developing technology would allow installation open source firmware wireless router still complying u federal communication commission latest antiinterference rule fcc requires router maker prevent thirdparty firmware changing radio frequency parameter way could cause interference device faa doppler weather radar system easiest way router maker comply simply prevent installation open source firmware altogether linksys came way allowing open source firmware far method scale across industry least router tplink asus locked chip design company called imagination technology partnered open source software maker put thirdparty firmware openwrt virtual machine isolated radio control right demonstration nt ready deployment company say possible capability could hit market sometime demo sponsored prpl foundation open sourcefocused nonprofit created imagination tech company including broadcom cavium qualcomm videoimagination technologiesthe take advantage hardware virtualization technology embedded mips warrior cpu create multiple trusted environment software run secure container imagination said announcement go live today result thirdparty firmware like openwrt ddwrt installed virtual machine isolated software control radio frequency parameter satisfying fcc requirement could preserve user ability replace firmware preinstalled hardware vendor customize router demo openwrt installed one virtual machine second virtual machine run wifi driver direct access driver vms except virtual network connection imagination say virtualization software used demo open source hypervisor previously ran arm architecture ported mips project new source code release include mips support maker kernkonzept told ar demo show virtual machine isolated running one vm crash others unaffected incomplete work done make sure hypervisor guest operating system authenticated hacked boot imagination official say done within year guarantee technology come consumer router company official say confident although demo focused compliance fcc rule imagination say technology help router maker add feature without causing security problem demo includes third virtual machine act sandbox running third party application provide additional functionality smart home automation announcement say imagination official say began working hardware virtualization six year ago took year hone technology efficiency performance hardware virtualization became available release first mips warrior processor performance hit virtualization minimal le percent one recent test imagination nt make chip instead make design license semiconductor manufacturer chip maker using imagination design include qualcomm atheros realtek mediatek lantiq owned intel ikanos owned qualcomm atheros baikal electronics company told ar broadcom cavium design mipsbased chip instead purchasing imagination tplink belkin linksys securifi bt among company made router using older version imaginationdesigned chip company say imagination announcement urge router maker adopt new ready adopting chipsets built using latest mips warrior cpu networking manufacturer ensure wireless driver complies fcc guideline security still satisfying requirement open source community company say
376,Lobsters,virtualization,Virtualization,Could a neuroscientist understand a microprocessor?,http://biorxiv.org/content/biorxiv/early/2016/05/26/055624.full.pdf,could neuroscientist understand microprocessor,,obj endobj obj stream applicationpdf could neuroscientist understand microprocessor latex hyperref package false pdftex version tex live kpathsea version endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj procset pdftext typepage endobj obj procset pdftext typepage endobj obj procset pdftext typepage endobj obj r endobj obj stream g pv h ץ endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream na j gg g ǿ q n kc u k k r x r kk g q k r hc ku n iv f k di j b n ڟmnf opcb z h p ysvjlpmiȣk r w kh w z c g rk z g e q l r 賲f hm lz ζz
377,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #28): HTTP vs. Thrift,http://microservicesweekly.com/issue/28,microservices weekly issue http v thrift,article discussion event video presentation,issue jun article comprehensive followstepbystep guide teach build factor cloudnative application get educated surrounding ecosystem develop microservices using netflix os spring boot tutorial series fundamental microservices explained implemented article explain purpose risk microservice architecture give hint architecture must look like met purpose start looking microservices eventdriven lens see complex distributed architecture benefit approach philippe presentation codelivered jeanphilippe boily metric watch covered gemnasium journey monolithic single application using ruby rail distributed microservices approach using go new jnbridge r lab show deploy java net side jnbridgeproenabled application docker container make easy sell bitcoinpayable microservices allowing earn satoshis background computer run read paper learn recommended next step practical use microservices enabling digital initiative look microservices stack blog post author show three different architectural pattern use setup new serverless application discussion event microservices practitioner summit forum pragmatic advice microservices practitioner adopted microservices scale leading tech company theory best practice real world video martin chief scientist thoughtworks opinion leader author many development book presentation
378,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #27): Game On,http://www.microservicesweekly.com/issue/27,microservices weekly issue game,article presentation course video project,issue may article beginning pattern language microservice architecture game application composed several microservices clusterhq overview microservices day london talk zalando microservices architecture recent survey data suggests java gaining strength development embedded iot application walthrough idea behind realtime blogging cm app started building learn straightforward approach frontend microservices tailor library provides middleware integrate nodejs server get api wrong first time around really expensive fix trying follow microservices architecture practical challenge post discus handle challenge presentation course part udacity new devops nanodegree program video talk learn use modern technology like docker apache mesos cassandra build platform reduce complexity automate lighting fast deployment take advantage load balancing service discovery health check selfhealing apps reducing cost cloud infrastructure project manage docker container image network nice clean way
379,Lobsters,virtualization,Virtualization,Secure Desktops with Qubes: Introduction,http://www.linuxjournal.com/content/secure-desktops-qubes-introduction,secure desktop qubes introduction,qubes work sharing information appvms templatevms persistence backdoor protection network security netvms,first multipart series qubes o securityfocused operating system fundamentally different linux desktop ever used one personally switched past couple month first article provide overview qubes approach take completely different might used linux desktop particularly interesting security feature future article give howto guide installing configuring use moreadvanced feature come linux security server security tends get attention hardening server generally try limit individual server use firewall restrict access server necessary modern environment server running ssh plus maybe one two networked service way attacker get particular server get hacked ideally detect isolate server respond emergency rest environment stay desktop linux security completely different challenge many different thing desktop action take desktop computer open new way compromised web browsing especially still certain risky plugins like flash installed one major way desktop compromised email another popular attack vector since need open one malicious email attachment click one malicious phishing link attack succeed linux desktop also often used development platform mean user might downloading building executing someone else code running service directly desktop test code although linux user smug think malware platform fact day window desktop o town day much malware written crossplatform way run many different operating system biggest issue desktop linux security risk get hacked personal data could anything user name password important account like bank creditcard account socialmedia account domain registrar web site shopped past creditcard data cached attack could expose personal photo access private email message attacker could leave behind remote access trojan let get back machine whenever want meantime could snoop webcam microphone even could compromise ssh vpn gpg key open access computer core idea behind qubes provides security approach called security compartmentalization approach focus limiting damage attacker separating activity related file separate virtual machine vms assign vm certain level trust based level risk vm present instance may create untrusted vm use generic unauthenticated web browsing might separate moretrusted vm use access bank may decide create third highly trusted vm network access use manage offline document also work personal computer may create separate vms personal versus work activity work vm trusted browse malicious web site untrusted web browser attacker wo nt access banking credential personal file since store different vms qubes even provides disposable vms onetimeuse vms deleted completely disk application close qubes work although certainly could use virtual machine technology set multiple vms regular linux desktop kind arrangement end pretty clunky especially nt want multiple desktop environment running inside window also kind mistake could make kind set would eliminate security benefit might get instance share file copy paste vms securely keep vms date security patch traditional linux distribution made easy get software wanted use without download compile qubes provides number extra tool make easy manage desktop full different virtual machine different level trust qubes also approach aspect desktop security forefront us secure default throughout o qubes make difficult impossible shoot foot qubes us xen provide virtualization want know qubes chose technology see faq qubes site instead vm complete desktop environment qubes us moreprivileged xen vm host desktop environment currently qubes give choice kde xfce although community contributed others vms display individual application window within desktop environment launching firefox qubes behaves much like would expect desktop distribution main difference however qubes let colorcode vms based level trust ranging red untrusted black ultimately trusted number different rainbow color launch application application vm appvm qubes parlance vm start nt started application appears window border colorized based color assigned appvm two instance firefox desktop time tell untrusted web browser banking web browser untrusted one might colored red banking browser might colored green figure provides screenshot qubes documentation demonstrates point figure multiple window different color since vm privileged access data vms xen qubes go extra length protect desktop environment run removing network access encouraged little possible instead use appvms application want run qubes even intentionally make difficult copy file compared copying appvms desktop environment application menu vm submenu launch application figure qubes provides tool submenu nt become unwieldy select application appear appvm menu figure qubes application menu sharing information appvms multiple window open however raise question copy paste insecure approach might share clipboard window risk would logged web site trusted web browser copying pasting password manager password would readable appvms happened running instead qubes provides twotier approach clipboard appvm clipboard copy paste within appvm normal want copy one appvm paste another put data one appvm clipboard press ctrlshiftc put global clipboard highlight window want paste press ctrlshiftv paste data vm clipboard wipe global clipboard paste inside application normal definitely extra cumbersome step would surprised quickly adapt ctrlc ctrlshiftc change window ctrlshiftv ctrlv definitely help prevent accidentally pasting information wrong window qubes also provides commandline tool rightclick menu option gui file manager copy move file appvms attempt get prompt blackbordered window appvm nt control accept file transfer even file nt appear wherever want destination vm otherwise attacker could overwrite important file backdoored version instead file show qubesincoming directory inside home directory templatevms persistence backdoor protection another area qubes provides extra level protection desktop user handle persistence attacker compromise normal desktop install backdoored version utility like l bash add extra program triggered start boot qubes appvms based templatevms base installs fedora debian whonix default community provided template popular distribution create new appvm choose template based start appvm get readonly version template root filesystem although user inside appvm still install software change root filesystem appvm shuts change erased rw usrlocal home directory persist mean browser history setting stick around attacker compromise browser tried install backdoor bash firefox next time rebooted appvm backdoor would gone also default appvms launch common init service like cron automatically mean attacker also could nt add user cron entry launched backdoor although true attacker could store malicious program appvm home directory next time reboot appvm program longer would running would way launch automatically install software appvm us root filesystem based templatevm want install new software launch software manager templatevm install application yum aptget gui equivalent whatever method normally would use install software qubes detects new application menu item added make available appvms based template gotcha newly installed application unavailable appvms appvms restart compromising templatevm compromise every appvm based qubes generally encourages leave templatevms run general application turn add trusted software although add extra bit work want install software also provides nice benefit need apply security update need update templatevm restart appvm get update network security netvms another way qubes provides security compartmentalizing network upon installation qubes create special system vms called network vms netvms named sysnet sysfirewall syswhonix sysnet netvm assigned networking hardware host unavailable vm netvm one ip external network considered untrusted colored red use network manager configure netvm credential need connect wireless network network manager applet show desktop normal sysfirewall vm technically classified proxyvm colored green connects sysnet network access default appvms create use sysfirewall network access complexity first sysfirewall act true firewall appvms although default appvms talk internet unrestricted qubes provides gui tool make easy lock individual appvms access certain host network instance could restrict banking appvm talk port banking web site restrict email appvm talk remote mail server even could restrict vms could talk host internal network anyone want attack one appvms go sysnet sysfirewall also mean attacker compromise appvm nt direct access network hardware ca nt instance automatically connect different wireless access point syswhonix vm act like sysfirewall except automatically set secure tor router appvms use syswhonix instead sysfirewall sysnet network traffic routed tor automatically qubes also provides anonwhonix appvm default us security anonymityfocused distribution whonix includes tor browser route traffic syswhonix default sure already see number area qubes provides greater security would find regular linux desktop hopefully sense different approach qubes take might used qubes find thinking much isolate file information attacker could get successfully compromised one appvms even extra copyandpaste filecopy step force confront whether transferring information untrusted vm trusted one think implication found extra security measure actually let relax little bit would otherwise instance know email attachment open disposable vm ca nt much harm malicious web site untrusted web browser ca nt access anything value touched higherlevel security feature qubes article next article describe download install qubes explain use qubes desktop o including basic feature qubes vm manager qubesspecific tool give example might organize daytoday desktop use across appvms follow article describing moreadvanced qubes feature including splitgpg method allows appvms use gpg private key without direct access manage link securely default application handler open email attachment automatically disposable vms create usbvm isolates usb device would want
380,Lobsters,virtualization,Virtualization,bhyve graphics support,https://lists.freebsd.org/pipermail/freebsd-virtualization/2016-May/004471.html,bhyve graphic support,bhyve graphic support grehan freebsdorg http svnfreebsdorgbaseprojectsbhyvegraphics http http information freebsdvirtualization mailing list,bhyve graphic support peter grehan grehan freebsdorg fri may utc support graphic output checked projectsbhyvegraphics branch usrsbinbhyve executable quick easy build source assuming reasonably current source tree usrsrc svn co http svnfreebsdorgbaseprojectsbhyvegraphics pathtodir cd pathtodir make bhyvesysdirusrsrc usrsrcsharemk uefi gop support checked repo http prebuilt bhyveuefi binary image gop support available http new bhyve executable support new device example using bhyve c ahcicd ahcihd fbuf wait xhci tablet lpc l bootrom h w window framebuffer device fbuf take parameter describing vnc server option optional wait parameter hold execution guest vnc client connected height width frame buffer specified constraint maximum arbitrary resolution yet supported uefi fixed meantime available resolution x x x x x x x x x specifying unsupported resolution result uefi falling back xhci emulation currently tablet back end connects pointer input vnc present pointer input default mouse emulation note latter suppports relative coordinate nt track cursor well vnc keyboard input currently default keyboard code tested window server ubuntu freebsd note older version window freebsd nt like xhci tablet default mouse used vnc client tightvnc tighervnc realvnc aka vnc viewer tested various host osx vnc client known work give try let u know go many thanks michael dexter helping testing later peter information freebsdvirtualization mailing list
381,Lobsters,virtualization,Virtualization,Easy Amazon EC2 Instance Comparison,http://www.ec2instances.info/,easy amazon instance comparison,base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable base performance burst burstable burstable burstable base performance burst burstable base performance burst burstable,highcpu extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu metal gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable metal gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highcpu large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable hourly unavailable extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib ssd yes yes moderate mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable micro gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na low moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes gib gib hdd yes na gigabit mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose double extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit intel xeon platinum cascade lake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown unknown gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd yes yes gigabit na mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable hourly eight extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable medium gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit aws graviton processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd yes yes high mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly double extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable hourly hourly unavailable unavailable eight extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib hdd yes na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highmemory eight extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly large gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na low moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable extra highmemory gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown yes gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable metal gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable highcpu large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd moderate na mbps iop yes yes hvm pv hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable medium gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly double extra large gib unit vcpus none gib unit aws graviton processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable highcpu extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown unknown gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly metal gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na moderate mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable hourly hourly medium gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib hdd yes na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown unknown gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable general purpose large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable highcpu quadruple extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highmemory large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib ssd yes yes moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na moderate mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable hourly hourly extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable double extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose double extra large gib unit vcpus none gib unit intel xeon ivy bridgesandy bridge ghz yes unknown unknown yes gib gib ssd high mbps mbps iop hvm pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose double extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose deca extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable highcpu large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable metal gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra highmemory gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown yes gib gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose metal gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable general purpose gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose large gib unit vcpus none gib unit intel xeon ivy bridgesandy bridge ghz yes unknown unknown yes gib ssd moderate na mbps iop hvm pv hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable highcpu quadruple extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highmemory large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable highmemory extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib ssd yes yes moderate mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown unknown gib gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable hourly hourly unavailable unavailable gib unit vcpus nvidia tesla gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose gpu gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu eight extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd gigabit na mbps iop yes yes hvm pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable hourly general purpose medium gib unit vcpus none gib unit intel xeon ivy bridgesandy bridge ghz yes unknown unknown yes gib ssd moderate na mbps iop hvm pv hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown unknown gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highcpu metal gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly small gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na low moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable general purpose gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes gib gib hdd yes na moderate mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable hourly hourly hourly hourly highcpu double extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable medium gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose extra large gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib gib hdd na high mbps mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable highcpu double extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose extra large gib unit vcpus none gib unit intel xeon ivy bridgesandy bridge ghz yes unknown unknown yes gib gib ssd high mbps mbps iop hvm pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose medium gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib hdd na moderate na mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly medium gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable highmemory gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly high io extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highcpu extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd moderate mbps mbps iop yes yes hvm pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu double extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd high mbps mbps iop yes yes hvm pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highmemory double extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib ssd yes yes high mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highmemory double extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose gpu eight extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly general purpose extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highcpu eight extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes gib gib hdd yes na high mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable hourly hourly hourly hourly metal gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes gib gib hdd yes na high mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable metal gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose quadruple extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose quadruple extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highmemory extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose small gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib hdd swap na low na mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly eight extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit aws graviton processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit na mbps iop na na yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose gpu extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable highcpu quadruple extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd high mbps mbps iop yes yes hvm pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly highmemory quadruple extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib hdd yes na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly metal gib unit vcpus none gib unit intel xeon scalable skylake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose metal gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus nvidia grid gib unit intel xeon sandy bridge ghz yes unknown unknown yes gib ssd moderate mbps mbps iop unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable hourly hourly highcpu double extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit high frequency intel xeon haswell ghz yes yes unknown unknown gib ssd yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable general purpose quadruple extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib hdd yes na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable eight extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly medium gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable general purpose eight extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable high io metal gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose double extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable metal gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable metal gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly eight extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable high io large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable high io gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd yes yes high mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly high io double extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly extra large gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable quadruple extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly double extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus nvidia grid gib unit intel xeon sandy bridge ghz yes unknown unknown yes gib gib ssd high na mbps iop unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable high io quadruple extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly quadruple extra large gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable highcpu gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit intel xeon platinum ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly small gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable highmemory quadruple extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib ssd yes yes high mbps mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly general purpose large gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib gib hdd na moderate mbps mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable high memory quadruple extra large gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib gib hdd na high mbps mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly double extra large gib unit vcpus none gib unit intel xeon platinum cascade lake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly hourly hourly hourly hourly hourly unavailable highmemory eight extra large gib unit vcpus none gib unit intel xeon ivy bridge ghz yes unknown unknown yes gib gib ssd yes yes gigabit na mbps iop yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable hourly eight extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz yes yes unknown yes eb na na gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly metal gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable high memory extra large gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib hdd na moderate na mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly highcpu medium gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib hdd swap na moderate na mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly metal gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable cluster compute eight extra large gib unit vcpus none gib unit intel xeon ghz unknown unknown unknown unknown gib gib hdd na gigabit na mbps iop hvm yes hourly unavailable hourly unavailable hourly unavailable hourly unavailable hourly unavailable hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable double extra large gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable highcpu extra large gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib gib hdd na high mbps mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable medium gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable general purpose eight extra large gib unit vcpus none gib unit intel xeon platinum skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable high memory double extra large gib unit vcpus none gib unit intel xeon family unknown unknown unknown unknown unknown gib hdd na moderate mbps mbps iop pv yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly quadruple extra large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable nano gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit na mbps iop na na yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable quadruple extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable high io eight extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly high memory cluster eight extra large gib unit vcpus none gib unit intel xeon unknown unknown unknown unknown unknown gib gib ssd gigabit na mbps iop unknown yes hourly unavailable hourly unavailable hourly unavailable hourly unavailable hourly unavailable hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly unavailable unavailable hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable eight extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly nano gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus nvidia tensor core gib unit intel xeon family ghz yes yes yes yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable highcpu quadruple extra large gib unit vcpus none gib unit intel xeon haswell ghz yes yes unknown yes eb na na high mbps mbps iop yes yes yes hvm yes hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly micro gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon scalable skylake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable small gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib base performance vcpus burst none gib burstable intel skylake ghz yes yes yes yes eb na na gigabit mbps mbps iop yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable micro gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon scalable skylake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable eight extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib unit vcpus nvidia tesla gib unit intel xeon broadwell ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown yes hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable quadruple extra large gib unit vcpus none gib unit aws graviton processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable double extra large gib unit vcpus none gib unit intel xeon broadwell ghz yes yes unknown yes gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes hvm hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable medium gib unit vcpus none gib unit aws graviton processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable medium gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na low moderate na mbps iop yes yes hvm hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit aws graviton processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable high storage eight extra large gib unit vcpus none gib unit intel xeon ghz unknown unknown unknown unknown gib gib hdd na gigabit na mbps iop hvm pv yes hourly unavailable hourly unavailable hourly unavailable hourly unavailable hourly unavailable hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable hourly metal gib unit vcpus none gib unit intel xeon platinum cascade lake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable micro gib burstable vcpus none gib burstable variable unknown unknown unknown unknown unknown eb na na low na mbps iop pv hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit na mbps iop na na yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib unit vcpus none gib unit aws processor unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon platinum cascade lake ghz unknown unknown unknown unknown eb na na gigabit na mbps iop na na yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable extra large gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable medium gib unit vcpus none gib unit aws processor ghz unknown unknown unknown unknown gib nvme ssd yes yes gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable metal gib unit vcpus none gib unit intel xeon platinum cascade lake unknown unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes unknown unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable nano gib base performance vcpus burst none gib burstable intel xeon family ghz yes unknown unknown yes eb na na low moderate na mbps iop yes yes hvm hourly hourly unavailable unavailable hourly hourly hourly hourly unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable unavailable large gib base performance vcpus burst none gib burstable amd epyc ghz unknown unknown unknown unknown eb na na gigabit mbps mbps iop yes yes yes yes unknown hourly hourly hourly hourly hourly hourly hourly hourly hourly hourly unavailable unavailable unavailable unavailable hourly hourly unavailable unavailable unavailable unavailable unavailable
382,Lobsters,virtualization,Virtualization,Bootstrap a GlusterFS Cluster on GCE,https://deis.com/blog/2016/bootstrap-glusterfs-cluster-gce/,bootstrap glusterfs cluster gce,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
383,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #26): Vert.x Microservices Toolbox,http://www.microservicesweekly.com/issue/26,microservices weekly issue vertx microservices toolbox,article book event project,issue may article curated list microservice architecture related principle technology first two post series microservices post discus background behind microservices new technology enabled benefit microservices maintain data consistency across microservices exchanging event nt quick dump app server new microservice hotness post author rebuild microservices application based jboss eap netflix os deploy openshift microservices approach achieve business agility book book show need start microservices introduction architecture benefit challenge well practical introduction technology microservices event demystifying networking webinar series microservices networking architecture project tool one use microservices vertx
384,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #25): A jorney into the madness of microservices,http://microservicesweekly.com/issue/25,microservices weekly issue jorney madness microservices,article book video,issue may article dark side microservices possibly go wrong part one twopart series first part cover background rationale behind decision explore microservices second part cover specific tool technology code make happen post author show hardest operational problem canarying deep solved introducing notion routing rpc layer breakout session microservices stateless software engineering daily feature daily interview technical software topic last week confluent hosted kafka summit first ever conference focus apache kafka stream processing article overview presented topic conference dropwizard dropwizard provided inspiration spring boot framework collection bestofbreed library provides outofthebox support sophisticated configuration application metric logging operational tool much get api wrong first time around really expensive fix read article learn avoid obstacle road distributed trace view transaction error detail ben stopford look implication mixing toolsets stream processing world realtime business application effectively handle infinite stream leverage high throughput persistent log deploy dynamic fault tolerant streaming service book automating continuous deployment pipeline containerized microservices video talk look microservice pipeline architecture take deep look inside content pipeline powering bbc newsbeat examine architecture tool process make effective benefit solution new challenge microservices bring practice keynote microservices devops continuous development given josh long foo café independent physical meeting place people background expertise within itindustry malmölund region foo café aimed interested sharing learning creating
385,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #24): Deep Dive on Microservices,http://microservicesweekly.com/issue/24,microservices weekly issue deep dive microservices,article book video podcast event project,issue apr article learn basic setting docker singlehost networking learn value building microservices cloud foundry bring application development process understanding difference microservices service oriented architecture author discus restful microservices de facto standard today design system differently microservice running important right tool place orchestration adequate monitoring place jay jonson share approach building docker container read linkedin build infrastructure could dynamically sieve content shared member network deliver list relevant ordered personalized content satisfying requirement highly available lowlatency application article voxxed explains would one prefer kafka traditional jms message broker messaging help decouple component application new application feature written use messaging mean communicating existing application require change downtime main application new feature deployed session discus requirement best practice challenge creating good microservices architecture middleware world continuing restful microservice example author show mix reakt promise qbit microservices lib datawire released open source datawire connect framework allows developer resiliently connect microservices using automatically generated rpcstyle client library java python nodejs service book microservices java architect companion java ee architect handbook detail microservices architecture ebook define microservices provide overview cost benefit video trying navigate emerging microservices ecosystem panel discussion demystify composition landscape role various player within best extract value organization session presenter explore reasoning concept behind microservices container simplify building microservices based application also demonstrates easily launch microservices amazon container service use elb route easily service discovery microservices podcast presentation recorded goto berlin martin fowler author speaker consultant general loudmouth software development event join session learn create javabased microservice using spring boot containerize using maven plugins subsequently deploy fleet microservices onto cluster machine using kubernetes api world conference expo created mission neutral facilitate connection knowledge trust business within developer community api provider consumer coder startup enterprise consumes provides multiple apis event event date monday september location w san carlos st san jose ca project project demonstrates akka http library scala write simple rest micro service
386,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #22): This week's news/articles on microservices,http://microservicesweekly.com/issue/22,microservices weekly issue week newsarticles microservices,article video project,issue apr article article discus key performance challenge impact performance microservicesbased system neat look netflix stack using spring boot overview probe netflixcreated library incorporating spring apps nice series article microservices peter lawrey known vanillajava blog microservices make way enterprise take organization move whiteboard real world author discus consider implementing microservice oriented architecture article explains event driven architecture might good fit microservices automating visualizing coordinating change complex network interdependent service major challenge delivering microservices application typically mean embracing delivery model designed handle dependency microservices matter use rxjava yes definitively rxjava zero dependency le nonopinionated source concurrency thread pool event loop fiber actor etc post delf extra challenge face attempting run orchestrate mongodb container illustrates challenge overcome first entry spring cloud series cover asimio blog learn develop microservices using spring boot jersey swagger docker plan successful microservices architecture docker video webcast pivotal matt stine apigee alan ho discussed realworld example microservices best practice antipatterns trap microservices recommendation tool technology help microservices implementation talk walk many failure mode see production provides practical advice dealing wo nt able eradicate failure survive project gestalt framework infrastructure layer used host gestalt integration service well client application infrastructure layer designed make everything run inside scalable resilient
387,Lobsters,virtualization,Virtualization,Hitler uses Docker,https://www.youtube.com/watch?v=PivpCKEiQOQ,hitler us docker,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hitler us docker youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hitler us docker youtube
388,Lobsters,virtualization,Virtualization,USENIX Enigma 2016 - Timeless Debugging,https://www.youtube.com/watch?v=eGl6kpSajag,usenix enigma timeless debugging,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature usenix enigma timeless debugging youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature usenix enigma timeless debugging youtube
389,Lobsters,virtualization,Virtualization,Microservices Weekly (Issue #20): This week's news/articles on microservices,http://microservicesweekly.com/issue/20,microservices weekly issue week newsarticles microservices,article video event discussion,issue apr article article defines microservices architecture outline best practice designing one insinghtful article microservices architecture solve performance issue peter lawrey allegro cache service written go handle handle rps writes read time team spent figuring gc pause huge impact application responsiveness million object control simple limited scale application monolithic architecture still make sense microservices different approach application development deployment one perfectly suited agility scale reliability requirement many modern cloud application arguably one difficult microservices pattern apply implement bounded context march towards microservices technology post centered around uber built service go handle problem geofencing simple limited scale application monolithic architecture still make sense microservices different approach application development deployment one perfectly suited agility scale reliability requirement many modern cloud application article donnie berkholz give overview microservices critical future software get built informationweek article charles babcock summarizes concept cloud native enterprise shift also described new stack microservices environment bounded context service may may backed single database scenario generalized asynchronous messaging mechanism provide support distributed environment oracle view microservices build microservices oracle second article series discus building microservices using api gateway video talk phil calcado explore reference model microservices architecture built speaker personal experience building architecture tech startup square manik surtani joined apigee alan ho discus mobile payment merchant service provider collaboration google launch grpc open source rpc framework backed protocol buffer based realworld experience operating microservices scale great talk peter elger one node j meetups dublin event goto amsterdam practitionerdriven enterprise software development conference designed team lead architect project management organized developer developer discussion
390,Lobsters,virtualization,Virtualization,Docker for Mac and Windows Beta: the simplest way to use Docker on your laptop,https://blog.docker.com/2016/03/docker-for-mac-windows-beta/,docker mac window beta simplest way use docker laptop,docker mac window beta simplest way use docker laptop docker command line docker compose docker notary command line mat clayton docker mac docker window private beta unikernel system mirageos tcpip implementation,docker mac window beta simplest way use docker laptop celebrate docker third birthday today start limited availability beta program docker mac docker window integrated easytodeploy environment building assembling shipping application mac window docker mac window contain many improvement docker toolbox faster reliable virtualbox docker engine running alpine linux distribution top xhyve virtual machine mac o x hyperv vm window vm managed docker application need dockermachine run docker mac window tool integration docker mac mac application docker window window application including native user interface autoupdate capability docker tool set come bundled docker command line docker compose docker notary command line volume mounting code data volume data access work correctly including file change notification mac inotify work seamlessly inside container volume mounted directory enables edittest cycle container development easy access running container local host network docker mac window include dns server container integrated mac o x window networking system mac docker used even connected restrictive corporate vpn docker mac architected scratch able fit o x sandbox security model working closely apple achieve see docker mac docker window action video video docker mac used time docker toolbox machine allowing developer continue using toolbox evaluate docker mac window need stop toolbox using docker window docker mac window already used private beta tester enhanced developer daily workflow docker mac product addressed issue u installation significantly smoother thanks native mac application autoupdater official image work mac new development workflow allows engineer quickly spin new version service develop software natively mac everything working mat clayton cofounder mixcloud sign docker mac docker window private beta today limited availability private beta signing add waiting list add people waiting list rolling basis get feedback improve product quality docker mac docker window different stage development although share significant code base docker window initially rolled user slower pace eventually offer functionality docker mac docker window currently ship window edition support hyperv making thing easy use functional take elaborate engineering work make docker mac window feel native deep integration host system term virtualization networking security filesystems integration leverage system virtualization expertise docker recently acquired unikernel system team well unikernelrelated technology developed past year example translator linux mac o x networking us mirageos tcpip implementation expect see kind work future across docker line product oslevel integration innovation open sourced docker community product made generally available later year usual software building shoulder giant would like thank apple microsoft assistance integrating platform docker michael steil xhyve docker product development team san francisco cambridge paris learn docker
391,Lobsters,virtualization,Virtualization,"Simplevisor | simple, Intel x64 Windows-specific hypervisor",http://ionescu007.github.io/SimpleVisor/,simplevisor simple intel windowsspecific hypervisor,introduction motivation xen blue pill virtdbg hyperdbg hyperplatform installation window reference http wwwalexionescucom http wwwwindowsinternalscom http githubcomupringvirtdbg http xenbitsxenorggitweb pxengit asummary http http http http githubcomtandasathyperplatform caveat license,introduction always curious build hypervisor intel documentation many hundred page gotten sample found online made thing confusing required week reading dozen thousand line code simplevisor might project counting exhaustive comment explain every single line code specific windowsrelated intelrelated idiosyncrasy simplevisor clock line c code line assembly code containing ability run every recent version window supporting dynamic loadunload runtime additionally simplevisor utilizes lightweight oslibrary windowsspecific functionality separating hypervisor piece windowsspecific piece leveraging portable design uefi version simplevisor also available note however robust support mp environment due issue uefi loading operating system eventually result crash o hit unimplemented code path due reconfiguration processor resource virtualizing entire boot operating system uefi beyond scope project simplevisor built visual studio update oldernewer compiler tested supported likely build project well important however keep various compiler linker setting see however simplevisor currently tested following platform successfully window haswell processor custom desktop window redstone sandy bridge processor samsung laptop window threshold skylake processor surface pro tablet window threshold skylape processor dell inspiron w sgx vmware workstation without ept vmware support epts uefi asus maximus vii extreme motherboard custom desktop time tested bochs reason simplevisor could run environment well however machine already running hypervisor hyperv xen simplevisor load keep mind version window expressly supported processor earlier nehalem microarchitecture window support latter two easy add exists certain fork motivation many hypervisor project either extremely complicated xen kvm virtualbox andor closedsource vmware hyperv well heavily focused toward linuxbased development system additionally hyperv expressly built purpose enabling execution virtual machine virtualization live running system order perform introspection securityrelated task project stand fold however original blue pill johanna project virtdbg hyperdbg unfortunately become quite old function processor nt support newer operating system window closest project actually delivers windowscentric modern supported hypervisor hyperplatform strongly recommend use starting place broadly usable researchtype hypervisor development however attempting create generic platform broadly robust hyperplatform also suffers bit bloat making harder understand truly basic need hypervisor initialize one express goal project stated minimize code way possible without causing negative sideeffects focusing baremetal need includes minimizing use assembly code nt lack lgdt intrinsic workaround behavior window api first instruction hypervisor entry point would require assembly stand project total instruction spread throughout function massive departure hypervisor project often multiple hundred line assembly code variety osspecific trick compiler shortcut used achieve result reducing check error unlikely happen given properly configured trusted set input data instruction vmxvmwrite vmxvmread never fail example removing support complicates matter cause special handling around field expressly reducing possible vmexits intel architecturally defined minimum cpuid invd vmx instruction xsetbv purposefully done keep hypervisor small possible well initialization code support vmcall many hypervisors use vmcall way exit hypervisor requires assembly programming intrinsic additional exit handling simplevisor us cpuid trap instead relying littleknown o function simplify development hypervisor generic dpcs hibernation context window pi mp protocol uefi supporting eptvpid simple fashion demonstrate solid base simplest possible implementation feature portability isolation osspecific routine another implied goal support latest hardware feature even bochs nt always verylatest intel vmx instruction andor definition often found header file vmcsh vmxh various project various level definition example xen master unreleased vm exit reason certain released one bochs albeit nt unreleased one one example usage ept entry example vmware virtualize correctly finally simplevisor meant educational tool exhaustive comment explaining logic behind line code specific window intel vmx tip trick allow achieve desired outcome various bug poorly documented behavior called explicitly installation window window requires driver signed must testsign simplevisor binary visual studio project file setup using driver signing option enabling test sign certificate ui also generate secondly must enable test signing mode machine first boot uefi turn secure boot otherwise test signing mode enabled alternatively posse valid kmcs certificate may production sign driver avoid requirement setup test signing mode use following command bcdedit set testsigning reboot setup required service control manager entry simplevisor registry following command sc create simplevisor type kernel binpath pathtosimplevisorsys launch simplevisor net start simplevisor stop net stop simplevisor must administrative right usage command reference would ike know research work invite check blog http wwwalexionescucom well training consulting company winsider seminar solution inc http wwwwindowsinternalscom http githubcomupringvirtdbg http xenbitsxenorggitweb pxengit asummary http http http http githubcomtandasathyperplatform caveat simplevisor designed minimize code size complexity come cost robustness example even though many vmx operation performed simplevisor never fail always unknown reason memory corruption cpu erratum invalid host o state potential bug cause certain operation fail truly robust commercialgrade software possibility must taken account error handling exception handling check must added support additionally vast array bioses different cpu chipset iteration specific incompatibility workarounds must checked simplevisor error checking validation exception handling robust software designed production use rather reference code base license copyright alex ionescu right reserved redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution software provided alex ionescu express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall alex ionescu contributor liable direct indirect incidental special exemplary consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage view conclusion contained software documentation author interpreted representing official policy either expressed implied alex ionescu
392,Lobsters,virtualization,Virtualization,OpenBSD vmm/vmd Update,http://bhyvecon.org/bhyvecon2016-Mike.pdf,openbsd vmmvmd update,,äüöß obj stream endstream endobj obj endobj obj stream jfif c c x h e k j yhh 쐥 c l bi h fȹ l դ l e p p e ii ji pnʬ l 𭿓u kk e ңf e q쁖 et v j u b vqc p vx ӻ x v qz 쭑 gr p c
393,Lobsters,virtualization,Virtualization,Microservices Weekly - Issue #17,http://microservicesweekly.com/issue/17,microservices weekly issue,article video project,issue mar article aws lambda microservices architecture template architecture designed used nodejs project changed language nice set webinars api academy bootcamp leap legacy system agile microservices architecture always simple start following best practice pattern outlined article simplify implementation prerequisite blog post author clarifies term used understood show http rest internal service communication perfectly fine choosing nothing whether service integrate synchronously asynchronously latter question really concerned post ken oscar gronnbeck look concept synthetic transaction get started implementation synthetic transaction tester integration middleware maker released new framework java developer building microservices microservices framework java lightweight open source framework creating javabased microservices support containerbased deployment microxchg conference held berlin germany richard rodger presented surviving microservices practical guide developer wanting keep microservices architecture healthy performant michael ploed talk distributed data management challenge arise microservices architecture solved using eventdriven architecture ask olaf molenveld ceo cofounder amsterdambased magneticio container microservices say perfect match although complication exist awesome microservices platform vamp aim iron ross mason mulesoft founder look apis driving microservices quickly replacing old operating model qcon developer conference underway london william hill r engineering lead gavin stevenson told attendee celebrate failure stevenson underlying point examining application fails stress illuminating simply observing working container summit held new world stage new york city infoqs rag srinivas caught bryan cantrill cto joyent day summit still recovering hoarseness consuming kafka throughput major key success kafka stream java library building distributed stream processing apps using apache kafka part upcoming kafka release made preview version available make easy try video tale battlefield microservices spotify kevingoldsmith vice president engineering spotify project introducing pencil microframework inspired flask rust
394,Lobsters,virtualization,Virtualization,Microservices Weekly - Issue #16,http://microservicesweekly.com/issue/16,microservices weekly issue,article video book project,issue mar article thanks netflix spring cloud project deploy zuul server heroku minute service requires little code used microservices written language java thing everyone talking microservices framework development practice mature yet amazing company like netflix uswitch using stuff number year knowledge pattern slowly seeped mainstream list question team asking microservices security webinar introduces sample application combine multiple microservices graph processing platform rank community user twitter recent microservices practitioner summit facebook engineer ben christensen talked increasingly common antipattern coupling distributed system binary dependency article describes scenario creating ecommerce store us microservices pattern guide exists two part first part author focus highlevel concept aws put together aws architecture part focus devops maintaining infrastructure designing microservices apis need think like designer focusing user nic bender claimed presentation recent microservices practitioner summit design api first build service outsidein approach lightbend process developing new java framework called lagom offering hope holistic approach microservices regardless project scale learn digital enterprise intersection microservices enterprise integration docker example look happening behind scene srinath perera tutorial deb acm international conference distributed eventbased system describing set realtime analytics pattern microservices might latest trending term across various ecosystem process new article describes mechanism help control deployment microservicebased system give visibility code actually deployed guy senecajs assembled neat list book learning microservices microxchg conference held berlin germany rick buskens presented microservice deployment pipeline spinnaker discussed collaboration netflix google netflixconceived spinnaker continuous delivery platform video talk look complete microservice system show running demonstrate adding live monitoring set additional microservices throughout discus lesson learned make sense build little ball mud talk mostly thing tyro payment microservices last year also almost year practice distributed computing book microservices net show build deploy secure operationsfriendly microservices using nancy project beyondj next generation reactive modular multitenant java container
395,Lobsters,virtualization,Virtualization,Bryan Cantrill on Jails and Solaris Zones,http://paperswelove.org/2016/video/bryan-cantrill-jails-and-solaris-zones/,bryan cantrill jail solaris zone,bryan cantrill jail solaris zone new york february bryan cantrill jail solaris zone description jail confining omnipotent root solaris zone operating system support consolidating commercial workload bio bcantrill new york chapter twosigma enigma,bryan cantrill jail solaris zone video new york february bryan cantrill jail solaris zone description jail confining omnipotent root traditional unix security model simple inexpressive adding finegrained access control improves expressiveness often dramatically increase cost system management implementation complexity environment complex management model delegation management function party varying degree trust base unix model natural extension inappropriate best multiple mutually untrusting party introduced inappropriate rapidly transition nightmarish especially regard data integrity privacy protection freebsd jail facility provides ability partition operating system environment maintaining simplicity unix root model jail user privilege find scope request limited jail allowing system administrator delegate management capability virtual machine environment creating virtual machine manner many potential us popular thus far providing virtual machine service internet service provider environment solaris zone operating system support consolidating commercial workload server consolidation allows multiple workload run system become increasingly important way improve utilization computing resource reduce cost consolidation common mainframe environment technology support running multiple workload even multiple operating system hardware evolving since late technology becoming important differentiator unix linux server market well low end virtual web hosting high end traditional data center server consolidation paper introduces solaris zone zone fully realized solution server consolidation project commercial unix operating system creating virtualized application execution environment within single instance operating system facility strike unique balance competing requirement one hand system multiple workload need run workload isolation ensure application neither observe data application affect operation must also prevent application overconsuming system resource hand system whole flexible manageable observable order reduce administrative cost increase efficiency focusing support multiple application environment rather multiple operating system instance zone meet isolation requirement without sacrificing manageability bio bryan cantrill bcantrill cto joyent oversees worldwide development smartos smartdatacenter platform nodejs platform prior joining joyent bryan served distinguished engineer sun microsystems spent decade working system software gut kernel clientcode browser particular codesigned implemented dtrace facility dynamic instrumentation production system wall street journal top technology innovation award usenix software tool user group award bryan also cofounded fishworks group sun designed implemented dtracebased analytics facility sun storage series appliance bryan received scb magna cum laude honor computer science brown university new york chapter would like thank twosigma enigma helping make meetup possible
396,Lobsters,virtualization,Virtualization,"IncludeOS: A minimal, resource efficient unikernel for cloud systems",http://blog.acolyer.org/2016/02/22/includeos/,includeos minimal resource efficient unikernel cloud system,includeos minimal resource efficient unikernel cloud system mirageos mergeable persistent data structure jitsu justin time summoning unikernels,includeos minimal resource efficient unikernel cloud system bratterud et al lot excitement around unikernels last year especially recent acquisition unikernel system team docker mirageos mergeable persistent data structure jitsu justin time summoning unikernels whereas mirageos built around ocaml stack today paper choice get look includeos built c stack true unikernel style include part operating system need directly linked application make smile every time includeos literally achieved via include o paper present includeos singletasking operating system designed virtualizedenvironments includeos provides novel way developer build cbased code directlyinto virtual machine fully virtualized hello world service includeos course includes necessary component o us memory ubuntu o image default guest o openstack around comparison even running regular java hello world program ignoring o java process take spinning lot instance cluster reduction memory overhead result significant saving memory one expensive resource minimal includeos vm also boot dns service built includeos result disk image comparison mirageos dns server image came finally includeos designed efficient runtime idle us cpu designer includeos guided zero overhead principle includeos aim true minimality sense nothing included default service explicitly need corresponds zero overhead principle eg c use pay many project related includeos different system mirage osv aim provide platform highlevel languageruntimes impose significant resource penalty includeos aim represent absolute minimality including needed o image job delegated gcc tool chain mechanism used extracting needed operating system one provided default modern linkers part o compiled objectfile udpo pcideviceo etc combined using ar form static library osa program link library necessary automatically extracted linker end final binary facilitate build process custom gcctoolchain created c standard library includeos us redhat standard library implementation due small size reliance handful system call ability compiled statically linked library c standard library larger currently includeos us electronic art eastl exceptionfree implementation future work include port fullfeatured implementation includeos currently one device driver namely virtionet device driver key benefit virtio hypervisor need emulate certain physical device instead insert data directly queue memory shared guest virtio recently emerged oasis standard none hypervisors used development supported new feature therefore driver currently implement virtio legacy functionality development done future support virtio mind network stack complex challenge since existing network stack often entangled operating system designed zero overhead principle mind includeos project working completely modularized networking stack current implementation sufficiently advanced support eg dns server implementation previously mentioned work underway complete full tcp stack also running standalone linux user space currently irq handler includeos simply atomically update counter defer handling main eventloop whenever time eliminates need context switch also eliminating concurrencyrelated issue race condition cpu kept busy io asynchronous blocking occurs encourages callbackbased programming model common modern javascript application one number factor contribute includeos excellent runtime performance system call overhead o service one binary eliminating need memory protection barrier unnecessary overhead timer interrupt io waiting since includeos us asynchronous eventbased io model overhead emulating programmable interrupt timer ie periodic timer interrupt preemptive scheduling number protected instruction kept low reduce vm exit includeos current form fit every task particular deferring irq cause vm seem unresponsive ie answer ping workload requiring lot cpu activity per request case dns service requiring several second cpuprocessing request icmppackets would simply queued virtioqueue full point would dropped giving impression unresponsive service really interesting future development includeos design nodejs style framework supporting high performance webapplications nearfuture use case includeos running highperformance webapplications written asynchronous programming style similar nodejs maximally efficient minimaloverhead c language framework service host kernel dependency running directly top virtual hardware iaa cloud
397,Lobsters,virtualization,Virtualization,Internet Archive Does Windows: Hundreds of Windows 3.1 Programs Join the Collection,https://blog.archive.org/2016/02/11/internet-archive-does-windows-hundreds-of-windows-3-1-programs-join-the-collection/,internet archive window hundred window program join collection,do collection upgrade window game utility business software bridge back lost trove software window showcase eric phelps emdosbox dosbox,microsoft window people little late released version graphic revolution already happening elsewhere computer operating system microsoft determined catch matter cost took version new multitasking navigation program quite operating system appeared immediately got mark step right direction quite leap later version including version finished late set graphicsoriented program could run do allow use mousekeyboard combination still new time chance microsoft one dominant player graphical interface also got lawsuit apple ultimately resulted manyyears court case settlement possibly saved apple meanwhile window shell started become like operating system introduction window brought stability flexibility easeofprogramming wide audience cemented stilldominant desktop paradigm use today internet archive started year arrival do collection thousand game application utility do became playable browser single click result many hundred thousand visitor program many hour research entertainment year time upgrade window added program run browser window environment includes many game lot utility business software would best called apps program something simple like provide calculator looping animation could done individual small company great success indeed colorful unique look window window program used like depending graphical whim programmer could look futuristic incredibly basic many might remember working environment view screenshots hosted program bring back longforgotten memory clicking screenshots make come alive browser focused developer could produce something truly unique beautiful within window environment observe roleplaying game merlin whole simple library generating clickable box rendering font intent get job done meant lot program would look like instead complicated arty program calculate amortization amount window continues use corner world easilywritten buttonsandboxes program drive company restaurant individual business dogged determination extremely low hardware requirement recent news story revealed least one french airport depended one many people though moved microsoft later operating system like window vista microsoft stopped officially supporting window year ago window still hold special place computer history pleased give bridge back lost trove software need place start without overwhelmed come visit window showcase curated sample set particularly interesting software program year ago often case project like volunteer contributed significant time help bring new library software online justin kerk critical scripting engineering work require megabyte run program well ensure maximum number window application work browserbased emulator justin thanks eric phelps wrote setiniexe configuration program loader programming ensure could save lot space james baicoianu critical metadata technical support always emulation window dosbased program come via emdosbox project boris gjenero port dosbox javascript optimization work worldclass course huge thanks many contributing party original dosbox project
398,Lobsters,virtualization,Virtualization,"Linux kernel bug delivers corrupt TCP/IP data to Mesos, Kubernetes, Docker containers",https://medium.com/vijay-pandurangan/linux-kernel-bug-delivers-corrupt-tcp-ip-data-to-mesos-kubernetes-docker-containers-4986f88f7a19,linux kernel bug delivers corrupt tcpip data mesos kubernetes docker container,linux kernel bug delivers corrupt tcpip data mesos kubernetes docker container hacker news kubernetes google container engine mesos patch note bug pager duty discovered back interesting started brian martin evan jones epcjones tcp checksum literally sum plot thickens simple client open socket sends simple long message second linux container virtual way making thing right kernel patch conclusion,linux kernel bug delivers corrupt tcpip data mesos kubernetes docker container edit article hacker news feel free discus linux kernel bug cause container use veth device network routing docker kubernetes google container engine mesos check tcp checksum result application incorrectly receiving corrupt data number situation bad networking hardware bug date back least three year present kernel far back tested patch reviewed accepted kernel currently backported stable release back different distribution suse canonical use container setup recommend apply patch deploy kernel patch becomes available note docker default nat networking affected practice google container engine likely protected hardware error virtualized networkedit jake bower point bug similar bug pager duty discovered back interesting startedone weekend november group twitter engineer responsible wide variety service got paged affected application showed impossible error like weird character appearing string missing required field nexus error apparent due distributed nature twitter architecture exacerbating problem distributed system data corrupted cause error long original corruption stored cache written disk log etc day working around clock troubleshoot application layer team able isolate problem certain rack machine team investigated noticed incoming tcp checksum error increased significantly first impact began result seemed absolve application blame application cause network congestion packet corruption edit talking team might obscure many people worked ton engineer across company worked diagnose strange failure hard list everyone major contributor include brian martin david robinson ken kawamoto mahak patidar manuel cabalquinto sandy strong zach kiehl campbell ramin khatibi yao yue berk demir david barr gopal rajpurohit joseph smith rohith menon alex lambert ian downes cong wang rack removed application failure vanished course networklayer corruption happen many reason switch hardware fail bizarre way wire faulty power flaky etc checksum tcp ip designed protect failure indeed statistic collected machine showed error detected diverse set application start fail isolating specific switch attempt made reproduce error mostly ton work sre brian martin relatively easy cause corrupt data received sending lot data rack switch many packet corrupted however corruption always caught tcp checksum kernel reported tcpincsumerrors netstat never delivered application linux udp packet sent checksum disabled using undocumented sonocheck option case could see data corrupted evan jones epcjones theory corrupted data happened valid tcp checksum two bit flipped opposite direction eg word position effect tcp checksum cancel one another tcp checksum literally sum corrupted data always fixed bit position message mod byte fact stuck bit eliminated possibility alternatively since checksum negated stored bit flip checksum conjunction bit flip data could cancel however bit position observed corrupted could touch tcp checksum seemed impossiblesoon team realized test normal linux system service twitter run mesos us linux container isolate different application particular twitter configuration creates virtual ethernet veth device route application packet device sure enough running test application inside mesos container immediately showed corrupt data delivered tcp connection despite fact tcp checksum invalid detected invalid tcpincsumerrors increasing someone suggested toggling checksum offloading setting virtual ethernet device fixed problem causing corrupted data correctly droppedat point valid workaround twitter mesos team quickly pushed fix open source mesos project deployed setting twitter production containersthe plot thickenswhen evan discussed bug decided since tcpip contract broken o could result mesos misconfiguration must result previously undetected bug kernel networking stackto continue investigation bug created simplest test harness possible simple client open socket sends simple long message seconda simple server actually used nc listen mode listens socket print output screen arrivesa networking tool tc allows user randomly corrupt packet sent wireonce client server connected used networking tool corrupt outbound packet secondswe ran client one desktop machine server another connected machine via ethernet switch ran test harness absence container behaved exactly expected corrupt message displayed fact got message second packet corrupted soon client stopped corrupting packet message delivered delivered confirmed tcp linux without container working expected bad tcp packet dropped continually retransmitted could received without errorthe way work corrupt data delivered tcp retransmits datalinux containersat point helpful diagnosing issue take step back quickly describe networking stack work linux containerized environment container developed allow userspace application coexist machine thereby delivering many benefit virtualized environment reduce eliminate potential interference application allow multiple application run different environment different library reducing overhead virtualization ideally anything subject contention ought isolated example include disk request queue cache networkingin linux veth device used isolate container container running machine linux networking stack quite complicated veth device essentially present interface look exactly like regular ethernet device user perspectivein order construct container virtual ethernet device one must create container create veth bind one end veth container assign ip address veth set routing usually using linux traffic control packet get containerwhy virtual way downwe recreated test harness described except server run within container however ran harness saw something completely different corrupt data dropped delivered application reproduced error simple test harness two machine desk two simple program corrupted data delivered application see window left able reproduce test harness cloud computing platform well kubernetes default configuration trigger behavior eg used google container engine docker default configuration nat safe docker configuration notmaking thing rightafter reading kernel networking code became apparent bug veth kernel module kernel packet arrive real hardware device ipsummed set checksumunnecessary hardware verified checksum checksumnone packet bad unable verify itcode vethc replaced checksumnone checksumunnecessary resulted checksum verified rejected software silently ignored removing code packet transmitted one stack another unmodified tcpdump show invalid checksum side expected delivered dropped correctly application test every possible network configuration tried common one bridging container using nat host container routing hardware device container effectively deployed production twitter disabling rx checksum offloading veth device certain code written way believe attempt optimization often time veth device used connect container physical machine logically packet transmitted container virtual machine physical host need checksum calculated verified possible source corruption host ram since packet never go wire unfortunately optimization even work intended locally generated packet ipsummed set checksumpartial checksumnonethis code date back first commit driver commit net virtual ethernet device driver commit netveth fix packet checksumming december fixed packet get created locally sent hardware device changing checksumpartial however issue still occurs packet coming hardware devicesthe kernel patch included diff git adriversnetvethc bdriversnetvethcindex adriversnetvethc bdriversnetvethc static netdevtxt vethxmit struct skbuff skb struct netdevice dev kfreeskb skb goto drop change ipsummed checksumpartial cause bad checksum forwarded packet skb ipsummed checksumnone rcv feature netiffrxcsum skb ipsummed checksumunnecessary likely devforwardskb rcv skb netrxsuccess struct pcpuvstats stats thiscpuptr dev vstats conclusionsi really impressed linux netdev group kernel maintainer general code review quite prompt patch merged within week backported older stable queue various kernel distribution canonical suse within month preponderance containerized environment actually really surprising u bug existed year without detected wonder many application crash unexpected behaviour could attributed bug please reach believe affected
399,Lobsters,virtualization,Virtualization,How do Win 3.1 applications work in Wine?,http://www.wine-staging.com/news/2016-02-10-blog-wine-16bit.html,win application work wine,set patch download building wine github page building wine winestaging github repository,wine staging wine staging testing area winehqorg contains bug fix feature integrated development branch yet idea wine staging provide experimental feature faster end user give developer possibility discus improve patch integrated main branch wine staging maintained set patch applied top corresponding wine development version package maintainer decide want include full patchset want cherrypick patch specific bug installation precompiled staging package major distribution available download page instruction installing staging given distribution provides building source since winestaging maintained set patch rather forked repository process building slightly different first need vanilla wine source tree required dependency instruction see building wine note staging add optional dependency necessary certain additional feature also need staging source cloned downloaded github page obtained source need apply staging patch choice top wine source tree using provided stagingpatchinstallpy script introduced winestaging earlier version use patchespatchinstallsh see option help detailed instruction apply patch manually take note also need run autoreconf f toolsmakerequests generated change included staging patch warned individual version staging repository successfully apply upstream wine commit last rebased applied patch compilation proceeds usual upstream wine refer building wine detailed instruction reporting debugging bug staging staging maintainer really need know whether bug introduced staging patch nothing staging patch bug introduced staging patch suggests something wrong patch question patch need fixed sent upstream therefore reporting bug staging always test latest staging upstream release bug also present form upstream wine bug reported wine product winestaging product save everyone lot time effort bug present winestaging upstream wine next helpful thing bisect staging wine order first want acquire clean wine tree well latest set staging patch next apply patch separate commit using command pathtostagingtreestagingpatchinstallpy backendgitam forceautoconf pathtowinesourcedir need use forceautoconf argument ensure patch affecting configureac protocoldef properly applied alternatively omit argument long remember run compiling step bisect bisect proceed normal find admittedly rather outdated instruction regression staging version suppose failure introduced later staging version occur earlier one could mean one several thing vastly different significance could bug introduced new staging patch introduced losing one could error rebasing obscure way change upstream break staging patch alternatively could problem introduced exposed patch committed upstream regression strictly upstream wine really need know one thing happened therefore ask anything else test corresponding upstream wine release good version bad version old new upstream wine release affected bug bug staging reported winestaging product case helpful perform regression test staging wine detailed old upstream wine release affected bug new one pretty safely assume bug upstream wine case bug reported wine product helpful thing perform regression test upstream wine release application work using upstream wine point triggering bug fails early failure fixed staging principle applies muddied additional presence staging patch first need know exactly staging patch fix earlier bug might documented bug attached application appdb may mentioned bug latter case please submit bug link appdb also may known case need perform reverse bisect winestaging upstream wine last known working bisect meaning bad good reversed may perform multiple bisects application depends multiple staging patch identified exactly patch necessary failure reproduced next step try applying patch clean upstream wine earliest broken version failure present implies something broken staging figuring difficult probably dependent circumstance guide wo nt prescribe course action present moment failure present implies something broken upstream wine case next step perform bisect upstream wine version every step also need apply staging patch necessary application run may seem like lot bisects testing really easiest way problem fixed may easiest user simply pull debug log given flag vast majority case order magnitude easier fix bug known exactly patch introduces bug making thing easier developer far best route getting bug fixed quickly time recognize bisects timeconsuming anyone perform understand ca nt spare time perform long understand turn bug mean guaranteed fixed quickly however always expect tried upstream wine first maintaining staging time writing none staging maintainer plan go anywhere nevertheless future handoff proceed smoothly attempted document general process maintaining staging least part particularly need instruction rebasing currently rebase staging onto upstream wine every daily commit round could le often tendency make change pile become much difficult deal point rebasing change patch apply directly top upstream script make relatively simple keep separate git worktree entirely clean untracked file run git clean df wipe artifact rebasing starting uptodate source tree wine yet rebased staging tree winestaging process rebasing go like examine day commit list remove staging patch upstreamed obviated make sure patch upstreamed without change silently ignored gitam winestaging run stagingnewupdatepy applying patch succeeds go step wine run winestagingstagingpatchinstallpy r nameofpatchset fail inside gitam run git showcurrentpatch patch resolve conflict manually fuzz detection nt enough run git add u git continue may need manually git add file added patch run git formatpatch nosignoff replace previous patch run git reset hard origin git clean df go back step build wine run winecfg least commit rebase putting sha upstream wine commit message quick link link important topic see also winestaging github repository
400,Lobsters,virtualization,Virtualization,"A Tribute to VMware Workstation, Fusion, and Hosted UI",http://blog.chipx86.com/2016/01/26/a-tribute-to-vmware-workstation-fusion-and-hosted-ui/,tribute vmware workstation fusion hosted ui,updated february take trip memory lane left vmware review board let tell team built amazing product workstation fusion others player vmrc server wsx appcatalyst time next adventure like,updated february learn team come take trip memory lane u yesterday morning hosted ui team responsible vmware workstation fusion product woke find job product despite awardwinning profitable probably long world directly affected way least already left vmware work review board fulltime however many closest friend product spent year life may seen last feature could talk day think got losing amazing team fantastic product could point finger lash blame could talk furious make instead going talk team built mean product let tell team began working hosted ui august brighteyed year old freshly dropped college back small team full amazingly bright passionate people working day night build product believed culture time within vmware fun energizing people wanted proud work feature brainstormed game foosball ddr design discussed free lunch beer bash evening order dinner watch simpson whatever company culture changed year becoming corporate stiff hosted ui work day occasional interruption youtube video laugh night went poker night movie night video game night dinner together sometimes several time week many people came went year team changed though software company surprising number remained end even left kept touch joining poker night dinner coming dunkings getting married going pond birthday celebration reunion formed alumnus list kept touch hung irc outside work deadline downtime stress celebration team worked played hard dedicated passionate allow damn good left team two year ago really felt way still saw almost every week team building even company stay team hosted ui may longer exist vmware really vmware loss lost one dedicated team could ever hope kind team hire built amazing product workstation vmware workstation first vmware product back simply known vmware time dotcoms dominated super bowl amazon book vmware workstation letting pioneer linux world virtualize window desktop could run microsoft office instead staroffice product evolved year major release feature count running every flavor linux window without falling prey bloat longrunning product focused making powerful product also usable product workstation made easy run complex development testing scenario creating working several virtual environment across number host computer integrated virtual desktop host desktop let take snapshot different moment lifetime vm jump helped catch defect software remote debugging cpumemory recordreplay capability helped test complex network setup virtual lan device worked powerful frontend vmware server esxi vsphere product end also helped simply run window program linux linux program window whatever wanted internally vmware workstation also seen indispensable product helping team test feature device would eventually become selling point highend vsphere product release workstation easeofinstall easeofuse people could get set minute get right work loved product baby took input marketing management sale customer end given lot creative liberty feature design also given time address technical debt helping get codebase shape future challenge know many award received think lot know many user loved product poured soul meant lot kept u motivated let say challenge getting part company really care product workstation made lot money hundred million company would preferred believe ultimately led yesterday sad still proud built fusion workstation power user product built linux window sister product fusion mac released focused consumer usage helping people run office window apps mac time apple moved intel processor touting ability dualboot window macos x using feature called bootcamp fusion offered better way letting run window macos x time popular amongst student needed run window software class shiny new macbooks popular amongst developer needed run test window linux environment go fusion different product way workstation also closely related focus many power user feature workstation offered take many feature reimagine casual user also shared much core code workstation used meaning feature could easily ported across bug fixed fusion reimagining workstation could built different time different audience like workstation also built group loyal dedicated brilliant people fusion segment hosted ui never worked directly fusion get see feature built workstation make way watched user got try first time mac product devoted time one loved one still use today others small team built quite lot year along workstation fusion also built player slimmeddown product simply running interacting vms without ui workstation vmrc originally browser plugin sdk embedding virtual machine browser application transitioned one team behind esx couple year ago reworked native vm console app launched browser server free product built workstation offered remote vm hosting management wsx webbased service running vms natively browser anywhere appcatalyst developerfocused apidriven development testing service work docker pretty sure highlight along workstation fusion built team typically larger people given point time good time next adventure vmware lost lot amazing people feeling time come realize done shame team well think everyone fine best company silicon valley full exvmware member many former hosted ui would probably welcome chance work teammate workstation fusion product may survive maintenance mode may disappear may continue new team hard say point happen say matter happens amazing run something every one u proud rest career proud team friendship strong bond built next adventure updated pm wow went viral right looking around unique viewer wrote tribute team amazed reaction provoked everyone loved product reached u show love thank mean much u keep coming want clear worked year inside knowledge happen product updated part post make little clear vmware claim continue exist really hope case like think built continue live hope vmware justice like like loading related
401,Lobsters,virtualization,Virtualization,Unikernel Systems Joins Docker,https://blog.docker.com/2016/01/unikernel/,unikernel system join docker,,
402,Lobsters,virtualization,Virtualization,A tutorial introduction to programming PDP-11 Macro-11 Assembly in RT-11 v5.3,http://decuser.blogspot.com/2016/01/a-tutorial-introduction-to-programming.html,tutorial introduction programming assembly,tutorial introduction programming assembly code related formatting issue resolved thanks patient prerequisite http http source note key mapping overview step start step create edit macro assembly language text file step save edited file file system compare file demo file step edit file closely match demo file step assemble file step fix assembler error step link object file step fix linker error step run program step debug program odt online debugging technique cheat sheet start debugger view machine code program execute program setting breakpoints view memory location ascii working breakpoints step fix logic error aka making permanent change step repeat step program work desired step celebrate successfully running program saving source code posterity copy paste terminal window method lpt device line printer method pc device paper tape punch method bonus section linker error,tutorial introduction programming assembly code related formatting issue resolved thanks patient prerequisite order work walkthrough necessary working installation see http tutorial setting working environment quick start version setup available http look toward bottom note minimalist rendering source tutorial derived directly introduction available adapted suit modern reader working simulated environment narrative follows introduction large extent synthesizes understanding material contained broader set documentation well particular following document relevant note key mapping tutorial described work using either ed ked editor ked preferred requires key mapped escape sequence esc op escape key followed upper case letter followed upper case letter p dec gold key another escape sequence esc ow escape followed upper case followed lower case w dec command key escape entered hand mapping function key make much easier manage remember overview tutorial consist number discrete step intended acquaint reader programming environment well complete development workflow using assembly language language choice step start create edit macro assembly language text file save edited file file system compare file demo file edit file closely match demo file assemble file fix assembler error link object file fix linker error run program debug program fix logic error repeat step program work desired celebrate successfully running program saving source code posterity step start followed step tutorial setting able change directory disk start simh typing bootini boot something similar following displayed type installation version complete executing working volume provided used automatic installation procedure digital recommends verify correct operation system software using verification procedure enter command ind verify note verify performed distri bution medium backed accomplished part automatic installation based system including professional completed automatic installation must perform manual backup using verify note also verify supported diskette dectape ii professional digital also recommends read file contains information formalized late included release note typed printed dot prompt command given type dirbrief see list file dirbrief swap sys cr sys ct sys dd sys dl sys dm sys dp sys d sys dt sys step create edit macro assembly language text file part tutorial depends elected set key mapping assigned keystroke gold command escape sequence described setup tutorial referenced willing type manually required able use ked editor default editor otherwise read section setup tutorial describing use ed editor modify following instruction accordingly tutorial revolve around assembly language program calculates print mathematical quantity referred mathematician e sum reciprocal factorial quote program author digit accuracy tutorial requires real math skill although program mathematical nature programming workflow provide needed context tutorial develops edit file type edit followed name file edit case edit summac ked respond file found prompt type press enter create file kedwfile found create n exact text summac file contains number intentional error typed exactly shown title summac version mcall ttyout exit print n digit e calculate e sum reciprocal factorial exp print messag print introductory text mov n char e print first mov digit accuracy mov address digit vector second asl multiply decimal mov sp save asl asl add sp point next digit dec end digit bne branch mov n go thru place dividing third mov place index mov init quotient register fourth inc bump quotient sub subtract loop nt bad bcc fourth numerator always n add fix remainder mov save remainder basis next digit add greatest integer carry give digit dec end digit vector bne third branch mov get digit output fifth sub fix digit bcc fifth really divide add make digit asc ii ttyon output digit clr clear next digit location dec digit print bne first branch yes exit done exp rept word init vector one endr messag ascii value e even endexp step save edited file file system finished editing file save exit editor accomplished pressing goldcommand typing exit followed py pressing enter mapped gold command say press prompt command appear top line edit window type exit press enter exit want quit without saving content press goldcommand type quit followed enter command prompt ked respond message kedwoutput file purged using mac function key accessed pressing fn key also pressing desired function key mapped gold command enter fnreturn numeric keypad probably necessary map additional key gold topleft key keypad command number enter enter key keypad compare file demo file come file named contains nearly identical version summac file order match demo file closely possible need compare file demo file command compare two file difference purpose demo supply difference argument informs difference utility require line agree match type summac compare demo file file summac dk dk summac title exampmac version provided mcall ttyout exit print title summac version mcall ttyout exit print bne second branch mov n go thru place dividing bne branch mov n go thru place dividing add make digit ascii ttyon output digit add make digit asc ii ttyon output digit end exp endexp srccomwfiles different difference demo file provided distribution typed version shown output difference command exampmac version provided summac version second ascii asc ii end exp endexp step edit file closely match demo file edit source match content demo file exception title line edits run command check significant difference remain summac dk dk summac title exampmac version provided mcall ttyout exit print title summac version mcall ttyout exit print srccomwfiles different title also edited difference found result would appear follows summac srccomino difference found step assemble file command assemble assembly language file macro use form shown ensure error marked including undefine symbol may externally defined specified mcall directive command also includes option create listing file cross reference macrodisable gbl sumlistcross macroeerrors detected dk sum dk sumcdk sumd gbl step fix assembler error output show error see error look listing file produced macro command type sumlst summac version macro page title summac version mcall ttyout exit print n digit e calculate e sum reciprocal factorial exp print messag print introductory text mov n char e print first mov digit accuracy u mov address digit vector second asl multiply decimal mov sp save asl asl add sp point next digit dec end digit bne second branch mov n go thru place dividing third mov place index mov init quotient register fourth inc bump quotient sub subtract loop nt bad bcc fourth numerator always n add fix remainder mov save remainder basis next digit ar add greatest integer carry give digit dec end digit vector bne third branch mov get digit output fifth sub fix digit bcc fifth really divide add make digit ascii u ttyon output digit clr clear next digit location dec digit print bne first branch yes exit done exp rept word init vector one endr messag ascii value e even summac version macro page end exp summac version macro page symbol table first messag second ttyon exp fourth n third fifth ab rw gbl ab ovr rw lcl rel con error detected assembler statistic work file read work file writes size work file word page size core pool word page operating system elapsed time dk sum dk sumcdk sumd gbl summac version macro page cross reference table cref ttyon exp fifth first fourth messag n second third summac version macro page cross reference table cref exit print ttyou summac version macro page cross reference table cref r u asked listing crossreference listing file generated includes listing program set cross reference table file sumlst file composed five section machine code listing page assembly error code line number relative memory address machine code source code comment symbol table list user defined symbol page location whether relocatable assembly statistic cross reference table user defined symbol page showing location symbol defined used cross reference table macro symbol page showing location symbol defined used cross reference table assembly error page showing error code location error type cross reference page listing alphabetized list error type useful summary easier refer back source code listing page see error context error code error appears left hand margin six offending line exp print messag print introductory text u mov address digit vector ar add greatest integer carry u ttyon output digit exp rept end exp see table pp utility appendix language reference manual complete listing error code code occurring general assembly error doubly defined symbol referenced reference made symbol defined multiple definition label label encountered equivalent first six character label previously encountered r registertype error invalid use reference register made attempt made redefine standard register symbol without first issuing dsabl reg directive u undefined symbol assembler assigns undefined symbol constant zero value first error line multiply defined label determine else may defined one label multiply defined look cross reference page line listed multiply defined apparent two definition overlap line line exp print messag print introductory text exp rept sure enough exp defined twice second error line undefined symbol u mov address digit vector undefined symbol comment suggests address digit vector third error line general assembly error registertype error ar add greatest integer carry appears syntax error related use register two way know first source destination zero second register incorrectly referenced assembly add two operand instruction appears single operand fourth error line undefined symbol u ttyon output digit undefined symbol ttyon comment suggests macro output digit look table listing file see macro named ttyou referenced ttyou looking mcall directive line apparent ttyon typo correct macro ttyout fifth error line related first error discussed sixth final error line doubly defined symbol referenced error related first fifth error whereas line defined label exp line reference exp end exp summary error appear require three edits exp multiply defined first definition appears correct definition mark start program correct argument end directive line second definition line need changed exp recall second error concern undefined symbol address digit vector looking line appears vector digit therefore make sense change second definition line becomes rept one edit fix four error line first second fifth sixth list next edit concern register syntax error correct syntax requires comma separate source destination operand add last edit concern macro typo ttyon ttyout note without disable gbl typo would go unnoticed link attempted assembler would assume undefined symbol defined outside current file see note bottom text see would happen make three correction retry assembler macrodisable gbl sumlistcrossreference step link object file since error reported compilation time link file linking file convert obj file created assembler executable file executable sav file linker generates contains information memory load file link command use includes argument generate map file show memory location program program run link file type link summap link summap step fix linker error error fixed unless made mistake typing comparing fixing assembly language presented specify disable gbl argument macro command receive error go back compare result proceed longer error step run program run resulting sav file r sum value e result look funky slash multiple decimal point output appear correct problem point logic bug order track require service debugger analysis source code value step debug program updated listing based edits made type sumlst summac version macro page title summac version mcall ttyout exit print n digit e calculate e sum reciprocal factorial exp print messag print introductory text mov n char e print first mov digit accuracy mov address digit vector second asl multiply decimal mov sp save asl asl add sp point next digit dec end digit bne second branch mov n go thru place dividing third mov place index mov init quotient register fourth inc bump quotient sub subtract loop nt bad bcc fourth numerator always n add fix remainder mov save remainder basis next digit add greatest integer carry give digit dec end digit vector bne third branch mov get digit output fifth sub fix digit bcc fifth really divide add make digit ascii ttyout output digit clr clear next digit location dec digit print bne first branch yes exit done rept word init vector one endr messag ascii value e even summac version macro page end exp summac version macro page symbol table fifth fourth n third exp first messag second ab rw gbl ab ovr rw lcl rel con error detected assembler statistic work file read work file writes size work file word page size core pool word page operating system elapsed time dk sum dk sumcdk sumd gbl summac version macro page cross reference table cref exp fifth first fourth messag n second third summac version macro page cross reference table cref exit print ttyou jumping debugger cheat sheet odt online debugging technique cheat sheet ctrlj linefeed close currently open location open next sequential location examination possible modification ret return close currently open location addr address followed slash open location indicated addr examination possible modification addr g address semicolon g begin program execution indicated address addr p semicolon p continue program execution previous breakpoint addr nb address semicolon number b set one eight available breakpoints n indicated address addr nb semicolon number b cancel indicated breakpoint n b semicolon b cancel breakpoints addr nr address semicolon number r set one eight available relocation register n relocation constant value indicated addr n dollar sign number open one eight general register n examination possible modification sign use content currently open location address close currently open location possible convert value ascii code print corresponding character terminal n semicolon number enables single instruction mode n digit serf distinguish form form disables single step mode breakpoints disabled n p proceeds program run next n instruction reentering odt use debugger necessary link obj file produced assembler odt online debugging technique debugger short link command debug argument accomplishes link summapdebug since assembly produce relocatable code need look map running program debugger map located file summap type summap link load map page sum sav title odt ident section addr size global value global value global value ab word rw gbl ab ovr odt word rw lcl rel con odt word rw lcl rel con oodt gval transfer address high limit word map show size program odt also show program load memory address debugger load memory location program run odt start design link debug program run odt bypassed get sum start otherwise run odt run program run sum start debugger noted previously odt linked program start automatically program simply run run sum odt asterisk odt prompt waiting command exit type ctrlc c terminal print c return dot prompt restart program run sum odt view machine code program file summap show program relocated address sumlst contains machine code instruction program beginning relative address instruction listing exp print messag print introductory text mov n char e print first mov digit accuracy mov address digit vector second asl multiply decimal odt possible view location memory view content memory type memory location followed forward slash odt open memory location display current value immediately forward slash followed space cursor blink waiting command possible respond several different way prompt carriage return close memory location location part program limited interest point program begin offset first instruction macro disassembly nt shown default listing first line program macro loaded memory location asterisk prompt type odt responds content location machine code appears listing corresponds assembly two operand mov opcode odt simply print content memory wait input continue listing consecutive memory location type ctrlj linefeed character bit match exactly listing mov n char e print first mov digit accuracy mov address digit vector second asl multiply decimal location within program viewed manner take line listing dec digit print view location add starting offset absolute address instruction listed odt repsonds content initialize relocation register adding start program offset time memory location desired tedious odt allows user set eight different offset done using addr nr command set first relocation register address use relocation register prefix address index register followed comma follows succinctly odt respond using ctrlj view sequential address produce similar result execute program command execute program addr g specified using absolute addressing g value e run program beginning end exit odt return odt rerun program whenever control returned dot prompt debugging simply rerun program reenter odt remember set relocation register appropriately run sum alternatively program executed using relocation register based addressing relocation register set g value e setting breakpoints order get cover sum program find logic error necessary stop program execution observe execution environment breakpoints mechanism stopping program execution set using addr nb command example set breakpoint first nonmacro program line remember set relocation register tell odt set breakpoint location execution stop program counter contains value address first nonmacro line begin executing program use addr g command g odt run program hit breakpoint display address offset current instruction character displayed address part messag value e output printed lower priority odt interrupted interspersed odt output result confirm breakpoint value program counter simply display value program counter pc register pdp odt display value register hit return close pc memory location return asterisk prompt breakpoint fairly uninteresting program nt done anything printed message looking source code address look like good place put breakpoint point contain number char e print accuracy contain address order continue executing program n p command given n optional leaving similar g command p execution continues end program breakpoint hit case breakpoint hit print message displayed followed pc contains odt responds register contains octal decimal specified listing n digit e calculate see register contains type dollar sign forward slash odt responds value contained register expected register contain octal decimal also specified listing first mov digit accuracy point onward memory display command shown line output odt conserve space accurately reflect displayed onscreen see register type register contains location memory resides source result viewing content register mov address digit vector view content memory location currently displayed pressing key forward slash type sign display content memory location vector word refers value exactly expected given source line rept word init vector one endr initialize octal decimal word beginning location pressing ctrlj several time reveal indeed memory initialized adding address result address next word memory following vector digit octal address messag messag ascii value e see memory location begin looking word prior use ctrlj see content would seem indeed memory starting initialized memory starting messag view memory location ascii value displayed memory location onward octal digit word boundary pdp store character ascii data per word memory octal number converted binary converting octal digit three binary bit representing quantity follows important note word boundary byte boundary thing word boundary located bit word consists two byte low byte high byte low byte boundary located bit high byte boundary located bit visually look like word boundary byte boundary high byte low byte value converted bit binary number follows conversion word based required however byte based conversion additional step required divide bit byte boundary divided byte boundary eight bit regrouped make conversion back octal easier indicates first two character messag octal h byte displayed least significant byte first order little endian easier method find value use odt command backslash prompted using forward slash open memory location backslash effect remain effect memory location closed open messag memory location type rather return ctrlj odt respond converted byte open location well ascii character corresponding octal value press ctrlj several time see character following h e v l u e f e nifty eh working breakpoints see instruction would executed next simply display content pc register right broke looking environment see breakpoints active look breakpoint list memory accessible b dollar sign b pressing ctrlj time show rest breakpoints set location within program effectively unset program proceed point would continue execution ended hit one active breakpoint allow program proceed time p p p f p e look vector content hmmm going let look code see happening second asl multiply decimal mov sp save asl asl add sp point next digit dec end digit bne second branch would appear loop multiplies vector pointed start looping several time next memory location multiplied decimal sure enough vector starting memory location multiplied decimal instead continuing repeat loop done delete existing breakpoint set new one program continue say following loop p confirm entire vector multiplied decimal looking last word prior messag breakpoints cleared using b without number b single odt use command enter single step mode p proceed step p confirm source line mov n go thru place dividing properly executed examining look good rather single stepping entire program exit single step mode set breakpoint ttyout statement result printed proceed ttyout output digit p point program execution register contain next digit result first digit following decimal since e approximately register contain oh contain ascii code obviously wrong go ahead use command see look find interestingly result line displayed program run completion earlier problem appear issue display displaying given error must occurred somewhere vector multiplication call ttyout order debug code executed previously ensure environment set properly requires exiting odt ctrlc c restarting program run sum odt resetting relocation register establishing new breakpoint case backing result division fixed outputting single digit setting breakpoint memory location g value e contain value previously multiplied sure enough octal decimal logically problem look code see logical error seen set another breakpoint fifth sub fix digit bcc fifth really divide add make digit ascii ttyout output digit fifth loop memory location look like good candidate p look seems remarkably uninformative actually negative number complement negative added yield correct answer wait code say add octal octal decimal yield bug single step see math done p bug action looking source add clear code read add add achieve desired result however possible test hypothesis changing content calling ttyout accomplished opening memory location case typing new value closing pressing return exit single step mode proceed p expected bug almost dead let try something ill advised changing memory location contains program offending line code add make digit ascii byte let change run program completion fix bug run program go ahead exit odt restart make edit rerun c run sum odt g value e success step fix logic error aka making permanent change order make change permanent requires source code edited change made program reassembled relinked edit summac change line read add assemble corrected file macrodisable gbl sumlistcross link summap run sum value e woohoo e indeed approximately seventy digit anyway equal step repeat step program work desired keep cycling step code working step celebrate successfully running program saving source code posterity time get piece code work maybe even mostly work copy safe location better yet check source code repository like git approach simulated environment two pronged copy summac another volume followed setup tutorial second disk image loaded copy summac host system check git add another disk simulation bootini add set attach storagedsk initialize disk nt file disk already assign shortcut name device initialize initialize sure assign vol dir vol file block free block note assignment last long logged make permanent add start command file running default monitor startup file startfcom copying file another volume accomplished following copy summac vol file copied dk summac vol summac dir vol sum mac file block free block directory different current directory always seems system volume command reside appear possible change directory however another directory target various command including copy volume used storage retrieval file want additional storage volume simply copy file file another name volume copy summac sumori note limited character file name character extension wise copy paste terminal window method copy file host system many approach present order simplicity using version simh newer november use simplest method copy paste type summac content file simply copy content terminal window host system copy functionality open text file nontranslating editor textwrangler notepad somesuch paste content editor save file locally lpt device line printer method bootini file contains line attach lpt lpttxt simply print file become magically available file lpttxt pausing simulator using ctrle restart typing c sim prompt done using print commmand print summac note resulting file contain formfeed character appropriate printing file line printer laser printer matter print file file print would age ago print listing file choose landscape mode print method good printing file exact copy method pc device paper tape punch method printing file introduces print formatting file also oneway transport host simplest method twoway transfer use copy paste previously described work well text file ideal binary file another method file transfer simple yet capable supporting format paper tape reader punch method described bootini need two line attach ptr ptrtxt attach ptp ptptxt support paper tape reader paper tape punch device pc copy file host copy copy summac pc file copied dk summac pc pause simulator using ctrle viewing file ptptxt editor typing sim cat ptptxt sim prompt copy file host say edited sumfixmac host wanted copy copy file sumfixmac ptrtxt pause simulation using ctrle attaching ptrtxt file e simulation stopped pc beq sim att ptr ptrtxt sim c copy pc sumfixmac file copied pc dk sumfixmac note watch tabspace conversion ugh bonus section linker error demo compared program assembled without argument disable gbl assemble ttyon undefined global try link get error link summap linkwundefined globals ttyon type sumlst summac version macro page title summac version mcall ttyout exit print n digit e calculate e sum reciprocal factorial exp print messag print introductory text mov n char e print first mov digit accuracy mov address digit vector second asl multiply decimal mov sp save asl asl add sp point next digit dec end digit bne second branch mov n go thru place dividing third mov place index mov init quotient register fourth inc bump quotient sub subtract loop nt bad bcc fourth numerator always n add fix remainder mov save remainder basis next digit add greatest integer carry give digit dec end digit vector bne third branch mov get digit output fifth sub fix digit bcc fifth really divide add make digit ascii ttyon output digit clr clear next digit location dec digit print bne first branch yes exit done rept word init vector one endr messag ascii value e even summac version macro page end exp summac version macro page symbol table first messag second ttyon gx exp fourth n third fifth ab rw gbl ab ovr rw lcl rel con error detected assembler statistic work file read work file writes size work file word page size core pool word page operating system elapsed time dk sum dk sumcdk sum summac version macro page cross reference table cref ttyon exp fifth first fourth messag n second third summac version macro page cross reference table cref exit print ttyou stuff consider mcall ttyout exit print ttyon output page list user defined symbol appear ttyon page list macro defined symbol apper ttyou appears ttyon ttyout comment output digit suggests edit retry assembly linkage end tutorial hope learned lot developer workflow assembly language programming almostancient assembly language world remarkably similar modern assembly little quirk thrown make interesting please leave constructive comment let know thought tutorial found error comment moderated happy coding
403,Lobsters,virtualization,Virtualization,Running Java on the Atari 2600,http://www.mikekohn.net/micro/atari2600_java.php,running java atari,atari java joe davisson java grinder commodore api demo java grinder space revenge playstation java sega genesis java amiga java apple iigs java java java dspic mandelbrot atari java chipkit java java grinder nakenasm joe davisson mess spacerevengebin http wwwyoutubecomwatch featureyoutube http java grinder michael kohn,atari java posted december updated january introduction ago joe davisson added support java grinder commodore api demo since old atari video game system designed also run variety cpu curious could create little java api writing code platform made class java grinder extended joe class started throwing together code joe saw came took atari generator adding even api creating game called space revenge click download run emulator cheesy name cheesy music could sold like crazy keep mind atari byte ram byte space software without bank switching first sentence paragraph byte character long big fit ram space computer related project mikekohnnet java grinder playstation java sega genesis java amiga java apple iigs java java java dspic mandelbrot atari java chipkit java java grinder nakenasm video video joe davisson space revenge game written java running mess emulator feel free download game spacerevengebin play emulator full video http wwwyoutubecomwatch featureyoutube video original demo java grinder running atari supposed atari logo something like built binary demo run emulator full video http explanation actually quite easy java method compile directly instruction time atari graphic chip extremely primitive requires quite bit cpu power exactly precise timing timing important added sound joystick collision support pretty much every control register atari joe added playfield sprite drawing support directly api game developer nt worry complexity drawing playfield sprite started writing game around bit nature generator module making size generated atari code bigger rom created generator module creates pure bit code atari even bit version th code geneator still nt able fit title screen music game rom size limit since atari give addressing line cartridge port byte size limit atari cartridge get around atari developer would put multiple rom cartridge add circuitry would allow select rom currently attached bus end emulator know deal rom file use technique known bank switching joe ended creating separate program separate rom file one title screen music actual game added java api ability bank switching modified makefile compiles rom concatinates together source code game java grinder repository atari playfield complexity newer computer like early commodore apple ii would give programmer chunk ram could put entire image video chip computer take care thing like applying vertical sync signal computer monitor tv taking care blanking atari graphic chip give programmer bit bitmap drawing area drawn display either repeated half mirrored bit drawn every scanline screen programmer figure horizontal blank starting change bitmap color register tv start drawing horizontal blank time cpu clock cycle length lot time programmer also count scan line apply vertical sync vertical blank proved simple java since atari halt cpu horizontal blanking start made method tried put loop around count line slow ended adding int line loop could done tight assembly source code demo show done copyright michael kohn
404,Lobsters,virtualization,Virtualization,Kubernetes: Why Kubernetes doesn’t use libnetwork,http://blog.kubernetes.io/2016/01/why-Kubernetes-doesnt-use-libnetwork.html,kubernetes kubernetes use libnetwork,kubernetes use libnetwork libnetwork cnm cni appc libkv consul etcd zookeeper multihost networking docker bundle new dns server skydns rkt writing bridge cnm driver libnetwork libnetwork libnetwork libnetwork docker slack network sig mailinglist,kubernetes use libnetworkthursday january basic form network plugins since version released around time docker libnetwork container network model cnm introduced unlike libnetwork kubernetes plugin system still retains alpha designation docker network plugin support released supported obvious question get kubernetes adopted yet vendor almost certainly writing plugins docker would better using driver right going important remember kubernetes system support multiple container runtimes docker one configuring networking facet runtime people ask kubernetes support cnm really mean kubernetes support cnm driver docker runtime would great could achieve common network support across runtimes explicit goalindeed kubernetes adopted cnmlibnetwork docker runtime fact investigating alternative container network interface cni model put forth coreos part app container appc specification number reason technical nontechnicalfirst foremost fundamental assumption design docker network driver cause problem usdocker concept local global driver local driver bridge machinecentric crossnode coordination global driver overlay rely libkv keyvalue store abstraction coordinate across machine keyvalue store another plugin interface lowlevel key value semantic meaning run something like docker overlay driver kubernetes cluster would either need cluster admins run whole different instance consul etcd zookeeper see multihost networking else would provide libkv implementation backed kubernetesthe latter sound attractive tried implement libkv interface lowlevel schema defined internally docker would either directly expose underlying keyvalue store else offer keyvalue semantics top structured api implemented keyvalue system neither attractive performance scalability security reason net result whole system would significantly complicated goal using docker networking simplify thingsfor user willing able run requisite infrastructure satisfy docker global driver configure docker docker networking work kubernetes get way setup matter direction project go option available default installation though practical conclusion undue burden user therefore use docker global driver including overlay eliminates lot value using docker plugins alldocker networking model make lot assumption valid kubernetes docker version includes fundamentally flawed implementation discovery result corrupted etchosts file container docker easily turned version docker planning bundle new dns server unclear whether able turned containerlevel naming right abstraction kubernetes already concept service naming discovery binding already dns schema server based wellestablished skydns bundled solution sufficient need disableableorthogonal localglobal split docker inprocess outofprocess remote plugins investigated whether could bypass libnetwork thereby skip issue drive docker remote plugins directly unfortunately would mean could use docker inprocess plugins bridge overlay particular eliminates much utility libnetworkon hand cni philosophically aligned kubernetes far simpler cnm nt require daemon least plausibly crossplatform coreos rkt container runtime support crossplatform mean chance enable network configuration work across runtimes eg docker rocket hyper follows unix philosophy one thing welladditionally trivial wrap cni plugin produce customized cni plugin done simple shell script cnm much complex regard make cni attractive option rapid development iteration early prototype proven possible eject almost currently hardcoded network logic kubelet pluginwe investigated writing bridge cnm driver docker ran cni driver turned complicated first cnm cni model different none method lined still global v local keyvalue issue discussed assuming driver would declare local get info logical network kubernetesunfortunately docker driver hard map control plane like kubernetes specifically driver told name network container attached id docker allocates internally make hard driver map back concept network exists another systemthis issue brought docker developer network vendor usually closed working intended libnetwork libnetwork libnetwork libnetwork docker even though make nondocker thirdparty system difficult integrate throughout investigation docker made clear open idea deviate current course delegate control worrisome u since kubernetes complement docker add much functionality exists outside docker itselffor reason chosen invest cni kubernetes plugin model unfortunate sideeffects relatively minor example docker inspect show ip address significant particular container started docker run might able communicate container started kubernetes network integrator provide cni driver want fully integrate kubernetes hand kubernetes get simpler flexible lot ugliness early bootstrapping configuring docker use bridge go awayas proceed path certainly keep eye ear open better way integrate simplify thought really would like hear find u slack network sig mailinglisttim hockin software engineer google
405,Lobsters,virtualization,Virtualization,corectl - CoreOS over OS X made very simple,https://github.com/TheNewNormal/corectl,corectl coreos o x made simple,coreos macos made simple must homebrew crash xhyve allows traffic fromto interface host step step instruction install corectl installing release build prefered end user downloading github release build locally power user start corectl server daemon corectld required corectl kickstart coreos vm usage corectld corectl simple usage recipe docker rkt playground create volume store persistent data corectl must raw label start docker rkt playground cloudconfig fun tracing hyperkit project using corectl rima mocevicius corectl genevera acknowledgement contributing corectl open source apache license version,coreos macos made simple read first must running macos yosemite later later macintosh ie one cpu support ept everything work starting bundled qcowtool helper runtime dependency libev sort build statically need make available local system using homebrew easy brew install libev still using version virtualbox older corectl crash system either virtualbox running run previously last reboot see xhyve issue full context reason unable update virtualbox latest either stream using current session please make sure restart mac attempting run corectl using sort desktop firewall macos host eset little snitch whatever please make sure allows traffic fromto interface host otherwise vm ever able succefully boot ca nt fetch ignition configs etc host running corectld step step instruction install corectl installing release build prefered end user brew install corectl downloading github go release page download tarball binary system unpack content placing somewhere directory path usrlocalbin usually good choice build locally power user mkdir p gopath srcgithubcomgenevera cd gopath srcgithubcomgenevera git clone git githubcom geneveracorectlgit cd corectl make built binary appear inside gopath srcgithubcomgeneveracorectlbin start corectl server daemon corectld required step starting corectl release usrlocalbincorectld kickstart coreos vm following command fetch latest coreos alpha image available already available locally verify integrity boot corectl run terminal shortly see something like following corectl run started successfully address pid boot log found console found accessing newly created coreos instance click away corectl ssh usage straight online help corectld coreos macos made simple http githubcomgeneveracorectl copyright c antónio meireles usage corectld flag corectld command available command start start corectld status show corectld status stop stop corectld version show version information flag debug add additional verbosity option directed debugging purpose power user use corectld command help information command flag also set via uppercase environment variable prefixed coreos example debug coreosdebug corectl coreos macos made simple http githubcomgeneveracorectl copyright c antónio meireles usage corectl flag corectl command available command kill halt one running coreos instance load load coreos instance defined instrumentation file l list coreos image available locally p list running coreos instance pull pull coreos image upstream put copy file inside vm query display information running coreos instance rm remove coreos image local filesystem run boot new coreos instance ssh attach run command inside running coreos instance version show version information flag debug add additional verbosity option directed debugging purpose power user use corectl command help information command flag also set via uppercase environment variable prefixed coreos example debug coreosdebug find full autogenerated documentation simple usage recipe docker rkt playground create volume store persistent data qcowtool use shipped together corectl creates image please note size argument must suffixed right way kibmibgibtibpib qcowtool create become varlib dockerrkt example case created volume quick note regarding raw volume raw volume default version still supported become deprecated feature may disappear point future format label format label newly created volume within transient vm simplest way formatting choose filesystem like assuming coreos supported one corectl run name foo corectl ssh foo sudo b devvda sudo devvda rkthdd corectl halt foo labeled volume rkthdd signature recipe expects relying label volume identification get around issue otherwise depending actual volume name devvd would hardcoded issue one mix matching multiple recipe dealing different volume start docker rkt playground uuiddeadbeefdeaddeaddeaddeaddeafbeef corectl run volume absoluteorrelativepathtopersistentimg cloudconfig examplescloudinitdockeronlywithpersistentstoragetxt cpu memory name containerland start vm named containerland volume created previously attached virtual core ram provided cloudconfig format given volume nt yet bind mount varlibrkt varlibdocker top docker also become available socket activation passed argument vm via environment variable command flag way fully supported use whatever suit need better corectl p server version go version built mon jul west osarch pid uptime minute ago activity active vms total memory total vcores uuid name containerland version channel alpha vcpus memory mb pid uptime minute ago see world true cloudconfig usersamcodecorectlsrcgithubcomgeneveracorectlexamplescloudinitdockeronlywithpersistentstoragetxt network volume devvda usersamcodecorectlpersistentdatavarlibdockerimg docker h corectl q containerland ip image repository tag image id created size centos latest day ago mb busybox latest day ago mb fedora latest day ago mb corectl ssh containerland coreos stable last login mon jul update strategy reboots corectl ssh containerland sudo rkt list uuid app image name state created started network running vms become reachable name transparently host using macos native name resolution machinery ping c containerland ping containerlandcoreoslocal data byte byte m containerlandcoreoslocal ping statistic packet transmitted packet received packet loss roundtrip minavgmaxstddev m fun tracing thanks hyperkit consume corectldrunner available number static dtrace probe simplify investigation performance problem list probe supported version corectl type following command corectld running sudo dtrace l p hyperkit target p pgrep corectldrunner refer script examplesdtrace directory example possible usage available probe project using corectl rima mocevicius entire toolset macos gui apps using corectl underneath become part genevera project acknowledgement contributing corectl open source project released apache license version contribution sugestions gladly welcomed
406,Lobsters,virtualization,Virtualization,Setting Up Your Own PaaS and CI/CD Pipeline,http://sysadvent.blogspot.de/2015/12/day-16-merry-paasmas-and-very.html,setting paas cicd pipeline,pczarkowski phrawzty dokku heroku deis flynn paasta infrastructure openstack terraform blue box ursula deis terraform coreos terraform jenkins jenkins docker image etcd cluster load balancer ghost ghost blogging platform paulczarcidemo environment variable backing service github flow ghost stageghost deis cedar jenkins github pull request builder continuous integration deployment local development support storing image dockercomposeyml pull request staging none ci tool could find supported performing action pr close blog production conclusion,written paul czarkowski pczarkowski edited dan phrawzty phrawzty docker ecosystem around done great thing developer operational standpoint mostly old issue fresh coat paint real change happens change perspective infrastructure service platform service ultimate deployment artifact running application instead virtual machine even kubernates still feel lot like iaa container instead virtual machine fair already platform shift user experience towards application cloud foundry heroku come mind many large operation burden provided saas model docker ecosystem starting see type platform first dokku started single machine heroku replacement written line bash building top work richer system like deis flynn emerged well custom solution built inhouse like yelp paasta action speak louder word decided document demonstrate platform built ground using open source project deploy application via continuous integrationdeployment cicd pipeline could probably would use public cloud provider stack however wanted demonstrate system like built run internally everybody able use public cloud wrote discovered figuring right combination tool run fun process really interesting stuff building actual cicd pipeline deploy run application mean briefly describe underlying infrastructure providing detailed installation guide infrastructure iaa strictly necessary could run deis straight bare metal make sense use something like openstack provides ability request service via api use tooling like terraform installed openstack across across set physical machine using blue box ursula next paas familiarity deis already really like herokuesque user experience deployed three node deis cluster openstack using terraform instruction also deployed additional three coreos node using terraform ran jenkins using standard jenkins docker image finally threenode percona database cluster running coreos node fronted load balancer use etcd autodiscovery docker image available cluster load balancer ghost application chose demo ghost blogging platform chose fairly simple app wellknown backing service mysql source including dockerfile customizations found paulczarcidemo github repository hostname database credential mysql load balancer passed ghost via environment variable injected deis provide suitable database backing service development wanted follow github flow methodology much possible mergedeploy step bit different basic flow allows use github notification system trigger jenkins job pull request created merged used deis cli create two application ghost code master branch stageghost code development branch production staging environment respectively development master branch protected github setting restrict change pushed directly branch furthermore pull request need pas test merged deis deploying application deis quite easy similar deploying application heroku long git repo dockerfile support discovered cedar tooling deis figure need done run application deploying application deis incredibly simple first use deis create create application success deis cli add remote git endpoint run git push deis master push code trigger deis build deploy application git clone http githubcomdeisexamplegogit cd examplego deis login http deisxxxxxcom deis create helloworld creating application done created helloworld git remote deis added git push deis master counting object done delta compression using thread compressing object done writing object kib byte done total delta reused delta building docker image remote sending build context docker daemon kb snip launching done helloworld deployed deis http helloworldcidemopaulcznet jenkins running jenkins docker container thing prepare run docker exec ti jenkins bash enter container install deis cli tool run deis login save session file nt login every job add github pull request builder ghprb plugin secure password run docker commit commit state jenkins container also create job perform actual work ghprb plugin made fairly simple actual job variation script binbash app ghost git checkout master git remote add deis ssh git app git git push deis master tee deisdeploytxt continuous integration deployment local development docker dockercompose great tool quickly building development environment combined docker machine deploy locally cloud choice placed dockercomposeyml file git repo launch mysql container database ghost container ghost build port volume ghost environment url http dbuser root dbpass ghost link mysql mysql image percona port environment mysqlrootpassword ghost mysqldatabase ghost also included alias file useful alias common task alias dc dockercompose alias npm dockercompose run rm nodeps ghost npm install production alias dockercompose mysql sleep dockercompose forcerecreate ghost alias test docker run ti entrypointsh rm test apptest alias build dockercompose build running development environment locally simple cloning repo calling command alias file following example show added support storing image git clone http githubcompaulczarcidemogit cd cidemo alias npm install nodepregyp install fallbacktobuild dockercompose run rm nodeps ghost npm install save awssdk xmlbuilder sax docker compose allows variable substitution pull aws credential environment variable mean nt need saved git dev use bucket etc done simply adding line dockercomposeyml file environment section ghost environment added appropriate environment variable shell ran spin local development environment application running able confirm plugin working uploading following image bucket via ghost image upload mechanism pull request new work done feature branch pull request made development branch git repo jenkins watch using github pull request plugin ghpr development process look little something like git checkout b switched new branch added module edited appropriate section ghost code following github flow created pull request new feature git add git commit use store image use store image file changed insertion deletion create mode git push origin counting object done delta compression using thread compressing object done writing object kib byte done total delta reused delta git githubcom paulczarcidemogit new branch jenkins notified developer open new pull request development branch kick test jenkins create deploy ephemeral application deis named pull request id ephemeral environment viewed http prxxghostcidemopaulczarnet anyone wishing review pull request subsequent update pr update deployed application run manual test specific feature developed uploading photo url ephemeral application live staging jenkins see pull request merged development branch perform two job delete ephemeral environment pull request longer needed create deploy new release content development branch staging environment deis http stageghostcidemopaulczarnet originally started building demo assumed able perform action pr mergescloses would simple quickly discovered none ci tool could find supported performing action pr close thankfully able find useful blog post described set custom job webhook could process github payload production promoting build staging production two step process user wish promote creates pull request development branch master branch jenkins see kick final test another user merge pull request fire jenkins job push code deis cut new release deploys production environment http ghostcidemopaulczarnet conclusion coming operation background thought figuring build run paas metal would really interesting learning exercise nt expect discover however actually running application paas would compelling figuring development workflow cicd pipeline eyeopener well said interesting outcome exercise increased empathy process building using platform placed directly shoe developer support demonstrated changing focus user experience person core competency operator running platform developer using platform allow developer application production without needing worry vms firewall rule config management code etc also learned many u default cloud service aws heroku travis ci solid alternative run inhouse also somewhat surprised powerful simple jenkins even still painful automate grateful sysadvent gave reason perform little experiment learned lot hope article pass knowledge experience others
407,Lobsters,virtualization,Virtualization,Tutorial - Setting up RT-11 v5.3 on SimH PDP-11 Simulator in Support of Assembly Development,http://decuser.blogspot.com/2015/12/tutorial-setting-up-rt-11-v53-on-simh.html,tutorial setting simh simulator support assembly development,tutorial setting simh support assembly development experimentation hopefully learn tutorial prerequisite resource getting started prepare simh prepare distribution disk image empty disk image simh configuration file initial configuration file regular boot configuration file automatic installation process start simulation screen automatic installation process screen automatic installation process screen automatic installation process screen date screen screen backup disk screen screen backup disk completed screen screen building working system screen screen installation complete screen post installation screen bootstrapped first time post installation cleanup booting first time command overview command outputeffect directory aka dir directorybrief aka dirbr directoryprint aka dirpri directorybriefprint aka dirbrpri show type file print file edit file editcreate file macro filelistcrossreference aka mac filelistcross link filemap run file aka r file general note v real xterm http wwwxquartzorg http invisibleislandnetxterm,tutorial setting simh support assembly development experimentation small singleuser realtime operating system family computer simple install work fine simh take getting used ever used do seem mildly familiar tutorial enough get started mean complete introduction environment running recommend read introduction referenced document take reader number exercise get familiar operating system please post comment work tutorial let know needed correction change would helpful add hopefully learn tutorial install simh simulator interact host system productively back operating system host develop edit assemble link run simple hello world application operating environment prerequisite developer friendly host environment linux base developer tool mac xcode homebrew installed work well window try cygwin resource getting started create working directory change use sandbox area mkdir cd prepare simh git far best method obtaining simh snag git clone http githubcomsimhsimhgit cd simh make optionally copy accessible location sudo cp test simulator beta git commit id sim q goodbye cd prepare distribution disk image empty disk image get image using curl wget visit site directly curl ftp curl http unzip clean moving empty disk image disk cleaning unnecessary file tar xvf gunzip mv rm make copy disk image use simulator cp distributionbackupdsk cp distributiondsk later restore file event error simple cp distributionbackupdsk cp distributiondsk however raw disk another backup take care prepared disk later simh configuration file two configuration file used tutorial first used initialize system execute automatic installation process second used normal subsequent boot initial configuration file cat initialini eof set cpu set tto attach lpt lpttxt set writeenabled set attach distributiondsk set writeenabled set attach distributionbackupdsk set badblock boot eof ini file describes ram sufficient installation also tell simulator use terminal setting ascii support handle arrow key color etc lpt device point lpttxt host one method obtaining printout environment set write enabled device attached file host simulator nt well empty disk device file without badblock set set file explicitly call boot distribution disk image regular boot configuration file cat bootini eof set cpu set tto attach lpt lpttxt set writeenabled set attach workingdsk set writeenabled set attach storagedsk set badblock boot eof file basically initial file instead two disk attached distribution backup disk attached working storage file backup whenever backup desired cpu ram changed powerful system anytime without breaking anything required simple work automatic installation process everything ready installation point confirm file folder disk bootini distributionbackupdsk distributiondsk initialini start simulation order power command invoked name appropriate ini file initialini simulator beta git commit id lpt creating new file overwrite last track n answer press enter begin process everything greeted lime green background heading automatic installation process screen automatic installation process automatic installation process welcome bootstrapped distribution disk use disk install system store safe place provides automatic installation procedure back distribution disk build working system disk used work working system disk contain operating system installation complete follow installation instruction packaged optional language utility software using press return key ready continue instructed press return key progress next screen screen automatic installation process automatic installation process choose install manually procedure described installation guide new user digital highly recommends use automatic installation procedure want use automatic installation procedure type yes press return key unless expert type yes press return continue process make mistake typing press delete letter want delete printed preceding backslash make correction well world example type yep delete followed correct appear follows yepps screen automatic installation process automatic installation process guided installation process series instruction question interactive dialog installation program need follow instruction carefully instruction ask mount disk specified drive find disk correct label mount drive shown installation booklet remove disk specifically instructed disk mounted drive must remain drive message appears asking remove disk press return key ready continue follow instruction press return proceed screen date screen enter today date please enter today date following format ddmmmyy dd day month mmm first letter name month yy last two number year example january type date press return key note modern year nt really work well bother find fix apply otherwise type date like press return proceed thanks peter comment pointing monthdays occur weekday year ago select day continually match year retrohobbyist fun revisit much still use screen backup disk screen backing distribution disk backup copy distribution disk built mount blank disk drive see automatic installation booklet mounting instruction remember disk mounted pressed load button ready indicator light press return key mounted disk point backup disk mounted referred simply press return backup written host disk image file distributionbackupdsk proceed screen backup disk completed screen backing distribution disk backup copy distribution disk drive please remove disk label bin backup refer appendix b installation booklet instruction dismounting disk press return key removed disk order unattach disk make backup copy simulator must temporarily halted accomplished pressing ctrle press hold control key pressing lowercase e key simulation stopped pc asr instruction may vary one sim detach sim cp distributionbackupdsk sim cp workingdsk sim attach workingdsk sim c command detach disk distributionbackupdsk copy file copy empty disk image workingdsk attach simulator c tell simulator return control wo nt prompt simply press return previously instructed proceed screen building working system screen building working system working system disk built automatically disk contain operating system select blank disk label bin working mount drive press return key mounted disk workingdsk image attached loaded press return build system proceed screen installation complete screen installation complete working system disk bootstrapped press return key ready continue working system built press return proceed newly built system post installation screen bootstrapped first time type installation version complete executing working volume provided used automatic installation procedure digital recommends verify correct operation system software using verification procedure enter command ind verify note verify performed distri bution medium backed accomplished part automatic installation based system including professional completed automatic installation must perform manual backup using verify note also verify supported diskette dectape ii professional digital also recommends read file contains information formalized late included release note typed printed dot prompt ready command point important make one final backup something happens always return operating system pristine installed state stop simulation unmount working disk make backup quit simulation press ctrle simulation stopped pc add sim detach sim cp workingdsk sim quit goodbye post installation cleanup point working copy backup distribution file saved remove two copy blank disk distribution disk working directory move backup disk directory rm distributiondsk distributionbackupdsk mv disk mv disk remove initialini file rm initialini copy new blank use storage volume cp storagedsk cleaned area contain following folder file disk bootini lpttxt storagedsk workingdsk booting first time bootini file used configure use storage working disk start bootini bootini simulator beta git commit id overwrite last track n choose press return continue file displayed dot prompt presented user type installation version complete executing working volume provided used automatic installation procedure digital recommends verify correct operation system software using verification procedure enter command ind verify note verify performed distri bution medium backed accomplished part automatic installation based system including professional completed automatic installation must perform manual backup using verify note also verify supported diskette dectape ii professional digital also recommends read file contains information formalized late included release note typed printed command overview list simple command get started typed dot prompt two main form command long form short form long form usually entered typing command without argument prompt rational option short form entered typing command option command familiar construction may little alien command shortened shortest possible unique root directory example shortened dir use uppercase everything save pain command perform document directory aka dir show file default directory directorybrief aka dirbr brief form directory listing directoryprint aka dirpri directorybriefprint aka dirbrpri print directory listing host lpttxt file order ensure flushed buffer simulator need suspended anything printed looking text file show display active configuration type file show content file screen print file print content file host lpttxt file suspend simulator looking file edit file command execute editor default visual mode editor ked requires setup use line editor ed used without configuration later tutorial describe configure ked try use edit configure nearly impossible exit editor configured need stop simulator exit file nt exist program prompt user create ok full disclosure probably exit typing macbook teh ked gold key followed esc w ked command prompt typing quit exit depending whether want abort save respectively pressing enter macbook fnreturn numeric keypad probably skip press key top left keypad numeric keypad type quit exit press numeric keypad enter editcreate file command create file editing without prompting unless file exists case user prompted overwrite existing file macro filelistcrossreference aka mac filelistcross assemble source file object file machine code link filemap link dependent file determine memory file located run file aka r file execute file command outputeffect directory aka dir directory swap sys cr sys ct sys dd sys dl sys dm sys dp sys d sys dt sys du sys dw sys dx sys dy sys dz sys pd sys rf sys rk sys ld sys lp sys l sys mm sys m sys mt sys nl sys pc sys pi sys sl sys slmin sys sp sys tt sys vm sys xc sys xl sys ddx sys dlx sys dmx sys dux sys dwx sys dxx sys dyx sys dzx sys ldx sys lpx sys lsx sys mmx sys msx sys mtx sys ncx sys nlx sys nqx sys pix sys rkx sys slx sys spx sys vmx sys xcx sys xlx sys startacom startfcom startscom startxcom pip sav dup sav dir sav ind sav resorcsav edit sav sav ked sav kex sav macro sav cref sav link sav libr sav filex sav srccomsav bincomsav slp sav dump sav sipp sav bup sav pat sav help sav sysmacsml batch sav erroutsav quemansav formatsav setup sav vtcom sav speed sav datimesav datimecom let sav split sav ucl sav vbgexesav termidsav queue rel rtmon rel spool rel vtcom rel transfsav transftsk transfexe gidis sav odt obj vdt obj vtmac mac vthdlrobj syslibobj putstrfor getstrfor mdup sav mboot bot msbootbot mdup mm mdup m mdup mt demobgmac demofgmac demoedtxt sampleked verifycom ivp com ivp mac mtb com fb mac sj mac xm mac bstrapmac edtgblmac kmon mac kmovlymac mttemtmac mttintmac rmonfbmac rmonsjmac trmtblmac usr mac xmsubsmac ba mac cr mac ct mac dd mac dl mac dm mac dp mac d mac dt mac du mac dw mac dx mac dy mac dz mac el mac ld mac lp mac l mac nc mac ni mac nl mac nq mac pc mac pd mac rf mac rk mac sp mac tj mac tm mac t mac tt mac vm mac xc mac xl mac fsm mac elcopymac elinitmac eltaskmac errtxtmac erroutobj rtbl map rtsj map rtfb map rtxm map sysgencom bl an sjfb an xm an configcom configsav customtxt consolmac nitestmac file block free block directorybrief aka dirbr dirbrswap sys cr sys ct sys dd sysdl sys dm sys dp sys d sys dt sysdu sys dw sys dx sys dy sys dz syspd sys rf sys rk sys ld sys lp sysls sys mm sys m sys mt sys nl syspc sys pi sys sl sys slmin sys sp systt sys vm sys xc sys xl sys ddx sysdlx sys dmx sys dux sys dwx sys dxx sysdyx sys dzx sys ldx sys lpx sys lsx sysmmx sys msx sys mtx sys ncx sys nlx sysnqx sys pix sys rkx sys slx sys spx sysvmx sys xcx sys xlx sys startacom startfcomstartscom startxcom pip sav dup sav dir savind sav resorcsav edit sav sav ked savkex sav macro sav cref sav link sav libr savfilex sav srccomsav bincomsav slp sav dump savsipp sav bup sav pat sav help sav sysmacsmlbatch sav erroutsav quemansav formatsav setup savvtcom sav speed sav datimesav datimecom let savsplit sav ucl sav vbgexesav termidsav queue relrtmon rel spool rel vtcom rel transfsav transftsktransfexe gidis sav odt obj vdt objvtmac mac vthdlrobj syslibobj putstrfor getstrformdup sav mboot bot msbootbot mdup mm mdup m mdup mt demobgmac demofgmac demoedtxt sampleked verifycom ivp comivp mac mtb com fb mac sj mac xm macbstrapmac edtgblmac kmon mac kmovlymac mttemtmacmttintmac rmonfbmac rmonsjmac trmtblmac usr macxmsubsmac ba mac cr mac ct mac dd macdl mac dm mac dp mac d mac dt macdu mac dw mac dx mac dy mac dz macel mac ld mac lp mac l mac nc macni mac nl mac nq mac pc mac pd macrf mac rk mac sp mac tj mac tm macts mac tt mac vm mac xc mac xl macfsm mac elcopymac elinitmac eltaskmac errtxtmacerroutobj rtbl map rtsj map rtfb map rtxm mapsysgencom bl an sjfb an xm an configcomconfigsav customtxt consolmacnitestmac file block free block directoryprint aka dirpri directorybriefprint aka dirbrpri command go lpttxt file host want see output press ctrle halt simulation simulation stopped pc mov sim cat lpttxt lot output form feed character like real printer lpttxt file later opened textwrangler printed form feed honored return enter c sim prompt sim c press return dot prompt appear show showtt resident dl resident dk sy mq resident ld rk sl du dm dp dx vm sp mt m ct lp pc cr nl free slot show command tell user device active known point o know sy disk sy aliased dk dl serve volume locator file dir sy effect dir dir dk dir dl later tutorial storage drive given alias vol initialized use storage location file type file file named consolmac sy directory print content screen type consolmac mcall modulemodule consol comment change boottime console copyright c digital equipment corporation maynard mass right reserved software furnished license may used copied accordance term license inclusion copyright notice software copy thereof may provided otherwise made available person title ownership software hereby transferred information software subject change without notice construed commitment digital equipment corporation digital assumes responsibility use reliability software equipment supplied digital enabl lc nlist bex enabl gbl program change console one boot console mcall mtps print exit csrad new console input csr vec new console vector sysptr syscom pointer rmon ttks console keyboard csr ttkb console keyboard buffer ttps console printer csr ttpb console printer buffer sysgen offset sysgen word mtty multiterminal bit sysgen word oldvec standard console vector ienabl interrupt enable priority seven priority zero bmask vec bitmap consol mov sysptr rmon bit mtty sysgen multiterminal system bne yes ca nt use technique mtps go priority bisb bmask bitmap protect new console vector add ttks console register list rmon mov csr new csrdata reg list bic ienabl disable old input csr interrupt mov move new csr addr mov move new buffer address bic ienabl disable old output csr interrupt mov move new csr addr mov move new buffer addr mov oldvec present console vector mov new vector rept mov load new console vector endr mtps back priority exit terminate print nomt print error message exit leave nlist bexnomt asciz consolfmultiterminal system use set tt consol command evencsr word csrad csrdata buffervector list word word word word vec end consol content consolmac sent console print file print content file print consolmac content consolmac sent lpttxt file host edit file order demonstrate editing ed editor must selected remember ked editor unusable configured set edit edit command allow user edit page file buffer tutorial editcreate command used edit see editcreate command editcreate file sure first ran set edit edit wo nt able exit ked editcreate hellomac edit command two mode command mode edit mode asterisk command mode prompt check introduction document detailed instruction purpose host file editor far superior either ed ked command necessary grasp well enough get insert mode insert text likely copied host copypaste buffer enter insert mode type immediately start entering text following copied pasted point text title hellomcall print exit tell assembler want two sysmacsmlstart print hello call o function print string address hello exit call o function terminate programhello asciz hello world ascii string ending zero byteend start leave blank line text press esc key twice return command mode esc esc ed command prompt either type ex followed esc key twice save work ctrlc twice abort work ex esc esc confirm file created dir hellomachello mac file block free block contains content entered type hellomac title hellomcall print exit tell assembler want two sysmacsmlstart print hello call o function print string address hello exit call o function terminate programhello asciz hello world ascii string ending zero byteend start macro filelistcrossreference aka mac filelistcross order assemble file created editor machine code necessary call upon assistance assembler included distribution following command generate obj file lst file containing assembly listing useful crossreferences macro hellolistcrossreference error screen output see generated display listing file file printer friendly landscape mode output type hellolsthello macro page title hello mcall print exit tell assembler want two sysmacsml start print hello call o function print string address hello exit call o function terminate program hello asciz hello world ascii string ending zero byte end starthello macro page tablehello start ab rw gbl ab ovr rw lcl rel con error detected assembler statisticswork file read file writes work file word page size core pool word page operating system time hello dk hellocdk hellohello macro page reference table cref hello start hello macro page reference table cref exit print page output first page contains line number relative zero address machine code assembly code comment rest page contain symbol table along size information cross reference user defined symbol macro symbol error assembly error code line number error link filemap order run file must first linked linker include program dependency build map location file loaded memory link hellomap error screen output see generated display map file type link load map page sav title hello ident section addr size global value global value global value ab word rw gbl ab ovr word rw lcl rel con transfer address high limit word map file tell user machine code loaded memory case starting location run file aka r file error assembly linkage program run run hello hello world note link hellomac try run executable get error mac hellomaclink hellomacrun hellosav monftrap otherwise celebrate end tutorial perse follows general note make experience better general note v distribution initially set fb indicates system run foreground background meaning run single foreground job along number background job read doc change extended memory support beyond simply copy correct sys file boot area boot disk copyboot boot installation version complete executing working volume provided used automatic installation procedure digital recommends verify correct operation system software using verification procedure enter command ind verify note verify performed distri bution medium backed accomplished part automatic installation based system including professional completed automatic installation must perform manual backup using verify note also verify supported diskette dectape ii professional digital also recommends read file contains information formalized late included release note typed printed copying pasting host preferred approach view edit text file host using favorite text editor let editor mess tab tab tab character set every character basically text ready transferred open text file using ed ked enter insert mode editor ready paste content file editor present terminal window paste scroll perhaps wrap file paste succesfully nt editing paste exit editor save change see file transferred successfully display console window using type copy file created host two option type file copy text terminal window text editor print file suspend simulation view lpttxt file host contain formatted version file ready printing printer ked preparation use ked easier way use ed however without quirk requires host configuration mac terminal preference set following option profileskeyboard change action send text enter set key send terminal escape code keypad mode command key already sends keypad mode gold key check use option meta key profilesadvanced input uncheck delete sends controlh check paste newlines carriage return check allow application keypad mode check scroll bottom input alternatively download build xterm one distributed mac lack significant number feature see fire ked edit away look like screen oriented text editor press type quit exit without saving exit save press fnenter use ctrlc presented prompt uncertain well editor work editor nt appear handle scroll offscreen well terminal paste pretty much anything ignore look exit come right type print real xterm xterm definitely faithful emulation terminal ked work flawlessly xterm session even pasting large amount text use mac requires x window support enabled mac accomplished installing xquartz available http wwwxquartzorg xterm supported actively maintained thomas dickey http invisibleislandnetxterm create working directory hold xterm source change mkdir xtermsrccd xtermsrc download unzip source change source directory curl http invisibleislandnetdatafilesreleasextermtargz tar xvf xtermtargz cd configure using thomas dickey setting osx configure enablebuiltinxpms enabledabbrev enabledeclocator enableexecxterm enablehpfkeys enableloadvtfonts enablelogfileexec enablelogging enableminiluit enablereadlinemouse enablerectangles enableregisgraphics enablescofkeys enablesixelgraphics enabletcapfkeys enabletcapquery enabletoolbar enablewidechars enablexmcglitch withappdefaultsauto withicondirauto withpixmapdirauto withterminaltypextermnew withutempter withxpm withsetuid create edit xresources file suit one work already xwhatever file incorporate appropriate line one existing one back first vi xresourcesxresources xterm setting see man xterm xterm deleteisdel true xterm facename dejavu sans mono book xterm facesize xterm savelines xterm scrollbar true xterm rightscrollbar true xterm jumpscroll true xterm cursorcolor xterm pointercolor xterm colorbd darkblue xterm colorbdmode true xterm highlightcolor xterm activeicon false xterm scrollttyoutput false xterm scrollkey true xterm background xterm foreground terminal key setting adjust osx terminalapp behaviour override key backspace string n key prior scrollback page n key next scrollforw page n key string n meta key k sendsignal int clearsavedlines n meta key p print n meta key minus smallervtfont n meta key kpsubtract smallervtfont n meta key plus largervtfont n meta key kpadd largervtfont n meta key c selectcursorstart selectcursorend primary n meta key v insertselection primary n meta key iconify n extra setting xaw scrollbar see full reference available recources scrollbarbackground scrollbarforeground scrollbarborderwidth scrollbarshadowwidth scrollbarthickness scrollbarminimumthumb scrollbarbackgroundpixmap gradient horizontal endwhite scrollbarborderpixmap gradient horizontal startwhite scrollbartranslations override startscroll forward n startscroll continuous movethumb notifythumb n startscroll backward n movethumb notifythumb n btnup notifyscroll proportional endscroll make xterm make test xterm xterm applicable xquartz preference input check emulate three button mouse pasteboard enable syncing update pasteboard clipboard change update clipboard pasteboard change update primary middleclick pasteboard change uncheck update pasteboard immediately new text selected xterm mouse accessible menu bar nt like use xterm tb instead menu xterm available even menu bar access setting ctrlclick mouse button activate main menu ctrlaltclick activate vt option menu ctrlcommandclick activate vt font menu paste content pasteboard fnalt paste copy simply select text use xquart menu item edit copy using ked xterm enables use gold command key mapping escape code respectively editing file ked following keypresses allow user exit quit ked press gold command command prompt type quit exit press enter fnreturn exit like xterm well enough install sudo make installsudo make installti want pdf man page make one groff mandoc xtermps rm xtermps mv xtermps whereever alternatively download macwise terminal set emulate open keyboard remap esop esow initializing storage volume take two command assign initialize assign vol initialize vol initialize sure ydir vol file block free block copy file vol
408,Lobsters,virtualization,Virtualization,How Does the Use of Docker Effect Latency? - High Scalability -,http://highscalability.com/blog/2015/12/16/how-does-the-use-of-docker-effect-latency.html,use docker effect latency high scalability,mechanicalsympathy gil tene azul system gil answer cpu memory io disk io networking hackernews,great question came mechanicalsympathy list many others probably well keep hearing docker greatest thing since sliced bread heard anecdotal evidence low latency apps take hit better answer gil tene vice president technology cto cofounder azul system like stephen curry draining deep transition three gil always counted insight gil answer putting aside question taste style focusing effect latency original question analysis pure mechanical point view pretty simple docker us linux container mean execution o virtualization layer cpu memory optional even default virtualization layer io cpu memory latency point view docker linux container cpu memory latency characteristic pretty much indistinguishable linux thing apply latency behavior linux apply docker want clean consistent low latency thing need nondockerized noncontainerized linux level consistency eg needed keep system whole control hungry neighbor host level docker well needed isolate socket core choose process end expect docker container andor thread within numactling sort directed numadriven memory allocation apply stuff need may seem counterstyle people want deploy docker really interested consistent low latency probably need break toolbox use various cgroups tasksets cool stuff assert control thing laid ifwhen wo nt able tell difference term cpu memory latency behavior dockerized process one nt io disk io io behavior various configuration latency overhead question answer usually end nt know enough disk io behavior option docker talk much pretty sure answer anything throughput latency sensitive storage bypass virtualization volume stuff provide direct device access disk mount point networking networking situation pretty clear want one land anywhere natbridge autogenerated networking stuff deployment probably pay dearly behavior term network latency throughput compared bare metal dedicated nics normal linux however option deploying docker container may different people would like deploy thing provide either lowoverhead essentially zerolatencyoverhead network link docker start host networking andor use dedicated ip address nics much better bridged default go thing like solarflare nics tend common bare metal low latency environment already even kernel bypass dedicated spinningcore network stack thing latency behavior different docker bare metal linux docker userland unit packing lot thing box neither guestosasaunit virtualization sure used often biggest benefit give ability ship around consistent well captured configuration ability develop test deploy exact configuration later turn able easily manage deployment versioning including roll back able cool thing like elastic sizing etc configuration tool puppetchef used achieve similar result bare metal well course assuming truly control everything image ability pack working stuff bunch bit turned appealing know people use virtualization even single guestperhost eg aws instance type probably right people use docker way single container per host case configuration control thing get deployed packing thing smaller footprint low latency thing becomes hurt question docker hurt lot le hypervisor kvm based virtualization come low latency right choice io dedicated nics core device becomes truly invisible hackernews
412,Lobsters,virtualization,Virtualization,Creating the Tamagotchi Singularity,http://spritesmods.com/?art=tamasingularity,creating tamagotchi singularity,building tamagotchi singularity video end result fair example next,building tamagotchi singularity also gave talk project hackaday superconference video available rather watch talk also directly view end result please may know recently moved netherlands shanghai long term great hobby got fair amount stuff china anyway moving meant would nt wait month arrive anymore short term ability build thing took somewhat hit though aside oscilloscope small bit bob thought would hard time getting china left electronic stuff back netherlands idea would able buy stuff anew time hobby project like challenge something technical without actual need finish certain deadline certain stressrelieving aspect certainly enough stress first week china get whole stack permit license paper stamp etcetera order able work live died place live wanted start new project still nt chance rebuy hardware hacking stuff yet around time webcomix xkcd ran strip called tamagotchi hive basically describes sort matrix tamagotchis lot tamagotchis cared artificial intelligence networked live sort virtual world happy rule sort internet saying xkcd comic implemented real life implemented real life fair example already decided chance one next
413,Lobsters,virtualization,Virtualization,OpenBSD Xen support,https://marc.info/?l=openbsd-tech&m=144933933119525&w=2,openbsd xen support,prev list next list next thread openbsdtech xen start xen intfastructure mike belopuhov mike belopuhov com yamori belopuhov com message body prev list next list next thread configure news add list korelogic,prev list next list prev thread next thread list openbsdtech subject xen start xen intfastructure mike belopuhov mike belopuhov com date messageid yamori belopuhov com download raw message body diff nt much hook minimal xen file tree split change top look logically complete ok sysdevpvfilespv sysdevpvxenc sysdevpvxenvarh file changed insertion create mode sysdevpvxenc create mode sysdevpvxenvarh diff git index mainbus disable ipmi pvbus vmware tool pvbus xen hvm domu option pciverbose option usbverbose pchb pci pcihost bridge aapic pci amd io apic diff git sysdevpvfilespv sysdevpvfilespv index sysdevpvfilespv sysdevpvfilespv file devpvpvbusc pvbus needsflag vmware tool device vmt attach vmt pvbus file devpvvmtc vmt needsflag xen device xen attach xen pvbus file devpvxenc xen needsflag diff git sysdevpvxenc sysdevpvxenc new file mode index devnull sysdevpvxenc copyright c mike belopuhov permission use copy modify distribute software purpose without fee hereby granted provided copyright notice permission notice appear copy software provided author disclaims warranty regard software including implied warranty merchantability fitness event shall author liable special direct indirect consequential damage damage whatsoever resulting loss use data profit whether action contract negligence tortious action arising connection use performance software include sysparamh include syssystmh include sysatomich include sysmalloch include syskernelh include sysdeviceh include machinebush include machinecpuh include machinecpufunch include uvmuvmexternh include devpvpvvarh include devpvxenvarh struct xensoftc xensc void xenfindbase struct xensoftc int xenmatch struct device void void void xenattach struct device struct device void void xenresume struct device int xenactivate struct device int struct cfdriver xencd null xen dvdull struct cfattach xenca sizeof struct xensoftc xenmatch xenattach null xenactivate int xenmatch struct device parent void match void aux struct pvattachargs pva aux struct pvbushv hv pva pvahv pvbusxen hv hvbase return return void xenattach struct device parent struct device self void aux struct pvattachargs pva struct pvattachargs aux struct pvbushv hv pva pvahv pvbusxen struct xensoftc sc struct xensoftc self sc scbase hv hvbase xenfindbase sc printf n wire global xensc sc void xenresume struct device self int xenactivate struct device self int act int rv switch act case dvactresume xenresume self break return rv void xenfindbase struct xensoftc sc base regs base base base cpuid base regs regs regs regs memcmp xenvmmxenvmm regs regs base base sc scbase printf new base x base sc scbase base break diff git sysdevpvxenvarh sysdevpvxenvarh new file mode index devnull sysdevpvxenvarh copyright c mike belopuhov permission use copy modify distribute software purpose without fee hereby granted provided copyright notice permission notice appear copy software provided author disclaims warranty regard software including implied warranty merchantability fitness event shall author liable special direct indirect consequential damage damage whatsoever resulting loss use data profit whether action contract negligence tortious action arising connection use performance software ifndef xenvarh define xenvarh struct xensoftc struct device scdev scbase endif xenvarh prev list next list prev thread next thread configure news add list sponsored korelogic
414,Lobsters,virtualization,Virtualization,IncludeOS: a resource efficient unikernel for cloud services,http://www.includeos.org/,includeos resource efficient unikernel cloud service,includeos run application zero overhead view github chat slack tell github readme security pgp key,includeos run application zero overheadincludeos allows run application cloud without operating system includeos add operating system functionality application allowing create performant secure resource efficient virtual machine includeos application boot ten millisecond require megabyte disk memory view github chat slack tell run service includeos linux macos need install includeos however need install dependency depending service run start trying simplest helloworld service service need following dependency conan package manager cmake make nasm clang alternatively gcc linux prebuilt package available clang gcc qemu package psutil jsonschema dependency able build application within minute conan config install http githubcomincludeosconanconfiggit git clone http githubcomincludeoshelloworldgit mkdir buildhelloworld cd buildhelloworld conan install helloworld pr source activatesh cmake helloworld cmake build boot hello hello world booted service look like includeos running hello world o included hello world main returned status detailed instruction see github readme installed suggest looking booting demoexamples familarize system strive make easy create fast useful service code set simple tcp echo service happily talk anyone connecting include o include iostream include netinterfaces void service start get ip stack thats already automatically configured auto inet net interface get setup tcp echo server port echo port auto server inettcp listen serveronconnect auto conn log incomming connection console std cout connection conn tostring establishedn data received echo back conn onread conn auto buf conn write buf network configuration virtual machine reside json file named configjson placed folder look something like depending need net iface config dhcpwithfallback address netmask gateway security security related inquires please send email security includeosorg use pgp key encrypt email project maintained alfred bratterud
415,Lobsters,virtualization,Virtualization,Distributing Command Line Tools with Docker,https://spin.atomicobject.com/2015/11/30/command-line-tools-docker/,distributing command line tool docker,basic using docker isolated local development environment docker command line interface code climate new platform rationale simple example gnu date ubuntu homebrew custom image distributing via docker hub downside code github feedback craft cm,last time covered basic using docker isolated local development environment time like talk docker used distribute command line tool complex dependency portable way go want point first person use docker way another example see command line interface code climate new platform rationale would want distribute command line application container instead running directly host one reason could application complicated setup installation process example application might require lot additional library installed language choice might provide good mean distributing application without first installing developer tool often languagespecific alternative approach using docker distribution mechanism work anything install within linux container simple example gnu date contrived example let say want make use version date distributed ubuntu instead version available o x yes get gnu coreutils contrived example let say want use date get date relative date say next friday using docker run like docker run rm ti date next friday see directly invoke command contained specific image pas argument let take step make wrapper script binbash gnudate wrapper script invoking date within docker image docker run rm ti date save gnudate mark executable put somewhere path invoke like gnudate next friday using wrapper script like invoke docker run allows u distribute application custom image realistic example let assume glibased ruby command line app like distribute user ruby developer docker toolbox installed write dockerfile build image based image like copy rubycliapp app run cd app bundle install entrypoint rubycliapp build image docker build rubycliapp run docker run rm ti rubycliapp help name rubycliapp describe application code synopsis rubycliapp global option command command option argument version global option f flagnamethe name argument describe flag default default help show message switch describe switch version display program version command help show list command help one command using entrypoint argument docker run following image name passed argument application distributing via docker hub actually distribute application way publish custom image docker hub makefile advanced wrapper script makefile prefix usrlocal version install install mkdir p destdir prefix bin install rubycliappwrapper destdir prefix binrubycliapp uninstall rm destdir prefix binrubycliapp docker rmi atomicobjectrubycliapp version docker rmi atomicobjectrubycliapp latest build docker build atomicobjectrubycliapp version docker tag f atomicobjectrubycliapp version atomicobjectrubycliapp latest publish build docker push atomicobjectrubycliapp version docker push atomicobjectrubycliapp latest phony install uninstall build publish rubycliappwrapper binsh rubycliapp wrapper script invoking rubycliapp docker put script path rubycliapp progname basename version helper function guard error errorcode echo error echo progname wrapper version version error code errorcode exit checkcmdinpath cmd cmd devnull error cmd found guard check dependency checkcmdinpath docker checkcmdinpath dockermachine dockermachine active devnull error active dockermachine vm found set mounted volume environment run containerized command exec docker run interactive tty rm volume pwd wd workdir wd atomicobjectrubycliapp version containerbased distribution mechanism application free make use whatever dependency need within linux container use mounted volume allow application access file even socket host could even go far code climate cli take control docker within container download run additional image downside biggest downside approach requires user first docker installed depending application however single dependency docker may much simpler support imagine example dependency multiple library across multiple platform dealing unexpected interaction user system would great situation choose docker another gotcha watch running complex setup confusing keep track file accessible via mounted volume code example also found github feedback actively using approach internal tool build deploy craft cmsbased website right also try approach love hear please leave question comment thanks
416,Lobsters,virtualization,Virtualization,Run containers on bare metal already!,https://www.youtube.com/watch?v=coFIEH3vXPw,run container bare metal already,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature run container bare metal already youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature run container bare metal already youtube
417,Lobsters,virtualization,Virtualization,vmm man page commited,http://marc.info/?l=openbsd-cvs&m=144737722508501&w=2,vmm man page commited,,
418,Lobsters,virtualization,Virtualization,Get started with CoreOS and VirtualBox,https://deis.com/blog/2015/coreos-on-virtualbox,get started coreos virtualbox,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
420,Lobsters,virtualization,Virtualization,Emulation & Virtualization as Preservation Strategies,http://blog.dshr.org/2015/11/emulation-virtualization-as.html,emulation virtualization preservation strategy,lock web site,grateful funding mellon foundation behalf sloan foundation imls allowed spend much summer researching writing report emulation virtualization preservation strategy pdf ccbysa submitted draft last month peerreviewed addressed reviewer comment also available lock web site old enough know better give talk live demo nevertheless presenting report cni fall membership meeting december complete live demo number emulation framework tl dr executive summary report fold recent development emulation framework make possible deliver emulation reader via web way make appear normal component web page remove major barrier deployment emulation preservation strategy barrier remain two important tool creating preserved system image inadequate legal basis delivering emulation unclear clear highly restrictive raise cost building providing access substantial wellcurated collection emulated digital artefact beyond reach barrier addressed emulation play much greater role digital preservation coming year provide access artefact migration even assist migration necessary allowing original software perform evolution digital artefact mean current artefact difficult expensive collect preserve past le suitable migration trend expected continue emulation panacea technical scale intellectual property difficulty make many current digital artefact infeasible emulate feasible even better tool viable legal framework emulation expensive migrationbased strategy important reason failure current strategy collect preserve majority target material economic resource available inadequate bulk resource expended migration emulation strategy ingest especially metadata generation quality assurance risk diverting resource emulation higher perartefact ingest cost exacerbate lack resource area requiring work emulation achieve potential preservation strategy include standardization format preserved system image way obtained emulator mean emulation exposed reader would enable interoperability emulation component aiding contribution support opensource community improvement tool associating technical metadata preserved software enable emulated technical metadata database upon depend would reduce cost preserved system image clarification possible relaxation legal constraint creation provision access collection preserved system image would encourage institution collect software
421,Lobsters,virtualization,Virtualization,Xen Patches 7-Year-Old VM Escape Hypervisor Vulnerability,https://threatpost.com/xen-patches-7-year-old-vm-escape-hypervisor-vulnerability/115206/,xen patch vm escape hypervisor vulnerability,privacy policy,administrator personal data threatpost inc unicorn park woburn detailed information processing personal data found privacy policy addition find message confirming subscription newsletter
422,Lobsters,virtualization,Virtualization,5 Ready-made OSS Docker Images,https://deis.com/blog/2015/ready-made-open-source-containers,readymade os docker image,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
425,Lobsters,virtualization,Virtualization,Why I'm Excited About Docker,http://deis.com/blog/2015/why-excited-about-docker,excited docker,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
426,Lobsters,virtualization,Virtualization,DockerCon 2015 and the Future of the Container Technology,https://deis.com/blog/2015/dockercon,dockercon future container technology,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
427,Lobsters,virtualization,Virtualization,...mobile phones [CPUs] are the future of the datacenter,https://medium.com/s-c-a-l-e/a16z-partner-peter-levine-on-why-mobile-phones-are-the-future-of-the-datacenter-ecf39655672e,mobile phone cpu future datacenter,move mobile architecture datacenter new technology emerging result look five year ago broadly big data cloud computing lot evolution lately sound like feasible vision apps still cloud service,move mobile architecture datacenterwhat new technology emerging result look five year ago broadly big data cloud computing lot evolution latelythose trend mentioned thing one looked five year ago skate today puck think skating puck five year think thing like machine learning example natural extension analytics big data done way software inherently becomes intelligent use data starting deploy machine learning opposed business intelligence one area might take offthere also interesting trend relating relationship datacenters endpoint computing look back history computing started mainframe terminal pc work station became prevalent computing moved edge application took advantage edge computing cpu processing power edge cloud computing brought thing back center ebb flow enterprise centralized versus distributedi think proliferation mobile device eventually internet thing literally supercomputer pocket supercomputer hang telephone pole light bulb latent capacity used application running endpoint change dynamic cloud computing like pc think going profound shift computing done edge opposed always relegating back datacenterthat sound like feasible vision apps still cloud servicesi starting see seed new project starting look think early see world endpoint distributed computing becomes popular like saw corporate shifted mainframe onto workstation pc hot project right yet starting see university work done areathen discussion happens datacenter architecture believe mobile phone next supercomputer imagine datacenter modeled literally hundred thousand million mobile phone screen million lightweight mobilephone processor datacenter boundary datacenter endpoint amorphous blob stuff application move around time see commonality architecture application become effective model running apps thing boundary datacenter endpoint may lot le clear today boundary datacenter endpoint amorphous blob stuff application move around itthat may futuristic look past trend think likely could something like pc supply chain ate mainframe believe mobile supply chain eat datacenterif sitting somebody suggested ibm pc architecture processor would become basis datacenter computing people would think crazy two floppy disk ram stuff happened intel architecture began pc become standard datacenter
429,Lobsters,virtualization,Virtualization,How To Set Up A Small SmartOS Server To Do Big Things,http://timboudreau.com/blog/smartos/read,set small smartos server big thing,netbeans,tim boudreau noted technology consultant evangelist author broadly known leadership sun microsystems netbeans worked tim remark technical chop passion challenge rare gift great communication former troubadour pretty tough come bad rock lyric real renaissance programmer
430,Lobsters,virtualization,Virtualization,Container Camp London 2015 (Playlist),https://www.youtube.com/playlist?list=PLcHZXHMeDzxUrNpD2Tms-zrZn9etw6JcQ,container camp london playlist,,
431,Lobsters,virtualization,Virtualization,Mercury: Hybrid Centralized and Distributed Scheduling in Large Shared Clusters,http://research.microsoft.com/pubs/238833/mercury-tr.pdf,mercury hybrid centralized distributed scheduling large shared cluster,,datacenterscale computing analytics workload increasingly common high operational cost force heterogeneous application share cluster resource achieving economy scale scheduling large diverse workload inherently hard existing approach tackle two alternative way centralized solution offer strict secure enforcement scheduling invariant eg fairness capacity heterogeneous application distributed solution offer scalable efficient scheduling homogeneous application argue solution complementary advocate blended approach concretely propose mercury hybrid resource management framework support full spectrum scheduling centralized distributed mercury expose programmatic interface allows application tradeoff scheduling overhead execution guarantee framework harness flexibility opportunistically utilizing resource improve task throughput experimental result show gain productionderived workload benefit translated appropriate application operator policy job throughput job latency improvement implemented currently opensourcing mercury extension apache hadoop yarn
432,Lobsters,virtualization,Virtualization,Cross-VM RSA Key Recovery in a Public Cloud,https://eprint.iacr.org/2015/898.pdf,crossvm rsa key recovery public cloud,,obj length filter flatedecode stream
433,Lobsters,virtualization,Virtualization,Operations without the Operating System,https://speakerdeck.com/garethr/operations-without-the-operating-system,operation without operating system,fewer faster,copyright fewer faster llc slide content description owned creator
434,Lobsters,virtualization,Virtualization,Running Rust on the Rumprun unikernel,https://gandro.github.io/2015/09/27/rust-on-rumprun/,running rust rumprun unikernel,running rust rumprun unikernel rust without standard library rumprun unikernel platform rump kernel cargo getting started building rumprun tutorial building rumprun unikernels building rust crosscompiler contains patch rumprunpackages instruction build rust package compiling baking rust application cratesio acknowledgment anttikantee,running rust rumprun unikernel sep rust programming language able run baremetal without standard library quite however rust application depend std crate therefore still need full operating system run rumprun unikernel platform come play allows build posix application bootable singlepurpose image unikernels tailored run single application come without footprint fullfeatured operating system make great tool application virtualization supported platform rumprun include kvm also run image baremetal hardware rumprun based rump kernel reuses netbsd libc driver component provide posixy interface interface rust standard library built upon last couple day working rumprun support rust deploy rust application rumprun unikernel toolchain set single cargo command need turn rust application rumprun unikernel image screenshot example tcpip server written rust built cargo running rumprun unikernel qemu note running rust baremetal without standard library different running rust baremetal rumprun rust nostd feature mean write driver environment rust rumprun hand already provides productionquality netbsd driver standard library choose subsystem driver want compile image significant portion work spent making std work correctly netbsd side effect project also compile rust binary getting started remaining part blog post briefly guide necessary step build rust application rumprun unikernel image build rumprun unikernel platform provides tool library build rumprun unikernels set rust crosscompiler standard library rumprun allows compile binary later bake rumprun unikernel compile rust application using rust crosscompiler bake generated rust binary rumprun unikernel image run hypervisor baremetal machine choice building rumprun first need build rumprun repository provides crosscompile tool needed following step check excellent tutorial building rumprun unikernels instruction recommend following whole tutorial hurry section building rumprun platform need continue next step building rust crosscompiler rust source tree already contains patch needed build rumprun enable rumprun target provide script building rust crosscompiler std crate automatically rumprunpackages repository follow instruction build rust package compiling baking rust application everything working properly building rust application unikernel image easy running cargo rumpbake aware though time writing crate cratesio proper netbsd support yet might fail compile execute congratulation set build rust application rumprun unikernel image acknowledgment project taking existing piece software putting together without awesome previous work rust rump kernel hacker could exist special thank go anttikantee support along way
436,Lobsters,virtualization,Virtualization,Containers steal the show at VMworld,http://sdtimes.com/containers-steal-the-show-at-vmworld/,container steal show vmworld,related container news vmworld smart datacenter project,container thing anyone could talk vmworld week yet discussion great rather discussion use stuff enterprise vmware distinct answer run container inside virtual machine great stopgap answer container system world mature add security control gain governance capability related container news vmworld kit colbert cto cloudnative apps vmware said security major concern already container seeing lot exploit come woodwork around basic container might calm time challenge linux container wide interface change issue around container identity said colbert said vmware team working docker solve problem docker support notary solve working notary guy working project lightwave container authentication certificate management said colbert added container capability introduced vmworld help shorter term offer vsphere integrated container run wrapped inside vm also enables validate audit lot tooling built around vms leveraged vsphere container model longer run however least one detractor saying running container inside virtual machine miss point entirely late last year joyent began releasing source code smart datacenter project software run hosting platform bryan cantrill cto joyent said platform known joyent triton us docker directly effectively eliminates need install linux distro run virtual machine run docker virtualize docker cli endpoint said entire datacenter look like single docker host longer paying vm tax belief container secure solve security problem solve network problem truly join container revolution container stuck birth canal vm substrate past joyent tied solaris model hosting using dtrace zfs zone still included joyent stack cantrill said company realized year half ago find way allow user run unmodified linux binary decidedly solarislike infrastructure result said joyent able bring full docker applicationhosting support platform well eliminate need virtual machine entirely seen running container metal infrastructure said cantrill triton pick docker running metal linux metal cloud premise
438,Lobsters,virtualization,Virtualization,OpenBSD native virtualization support,http://marc.info/?l=openbsd-tech&m=144104398132541&w=2,openbsd native virtualization support,prev list next list next thread openbsdtech virtualization support mike larkin mlarkin azathoth net azathoth net message body http wwwopenbsdfoundationorgdonationshtml http wwwopenbsdorg prev list next list next thread configure news add list korelogic,prev list next list prev thread next thread list openbsdtech subject virtualization support mike larkin mlarkin azathoth net date messageid azathoth net download raw message body tl dr native hypervisor coming stay tuned last month working hypervisor openbsd idea started year ago playing around time time thing really started take shape around time brisbane hackathon earlier year development accelerated openbsd foundation generously offered fund project could focus earnest point think made sufficient progress public announcement order also reached point think developer step help much gooey bit core vmm functioning way want presently vmm code built capable launching kernel asking root filesystem nt much however getting point invovled building scaffolding needed finish rest like stated people easily help left basically virtio emulation disk network interface one might ask port one hypervisors instead rolling scratch fair question however various technical reason choosing port existing vmm nt make whole lot sense example baking support thing implementation nt care namely support shadow paging nested virtualization support legacy peripheral etc trying backfit support thing another hypervisor would probably hard building ground inevitable question q os run start os support virtiobased device cpu goo done basically across os get part finished later see expose place qemu attach maybe mimic kvm run legacy os os require biosuefi boot support legacyfree mandate vmm q ready hard say hope end october promise lot also depends much help get writing virtio backends q cpu requirement amd intel cpu support hardware virtualization svm amd vmx intel cpu nt support rvi ept use shadow paging q o requirement core tool vmd vmmctl main vmm vmm built base sufficient run virtio based guest without additional software requirement q yuck yes help find bug urge review last dozen commits another reason important question q help would likely time work project past month generous sponsorship openbsd foundation donation made possible project like help donating think hypervisor openbsd something like take advantage urge go make donation right http wwwopenbsdfoundationorgdonationshtml finally sample boot enable vmm mode ala apmapmd vmmctl e entered vmm mode start vm vmmctl c attach vm console cu l exit save vapa exit load vapa entry load vapa vmd new vm id created loading bit kernel warning bcopy elf kernel load supported warning bcopy elf kernel load supported mark start mark entry mark nsym mark sym mark end mark random mark erandom vmd vcpu run thread vm launched vcpurunvmx yielding cpu vmd waiting thread vcpurunvmx yielding cpu vcpurunvmx yielding cpu loading loading availstart availend firstavail bsd elf symbol table valid bad magic symbol table format found copyright c regent university california right reserved copyright c openbsd right reserved http wwwopenbsdorg openbsd generic mon aug pdt mlarkin miskatonicazathothnet vmd pit bit counter io supported rtc bios diagnostic error ff clo ckbattery romcksum configunit memorysize fixeddisk invalidtime real mem avail mem root target root acpi configured uniprocessor intel r core tm cpu fpu vme de pse msr pae mce apic sep mtrr pge mca cmov pat cflush d mmx fxsr sse s htt pbe pclmul dscpl xtpr pcid popcnt deadline aes avx rdrand hv itsc fsgsbase smep e rms openbsd vmxhandlecpuid unsupported bus port irq fifo console vmm configured vmxhandlecr mov nvram invalid checksum root target root target root device prev list next list prev thread next thread configure news add list sponsored korelogic
440,Lobsters,virtualization,Virtualization,"""wow such container"" - the ins and outs of containers on Linux",http://doger.io/,wow container in out container linux,faq implementation link security networking implementation freebsd solaris openvz fakeroot ut pid mount uid ipc net syslog audit cgroup afnet device lsm seccomp mode selinux simulating latency virtual ethernet bridging virtual ethernet pipe bridge vlans macvlans vxlan openflow hyperspace veth bridge raw veth veth bridge macvlan vlans veth bridge vxlan openflow lxc git systemdnspawn libvirtlxc lmctfy psd pflask contain mbox firejail lwn review criu rocket coreos app container spec open container spec bocker vagga oz libct omochabako beamwhale lxcfs provide fake cgroups namespaced program dummy proc entry isolation asylum hammerhead asylum deploy igor etcd etcpy etcd butter linux vservers openvz freebsd jail solaris container smartos mininet warden garden anbox mount pid mount pid pid uid,page attempt document in out container linux restricted programmer looking implement container use container like feature code also sysadmins user want get handle container work hood user looking know hit faq section programmer implementation section link section going useful recommended sys admins read security networking part perhaps take look different implementation available rather take nothing approach container eg freebsdsolarisopenvz native linux container support allows unshare specific resource host mixed matched various way produce interesting combination thing testing network setup preventing information leakage eg shared hosting webservers testing o build eg debootstrap even used provide complete fakeroot replacement ut allows different hostname container pid hide process outside namespace process namespace calling shutdown pid namespace perform shutdown process namespace linux mount allows group process mount unmount filesystems change visible outside namespace uid allows give process root inside namespace mapped normal user interacting process outside namespace eg accessing file ipc allows separate space ipc resource semaphore lock net allows process networking stack different interface firewall routing table syslog see ksyslog message belong namespace eg dmesg audit allows namespace see message audit subsystem apply namespace cgroup allows namespacing cgroups giving separate hierarchy afnet liteweight form network namespaces centered around limiting devicesaddresses bind call bind also additional proposed namespaces yet linux device allow hotplugging device container causing right signal passed container recognize device additionremoval lsm namespacing linux security module allowing namespace apply eg selinux security policy applies namespace container commonly thought security mechanism much way chroot also mentioned wrong way think container lead astray also potential compromise namespaces part container isolation mechanism used prevent information one namespace leaking another inadvertently however prevent intentional leakage eg filesystem mounted multiple container one thing consider container linux kernel shared multiple container namespace aware rootkit compromise one container able infect container want container reduce attack surface case instead give multiple instance attack surface unfortunately one size fit security solution implementing container need mix match feature multiple security subsystem order secure container attack main one combined cover base listed seccomp mode used filter individual syscalls filter based argument passed syscall mknod syscall good example dynamic device support yet kernel static dev populated udev disabled another good example mount used situation escape container selinux evaluating multiple option space found selinux seems clear winner multicategory security used prevent compromised container accessing resource another container information one container leak another surprisingly simple set capability capsysadmin tend overpowered many capability make sense context container disabled perfect example capmacadmin capmacoverride allow disable selinux equivalent protection cgroups resource limiting cgroups handy device cgroup handy restricting container device node time may want hand read access dev node root int container could possibly change permission cgroup enforces second level check overridden security subsystem linux able implement overlapping security model still resilient one feature unavailable eg seccomp selinux cgroups used limit device node created namespace linux without fair share security vulnerability notably around user namespaces feature used get around restriction placed user list cve reported linux kernel well preemptive patch highlight potential security complication namespaces introduce linux prior contained error driver code manifest network namespaces turned changing namespace mapping require privilege linux prior contained do via network namespaces linux prior allowed mismatched args passed clone cause privilege escalation info available linux prior vulnerable chrooting alternate privileged namespace linux prior vulnerable memory leak creating user namespace could cause do linux prior filesystem capability namespace aware could used raise privilege escalate outside container linux prior prevent removal mntlockreadonly remount allowing restriction bypassed mount command linux prior prevent removal mntnodev mntnosuid mntnoexec mntatimemask remount bind mount allowing restriction bypassed mount command linux prior allowed dropping supplementary group allowing acl bypass dropping restricted group active set current linux release contained timing attack allowed attacker ptrace process entering namespace setuid uid valid container potentially allowing escape container networking one easiest way get started namespaces linux command native support via setns link command netns command create destroy namespaces used spin environment testing network topology arbitrary complexity create process behind virtual interface simulating latency list virtual networking feature linux used conjunction container linux simple us knowing virtual ethernet interface bridging suffice looking advanced networking setup detailed may want familiar option listed virtual ethernet pipe easiest think virtual version ethernet crossover cable join container bridge implement layer switch software letting port real virtual communicate back forth vlans used split bridgeswitch multiple smaller switch use single interface connect multiple separate location network without multiple real interface macvlans creates new interface different mac address allows container direct access real ethernet interface vxlan vlans steroid allows vlan expand across datacenters openflow software defined networking sends packet header userspace discover packet sent allows new flexible switchingrouting option hyperspace folding manipulating space dimension one send signal remote host instantaneously downside known implementation physic may allow date linux container setup used veth bridge model detail model suffices simple us scale fairly well may senarios slightly diffrent setup provides additinal benifits eg multi tennancy private network raw veth setup handy small setup local networking required eg testing wish routefirewall connection container internet involves veth pipe host container firewalling routing done host networking stack veth bridge extension instead routing packet container host networking bridge used instead virtually connect together creating private network host real ethernet connection added bridge container connected bridge access machine host advantage easy networking setup container via dhcp compared setup usually best served explicitly setting ip address end pipe macvlan due limitation networking card setup suitable small amount container card hard limit many mac address listen network time number exceeded switch software processing incoming packet regardless destined mac address system flip side macvlans lowest processing overhead networking setup listed small amount container pushing large number packet eg may something consider good example multiple border router container route packet container internally vlans time collection container need private network see server network segment eg isolating apps different sensitivity grouping similar server together vlans used conjunction veth bridge shown vlans added main host network interface instead adding main network interface bridge vlan interface instead added cause traffic container bridge go main network interface tagged specific vlan vxlan setup similar allow drop bridge part instead vxlan interface container massively simplifying setup work addition vxlan lends easier migration compared vlan setup need ensure vlan setup destination machine move container new destination continue running another advantage setup worth vlans compared vlan bit allowing dramatically private network many case nt even get use full bit due support lacking switch downside however need multicast capable network openflow fully software defined network capable sending packet sent old location new location migration node new host reconfiguring network fly based internal network usage stage likely need help tell networking example user google implement network namespaces good way get started ip netns lxc git one early implementation container feature rich systemdnspawn systemd chroot replacement extra magic libvirtlxc container support libvirt related lxc mentioned lmctfy open source version google container implementation psd nice new single file c implementation pflask another simple c implementation feature psd contain c implementation compatible etcsubuid delegating uids container mbox novel approch process containment using seccomp ptrace firejail process containment monitoring security lwn review criu checkpoint restore userspace allows snapshotting container rocket coreos implementation container coreos app container spec coreos container spec configs filesystem image open container spec linux foundation open container spec supersedes appc bocker short simple container solution written bash vagga daemonless container written rust oz restrict apps using container seccomp capability libct container managment library omochabako simple toy container implementation beamwhale simple implemntation written erlang lxcfs provide fake cgroups namespaced program dummy proc entry isolation gen container program proof concept asylum gen container program kitchen sink hammerhead gen container program streamlined chroot replacement asylum deploy container startup beacon igor run plugins based inotifyetcd event etcpy python library talk etcd butter python library interface feature linux fsnotify inotify linux vservers predates namespace support linux appears use namespace feature openvz predates namespace support linux appears use namespace feature lot work implementing namespaces freebsd jail container like support freebsd predates linux support solaris container container like support solaris predates linux support smartos us solaris zone kvm build hypervisor container vms mininet spin large virtual network testing using namespaces warden ruby container implementation namespaces backend garden go container orchestration system anbox containerized android running linux container container collection namespaces mixed cgroups normal linux networking normal linux mechanism allows host multiple instance userspace utility use interact every day single kernel similar manner vhosting webserver allows host multiple website whats namespace namespace specific type resource split partitioned eg network interface process id user id filesystem good example everyone familiar chroot command allows present subset file filesystem set process hide folder child process launch chroot namespace equivalent see exactly filespidsinterfaces process launched namespace one useful depends emulating old style visualization taking standard linux install containerizing correct anwser need emulate multiple node pretend network machine net namespace mount namespace need mount tmpfs lock dir daemon sufficient allow reuse existing host filesystem bootstraping new installs distro pid mount namespaces sufficient dont want uid translation want ensure shuting container shut host hence pid namespace using thin tool thing like continuous integration multiple distros without maintaining multiple runner buildbots pid namespaces hide process prevent errant process causing damage chroot switch distro image sufficient however process requires root testing uid namespaces may prove handy replacement mean nt need run server process root
441,Lobsters,virtualization,Virtualization,Boycott Docker,http://www.boycottdocker.org/,boycott docker,error page displayed please contact service provider detail,error page displayed please contact service provider detail
442,Lobsters,virtualization,Virtualization,Just-in-Time Summoning of Unikernels,http://www.skjegstad.com/blog/2015/08/17/jitsu-v02/,justintime summoning unikernels,jitsu unikernel demanddriven cloud unikernel per url arm device mirageos rumprun irmin readme overview work masking boot delay recommended timeout value synjitsu xenstore synjitsu synjitsu three way handshake arp gratuitous arp paper mailing list irmin jitsu irmin new backends tell mailing list,jitsu justintime summoning unikernels prototype dns server boot virtual machine demand jitsu receives dns query virtual machine booted automatically query response sent back client virtual machine unikernel boot millisecond available soon client receives response client look like whole time jitsu used run microservices exist resolved dns perhaps future facilitate demanddriven cloud extreme scaling unikernel per url jitsu also used boot unikernels millisecond arm device new version jitsu released summarize old new feature first version support mirageos rumprun unikernels us distributed irmin database store state full list change available jitsu demo hosting mirageos unikernel run nginx rumprun demo time may occasionally unstable unavailable also used test new feature technical detail date example configuration mirageos rumprun see jitsu readme overview work following figure show happens jitsu receives dns query unikernel currently running first client sends dns request jitsu request received checked list domain mapped unikernels match jitsu boot corresponding unikernel vm unikernel started booting jitsu sends dns reply client containing future ip address unikernel dns response received client initiate tcp connection ip address dns response dns reply jitsu contains timetolive ttl value tell client long reply valid feature built dns allows query result cached client name server ttl expires client send new dns query jitsu verify cached response still correct using low ttl value typically le hour jitsu keep track often unikernel used may automatically stop unikernels requested within certain time period default unikernels stopped x ttl timeout masking boot delay jitsu boot unikernel return dns response race client unikernel unikernel able respond tcp request within time take send dns reponse back client client attempt connect happens unikernel unable complete boot process time problem illustrated figure booted jitsu unikernel roundtriptime rtt finish booting time take dns query go back client tcp handshake initiated syn packet example typical boot time mirageos unikernel arm m likely unikernel ready time first syn packet lost tcp able recover retransmitting syn packet requires timeout retransmit recommended timeout value take second longer client finally connect mask delay avoid syn retransmission jitsu support three alternative mechanism delay dns response fixed timeout eg m let unikernel complete boot process wait unikernel signal jitsu sending dns response cache incoming syn packet behalf unikernel synjitsu simplest solution set fixed delay depending application delay hundred millisecond may acceptable client web application example may noticeable mechanism require modification unikernel downside delay fixed even unikernel start faster expected still delay client dynamic approach let unikernel notify jitsu ready currently done waiting key appear xenstore xen shared information store write key unikernel need working xenstore client implementation jitsu watch xenstore immediately send dns response key appears dynamic mechanism nt allow jitsu send dns reply unikernel booting making delay longer necessary able use dynamic delay send response back unikernel booting jitsu support running separate unikernel service cache incoming syns unikernel ready call synjitsu synjitsu synjitsu unikernel service handle tcp connection behalf unikernels completing boot process synjitsu always running capture tcp syn packet appear network bridge nt matching unikernel yet syns stored xenstore database new unikernel booted check cached syns match mac ipaddress xenstore every syn find processed received network trigger synack complete tcp three way handshake unikernel finished booting incoming syns ignored synjitsu go directly unikernel regular network traffic process shown dns query already sent jitsu dns unikernel booted reply sent back client client attempt send tcp syn packet initiate tcp connection unfortunately unikernel ready yet would unable reply synjitsu silently store syn remaining millisecond unikernel completes boot process unikernel ready retrieve syn send synack back client synjitsu work properly also handle arp traffic arp used find mac address match ip address local network incoming tcp syn reach destination router usually local gateway know mac address sent unikernel still booting unable announce address ip fact ip really use yet compensate jitsu tell synjitsu mac ipaddress every unikernel currently booting synjitsu sends gratuitous arp packet announce network handling specified mac ip soon real unikernel finish booting sends gratuitous arp packet notify network ready synjitsu currently highly experimental feature requires modified mirageos tcpip stack information running synjitsu see paper ask mailing list source code available irmin jitsu irmin distributed database gitlike feature full history change support branching merging jitsu internal state stored irmin database inspected using irmin tool database used store state demonstration shown irmin tree xvda xvdb nginxbin rumpxl jsoncfg destroy false mirwwwxen wwwxl datastatus destroy false datastatus jitsu database currently read future plan allow client create branch database perform change merge jitsu master branch used control jitsu running may example allow unikernels modify boot dns configuration irmin database also make easier split jitsu smaller component cooperate allow feature run within separate unikernels eg dns new backends jitsu includes support several backends used manage unikernel vms original libvirt backend still used default libxl xapi also supported well tested encounter problem new backends please report tell post mainly focused jitsu interested unikernels want information writing hosting web site one link may useful also many mirageos application example available example kept date latest library experiment jitsu please let u know went mailing list thanks daniel amir chaudhry comment previous version post
443,Lobsters,virtualization,Virtualization,The state of the art of application restrictions and sandboxes and its shortfalls [2012],http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.300.4042&rep=rep1&type=pdf,state art application restriction sandbox shortfall,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream b nf e v
444,Lobsters,virtualization,Virtualization,Q&A with Bryan Cantrill: Running Containers on Bare Metal with Triton,http://www.infoq.com/news/2015/08/cantrill-containers-bare-metal,q bryan cantrill running container bare metal triton,bryan cantrill joyent triton running aground debugging docker production building scaling container driven cloud infrastructure peril promise early adoption arriving year early container may obvious security issue infoq understand joyent working container technology quite time could tell u please zone namespaces infoq joyent website state user triton elastic container infrastructure expect bare metal performance scale virtual machine exactly mean container actually run bare metal infoq offering compare like ibm softlayer packet offer bare metal server management api infoq joyent website state key differentiator triton security networking introspectiondebugging anything else would like mention infoq triton relate work container orchestration scheduling platform mesos kubernetes docker suite enginecomposeswarm etc infoq would expect typical workflow tooling development production docker triton blueprint building apps based couchbase deploy couchbase infrastructure container infoq cloud native computing foundation cncf combination open container initiative oci seems quite interesting founding member one three initial toc member cncf ambition organization infoq many thanks taking time answer question anything else would like add developer faq page,infoq recently sat bryan cantrill cto joyent asked thought container technology running docker bare metal joyent driving technical innovation within space development triton platform cantrill regular software development operationsfocused conference circuit recently presented running aground debugging docker production dockercon building scaling container driven cloud infrastructure container camp sf peril promise early adoption arriving year early container oreilly software architecture conference frequent topic talk benefit running container bare metal advantage may obvious ie removing performance overhead running within virtual machine several outstanding security issue infoq asked cantrill thought issue also recent work joyent infoq understand joyent working container technology quite time could tell u please cantrill joyent using container highperformance alternative hardware vms almost ten year apparent u early operational economic benefit far outweighed vms could ever provide uniquely cloud offer secure elastic bare metal container security make possible traced back zone technology developed sun microsystems released open source open solaris many aspect container linux still new user namespaces example fully supported distros day building mature foundation zone open solaris joyent smartos container hypervisor offer strengthened security enhanced resource isolation decade ahead approach triton bring maturity security zone docker linux easily fire container triton docker client want benefit o virtualization without dockerize workload offer certified ubuntu support canonical well centos debian containernative linux option infoq joyent website state user triton elastic container infrastructure expect bare metal performance scale virtual machine exactly mean container actually run bare metal cantrill infrastructure container docker container really run bare metal triton offering higher performance better utilization hardware io intensive workload performance benefit dramatic combination better performance higher utilization reduces cost customer provider especially interesting prospect customer operating private cloud run container bare metal compute infrastructure built secure foundation zone free u dependency vendor vms infoq offering compare like ibm softlayer packet offer bare metal server management api cantrill number bare metal provider allow provision whole server triton container infrastructure offer bare metal performance elasticity ca nt matched provider container small megabyte scaling gigabyte even gigabyte flexibility use container offer exactly performance price need triton also offer rich integrated set infrastructure automation tool streamline provisioning container including networking storage well imaging exactly software need public cloud mean get bare metal performance elasticity security expect hardware virtual machine private cloud mean get newly racked compute node serving real workload little second bottom line bare metal get bare metal still need fill gap metal application create platform running managing container triton infoq joyent website state key differentiator triton security networking introspectiondebugging anything else would like mention cantrill simplicity triton delivers operational robustness area security networking debugging real trick way make deploying operating containerbased architecture simple additionally solution open source available onpremise enterprisesupported software cloud service infoq triton relate work container orchestration scheduling platform mesos kubernetes docker suite enginecomposeswarm etc cantrill mesos kubernetes offer great tool help manage application lifecycle composition think docker suite grow offer similar capability nt solve infrastructure problem scaling load balancing container swapping new version old important problem container run manage underlying compute node deliver storage network compute application draw clear line infrastructure application framework goal provide best infrastructure underneath application orchestration tool choice today offer best production environment docker container docker suite tool working fast kubernetes mesos infoq would expect typical workflow tooling development production docker triton cantrill one reason fell love docker along many devs make development laptop easy worked hard make sure deploying application cloud easy docker run laptop adding docker compose swarm make even easier take look screencast blueprint building apps based couchbase sophisticated networking host management feature cloud make deployment easy scaling easier remember nt dockerize app enjoy bare metal container performance see alternative example deploy couchbase infrastructure container well infoq cloud native computing foundation cncf combination open container initiative oci seems quite interesting founding member one three initial toc member cncf ambition organization cantrill think broad adoption containernative architecture accelerate key vendor open source project space work together articulate opinionated reference architecture cncf provide forum creating kind collaboration example triton combined cncf management software component deliver vendor neutral open source containernative complete stack demo pocs premise production deployment containernative solution triton natively support standard api set cncf management software component choice preserved user may want substitute proprietary run time environment providing easy ramp cloud native majority market value anything else speed simplicity infoq many thanks taking time answer question anything else would like add cantrill sum triton software turn commodity hardware hyperconverged infrastructure optimized securely run containernative architecture bare metal speed triton easy deploy laptop server rack server scale support demand multiregion public cloud leverage triton joyent public cloud service additional information joyent triton found developer faq page within joyent website
446,Lobsters,virtualization,Virtualization,Sleepwalking into a Monoculture and Lock-in with Linux Containers,https://www.flockport.com/sleepwalking-into-a-monoculture-lock-in-with-linux-containers/,sleepwalking monoculture lockin linux container,build solid foundation simplify infrastructure automated build,build solid foundation simplify container management benefit standard app environment across bare metal vms container simplify infrastructure use standard o environment network tool terminology magic container focus apps automated build build demand define deploy container network storage load balancer across server
447,Lobsters,virtualization,Virtualization,Why Docker is Not Yet Succeeding Widely in Production,http://sirupsen.com/production-docker/,docker yet succeeding widely production,dockercon docker production theme conference talk docker shopify year scale reach image building creating system scratch dockramp packer undergo work future work merged like runtime garbage collection remove old image host opensourced distribution roadmap iteration speed state core experimental release dockercon europe hear articulated umbrella plumbing mascotted favorite marine mammal logging fluentd support logging driver hardly easy experimental support outofprocess plugins secret secret machine securely vault keywhiz ejson year half ago post filesystems cow great lwn series union filesystems aufs btrfs overlayfs quite stable fast u lot le memory proposed rejected reliance edgy kernel feature fair amount memory example hardening acknowledging dead child process group killing entire group security vendor still run container virtual machine someone said linux mailing list perfect middleground cause concern libtrust notary new distribution layer image layer transportation image build image transportation binary diffing runtime image distribution worked actively currently conclusion shooting star paas talk dockercon eu talk dockercon,docker momentum increasing week clearly touching real problem however many production user today pro outweigh con docker done fantastically well making container appeal developer development testing ci yet disrupt production light dockercon docker production theme like discus publicly challenge docker yet overcome see wide adoption production use case none issue mentioned new exist github form already discussed conference talk docker team post explicitly point longer issue instance new registry overcomes many shortcoming old many area remain problematic mentioned believe follows important issue address short term enable organization take leap running container production list heavily biased experience running docker shopify running core platform container year scale technology moving fast docker impossible keep everything current please reach spot inaccuracy image building building container image large application still challenge rely container image testing ci emergency deploys need image ready le minute dockerfiles make almost impossible large application easy use sit abstraction layer high enable complex usecases outofband caching particularly heavyweight applicationspecific dependency accessing secret build time without committing image full control layer final image parallelization building layer people need feature large application many prerequisite fast build configuration management software like chef puppet widespread feel heavy handed image building bet system phased existence current form within next decade container however many application rely provisioning deployment orchestration dockerfiles realistically capture complexity managed config management complexity need managed somewhere shopify ended creating system scratch using docker commit api painful wish nobody eager throw unblock go length wrangle container production going emerge space unclear currently area much exploration done one example dockramp another packer docker engine undergo work future split building primitive adding file setting entrypoints client dockerfile work merged already make easier opening field experimentation configuration management vendor hobbyist company given history provisioning system unrealistic believe standard settle problem like runtime horizon scalable image building quite unclear knowledge nobody actively iterating unfortunately way year garbage collection every major deployment docker end writing garbage collector remove old image host various heuristic used removing image older x day enforcing image present host spotify recently opensourced wrote long time ago well understand tough design predictable ui absolutely needed core people discover need accident production box scream space eventually run image docker registry overflowing large image however problem distribution roadmap iteration speed state core docker engine focused stability release little work done lower barrier entry production uptake developing public mental model container integral docker success rightly terrified damaging iteration speed suffers ux change go excessive process docker feature experimental release spearheaded networking storage plugins feature explicitly marked ready production may pulled core undergo major change anytime company already betting docker great news allows core team iterate faster new feature concerned breaking backwards compatibility minor version spirit best design still difficult company modify docker core either requires fork slippery slope maintenance burden getting accepted upstream interesting patch often laborious announcement plugins strategy problem clear make every opinionated component pluggable finally showing fruit battery swappable included philosophy first introduced although rather vaguely dockercon europe dockercon june great hear articulated umbrella plumbing top priority team importantly personally plumbing mascotted favorite marine mammal walrus future finally look promising remains pain point today past two year logging one example area could profited change earlier logging hardly glamorous problem nonetheless universal one currently great generic solution wild map tail log file log inside container log host mount log host syslog expose via something like fluentd log directly network application log file another process send log kafka support logging driver merged core however driver accepted core hardly easy experimental support outofprocess plugins merged disappointment ship logging driver believe planned find official record point vendor able write logging driver sharing within community trivial longer larger application resort engineering custom solution secret category le captivating widespread pickle find secret people migrating container rely configuration management provision secret machine securely however continuing path configuration management secret container clunky another alternative distributing image pose security risk make difficult securely recycle image development ci production pure solution access secret network keeping filesystem container stateless recently nothing containeroriented existed space recently two compelling secret broker vault keywhiz opensourced shopify developed ejson year half ago solve problem manage asymmetrically encrypted secret file json however make assumption environment run make le ideal general solution compared secret broker read post curious filesystems docker relies cow copy write filesystem great lwn series union filesystems enable cow make sure container running image need size image disk space instead container creates cow layer top image us disk space change file original image good container citizen minimal impact filesystem inside container change mean container take state nono state stored volume map host network additionally layering save space deployment image often similar layer common problem file system support cow linux somewhat new experience handful shopify couple hundred host significant load aufs seen entire partition lock remount sluggish us lot memory codebase large difficult read likely accepted upstream thus requires custom kernel btrfs learning curve new set tool du l work aufs seen partition freeze kernel lock despite playing cat mouse kernel version stay date nearing disk space capacity btrfs act unpredictably go cow layer subvolumes btrfsterminology btrfs us lot memory overlayfs merged linux kernel quite stable fast u us lot le memory manages share page cache inodes unfortunately requires run recent kernel adopted distribution often mean building luckily docker overlay soon ubiquitous default aufs still quite unsafe production running large amount node experience hard say though since distribution ship kernel ready overlay either proposed rejected default reason although definitely space heading seems wait reliance edgy kernel feature docker relies frontier file system also leverage large number recent addition kernel namely namespaces notsorecent also commonly used cgroups feature especially namespaces yet battlehardened wide adoption industry run obscure bug run network namespace disabled production experienced fair amount softlockups traced implementation resource fix upstream memory cgroup us fair amount memory heard unreliable report wild container see use likely larger company pioneer stability work example hardening run production would zombie process container run pid namespace mean first process inside container pid init container need perform special duty acknowledging dead child process dy immediately disappear kernel process data structure rather becomes zombie process ensures parent detect death via wait however child process orphaned parent set init process dy init job acknowledge death child wait zombie stick around forever way exhaust kernel process data structure zombie process fairly common scenario processbased masterworker model worker shell take long time master might kill worker waiting shelled command sigkill unless using process group killing entire group forked process shelled inherited init finally finish init need wait docker engine solve problem docker engine acknowledging zombie within container prsetchildsubreaper described security runtime security still somewhat question mark container get production hardened classic chicken egg security problem case rely container providing additional security guarantee however many use case reason vendor still run container virtual machine battletested security hope see vms die within next decade operating system virtualization win battle someone said linux mailing list heard hypervisors living proof operating system incompetence container provide perfect middleground virtual machine hardware level virtualization paas application level know work done runtime able blacklist system call security around image cause concern docker actively working improving libtrust notary part new distribution layer image layer transportation first iteration docker took clever shortcut image build transportation runtime instead choosing right tool problem chose one worked ok case filesystem layer abstraction leak way running container production perfectly acceptable minimum viable product pragmatism problem solved much efficiently image build could represented directed graph work allows figuring caching parallelization fast predictable build image transportation instead using image layer could perform binary diffing topic studied decade distribution runtime layer getting separated opening sort optimization runtime single cow layer rather using arbitrary image layer abstraction using union filesystem aufs first read traversing linked list file assemble final file slow completely unnecessary layer model problem transportation building covered earlier mean extremely careful layer image otherwise easily end transporting mb data large application large link within datacenter le problem wish use registry service docker hub transferred open internet image distribution worked actively currently lot incentive docker inc make solid secure fast building hope opened plugins allow great solution surface opposed builder somewhere people generally agree sane default specialized mechanism bittorrent distribution conclusion many topic discussed purpose storage networking multitenancy orchestration service discovery docker need today people going production container alone scale unfortunately many company trying overcompensate current stack shooting star paas get go approach work small planning greenfield deployment rarely run obscurity production see widespread production usage need tip procon scale favour docker resolving issue highlighted docker putting exciting place interface paas discovery networking service discovery application care underlying infrastructure great news solomon say best thing docker get people agree something finally starting agree image runtime topic discussed length great people docker inc github issue exist capacity attempted simply provide opinionated view important area ramp barrier entry excited still got lot work left make production accessible talk dockercon eu docker production shopify talk dockercon resilient routing discovery
448,Lobsters,virtualization,Virtualization,Bocker: an implementation of docker in bash in under 100 lines,https://github.com/p8952/bocker/,bocker implementation docker bash line,bocker prerequisite run bocker virtual machine make guarantee wo nt trash system example usage functionality currently implemented functionality yet implemented license http wwwgnuorglicenses,bocker docker implemented around line bash prerequisite following package needed run bocker btrfsprogs curl iptables libcgrouptools utillinux coreutils distribution ship new enough version utillinux probably need grab source compile additionally system need configured following btrfs filesystem mounted varbocker network bridge called ip ip forwarding enabled firewall routing traffic physical interface ease use vagrantfile included build needed environment even meet prerequisite probably still want run bocker virtual machine bocker run root among thing need make change network interface routing table firewall rule make guarantee wo nt trash system example usage bocker pull centos created bocker image imageid source bocker run cat etccentosrelease centos linux release core bocker p containerid command cat etccentosrelease bocker log centos linux release core bocker rm removed bocker run wget wget usrlocalsbin usrlocalbin usrsbin usrbin rootbin bocker run yum install wget installing verifying installed complete bocker p containerid command yum install wget wget bocker commit removed created bocker run wget usrbinwget bocker run cat memory cpuacct cpu cat cat bocker run cat memory cpuacct cpu cat cat functionality currently implemented docker build docker pull docker image docker p docker run docker exec docker log docker commit docker rm docker rmi networking quota support cgroups bocker init provides limited implementation docker build functionality yet implemented data volume container data volume port forwarding license copyright c peter wilmott program free software redistribute andor modify term gnu general public license published free software foundation either version license option later version program distributed hope useful without warranty without even implied warranty merchantability fitness particular purpose see gnu general public license detail received copy gnu general public license along program see http wwwgnuorglicenses
450,Lobsters,virtualization,Virtualization,Organized chaos: managing randomness,https://mirage.io/blog/mirage-entropy,organized chaos managing randomness,david kaloper playing dice parameter gcm oaep blinding random oracle random failure fail wikipedia page broken debian fiasco spectacular result discovered website cost reused random sequence stuff random sequence notoriously difficult statistical randomness diehard test pass concept randomness simple download mersenne twister fortuna knownplaintext attack forward secrecy preimage attack entropy virtual machine dream electric sheep various analysis xentropyd unheard shown whirlwind rng bootstrapping loop parting word mailing list daniel mort amir,david kaloperthis post give bit background random number generator rng recent mirageos release first give background rngs really critical security try clarify oftenconfused concept randomness entropy used context finally explore challenge harvesting goodquality entropy unikernel environment playing dice security software must play dice must create secret example secret serve key protect communication like diffiehellman key exchanged two tl endpoint proof knowledge particular secret used verify identity someone internet case verifying possession secret rsa key associated certificate attacker guessing secret disastrous consequence must chosen manner realistically unpredictable anyone else need random reason use randomness number algorithm require unique value every time invoked badly malfunction assumption violated random choice one way provide value likely unique example repeating kparameter dsa digital signature compromise secret key reusing gcm nonce negates confidentiality authenticity algorithm probabilistic generate random value operating input store chosen value output oaep padding mode rsa done order confuse relationship input output defeat clever attacker try manipulate input gain knowledge secret looking output still algorithm pick random number internally change operation hide physical amount time need execute avoid revealing information secret operate known blinding one way counter timing sidechannel attack randomness therefore quite pervasive security context fact many cryptographic algorithm designed assumption readily available source randomness termed random oracle security analysis algorithm conditional oracle know certain security characteristic like difficulty guessing correct message impersonating somebody given ideal random oracle security software problem computer inherently deterministic made behave reproducibly given known program starting state go solving random failure taking look try solve problem let instead consider happens fail even wikipedia page nice starting point highlight first public release netscape original ssl version broken several month release weakness initializing rng current time process id parent process id browser time stamp guessed certain precision leaving subsecond part two pid unknown relatively small unknown space initial value bruteforced decade later debian patched version openssl reduced rng initialization current pid result random sequence possible flaw went undetected two year became known debian fiasco personal report indicate distinct secret key could generated openssl debian system time still circulation computing largest common divisor pair number much faster discovering prime divisor particular number rsa public key contain number secret key contain factor rsa key usually generated randomly picking factor pool key generated heavily biased random number generator factor likely repeat possible search common factor pair crack affected key technique produce spectacular result recently bitcoin application android discovered downloading random initial value website nt even necessary intercept unencrypted traffic website started serving redirect page android application left initializing rng text redirection message therefore started generating private ecdsa key associated bitcoin address every affected user issue reportedly cost user bitcoins playstation game signature forged sony reused single kparameter supposed unique unpredictable secret every ecdsa signature made lead complete compromise signing key admittedly really rng problem show malfunction lead spectacular failure related random number example widely known security circle rngs embedded device tend predictable leading widespread use weak key router similar equipment amongst thing implementing unikernel operating system nt want end wikipedia page either random sequence stuff random number really intuitively tend think somehow dancing around jiggly sense software component keep producing random output output form sequence hope random sequence thing notoriously difficult define linked page open following quote random sequence vague notion term unpredictable uninitiated whose digit pas certain number test traditional statistician intuitive jigglyness captured statistical randomness require output taken independently come distribution fact want uniform distribution take long sequence output want cover entire range want cover evenly want evenness increase number output increase constitutes purely frequentist definition randomness addition want absence clear pattern output nt want sequence look like even bit noise nt want correlation output problem noone really know pattern mean entirely possible searched pattern simple fact pattern fully explains sequence lurking around complexity corner nonetheless well established battery test check statistical randomness rng output called diehard test serf defacto standard testing random number generator beginning certain sequence pass test flying color still would recommend using digit π secret key neither would recommend releasing software everyone study us sequence generate secret went wrong concept randomness roughly random sequence predictable anyone knowledge sequence word compressed matter much try extreme mean generated program latter restriction obviously little strong purpose highlight deep distinction people mean random jumping around one thing actually unpredictable wholly different matter many simple mathematical process generate sequence high statistical randomness many used produce random sequence various purpose still completely deterministic process exhibit random behaviour statistical sense instead random pseudorandom call generator pseudorandom number generator prngs look something approaching true random sequence nature current agreement nature quantum process random sense random sequence based idea readily available download use microphone keep recording lowestorder bit signal pretty unpredictable write program generate actually random sequence still need compromise real problem common prngs knowing rule observing output enough predict rest sequence entire future behavior mersenne twister one commonly used generator various programming package predicted observing output row step process cryptographically secure pseudorandom number generator csprng key property computationally prohibitively expensive distinguish output true random sequence also mean computationally prohibitively expensive reconstruct internal state looking output sense someone trying predict output take shortcut instead forced perform laborious task starting generator possible state checking output match observed sequence quantify csprng unpredictability take trying half possibility guess state mirageos security stack contains csprng design called fortuna really encrypt simple sequence aes aesctr using secret key make resistant prediction aes knownplaintext attack output generates bit hash us result next key improve statistical randomness already guaranteed aes rather form forward secrecy attacker learns secret key point would need perform preimage attack hash function figure earlier key reconstruct earlier output entropy although resistant prediction based solely output like software rng fortuna still deterministic prng entire output unpredictable initial value call seed information perspective prng transform unpredictable initial seed equally unpredictable sequence word typically use prngs stretch unpredictability inherent initial seed infinite stream best prngs give hint starting position never outrace amount unpredictability started often call quality unpredictability entropy sense employing algorithmic generator shifted burden unpredictable beginning cornered search entropy place computer find physical world typical kernellevel rngsystem reach world around hardware interaction hardware event happen various driver tend emit small packet data time hardwarespecific state event product user interaction keyboard mouse network packet arriving interface hard drive asserting interrupt signal end dma transfer like combined together used seed internal c prng fact describing seed entire sequence unfolded deliberate oversimplification really happens prng continuously fed random event change state arrive request random byte served prng prng used mix unpredictability inherent input smooth various timestamps similar value statistically wellbehaved sequence virtual machine dream electric sheep problem virtual machine vm typical configuration barely see physical hardware user interact vms server scenario using directlyconnected keyboard mouse vms make use virtualized network interface virtualized disk even cpu feature intercepted virtualized virtual environment entropystarved known problem various analysis weakness random output virtual environment published problem especially severe right boot gradual trickle unpredictability hardware event slowly move pseudorandom stream increasingly unpredictable state start still tends fairly predictable typically operating system store prng output shutdown use quickly reseed prng next boot order reuse whatever entropy contained state unfortunately common boot several machine system image pristine image lacking seed making random output virtual machine vulnerable prediction close startup phase help solve problem employ several source entropy mirageos unikernels case unix executable simple reuse system rng exposed via devurandom source entropy kernel much better position enter unpredictable state single process running supervision case xen unikernels harder group entropy source originate within unikernel originate externally external case rely kernel interacting hardware time kernel background service xentropyd run read rng serf output domain xen console problem many scenario like hosting popular cloud provider expect degree cooperation bigger problem although code present nt fully fleshed design remains disabled mirageos need able achieve unpredictability relying purely available inside unikernel unikernel direct exposure hardware course interacting outside world tap ambient entropy continuously sample interevent timing event loop process analogous happens fullblown o kernel except event lack extra hardware context timer potentially le granular example arm make interactionbased event somewhat predictable word little le entropy recent intel chip come ondie random generator ultimately derives thermal reading available rdrand directly rdseed instruction community expressed concern relying exclusively generator might wise choice could silently malfunction design hidden hardware raise concern potential intentional bias output scheme unheard however since entropy additive output never reduce whatever unpredictability system already therefore available continuously sample ondie rng inject output prng combination event timing builtin rng good unpredictability long run especially unikernel running multitenant host competing cpu instance entropy individual event still relatively low assume determined attacker guess individual time stamp certain precision nt know potentially quite high creates following problem imagine attacker know current prng state measure time next event sufficient precision know last two bit timestamp attacker event contains two bit entropy immediately update prng attacker observe output check four candidate state fully recover knowledge state negate entropy addition hand decide wait try accumulate many event updating prng keep generating fully predictable sequence meantime fortuna really shine keep accumulating event number internal pool roundrobin fashion pool constantly activated exponentially decreasing frequency pool activated frequently wasted one activated right frequency contain enough entropy make prohibitively expensive attacker enumerate possibility design shown within constant factor optimal entropy use particular scale robustly actual amount entropy inherent input event leaf u problem boottime entropy saved random seed reused cloning disk image many case mirageos unikernel running without storage following design whirlwind rng employ entropy bootstrapping loop iterated computation measure time took perform previous iteration performs amount work depends time many time way creates feedback loop fragile dependency nondeterminism physical execution cpu contention race cpu state even arm currently us le finegrained timer whose design parallel intel yield initial value varies wildly boot use value kickstart prng giving quick divergence ensuring state unpredictable start parting word technique particular bootstrapping arm need little exposure place full confidence user probably avoid generating longterm private key unikernels running bare xen yet combination boostrapping continuous reseeding robust accumulation give u hopefully comprehensive solution generating randomness unikernel environment intend reevaluate effectiveness design getting experience work wild end particularly appreciate community feedback reach u mailing list hop onto freenode join mirage thanks daniel mort amir comment earlier draft
452,Lobsters,virtualization,Virtualization,OpenBSD on Digital Ocean,http://www.tubsta.com/2015/04/openbsd-on-digital-ocean/,openbsd digital ocean,update update note http wwwopenbsdorgftphtml,openbsd user pretty disappointing digital ocean launch bsds introduction freebsd even though technical barrier removed allow today thought try openbsd load tried without success due cpu feature issue result pleasing enjoy openbsd digital ocean key using freebsd instance shim start instance size choice region want instance select appropriate get freebsd instance running log new instance switch root sudo su using closest mirror download miniroot installer time using example fetch http turn swap freebsd instance swapoff devgptswapfs geom prevent writing miniroot shim instance storage turning debug flag geom allows u like raw disk sysctl write miniroot shim device dd small take le second everything ok completed issue shutdown r move back console window digital ocean portal perform standard generic network install openbsd instance detail provided network setting supplied digital ocean caveat setting storage drive since used drive shim installing drive parameter incorrect try custom layout recommendation follows useenable duids use w hole disk select e dit auto layout editor remove listed partition using create new swap partition first gigabyte nicely example b enter enter enter enter create main file system note openbsd project recommendation example keep inline digital ocean creates file system operating system enter enter enter enter enter quit disklabel editor write label disk continue network install per normal openbsd installation documentation complete able reboot fully functioning openbsd access digital ocean control panel function like snapshot update creating another openbsd instance snapshot work appears either snapshot feature digital ocean pure image snapshot disk disk tool used platform insert key ip etc probably boot record break restore update openbsd snapshot moved fetch need changing fetch http could use latest release need openbsd release achieve need digital ocean fetch http note please refer http wwwopenbsdorgftphtml latest mirror information example taken list might suitable geography export law
453,Lobsters,virtualization,Virtualization,Getting to Grips with Kitematic,http://deis.com/blog/2015/kitematic,getting grip kitematic,common us azure kubernetes service ak,common us azure kubernetes service ak migrate existing application cloud build complex application us machine learning take advantage agility offered microservices architecture
455,Lobsters,virtualization,Virtualization,Docker cheatsheet,https://github.com/wsargent/docker-cheat-sheet/blob/master/README.md,docker cheatsheet,docker cheat sheet want improve cheat sheet see contributing section table content docker docker prerequisite oh zsh docker plugin linux minimum requirement macos installation linux installation series tutorial macos docker community edition docker toolbox docker mac see comparison note docker toolbox series tutorial check version container basic isolated docker process lifecycle volume logging driver starting stopping host process manager exposing port covered cpu constraint http cpu http see http memory constraint memory constraint capability http docsdockercomenginereferencerun runtimeprivilegeandlinuxcapabilities info import export executing command image template docker container lifecycle info cleaning dockergc prune loadsave image importexport container difference loading saved image importing exported container image network network working network lifecycle info connection specific ip address container registry repository managing uploading downloading repository index good job verifying image run local registry docker distribution local deploy mailing list dockerfile configuration file instruction dockerignore maintainer deprecated use label instead run cmd expose env add copy entrypoint volume user workdir arg onbuild stopsignal label shell healthcheck tutorial example layer git commits changesets filesystems link tcpip port atlassian link hostname userdefined network docker ecosystem service discovery distributed configuration store volume freefloating filesystems dataonly container lifecycle info advanced volume map macos host directory docker volume feeling brave mount file volume exposing port fiddly doable expose forwardedport best practice dockercompose list feature security security root access root access host understanding hardening linux container aaron grattafiori security tip slide note limit container permission docker security feature sensitive information docker security cheat sheet thomas sjögren docker bench security script white paper docker image security best practice cheat sheet alpine linux commercial support stable patch docker security cheat sheet container solution user namespaces user namespaces follow blog example security video security roadmap seccomp support bane security profile tip prune data management command df heredoc docker container last id commit command need dockerfile get ip address jq go template get port mapping find container regular expression get environment setting kill running container delete container force running stopped container delete old container delete stopped container delete container stopping delete dangling image delete image delete dangling volume show image dependency slimming docker container monitor system resource utilization running container volume file contributing open readmemd readmemd edit page make change commit,docker cheat sheet want improve cheat sheet see contributing section table content docker docker developer build app language using toolchain dockerized apps completely portable run anywhere colleague o x window laptop qa server running ubuntu cloud production data center vms running red hat developer get going quickly starting one apps available docker hub docker manages track change dependency making easier sysadmins understand apps developer build work docker hub developer automate build pipeline share artifact collaborator public private repository docker help developer build ship higherquality application faster docker prerequisite use oh zsh docker plugin autocompletion docker command ymmv linux kernel minimum requirement docker macos mountain lion newer required installation linux quick easy install script provided docker curl ssl http getdockercom sh willing run random shell script please see installation instruction distribution complete docker newbie follow series tutorial macos download install docker community edition homebrewcask type brew cask install docker download install docker toolbox docker mac nice quite finished virtualbox install see comparison note docker toolbox legacy use docker community edition see docker toolbox installed docker community edition click docker icon launchpad start container docker run helloworld running docker container complete docker newbie probably follow series tutorial check version important always know current version docker currently running point time helpful get know feature compatible running also important know container run docker store trying get template container said let see know version docker running currently get server version docker version format serverversion also dump raw json data docker version format json client version apiversion gitcommit goversion o linux arch container basic isolated docker process container virtual machine thread process think chroots steroid lifecycle normally run container without option start stop immediately want keep running use command docker run td containerid use option allocate pseudotty session detach automatically container run container background print container id want transient container docker run rm remove container stop want map directory host docker container docker run v hostdir dockerdir also see volume want remove also volume associated container deletion container must include v switch like docker rm v also logging driver available individual container docker run docker custom log driver ie syslog use docker run logdriversyslog another useful option docker run name yourname dockerimage specify name inside run command allow start stop container calling name specified created starting stopping want detach running container use ctrl p ctrl q want integrate container host process manager start daemon rfalse use docker start want expose container port host see exposing port section restart policy crashed docker instance covered cpu constraint limit cpu either using percentage cpu using specific core example tell cpushares setting setting bit strange mean cpu want container take cpu core specify see http cpu docker run c agileekcpusettest also use cpu core using cpusetcpus see http detail nice video docker run agileekcpusettest note docker still see cpu inside container nt using see http detail memory constraint also set memory constraint docker docker run binbash capability linux capability set using capadd capdrop see http docsdockercomenginereferencerun runtimeprivilegeandlinuxcapabilities detail used greater security mount fuse based filesystem need combine capadd device docker run rm capadd sysadmin device devfuse sshfs give access single device docker run debian bash give access device docker run privileged v devbususb devbususb debian bash info privileged container info docker p show running container docker log get log container use custom log driver log available jsonfile journald docker inspect look info container including ip address docker event get event container docker port show public facing port container docker top show running process container docker stats show container resource usage statistic docker diff show changed file container f docker p show running stopped container docker stats show list container default show running import export docker cp copy file folder container local filesystem docker export turn container filesystem tarball archive stream stdout executing command enter running container attach new shell process running container called foo use docker exec foo binbash image image template docker container lifecycle docker image show image docker import creates image tarball docker build creates image dockerfile docker commit creates image container pausing temporarily running docker rmi remove image docker load load image tar archive stdin including image tag docker save save image tar archive stream stdout parent layer tag version info cleaning use docker rmi command remove specific image tool called dockergc safely clean image longer used container docker docker image prune also available removing unused image see prune loadsave image load image file docker load myimagetargz save existing image docker save myimage mytag gzip myimagetargz importexport container import container image file cat mycontainertargz docker import myimage mytag export existing container docker export mycontainer gzip mycontainertargz difference loading saved image importing exported container image loading image using load command creates new image including history importing container image using import command creates new image excluding history result smaller image size compared loading image network docker network feature docker automatically creates network interface install bridge host none new container launched bridge network default enable communication multiple container create new network launch container enbales container communicate isolated container connected network furthermore allows map container name ip address see working network detail lifecycle docker network create name create new network default type bridge docker network rm name remove one network name identifier container connected network deleting info connection specify specific ip address container create new bridge network subnet gateway ip block docker network create subnet gateway iptastic run nginx container specific ip block docker run rm net iptastic ip nginx curl ip place assuming public ip block duh curl registry repository repository hosted collection tagged image together create file system container registry host server store repository provides http api managing uploading downloading repository dockercom host index central registry contains large number repository said central docker registry good job verifying image avoided worried security run local registry run local registry using docker distribution project looking local deploy instruction also see mailing list dockerfile configuration file set docker container run docker build vastly preferable docker commit common text editor syntax highlighting module could use create dockerfiles instruction dockerignore set base image subsequent instruction maintainer deprecated use label instead set author field generated image run execute command new layer top current image commit result cmd provide default executing container expose informs docker container listens specified network port runtime note actually make port accessible env set environment variable add copy new file directory remote file container invalidates cache avoid add use copy instead copy copy new file directory container default copy root regardless userworkdir setting use chown user group give ownership another usergroup add entrypoint configures container run executable volume creates mount point externally mounted volume container user set user name following run cmd entrypoint command workdir set working directory arg defines buildtime variable onbuild add trigger instruction image used base another build stopsignal set system call signal sent container exit label apply keyvalue metadata image container daemon shell override default shell used docker run command healthcheck tell docker test container check still working tutorial example layer versioned filesystem docker based layer like git commits changesets filesystems link link docker container talk tcpip port atlassian show worked example also resolve link hostname deprecated extent userdefined network note want container communicate link start docker daemon iccfalse disable inter process communication container name container specified docker run name container dockerfile exposed port expose create another container called linked like docker run link container alias name linked userwordpress exposed port alias container show linked following environment variable connect way delete link use docker rm link generally linking docker service subset service discovery big problem planning use docker scale production please read docker ecosystem service discovery distributed configuration store info volume docker volume freefloating filesystems nt connected particular container use volume mounted dataonly container portability docker docker named volume replace dataonly container consider using named volume implement rather data container lifecycle info volume useful situation ca nt use link tcpip instance need two docker instance communicate leaving stuff filesystem mount several docker container using docker run volumesfrom volume isolated filesystems often used store state computation transient container stateless transient container run recipe blow away second instance transient container pick last one left see advanced volume detail also helpful map macos host directory docker volume docker run v userswsargentmyappsrc src use remote nfs volume feeling brave may also consider running dataonly container described provide data portability aware mount file volume exposing port exposing incoming port host container fiddly doable done mapping container port host port using localhost interface using p docker run p hostport containerport name container someimage tell docker container listens specified network port runtime using expose expose containerport note expose expose port p expose container port localhost port iptables nat docker p tcp dport localhostport j dnat todestination containerip port running docker virtualbox need forward port well using forwardedport define range port vagrantfile like dynamically map vagrantconfigure vagrantfileapiversion config port configvmnetwork forwardedport host port guest port end end forget mapped port host container use docker port show docker port container containerport best practice general docker best practice war story go dockercompose compose tool defining running multicontainer docker application compose use yaml file configure application service single command create start service configuration learn feature compose see list feature using following command start application dockercompose f dockercomposefile also run dockercompose detached mode using flag stop whenever needed following command dockercompose stop bring everything removing container entirely command pas volume also remove data volume security security tip docker go docker security page go detail first thing first docker run root docker group effectively root access expose docker unix socket container giving container root access host docker defense secure harden understanding container leave exposed read understanding hardening linux container aaron grattafiori complete comprehensive guide issue involved container plethora link footnote leading yet useful content security tip following useful already hardened container past substitute understanding security tip greatest security want run docker inside virtual machine straight docker security team lead slide note run apparmor seccomp selinux grsec etc limit container permission see docker security feature detail docker image id sensitive information exposed outside world treat like password see docker security cheat sheet thomas sjögren good stuff container hardening check docker bench security script download white paper snyk docker image security best practice cheat sheet start using kernel unstable patch grsecurity pax compiled alpine linux using grsecurity production spring commercial support stable patch would redhat month nothing devops budget since docker easily limit number active process running inside container prevent fork bomb requires linux kernel cgrouppidsy kernel configuration docker run also available since docker ability prevent process gaining new privilege feature linux kernel since version read blog post docker run securityoptnonewprivileges docker security cheat sheet pdf make hard use copying container solution turn interprocess communication docker iccfalse iptables set container readonly docker run readonly verify image hashsum docker pull debian set volume read docker run v pwd secret secret ro debian define run user dockerfile nt run root inside container run groupadd r user useradd r g user user user user user namespaces also work user namespaces enabled default enable user namespaces remap userns ubuntu follow blog example security video security roadmap docker roadmap talk seccomp support apparmor policy generator called bane working security profile tip source prune new data management command landed docker docker system prune docker volume prune docker network prune docker container prune docker image prune df docker system df present summary space currently used different docker object heredoc docker container docker build htop eof alpine run apk nocache add htop eof last id alias dldocker p l q docker run ubuntu echo hello world docker commit dl helloworld commit command need dockerfile docker commit run cmd postgres many opts dl postgres get ip address docker inspect dl grep ipaddress cut f jq installed docker inspect dl jq r networksettingsipaddress using go template docker inspect f networksettingsipaddress containername building image dockerfile want pas build argument dockerhostip ifconfig grep e grep v awk print cut head echo dockerhostip dockerhostip docker build buildarg artifactoryaddress dockerhostip sometag somedirectory get port mapping docker inspect f range p conf networksettingsports p index conf hostport end containername find container regular expression docker p grep regexppattern cut echo done get environment setting docker run rm ubuntu env kill running container docker kill docker p q delete container force running stopped container docker rm f docker p qa delete old container docker p grep week ago awk print xargs docker rm delete stopped container docker rm v docker p q f statusexited delete container stopping docker stop docker p aq docker rm v docker p aq delete dangling image docker rmi docker image q f danglingtrue delete image docker rmi docker image q delete dangling volume docker docker volume rm docker volume l q f danglingtrue filter danglingfalse work ignored list volume show image dependency docker image viz dot tpng dockerpng slimming docker container cleaning apt run layer done layer apt command otherwise previous layer still persist original information image still fat run apt command aptget clean rm rf varlibaptlists tmp vartmp id docker run imagename binbash docker export id docker import flatimagename id docker run imagename binbash docker export id gzip c imagetgz gzip dc imagetgz docker import flatimagename monitor system resource utilization running container check cpu memory network io usage single container use docker stats container container listed id docker stats docker p q container listed name docker stats docker p format name container listed image docker p f ancestorubuntu remove untagged image docker rmi docker image grep awk split print remove container regular expression docker p grep wildfly awk print xargs docker rm f remove exited container docker rm f docker p grep exit awk print volume file aware mount file volume example inject configuration file like copy file container docker run rm httpd cat httpdconf edit file vim httpdconf start container modified configuration docker run rm v pwdhttpdconf ro p httpd contributing contribute cheat sheet open readmemd click readmemd link edit page make change commit
456,Lobsters,virtualization,Virtualization,xhyve - Lightweight Virtualization on OS X Based on bhyve,http://www.pagetable.com/?p=831,xhyve lightweight virtualization o x based bhyve,hypervisorframework virtualization hvdos xhyve bhyve running tiny core linux xhyve tiny core linux running ubuntu xhyve ubuntu server skerit ubuntu vnc tutorial next step,hypervisorframework user mode virtualization api introduced mac o x yosemite used toy project like hvdos do emulator fullfeatured enough support full virtualization solution example run linux xhyve lightweight virtualization solution o x capable running linux port freebsd bhyve kvmqemu alternative written peter grehan neel natu super lightweight kb size completely standalone dependency bsdlicensed virtualizer o x require kernel extension bhyve kernel code ported user mode code calling hypervisorframework multicpu support networking support run offtheshelf linux distribution could extended run operating system xhyve may make good solution running docker mac instance running tiny core linux xhyve xhyve repository already contains small linux system testing try xhyve typing line git clone http cd xhyve make xhyverunsh see tiny core linux booting terminal window initializing cgroup subsys cpuset initializing cgroup subsys cpu initializing cgroup subsys cpuacct linux version tc box gcc version gcc smp thu oct utc command line earlyprintkserial acpioff biosprovided physical ram map mem usable mem usable nx execute disable protection active smbios present agp agp bridge found lastpfn maxarchpfn pat enabled cpu old new cpu mtrrs blank virtualized system core distributed absolutely warranty v wwwtinycorelinuxcom tc box shut vm exit mac command line enter sudo halt running ubuntu xhyve also install complete linux distribution xhyve tricky bit xhyve come bios efi booter necessary extract kernel initrd linux image pas xhyve manually first download ubuntu server desktop version support text mode installer directory ubuntu inside xhyve directory l l total rwr r mist staff jun need extract kernel initrd little tricky o x recognize hybrid file system image without little hack dd ifdevzero oftmptmpiso dd tmptmpiso hdiutil attach tmptmpiso cp volumesubuntuserver cp volumesubuntuserver create virtual hard disk image gb example dd ifdevzero ofhddimg create script run xhyve correct argument installer binsh kernel ubuntuvmlinuz initrd ubuntuinitrdgz cmdline earlyprintkserial acpioff mem smp c net virtionet imgcd ahcicd imghdd virtioblk ubuntuhddimg pcidev hostbridge lpc lpcdev l stdio buildxhyve mem smp pcidev lpcdev net imgcd imghdd f kexec kernel initrd cmdline want networking enabled easiest run script root requirement lifted codesign binary sudo xhyverunubuntuinstallsh see ubuntu text mode installer select language choose language used installation process selected language also default language installed system language c english go back tab move space selects enter activates button answer straightforward default usually fine make sure select yes asked install grub boot loader master boot record end installation complete screen select go back execute shell copy installed kernel initrd mac side vm type cd target sbinifconfig tar c boot nc l p mac type replacing ip output ifconfig cd ubuntu nc tar x vm exit shell exit select finish installation run ubuntu installation virtual hard disk create following script fixing kernel initrd version number binsh kernel initrd cmdline earlyprintkserial acpioff ro mem smp c net virtionet imghdd virtioblk ubuntuhddimg pcidev hostbridge lpc lpcdev l stdio buildxhyve mem smp pcidev lpcdev net imgcd imghdd f kexec kernel initrd cmdline run script sudo xhyverunubuntush make linux installation useful may want install ssh server sudo aptget install opensshserver install full ui access using vnc sudo aptget install xubuntudesktop run vnc server geometry conntect pasting finder cmdk connect server dialog vnc ubuntulocal also follow skerit ubuntu vnc tutorial get desktop like next step xhyve basic lightweight lot potential developer welcome contribute list current todos idea part readme file repository
457,Lobsters,virtualization,Virtualization,"Heap overflow in QEMU PCNET controller, allowing guest->host escape",http://xenbits.xen.org/xsa/advisory-135.html,heap overflow qemu pcnet controller allowing guest host escape,information file advisory http wwwxenprojectorgsecuritypolicyhtml,informationadvisory release heap overflow qemu pcnet controller allowing guest host signed advisory file begin pgp signed message hash xen security advisory version heap overflow qemu pcnet controller allowing guest host escape update version public release issue description qemu security team predisclosed following advisory pcnettransmit load transmitframe descriptor guest tmd local variable recover length field status field guestphysical location associated frame buffer status field indicates frame buffer ready sent ie setting txstatusdeviceowns txstatusstartpacket txstatusendpacket bit status field pcnet device controller pull frame guestphysical location buffer byte long transmits frame layout transmitframe descriptor possible send pcnet device controller frame length possible send pcnet device controller frame marked txstatusstartpacket txstatusendpacket pcnet controller configured via xmtrl csr support splitframe processing pcnettransmit function loop round pulling second transmit frame descriptor guest second transmit frame descriptor set txstatusdeviceowns nt set txstatusstartpacket bit frame appended buffer field attacker exploit vulnerability sending first packet length device controller second frame containing nbytes trigger nbyte heap overflow qemu overflow allows guest take control physmemwrite function pointer pcnetstatest structure called trying flush updated transmit frame descriptor back guest specifying content second transmit frame attacker therefore get reliable fullychosen control host instruction pointer allowing take control host impact guest access emulated pcnet network device eg modelpcnet vif configuration exploit vulnerability take qemu process elevating privilege qemu process vulnerable system xen system running hvm guest without stubdomains configured use pcnet emulated driver model vulnerable default configuration vulnerable emulate pcnet nics system running pv guest vulnerable system using qemudm stubdomain device model example specifying xl domain configuration file vulnerable traditional qemuxen upstream qemu device model potentially vulnerable arm system vulnerable mitigation avoiding use emulated network device altogether specifying pv vif domain configuration file avoid issue avoiding use pcnet device favour emulation also avoid issue enabling stubdomains mitigate issue reducing escalation privilege accorded service domain qemudm stubdomains available traditional qemuxen version credit issue discovered matt tait google reported u via qemu security team resolution applying appropriate attached patch e resolve issue qemuupstream xen unstable patch qemuupstream xen xen patch qemuupstream xen patch qemuupstream xen patch qemuxentraditional xen unstable note second patch qemuxentraditional version qemuupstream identical likewise presented separately convenience patch deployment embargo deployment patch mitigation permitted except system used administered organisation member xen project security issue predisclosure list specifically deployment public cloud system permitted decision permit deployment made group discretion disclosed issue xen project security team deployment permitted embargo end note duringembargo deployment notice retained postembargo publicly released xen project advisory even though longer applicable enable community oversight xen project security team decisionmaking information permissible us embargoed information consult xen project community agreed security policy http wwwxenprojectorgsecuritypolicyhtml begin pgp signature version gnupg gnulinux end pgp signature xenprojectorg security team
460,Lobsters,virtualization,Virtualization,"Announcing qboot, a minimal x86 firmware for QEMU",https://lwn.net/Articles/645455/,announcing qboot minimal firmware qemu,announcing qboot minimal firmware qemu article log,announcing qboot minimal firmware qemu posted may jake paolo bonzini pbonziniatredhatcom qemudevel qemudevelatnongnuorg kvm list kvmatvgerkernelorg subject announcing qboot minimal firmware qemu date thu may messageid redhatcom archivelink article may heard clear container initiative intel couple kvm various kernel trick create extremely lightweight virtual machine experimental clear container setup requires mb launch virtual machine need m boot probably know qemu great running window legacy linux guest flexibility come hefty price emulation consume memory also requires form lowlevel firmware guest well add quite bit virtualmachine startup time millisecond unusual right fact reason clear container us kvmtool instead qemu wrong fact reporting bad performance pretty much throwing gauntlet enter qboot minimal firmware run qemu together slimmeddown qemu configuration boot virtual machine millisecond ivy bridge core processor qboot available git githubcombonziniqbootgit glory code brings together various existing open source component minimal really minimal bios runtime based kvmtool bios couple hardware initialization routine written mostly scratch good help seabios source code minimal libc based kvmunittests linux loader qemu repository information achieve fast boot time example using qboot right limit mb vmlinuzinitrdcmdline however enough initrdless container first commit qboot le hour old definitely work particular extract acpi table qemu present guest probably another day work enable multiprocessor guest little impact boot time smbios information also available qemu qemu side support yet persistent memory nfit table acpi acpi support added qboot automatically start using happy hacking paolo log post comment
461,Lobsters,virtualization,Virtualization,VENOM Vulnerability,http://venom.crowdstrike.com,venom vulnerability,,bug virtual floppy disk controller fdc vulnerable fdc code used numerous virtualization platform appliance notably xen kvm virtualbox native qemu client vmware microsoft hyperv bochs hypervisors impacted vulnerability since venom vulnerability exists codebase vulnerability agnostic host operating system linux window mac o etc though venom vulnerability also agnostic guest operating system attacker malware would need administrative root privilege guest operating system order exploit venom
463,Lobsters,virtualization,Virtualization,Singapore Linodes are now available,https://blog.linode.com/2015/04/27/hello-singapore/,singapore linodes available,sign node newsletter speedtest try singapore,sign node newsletter excited announce opening newest datacenter singapore mark linode seventh datacenter purposebuilt serve already huge growing market southeast asia india australia surrounding region spent majority past month working getting great connectivity internet singapore network powered cisco asr router currently blend transit telstrapacnet pccw along direct peering equinix internet exchange eie providing u access hundred peering opportunity check speedtest page test latency download speed singapore support standard linode feature available datacenters like gbps redundant connectivity hypervisor host machine linode backup service nodebalancers native etc simple pricing datacenters try singapore also hard work great news stay tuned enjoy
466,Lobsters,virtualization,Virtualization,pflask: a tool for creating Linux namespace containers,https://github.com/ghedo/pflask,pflask tool creating linux namespace container,pflask pflask getting started man page networking type network interface filesystem type mount point unprivileged container background container machined integration machined building copyright alessandro ghedinime copying,pflask pflask simple tool creating process container linux used running single command even booting whole operating system inside isolated environment filesystem hierarchy networking process tree ipc subsystem hostdomain name insulated host system container getting started pflask nt need configuration run without argument follows default new container created bash shell started custom command also specified sudo pflask id root root root container also run inside private root directory using chroot option sudo pflask chrootpathtorootfs id root root root used example replacement chroot command even possible invoke init binary boot whole operating system inside container sudo pflask chrootpathtorootfs sbininit note pflask nt provide support creating rootfs piggyback existing tool example debootstrap command used creating debian rootfs follows sudo debootstrap sid pathtorootfs http httpredirdebianorgdebian information pflask usage look man page networking using netif option networking container disconnected host system network interface made unavailable container sudo pflask netif ip link lo loopback lowerup mtu qdisc noqueue state unknown mode default group default linkloopback brd netif option also used create private network interface sudo pflask netifmacvlan ip link lo loopback lowerup mtu qdisc noqueue state unknown mode default group default linkloopback brd broadcast multicast mtu qdisc noop state mode default group default linkether brd ff ff ff ff ff ff linknetnsid interface created inside container automatically destroyed container terminates command create new macvlan interface called host interface macvlan interface used give additional mac address network adapter make look like completely different device pflask also create type network interface look manpage information filesystem default new mount namespace created container filesystems mounted inside wo nt affect host system mount option used create new mount point execution supplied command sudo pflask chrootpathtorootfs mountbind tmp tmp command bind mount host tmp directory container tmp file exchanged pflask also create type mount point look manpage information additionally using ephemeral option possible tell pflask discard change applied root filesystem container terminates sudo pflask chrootpathtorootfs ephemeral sbininit used example build environment dependency installed every run clean rootfs without need recreate rootfs every time unprivileged container command executed root privilege pflask invoked limitation unprivileged user well long user namespaces supported host system pflask user user id ghedo ghedo ghedo example recent debian version user namespaces enabled restricted root user enable unprivileged user run sudo sysctl functionality used run everyday user application web browser inside container pflask user user mounttmp home chromium disablesetuidsandbox command us mount option create tmpfs mount point home directory application chromium example wo nt able access user private file modification home directory discarded container terminates chroot option used unprivileged container well requires additional configuration first step assigning set additional uids gids current user user used pflask inside container sudo usermod addsubuids user sudo usermod addsubgids user note command require root privilege run time unprivileged chroot needed following command run pflask chrootpathtorootfs note newuidmap newgidmap command need installed work debianubuntu system provided uidmap package background container container detached current terminal soon created using detach option sudo pflask chrootpathtorootfs detach later reattached even different terminal attach option pidof pflask pflask pid detached pflask process reattached detached pressing ctrl machined integration container created pflask automatically registered machined daemon installed running machinectl command used list manipulate running container let create one container follows sudo pflask chrootpathtorootfs sbininit running container listed using list command machinectl nopager list machine class service container pflask machine listed information regarding single container retrieved show command machinectl nopager show timestampgio cest servicepflask classcontainer rootdirectoryhomeghedolocaldebian staterunning additionally status command show information regarding status container machinectl nopager status since gio cest ago leader systemd service pflask class container root homeghedolocaldebian o debian gnulinux stretchsid unit libsystemdsystemd libsystemdsystemdjournald sbinagetty noclear keepbaud console giu kronk systemd started container giu kronk systemd starting container one even log container using login command note dbus daemon need running inside container work sudo machinectl login connected machine press three time within exit session debian gnulinux stretchsid kronk kronk login finally container terminated using either poweroff terminate command sudo machinectl poweroff building pflask distributed source code build bootstrappy waf configure waf build copyright copyright c alessandro ghedini alessandro ghedinime see copying license
467,Lobsters,virtualization,Virtualization,Qubes OS: Security by Compartmentailzation,https://qubes-os.org/,qubes o security compartmentailzation,secure compartmentalization learn,secure compartmentalization qubes brings personal computer security xen hypervisor software relied many major hosting provider isolate website service learn
469,Lobsters,virtualization,Virtualization,Shielding Applications from an Untrusted Cloud with Haven,https://www.usenix.org/conference/osdi14/technical-sessions/presentation/baumann,shielding application untrusted cloud,support usenix presentation audio,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author andrew baumann marcus peinado galen hunt title shielding application untrusted cloud booktitle usenix symposium operating system design implementation osdi year isbn address broomfield co page url http publisher usenix association month oct presentation audio
470,Lobsters,virtualization,Virtualization,"novm: legacy-free, type 2 hypervisor written in Go",https://github.com/google/novm,novm legacyfree type hypervisor written go,novm advantage container disadvantage container advantage traditional virtualization disadvantage traditional virtualization requirement building technical detail bootloader http work device,official google product novm novm legacyfree type hypervisor written go goal provide alternate highperformance linux hypervisor cloud workload novm unique expose filesystemdevice primary mechanism running guest allows easily manage independent software data bundle independently combine single virtual machine instance novm leverage excellent linux kernel virtual machine kvm interface run guest instance novm novm change rule virtualization principally exposing flexible filesystem interface instead virtual block device eliminates pain managing virtual disk image allows much greater flexibility software bundled deployed virtual machine longer heavyweight instance rather hardwareenforced container around collection file service defined onthefly novm also focus highperformance paravirtualized device drop support legacy hardware emulation make inappropriate running legacy application ideal modern cloudbased virtualization use case novm originally called pervirt name changed suggested name could misconstrued novm aim provide best container hardware virtualization advantage container run compatible kernel much freedom result fact guest kernel decoupled host example hold back guest kernel necessary upgrade latest greatest combined migration stable longrunning guest still applying critical fix update host need filesystem networking module freely load guest particular application requires specific kernel straightforward use real hardwareenforced isolation interface exposed abi hypervisor container likely suffer security hole guest access entire kernel system call interface multitenant environment strong isolation important beyond security hole container likely present countless opportunity subtle information leak guest instance mix match technology want dockerstyle novm want diskbased novm sure coexist easily use resource way need manage two separate networking system bridge management daemon etc everything managed one way disadvantage container okay nontrivial hit workload io intensive massive disk network usage see small measurable drop performance workload see difference note project still experimental plenty performance work still done considered forwardlooking statement advantage traditional virtualization instead opaque disk image novm allows easily combine directory tree create vm realtime allows administrator easily tweak file fire vms without dealing headache converting disk image using proprietary tool disadvantage traditional virtualization support limited number device mean guest must virtioaware depend presence bios functionality postboot new workload nt problem mean ca nt migrate untouchable ancient system novm arbitrary guest o support novm support guest know boot time mean linux would straight forward add support multiboot guest like freebsd requirement novm requires least go order build novm also requires least linux appropriate header header recent enough may see compilation error related kvmsignalmsi kvmcapsignalmsi also need python python plus python six module building build novm simply clone repo run make optionally build package running make deb make rpm run novm use scriptsnovm installed package type novm information using command line type novm may use novm command help detailed information specific command first thing need kernel create kernel bundle using running kernel running novmimportkernel create novm instance try using novm create binls technical detail bootloader currently inbuilt bootloader support modern linux kernel follows linux boot convention setting vcpu directly protected mode jumping elf entry point find kernel bit additional setup creating identitymapped page table jump directly long mode entry point full detail convention see http work embedded bootloader work different traditional bootloaders grub lilo unlike bootloaders embedded bootloader requires elf kernel binary vmlinux compressed image bzimage compressed image bzimage contains compressed version elf kernel binary realmode setup code small setup sector traditional bootloaders typically lay component memory execute realmode code realmode setup code construct basic data structure via bios call extract vmlinux binary memory finally jump protected mode newly uncompressed code sensible approach realmode kernel code able execute arbitrary bios call probe hardware arbitrary way finally switching protected mode however virtualized environment hardware fixed known hypervisor bootloader lay necessary data structure memory start directly protected mode addition skipping batch realmode execution emulation allows u avoid build bios bzimage provided elf binary extracted cached using simple script derived script found linux tree given vmlinux binary file load file directly memory specified elf program header example type offset virtaddr physaddr filesiz memsiz flag align load r e load rw load rw load rwe note also note entry point binary happens able jump entry point need setup basic requirement would normally done realmode setup code need simple gdt bootcs bootds empty idt fine interrupt need disabled set appropriately enable protected mode register cleared appropriately per boot convention boot params structure initialized pointed see part setup process provided initial ram disk also loaded memory pointed part boot parameter decompression handled kernel device device model implemented kernel substantially different vms instead attemping emulate legacy machine instead support mechanism make sense next generation purposebuilt virtual machine
471,Lobsters,virtualization,Virtualization,"hvdos, a simple DOS emulator based on the OS X Hypervisor.framework",https://github.com/mist64/hvdos,hvdos simple do emulator based o x hypervisorframework,hvdos purpose pagetablecom status pkunzjrcom license licensetxt author maccom,hvdos hvdos simple do emulator based o x yosemite hypervisorframework purpose consider project example template create solution based hypervisorframework useful application see pagetablecom detail status hvdos run simple do program com format try pkunzjrcom example license see licensetxt order simplify use code template consider part hvdosc interfaceh public domain author michael steil maccom
472,Lobsters,virtualization,Virtualization,Docker Image Insecurity,https://titanous.com/posts/docker-insecurity,docker image insecurity,heavily promoted docker claim insecure processing pipeline decompress memorysafe exec xz utils tarsum deterministic order unpacking situation data verified unpacked onto disk libtrust libtrust javascript object signing encryption http cdn reported drop tarsum actually verify image digest add privilege isolation replace libtrust update framework go implementation conclusion good post,december downloading official container image docker saw line image pulling verified assumed referenced docker heavily promoted image signing system investigate time later researching cryptographic digest system docker try secure image opportunity explore found total systemic failure logic related image security docker report downloaded image verified based solely presence signed manifest docker never verifies image checksum manifest attacker could provide image alongside signed manifest open door number serious vulnerability image downloaded http server go insecure streaming processing pipeline docker daemon decompress tarsum unpack pipeline performant completely insecure untrusted input processed verifying signature unfortunately docker process image three time checksum verification supposed occur however despite docker claim image checksum never actually checked docker code related verifying image checksum unable trigger warning even presenting image mismatched checksum imgchecksum imgchecksum checksum logwarnf image layer checksum mismatch computed q expected q checksum imgchecksum insecure processing pipeline decompress docker support three compression algorithm gzip xz first two use go standard library implementation memorysafe exploit type expect see denial service attack like crash excessive cpu memory usage third compression algorithm xz interesting since native go implementation docker exec xz binary decompression xz binary come xz utils project built twenty thousand line c code c memorysafe language mean malicious input c program case docker image xz utils unpacking could potentially execute arbitrary code docker exacerbates situation running xz root mean single vulnerability xz call docker pull could result complete compromise entire system tarsum use tarsum wellmeaning completely flawed order get deterministic checksum content arbitrarily encoded tar file docker decodes tar hash specific portion excluding others deterministic order since processing done order generate checksum decoding untrusted data could designed exploit tarsum potential exploit denial service well logic flaw could cause file injected skipped processed differently modified appended etc without checksum changing unpacking unpacking consists decoding tar placing file disk extraordinarily dangerous three vulnerability unpack stage time writing situation data verified unpacked onto disk libtrust libtrust docker package claim provide authorization access control distributed trust graph unfortunately specification appears exist however look like implement part javascript object signing encryption specification along unspecified algorithm downloading image manifest signed verified using libtrust trigger inaccurate message manifest checked actual image content image pulling verified currently official image manifest published docker inc signed using system discussion participated last docker governance advisory board understanding docker inc planning deploying widely future intended goal centralization docker inc controlling certificate authority sign image andor client certificate looked signing key docker code unable find turn key embedded binary one would expect instead docker daemon fetch http cdn image download terrible approach variety attack could lead trusted key replaced malicious one attack include limited compromise cdn vendor compromise cdn origin serving key man middle attack client downloading key reported issue found tarsum system finished research far nothing reported fixed step believe taken improve security docker image download system drop tarsum actually verify image digest tarsum used security instead image must fully downloaded cryptographic signature verified processing take place add privilege isolation image processing step involve decompression unpacking run isolated process container bare minimum required privilege operate scenario decompression tool like xz run root replace libtrust libtrust replaced update framework explicitly designed solve real problem around signing software binary threat model comprehensive address many thing considered libtrust complete specification well reference implementation written python begun work go implementation welcome contribution part adding tuf docker local keystore added map root key registry url user signing key managed docker inc would like note using nondocker inc hosted registry poor user experience general docker inc seems content relegating third party registry second class status technical reason problem ecosystem general security end user comprehensive decentralized security model third party registry necessary desirable encourage docker inc take consideration redesigning security model image verification system conclusion docker user aware code responsible downloading image shockingly insecure user download image whose provenance without question present include trusted image hosted docker inc including official ubuntu base image best option block indexdockerio locally download verify image manually importing docker using docker load red hat security blog good post thanks lewis marshall pointing tarsums never verified
473,Lobsters,virtualization,Virtualization,State of the Mirage: an OCaml unikernel,https://www.irill.org/videos/oups-december-2014/MirageOS,state mirage ocaml unikernel,,
474,Lobsters,virtualization,Virtualization,"CoreOS is building a container runtime, Rocket",https://coreos.com/blog/rocket/,coreos building container runtime rocket,try latest rkt doc sample systemd unit prototype version github building rkt included manifesto removed rkt app container composable security image distribution open rkt contribute spec app container image read contribute aci draft app container runtime read contribute runtime draft app container discovery vanity url convention import path standard container mailing list source code coreos meetup faq rkt rkt available available today github fork docker rkt run ubuntu rhel centos etc difference rkt app container defines specification could app container support contributed docker platform coreos continue ship docker,try view latest rkt doc sample systemd unit rkt new container runtime designed composability security speed today releasing prototype version github begin gathering feedback community explain building rkt building rkt started building coreos looked various component available u reusing best tool building one exist believe strongly unix philosophy tool independently useful clean integration point hope reflected tool build etcd seen widespread adoption use outside coreos docker first introduced u early idea striking immediately attractive simple component composable unit could used variety system docker repository included manifesto standard container rally cry industry quickly followed brandon philip cofoundercto coreos became top docker contributor serf docker governance board coreos one widely used platform docker container ship release community hour happen upstream thought docker would become simple unit agree unfortunately simple reusable component thing playing docker building tool launching cloud server system clustering wide range function building image running image uploading downloading eventually even overlay networking compiled one monolithic binary running primarily root server standard container manifesto removed stop talking docker container start talking docker platform becoming simple composable building block envisioned rkt app container still believe original premise container docker introduced something cleaning fixing thing like see production ready container important u design container composable tool downloading installing running container well integrated independent composable security isolation pluggable crypto primitive strong trust image auditing application identity exist day one image distribution discovery container image simple facilitate federated namespace distributed retrieval open possibility alternative protocol bittorrent deployment private environment without requirement registry open format runtime wellspecified developed community want independent implementation tool able run container consistently rkt rkt command line tool rkt running app container specification image format container runtime discovery mechanism rkt first implementation app container expect one app container image definition signedencrypted tgz includes bit run app container app container runtime definition environment running app container given app container discovery federated protocol finding downloading app container image best way drive standard let successful proven implementation become de facto one however point software interoperability container think thing different developing app container specification started thoughtfulness around requirement front spent time refining worked implementation rkt feel spec implementation pretty well thought still early enough need help refining please contribute spec sending pull request start discussion app container image app container image aci specification image format container simple flat tarball always signed optionally encrypted convention aci minimal meaning includes bit absolutely required execute application since aci may encrypted distribution via system like bittorrent public object storage mirror network possibility think aci variant ami created container world read contribute aci draft app container runtime app container runtime defines environment facility container runtime provide includes device environment variable privilege container expect also includes definition metadata service interface exposing data environment outside container security primitive important u added identity feature metadata service mean every instance running container given unique identity coupled lightweight hsmlike service signing existing vm container environment concept like would welcome appreciate community feedback design read contribute runtime draft app container discovery app container discovery method finding app container image inspired vanity url convention import path mean able refer container simple name like coreoscometcd allowing organization federate downloads without running registry standard container want world run container world application packaged ran environment choose believe rkt definition around app container requirement work please contribute thought mailing list source code join u person coreos meetup tonight san francisco faq rkt rkt alternative docker runtime designed server environment rigorous security production requirement rkt oriented around app container specification new set simple open specification portable container format rkt available rkt available today github releasing prototype gather community feedback please note prototype quality release much spirit early release please provide feedback via github fork docker security composability perspective docker process model everything run central daemon fundamentally flawed docker would essentially mean rewrite project inheriting baggage existing implementation coreos large serious user running enterprise environment good faith continue support broken security model without addressing issue additionally past week docker demonstrated path include many facility beyond basic container management turning complex platform primary user existing platform want integrate container need fill gap company want way securely portably run container rkt run ubuntu rhel centos etc yes rkt stand alone tool live outside coreos used variety platform sense similar etcd project tool built nothing like existed difference rkt app container defines specification facility surrounding container rkt implement facility command line tool open specification allows system implementation app container without using rkt coreos fully support embrace alternative implementation could app container support contributed docker platform definitely app container specification implemented inside docker project interoperable meeting original goal manifesto coreos evaluate contributing work app container matures coreos continue ship docker yes continue make sure coreos best place run docker save detail future post rkt developed expect docker continue fully integrated coreos today
475,Lobsters,virtualization,Virtualization,Give me back my sanity,https://gist.github.com/grownseed/4fd2e91eca829cc039de,give back sanity,give back sanity working pandoc,give back sanity one many thing group work take care automating many thing possible usually brings lot satisfaction mostly get kick making people life easier sometimes maybe often end drawnout struggle machine program sometimes struggle bring edge despair much regularly consider living computerless island growing vegetable living story install pandoc centos docker container generally story think computing inherently broken programmer included tend think way way ultimately replicating u think wrong society building upon layer layer bestcase scenario obscure andor weak foundation would like extend gratitude google stackoverflow github issue mostly people make beer drink start beautifully simple command yum install pandoc resolving dependency downloading around data beautiful new pandoc except nt new centos nt really new instead pandoc tempted think nt matter much missing feature nt end world unfortunately though particular version shipped showstopping bug fret hear let build newer version pandoc pandoc written haskell quick google search like quick search led point tell compiler haskell named ghc first reaction go yum install ghc quite bit time later ghc provided different flavour every single library ghc fastforward couple hour realize particular version ghc outdated ok let build run wget http run tar xf run cd configure run cd make install ghc nt need make make install pretty proud could nt care le successfully installed new version ghc getting well turn pandoc installed cabal sort packagemanagerwhichisntreallyone haskell tentatively try yum course end failure proceed build cabal yum install gmpdevel base centos docker image nt cabal compilation throw error missing lgmp stupid obviously gmpdevel package wget http tar xf cd bootstrapsh build downloads build downloads ln cabalbincabal usrbincabal installing cabal nt add cabal path nasty nt care let move cabal update could nt done previously build downloads point could probably handwritten converted file daily basis still wasted le time almost install pandoc citeproc finally cabal install pandoc pandocciteproc hmm error missing locale let generate completely obvious command localedef v c enus f funny thing command actually throw error docker nt like building hey run localedef v c enus f true go error ignored whatever happens wait building pandoc still nt go turn missing environment variable could tell previous step hardcoded somewhere else course nt explicitly tell depth internet friend env lang rebuild pandoc go read entirety le miserables mean time another nasty symlink executables cabal nt either ln cabalbinpandoc usrbinpandoc ln cabalbinpandocciteproc usrbinpandocciteproc go working pandoc may believe really concise version actually go nt doubt sharpest tool box nt shortcut could taken view process completely crazy opinion done maybe developer ego maybe smart think maybe rest world expect much quickly nt answer solution whole problem definitely think twice telling anybody else get business
476,Lobsters,virtualization,Virtualization,VirtKick - your self-hosted DigitalOcean (Indiegogo),https://www.indiegogo.com/projects/virtkick-take-cloud-back,virtkick selfhosted digitalocean indiegogo,,
477,Lobsters,virtualization,Virtualization,Challenges With Randomness In Multi-tenant Linux Container Platforms,http://blog.pivotal.io/cloud-foundry-pivotal/features/challenges-with-randomness-in-multi-tenant-linux-container-platforms,challenge randomness multitenant linux container platform,,vmware tanzu portfolio product service modernizing application infrastructure
478,Lobsters,virtualization,Virtualization,Building good docker images,http://jonathan.bergknoff.com/journal/building-good-docker-images,building good docker image,building good docker image building better docker image docker registry constitutes good docker image working minimal whitebox building good docker image xkcd official languagespecific docker development environment base image link install build tool without good reason nodejs downloads page leave temporary file lying around clean package manager pin package version combine command use environment variable avoid repeating link link hacker news post,building good docker image see also update article building better docker image docker registry bursting seam time writing search node get hit one choose constitutes good docker image subjective matter criterion docker image consider good working example android sdk image able compile project without first applying update container mysql container expose way bootstrap server database user minimal beauty container ability sandbox application security avoid clutter host file system whereas could install nodejs host system pollute java development kit would rather pay slight premium disk space performance keep cordoned rest file said obviously preferable penalty small possible docker image serve purpose exactly necessary function nothing else following principle image extensible fewer thing break whitebox case docker image mean published dockerfile way evaluate went creating image tinker want unfortunately docker registry make easy discover good image even judge particular image often matter docker pull wondering megabyte node binary need file system layer ultimately megabyte virtual environment building good docker image consensus good docker image barrier entry adding image docker registry low situation straight xkcd everybody thing introduction official languagespecific docker development environment good start happy see pet practice listed showed image however thousand node image situation probably improve much docker registry work discovery evaluation mechanism said dockerfile practice settled best expert think anybody early point docker lifetime discussion feedback welcome base image debian time writing mb debian wheezy mb extra hundred megabyte ubuntu buy anything value aware extreme case may even possible base image mb busybox probably practical statically linked binary example busyboxbased docker image progriumlogspout link clock respectable mb install build tool without good reason build tool take lot space building source often slow installing somebody else software usually necessary build source avoided instance necessary install python gcc etc get latest version nodejs running debian host binary tarball available nodejs downloads page similarly redis installed package manager least good reason build tool need specific version eg redis pretty old debian repository need compile specific option need npm install equivalent module compile binary second case think really hard whether third case suggest installing build tool another npm installer image based minimal nodejs image leave temporary file lying around following dockerfile result image size mb debian wheezy run aptget update aptget install wget run wget http run rm hand seeminglyequivalent dockerfile result image size mb debian wheezy run aptget update aptget install wget run wget http rm thus seems leave file disk step dockerfile space reclaimed delete file also often possible avoid temporary file entirely piping output command instance wget http tar zxf extract tarball without putting file system clean package manager run aptget update setting container populates varlibaptlists data needed image finalized safely clear directory save megabyte dockerfile generates mb image debian wheezy run aptget update aptget install wget one generates mb image debian wheezy run aptget update aptget install wget rm rf varlibaptlists pin package version docker image immutable great dockerfile guaranteed produce output run different time problem course external state little control best minimize impact external state dockerfile extent possible one simple way pin package version updating package manager example aptget update aptcache showpkg redisserver package redisserver version aptget install hope guarantee package repository still serve version year however undeniably valuable explicitly show version software image depends combine command sequence related command best chain one run command make meaningful build cache logically grouped step lumped one cache step keep number file system layer consider generally desirable know objectively better backslashes help readability run aptget update aptget install use environment variable avoid repeating trick picked reading dockerfile link official nodejs docker image aside dockerfile great criticism sits top huge buildpackdeps link image sort thing want need define environment variable env reference subsequent run command paraphrased excerpt linked dockerfile env nodeversion run curl slo http nodejsorgdistv nodeversionnodev tar xzf nodev c usrlocal rm nodev article discussed hacker news post
479,Lobsters,virtualization,Virtualization,Scotch Box: A Vagrant LAMP Stack That Just Works,https://longren.io/scotch-box-a-vagrant-lamp-stack-that-just-works/,scotch box vagrant lamp stack work,deadsimple local vagrant lamp stack developer scotch box scotchio nicholas cerminara committing github scotch box announcement scotchio blog vagrant scotch box repository setup github vagrant bringing scotch box http useful stuff scotch box server component included front end stuff included initial commit github october scotch box well work get touch leave feedback leave comment like published twitter google github view post tyler longren published,deadsimple local vagrant lamp stack developer discovered scotch box recently brought u folk scotchio actually look like nicholas cerminara done work least done committing github scotch box announcement scotchio blog using scotch box day decided future development work easy really need know much vagrant virtualbox get running scotch box scotch box repository setup github explains make use scotch box basically clone repository run vagrant inside repo scotch box currently running ubuntu bit scotch box readme scotch box preconfigured vagrant box full array lamp stack feature get running vagrant timea lot php website application require much server configuration overhead first box need basic development worry configuring vagrant simply focus codeno provisioning tool setup really even required scotch box since everything packaged box running vagrant super fast never worry environment breaking update need internet code loading bringing scotch box run vagrant able access site http see something similar image useful stuff scotch box php internet connection requiredphp error turned onlaravel wordpress ready others operating system agnosticgoodbye xampp wampnew vagrant version update worry free scotchbox reliable lesser chance breaking various updatesbootstrap jquery saved server home folder case internet usually plain train car chef puppet ready case want add extra feature vagrant upsuper easy database access controlmit license server component included apachevimmysqlphp imagickmcryptmemcache memcached front end stuff included ssh server well running vagrant ssh upon logging via ssh see something similar image scotch box infancy still initial commit github october commits total updating scotch box easy check updated version vagrant vagrant box outdated tell newer version available newer version available update running vagrant box update head official scotch box website information setting database setting hostname detail updating box basic vagrant command also included help basic vagrant usage ie pausing resuming destroying server lamp developer like tired developing client dev server scotch box could good solution develop locally sometimes much easier develop locally rely slow dev server provided client image post included gallery well work available hire always taking new client big small got project idea like discus startup plan developer make happen get touch love see help leave feedback got question updated information releavant post please leave comment comment great way get help read reply nearly every comment let talk like like loading related published tyler longren hi tyler longren freelance web developer father two beautiful daughter car stereo enthusiast like php javascript wordpress git neat thing really love open source community find twitter google github personal blog view post tyler longren published october
481,Lobsters,virtualization,Virtualization,Xen Advisory XSA-108: Improper MSR range,http://xenbits.xen.org/xsa/advisory-108.html,xen advisory improper msr range,information file advisory,informationadvisory release improper msr range used signed advisory file begin pgp signed message hash xen security advisory version improper msr range used emulation update version public release issue description msr range specified apic use access model span msrs hypervisor code emulating read write access msrs erroneously covered msrs write emulation path written access extra msrs would bad effect end noops read path would attempt access memory beyond single page set apic emulation impact buggy malicious hvm guest crash host read data relating guest hypervisor vulnerable system xen onward vulnerable system vulnerable arm system vulnerable mitigation running pv guest avoid vulnerability credit issue discovered jan beulich suse resolution applying attached patch resolve issue xenunstable xen xen xen patch begin pgp signature version gnupg gnulinux end pgp signature xenprojectorg security team
482,Lobsters,virtualization,Virtualization,"Re-imagining Operating Systems: Xen, Unikernels, and the Library OS",https://spin.atomicobject.com/2014/09/27/reimagining-operating-systems/,reimagining operating system xen unikernels library o,,professional problem solver much work deal installing configuring managing operating system layer application stack managing o layer work system administrator many year advent virtualization became relatively easy create destroy virtual machine cloud many u longer even physical server devops tool configuration management created abstraction configuration automated provisioning operating system remained relatively using paas like heroku application server often full linux vms even containerization tool like docker underlying o fundamentally advent virtualization brought many change still seen full impact paradigm shift point look system whole start refactor eliminate unused component invent new one tailored current context keeping tab handful project reimagine role o layer modern application stack one interesting approach lean heavily interface provided modern hypervisors project targeting xen directly project seem ask really need interject redundant o application code hypervisor openmirage particular see problem best solved compiler dead code unused portion o eliminated compile time leaving necessary application run project similar vein also worth look paper thing
483,Lobsters,virtualization,Virtualization,Virtual Machine rc script for FreeBSD and bhyve,https://github.com/michaeldexter/vmrc,virtual machine rc script freebsd bhyve,vmrc http vmrcbsdlv editor callfortestingorg,vmrc vmrc virtual machine rc script managing bhyve xen virtual machine home page http vmrcbsdlv see vmrcknownissuestxt file uptodate status information developer note end vmrcinstructionstxt work progress please consider submitting question feature request prior patch submit pull request note github combine request accepted group inadvertently make inseparable thus unacceptable arguably defeating entire purpose git one workaround submit request different local branch thank helping test bhyve xen vmrc michael dexter editor callfortestingorg
484,Lobsters,virtualization,Virtualization,The MSRs of EC2,http://www.brendangregg.com/blog/2014-09-15/the-msrs-of-ec2.html,msrs,msrcloudtools model specific register msrs vol vol perf stat papi reading msrs determine cpu type microarchitecture intel decoder look msrs processor type vol intel software developer manual page volume new get lost time get hang install load msrtools use rdmsr msrcloudtools measure turbo boost noploop discovering msrs perftools measure performance conclusion msrcloudtools,intel turbo boost running aws cloud instance xen guest showboost cpu mhz turbo mhz active turbo ratio active cpu summary every second time util ratio mhz yes mhz cpu currently running mhz guess cpu cold enough boost temperature cputemp relatively cool degree celsius another tool msrcloudtools post describe msrs read measuring turbo boost important model specific register msrs aka machine specific register described vol intel architecture software developer manual access low level cpu information including turbo boost ratio temperature reading read written using rdmsr wrmsr instruction image right show cpu temperature measured using msrs instance vary based cpu utilization blue workload synthetic cpu driven utilization minute repeat interesting temperature rise initially cpu load drop sharply system fan kick far nt found fan rpm msrs confirm usually focused performance monitoring counter pmcs aka performance instrumentation counter pic cpu performance counter cpcs etc read rdpmc described vol manual measure data cache miss stall cycle useful performance event aws within cloud instance xen guest pmcs nt available see say perf stat nt mean ca nt ever work controlling msrs nt currently available small handful msrs available interesting one found regnamedescription tsc frequency clock counter tsc relative tsc frequency clock counter actual clock cpu therm status digital readout temp target tt turbo boost ratio mhz core active example turbo boost ratio core active table msrs intel r xeon r cpu used various kernel routine like idle thread cpufreq note model specific mean vary different processor model microarchitectures example silvermont readwrite target offset msrtemperaturetarget bit lower throttle temperature prochot difference make msrs nonportable tricky use standard like papi important reading msrs measure msrs assuming intel determine cpu type microarchitecture head proccpuinfo processor vendorid genuineintel cpu family model model name intel r xeon r cpu family model number tell u ivy bridge microarchitecture see intel decoder also use cpuid tool cpuid package report microarchitecture directly look msrs processor type vol intel software developer manual page volume new get lost time get hang install load msrtools aptget install msrtools modprobe msr assuming ubuntu msrtools package add rdmsr wrmsr tool msr kernel module use rdmsr based address eg read turbo boost ratio core active ivy bridge rdmsr f multiply get mhz way work explained earlier manual share couple tool msrcloudtools collection however written processor type currently analyzing may need edit use right msrs measure turbo boost live annoying age computer performance analyst error margin many measurement thanks turbo boost intel processor technology dynamically overclock cpu ubuntu faster centos could turbo boost new software version regressed could turbo boost tunable made thing faster could get picture turbo boost make mhz processor run mhz depending factor including temperature power consumption cstate core colder server run faster two identical server top bottom rack top server ran faster received cold air air conditioner great maddening take better performance also mess measurement comparing system software three way historically dealt turn turbo boost bios performance comparison measure actual cpu cycle using cpu performance counter observe turbo boost rate run short experiment benchmark measure current cycle rate eg noploop run datacenter xen guest aws ca nt change bios option timeconsuming difficult le reliable busy system recently thought could nt either found msrs discovering msrs working suspected turbo boost issue colleague netflix scott mentioned liked using command debug turbo boost nt think would work tried anyway output clearly wrong lone column temperature reading showed something working using opensnoop ftrace perftools collection see opensnoop n tracing open issued process name ctrlc end comm pid fd file proccpuinfo showed reading led take close look available msrs normally use cpuclkunhaltedcore nt available digging found could use ratio delta delta show much faster time stamp counter tsc cyclebased moving processor state enormous relief find way directly measure real clock rate turbo boost error margin vanished measure performance conclusion handful modelspecific register msrs available xen guest including aws allow real clock rate degree turbo boost measured important know performance comparison variation turbo boost skew result based hot cold server test written couple tool far msrcloudtools measure cpu turbo boost temperature nature msrs specific processor type script work far intel r xeon r cpu want use tool msrs may need find right msrs use processor type good news vendor documentation intel amd good although take time dig
485,Lobsters,virtualization,Virtualization,Rethinking the Library OS from the Top Down,http://research.microsoft.com/pubs/141071/asplos2011-drawbridge.pdf,rethinking library o top,,paper revisits old approach operating system construction library o new context idea library o personality o application depends run address space application small fixed set abstraction connects library o host o kernel offering promise better system security rapid independent evolution o component describe working prototype window library o run latest release major application microsoft excel powerpoint internet explorer demonstrate desktop sharing across independent securely isolated library o instance achieved pragmatic reuse networking protocol instance significantly lower overhead full vm bundled application typical application add working set disk footprint contribute new abi library o enables application mobility also show library o address many current us hardware virtual machine fraction overhead paper describes first working prototype full commercial o redesigned library o capable running significant application experience show longpromised benefit library o protection system integrity rapid system readily obtainable
486,Lobsters,virtualization,Virtualization,New Directions in Operating Systems,http://operatingsystems.io,new direction operating system,,
488,Lobsters,virtualization,Virtualization,"VirtKick - a simple, open source orchestrator",https://demo.virtkick.io/,virtkick simple open source orchestrator,appversioncommit,version appversiontag appversiondate date mediumdate commit appversioncommit paymentmode modulevarshostingpaymentgatewaymode
489,Lobsters,virtualization,Virtualization,Fast Enough VMs in Fast Enough Time,http://tratt.net/laurie/blog/entries/fast_enough_vms_in_fast_enough_time,fast enough vms fast enough time,fast enough vms fast enough time february last updated february impact metatracing vm design implementation converge putting vm effort context paper hotspot approach converge pay special attention jcon language jiting vms pypy shed skin traditional vm implementation luajit psyco jits free add two function call rpython program modernised optimising trace single static assignment ssa form new converge vm happy vm status vm freely downloadable binary performance python version converge version explains richards depth also provides various language implementation python version converge version optimising rpython jit patch patch series blog post self optimised trace paper converge icon inheritance unoptimised trace tracing jit issue removed tracing jit sometimes blazingly fast sometimes rather slow ast well formedness checker long trace overall win fast go pypy speed centre rpython issue open issue future follow twitter follow twitter,fast enough vms fast enough time february last updated february updated february enjoy article may also find academicallyinclined article impact metatracing vm design implementation interesting long article cover lot ground little known computing mainstream easily misunderstood familiar area may find wanting skip certain explanatory section stomach smell put briefly shoe programming language designer want create new programming language combining new old idea fresh whole sound like fun intellectually demanding job occasionally however know experience language exist solely mind paper mostly worthless implemented try evaluate well language design therefore need corresponding language implementation need corresponding language implementation lead think language designer dilemma much implementation needed show language design good little language dismissed hand unusably slow kiss death many language especially language design adventurous language designer may even sure made adequately efficient much lowlevel fiddling consumed energy gone design even worse lowlevel implementation concern easily end dictating higherlevel design choice disadvantage latter finding balance two point difficult designing converge came side trying get design right though end result fair share mistake hack decision consequence shall describe putting vm effort context implemented two virtual machine vms converge c first epically terrible second introduced converge merely awful even second extremely sometimes almost unusably slow roughly slower cpython tending towards slower end range partly reflects lack experience knowledge vm implementation started also reflects fact converge vm secondary concern language design despite estimate spent around man month second vm intertwined lot nonvm work seems lot effort spend poor quality vm worth bearing thing mind converge hard optimise expression evaluation system based icon see paper detail c whilst fun language many way nt lend fast writing reliable program realworld vms lot effort put rough comparison cpython defacto standard python named written c probably couple order magnitude effort put java hotspot roughly three order magnitude surprising second c converge vm nt well comparison comparison much minnow singlecelled organism mean second c converge vm slow demo converge advanced feature learned make winding gesture side laptop amuse audience even sure whether combination feature could ever made adequately efficient approach write vm use someone else choice instructive traditional route big compiler eg gcc output machine code perhaps via assembler output efficient compiler requires large amount effort example simply learning intricacy processor like sufficiently well generate efficient code nt faint heart short amount effort approach demand generally prohibitive alternative generating machine code directly generate c code compiled machine code several compiler taken approach year cfront original sather compiler still relatively difficult certainly much easier generating machine code directly however often lead poor experience user must pay cost doublecompilation translation typically loses large quantity useful debugging information something converge pay special attention exception one see later approach rare perhaps obvious choice use existing vm two goliath jvm eg hotspot microsoft clr net vm started work converge latter form mono nt run openbsd platform choice immediately discounted hotspot however remained possibility often stunning performance level reason could nt use nt really hotspot specific rather something inherent vms reflect language group language designed language fit within existing vms mould vm probably excellent choice semantic mismatch two severe course given sufficient willpower programming language translated practise real issue ease translation efficiency program run using two example opposite end spectrum highlight jython python running jvm faithful implementation python even power hotspot behind jython almost never exceeds cpython performance generally slower feature mostly relating python highly dynamic customisability lend efficient implementation jvm scala hand designed specifically jvm ensure reasonable performance scala language design part compromised eg due type erasure whether semantic mismatch manageable depends particular combination language design vm converge unusual expression evaluation mechanism enough rule practical jvm implementation jcon implementation icon jvm still slower old c icon interpreter speed demon converge development progressed number feature eg approach tracing information made increasingly difficult imagine could practically wedged atop existing vm language jiting vms mean option implementing language generally unpalatable either require undue amount work compromise language design often suspicion status quo severely inhibited programming language research group sufficient resource implement unusual language well enough prove usable came across pypy accurate year vaguely hearing pypy month ago unexpectedly bumped pypy developer convinced pypy time come porting pypy openbsd investigated come realise pypy two separate thing pypy new vm python often substantially faster cpython python user often interesting otherwise may minor interest rpython language writing vms interest every language designer current wouldbe language implementer unfortunately current literature us pypy cover confused many reader included henceforth shall unambiguously use rpython refer language writing vms pypy new python vm written rpython rpython obvious fact strict subset python whose program translated c every rpython program valid python program run using normal python interpreter vice versa however rpython suitably restricted allow meaningful static analysis obviously static type type system roughly comparable java inferred enforced addition extra analysis performed eg assure list index nt become negative user influence analysis assert statement otherwise fully automatic rpython would relatively little interest subset python output c though full programming language rpython unlikely next big language web programming example restricted mainstream indeed little chance becoming widely used alternative full python would say also true similar restricted approach shed skin however addition outputting optimised c code rpython automatically creates second representation user program assuming rpython used write vm language l one get traditional interpreter also optimising justintime jit compiler free word program written l executes appropriately written rpython vm hot loop ie executed frequently automatically turned machine code executed directly rpython unique selling point explain traditional vm implementation rpython unique easy overlook interesting took couple month using built accurate understanding looking traditional approach vm implementation perhaps easiest way explain interesting rpython first let make couple assumption explicit language like c well suited translated directly machine code little thin layer machine code everything c program dealt compilation word c language maintains runtime infrastructure program translated machine code complex language java python etc permit complex runtime interaction change many advantage programmer point view make life difficult language implementer static optimisation impossible user often change fundamental behaviour runtime best vms defer optimisation runtime information particular way program executed used dynamically optimise insight part ca nt statically optimise program possible way might run dynamically optimise way particular user running take jiting vm hotspot vm initially use interpreter execute user program unfortunately u interpreter vague term used mean many different thing often used pejorative let u assume slowish way loading program executing stepbystep perhaps loading bytecode file operating abstract syntax tree ast dynamic optimisation though slow execute interpreter advantage easy write low startup cost code executes infrequently reasonable choice execution interpreter vm hotspot spot frequently executed piece code hand chunk code jit compiler along information context within code used convert machine code jit compiler henceforth jit entirely separate interpreter word vm contains two completely separate implementation intended language semantics several consequence jits much harder create interpreter involve much work interested people write interpreter writing jit requires much specialist understanding time tiny difference interpreter jit almost inevitable complex system lead divergence program observable behaviour programmer point view program behaves one way interpreted another jitted unfortunately often extremely difficult work part program jitted jits much complex interpreter language complex runtimes disproportionately hard create jits word complex language harder create complete jit likely jit interpreter provide subtly different result example lua relatively small language complete jit luajit evolved alongside traditional interpreter many year contrast python much complex language better worse lua recently incomplete jit psyco struggled match cpython often rapid evolution course problem solved sufficient resource explain large part major open source language like python ruby currently ship jitless vms ie interpreter jits free rpython allows one profoundly different traditional route essence one writes interpreter get jit free suggest rereading sentence fundamentally change economics language implementation many u give rough analogy like moving manual memory management automatic garbage collection rpython able particular nature interpreter interpreter whether operating bytecode asts simply large loop load next instruction perform associated action go back beginning loop order switch interpretation jiting rpython need know hot loop encountered order generate machine code loop use subsequent execution essence one need add two function call rpython program add jit first function call canenterjit used inform rpython loop user program encountered might want start generating machine code loop encountered often second function call jitmergepoint used indicate rpython switch existing machine code version loop detail needed altogether le line code job get jit extra hint jit certain programming practice help icing cake rather anything fundamental good time get idea rpython generates jit interpreter rpython call language interpreter said earlier rpython automatically layer alongside c code second representation interpreter tracing interpreter detail tracing interpreter stored irrelevant u except note form jit manipulate conceptually could astlike structure rpython jit tracing jit hot loop detected marker left next time loop run jit enter tracing mode tracing mode complete execution loop performed action take traced ie recorded using tracing interpreter much much slower language interpreter loop finished trace analysed optimised converted machine code subsequent execution loop call machine code version since subsequent execution may diverge recorded trace rpython automatically insert guard machine code detect divergence machine code version capability guard fails point execution fall back interpreter point worth taking brief sidetour introduce tracing jits although concept tracing jits date around concept nt achieve kind prominence around andreas gal modernised since used several place notably mozilla tracemonkey javascript vm used firefox see later past tense used tracing jits record specific path execution running program convert machine code quite different methodbased approach jits therefore requires explanation user end program trace x set optimised trace x x x else x x x x guardtype x int guardnotlessthan x x intadd x x intadd x guardtype x int guardnotlessthan x x intadd x figure example code highlevel trace figure show highlevel example tracing jit dynamically typed pythonesque language let u assume code first column part hot loop tracing jit decides worth converting machine code next execution loop initial value x set ie integer vm enters tracing interpreter completing iteration loop well recording trace happened first thing tracing jit create guard ensure generated machine code executed x integer subsequent execution allows subsequent operation optimised integer note specific value x recorded trace resulting trace would negative number trace would different otherwise trace would narrow almost useless next condition x false else branch taken trace first record guard ensure subsequent run follow logic trace record else branch completely ignoring first branch middle column thus show full trace simple hot loop trace complete optimise trace compressing two separate addition integer constant one shown final column final trace translated machine code subsequent execution hot loop fast machine code version executed either guard false machine code version exit back interpreter optimising trace example figure give reasonable highlevel idea tracing jits nt really explain trace created rpython badge metatracing system meaning user end program nt traced directly figure suggests rather interpreter traced using example code figure figure show snippet interpreter trace interpreter lead trace though simplified somewhat make readable indicative trace rpython introduces interpreter initial trace x set programcounter stack var true jitmergepoint programcounter instr loadinstruction programcounter instr instrvarget stackpush var readvarnamefrominstruction programcounter elif instr instrvarset var readvarnamefrominstruction stackpop programcounter elif instr instrint stackpush readintfrominstruction programcounter elif instr instrlessthan rh stackpop lh stackpop isinstance lh int isinstance rh int lh rh stackpush true else stackpush false else programcounter elif instr instrif result stackpop result true programcounter else programcounter readjumpfromifinstruction elif instr instradd lh stackpop rh stackpop isinstance lh int isinstance rh int stackpush lh rh else programcounter programcounter stack var loadinstruction guardeq instrvarget dictget x listappend add loadinstruction guardeq instrint listappend add loadinstruction guardeq instrlessthan listpop listpop guardtype int guardtype int guardnotlessthan listappend false add loadinstruction guardeq instrif listpop guardfalse add loadinstruction guardeq instrvarget dictget x listappend add loadinstruction guardeq instrint listappend add loadinstruction guardeq instradd listpop listpop guardtype int guardtype int add listappend add loadinstruction guardeq instrvarset listpop dictset x add loadinstruction guardeq instrvarget dictget x listappend add loadinstruction guardeq instrint listappend add loadinstruction guardeq instradd listpop listpop guardtype int guardtype int add listappend add loadinstruction guardeq instrvarset listpop dictset x add figure interpreter fragment full trace interpreter enduser program figure hopefully interpreter code figure mostly selfexplanatory simpleminded stackbased interpreter one thing need explanation jitmergepoint call point interpreter tell rpython machine code execute program beginning position programcounter start initially trace might seem rather difficult read think flattened record interpreter action executing user code becomes rather easier astute reader notice trace single static assignment ssa form assignment previously unused variable one would probably want write style many advantage optimisers trivially expose data flow normal program often unable determine whether variable x may assigned later point example one branch assigns nt ssa form know sure knowledge hopefully fairly simple see trace right simply record instruction interpreter left performed executing example program worth thinking relationship key rpython approach one handle trace sheer size concern lot stuff converted machine code asis one would get disappointing performance gain around point rpython trace optimiser kick try give idea rpython trace optimiser first thing obviously pointless continual reading bytecode instruction start specific point program guard succeed know sequence instruction read always given trace checking really got instrvarget followed instrint pointless fortunately trace optimiser influenced user one thing trace optimiser know programcounter passed jitmergepoint way identifying current position user end program calculation based must constant thus easily optimised away leaving trace looking figure constant folded trace stack var dictget x listappend listappend listpop listpop guardtype int guardtype int guardnotlessthan listappend false listpop guardfalse dictget x listappend listappend listpop listpop guardtype int guardtype int add listappend listpop dictset x dictget x listappend listappend listpop listpop guardtype int guardtype int add listappend listpop dictset x figure trace calculation related program counter optimised away trace become fair bit smaller need get lot smaller still want good performance fortunately ssa form trace come fore follow flow operation given list l append object list l followed pop without operation l interim remove call also something similar dictionary store lookup middle trace since used end storing intermediate value pointless bigger win dictionary lookup much expensive list lookup resulting optimisation shown figure list folded trace dict folded trace stack var dictget x guardtype int guardnotlessthan dictget x guardtype int add dictset x dictget x guardtype int add dictset x stack var dictget x guardtype int guardnotlessthan add guardtype int add dictset x figure trace list dictionary optimisation folded away trace looking much smaller still make two easy optimisation first know int still int addition thus remove second type check done easily collapse two addition constant since x x figure show optimisation type folded trace addition folded trace stack var dictget x guardtype int guardnotlessthan add add dictset x stack var dictget x guardtype int guardnotlessthan add dictset x figure trace type check constant addition folded away last highly optimised trace suitable conversion machine code much smaller original trace contains far fewer complicated slow function call resulting machine code run massively faster original interpreter trying produce small trace like one skill writing vm tracing jit example give flavour done rpython though many lowlevel detail make difficult shall see later often need help jit produce small trace new converge vm becoming intrigued possibility rpython decided use implement new vm converge allow applestoapples comparison initial goal maintain compatibility old vm bytecode could run c rpython version vm goal nt quite met although came extremely close quite time bytecode rpython vm could run c vm vice versa first probably useful give simple stats c vm aiming replace thousand line code exclude blank line purely commented line count contains simple markandsweep garbage collector mostly accurate conservatively collect c stack vm code nt need clever dealing reference object implement full continuation c level copying c stack heap back necessary turned much portable initially feared code vm converge program level written similar ish style vm ported variety bit little endian system openbsd linux o x cygwin native binary window overall vm work slow part rather hard understand precise record determine effort put estimate took man month let call man month started work new vm september september never used rpython anyone best knowledge outside core pypy group used rpython vm size time happy vm implement subset php closest comparison though converge vm obviously big vm beyond merely toy also unusual aspect touched upon earlier article make interesting test rpython december featurecompatible version converge vm sense could run every converge program could lay hand admittedly huge number initially slow period development mostly unfamiliarity rpython progress became rapid towards end resulting vm compared c vm estimate able dedicate around half time vm month started new job september taught course largely unfamiliar subject although two time estimate man month c vm v man month rpython vm nt fully comparable useful many part rpython vm simple translation c vm partially reimplementation previous c vm though lesser extent rpython vm structure also substantially different c vm far cleaner easier understand aspect translation hardly simple best guess moving c language enjoy great deal despite flaw rpython single biggest factor nothing else large amount c vm involve faffing memory resizing rpython fully garbage collected language sweep carpet status vm new converge vm source freely downloadable binary major platform window time writing eventually vm form part converge release although testing needed reached point form opinion new vm worth knowing nt meant industrial strength vm least current form converge language exploring compiletime metaprogramming domain specific language thing mainstream programming language need care greatly eg overflow checking unicode partly wholly ignored matter problem later day also worth knowing nt spent huge amount time optimising new vm soon got fast enough speed happy whereas often explain away converge slow performance sufficient experiment others want converge worth exploring performance detail performance rpython vm created roughly time took create c vm performance like section try give flavour performance though please note totally scientific december version converge git hash wish look already usefully faster old c vm one simple benchmark long time make regress converge system excluding time build vm december version vm nt directly comparable old c vm little converge code parsing algorithm occupies lot execution time slightly different close enough useful following timing ubuntu server xeon explain linux later since linux support added day later necessary checkout december version test git hash c vm run make regress rpython vm translated since jit nt functional point looking output gprof two vms quickly show main reason speedup first rpython infinitely better garbage collector obvious consequence second rpython much better dictionary also known hash table given dynamically typed oo language like converge spend awful lot time looking slot name optimised dictionary play unexpected part thing make regress give good idea lower bound performance since torture jit large body code run enough time jit warm ie identified hot spot traced converted machine code enough time benefit work shall see later compiler particularly punishing tracing jit since december old new system diverged sufficiently accurate comparison make regress hard make said system continued get faster even hard case compiler give speedup old vm rather useful perform general type code one sense impossible question two people share definition general even harder jit involved often give surprising performance result given two seemingly similar program quite common one perform substantially better jit proxy use simple benchmark limitation approach obvious better nothing start stone benchmark simple benchmark started life ada program take starting point python version converge version straightforward translation old vm lack certain timing functionality timing converge ever slightly m higher really soon see small difference nt make much difference overall scheme thing default stone perform iteration benchmark show jit warmup time effect thing also included timing run timing xeon machine described earlier test run time best figure taken vm stone stone cpython pypy converge convergecurrent figure stone benchmark although stone venerable also small artificial nt necessarily tell u much richards benchmark much interesting benchmark model task dispatching mario wolczko explains richards depth also provides various language implementation default performs iteration also included timing iteration figure show timing vm richards richards cpython pypy converge convergecurrent figure richards benchmark one thing worthy note figure better allround performance pypy compared converge substantially faster final benchmark example something programmer need frequently chose something neither old new converge vm sort optimisation sorting part reason expected badly neither optimises list access x converge translated xget whereas many vms including cpython pypy specialcase common operation random string placed file sorted sorting algorithm used python version converge version indeed translated converge version python ensure fair comparison figure show timing vm sorting sorting cpython pypy converge converge current figure sorting benchmark terrible performance old converge vm figure surprised even likely explanation large number element overload garbage collector certain point overflow stack performance degrades nonlinearly also surprised pypy figure larger expected slowdown larger number element appears fixed nightly pypy build downloaded close pypy timing small large datasets respectively although section contained number hard figure one careful making strong claim performance small set benchmark gut feeling overgenerous new converge vm mostly many area vm received optimisation attention one used repeatedly performance would suffer disproportionately suspect rather appearing much faster cpython performance wider set benchmark would probably even par even would still huge improvement old vm interesting thing performance gain rpython made relatively easy change increase performance shall see optimising rpython jit rpython vms lead much efficient jit others trace optimiser clever magic certain idiom prevent working full potential early version converge vm naive jitunfriendly interestingly found surprisingly small number tactic hugely improved jit first tactic remove many instance arbitrarily resizable list possible jit never sure appending item list might require resize thus forced add opaque call internal list operation deal possibility call prevent many optimisation applicable relatively slow first pointed horrified rpython vm fairly sizeable used list extensively noticeably converge stack global resizable list little bit thought realised possible statically calculate much stack space converge function requires patch started ball rolling able move global resizable stack fixedsize stack per function frame ie frame created upon function call called continuation frame converge though need concern u point relative ease developing fairly highlevel language became obvious tried farreaching change c vm would taken least week rpython took le day arbitrarily resizable list took little thought became clear even though function fixedsize stack global stack function frame stored course resizable array becoming bottleneck seemed hard fix unlike stack size needed function frame way statically determine deeply function call might nest simple solution soon presented function frame store pointer parent removed need list function frame see patch second tactic tell jit nt need include calculation trace basic idea creating trace often know certain piece information fairly unlikely change context tell jit constant trace insert appropriate guard ensure true often allowing subsequent calculation optimised away use word constant mislead static constant sense fixed compiletime rather dynamic value context particular trace unlikely change promoting value eliding function main tool context carl friedrich bolz described example series blog post new converge vm example us map date back self much outlined carl friedrich interesting thing nt really spent long optimising converge jit perhaps man week early day trying get high level picture rpython around two man week recently rough metric found jit optimisation giving roughly speedup though perfunction stack change much profitable cumulative effect quite pronounced admittedly suspect picked lowhanging fruit improving performance require increasingly drastic action much converge compiler likely prove rather harder change vm fortunately adequately happy performance end result optimisation trace produced converge vm often efficient see optimised trace randomly chosen even sure piece code represents astonishing promoting value eliding function call optimising trace many bytecodes little code attached particularly amazes one converge crippling feature efficiency point view handled failure iconbase expression evaluation system allows limited backtracking paper converge icon inheritance noted addfailureframe removefailureframe instruction surround nearly every converge expression accounted around executed opcodes annoying vast majority time failure frame created discarded without used suggestion time maybe registerbased vm sense modern lua nonjiting vms might able lower cost somewhat nt anticipated tracing jit compare unoptimised trace optimised notice former lot code addfailureframe removefailureframe instruction latter code almost entirely disappeared large part explains optimised trace time smaller unoptimised trace best thing rpython trace optimiser free nt raise single finger make happen one fell swoop rpython given converge fastest vm iconesque evaluation ever created tracing jit issue tracing jits relatively new limitation least based currently know mozilla example removed tracing jit month back sometimes blazingly fast sometimes rather slow due tracing jit optimising single codepath time guard fails execution fall back slow tracing interpreter remainder bytecode could quite long back language interpreter subsequent bytecodes code tends take path time time benefit hugely tracing code tends branch unpredictably take considerable time derive noticeable benefit jit real issue way knowing code likely branch unpredictably actually real program converge compiler several point walk ast calling function preorder x using reflection dispatch function handle ast type see eg ast well formedness checker example idiom though make perfect sense u point view tracer preorder x branch completely unpredictably user end program trace without inlining trace inlining def f x return g x def g x x return else return return g x guardnotlessthan x return figure inlining code call f limited experience inherent ability tracing jit inline code exacerbate issue consider simple program figure tracing jit disables inlining trace look middle column call g remains saw earlier raw function call expensive opaqueness prevents trace optimiser performing much magic default therefore tracing jit inline function resulting trace found righthand column case inlined version typically much faster since guard check extremely quick much machinery surrounding function calling optimised away however inlining generally big win sometimes big loss chiefly due fact inlining lead significantly longer trace trace slow create due tracing interpreter longer trace greater overhead impose program trace later used frequently exact manner recorded relative cost overhead reduce time trace little used guard fail regularly within overhead easily outweigh gain unfortunately obvious way predict inlining win loss ca nt see program future execution pattern heuristic somewhat counter problem rpython adjustable upper limit trace long aborted subsequent trace turn inlining help somewhat good value long might nt obvious likely vary language language even program program indeed experiment mixed tracing methodbased java vm inoue et al found long trace overall win luck future research start whittle away tracing jits weakness however seems likely medium term least handcrafted vms remain methodbased referred hereon method jits method called repeatedly entire method converted machine code tracing jits optimistic recording particular path removing branching possibility assuming mostly used way subsequent execution method jits pessimistic converting entire method machine code branch left though tracelike optimisation likely performed nt important point view although tracing jit often beat method jit latter performance much consistent said pypy show performance tracing jit nt bad general scheme thing furthermore obvious rpython method jits system could created tracing jits seem much better suited automatic creation fast go something currently unclear fast one reasonably expect rpython vm go best guide currently achievable speed rpython vms pypy although seems easy win applied still getting faster albeit rate gain slowing importantly increasingly giving good performance range real program pypy speed centre instructive read time writing pypy bit time faster cpython collection realworld program microbenchmarks couple order magnitude quicker clear general rpython vm wo nt reach performance something like hotspot several advantage overall better performance methodbased jits fact handcoded one specific class language sheer amount effort put certainly expect rpython vms get comfortably within order magnitude performance level hotspot time tell people write rpython vms language like java better point comparison rpython issue written hope get sense interesting exciting rpython language design implementation community also hope get sense impressed rpython feel able frank honest limitation shortcoming approach major problem anyone creating vm rpython currently face documentation accurately lack various paper fragment documentation rpython yet pulled together coherent whole new user struggle find either coherent highlevel description description vital lowlevel detail indeed lack documentation currently enough scare dedicated language enthusiast dedicated enthusiast got long way grep vm got sophisticated resort irc channel something never needed check semantics lowlevel detail eliding guesswork simply dangerous part problem probably stem strict adherence pypy rpython development process test driven development tdd pypy rpython roughly amount code main system test although would personal choice appears served pypy rpython development process extremely well impossible admire astonishing evolution project concept developed tdd must played important part indeed although converge vm inevitably uncovered bug pypy surprisingly far unfortunately prioritisation test seems expense documentation rapidly discovered initial bemusement rpython developer test poor substitute documentation typically combining wealth lowlevel detail lack obvious highlevel intent short many test often impossible work really tested certainly struggled lack documentation suspect could shaved least third development time rpython well documented language project fortunately pypy chap aware open issue resolve hope experience feed alluded pypy rpython since original conception changed degree unmatched project think pypy project started implement python python project allow people easily get head around nutsandbolts detail python vm gradually year turn implement fast python vm project several deadends route including attempt traditional partial evaluation desire implement faster python vm grew need define smaller language became clearer hence gradual appearance rpython python part rpython name consequence essence rpython statically typed language roughly akin java static type allow rpython statically optimise rpython program way would impossible full python rpython relies almost exclusively type inference static type rpython program rarely making explicit far le often say typical haskell program mean type error occur result inscrutable error message typical type inference rpython error message become better recent month still obtuse identifying real cause harder type inferred language took quite time felt confident writing line time rpython explicit static typing scope type inferencer would operate would smaller error probably le baffling massive evolution pypy rpython taken also implication implementation short rpython experimental past experimental present translator littered vast number assertion many triggered seemingly valid user program often hard resolve one left wondering particular assertion program triggered occasionally one really lucky assertion associated comment say something like got probably x rpython matures expect number occasion assertion triggered diminish suspect likely maintain pest time come every rpython program also valid python program rpython vms also run using cpython pypy run untranslated rpython lingo point view facility little use running vm way slow memory intensive unfortunately despite drawback untranslated execution sometimes le worse alternative shall see noticeably pypy extensive test suite run untranslated alternative full translation rpython whole program translator slurps program statically analysis whole thing afresh converting c unfortunately quantity work translator extremely slow fairly fast machine translation converge take minute time double optjit pypy fast machine easily take minute translate optjit change matter small requires full rerun translator frankly forgotten like slow editcompilerun cycle make experimentation particularly unfamiliar rpython extremely painful point bug far deep vm run reachable running untranslated almost tore hair due frequent retranslations plus side downtime translation induces rule repetitive strain injury whole program translation may seem odd decision vital use rpython us python compiletime metaprogramming language basically rpython translator load rpython vm executes normal python program long chooses finished translator given reference entry point rpython vm point translation occurs everything referenceable entry point must rpython enough vague term current documentation translatable thing reachable ignored may use arbitrary python feature mean one able use normal python make decision eg portability could deferred actual translation time ability sort pretranslation metaprogramming absolutely necessary software need customisable portable however fact vm file fact mixed python rpython program headache function normal python library rpython compatible nt time rpython alternative provided sometimes nt mixing matching two arbitrary confusing suspect resolvable final matter rpython restricted generating c various point also jvm clr llvm backends though time writing none currently usable rpython thus tried create type system abstract away detail backends entirely successfully fault unique rpython anyone tried porting c program number platform attest simple set integer type work across platform unfortunately rpython history multiple backends semisuccessful attempt abstract away lowlevel type system mean least type system various part admittedly hidden user different rule common combination rffi rarithmetic different rule type name precise relationship varying type system remains mystery suspect current converge vm use appropriate type place future rpython mind astonishing project almost singlehandedly opened entirely new approach vm implementation experience show creating decent rpython vm huge amount work despite frustration short never new language need come unusably slow vms pypy rpython team shown idea scale fast implementation large realworld language python another feather cap important question whether approach rpython take unique possible tool one imagine using job experience rpython grown answer clearly rpython magic word first member new class tool expect last member class nothing else rpython probably nt ideal language purpose showed previous section best guess new javalike language compiletime metaprogramming found converge happens might appropriate could well wrong meantime reason embrace rpython work right got far congratulation long read know article long subject worthy curmudgeon find new development software thoroughly uninteresting rpython different interesting thing seen well decade exactly ramification something time tell think two fold first think new language suddenly find able compete well enough existing language given chance hope encourage language designer experiment previously felt able second one two vms enough purpose mindset severely challenged rpython show possible create custom vm language substantially outperforms mashing atop existing vm summary future programming language got lot brighter language designer dilemma acknowledgement rpython developer consistently helpful new vm would nt got far without valuable help carl friedrich bolz armin rigo particular maciej fijalkowski others pypy irc channel also extremely helpful martin berger carl friedrich bolz armin rigo also gave insightful comment article remaining error infelicity course follow twitter follow twitter
490,Lobsters,virtualization,Virtualization,Security of OS-level virtualization technologies,http://arxiv.org/pdf/1407.4245v1.pdf,security oslevel virtualization technology,,obj filter flatedecode length stream xڍy p z l stream q әi hc ȏ pdl w endobj obj filter flatedecode length stream ѣ p ë rk b v jᅏ endobj obj type xobject subtype image bitspercomponent colorspace devicergb filter flatedecode height length width stream bn 찳 v jnfe eɦ nt eɦ e nlu wa nt e e xjԕ e s n x f jѩuy h f fmot endstream endobj obj type xobject subtype image bitspercomponent colorspace devicergb filter flatedecode height length width stream څ u j jr t z v
491,Lobsters,virtualization,Virtualization,ONS2014 Keynote by Amin Vahdat about networking at Google,https://www.youtube.com/watch?v=n4gOZrUwWmc,keynote amin vahdat networking google,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote amin vahdat google youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote amin vahdat google youtube
492,Lobsters,virtualization,Virtualization,ZeroVM - open source virtualization technology based on Chromium Native Client,http://www.zerovm.org/,zerovm open source virtualization technology based chromium native client,zerovm detail zerovm run time zrt toolchain,zerovm zerovm open source virtualization technology based chromium native client nacl project zerovm creates secure isolated execution environment run single thread application zerovm designed lightweight portable easily embedded inside existing storage system functionality allows developer push application data instead pull data application case traditional architecture detail zerovm provides raw execution environment zerovm run time zrt includes port glibc inmemory file system provides compliant environment supporting posix syscall api zerovm expose non non posix api zerovm magic handled transparently application true posixunix tradition io zerovm modeled file input data presented application stdin log stderr output stdout communication channel peer zerovm instance also presented file rest visible file system transient memorybacked current implementation standard library major part posix available however behavioral deviation would expected normal implementation example since zerovm deterministic time function always return zero assume within standard could interpreted application running infinitely fast computer threading cooperative handled automatically deterministic hence thread synchronization primitive nops developing application zerovm requires use provided crosscompilation gnu toolchain
493,Lobsters,virtualization,Virtualization,My first unikernel (OpenMirage),http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/,first unikernel openmirage,unikernel reddit hacker news table content porting tiny minios kernel arm mirage unikernel introduction hello world kernel mirage tutorial xen hypervisor archinit startkernel camlstartup using mirage library asynchronous python v ocaml mirageblockxen mirageclockxen miragenetxen fatfilesystem tcpip mirageunix library miragetypes official tutorial test case repository storage mergequeues irmin miragefsunix mirage question writing rest service implementation uploadqueueml unittesting storage system error handling mirage http server buffered read streaming uploads cohttp read patch buffered writes fat well optimised upload speed xen wireshark tcp retransmissions wireshark capture failed download miragewww arm linux bug adding block cache block cache replacing fat conclusion huge amount work pureocaml tl stack irmin gitlike distributed branchable storage,wanted make simple rest service queuing file uploads deployable virtual machine traditional way download linux cloud image install software inside deploy instead decided try unikernel unikernels promise interesting benefit ubuntu cloud image mb unconfigured unikernel ended mb running queue service ubuntu run large amount c code securitycritical place unikernel almost entirely typesafe ocaml besides trying new thing fun post also appeared reddit hacker news table content regular reader know month ago began new job cambridge university working author real world ocaml leader ocaml lab project building pureocaml distributed system found blog post learning ocaml thought might want write ocaml actually porting tiny minios kernel arm using mixture c assembler let mirage unikernel run arm device course got curious wanted write mirage application introduction linux like many popular operating system multiuser system design date back early day computing single expensive computer running single o would shared many user goal kernel protect user protect user today computer cheap many people several even physical computer shared eg cloud computing typically done running multiple virtual machine serving single user protecting o usually single application pointless removing security barrier kernel application greatly simplifies thing run whole system kernel application single privileged executable unikernel rewriting everything anyway might well replace c modern memory safe language eliminating whole class bug security vulnerability allowing decent error reporting providing structured data type throughout past two thing made writing completely new o impractical legacy application run probably support hardware virtualisation remove obstacle legacy application run legacy vms driver needed virtual device eg single network driver single block driver cover real network card hard drive hello world kernel mirage tutorial start showing easy fullyautomated way build unikernel want get started quickly may prefer read skip section since one advantage unikernels relative simplicity thing way first understand work behind scene normal program ocaml hwml let printendline hello world compile run normal application ocamlopt hwml hw hw hello world make unikernel equivalent turn code work unmodified though mirage people might frown way compile hwml hwnativeo file link unikernel library instead standard c library export opamdir opam config var prefix export pkgconfigpath opamdirlibpkgconfig ocamlopt outputobj hwnativeo hwml ld static nostdlib startgroup pkgconfig static libs openlibm libminiosxen hwnativeo opamdirlibmiragexenlibocamla opamdirlibmiragexenlibxencamla endgroup gcc printlibgccfilename hwxen kernel image hwxen booted vm xen hypervisor used amazon rackspace etc host vms first look library added openlibm standard math library provides function sin co etc libminiosxen provides architecturespecific boot code printk function debugging malloc allocating memory lowlevel function talking xen libocamla ocaml runtime garbage collector etc libxencamla ocaml binding libminios boot code libgcca support function code gcc generates actually needed deploy new unikernel create xen configuration file giving mb ram hwxl name hw kernel hwxen memory oncrash preserve onpoweroff preserve setting oncrash onpoweroff preserve let u see output error would otherwise missed vm exit quickly boot new vm xl create c hwxl xen minimal o startinfo va nrpages sharedinf ptbase va nrptframes mfnlist va modstart va modlen flag cmdline stack mirage startkernel mm init text va etext va erodata va edata va stack start va end va startpfn maxpfn mapping memory range setting readonly skipped mm initialise page allocator mm done demand map pfns initialising timer interface initialising console done gnttabtable mapped xencaml appmainthread getenv ocamlrunparam null getenv camlrunparam null unsupported function lseek called minios kernel unsupported function lseek called minios kernel unsupported function lseek called minios kernel hello world main returned note testing locally running xen virtualbox feature used mode work testing unikernels also using git version miragexen official one display error printing greeting expects provide mainloop warning lseek ocaml trying find current file offset stdin stdout stderr see boot process quite short execution begin start using objdump hwxen see set stack pointer register call c function archinit start fc cld mov rip rsp stackstart ff ff rsp f mov rsi rdi bb callq archinit archinit libminios initialises trap fpu print xen minimal o information various address call startkernel startkernel libxencaml set feature event interrupt malloc timekeeping grant table call camlstartup camlstartup libocaml initialises garbage collector call camlprogram hwnativeo call printendline libxencaml convenience debugging forward consoleprint using mirage library bit hack ended using c console driver libminios one thing provides needed printk instead use mirageconsolexen ocaml library like hwml open lwt let main consoleconnect function error failwith failed connect console ok defaultconsole consolelogs defaultconsole hello world let osmainrun main mirage us usual lwt library cooperative threading wrote last year asynchronous python v ocaml mean wait result allowing code run everything mirage nonblocking even looking console osmainrun run main event loop since using library switch ocamlbuild give dependency tag file usual ocaml project tag true warn strictsequence package mirageconsolexen unusual thing tell ocamlbuild link unix module build hwnativeo ocamlbuild lflags linkpkg dontlink unix useocamlfind hwnativeo way use library access raw block device mirageblockxen timer mirageclockxen network interface miragenetxen nonxenspecific ocaml library used top lowlevel driver example fatfilesystem provide filesystem block device tcpip provides ocaml tcpip stack network interface mirageunix library may noticed xen driver library used ended xen fact implementation generic interface provided mirage example miragetypes defines abstract console interface module type console sig text console inputoutput operation type error invalidconsole string type representing possible error attaching console include device type error error val write string int int int write buf len writes len char stringsub buf len console return number byte written raise invalidargument len buf val writeall string int int unit io writeall buf len thread writes stringsub buf len console return done raise invalidargument len buf val log string unit log str writes much character str written one write operation console writes rn val log string unit io log str thread writes str rn console end linking unix version library rather xen one compile code ordinary unix program run directly make testing debugging easy make sure code generic enough wrap functor take console module input unikernelml module main c struct let start c clog c hello world end code provides xen unix console call go mainml mainml open lwt let console consoleconnect function error failwith failed connect console ok c return c module u unikernelmain console let osmainrun console ustart platformspecific code isolated mainml use mirage commandline tool generate automatically target platform mirage take configml configuration file generates makefile mainml based current platform argument passed configml open mirage let main foreign unikernelmain console job let register hw main defaultconsole mirage configure unix make mirhw hello world describe detail point reached start official tutorial read instead test case decentralised need single centrallymanaged repository several incompatible repository trying package every program common linux distribution possible every developer run repository containing software crossrepository dependency handled automatically possible mean go extreme medium sized repository managed team people convenient especially package maintainer come go general pattern group repository public server accepts new package uploads developer private firewalled server gpg key downloads debian us anonymous ftp server incoming queue polling cron job turn surprisingly complicated need handle incomplete uploads processing done deleting eventually never complete allow contributor overwrite delete partial uploads debian allows upload gpgsigned command file provides control etc well keep service fully patched also cron system annoying package contains mistake several minute discovers email packager perhaps decent system handle seemed like good opportunity try making unikernel particularly nice feature testcase matter much fails repository check signature file attacker compromise repository breaking queue everything queue intended become public need worry much confidentiality lost uploads easily resubmitted go bit mean new software added repository nothing critical service reassuring storage mergequeues library build queue abstraction top irmin gitinspired storage system mirage need simple wanted test primitive library first decided build queue directly plain filesystem first interface came uploadqueuemli module type f type pagealignedbuffer cstructt type blockdeviceerror fatfsblockerror upload avoid loading complete uploads ram stream network disk type item size data string lwtstreamt type adderror wrongsize unknown exn module make functor f f sig upload queue type create new queue backed filesystem val create ft lwtt module upload sig add upload queue upload added end stream reached total size match size record cancel add terminate stream val add item ok unit error adderror lwtt end module download sig interface repository software fetch item queue one client may use interface time thing go wrong return fresh stream item head queue without removing downloading successfully client call delete queue empty block item available val peek item lwtt delete item previously retrieved peek previous item already deleted nothing even item queue val delete unit lwtt end end unikernelml use make queue backed filesystem http post routed uploadadd get delete invocation go download submodule delete separate operation want repository confirm got item successfully delete case network error ideally might require delete come http connection get case accidentally run two instance repository software unlikely convenient test using separate curl invocation using another functor uploadqueuemake queue work filesystem theory configure unikernel fat filesystem block device running xen using regular directory running linux eg testing work see top restrict abstract f type two way read write function f pas data using abstract pagealignedbuffer type since need something data good enough therefore declare must cstructt basically array byte actually ok miragefsunix also us type one possible error code f abstract type fsblockdeviceerror see way turn one string using f interface therefore require filesystem implementation defines fatfsblockerror obviously mean support fat filesystem prevent u running normal process ask unix device actually plain diskimg file pas fat module would nice option using real directory asked mailing list mirage question writing rest service look like f type change soon implementation curious initial implementation uploadqueueml internally module creates inmemory queue keep track successful uploads uploads streamed disk upload completes declared size filename added queue upload end wrong size probably connection lost file deleted vm get rebooted need scan file system start work uploads complete deleted first thought name file numberpart upload rename success however f interface currently lack rename method instead write n byte start file set success work renaming would nicer downloading peek function return item head queue queue empty wait something arrives repository make get request something available return immediately otherwise connection stay open data ready allowing repository respond immediately new uploads unittesting storage system unikernel run process testing easy even local xen deployment set unittests test upload queue module program service run normal process listening normal tcp socket slight annoyance generated makefile include rule build test add manually regenerate makefile loses new rule might expect new system testing uncovered several problem first minor problem disk becomes full unhelpful error reported filesystem failure unknown error failure fault asked mailing list error handling mirage seems agreement error handling change serious problem deleting file corrupted fat directory index downloaded fat library added unittest delete made easy track problem despite lack knowledge fat code marking directory entry deleted fat library let b cstructsub block offset sizeof let delta cstructcreate sizeof begin match unmarshal b lfn lfn let lfn lfn lfndeleted true marshal delta lfn lfn do do let do do deleted true marshal b do do end assert false end updatefromcstruct offset delta acc supposed take entry unmarshal ocaml structure set deleted flag marshal result new delta structure delta returned applied device bug simple typo lfn long filename entry update correctly old do one writes new block input delta fix simple enough also refactored slightly encourage correct behaviour future let b cstructsub block offset sizeof let delta cstructcreate sizeof marshal delta begin match unmarshal b lfn lfn lfn lfn lfndeleted true do do do do deleted true end assert false end updatefromcstruct offset delta acc demonstrates good bad mirage bug easy find fix using regular debugging tool sure fixing filesystem corruption bug linux kernel would vastly difficult hard linux rather well tested whereas appear first person ever try deleting file mirage http server turned quite simple start function unikernelml module main c f uploadqueuefs h cohttplwtserver struct module q uploadqueuemake f let start c f http logwrite clog c loginfo starting queue service fun qcreate f fun q let callback connid request body match uripath requesthrequesturi uploader handleuploader q request body downloader handledownloader q request path hresponderror status badrequest body printfsprintf bad path sn path let connclosed connid loginfo connection closed ignore http h callback connclosed end functor extended take filesystem using restricted type required uploadqueue noted http server module argument http server call callback time receives request dispatch uploader request handleuploader downloader one handledownloader also simple eg let get q qdownloadpeek q fun uploadqueuesize data let body cohttplwtbodyofstream data let header cohttpheaderinitwith contentlength size adding contentlength loses transferencoding reason add back let header cohttpheaderadd header transferencoding chunked hrespond header status ok body let handledownloader q request match hrequestmeth request get get q delete delete q head put post option patch unsupportedmethod method put delete similar buffered read running unix process initially got download speed kb rather disappointing especially apache machine get mb increasing size chunk reading fat filesystem diskimg file byte able increase mb removing odirect flag mirageblockunix download speed increased mb linux caching data ram check filesystem problem removed fread call would return uninitialised data instead actual file content managed respectable mb nothing wrong http code streaming uploads worked nicely running unix process next step deploy xen hoping bug would already found unix testing fact lurking worked small file uploading larger file quickly ran memory test system also tried cubietruck arm board failed even sooner invalidargument stringcreate platform ocaml string limited mb case problem cohttp library tried read entire upload one go found read function transferio let read len ic todo functorise string bigbuffer match len return done len readexactly ic len function none return done buf return finalchunk buf changed use read rather readexactly read return whatever data available waiting let read remaining ic todo functorise string bigbuffer match remaining return done len read ic len fun buf remaining remaining stringlength buf remaining return finalchunk buf else return chunk buf also change signature take mutable reference remaining remaining data otherwise way know done patch buffered writes uploads split chunk upload speed unix kb batching chunk generally kb kb buffer increased speed kb mb buffer got kb code used let pagebuffer iopageget iopagetocstruct set first byte n indicate done yet reboot flag set partial upload deleted let pagebufferused ref cstructsetchar pagebuffer n let fileoffset ref let flushpagebuffer loginfo flushing byte disk pagebufferused fun let buffereddata cstructsub pagebuffer pagebufferused fwrite qfs name fileoffset buffereddata fun fileoffset fileoffset pagebufferused pagebufferused return let rec adddata src let srcremaining stringlength src srcremaining return else let pagebufferfree cstructlen pagebuffer pagebufferused let chunksize min pagebufferfree srcremaining cstructblitfromstring src pagebuffer pagebufferused chunksize pagebufferused pagebufferused chunksize lwt pagebufferfree chunksize flushpagebuffer else return adddata src chunksize data lwtstreamiters fun data adddata data flushpagebuffer asking mailing list confirmed fat well optimised actually problem service since still faster internet connection clearly work needed upload speed xen testing little cubietruck board got upload speed kb download speed kb hmm get feel board capable ran nc l p devzero board nc cubietruck pv devnull laptop getting mb still unikernel running guest meaning overhead using virtual network interface pas data sends real interface installed linux guest tried mb interesting idea faster loaded wireshark see happening unikernel transfer upload transfer mostly went fast stalled middle second second end wireshark showed unikernel packet reducing tcp window size indicating packet processed application code delay corresponded time flushing data sd card make sense look like another filesystem problem able write sd card much faster tcp retransmissions download wireshark showed many packet incorrect tcp checksum retransmitted already familiar bug previous mailing list discussion wireshark capture failed download miragewww arm turned linux bug privileged code responsible sending virtual network packet real network becomes confused two packet occupy physical page memory happens read mb data disk send http layer next chunk chunkedwrite http chunking sends tcpip channel channelwritestring writes http output page aligned block memory pcbwritefn determines page big tcp packet split one smaller chunk sharing single underlying page let rec writefn pcb wfn data let len cstructlen data match writeavailable pcb writewaitfor pcb writefn pcb wfn data avlen avlen len let firstbit cstructsub data avlen let remaingbit cstructsub data avlen len avlen writefn pcb wfn firstbit writefn pcb wfn remaingbit avlen wfn data original fix changed miragenetxen wait first buffer read sending second one fixed retransmissions waiting meant still got kb instead changed writefn copy remainingbit new io page got kb replacing filesystem read simple stringcreate length got mb showing fat filesystem limiting factor adding block cache tried adding block cache layer mirageblockxen fatfilesystem like module main c b h cohttplwtserver struct module bc blockcachemake b module f fatfsmake bc iopage module q uploadqueuemake f let memcachesize mb let start c b http logwrite clog c loginfo start queue service fun bcconnect b memcachesize function error failwith bcconnect ok bc fconnect bc function error failwith fconnect ok f qcreate f fun q place upload speed remains kb download speed increase mb mb file therefore fit cache suggests fat filesystem reading disk sector many time enlarging memory cache cover whole file download speed increase mb fat code must inefficient calculation replacing fat since problem seemed coming using fat decided try new approach removed fat code block cache changed uploadqueueml write directly block device caching get upload speed mb download speed mb bad faster internet connection mean unikernel longer limiting factor new version uploadqueueml big simplification come knowing queue spend time empty another good reason use small vm code nextfreesector advance every time upload start queue becomes empty uploads progress variable reset back sector sector hold index mean may report disk full error uploaders even free space disk happen typical usage repository downloads thing soon uploaded happen mean uploaders wait couple minute repository empty queue managing block device manually brought advantage fat need generate random file name uploads need delete incomplete uploads write index entry disk success system recover automatically filesystem corruption invalid entry detected reliably boot time discarded disk full error reported correctly queue ordering lost reboot conclusion modern operating system often extremely complex much historical baggage needed modern system running single application vm hypervisor mirage allows create small vms contain almost c code vms easier write reliable secure creating bootable ocaml kernel surprisingly easy adding support extra device matter pulling appropriate library programming generic interface create code run linuxunixos x virtual machine xen switch configuration using mirage tool mirage still young found many rough edge writing queuing service linux provides fast reliable filesystems standard mirage currently provides basic fat implementation linux provides caching standard implement mirage error reporting big improvement error code getting friendly error message mirage currently difficult system clearly designed high performance apis generally write userprovided buffer avoid copying much like c library many area yet optimised buffer often extra requirement eg must pagealigned single page immutable etc currently captured type system lead runtime error would ideally detected compile time however huge amount work happening mirage right look like problem worked interested lowlevel o programming want mess c mirage lot fun useful practical task already bit effort still many area need find particular using new pureocaml tl stack secure system trying irmin gitlike distributed branchable storage provide queue instead writing hope try
495,Lobsters,virtualization,Virtualization,Mirage v2.0: a recap of the new features,http://openmirage.org/blog/announcing-mirage-20-release,mirage recap new feature,anil madhavapeddy first release unikernel concept background steadily growing team hard work amir chaudhry arm device support cubieboard mutiscale programming model nymote halvm clickos irmin distributed branchable storage irmin ocaml tl transport level security bad security hole hannes mehnert david kaloper modularity communication library operating system regularly released opam installation instruction bug report question publishing library richard mortier oscon cloud track,anil madhavapeddy work funded part eu usercentric networking project grant first release mirageos back december introduced prototype unikernel concept realised promise safe flexible mechanism build highly optimized software stack purposebuilt deployment public cloud background since hard work using extending mirageos real project community steadily growing thrilled announce release mirageos today past week team hard work blogging new feature latest release coordinated tireless amir chaudhry arm device support first version mirageos specialised towards conventional cloud code generation boot library made portable enough operate lowpower embedded arm device cubieboard key part effort build safe unified mutiscale programming model cloud mobile workload part nymote project also upstreamed change required xen project unikernel effort halvm clickos benefitirmin distributed branchable storage unikernels usually execute distributed disconnectionprone environment particularly new mobile arm support therefore built irmin library explicitly make synchronization easier via gitlike persistence model used build easily trace operation distributed application across diverse environmentsocaml tl philosophy mirageos construct entire operating system safe programming style device driver continues release comprehensive ocaml implementation transport level security widely deployed endtoend encryption protocol internet one prone bad security hole blog series written hannes mehnert david kalopermodularity communication mirageos built concept library operating system release provides many new library flexibly extend application new functionality library required new feature regularly released opam package manager follow installation instruction give spin release size probably introduces minor hiccup may cause build failure much encourage bug report issue tracker question mailing list nt shy question basic love hear weird wacky us put new release finally lifeblood mirageos sharing publishing library add new functionality framework get involved opensource effort breaking news richard mortier speaking oscon week thursday morning new feature cloud track come along rainy portland moment
496,Lobsters,virtualization,Virtualization,libcloud-vagrant - A Vagrant compute provider for Apache Libcloud,https://github.com/carletes/libcloud-vagrant,libcloudvagrant vagrant compute provider apache libcloud,libcloudvagrant vagrant compute provider apache libcloud apache libcloud vagrant virtualbox hello world feature hostonly internal vdi disk sata controller requirement virtualbox vagrant vagrantlibcloudhelper vagrantproxyconf installation example sample,libcloudvagrant vagrant compute provider apache libcloud libcloudvagrant compute provider apache libcloud us vagrant create virtualbox node libcloudvagrant installed could prototype small cluster laptop instance deploy later amazon rackspace cloud supported libcloud hello world following snippet spin virtual machine running host libcloudcomputeproviders import getdriver libcloudvagrant import vagrant driver getdriver vagrant pub driverexcreatenetwork name pub cidr publictrue node drivercreatenode name imagedrivergetimage sizedriverlistsizes exnetworks pub print node running nodename print connect ssh vagrant password vagrant nodepublicips feature libcloudvagrant us vagrant create box network volume creates vagrant environment libcloudvagrant used run many vagrant box define node created libcloudvagrant may connected public network private network public network implemented virtualbox hostonly network private network implemented virtualbox internal network libcloudvagrant also let create vdi disk attach sata controller node deployment script run vagrant nat interface using vagrant ssh credential therefore also work nonnetworked node libcloudvagrant includes commandline tool simple operation vagrant node created libcloud libcloudvagrant h usage libcloudvagrant h cmd manage vagrant libcloud environment positional argument cmd command execute optional argument h help show help message exit available command destroy destroys node network volume vagrant environment list list node network volume vagrant environment screen open screen session node vagrant environment libcloudvagrant thread multiprocesssafe interaction vagrant virtualbox commandline tool protected filesystembased lock hopefully serializes thing even worked concurrent operation would give much benefit requirement libcloudvagrant requires virtualbox tested version linux vagrant tested version linux python want attach storage volume node need vagrantlibcloudhelper vagrant plugin install vagrant plugin install vagrantlibcloudhelper following optional behind httpftp proxy vagrant plugin vagrantproxyconf modify node created libcloudvagrant use nt need configure vagrantproxyconf install vagrant plugin install vagrantproxyconf installation installed virtualbox vagrant usual pip install libcloudvagrant install libcloudvagrant python dependency might want within virtualenv example look sample subdirectory source distribution wil find script create single node show provision script creates twonode cluster
498,Lobsters,virtualization,Virtualization,Open Cloud Computing Interface: An Overview,https://blog.engineyard.com/2014/open-cloud-interface,open cloud computing interface overview,open grid forum de facto v de jure advantage learning occi work ovf thing popularity contributed according opennebula openstack user survey since least le enterprise facing high performance computing egee say recently added much opinion built plugin alternative adaptor apache libcloud point conclusion,cloud apis allow engineer control layer cloud provisioning new vms altering specific software service several competing cloud apis existence today learning came faring one another give deeper insight challenge presently faced cloud computing general post take detailed look one api developed open grid forum de facto v de jure two model designing apis standardise code code standard first de facto approach second de jure cloud apis exception characterisation leading de facto api amazon web service aws suite emerged proprietary interface amazon software first aws service launched though launched leading de jure api open cloud computing interface occi work occi began open grid forum effort partly driven fact numerous competitor aws available used divergent usually proprietary apis enabled occi created advantage learning many existing elastichosts flexiscale gogrid sun cloud occi primarily intended target iaa encompassing lowlevel infrastructure especially concentrating vm management also designed extensible however therefore also work paas saas framework occi work occi rest framework mean us http extension provide extra metadata need extension entirely compatible existing http client example issue command machine using command line tool curl whatever use make http request principle similar operation supported occi trivial example get vm path get case get ovf file back extra header metadata header contain information whether vm startable system want return even richer metadata using variety property encapsulated value within occi extension header field xocciattribute occicomputecores thing occi call include creating listing vms executing start stop action vm creating block storage volume creating listing security group allocating floating ip address popularity many corporation contributed development occi including big name rackspace oracle cisco deployment term occi interface range software including apache cloudstack opennebula openstack popular occi well according opennebula occi market share aws openstack user survey conducted later year bleak enabled surveyed instance occi contrast enabled occi available openstack since least fact relatively people using openstack due recent implementation hard explain many people seem use occi opennebula openstack one possibility arises fact opennebula le enterprise facing openstack least part due european commission research funding consequent use academia high performance computing mean user could include large exegee contingent may minded towards open standard cloudstack david nalley cloudstack committer say occi related competing standard cimi really two problem standard first problem neither massive adoption turn mean number library thirdparty tool support apis pretty small many way defeat purpose using single widely adopted standard second issue wide applicability apis pretty generic turning virtual machine easy want use latest coolest feature specific iaa platform might exposed cimi occi nalley fellow committer sebastien goasguen recently added occi capability cloudstack voiced much concern one counter argument second claim standardisation focus lowest common denominator occi actually designed extensible outset therefore made support feature set first claim relatively low adoption hard dispute occi launching opinion could turn ubiquitous control model cloud computing happen uptake matched aws yet nice design major backer plenty available implementation reason slow occi uptake harder explain one possibility aws pervasive open standardisation seen redundant counterzeitgeist yet clearly inherent danger approach nalley critical occi also criticises aws approach saying anybody track aws api must also track amazon peculiarity whim api neither generic vendorneutral simply choose track amazon may run potential problem fidelity api area marketplace may indigenous de facto apis example aws built plugin vmware vcenter api set alternative potential alternative aws v occi dichotomy one use adaptor make occi compatible aws translating occi call aws call available since clear widely used one advantage would wanted move cloud operation away aws could easily call already using occi since would able switch occi compatible platform course many alternative platform also track aws api anyway may great advantage first seems another potential alternative use something like apache libcloud approach sits somewhere de jure approach standard like occi de facto approach code like aws apache libcloud codebased generic interface many cloud platform word like standardisation effort written code also alternative area fog darko androcec point apache jclouds dasein cloud api adapter allow build acting cloud abstraction layer writing multicloud connector independent middleware conclusion cloud api standardisation attempt started ambition provide vendorneutral interface layer cloud ecosystem promoting interoperability reuse great extent aim met intrinsically result effort result becoming popular initially hoped expected though occi particular adoption aws api still industry leader de facto standard position look unlikely undergo radical change short term despite lesson occi learned aws api increasingly contains feature specific aws competition amongst cloud platform aws gce azure increase future value occi standardisation effort provides could increase proportion p use occi daily work perhaps competing standard cimi able compare aws cloudstack native api another well known cloud api please share insight comment love hear disclaimer author article mentor cloudstack incubation period apache software foundation presently serf management committee project
500,Lobsters,virtualization,Virtualization,Virtualization Technology and Cloud Service Providers,http://netloid.com/technology/virtualization-technology-and-cloud-service-providers-what-you-need-to-know/,virtualization technology cloud service provider,anatomy cloud service infrastructure layer platform layer application layer virtualization cloud virtual private server virtual machine v container kvm kernelbased virtual machine xen openvz,infrastructure virtualization definitely new concept lowered cost coupled increased capability may make replacing old server new expensive server thing past saving money giving access powerful hardware development virtualization led recent boom use popularity cloud computing whether choose leverage power public cloud simply wish use datacenter resource create virtual hardware benefit becoming impossible ignore virtualization cloud computing give increased scalability reduced infrastructure cost unparalleled redundancy accompanying service availability make development testing environment much versatile go basic vps cloud technology well popular virtualization platform including kvm xen open vz anatomy cloud service chance heard term cloud tossed around lot lately one new buzzword many case practical solution application deployment cloud service built upon three layer application layer platform layer infrastructure layer end user concerned application layer far ever go system administrator developer however need know layer work interacts explanation start application layer start infrastructure layer layer tech savy reader doubt familiar infrastructure layer layer though foundation cloud service structure physical hardware server router switch device make infrastructure layer purpose layer provide actual computing power behind application accessed user much power provided using virtualized hardware well known cloud infrastructure provider vmware amazon presidio enterprise cloud platform layer platform layer provides service support application connectivity data retrieval messaging others infrastructure layer many thesis service virtualized hosted virtual hardware provide significant cost saving assist proper resource allocation amazon web service google app engine well known platform layer provider application layer name suggests layer enduser application run enterprise private user alike utilize layer get common service gmail calendar application payroll application type application think application known saas software service another common buzzword virtualization cloud cloud computing necessarily need virtualization growth popularity heavily based vps virtual machine technology virtualization mean provider physical hardware divided multitude virtual server using separate tool resource combining provide cloud hosted service large cloud computing provider amazon google make heavy use virtualization provide cloud hosting service customer private company also make use virtualization provide cloud employee customer allowing access hosted service anywhere time software service saas becomes popular vps cloud computing technology next two section concerned virtual hardware namely virtual private server virtual machine virtual private server virtual private server vps exactly sound like set amount resource operating virtual equivalent private server vps hosted physical server running resource allocation software known hypervisor hypervisor created manages allocates resource virtual server guest server overall environment limited amount resource available hypervisor guest machine allocated set amount hardware space ram cpu processing power vmware hyperv major player among company provide inhouse virtualization service open source product like openvz kvm xen popular many vps service provider virtual machine v container quite virtualization platform going go popular open source virtualization tool include kvm xen used provision virtual machine openvz us something called container environment container virtual machine distinct benefit need know best environment pick virtualization solution right container based platform operate using sing operating system kernel virtual machine based application run many different operating system kernel administrator want providing necessary infrastructure exists imagine make container much le demanding host system downside however limited running single operating system may may practical need similarly virtual machine act running top physical hardware mean network card need virtualized well adding slight restriction throughput container requirement fact need hardware emulation file system also differ reason virtual machine separate virtual hard drive container simply another chroot environment taking difference account decision maker twofold hardware restriction operating system requirement hardware run many virtual machine need need virtual machine running variety operating system virtual machine probably solution however somewhat limited infrastructure simply need variety operating system container much practical kvm kernelbased virtual machine kvm kernel module turn linux kernel hypervisor allowing system administrator setup virtual machine address space allocate resource feed virtual machine input output kvm allows variety operating system run guest host including common linux distribution window server well window xp window kvm downside run processor support hvm hardware virtual machine since kvm integrated linux kernel us machine preexisting process scheduler memory management ability overall kvm excellent lightweight open source solution virtualization need xen xen provides hypervisor much like kvm allows resource allocated namespace virtual machine many large company google rackspace cloud server use xen hypervisor manage virtual infrastructure job well xen allows system administrator create virtual server using either paravirtualization hardwareassisted virtualization paravirtualization allows virtual machine run modified operating system host virtual machine even system lacking hardware support virtualization hardwareassisted virtualization meant system virtualization supporting hardware allows virtual machine run variety operating system including window linux ability run virtual machine hardware support virtualization feature vps provider offer xen also quite scalable capable utilizing physical cpu tb ram offer management console xen management console help system administers manage xen host openvz openvz allows creation vpss container based virtualization environment container simply allocation processing power ram storage space form single independent virtual server container act real physical server rebooted user ip address configuration openvz different virtualization technology operating system kernel run hosted virtual server unlike virtual machine hosted xen kvm provide much flexibility operating system usage eliminate need multiple operating system kernel using physical resource openvz system mean virtual server dynamic many hosted using amount physical resource competing product openvz ship graphical user interface control panel relying solely command line interfacing may big downside user le competent using command line virtualization cloud computing going become popular widely used next year every business professional need know virtualization cloud computing work major player industry leveraged improve business process whether looking service hosted amazon ec need implement private cloud simply want ability create destroy virtual machine development testing purpose knowledge work behind scene exact benefit negative essential virtualization reduce infrastructure cost reliability redundancy data center service also giving flexibility create nearly unlimited amount server dedicated whatever task need complete need replace old failing equipment nearing end life instead virtualize saving time money future maintenance contract expenditure customer happy
501,Lobsters,virtualization,Virtualization,Portable-VirtualBox,http://www.vbox.me/,portablevirtualbox,portablevirtualbox free open source software tool let run operating system usb stick without separate installation installationâ instruction wwwvirtualboxorg optionalâ configuration feature install file signature note virtualbox need several kernel driver installed need start several service driver service already installed need administrator right run portablevirtualbox network support language launcher important virtualbox,portablevirtualbox free open source software tool let run operating system usb stick without separate installation installationâ instruction download runâ choose folder extract go folder runâ portablevirtualboxexe see window like one already downloaded installer virtualbox wwwvirtualboxorg click search navigate file click download installation file virtualbox portablevirtualbox show download progress installer download check box appropriate click ok portablevirtualbox extract file need virtualbox installer restart afterward select last checkbox optionalâ configuration portablevirtualbox make default setting automatically modify pressing opening tray menu portablevirtualbox running either action bring configuration gui hokeysettings tab shown open image feature splash screen start end configurable home directory launch virtualbox gui directly launch vm configure hotkeys managing virtual machine configure usb network support choose language gui save setting editable inifiles automatically check virtualbox update absolute path virtualboxxml replaced automatically relative path check make sure virtualbox file exist install file signature install file launcher version digitally signed signer source developer runar certificate issued certum level iii ca temporarily disabled new certificate arrives mail note virtualbox need several kernel driver installed need start several service driver service already installed need administrator right run portablevirtualbox portablevirtualbox start check see driver installed install running virtualbox remove afterward similarly portablevirtualbox check see service running start stop exit want save space remove language file language save nearly mb nls directory also delete theâ documentation saving nearly mb find doc directory vm running must press hostkey initially configured right ctrlkey able use hotkeys since otherwise vm focus network support download portablevirtualbox unpack portablevirtualbox start portablevirtualbox attitude open tray attitude rider network tab virtualbox network support start memory save terminate portablevirtualbox start portablevirtualbox driver installation agree wait selection vm network map host interface stop attitude make finished language launcher english german portuguese spanish french â italian chinese japanese polish russian ukrainian important none file come virtualbox modified otherwise changed portablevirtualbox downloads virtualbox installer contains virtualbox file driver portablevirtualbox unpacks file store subdirectory portablevirtualbox also compress order save space adsense typeadhead
502,Lobsters,virtualization,Virtualization,Non profit OpenStack & Ceph cluster distributed over five datacenters,http://dachary.org/?p=2969,non profit openstack ceph cluster distributed five datacenters,april fsf france tetaneutralnet ceph openstack openstack openstack havana installed puppet ganeti ovh network tinc based full mesh agent hack isolated ip handled dacharyorg neutron openvswitch gre run kernel storage associated instance running storage policy made available tenant compute neutrality encrypted rbd use case instance archive sharing movie music grow dynamically necessary erasure coded continuous integration located hypervisor free software usage value accident conclusion,non profit organization april fsf france volunteer constantly research get compute storage bandwidth free software content neutral low maintenance reliable cheap latest setup use since ocbober based ceph openstack cluster spread five datacenters designed following use case free software development continuous integration hosting low activity web site mail server etc keeping backup sharing movie music cluster made twenty node core ram raw storage openstack hypervisors run openstack havana installed puppet individual organization trusted ultimately tenant convenient way avoid mistake enforce security greatly reduced number human error compared sharing root access ganeti cluster hypervisor paid different entity different access policy cost general consensus everyone consumes roughly amount resource contributes cluster exception transition phase renewing hypervisor hardware breakage case spare resource cluster used long take recover instance decommissioning ovh hardware instance contains restarted hypervisors ceph osd removed number user feel comfortable running instance hardware pay forcedhost policy allowed everyone ovh used target hypervisor network datacenters various level internal connectivity ovh hosted hardware tetaneutralnet latency tetaneutral hetzner le cloudwatt fsf france datacenters assigned public subnet others public ip tinc based full mesh connects node cluster node share common subnet tinc daemon performance bottleneck route added bypass instance used maximize performance two ceph osds residing gigabit network fsf france datacenter run agent routing ip resides possibly hack isolated ip handled instance running anywhere cluster use floating ip exiting another datacenter dacharyorg instance running ovh datacenter using floating ip fsf france datacenter neutron configured openvswitch gre making sure agent run kernel avoid performance issue storage hypervisor provides lvm pool designed associated instance running performance reason ceph cluster given rest storage capacity one pool encompassing disk placement rule imposing two copy given object datacenter also defines one pool per datacenter used improve performance data stored pool would lost datacenter destroyed ceph osd tree id weight type name updown reweight root default datacenter ovh host host host datacenter hetzner datacenter cloudwatt host host host datacenter fsf host host storage policy made available tenant via dashboard command line cinder create availabilityzone volumetype lvm displayname cinder create volumetype fsf displayname volumeinfsfcephpool ceph overhead cross datacenter never problem despite datacenter failure lasting hour distributed wan disrupted much often ceph cluster good connectivity compute hypervisors run kvm neutrality content stored shared outside cluster responsibility individual organization cluster deliberately designed know little possible activity user encouraged systematically use cryptography protect privacy instance disk virtual machine encrypted allocated rbd content although spread among many disk recovered analyzed third party use case instance archive instance booted ceph rbd volume longer needed shutdown needed booted associated ceph pool becomes full erasure coded tier added evict object colder month sharing movie music disk allocated store movie music shared individual disk allocated ceph grow dynamically necessary ceph pool used going tiered erasure coded pool reduce raw disk usage continuous integration short lived instance booted lvm volume located hypervisor maximum io performance without network usage free software proprietary software exist usage value bare metal resource least five time cheaper equivalent cloud high reliability ceph help volunteer reduce maintenance cost time money choosing replace hardware extends beyond storage hypervisor fails entirely data need recovered cpu ram network connectivity replacement hypervisor wait done cheaply conveniently installing new hardware manual step require two three hour included recent machine expected work reliably least three year openstack havana ceph cluster openstack essex lvm cluster used part still exists went accident expected cluster tenant able use without intervention six month time conclusion find cooperatively maintained cluster flexible cheaper reliable solution although spend time anyone caring able use month december february included without system administration related work able use raw computestoragenetwork long period time without maintenance made possible highly reliable software kvm ceph human error becomes main source problem openstack tenant gradually reduces burden hope able forget maintenance full year using cluster daily basis already quite happy run three month
503,Lobsters,virtualization,Virtualization,Erlang on Xen goes Open Source,http://erlangonxen.org/,erlang xen go open source,manual publichtml existing bug report,default welcome page used test correct operation server installation ubuntu system based equivalent page debian ubuntu apache packaging derived read page mean apache http server installed site working properly replace file located varwwwhtmlindexhtml continuing operate http server normal user web site nt know page probably mean site currently unavailable due maintenance problem persists please contact site administrator ubuntu default configuration different upstream default configuration split several file optimized interaction ubuntu tool configuration system fully documented refer full documentation documentation web server found accessing manual package installed server configuration layout web server installation ubuntu system follows portsconf modsenabled load conf confenabled conf sitesenabled conf main configuration file put piece together including remaining configuration file starting web server portsconf always included main configuration file used determine listening port incoming connection file customized anytime configuration file modsenabled confenabled sitesenabled directory contain particular configuration snippet manage module global configuration fragment virtual host configuration respectively activated symlinking available configuration file respective available counterpart managed using helper see respective man page detailed information binary called due use environment variable default configuration need startedstopped calling directly work default configuration default ubuntu allow access web browser file apart located varwww publichtml directory enabled usrshare web application site using web document root located elsewhere srv may need whitelist document root directory default ubuntu document root varwwwhtml make virtual host varwww different previous release provides better security box please use ubuntubug tool report bug package ubuntu however check existing bug report reporting new bug please report bug specific module php others respective package web server
504,Lobsters,virtualization,Virtualization,Vagrant 1.6 Feature Preview: Docker-Based Development Environments,http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html,vagrant feature preview dockerbased development environment,message received criteo fully replaced manual service discovery using hashicorp consul,case studymessage received criteo fully replaced manual service discovery using hashicorp consul
505,Lobsters,virtualization,Virtualization,Why Your App Won’t Work In The Cloud,https://blog.engineyard.com/2014/why-your-app-wont-work-in-the-cloud,app work cloud,twelve factor approach shuts taking closer look problem putting apps ice danger robinson conclusion starting wordpress,two kind apps cloud one work one one work called twelve factor apps work written specifically cloud call one work legacy apps designed run traditional vps host unfortunately popular apps legacy apps written cloud mind generally work without modification legacy apps include offering wordpress magento drupal might also include inhouse apps thinking moving cloud done way run legacy apps cloud approach approach problem deploying legacy app single server scaling meet demand different traditional vps hosting going get nasty shock amazon retires read shuts better solution make change app compatible cloud compatible mean distributed across cluster way scale adding server server get sick replace new one start making significant change offtheshelf legacy app however essentially forking code base require dedicated developer time continually merge upstream change think better approach fortunately go bit ground cover basic concept need familiarise way forward becomes clear taking closer look problem essential cloud computing concept carefully picked longer series post bring speed traditional vps model server like pet expensive commision complex set timeconsuming replace result treat dedicated love affection nurse back health get sick cloud server inexpensive commision trivial configure easy replace result treat like cattle functionally identical one get sick replace another legacy apps expect run pet server task make run cattle server easy spin new cattle server new way approaching configuration traditional model pet server configured ongoing fashion change applied hand incrementally time cloud want spin replacement server quickly possible time wait human configure new machine must write configuration ahead time way server cluster configured identically achieve use configuration management tool configuration go live adaptable thing something frozen time time make substantial change must redeploy entire cluster new snapshot task trick legacy app using frozen bad writing information file system anyway lot way handle shared state computer program app using thread use thread safe memory using multiprocess model use sort interprocess communication ipc shared pipe file system database cluster app instance clustering app across many machine bit like forking process except process running physically isolated hardware use memory ipc method communicate state across network mean legacy app mean attempt write state file system going need replaced network call instead make change state shared app going break really bad use file system something beware peril putting file system cloud example many legacy apps expect able modify file allow trigger deploy git repository lose modification approach take could take stateful approach run app single server still trigger deploys babysit file system already explained mean miss cloud offer could also use distributed file system hit another problem sacrifice something whether consistency predictability performance app written consideration mind going run trouble best approach adopt full sharednothing architecture mean using file system temporary local state everything else must written shared data store putting apps ice leave u legacy apps compatible cloud created cloud prehistory progress left behind thankfully rewrite scratch fool stateful apps running stateless environment freezing local state start running copy app local machine use standard administration console configure app configuring production install plugins make configuration adjustment background app writing thing file system expects operate clever part finished making change simply commit file version control system effectively freeze state frozen state deploy anywhere one server thousand server choice danger robinson three caveat approach configuration must done dev change config setting kept database must make change production deploy deployed frozen app admins must make configuration change result file system change example installing plugins may even able enforce locking part admin dashboard depending production part app expects able write permanent file production example image upload script need replaced way around fortunately case plugin similar make easy dropin replacement likely unusual workflow admins legacy app may way enforce make somebody admin good idea explain necessary upgrade deployment step conclusion working cloud unintuitive time unfamiliar concept provide u enormous power fault tolerance high availability flexible scaling name moreover unfamiliar soon becomes familiar practice principle stateless environment learned applied get better acquainted strange new world diving right looking specific real world apps starting wordpress walk full cloud setup incorporating technique taught present article tasked deploying legacy app cloud sort change make let u know comment
506,Lobsters,virtualization,Virtualization,A Simple Capstan Example - OSv Blog,http://osv.io/blog/blog/2014/04/03/capstan/,simple capstan example osv blog,capstan osv docker complicated set instruction capstan easy example plus makefile work libevent tor chromium dmartihttpserver step two add capstanfile docker cmd putting together http osvdev mailing list google group cloudiussystems,updated april add new url osvbase image capstan new tool building osv virtual machine image worked tool making vms find capstan really simple lot like docker get complete vm container probably used blog sneaky tech evangelist claim something simple post complicated set instruction keep finger close button need finger close button good ready let make vm something useful say serve article entire internet go ahead git clone capstan follow along easy example plus makefile work keep simple let borrow short http server example libevent libevent project wrapper convenient eventdriven programming library used highprofile project tor anonymous communication system chromium basis google chrome web browser best libevent includes easytouse http implementation sample code using copy web server sample code tweak little make web server need set simple makefile step done code article dmartihttpserver need development package libevent installed system called libeventdevel target pay attention httpserverso httpserverc cc fpic shared levent yes right using fpic position independent code shared passed linker make build shared library httpserverc function called main going way osv work application osv conventional elf executable file besides building actual http server also put make target create html version article readme type make build web content web server course expand build complicated application data set want example show capstan step two add capstanfile time tell capstan create virtual machine image building run build section right need tell capstan file go image populate file section name web server httpserverso libevent shared library web html version article plus faviconico file copying development system copy libevent image real use come consistent way keep track build artifact like probably borrowing helpful linux distribution yes osv use library built linux box easy far cmdline option like docker cmd command get run image start http server take documentroot entry command line command come cmdline toolshttpserverso www one section capstanfile base prebuilt osv image available amazon capstan automatically download life capstan home directory putting together type capstan build capstan invokes make creates vm image life capstan home directory capstanrepositoryhttpserverhttpserverqemu image ready run kvm convert favorite format told simple capstan run point browser http see site upcoming blog post cover recently added virtualbox support capstan hint try p vbox fun thing capstan question please join osvdev mailing list google group get update new osv capstan progress subscribing blog folllowing cloudiussystems twitter
507,Lobsters,virtualization,Virtualization,Is cloud dead?,http://blog.netwrix.com/2014/03/28/cloud-vs-in-house/,cloud dead,spiceworks community snowden require security standpoint sensitive data keg data belong company approach data cost v benefit ratio,new technology come life always tempting fall magic charm time passing important stay overwhelmed newest shiniest thing market rather watch actually work risk implied actually worth trusting itnot long ago question asked spiceworks community actually got lot response definitely one hottest topic community day especially snowden scandal article find spice head think current state cloud still use cloud provider going continue adopting new cloud technologiesaccording spice head several thing consider deciding whether trust cloud provider data five important one require security standpoint make decision whether rely cloud provider build inhouse infrastructure prioritize need security reliability availability data first prioritiesforce flow peopleorganizations storing data cloud great others great depends requirement goal storingretrieving data feel using cloud depend critical sensitive data extent willing expose third party sensitive data next thing define kind data sensitive tragic get leak lose together important understand difference business information personal data would probably make sense trust cloud service one kind data rely inhouse wellcontrolled system anothergary williams said say cloud data important thing someone else hardware someone else care data understand accept limitation fine expect cloud never ending resource uptime performance nasty shock trust cloud see potential useskeg personal cloud service place business risk great data leakage trust whatsoever cloud private cloud way go know level data security quite level others also understand cloud service may adolescent period level service security like anything else grow get better get best information make best decision based future need whatever might data belong company decision also depend purpose suit private person data might applicable huge enterprise different degree risk loss caused leakage tremendously incomparable seems guy share thought saas well cloud suitable small mediumsized business opposing enterprise marketkris spiceworks saas way thing going see absolutely reason smbmidmarket organization run exchange infrastructure example unless organization willing invest fulltime domain expert exchange along supporting hardware software saas provider better purposebuilt data center trained staff exchange expertise go lob application well including crm salesforce hrmfinance etc embrace service utilize full extent security worry go away guarantee salesforce much better job securing customer data lone guy formal background data going responsible trust cloud throw saas think pose lot promise small company approach data important decide access data help make right choice handle store itrichbruklis cloud essentially remote data center vulnerable outage security issue would think name brand cloud invest prevent anything bad occurring case would probably trust cloud bit data center afford dual redundant generator triple network connection etc far security think cloud folk enough place make good better good security start home good strategy tactic locally pretty sure translate cloud cost v benefit ratio come cost ask question deal cloud service outrage downtime afford really important know data actually stored relatively flexible thing cloud provider might suit well plus cheaper casesgravesender considerable debate cloud v inhouse exchange opted inhouse number lack affordable access reliable internet connectivity decent bandwidth chronic problem since started year ago inhouse exchange let folk keep working lose outside connectivity shared calendar important hand sale manager big advocate cloud could theory remain touch smart phone anything went wrong server bos suspicious nature trust cloud far operating cost go got exchange going pretty much run maintain inhouse network lob application really suitable cloud caseso see everyone reason blame defend cloud provider saas important understand kind data also omit always risk giving data someone else even trusted contractor forget best choice always based need seems trendiest thing therewhat think cloud service role cloud company
508,Lobsters,virtualization,Virtualization,SSH into Docker containers by name,http://muehe.org/posts/ssh-into-docker-containers-by-name/,ssh docker container name,ssh docker container name github dockerssh,ssh docker container name mar hacked together ssh proxy direct ssh docker container using name github excerpt readme dockerssh allows connecting local docker container using ssh simply like ssh containernamedocker containername name container ssh running automatically install current user using curl http rawgithubusercontentcomhenrikmuehedockersshmasterinstall binbash enjoy
509,Lobsters,virtualization,Virtualization,Configure Before You Boot,https://blog.engineyard.com/2014/configure-before-you-boot,configure boot,pet v cattle metaphor noflake configuration management chef open source chef recipe pro con configuration lifecycle compilation compilation hybrid approach idempotent conclusion done next post series,previous post series learned pet v cattle metaphor teach u new way approaching cloud server architecture instead unique pet require constant individual care focus instead cattle identical homogenous unit added en masse removed ease cattle server word fungible resource take family three care single puppy cowboy drive ten thousand cow great distance joshua mckenty cto piston cloud post explains cattle mindset sometimes called noflake approach contrast pet server looked administrator beavering away console want cattle server configured intervention pet server administered manually ssh tweak configuration download install new package perform maintenance task checking memory network usage make sure runaway process cattle server difference pet server configuration done afterwards post facto create server administer changing state server period time whereas cattle server configuration done beforehand exante write server created thing would like done server boot send configuration server action executed behalf action executed configuration management cm tool puppet chef list thing want done booting take form configuration file cm tool understand written specialised sometimes declarative domain specific language familiar ruby programming language home either puppet chef allow ruby syntax option domain specific language example use chef engine yard take look open source chef recipe github get feel chef recipe look like pro con recap quickly deployment configuration point server model manual post facto pet automatic exante cattle advantage disadvantage approach obvious advantage post facto administration reactive something went wrong setup process admin could rectify problem interactively real time exante cattle server action cm configuration file correct sent machine configuration correct suddenly cattle server huge advantage config standardised feed many server result identical across server barring hardware malfunction mean highspeed efficient replicability replicability also come scalability server need replaced easy reprovisioning another advantage using cm team work config file together file commented shared versioned diffed attributed keep version control using git example even track history change feature cm allow collaborative management production configuration across team arbitrary size configuration independent present arbitrary state specific pet server much easier debug configuration lifecycle even using cm variety option apply using virtualisation two primary place configuration applied machine image compiled compilation one approach start basic machine image base server using something like aws plenty available already rolling setup could use one many available o image unixlike distros provide bootable isos effectively serve base image cm configuration responsible updating local package installing new package need configuring rest system sort approach make life easier development team base image rarely change new configuration tested locally pushed repository done time boot instance configuration need run brittle hard debug go wrong depending much configuration needed may new instance ready start accepting request compilation take opposite approach could apply configuration base image compile new image whenever want spin instance boot image instance spun way byteforbyte identical good go without need additional configuration naturally instance booted like going able start serving request much faster important scaling cluster deal sudden surge traffic one drawback method change configuration requires new image compiled installed vm management system introduce delay cause additional work development team additionally already running cluster instance use old image need replace using new image become complex manage hybrid approach two example whole spectrum technique lie two point instance boot time slow warm cluster spinning new instance ahead time especially useful big announcement situation know traffic surge engine yard take hybrid approach bulk standard configuration done image compiled machine boot handle customer specific configuration done ahead time fact whole process neatly abstracted away behind apply button dashboard rerun chef configuration across cluster fortunately chef configuration designed idempotent meaning rerun many time like sideeffects result always conclusion configure boot method may seem unusual used pet model server maintenance cloud computing environment however cluster containing many server instance need spun quickly homogeneously show obvious benefit using cm exante server configuration well benefit required make cloud architecture seamless get additional advantage keeping configs version control configuration management complex set depending size app fortunately platform provider automate one benefit going paas instead iaa significant chunk hard work done next post series look constraint placed app developer attempt design deployment cattle server used pet model cattle model form deployment prefer prebaked image postboot configuration something else entirely love hear comment give u opinion
510,Lobsters,virtualization,Virtualization,"x86 virtualization in JavaScript, running in your browser and NodeJS",https://github.com/copy/v86,virtualization javascript running browser nodejs,demo api example api work testing build run embed api example short summary compatibility archlinuxmd see issue http githubcomcopyimages winworld contribute license credit question author http copysh,demo api example using purpose easy var emulator new screencontainer documentgetelementbyid screencontainer bios url biosseabiosbin vgabios url biosvgabiosbin cdrom url imageslinuxiso autostart true see api work emulates cpu hardware list emulated hardware compatible cpu instruction set around pentium level feature missing specifically task gate far call protected mode bit protected mode feature single stepping mmx sse bunch fpu instruction exception floating point unit fpu calculation done javascript double precision number bit precise calculation real fpu bit floppy disk controller keyboard controller mouse support programmable interval timer pit programmable interrupt controller pic cmos real time clock rtc generic vga card svga support bochs vbe extension pci bus one partly incomplete used every device ide disk controller pci network card virtio filesystem soundblaster sound card testing disk image included repository download directly website using wget p image http linuxiso kolibriimg openbsdimg testsuite available testsfull run using node testsfullrunjs build run embed building necessary release open debughtml everything load box want compressed fast ie debug code removed version need closure compiler download shown run make rom disk image loaded via xhr want try indexhtml locally make sure serve local webserver use make run serve file using python simplehttpserver want embed webpage use usage check api example couple disk image provided testing check using wget p image http linuxiso kolibriimg openbsdimg short summary grab main repo git clone http cd grab disk image wget p image http linuxiso kolibriimg openbsdimg grab closure compiler wget p closurecompiler http dlgooglecomclosurecompilercompilerlatestzip unzip closurecompiler closurecompilercompilerlatestzip jar build library make run test testsfullrunjs compatibility overview operating system supported linux work pretty well tinycore kernel work nanolinux work archlinux work caveat see archlinuxmd damn small linux kernel nt work reactos work freedos window msdos run well kolibrios work application need sse haiku boot take long around minute android version seems work still get shell window work window xp unstable work tweak see issue version might work nt tested many hobby operating system work freebsd work nt work get info disk image http githubcomcopyimages window image winworld contribute add new feature hardware device fill hole cpu fix bug check issue section contact need help report bug want donate let know license credit question shoot email copy copysh please nt tell bug via mail create bug report github instead author fabian hemmer http copysh copy copysh
511,Lobsters,virtualization,Virtualization,Pets vs. Cattle,https://blog.engineyard.com/2014/pets-vs-cattle,pet v cattle,twelvefactor app discovering analogy introduced presentation identifies help help rest story next post,one original developer orchestra php paas engine yard acquired many customer using paas first time come traditional hosting background used uploading thing ftp server editing config file remotely practice still widespread despite popularity git site like twelvefactor app made prevalent fact many offtheshelf php apps quite old still assume sort deployment scenario scoffed traditional system administration based around notion physical machine add new machine cluster might purchase front configure office drive colocation data centre install could easily take week machine later develops problem best fix issue via ssh possible might drive back colocation data centre fix replace used manage server like fact still remember cutting teeth system administration server cute name chose name character douglas hofstadter book gödel escher bach eternal golden braid tortoise main apache httpd instance achilles running squid reverse proxy mode crab running mysql genie smtp smart host machine customised motd colourful ascii art banner quote book proud separating different part setup lovingly nurtured machine would install package configure test problem occurred would nurse back health careful take note action performed disaster struck would able recreate scratch turnaround new server measured week tend extreme care thing cloud discovering analogy advent virtualisation need deal physical hardware need travel anywhere fact often easier terminate problematic server administration console relaunch new server catalogue server image process take minute instead week make possible cloud provider built around concept sharednothing architecture stateless file system configuration automation repeatability concept seem restrictive coming traditional hosting background long time struggled explain difference customer particularly found hard justify way thing better massimo introduced slide taken presentation given gavin mccance cern though register identifies microsoft bill baker original source analogy difference previrtualisation model postvirtualisation model thought difference pet cattle pet given loving name like pussinboots case tortoise achilles etc unique lovingly handraised cared scale making bigger get sick nurse back health whereas cattle given functional identification number like almost identical scale getting one get sick replace another one massimo point analogy mind easy determine whether dealing pet cattle ask would happen several server went offline right thing would go unnoticed endusers dealing cattle would cause major disruption endusers pet also provides template thinking architecture look server ask would got sick answer looking terminate immediately replace new one worrying backup data dump scheduled downtime tedious manual reconfiguration red flag postvirtualisation model still relatively new many legacy apps going around yet complex setup might even need keep pet cattle server farm sorry resist fortunately engine yard support need keep pet keep pet help nurture behalf want take advantage advanced feature platform enjoy real benefit cloud offer strongly urge consider switching cattle help rest story know difference pet server cattle server may wondering make cattle server especially develop application luck post first series explains next post explains counterintuitive notion configuring server boot possible actually lead immense gain cloud server deployment meanwhile hope enjoyed reading pet v cattle analogy familiar previously learning first time think analogy accurately describes experience server think alternative love hear please comment
514,Lobsters,virtualization,Virtualization,Deploy a Secure Instance of Owncloud 6 With Docker,http://www.alanb.ca/blog/2014/02/18/deploy-a-secure-instance-of-owncloud-with-docker/,deploy secure instance owncloud docker,,
515,Lobsters,virtualization,Virtualization,How to build FreeBSD/EC2 images,http://www.daemonology.net/blog/2014-02-16-FreeBSD-EC2-build.html,build image,build image image published configinit panicmail defenestration image code view forum thread blog comment powered,build image building image past three year based email receiving people either using image directly modifying create image suit need however people want build image ab initio often company product built customized version freebsd helped people better help needed end earlier today published code building freebsd amis core process two step first building disk image second turning ami process building disk image start platform slice partition disk create filesystem extract freebsd bit release iso prior freebsd complex task since custom kernel needed built freebsd xen hvm support generic kernel ship release isos installed clean freebsd system disk image add extra code support using image amazon consists four port freebsd port tree truly essential port contains code configuring system allow logins using ssh public key provided via logging ssh host key console handling configinit data allow instance provided configuration parameter launched sysutilsfirstbootfreebsdupdate port downloads installs update freebsd base system instance first boot important since may many important security erratum update ami created instance launched month year later sysutilsfirstbootpkgs port downloads installs freebsd package code compiled port tree instance first boot make possible instance launched newer code available ami created together functionality provided configinit make possible launch new freebsd instance available moment later set software installed ready use sysutilspanicmail port particularly specific although earlier version code image long time panicmail system provides automated mechanism reporting freebsd kernel panic centralized location hoping prove useful identifying fixing stability issue related platform occuring freebsd environment finally disk image completed making configuration file change suit environment boot loader menu default login terminal kgdb debugger disabled since provide sort virtual keyboard could used access network configured use dhcp sshd enabled aforementioned port enabled configured created disk image task build code performs writing directly elastic block store volume convenience second step turn ami made complex bit history amazon first created using xen one virtualization method available namely paravirtualization pv short used later virtualization gained popularity intel amd added support cpu hardware virtualization xen hvm mode born stuck working namely pv mode unfortunately freebsd need xen hvm mode later hybrid mode amazon announced support running microsoft window inside also needed xen hvm mode higher price due window license involved operating system world freebsd also linux vendor continued move towards taking advantage hardware virtualization finally july amazon announced first cluster compute instance hvm support past three year new instance type fully supported hvm reason single disk image build two amis one pretend window higher window hourly pricing run instance type one run modern instance type standard unix hourly pricing ideal world creating window ami disk image would require single api call add window label ala ideal instead use trick call defenestration launch window instance throw window detaching deleting boot disk attach freebsd disk image root disk tell create ami window instance since know instance launched window ami affix window label automatically nt rebundling window instance would nt work providing hvm environment freebsd need well window tax nt creating unix hvm image hand single api call api call month ago people could nt make reason sure one ca nt imagine amazon first made hvm available cluster compute instance decided keep process creating hvm image secret fortunately right people within amazon knew work nondisclosure agreement provided special api tool code set allowed create hvm image flag aws account far thing amazon quietly done help something confirmed talk publicly fortunately amazon changed stance hvm image creation month ago virtualizationtype parameter registerimage api call publicly available documented able share image building code publicly rather limiting people signed amazon ndas currently building window unix image imagine point stop building window image mentioned new instance type since support running freebsd without window label amazon released image type price nt many situation left would make sense run one older instance type think freebsd user still find easiest continue using image publishing people want build image code fun view forum thread blog comment powered
516,Lobsters,virtualization,Virtualization,Mirage 1.1.0: the eat-your-own-dogfood release,http://openmirage.org/blog/mirage-1.1-released,mirage eatyourowndogfood release,anil madhavapeddy mirageos eat dogfood functional combinators build device driver ocaml functor one source file thomas gazagnaire combinator library mirageskeletonblock tutorial website tutorial travis autodeployment mort lead le magic build tcpip stack foxnet full file tutorial lot library release opam mstruct nbd network block device ipaddr hugo heuzard cowabloga personal website cohttp rudy grinberg improvement uri rather slow cow github upstream ocaml development dave scott xenevtchn event channel suspendresume xengnt iopage xendisk wiki post split device thomas gazagnaire lazytrie git irmin instruction qcon sf fosdem reporting bug contact u,anil madhavapeddywe released mirageos opam live site update able run opam update u get latest version release eat dogfood release mentioned earlier january number mirageos developer decided shift personal homepage onto mirageos nothing better using tool find little annoyance shortcoming mirageos contains significant usability structural improvement building unikernels functional combinators build device driver mirageos separate application logic concrete backend use writing application ocaml functor parameterized module type represent device driver signature module type used mirageos browsed one source file mirageos thomas gazagnaire implemented combinator library make easy separate definition application logic detail device driver actually execute code unix binary dedicated xen kernel let u write code form taken mirageskeletonblock let let main foreign unikernelblocktest console block job let img blockoffile diskimg register blocktest main defaultconsole img configuration fragment unikernel defined functor console block device using console block job define concrete version job applying functor using combinator default console filebacked disk image combinator approach let u express complex assembly device driver graph writing normal ocaml code mirage command line tool par buildtime generates mainml file functors applied right device driver mismatch module signature result build error thus helping spot nonsensical combination using unix network socket xen unikernel new feature walked tutorial walk several skeleton example explain different deployment scenario also followed website tutorial explains website work travis autodeployment throw result onto public internet win race get website running first sadly anil mort currently lead allsinging alldancing shiny new website finish lead though stay tuned le magic build something behindthescenes important easier development simplication build library mirageos several package could nt simultaneously installed compiled right order ensure dependency mirageos thing past library installed fully parallel including network stack tcpip stack built style venerable foxnet network stack parameterized across network dependency mean quickly assemble custom network stack modular component little fragment module main c console n network struct module e ethifmake n module e module u module ostime clock random module c ostime random e u functor stack start network ie ethernet device applies functors end client see full file see rest logic work serf illustrate mirageos make possible build custom network stack modular component functors also make easier embed network stack nonmirageos application tcpip opam package installs preapplied unix version toplevel convenience show powerful functor approach stack also mapped onto version us kernel socket simply abstracting lowerlevel component equivalent us unix kernel provide functionality explain swap variant tutorial lot library release release january also released quite library opam highlight lowlevel library mstruct streaming layer handling list memory buffer simpler readwrite interfacenbd implementation network block device protocol block driver networking web library ipaddr parsing support thanks hugo heuzard david sheet probably hardest bit adding support network stack cowabloga slowly emerging library handle detail rendering zurb foundation website still active development used personal website well websitecohttp several release thanks external contribution particular rudy grinberg added sexpression support several improvementsuri feature performance improvement elimination scanf considered rather slow ocaml standard cow continues impossible push make coding html cs pleasant experience better support markdown nowthe github binding also use part experiment make upstream ocaml development easier newcomer thanks gabriel scherer dave scott led splitting several lowlevel xen library part build simplication compile xen using direct hypercall interface unix using dev device possible xenevtchn event notification mechanism couple wiki post explain event channel suspendresume work mirageosxen guestsxengnt grant table mechanism control interprocess memorythe iopage library longer need unix xen variant interface standardized work dave hacking xen device driver showcased xendisk wiki post explains synthesize virtual disk backends using mirageos xen us split device model mirageos let u build backend device driver service vms well frontends last least thomas gazagnaire building brand new storage system mirageos guest us gitstyle branch hood help coordinate cluster unikernels talk work future update cool library prototype available opam curious lazytrie lazy version trie data structure useful exposing git graphsgit nowfairly complete implementation git protocol pure ocaml interoperate normal git server via ogit commandline tool installsirmin main library abstract git dag ocaml programming api homepage instruction play commandline frontend experiment convert git checkout fat block image useful bundling unikernels also like thank several conference organizer giving u opportunity demonstrate mirageos talk video qcon sf live also great time fosdem recently summarized amir lot activity doubt little bug lurking place particularly around installation always please let u know problem reporting bug feel free contact u via email list irc next stop unikernel homepage
517,Lobsters,virtualization,Virtualization,Comparing filesystem performance in virtual machines,http://mitchellh.com/comparing-filesystem-performance-in-virtual-machines,comparing filesystem performance virtual machine,vagrant small file sequential read crush abysmal large file random read small file sequential write large file random write lying packer overall analysis read heavy demolishes fantastic test software configuration raw data native virtualbox native virtualbox shared folder vboxsf vmware native vmware shared folder vmhgfs nfs virtualbox iozone filesystem benchmark excel workbook imgur album,january year primary bottleneck virtual machine based development environment vagrant filesystem performance cpu difference minimal barely noticeable ram becomes issue many virtual machine active spent better part yesterday benchmarking analyzing common filesystem mechanism share result begin analysis result interesting people exact method testing software used raw data result found analysis every chart shown test reading writing file way total size file written fixed graph axis throughput kb x axis record size size chunk data readwritten one time kb different test environment native virtualbox native vmware native virtualbox shared folder vboxsf vmware shared folder vmhgfs nfs native environment refer using filesystem environment native host machine virtualbox native root device within virtualbox virtual machine etc nfs tested virtualbox performance characteristic similar virtualbox vmware every chart higher throughput axis better small file sequential read first sequential read kb file tested various read record size real world application small sequential read would loading source file application run compile test first thing help notice read performance nfs incredible small record size nfs likely heavy readahead operation caching get kind performance good theory nfs outperforms native virtual filesystems vmware shared folder crush virtualbox shared folder virtualbox shared folder read performance abysmal look raw data see throughput actually never go mb vmware never go mb peak mb interesting sometimes native filesystem within virtual machine outperforms native filesystem host machine test us raw read system call zero userspace buffering likely hypervisors buffering read virtual machine seeing better performance context switching native kernel much theory supported looking raw result data fread benchmark test native filesystem beat virtual filesystems every time large file random read tested throughput randomly reading various part mb file tested various read record size file larger previous test sort behavior might seen dealing database read hit filesystem gap vmware shared folder virtualbox shared folder widened considerably compared small sequential read virtualbox performs badly barely see virtualbox throughput never peak mb vmware hand peaking gb deviation virtualbox throughput small across various test case theorize single hot path code virtualbox shared folder system limiting clearly something wrong nfs le dominating likely readahead benefit seen test case still nfs performs well versus option small sequential read still seeing better performance within virtual machine versus outside attributed hypervisor clever buffering whereas raw syscalls host machine allow happen small file sequential write let look performance sequential writes small file accurately describes storing session state temporary file writing new source file first noticeable thing nfs performance terrible kind writes real caching nfs must pay full penalty network overhead writing disk host side finally waiting ack vm write succeeded ouch various native filesystems perform well virtual machine outperform host attributed buffering hypervisors shared filesystems close virtualbox clearly outperforms vmware test case large file random write final chart look result testing random writes large mb file like large random read test good test database would perform really much difference versus small sequential writes large file gap different test environment larger result mostly nfs continues terrible writes virtualbox shared folder continue outperform vmware writes hypervisors outperform host machine hypervisors outperforming host machine interesting result test clearly show hypervisors must lying synced writes performance corroborates seen packer well virtual machine cleanly shut committed writes lost fsync virtual machine mean data written host committed within hypervisor overall analysis regard shared filesystems vmware behavior want loading web page running test suite compiling software read heavy vmware shared folder read performance demolishes virtualbox write performance virtualbox shared folder marginally better vmware option use nfs use read performance far valuable write performance hypervisor readwrite performance fantastic cheat thanks data definitely going focusing new synced folder implementation vagrant use native filesystems rsync using host machine nfs client instead server immediately applicable however use virtual machine development move database file shared filesystems possible likely see huge performance benefit finally think huge surprise result vagrant supported nfs synced folder since realized early performance shared folder bad hard data show different behavior nice provides interesting insight system might test software configuration raw data host machine retina macbook pro gb ssd running mac o x test labelled native virtualbox version running virtual machine ubuntu virtualbox guest addition installed enabled root device test virtualbox formatted filesystem test root device labelled virtualbox native test shared folder system vboxsf labelled virtualbox shared folder vboxsf vmware fusion version running virtual machine ubuntu vmware tool installed enabled root device test vmware formatted filesystem test root device labelled vmware native test shared folder system vmhgfs labelled vmware shared folder vmhgfs nfs server used one built shipped o x nfs client come nfscommon package ubuntu nfs protocol used udp test using nfs labelled nfs virtualbox benchmarking software used iozone filesystem benchmark compiled source linux binary used every instance except native test used o x binary iozone compiled source flag passed iozone racb unless otherwise noted remaining setting mentioned default touched raw data test found excel workbook also graph data imgur album footnote case standard web development environment typically neither cpu bound ramintensive kudos kudos
518,Lobsters,virtualization,Virtualization,"Portable, Shareable Application Development Environments",http://glenngillen.com/thoughts/portable-shareable-development-environments,portable shareable application development environment,portable shareable application development environment emphemeralization possession script install free open source software outsourcing development environment nitrousio devprod parity nitrousio rainbow nitrousio nitrousio editing file like local unison nitrousio vimautosave detecting remote change packaging http githubcomglenngillennitriousiopairingsetup glenn gillen email let know,portable shareable application development environment emphemeralization possession remember time managing securing protecting possession seemed laborious pile cassette cd later dvd boxed moved whenever moved house music long ripped cd still spanned multiple external drive needed keep cd incase something ever went wrong one drive photo print scanned ever growing directory digital one needed back backed onto external drive course meant offsite copy incase house fire whatever offsite copy rarely date little little changed itunes ipod replaced much physical clutter music later ipod replaced phone spotify photo relationship flipped copy kept whole library begin small working set ever computer time even hassle keeping copy software lying around cd serial number disappeared thanks script install free open source software mac app store couple year ago talking friend risk crime property theft san francisco appreciated magnitude happened year ago someone breaking house carry huge emotional impact significant upfront ongoing financial one tv home theatre system computer thousand dollar equipment potentially month effort acquire replacement set everything mention sentimental thing like photo could never replaced today financial impact replace macbook air set music photo software back exactly time take eat lunch taking something seemed high negative impact making near negligible liberating constantly looking take outsourcing development environment playing nitrousio year really love approach taking quick setup local machine biggest variable time sink getting fully working dev environment installing xcode compile binary historically pain making sure cbased dependency compile jumping new o always reliable never actually ship code osx based development mac o breaking one tenet app methodology devprod parity great install gb software write code great able instantly access familiar dev environment computer within minute amazing able share environment colleague could work problem together even room might agreeing thinking none new people year right nitrousio differently running difference paying server rack store photo monitoring uptime managing backup working fail storing dropbox running instance host dev environment moving problem want remove rainbow couple thing held back going allin nitrousio though keep vim script synced minor thing largely scripted feel like hassle ifwhen got development happening probably issue right got local environment configured liking want able use mac app help address work maverick collaborating via web ide partly extension previous issue like setup got want use editing browser still feel right pairing challenging enough without productivity impact shared vimemacs config religious war started le previous place worked converged single configuration computer felt familiar pairing given part goal share remote service everyone computer converging config seems like needle constraint stated problem easier reason solution needed ability edit file like local machine make sure file change synced nitrousio user would receive change part experience pairing watching live pair happen via screen sharing wanted see remove screen sharing instead terminal open watch change live mean explicit contract user need uphold editing file like local well cheated actually editing local file using unison push change nitrousio ssh make make sure whoever pairing see change need make file saved nearrealtime enter vimautosave plugin detecting remote change unison set run repeatedly every sec originally fswatch setup run local file changed change propagated direction part contract user need uphold ensure detect display change file within editor vim required hack vimrc packaging make easy move setup onto new machine consolidated config change single repo http githubcomglenngillennitriousiopairingsetup glenn gillen advisor investor earlystage tech startup beyond incredibly fortunate husband father currently product manager hashicorp previously aws heroku working developerfacing tool service thinking starting one email let know
519,Lobsters,virtualization,Virtualization,Docker 0.7.3 released (includes official OS X binary),https://github.com/dotcloud/docker/blob/v0.7.3/CHANGELOG.md#073-2013-01-02,docker released includes official o x binary,permalink join github today sign changelog builder documentation hack http getdockerio packaging runtime runtime documentation documentation runtime registry notable feature since runtime remoteapi client runtime client remoteapi runtime client hack runtime testing documentation contrib hack packaging runtime documentation runtime builder registry registry packaging runtime documentation builder remote api hack packaging register test runtime builder runtime api builder hack runtime registry builder remote api runtime hack builder runtime client api documentation remote api runtime client registry builder remote api runtime builder runtime remote api documentation registry runtime builder runtime registry image documentation runtime documentation reload reload,permalink dismiss join github today github home million developer working together host review code manage project build software together sign retrieve contributor time line sloc kb changelog builder update add use image cache based hash added content add error message empty dockerfile documentation update doc get wider screen add information needing install lxc using raw binary update fedora documentation disentangle docker dockerio conflict add note using new mtu flag several gce zone add frugalware installation instruction add complete example docker run fix api documentation creating starting privileged container add missing name parameter documentation containerscreate add mention lxccheckconfig way check necessary kernel configuration update api documentation addition added doc hack add missing libdevmapper dependency packagers documentation update minimum go requirement hard line go many minor improvement vagrantfile add ability customize dockerinit search location compiling used sparingly packagers platform require nonstandard location add coverprofile generation reporting add go build flag removing need recompiling stdlib manually update dockerfile canonical le spurious warning build fix miscellaneous docker pull progress bar display issue migrate miscellaneous package pkg folder update textmate highlighting automatically enabled file named dockerfile reorganize syntax highlighting file common contribsyntax directory update installsh script http getdockerio fail busybox fails download run end ubuntudebian installation add support container name bash completion packaging add official docker client binary darwin mac o x remove empty vendor string added license deb package add stubbed version etcdefaultdocker deb package runtime update layer application extract tar place avoiding file churn handling whiteout fix permissiveness mtime comparison tar handling since gnu tar go tar yet support subsecond mtime precision reimplement docker top pure go work consistently even inside dockerindocker thus removing shell injection vulnerability present version lxcps update h unix work similarly h tcp inserting default value missing portion fix edge case regarding dockerinit deleted replaced docker dockerinit file update container name validation include fix use symlink nonabsolute path argument g work expected update handle external mount outside lxc fixing many small mounting quirk making future execution backends feature simpler update use proper boxdrawing character everywhere docker image tree move mtu setting lxc configuration directly use netlink add option external tar invocation efficient spare file handling add archos info useragent string especially registry request add mtu option docker daemon configuring mtu fix docker build exit nonzero exit code error add dockerhost environment variable configure client h flag without specifying manually every invocation runtime validate container name creation standard regex increase maximum image depth continue move api endpoint job api add bip flag allow specification dynamic bridge ip via cidr allow bridge creation enabled certain system set hostname ip address within dockerinit drop capability within dockerinit fix volume host symlink present image prevent deletion image container depending even container running update docker push use new progress display use oslstat allow mounting unix socket inspecting volume adjust handling inactive user login add missing defines devicemapper older kernel allow untag operation container validation add auth config docker build documentation add information docker logging add direct example changing cmd run container update arch installation documentation add section trusted build add network documentation page add new cover bundle providing code coverage reporting separate integration test bundle make tianon hack maintainer update mkimagedebootstrap tweak keeping image small use http get install script remove vendored dotcloudtar go released documentation add svendowideit documentation maintainer add link example add documentation regarding ambassador pattern add google cloud platform doc add dockerfile best practice update doc rhel update doc registry update postgres example update doc ubuntu install improve remote api doc runtime add hostconfig docker inspect implement docker log f stream log add env variable disable kernel version warning add format docker inspect support bindmount file fix bridge creation rhel fix image size calculation make sure iptables called even bridge already exists fix issue stderr attach remove init layer destroying container fix port binding different interface docker build return correct exit code fix docker port display correct port docker build check dockerfile exists client side docker attach return correct exit code remove name entry container exist registry improve progress bar add eta downloads simultaneous pull wait first finish instead failing tag toplayer image pushing registry fix issue offline image transfer fix issue preventing using password registry add pprof handler debug create makefile use stdlib tar includes fix improve makesh test script handle sigquit daemon disable verbose test upgrade official build improve unit test test suite run test even one fails refactor c go devmapper notable feature since storage driver choose aufs devicemapper vfs standard linux support docker run unmodified linux kernel major distribution link compose complex software stack connecting container container naming organize container giving memorable name advanced port redirects specify port redirects per interface keep sensitive port private offline transfer push pull image filesystem without losing information quality numerous bugfixes small usability improvement significant increase test coverage runtime improve stability fix race conditons skip volume mounted deleting volume container fix layer size computation handle hard link correctly use work path docker cp container path fix tmp dir never cleanup speedup docker p informative error message name collision fix nameserver regex always return long id fix container restart race condition keep published port docker stop docker start fix container networking fedora correctly express address iptables fix network setup reconnecting ghost container prevent deletion image used running container lock around read operation graph remoteapi return full id docker rmi client add tree option image offline image transfer exit status usage error display usage stderr forward sigchld container use string timestamp docker event since add etcdefaultdocker support upstart runtime ensure container name register fix regression etchosts add lock around write operation graph check port valid fix restart runtime error ghost container networking add color animal increase pool generated name fix issue docker inspect escape apparmor confinement set environment variable using file prevent docker insert erase something prevent dns server conflict createbridgeiface validate bind mount server side use parent image config docker build fix regression etchosts client add p flag publish exposed port add notrunc q flag docker history fix docker commit tag import usage add star trusted build library flag docker search remoteapi make event api send header immediately split last column docker top contrib desktop integration firefox usecase dockerfile bump runtime container named container linked together service discovery run start attach forward signal container better integration process supervisor automatically start crashed container reboot expose ip port proto separate environment var container link allow port published specific ip prohibit intercontainer communication default ignore errclosedpipe stdin containerattach remove unused field kernelversion fix issue mounting subdirectory mnt container fix untag removal image check return value syscallchdir changing working directory inside dockerinit client pas stdin hijack needed avoid closed pipe error use le reflection commandline method invocation monitor tty size starting container prior remove useless osexit call logfatal hack add initial init script library safer ubuntu packaging script work debian add p option invoke debootstrap httpproxy update installsh shc get sudosu modprobe update mkimage script use numericowner tar argument update hackreleasesh process automatically invoke hackmakesh bail build test issue documentation fix flag nc example testing remove warning prevent mount issue testing change logic tty resize avoid warning test builder fix race condition docker build verbose output registry fix contenttype pushimagejsonindex method contrib improve helper tool generate debian arch linux server image runtime add cleanup container start fails add better comment utilsstdcopygo add utilserrorf error logging add rm docker run removing container exit remove error message actually error fix docker rm volume fix error case http body might closed fix panic wrong dockercfg file fix attach behavior record termination time state use empty string tempdir us o temp dir automatically make sure close network allocator autorestart container default bump vendor krpty commit syscallonoctty lxc allow setfilecap capability container move run rm cli split stdout stderr always create new session container testing add aggregated dockerci email report add cleanup remove leftover container add nightly release dockerci add test around authresolveauthconfig remove error test catch errclosing error tcp udp proxy terminated run certain test testflagsrun testname makesh prevent dockerci test closing pr replace panic logfatal test increase testrundetach timeout documentation add initial draft docker infrastructure doc add devenvironment link contributingmd add aptget install curl ubuntu doc add explanation export restriction add dockercfg doc remove gentoo install note workaround fix help text v option fix ping endpoint documentation fix parameter name doc add command fix ironic typo changelog various command fix postgres example document edit release doc minor update postgresqlservicerst clarify lgtm process contributor corrected error package name document vagrant actually improve doc search result cleanup whitespace api doc use angle bracket maintainer example email update archlinuxrst change new style doc includes version switcher formatting add information multiline json improve registry index rest api documentation replace deprecated upgrading reference dockerlatesttgz nt updated since update gentoo installation documentation portage tree proper cleanup reorganize doc tooling contributor maintainer minor spelling correction protocoll protocol contrib add vim syntax highlighting dockerfiles honza add mkimagearchsh reorganize contributed completion script add zsh completion hack add vagrant user docker group add proper bash completion docker push add xz utils runtime dep add cleanuprefactor portion hack dockerfile update add contribmkimagecentossh back associated documentation link add several small makesh fix make output consistent contributorfriendly add tianon hackmaintainers improve network performance virtualbox revamp installsh usable people use official install method whenever possible apt repo portage tree etc fix contribmkimagedebiansh apt caching prevention add dockerfiletmlanguage contrib configured fpm make etcinitdockerconf config file enable ssh agent forwarding vagrant vm several small tweaksfixes contribmkimagedebiansh builder abort build mergeconfig return error fix duplicate error message packaging remove deprecated packaging directory registry use correct auth config logging registry fix error message regex packaging add docker group install ubuntu package update tar vendor dependency download apt key http runtime copy change permission nonbindmount volume allow multiple volumesfrom fix http import stdin documentation update section extracting docker binary build update development environment doc new build process remove base image documentation client fix detach issue registry update regular expression match index runtime add domainname support implement image filtering pathmatch remove unnecesasry warning remove osuser dependency mount hostname file config exists handle signal within docker login command uid gid also applied volume docker start set error code upon error docker run set error code process started builder add rm option order remove intermediate container allow multiline run instruction registry implement login private registry hack vendor dependency remote api bump packaging break hackmakesh small script one per bundle test binary ubuntu etc documentation general improvments registry pas meta header api call registry packaging use correct upstart script new build tool use libffidev build source remove duplicate mercurial install command runtime add lxcconf flag allow custom lxc option add option set working directory add image name logevent test add privileged flag relevant test doc example add websocket support containerattachws add warning add hostname environment add last stable version docker version fix race condition parallel pull fix graph byparent generate list child image per parent image fix typo fmtsprint fmtsprintf fix small n error un docker build fix inject dockerinit dockerinit fix print user name docker info output use go dockerbuilder use ranged loop channel use utilsparserepositorytag instead stringssplit name serverimagedelete improve cmd entrypoint attach doc improve connect message socket error load authconfig needed fix useless warning show tag used image missing apply volumesfrom creating volume make docker run handle sigintsigterm prevent crash dockercfg readable install script fetched http http api issue use group socket permission correctly detect forwarding mount devshm tmpfs switch http http getdockerio let userland proxy handle containerbound traffic update docker cli specify value host header change network range avoid conflict dns reduce connect read timeout pinging registry handle ip route showing maskless ip address allow entrypoint without cmd always consider localhost domain name parsing fqn repos name documentation add mongodb image example add instruction creating using docker group add sudo example installation documentation add ufw doc add reference p add information docker high level tool lxc fix typo doc docker run dns fix typo ubuntu installation guide fix doc regarding adding docker group update default h doc update readme dependency building update amazonrst explain vagrant necessary running docker postgresql service example documentation suggest installing linuxheaders default change twitter handle clarify amazon installation base image deprecated longer referenced doc move note officially supported kernel solved logo squished safari builder add user instruction dockerfile add workdir support buildfile add cache docker build fix docker build docker event output count known instruction build step make sure env instruction within build perform commit time forbid certain path within docker build add repository name optionally tag build usage make sure add create everything remote api sort image recent creation date reworking opaque request registry module add image name event use mime pkg parse contenttype http utils user agent field hack bash completion limit command container relevant state add docker dependency coverage testing dockerci packaging dockerbrew support memory footprint reduction add new docker dependency dockerci revert dockerupstart avoid spawning sh process dockerbrew docker standard library release docker docker fix upstart script generated getdockerio enabled doc generate manpages revert bind daemon vagrant register improve auth push registry unit test mock registry test improve testkilldifferentuser prevent timeout buildbot fix typo testbindmounts runcontainer called without image improve testgetcontainerstop rely sleep relax lo interface test allow iface index add registry functional test dockerci add test server utils contrib bash completion script client add docker cp command copy api endpoint copy container filesfolders host read stdout attached stdin runtime use docker group socket permission spawn shell within upstart script handle ip route showing maskless ip address add hostname environment builder make sure env instruction within build perform commit time builder forbid certain path within docker build add runtime change network range avoid conflict dns api change daemon listen unix socket default runtime add p args docker top add support container id file pidfile like add containerlxc default env support networkless container docker run n docker bnone stdoutstderr log stored file json allocate ip range default fallback try range instead change dockercfg format json support multiple auth remote override volume config fix issue expose override api docker client set useragent rfc add event endpoint builder add command understands url cmdadd cmdenv respect dockerfileset env variable create directory instead within add instruction hack simplify unit test helper improve dockerupstart event add coverage testing dockerci runtime list process running inside container docker top host directory mounted volume docker run v container expose public udp port eg p optionally specify exact public port eg p docker login support additional option dont save container hostname committing image registry new image naming scheme inspired go packaging convention allows arbitrary combination registry fix issue uploading image private registry builder entrypoint instruction set default binary entry point container volume instruction mark part container persistent data docker build display full output build default builder new build operation entrypoint add executable entry point container runtime fix bug caused docker run longer print container id test fix issue test suite remote api progress bar update faster downloading uploading large file fix bug optional unix socket transport runtime improve detection kernel version host directory mounted volume docker run b fix issue attaching stdin use tar numericowner avoid uid mismatch across multiple host hack improve test suite dev environment remove dependency unit test osuser registry easier pushpull custom registry documentation add terminology section runtime fix bug caused creation empty image volume crash builder docker build git url fetch build remote git repository runtime docker p optionally print container size test improved simplified runtime fix regression introduced caused log command fail builder fix regression using add single regular file builder fix regression introduced caused build fail new client builder add local file detect tar archive unpack add improvement use tar copy automatically unpack local archive add us taruntar copy instead calling cp ar fix behavior add mostly reversecompatible predictable welldocumented fix bug caused build fail add first command nicer output docker build runtime remove bsdtar dependency add unix socket multiple h support prevent rm running container use cookiejar fix issue detaching running tty container forbid parralel pushpull single imagerepo fix fix race condition within run command attaching client humanreadable progressbar size pull fix docker version git commit output api send tag history api call add tag lookup history command fix documentation fix missing command irc bouncer example packaging bumped version work around ubuntu bug remote api add flag enable cross domain request add image container size docker p docker image runtime configure dns configuration hostwide docker dns detect faulty dns configuration replace public default allow docker run specify public port ex p improve image removal garbagecollect unreferenced parent client allow multiple params inspect print container id hijack docker run registry add regexp check repo name move auth client remove login check pull vagrantfile add rest api port vagrantfile portforward upgrade go builder dont ignore last line dockerfile doesnt end n builder introducing builder docker build build container layer layer source repository containing dockerfile remote api introducing remote api control docker programmatically using simple httpjson api runtime various reliability usability improvement builder docker build build container layer layer source repository containing dockerfile docker build foo applies tag foo newly built container runtime interactive ttys correctly handle window resize fix configuration merged layer remote api split stdout stderr docker run optionally listen different ip port use risk documentation improve install instruction registry fix push regression various bugfixes registry improve checksum process use size good progress bar pushing use actual archive exists order speed push runtime store actual archive commit builder implement autorun capability within docker builder add caching docker builder add support docker builder native api top level command implement env within docker builder check command existance prior create add unit test case use whitespaces instead tab runtime add go version debug info kernel version show dash flavor empty registry add docker search top level command order search repository fix pull official image specific tag fix issue login different user trying push improve checksum async calculation image output graph image dot graphviz documentation new introduction highlevel overview add documentation docker builder cs fix docker documentation make rest api doc look better fix couchdb example page header mistake fix readme formatting website new highlevel overview makefile swap go get go get especially compile packaging packaging ubuntu issue use golandstable ppa package build docker runtime fix command existance check stringssplit may return empty string match fix index range crash cgroup memory documentation new example sharing data couchdb database vagrant use one deb line etcapt registry implement new registry support data volume docker run vpath share data volume container docker run volumesfrom improve documentation upgrade go various upgrade dev environment contributor docker commit run bundle layer default runtime option command port etc improve install process vagrant new dockerfile operation maintainer new dockerfile operation expose new dockerfile operation cmd contrib script build debian base layer docker r restart crashed container daemon startup runtime improve test coverage runtime ghost container killed waited documentation update install intructions packaging fix vagrantfile development automate releasing binary ubuntu package dynamically detect cgroup capability issue stability warning kernel docker push buffer disk instead memory fix docker diff removed file fix docker stop ghost container fix handling pidfile various bugfixes stability improvement container port available localhost docker p show allocated tcp port contributor run make hack start continuous integration vm streamline ubuntu packaging uploading various bugfixes stability improvement record author image docker commit author disable standalone mode use custom dns resolver docker dns detect ghost container improve diagnosis missing system capability allow disabling memory limit compile time add debian packaging documentation installing arch linux documentation running redis docker fix lxc compatibility automatically load aufs module various bugfixes stability improvement full support tty emulation detach tty session escape sequence cp cq various bugfixes stability improvement minor ui improvement automatically create bridge interface choose tcp frontend port p port layer format versioned major reliability improvement process manager various bugfixes stability improvement set container hostname docker run h selective attach run docker run stdin stdout stderr various bugfixes stability improvement ui polish progress bar pushpull use xz compression default make ip allocator lazy display shorthand id convenience stabilize process management layer include commit message simplified docker attach fix support reattaching various bugfixes stability improvement autodownload run autologin push beefed documentation initial public release implement registry order pushpull image tcp port allocation fix termcaps linux add documentation add vagrant support vagrantfile add unit test add repositorytags ease image management improve layer implementation perform action time signed another tab window reload refresh session signed another tab window reload refresh session
521,Lobsters,virtualization,Virtualization,"Lean, mean data science machine",http://jeroenjanssens.com/2013/12/07/lean-mean-data-science-machine.html,lean mean data science machine,data science command line data science command line dexy vagrant matthew russell ignite talk mining social web seven commandline tool discussed gnu parallel rio virtualbox virtualbox vagrant download zip file data science toolbox provisioning script comparison virtual environment data science data science toolbox dst jeroen janssens jeroenjanssensdatasciencetoolbox mining social web mtsw matthew russel miningthesocialwebcom data science toolkit dstk pete warden wwwdatasciencetoolkitorg petewardendstk data science box dsb drew conway drewconwaydatasciencebox conclusion related,data scientist love create interesting model exciting data visualisation however get point usually much effort go obtaining scrubbing exploring required data argue unix commandline although invented decade ago remains powerful environment processing data provides readevalprint loop repl often much convenient exploratory data analysis editcompilerundebug cycle associated large program even script unfortunately setting workable environment installing latest commandline tool quite pain post describes alleviate pain get started data science command line matter minute data science command line currently authoring authored book titled data science command line published reilly october main goal book teach command line could employed data science tentative outline follows introduction getting started step obtaining data creating reusable commandline tool step scrubbing data managing data workflow step exploring data speeding dataintensive command step modelling data poor man mapreduce step interpreting data conclusion naturally book drenched command source code important text code output code consistent manually running code copypasting output cumbersome errorprone process automate process created script dexy filter precise extract source code text run isolated environment paste output back text reilly toolchain take convert text variety digital format smooth environment created configured using vagrant basically wrapper around virtualbox virtualisation software aws command fresh virtual machine spun configured according simple script matthew russell ignite talk inspired use vagrant provides one book mining social web focused python vagrant environment would provided data science command line reader would able follow along command source code since mission enable everybody data science commandline soon possible decided make available right currently environment includes seven commandline tool discussed ago gnu parallel discussed chapter like book environment work progress order able run rio one seven tool include latest version r together package sqldf plyr aware many would prefer python scientific stack included well python scientific stack ipython numpy scipy matplotlib panda scikitlearn also included however diskspace provisiontime constraint doubt whether desirable even possible create environment includes everything perhaps devise solution select tool package language would like installed mentioned work progress main goal get running command line environment currently configured run top virtualbox looking option deploy aws instance first need install virtualbox second need install vagrant third need download environment cloning data science toolbox want use git also download zip file git clone http githubcomjeroenjanssensdatasciencetoolboxgit cd datasciencetoolboxbox running vagrant box directory download base box ubuntu lts spin virtual machine provision would perfect time think commandline script may lying around donate data science toolbox provisioning complete able log lean mean data science machine run following command test whether everything installed correctly curl http enwikipediaorgwikilistofcountriesandterritoriesbyborderarearatio scrape tablewikitable tr firstchild jq c htmlbodytr country td border td surface td ratio td p kcountry ratio rio sesqldf select df ratio order ratio desc csvlook country ratio vatican city monaco san marino liechtenstein virtual machine entirely isolated file put box directory accessible vagrant directory virtual machine allows use tool already installed commandline tool provided environment want install tool machine run relevant command provisioning script comparison virtual environment data science course data science toolbox environment one available data science far able perform rudimentary comparison three solution please let know know others data science toolbox dst created jeroen janssens github jeroenjanssensdatasciencetoolbox installs r python scientific stack course many commandline tool processing data us vagrant deployed virtualbox mining social web mtsw created matthew russel website miningthesocialwebcom github us vagrant chef provisioner really nice deployed virtualbox aws installs ipython notebook numpy mongo nltk allows follow along example provided book aws ami available well data science toolkit dstk created pete warden website wwwdatasciencetoolkitorg github petewardendstk website provides sandbox try many interesting apis apis also accessed command line aws ami available data science box dsb created drew conway github drewconwaydatasciencebox bash script need aws instance running installs r shiny ipython notebook python scientific stack convenience summarised information following table configuration virtualbox aws ami python r shiny comment dst vagrant yes yes yes includes data science toolbox mtsw vagrant yes yes yes yes dstk vagrant yes yes yes includes various commandline tool dsb bash yes yes yes yes short think strong aspect may improved time currently looking using chef provisioner new environment may arise way open source work end decide one work best want make tweak always fork appropriate github repository general amazing able spin new virtual machine somebody else environment whether running vagrant clicking button aws realise three four name look really alike confusing could also indicate need automated isolated setup start data science without additional hassle conclusion command line powerful environment process data manually installing latest commandline tool straightforward vagrant allows spin virtual machine install tool automatically post shared exact vagrant environment using upcoming book hope useful get started data science command line also compared environment three virtual environment data science please let know question suggestion contribution related
522,Lobsters,virtualization,Virtualization,"Benchmarking Amazon's New EC2 ""C3"" Instance Types",http://www.phoronix.com/vr.php?view=19355,benchmarking amazon new instance type,amazon cloud linux o comparison amazon cloud comparison performance phoronix test suite openbenchmarkingorg phoronixtestsuite benchmark contact u,last week amazon unveiled new instance type elastic compute cloud platform instance type deliver highest processor performance amazon cloud instance backed intel xeon ivy bridge processor use ssdbased storage support avx turbo part ivy bridge feature set also deliver improved network performance cloud coming phoronix today helping measure cloud performance benchmark new instance type compared bare metal system running locally amazon also announced new iofocused instance type last week interest u phoronix instance type computeintensive workload conventional instance instance use faster intel ivy bridge processor double memory per vcpu use solidstate storage table amazon web service new instance type using intel xeon cpu compared standard instance amazon cloud pricing quite good ecu performance ram capacity phoronix article today benchmarked new instance instance using ubuntu guest operating system nt benchmark amazon older instance type compared new result local hardware system want gauge performance instance type recently published amazon cloud linux o comparison amazon cloud comparison performance feature different instance type result shown article also see performance compare directly private public cloud bare metal system testing facilitated fully automated reproducible manner using opensource phoronix test suite framework openbenchmarkingorg reproduce exact test compare sidebyside manner result easy running phoronixtestsuite benchmark ondemand instance virginia compared four system running locally storage ram capacity varied running ubuntu processor system included quadcore amd opteron amd bulldozer amd vishera intel core ivy bridge extreme edition system information shown table ubuntu installation used reference setting benchmarking handled phoronix test suite completely reproducible accurate carrying multiple test measuring accuracy run etc company nt familiar phoronix test suite looking commercial support contact u
523,Lobsters,virtualization,Virtualization,PVHVM vs PV (Xen),https://xen-orchestra.com/debian-pvhvm-vs-pv/,pvhvm v pv xen,xen orchestra number rackspace pv hvm pvhvm pv paravirtualization modified page hvm hardware assisted virtualization pvhvm detail pv hvm container pvh xenserver pv hvm xenserver benchmark intel vt unixbench original benchmark performance boost pv debian pvhvm time faster kernel compilation time pvhvm task faster fio clear bonus random read configuration latency slightly reduced phoronix test suite available conclusion xenserver,time news xen orchestra benchmark virtualization mode pvhvm v pv saw number rackspace well choose test despite context small test lab explain concept first test protocol least result pv hvm pvhvm pv paravirtualization original xen concept allowing running modified kernel virtual machine provide better performance traditional way virtualized o know running hypervisor make call io network without additional layer talk directly hypervisor work hardware nt virtualization extension like intel vt amdv detail found page hvm hardware assisted virtualization traditional way xen use qemu emulate pc hardware extension boost performance good news nt need modified kernelos nt know presence hypervisor bad hardware needed performance impact io network load additional emulation layer pvhvm basically hvm guest special driver disk network driver known gplpv window included linux kernel detail yes debian wheezy default kernel compiled driver install debian hvm mode running pvhvm box detail pvhvm perfs architecture pv hvm container pvh wait ok surprise pvh another virt mode possible xen main difference order mode pvhvm pv driver hvm guest time brings hardware extension pv guest boot classical pv virtual machine us extension emulation possibly best combination possible sadly ca nt test nt forget pvh mode probably heard next year xenserver pv hvm complicated create pv hvm debian derived guest xenserver install vm associated template default pv guest hvm guest use install medium want know mode tip debian go etcdefaultgrub put reboot read dmesg output shall read something like netfront xen platform pci driver compiled kernel benchmark first run unixbench bench come io network soon test platform consist cpu core intel vt ram xenserver iscsi storage nexenta community ssd cache debian guest core ram hdd benchmark done fresh install unixbench two mode used unixbench fact default mode started run first single test pas next one parallel copy test result totally coherent original benchmark done rackspace unixbench running debian pvhvm mode offer respectively performance boost pv word unixbench say debian pvhvm time faster debian pv kernel compilation time time real condition kernel compilation saw pvhvm task faster bad fio tell pvhvm brings clear bonus random read configuration pv pretty consistent kernel compilation time benchmark random write close max displayed also important latency slightly reduced pvhvm guest faster rread rrwrite cpu load also bit lower good news phoronix test suite convenient case pt provides turnkey solution benchmarking unix host let see different use case benchmark available compression nt seem impacted pvhvm mode sqlite database pvhvm faster pv apache also faster faster pvhvm openssl benchmark indicates absolutely performance boost php get small performance augmentation pvhvm conclusion pvhvm debian xen guest running modern hardware faster classical pv debian embed current kernel needed driver pvhvm work box get performance current xen xenserver infrastructure small cost
524,Lobsters,virtualization,Virtualization,5-Way Amazon EC2 Cloud Linux OS Benchmarks,http://www.phoronix.com/vr.php?view=19317,amazon cloud linux o benchmark,amazon comparing various instance type compared baremetal hardware phoronix test suite,red hat enterprise linux amazon linux ami ubuntu lts ubuntu suse linux enterprise pitted amazon elastic compute cloud linux performance benchmark result available latest amazon benchmark september comparing various instance type performance benchmark compared various instance running amazon linux ami looked cloud instance compared baremetal hardware article using instance comparing five different linuxbased operating system cloud instance type used benchmarking feature four virtual cpu rated ecu compute power ram ebsonly instance storage moderate network performance amazon instance type cost testing usd per hour instance used powered intel xeon processor amazon still using xen hypervisor formation highlypopular cloud platform amis used testing featured linux operating system prominently advertised amazon cloud ubuntu lts ubuntu suse linux enterprise amazon linux ami red hat enterprise linux version operating system used testing operating system left stock setting benchmarking handled fullyautomated reproducible manner using opensource phoronix test suite benchmarking platform
525,Lobsters,virtualization,Virtualization,CodeCube: Docker-powered Runnable Gists,http://hmarr.com/2013/oct/16/codecube-runnable-gists/,codecube dockerpowered runnable gist,codecube dockerpowered runnable gist gist go playground remote code execution service isolation resource limiting docker making happen docker codecubeio entrypointsh runcodesh resource limiting cpu memory network tc disk end result codecubeio available github thing improve see github harrymarr,codecube dockerpowered runnable gist whether soliciting programming advice mailing list providing technical support irc saving useful snippet code later github gist indispensable tool writing code go recently something struck go community use gist go developer share code almost exclusively tool called go playground key advantage go playground github gist run code snippet see output live browser extremely powerful seen countless gist page output dumped end file code comment reproducing output often extremely difficult hugely dependent environment code run go playground fix frontend developer similar even powerful tool jsfiddle remote code execution service would take build go playground work every language obvious issue entire service would effectively one big remote code execution vulnerability run service desirable property isolation multiple code example running concurrently able interfere even aware mean isolating filesystem process tree network etc running code example resource limiting code example able use unreasonable proportion host resource cpu memory disk space number way achieving objective virtual machine chroot cgroups etc docker emerged pretty great solution cover point mentioned built lxc cgroups enables creation teardown relatively secure sandboxed environment fraction second time code snippet run docker container created started used run untrusted code killed destroyed incredible happen matter millisecond making happen docker implementation running codecubeio breakdown system work user type code box website specifies language code written click run code posted server server writes code temporary directory boot docker container temporary directory mounted container run code mounted directory varies according code language server tail log running container push browser via serversent event code finish running killed run long server destroys container first step build docker image container run code snippet includes everything necessary run code supported language initially python ruby go c corresponding dockerfile base maintainer harry marr harry hmarrcom run aptget update run aptget install buildessential python ruby golanggo add entrypointsh entrypointsh add runcodesh runcodesh entrypoint binbash entrypointsh note two shell script added image entrypointsh script set unprivileged user run code runcodesh detects code language build run accordingly server accepts code example web orchestrates docker container written go go turned pretty good choice much server relied concurrency tailing log browser waiting container die cleanup could happen go make joyfully simple resource limiting fun really begin stop someone consuming host cpu happens someone run malloc cpu easy docker enables allocation cpu share starting container note relative weighting affect process container scheduled functionality provided cgroups hood memory cpu docker expose cgroups functionality solves problem simply specify maximum amount memory container use byte start container network finegrained control possible using tc initial version opted turn networking something like improve future version disk limiting io currently unsolved problem talk using blkio limit iop however issue approach disk quota also easy docker much help right people worked around problem mounting sizelimited loopback device storing variable data exclusively mounted directory work well running database imagehosting service wanted apply quota entire filesystem user free reign filesystem theory could place container loopback device would require lot moving part solved quota problem follows assign quota large pool uids host machine starting coderunner container reserve one uids pool container creates unprivileged user run code set user uid one reserved pool quotarestricted uids code run user quota applied directly host coderunner container finished release uid back pool approach exposed something entirely clear first important delete docker container using default stay around forever every time use docker run new container created remains disk even finished running early development found quota cleared code example ran updating code delete container soon stopped resolved issue update newlyreleased docker add rm flag docker run autodeletes container finish running end result codecube running codecubeio open source available github pushing live also added persistence visit application redirected randomlygenerated url time code run saved redis key present url path however still proper authentication snippet currently edited anyone thing improve unfortunately server kernel support limiting swap usage via control group currently possible cause host swap rather easily mentioned networking currently turned like implement kind network limiting turn code snippet currently executed unprivileged user would nice allow user whatever wanted entire system giving root access lxc provides good sandbox perfect example many part kernel simple uid comparison check root lxc container use host kernel potentially serious implication giving root access untrusted user even within container see info frontend currently extremely simple could greatly improved adding language would obvious next step extremely simple looking contribute would great place start full code github contribution welcome got question suggestion tweet harrymarr
526,Lobsters,virtualization,Virtualization,Amazon EC2 Cloud Benchmarks Against Bare Metal Systems,http://www.phoronix.com/vr.php?view=19153,amazon cloud benchmark bare metal system,amazon cloud benchmark small medium large extra large extra large phoronix test suite phoronixtestsuite benchmark openbenchmarkingorg commercial support available,earlier month delivering new amazon cloud benchmark several phoronix reader requested reference benchmark result bare metal hardware system running performance comparison amazon elastic compute cloud benchmark result showing different cloud instance type compared intel ivy bridge haswell system today data extends amazon performance benchmark earlier month result intel core ivy bridge intel core haswell system two reference system give better idea amazon instance compare modern intel hardware benchmark running system without form virtualizationcontainer bare metal result coming ubuntu system cloud running amazon ami besides obvious difference take system small ecu core ram per hour medium ecu core ram per hour large ecu core ram per hour extra large ecus core ram per hour extra large ecus core ram per hour result quick data point give better idea rough expectation different amazon cloud instance via opensource phoronix test suite software easily repeat benchmark easy fully automated reproducible manner phoronix test suite installed linuxbsdsolarisosx system simply matter running phoronixtestsuite benchmark commandline download captured test data download install selected test configuration file proceeds run benchmark compare result sidebyside via integration openbenchmarkingorg also commercial support available custom engineering service dozen enterpriseclass feature opensource benchmarking software queued halfdecade public existence nine year internal development
527,Lobsters,virtualization,Virtualization,The Dark Side of the Cloud: IBM Partner Gives Folks Two Weeks to Move Data,http://www.wired.com/wiredenterprise/2013/09/nirvanix/,dark side cloud ibm partner give folk two week move data,information age open letter networkworld according crn problem,dark side cloud people nt always talk aboutthis week word cloud storage company nirvanix outfit behind ibm smartcloud storage service soon shut online service giving customer two week move databoth nirvanix ibm remain tightlipped claim steve ampleford ceo aorta cloud nirvanix partner say heard news directly representative nirvanix got late afternoon phone call monday explain nirvanix failed latest funding round say failed option told sale people notify customer partner according ampleford customer must migrate data nirvanix end september service may longer availablecloud service nirvanix promise new kind convenience give instant access processing power storage nt setup computer server gear risk involved lose certain control data provider go business may picklethe nirvanix situation first reported tuesday information age nirvanix nt responded request comment updated website made announcement storage service still possible signup new account company website got late afternoon phone call monday explain nirvanix failed latest funding round failed option told sale people notify customer partner steve ampleford ibm partnered nirvanix since nt announced whether affect smartcloud service nt responded request commentaorta cloud sell nirvanix service along extra security layer designed company organization stringent data governance requirement financial house health care company government agency ampleford say aorta cloud contingency plan customer ca nt help nirvanix usershe say larger nirvanix customer storing petabyte data would difficult migrate within two week would difficult download much data amount time let alone identify alternative negotiate contract upload data update infrastructure saysin attempt help customer affected looming shut aorta cloud announced open letter would like acquire nirvanix keep running ampleford say company committed seven figure deal bank ready match investment customer going struggle regardless must way continue nothing else make smoother exit saysdespite impending shutdown still bullish nirvanix technology good people good demand obviously patent nirvanix quite compelling say nt changed fundamentally technology support infrastructure compelling argument nirvanix around six year raised million dollar million arrived last year partnership le ibm analyst firm like gartner group praised cloud storage company technical expertise company great struggle stay open well trouble brewing service year company founded streamload soon split two different outfit nirvanix focused business customer mediamax targeted consumer mediamax changed name linkup lost unspecified amount customer data shuttering short notice nirvanix denied responsibility linkup data loss blog post according networkworldthe company also struggled leadership five ceo since three past year according crn recent debra chrapaty former cio online gaming company zynga company many problem joined company last marchanother oftcited issue cost building maintaining storage infrastructure suited use large business true enterprise may want cast skeptical eye venturebacked storage company like box dropbox ongoing testing public cloud storage provider show right two meet enterprise standard reliability performance amazon microsoft azure say andres rodriguez ceo cloud storage company nasuni even two provider developed backstop like cloud mirroring case failure cloud storage definitely enterpriseready use enterpriseready service
528,Lobsters,virtualization,Virtualization,PrivateCore vCage,http://privatecore.com/vcage/,privatecore vcage,openstack benefit technology snapshot risk persistent malware supply chain compromise,privatecore vcage secures server untrusted environment persistent malware malicious hardware device insider threat private public cloud openstack environment contain thousand compute node spread across geographic boundary remote location compromising one compute node jeopardize security entire compute infrastructure privatecore vcage protects infrastructure persistent threat securing server sensitive application cloud infrastructure benefit validates server integrity counter advanced persistent threat apts like rootkits bootkits bypass traditional antivirus software secures supply chain malicious server hardware prevents unauthorized physical access data use increase visibility control server infrastructure technology snapshot privatecore vcage technology provides secure foundation cloud computing protecting server virtual machine running server vcage software attests integrity server hardens environment minimize attack surface secures datainuse memory encryption risk persistent malware supply chain compromise using cloud computing pose many security question validate server known good state infected advanced persistent threat apts compromised malicious hardware handling sensitive workload fluid pool compute node avoid compromised server infect server provide audit trail demonstrate compliance auditor customer workload run trusted environment scalability speed cloud computing come risk server provide compute foundation might compromised
529,Lobsters,virtualization,Virtualization,Thinking Out Loud: The Future of VLANs,http://blog.scottlowe.org/2013/06/20/thinking-out-loud-the-future-of-vlans/,thinking loud future vlans,thinking loud future vlans musing metadata navigation networking virtualization vlan sdn tol reducing friction using keyboard shortcut reducing friction processing email,thinking loud future vlans jun filed musing interesting much idea vlan invaded consciousness data center professional data center folk primarily tasked managing compute workload nearly familiar vlans colleague primarily tasked managing network connectivity however networking undergoes transformation hand sdn nfv network virtualization happen vlan ubiquity vlan due think fact serf reasonable common ground computefocused networkingfocused professional need logical container new workload use vlan vmware partially blame predecessor made incredibly easy use vlans way logically partitioning compute workload host fair really tool available accomplish task time normally finding common ground good thinguntil common ground start get pushed beyond intended used think vlans pushed beyond intended used strain source discord computecentric team networkingcentric team computecentric team need logical container group workload might run potentially anywhere data center networkingcentric team though recognize challenge inherent taking vlan ie single broadcast domain stretching across bunch different topofrack tor switch available compute host irony using tool designed breakdown broadcast building large broadcast domain needed separation layering function computecentric world need sort logical identifier used group identify traffic however logical identifier need separate distinct identifiertagmark networkingcentric folk need use build scalable network reasonablysized broadcast domain view one core function network encapsulation protocol like stt vxlan nvgre used context network virtualization solution note network encapsulation protocol alone like suspension car useful context complete package network encapsulation protocol used context complete package network virtualization solution network encapsulation protocol supply logical identifier computecentric team need would vxlan vni stt context id simultaneously allowing networkcentric team use vlans see fit best performance resiliency network aside way using network encapsulation protocol context network virtualization solution provides decoupling important innovation important note decoupling equal loss visibility topic another aside end result computecentric team create logical grouping dependent configuration underlying network need new logical grouping new lineofbusiness application problem create start turning workload meanwhile networkingcentric team free design network optimal performance resiliency costeffectiveness without take computecentric team logical group consideration need use routed architecture podsrackstor switch using vlans way need built network virtualization solution handle creating computecentric logical grouping least thought thinking loud post thinking loud providing springboard conversation think mistaken feel free speak comment courteous comment vendor disclosure applicable please always welcome metadata navigation networking virtualization vlan sdn tol previous post reducing friction using keyboard shortcut next post reducing friction processing email social share post
530,Lobsters,virtualization,Virtualization,XenServer 6.2 is now fully open source,http://blogs.citrix.com/2013/06/25/xenserver-6-2-is-now-fully-open-source/,xenserver fully open source,xenserver fully open source announce big news citrix xenserver xenserverorg xenserver open source linux foundation xen project xen opensource xenserver open source citrix provide xenserverorg introducing new xenserverorg community xenserverorg xenserverorg new cpu socket licensing new simplified packaging pricing get started today,xenserver fully open source exciting day citrix customer open source community announce big news citrix xenserver today cross another major milestone xenserver move full open source model beginning new xenserver cutting right chase highlight go detail xenserver available free open source virtualization platform user citrix also introducing new xenserverorg community portal citrix provides paid version xenserver includes support maintenance new cpu socket licensing new simplified packaging pricing ok let dive topic get full xenserver open source big big news day move open source xenserver part citrix commitment strategy towards enabling best platform providing customer path cloud leveraging experience leader desktop virtualization dominant virtualization platform public cloud citrix focused ensuring seamless path customer migrate important workload cloud environment first part strategy already took place back april xen moved xenorg linux foundation became xen projecttm read move linux foundation history xen james bulpin xen opensource blog citrix open source xenserver starter much xenserver already open source leveraging package xen project linux kernel cloud platform xcp initiative believe open source play strategic role future virtualization cloud technology open source offer opportunity collaborative open innovation economy scale market demand open sourcing xenserver customer partner developer gain full public visibility ongoing development future xenserver directly engage u contribute new xenserver functionality build deeper integration steer architectural direction platform summary open source strategy chosen open source dna xen xensource open source software lead proprietary software cloud infrastructure open source enables collaborative development drive public trust open source community empower user broaden market reach tomorrow richard sharp vice president xenserver product development continue conversation deep dive open source strategy sure come back read blog xenserver open source citrix provide change open source citrix xenserver available free everyone new xenserverorg community citrix providing supported commercial distribution xenserver customer running xenserver environment warrant insurance policy supported commercial product think like red hat enterprise linux versus linux feature functionality level difference free citrix xenserver user able use xencenter automated installation security fix update maintenance release free citrix xenserver include xencenter server management patch management purchasing citrix xenserver get citrix premier worldwide support commercially packaged certified product simplified patching updating via xencenter indemnification license protection citrix knowledgebase account portal introducing new xenserverorg community top product announcement also excited introduce new xenserverorg community portal provide source code access well drive innovation discussion around server virtualization cloud learn community mean participate go check xenserverorg better talk community lars kurth community director xenserverorg full story take look blog xenserverorg new cpu socket licensing starting xenserver licensing model change perserver persocket licensing change directly aligned cloud optimization enablement product strategy starter socket licensing aligned cloud orchestration cloud management solution like citrix cloudplatform apache cloudstack well also standard across virtualization offering marketplace socket licensing make easier forecast licensing cost using single apple apple metric addition socket licensing benefit smaller customer using single socket server existing customer upgrading citrix xenserver winwin convert server license socket license cost individual server license converted two socket license using selfmanaged conversion tool available citrixcommyaccount license conversion tool available starting july new simplified packaging pricing another improvement xenserver simplification overall xenserver packaging pricing xenserver available single edition includes software maintenance away previous advanced enterprise platinum edition flat product support maintenance model brings consistency commercial open source solution provides customer way define value see product make simple determination product fit need need support cost aligns previous price xenserver enterprise license exception xenserver includes software maintenance premier support subscription advantage price also introducing annual pricing giving customer flexibility budgeting buying decision annual per socket license software maintenance sa support perpetual per socket license software maintenance sa support get started today covered lot today open source new packing pricing xenserverorg community next step encourage everyone
532,Lobsters,virtualization,Virtualization,"Building a Virtual Machine ""Appliance"" Image - Repeatably",http://spin.atomicobject.com/2013/06/04/virtual-appliance-repeatably/,building virtual machine appliance image repeatably,bundler maven deployment pipeline per martin fowler recent post download dependency sinatra thin build basebox veewee vagrant configure machine capistrano written validate installation testkitchen package distribution updating network configuration packaging ovum ovum virtual machine archive format look like appliance,recently faced problem ship support complicated piece server software needed software installed customer existing infrastructure nervous depending expert house decided build virtual machine appliance style packaging ship fullyconfigured linux installation greatly simplified process installing customer site building appliance repeatably trivial one driving concern make sure could easily pick project month later able build without hitch application side thing expect get lot attention development effort really expect vm image need change frequently beyond dropping new application build past frustrated process getting old project build modern system sometimes download right version nowobscure dependency maybe compiler longer compatible old version library deprecated feature dependency might force u upgrade introduce new incompatibility chain gotten better year tool like bundler maven maturing yet completely solved problem order protect u change ended multistage approach building software platform change swap much process developed multistage approach build download dependency build basebox configure machine validate installation package appliance ovum built essentially deployment pipeline per martin fowler recent post stage looked like download dependency first wanted make sure dependency included downloading rpm dependency recursively cloning git repository thing packaged like rbenv fetching rubygems dependency recursively indexing rubygems source downloading tarballs via http fetch isos via http served whole directory structure using small sinatra app running inside thin web server use shared vm directory since want ship vm vmware customer virtualbox kernel module installed since everything need archive file use build future build stage need internet connection build vm build basebox built basebox install biggest thing needed build box virtualization platform extension used veewee build minimal install used mostlystock definition veewee hard work export package used vagrant configure machine actual work configuring machine done capistrano chefsolo justin kulesza written chef solo great tool need chef server still provides automated way configuring machine let u use substantial existing collection chef recipe already also mean majority code chef recipe anyone familiar even developer able come later make update validate installation process lot moving part certainly warrant test obvious first difficult many unrelated piece script prompt user configuration information container cron job backup script etc end realized simple problem vagrant provides simple control vm wrote unit test rspec worked shelling vagrant boot roll back machine shell ssh manipulate machine use netping check system listening right port http library let check app actually running allowed easily test workflow like boot machine perform initial configuration post license key api backup system roll back pristine system restore backup see look like expect eg license key restored eventually would definitely like see tested testkitchen per warning currently site really stable enough yet package distribution updating network configuration linux detects network card creates interface save longterm way thing get shifted around eg usb ethernet adapter always however absolutely behavior want appliance image imported customer site going get new virtual ethernet card new mac address must cache anything development environment specific differ among linux distribution broad overview clear cached udev device system clear dhcp lease shutting vm clean disk image ready import anywhere packaging ovum mike english spent time working ovum virtual machine archive format look like could write automated process export image appliance lot work develop process happy result also quite confident separated everything enough able easily replace component tied veewee anything get u virtualbox image integrated easily even tied vagrant long script vm import export swap different component corner virtualization world changing incredible pace new release many tool coming seemingly daily fully expect next need update build much changed think ready anyone else building virtual appliance approach look like
533,Lobsters,virtualization,Virtualization,OVF? OVA? VMDK? – File Formats and Tools for Virtualization,http://spin.atomicobject.com/2013/06/03/ovf-virtual-machine/,ovf ovum vmdk file format tool virtualization,file format virtual machine open virtualization format ovf open virtual appliance ovum vagrant box vagrant vagrant box vmware fusion provider aws provider format disk image requested vmware conversion tool qemu ovftool vboxmanage consideration host guest support virtual hardware libosinfoorg kernel hypervisor support vmi linux guest addition open virtual machine tool vm building tool vmware studio vmware studio veewee veewee patrick debois vagrant oz oz detailed spec online vm builder imagefactory conclusion,recently worked project create virtual appliance one customer server application would like distribute customer along new device virtual appliance good way reliable fashion virtual appliance may may fullblown operating system supporting application key thing able run directly hypervisor vmware esx xenserver hyperv etc may heard github product called github enterprise allows business deploy copy github platform within network github enterprise distributed virtual appliance one problem needed solve customer package distribute appliance quickly determined ovf open virtualization format based approach potential give u greatest portability set work figuring implement build process made use veewee vagrant chef knew could export kind appliancebox package compatible virtualbox vagrant related ovf clear like share thing learned mean comprehensive guide list vast world virtualization technology hopefully save someone else time making sense portion virtualization ecosystem file format virtual machine open virtualization format ovf ovf specification provides mean describing property virtual system xml based generous allowance extensibility corresponding tradeoff actual portability commonly ovf file used describe single virtual machine virtual appliance contain information format virtual disk image file well description virtual hardware emulated run o application contained disk image open virtual appliance ovum ovum ovf file packaged together supporting file disk image etc read requirement valid ovum package ovf specification oftentimes people say ovf really mean ovum vagrant box vagrant recent version vagrant vagrant box tarball containing metadatajson specifies provider file specific provider requires vagrant virtualbox box example vagrant box default virtualbox provider contain addition metadatajson content export virtualbox vagrantfile default setting box example vagrantfile boxovf metadatajson directory file vagrantfile boxovf metadatajson directory file note file top level archive containing directory make vagrant box package virtualbox provider quite similar ovum though certain thing like fileorder inside tarball strictly adhered vagrant vmware fusion box vagrant box new vmware fusion provider quite similar virtualbox provider except instead containing output virtualbox export include content vmware fusion virtual machine directory vagrant aws box vagrant box aws provider contain disk image base disk image aws provider amis hosted amazon cloud optionally aws provider allows additional providerspecific setting metadatajson file eg ami use older vagrant box vagrant box older version vagrant support one provider virtualbox also lack metadatajson file included new version format disk image another piece packaging puzzle disk image format many benefit detriment going get nowhere near comprehensive list something help getting bearing like comment couple format recently encountered vdi virtualbox internal default disk image format vdi nevertheless used vagrant box vmdk one common format vmware product use various version variation vmdk disk image several version variation exist important understand one working used vhd commonly used microsoft eg microsoft virtual pc raw img raw etc without compression thin provisioning disk image large sometimes converting raw disk image might make sense intermediate step certain scenario better performance cost space important thing find disk image format target hypervisor support found version vmdk fairly well supported copy vmdk specification requested vmware conversion tool qemuimg part qemu project qemuimg holy grail swiss army knife disk image conversion need convert disk image check first ovftool distributed vmware product vmware fusion buried inside app bundle ovftool convert vmware vm format ovf vboxmanage virtualbox command line interface vboxmanage option exporting converting vms virtual hard disk may also useful consideration host guest support virtual hardware one important consideration often discussed issue virtual hardware support obviously important hypervisor guest o able provide make use virtual hardware device like disk controller network card control guest o ovf vm description tried use small set generic device project might constraint libosinfoorg project working build machinereadable database information kernel hypervisor support every compiled linux kernel work every hypervisor issue particularly trying set something like amis use amazon web service made use yet project working build kernel broad hypervisor support something need check vmi linux guest addition guest addition typically kernel extension provide extra service like convenient shared folder host guest opted install appliance default decided include guest addition would considered using open source open virtual machine tool provided vmware vm building tool vmware studio vmware solution building virtual appliance vmware studio good fit project worth considering particularly targetting vmware platform looking allinone solution veewee used open source veewee ruby gem patrick debois automate initial installation appliance operating system create base vm vagrant vagrant currently support initial creation vms eg installer iso configuration file like veewee surprised something like veewee end incorporated feature vagrant future vagrant however make easy spin destroy vms created base made good tool intermediate stage build process oz oz pythonbased utility creating virtual machine image isos automating installation process found oz late consider project seems similar goal something like veewee though closer tie enterprise linux ecosystem ruby ecosystem one interesting aspect oz tdl templating language us build image fill similar role veewee definition detailed spec online vm builder imagefactory aeolus project imagefactory online image builder variety virtualzation cloud platform including amazon amis even touch imagefactory us oz build image aeoluous project recently announced would disbanding contribute effort project imagefactory continue operate project raindrop project raindrop new project karanbir singh jaime melis looking provide service similar imagefactory currently good support building centos image eventually build tool also opensourced conclusion hopefully information provides helpful jumping point landscape area building virtual machine virtual appliance cloud image rapidly changing new option popping every day interested hearing open source project space
534,Lobsters,virtualization,Virtualization,"150,000 cloud virtual machines will help solve mysteries of the Universe",http://arstechnica.com/information-technology/2013/05/150000-cloud-virtual-machines-will-help-solve-mysteries-of-the-universe/,cloud virtual machine help solve mystery universe,large hadron collider white box automating data center openstack scientific linux puppet enlarge higgs boson nova keystone glance puppet forge heat keeping thing separate openstack shut upgrade,cern data center equipment geneva running world largest particle accelerator smashing particle nearly speed light understand universe basic level better great strategy cern european organization nuclear research opened new data center building cloud network scientist conducting experiment using data large hadron collider francoswiss border cern preexisting data center geneva switzerland limited megawatt power ca nt get electricity onto site cern accelerator need megawatt tim bell cern infrastructure manager told ar solution open additional data center budapest hungary another megawatt power data center came online january white box server start eventually budapest site least server addition server geneva bell expects virtual machine running physical server extra computing power megawatt electricity nt important cern use new capacity cern plan move everything onto openstack open source platform creating infrastructureasaservice cloud network similar amazon elastic compute cloud automating data center openstack pool compute storage networking equipment together allowing data center resource managed provisioned single point scientist able request whatever amount cpu memory storage space need also able get virtual machine requested amount within minute cern run openstack top scientific linux us combination puppet automation software enlarge cern dashboard managing openstack resourcescern nearly physicist across globe working official cern experiment would eligible use private cloud although would need use since many access computing resource elsewhere technically savvy user base many writing code ca nt find standard application help find higgs boson according bell cern deploying openstack cloud month already use pilot tester new vms created day bell hope resource managed cern department running openstack percent server would virtualized even remaining percent would managed openstack remaining percent looking using openstack manage bare metal provisioning bell said single overriding orchestration layer help u greatly looking accounting able tell project using resource single place rather island resource cern began virtualizing server kvm hyperv hypervisors year ago deploying linux kvm window hyperv virtualization improved thing old day scientist would wait month procure new physical server needed unusual configuration even virtualization microsoft system center virtual machine manager software thing somewhat limited scientist web interface request virtual machine offering four different configuration bell said openstack scientist able ask whatever combination resource like upload operating system image cloudbased virtual machine provide standard window scientific linux image bell said o image preloaded cloud vms supported department scientist load operating system without official support department moreover openstack make easier scale aforementioned virtual machine manage cern relies three openstack program nova build infrastructureasaservice system providing faulttolerance api compatibility amazon cloud keystone identity authentication service glance designed discovering registering retrieving virtual machine image cern us puppet configure virtual machine aforementioned component allows easy configuration new instance web server using standard recipe puppet forge repository module built puppet open source community bell said still manual work time virtual machine allocated cern plan automate process later using openstack heat orchestration software help deploying different operating system image different people help cern upgrade user scientific linux scientific linux scientific linux built red hat enterprise linux source code tailored scientific user past would reinstall physical machine right version operating system whereas able dynamically provision operating system people want ask bell said keeping thing separate openstack cern openstack deployment required customization interface legacy network management system work cern active directory setup directory information user although cern intends put server openstack part computing infrastructure remain separate cern block storage set aside go along openstack virtual machine instance bulk storage physic data managed cernbuilt system called castor includes petabyte data tape longterm storage addition disk storage cern experiment produce petabyte data second filtered per second make manageable server used perform server addition managed department devoted openstack two year large hadron collider shut upgrade cern sticking castor instead moving openstack storage management system conservative area due large volume effort migrate new technology bell noted migration smoother compute side since openstack build existing virtualization technology bell said cern openstack cloud deployed three employee set basic configuration template puppet able deploy hypervisors fairly fast rate think record hypervisors week bell said finding solution would run scale virtual machine something year ago nt conceived openstack came along
536,Lobsters,virtualization,Virtualization,Debugging the OpenBSD kernel via QEMU,http://markshroyer.com/2013/01/debugging-openbsd-via-qemu/,debugging openbsd kernel via qemu,minor bug openbsd kernel ddb kgdb ftp usual manner,recently track minor bug openbsd kernel tapped qemu gdb debugging tool task running ubuntu host o combination worked extremely well record set openbsd come equipped two kernel debugging mechanism ddb kgdb ddb inkernel debugger enabled default generic kernel invoked either explicitly console automatically event panic analogous linux debugger kdb used set breakpoints examine stack register state like kdb sourcelevel debugger source debugging kgdb offer ability remotely debug kernel way gdb stub running serial port similar linux debugger kgdboc however kgdb available generic kernel imposes additional set configuration debugger latency user debugging task amenable running openbsd within virtual machine mine easier better vm monitor qemu provides gdb stub useful debugging virtualized system sourcelevel debugging still requires obtaining kernel compiled appropriate debug info stub make additional requirement guest o performs well necessary qemu tool installed ubuntu follows sudo aptget install qemukvm qemuutils start need openbsd installation qemu virtual machine prepare virtual disk image enough qemuimg create f next download openbsd install cd image mirror ftp boot vm openbsd installation cd image created virtual disk image aside setting system ram size mb option specified provide userspace nat virtual network interface vm net nic net user cdrom wait cd image boot install openbsd usual manner prompted specify ssh server started default needed shortly reboot new guest o installer finished openbsd yet ready debugging though although system boot kernel provide debug symbol needed gdb guest system download install system kernel source code ftp mirror obsd cd tmp obsd ftp ftp obsd cd usrsrc obsd tar xzf tmpsystargz make new kernel configuration based generic config edit config turn debug symbol generation adding line makeoptions debug g option line obsd cd obsd cp generic debug obsd vi debug build install new kernel specifying copt environment variable override default optimization level make control flow much easier follow singlestepping debugger obsd config debug obsd cd compiledebug obsd make depend obsd copt make obsd make install halt openbsd guest exit qemu restart vm additional option redir enable gdb stub access vm ssh service respectively net nic net user redir guest booted scp host copy kernel source tree build output scp pr localhost usrsrcsys debug output enabled openbsd kernel build produce unstripped elf kernel image named bsdgdb suitable use gdb load gdb attach qemu debug stub default tcp port cd gdb bsdgdb gdb target remote vm halt connect debugger leaving free set system call breakpoints inspect state continuing
539,Lobsters,virtualization,Virtualization,Cross-VM side-channel attacks,http://blog.cryptographyengineering.com/2012/10/attack-of-week-cross-vm-timing-attacks.html,crossvm sidechannel attack,java library validate certificate vulnerable maninthemiddle attack threatpost actually microsoft google apple yahoo domainkeys identified mail result zhang juels reiter ristenpart cloud future run hundred cleverlymanaged instance break sidechannel attack hypervisors xen amazon smt elgamal ciphertext libgcrypt square multiply paul kocher observation recent attack hyperthreading previous attack interprocessor interrupt dna sequencing argo et al crt slightly older research,busy week crypto flaw busy fact totally overwhelmed paralyzed trying write made blogging almost impossible let blast get subject actually want talk first start week received news many android application critical java library simply validate certificate tlsssl connection disastrous embarrassing stupid since lack certificate verification make tl trivially vulnerable maninthemiddle attack going say something shrill overthetop turn threatpost already totally beaten synopsis death knell ssl getting louder yes indeed threatpost thank making feel better news learned major email provider remain nameless actually microsoft google apple yahoo everyone else competing see deploy shortest rsa key domainkeys identified mail dkim told yahoo ahead bit microsoft research team working key apple abandoned key altogether opting simple note tim cook asserting invalid email message probably recipient fault badumtschch headline news want write want write result gotten lot le attention mostly subtle fall category thing thought knew explore involves hidden markov model tech reporter raw garlic silver vampire new result zhang juels reiter ristenpart appeared acm cc conference week ago deal something relevant way build modern system specifically going go stick cryptographic service cloudbased vms secure possibly expect answer unfortunately get detail going use standard fun questionanswer format usually save kind attack would put cryptography vm anyway case missed cloud future day running cranky hardware dealing problem like powersupply fault long gone deploying new service good chance least partly cloudbased decent chance entirely cloudbased take instagram instance entire service run hundred cleverlymanaged instance instagram exactly security product use tl ssh presumably instance implies public key crypto use secret key problem vm instance often share physical hardware instance since public service coresident vms may entirely friendly major threat course software vulnerability thing let attacker break one vm another even perfect software another insidious threat namely attacker vm instance could able run sidechannel attack coresident vm threat long discussed security people generally agree concern actually implementing attack proven surprisingly difficult real hypervisors put lot fluff attacking process bare metal server different vms often run different core moreover since vm entire o running inside ton noise fact plenty reason wonder attack simply product security researcher fevered imagination something need worry zhang juels reiter ristenpart tell u yes worry oh boy nifty way work new result focus specifically xen hypervisor one actually used service like amazon although attack implemented focus similar hardware multicore server smt turned threat model assumes attacker victim vm coresident machine victim decrypting elgamal ciphertext using libgcrypt elgamal encryption great example sidechannel attack since implemented taking portion ciphertext call x computing xe mod n e secret key n typically prime number exponentiation implemented via square multiply algorithm shown figure first thing notice squareandmultiply operation depends fundamentally bit secret key ith bit e step labeled r conducted bit bit key result distinctive set computation detected attacking vm able precisely monitor hardware state sidechannel attack squareandmultiply new date back least paul kocher observation midtolate using power operating time channel repeatedly optimized technology advance recent attack exploited cache miss shared processor cache typical hyperthreading environment mean single process monitor execution another one however attack worked one process another never applied full xen vm setting pretty challenging problem variety reason including difficulty getting attacking process run frequently enough take precise measurement problem vcpus assigned different core irrelevant vcpus assigned core noisy measurement give probabilistic answer operation occurred target process forth challenge paper overcome nonsense still recover useful information attacked vm basic idea fundamental level attack paper quite similar previous attack worked across process attacking vm first prime instruction cache allocating continuous memory page executing series instruction designed load cache cachelinesized block control attacker give execution hope target vm run next core moreover target process running squareandmultiply operation target cause cachelinesized block attacker instruction evicted cache block evicted highly dependent operation attacker conduct see happened attacking vm must recover control quickly possible probe see block evicted cache set done executing instruction timing result given block evicted cache execution result cache miss measurable delay compiling list block missing attacker gain insight instruction may executed target vm running big challenge attacker need regain control quickly wait long kind thing happen state cache give useful information normally xen allow vcpus rapidly regain control exception xen give high priority virtual cpu vcpus receive interrupt author able exploit running vm second vcpu job issue interprocessor interrupt ipis effort get first vcpu back control quickly possible using approach able get back saddle within microsecond eternity processing time enough give useful information data noisy hell fragmented yes challenge attacking vm control computation jump could get small fragment squareandmultiply operation hundred thousand operation long could jump o kernel could even get wrong vm thanks fact run core plus data could pretty noisy solution problem nifty paper first monitor one execution assume device constantly decrypting different ciphertexts key pretty reasonable assumption something like ssl web server next use machine learning technique identify many possible instruction sequence associated particular cache measurement requires researcher train algorithm beforehand target hardware target vcpu conduct square multiply modular reduce call order build training model attack data processed using hidden markov model eliminate error bogus measurement noncryptographic process even work attacker wind thousand fragment contain error lowconfidence result compared reduce error stitched together recover key fortunately problem solved many domain famously dna sequencing technique used quite similar good way illustrate process present totally madeup example six fragment reconstructed form single spanning sequence srsrmrsrmrsrsrsmr mrsrsrsrmr srmrsr srmrsrsr mrsrsrsr srmrsr mr rsrmrsrmrsr mrsrsrmrsrsrsrmr srsrmrsrmrsrsrsmrsrsrmrsrsrsrmrsrmrsrsrmrsrmrsr obviously huge simplification neat complex process well described paper technical stuff much basically like scene argo little kid reconstructed shredded photo embassy worker without kid photo actually work would hell bad paper everything place researcher applied attack elgamal public key due optimization libgcrypt actually private key e several hour data collection able obtain keyrelated fragment turned long enough useful key reconstruction allowed attacker reconstruct full key missing bit able guess using brute force say ballgame left fragment size v number fragment recovered right sequence accuracy function fragment batch source zhang et al oh god going die would note actually question start freaking pulling cloud vms point order first reason researcher libgcrypt elgamal say openssl rsa would whole lot useful libgcrypt elgamal implementation cryptographic equivalent stanley lawnmower engine us textbook squareandmultiply ugly optimization get way openssl rsa decryption hand like audi turbodiesel us windowing crt blinding two different type multiplication make real pain butt deal secondly attack requires perfect set condition proposed work work two vms requires specific training target hardware mean attack viable especially since cloud service probably use lot identical hardware mean messiness kind get real cloud deployment going obstacle seems one last thing worth mentioning attack vm get attack vm onto physical hardware target seems like pretty big challenge unfortunately slightly older research indicates actually feasible existing cloud deployment fact dollar researcher able colocate given target vm probability short term certainly panic especially given elaborate attack indicate thinking hard sidechannel attack considering harden system vmms sure going happen u
540,Lobsters,virtualization,Virtualization,Sol — a sunny little virtual machine,http://rsms.me/2012/10/14/sol-a-sunny-little-virtual-machine.html,sol sunny little virtual machine,click redirected,click redirected
542,Lobsters,virtualization,Virtualization,VMware Fusion 5 and VMware Workstation 9 Released,http://brycv.com/blog/2012/vmware-fusion-5-and-vmware-workstation-9-released/,vmware fusion vmware workstation released,vmware fusion vmware workstation vmware fusion vmware fusion professional vmware workstation upgrade vmware fusion professional vmware workstation vmware fusion vmware fusion professional vmware workstation,vmware introduced two new product week one vmware fusion vmware workstation product add great new feature interesting new flavor vmware fusion form vmware fusion professional expected new addition either variety vmware fusion mountain lion support also expected window supported flavor vmware fusion also vmware workstation vmware fusion mountain lion support vmware fusion extends host support also guest support nice addition planning test newlynamed o x server pair mountain lion result change retina display support usb connectivity nice addition improved support large memory mac vmware bill better use memory mac equipped also performance front vmware touting nearnative performance long life battery according graph vmware fusion better power management vmware fusion faster graphic come form support opengl directx shader model graphic intended application autocad graphic front new enhanced driver linux submitted xorg allows full desktop linux distros notably ubuntu lts vmware fusion professional vmware fusion professional add additional feature particularly useful business professional user great addition deploy virtual machine mac window linux system using vmware player also new mass deployment feature including volume licensing new feature intended professional user new network editor allows modify create virtual network testing purpose absolutely wonderful addition long time ago ovf import virtualized vtxept vix perl apple script scripting support round feature make vmware fusion professional essential upgrade vmware workstation vmware workstation build vmware workstation upgrade add best class window support great new better graphic support vmware fusion also come vmware workstation allows application like autocad run new support accessing virtual machine web interface also included appears work web browser support websockets similar vmware fusion professional vmware workstation add nested vtxept support another important new addition professional like ability upload download workstation vsphere ability upload virtual machine already added vmware workstation ability download upgrade looking forward getting vmware fusion professional upgrade also purchasing copy vmware workstation vmware fusion available vmware fusion professional available new upgrade vmware workstation available new upgrade see vmware site full detail vmware fusion vmware fusion professional vmware workstation
543,Lobsters,virtualization,Virtualization,Data exfiltration through the VMware hypervisor,http://www.idontplaydarts.com/2012/08/data-exfiltration-through-the-vmware-hypervisor/,data exfiltration vmware hypervisor,square wave oversubscribe monitoring hypervisor sending square wave receiving square wave structure transmission preamble preamble data chunk dealing noise forward error correction demo poc poc python code conclusion,possible two virtual machine network access shared file system communicate long run hypervisor post show achieved sending square wave across vmware cpu scheduler technique could used exfiltrate information compromised system firewalled longer connected network evade network based id prerequisite need access two virtual machine hypervisor access least number virtual cpu physical cpu core exist within hypervisor machine unlimited cpu resource mhz point worth mentioning core provided via hyperthreading considered separatewhen oversubscribe hypervisor machine within end sharing resource result vm run cpu intensive task run another vm also request resource happens clock cycle stolen one vm given consequence one virtual machine monitor busy hypervisor observing shift number calculation perform given time frame using technique timing channel attack two vm communicatemonitoring hypervisorif plot graph many calculation per second perform virtual core available v time see stolen cpu cycle appear dip graphthis got wondering encode data one vm square wave send across hypervisors cpu scheduler another turn slow process comparable time based blind sql injection bit rate depending vmware configuration noise vms generatingsending square waveto send square wave got python script increase cpu load given cpu simple loop theloop run represents dip square wave observed receiver represents binary loop nt run script sleep represents binary sendbit bit cpuid timedelay pid osgetpid affinitysetprocessaffinitymask pid bit print sending start timetime timetime start timedelay x bit print sending timesleep timedelay maximum frequency square wave transmission depends amount noise vms hypervisor noise generated vms try steal cpu cycle noise lower frequency achieved therefore lower bit rate two virtual machine ideal situation attacker would controlled vms hypervisor would allow transmit higher frequency bit per second could control level background noisefrom initial test able achieve frequency bitssec depending hypervisor load hugely impressive nt forget using networkingreceiving square waveto listen square wave use python script run available cored thread count many calculation given time slice use sum thread gauge load machine hypervisor vms load number calculation per given time slice drop sender increase cpu load show dip receiver graph translate peak trough graph binary reason cant listen one virtual cpu hypervisor may change physical cpu virtual cpu executing happen randomly also reason necessary attacker obtain access least number virtual cpu hypervisor hardware cpu system one machine nt enough core available use multiple machine communicate performance networkstructure transmissionhaving method send receive square wave great however reliably send information need package form receiver distinguish background noise chosen simple packet prefixed preamble although nothing stopping making packet bigger pretty simple look like preamblewhen data sent sender construct preamble slightly higher frequency data chunk unlikely occur background noise idea preamble allows receiver detect incoming message receiver us preamble signal calibrate threshold constitutes threshold used decode data chunk sent nextthe threshold considered data chunk calculated threshold min min max data chunkwhen preamble received receiver start detecting next bit data data ever sent back sender could compared satellite tv transmission data sent half rate preamble preamble bit data look like receiveronce bit data received receiver wait next preamble arrive signifies arrival datadealing noiseas probably tell nt going reliable way send information noise virtual processor could corrupt overall message easiest solution increase transmission power signal host sending signal access one virtual cpu send signal multiple core time another way combat noise decrease frequency make transmission slower reliableif want send lot data could build checksum even data redundancy using forward error correction something done proof concept imagine nt difficult implementdemo pocin case nt access esxesxi environment made quick video poc python code used videoconclusionswhether disk memory cpu two system unrestricted access physical resource come surprise probably communicate using medium way prevent appears physically limit amount resource available machine case cpu assigning separate core machine governing machine clock speed
